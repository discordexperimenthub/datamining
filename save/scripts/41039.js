(this.webpackChunkdiscord_app = this.webpackChunkdiscord_app || []).push([
  ["41039"],
  {
    662697: function (e, t, n) {
      let i = {};
      (i.isSafari = function () {
        var e, t, n;
        return (
          (null === (e = navigator) || void 0 === e ? void 0 : e.vendor) &&
          (null === (n = navigator) || void 0 === n
            ? void 0
            : null === (t = n.vendor) || void 0 === t
              ? void 0
              : t.indexOf("Apple")) > -1 &&
          navigator.userAgent &&
          -1 == navigator.userAgent.indexOf("CriOS") &&
          -1 == navigator.userAgent.indexOf("FxiOS")
        );
      }),
        (i.isMobile = function () {
          var e, t;
          let n =
            navigator.userAgent ||
            (null === (e = navigator) || void 0 === e ? void 0 : e.vendor) ||
            (null === (t = window) || void 0 === t ? void 0 : t.opera);
          return (
            /iPhone|iPad|iPod|Android|IEMobile|Windows Phone|BlackBerry|webOS|Opera Mini|Nexus 7|Nexus 10|KFAPWI/i.test(
              n
            ) ||
            /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
              n
            ) ||
            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
              n.substr(0, 4)
            )
          );
        }),
        (e.exports = function () {
          return !(0, i.isSafari)() && !(0, i.isMobile)();
        });
    },
    20860: function (e, t, n) {
      var i = {
        "./bg.png": "585337",
        "./cs.png": "83076",
        "./da.png": "228351",
        "./de.png": "96895",
        "./el.png": "954635",
        "./en-GB.png": "883638",
        "./en-US.png": "969851",
        "./es-419.png": "359765",
        "./es-ES.png": "98918",
        "./fi.png": "110775",
        "./fr.png": "128393",
        "./hi.png": "79794",
        "./hr.png": "988195",
        "./hu.png": "366988",
        "./it.png": "583917",
        "./ja.png": "895466",
        "./ko.png": "879503",
        "./lt.png": "370757",
        "./nl.png": "461053",
        "./no.png": "871682",
        "./pl.png": "140693",
        "./pt-BR.png": "260276",
        "./ro.png": "929905",
        "./ru.png": "830793",
        "./sv-SE.png": "841801",
        "./th.png": "862866",
        "./tr.png": "567215",
        "./uk.png": "142242",
        "./vi.png": "610487",
        "./zh-CN.png": "986521",
        "./zh-TW.png": "204827",
      };
      function r(e) {
        return n(s(e));
      }
      function s(e) {
        if (!n.o(i, e)) {
          var t = Error("Cannot find module '" + e + "'");
          throw ((t.code = "MODULE_NOT_FOUND"), t);
        }
        return i[e];
      }
      (r.id = '"20860"'),
        (r.keys = function () {
          return Object.keys(i);
        }),
        (r.resolve = s),
        (e.exports = r);
    },
    501617: function (e, t, n) {
      "use strict";
      e.exports = n.p + "f9421475665f33dc5794.jpg";
    },
    324241: function (e, t, n) {
      "use strict";
      e.exports = n.p + "4b32630453d18bff5506.png";
    },
    668205: function (e, t, n) {
      "use strict";
      e.exports = n.p + "f03e2d8e19438cceaad7.svg";
    },
    648553: function (e, t, n) {
      "use strict";
      e.exports = n.p + "6ba45e61582094de4e21.svg";
    },
    307757: function (e, t, n) {
      "use strict";
      e.exports = n.p + "5d6a5e9d7d77ac29116e.png";
    },
    548520: function (e, t, n) {
      "use strict";
      e.exports = n.p + "1697e65656e69f0dbdbd.png";
    },
    445724: function (e, t, n) {
      "use strict";
      e.exports = n.p + "1aba1e971aefb18a265e.png";
    },
    170382: function (e, t, n) {
      "use strict";
      e.exports = n.p + "529459de1dc4c2424a03.png";
    },
    593285: function (e, t, n) {
      "use strict";
      e.exports = n.p + "edda5bb474d4135b4296.png";
    },
    575603: function (e, t, n) {
      "use strict";
      e.exports = n.p + "c722e74f644b4a758b11.png";
    },
    799987: function (e, t, n) {
      "use strict";
      e.exports = n.p + "a8ab83a90b1856ae6ecc.png";
    },
    181815: function (e, t, n) {
      "use strict";
      e.exports = n.p + "71ceda6839bdcb3deff6.png";
    },
    521089: function (e, t, n) {
      "use strict";
      e.exports = n.p + "68f4ea933bd6e83f5d5a.png";
    },
    366942: function (e, t, n) {
      "use strict";
      e.exports = n.p + "118ab41237408c505a1b.png";
    },
    125707: function (e, t, n) {
      "use strict";
      e.exports = n.p + "641edf794e368d5e8180.png";
    },
    785744: function (e, t, n) {
      "use strict";
      e.exports = n.p + "17cfee7f5b1fe33ae18d.png";
    },
    297384: function (e, t, n) {
      "use strict";
      e.exports = n.p + "77db8e6b075e88104713.png";
    },
    573220: function (e, t, n) {
      "use strict";
      e.exports = n.p + "4e42f7235fc2b50c0d85.png";
    },
    265284: function (e, t, n) {
      "use strict";
      e.exports = n.p + "7b3659653253c3f9fcbd.png";
    },
    320436: function (e, t, n) {
      "use strict";
      e.exports = n.p + "2a71729f81632051029f.svg";
    },
    363577: function (e, t, n) {
      "use strict";
      e.exports = n.p + "a94c2d78167f553a17f7.png";
    },
    194175: function (e, t, n) {
      "use strict";
      e.exports = n.p + "f8a931382dfd43511663.png";
    },
    35024: function (e, t, n) {
      "use strict";
      e.exports = n.p + "27b152e2ddb3acb76a92.svg";
    },
    159142: function (e, t, n) {
      "use strict";
      e.exports = n.p + "00c76084e1093f9ea889.png";
    },
    671223: function (e, t, n) {
      "use strict";
      e.exports = n.p + "e549d55ee6158479e2de.svg";
    },
    211689: function (e, t, n) {
      "use strict";
      e.exports = n.p + "342f1fa88c1e9eb7d685.png";
    },
    350043: function (e, t, n) {
      "use strict";
      e.exports = n.p + "bd96553546da26a4c70b.svg";
    },
    698833: function (e, t, n) {
      "use strict";
      e.exports = n.p + "bd96553546da26a4c70b.svg";
    },
    14366: function (e, t, n) {
      "use strict";
      e.exports = n.p + "a0eec7ce800d5e8f7a7c.png";
    },
    286611: function (e, t, n) {
      "use strict";
      e.exports = n.p + "1aee697591ca8309583c.svg";
    },
    994873: function (e, t, n) {
      "use strict";
      e.exports = n.p + "62fcac729728135080d2.png";
    },
    376998: function (e, t, n) {
      "use strict";
      e.exports = n.p + "8cef483d85d7337d2a62.svg";
    },
    396128: function (e, t, n) {
      "use strict";
      e.exports = n.p + "4dd44f1f2d9d4be0cc63.png";
    },
    497894: function (e, t, n) {
      "use strict";
      e.exports = n.p + "f22d0f157e5b64710577.svg";
    },
    1308: function (e, t, n) {
      "use strict";
      e.exports = n.p + "0445c89ecb480f2a1a55.png";
    },
    746621: function (e, t, n) {
      "use strict";
      e.exports = n.p + "9993a343c4facfd14f9f.svg";
    },
    879157: function (e, t, n) {
      "use strict";
      e.exports = n.p + "35c3598bd9942c1025a7.png";
    },
    870064: function (e, t, n) {
      "use strict";
      e.exports = n.p + "dacb3f3794eb5252e56f.svg";
    },
    259168: function (e, t, n) {
      "use strict";
      e.exports = n.p + "f217682409870bbd0836.png";
    },
    735638: function (e, t, n) {
      "use strict";
      e.exports = n.p + "bc893c6d474bc13bf8a4.svg";
    },
    321223: function (e, t, n) {
      "use strict";
      e.exports = n.p + "a7abeaf389161e8af518.png";
    },
    94470: function (e, t, n) {
      "use strict";
      e.exports = n.p + "5617849b51454655bcf1.svg";
    },
    646994: function (e, t, n) {
      "use strict";
      e.exports = n.p + "2ba3f6ae083c107778b8.png";
    },
    375518: function (e, t, n) {
      "use strict";
      e.exports = n.p + "767d18d4d02d9a2e1ab1.svg";
    },
    299059: function (e, t, n) {
      "use strict";
      e.exports = n.p + "1ea986c64731860da168.png";
    },
    496955: function (e, t, n) {
      "use strict";
      e.exports = n.p + "ec048b4bbcf47d45c7f6.svg";
    },
    612315: function (e, t, n) {
      "use strict";
      e.exports = n.p + "589bcc78c02a11c07b3b.png";
    },
    152071: function (e, t, n) {
      "use strict";
      e.exports = n.p + "f330962c0eb993878478.svg";
    },
    530354: function (e, t, n) {
      "use strict";
      e.exports = n.p + "c4707432ef3414ccffd3.png";
    },
    667083: function (e, t, n) {
      "use strict";
      e.exports = n.p + "4d004ea91b2a1cd534cf.svg";
    },
    925382: function (e, t, n) {
      "use strict";
      e.exports = n.p + "c1637fa995b3054b92c1.png";
    },
    509949: function (e, t, n) {
      "use strict";
      e.exports = n.p + "a63af69b0b1958fabf1a.svg";
    },
    347775: function (e, t, n) {
      "use strict";
      e.exports = n.p + "993cc4012ce9f9b8e83f.png";
    },
    524855: function (e, t, n) {
      "use strict";
      e.exports = n.p + "c44f32fe60d6657fda9f.svg";
    },
    770624: function (e, t, n) {
      "use strict";
      e.exports = n.p + "d94334b9983e676643d1.png";
    },
    209560: function (e, t, n) {
      "use strict";
      e.exports = n.p + "dcd6afd78d21cd3980ab.svg";
    },
    322246: function (e, t, n) {
      "use strict";
      e.exports = n.p + "18e328090e441ee508bb.png";
    },
    154849: function (e, t, n) {
      "use strict";
      e.exports = n.p + "1b0b60300e4f234337be.svg";
    },
    964854: function (e, t, n) {
      "use strict";
      e.exports = n.p + "fa615b5c168c88e54a15.png";
    },
    895661: function (e, t, n) {
      "use strict";
      e.exports = n.p + "75577d21ad1497348a3c.svg";
    },
    373338: function (e, t, n) {
      "use strict";
      e.exports = n.p + "c6833beabfb84014185b.png";
    },
    977001: function (e, t, n) {
      "use strict";
      e.exports = n.p + "cc912bf56af0fd3bc301.svg";
    },
    479111: function (e, t, n) {
      "use strict";
      e.exports = n.p + "7ed3c5a97238a23cb662.png";
    },
    592466: function (e, t, n) {
      "use strict";
      e.exports = n.p + "9210accea56102b27039.svg";
    },
    300525: function (e, t, n) {
      "use strict";
      e.exports = n.p + "7886764ea4a20e975460.png";
    },
    704777: function (e, t, n) {
      "use strict";
      e.exports = n.p + "d521f9c27b53f7a779e6.svg";
    },
    501653: function (e, t, n) {
      "use strict";
      e.exports = n.p + "982cb6e35a9ac7fdd64b.png";
    },
    940593: function (e, t, n) {
      "use strict";
      e.exports = n.p + "2794bf75be23707f7947.svg";
    },
    768935: function (e, t, n) {
      "use strict";
      e.exports = n.p + "a68ff7e6034b896c58db.png";
    },
    869872: function (e, t, n) {
      "use strict";
      e.exports = n.p + "2eed3033a8780ccf636f.svg";
    },
    629132: function (e, t, n) {
      "use strict";
      e.exports = n.p + "168e981f36abde84b10d.png";
    },
    301098: function (e, t, n) {
      "use strict";
      e.exports = n.p + "d76473a750af3dce43b9.svg";
    },
    992221: function (e, t, n) {
      "use strict";
      e.exports = n.p + "98e6b7218970562d1ce0.png";
    },
    894025: function (e, t, n) {
      "use strict";
      e.exports = n.p + "603007783abe09a10ae5.svg";
    },
    731368: function (e, t, n) {
      "use strict";
      e.exports = n.p + "32bba0abbf7d086814d2.png";
    },
    645496: function (e, t, n) {
      "use strict";
      e.exports = n.p + "9ee6d9ab5420113bca0b.svg";
    },
    561050: function (e, t, n) {
      "use strict";
      e.exports = n.p + "626f7ddce038206bd639.png";
    },
    630528: function (e, t, n) {
      "use strict";
      e.exports = n.p + "7231645d01e0b14f58cc.svg";
    },
    618077: function (e, t, n) {
      "use strict";
      e.exports = n.p + "16085d3c07fa01281190.png";
    },
    662418: function (e, t, n) {
      "use strict";
      e.exports = n.p + "31076feac041da4dd070.svg";
    },
    777626: function (e, t, n) {
      "use strict";
      e.exports = n.p + "07e1a53bc84c6231f92f.png";
    },
    566035: function (e, t, n) {
      "use strict";
      e.exports = n.p + "d46756f782e19355e483.svg";
    },
    877414: function (e, t, n) {
      "use strict";
      e.exports = n.p + "46ab48b39d1fc32713b8.png";
    },
    309663: function (e, t, n) {
      "use strict";
      e.exports = n.p + "100f3a82bf746402d6ac.svg";
    },
    196135: function (e, t, n) {
      "use strict";
      e.exports = n.p + "1a0c571e8d650ca3f54f.png";
    },
    793866: function (e, t, n) {
      "use strict";
      e.exports = n.p + "822dc9e43f7ee79edd0e.svg";
    },
    482311: function (e, t, n) {
      "use strict";
      e.exports = n.p + "bb3d1d12d5e2ce557119.png";
    },
    204844: function (e, t, n) {
      "use strict";
      e.exports = n.p + "715a8b0f690da5b34fbb.svg";
    },
    115658: function (e, t, n) {
      "use strict";
      e.exports = n.p + "30c4ac099a8b53735946.png";
    },
    729332: function (e, t, n) {
      "use strict";
      e.exports = n.p + "7ccb5f56c32c63e01c04.svg";
    },
    288589: function (e, t, n) {
      "use strict";
      e.exports = n.p + "86bda9e409f43d56e197.png";
    },
    31439: function (e, t, n) {
      "use strict";
      e.exports = n.p + "a675673d2271538be738.svg";
    },
    122630: function (e, t, n) {
      "use strict";
      e.exports = n.p + "6302c9d4ad9d5c4a3376.png";
    },
    372786: function (e, t, n) {
      "use strict";
      e.exports = n.p + "57a3fe2c0e62e98937fd.svg";
    },
    961232: function (e, t, n) {
      "use strict";
      e.exports = n.p + "ad2246e21de708819ad4.png";
    },
    387628: function (e, t, n) {
      "use strict";
      e.exports = n.p + "6f0eed9e1276f69c9127.svg";
    },
    980576: function (e, t, n) {
      "use strict";
      e.exports = n.p + "59e8df9657fe6fc725dc.png";
    },
    552995: function (e, t, n) {
      "use strict";
      e.exports = n.p + "f47485602365c946fa52.svg";
    },
    483819: function (e, t, n) {
      "use strict";
      e.exports = n.p + "f8d31171246dfaf90b12.png";
    },
    955307: function (e, t, n) {
      "use strict";
      e.exports = n.p + "cc52988849f86e1c85f5.svg";
    },
    192473: function (e, t, n) {
      "use strict";
      e.exports = n.p + "59e8df9657fe6fc725dc.png";
    },
    312139: function (e, t, n) {
      "use strict";
      e.exports = n.p + "f47485602365c946fa52.svg";
    },
    272378: function (e, t, n) {
      "use strict";
      e.exports = n.p + "9a15d086141be29d9fcd.png";
    },
    599004: function (e, t, n) {
      "use strict";
      e.exports = n.p + "bcd90f795bdc48050bce.png";
    },
    713106: function (e, t, n) {
      "use strict";
      e.exports = n.p + "fe9652309ef98c6f358e.svg";
    },
    956204: function (e, t, n) {
      "use strict";
      e.exports = n.p + "44c2a9c4e45973e395c0.png";
    },
    946662: function (e, t, n) {
      "use strict";
      e.exports = n.p + "496af98033e8f20540ec.svg";
    },
    299893: function (e, t, n) {
      "use strict";
      e.exports = n.p + "0ca73c69572a9c477cce.png";
    },
    997771: function (e, t, n) {
      "use strict";
      e.exports = n.p + "d8deaf4c4cbec4b8f9d6.svg";
    },
    255284: function (e, t, n) {
      "use strict";
      e.exports = n.p + "3c33877770f5210c5c01.png";
    },
    223406: function (e, t, n) {
      "use strict";
      e.exports = n.p + "5db6f2b6add954cbf0ea.svg";
    },
    523403: function (e, t, n) {
      "use strict";
      e.exports = n.p + "ca47ceaf07c3f567d239.png";
    },
    153846: function (e, t, n) {
      "use strict";
      e.exports = n.p + "6e62e16e7b4b8d34906b.svg";
    },
    145159: function (e, t, n) {
      "use strict";
      e.exports = n.p + "77df90635e4555438f29.png";
    },
    994912: function (e, t, n) {
      "use strict";
      e.exports = n.p + "0cbfee20a3f2cd0dd313.svg";
    },
    348044: function (e, t, n) {
      "use strict";
      e.exports = n.p + "e4f93ded986b1edf0780.png";
    },
    36409: function (e, t, n) {
      "use strict";
      e.exports = n.p + "07e45cb4391af2b29544.gif";
    },
    899676: function (e, t, n) {
      "use strict";
      e.exports = n.p + "worklet.84fc546a1c8906aa08ae.js";
    },
    585337: function (e, t, n) {
      "use strict";
      e.exports = n.p + "9ed82b1009546fcdce94.png";
    },
    83076: function (e, t, n) {
      "use strict";
      e.exports = n.p + "3645e4880471a1cb2ef3.png";
    },
    228351: function (e, t, n) {
      "use strict";
      e.exports = n.p + "49a46c6c4e39c0f2980c.png";
    },
    96895: function (e, t, n) {
      "use strict";
      e.exports = n.p + "c1e2b9966bf5679d6785.png";
    },
    954635: function (e, t, n) {
      "use strict";
      e.exports = n.p + "ee4e27b20df2f1ee061a.png";
    },
    883638: function (e, t, n) {
      "use strict";
      e.exports = n.p + "df94c77c24ce0bf9257a.png";
    },
    969851: function (e, t, n) {
      "use strict";
      e.exports = n.p + "c69f95beeb3b959480c7.png";
    },
    359765: function (e, t, n) {
      "use strict";
      e.exports = n.p + "ae1172ee75120f6470db.png";
    },
    98918: function (e, t, n) {
      "use strict";
      e.exports = n.p + "39c1f98aa58da01828bc.png";
    },
    110775: function (e, t, n) {
      "use strict";
      e.exports = n.p + "360c5393b176b89a80b2.png";
    },
    128393: function (e, t, n) {
      "use strict";
      e.exports = n.p + "02f00e292427df187473.png";
    },
    79794: function (e, t, n) {
      "use strict";
      e.exports = n.p + "32bf870bd738ea91b40b.png";
    },
    988195: function (e, t, n) {
      "use strict";
      e.exports = n.p + "60230733afb5ec9d216e.png";
    },
    366988: function (e, t, n) {
      "use strict";
      e.exports = n.p + "bdb9cb62cf228d8c7e8b.png";
    },
    583917: function (e, t, n) {
      "use strict";
      e.exports = n.p + "032e213eb90d03e9b664.png";
    },
    895466: function (e, t, n) {
      "use strict";
      e.exports = n.p + "ac09015c0d16e8f9d998.png";
    },
    879503: function (e, t, n) {
      "use strict";
      e.exports = n.p + "b2aa268fc6d269510d78.png";
    },
    370757: function (e, t, n) {
      "use strict";
      e.exports = n.p + "5cb0e8342330bb00df1e.png";
    },
    461053: function (e, t, n) {
      "use strict";
      e.exports = n.p + "3a14ded960d17104f8bb.png";
    },
    871682: function (e, t, n) {
      "use strict";
      e.exports = n.p + "8d195d439992f021553f.png";
    },
    140693: function (e, t, n) {
      "use strict";
      e.exports = n.p + "939719998d532fdbd617.png";
    },
    260276: function (e, t, n) {
      "use strict";
      e.exports = n.p + "2fd26ca0b1eadb939f76.png";
    },
    929905: function (e, t, n) {
      "use strict";
      e.exports = n.p + "4dc5d2c84c6e356480e7.png";
    },
    830793: function (e, t, n) {
      "use strict";
      e.exports = n.p + "96fa7dc7a19b82a35e7f.png";
    },
    841801: function (e, t, n) {
      "use strict";
      e.exports = n.p + "8c216e62d6eff5abd769.png";
    },
    862866: function (e, t, n) {
      "use strict";
      e.exports = n.p + "9392f8a382fb7214fba3.png";
    },
    567215: function (e, t, n) {
      "use strict";
      e.exports = n.p + "bbb27bea4010dc16e481.png";
    },
    142242: function (e, t, n) {
      "use strict";
      e.exports = n.p + "c2e8d550ae9767b4484a.png";
    },
    610487: function (e, t, n) {
      "use strict";
      e.exports = n.p + "488b7bc13474940f2fcf.png";
    },
    986521: function (e, t, n) {
      "use strict";
      e.exports = n.p + "ab5a4ef3dfbb10fab580.png";
    },
    204827: function (e, t, n) {
      "use strict";
      e.exports = n.p + "1461c09d58fe586734ce.png";
    },
    246129: function (e, t, n) {},
    404118: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = n("477566").default;
    },
    157552: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          fetchBranches: function () {
            return d;
          },
          fetchBranchesForApplication: function () {
            return f;
          },
        }),
        n("222007");
      var i = n("917351"),
        r = n.n(i),
        s = n("872717"),
        a = n("913144"),
        o = n("807085"),
        l = n("686470"),
        u = n("602043"),
        c = n("49111");
      async function d() {
        let e =
          arguments.length > 0 && void 0 !== arguments[0]
            ? arguments[0]
            : l.default.entitledBranchIds;
        if (!(0, u.isSupportedPlatform)() || 0 === e.length) return [];
        let t = r.chunk(e, 50);
        try {
          let e = t.map(async e => {
              let t = await s.default.post({
                url: c.Endpoints.APPLICATION_BRANCHES,
                body: { branch_ids: e },
                oldFormErrors: !0,
              });
              return t.body.map(o.default.createFromServer);
            }),
            n = await Promise.all(e),
            i = r.flatten(n);
          return (
            a.default.dispatch({
              type: "APPLICATION_BRANCHES_FETCH_SUCCESS",
              branches: i,
            }),
            i
          );
        } catch (t) {
          return (
            a.default.dispatch({
              type: "APPLICATION_BRANCHES_FETCH_FAIL",
              branchIds: e,
            }),
            []
          );
        }
      }
      async function f(e) {
        try {
          let t = await s.default.get({
              url: c.Endpoints.OWNED_APPLICATION_BRANCHES(e),
              oldFormErrors: !0,
            }),
            n = Array.isArray(t.body)
              ? t.body.map(o.default.createFromServer)
              : [];
          return (
            a.default.dispatch({
              type: "OWNED_APPLICATION_BRANCHES_FETCH_SUCCESS",
              applicationId: e,
              branches: n,
            }),
            n
          );
        } catch (t) {
          return (
            a.default.dispatch({
              type: "OWNED_APPLICATION_BRANCHES_FETCH_FAIL",
              applicationId: e,
            }),
            []
          );
        }
      }
    },
    71313: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          fetchLiveBuild: function () {
            return _;
          },
        });
      var i = n("872717"),
        r = n("398183"),
        s = n("862337"),
        a = n("913144"),
        o = n("915639"),
        l = n("686470"),
        u = n("645672"),
        c = n("718517"),
        d = n("49111");
      let f = 10 * c.default.Millis.MINUTE,
        E = 10 * c.default.Millis.MINUTE,
        p = 1 * c.default.Millis.MINUTE,
        h = {};
      async function _(e, t) {
        let n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
          c = o.default.locale;
        return (
          a.default.dispatch({
            type: "APPLICATION_BUILD_FETCH_START",
            applicationId: e,
            branchId: t,
            locale: c,
          }),
          n && (await (0, r.sleep)(Math.random() * p)),
          i.default
            .get({
              url: d.Endpoints.APPLICATION_LIVE_BUILD(e, t),
              query: { platform: (0, u.getBuildPlatform)(), locale: c },
              oldFormErrors: !0,
            })
            .then(
              n => {
                let i = n.body;
                if (0 === i.manifests.length) {
                  a.default.dispatch({
                    type: "APPLICATION_BUILD_NOT_FOUND",
                    applicationId: e,
                    branchId: t,
                  });
                  return;
                }
                a.default.dispatch({
                  type: "APPLICATION_BUILD_FETCH_SUCCESS",
                  applicationId: e,
                  branchId: t,
                  locale: c,
                  build: i,
                });
              },
              n => {
                let { status: i } = n;
                if (404 === i)
                  a.default.dispatch({
                    type: "APPLICATION_BUILD_NOT_FOUND",
                    applicationId: e,
                    branchId: t,
                  });
                else {
                  var r, o;
                  (r = e),
                    null == h[(o = t)] && (h[o] = new s.Timeout()),
                    h[o].start(f + Math.random() * E, () => {
                      let e = l.default.getLibraryApplication(r, o);
                      null != e && _(r, o);
                    });
                }
              }
            )
        );
      }
    },
    697796: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          handoffBegin: function () {
            return r;
          },
          handoffEnd: function () {
            return s;
          },
          handoffFromApp: function () {
            return a;
          },
          handoffUnavailable: function () {
            return o;
          },
          handoffSetUser: function () {
            return l;
          },
        });
      var i = n("913144");
      function r() {
        let e =
          arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : 1e4;
        i.default.dispatch({ type: "BROWSER_HANDOFF_BEGIN", timeout: e });
      }
      function s(e, t) {
        i.default.dispatch({
          type: "BROWSER_HANDOFF_END",
          handoffToken: e,
          fingerprint: t,
        });
      }
      function a(e) {
        let {
          handoffKey: t,
          handoffToken: n,
          handoffSource: r,
          timeout: s = 1e4,
        } = e;
        i.default.dispatch({
          type: "BROWSER_HANDOFF_FROM_APP",
          handoffKey: t,
          handoffToken: n,
          handoffSource: r,
          timeout: s,
        });
      }
      function o() {
        i.default.dispatch({ type: "BROWSER_HANDOFF_UNAVAILABLE" });
      }
      function l(e) {
        i.default.dispatch({ type: "BROWSER_HANDOFF_SET_USER", user: e });
      }
    },
    527015: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          setDeveloperOptionSettings: function () {
            return r;
          },
        });
      var i = n("913144");
      function r(e) {
        i.default.dispatch({
          type: "DEVELOPER_OPTIONS_UPDATE_SETTINGS",
          settings: e,
        });
      }
    },
    190017: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          init: function () {
            return S;
          },
          destroy: function () {
            return m;
          },
          installApplication: function () {
            return T;
          },
          repairApplication: function () {
            return g;
          },
          updateApplication: function () {
            return I;
          },
          uninstallApplication: function () {
            return C;
          },
          resume: function () {
            return v;
          },
          pause: function () {
            return A;
          },
          moveUp: function () {
            return R;
          },
          cancel: function () {
            return N;
          },
          removeFinished: function () {
            return O;
          },
          completeRepair: function () {
            return D;
          },
          completeInstall: function () {
            return y;
          },
        }),
        n("70102");
      var i = n("872717"),
        r = n("913144"),
        s = n("299285"),
        a = n("393414"),
        o = n("845579"),
        l = n("568307"),
        u = n("98328"),
        c = n("599110"),
        d = n("645672"),
        f = n("269180"),
        E = n("152723"),
        p = n("71313"),
        h = n("49111"),
        _ = n("782340");
      function S(e, t) {
        E.default.init({
          userToken: e,
          userId: t,
          installPaths: u.default.installationPaths,
          platform: (0, d.getBuildPlatform)(),
          stateCallback: e => {
            r.default.dispatch({
              type: "DISPATCH_APPLICATION_STATE_UPDATE",
              state: e,
            });
          },
          errorCallback: e => {
            r.default.dispatch({
              type: "DISPATCH_APPLICATION_ERROR",
              error: e,
            });
          },
        });
      }
      function m() {
        E.default.destroy();
      }
      function T(e) {
        let {
          application: t,
          branchId: n,
          buildId: i,
          manifestIds: s,
          installationPath: a,
          analyticsLocation: o,
        } = e;
        E.default.setTargetManifest({
          applicationId: t.id,
          applicationName: t.name,
          applicationIcon: t.icon,
          branchId: n,
          buildId: i,
          manifestIds: s,
          installationPath: a,
        }),
          r.default.dispatch({
            type: "DISPATCH_APPLICATION_INSTALL",
            applicationId: t.id,
            branchId: n,
            installationPath: a,
          }),
          c.default.track(h.AnalyticEvents.LIBRARY_INSTALL_INITIATED, {
            application_id: t.id,
            application_name: t.name,
            sku_id: t.primarySkuId,
            location: o,
          });
      }
      function g(e, t, n) {
        (0, p.fetchLiveBuild)(e.id, t).then(() => {
          r.default.dispatch({
            type: "DISPATCH_APPLICATION_REPAIR",
            applicationId: e.id,
            branchId: t,
          });
        }),
          c.default.track(h.AnalyticEvents.LIBRARY_REPAIR_INITIATED, {
            application_id: e.id,
            application_name: e.name,
            sku_id: e.primarySkuId,
            location: n,
          });
      }
      function I(e, t, n, i) {
        let s = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
        !(function (e, t, n, i) {
          if (l.default.getRunningDiscordApplicationIds().includes(e.id))
            return;
          let r = u.default.getInstallationPath(e.id, t);
          if (null == r)
            throw Error(
              "Missing installation path for application: "
                .concat(e.id, " ")
                .concat(t)
            );
          E.default.setTargetManifest({
            applicationId: e.id,
            applicationName: e.name,
            applicationIcon: e.icon,
            branchId: t,
            buildId: n,
            manifestIds: i,
            installationPath: r,
          });
        })(e, t, n, i),
          r.default.dispatch({
            type: "DISPATCH_APPLICATION_UPDATE",
            applicationId: e.id,
            branchId: t,
            automatic: s,
          });
      }
      function C(e, t, n) {
        let i = s.default.getApplication(e);
        null != i &&
          (f.default.removeShortcuts(i.name),
          c.default.track(h.AnalyticEvents.LIBRARY_UNINSTALL_INITIATED, {
            application_id: i.id,
            application_name: i.name,
            sku_id: i.primarySkuId,
            location: n,
          })),
          E.default.uninstall(e, t),
          r.default.dispatch({
            type: "DISPATCH_APPLICATION_UNINSTALL",
            applicationId: e,
            branchId: t,
          });
      }
      function v() {
        E.default.resume();
      }
      function A() {
        E.default.pause();
      }
      function R(e, t) {
        r.default.dispatch({
          type: "DISPATCH_APPLICATION_MOVE_UP",
          applicationId: e,
          branchId: t,
        });
      }
      function N(e, t) {
        E.default.cancel(e, t),
          r.default.dispatch({
            type: "DISPATCH_APPLICATION_CANCEL",
            applicationId: e,
            branchId: t,
          });
      }
      function O(e, t) {
        r.default.dispatch({
          type: "DISPATCH_APPLICATION_REMOVE_FINISHED",
          applicationId: e,
          branchId: t,
        });
      }
      function D(e, t) {
        let n = s.default.getApplication(e);
        null != n &&
          f.default.createShortcuts(
            o.InstallShortcutDesktop.getSetting(),
            o.InstallShortcutStartMenu.getSetting(),
            n.name,
            n.id,
            t.installPath
          );
      }
      function y(e, t) {
        let r = s.default.getApplication(e);
        i.default.post({
          url: h.Endpoints.LIBRARY_APPLICATION_INSTALLED(e, e),
          oldFormErrors: !0,
        }),
          null != r &&
            (f.default.createShortcuts(
              o.InstallShortcutDesktop.getSetting(),
              o.InstallShortcutStartMenu.getSetting(),
              r.name,
              r.id,
              t.installPath
            ),
            n
              .el("193990")
              .then(n.bind(n, "193990"))
              .then(e => {
                let { default: t } = e;
                t.showNotification(
                  r.getIconURL(64),
                  _.default.Messages
                    .GAME_LIBRARY_NOTIFICATION_GAME_INSTALLED_TITLE,
                  _.default.Messages.GAME_LIBRARY_NOTIFICATION_GAME_INSTALLED_BODY.format(
                    { name: r.name }
                  ),
                  { notif_type: "Game Library Game Installed" },
                  {
                    onClick: () =>
                      (0, a.transitionTo)(h.Routes.APPLICATION_LIBRARY),
                    omitViewTracking: !0,
                  }
                );
              }));
      }
    },
    363658: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        });
      var i = n("913144"),
        r = {
          clearVADWarning() {
            i.default.dispatch({ type: "PERMISSION_CLEAR_VAD_WARNING" });
          },
          clearSuppressWarning() {
            let e =
              arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            i.default.dispatch({
              type: "PERMISSION_CLEAR_SUPPRESS_WARNING",
              forever: e,
            });
          },
          clearPTTAdminWarning() {
            i.default.dispatch({ type: "PERMISSION_CLEAR_PTT_ADMIN_WARNING" });
          },
          requestElevatedProcess(e) {
            i.default.dispatch({
              type: "PERMISSION_REQUEST_ELEVATED_PROCESS",
              pid: e,
            });
          },
          clearElevatedProcess() {
            i.default.dispatch({ type: "PERMISSION_CLEAR_ELEVATED_PROCESS" });
          },
          continueNonelevatedProcess(e) {
            i.default.dispatch({
              type: "PERMISSION_CONTINUE_NONELEVATED_PROCESS",
              pid: e,
            });
          },
        };
    },
    673777: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          open: function () {
            return s;
          },
          close: function () {
            return a;
          },
          openReplay: function () {
            return o;
          },
          setSection: function () {
            return l;
          },
          setShouldRecordNextConnection: function () {
            return u;
          },
          chooseReplayPath: function () {
            return c;
          },
        });
      var i = n("913144"),
        r = n("49671");
      function s(e) {
        i.default.dispatch({ type: "RTC_DEBUG_MODAL_OPEN", section: e }),
          i.default.dispatch({ type: "RTC_DEBUG_POPOUT_WINDOW_OPEN" });
      }
      function a() {
        i.default.dispatch({ type: "RTC_DEBUG_MODAL_CLOSE" });
      }
      function o() {
        i.default.dispatch({ type: "RTC_DEBUG_MODAL_OPEN_REPLAY" });
      }
      function l(e) {
        i.default.dispatch({ type: "RTC_DEBUG_MODAL_SET_SECTION", section: e });
      }
      function u(e) {
        i.default.dispatch({ type: "RTC_DEBUG_SET_RECORDING_FLAG", value: e });
      }
      function c() {
        r.default.fileManager
          .showOpenDialog({
            filters: [{ name: "All Files", extensions: ["*"] }],
          })
          .then(e => {
            let t = 0 === e.length ? "" : e[0];
            i.default.dispatch({
              type: "RTC_DEBUG_MODAL_OPEN_REPLAY_AT_PATH",
              path: t,
            });
          });
      }
    },
    452804: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          saveGuildFolders: function () {
            return E;
          },
          saveClientTheme: function () {
            return h;
          },
          default: function () {
            return _;
          },
        });
      var i = n("151426"),
        r = n("750028"),
        s = n("819855"),
        a = n("913144"),
        o = n("714657"),
        l = n("737292"),
        u = n("161778"),
        c = n("845579"),
        d = n("872173"),
        f = n("116319");
      function E(e) {
        return d.PreloadedUserSettingsActionCreators.updateAsync(
          "guildFolders",
          t => {
            t.folders = e.map(e => {
              let t = i.GuildFolder.create({ guildIds: e.guildIds });
              return (
                null != e.folderId &&
                  (t.id = r.Int64Value.create({ value: String(e.folderId) })),
                null != e.folderColor &&
                  (t.color = r.UInt64Value.create({
                    value: String(e.folderColor),
                  })),
                null != e.folderName &&
                  "" !== e.folderName &&
                  (t.name = r.StringValue.create({
                    value: String(e.folderName),
                  })),
                t
              );
            });
          },
          d.UserSettingsDelay.SLOW_USER_ACTION
        );
      }
      function p(e) {
        return (0, s.isThemeLight)(e) ? i.Theme.LIGHT : i.Theme.DARK;
      }
      function h(e) {
        let { backgroundGradientPresetId: t, theme: n } = e,
          i =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : d.UserSettingsDelay.INFREQUENT_USER_ACTION;
        if (
          (a.default.dispatch({
            type: "UNSYNCED_USER_SETTINGS_UPDATE",
            settings: {
              useSystemTheme:
                "system" === n ? f.SystemThemeState.ON : f.SystemThemeState.OFF,
            },
          }),
          a.default.dispatch({
            type: "SELECTIVELY_SYNCED_USER_SETTINGS_UPDATE",
            changes: {
              appearance: {
                settings: {
                  clientThemeSettings: { backgroundGradientPresetId: t },
                  theme: "system" === n ? void 0 : n,
                },
              },
            },
          }),
          l.default.shouldSync("appearance"))
        )
          return d.PreloadedUserSettingsActionCreators.updateAsync(
            "appearance",
            e => {
              var i;
              (e.theme = p(n)),
                (e.clientThemeSettings = {
                  backgroundGradientPresetId:
                    null !=
                    (i = { backgroundGradientPresetId: t })
                      .backgroundGradientPresetId
                      ? r.UInt32Value.create({
                          value: i.backgroundGradientPresetId,
                        })
                      : void 0,
                });
            },
            i
          );
      }
      var _ = {
        overrideLocale(e) {
          a.default.dispatch({
            type: "USER_SETTINGS_LOCALE_OVERRIDE",
            locale: e,
          });
        },
        updatedUnsyncedSettings(e) {
          a.default.dispatch({
            type: "UNSYNCED_USER_SETTINGS_UPDATE",
            settings: e,
          });
        },
        setShouldSyncTextSettings(e) {
          a.default.dispatch({
            type: "SELECTIVELY_SYNCED_USER_SETTINGS_UPDATE",
            changes: {
              text: {
                shouldSync: e,
                settings: e
                  ? {}
                  : {
                      inlineAttachmentMedia:
                        c.InlineAttachmentMedia.getSetting(),
                      inlineEmbedMedia: c.InlineEmbedMedia.getSetting(),
                      renderEmbeds: c.RenderEmbeds.getSetting(),
                      renderReactions: c.RenderReactions.getSetting(),
                      animateEmoji: c.AnimateEmoji.getSetting(),
                      animateStickers: c.AnimateStickers.getSetting(),
                      gifAutoPlay: c.GifAutoPlay.getSetting(),
                    },
              },
            },
          });
        },
        setShouldSyncAppearanceSettings(e) {
          var t;
          a.default.dispatch({
            type: "SELECTIVELY_SYNCED_USER_SETTINGS_UPDATE",
            changes: {
              appearance: {
                shouldSync: e,
                settings: e
                  ? {}
                  : {
                      theme: u.default.theme,
                      clientThemeSettings: {
                        backgroundGradientPresetId:
                          null === (t = o.default.gradientPreset) ||
                          void 0 === t
                            ? void 0
                            : t.id,
                      },
                      developerMode: c.DeveloperMode.getSetting(),
                    },
              },
            },
          });
        },
        applySettingsOverride(e) {
          a.default.dispatch({
            type: "USER_SETTINGS_OVERRIDE_APPLY",
            settings: e,
          });
        },
        clearSettingsOverride() {
          for (var e = arguments.length, t = Array(e), n = 0; n < e; n++)
            t[n] = arguments[n];
          a.default.dispatch({
            type: "USER_SETTINGS_OVERRIDE_CLEAR",
            settings: t,
          });
        },
        updateLocale: e =>
          d.PreloadedUserSettingsActionCreators.updateAsync(
            "localization",
            t => {
              t.locale = r.StringValue.create({ value: e });
            },
            d.UserSettingsDelay.INFREQUENT_USER_ACTION
          ),
        updateTheme(e) {
          a.default.dispatch({
            type: "SELECTIVELY_SYNCED_USER_SETTINGS_UPDATE",
            changes: { appearance: { settings: { theme: e } } },
          }),
            l.default.shouldSync("appearance") &&
              d.PreloadedUserSettingsActionCreators.updateAsync(
                "appearance",
                t => {
                  t.theme = p(e);
                },
                d.UserSettingsDelay.INFREQUENT_USER_ACTION
              );
        },
      };
    },
    477566: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("551042"),
        s = n("135230"),
        a = n("782340"),
        o = {
          show(e) {
            let {
              title: t,
              body: n,
              confirmColor: a,
              confirmText: o,
              cancelText: l,
              onConfirm: u,
              onCancel: c,
              onCloseCallback: d,
              secondaryConfirmText: f,
              onConfirmSecondary: E,
              className: p,
              titleClassName: h,
            } = e;
            (0, r.openModal)(
              e =>
                (0, i.jsx)(s.default, {
                  ...e,
                  title: t,
                  body: n,
                  confirmColor: a,
                  confirmText: o,
                  cancelText: l,
                  onConfirm: u,
                  onCancel: c,
                  secondaryConfirmText: f,
                  onConfirmSecondary: E,
                  className: p,
                  titleClassName: h,
                }),
              { onCloseCallback: d }
            );
          },
          close() {},
          confirm(e) {
            return new Promise(t => {
              this.show({
                onConfirm() {
                  t(!0);
                },
                cancelText: a.default.Messages.CANCEL,
                onCancel() {
                  t(!1);
                },
                ...e,
              });
            });
          },
        };
    },
    452453: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ContextMenuClassName: function () {
            return i;
          },
        });
      let i = "context-menu";
    },
    371642: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return f;
          },
        }),
        n("424973");
      var i = n("37983"),
        r = n("884691"),
        s = n("997921"),
        a = n("49671"),
        o = n("254490"),
        l = n("773336"),
        u = n("980134");
      function c(e) {
        let t = ["openFile"];
        e.multiple && t.push("multiSelections");
        let n = e.filters;
        a.default.fileManager
          .openFiles({ properties: t, filters: n }, u.MAX_TOTAL_ATTACHMENT_SIZE)
          .then(t => {
            let n = t.map(e => o.transformNativeFile(e));
            null != n &&
              e.onChange({
                stopPropagation: () => null,
                preventDefault: () => null,
                currentTarget: { files: n },
              });
          })
          .catch(t => {
            e.onChange({
              stopPropagation: () => null,
              preventDefault: () => null,
              currentTarget: { files: null, err: t },
            });
          });
      }
      class d extends r.Component {
        activateUploadDialogue() {
          if (null != this._ref) return this._ref.activateUploadDialogue();
        }
        setRef(e) {
          this._ref = e;
        }
        render() {
          return (0, i.jsx)(s.default, {
            ref: this.setRef,
            handleNativeClick: c,
            embedded: (0, l.isDesktop)(),
            ...this.props,
          });
        }
        constructor(e) {
          super(e),
            (this._ref = r.createRef()),
            (this.setRef = this.setRef.bind(this));
        }
      }
      var f = d;
    },
    135230: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return p;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("414456"),
        s = n.n(r),
        a = n("271841"),
        o = n("227645"),
        l = n("818810"),
        u = n("516256"),
        c = n("577776"),
        d = n("145131"),
        f = n("782340"),
        E = n("525625"),
        p = e => {
          let t,
            n,
            r,
            {
              body: p,
              cancelText: h,
              className: _,
              confirmColor: S,
              confirmText: m = f.default.Messages.OKAY,
              secondaryConfirmText: T,
              onCancel: g,
              onClose: I,
              onConfirm: C,
              onConfirmSecondary: v,
              title: A,
              transitionState: R,
              titleClassName: N,
            } = e;
          return (
            null != h &&
              "" !== h &&
              (t = (0, i.jsx)(a.Button, {
                type: "button",
                size: a.Button.Sizes.XLARGE,
                color: a.Button.Colors.PRIMARY,
                onClick: () => {
                  null == I || I(), null == g || g();
                },
                className: E.secondaryButton,
                children: h,
              })),
            null != m &&
              "" !== m &&
              (n = (0, i.jsx)(a.Button, {
                type: "submit",
                color: S,
                size: a.Button.Sizes.XLARGE,
                className: s(E.primaryButton, null != t ? E.gutter : null),
                autoFocus: !0,
                children: m,
              })),
            null != T &&
              "" !== T &&
              (r = (0, i.jsx)(o.Clickable, {
                onClick: () => {
                  null == I || I(), null == v || v();
                },
                className: E.minorContainer,
                children: (0, i.jsx)(c.Text, {
                  className: E.secondaryAction,
                  variant: "text-xs/normal",
                  children: T,
                }),
              })),
            (0, i.jsx)(u.ModalRoot, {
              transitionState: R,
              className: s(_, E.container),
              "aria-label": A,
              children: (0, i.jsxs)("form", {
                onSubmit: e => {
                  null != e && e.preventDefault(),
                    null == I || I(),
                    null == C || C();
                },
                className: E.form,
                children: [
                  (0, i.jsx)(u.ModalContent, {
                    className: E.modalContent,
                    children: (0, i.jsxs)(d.default, {
                      direction: d.default.Direction.VERTICAL,
                      justify: d.default.Justify.CENTER,
                      className: E.content,
                      children: [
                        null != A &&
                          (0, i.jsx)(l.FormTitle, {
                            tag: "h2",
                            className: s(E.title, N),
                            children: A,
                          }),
                        null != p &&
                          (0, i.jsx)(c.Text, {
                            variant: "text-md/normal",
                            className: E.body,
                            children: p,
                          }),
                      ],
                    }),
                  }),
                  (0, i.jsxs)(u.ModalFooter, {
                    justify: d.default.Justify.BETWEEN,
                    wrap: d.default.Wrap.WRAP,
                    children: [n, t, r],
                  }),
                ],
              }),
            })
          );
        };
    },
    459462: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Anchor: function () {
            return E;
          },
        }),
        n("70102");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("247716"),
        l = n("227645"),
        u = n("718776"),
        c = n("143435"),
        d = n("315733"),
        f = n("167913");
      function E(e) {
        let {
          href: t,
          onClick: n,
          className: s,
          children: E,
          rel: p,
          target: h,
          useDefaultUnderlineStyles: _ = !0,
          title: S,
          style: m,
          focusProps: T,
          ...g
        } = e;
        null != t &&
          null == n &&
          (n = c.designConfig.getDefaultLinkInterceptor(t));
        let I = r.useContext(o.BlockInteractionsContext),
          C = {
            className: a(f.anchor, { [f.anchorUnderlineOnHover]: _ }, s),
            href: t,
            onClick: n,
            rel: null != p ? p : void 0,
            target: null != h ? h : void 0,
            title: null != S ? S : void 0,
            style: null != m ? m : void 0,
          };
        return (null != t &&
          !(0, d.isSafeRedirect)(t) &&
          ((C.rel = "noreferrer noopener"), (C.target = "_blank")),
        I && delete C.href,
        null != n)
          ? (0, i.jsx)(l.Clickable, {
              tag: "a",
              ...g,
              ...C,
              onClick: n,
              focusProps: T,
              children: E,
            })
          : (0, i.jsx)(u.FocusRing, {
              ...T,
              children: (0, i.jsx)("a", { ...g, ...C, children: E }),
            });
      }
    },
    913365: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Avatar: function () {
            return N;
          },
          AnimatedAvatar: function () {
            return D;
          },
        }),
        n("70102"),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("907002"),
        l = n("227645"),
        u = n("709749"),
        c = n("391010"),
        d = n("414055"),
        f = n("587974"),
        E = n("158998"),
        p = n("52904"),
        h = n("49111"),
        _ = n("573135"),
        S = n("782340"),
        m = n("881775");
      let T = { tension: 1200, friction: 70 };
      function g(e) {
        let { size: t, isMobile: n, isTyping: r, ...s } = e,
          a = (0, p.getAvatarSpecs)(t),
          o = a.status * (n && !r ? p.MOBILE_HEIGHT_RATIO : 1),
          l = a.status * (r ? p.TYPING_WIDTH_RATIO : 1),
          u = r ? (a.status * p.TYPING_WIDTH_RATIO - a.status) / 2 : 0,
          c = a.size - a.status - u - a.offset,
          d = a.size - o - a.offset;
        return (0, i.jsx)("rect", {
          x: c,
          y: d,
          width: l,
          height: o,
          fill: "transparent",
          "aria-hidden": !0,
          ...s,
        });
      }
      function I(e, t, n) {
        let i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
          r = (0, c.getStatusSize)(e.status, t, n, i),
          s =
            (i ? e.size - (r.width / 2 + e.status / 2) : e.size - r.width) -
            e.offset;
        return { ...r, x: s, y: e.size - r.height - e.offset };
      }
      function C(e, t, n, r) {
        let s = I(n, r, t, !1),
          a = (0, c.getStatusBackdropOpacity)(r, e);
        if (!t) {
          let t = s.height / 2 + n.stroke,
            r = s.x + n.status / 2;
          return (0, i.jsx)("circle", {
            style: { opacity: a },
            fill: e,
            r: t,
            cx: r,
            cy: r,
          });
        }
        let o = s.height + 2 * n.stroke,
          l = s.width + 2 * n.stroke,
          u = s.x - n.stroke,
          d = s.y - n.stroke;
        return (0, i.jsx)("rect", {
          fill: e,
          height: o,
          width: l,
          style: { opacity: a },
          x: u,
          y: d,
          rx: n.stroke,
        });
      }
      function v(e) {
        let { status: t, isMobile: n, isTyping: i, size: r } = e,
          s = n && !i && t === h.StatusTypes.ONLINE,
          a = (0, p.getAvatarSpecs)(r);
        return {
          ...(function (e, t, n) {
            let { size: i, status: r, stroke: s, offset: a } = e,
              o = n ? r * p.TYPING_WIDTH_RATIO : r,
              l = t ? r * p.MOBILE_HEIGHT_RATIO : r;
            return {
              avatarCutoutX: i - o + (o - r) / 2 - s - a,
              avatarCutoutY: i - l - s - a,
              avatarCutoutWidth: o + 2 * s,
              avatarCutoutHeight: l + 2 * s,
              avatarCutoutRadius: t
                ? (l + 2 * s) * p.CUTOUT_BORDER_RADIUS
                : (r + 2 * s) / 2,
            };
          })(a, s, i),
          ...(0, c.getStatusValues)({
            status: t,
            size: a.status,
            isMobile: s,
            isTyping: i,
            topOffset: 2,
            leftOffset: 6,
          }),
        };
      }
      function A(e) {
        let {
            children: t,
            size: n,
            onClick: r,
            onMouseDown: s,
            onKeyDown: o,
            onContextMenu: u,
            onMouseEnter: c,
            onMouseLeave: d,
            className: h,
            tabIndex: T,
            ariaLabel: g,
            ariaHidden: I,
            status: C,
            isMobile: v = !1,
            isTyping: A = !1,
            avatarDecoration: R,
            typingOffset: N,
            specs: O,
          } = e,
          D = {
            width: (0, p.getAvatarSize)(n),
            height: (0, p.getAvatarSize)(n),
          },
          y =
            null == g || I
              ? void 0
              : (function (e, t) {
                  let n =
                    arguments.length > 2 &&
                    void 0 !== arguments[2] &&
                    arguments[2];
                  return null != t
                    ? S.default.Messages.LABEL_WITH_ONLINE_STATUS.format({
                        label: e,
                        status: (0, E.humanizeStatus)(t, n),
                      })
                    : e;
                })(g, C, v),
          P = O.size * _.DECORATION_TO_AVATAR_RATIO,
          L = (function (e, t, n, i) {
            if (null == e) return null;
            if (i)
              switch (t) {
                case p.AvatarSizes.SIZE_16:
                  return f.MaskIDs.AVATAR_DECORATION_STATUS_TYPING_16;
                case p.AvatarSizes.SIZE_20:
                  return f.MaskIDs.AVATAR_DECORATION_STATUS_TYPING_20;
                case p.AvatarSizes.SIZE_24:
                  return f.MaskIDs.AVATAR_DECORATION_STATUS_TYPING_24;
                case p.AvatarSizes.SIZE_32:
                  return f.MaskIDs.AVATAR_DECORATION_STATUS_TYPING_32;
                case p.AvatarSizes.SIZE_40:
                  return f.MaskIDs.AVATAR_DECORATION_STATUS_TYPING_40;
                case p.AvatarSizes.SIZE_56:
                  return f.MaskIDs.AVATAR_DECORATION_STATUS_TYPING_56;
                case p.AvatarSizes.SIZE_80:
                  return f.MaskIDs.AVATAR_DECORATION_STATUS_TYPING_80;
                case p.AvatarSizes.SIZE_120:
                  return f.MaskIDs.AVATAR_DECORATION_STATUS_TYPING_120;
              }
            if (n)
              switch (t) {
                case p.AvatarSizes.SIZE_16:
                  return f.MaskIDs.AVATAR_DECORATION_STATUS_MOBILE_16;
                case p.AvatarSizes.SIZE_20:
                  return f.MaskIDs.AVATAR_DECORATION_STATUS_MOBILE_20;
                case p.AvatarSizes.SIZE_24:
                  return f.MaskIDs.AVATAR_DECORATION_STATUS_MOBILE_24;
                case p.AvatarSizes.SIZE_32:
                  return f.MaskIDs.AVATAR_DECORATION_STATUS_MOBILE_32;
                case p.AvatarSizes.SIZE_40:
                  return f.MaskIDs.AVATAR_DECORATION_STATUS_MOBILE_40;
                case p.AvatarSizes.SIZE_56:
                  return f.MaskIDs.AVATAR_DECORATION_STATUS_MOBILE_56;
                case p.AvatarSizes.SIZE_80:
                  return f.MaskIDs.AVATAR_DECORATION_STATUS_MOBILE_80;
                case p.AvatarSizes.SIZE_120:
                  return f.MaskIDs.AVATAR_DECORATION_STATUS_MOBILE_120;
              }
            switch (t) {
              case p.AvatarSizes.SIZE_16:
                return f.MaskIDs.AVATAR_DECORATION_STATUS_ROUND_16;
              case p.AvatarSizes.SIZE_20:
                return f.MaskIDs.AVATAR_DECORATION_STATUS_ROUND_20;
              case p.AvatarSizes.SIZE_24:
                return f.MaskIDs.AVATAR_DECORATION_STATUS_ROUND_24;
              case p.AvatarSizes.SIZE_32:
                return f.MaskIDs.AVATAR_DECORATION_STATUS_ROUND_32;
              case p.AvatarSizes.SIZE_40:
                return f.MaskIDs.AVATAR_DECORATION_STATUS_ROUND_40;
              case p.AvatarSizes.SIZE_56:
                return f.MaskIDs.AVATAR_DECORATION_STATUS_ROUND_56;
              case p.AvatarSizes.SIZE_80:
                return f.MaskIDs.AVATAR_DECORATION_STATUS_ROUND_80;
              case p.AvatarSizes.SIZE_120:
                return f.MaskIDs.AVATAR_DECORATION_STATUS_ROUND_120;
            }
            return null;
          })(C, n, v, A),
          b =
            null != R &&
            (0, i.jsx)("svg", {
              width: P + N,
              height: P,
              viewBox: "0 0 ".concat(P + N, " ").concat(P),
              className: m.avatarDecoration,
              "aria-hidden": !0,
              children: (0, i.jsx)("foreignObject", {
                x: 0,
                y: 0,
                width: P,
                height: P,
                mask: null != L ? "url(#".concat(L, ")") : void 0,
                children: (0, i.jsx)("div", {
                  className: m.avatarStack,
                  children: (0, i.jsx)("img", {
                    className: m.avatar,
                    src: R,
                    alt: " ",
                    "aria-hidden": !0,
                  }),
                }),
              }),
            });
        return null != r || null != s
          ? (0, i.jsxs)(l.Clickable, {
              className: a(m.wrapper, m.pointer, h),
              style: D,
              onClick: r,
              tabIndex: T,
              onContextMenu: u,
              onMouseDown: s,
              onKeyDown: o,
              onMouseEnter: null != c ? c : void 0,
              onMouseLeave: null != d ? d : void 0,
              "aria-label": y,
              "aria-hidden": I,
              children: [t, b],
            })
          : (0, i.jsxs)("div", {
              className: a(m.wrapper, h),
              style: D,
              onContextMenu: null != u ? u : void 0,
              onMouseEnter: null != c ? c : void 0,
              onMouseLeave: null != d ? d : void 0,
              role: "img",
              "aria-label": y,
              "aria-hidden": I,
              children: [t, b],
            });
      }
      function R(e) {
        let { src: t, isSpeaking: n } = e;
        return (0, i.jsxs)("div", {
          className: m.avatarStack,
          children: [
            (0, i.jsx)("img", {
              src: null != t ? t : void 0,
              alt: " ",
              className: m.avatar,
              "aria-hidden": !0,
            }),
            n && (0, i.jsx)("div", { className: m.avatarSpeaking }),
          ],
        });
      }
      function N(e) {
        let {
            src: t,
            status: n,
            size: r,
            statusColor: s,
            isMobile: o = !1,
            isTyping: l = !1,
            typingIndicatorRef: _,
            isSpeaking: S = !1,
            statusTooltip: T = !1,
            statusBackdropColor: g,
            "aria-hidden": v = !1,
            "aria-label": N,
          } = e,
          O = n !== h.StatusTypes.UNKNOWN ? n : null,
          D = (0, p.getAvatarSpecs)(r),
          y =
            null != O
              ? Math.ceil((D.status * p.TYPING_WIDTH_RATIO - D.status) / 2)
              : 0,
          P = D.size + y,
          L = (0, c.useStatusFillColor)(O, s);
        return (0, i.jsx)(A, {
          ...e,
          ariaLabel: N,
          ariaHidden: v,
          status: O,
          specs: D,
          typingOffset: y,
          children: (0, i.jsxs)("svg", {
            width: P,
            height: P,
            viewBox: "0 0 ".concat(P, " ").concat(P),
            className: a(m.mask, m.svg),
            "aria-hidden": !0,
            children: [
              (0, i.jsx)("foreignObject", {
                x: 0,
                y: 0,
                width: D.size,
                height: D.size,
                mask: "url(#".concat(
                  (function (e, t, n, i) {
                    if (null == e) return f.MaskIDs.AVATAR_DEFAULT;
                    if (i)
                      switch (t) {
                        case p.AvatarSizes.SIZE_16:
                          return f.MaskIDs.AVATAR_STATUS_TYPING_16;
                        case p.AvatarSizes.SIZE_20:
                          return f.MaskIDs.AVATAR_STATUS_TYPING_20;
                        case p.AvatarSizes.SIZE_24:
                          return f.MaskIDs.AVATAR_STATUS_TYPING_24;
                        case p.AvatarSizes.SIZE_32:
                          return f.MaskIDs.AVATAR_STATUS_TYPING_32;
                        case p.AvatarSizes.SIZE_40:
                          return f.MaskIDs.AVATAR_STATUS_TYPING_40;
                        case p.AvatarSizes.SIZE_48:
                          return f.MaskIDs.AVATAR_STATUS_TYPING_48;
                        case p.AvatarSizes.SIZE_56:
                          return f.MaskIDs.AVATAR_STATUS_TYPING_56;
                        case p.AvatarSizes.SIZE_80:
                          return f.MaskIDs.AVATAR_STATUS_TYPING_80;
                        case p.AvatarSizes.SIZE_120:
                          return f.MaskIDs.AVATAR_STATUS_TYPING_120;
                      }
                    if (e === h.StatusTypes.ONLINE && n)
                      switch (t) {
                        case p.AvatarSizes.SIZE_16:
                          return f.MaskIDs.AVATAR_STATUS_MOBILE_16;
                        case p.AvatarSizes.SIZE_20:
                          return f.MaskIDs.AVATAR_STATUS_MOBILE_20;
                        case p.AvatarSizes.SIZE_24:
                          return f.MaskIDs.AVATAR_STATUS_MOBILE_24;
                        case p.AvatarSizes.SIZE_32:
                          return f.MaskIDs.AVATAR_STATUS_MOBILE_32;
                        case p.AvatarSizes.SIZE_40:
                          return f.MaskIDs.AVATAR_STATUS_MOBILE_40;
                        case p.AvatarSizes.SIZE_48:
                          return f.MaskIDs.AVATAR_STATUS_MOBILE_48;
                        case p.AvatarSizes.SIZE_56:
                          return f.MaskIDs.AVATAR_STATUS_MOBILE_56;
                        case p.AvatarSizes.SIZE_80:
                          return f.MaskIDs.AVATAR_STATUS_MOBILE_80;
                        case p.AvatarSizes.SIZE_120:
                          return f.MaskIDs.AVATAR_STATUS_MOBILE_120;
                      }
                    switch (t) {
                      case p.AvatarSizes.SIZE_16:
                        return f.MaskIDs.AVATAR_STATUS_ROUND_16;
                      case p.AvatarSizes.SIZE_20:
                        return f.MaskIDs.AVATAR_STATUS_ROUND_20;
                      case p.AvatarSizes.SIZE_24:
                        return f.MaskIDs.AVATAR_STATUS_ROUND_24;
                      case p.AvatarSizes.SIZE_32:
                        return f.MaskIDs.AVATAR_STATUS_ROUND_32;
                      case p.AvatarSizes.SIZE_40:
                        return f.MaskIDs.AVATAR_STATUS_ROUND_40;
                      case p.AvatarSizes.SIZE_48:
                        return f.MaskIDs.AVATAR_STATUS_ROUND_48;
                      case p.AvatarSizes.SIZE_56:
                        return f.MaskIDs.AVATAR_STATUS_ROUND_56;
                      case p.AvatarSizes.SIZE_80:
                        return f.MaskIDs.AVATAR_STATUS_ROUND_80;
                      case p.AvatarSizes.SIZE_120:
                        return f.MaskIDs.AVATAR_STATUS_ROUND_120;
                    }
                    throw Error(
                      "getMaskId(): Unsupported type, size: "
                        .concat(t, ", status: ")
                        .concat(e, ", isMobile: ")
                        .concat(n ? "true" : "false")
                    );
                  })(O, r, o, l),
                  ")"
                ),
                children: (0, i.jsx)(R, { src: t, isSpeaking: S }),
              }),
              null != O
                ? (0, i.jsx)(d.Tooltip, {
                    text: T ? (0, E.humanizeStatus)(O) : null,
                    "aria-label": !1,
                    position: "top",
                    spacing: 5 + 1.5 * D.stroke,
                    children: e =>
                      (0, i.jsxs)(i.Fragment, {
                        children: [
                          null != g && C(g, o, D, O),
                          (0, i.jsx)("rect", {
                            ...e,
                            ...I(D, O, o, l),
                            fill: L,
                            mask: "url(#".concat(
                              (0, c.getStatusMask)(O, o, l),
                              ")"
                            ),
                            className: m.pointerEvents,
                          }),
                          l
                            ? (0, i.jsx)(u.Dots, {
                                ref: _,
                                dotRadius: D.status / 4,
                                x: D.size - 1.375 * D.status - D.offset,
                                y: D.size - D.status / 1.333 - D.offset,
                              })
                            : null,
                        ],
                      }),
                  })
                : null,
            ],
          }),
        });
      }
      function O(e) {
        let {
            fromIsMobile: t = !0,
            fromStatus: n,
            fromColor: s,
            isMobile: l = !1,
            isTyping: f = !1,
            typingIndicatorRef: h,
            isSpeaking: _ = !1,
            size: S,
            src: I,
            status: N,
            statusColor: O,
            statusTooltip: D = !1,
            statusBackdropColor: y,
            "aria-hidden": P = !1,
            "aria-label": L,
          } = e,
          b = (0, c.useStatusFillColor)(N, O),
          M = r.useId(),
          U = r.useId(),
          [G] = r.useState(() => ({
            fill: s,
            ...v({ size: S, status: n, isMobile: t, isTyping: !1 }),
          })),
          w = r.useMemo(
            () => ({
              fill: b,
              ...v({ size: S, status: N, isMobile: l, isTyping: f }),
            }),
            [b, S, N, l, f]
          ),
          {
            avatarCutoutX: k,
            avatarCutoutY: x,
            avatarCutoutWidth: F,
            avatarCutoutHeight: V,
            avatarCutoutRadius: B,
            fill: H,
            ...j
          } = (0, o.useSpring)({
            immediate: !document.hasFocus(),
            config: T,
            from: G,
            to: w,
          }),
          Y = (0, p.getAvatarSize)(S),
          W = (0, p.getAvatarSpecs)(S),
          K = W.status * p.TYPING_WIDTH_RATIO,
          z = W.status * p.MOBILE_HEIGHT_RATIO,
          q = null != N ? (W.status * p.TYPING_WIDTH_RATIO - W.status) / 2 : 0,
          X = W.size - W.status - q - W.offset,
          Q = W.size - z - W.offset,
          Z = W.size + Math.ceil(q);
        return (0, i.jsx)(A, {
          ...e,
          ariaLabel: L,
          ariaHidden: P,
          typingOffset: q,
          specs: W,
          children: (0, i.jsxs)("svg", {
            width: Z,
            height: Z,
            viewBox: "0 0 ".concat(Z, " ").concat(Z),
            className: a(m.mask, m.svg),
            "aria-hidden": !0,
            children: [
              (0, i.jsxs)("mask", {
                id: M,
                width: Y,
                height: Y,
                children: [
                  (0, i.jsx)("circle", {
                    cx: Y / 2,
                    cy: Y / 2,
                    r: Y / 2,
                    fill: "white",
                  }),
                  (0, i.jsx)(o.animated.rect, {
                    color: "black",
                    x: k,
                    y: x,
                    width: F,
                    height: V,
                    rx: B,
                    ry: B,
                  }),
                ],
              }),
              (0, i.jsx)("foreignObject", {
                className: m.foreignObject,
                x: 0,
                y: 0,
                width: Y,
                height: Y,
                mask: "url(#".concat(M, ")"),
                children: (0, i.jsx)(R, { src: I, isSpeaking: _ }),
              }),
              (0, i.jsx)(d.Tooltip, {
                text: D ? (0, E.humanizeStatus)(N) : null,
                "aria-label": !1,
                position: "top",
                spacing: (function (e, t, n) {
                  let i =
                    arguments.length > 3 &&
                    void 0 !== arguments[3] &&
                    arguments[3];
                  return 5 - (n && !i ? 0 : 0.5 * e) + 1.5 * t;
                })(W.status, W.stroke, l, f),
                children: e =>
                  (0, i.jsxs)(i.Fragment, {
                    children: [
                      null != y && C(y, l, W, N),
                      (0, i.jsxs)("svg", {
                        x: X,
                        y: Q,
                        width: K,
                        height: z,
                        viewBox: "0 0 ".concat(K, " ").concat(z),
                        className: D ? m.cursorDefault : void 0,
                        children: [
                          (0, c.renderStatusMask)(j, W.status, U),
                          (0, i.jsx)(o.animated.rect, {
                            fill: H,
                            width: K,
                            height: z,
                            mask: "url(#".concat(U, ")"),
                          }),
                          (0, i.jsx)(u.Dots, {
                            ref: h,
                            dotRadius: W.status / 4,
                            x: 0.15 * K,
                            y: 0.5 * z,
                            hide: !f,
                          }),
                        ],
                      }),
                      (0, i.jsx)(g, {
                        size: S,
                        isMobile: l,
                        isTyping: f,
                        className: m.pointerEvents,
                        ...e,
                      }),
                    ],
                  }),
              }),
            ],
          }),
        });
      }
      let D = r.memo(function (e) {
        var t, n, s, a, o;
        let { statusColor: l, status: u, ...d } = e,
          { isMobile: f = !1, isTyping: E = !1 } = d,
          p = r.useRef(u),
          _ = r.useRef(f),
          S = (0, c.useStatusFillColor)(u, l),
          m = r.useRef(S),
          T = r.useRef(!1);
        let g =
          T.current ||
          ((t = E),
          (n = u),
          (s = p.current),
          (a = f),
          (o = _.current),
          null != s &&
            null != n &&
            (!!t || n !== s || (n === h.StatusTypes.ONLINE && a !== o) || !1));
        return (
          r.useLayoutEffect(() => {
            (T.current = g), (p.current = u), (_.current = f), (m.current = S);
          }, [u, f, S, g]),
          null != u && null != p.current && g
            ? (0, i.jsx)(O, {
                ...d,
                status: u,
                statusColor: S,
                fromStatus: p.current,
                fromIsMobile: _.current,
                fromColor: m.current,
              })
            : (0, i.jsx)(N, { ...d, status: u, statusColor: S })
        );
      });
    },
    52904: function (e, t, n) {
      "use strict";
      var i, r, s, a, o, l;
      n.r(t),
        n.d(t, {
          MOBILE_HEIGHT_RATIO: function () {
            return u;
          },
          TYPING_WIDTH_RATIO: function () {
            return c;
          },
          MOBILE_ICON_RADIUS: function () {
            return d;
          },
          CUTOUT_BORDER_RADIUS: function () {
            return f;
          },
          AvatarSizes: function () {
            return i;
          },
          StatusBackdropColors: function () {
            return r;
          },
          StatusBackdropOpacity: function () {
            return s;
          },
          AvatarSizeSpecs: function () {
            return E;
          },
          getAvatarSpecs: function () {
            return p;
          },
          getAvatarSize: function () {
            return h;
          },
        }),
        n("70102");
      let u = 1.5,
        c = 2.5,
        d = 0.125,
        f = 0.2;
      ((a = i || (i = {})).SIZE_16 = "SIZE_16"),
        (a.SIZE_20 = "SIZE_20"),
        (a.SIZE_24 = "SIZE_24"),
        (a.SIZE_32 = "SIZE_32"),
        (a.SIZE_40 = "SIZE_40"),
        (a.SIZE_48 = "SIZE_48"),
        (a.SIZE_56 = "SIZE_56"),
        (a.SIZE_80 = "SIZE_80"),
        (a.SIZE_120 = "SIZE_120"),
        (a.SIZE_152 = "SIZE_152"),
        (a.DEPRECATED_SIZE_30 = "DEPRECATED_SIZE_30"),
        (a.DEPRECATED_SIZE_60 = "DEPRECATED_SIZE_60"),
        (a.DEPRECATED_SIZE_100 = "DEPRECATED_SIZE_100"),
        ((o = r || (r = {})).BLACK = "black"),
        (o.WHITE = "white"),
        ((l = s || (s = {}))[(l.HIGH = 0.7)] = "HIGH"),
        (l[(l.LOW = 0.45)] = "LOW");
      let E = Object.freeze({
        SIZE_16: Object.freeze({ size: 16, status: 6, stroke: 2, offset: 0 }),
        SIZE_20: Object.freeze({ size: 20, status: 6, stroke: 2, offset: 0 }),
        SIZE_24: Object.freeze({ size: 24, status: 8, stroke: 3, offset: 0 }),
        SIZE_32: Object.freeze({ size: 32, status: 10, stroke: 3, offset: 0 }),
        SIZE_40: Object.freeze({ size: 40, status: 12, stroke: 4, offset: 0 }),
        SIZE_48: Object.freeze({ size: 48, status: 12, stroke: 4, offset: 0 }),
        SIZE_56: Object.freeze({ size: 56, status: 14, stroke: 4, offset: 2 }),
        SIZE_80: Object.freeze({ size: 80, status: 16, stroke: 6, offset: 4 }),
        SIZE_120: Object.freeze({
          size: 120,
          status: 24,
          stroke: 8,
          offset: 8,
        }),
        SIZE_152: Object.freeze({
          size: 152,
          status: 30,
          stroke: 10,
          offset: 10,
        }),
        DEPRECATED_SIZE_30: Object.freeze({
          size: 30,
          status: 0,
          stroke: 0,
          offset: 0,
        }),
        DEPRECATED_SIZE_60: Object.freeze({
          size: 60,
          status: 0,
          stroke: 0,
          offset: 0,
        }),
        DEPRECATED_SIZE_100: Object.freeze({
          size: 100,
          status: 0,
          stroke: 0,
          offset: 0,
        }),
      });
      function p(e) {
        return E[e];
      }
      function h(e) {
        if ("number" != typeof e) return E[e].size;
        return e;
      }
    },
    691609: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          BlobMask: function () {
            return R;
          },
        }),
        n("222007");
      var i,
        r = n("37983"),
        s = n("884691"),
        a = n("414456"),
        o = n.n(a),
        l = n("32183"),
        u = n("272214"),
        c = n.n(u),
        d = n("907002"),
        f = n("748820"),
        E = n("733724"),
        p = n("862337"),
        h = n("266491"),
        _ = n("26541");
      let S = { friction: 13, tension: 240, duration: 150 },
        m = { duration: 150, friction: 3 },
        T = { friction: 30, tension: 900, mass: 1 },
        g = { duration: 150, friction: 10, tension: 100, mass: 1 },
        I =
          (null === (i = window.SVGPathElement) || void 0 === i
            ? void 0
            : i.prototype.getTotalLength) != null,
        C = I
          ? (0, l.interpolate)(
              "M48 24C48 37.2548 37.2548 48 24 48C10.7452 48 0 37.2548 0 24C0 10.7452 10.7452 0 24 0C37.2548 0 48 10.7452 48 24Z",
              "M0 24C0 16.5449 0 12.8174 1.21793 9.87706C2.84183 5.95662 5.95662 2.84183 9.87706 1.21793C12.8174 0 16.5449 0 24 0C31.4551 0 35.1826 0 38.1229 1.21793C42.0434 2.84183 45.1582 5.95662 46.7821 9.87706C48 12.8174 48 16.5449 48 24C48 31.4551 48 35.1826 46.7821 38.1229C45.1582 42.0434 42.0434 45.1582 38.1229 46.7821C35.1826 48 31.4551 48 24 48C16.5449 48 12.8174 48 9.87706 46.7821C5.95662 45.1582 2.84183 42.0434 1.21793 38.1229C0 35.1826 0 31.4551 0 24Z",
              { maxSegmentLength: 1.5 }
            )
          : e => "".concat(e);
      class v extends s.Component {
        componentDidMount() {
          this.forceUpdate();
        }
        componentWillAppear(e) {
          e();
        }
        componentWillEnter(e) {
          e();
        }
        componentWillLeave(e) {
          this.timeoutId = setTimeout(e, 300);
        }
        componentWillUnmount() {
          clearTimeout(this.timeoutId);
        }
        render() {
          let { children: e, className: t, animatedStyle: n } = this.props;
          return (0, r.jsx)(d.animated.div, {
            className: t,
            style: n,
            children: e,
          });
        }
      }
      function A(e) {
        let { selected: t, upperBadge: n, lowerBadge: i, highlight: r } = e;
        return t || null != n || null != i || !!r;
      }
      class R extends s.Component {
        static getDerivedStateFromProps(e, t) {
          let {
              hasRenderedBadge: n,
              upperBadgeMask: i,
              lowerBadgeMask: r,
              borderRadiusMask: s,
              renderComplex: a,
            } = t,
            { upperBadge: o, lowerBadge: l } = e,
            u = !1;
          return (
            ((null != o && null == i) || (null != l && null == r)) &&
              ((u = !0),
              (n = !0),
              (i = new d.Controller({ spring: 0 })),
              (r = new d.Controller({ spring: 0 }))),
            A(e) &&
              null == s &&
              ((u = !0), (s = new d.Controller({ spring: 0 }))),
            !a && A(e) && ((u = !0), (a = !0)),
            u
              ? {
                  hasRenderedBadge: n,
                  lowerBadgeMask: r,
                  upperBadgeMask: i,
                  borderRadiusMask: s,
                  renderComplex: a,
                }
              : null
          );
        }
        componentDidMount() {
          let { selected: e, lowerBadge: t, upperBadge: n } = this.props,
            {
              borderRadiusMask: i,
              lowerBadgeMask: r,
              upperBadgeMask: s,
            } = this.state;
          null == i || i.update({ spring: e ? 1 : 0, immediate: !0 }).start(),
            null == r ||
              r.update({ spring: null != t ? 1 : 0, immediate: !0 }).start(),
            null == s ||
              s.update({ spring: null != n ? 1 : 0, immediate: !0 }).start();
        }
        componentWillUnmount() {
          let {
            borderRadiusMask: e,
            lowerBadgeMask: t,
            upperBadgeMask: n,
          } = this.state;
          this.timeout.stop(),
            null == e || e.dispose(),
            null == t || t.dispose(),
            null == n || n.dispose();
        }
        componentDidUpdate(e) {
          let { selected: t, lowerBadge: n, upperBadge: i } = this.props,
            {
              borderRadiusMask: r,
              lowerBadgeMask: s,
              upperBadgeMask: a,
              renderComplex: o,
            } = this.state;
          t && !e.selected
            ? null == r ||
              r.update({ spring: 1, immediate: !1, config: S }).start()
            : !t &&
              e.selected &&
              (null == r ||
                r.update({ spring: 0, immediate: !1, config: m }).start()),
            null != n && null == e.lowerBadge
              ? null == s ||
                s
                  .update({
                    spring: 1,
                    immediate: !document.hasFocus(),
                    config: T,
                  })
                  .start()
              : null == n &&
                null != e.lowerBadge &&
                (null == s ||
                  s
                    .update({
                      spring: 0,
                      immediate: !document.hasFocus(),
                      config: g,
                    })
                    .start()),
            null != i && null == e.upperBadge
              ? null == a ||
                a
                  .update({
                    spring: 1,
                    immediate: !document.hasFocus(),
                    config: T,
                  })
                  .start()
              : null == i &&
                null != e.upperBadge &&
                (null == a ||
                  a
                    .update({
                      spring: 0,
                      immediate: !document.hasFocus(),
                      config: g,
                    })
                    .start()),
            !o || A(this.props) || this.timeout.isStarted()
              ? A(this.props) && this.timeout.isStarted() && this.timeout.stop()
              : this.timeout.start(c(108e5, 18e6), this.handleTimeout);
        }
        getBadgePositionInterpolation(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
          if (null == e) return;
          let { spring: n } = e.springs;
          return n
            .to([0, 1], [20, 0])
            .to(e => "translate(".concat(e, " ").concat(e * t, ")"));
        }
        getLowerBadgeStyles() {
          let { lowerBadgeMask: e } = this.state;
          if (null == e) return;
          let { spring: t } = e.springs;
          return {
            opacity: t.to([0, 0.5, 1], [0, 0, 1]),
            transform: t.to(e =>
              "translate("
                .concat(16 - 16 * e, "px, ")
                .concat(16 - 16 * e, "px)")
            ),
          };
        }
        getUpperBadgeStyles() {
          let { upperBadgeMask: e } = this.state;
          if (null == e) return;
          let { spring: t } = e.springs;
          return {
            opacity: t.to([0, 0.5, 1], [0, 0, 1]),
            transform: t.to(e =>
              "translate("
                .concat(16 - 16 * e, "px, ")
                .concat(-1 * (16 - 16 * e), "px)")
            ),
          };
        }
        getPathInterpolation() {
          var e;
          return null === (e = this.state.borderRadiusMask) || void 0 === e
            ? void 0
            : e.springs.spring.to(C);
        }
        render() {
          let {
              children: e,
              className: t,
              innerClassName: n,
              lowerBadge: i,
              lowerBadgeWidth: a,
              style: l,
              upperBadge: u,
              highlight: c,
            } = this.props,
            {
              maskId: f,
              lowerBadgeMask: p,
              upperBadgeMask: S,
              focused: m,
              hasRenderedBadge: T,
              renderComplex: g,
            } = this.state;
          if (!g)
            return (0, r.jsx)(
              "div",
              {
                className: o(t, {
                  [_.wrapperSimple]: !0,
                  [_.simpleFocused]: m,
                }),
                style: l,
                onFocus: this.handleFocus,
                onBlur: this.handleBlur,
                children: (0, r.jsx)(
                  "svg",
                  {
                    width: 48,
                    height: 48,
                    viewBox: "0 0 ".concat(48, " ").concat(48),
                    className: _.svg,
                    overflow: "visible",
                    children: (0, r.jsx)(
                      "foreignObject",
                      {
                        x: 0,
                        y: 0,
                        className: n,
                        width: 48,
                        height: 48,
                        children: e,
                      },
                      "foreign-object"
                    ),
                  },
                  "svg"
                ),
              },
              "wrapper"
            );
          let I = "".concat(f, "-upper_badge_masks"),
            C = "".concat(f, "-lower_badge_masks"),
            A = "".concat(f, "-blob_mask"),
            R = "".concat(f, "-stroke_mask"),
            N = "".concat(f, "-highlight_mask");
          return (0, r.jsxs)(
            "div",
            {
              className: o(t, _.wrapper),
              style: l,
              onFocus: this.handleFocus,
              onBlur: this.handleBlur,
              children: [
                (0, r.jsxs)(
                  "svg",
                  {
                    width: 48,
                    height: 48,
                    viewBox: "0 0 ".concat(48, " ").concat(48),
                    className: o(_.svg, { [_.noContain]: c }),
                    overflow: "visible",
                    children: [
                      (0, r.jsxs)("defs", {
                        children: [
                          c &&
                            (0, r.jsx)(d.animated.path, {
                              d: this.getPathInterpolation(),
                              id: N,
                            }),
                          (0, r.jsx)(d.animated.path, {
                            d: this.getPathInterpolation(),
                            id: A,
                          }),
                          T
                            ? (0, r.jsx)(d.animated.rect, {
                                id: I,
                                x: 28,
                                y: -4,
                                width: 24,
                                height: 24,
                                rx: 12,
                                ry: 12,
                                transform: this.getBadgePositionInterpolation(
                                  S,
                                  -1
                                ),
                              })
                            : null,
                          T
                            ? (0, r.jsx)(d.animated.rect, {
                                id: C,
                                x: 48 - (a + 8) + 4,
                                y: 28,
                                width: a + 8,
                                height: 24,
                                rx: 12,
                                ry: 12,
                                transform:
                                  this.getBadgePositionInterpolation(p),
                              })
                            : null,
                        ],
                      }),
                      (0, r.jsxs)("mask", {
                        id: f,
                        fill: "black",
                        x: 0,
                        y: 0,
                        width: 48,
                        height: 48,
                        children: [
                          c &&
                            (0, r.jsx)("use", {
                              href: "#".concat(N),
                              fill: "black",
                            }),
                          (0, r.jsx)("use", {
                            href: "#".concat(A),
                            fill: "white",
                            className: o({ [_.isHighlighted]: c }),
                          }),
                          T
                            ? (0, r.jsxs)(r.Fragment, {
                                children: [
                                  (0, r.jsx)("use", {
                                    href: "#".concat(I),
                                    fill: "black",
                                  }),
                                  (0, r.jsx)("use", {
                                    href: "#".concat(C),
                                    fill: "black",
                                  }),
                                ],
                              })
                            : null,
                        ],
                      }),
                      T
                        ? (0, r.jsxs)("mask", {
                            id: R,
                            children: [
                              (0, r.jsx)("rect", {
                                width: "150%",
                                height: "150%",
                                x: "-25%",
                                y: "-25%",
                                fill: "white",
                              }),
                              (0, r.jsx)("use", {
                                href: "#".concat(I),
                                fill: "black",
                              }),
                              (0, r.jsx)("use", {
                                href: "#".concat(C),
                                fill: "black",
                              }),
                            ],
                          })
                        : null,
                      m
                        ? (0, r.jsxs)(s.Fragment, {
                            children: [
                              (0, r.jsx)("g", {
                                className: _.focusStroke,
                                mask: "url(#".concat(R, ")"),
                                children: (0, r.jsx)("use", {
                                  href: "#".concat(A),
                                }),
                              }),
                              (0, r.jsxs)("g", {
                                className: _.focusFill,
                                children: [
                                  null != u
                                    ? (0, r.jsx)("use", { href: "#".concat(I) })
                                    : null,
                                  null != i
                                    ? (0, r.jsx)("use", { href: "#".concat(C) })
                                    : null,
                                ],
                              }),
                            ],
                          })
                        : null,
                      c &&
                        (0, r.jsx)(d.animated.path, {
                          d: this.getPathInterpolation(),
                          stroke: E.default.BRAND_500,
                          "stroke-width": 2,
                          className: _.highlight,
                          mask: "url(#".concat(R, ")"),
                        }),
                      (0, r.jsx)(
                        "foreignObject",
                        {
                          mask: "url(#".concat(f, ")"),
                          x: 0,
                          y: 0,
                          className: n,
                          width: 48,
                          height: 48,
                          children: e,
                        },
                        "foreign-object"
                      ),
                    ],
                  },
                  "svg"
                ),
                (0, r.jsxs)(h.default, {
                  component: s.Fragment,
                  children: [
                    null != i
                      ? (0, r.jsx)(
                          v,
                          {
                            className: _.lowerBadge,
                            animatedStyle: this.getLowerBadgeStyles(),
                            children: i,
                          },
                          "lower-badge"
                        )
                      : null,
                    null != u
                      ? (0, r.jsx)(
                          v,
                          {
                            className: _.upperBadge,
                            animatedStyle: this.getUpperBadgeStyles(),
                            children: u,
                          },
                          "upper-badge"
                        )
                      : null,
                  ],
                }),
              ],
            },
            "wrapper"
          );
        }
        constructor(...e) {
          super(...e),
            (this.timeout = new p.Timeout()),
            (this.state = {
              renderComplex: !1,
              hasRenderedBadge: !1,
              maskId: (0, f.v4)(),
              focused: !1,
            }),
            (this.handleTimeout = () => {
              this.timeout.stop(), this.setState({ renderComplex: !1 });
            }),
            (this.handleFocus = () => {
              this.setState({ focused: !0 });
            }),
            (this.handleBlur = () => {
              this.setState({ focused: !1 });
            });
        }
      }
      R.defaultProps = { selected: !1, lowerBadgeWidth: 16, highlight: !1 };
    },
    659397: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          CardTypes: function () {
            return l;
          },
          Card: function () {
            return u;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("791380");
      let l = {
        PRIMARY: o.cardPrimary,
        DANGER: o.cardDanger,
        WARNING: o.cardWarning,
        SUCCESS: o.cardSuccess,
        BRAND: o.cardBrand,
        CUSTOM: o.card,
      };
      class u extends r.PureComponent {
        render() {
          let e;
          let {
            children: t,
            editable: n,
            type: r,
            className: s,
            outline: u,
            ...c
          } = this.props;
          return (
            u ? (e = o.outline) : r === l.PRIMARY && n && (e = o.editable),
            (0, i.jsx)("div", { className: a(s, r, e), ...c, children: t })
          );
        }
      }
      (u.Types = l),
        (u.defaultProps = { type: l.PRIMARY, outline: !1, editable: !1 });
    },
    685698: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Checkbox: function () {
            return I;
          },
        }),
        n("222007");
      var i,
        r,
        s,
        a,
        o = n("37983"),
        l = n("884691"),
        u = n("414456"),
        c = n.n(u),
        d = n("627445"),
        f = n.n(d),
        E = n("509043"),
        p = n("669491"),
        h = n("718776"),
        _ = n("36694"),
        S = n("49111"),
        m = n("656438");
      ((s = i || (i = {})).DEFAULT = "default"),
        (s.INVERTED = "inverted"),
        (s.GHOST = "ghost"),
        (s.ROW = "row"),
        ((a = r || (r = {})).TOP = "top"),
        (a.CENTER = "center");
      let T = { BOX: m.box, ROUND: m.round, SMALL_BOX: m.smallBox },
        g = { top: m.alignTop, center: m.alignCenter };
      class I extends l.PureComponent {
        getInputMode() {
          return this.props.disabled
            ? "disabled"
            : this.props.readOnly
              ? "readonly"
              : "default";
        }
        getStyle() {
          var e;
          let { value: t, type: n, color: i } = this.props,
            r = null !== (e = this.props.style) && void 0 !== e ? e : {};
          if (!1 === t) return r;
          if (((r = { ...r }), i === p.default.unsafe_rawColors.BRAND_500.css))
            switch (n) {
              case "default":
                r.borderColor = "var(--control-brand-foreground)";
                break;
              case "ghost":
                (r.borderColor = "var(--brand-experiment-15a)"),
                  (r.backgroundColor = "var(--brand-experiment-15a)");
                break;
              case "row":
              case "inverted":
                (r.borderColor = "var(--brand-experiment-400)"),
                  (r.backgroundColor = "var(--brand-experiment-500)");
            }
          else
            switch (n) {
              case "default":
                r.borderColor = i;
                break;
              case "ghost":
                if (i.startsWith("var(--")) {
                  let e = "".concat(i.slice(0, -1), "-hsl)");
                  (r.borderColor = "rgba(".concat(e, ", 0.15)")),
                    (r.backgroundColor = "rgba(".concat(e, ", 0.15)"));
                } else
                  f(
                    (0, E.isValidHex)(i),
                    "Checkbox: ".concat(i, " is not a valid hex color")
                  ),
                    (r.borderColor = (0, E.hex2rgb)(i, 0.15)),
                    (r.backgroundColor = (0, E.hex2rgb)(i, 0.15));
                break;
              case "row":
              case "inverted":
                (r.backgroundColor = i), (r.borderColor = i);
            }
          return r;
        }
        getColor() {
          let { value: e, type: t, color: n } = this.props;
          return e
            ? "inverted" === t || "row" === t
              ? p.default.unsafe_rawColors.WHITE_500.css
              : n
            : p.default.unsafe_rawColors.TRANSPARENT.css;
        }
        render() {
          let {
              disabled: e,
              readOnly: t,
              value: n,
              shape: i,
              align: r = "center",
              className: s,
              innerClassName: a,
              children: l,
              size: u,
              reverse: d,
              checkboxColor: f,
              displayOnly: E,
              type: p,
              onClick: T,
            } = this.props,
            I =
              null != l
                ? (0, o.jsx)("div", {
                    className: c(
                      m.label,
                      e ? m.labelDisabled : m.labelClickable,
                      d ? m.labelReversed : m.labelForward
                    ),
                    style: { lineHeight: "".concat(u, "px") },
                    children: l,
                  })
                : null,
            C = this.props.disabled
              ? m.inputDisabled
              : this.props.readOnly
                ? m.inputReadonly
                : m.inputDefault;
          return (0, o.jsxs)(E ? "span" : "label", {
            className: c(
              e ? m.checkboxWrapperDisabled : m.checkboxWrapper,
              g[r],
              s,
              { [m.row]: "row" === p, [m.checked]: n }
            ),
            children: [
              d ? I : null,
              !E &&
                (0, o.jsx)(h.FocusRing, {
                  children: (0, o.jsx)("input", {
                    className: c(a, C),
                    type: "checkbox",
                    onClick: T,
                    onChange: e || t ? S.NOOP : this.handleChange,
                    checked: n,
                    style: { width: u, height: u },
                  }),
                }),
              (0, o.jsx)("div", {
                className: c(m.checkbox, i, { [m.checked]: n }),
                style: {
                  width: u,
                  height: u,
                  borderColor: f,
                  ...this.getStyle(),
                },
                children: (0, o.jsx)(_.default, {
                  width: 18,
                  height: 18,
                  color: this.getColor(),
                  "aria-hidden": !0,
                }),
              }),
              d ? null : I,
            ],
          });
        }
        constructor(...e) {
          super(...e),
            (this.handleChange = e => {
              let { onChange: t } = this.props;
              null == t || t(e, e.currentTarget.checked);
            });
        }
      }
      (I.Types = i),
        (I.Shapes = T),
        (I.Aligns = r),
        (I.defaultProps = {
          size: 24,
          disabled: !1,
          readOnly: !1,
          displayOnly: !1,
          value: !1,
          type: "default",
          color: p.default.unsafe_rawColors.BRAND_500.css,
          shape: T.BOX,
          align: "center",
          onChange: S.NOOP,
          reverse: !1,
        });
    },
    227645: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Clickable: function () {
            return c;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("247716"),
        l = n("718776"),
        u = n("49111");
      class c extends r.Component {
        renderNonInteractive() {
          let {
            tag: e,
            focusProps: t,
            innerRef: n,
            onClick: i,
            role: s,
            tabIndex: a,
            ...o
          } = this.props;
          return r.createElement(e, { ref: this.setRef, ...o });
        }
        renderInner() {
          let {
            tag: e,
            onClick: t,
            className: n,
            children: i,
            focusProps: s,
            innerRef: o,
            ...l
          } = this.props;
          return null == t
            ? r.createElement(e, { ref: this.setRef, className: a(n), ...l }, i)
            : r.createElement(
                e,
                {
                  onClick: t,
                  ref: this.setRef,
                  onKeyPress: this.handleKeyPress,
                  className: a(n),
                  ...l,
                },
                i
              );
        }
        render() {
          let e = this.context;
          return e
            ? this.renderNonInteractive()
            : (0, i.jsx)(l.FocusRing, {
                ...this.props.focusProps,
                children: this.renderInner(),
              });
        }
        constructor(...e) {
          super(...e),
            (this.handleKeyPress = e => {
              let {
                onClick: t,
                href: n,
                onKeyPress: i,
                ignoreKeyPress: r,
              } = this.props;
              !e.repeat &&
                (!r &&
                  null != t &&
                  null != this.ref &&
                  (e.charCode === u.KeyboardKeys.SPACE ||
                    e.charCode === u.KeyboardKeys.ENTER) &&
                  (null == n && e.preventDefault(),
                  null == this.ref.click ? t(e) : this.ref.click()),
                null != i && i(e));
            }),
            (this.setRef = e => {
              this.ref = e;
              let { innerRef: t } = this.props;
              null != t &&
                ("function" == typeof t
                  ? t(e)
                  : t.hasOwnProperty("current") && (t.current = e));
            });
        }
      }
      (c.contextType = o.BlockInteractionsContext),
        (c.defaultProps = { tag: "div", role: "button", tabIndex: 0 });
    },
    456189: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ClickableContainer: function () {
            return o;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("227645"),
        a = n("913906");
      function o(e) {
        let {
            tag: t = "div",
            children: n,
            className: o,
            focusProps: l,
            onClick: u,
            onDoubleClick: c,
            onContextMenu: d,
            onKeyDown: f,
            onFocus: E,
            onBlur: p,
            onMouseOver: h,
            onMouseDown: _,
            onMouseLeave: S,
            buttonProps: m,
            "aria-label": T,
          } = e,
          g = r.useRef(null);
        return (0, i.jsxs)(t, {
          ref: g,
          className: o,
          onClick: u,
          onMouseOver: h,
          onMouseLeave: S,
          onDoubleClick: c,
          onContextMenu: d,
          children: [
            (0, i.jsx)(s.Clickable, {
              ...m,
              focusProps: { ringTarget: g, ...l },
              className: a.focusTarget,
              "aria-label": T,
              onClick: e => {
                e.stopPropagation(), null == u || u(e);
              },
              onKeyDown: f,
              onFocus: E,
              onBlur: p,
              onMouseDown: _,
            }),
            n,
          ],
        });
      }
    },
    262448: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Collapsible: function () {
            return f;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("907002"),
        l = n("446674"),
        u = n("731898"),
        c = n("206230"),
        d = n("236685");
      function f(e) {
        let {
            children: t,
            className: n,
            collapsibleContent: s,
            isExpanded: f,
          } = e,
          [E, p] = r.useState(!1),
          h = (0, l.useStateFromStores)(
            [c.default],
            () => c.default.useReducedMotion
          ),
          [_, S] = r.useState(!0),
          [m, T] = r.useState(!1),
          g = null != f ? f : E,
          { ref: I, height: C = 0 } = (0, u.default)(),
          { ref: v, height: A = 0 } = (0, u.default)(),
          R = (0, o.useSpring)({
            height: g ? C + A : A,
            immediate: _ || h,
            config: o.config.stiff,
            onRest: () => T(!0),
          }),
          N = r.useCallback(() => {
            p(!E);
          }, [E, p]);
        return (
          r.useLayoutEffect(() => {
            let e = setTimeout(() => {
              S(!1);
            }, 100);
            return () => clearTimeout(e);
          }, []),
          (0, i.jsx)("div", {
            className: a(d.collapseable, { [d.toggled]: g }, n),
            children: (0, i.jsxs)(o.animated.div, {
              className: a(d.contentExpandContainer, {
                [d.showOverflow]: g && m,
              }),
              style: R,
              children: [
                (0, i.jsx)("div", {
                  ref: v,
                  className: a(d.header, { [d.toggled]: g }),
                  children: t({ onClick: N }),
                }),
                (0, i.jsx)("div", { ref: I, children: s }),
              ],
            }),
          })
        );
      }
    },
    960486: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useMultiSelect: function () {
            return T;
          },
          useSingleSelect: function () {
            return g;
          },
          Combobox: function () {
            return v;
          },
          ComboboxItem: function () {
            return R;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("974667"),
        l = n("685698"),
        u = n("227645"),
        c = n("605451"),
        d = n("433600"),
        f = n("577776"),
        E = n("810567"),
        p = n("578706"),
        h = n("782340"),
        _ = n("640698");
      let S = "data-listbox-item-id",
        m = Object.freeze({ STANDARD: _.selected, BRAND: _.selectedBrand });
      function T(e) {
        let [t, n] = r.useState(() => new Set(e)),
          i = r.useCallback(e => {
            n(t => {
              let n = new Set(t);
              return n.has(e) ? n.delete(e) : n.add(e), n;
            });
          }, []);
        return [t, i];
      }
      function g(e) {
        let [t, n] = r.useState(() => new Set(null != e ? [e] : void 0)),
          i = r.useCallback(e => {
            n(new Set([e]));
          }, []);
        return [t, i];
      }
      function I(e) {
        return String(e);
      }
      let C = r.createContext({
        activeDescendant: null,
        selected: new Set(),
        setSelected: () => null,
        itemToString: I,
      });
      function v(e) {
        let {
            placeholder: t,
            children: n,
            value: s,
            onChange: l,
            className: u,
            listClassName: p,
            "aria-label": m,
            multiSelect: T = !1,
            autoFocus: g = !1,
            maxVisibleItems: v = 5,
            itemToString: A = I,
            showScrollbar: R = !1,
          } = e,
          [N, O] = r.useState(""),
          [D] = r.useState(!0),
          [y, P] = r.useState(null),
          L = r.useId(),
          b = r.useRef(null);
        r.useLayoutEffect(() => {
          let e = document.querySelector("[".concat(S, '="').concat(y, '"]')),
            t = b.current;
          null != t &&
            null != e &&
            t.scrollIntoViewNode({ node: e, padding: 12 });
        }, [y]);
        let M = n(N),
          U = 0 === M.length,
          G = r.useId(),
          w = r.useCallback(
            () =>
              new Promise(e => {
                let t = b.current;
                if (null == t) return e();
                t.scrollToTop({
                  callback: () => requestAnimationFrame(() => e()),
                });
              }),
            []
          ),
          k = r.useCallback(
            () =>
              new Promise(e => {
                let t = b.current;
                if (null == t) return e();
                t.scrollToTop({
                  callback: () => requestAnimationFrame(() => e()),
                });
              }),
            []
          ),
          x = r.useCallback((e, t) => {
            P(t);
            let n = document.querySelector(e),
              i = b.current;
            null != i && null != n && i.scrollIntoViewNode({ node: n });
          }, []),
          F = (0, o.default)({
            id: G,
            isEnabled: !0,
            useVirtualFocus: !0,
            scrollToStart: w,
            scrollToEnd: k,
            setFocus: x,
          }),
          V = R ? d.ListThin : d.ListNone;
        return (0, i.jsx)(o.ListNavigatorProvider, {
          navigator: F,
          children: (0, i.jsx)(o.ListNavigatorContainer, {
            children: e => {
              let { ref: n, onKeyDown: r, ...o } = e;
              return (0, i.jsxs)("div", {
                ref: n,
                role: "combobox",
                "aria-label": m,
                "aria-expanded": D,
                "aria-controls": D ? L : void 0,
                "aria-owns": L,
                "aria-haspopup": "listbox",
                className: a(_.combobox, u),
                children: [
                  (0, i.jsx)(E.default, {
                    autoFocus: g,
                    size: E.default.Sizes.MEDIUM,
                    placeholder: t,
                    query: N,
                    onChange: O,
                    onKeyDown: r,
                    onBlur: () => P(null),
                    onClear: () => O(""),
                    className: a({ [_.searchWithScrollbar]: R }),
                    inputProps: {
                      "aria-multiline": !1,
                      "aria-activedescendant": null != y ? y : void 0,
                    },
                  }),
                  (0, i.jsx)("div", {
                    children:
                      D &&
                      (U
                        ? (0, i.jsxs)("div", {
                            className: _.empty,
                            children: [
                              (0, i.jsx)(c.Heading, {
                                variant: "heading-md/semibold",
                                children:
                                  h.default.Messages
                                    .AUTOCOMPLETE_NO_RESULTS_HEADER,
                              }),
                              (0, i.jsx)(f.Text, {
                                color: "text-muted",
                                variant: "text-md/normal",
                                children:
                                  h.default.Messages
                                    .AUTOCOMPLETE_NO_RESULTS_BODY,
                              }),
                            ],
                          })
                        : (0, i.jsx)(C.Provider, {
                            value: {
                              activeDescendant: y,
                              selected: s,
                              setSelected: l,
                              itemToString: A,
                            },
                            children: (0, i.jsx)(V, {
                              ...o,
                              style: { maxHeight: 46 * v },
                              "aria-multiselectable": T,
                              id: L,
                              ref: b,
                              className: a(_.list, p, { [_.scroller]: R }),
                              sections: [M.length],
                              sectionHeight: 0,
                              rowHeight: 40,
                              renderRow: e => {
                                let { row: t } = e;
                                return M[t];
                              },
                              renderSection: () => null,
                            }),
                          })),
                  }),
                ],
              });
            },
          }),
        });
      }
      let A = r.createContext(null);
      function R(e) {
        var t;
        let {
            value: n,
            children: s,
            disabled: l = !1,
            selectedColor: c = m.STANDARD,
            ...d
          } = e,
          {
            activeDescendant: f,
            selected: E,
            setSelected: p,
            itemToString: h,
          } = r.useContext(C),
          T = h(n),
          g = f === T,
          I =
            null !== (t = null == d ? void 0 : d.selected) && void 0 !== t
              ? t
              : E.has(n),
          v = (0, o.useListItem)(T);
        return (0, i.jsx)(u.Clickable, {
          tag: "li",
          id: T,
          onClick: () => (l ? null : p(n)),
          [S]: n,
          className: a(_.item, { [_.focused]: g, [c]: I, [_.disabled]: l }),
          ...v,
          role: "option",
          "aria-selected": I,
          "aria-disabled": l,
          children: (0, i.jsx)(A.Provider, { value: n, children: s }),
        });
      }
      (R.Colors = m),
        (R.Label = function (e) {
          let { children: t } = e;
          return (0, i.jsx)("span", { className: _.itemLabel, children: t });
        }),
        (R.Icon = function (e) {
          let { children: t } = e;
          return (0, i.jsx)("span", { className: _.itemCheckbox, children: t });
        }),
        (R.Checkbox = function (e) {
          let { checked: t } = e,
            { selected: n } = r.useContext(C),
            s = r.useContext(A);
          return (0, i.jsx)("span", {
            className: _.itemCheckbox,
            children: (0, i.jsx)(l.Checkbox, {
              displayOnly: !0,
              value: null != t ? t : null != s && n.has(s),
              type: l.Checkbox.Types.INVERTED,
              size: 20,
            }),
          });
        }),
        (R.Checkmark = function () {
          let { selected: e } = r.useContext(C),
            t = r.useContext(A),
            n = e.has(t);
          return n
            ? (0, i.jsx)("span", {
                className: _.itemCheckbox,
                children: (0, i.jsx)(p.default, { width: 20, height: 20 }),
              })
            : null;
        });
    },
    923237: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ComboboxPopout: function () {
            return c;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("130969"),
        l = n("960486"),
        u = n("29293");
      function c(e) {
        let {
            children: t,
            placeholder: n,
            value: s,
            onChange: c,
            onClose: d,
            showScrollbar: f,
            className: E,
            multiSelect: p,
            ...h
          } = e,
          _ = r.useCallback(
            e => {
              c(e), !p && (null == d || d());
            },
            [c, d, p]
          );
        return (0, i.jsx)(o.Dialog, {
          className: a(u.container, E, { [u.scroller]: f }),
          children: (0, i.jsx)(l.Combobox, {
            ...h,
            showScrollbar: f,
            value: s,
            multiSelect: p,
            onChange: _,
            placeholder: n,
            children: t,
            listClassName: u.list,
          }),
        });
      }
    },
    322756: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          DateInput: function () {
            return E;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("414456"),
        s = n.n(r),
        a = n("227645"),
        o = n("130969"),
        l = n("442761"),
        u = n("201959"),
        c = n("943232"),
        d = n("85406"),
        f = n("905518");
      function E(e) {
        let {
          value: t,
          onSelect: n,
          dateFormat: r = "MMM D, YYYY",
          minDate: E,
          maxDate: p,
          disabled: h = !1,
        } = e;
        return (0, i.jsx)(l.Popout, {
          renderPopout: function (e) {
            let { closePopout: r } = e;
            return (0, i.jsx)(o.Dialog, {
              children: (0, i.jsx)(u.default, {
                minDate: E,
                maxDate: p,
                value: t,
                onSelect: e => {
                  n(e), r();
                },
                calendarClassName: d.calendarContainer,
                onClickOutside: r,
                autoFocus: !0,
              }),
            });
          },
          position: "bottom",
          children: e => {
            let { onClick: n, ...o } = e;
            return (0, i.jsx)(a.Clickable, {
              ...o,
              className: s(f.inputDefault, d.container, {
                [f.disabled]: h,
                [d.disabled]: h,
              }),
              onClick: h ? void 0 : n,
              "aria-disabled": h,
              children: (0, i.jsxs)("div", {
                className: d.content,
                children: [
                  (0, i.jsx)("div", {
                    className: d.text,
                    children: null == t ? void 0 : t.format(r),
                  }),
                  (0, i.jsx)(c.default, { className: d.icon }),
                ],
              }),
            });
          },
        });
      }
    },
    709749: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          AnimatedDots: function () {
            return E;
          },
          Dots: function () {
            return p;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("907002"),
        l = n("262998");
      function u() {
        return document.hasFocus();
      }
      let c = {
          config: { friction: 50, tension: 900, mass: 1 },
          unique: !0,
          initial: { dotPosition: 1 },
          from: { dotPosition: 0 },
          enter: { dotPosition: 1 },
          leave: { dotPosition: 0 },
        },
        d = { config: { duration: 2400 }, from: { dotCycle: 2.8 }, reset: !0 };
      function f(e) {
        let t = e % 2;
        return t > 1 ? 1 - (t - 1) : t;
      }
      let E = r.memo(function (e) {
          let {
              dotRadius: t,
              dotPosition: n,
              fill: s = "currentColor",
              spacing: a = 2.5,
            } = e,
            l = r.useRef(u()),
            c = r.useRef(!0);
          r.useEffect(() => () => void (c.current = !1), []);
          let [E] = (0, o.useSpring)(() => ({
              ...d,
              to: async e => {
                let t = 2.8;
                for (; c.current; ) {
                  (l.current = u()),
                    l.current
                      ? ((t += 4), await e({ dotCycle: t, immediate: !1 }))
                      : 2.8 !== t
                        ? ((t = 2.8), await e({ dotCycle: t, immediate: !0 }))
                        : await new Promise(e => setTimeout(e, 1e3));
                }
              },
            })),
            p = (6 * t + (t / 4) * 2) / 2;
          return (0, i.jsx)(i.Fragment, {
            children: [0, 1, 2].map(e => {
              let r = 0.25 * e,
                u = t + e * (t * a);
              return (0, i.jsx)(
                o.animated.circle,
                {
                  cx: n ? n.to([0, 1], [p, u]) : u,
                  cy: t,
                  r: E.dotCycle
                    .to(e => f(e - r))
                    .to([0, 0.4, 0.8, 1], [0.8 * t, 0.8 * t, t, t])
                    .to(e => (l.current ? e : t)),
                  fill: s,
                  style: {
                    opacity: E.dotCycle
                      .to(e => f(e - r))
                      .to([0, 0.4, 0.8, 1], [0.3, 0.3, 1, 1])
                      .to(e => (l.current ? e : 1)),
                  },
                },
                e
              );
            }),
          });
        }),
        p = r.memo(
          r.forwardRef(function (e, t) {
            let {
                dotRadius: n,
                x: r,
                y: s,
                hide: d = !1,
                themed: f = !1,
                className: p,
              } = e,
              h = (0, o.useTransition)(d, {
                ...c,
                key: e => (e ? "true" : "false"),
                immediate: !u(),
              });
            return h((e, u, c) => {
              let { dotPosition: d } = e,
                { key: h } = c;
              return u
                ? null
                : (0, i.jsx)(
                    "svg",
                    {
                      ref: t,
                      x: r,
                      y: s,
                      width: 6 * n + (n / 2) * 2,
                      height: 2 * n,
                      className: a(p, l.dots, f ? l.themed : null),
                      children: (0, i.jsx)(o.animated.g, {
                        style: {
                          opacity: d.to(e => Math.min(1, Math.max(e, 0))),
                        },
                        children: (0, i.jsx)(E, {
                          dotRadius: n,
                          dotPosition: d,
                        }),
                      }),
                    },
                    h
                  );
            });
          })
        );
    },
    990749: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          DnDKeyboardHelpBar: function () {
            return E;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("907002"),
        a = n("446674"),
        o = n("533979"),
        l = n("577776"),
        u = n("206230"),
        c = n("57406"),
        d = n("782340"),
        f = n("157372");
      function E() {
        let e = [
            {
              keybinds: ["Spacebar", "Enter"],
              name: d.default.Messages.DND_OPERATION_LABEL_DROP,
            },
            {
              keybinds: ["up", "down"],
              name: d.default.Messages.DND_OPERATION_LABEL_MOVE,
            },
            {
              keybinds: ["ESC"],
              name: d.default.Messages.DND_OPERATION_LABEL_CANCEL,
            },
          ],
          t = (0, a.useStateFromStores)(
            [u.default],
            () => u.default.useReducedMotion
          ),
          n = (0, c.useDndMode)(),
          E = (0, s.useTransition)(n, {
            enter: {
              from: { opacity: 0, y: t ? 0 : 80 },
              to: { opacity: 1, y: 0 },
            },
            leave: { opacity: 0, y: t ? 0 : 80 },
            config: s.config.stiff,
          });
        return E((t, n) =>
          n
            ? (0, i.jsx)("div", {
                className: f.positioner,
                children: (0, i.jsx)(s.animated.div, {
                  className: f.container,
                  style: t,
                  children: e.map((t, n) => {
                    let { keybinds: s, name: a } = t;
                    return (0, i.jsxs)(
                      r.Fragment,
                      {
                        children: [
                          (0, i.jsx)(l.Text, {
                            variant: "text-md/semibold",
                            className: f.bindName,
                            children: a,
                          }),
                          s.map(e =>
                            (0, i.jsx)(
                              o.KeyCombo,
                              { shortcut: e, className: f.shortcut },
                              e
                            )
                          ),
                          n < e.length - 1
                            ? (0, i.jsx)("span", { className: f.separator })
                            : null,
                        ],
                      },
                      a
                    );
                  }),
                }),
              })
            : null
        );
      }
    },
    57406: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useDndStore: function () {
            return r;
          },
          toggleDndMode: function () {
            return s;
          },
          useDndMode: function () {
            return a;
          },
          isInDndMode: function () {
            return o;
          },
        });
      var i = n("308503");
      let r = (0, i.default)(e => ({ inDndMode: !1 }));
      function s(e) {
        r.setState({ inDndMode: e });
      }
      function a() {
        return r(e => e.inDndMode);
      }
      function o() {
        return r.getState().inDndMode;
      }
    },
    187641: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          DnDProvider: function () {
            return f;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("626326"),
        s = n("192523"),
        a = n("819855"),
        o = n("57406"),
        l = n("999888");
      let u = (0, s.createTransition)(
          "keydown",
          e => !!(0, l.isDragTrigger)(e) && (e.preventDefault(), !0)
        ),
        c = (0, s.createTransition)(
          "mousedown",
          e =>
            -1 === e.type.indexOf("touch") &&
            -1 !== e.type.indexOf("mouse") &&
            ((0, o.toggleDndMode)(!1), !0)
        ),
        d = {
          backends: [
            { id: "html5", backend: r.HTML5Backend, transition: c },
            {
              id: "keyboard",
              backend: l.default,
              context: { window, document },
              options: {
                onDndModeChanged: o.toggleDndMode,
                announcer: a.AccessibilityAnnouncer,
              },
              preview: !0,
              transition: u,
            },
          ],
        };
      function f(e) {
        let { children: t } = e;
        return (0, i.jsx)(s.DndProvider, { options: d, children: t });
      }
    },
    263293: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i,
        r = n("782340");
      i = class {
        announce(e, t, n) {
          this.announcer.announce(e, t, n);
        }
        announceDrag(e, t) {
          if (null == e) return;
          let n = this.getName(e, t);
          this.announce(
            r.default.Messages.DND_ITEM_PICKED_UP.format({ itemName: n })
          );
        }
        announceHover(e, t) {
          null != e && this.announce(this.getName(e, t));
        }
        announceDrop() {
          this.announce(r.default.Messages.DND_ITEM_DROPPED);
        }
        announceCancel() {
          this.announce(r.default.Messages.DND_DRAG_CANCELED);
        }
        clear() {
          this.announcer.clearAnnouncements();
        }
        getName(e, t) {
          var n, i;
          return null !==
            (i =
              null !== (n = e.getAttribute("data-dnd-name")) && void 0 !== n
                ? n
                : e.getAttribute("aria-label")) && void 0 !== i
            ? i
            : t;
        }
        constructor(e) {
          if (null != e) this.announcer = e;
          else {
            let e = n("750787");
            this.announcer = {
              announce: e.announce,
              clearAnnouncements: e.clearAnnouncer,
            };
          }
        }
      };
    },
    141094: function (e, t, n) {
      "use strict";
      var i;
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        (i = class {
          createDragPreview(e) {
            if (
              null == this.container ||
              null == this.svg ||
              null == this.foreignObject
            )
              return;
            let { width: t, height: n } = e.getBoundingClientRect();
            this.svg.setAttribute("viewBox", "0 0 ".concat(t, " ").concat(n)),
              this.svg.setAttribute("width", "".concat(t)),
              this.svg.setAttribute("height", "".concat(n)),
              this.foreignObject.setAttribute("x", "0"),
              this.foreignObject.setAttribute("y", "0"),
              this.foreignObject.setAttribute("width", "".concat(t)),
              this.foreignObject.setAttribute("height", "".concat(n));
            let i = e.cloneNode(!0);
            this.foreignObject.appendChild(i);
          }
          render(e) {
            let t = this.container;
            if (null == t) return;
            let n = e.getSourceClientOffset();
            if (null != n)
              e.isDragging() &&
                ((t.style.position = "fixed"),
                (t.style.left = "".concat(n.x + 30, "px")),
                (t.style.top = "".concat(n.y + 15, "px")));
          }
          clear() {
            null != this.foreignObject && (this.foreignObject.innerHTML = "");
          }
          constructor(e) {
            this.container = null == e ? void 0 : e.createElement("div");
            let t = (this.svg = null == e ? void 0 : e.createElement("svg"));
            null != t && (t.style.contain = "paint"),
              (this.foreignObject =
                null == e ? void 0 : e.createElement("foreignObject")),
              null != this.container &&
                null != this.svg &&
                null != this.foreignObject &&
                ((this.container.className = "drag-previewer"),
                (this.container.style.cssText =
                  "z-index: 1000; filter: drop-shadow(0 0 0 var(--background-floating)) drop-shadow(var(--elevation-high))"),
                this.svg.appendChild(this.foreignObject),
                this.container.appendChild(this.svg),
                null == e || e.body.appendChild(this.container));
          }
        });
    },
    702843: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          DropTargetNavigator: function () {
            return a;
          },
        }),
        n("222007"),
        n("808653"),
        n("424973");
      var i,
        r,
        s = n("71185");
      ((r = i || (i = {})).UP = "ArrowUp"),
        (r.DOWN = "ArrowDown"),
        (r.DROP = "Shift"),
        (r.CANCEL = "Escape");
      class a {
        disconnect() {
          window.removeEventListener(
            "keydown",
            this.handleDraggedElementKeyDown,
            { capture: !0 }
          );
        }
        hoverNode(e) {
          var t;
          let n =
            null ===
              (t = Array.from(this.targetNodes.entries()).find(t => {
                let [n, i] = t;
                return e === i;
              })) || void 0 === t
              ? void 0
              : t[0];
          null != n &&
            (this.actions.hover([n], {
              clientOffset: (function (e) {
                if (null == e) return { x: 0, y: 0 };
                let t = e.nodeType === Node.ELEMENT_NODE ? e : e.parentElement;
                if (null == t) return { x: 0, y: 0 };
                let { top: n, left: i } = t.getBoundingClientRect();
                return { x: i, y: n };
              })(e),
            }),
            (this.currentHoveredNode = e),
            this.previewer.render(this.monitor),
            this.announcer.announceHover(e, n),
            null == e || e.focus());
        }
        getNextDropTarget() {
          var e;
          return this.focusManager.getNextFocusableElement({
            wrap: !1,
            from:
              null !== (e = this.currentHoveredNode) && void 0 !== e
                ? e
                : void 0,
          });
        }
        getPreviousDropTarget() {
          var e;
          return this.focusManager.getPreviousFocusableElement({
            wrap: !1,
            from:
              null !== (e = this.currentHoveredNode) && void 0 !== e
                ? e
                : void 0,
          });
        }
        getViableTargets(e) {
          let t = this.getAllowedTargets(e);
          return t.sort((e, t) => {
            if (e === t) return 0;
            let n = e.compareDocumentPosition(t);
            return (n &
              (Node.DOCUMENT_POSITION_FOLLOWING |
                (n & Node.DOCUMENT_POSITION_CONTAINED_BY))) !=
              0
              ? -1
              : (n &
                    (Node.DOCUMENT_POSITION_PRECEDING |
                      (n & Node.DOCUMENT_POSITION_CONTAINS))) !=
                  0
                ? 1
                : 0;
          });
        }
        getAllowedTargets(e) {
          let t = this.monitor.getItemType();
          return null == t
            ? Array.from(e.values())
            : Array.from(e).reduce((e, t) => {
                let [n, i] = t;
                return (
                  this.manager.getMonitor().canDropOnTarget(n) && e.push(i), e
                );
              }, []);
        }
        constructor(e, t, n, i, r) {
          (this.targetNodes = t),
            (this.manager = n),
            (this.previewer = i),
            (this.announcer = r),
            (this.handleDraggedElementKeyDown = async e => {
              switch (e.key) {
                case "ArrowUp":
                  e.preventDefault(),
                    e.stopPropagation(),
                    this.hoverNode(await this.getPreviousDropTarget());
                  return;
                case "ArrowDown":
                  e.preventDefault(),
                    e.stopPropagation(),
                    this.hoverNode(await this.getNextDropTarget());
              }
            }),
            (this.currentHoveredNode = e),
            (this.focusManager = (0, s.createFocusManager)({
              getFocusableElements: () => this.getViableTargets(t),
              getActiveElement: () => e.ownerDocument.activeElement,
            })),
            (this.actions = n.getActions()),
            (this.monitor = n.getMonitor()),
            window.addEventListener(
              "keydown",
              this.handleDraggedElementKeyDown,
              { capture: !0 }
            );
        }
      }
    },
    999888: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isDragTrigger: function () {
            return u;
          },
          default: function () {
            return d;
          },
        }),
        n("70102"),
        n("222007");
      var i = n("263293"),
        r = n("141094"),
        s = n("702843");
      let a = { DROP: [" ", "Enter"], CANCEL_DRAG: ["Escape"] };
      function o(e) {
        e.preventDefault(), e.stopImmediatePropagation();
      }
      function l(e, t) {
        return t.includes(e.key);
      }
      function u(e) {
        var t;
        let n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        return (
          (!!n && !1 === e.isTrusted) ||
          ((null === (t = e.key) || void 0 === t ? void 0 : t.toLowerCase()) ===
            "d" &&
            (e.metaKey || e.ctrlKey) &&
            !e.altKey)
        );
      }
      class c {
        setup() {
          var e;
          if (c.isSetUp)
            throw Error("Cannot have two Keyboard backends at the same time.");
          (c.isSetUp = !0),
            (this._handlingFirstEvent = !0),
            null === (e = this.context.window) ||
              void 0 === e ||
              e.addEventListener("keydown", this.handleGlobalKeyDown, {
                capture: !0,
              });
        }
        teardown() {
          var e;
          (c.isSetUp = !1),
            null === (e = this.context.window) ||
              void 0 === e ||
              e.removeEventListener("keydown", this.handleGlobalKeyDown, {
                capture: !0,
              }),
            this.endDrag();
        }
        setDndMode(e) {
          var t;
          null === (t = this.options) || void 0 === t || t.onDndModeChanged(e);
        }
        profile() {
          return {
            sourcePreviewNodes: this.sourcePreviewNodes.size,
            sourcePreviewNodeOptions: this.sourcePreviewNodeOptions.size,
            sourceNodes: this.sourceNodes.size,
          };
        }
        connectDragSource(e, t) {
          let n = this.handleDragStart.bind(this, e);
          return (
            this.sourceNodes.set(e, t),
            t.addEventListener("keydown", n),
            () => {
              this.sourceNodes.delete(e), t.removeEventListener("keydown", n);
            }
          );
        }
        connectDragPreview(e, t, n) {
          return (
            this.sourcePreviewNodeOptions.set(e, n),
            this.sourcePreviewNodes.set(e, t),
            () => {
              this.sourcePreviewNodes.delete(e),
                this.sourcePreviewNodeOptions.delete(e);
            }
          );
        }
        connectDropTarget(e, t) {
          return (
            this.targetNodes.set(e, t),
            t.addEventListener("keydown", this.handleDrop),
            (t.tabIndex = Math.max(-1, t.tabIndex)),
            () => {
              this.targetNodes.delete(e),
                t.removeEventListener("keydown", this.handleDrop);
            }
          );
        }
        endDrag(e) {
          var t;
          null != e && o(e),
            null === (t = this._navigator) || void 0 === t || t.disconnect(),
            this._previewer.clear(),
            this.monitor.isDragging() && this.actions.endDrag(),
            this.setDndMode(!1);
        }
        constructor(e, t, n) {
          (this._handlingFirstEvent = !1),
            (this.handleGlobalKeyDown = e => {
              this.monitor.isDragging() &&
                l(e, a.CANCEL_DRAG) &&
                (this.endDrag(e), this._announcer.announceCancel());
            }),
            (this.getSourceClientOffset = e =>
              (function (e) {
                if (null == e) return { x: 0, y: 0 };
                let t = e.nodeType === Node.ELEMENT_NODE ? e : e.parentElement;
                if (null == t) return { x: 0, y: 0 };
                let { top: n, left: i } = t.getBoundingClientRect();
                return { x: i, y: n };
              })(this.sourceNodes.get(e))),
            (this.handleDragStart = (e, t) => {
              var n;
              if (!u(t, this._handlingFirstEvent)) return;
              if (
                ((this._handlingFirstEvent = !1),
                !this.monitor.canDragSource(e))
              )
                return;
              if (this.monitor.isDragging()) {
                this.actions.publishDragSource();
                return;
              }
              o(t);
              let i = this.sourceNodes.get(e);
              null != i &&
                ((this._navigator = new s.DropTargetNavigator(
                  i,
                  this.targetNodes,
                  this.manager,
                  this._previewer,
                  this._announcer
                )),
                this._previewer.createDragPreview(
                  null !== (n = this.sourcePreviewNodes.get(e)) && void 0 !== n
                    ? n
                    : i
                ),
                this.actions.beginDrag([e], {
                  clientOffset: this.getSourceClientOffset(e),
                  getSourceClientOffset: this.getSourceClientOffset,
                  publishSource: !1,
                }),
                this._previewer.render(this.monitor),
                this.setDndMode(!0),
                this._announcer.announceDrag(i, e));
            }),
            (this.handleDrop = e => {
              l(e, a.DROP) &&
                (this.actions.drop(),
                this.endDrag(e),
                this._announcer.announceDrop());
            }),
            (this.manager = e),
            (this.actions = e.getActions()),
            (this.monitor = e.getMonitor()),
            (this.context = t),
            (this.options = n),
            (this.sourceNodes = new Map()),
            (this.sourcePreviewNodes = new Map()),
            (this.sourcePreviewNodeOptions = new Map()),
            (this.targetNodes = new Map()),
            (this._previewer = new r.default(t.document)),
            (this._announcer = new i.default(null == n ? void 0 : n.announcer));
        }
      }
      var d = (e, t, n) => new c(e, t, n);
    },
    633661: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useFocusBlock: function () {
            return a;
          },
          FocusBlock: function () {
            return o;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691");
      let s = 0;
      function a(e, t) {
        let [n] = r.useState(() => s++),
          i = "".concat("data-focus-blocked", "-").concat(n);
        r.useLayoutEffect(() => {
          if (t) {
            let t = e.current;
            if (null != t) {
              var n;
              let e =
                  ((n = t),
                  document.createTreeWalker(n, NodeFilter.SHOW_ELEMENT, {
                    acceptNode: e =>
                      e.tabIndex >= 0 && !e.disabled
                        ? NodeFilter.FILTER_ACCEPT
                        : NodeFilter.FILTER_SKIP,
                  })),
                r = e.currentNode;
              for (; null !== r; ) {
                let t = r,
                  n = t.tabIndex;
                (t.tabIndex = -1),
                  t.setAttribute(i, String(n)),
                  (r = e.nextNode());
              }
              return () => {
                t.querySelectorAll("[".concat(i, "]")).forEach(e => {
                  let t = e.getAttribute(i);
                  if (null != t) {
                    let n = parseInt(t, 10);
                    e.tabIndex = n;
                  }
                });
              };
            }
          }
        }, [t]);
      }
      function o(e) {
        let { children: t, className: n, enabled: s = !0 } = e,
          o = r.useRef(null);
        return (
          a(o, s), (0, i.jsx)("div", { ref: o, className: n, children: t })
        );
      }
    },
    690977: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useFocusJumpSection: function () {
            return c;
          },
          FocusJumpSection: function () {
            return d;
          },
          useFocusJumpSectionManager: function () {
            return E;
          },
        }),
        n("37983");
      var i = n("884691"),
        r = n("71185"),
        s = n("791776"),
        a = n("894282");
      let o = "data-jump-section",
        l = "global",
        u = i.createContext(l);
      function c() {
        let e = i.useContext(u);
        return i.useMemo(() => ({ [o]: e }), [e]);
      }
      function d(e) {
        let t = c();
        return e.children(t);
      }
      async function f(e) {
        var t, n, i, u;
        if (e.key !== a.FOCUS_SECTION_JUMP_KEY) return;
        let c = (0, s.eventOwnerDocument)(e);
        if (null == c) return;
        let d = null,
          f = null,
          E = e.target;
        for (; null != E; ) {
          if (E.hasAttribute(o)) {
            (d = E.getAttribute(o)), (f = E);
            break;
          }
          E = E.parentElement;
        }
        let p = (0, r.createFocusManager)({
          getFocusableElements: () =>
            Array.from(
              c.querySelectorAll(
                "[".concat(o, '="').concat(null != d ? d : l, '"]')
              )
            ),
          getActiveElement: () => c.activeElement,
        });
        if (
          (null === (t = (0, s.eventOwnerDocument)(e)) || void 0 === t
            ? void 0
            : t.activeElement) == null ||
          null == f
        ) {
          null === (n = p.getFirstFocusableElement()) ||
            void 0 === n ||
            n.focus();
          return;
        }
        e.getModifierState("Shift")
          ? null ===
              (i = await p.getPreviousFocusableElement({
                wrap: !0,
                from: f,
              })) ||
            void 0 === i ||
            i.focus()
          : null ===
              (u = await p.getNextFocusableElement({ wrap: !0, from: f })) ||
            void 0 === u ||
            u.focus();
      }
      function E(e) {
        i.useEffect(() => {
          if (e)
            return (
              window.addEventListener("keydown", f),
              () => {
                window.removeEventListener("keydown", f);
              }
            );
        }, [e]);
      }
    },
    688817: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          FocusRingManager: function () {
            return s;
          },
        });
      var i = n("15542"),
        r = n("206230");
      n("695197");
      let s = {
        init() {
          r.default.addChangeListener(() => {
            r.default.keyboardModeEnabled
              ? (i.FocusRingManager.setRingsEnabled(!0),
                i.FocusRingManager.enableAnimationTracking())
              : (i.FocusRingManager.setRingsEnabled(!1),
                i.FocusRingManager.disableAnimationTracking());
          });
        },
      };
    },
    516826: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          FormContext: function () {
            return s;
          },
          useFormContext: function () {
            return a;
          },
          FormContextProvider: function () {
            return o;
          },
        });
      var i = n("37983"),
        r = n("884691");
      let s = r.createContext({
        titleId: void 0,
        errorId: void 0,
        error: void 0,
      });
      function a() {
        return r.useContext(s);
      }
      function o(e) {
        let { children: t, ...n } = e;
        return (0, i.jsx)(s.Provider, { value: n, children: t });
      }
    },
    370373: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          FormDivider: function () {
            return o;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("414456"),
        s = n.n(r),
        a = n("867419");
      function o(e) {
        let { className: t, style: n } = e;
        return (0, i.jsx)("div", { className: s(a.divider, t), style: n });
      }
    },
    16256: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          FormErrorBlockColors: function () {
            return d;
          },
          FormErrorBlock: function () {
            return f;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("227645"),
        l = n("945330"),
        u = n("423487"),
        c = n("486859");
      let d = {
          RED: c.backgroundRed,
          BACKGROUND_TERTIARY: c.backgroundTertiary,
          BACKGROUND_ACCENT: c.backgroundAccent,
        },
        f = r.forwardRef(function (e, t) {
          let {
            role: n,
            children: r,
            className: s,
            onDismiss: f,
            backgroundColor: E = d.RED,
            icon: p = u.default,
            iconClassName: h,
          } = e;
          return (0, i.jsxs)("div", {
            className: a(c.error, s, E),
            ref: t,
            children: [
              (0, i.jsx)(p, { className: a(c.icon, h) }),
              (0, i.jsx)("div", { role: n, className: c.text, children: r }),
              null != f
                ? (0, i.jsx)(o.Clickable, {
                    onClick: f,
                    className: c.errorClose,
                    children: (0, i.jsx)(l.default, {
                      className: c.errorCloseIcon,
                    }),
                  })
                : null,
            ],
          });
        });
    },
    298742: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          FormItem: function () {
            return o;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("516826"),
        a = n("818810");
      let o = r.forwardRef(function (e, t) {
        var n, o;
        let {
            children: l,
            disabled: u = !1,
            className: c,
            titleClassName: d,
            tag: f = "h5",
            required: E = !1,
            style: p,
            title: h,
            error: _,
            ...S
          } = e,
          m = r.useId(),
          T = r.useId(),
          g = null !== (n = S.titleId) && void 0 !== n ? n : m,
          I =
            null != _
              ? null !== (o = S.errorId) && void 0 !== o
                ? o
                : T
              : void 0;
        return (0, i.jsxs)("div", {
          ref: t,
          className: null != c ? c : void 0,
          style: null != p ? p : void 0,
          children: [
            null != h || null != _
              ? (0, i.jsx)(a.FormTitle, {
                  tag: f,
                  disabled: u,
                  required: E,
                  error: _,
                  className: d,
                  id: g,
                  errorId: I,
                  ...S,
                  children: h,
                })
              : null,
            (0, i.jsx)(s.FormContextProvider, {
              titleId: g,
              errorId: I,
              error: null != _ ? _ : void 0,
              children: l,
            }),
          ],
        });
      });
    },
    603616: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          FormLabel: function () {
            return c;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("414456"),
        s = n.n(r),
        a = n("741662"),
        o = n("258078"),
        l = n("782340"),
        u = n("388258");
      function c(e) {
        let {
          children: t,
          className: n,
          disabled: r,
          required: c = !1,
          ...d
        } = e;
        return (0, i.jsxs)(o.default, {
          tag: "label",
          color: o.default.Colors.HEADER_SECONDARY,
          className: s(u.label, n, {
            [u.defaultMargin]: null == n,
            [u.disabled]: r,
          }),
          ...d,
          children: [
            t,
            c &&
              (0, i.jsxs)(i.Fragment, {
                children: [
                  (0, i.jsx)("span", {
                    className: u.required,
                    "aria-hidden": !0,
                    children: "*",
                  }),
                  (0, i.jsx)(a.HiddenVisually, {
                    children: l.default.Messages.REQUIRED,
                  }),
                ],
              }),
          ],
        });
      }
    },
    135411: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          FormNoticeTypes: function () {
            return d;
          },
          FormNoticeImagePositions: function () {
            return f;
          },
          FormNotice: function () {
            return E;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("414456"),
        s = n.n(r),
        a = n("659397"),
        o = n("145131"),
        l = n("329272"),
        u = n("818810"),
        c = n("467819");
      let d = a.Card.Types,
        f = { LEFT: "left", RIGHT: "right" };
      function E(e) {
        let t,
          n,
          {
            type: r = a.Card.Types.DANGER,
            imageData: d,
            button: E,
            className: p,
            iconClassName: h,
            title: _,
            body: S,
            style: m,
            align: T = o.default.Align.START,
          } = e,
          g = o.default.Direction.HORIZONTAL;
        if (null != d) {
          let { position: e, ...n } = d;
          (t = (0, i.jsx)(o.default.Child, {
            grow: 0,
            shrink: 0,
            children: (0, i.jsx)("img", {
              alt: "",
              className: s(c.icon, h),
              ...n,
            }),
          })),
            e === f.RIGHT && (g = o.default.Direction.HORIZONTAL_REVERSE);
        } else null != E && (n = E);
        let I = !0;
        return (
          r === a.Card.Types.PRIMARY && (I = !1),
          (0, i.jsx)(a.Card, {
            className: s(c.formNotice, p),
            type: r,
            style: m,
            children: (0, i.jsxs)(o.default, {
              direction: g,
              align: T,
              children: [
                t,
                (0, i.jsxs)(o.default.Child, {
                  children: [
                    null != _ && "" !== _
                      ? (0, i.jsx)(u.FormTitle, {
                          tag: u.FormTitleTags.H5,
                          className: s(c.formNoticeTitle, { [c.whiteText]: I }),
                          faded: !0,
                          children: _,
                        })
                      : null,
                    (0, i.jsx)(l.FormText, {
                      className: s(c.formNoticeBody, { [c.whiteText]: I }),
                      children: S,
                    }),
                    n,
                  ],
                }),
              ],
            }),
          })
        );
      }
      E.Types = a.Card.Types;
    },
    392098: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          FormSection: function () {
            return u;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("860226"),
        a = n("516826"),
        o = n("818810"),
        l = n("364005");
      function u(e) {
        var t;
        let {
            children: n,
            className: u,
            titleClassName: c,
            title: d,
            icon: f,
            disabled: E,
            htmlFor: p,
            tag: h = "h5",
            ..._
          } = e,
          S = r.useId(),
          m = null !== (t = _.titleId) && void 0 !== t ? t : S;
        return null != d
          ? (0, i.jsx)("div", {
              className: u,
              children: (0, i.jsx)(s.HeadingLevel, {
                component: (0, i.jsxs)("div", {
                  className: l.sectionTitle,
                  children: [
                    f,
                    null != d
                      ? (0, i.jsx)(o.FormTitle, {
                          tag: h,
                          id: m,
                          htmlFor: p,
                          disabled: E,
                          className: c,
                          children: d,
                        })
                      : null,
                  ],
                }),
                children: (0, i.jsx)("div", {
                  className: l.children,
                  children: (0, i.jsx)(a.FormContextProvider, {
                    titleId: m,
                    children: n,
                  }),
                }),
              }),
            })
          : (0, i.jsx)("div", { className: u, children: n });
      }
    },
    266079: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          FormSwitch: function () {
            return E;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("718776"),
        l = n("980672"),
        u = n("414055"),
        c = n("370373"),
        d = n("329272"),
        f = n("447256");
      function E(e) {
        let {
            value: t,
            disabled: n = !1,
            hideBorder: s = !1,
            tooltipNote: E,
            onChange: p,
            className: h,
            style: _,
            note: S,
            children: m,
          } = e,
          T = r.useRef(null),
          g = r.useRef(null),
          I = r.useId(),
          C = (0, i.jsx)(l.Switch, {
            id: I,
            checked: t,
            onChange: p,
            disabled: n,
            focusProps: { enabled: !1 },
            innerRef: T,
          });
        return (0, i.jsxs)("div", {
          style: _,
          className: a(f.container, h, { [f.disabled]: n }),
          children: [
            (0, i.jsx)(o.FocusRing, {
              within: !0,
              offset: -4,
              focusTarget: T,
              ringTarget: g,
              children: (0, i.jsxs)("div", {
                className: f.labelRow,
                ref: g,
                children: [
                  (0, i.jsx)("label", {
                    htmlFor: I,
                    className: f.title,
                    children: m,
                  }),
                  (0, i.jsx)("div", {
                    className: f.control,
                    children:
                      null != E
                        ? (0, i.jsx)(u.TooltipContainer, {
                            text: E,
                            children: C,
                          })
                        : C,
                  }),
                ],
              }),
            }),
            null != S &&
              (0, i.jsx)("div", {
                className: f.note,
                children: (0, i.jsx)(d.FormText, {
                  disabled: n,
                  type: d.FormTextTypes.DESCRIPTION,
                  children: S,
                }),
              }),
            !s && (0, i.jsx)(c.FormDivider, { className: f.dividerDefault }),
          ],
        });
      }
    },
    329272: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          FormTextTypes: function () {
            return l;
          },
          FormText: function () {
            return c;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("414456"),
        s = n.n(r),
        a = n("258078"),
        o = n("877705");
      let l = {
          DEFAULT: "default",
          INPUT_PLACEHOLDER: "placeholder",
          DESCRIPTION: "description",
          LABEL_BOLD: "labelBold",
          LABEL_SELECTED: "labelSelected",
          LABEL_DESCRIPTOR: "labelDescriptor",
          ERROR: "error",
          SUCCESS: "success",
        },
        u = {
          DEFAULT: "modeDefault",
          DISABLED: "modeDisabled",
          SELECTABLE: "modeSelectable",
        };
      function c(e) {
        let {
            type: t = l.DEFAULT,
            className: n,
            disabled: r,
            selectable: c,
            children: d,
            style: f,
            ...E
          } = e,
          p = u.DEFAULT;
        return (
          r ? (p = u.DISABLED) : c && (p = u.SELECTABLE),
          (0, i.jsx)(a.default, {
            className: s(o[t], n, o[p]),
            style: f,
            ...E,
            children: d,
          })
        );
      }
      c.Types = l;
    },
    818810: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          FormTitleTags: function () {
            return r;
          },
          FormTitle: function () {
            return c;
          },
        });
      var i,
        r,
        s = n("37983");
      n("884691");
      var a = n("414456"),
        o = n.n(a),
        l = n("860226"),
        u = n("649713");
      function c(e) {
        let t,
          {
            tag: n = "h5",
            children: i,
            className: r,
            faded: a,
            disabled: c,
            required: d = !1,
            error: f,
            errorId: E,
            ...p
          } = e;
        switch (n) {
          case "legend":
          case "label":
            t = n;
            break;
          default:
            t = l.H;
        }
        return (0, s.jsxs)(t, {
          className: o(u[n], "h5" !== n ? u.defaultColor : null, r, {
            [u["defaultMargin".concat(n)]]: null == r,
            [u.faded]: a,
            [u.disabled]: c,
            [u.error]: null != f,
          }),
          ...p,
          children: [
            i,
            d && null == f
              ? (0, s.jsx)("span", { className: u.required, children: "*" })
              : null,
            null != f
              ? (0, s.jsxs)("span", {
                  id: E,
                  className: u.errorMessage,
                  children: [
                    null != i
                      ? (0, s.jsx)("span", {
                          className: u.errorSeparator,
                          children: "-",
                        })
                      : null,
                    f,
                  ],
                })
              : null,
          ],
        });
      }
      ((i = r || (r = {})).H1 = "h1"),
        (i.H2 = "h2"),
        (i.H3 = "h3"),
        (i.H4 = "h4"),
        (i.H5 = "h5"),
        (i.LABEL = "label"),
        (i.LEGEND = "legend");
    },
    605451: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Heading: function () {
            return u;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("414456"),
        s = n.n(r),
        a = n("577776"),
        o = n("860226"),
        l = n("742109");
      let u = e => {
        let { variant: t, className: n, ...r } = e,
          u = (0, o.usePrivateHeadingLevel)(),
          c = "h".concat(Math.min(u, 6));
        return (0, i.jsx)(a.Text, {
          variant: t,
          tag: c,
          className: s(l.defaultColor, n),
          ...(u > 6 ? { "data-excessive-heading-level": u } : {}),
          ...r,
        });
      };
    },
    741662: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          HiddenVisually: function () {
            return o;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("414456"),
        s = n.n(r),
        a = n("919089");
      function o(e) {
        let { id: t, tag: n = "span", showOnFocus: r, children: o } = e;
        return (0, i.jsx)(n, {
          id: t,
          className: s({ [a.hiddenVisually]: !r, [a.showOnFocus]: r }),
          children: o,
        });
      }
    },
    619550: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2023-09_redesigned_icons_experiment",
        label: "Redesigned icons experiment",
        defaultConfig: { enabled: !1 },
        treatments: [
          { id: 1, label: "Redesigned icons enabled", config: { enabled: !0 } },
        ],
      });
    },
    469563: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          RedesignIconContextProvider: function () {
            return l;
          },
          useRedesignIconContext: function () {
            return u;
          },
          replaceIcon: function () {
            return c;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("619550"),
        a = n("890503");
      let o = r.createContext({ enabled: !1, highlight: !1 });
      function l(e) {
        let { children: t, overwriteValue: n } = e,
          { enabled: l } = s.default.useExperiment({
            location: "web redesign icon context",
          }),
          u = (0, a.default)("highlight_redesigned_icons"),
          c = r.useMemo(() => ({ enabled: l, highlight: u }), [l, u]);
        return (0, i.jsx)(o.Provider, {
          value: null != n ? n : c,
          children: t,
        });
      }
      function u() {
        return r.useContext(o);
      }
      function c(e, t) {
        let n =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : void 0,
          r =
            arguments.length > 3 && void 0 !== arguments[3]
              ? arguments[3]
              : { size: 24 };
        return function (s) {
          let { enabled: a, highlight: o } = u();
          if (!a) return (0, i.jsx)(e, { ...s });
          {
            var l, c;
            let e = { ...s };
            for (let [t, i] of Object.entries(
              (n = {
                foreground: "colorClass",
                color: "color",
                ...(null != n ? n : {}),
              })
            )) {
              let n = s[t];
              if (
                (null == n &&
                  "color" === t &&
                  (n = o ? "yellow" : "currentColor"),
                "remove" === i)
              ) {
                delete e[t];
                continue;
              }
              e[i] = n;
            }
            return (
              (null !== (l = e.width) && void 0 !== l) || (e.width = r.size),
              (null !== (c = e.height) && void 0 !== c) || (e.height = r.size),
              (0, i.jsx)(t, { ...e })
            );
          }
        };
      }
    },
    867603: function (e, t, n) {
      "use strict";
      n.r(t);
      var i = n("679263");
      n.es(i, t);
    },
    269096: function (e, t, n) {
      "use strict";
      n.r(t);
      var i = n("828595");
      n.es(i, t);
    },
    384737: function (e, t, n) {
      "use strict";
      n.r(t);
      var i = n("351964");
      n.es(i, t);
    },
    448052: function (e, t, n) {
      "use strict";
      n.r(t);
      var i = n("778804");
      n.es(i, t);
    },
    748802: function (e, t, n) {
      "use strict";
      n.r(t);
      var i = n("467722");
      n.es(i, t);
    },
    260792: function (e, t, n) {
      "use strict";
      n.r(t);
      var i = n("419067");
      n.es(i, t);
    },
    891128: function (e, t, n) {
      "use strict";
      n.r(t);
      var i = n("243976");
      n.es(i, t);
    },
    165984: function (e, t, n) {
      "use strict";
      n.r(t);
      var i = n("185429");
      n.es(i, t);
    },
    797439: function (e, t, n) {
      "use strict";
      n.r(t);
      var i = n("166432");
      n.es(i, t);
    },
    49482: function (e, t, n) {
      "use strict";
      n.r(t);
      var i = n("81257");
      n.es(i, t);
    },
    638558: function (e, t, n) {
      "use strict";
      n.r(t);
      var i = n("182459");
      n.es(i, t);
    },
    224763: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Interactive: function () {
            return l;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("414456"),
        s = n.n(r),
        a = n("227645"),
        o = n("507094");
      function l(e) {
        let { as: t, muted: n = !1, selected: r = !1, className: l, ...u } = e,
          c = null != t ? t : a.Clickable;
        return (0, i.jsx)(c, {
          ...u,
          className: s(o.interactive, l, { [o.muted]: n, [o.selected]: r }),
        });
      }
    },
    533979: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          PRETTY_KEYS: function () {
            return u;
          },
          KeyCombo: function () {
            return c;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("414456"),
        s = n.n(r),
        a = n("485328"),
        o = n("39925");
      function l(e) {
        let { direction: t = "up" } = e;
        return (0, i.jsx)("svg", {
          width: "10",
          height: "10",
          xmlns: "http://www.w3.org/2000/svg",
          className: s(o.bindArrow, o[t]),
          children: (0, i.jsx)("g", {
            fill: "#FFFFFF",
            children: (0, i.jsx)("polygon", {
              transform:
                "translate(5.025000, 5.000000) scale(1, -1) translate(-5.025000, -5.000000) ",
              points:
                "4.16666667 10 4.16666672 3.33333333 1.25 6.25 0.05 5 5.00000005 0 9.99999967 5 8.75 6.25 5.83333338 3.33333333 5.83333333 10",
            }),
          }),
        });
      }
      let u = {
        mod: () => a.default.modKey,
        alt: () => a.default.altKey,
        up: () => (0, i.jsx)(l, { direction: "up" }),
        down: () => (0, i.jsx)(l, { direction: "down" }),
        left: () => (0, i.jsx)(l, { direction: "left" }),
        right: () => (0, i.jsx)(l, { direction: "right" }),
        pageup: () => "page up",
        pagedown: () => "page down",
        "any-character": () => "any key",
        plus: () => "+",
        return: () => a.default.returnKey,
      };
      function c(e) {
        let { shortcut: t, dim: n = !1, className: r, keyClassName: a } = e,
          l = Array.isArray(t) ? t : t.split("+");
        return (0, i.jsx)("div", {
          className: s(o.combo, r, { [o.dim]: n }),
          children: l
            .map(e => (null != u[e] ? u[e]() : e))
            .map((e, t) =>
              (0, i.jsx)("span", { className: s(o.key, a), children: e }, t)
            ),
        });
      }
    },
    228256: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          LayerClassName: function () {
            return p;
          },
          LayerProvider: function () {
            return h;
          },
          LayerContainer: function () {
            return _;
          },
          getParentLayerContainer: function () {
            return S;
          },
          Layer: function () {
            return m;
          },
          createLayer: function () {
            return T;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("627445"),
        l = n.n(o),
        u = n("817736"),
        c = n.n(u),
        d = n("117362"),
        f = n("411093"),
        E = n("260921");
      let p = E.layerContainer;
      class h extends r.Component {
        componentWillUnmount() {
          this.state.layerContainerElement = null;
        }
        render() {
          let { layerContext: e, children: t } = this.props,
            { layerContainerElement: n } = this.state;
          return (0, i.jsx)(e.Provider, {
            value: this.getContextValue(n),
            children: t,
          });
        }
        constructor(...e) {
          super(...e),
            (this.state = { layerContainerElement: null }),
            (this.setLayerContainerElement = e => {
              this.setState({ layerContainerElement: e });
            }),
            (this.getContextValue = (0, d.cachedFunction)(e => [
              e,
              this.setLayerContainerElement,
            ]));
        }
      }
      let _ = e => {
        let { layerContext: t, className: n } = e,
          [, s] = r.useContext(t);
        return (0, i.jsx)("div", { className: a(p, n), ref: s });
      };
      function S(e) {
        let t = (0, f.default)(e, E.layerContainer);
        return l(null != t, "Unexpected missing parent container"), t;
      }
      let m = e => {
        let { layerContext: t, children: n } = e;
        return (0, i.jsx)(t.Consumer, {
          children: e =>
            (function (e, t) {
              let [n] = e;
              return null == n ? null : c.createPortal(r.Children.only(t), n);
            })(e, n),
        });
      };
      function T(e) {
        let t = r.createContext([null, () => {}]),
          n = {
            LayerProvider: e => (0, i.jsx)(h, { layerContext: t, ...e }),
            LayerContainer: e => (0, i.jsx)(_, { layerContext: t, ...e }),
            Layer: e => (0, i.jsx)(m, { layerContext: t, ...e }),
            layerContext: t,
          };
        return (
          (n.LayerProvider.displayName = "".concat(e, "LayerProvider")),
          (n.LayerContainer.displayName = "".concat(e, "LayerContainer")),
          (n.Layer.displayName = "".concat(e, "Layer")),
          n
        );
      }
    },
    222163: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          referencePortalAwareContains: function () {
            return m;
          },
          ReferencePositionLayer: function () {
            return C;
          },
        }),
        n("222007"),
        n("70102");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("627445"),
        l = n.n(o),
        u = n("718776"),
        c = n("36763"),
        d = n("659500"),
        f = n("439932"),
        E = n("411093"),
        p = n("228256"),
        h = n("49111"),
        _ = n("260921");
      let S = new WeakMap();
      function m(e, t) {
        if (e.contains(t)) return !0;
        let n = (0, E.default)(t, _.layer);
        for (; null != n; ) {
          let t = S.get(n);
          if (null == t) break;
          if (e.contains(t)) return !0;
          n = (0, E.default)(t, _.layer);
        }
        return !1;
      }
      function T(e) {
        let { positionKey: t, position: n, align: i } = e;
        return null != t ? t : "".concat(n, ":").concat(i);
      }
      function g(e, t, n, i) {
        switch (e) {
          case "top":
            return (
              l(null != t.bottom, "Missing bottom"),
              i.offsetHeight - (t.bottom + n.offsetHeight)
            );
          case "bottom":
            return (
              l(null != t.top, "Missing top"),
              i.offsetHeight - (t.top + n.offsetHeight)
            );
          case "left":
            return (
              l(null != t.right, "Missing right"),
              i.offsetWidth - (t.right + n.offsetWidth)
            );
          case "right":
            return (
              l(null != t.left, "Missing left"),
              i.offsetWidth - (t.left + n.offsetWidth)
            );
          case "center":
          case "window_center":
            return (
              l(null != t.left, "Missing left"),
              i.offsetWidth - (t.left + n.offsetWidth / 2)
            );
          default:
            throw Error("Unexpected position: ".concat(e));
        }
      }
      function I(e, t, n) {
        if (
          null != e &&
          e < 0 &&
          ("top" === n.position || "bottom" === n.position)
        ) {
          let i =
            null != t && Math.abs(e) < (null == t ? void 0 : t.offsetHeight);
          if (i && null != n.style) {
            let t = "top" === n.position ? "bottom" : "top",
              i = n.style[t];
            return {
              ...n,
              style: { ...n.style, [t]: (null == i ? 0 : i) + e },
            };
          }
        }
        return n;
      }
      class C extends r.Component {
        nudgeLeftAlignment(e, t, n) {
          let { nudgeAlignIntoViewport: i } = this.props;
          if (!i) return e;
          let r = n.offsetWidth,
            s = e + t.offsetWidth,
            a = s - r + 12;
          return a > 0 ? Math.max(12, e - a) : e;
        }
        getHorizontalAlignmentStyle(e, t, n, i) {
          let { align: r } = this.props;
          switch (r) {
            case "left": {
              let r = Math.ceil(this.nudgeLeftAlignment(e.left, t, n)),
                s = Math.ceil(e.left) - r;
              return { style: { ...i, left: r }, nudge: s };
            }
            case "right": {
              let t = Math.ceil(n.offsetWidth - e.right);
              return { style: { ...i, right: t }, nudge: 0 };
            }
            case "center": {
              let r = e.left + (e.width - t.offsetWidth) / 2,
                s = Math.ceil(this.nudgeLeftAlignment(r, t, n)),
                a = Math.ceil(r) - s;
              return { style: { ...i, left: s }, nudge: a };
            }
            default:
              throw Error("Unsupported align: ".concat(r));
          }
        }
        nudgeTopAlignment(e, t, n) {
          let { nudgeAlignIntoViewport: i } = this.props;
          if (!i) return e;
          if (e < 0) return 0;
          let r = t.getBoundingClientRect().height,
            s = n.offsetHeight,
            a = e + r - s + 12;
          return a > 0 ? Math.max(12, e - a) : e;
        }
        nudgeBottomAlignment(e, t, n) {
          let { nudgeAlignIntoViewport: i } = this.props,
            r = n.offsetHeight,
            s = r - e;
          if (!i) return s;
          let a = s + t.offsetHeight - r + 12;
          return a > 0 ? Math.max(12, s - a) : s;
        }
        getVerticalAlignmentStyle(e, t, n, i) {
          let { align: r } = this.props;
          switch (r) {
            case "top": {
              let r = Math.ceil(this.nudgeTopAlignment(e.top, t, n)),
                s = Math.ceil(e.top) - r;
              return { style: { ...i, top: r }, nudge: s };
            }
            case "bottom": {
              let r = Math.ceil(this.nudgeBottomAlignment(e.bottom, t, n)),
                s = Math.ceil(e.bottom) - r;
              return { style: { ...i, bottom: r }, nudge: s };
            }
            case "center": {
              let r = e.top + (e.height - t.offsetHeight) / 2,
                s = Math.ceil(this.nudgeTopAlignment(r, t, n)),
                a = Math.ceil(r) - s;
              return { style: { ...i, top: s }, nudge: a };
            }
            default:
              throw Error("Unsupported align: ".concat(r));
          }
        }
        calculatePositionStyle(e, t, n) {
          var i, r, s, a;
          let { reference: o, spacing: u = 0 } = this.props;
          let c =
              "function" == typeof (i = o)
                ? i()
                : (l(null != i.current, "Invalid ref"),
                  i.current.getBoundingClientRect()),
            d = n.getBoundingClientRect();
          let f =
            ((r = c),
            (s = d.left),
            (a = d.top),
            {
              top: r.top - a,
              left: r.left - s,
              bottom: r.bottom - a,
              right: r.right - s,
              width: r.width,
              height: r.height,
            });
          switch (e) {
            case "top":
              return this.getHorizontalAlignmentStyle(f, t, n, {
                bottom: n.offsetHeight - f.top + u,
              });
            case "bottom":
              return this.getHorizontalAlignmentStyle(f, t, n, {
                top: f.bottom + u,
              });
            case "left":
              return this.getVerticalAlignmentStyle(f, t, n, {
                right: n.offsetWidth - f.left + u,
              });
            case "right":
              return this.getVerticalAlignmentStyle(f, t, n, {
                left: f.right + u,
              });
            case "center":
              return this.getVerticalAlignmentStyle(f, t, n, {
                left: f.left + f.width / 2 - t.offsetWidth / 2 + u,
              });
            case "window_center":
              return this.getVerticalAlignmentStyle(f, t, n, {
                left: Math.max((window.innerWidth - t.offsetWidth) / 2, 0),
              });
            default:
              throw Error("Unexpected position: ".concat(e));
          }
        }
        calculateState() {
          let { position: e, autoInvert: t } = this.props,
            n = this.elementRef.current;
          l(null != n, "Unexpected null element");
          let i = (0, p.getParentLayerContainer)(n),
            { style: r, nudge: s } = this.calculatePositionStyle(e, n, i),
            a = null,
            o = null;
          if (t && (a = g(e, r, n, i)) < 0) {
            let t = (function (e) {
                switch (e) {
                  case "top":
                    return "bottom";
                  case "bottom":
                    return "top";
                  case "left":
                    return "right";
                  case "right":
                    return "left";
                  case "center":
                    return "center";
                  case "window_center":
                    return "window_center";
                  default:
                    throw Error();
                }
              })(e),
              { style: r, nudge: s } = this.calculatePositionStyle(t, n, i);
            if ((o = g(t, r, n, i)) > a)
              return I(o, n, { position: t, nudge: s, style: r });
          }
          return I(a, n, { position: e, nudge: s, style: r });
        }
        componentDidMount() {
          var e, t;
          let { reference: n, onMount: i } = this.props;
          this.setState({ isPositioned: !0, ...this.calculateState() });
          let r = this.elementRef.current;
          l(null != r, "Missing elementRef"),
            "function" != typeof n && null != n.current && S.set(r, n.current),
            d.ComponentDispatch.subscribe(
              h.ComponentActions.LAYER_POP_START,
              this.handleLayerPopStart
            ),
            d.ComponentDispatch.subscribe(
              h.ComponentActions.LAYER_POP_COMPLETE,
              this.handleLayerPopComplete
            ),
            null == r ||
              null === (t = r.ownerDocument) ||
              void 0 === t ||
              null === (e = t.defaultView) ||
              void 0 === e ||
              e.addEventListener("resize", this.handleLayerPopComplete),
            null == i || i();
        }
        componentDidUpdate(e, t) {
          if (
            (T(e) !== T(this.props)
              ? this.updatePosition()
              : !(function (e, t) {
                  if ("function" == typeof e && "function" == typeof t) {
                    let n = e(),
                      i = t();
                    return n.top === i.top && n.left === i.left;
                  }
                  return e === t;
                })(e.reference, this.props.reference) && this.updatePosition(),
            t.position !== this.state.position)
          ) {
            var n, i;
            null === (n = (i = this.props).onPositionChange) ||
              void 0 === n ||
              n.call(i, this.state.position);
          }
        }
        componentWillUnmount() {
          var e, t, n, i;
          let r = this.elementRef.current;
          l(null != r, "Missing elementRef"),
            S.delete(r),
            d.ComponentDispatch.unsubscribe(
              h.ComponentActions.LAYER_POP_START,
              this.handleLayerPopStart
            ),
            d.ComponentDispatch.unsubscribe(
              h.ComponentActions.LAYER_POP_COMPLETE,
              this.handleLayerPopComplete
            ),
            null == r ||
              null === (t = r.ownerDocument) ||
              void 0 === t ||
              null === (e = t.defaultView) ||
              void 0 === e ||
              e.removeEventListener("resize", this.handleLayerPopComplete),
            null === (n = (i = this.props).onUnmount) ||
              void 0 === n ||
              n.call(i);
        }
        render() {
          let {
              id: e,
              className: t,
              children: n,
              fixed: r,
              disablePointerEvents: s,
            } = this.props,
            {
              position: o,
              isPositioned: l,
              isSettingsLayerTransitioning: d,
              nudge: E,
            } = this.state;
          return (0, i.jsx)(c.UseThemeContext, {
            children: c => {
              let { theme: p } = c;
              return (0, i.jsx)("div", {
                id: e,
                className: a(t, (0, f.getThemeClass)(p), _.layer, {
                  [_.emptyError]: !1,
                  [_.layerHidden]: d,
                  [_.disabledPointerEvents]: s,
                }),
                style: {
                  position: r ? "fixed" : "absolute",
                  ...this.state.style,
                },
                ref: this.elementRef,
                children: (0, i.jsx)(u.FocusRingScope, {
                  containerRef: this.elementRef,
                  children: n(
                    { position: o, nudge: E, isPositioned: l },
                    this.updatePosition
                  ),
                }),
              });
            },
          });
        }
        constructor(...e) {
          super(...e),
            (this.elementRef = r.createRef()),
            (this.state = {
              style: Object.freeze({}),
              position: this.props.autoInvert ? null : this.props.position,
              nudge: 0,
              isPositioned: !1,
              isSettingsLayerTransitioning: !1,
            }),
            (this.handleLayerPopStart = () => {
              this.setState({ isSettingsLayerTransitioning: !0 });
            }),
            (this.handleLayerPopComplete = () => {
              let e = this.calculateState();
              this.setState({ ...e, isSettingsLayerTransitioning: !1 });
            }),
            (this.updatePosition = () => {
              this.setState(this.calculateState());
            });
        }
      }
      C.defaultProps = {
        nudgeAlignIntoViewport: !1,
        spacing: 0,
        autoInvert: !1,
        disablePointerEvents: !1,
      };
    },
    384704: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MasonryListThin: function () {
            return l;
          },
          MasonryListAuto: function () {
            return u;
          },
        });
      var i,
        r,
        s = n("405665"),
        a = n("304549"),
        o = n("517614");
      let l = (0, a.createMasonryListScroller)(
          o.thin,
          o.fade,
          null !== (i = window.ResizeObserver) && void 0 !== i
            ? i
            : s.ResizeObserver
        ),
        u = (0, a.createMasonryListScroller)(
          o.auto,
          o.fade,
          null !== (r = window.ResizeObserver) && void 0 !== r
            ? r
            : s.ResizeObserver
        );
    },
    304549: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          createMasonryListScroller: function () {
            return d;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n.n(r),
        a = n("414456"),
        o = n.n(a),
        l = n("718776"),
        u = n("462977"),
        c = n("517614");
      function d(e, t, n) {
        let a = (0, u.getScrollbarSpecs)(e),
          d = new Map(),
          f = new n(e => {
            e.forEach(e => {
              var t;
              let { target: n } = e;
              null === (t = d.get(n)) || void 0 === t || t(e);
            });
          });
        return (0, r.forwardRef)(function (n, E) {
          let {
              onScroll: p,
              dir: h = "ltr",
              sections: _,
              columns: S,
              getItemKey: m,
              getItemHeight: T,
              getSectionHeight: g,
              chunkSize: I,
              renderSection: C,
              renderItem: v,
              getSectionProps: A,
              itemGutter: R,
              removeEdgeItemGutters: N,
              sectionGutter: O,
              padding: D,
              paddingVertical: y,
              paddingHorizontal: P,
              fade: L = !1,
              className: b,
              style: M,
              ...U
            } = n,
            G = s.useRef(null),
            w = s.useRef(null),
            [k, x] = s.useState(!1),
            {
              scrollerRef: F,
              scrollerState: V,
              getScrollerState: B,
            } = (0, u.useCachedScrollerState)();
          (0, u.usePaddingFixes)({
            scrollerRef: F,
            className: b,
            specs: a,
            orientation: "vertical",
            dir: h,
          });
          let {
              forceUpdateOnChunkChange: H,
              coordsMap: j,
              gridData: Y,
              visibleSections: W,
              totalHeight: K,
              forceUpdate: z,
              masonryComputer: q,
            } = (0, u.useVirtualizedMasonryState)({
              sections: _,
              columns: S,
              getItemKey: m,
              getItemHeight: T,
              getSectionHeight: g,
              chunkSize: I,
              itemGutter: R,
              removeEdgeItemGutters: N,
              sectionGutter: O,
              padding: D,
              paddingVertical: y,
              paddingHorizontal: P,
              getScrollerState: B,
              dir: h,
            }),
            X = (0, r.useCallback)(
              function () {
                let e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : 2;
                e > V.current.dirty &&
                  ((V.current.dirty = e), 2 === e ? z() : H(1));
              },
              [H, V, z]
            ),
            Q = (0, u.useScrollSpring)(F),
            Z = (0, r.useCallback)(() => q.itemGrid, [q]),
            J = (0, r.useCallback)(() => q.coordsMap, [q]),
            $ = s.useCallback(() => X(), [X]);
          (0, u.useResizeObserverSubscription)({
            ref: F,
            key: "container",
            onUpdate: $,
            resizeObserver: f,
            listenerMap: d,
          }),
            (0, r.useImperativeHandle)(
              E,
              () => ({
                getScrollerNode: () => F.current,
                getItemGrid: Z,
                getCoordsMap: J,
                getScrollerState: B,
                ...(0, u.getAnimatedScrollHelpers)(F, B, Q),
              }),
              [F, B, Z, Q, J]
            );
          let ee = (0, r.useCallback)(
            e => {
              X(1),
                null == G.current ? x(!0) : clearTimeout(G.current),
                (G.current = setTimeout(() => {
                  (G.current = null), x(!1);
                }, 200)),
                null != p && p(e);
            },
            [p, X]
          );
          return (0, i.jsx)("div", {
            ref: F,
            onScroll: ee,
            className: o(b, { [e]: !0, [t]: L, [c.scrolling]: k }),
            style: (0, u.getMergedOrientationStyles)(M),
            ...U,
            children: (0, r.useMemo)(
              () =>
                (0, i.jsx)(l.FocusRingScope, {
                  containerRef: w,
                  children: (0, i.jsx)("div", {
                    style: { height: K },
                    className: c.content,
                    ref: w,
                    children: Object.keys(W).map(e => {
                      let t = (0, u.getMasonryListSectionIndex)(e),
                        n = j[e],
                        r = W[e],
                        s = j[(0, u.getMasonryListSectionHeaderKey)(t)],
                        a = null == A ? void 0 : A(t);
                      return null != n && null != r
                        ? (0, i.jsxs)(
                            "div",
                            {
                              style: n,
                              ...a,
                              children: [
                                null != C && null != s && C(t, s, e),
                                r.map(e => {
                                  let [t, n, i] = e,
                                    r = j[t];
                                  return null != r ? v(n, i, r, t, Y) : null;
                                }),
                              ],
                            },
                            e
                          )
                        : null;
                    }),
                  }),
                }),
              [W, v, C, j, K, A, Y]
            ),
          });
        });
      }
    },
    199285: function (e, t, n) {
      "use strict";
      function i(e, t) {
        return "function" == typeof e ? e(t) : e;
      }
      n.r(t),
        n.d(t, {
          renderSubnode: function () {
            return i;
          },
        });
    },
    71096: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Menu: function () {
            return T;
          },
          MenuSpinner: function () {
            return g;
          },
        }),
        n("881410"),
        n("808653"),
        n("424973"),
        n("222007"),
        n("70102");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("714617"),
        l = n.n(o),
        u = n("880317"),
        c = n("311720"),
        d = n("670914"),
        f = n("242670"),
        E = n("180748"),
        p = n("206230"),
        h = n("155823"),
        _ = n("107728"),
        S = n("537011"),
        m = n("946032");
      function T(e) {
        var t;
        let {
            navId: n,
            variant: s = "flexible",
            hideScroller: o = !1,
            className: f,
            children: T,
            onClose: g,
            onSelect: C,
          } = e,
          v = (function e(t) {
            return (function e(t) {
              return null == t
                ? []
                : r.Children.toArray(t).flatMap(t => {
                    var n;
                    return null == t
                      ? []
                      : Array.isArray(t)
                        ? e(t)
                        : t.type === r.Fragment
                          ? null !== (n = e(t.props.children)) && void 0 !== n
                            ? n
                            : []
                          : [t];
                  });
            })(t).reduce((t, n) => {
              var i, r;
              if (n.type === h.MenuSeparator)
                return t.push({ type: "separator", navigable: !1 }), t;
              if (n.type === h.MenuGroup) {
                let i = e(n.props.children);
                return (
                  i.length > 0 &&
                    (t.push({
                      type: "groupstart",
                      length: i.length,
                      navigable: !1,
                      props: n.props,
                    }),
                    t.push(...i),
                    t.push({
                      type: "groupend",
                      length: i.length,
                      navigable: !1,
                      props: n.props,
                    })),
                  t
                );
              }
              if (n.type === h.MenuItem)
                return (
                  t.push(
                    null != n.props.render
                      ? {
                          type: "customitem",
                          key: n.props.id,
                          navigable:
                            null == n.props.navigable || n.props.navigable,
                          render: n.props.render,
                          props: n.props,
                        }
                      : {
                          type: "item",
                          key: n.props.id,
                          navigable: !0,
                          label: n.props.label,
                          children: n.props.children
                            ? e(n.props.children)
                            : void 0,
                          onChildrenScroll: n.props.onChildrenScroll,
                          props: n.props,
                          childRowHeight: n.props.childRowHeight,
                          listClassName: n.props.listClassName,
                          subMenuClassName: n.props.subMenuClassName,
                        }
                  ),
                  t
                );
              else if (n.type === h.MenuCheckboxItem)
                return (
                  t.push({
                    type: "checkbox",
                    key: n.props.id,
                    navigable: !0,
                    props: n.props,
                  }),
                  t
                );
              else if (n.type === h.MenuRadioItem)
                return (
                  t.push({
                    type: "radio",
                    key: n.props.id,
                    navigable: !0,
                    props: n.props,
                  }),
                  t
                );
              else if (n.type === h.MenuControlItem)
                return (
                  t.push(
                    null != n.props.control
                      ? {
                          type: "control",
                          key: n.props.id,
                          navigable: !0,
                          props: n.props,
                        }
                      : {
                          type: "compositecontrol",
                          key: n.props.id,
                          navigable: !1 !== n.props.interactive,
                          children: n.props.children,
                          props: n.props,
                        }
                  ),
                  t
                );
              throw Error(
                "Menu API only allows Items and groups of Items as children. Received "
                  .concat(
                    null !==
                      (r =
                        null !== (i = null == n ? void 0 : n.type) &&
                        void 0 !== i
                          ? i
                          : n) && void 0 !== r
                      ? r
                      : typeof n,
                    " ("
                  )
                  .concat(typeof n, ") instead")
              );
            }, []);
          })(T),
          A = (function e(t) {
            return t.reduce(
              (t, n) =>
                n.navigable
                  ? (t.push({
                      key: n.key,
                      children:
                        "item" === n.type && null != n.children
                          ? e(n.children)
                          : void 0,
                    }),
                    t)
                  : t,
              []
            );
          })(v),
          R = r.useRef([]);
        !l(R.current, A) && (R.current = A);
        let N =
            null === (t = v.find(e => null != e.key)) || void 0 === t
              ? void 0
              : t.key,
          O = (0, u.useMenuNavigator)({
            navId: n,
            items: R.current,
            initialFocusPath:
              p.default.keyboardModeEnabled && null != N ? [N] : [],
            closeMenu: g,
          });
        r.useEffect(() => {
          O.isUsingKeyboardNavigation
            ? !p.default.keyboardModeEnabled && (0, E.enableKeyboardMode)()
            : p.default.keyboardModeEnabled && (0, E.disableKeyboardMode)();
        }, [O.isUsingKeyboardNavigation]);
        let D = r.useRef(null);
        (0, c.useFocusLock)(D);
        let y = o ? d.ScrollerNone : d.ScrollerThin;
        return (0, i.jsx)(_.OnMenuSelectContext.Provider, {
          value: C,
          children: (0, i.jsx)("div", {
            className: a(m.menu, m[s], f),
            ...O.getContainerProps(),
            ref: D,
            "aria-label": e["aria-label"],
            children: (0, i.jsxs)(y, {
              className: m.scroller,
              children: [
                0 === v.length &&
                  (0, i.jsx)(S.Item, {
                    disabled: !0,
                    label: () => (0, i.jsx)(I, {}),
                    menuItemProps: O.getItemProps({ path: ["empty"] }),
                    isFocused: !1,
                    onFocus: () => {},
                    onClose: g,
                  }),
                v.length > 0 &&
                  (function e(t, n, r, s) {
                    let a = 0,
                      o = [];
                    return t.reduce((t, l, u) => {
                      let c = o.length > 0 ? o[o.length - 1] : t;
                      switch (l.type) {
                        case "separator":
                          c.push(
                            (0, i.jsx)(S.Separator, {}, "separator-".concat(u))
                          ),
                            (a = 0);
                          break;
                        case "groupstart":
                          a > 0 &&
                            l.length > 0 &&
                            (c.push(
                              (0, i.jsx)(
                                S.Separator,
                                {},
                                "separator-".concat(u)
                              )
                            ),
                            (a = 0)),
                            o.push([]);
                          break;
                        case "groupend":
                          o.length > 0 &&
                            t.push(
                              (0, i.jsx)(
                                S.Group,
                                { contents: o.pop(), ...l.props },
                                "group-".concat(u)
                              )
                            );
                          break;
                        case "item": {
                          let {
                              children: t,
                              childRowHeight: o,
                              onChildrenScroll: u,
                              listClassName: d,
                              subMenuClassName: f,
                            } = l,
                            E = null != t,
                            p = [...r, l.key],
                            h = n.isFocused(p),
                            _ = (0, i.jsx)(
                              S.Item,
                              {
                                ...l.props,
                                label: l.label,
                                hasSubmenu: null != t,
                                isFocused: h,
                                menuItemProps: {
                                  ...n.getItemProps({ path: p, hasSubmenu: E }),
                                  ...(null != t ? { "aria-haspopup": !0 } : {}),
                                },
                                onClose: s,
                              },
                              l.key
                            );
                          E
                            ? null != o
                              ? c.push(
                                  (0, i.jsx)(
                                    S.SubmenuListItem,
                                    {
                                      ...l.props,
                                      parentItem: _,
                                      isFocused: h,
                                      menuSubmenuProps: n.getSubmenuProps({
                                        path: p,
                                      }),
                                      rows: e(t, n, p, s),
                                      rowHeight: o,
                                      onScroll: u,
                                      listClassName: d,
                                    },
                                    "".concat(l.key, "-submenu")
                                  )
                                )
                              : c.push(
                                  (0, i.jsx)(
                                    S.SubmenuItem,
                                    {
                                      ...l.props,
                                      subMenuClassName: f,
                                      parentItem: _,
                                      isFocused: h,
                                      menuSubmenuProps: n.getSubmenuProps({
                                        path: p,
                                      }),
                                      renderSubmenu: () => e(t, n, p, s),
                                    },
                                    "".concat(l.key, "-submenu")
                                  )
                                )
                            : c.push(_),
                            a++;
                          break;
                        }
                        case "customitem": {
                          let e = [...r, l.key];
                          c.push(
                            (0, i.jsx)(
                              S.CustomItem,
                              {
                                ...l.props,
                                isFocused: n.isFocused(e),
                                menuItemProps: n.getItemProps({ path: e }),
                                onClose: s,
                                children: l.render,
                              },
                              l.key
                            )
                          ),
                            a++;
                          break;
                        }
                        case "checkbox": {
                          let e = [...r, l.key];
                          c.push(
                            (0, i.jsx)(
                              S.CheckboxItem,
                              {
                                ...l.props,
                                isFocused: n.isFocused(e),
                                menuItemProps: n.getItemProps({
                                  path: e,
                                  role: "menuitemcheckbox",
                                }),
                              },
                              l.key
                            )
                          ),
                            a++;
                          break;
                        }
                        case "radio": {
                          let e = [...r, l.key];
                          c.push(
                            (0, i.jsx)(
                              S.RadioItem,
                              {
                                ...l.props,
                                isFocused: n.isFocused(e),
                                menuItemProps: n.getItemProps({
                                  path: e,
                                  role: "menuitemradio",
                                }),
                              },
                              l.key
                            )
                          ),
                            a++;
                          break;
                        }
                        case "control": {
                          let e = [...r, l.key];
                          c.push(
                            (0, i.jsx)(
                              S.ControlItem,
                              {
                                ...l.props,
                                isFocused: n.isFocused(e),
                                menuItemProps: n.getItemProps({ path: e }),
                                onClose: s,
                              },
                              l.key
                            )
                          ),
                            a++;
                          break;
                        }
                        case "compositecontrol": {
                          let e = [...r, l.key];
                          c.push(
                            (0, i.jsx)(
                              S.CompositeControlItem,
                              {
                                ...l.props,
                                isFocused: n.isFocused(e),
                                menuItemProps: n.getItemProps({ path: e }),
                                onClose: s,
                                children: l.children,
                              },
                              l.key
                            )
                          ),
                            a++;
                        }
                      }
                      return t;
                    }, []);
                  })(v, O, [], g),
              ],
            }),
          }),
        });
      }
      function g() {
        return (0, i.jsx)("div", {
          className: a(m.menu, m.loader, m.flexible),
          children: (0, i.jsx)(f.Spinner, {}),
        });
      }
      function I() {
        let e = "♫ (つ｡◕‿‿◕｡)つ ♪",
          [t, n] = r.useState(e);
        return (
          r.useEffect(() => {
            if (p.default.useReducedMotion) return;
            let t = setInterval(() => {
              n(t => (t === e ? "♫ ⊂(｡◕‿‿◕｡⊂) ♪" : e));
            }, 700);
            return () => clearInterval(t);
          }, []),
          (0, i.jsx)("div", {
            style: { width: "100%", textAlign: "center" },
            children: t,
          })
        );
      }
    },
    155823: function (e, t, n) {
      "use strict";
      function i() {
        return null;
      }
      function r(e) {
        return null;
      }
      function s(e) {
        return null;
      }
      function a(e) {
        return null;
      }
      function o(e) {
        return null;
      }
      function l(e) {
        return null;
      }
      n.r(t),
        n.d(t, {
          MenuSeparator: function () {
            return i;
          },
          MenuGroup: function () {
            return r;
          },
          MenuItem: function () {
            return s;
          },
          MenuCheckboxItem: function () {
            return a;
          },
          MenuRadioItem: function () {
            return o;
          },
          MenuControlItem: function () {
            return l;
          },
        });
    },
    389802: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MENU_ITEM_COLORS: function () {
            return r;
          },
        });
      var i = n("946032");
      let r = {
        default: i.colorDefault,
        brand: i.colorBrand,
        danger: i.colorDanger,
        premium: i.colorPremium,
        "premium-gradient": i.colorPremiumGradient,
        success: i.colorSuccess,
      };
    },
    107728: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          OnMenuSelectContext: function () {
            return r;
          },
        });
      var i = n("884691");
      let r = i.createContext(void 0);
    },
    404417: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MenuImageUploadControl: function () {
            return o;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("551042"),
        a = n("694187");
      let o = r.forwardRef(function (e, t) {
        let o = r.useRef(null);
        return (
          r.useImperativeHandle(
            t,
            () => ({
              focus: () => null,
              activate: () => {
                var e;
                return (
                  null === (e = o.current) ||
                    void 0 === e ||
                    e.activateUploadDialogue(),
                  !1
                );
              },
            }),
            []
          ),
          (0, i.jsx)("div", {
            style: { position: "relative" },
            children: (0, i.jsx)(a.default, {
              ...e,
              ref: o,
              onChange: function (t, r) {
                (0, s.openModalLazy)(async () => {
                  let { default: s } = await n
                    .el("57015")
                    .then(n.bind(n, "57015"));
                  return n =>
                    (0, i.jsx)(s, {
                      imgURI: t,
                      file: r,
                      onCrop: e.onChange,
                      ...n,
                    });
                });
              },
            }),
          })
        );
      });
    },
    836234: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MenuInteractiveCompositeControl: function () {
            return s;
          },
        });
      var i = n("37983"),
        r = n("884691");
      let s = r.forwardRef(function (e, t) {
        let { className: n, children: s } = e,
          a = r.useRef(null),
          o = r.useRef(null);
        return (
          r.useImperativeHandle(
            t,
            () => ({
              focus: () => {
                var e;
                let t = a.current;
                null != t &&
                  (null == o.current &&
                    (o.current = t.querySelector('[tabindex="0"]')),
                  null === (e = o.current) || void 0 === e || e.focus());
              },
              blur: () => {
                var e;
                return null === (e = o.current) || void 0 === e
                  ? void 0
                  : e.blur();
              },
              activate: () => !1,
            }),
            []
          ),
          r.useLayoutEffect(() => {
            let e = a.current;
            if (null != e)
              return (
                e.addEventListener("focusin", t),
                () => {
                  e.removeEventListener("focusin", t);
                }
              );
            function t(e) {
              o.current = e.target;
            }
          }, []),
          (0, i.jsx)("div", {
            ref: a,
            className: n,
            style: { position: "relative" },
            children: s,
          })
        );
      });
    },
    609026: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MenuSearchControl: function () {
            return p;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("227645"),
        l = n("718776"),
        u = n("242670"),
        c = n("945330"),
        d = n("229915"),
        f = n("782340"),
        E = n("571271");
      let p = r.forwardRef(function (e, t) {
        var n, s, p;
        let {
            query: h,
            onChange: _,
            loading: S = !1,
            disabled: m = !1,
            placeholder: T = f.default.Messages.SEARCH,
            "aria-label": g,
          } = e,
          I = r.useRef(null),
          C = r.useRef(null);
        r.useImperativeHandle(
          t,
          () => ({
            focus: () => {
              var e;
              return null === (e = C.current) || void 0 === e
                ? void 0
                : e.focus();
            },
            blur: () => {
              var e;
              return null === (e = C.current) || void 0 === e
                ? void 0
                : e.blur();
            },
            activate: () => !1,
          }),
          []
        );
        let v =
          ((n = h),
          (s = S),
          (p = _),
          s
            ? (0, i.jsx)("div", {
                className: E.iconContainer,
                children: (0, i.jsx)(u.Spinner, {
                  type: u.Spinner.Type.SPINNING_CIRCLE,
                  className: a(E.icon),
                }),
              })
            : n.length > 0
              ? (0, i.jsx)(o.Clickable, {
                  "aria-label": f.default.Messages.SEARCH_CLEAR,
                  className: a(E.iconContainer, E.iconClickable),
                  onClick: e => {
                    e.stopPropagation(), p("");
                  },
                  onMouseDown: e => {
                    e.preventDefault(), e.stopPropagation();
                  },
                  focusProps: {
                    offset: { top: -3, right: -3, bottom: -3, left: -3 },
                  },
                  children: (0, i.jsx)(c.default, {
                    width: 18,
                    height: 18,
                    className: E.icon,
                    "aria-label": f.default.Messages.CLOSE,
                  }),
                })
              : (0, i.jsx)("div", {
                  className: E.iconContainer,
                  children: (0, i.jsx)(d.default, {
                    width: 18,
                    height: 18,
                    className: E.icon,
                    "aria-label": f.default.Messages.SEARCH,
                  }),
                }));
        return (0, i.jsx)(l.FocusRing, {
          focusTarget: C,
          ringTarget: I,
          offset: { top: 2, bottom: 2, left: 4, right: 4 },
          children: (0, i.jsxs)("div", {
            className: E.container,
            ref: I,
            children: [
              (0, i.jsx)("input", {
                role: "searchbox",
                "aria-busy": S,
                ref: C,
                className: E.input,
                value: h,
                onChange: e => _(e.currentTarget.value),
                "aria-label": g,
                placeholder: T,
                disabled: m,
              }),
              v,
            ],
          }),
        });
      });
    },
    873830: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MenuSliderControl: function () {
            return l;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("837443"),
        a = n("92730");
      let o = e => "".concat(e.toFixed(0), "%"),
        l = r.forwardRef(function (e, t) {
          let {
              value: n,
              minValue: l = 0,
              maxValue: u = 100,
              onChange: c,
              renderValue: d = o,
              "aria-label": f,
            } = e,
            E = r.useRef(null);
          return (
            r.useImperativeHandle(
              t,
              () => ({
                focus: () => {
                  var e;
                  return null === (e = E.current) || void 0 === e
                    ? void 0
                    : e.focus();
                },
                blur: () => {
                  var e;
                  return null === (e = E.current) || void 0 === e
                    ? void 0
                    : e.blur();
                },
                activate: () => !1,
              }),
              []
            ),
            (0, i.jsx)("div", {
              className: a.sliderContainer,
              children: (0, i.jsx)(s.Slider, {
                ref: E,
                mini: !0,
                handleSize: 16,
                className: a.slider,
                initialValue: n,
                minValue: l,
                maxValue: u,
                onValueChange: c,
                asValueChanges: c,
                onValueRender: d,
                orientation: "horizontal",
                "aria-label": f,
              }),
            })
          );
        });
    },
    697917: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ensureItemVisible: function () {
            return r;
          },
        });
      var i = n("206230");
      function r(e) {
        var t;
        i.default.keyboardModeEnabled &&
          (null === (t = e.current) ||
            void 0 === t ||
            t.scrollIntoView({ block: "nearest" }));
      }
    },
    964019: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MenuCheckboxItem: function () {
            return p;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("227645"),
        l = n("199285"),
        u = n("697917"),
        c = n("36562"),
        d = n("781291"),
        f = n("389802"),
        E = n("946032");
      function p(e) {
        let {
            color: t = "default",
            label: n,
            checked: s,
            subtext: p,
            disabled: h,
            isFocused: _,
            menuItemProps: S,
            action: m,
            className: T,
            focusedClassName: g,
          } = e,
          I = r.useRef(null);
        return (
          r.useEffect(() => {
            _ && (0, u.ensureItemVisible)(I);
          }, [_]),
          (0, i.jsxs)(o.Clickable, {
            innerRef: I,
            className: a(E.item, E.labelContainer, f.MENU_ITEM_COLORS[t], T, {
              [E.disabled]: h,
              [E.focused]: _,
              [null != g ? g : ""]: _,
            }),
            onClick: h ? void 0 : m,
            ...S,
            "aria-checked": s,
            "aria-disabled": h,
            children: [
              (0, i.jsxs)("div", {
                className: E.label,
                children: [
                  (0, l.renderSubnode)(n, e),
                  null != p &&
                    (0, i.jsx)("div", { className: E.subtext, children: p }),
                ],
              }),
              (0, i.jsx)("div", {
                className: E.iconContainer,
                children: s
                  ? (0, i.jsx)(d.default, {
                      className: E.icon,
                      background: E.checkbox,
                      foreground: E.check,
                    })
                  : (0, i.jsx)(c.default, {
                      className: E.icon,
                      foreground: E.checkboxEmpty,
                    }),
              }),
            ],
          })
        );
      }
    },
    922260: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MenuCompositeControlItem: function () {
            return c;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("697917"),
        l = n("389802"),
        u = n("946032");
      function c(e) {
        let {
            color: t = "default",
            disabled: n,
            isFocused: s,
            showDefaultFocus: c = !1,
            menuItemProps: d,
            children: f,
          } = e,
          E = r.useRef(null);
        return (
          r.useLayoutEffect(() => {
            if (!s) return;
            let e = E.current;
            if (null == e) return;
            (0, o.ensureItemVisible)(E);
            let t = e.querySelector('[tabindex="0"]');
            null == t || t.focus();
          }, [s]),
          (0, i.jsx)("div", {
            ref: E,
            className: a(u.item, l.MENU_ITEM_COLORS[t], {
              [u.disabled]: n,
              [u.focused]: c && s,
              [u.hideInteraction]: !c,
            }),
            "aria-disabled": n,
            ...d,
            children: f,
          })
        );
      }
    },
    412256: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MenuControlItem: function () {
            return c;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("697917"),
        l = n("389802"),
        u = n("946032");
      function c(e) {
        let {
            color: t = "default",
            label: n,
            control: s,
            disabled: c,
            isFocused: d,
            showDefaultFocus: f = !1,
            menuItemProps: E,
            onClose: p,
          } = e,
          h = r.useRef(null),
          _ = r.useRef(null);
        r.useLayoutEffect(() => {
          var e, t, n;
          d
            ? ((0, o.ensureItemVisible)(h),
              null === (e = _.current) || void 0 === e || e.focus())
            : null === (n = _.current) ||
              void 0 === n ||
              null === (t = n.blur) ||
              void 0 === t ||
              t.call(n);
        }, [d]);
        let S = r.useCallback(() => {
            var e, t;
            let n =
              null === (t = _.current) || void 0 === t
                ? void 0
                : null === (e = t.activate) || void 0 === e
                  ? void 0
                  : e.call(t);
            n && p();
          }, [p]),
          m = s({ onClose: p, disabled: c, isFocused: d }, _);
        return (0, i.jsxs)("div", {
          onClick: S,
          className: a(u.item, l.MENU_ITEM_COLORS[t], {
            [u.disabled]: c,
            [u.focused]: f && d,
            [u.hideInteraction]: !f,
          }),
          "aria-disabled": c,
          ...E,
          children: [
            null != n
              ? (0, i.jsx)("div", {
                  className: u.labelContainer,
                  children: (0, i.jsx)("div", {
                    className: u.label,
                    children: n,
                  }),
                })
              : null,
            m,
          ],
        });
      }
    },
    916528: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MenuCustomItem: function () {
            return d;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("227645"),
        l = n("697917"),
        u = n("389802"),
        c = n("946032");
      function d(e) {
        let {
            children: t,
            color: n = "default",
            isFocused: s = !1,
            disabled: d = !1,
            keepItemStyles: f = !1,
            menuItemProps: E,
            action: p,
            dontCloseOnActionIfHoldingShiftKey: h,
            onClose: _,
          } = e,
          S = r.useRef(null);
        r.useEffect(() => {
          s && (0, l.ensureItemVisible)(S);
        }, [s]);
        let m = r.useCallback(
            e => {
              if (null == p) return !1;
              !(e.shiftKey && h) && _(),
                e.persist(),
                requestAnimationFrame(() => p(e));
            },
            [p, _, h]
          ),
          T = f
            ? a(c.item, u.MENU_ITEM_COLORS[n], { [c.focused]: s })
            : c.customItem;
        return (0, i.jsx)(o.Clickable, {
          innerRef: S,
          className: T,
          onClick: d ? void 0 : m,
          "aria-disabled": d,
          ...E,
          children: t({ color: n, disabled: d, isFocused: s }),
        });
      }
    },
    539365: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MenuGroup: function () {
            return l;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("414456"),
        s = n.n(r),
        a = n("389802"),
        o = n("946032");
      function l(e) {
        let { contents: t, label: n, className: r, color: l = "default" } = e;
        return 0 === t.length
          ? null
          : (0, i.jsxs)("div", {
              "aria-label": n,
              role: "group",
              className: r,
              children: [
                null != n
                  ? (0, i.jsx)("div", {
                      className: s(o.groupLabel, a.MENU_ITEM_COLORS[l]),
                      children: n,
                    })
                  : null,
                t,
              ],
            });
      }
    },
    426264: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MenuItem: function () {
            return h;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("227645"),
        l = n("199285"),
        u = n("107728"),
        c = n("697917"),
        d = n("886074"),
        f = n("772280"),
        E = n("389802"),
        p = n("946032");
      function h(e) {
        let {
            color: t = "default",
            label: n,
            icon: s,
            showIconFirst: h = !1,
            imageUrl: _,
            hint: S,
            subtext: m,
            hasSubmenu: T,
            disabled: g,
            isFocused: I,
            menuItemProps: C,
            action: v,
            onClose: A,
            onFocus: R,
            className: N,
            focusedClassName: O,
            subMenuIconClassName: D,
            dontCloseOnActionIfHoldingShiftKey: y,
            iconProps: P,
            sparkle: L,
          } = e,
          b = r.useContext(u.OnMenuSelectContext),
          M = r.useRef(null),
          U = r.useCallback(
            e => {
              if (null == v) return !1;
              !(e.shiftKey && y) && A(),
                e.persist(),
                null == b || b(),
                requestAnimationFrame(() => v(e));
            },
            [v, A, b, y]
          );
        return (
          r.useEffect(() => {
            I && ((0, c.ensureItemVisible)(M), null == R || R());
          }, [I, R]),
          (0, i.jsxs)(o.Clickable, {
            innerRef: M,
            className: a(p.item, p.labelContainer, E.MENU_ITEM_COLORS[t], N, {
              [p.disabled]: g,
              [p.focused]: I,
              [null != O ? O : ""]: I,
            }),
            onClick: g ? void 0 : U,
            "aria-disabled": g,
            ...C,
            "data-menu-item": "true",
            children: [
              h &&
                null != s &&
                (0, i.jsx)("div", {
                  className: p.iconContainerLeft,
                  children: (0, i.jsx)(s, {
                    ...P,
                    className: a(p.icon, null == P ? void 0 : P.className),
                    isFocused: I,
                  }),
                }),
              (0, i.jsxs)("div", {
                className: p.label,
                children: [
                  (0, l.renderSubnode)(n, e),
                  null != m &&
                    (0, i.jsx)("div", { className: p.subtext, children: m }),
                ],
              }),
              null != S &&
                (0, i.jsx)("div", {
                  className: p.hintContainer,
                  children: (0, l.renderSubnode)(S, e),
                }),
              !h &&
                null != s &&
                (0, i.jsx)("div", {
                  className: p.iconContainer,
                  children: (0, i.jsx)(s, {
                    ...P,
                    className: a(p.icon, null == P ? void 0 : P.className),
                    isFocused: I,
                  }),
                }),
              null != _ &&
                (0, i.jsx)("div", {
                  className: p.imageContainer,
                  children: (0, i.jsx)("img", {
                    className: p.image,
                    src: (0, l.renderSubnode)(_, e),
                    alt: "",
                  }),
                }),
              T &&
                (0, i.jsxs)("div", {
                  className: p.iconContainer,
                  children: [
                    (0, i.jsx)(f.default, { className: a(p.caret, D) }),
                    L && (0, i.jsx)(d.default, { className: p.sparkles }),
                  ],
                }),
            ],
          })
        );
      }
    },
    146155: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MenuRadioItem: function () {
            return p;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("227645"),
        l = n("199285"),
        u = n("697917"),
        c = n("904276"),
        d = n("875436"),
        f = n("389802"),
        E = n("946032");
      function p(e) {
        let {
            color: t = "default",
            label: n,
            checked: s,
            subtext: p,
            disabled: h,
            isFocused: _,
            menuItemProps: S,
            action: m,
          } = e,
          T = r.useRef(null);
        return (
          r.useEffect(() => {
            _ && (0, u.ensureItemVisible)(T);
          }, [_]),
          (0, i.jsxs)(o.Clickable, {
            innerRef: T,
            className: a(E.item, E.labelContainer, f.MENU_ITEM_COLORS[t], {
              [E.disabled]: h,
              [E.focused]: _,
            }),
            onClick: h ? void 0 : m,
            ...S,
            "aria-checked": s,
            "aria-disabled": h,
            children: [
              (0, i.jsxs)("div", {
                className: E.label,
                children: [
                  (0, l.renderSubnode)(n, e),
                  null != p &&
                    (0, i.jsx)("div", { className: E.subtext, children: p }),
                ],
              }),
              (0, i.jsx)("div", {
                className: E.iconContainer,
                children: s
                  ? (0, i.jsx)(d.default, {
                      className: E.icon,
                      background: E.radio,
                      foreground: E.radioSelection,
                    })
                  : (0, i.jsx)(c.default, {
                      className: E.icon,
                      foreground: E.radio,
                    }),
              }),
            ],
          })
        );
      }
    },
    536864: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MenuSeparator: function () {
            return s;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("946032");
      function s() {
        return (0, i.jsx)("div", { role: "separator", className: r.separator });
      }
    },
    8022: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MenuSubmenuItem: function () {
            return d;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("222163"),
        l = n("697917"),
        u = n("670914"),
        c = n("946032");
      function d(e) {
        let {
            subMenuClassName: t,
            parentItem: n,
            isFocused: s,
            menuSubmenuProps: d,
            renderSubmenu: f,
          } = e,
          { focusIndex: E, isUsingKeyboardNavigation: p, ...h } = d,
          _ = r.useRef(null),
          S = r.useRef(null),
          m = r.useRef(null);
        return (
          r.useLayoutEffect(() => {
            var e;
            s &&
              ((0, l.ensureItemVisible)(_),
              null === (e = m.current) || void 0 === e || e.focus());
          }, [s]),
          (0, i.jsxs)("div", {
            ref: _,
            className: c.submenuContainer,
            children: [
              (0, i.jsx)("div", { ref: S }),
              n,
              s
                ? (0, i.jsx)(o.ReferencePositionLayer, {
                    reference: S,
                    autoInvert: !0,
                    nudgeAlignIntoViewport: !0,
                    fixed: !0,
                    spacing: 4,
                    position: "right",
                    align: "top",
                    children: () =>
                      (0, i.jsx)("div", {
                        className: c.submenuPaddingContainer,
                        children: (0, i.jsx)("div", {
                          className: a(c.submenu, t),
                          ...h,
                          ref: m,
                          children: (0, i.jsx)(u.ScrollerThin, {
                            className: c.scroller,
                            children: f(),
                          }),
                        }),
                      }),
                  })
                : null,
            ],
          })
        );
      }
    },
    967541: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MenuSubmenuListItem: function () {
            return u;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("222163"),
        a = n("697917"),
        o = n("124299"),
        l = n("946032");
      function u(e) {
        let {
            parentItem: t,
            isFocused: n,
            menuSubmenuProps: u,
            rows: c,
            rowHeight: d,
            onScroll: f,
            listClassName: E,
          } = e,
          p = r.useRef(null),
          h = r.useRef(null),
          _ = r.useRef(null),
          S = r.useRef(null),
          { isUsingKeyboardNavigation: m, focusIndex: T, ...g } = u;
        r.useLayoutEffect(() => {
          var e;
          n &&
            ((0, a.ensureItemVisible)(p),
            null === (e = _.current) || void 0 === e || e.focus());
        }, [n]),
          r.useEffect(() => {
            if (n && T >= 0 && m) {
              var e;
              null === (e = S.current) ||
                void 0 === e ||
                e.scrollRowIntoView(T);
            }
          }, [n, m, T]);
        let I = r.useCallback(e => c[e], [c]);
        return (0, i.jsxs)("div", {
          ref: p,
          className: l.submenuContainer,
          children: [
            (0, i.jsx)("div", { ref: h }),
            t,
            n
              ? (0, i.jsx)(s.ReferencePositionLayer, {
                  reference: h,
                  autoInvert: !0,
                  nudgeAlignIntoViewport: !0,
                  fixed: !0,
                  spacing: 4,
                  position: "right",
                  align: "top",
                  children: () =>
                    c.length > 0 &&
                    (0, i.jsx)("div", {
                      className: l.submenuPaddingContainer,
                      children: (0, i.jsx)("div", {
                        className: l.submenu,
                        ...g,
                        ref: _,
                        children: (0, i.jsx)(o.default, {
                          ref: S,
                          className: E,
                          listPadding: [6, 0, 6, 8],
                          onScroll: f,
                          renderRow: I,
                          rowCount: c.length,
                          rowHeight: d,
                        }),
                      }),
                    }),
                })
              : null,
          ],
        });
      }
    },
    537011: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          CheckboxItem: function () {
            return i.MenuCheckboxItem;
          },
          ControlItem: function () {
            return r.MenuControlItem;
          },
          CompositeControlItem: function () {
            return s.MenuCompositeControlItem;
          },
          CustomItem: function () {
            return a.MenuCustomItem;
          },
          Group: function () {
            return o.MenuGroup;
          },
          Item: function () {
            return l.MenuItem;
          },
          RadioItem: function () {
            return u.MenuRadioItem;
          },
          Separator: function () {
            return c.MenuSeparator;
          },
          SubmenuItem: function () {
            return d.MenuSubmenuItem;
          },
          SubmenuListItem: function () {
            return f.MenuSubmenuListItem;
          },
        });
      var i = n("964019"),
        r = n("412256"),
        s = n("922260"),
        a = n("916528"),
        o = n("539365"),
        l = n("426264"),
        u = n("146155"),
        c = n("536864"),
        d = n("8022"),
        f = n("967541");
    },
    348891: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ConfirmModal: function () {
            return d;
          },
          DeclarativeConfirmModal: function () {
            return f;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("271841"),
        l = n("605451"),
        u = n("314569"),
        c = n("74866");
      function d(e) {
        let t,
          n,
          {
            header: s,
            children: d,
            confirmText: f,
            cancelText: E,
            className: p,
            onConfirm: h,
            onCancel: _,
            onClose: S,
            onCloseCallback: m,
            bodyClassName: T,
            transitionState: g,
            loading: I = !1,
            confirmButtonColor: C = o.Button.Colors.RED,
            focusCancel: v = !1,
          } = e,
          A = r.useRef(null);
        return (
          r.useEffect(() => {
            !v &&
              setTimeout(() => {
                var e;
                return null === (e = A.current) || void 0 === e
                  ? void 0
                  : e.focus();
              }, 0);
          }, [v]),
          r.useLayoutEffect(() => () => (null == m ? void 0 : m())),
          null != E &&
            (t = (0, i.jsx)(o.Button, {
              type: "button",
              look: o.Button.Looks.LINK,
              color: o.Button.Colors.PRIMARY,
              disabled: I,
              onClick: () => {
                null == _ || _(), S();
              },
              autoFocus: v,
              children: E,
            })),
          null != f &&
            (n = (0, i.jsx)(o.Button, {
              buttonRef: A,
              type: "submit",
              color: C,
              submitting: I,
              onClick: async () => {
                try {
                  await (null == h ? void 0 : h()), S();
                } catch (e) {
                  throw e;
                }
              },
              autoFocus: !v,
              children: f,
            })),
          (0, i.jsxs)(u.ModalRoot, {
            className: p,
            transitionState: g,
            children: [
              null != s
                ? (0, i.jsx)(u.ModalHeader, {
                    separator: !1,
                    children: (0, i.jsx)(l.Heading, {
                      variant: "heading-lg/semibold",
                      children: s,
                    }),
                  })
                : null,
              (0, i.jsx)(u.ModalContent, {
                className: a(c.content, T),
                children: d,
              }),
              (0, i.jsxs)(u.ModalFooter, { children: [n, t] }),
            ],
          })
        );
      }
      function f(e) {
        return (0, i.jsx)(u.Modal, {
          onCloseRequest: e.dismissable ? e.onCancel : null,
          renderModal: t => (0, i.jsx)(d, { ...t, ...e }),
        });
      }
    },
    314569: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Modal: function () {
            return u;
          },
        }),
        n("222007");
      var i = n("884691"),
        r = n("995008"),
        s = n.n(r),
        a = n("551042"),
        o = n("388495"),
        l = n("516256");
      function u(e) {
        let { renderModal: t, onCloseRequest: n, onCloseCallback: r } = e,
          [l] = i.useState(() => s()),
          u = (0, o.useModalContext)();
        i.useLayoutEffect(
          () => (
            (0, a.openModal)(
              t,
              { modalKey: l, onCloseRequest: n, onCloseCallback: r },
              u
            ),
            () => {
              (0, a.closeModal)(l, u);
            }
          ),
          []
        );
        let c = i.useRef(!0);
        return (
          i.useLayoutEffect(() => {
            !c.current && (0, a.updateModal)(l, t, n, r, u), (c.current = !1);
          }, [t, n]),
          null
        );
      }
      n.es(l, t);
    },
    388495: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useModalContext: function () {
            return I;
          },
          Modals: function () {
            return v;
          },
        }),
        n("222007"),
        n("70102"),
        n("700225");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("917351"),
        l = n.n(o),
        u = n("266491"),
        c = n("244201"),
        d = n("892974"),
        f = n("983782"),
        E = n("668596"),
        p = n("659500"),
        h = n("551042"),
        _ = n("625611"),
        S = n("49111"),
        m = n("193608");
      let T = [f.default, E.default];
      class g extends r.PureComponent {
        render() {
          let {
              render: e,
              LayerComponent: t,
              isTopModal: n,
              instant: r,
            } = this.props,
            { transitionState: s } = this.state;
          return (
            (s === _.ModalTransitionState.ENTERING ||
              s === _.ModalTransitionState.ENTERED) &&
              !n &&
              (s = _.ModalTransitionState.HIDDEN),
            r && (s = _.ModalTransitionState.ENTERED),
            (0, i.jsx)(t, {
              children: (0, i.jsx)("div", {
                className: a(m.layer, !n && m.hidden),
                children: e({ transitionState: s, onClose: this.close }),
              }),
            })
          );
        }
        constructor(...e) {
          super(...e),
            (this.state = { transitionState: null }),
            (this.componentWillAppear = e => {
              this.componentWillEnter(e);
            }),
            (this.componentWillEnter = e => {
              let { instant: t } = this.props;
              this.setState({
                transitionState: _.ModalTransitionState.ENTERING,
              }),
                setTimeout(
                  () => {
                    this.setState({
                      transitionState: _.ModalTransitionState.ENTERED,
                    }),
                      e();
                  },
                  t ? 0 : _.TRANSITION_DURATION
                );
            }),
            (this.componentWillLeave = e => {
              let { instant: t } = this.props;
              this.setState({
                transitionState: _.ModalTransitionState.EXITING,
              }),
                setTimeout(
                  () => {
                    this.setState({
                      transitionState: _.ModalTransitionState.EXITED,
                    }),
                      e();
                  },
                  t ? 0 : _.TRANSITION_DURATION
                );
            }),
            (this.close = () =>
              new Promise(e => {
                this.props.closeModal(this.props.modalKey),
                  setTimeout(() => e(), _.TRANSITION_DURATION);
              }));
        }
      }
      function I() {
        return (0, h.modalContextFromAppContext)((0, c.useAppContext)());
      }
      let C = [];
      function v() {
        let e = I(),
          t = (0, h.useModalsStore)(t => (void 0 !== t[e] ? t[e] : C)),
          n = r.useRef();
        r.useLayoutEffect(() => {
          n.current = t[t.length - 1];
        }, [t]);
        let s = t.length > 0;
        r.useLayoutEffect(() => {
          if (!s) return;
          let e = () => {
            let e = n.current;
            null != e && null != e.onCloseRequest && e.onCloseRequest();
          };
          return (
            p.ComponentDispatch.subscribe(S.ComponentActions.MODAL_CLOSE, e),
            () => {
              p.ComponentDispatch.unsubscribe(
                S.ComponentActions.MODAL_CLOSE,
                e
              );
            }
          );
        }, [s]);
        let a = r.useCallback(() => {
            let e = n.current;
            null != e && null != e.onCloseRequest && e.onCloseRequest();
          }, []),
          o = r.useCallback(
            t => {
              (0, h.closeModal)(t, e);
            },
            [e]
          ),
          c = T.map(e =>
            t.some(t => t.Layer === e || (null == t.Layer && e === f.default))
          );
        return (0, i.jsxs)(u.default, {
          component: r.Fragment,
          children: [
            T.map((e, n) => {
              var r;
              let s = l.findLast(
                t,
                t => t.Layer === e || (null == t.Layer && e === f.default)
              );
              return (0, i.jsx)(
                d.default,
                {
                  isVisible: c[n],
                  backdropStyle:
                    null !== (r = null == s ? void 0 : s.backdropStyle) &&
                    void 0 !== r
                      ? r
                      : d.BackdropStyles.DARK,
                  onClose: a,
                  LayerComponent: e,
                  backdropInstant: null == s ? void 0 : s.instant,
                },
                "layer-".concat(n)
              );
            }),
            t.map((e, n) => {
              let { key: r, Layer: s, render: a, instant: l } = e;
              return (0, i.jsx)(
                g,
                {
                  modalKey: r,
                  LayerComponent: null != s ? s : f.default,
                  isTopModal: n === t.length - 1,
                  render: a,
                  closeModal: o,
                  instant: l,
                },
                r
              );
            }),
          ],
        });
      }
    },
    21872: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          PaginationTypes: function () {
            return i;
          },
          PaginationController: function () {
            return l;
          },
        }),
        n("222007"),
        n("424973");
      var i,
        r,
        s = n("884691"),
        a = n("917351"),
        o = n.n(a);
      ((r = i || (i = {})).PAGE = "PAGE"),
        (r.GAP = "GAP"),
        (r.BACK = "BACK"),
        (r.NEXT = "NEXT");
      class l extends s.PureComponent {
        getNeighborBounds() {
          let {
              totalPageCount: e,
              maxVisiblePages: t,
              selectedPage: n,
            } = this.props,
            i = Math.ceil(t / 2),
            r = Math.floor(t / 2),
            s = [1, e];
          s = n <= i ? [1, t] : n > e - r ? [e - t + 1, e] : [n - i + 1, n + r];
          let [a, o] = s;
          return [Math.max(a, 1), Math.min(o, e)];
        }
        getPageList() {
          let {
              totalPageCount: e,
              selectedPage: t,
              hideMaxPage: n,
            } = this.props,
            [i, r] = this.getNeighborBounds(),
            s = {
              type: "BACK",
              key: "back",
              disabled: 1 === t,
              selected: !1,
              navigateToPage: this.handleBackward,
            },
            a = {
              type: "NEXT",
              key: "next",
              disabled: t === e,
              selected: !1,
              navigateToPage: this.handleForward,
            },
            l = [],
            u = [];
          i > 1 &&
            ((l = [
              {
                type: "PAGE",
                key: "page-1",
                targetPage: 1,
                navigateToPage: () => this.handleJump(1),
              },
              { type: "GAP", key: "left-gap" },
            ]),
            (i += 2)),
            r < e &&
              ((u = [{ type: "GAP", key: "right-gap" }]),
              !n &&
                u.push({
                  type: "PAGE",
                  key: "page-".concat(e),
                  targetPage: e,
                  navigateToPage: () => this.handleJump(e),
                }),
              (r -= 2));
          let c = o
            .range(i, r + 1)
            .map(e => ({
              type: "PAGE",
              key: "page-".concat(e),
              targetPage: e,
              selected: e === t,
              disabled: !1,
              navigateToPage: () => this.handleJump(e),
            }));
          return [s, ...l, ...c, ...u, a];
        }
        render() {
          let { totalPageCount: e, children: t } = this.props,
            n = this.getPageList();
          return t({ pages: n, hasMultiplePages: e > 1 });
        }
        constructor(...e) {
          super(...e),
            (this.changePageTo = e => {
              let { selectedPage: t, onPageChange: n } = this.props;
              t !== e && null != n && n(e);
            }),
            (this.handleForward = () => {
              this.changePageTo(
                Math.min(this.props.selectedPage + 1, this.props.totalPageCount)
              );
            }),
            (this.handleBackward = () => {
              this.changePageTo(Math.max(this.props.selectedPage - 1, 1));
            }),
            (this.handleJump = e => {
              this.changePageTo(e);
            });
        }
      }
      l.defaultProps = { maxVisiblePages: 9, hideMaxPage: !1 };
    },
    125814: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Paginator: function () {
            return S;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("271841"),
        l = n("227645"),
        u = n("605451"),
        c = n("240353"),
        d = n("980428"),
        f = n("772280"),
        E = n("21872"),
        p = n("782340"),
        h = n("959279");
      function _(e) {
        let { page: t, totalPageCount: n, disabled: s, onPageChange: o } = e,
          [d, f] = r.useState(!1),
          [E, p] = r.useState(null),
          _ = null != E && E >= 1 && E <= n;
        return s
          ? (0, i.jsx)(
              u.Heading,
              {
                className: h.gap,
                "aria-hidden": !0,
                variant: "heading-sm/semibold",
                children: "…",
              },
              t.key
            )
          : d
            ? (0, i.jsx)(
                c.TextInput,
                {
                  autoFocus: !0,
                  className: h.jumpToPageInlineInput,
                  size: c.TextInput.Sizes.MINI,
                  value: null == E ? "" : "".concat(E),
                  onChange: e => {
                    let t = parseInt(e);
                    if ("" === e || isNaN(t)) {
                      p(null);
                      return;
                    }
                    p(t);
                  },
                  onBlur: () => {
                    f(!1), p(null);
                  },
                  onKeyPress: e => {
                    "Enter" === e.key &&
                      null != E &&
                      _ &&
                      (o(E), f(!1), p(null));
                  },
                  disabled: s,
                },
                t.key
              )
            : (0, i.jsx)(
                l.Clickable,
                {
                  onClick: () => f(!0),
                  children: (0, i.jsx)(u.Heading, {
                    className: a(h.roundButton, h.gap),
                    "aria-hidden": !0,
                    variant: "heading-sm/semibold",
                    children: "…",
                  }),
                },
                t.key
              );
      }
      function S(e) {
        let {
            currentPage: t,
            totalCount: n,
            pageSize: r,
            maxVisiblePages: s,
            disablePaginationGap: u,
            onPageChange: c,
            hideMaxPage: S = !1,
            className: m,
          } = e,
          T = Math.ceil(n / r);
        return (0, i.jsx)(E.PaginationController, {
          totalPageCount: T,
          selectedPage: t,
          maxVisiblePages: s,
          hideMaxPage: S,
          onPageChange: function (e) {
            null != c && c(e);
          },
          children: function (e) {
            let { pages: t, hasMultiplePages: n } = e;
            return n
              ? (0, i.jsx)("div", {
                  className: a(h.pageControlContainer, m),
                  children: (0, i.jsx)("nav", {
                    className: h.pageControl,
                    children: t.map(e => {
                      var t, n;
                      switch (e.type) {
                        case E.PaginationTypes.BACK:
                          return (function (e) {
                            let { key: t, disabled: n, navigateToPage: r } = e;
                            return (0, i.jsxs)(
                              o.Button,
                              {
                                className: h.endButton,
                                innerClassName: h.endButtonInner,
                                look: o.Button.Looks.BLANK,
                                color: o.Button.Colors.TRANSPARENT,
                                onClick: r,
                                disabled: n,
                                rel: "prev",
                                children: [
                                  (0, i.jsx)(d.default, {
                                    className: h.iconCaret,
                                    "aria-hidden": !0,
                                  }),
                                  (0, i.jsx)("span", {
                                    children: p.default.Messages.BACK,
                                  }),
                                ],
                              },
                              t
                            );
                          })(e);
                        case E.PaginationTypes.PAGE:
                          return (
                            (t = e),
                            (0, i.jsx)(
                              l.Clickable,
                              {
                                className: a(h.roundButton, {
                                  [h.activeButton]: t.selected,
                                }),
                                onClick: t.selected ? void 0 : t.navigateToPage,
                                "aria-label":
                                  p.default.Messages.PAGINATION_PAGE_LABEL.format(
                                    { pageNumber: t.targetPage }
                                  ),
                                "aria-current": t.selected ? "page" : void 0,
                                children: (0, i.jsx)("span", {
                                  children: t.targetPage,
                                }),
                              },
                              t.key
                            )
                          );
                        case E.PaginationTypes.GAP:
                          return (
                            (n = e),
                            (0, i.jsx)(
                              _,
                              {
                                page: n,
                                totalPageCount: T,
                                disabled: !!u,
                                onPageChange: c,
                              },
                              n.key
                            )
                          );
                        case E.PaginationTypes.NEXT:
                          return (function (e) {
                            let { key: t, disabled: n, navigateToPage: r } = e;
                            return (0, i.jsxs)(
                              o.Button,
                              {
                                className: h.endButton,
                                innerClassName: h.endButtonInner,
                                look: o.Button.Looks.BLANK,
                                color: o.Button.Colors.TRANSPARENT,
                                onClick: r,
                                disabled: n,
                                rel: "next",
                                children: [
                                  (0, i.jsx)("span", {
                                    children: p.default.Messages.NEXT,
                                  }),
                                  (0, i.jsx)(f.default, {
                                    className: h.iconCaret,
                                    "aria-hidden": !0,
                                  }),
                                ],
                              },
                              t
                            );
                          })(e);
                        default:
                          return null;
                      }
                    }),
                  }),
                })
              : null;
          },
        });
      }
    },
    533785: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          BasePopout: function () {
            return I;
          },
        }),
        n("222007"),
        n("70102");
      var i = n("37983"),
        r = n("884691"),
        s = n("995008"),
        a = n.n(s),
        o = n("817736"),
        l = n.n(o),
        u = n("118810"),
        c = n("862337"),
        d = n("860226"),
        f = n("228256"),
        E = n("222163"),
        p = n("551042"),
        h = n("452453"),
        _ = n("244201"),
        S = n("983782"),
        m = n("678904"),
        T = n("49111");
      let g = new Set(["Spacebar", " ", "Enter"]);
      class I extends r.Component {
        shouldShowPopout(e, t) {
          return null != e.shouldShow ? e.shouldShow : t.shouldShowPopout;
        }
        componentDidMount() {
          this.shouldShowPopout(this.props, this.state) &&
            this.setupShowPopout();
        }
        componentDidUpdate(e, t) {
          e.shouldShow, this.props.shouldShow;
          let n = this.shouldShowPopout(this.props, this.state);
          if (
            ((this.shouldShowPopout(e, t) !== n ||
              t.isLoading !== this.state.isLoading) &&
              (n ? this.setupShowPopout() : this.unsubscribe()),
            this.props.closeOnScroll !== e.closeOnScroll)
          ) {
            var i, r;
            let e = this.getDomElement();
            this.props.closeOnScroll
              ? null === (i = e.ownerDocument) ||
                void 0 === i ||
                i.addEventListener("scroll", this.close, !0)
              : null === (r = e.ownerDocument) ||
                void 0 === r ||
                r.removeEventListener("scroll", this.close, !0);
          }
        }
        getDomElement() {
          let e = l.findDOMNode(this);
          if (!(0, u.isElement)(e)) throw Error("Popout cannot find DOM node");
          return e;
        }
        setupShowPopout() {
          var e, t, n;
          let i = this.getDomElement();
          null === (e = i.ownerDocument) ||
            void 0 === e ||
            e.addEventListener("mousedown", this.handleDocumentMouseDown, !0),
            null === (t = i.ownerDocument) ||
              void 0 === t ||
              t.addEventListener("mouseup", this.handleDocumentMouseUp, !0),
            this.props.closeOnScroll &&
              (null === (n = i.ownerDocument) ||
                void 0 === n ||
                n.addEventListener("scroll", this.close, !0)),
            this.context.windowDispatch.subscribe(
              T.ComponentActions.POPOUT_CLOSE,
              this.close
            ),
            (this.domElementRef.current = i),
            (this.isValidClickStart = !1),
            this.forceUpdate();
        }
        unsubscribe() {
          var e, t, n, i;
          let r = this.domElementRef.current;
          null != r &&
            (null === (t = r.ownerDocument) ||
              void 0 === t ||
              t.removeEventListener(
                "mousedown",
                this.handleDocumentMouseDown,
                !0
              ),
            null === (n = r.ownerDocument) ||
              void 0 === n ||
              n.removeEventListener("mouseup", this.handleDocumentMouseUp, !0),
            null === (i = r.ownerDocument) ||
              void 0 === i ||
              i.removeEventListener("scroll", this.close, !0)),
            this.context.windowDispatch.unsubscribe(
              T.ComponentActions.POPOUT_CLOSE,
              this.close
            ),
            null === (e = this.resizeObserver) ||
              void 0 === e ||
              e.disconnect();
        }
        componentWillUnmount() {
          this.unsubscribe(),
            (this.domElementRef.current = null),
            this.loadingTimeout.stop(),
            this.validClickTimeout.stop();
        }
        render() {
          let { children: e, useMouseEnter: t } = this.props,
            n = this.shouldShowPopout(this.props, this.state);
          return (0, i.jsxs)(r.Fragment, {
            children: [
              e(
                {
                  onMouseDown: this.handlePreload,
                  ...(t ? { onMouseEnter: this.handleMouseEnter } : {}),
                  onKeyDown: this.handleKeyboardPreload,
                  onClick: this.handleClick,
                  "aria-controls": n ? this.popoutId : void 0,
                  "aria-expanded": n,
                },
                { isShown: n, position: this.state.renderedPosition }
              ),
              (0, i.jsx)(d.HeadingLevel, {
                forceLevel: 2,
                children: this.renderLayer(),
              }),
            ],
          });
        }
        renderLayer() {
          if (
            !this.shouldShowPopout(this.props, this.state) ||
            null == this.domElementRef.current
          )
            return null;
          let {
              position: e,
              align: t,
              nudgeAlignIntoViewport: n,
              spacing: r,
              autoInvert: s,
              fixed: a,
              positionKey: o,
              disablePointerEvents: l,
              layerContext: u,
            } = this.props,
            {
              resizeKey: c,
              isLoading: d,
              shouldShowLoadingState: p,
            } = this.state;
          return d && !p
            ? null
            : (0, i.jsx)(f.Layer, {
                layerContext: null != u ? u : S.appLayerContext,
                children: (0, i.jsx)(E.ReferencePositionLayer, {
                  ref: this.layerRef,
                  onMount: this.handlePopoutShow,
                  onUnmount: this.handlePopoutHide,
                  id: this.popoutId,
                  reference: this.domElementRef,
                  position: e,
                  align: t,
                  nudgeAlignIntoViewport: n,
                  spacing: r,
                  autoInvert: s,
                  fixed: a,
                  positionKey: null != o ? o : String(c),
                  disablePointerEvents: l,
                  onPositionChange: this.handlePopoutPositionChange,
                  children: this.renderPopout,
                }),
              });
        }
        toggleShow(e) {
          this.state.shouldShowPopout !== e &&
            this.setState({ shouldShowPopout: e });
        }
        constructor(...e) {
          super(...e),
            (this.domElementRef = r.createRef()),
            (this.layerRef = r.createRef()),
            (this.popoutRef = r.createRef()),
            (this.popoutId = "popout_".concat(a())),
            (this.loadingTimeout = new c.Timeout()),
            (this.validClickTimeout = new c.Timeout()),
            (this.isValidClickStart = !1),
            (this.state = {
              renderedPosition: this.props.position,
              shouldShowPopout: !1,
              shouldShowLoadingState: !1,
              isLoading: !1,
              resizeKey: 0,
            }),
            (this.handlePopoutShow = () => {
              this.context.windowDispatch.dispatch(
                T.ComponentActions.POPOUT_SHOW
              );
            }),
            (this.handlePopoutHide = () => {
              this.context.windowDispatch.dispatch(
                T.ComponentActions.POPOUT_HIDE
              );
            }),
            (this.handleSetPopoutRef = e => {
              var t;
              let n = null == e ? void 0 : e.ownerDocument.defaultView;
              null != e &&
                null != n &&
                ((this.popoutRef.current = e),
                null === (t = this.resizeObserver) ||
                  void 0 === t ||
                  t.disconnect(),
                (this.resizeObserver = new n.ResizeObserver(() => {
                  l.flushSync(() => {
                    this.setState({ resizeKey: this.state.resizeKey + 1 });
                  });
                })),
                this.resizeObserver.observe(e));
            }),
            (this.renderPopout = (e, t) => {
              let { renderPopout: n } = this.props;
              return this.state.isLoading
                ? this.props.loadingComponent
                : n({
                    ...e,
                    updatePosition: t,
                    closePopout: this.close,
                    setPopoutRef: this.handleSetPopoutRef,
                  });
            }),
            (this.close = () => {
              let { onRequestClose: e, shouldShow: t } = this.props;
              null == e || e(), null == t && this.toggleShow(!1);
            }),
            (this.handleClick = e => {
              let {
                onShiftClick: t,
                shouldShow: n,
                onRequestOpen: i,
                onRequestClose: r,
              } = this.props;
              if (e.shiftKey && null != t) {
                t(e);
                return;
              }
              let s = null != n,
                a = s ? n : this.state.shouldShowPopout;
              a ? null == r || r() : null == i || i(),
                !s &&
                  this.setState(e => {
                    let { shouldShowPopout: t } = e;
                    return { shouldShowPopout: !t };
                  });
            }),
            (this.handleMouseEnter = () => {
              let { onRequestOpen: e } = this.props;
              null == e || e(), this.setState({ shouldShowPopout: !0 });
            }),
            (this.handlePreload = async () => {
              let { preload: e } = this.props;
              if (null != e) {
                this.setState({ isLoading: !0 }),
                  this.loadingTimeout.start(
                    250,
                    () => this.setState({ shouldShowLoadingState: !0 }),
                    !1
                  );
                try {
                  await e();
                } finally {
                  this.setState({ isLoading: !1 });
                }
              }
            }),
            (this.handleKeyboardPreload = e => {
              g.has(e.key) && this.handlePreload();
            }),
            (this.handleDocumentMouseDown = e => {
              let { ignoreModalClicks: t } = this.props,
                n = e.target,
                i = this.domElementRef.current;
              if (null != i) {
                if (
                  (0, E.referencePortalAwareContains)(i, n) ||
                  null != n.closest("." + h.ContextMenuClassName) ||
                  (t && (0, p.hasAnyModalOpen)())
                )
                  return;
                this.isValidClickStart = !0;
              }
            }),
            (this.handleDocumentMouseUp = () => {
              this.isValidClickStart &&
                ((this.isValidClickStart = !1), this.close());
            }),
            (this.handlePopoutPositionChange = e => {
              this.setState({ renderedPosition: e });
            });
        }
      }
      (I.defaultProps = {
        autoInvert: !1,
        nudgeAlignIntoViewport: !1,
        spacing: 0,
        loadingComponent: (0, i.jsx)(m.LoadingPopout, {}),
      }),
        (I.contextType = _.default);
    },
    678904: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          LoadingPopout: function () {
            return o;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("130969"),
        s = n("242670"),
        a = n("186756");
      function o() {
        return (0, i.jsx)(r.Dialog, {
          className: a.loadingPopout,
          children: (0, i.jsx)(s.Spinner, {
            type: s.SpinnerTypes.SPINNING_CIRCLE,
          }),
        });
      }
    },
    442761: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Popout: function () {
            return f;
          },
          LazyPopout: function () {
            return E;
          },
        }),
        n("70102"),
        n("222007");
      var i,
        r,
        s = n("37983"),
        a = n("884691"),
        o = n("242670"),
        l = n("533785"),
        u = n("276335"),
        c = n("423530");
      ((r = i || (i = {})).NONE = "1"),
        (r.TRANSLATE = "2"),
        (r.SCALE = "3"),
        (r.FADE = "4");
      let d = Object.freeze({
        2: u.PopoutCSSAnimator.Types.TRANSLATE,
        3: u.PopoutCSSAnimator.Types.SCALE,
        4: u.PopoutCSSAnimator.Types.FADE,
      });
      class f extends a.Component {
        render() {
          let {
            children: e,
            shouldShow: t,
            position: n,
            onRequestOpen: i,
            onRequestClose: r,
            align: a,
            autoInvert: o,
            fixed: u,
            nudgeAlignIntoViewport: c,
            spacing: d,
            onShiftClick: f,
            positionKey: E,
            preload: p,
            disablePointerEvents: h,
            ignoreModalClicks: _,
            closeOnScroll: S,
            useMouseEnter: m,
            renderPopout: T,
            layerContext: g,
          } = this.props;
          return (0, s.jsx)(l.BasePopout, {
            ref: this.ref,
            preload: p,
            position: n,
            align:
              null != a
                ? a
                : (function (e) {
                    switch (e) {
                      case "top":
                      case "bottom":
                        return "left";
                      case "left":
                      case "right":
                        return "top";
                      case "center":
                      case "window_center":
                        return "center";
                    }
                    throw Error("Unexpected position: ".concat(e));
                  })(n),
            autoInvert: o,
            fixed: u,
            nudgeAlignIntoViewport: c,
            renderPopout: this.renderPopout,
            spacing: d,
            shouldShow: null != T && t,
            onRequestOpen: i,
            onRequestClose: r,
            onShiftClick: f,
            positionKey: E,
            disablePointerEvents: h,
            ignoreModalClicks: _,
            closeOnScroll: S,
            useMouseEnter: m,
            layerContext: g,
            children: e,
          });
        }
        constructor(...e) {
          super(...e),
            (this.ref = a.createRef()),
            (this.renderPopout = e => {
              let {
                renderPopout: t,
                animation: n,
                animationPosition: i,
              } = this.props;
              switch (
                (null != i && null != e.position && (e.position = i), n)
              ) {
                case "2":
                case "3":
                case "4":
                  return (0, s.jsx)(u.PopoutCSSAnimator, {
                    position: e.position,
                    type: d[n],
                    children: t(e),
                  });
                case "1":
                  return t(e);
              }
              throw Error(
                "Unsupported animation config: ".concat(JSON.stringify(n))
              );
            });
        }
      }
      function E(e) {
        let { renderPopout: t, ...n } = e,
          i = a.useRef(null),
          [r, l] = a.useState(0);
        function u() {
          return E(), (0, s.jsx)(s.Fragment, {});
        }
        a.useLayoutEffect(() => {
          if (r > 0) {
            var e, t, n, s, a;
            null === (a = i.current) ||
              void 0 === a ||
              null === (s = a.ref) ||
              void 0 === s ||
              null === (n = s.current) ||
              void 0 === n ||
              null === (t = n.layerRef) ||
              void 0 === t ||
              null === (e = t.current) ||
              void 0 === e ||
              e.updatePosition();
          }
        }, [r]),
          a.useEffect(() => {
            let e = setTimeout(t, 20 + 20 * Math.random());
            return () => clearTimeout(e);
          }, []);
        let d = a.useRef(!1);
        async function E() {
          if (!d.current) {
            d.current = !0;
            let e = setTimeout(() => {
                _(() => p), l(e => e + 1);
              }, 300),
              n = await t();
            _(() => n), l(e => e + 1), clearTimeout(e);
          }
        }
        function p() {
          var e, t, n, r;
          let a =
              null === (r = i.current) || void 0 === r
                ? void 0
                : null === (n = r.ref) || void 0 === n
                  ? void 0
                  : null === (t = n.current) || void 0 === t
                    ? void 0
                    : null === (e = t.domElementRef) || void 0 === e
                      ? void 0
                      : e.current,
            l = Math.max(100, null == a ? 100 : a.offsetWidth - 20);
          return (0, s.jsx)("div", {
            className: c.loader,
            style: { width: l },
            children: (0, s.jsx)(o.Spinner, {}),
          });
        }
        let [h, _] = a.useState(() => u);
        return (
          a.useEffect(() => {
            d.current
              ? t().then(e => {
                  _(() => e), l(e => e + 1);
                })
              : _(u);
          }, [t]),
          (0, s.jsx)(f, { ref: i, ...n, renderPopout: h })
        );
      }
      (f.Animation = i),
        (f.defaultProps = {
          position: "right",
          autoInvert: !0,
          nudgeAlignIntoViewport: !0,
          spacing: 8,
          animation: "2",
          positionKey: void 0,
        }),
        (E.Animation = i);
    },
    276335: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          PopoutCSSAnimator: function () {
            return p;
          },
        }),
        n("222007");
      var i,
        r,
        s = n("37983"),
        a = n("884691"),
        o = n("414456"),
        l = n.n(o),
        u = n("862337"),
        c = n("413197"),
        d = n("685551");
      ((r = i || (i = {}))[(r.TRANSLATE = 1)] = "TRANSLATE"),
        (r[(r.SCALE = 2)] = "SCALE"),
        (r[(r.FADE = 3)] = "FADE");
      let f = Object.freeze({ 1: d.translate, 2: d.scale, 3: d.fade }),
        E = Object.freeze({
          top: d.animatorTop,
          bottom: d.animatorBottom,
          left: d.animatorLeft,
          right: d.animatorRight,
          center: d.animatorCenter,
          window_center: d.animatorCenter,
        });
      function p(e) {
        let { position: t, type: n, children: i } = e,
          { reducedMotion: r } = a.useContext(
            c.AccessibilityPreferencesContext
          ),
          o = r.enabled ? 3 : n,
          [p, h] = a.useState(null != t),
          [_] = a.useState(() => new u.Timeout());
        return (
          a.useEffect(() => () => _.stop(), [_]),
          a.useEffect(() => {
            null != t && _.start(10, () => h(!0));
          }, [t, _]),
          (0, s.jsx)("div", {
            className: l(null != t ? E[t] : null, {
              [f[o]]: null != t,
              [d.didRender]: p,
            }),
            children: i,
          })
        );
      }
      p.Types = i;
    },
    694982: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          PopoutList: function () {
            return E;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("130969"),
        l = n("370373"),
        u = n("810567"),
        c = n("529000"),
        d = n("309006");
      class f extends r.PureComponent {
        render() {
          let { className: e, ...t } = this.props;
          return (0, i.jsx)(u.default, {
            ...t,
            className: a(d.popoutListInput, e),
          });
        }
      }
      f.defaultProps = { autoFocus: !0 };
      class E extends r.PureComponent {
        render() {
          let { className: e, children: t } = this.props;
          return (0, i.jsx)(o.Dialog, {
            className: a(d.popoutList, e),
            "aria-label": this.props["aria-label"],
            children: t,
          });
        }
      }
      (E.SearchBar = f),
        (E.Item = c.default),
        (E.Divider = () => (0, i.jsx)(l.FormDivider, { className: d.divider })),
        (E.Empty = e => {
          let { children: t } = e;
          return (0, i.jsx)("div", {
            className: d.popoutListEmpty,
            children: t,
          });
        });
    },
    184456: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Progress: function () {
            return f;
          },
        });
      var i,
        r,
        s = n("37983"),
        a = n("884691"),
        o = n("414456"),
        l = n.n(o),
        u = n("669491"),
        c = n("647204");
      ((i = r || (r = {})).XSMALL = "xsmall"),
        (i.SMALL = "small"),
        (i.LARGE = "large");
      let d = "indeterminate";
      function f(e) {
        let t,
          {
            className: n,
            percent: i,
            size: r = "small",
            foregroundColor: o = u.default.unsafe_rawColors.BRAND_500.css,
            backgroundColor: f = "var(--background-modifier-active)",
            foregroundGradientColor: E,
            animate: p = !0,
          } = e,
          h = null != i ? i : 0;
        return (
          (t =
            null != E
              ? {
                  background: "linear-gradient(to right, "
                    .concat(E[0], ", ")
                    .concat(E[1], ")"),
                }
              : { backgroundColor: o }),
          (0, s.jsx)("div", {
            className: l(n, c.progress, c[r]),
            style: { backgroundColor: f },
            children:
              h !== d && "number" == typeof h
                ? (0, s.jsx)("div", {
                    className: l(c.progressBar, c[r], { [c.animating]: p }),
                    style: {
                      transform: "translate3d(".concat(
                        Math.min(Math.max(0, h), 100) - 100,
                        "%, 0, 0)"
                      ),
                      ...t,
                    },
                  })
                : (0, s.jsxs)(a.Fragment, {
                    children: [
                      (0, s.jsx)("div", {
                        className: l(c.indeterminateBar1, c[r], {
                          [c.animating]: p,
                        }),
                        style: t,
                      }),
                      (0, s.jsx)("div", {
                        className: l(c.indeterminateBar2, c[r], {
                          [c.animating]: p,
                        }),
                        style: t,
                      }),
                    ],
                  }),
          })
        );
      }
      (f.Sizes = r), (f.INDETERMINATE = d);
    },
    852566: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ProgressCircle: function () {
            return u;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("812725");
      let l = Object.freeze({ SMALL: 1, MEDIUM: 2, LARGE: 4 });
      class u extends r.Component {
        renderCircle() {
          let {
              strokeSize: e,
              percent: t,
              colorOverride: n,
              background: r,
            } = this.props,
            s = (20 - e) / 2,
            l = s * Math.PI * 2;
          return (0, i.jsxs)("svg", {
            viewBox: "0 0 ".concat(20, " ").concat(20),
            className: o.circle,
            children: [
              (0, i.jsx)("circle", {
                className: o.circleBackgroundAlt,
                cx: 10,
                cy: 10,
                r: 10,
              }),
              (0, i.jsx)("circle", {
                className: a(o.circleBackground, r),
                cx: 10,
                cy: 10,
                r: (20 - 2 * e) / 2,
              }),
              (0, i.jsx)("circle", {
                className: o.circleProgress,
                cx: 10,
                cy: 10,
                r: s,
                strokeWidth: "".concat(e, "px"),
                strokeLinecap: "round",
                transform: "rotate(-90 ".concat(10, " ").concat(10, ")"),
                stroke: null != n ? n : "currentColor",
                style: {
                  strokeDasharray: l,
                  strokeDashoffset:
                    (1 - Math.min(Math.max(t, 0), 100) / 100) * l,
                },
              }),
            ],
          });
        }
        render() {
          let { className: e, children: t } = this.props;
          return (0, i.jsxs)("div", {
            className: a(o.progressCircle, e),
            children: [
              this.renderCircle(),
              null != t
                ? (0, i.jsx)("div", { className: o.circleOverlay, children: t })
                : null,
            ],
          });
        }
      }
      (u.StrokeSizes = l), (u.defaultProps = { strokeSize: l.MEDIUM });
    },
    443083: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          StackedProgress: function () {
            return f;
          },
        }),
        n("222007");
      var i,
        r,
        s = n("37983");
      n("884691");
      var a = n("414456"),
        o = n.n(a),
        l = n("917351"),
        u = n.n(l),
        c = n("669491"),
        d = n("35962");
      function f(e) {
        let {
            className: t,
            percents: n,
            size: i = "small",
            foregroundColors: r = [c.default.unsafe_rawColors.BRAND_500.css],
            backgroundColor: a = "var(--background-modifier-active)",
            animate: l = !0,
          } = e,
          f = u
            .zip(n, r)
            .map((e, t) => {
              let n,
                [r, a] = e;
              return (
                (n = Array.isArray(a)
                  ? {
                      background: "linear-gradient(to right, "
                        .concat(a[0], ", ")
                        .concat(a[1], ")"),
                    }
                  : { backgroundColor: a }),
                (0, s.jsx)(
                  "div",
                  {
                    className: o(d.progressBar, d[i], { [d.animating]: l }),
                    style: {
                      transform: "translate3d(".concat(
                        Math.min(Math.max(0, r), 100) - 100,
                        "%, 0, 0)"
                      ),
                      ...n,
                    },
                  },
                  t
                )
              );
            })
            .reverse();
        return (0, s.jsx)("div", {
          className: o(t, d.progress, d[i]),
          style: { backgroundColor: a },
          children: f,
        });
      }
      ((r = i || (i = {})).XSMALL = "xsmall"),
        (r.SMALL = "small"),
        (r.LARGE = "large"),
        (f.Sizes = i);
    },
    105265: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useRadioGroup: function () {
            return g;
          },
          useRadioItem: function () {
            return I;
          },
          RadioGroup: function () {
            return C;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("71185"),
        l = n("227645"),
        u = n("262448"),
        c = n("516826"),
        d = n("577776"),
        f = n("414055"),
        E = n("904276"),
        p = n("875436"),
        h = n("49111"),
        _ = n("874596");
      let S = { NOT_SET: "", NONE: "0", SMALL: "7px 10px", MEDIUM: "10px" };
      function m(e) {
        var t;
        let {
            disabled: n,
            checked: r,
            option: s,
            size: o,
            onClick: u,
            infoClassName: c,
            titleClassName: f,
            radioItemClassName: h,
            radioItemIconClassName: S,
            radioBarClassName: m,
            hasSelection: T,
            radioPosition: g = "left",
            icon: I,
            withTransparentBackground: C,
          } = e,
          v = null !== (t = s.color) && void 0 !== t ? t : "",
          A = r || !T,
          R = (0, i.jsxs)("div", {
            className: S,
            children: [
              r
                ? (0, i.jsx)(p.default, { foreground: _.radioIconForeground })
                : (0, i.jsx)(E.default, {}),
              null != I &&
                (0, i.jsx)(I, { className: _.icon, width: 24, height: 24 }),
            ],
          });
        return (0, i.jsx)(l.Clickable, {
          role: "radio",
          "aria-checked": r,
          onClick: n ? void 0 : u,
          tabIndex: !n && A ? 0 : -1,
          className: a(
            null != s.collapsibleContent ? _.collapsibleItem : _.item,
            { [_.disabled]: n, [_.itemFilled]: !C },
            h
          ),
          children: (0, i.jsxs)("div", {
            style: { "--radio-bar-accent-color": v, padding: o },
            className: a(
              _.radioBar,
              {
                [_.radioPositionLeft]: "left" === g,
                [_.radioPositionRight]: "right" === g,
              },
              m
            ),
            children: [
              "left" === g ? R : null,
              (0, i.jsxs)("div", {
                className: a(_.info, c),
                children: [
                  (0, i.jsx)(d.Text, {
                    variant: "text-md/medium",
                    className: f,
                    color: "none",
                    children: s.name,
                  }),
                  null != s.desc && "" !== s.desc
                    ? (0, i.jsx)(d.Text, {
                        color: "none",
                        variant: "text-sm/normal",
                        children: s.desc,
                      })
                    : null,
                ],
              }),
              "right" === g ? R : null,
            ],
          }),
        });
      }
      class T extends r.PureComponent {
        render() {
          let {
              checked: e,
              disabled: t,
              option: n,
              size: r,
              infoClassName: s,
              hasSelection: a,
              titleClassName: o,
              radioItemClassName: l,
              radioItemIconClassName: c,
              radioBarClassName: d,
              collapsibleClassName: E,
              withTransparentBackground: p,
              radioPosition: h,
            } = this.props,
            S = t || n.disabled,
            { tooltipText: T, tooltipPosition: g, icon: I } = n,
            C =
              null != n.collapsibleContent
                ? (0, i.jsx)(u.Collapsible, {
                    className: E,
                    isExpanded: e,
                    collapsibleContent: n.collapsibleContent,
                    children: t => {
                      let { onClick: u } = t;
                      return (0, i.jsx)(m, {
                        disabled: !!S,
                        checked: e,
                        hasSelection: a,
                        option: n,
                        onClick: e => {
                          this.handleClick(e), u(e);
                        },
                        size: r,
                        infoClassName: s,
                        titleClassName: o,
                        radioItemClassName: l,
                        radioItemIconClassName: c,
                        radioBarClassName: d,
                        radioPosition: h,
                        icon: I,
                        withTransparentBackground: p,
                      });
                    },
                  })
                : (0, i.jsx)(m, {
                    disabled: !!S,
                    checked: e,
                    hasSelection: a,
                    option: n,
                    onClick: this.handleClick,
                    size: r,
                    infoClassName: s,
                    titleClassName: o,
                    radioItemClassName: l,
                    radioItemIconClassName: c,
                    radioBarClassName: d,
                    radioPosition: h,
                    icon: I,
                    withTransparentBackground: p,
                  });
          return null != T
            ? (0, i.jsx)(f.Tooltip, {
                text: T,
                position: null != g ? g : "top",
                children: e =>
                  (0, i.jsx)("div", {
                    ...e,
                    className: _.tooltipWrapper,
                    children: C,
                  }),
              })
            : C;
        }
        constructor(...e) {
          super(...e),
            (this.handleClick = e => {
              e.preventDefault();
              let { onClick: t, option: n } = this.props;
              return null == t ? void 0 : t(n);
            });
        }
      }
      function g() {
        let {
            orientation: e = "vertical",
            isDisabled: t = !1,
            labelledBy: n,
          } = arguments.length > 0 && void 0 !== arguments[0]
            ? arguments[0]
            : {},
          i = r.useRef(null),
          s = r.useMemo(
            () =>
              (0, o.createFocusManager)({
                getFocusableElements() {
                  let e = i.current;
                  if (null != e) {
                    let t = e.querySelectorAll('[role="radio"]');
                    return Array.from(t);
                  }
                  return [];
                },
                getActiveElement() {
                  var e;
                  return null === (e = i.current) || void 0 === e
                    ? void 0
                    : e.ownerDocument.activeElement;
                },
              }),
            []
          ),
          a = r.useCallback(
            async t => {
              let n = i.current;
              if (null == n) return;
              let r =
                  "vertical" === e
                    ? h.KeyboardKeys.ARROW_UP
                    : h.KeyboardKeys.ARROW_LEFT,
                a =
                  "vertical" === e
                    ? h.KeyboardKeys.ARROW_DOWN
                    : h.KeyboardKeys.ARROW_RIGHT;
              switch (t.which) {
                case a: {
                  t.stopPropagation(), t.preventDefault();
                  let e = await s.getNextFocusableElement({ wrap: !0 });
                  return null == e ? void 0 : e.focus();
                }
                case r: {
                  t.stopPropagation(), t.preventDefault();
                  let e = await s.getPreviousFocusableElement({ wrap: !0 });
                  return null == e ? void 0 : e.focus();
                }
              }
            },
            [s, e]
          );
        return {
          role: "radiogroup",
          onKeyDown: a,
          ref: i,
          "aria-labelledby": n,
          "aria-orientation": e,
          "aria-disabled": t,
        };
      }
      function I(e) {
        let { isSelected: t, label: n } = e;
        return {
          role: "radio",
          tabIndex: t ? 0 : -1,
          "aria-label": n,
          "aria-checked": t,
        };
      }
      function C(e) {
        let {
            itemInfoClassName: t,
            itemTitleClassName: n,
            radioItemClassName: r,
            collapsibleClassName: s,
            className: a,
            value: o = null,
            size: l = S.MEDIUM,
            radioPosition: u = "left",
            onChange: d = h.NOOP,
            disabled: f = !1,
            options: E = [],
            "aria-labelledby": p,
            orientation: _,
            withTransparentBackground: m,
          } = e,
          I = (0, c.useFormContext)(),
          C = g({
            labelledBy: null != p ? p : I.titleId,
            orientation: _,
            isDisabled: f,
          }),
          v = E.some(e => e.value === o);
        return (0, i.jsx)("div", {
          ...C,
          className: a,
          children: E.map(e =>
            (0, i.jsx)(
              T,
              {
                hasSelection: v,
                disabled: f,
                checked: o === e.value,
                option: e,
                onClick: d,
                radioPosition: u,
                size: l,
                infoClassName: t,
                titleClassName: n,
                radioItemClassName: r,
                radioItemIconClassName: e.radioItemIconClassName,
                collapsibleClassName: s,
                radioBarClassName: e.radioBarClassName,
                withTransparentBackground: m,
              },
              e.value
            )
          ),
        });
      }
      (T.defaultProps = {
        withTransparentBackground: !1,
        radioPosition: "left",
      }),
        (C.Sizes = S);
    },
    552241: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          NameWithRoleAnchor: function () {
            return f;
          },
          NameWithRole: function () {
            return E;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("414456"),
        s = n.n(r),
        a = n("446674"),
        o = n("459462"),
        l = n("206230"),
        u = n("236532"),
        c = n("478517");
      function d(e) {
        let {
            roleStyle: t,
            name: n,
            color: r,
            roleName: a,
            dotAlignment: o = "left",
            className: l,
          } = e,
          d = "username" === t,
          f =
            "dot" === t
              ? (0, i.jsx)(u.RoleDot, {
                  color: r,
                  name: a,
                  className: "left" === o ? c.roleDotLeft : c.roleDotRight,
                })
              : null;
        return (0, i.jsxs)("span", {
          style: { color: d && null != r ? r : void 0 },
          className: s(l, { [c.username]: d }),
          children: ["left" === o && f, n, "right" === o && f],
        });
      }
      function f(e) {
        let {
            name: t,
            color: n,
            roleName: r,
            dotAlignment: s,
            className: u,
            ...c
          } = e,
          f = (0, a.useStateFromStores)([l.default], () => l.default.roleStyle),
          E = "username" === f,
          p = (0, i.jsx)(d, {
            roleStyle: f,
            name: t,
            color: n,
            roleName: r,
            dotAlignment: s,
            className: u,
          }),
          h = E ? { color: n } : void 0;
        return (0, i.jsx)(o.Anchor, { ...c, children: p, style: h });
      }
      function E(e) {
        let t = (0, a.useStateFromStores)(
          [l.default],
          () => l.default.roleStyle
        );
        return (0, i.jsx)(d, { ...e, roleStyle: t });
      }
    },
    236532: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          RoleDot: function () {
            return u;
          },
          RoleCircle: function () {
            return c;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("414456"),
        s = n.n(r),
        a = n("414055"),
        o = n("584115");
      function l(e) {
        let { color: t, className: n, background: r = !0 } = e;
        return null == t
          ? null
          : (0, i.jsxs)("svg", {
              className: s(o.svg, n),
              viewBox: "0 0 20 20",
              fill: "none",
              children: [
                r &&
                  (0, i.jsx)("path", {
                    className: o.background,
                    d: "M0 4C0 1.79086 1.79086 0 4 0H16C18.2091 0 20 1.79086 20 4V16C20 18.2091 18.2091 20 16 20H4C1.79086 20 0 18.2091 0 16V4Z",
                  }),
                (0, i.jsx)("circle", {
                  className: o.dotBorderBase,
                  cx: "10",
                  cy: "10",
                  r: "6",
                }),
                (0, i.jsx)("circle", {
                  className: o.dotBorderColor,
                  cx: "10",
                  cy: "10",
                  r: "6",
                  fill: t,
                }),
                (0, i.jsx)("circle", {
                  className: o.dot,
                  cx: "10",
                  cy: "10",
                  r: "5",
                  fill: t,
                }),
              ],
            });
      }
      function u(e) {
        let { color: t, name: n, tooltip: r = !0 } = e;
        return null == t
          ? null
          : r
            ? (0, i.jsx)(a.Tooltip, {
                text: n,
                children: t =>
                  (0, i.jsx)("span", {
                    ...t,
                    "aria-hidden": !0,
                    children: (0, i.jsx)(l, { ...e }),
                  }),
              })
            : (0, i.jsx)(l, { ...e });
      }
      function c(e) {
        let { color: t, className: n } = e;
        return null == t
          ? null
          : (0, i.jsx)("span", {
              className: s(o.roleCircle, n),
              style: { backgroundColor: t },
            });
      }
    },
    617657: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          PinToBottomScrollerAuto: function () {
            return u;
          },
        });
      var i,
        r = n("405665"),
        s = n("414456"),
        a = n.n(s),
        o = n("211009"),
        l = n("517614");
      let u = (0, o.createManagedReactiveScroller)(
        a(l.auto, l.disableScrollAnchor),
        null !== (i = window.ResizeObserver) && void 0 !== i
          ? i
          : r.ResizeObserver
      );
    },
    670914: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ScrollerThin: function () {
            return s;
          },
          ScrollerAuto: function () {
            return a;
          },
          ScrollerNone: function () {
            return o;
          },
        });
      var i = n("256023"),
        r = n("517614");
      let s = (0, i.createScroller)(r.thin, r.fade),
        a = (0, i.createScroller)(r.auto, r.fade),
        o = (0, i.createScroller)(r.none, r.fade);
    },
    211009: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          createManagedReactiveScroller: function () {
            return c;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("718776"),
        l = n("462977"),
        u = n("517614");
      function c(e, t) {
        let n = new Map(),
          s = new t(e => {
            e.forEach(e => {
              var t;
              let { target: i } = e;
              null === (t = n.get(i)) || void 0 === t || t(e);
            });
          });
        return r.forwardRef(function (t, c) {
          let {
              children: d,
              className: f,
              onResize: E,
              contentClassName: p,
              onScroll: h,
              dir: _ = "ltr",
              fade: S = !1,
              customTheme: m = !1,
              style: T,
              ...g
            } = t,
            I = r.useRef(null),
            C = r.useRef(null),
            [v, A] = r.useState(!1),
            { scrollerRef: R, getScrollerState: N } = (0,
            l.useUncachedScrollerState)(),
            O = (0, l.useScrollSpring)(R);
          r.useImperativeHandle(
            c,
            () => ({
              getScrollerNode: () => R.current,
              isScrolling: () => null != I.current,
              getScrollerState: N,
              ...(0, l.getAnimatedScrollHelpers)(R, N, O),
            }),
            [R, N, O]
          );
          let D = r.useCallback(
            e => {
              null == I.current ? A(!0) : clearTimeout(I.current),
                (I.current = setTimeout(() => {
                  (I.current = null), A(!1);
                }, 200)),
                null != h && h(e);
            },
            [h]
          );
          return (
            r.useEffect(() => () => clearTimeout(I.current), []),
            (0, l.useResizeObserverSubscription)({
              ref: R,
              key: "container",
              onUpdate: E,
              resizeObserver: s,
              listenerMap: n,
            }),
            (0, l.useResizeObserverSubscription)({
              ref: C,
              key: "content",
              onUpdate: E,
              resizeObserver: s,
              listenerMap: n,
            }),
            (0, i.jsx)("div", {
              ref: R,
              className: a(f, {
                [u.fade]: S,
                [u.customTheme]: m,
                [e]: !0,
                [u.managedReactiveScroller]: !0,
                [u.scrolling]: v && S,
              }),
              style: T,
              dir: _,
              onScroll: D,
              ...g,
              children: (0, i.jsx)(o.FocusRingScope, {
                containerRef: C,
                children: (0, i.jsxs)("div", {
                  ref: C,
                  className: a(p, u.content),
                  children: [
                    d,
                    v && (0, i.jsx)("div", { className: u.pointerCover }),
                  ],
                }),
              }),
            })
          );
        });
      }
    },
    256023: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          createScroller: function () {
            return u;
          },
        }),
        n("70102");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("718776"),
        l = n("462977");
      function u(e, t) {
        let n = (0, l.getScrollbarSpecs)(e);
        return r.forwardRef(function (s, u) {
          let {
              children: c,
              className: d,
              dir: f = "ltr",
              orientation: E = "vertical",
              paddingFix: p = !0,
              fade: h = !1,
              onScroll: _,
              style: S,
              ...m
            } = s,
            T = r.useRef(null),
            g = (0, l.usePaddingFixes)({
              paddingFix: p,
              orientation: E,
              dir: f,
              className: d,
              scrollerRef: T,
              specs: n,
            });
          return (0, i.jsx)("div", {
            ref: e => {
              "function" == typeof u ? u(e) : null != u && (u.current = e),
                (T.current = e);
            },
            className: a(d, { [e]: !0, [t]: h }),
            style: (0, l.getMergedOrientationStyles)(S, E),
            dir: f,
            ...m,
            children: (0, i.jsxs)(o.FocusRingScope, {
              containerRef: T,
              children: [c, g],
            }),
          });
        });
      }
    },
    506395: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          SegmentedControl: function () {
            return d;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("227645"),
        l = n("577776"),
        u = n("970975");
      function c(e) {
        let {
            option: t,
            selected: n,
            onClick: s,
            look: c,
            className: d,
            selectedClassName: f,
          } = e,
          E = {
            [(function (e) {
              switch (e) {
                case "tab":
                default:
                  return u.tabItemSelected;
                case "pill":
                  return u.pillItemSelected;
              }
            })(c)]: n,
          };
        null != f && (E[f] = n);
        let p = r.useCallback(e => s(t, e), [s, t]);
        return (0, i.jsx)(o.Clickable, {
          className: a(
            (function (e) {
              switch (e) {
                case "tab":
                default:
                  return u.tabItem;
                case "pill":
                  return u.pillItem;
              }
            })(c),
            d,
            E
          ),
          onClick: p,
          children: (0, i.jsx)(l.Text, {
            variant: "text-sm/medium",
            color: "none",
            children: t.name,
          }),
        });
      }
      function d(e) {
        let {
            options: t,
            value: n,
            onChange: s,
            look: o = "tab",
            className: l,
            optionClassName: d,
            selectedOptionClassName: f,
          } = e,
          E = r.useCallback(
            e => {
              var t;
              let r = n === e.value;
              return (0, i.jsx)(
                c,
                {
                  selected: r,
                  option: e,
                  look: o,
                  onClick: s,
                  className: d,
                  selectedClassName: f,
                },
                null !== (t = e.key) && void 0 !== t ? t : String(e.value)
              );
            },
            [n, o, s, d, f]
          );
        return (0, i.jsx)("div", {
          className: a(
            (function (e) {
              switch (e) {
                case "tab":
                default:
                  return u.tabContainer;
                case "pill":
                  return u.pillContainer;
              }
            })(o),
            l
          ),
          children: t.map(E),
        });
      }
    },
    774811: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          SearchableSelect: function () {
            return M;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("165994"),
        l = n("71185"),
        u = n("974667"),
        c = n("271841"),
        d = n("227645"),
        f = n("718776"),
        E = n("516826"),
        p = n("741662"),
        h = n("433600"),
        _ = n("442761"),
        S = n("242670"),
        m = n("577776"),
        T = n("731898"),
        g = n("811425"),
        I = n("31695"),
        C = n("561744"),
        v = n("837899"),
        A = n("425190"),
        R = n("36694"),
        N = n("578706"),
        O = n("945330"),
        D = n("178814"),
        y = n("782340"),
        P = n("257260");
      function L(e) {
        return e.label;
      }
      let b = r.forwardRef(function (e, t) {
          let {
              options: n,
              value: s,
              onChange: l,
              clearable: c = !1,
              multi: p = !1,
              closeOnSelect: h = !0,
              onOpen: S,
              onClose: m,
              placeholder: I = y.default.Messages.SELECT,
              wrapperClassName: R,
              className: N,
              isDisabled: b = !1,
              maxVisibleItems: M = 7,
              look: G = D.SelectLooks.FILLED,
              autoFocus: w = !1,
              popoutPosition: k = "bottom",
              filter: V = !0,
              debounceTime: B,
              renderOptionLabel: H = L,
              onSearchChange: j,
              renderOptionPrefix: Y = () => null,
              renderOptionSuffix: W = () => null,
              "aria-describedby": K,
              "aria-invalid": z,
              "aria-labelledby": q,
              "aria-required": X,
              inputClassNames: Q,
              centerCaret: Z = !1,
              onBlur: J,
              ...$
            } = e,
            { ref: ee, width: et } = (0, T.default)(),
            { titleId: en, errorId: ei, error: er } = (0, E.useFormContext)(),
            { ref: es, width: ea } = (0, T.default)(),
            eo = r.useRef(null),
            [el, eu] = r.useState(null),
            [ec, ed] = r.useState(!1),
            [ef, eE] = r.useState(null),
            [ep, eh] = r.useState(!1),
            e_ = r.useRef(null),
            eS = r.useRef(null),
            {
              options: em,
              loading: eT,
              onQueryChange: eg,
            } = (function (e) {
              let { active: t, loadableOptions: n, debounceTime: i } = e,
                s = "function" == typeof n,
                [a, o] = r.useState({
                  options: s ? [] : n,
                  query: "",
                  debouncedQuery: "",
                  loading: !1,
                }),
                { options: l, loading: u, query: c, debouncedQuery: d } = a,
                f = r.useCallback(
                  e =>
                    o(t => ({ ...t, loading: s, query: e, debouncedQuery: e })),
                  [s]
                );
              r.useEffect(() => {
                t && f("");
              }, [t, f]),
                r.useEffect(() => {
                  let e;
                  return (
                    s
                      ? (o(e => ({ ...e, loading: !0, debouncedQuery: null })),
                        (e = setTimeout(
                          () => {
                            f(c);
                          },
                          null != i ? i : 500
                        )))
                      : f(c),
                    () => {
                      clearTimeout(e);
                    }
                  );
                }, [s, c, i, f]),
                r.useEffect(() => {
                  let e = !1;
                  return (
                    t &&
                      null !== d &&
                      ("function" == typeof n ? n(d) : Promise.resolve(n)).then(
                        t => {
                          !e && o(e => ({ ...e, options: t, loading: !1 }));
                        }
                      ),
                    () => {
                      e = !0;
                    }
                  );
                }, [t, n, d]);
              let E = r.useCallback(e => {
                o(t => ({ ...t, query: e }));
              }, []);
              return { options: l, loading: u, onQueryChange: E };
            })({ active: ec, loadableOptions: n, debounceTime: B }),
            eI = r.useMemo(
              () =>
                (function (e, t) {
                  if (null == t) return [];
                  let n = Array.isArray(t) ? t : [t];
                  return n
                    .map(t =>
                      "object" == typeof t && (null == t || "value" in t)
                        ? t
                        : e.find(e => e.value === t)
                    )
                    .filter(Boolean);
                })(em, s),
              [em, s]
            ),
            eC = r.useMemo(() => eI.map(e => e.value), [eI]),
            ev = eI[eI.length - 1],
            eA = (0, C.default)(ev),
            eR = r.useId(),
            eN = r.useId(),
            eO = r.useId(),
            eD = r.useCallback(
              e => {
                ec !== e &&
                  !b &&
                  (ed(e), e ? null == S || S() : null == m || m());
              },
              [b, m, S, ec]
            ),
            ey = r.useCallback(
              e => {
                ec && !e && eD(!1);
              },
              [eD, ec]
            ),
            eP = (0, g.useIsVisible)(ey);
          r.useImperativeHandle(t, () => ({
            close() {
              eD(!1);
            },
          }));
          let eL = r.useCallback((e, t) => {
              let n = document.querySelector(e),
                i = e_.current;
              eu(t),
                null != i && null != n && i.scrollIntoViewNode({ node: n });
            }, []),
            eb = r.useCallback(
              () =>
                new Promise(e => {
                  let t = e_.current;
                  if (null == t) return e();
                  t.scrollToTop({
                    callback: () => requestAnimationFrame(() => e()),
                  });
                }),
              []
            ),
            eM = r.useCallback(
              () =>
                new Promise(e => {
                  let t = e_.current;
                  if (null == t) return e();
                  t.scrollToBottom({
                    callback: () => requestAnimationFrame(() => e()),
                  });
                }),
              []
            ),
            eU = (0, u.default)({
              id: eN,
              defaultFocused: null != ev ? String(ev.value) : void 0,
              scrollToStart: eb,
              scrollToEnd: eM,
              isEnabled: ec,
              wrap: !0,
              useVirtualFocus: !0,
              setFocus: eL,
              disableClickOnSpace: !0,
            }),
            eG = (0, C.default)(eU),
            ew = (0, C.default)(em);
          r.useEffect(() => {
            let e = ew.current,
              t = eA.current;
            ec &&
              null != t &&
              !eT &&
              requestAnimationFrame(() => {
                let n = e_.current,
                  i = e.indexOf(t);
                null == n || n.scrollToIndex({ section: 0, row: i });
              });
          }, [ec, eT]),
            r.useEffect(() => {
              let e = eG.current;
              if (ec && !eT) {
                var t;
                let n = eo.current;
                if (null != n) {
                  n.focus();
                  let { value: e } = n;
                  (n.value = " "), (n.value = e);
                }
                eu(null !== (t = e.focusedItemId()) && void 0 !== t ? t : null);
              } else {
                let t = eA.current,
                  n = null != t ? String(t.value) : null;
                e.setFocus(n), eu(null);
              }
            }, [ec, eT]),
            r.useLayoutEffect(() => {
              !ec && (p ? eE("") : null != ev && eE(ev.label));
            }, [p, ev, ec]),
            r.useLayoutEffect(() => {
              p && eE("");
            }, [p, eI.length]);
          let ek = r.useCallback(
            function (e) {
              let t =
                !(arguments.length > 1) ||
                void 0 === arguments[1] ||
                arguments[1];
              if (null == e) {
                l(p ? [] : void 0);
                return;
              }
              let i = "function" == typeof n,
                r = i ? em.find(t => t.value === e) : e;
              if (p) {
                let n = null != s ? s : [],
                  o = n.some(t => (i ? t.value : t) === e);
                if (
                  (o ? l(n.filter(t => (i ? t.value : t) !== e)) : l([...n, r]),
                  t)
                ) {
                  var a;
                  null === (a = eo.current) || void 0 === a || a.focus();
                }
              } else l(r);
              eu(null), (!p || h) && eD(!1), eh(!1);
            },
            [n, em, p, h, l, s, eD]
          );
          r.useLayoutEffect(() => {
            if (w) {
              var e;
              null === (e = eo.current) || void 0 === e || e.focus();
            }
          }, [w]);
          let ex = r.useCallback(() => {
              eE(""), ek(null), eD(!0);
            }, [ek, eD]),
            eF = r.useCallback(
              e => {
                switch (e.key) {
                  case "Escape":
                    ec && (e.stopPropagation(), eD(!1));
                    break;
                  case "ArrowDown":
                  case "ArrowUp":
                    eD(!0);
                }
              },
              [eD, ec]
            ),
            eV = em;
          ep &&
            null != ef &&
            !1 !== V &&
            (eV =
              "function" == typeof V
                ? V(em, ef)
                : (0, o.matchSorter)(em, ef, { keys: ["label"] })),
            r.useEffect(() => {
              let e = e_.current;
              null == e || e.scrollToTop();
            }, [ef]),
            r.useEffect(() => {
              !eT &&
                ep &&
                null !== ef &&
                requestAnimationFrame(() => eU.focusFirstVisibleItem());
            }, [eT, ep, ef]);
          let eB = p ? F : x;
          return (0, i.jsx)(u.ListNavigatorProvider, {
            navigator: eU,
            children: (0, i.jsx)(_.Popout, {
              spacing: 0,
              animation: _.Popout.Animation.NONE,
              shouldShow: ec,
              onRequestClose: () => eD(!1),
              layerContext: $.popoutLayerContext,
              renderPopout: e => {
                let { closePopout: t, position: n, updatePosition: r } = e;
                return (0, i.jsx)(U, {
                  loading: eT,
                  multi: p,
                  listRef: e_,
                  listId: eR,
                  maxVisibleItems: M,
                  width: ea,
                  selectedValues: eC,
                  closePopout: t,
                  onSelect: ek,
                  closeOnSelect: h,
                  options: eV,
                  activeDescendant: el,
                  renderOptionLabel: H,
                  updatePosition: r,
                  popoutPosition: n,
                  renderOptionPrefix: Y,
                  renderOptionSuffix: W,
                });
              },
              position: k,
              children: (e, t) => {
                let { "aria-expanded": n, "aria-controls": r } = e,
                  { isShown: s, position: o } = t,
                  l = s ? A.default : v.default,
                  { ref: u, onKeyDown: E } = eU.containerProps;
                return (0, i.jsxs)("div", {
                  ref: eS,
                  className: a(R, P.wrapper),
                  style: { "--icons-width": "".concat(et, "px") },
                  onBlur: e => {
                    var t, n, i;
                    !(
                      (null === (t = eS.current) || void 0 === t
                        ? void 0
                        : t.contains(e.relatedTarget)) ||
                      (null === (i = e_.current) || void 0 === i
                        ? void 0
                        : null === (n = i.getScrollerNode()) || void 0 === n
                          ? void 0
                          : n.contains(e.relatedTarget))
                    ) &&
                      (!p && null != ev && eE(ev.label),
                      eh(!1),
                      eD(!1),
                      null == J || J(e));
                  },
                  children: [
                    (0, i.jsx)(f.FocusRing, {
                      ringTarget: es,
                      focusTarget: eo,
                      offset: 4,
                      children: (0, i.jsx)("div", {
                        onClick: b
                          ? void 0
                          : e => {
                              e.stopPropagation(),
                                e.preventDefault(),
                                eE(""),
                                eD(!0);
                            },
                        onMouseDown: e => {
                          e.preventDefault();
                        },
                        ref: e => {
                          (es.current = e), (eP.current = e);
                        },
                        className: a(P.select, P.searchable, N, {
                          [P.open]: s,
                          [P.lookFilled]: G === D.SelectLooks.FILLED,
                          [P.disabled]: b,
                          [P.multi]: p,
                          [P.selectPositionTop]: "top" === o,
                        }),
                        children: (0, i.jsx)("div", {
                          className: a(P.value, { [P.multi]: p }),
                          children: (0, i.jsx)(eB, {
                            query: ef,
                            selectedOptions: eI,
                            loading: eT,
                            renderOptionPrefix: Y,
                            renderOptionSuffix: W,
                            isDisabled: b,
                            isEditing: ep,
                            inputRef: eo,
                            "aria-describedby": null != K ? K : ei,
                            "aria-required": X,
                            "aria-invalid": null != z ? z : null != er,
                            "aria-labelledby": null != q ? q : en,
                            "aria-expanded": n,
                            setInputRef: e => {
                              (u.current = e), (eo.current = e);
                            },
                            onFocus: () => {
                              var e, t;
                              null === (e = eo.current) ||
                                void 0 === e ||
                                e.setSelectionRange(
                                  0,
                                  null !==
                                    (t = null == ef ? void 0 : ef.length) &&
                                    void 0 !== t
                                    ? t
                                    : 0
                                );
                            },
                            onChange: e => {
                              eg(e), null == j || j(e), eE(e), eD(!0), eh(!0);
                            },
                            onKeyDown: e => {
                              var t;
                              null === (t = $.onKeyDown) ||
                                void 0 === t ||
                                t.call($, e),
                                E(e),
                                eF(e);
                            },
                            activeDescendant: el,
                            placeholder: I,
                            inputId: eO,
                            listboxId: eR,
                            navigatorId: eN,
                            selectValue: function (e) {
                              let t =
                                !(arguments.length > 1) ||
                                void 0 === arguments[1] ||
                                arguments[1];
                              ek(e, t);
                            },
                            inputClassNames: Q,
                          }),
                        }),
                      }),
                    }),
                    (0, i.jsxs)("div", {
                      className: a(P.icons, {
                        [P.multi]: p,
                        [P.iconsContainer]: !Z,
                      }),
                      ref: ee,
                      children: [
                        c && ((null != ef && "" !== ef) || eI.length > 0)
                          ? (0, i.jsx)(d.Clickable, {
                              "aria-label": y.default.Messages.CLEAR,
                              "aria-controls": eO,
                              onClick: ex,
                              children: (0, i.jsx)(O.default, {
                                width: 16,
                                height: 16,
                                className: P.clear,
                              }),
                            })
                          : null,
                        (0, i.jsx)(d.Clickable, {
                          className: a({ [P.iconsCenter]: Z }),
                          "aria-label": ec
                            ? y.default.Messages.CLOSE
                            : y.default.Messages.OPEN,
                          "aria-controls": eO,
                          onClick: () => {
                            eD(!ec);
                          },
                          children: (0, i.jsx)(l, {
                            className: P.dropdownIcon,
                          }),
                        }),
                      ],
                    }),
                  ],
                });
              },
            }),
          });
        }),
        M = b;
      function U(e) {
        let {
            onSelect: t,
            closePopout: n,
            selectedValues: s,
            options: o,
            width: l,
            maxVisibleItems: c,
            activeDescendant: d,
            listRef: f,
            listId: E,
            renderOptionLabel: p,
            updatePosition: _,
            loading: T = !1,
            multi: g,
            popoutPosition: C,
            closeOnSelect: v,
            renderOptionPrefix: A = () => null,
            renderOptionSuffix: R = () => null,
          } = e,
          N = r.useRef(null),
          O = r.useCallback(
            e => {
              t(e), v && n();
            },
            [v, n, t]
          );
        return ((0, I.default)(_), T)
          ? (0, i.jsx)("div", {
              "aria-busy": !0,
              className: a(P.popout, P.loading, {
                [P.popoutPositionTop]: "top" === C,
              }),
              style: { width: l },
              children: (0, i.jsx)(S.Spinner, {
                itemClassName: P.loadingSpinner,
                type: S.SpinnerTypes.PULSING_ELLIPSIS,
              }),
            })
          : 0 === o.length
            ? (0, i.jsx)("div", {
                className: a(P.popout, P.noResults, {
                  [P.popoutPositionTop]: "top" === C,
                }),
                style: { width: l },
                children: (0, i.jsx)(m.Text, {
                  color: "text-muted",
                  variant: "text-md/normal",
                  children: y.default.Messages.NO_RESULTS_FOUND,
                }),
              })
            : (0, i.jsx)(u.ListNavigatorContainer, {
                children: e => {
                  let { ref: t, onKeyDown: n, ...r } = e;
                  return (0, i.jsx)(h.ListAuto, {
                    className: a(P.popout, P.searchableSelect, {
                      [P.noScrollbar]: o.length <= c,
                      [P.popoutPositionTop]: "top" === C,
                    }),
                    style: { width: l, maxHeight: 44 * c },
                    ref: e => {
                      var n;
                      f.current = e;
                      let i =
                        null !==
                          (n = null == e ? void 0 : e.getScrollerNode()) &&
                        void 0 !== n
                          ? n
                          : null;
                      (N.current = i), (t.current = i);
                    },
                    ...r,
                    role: void 0,
                    innerRole: "listbox",
                    innerAriaMultiselectable: g,
                    innerId: E,
                    rowHeight: 44,
                    sections: [o.length],
                    sectionHeight: 0,
                    renderRow: e => {
                      var t;
                      let { row: n } = e,
                        r = o[n],
                        a = p(r);
                      return (0, i.jsx)(
                        Option,
                        {
                          multi: g,
                          "aria-posinset": n,
                          "aria-setsize": o.length,
                          isSelected: s.includes(r.value),
                          isFocused: d === String(r.value),
                          value: r.value,
                          label: a,
                          onSelect: O,
                          prefix: A(r, { inPill: !1, inDropdown: !0 }),
                          suffix: R(r, { inPill: !1, inDropdown: !0 }),
                        },
                        null !== (t = r.key) && void 0 !== t ? t : n
                      );
                    },
                    renderSection: () => null,
                  });
                },
              });
      }
      function G(e, t) {
        if (null == e || null == t) return !1;
        let n =
          Node.DOCUMENT_POSITION_CONTAINED_BY |
          Node.DOCUMENT_POSITION_FOLLOWING;
        return (e.compareDocumentPosition(t) & n) === n;
      }
      function w(e) {
        let {
            selectedOptions: t,
            selectValue: n,
            listRef: s,
            focusPreviousItem: a,
            focusNextItem: o,
            renderOptionSuffix: l,
            renderOptionPrefix: u,
          } = e,
          c = r.useCallback(
            e => {
              let t = s.current;
              if (null != t)
                switch (e.key) {
                  case "ArrowRight":
                    return e.stopPropagation(), e.preventDefault(), o();
                  case "ArrowLeft":
                    return e.stopPropagation(), e.preventDefault(), a();
                }
            },
            [s, a, o]
          ),
          [d, f] = r.useState(null);
        return (0, i.jsx)("ul", {
          className: P.optionPillContainer,
          ref: s,
          onKeyDown: c,
          onFocus: e => {
            let t = e.target;
            null != s.current &&
              G(s.current, t) &&
              f(t.getAttribute("data-option-pill-value"));
          },
          onBlur: e => {
            let t = e.relatedTarget;
            !G(s.current, t) && f(null);
          },
          children: t.map((e, t) =>
            (0, i.jsx)(
              "li",
              {
                className: P.optionPillItem,
                children: (0, i.jsx)(B, {
                  focused: null == d ? 0 === t : d === String(e.value),
                  option: e,
                  onClick: () => n(e.value),
                  onKeyDown: async t => {
                    "Backspace" === t.key
                      ? (await a(!0), n(e.value, !1))
                      : "Delete" === t.key && (await o(!0), n(e.value, !1));
                  },
                  renderOptionPrefix: u,
                  renderOptionSuffix: l,
                }),
              },
              "".concat(e.label, "-").concat(e.value)
            )
          ),
        });
      }
      function Option(e) {
        let {
            value: t,
            label: n,
            prefix: r,
            suffix: s,
            onSelect: o,
            isSelected: l,
            isFocused: c,
            multi: f,
            ...E
          } = e,
          p = (0, u.useListItem)(String(t));
        return (0, i.jsxs)(d.Clickable, {
          tag: "li",
          style: { height: 44 },
          focusProps: { enabled: !1 },
          className: a(P.option, { [P.focused]: c, [P.multi]: f }),
          onClick: () => o(t),
          ...p,
          ...E,
          "aria-selected": l,
          id: p["data-list-item-id"],
          role: "option",
          children: [
            (0, i.jsxs)("div", { className: P.content, children: [n, "\xa0"] }),
            null != r &&
              (0, i.jsx)("div", { className: P.prefix, children: r }),
            " ",
            null != s &&
              (0, i.jsx)("div", { className: P.suffix, children: s }),
            " ",
            (0, i.jsx)(k, { isSelected: l, multi: f }),
          ],
        });
      }
      function k(e) {
        let { isSelected: t, multi: n } = e;
        return n
          ? (0, i.jsx)("div", {
              className: a(P.multiSelectCheckbox, {
                [P.checked]: t,
                [P.unchecked]: !t,
              }),
              children:
                t && (0, i.jsx)(R.default, { foreground: P.multiSelectCheck }),
            })
          : t
            ? (0, i.jsx)(N.default, {
                "aria-hidden": !0,
                backgroundColor: "white",
                className: P.selectedIcon,
                width: 20,
                height: 20,
              })
            : null;
      }
      function x(e) {
        let {
            selectedOptions: t,
            renderOptionPrefix: n,
            renderOptionSuffix: r,
            ...s
          } = e,
          a = t[0],
          o =
            null == n
              ? void 0
              : n(null != a ? a : null, { inPill: !1, inDropdown: !1 }),
          l =
            null == r
              ? void 0
              : r(null != a ? a : null, { inPill: !1, inDropdown: !1 });
        return (0, i.jsxs)(i.Fragment, {
          children: [
            null != o
              ? (0, i.jsx)("div", { "aria-hidden": !0, children: o })
              : null,
            (0, i.jsx)(V, { selectedOptions: t, ...s }),
            null != l
              ? (0, i.jsx)("div", { "aria-hidden": !0, children: l })
              : null,
          ],
        });
      }
      function F(e) {
        let {
            query: t,
            placeholder: n,
            selectedOptions: s,
            selectValue: o,
            onKeyDown: u,
            isEditing: c,
            isDisabled: d,
            inputRef: f,
            renderOptionPrefix: E,
            renderOptionSuffix: p,
            inputClassNames: h,
            ..._
          } = e,
          S = Math.max(n.length, (null != t ? t : "").length),
          m = r.useRef(null),
          {
            focusPreviousItem: T,
            focusNextItem: g,
            focusLastItem: I,
          } = (function (e, t, n) {
            let i = r.useMemo(
                () =>
                  (0, l.createFocusManager)({
                    getFocusableElements() {
                      let t = e.current;
                      if (null != t) {
                        let e = t.querySelectorAll("[data-option-pill-value]");
                        return Array.from(e);
                      }
                      return [];
                    },
                    getActiveElement() {
                      var t, n;
                      return null == e
                        ? void 0
                        : null === (n = e.current) || void 0 === n
                          ? void 0
                          : null === (t = n.ownerDocument) || void 0 === t
                            ? void 0
                            : t.activeElement;
                    },
                  }),
                [n]
              ),
              s = r.useCallback(
                t => {
                  var n, i;
                  return (
                    t ===
                    (null === (i = e.current) || void 0 === i
                      ? void 0
                      : null === (n = i.ownerDocument) || void 0 === n
                        ? void 0
                        : n.activeElement)
                  );
                },
                [e]
              ),
              a = r.useCallback(
                async function () {
                  let e =
                      arguments.length > 0 &&
                      void 0 !== arguments[0] &&
                      arguments[0],
                    n = await i.getPreviousFocusableElement({ wrap: !e });
                  if (
                    e &&
                    ((null == n || s(n)) &&
                      (n = await i.getNextFocusableElement()),
                    null == n || s(n))
                  ) {
                    var r;
                    return null === (r = t.current) || void 0 === r
                      ? void 0
                      : r.focus();
                  }
                  return null == n ? void 0 : n.focus();
                },
                [i, s, t]
              ),
              o = r.useCallback(
                async function () {
                  let e =
                      arguments.length > 0 &&
                      void 0 !== arguments[0] &&
                      arguments[0],
                    n = await i.getNextFocusableElement({ wrap: !e });
                  if (
                    e &&
                    ((null == n || s(n)) &&
                      (n = await i.getPreviousFocusableElement()),
                    null == n || s(n))
                  ) {
                    var r;
                    return null === (r = t.current) || void 0 === r
                      ? void 0
                      : r.focus();
                  }
                  return null == n ? void 0 : n.focus();
                },
                [i, s, t]
              ),
              u = r.useCallback(async () => {
                let e = await i.getLastFocusableElement();
                return null == e ? void 0 : e.focus();
              }, [i]);
            return { focusPreviousItem: a, focusNextItem: o, focusLastItem: u };
          })(m, f, s);
        return (0, i.jsxs)(i.Fragment, {
          children: [
            s.length > 0 &&
              (0, i.jsx)(w, {
                listRef: m,
                selectedOptions: s,
                renderOptionPrefix: E,
                renderOptionSuffix: p,
                selectValue: o,
                focusNextItem: g,
                focusPreviousItem: T,
              }),
            (0, i.jsx)(V, {
              style: { minWidth: "".concat(S, "ch") },
              className: a(P.multi, h),
              query: t,
              placeholder: n,
              selectValue: o,
              selectedOptions: s,
              isEditing: c,
              isDisabled: d,
              inputRef: f,
              onKeyDown: e => {
                ["ArrowLeft", "Backspace"].includes(e.key) &&
                ("" === t || null == t) &&
                s.length > 0
                  ? I()
                  : u(e);
              },
              ..._,
            }),
          ],
        });
      }
      function V(e) {
        let {
          query: t,
          inputId: n,
          "aria-describedby": r,
          "aria-invalid": s,
          "aria-required": o,
          "aria-labelledby": l,
          "aria-expanded": c,
          isDisabled: d,
          listboxId: f,
          activeDescendant: E,
          navigatorId: p,
          onChange: h,
          onFocus: _,
          setInputRef: S,
          isEditing: m,
          onKeyDown: T,
          placeholder: g,
          loading: I,
          style: C,
          className: v,
        } = e;
        return (0, i.jsx)("input", {
          role: "combobox",
          id: n,
          "aria-haspopup": "listbox",
          "aria-invalid": s,
          "aria-labelledby": l,
          "aria-autocomplete": "list",
          "aria-expanded": c,
          "aria-describedby": r,
          "aria-disabled": d,
          "aria-controls": f,
          "aria-required": o,
          "aria-busy": I,
          style: null != C ? C : {},
          "aria-activedescendant":
            null != E ? (0, u.createListItemId)(p, E) : "",
          disabled: d,
          value: null != t ? t : "",
          onChange: e => {
            h(e.target.value);
          },
          onFocus: _,
          className: a(P.searchInput, v, { [P.editing]: m, [P.disabled]: d }),
          onKeyDown: T,
          placeholder: "" !== (null != t ? t : "").trim() ? void 0 : g,
          ref: S,
        });
      }
      function B(e) {
        let {
            option: t,
            focused: n,
            onClick: r,
            onKeyDown: s,
            renderOptionPrefix: a,
            renderOptionSuffix: o,
          } = e,
          l = null == a ? void 0 : a(t, { inPill: !0, inDropdown: !1 }),
          u = null == o ? void 0 : o(t, { inPill: !0, inDropdown: !1 });
        return (0, i.jsx)(f.FocusRing, {
          offset: 3,
          children: (0, i.jsxs)(c.Button, {
            tabIndex: n ? 0 : -1,
            "data-option-pill-value": t.value,
            className: P.optionPillBtn,
            innerClassName: P.optionPill,
            onClick: () => (null == r ? void 0 : r(t.value)),
            onKeyDown: s,
            children: [
              (0, i.jsx)("div", { className: P.content, children: t.label }),
              null != l &&
                (0, i.jsx)("div", { className: P.prefix, children: l }),
              " ",
              null != u &&
                (0, i.jsx)("div", { className: P.suffix, children: u }),
              (0, i.jsx)(p.HiddenVisually, {
                children: y.default.Messages.REMOVE,
              }),
              (0, i.jsx)(O.default, {
                className: P.deleteOptionIcon,
                width: 14,
                height: 14,
              }),
            ],
          }),
        });
      }
    },
    935980: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useSingleSelectState: function () {
            return v;
          },
          useMultiSelectState: function () {
            return A;
          },
          useVariableSelect: function () {
            return R;
          },
          multiSelect: function () {
            return N;
          },
          toggleSelect: function () {
            return O;
          },
          singleSelect: function () {
            return D;
          },
          Select: function () {
            return L;
          },
          SingleSelect: function () {
            return M;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("974667"),
        l = n("227645"),
        u = n("311720"),
        c = n("442761"),
        d = n("446662"),
        f = n("77078"),
        E = n("731898"),
        p = n("811425"),
        h = n("31695"),
        _ = n("837899"),
        S = n("425190"),
        m = n("578706"),
        T = n("945330"),
        g = n("178814"),
        I = n("782340"),
        C = n("257260");
      function v(e) {
        let { value: t, onChange: n, serialize: i = e => String(e) } = e;
        return {
          select: e => n(e),
          isSelected: e => e === t,
          clear: () => n(null),
          serialize: i,
        };
      }
      function A(e) {
        let { value: t, onChange: n, serialize: i = e => String(e) } = e;
        return {
          select: e => {
            let i = new Set(t);
            i.has(e) ? i.delete(e) : i.add(e), n(i);
          },
          isSelected: e => {
            var n;
            return (
              null !== (n = null == t ? void 0 : t.has(e)) && void 0 !== n && n
            );
          },
          clear: () => n(new Set()),
          serialize: i,
        };
      }
      function R(e) {
        let {
          value: t,
          onChange: n,
          onSelectInteraction: i,
          serialize: r = e => String(e),
        } = e;
        return {
          select: e => {
            let { newValues: r, updated: s } = i(e, t);
            s && n(r);
          },
          isSelected: e => {
            var n;
            return (
              null !== (n = null == t ? void 0 : t.has(e)) && void 0 !== n && n
            );
          },
          clear: () => n(new Set()),
          serialize: r,
        };
      }
      function N(e, t) {
        let n = new Set(t);
        return n.has(e) ? n.delete(e) : n.add(e), { newValues: n, updated: !0 };
      }
      function O(e, t) {
        return t.has(e)
          ? { newValues: new Set(), updated: !0 }
          : { newValues: new Set([e]), updated: !0 };
      }
      function D(e, t) {
        return t.has(e)
          ? { newValues: t, updated: !1 }
          : { newValues: new Set([e]), updated: !0 };
      }
      function y(e) {
        return null == e ? void 0 : e.label;
      }
      function P(e) {
        return e.map(e => y(e)).join(", ");
      }
      function L(e) {
        let {
            options: t,
            placeholder: n = I.default.Messages.SELECT,
            className: s,
            isDisabled: o = !1,
            maxVisibleItems: u = 7,
            autoFocus: d = !1,
            popoutWidth: h,
            clearable: m = !1,
            look: v = g.SelectLooks.FILLED,
            onClose: A,
            onOpen: R,
            renderOptionLabel: N = y,
            renderOptionValue: O = P,
            popoutClassName: D,
            popoutPosition: L = "bottom",
            popoutLayerContext: M,
            optionClassName: U,
            closeOnSelect: G,
            select: w,
            isSelected: k,
            serialize: x,
            clear: F,
            hideIcon: V = !1,
            "aria-label": B,
            "aria-labelledby": H,
          } = e,
          [j, Y] = r.useState(!1),
          { ref: W, width: K, height: z } = (0, E.default)(),
          q = r.useCallback(
            e => {
              j !== e && !o && (Y(e), e ? null == R || R() : null == A || A());
            },
            [o, A, R, j]
          ),
          X = r.useCallback(
            e => {
              j && !e && q(!1);
            },
            [q, j]
          ),
          Q = (0, p.useIsVisible)(X),
          Z = r.useCallback(
            e => {
              if ((w(e), G)) {
                var t;
                null === (t = W.current) || void 0 === t || t.focus();
              }
            },
            [w, G]
          ),
          J = r.useCallback(
            e => {
              e.stopPropagation(), null == F || F();
            },
            [F]
          ),
          $ = t.filter(e => k(e.value));
        r.useLayoutEffect(() => {
          if (d) {
            var e;
            null === (e = W.current) || void 0 === e || e.focus();
          }
        }, [d]);
        let ee = (0, f.useRedesignIconContext)().enabled;
        return (0, i.jsx)(c.Popout, {
          spacing: 0,
          animation: c.Popout.Animation.NONE,
          shouldShow: j,
          onRequestOpen: () => {
            q(!0);
          },
          onRequestClose: () => {
            q(!1);
          },
          renderPopout: e => {
            let { closePopout: n, position: r, updatePosition: s } = e;
            return (0, i.jsx)(b, {
              className: D,
              closeOnSelect: G,
              maxVisibleItems: u,
              width: null != h ? h : K,
              isSelected: k,
              closePopout: n,
              buttonHeight: null != z ? z : 0,
              onSelect: Z,
              options: t,
              serialize: x,
              renderOptionLabel: N,
              optionClassName: U,
              updatePosition: s,
              popoutPosition: r,
            });
          },
          position: L,
          layerContext: M,
          children: (e, t) => {
            let { onClick: r, onKeyDown: u, ...c } = e,
              { isShown: d, position: f } = t,
              E = d ? S.default : _.default,
              p = ee ? 18 : 24;
            return (0, i.jsxs)(l.Clickable, {
              role: "button",
              "aria-disabled": o,
              innerRef: e => {
                (W.current = e), (Q.current = e);
              },
              onClick: o
                ? void 0
                : e => {
                    r(e), q(!j);
                  },
              onKeyDown: e => {
                "ArrowDown" === e.key
                  ? q(!0)
                  : "Escape" === e.key && (e.stopPropagation(), q(!1)),
                  u(e);
              },
              ...c,
              className: a(C.select, s, {
                [C.open]: d,
                [C.disabled]: o,
                [C.selectPositionTop]: "top" === f,
                [C.lookFilled]: v === g.SelectLooks.FILLED,
              }),
              "aria-haspopup": "listbox",
              "aria-expanded": d,
              "aria-label": B,
              "aria-labelledby": H,
              children: [
                $.length > 0
                  ? (0, i.jsx)("span", { className: C.value, children: O($) })
                  : (0, i.jsx)("span", {
                      className: C.placeholder,
                      children: n,
                    }),
                (0, i.jsxs)("div", {
                  className: C.icons,
                  children: [
                    m
                      ? (0, i.jsx)(l.Clickable, {
                          role: "button",
                          "aria-disabled": o,
                          onClick: J,
                          "aria-label": I.default.Messages.CLEAR,
                          children: (0, i.jsx)(T.default, {
                            width: 16,
                            height: 16,
                            className: C.clear,
                          }),
                        })
                      : null,
                    V ? null : (0, i.jsx)(E, { width: p, height: p }),
                  ],
                }),
              ],
            });
          },
        });
      }
      function b(e) {
        let {
            className: t,
            onSelect: n,
            closePopout: s,
            closeOnSelect: l = !0,
            isSelected: c,
            options: f,
            width: E,
            maxVisibleItems: p,
            renderOptionLabel: _,
            serialize: S,
            optionClassName: m,
            buttonHeight: T,
            updatePosition: g,
            popoutPosition: I,
          } = e,
          [v, A] = r.useState(0),
          R = r.useRef(null),
          N = r.useId(),
          O = (0, o.default)({
            id: N,
            async scrollToEnd() {},
            async scrollToStart() {},
            isEnabled: !0,
            wrap: !0,
          }),
          D = r.useRef(null);
        (0, u.useFocusLock)(D),
          r.useLayoutEffect(() => {
            var e;
            null === (e = D.current) || void 0 === e || e.focus();
          }, []),
          r.useEffect(() => {
            T > 0 && g();
          }, [T, g]),
          (0, h.default)(g),
          r.useLayoutEffect(() => {
            var e, t;
            let n =
              null === (t = R.current) || void 0 === t
                ? void 0
                : null === (e = t.getBoundingClientRect()) || void 0 === e
                  ? void 0
                  : e.height;
            null != n && A(n);
          }, [p]),
          r.useEffect(() => {
            g();
          }, [g, v]);
        let y = r.useCallback(
            e => {
              n(e), l && s();
            },
            [s, n, l]
          ),
          P = f.map((e, t) => {
            var n;
            return (0, i.jsx)(
              Option,
              {
                isSelected: c(e.value),
                value: e.value,
                label: _(e),
                onSelect: y,
                className: m,
                isDisabled: e.disabled,
                serialize: S,
              },
              null !== (n = e.key) && void 0 !== n ? n : t
            );
          }),
          L = f.length <= p ? d.AdvancedScrollerNone : d.AdvancedScrollerThin;
        return (0, i.jsx)(o.ListNavigatorProvider, {
          navigator: O,
          children: (0, i.jsx)(o.ListNavigatorContainer, {
            children: e => {
              let { ref: n, ...r } = e;
              return (0, i.jsxs)(i.Fragment, {
                children: [
                  (0, i.jsx)(L, {
                    className: a(C.popout, t, {
                      [C.popoutPositionTop]: "top" === I,
                    }),
                    style: { width: E, maxHeight: v },
                    ref: e => {
                      var t;
                      let i =
                        null !==
                          (t = null == e ? void 0 : e.getScrollerNode()) &&
                        void 0 !== t
                          ? t
                          : null;
                      (n.current = i), (D.current = i);
                    },
                    ...r,
                    role: "listbox",
                    children: P,
                  }),
                  (0, i.jsx)("div", {
                    "aria-hidden": !0,
                    ref: R,
                    className: C.measurement,
                    children: P.slice(0, p),
                  }),
                ],
              });
            },
          }),
        });
      }
      function Option(e) {
        let {
            className: t,
            value: n,
            label: r,
            onSelect: s,
            isSelected: u,
            isDisabled: c,
            serialize: d,
          } = e,
          f = (0, o.useListItem)(d(n));
        return (0, i.jsxs)(l.Clickable, {
          focusProps: { enabled: !1 },
          className: a(C.option, t),
          onClick: () => !c && s(n),
          ...f,
          "aria-selected": u,
          "aria-disabled": c,
          role: "option",
          children: [
            r,
            u &&
              (0, i.jsx)(m.default, {
                backgroundColor: "white",
                className: C.selectedIcon,
                width: 20,
                height: 20,
              }),
          ],
        });
      }
      function M(e) {
        let { value: t, onChange: n, ...r } = e,
          s = v({ value: t, onChange: n });
        return (0, i.jsx)(L, { ...r, ...s });
      }
    },
    178814: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          SelectLooks: function () {
            return i;
          },
        }),
        ((r = i || (i = {}))[(r.FILLED = 0)] = "FILLED"),
        (r[(r.CUSTOM = 1)] = "CUSTOM");
    },
    981579: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Sequencer: function () {
            return p;
          },
        }),
        n("222007");
      var i,
        r,
        s = n("37983"),
        a = n("884691"),
        o = n("414456"),
        l = n.n(o),
        u = n("458960"),
        c = n("266491"),
        d = n("413197"),
        f = n("516369");
      ((r = i || (i = {}))[(r.ENTERING = 0)] = "ENTERING"),
        (r[(r.LEAVING = 1)] = "LEAVING"),
        (r[(r.APPEARING = 2)] = "APPEARING"),
        (r[(r.STATIC = 3)] = "STATIC");
      class E extends a.PureComponent {
        componentDidMount() {
          if (null != this._measureRef.current) {
            let { height: e } =
              this._measureRef.current.getBoundingClientRect();
            this.setState({
              targetHeight: e,
              baseHeight: this.props.getBaseHeight(),
            });
          }
        }
        componentDidUpdate(e, t) {
          t.targetHeight !== this.state.targetHeight &&
            this.props.setHeight(this.state.targetHeight);
        }
        componentWillAppear(e) {
          this.setState({ animationState: 2 }), e();
        }
        componentDidAppear() {
          let { animationProgress: e, targetHeight: t } = this.state;
          e.setValue(2), this.setState({ animationState: 3, baseHeight: t });
        }
        componentWillEnter(e) {
          let { duration: t } = this.props,
            { animationProgress: n } = this.state;
          this.setState({ animationState: 0 }),
            this.props.setHeight(this.state.targetHeight),
            u.default
              .timing(n, { toValue: 2, duration: t, delay: t / 2 })
              .start(e);
        }
        componentDidEnter() {
          this.setState({ animationState: 3 });
        }
        componentWillLeave(e) {
          let { animationProgress: t } = this.state,
            { duration: n, getDirection: i } = this.props;
          (this.direction = i()),
            this.setState({ animationState: 1 }),
            u.default.timing(t, { toValue: 0, duration: n }).start(e);
        }
        componentDidLeave() {
          this.setState({ animationState: 3 });
        }
        getAnimatedStyle() {
          var e, t;
          let { reducedMotion: n } = this.context,
            { fillParent: i } = this.props,
            {
              animationProgress: r,
              animationState: s,
              baseHeight: a,
              targetHeight: o,
            } = this.state,
            l = null !== (e = this.props.sideMargin) && void 0 !== e ? e : 0,
            c =
              null !== (t = this.props.verticalMargin) && void 0 !== t ? t : 0,
            d = 1 === s,
            f = 0 === s,
            E = (d ? -1 : 1) * this.direction,
            p = {
              transform: [
                {
                  translateX: r.interpolate({
                    inputRange: [0, 2],
                    outputRange: ["".concat(150 * E, "%"), "0%"],
                    extrapolate: "clamp",
                    easing: u.default.Easing.inOut(u.default.Easing.ease),
                  }),
                },
              ],
            };
          return {
            overflow: f || d ? "hidden" : "visible",
            position: d ? "absolute" : void 0,
            top: d ? c : void 0,
            left: d ? l : void 0,
            right: d ? l : void 0,
            bottom: d ? c : void 0,
            ...(n.enabled ? null : p),
            opacity: r.interpolate({
              inputRange: [0, 2],
              outputRange: [0, 1],
              extrapolate: "clamp",
              easing: u.default.Easing.inOut(u.default.Easing.ease),
            }),
            height: f
              ? r.interpolate({
                  inputRange: [0, 1],
                  outputRange: [a, o],
                  extrapolate: "clamp",
                  easing: u.default.Easing.inOut(u.default.Easing.ease),
                })
              : i
                ? "100%"
                : "auto",
          };
        }
        render() {
          let {
              fillParent: e,
              className: t,
              animatedNodeClassName: n,
              staticClassName: i,
            } = this.props,
            { animationState: r } = this.state;
          return e
            ? (0, s.jsx)("div", {
                ref: this._measureRef,
                className: l(f.measurementFill, t, {
                  [l(f.measurementFillStatic, i)]: 3 === r,
                }),
                children: (0, s.jsx)(u.default.div, {
                  className: l(f.animatedNode, n),
                  style: this.getAnimatedStyle(),
                  children: this.props.children,
                }),
              })
            : (0, s.jsx)("div", {
                ref: this._measureRef,
                className: l(f.measurement, t),
                children: (0, s.jsx)(u.default.div, {
                  className: l(f.animatedNode, n),
                  style: this.getAnimatedStyle(),
                  children: this.props.children,
                }),
              });
        }
        constructor(...e) {
          super(...e),
            (this.state = {
              animationProgress: new u.default.Value(0),
              targetHeight: 0,
              baseHeight: 0,
              animationState: null,
            }),
            (this.direction = this.props.getDirection()),
            (this._measureRef = a.createRef());
        }
      }
      (E.contextType = d.AccessibilityPreferencesContext),
        (E.defaultProps = { duration: 300 });
      class p extends a.Component {
        componentDidMount() {
          this.setPrevSteps();
        }
        componentDidUpdate() {
          this.setPrevSteps();
        }
        setPrevSteps() {
          let { step: e, steps: t } = this.props;
          (this.prevStep = e), (this.prevSteps = t);
        }
        render() {
          let {
            step: e,
            className: t,
            innerClassName: n,
            animatedNodeClassName: i,
            staticClassName: r,
            sideMargin: a,
            verticalMargin: o,
            children: u,
            fillParent: d,
          } = this.props;
          return (0, s.jsx)(c.default, {
            component: "div",
            className: l(f.transitionGroup, t),
            children: (0, s.jsx)(
              E,
              {
                fillParent: d,
                sideMargin: a,
                verticalMargin: o,
                getDirection: this.getDirection,
                getBaseHeight: this.getBaseHeight,
                className: n,
                animatedNodeClassName: i,
                staticClassName: r,
                setHeight: this.setHeight,
                children: u,
              },
              "".concat(e)
            ),
          });
        }
        constructor(...e) {
          super(...e),
            (this.stepHeights = {}),
            (this.prevStep = null),
            (this.prevSteps = []),
            (this.getBaseHeight = () =>
              null != this.prevStep && null != this.stepHeights[this.prevStep]
                ? this.stepHeights[this.prevStep]
                : 0),
            (this.getDirection = () => {
              let { steps: e, step: t } = this.props,
                n = null != this.prevStep ? e.indexOf(this.prevStep) : -1,
                i =
                  -1 === n && null != this.prevStep
                    ? this.prevSteps.indexOf(this.prevStep)
                    : -1,
                r = e.indexOf(t);
              return Math.max(n, i) > r ? -1 : 1;
            }),
            (this.setHeight = e => {
              let { step: t } = this.props;
              this.stepHeights[t] = e;
            });
        }
      }
      p.defaultProps = { fillParent: !1 };
    },
    292842: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Shakeable: function () {
            return u;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("627445"),
        a = n.n(s),
        o = n("917351"),
        l = n.n(o);
      class u extends r.Component {
        getDefaultAnimProps(e, t) {
          let n = Date.now();
          return {
            duration: null != e ? e : 300,
            progress: 0,
            last: n,
            intensity: null != t ? t : 5,
            lastDirection: -1,
            frameCount: 0,
          };
        }
        componentWillUnmount() {
          this._animationCleanup();
        }
        shake(e, t) {
          (this.animProps = this.getDefaultAnimProps(e, t)),
            !this.state.shaking &&
              this.setState({ shaking: !0 }, this._animate);
        }
        stop() {
          this.state.shaking && this.setState({ shaking: !1 });
        }
        _animationComplete() {
          this.setState({ shaking: !1 }, this._animationCleanup);
        }
        render() {
          let { children: e, ...t } = this.props;
          return (0, i.jsx)("div", { ...t, ref: this.ref, children: e });
        }
        constructor(e) {
          super(e),
            (this.ref = r.createRef()),
            (this._animate = () => {
              let { animProps: e } = this;
              if (
                !this.state.shaking ||
                e.progress > e.duration ||
                null == this.ref.current
              ) {
                this._animationComplete();
                return;
              }
              let t = Date.now();
              if (
                ((e.progress += t - e.last),
                (e.last = t),
                e.frameCount % 2 != 0)
              ) {
                let t = e.lastDirection * e.intensity,
                  n = l.random(-e.intensity, e.intensity, !0),
                  i = Math.max(0, Math.cbrt(e.duration - e.progress / 1e3));
                (e.intensity *= Math.min(1, i)),
                  (e.lastDirection *= -1),
                  a(
                    null != this.ref.current,
                    "Shakeable style set when not mounted"
                  ),
                  (this.ref.current.style.transform = "translate3d("
                    .concat(t, "px,")
                    .concat(n, "px,0px)"));
              }
              (e.frameCount += 1),
                (this._animationFrame = requestAnimationFrame(this._animate));
            }),
            (this._animationCleanup = () => {
              null != this.ref.current &&
                (this.ref.current.style.transform = ""),
                cancelAnimationFrame(this._animationFrame);
            }),
            (this.state = { shaking: !1 });
        }
      }
    },
    68643: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Shaker: function () {
            return l;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("917351"),
        a = n.n(s),
        o = n("206230");
      class l extends r.Component {
        componentDidMount() {
          this.props.isShaking && this.startShaking();
        }
        componentDidUpdate(e) {
          this.props.isShaking !== e.isShaking &&
            this.setShaking(this.props.isShaking);
        }
        setShaking(e) {
          e ? this.startShaking() : this.stopShaking();
        }
        startShaking() {
          (this.shouldRenderFrame = !0),
            (this.animationFrame = requestAnimationFrame(this.animate));
        }
        stopShaking() {
          null != this.animationFrame &&
            cancelAnimationFrame(this.animationFrame);
          let e = this.ref.current;
          null != e && (e.style.transform = "");
        }
        render() {
          let { className: e, children: t } = this.props;
          return (0, i.jsx)("div", {
            className: e,
            ref: this.ref,
            children: t,
          });
        }
        constructor(...e) {
          super(...e),
            (this.ref = r.createRef()),
            (this.shouldRenderFrame = !0),
            (this.animate = () => {
              let { intensity: e, isShaking: t } = this.props;
              if (!t) return;
              let n = this.ref.current;
              if (this.shouldRenderFrame && null != n) {
                let t = a.random(-e, e, !0),
                  i = a.random(-e, e, !0);
                n.style.transform = o.default.useReducedMotion
                  ? ""
                  : "translate3d(".concat(t, "px,").concat(i, "px,0px)");
              }
              (this.shouldRenderFrame = !this.shouldRenderFrame),
                (this.animationFrame = requestAnimationFrame(this.animate));
            });
        }
      }
      l.defaultProps = { isShaking: !0, intensity: 5 };
    },
    837443: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Slider: function () {
            return m;
          },
        }),
        n("808653"),
        n("70102");
      var i,
        r,
        s = n("37983"),
        a = n("884691"),
        o = n("414456"),
        l = n.n(o),
        u = n("917351"),
        c = n.n(u),
        d = n("118810"),
        f = n("718776"),
        E = n("414055"),
        p = n("206230"),
        h = n("734602");
      function _(e, t) {
        let n = 0;
        for (let i = 0; i < t.length; i++) {
          let r = t[i];
          if (e === r) return i;
          if (e < r) {
            if (0 === n || r - e < n) return i;
            return i - 1;
          }
          n = e - r;
        }
        return null;
      }
      ((r = i || (i = {}))[(r.ABOVE = 0)] = "ABOVE"),
        (r[(r.BELOW = 1)] = "BELOW");
      function S(e) {
        let t = Math.min(Math.max(e.initialValue, e.minValue), e.maxValue);
        return {
          value: t,
          initialValueProp: e.initialValue,
          newClosestIndex: null,
          ...(function (e) {
            let {
                markers: t,
                initialValue: n,
                minValue: i,
                maxValue: r,
                equidistant: s,
              } = e,
              a = [],
              o = [];
            if (null == t)
              return {
                min: i,
                max: r,
                range: r - i,
                sortedMarkers: a,
                markerPositions: o,
              };
            a = t.sort((e, t) => e - t);
            let l = _(n, a),
              u = a[0],
              c = a[a.length - 1],
              d = c - u;
            if (s) {
              let e = 100 / (a.length - 1);
              o = a.map((t, n) => n * e);
            } else {
              let e = e => (100 * (e - u)) / d;
              o = a.map(t => e(t));
            }
            return {
              min: u,
              max: c,
              range: d,
              sortedMarkers: a,
              markerPositions: o,
              closestMarkerIndex: l,
            };
          })(e),
        };
      }
      class m extends a.PureComponent {
        static getDerivedStateFromProps(e, t) {
          return e.initialValue !== t.initialValueProp
            ? { ...S(e), active: t.active }
            : null;
        }
        componentWillUnmount() {
          this.reset();
        }
        renderMark(e) {
          let { onMarkerRender: t } = this.props;
          return null != t ? t(e) : e;
        }
        render() {
          var e;
          let {
              value: t,
              active: n,
              focused: i,
              sortedMarkers: r,
              markerPositions: a,
              closestMarkerIndex: o,
              newClosestIndex: u,
              min: c,
              max: d,
            } = this.state,
            {
              disabled: _,
              stickToMarkers: S,
              className: m,
              children: T,
              barStyles: g,
              fillStyles: I,
              mini: C,
              hideBubble: v,
              defaultValue: A,
              orientation: R,
              onValueRender: N,
              renderMarker: O,
              getAriaValueText: D,
              barClassName: y,
              grabberClassName: P,
              grabberStyles: L = {},
              markerPosition: b = 0,
              "aria-hidden": M,
              "aria-label": U,
              "aria-labelledby": G,
              "aria-describedby": w,
            } = this.props,
            k = 0;
          S
            ? null != a && (null != u ? (k = a[u]) : null != o && (k = a[o]))
            : (k = this.scaleValue(t));
          let x = "".concat(k, "%"),
            F =
              null != a && null != r
                ? a.map((e, t) => {
                    let n = r[t],
                      i = null != A && A === n,
                      a = this.renderMark(n);
                    return (0, s.jsx)(
                      "div",
                      {
                        className: l(h.mark, {
                          [h.defaultValue]: i,
                          [h.markAbove]: 0 === b,
                          [h.markBelow]: 1 === b,
                        }),
                        style: { left: "".concat(e, "%") },
                        children:
                          null != O
                            ? O(n)
                            : (0, s.jsxs)(s.Fragment, {
                                children: [
                                  (0, s.jsx)("div", {
                                    className: h.markValue,
                                    children: a,
                                  }),
                                  (0, s.jsx)("div", {
                                    className:
                                      h[
                                        "markDash".concat(
                                          null == a ? "simple" : ""
                                        )
                                      ],
                                  }),
                                ],
                              }),
                      },
                      t
                    );
                  })
                : null,
            V = null != N ? N(t) : "".concat(k.toFixed(0), "%"),
            B =
              null !== (e = null == D ? void 0 : D(t)) && void 0 !== e
                ? e
                : void 0;
          return (0, s.jsx)(f.FocusRing, {
            focusTarget: this.containerRef,
            ringTarget: this.grabberRef,
            children: (0, s.jsxs)("div", {
              className: l(h.slider, m, { [h.disabled]: _, [h.mini]: C }),
              "aria-valuemin": c,
              "aria-valuemax": d,
              "aria-valuenow": t,
              "aria-disabled": _,
              "aria-orientation": R,
              "aria-hidden": M,
              "aria-label": U,
              "aria-labelledby": G,
              "aria-describedby": w,
              "aria-valuetext": B,
              role: "slider",
              tabIndex: 0,
              onKeyDown: this.handleKeyDown,
              onMouseDown: this.handleContainerMouseDown,
              onFocus: this.onFocus,
              onBlur: this.onBlur,
              ref: this.containerRef,
              children: [
                (0, s.jsx)("div", { className: h.track, children: F }),
                (0, s.jsx)("div", {
                  className: l(h.bar, y),
                  style: g,
                  children: (0, s.jsx)("div", {
                    className: h.barFill,
                    style: { ...I, width: x },
                  }),
                }),
                T,
                (0, s.jsx)("div", {
                  className: h.track,
                  children: (0, s.jsx)(E.Tooltip, {
                    color: E.Tooltip.Colors.GREY,
                    hideOnClick: !1,
                    text: v || S ? null : V,
                    forceOpen: n || (i && p.default.keyboardModeEnabled),
                    children: e =>
                      (0, s.jsx)("div", {
                        ...e,
                        className: l(h.grabber, P),
                        style: { ...L, left: x },
                        onMouseDown: this.handleMouseDown,
                        ref: this.grabberRef,
                      }),
                  }),
                }),
              ],
            }),
          });
        }
        reset() {
          var e, t, n, i;
          null === (t = this.containerRef.current) ||
            void 0 === t ||
            null === (e = t.ownerDocument) ||
            void 0 === e ||
            e.removeEventListener("mousemove", this.handleMouseMove, !0),
            null === (i = this.containerRef.current) ||
              void 0 === i ||
              null === (n = i.ownerDocument) ||
              void 0 === n ||
              n.removeEventListener("mouseup", this.handleMouseUp, !0);
        }
        scaleValue(e) {
          return (100 * (e - this.state.min)) / this.state.range;
        }
        unscaleValue(e) {
          return (e * this.state.range) / 100 + this.state.min;
        }
        focus() {
          var e;
          null === (e = this.containerRef.current) || void 0 === e || e.focus();
        }
        blur() {
          var e;
          null === (e = this.containerRef.current) || void 0 === e || e.blur();
        }
        moveStaggered(e) {
          let t;
          let {
              boundingRect: n,
              x: i = 0,
              closestMarkerIndex: r,
              markerPositions: s,
              sortedMarkers: a,
            } = this.state,
            { asValueChanges: o } = this.props;
          if (null == n) return;
          let { left: l, right: u } = n;
          if (e.clientX <= l || e.clientX >= u) return;
          let c = e.clientX - i,
            d = s[r] + 100 * (c / (u - l));
          if (this.props.equidistant) t = _(d, s);
          else {
            let e = this.unscaleValue(d);
            t = _(e, a);
          }
          null != t && (null == o || o(a[t])),
            this.setState({ newClosestIndex: t });
        }
        constructor(e) {
          super(e),
            (this.containerRef = a.createRef()),
            (this.grabberRef = a.createRef()),
            (this.moveGrabber = e => {
              let { sortedMarkers: t, value: n, min: i, max: r } = this.state,
                {
                  asValueChanges: s,
                  onValueChange: a,
                  stickToMarkers: o,
                } = this.props,
                l = {};
              if (o) {
                let i = t.indexOf(n);
                if (i < 0) return;
                let r = i + e,
                  s = t[r];
                if (null == s) return;
                (l.value = s),
                  (l.closestMarkerIndex = r),
                  (l.newClosestIndex = r);
              } else l.value = c.clamp(n + e, i, r);
              this.setState(l),
                l.value !== this.state.value &&
                  (null == s || s(l.value), null == a || a(l.value));
            }),
            (this.handleContainerMouseDown = e => {
              let t;
              let {
                  disabled: n,
                  maxValue: i,
                  minValue: r,
                  asValueChanges: s,
                  onValueChange: a,
                  stickToMarkers: o,
                } = this.props,
                { sortedMarkers: l, markerPositions: u } = this.state;
              if (n) return;
              let { clientX: c, currentTarget: f } = e;
              if (!(0, d.isElement)(f)) return;
              let { left: E, width: p } = f.getBoundingClientRect(),
                h = (c - E) / p;
              if (o) {
                let { nextClosestMarkerIndex: e } = u.reduce(
                  (e, t, n) => {
                    let i = Math.abs(t / 100 - h);
                    return i <= e.smallestDelta
                      ? { smallestDelta: i, nextClosestMarkerIndex: n }
                      : e;
                  },
                  { smallestDelta: 1, nextClosestMarkerIndex: -1 }
                );
                if (-1 === e) return;
                this.setState({ closestMarkerIndex: e }), (t = l[e]);
              } else
                (t = r + (i - r) * h),
                  this.setState({ value: t }),
                  this.handleMouseDown(e);
              null != a && a(t), null != s && s(t);
            }),
            (this.handleKeyDown = e => {
              let {
                disabled: t,
                orientation: n,
                keyboardStep: i = 1,
              } = this.props;
              if (t) return;
              let { key: r } = e,
                s = [],
                a = [];
              switch (n) {
                case "horizontal":
                  (s = ["ArrowRight"]), (a = ["ArrowLeft"]);
                  break;
                case "vertical":
                  (s = ["ArrowUp"]), (a = ["ArrowDown"]);
                  break;
                default:
                  (s = ["ArrowRight", "ArrowUp"]),
                    (a = ["ArrowLeft", "ArrowDown"]);
              }
              a.includes(r)
                ? (e.preventDefault(),
                  e.stopPropagation(),
                  this.moveGrabber(-i))
                : s.includes(r) &&
                  (e.preventDefault(),
                  e.stopPropagation(),
                  this.moveGrabber(i));
            }),
            (this.handleMouseDown = e => {
              var t, n;
              if (this.props.disabled) return;
              e.stopPropagation();
              let { current: i } = this.containerRef;
              if (
                (null == i ||
                  null === (t = i.ownerDocument) ||
                  void 0 === t ||
                  t.addEventListener("mousemove", this.handleMouseMove, !0),
                null == i ||
                  null === (n = i.ownerDocument) ||
                  void 0 === n ||
                  n.addEventListener("mouseup", this.handleMouseUp, !0),
                !(0, d.isElement)(i))
              )
                throw Error(
                  "[UIKit]Slider.handleMouseDown(): assert failed: domNode nodeType !== Element"
                );
              this.setState({
                x: e.clientX,
                active: !0,
                boundingRect: i.getBoundingClientRect(),
                newClosestIndex: this.state.closestMarkerIndex,
              });
            }),
            (this.handleMouseUp = e => {
              e.stopPropagation(), this.reset();
              let { onValueChange: t, stickToMarkers: n } = this.props,
                { newClosestIndex: i } = this.state;
              n && null != i
                ? (null == t || t(this.state.sortedMarkers[i]),
                  this.setState({
                    newClosestIndex: null,
                    closestMarkerIndex: i,
                  }))
                : null == t || t(this.state.value),
                this.setState({ active: !1 });
            }),
            (this.handleMouseMove = e => {
              e.preventDefault(),
                this.props.stickToMarkers
                  ? this.moveStaggered(e)
                  : this.moveSmoothly(e);
            }),
            (this.onFocus = () => {
              this.setState({ focused: !0 });
            }),
            (this.onBlur = () => {
              this.setState({ focused: !1 });
            }),
            (this.moveSmoothly = e => {
              let { minValue: t, maxValue: n, asValueChanges: i } = this.props,
                { boundingRect: r } = this.state;
              if (null == r) return;
              let { left: s, right: a } = r,
                o = n - t,
                l = e.clientX - s,
                u = Math.min(Math.max(t + (l / (a - s)) * o, t), n);
              null == i || i(u), this.setState({ value: u });
            }),
            (this.state = { active: !1, focused: !1, ...S(e) });
        }
      }
      m.defaultProps = {
        initialValue: 10,
        minValue: 0,
        maxValue: 100,
        keyboardStep: 1,
        handleSize: 10,
        disabled: !1,
        stickToMarkers: !1,
        fillStyles: {},
      };
    },
    265984: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Slide: function () {
            return _;
          },
          Slides: function () {
            return S;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("907002"),
        a = n("759843"),
        o = n("394846"),
        l = n("413197"),
        u = n("731898"),
        c = n("634634"),
        d = n("685665"),
        f = n("542489"),
        E = n("561744");
      let p = { mass: 1, tension: 300, friction: 28, clamp: !0 };
      function h(e, t) {
        return n => {
          if (0 === n) return "auto";
          let i = "forwards" === t.current,
            r = n > 0,
            s = !1;
          return (
            r && i && "left" === e && (s = !0),
            r && !i && "right" === e && (s = !0),
            !r && i && "right" === e && (s = !0),
            !r && !i && "left" === e && (s = !0),
            s ? "".concat(100 * Math.abs(n), "%") : "auto"
          );
        };
      }
      function _(e) {
        return null;
      }
      function S(e) {
        var t, n, _, S;
        let { contentDisplay: m, ...T } = e,
          g = {},
          { analyticsLocations: I } = (0, d.default)();
        r.Children.forEach(T.children, (e, t) => {
          g[e.props.id] = {
            children: e.props.children,
            impressionName: e.props.impressionName,
            impressionProperties: e.props.impressionProperties,
            index: t,
          };
        });
        let C = T.activeSlide,
          v = (0, c.default)(T.activeSlide);
        let A =
            ((_ = null != v ? g[v] : null),
            (S = g[C]),
            null == _
              ? null
              : _.index > S.index
                ? "backwards"
                : _.index < S.index
                  ? "forwards"
                  : null),
          { reducedMotion: R } = r.useContext(
            l.AccessibilityPreferencesContext
          ),
          N = r.useContext(f.default),
          O = g[C].impressionName,
          D = { ...g[C].impressionProperties, location_stack: I };
        N({
          type: a.ImpressionTypes.MODAL,
          name: O,
          properties: D,
          _stackContext: { isSlide: !0 },
        });
        let { ref: y, width: P = 0, height: L = 0 } = (0, u.default)(C),
          b = {
            ...p,
            ...T.springConfig,
            ...(R.enabled ? { clamp: !0 } : null),
          },
          M = (0, s.useSpring)({
            immediate: null == v,
            width: null !== (t = T.width) && void 0 !== t ? t : P,
            height: L,
            config: b,
          }),
          U = (0, s.useTransition)(C, {
            immediate: null == v,
            value: 0,
            from: { value: 1 },
            enter: { value: 0 },
            leave: { value: -1 },
            config: b,
            onRest: (e, t) => {
              let { item: n } = t;
              n === C && null != T.onSlideReady && T.onSlideReady(n);
            },
          }),
          G = (0, E.default)(A),
          { width: w, centered: k = !0 } = T,
          x = o.isMobile ? "100%" : M.width.to(e => Math.round(e)),
          F = o.isMobile ? "100%" : M.height.to(e => Math.round(e)),
          V = o.isMobile
            ? {}
            : k
              ? {
                  transform: "translate3d(0, -50%, 0) scale(1.0, 1.0)",
                  top: "50%",
                }
              : { transform: "scale(1.0, 1.0)" },
          B = o.isMobile
            ? {}
            : {
                overflow:
                  null !== (n = T.overflow) && void 0 !== n ? n : "hidden",
              };
        return (0, i.jsx)(s.animated.div, {
          style: { position: "relative", width: x, height: F, ...B },
          children: U((e, t, n) => {
            let { key: r } = n;
            return (0, i.jsx)(
              s.animated.div,
              {
                ref: t === C ? y : null,
                style: {
                  position: "absolute",
                  display: m,
                  flexDirection: "column",
                  backfaceVisibility: "hidden",
                  width: o.isMobile ? "100%" : w,
                  ...V,
                  ...(R.enabled
                    ? { opacity: e.value.to(e => 1 - Math.abs(e)) }
                    : {
                        left: e.value.to(h("left", G)),
                        right: e.value.to(h("right", G)),
                      }),
                },
                children: g[t].children,
              },
              r
            );
          }),
        });
      }
    },
    391010: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          StatusTypes: function () {
            return d.StatusTypes;
          },
          useStatusFillColor: function () {
            return h;
          },
          getStatusBackdropOpacity: function () {
            return _;
          },
          getStatusBackdropColor: function () {
            return S;
          },
          getStatusValues: function () {
            return g;
          },
          renderStatusMask: function () {
            return I;
          },
          AnimatedStatus: function () {
            return C;
          },
          getStatusMask: function () {
            return v;
          },
          getStatusSize: function () {
            return A;
          },
          Status: function () {
            return R;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("907002"),
        l = n("819855"),
        u = n("449918"),
        c = n("587974"),
        d = n("49111"),
        f = n("52904"),
        E = n("844254");
      let p = { tension: 600, friction: 70 };
      function h(e, t) {
        let n = (0, u.useColorValue)(
            (function (e) {
              switch (e) {
                case d.StatusTypes.ONLINE:
                  return d.Color.GREEN_360;
                case d.StatusTypes.IDLE:
                  return d.Color.YELLOW_300;
                case d.StatusTypes.DND:
                  return d.Color.RED_400;
                case d.StatusTypes.STREAMING:
                  return d.Color.TWITCH;
                case d.StatusTypes.INVISIBLE:
                case d.StatusTypes.UNKNOWN:
                case d.StatusTypes.OFFLINE:
                default:
                  return d.Color.PRIMARY_400;
              }
            })(e)
          ).hex,
          i = (0, u.useDesaturatedColorString)(null != t ? t : n);
        return null != i ? i : void 0;
      }
      function _(e, t) {
        return t === f.StatusBackdropColors.WHITE && e === d.StatusTypes.IDLE
          ? f.StatusBackdropOpacity.HIGH
          : f.StatusBackdropOpacity.LOW;
      }
      function S(e) {
        return (0, l.isThemeDark)(e)
          ? f.StatusBackdropColors.BLACK
          : f.StatusBackdropColors.WHITE;
      }
      function m(e, t, n, i) {
        return "scale("
          .concat(t, ") translate(")
          .concat(0.5625 * e + i, " ")
          .concat(0.75 * e + n, ")");
      }
      function T(e, t, n) {
        return "".concat(0.5625 * e + n, "px ").concat(0.75 * e + t, "px");
      }
      function g(e) {
        let {
            size: t,
            status: n,
            isMobile: i,
            isTyping: r,
            topOffset: s = 0,
            leftOffset: a = 0,
          } = e,
          o = (s / 8) * t,
          l = (a / 8) * t;
        if (r)
          return {
            bgRadius: 0.5 * t,
            bgY: 0.25 * t + o,
            bgX: 0,
            bgHeight: t,
            bgWidth: t * f.TYPING_WIDTH_RATIO,
            cutoutX: 0.5 * t + l,
            cutoutY: 0.75 * t + o,
            cutoutWidth: 0,
            cutoutHeight: 0,
            cutoutRadius: 0,
            polygonScale: m(t, 0, o, l),
            polygonOrigin: T(t, o, l),
            dotY: 0.75 * t + o,
            dotX: 0.5 * t + l,
            dotRadius: 0,
          };
        switch (n) {
          case d.StatusTypes.ONLINE:
            if (i)
              return {
                bgRadius: t * f.MOBILE_HEIGHT_RATIO * f.MOBILE_ICON_RADIUS,
                bgY: 0,
                bgX: l,
                bgHeight: t * f.MOBILE_HEIGHT_RATIO,
                bgWidth: t,
                cutoutX: 0.125 * t + l,
                cutoutY: 0.25 * t,
                cutoutWidth: 0.75 * t,
                cutoutHeight: 0.75 * t,
                cutoutRadius: 0,
                polygonScale: m(t, 0, o, l),
                polygonOrigin: T(t, o, l),
                dotY: 1.25 * t,
                dotX: 0.5 * t + l,
                dotRadius: 0.125 * t,
              };
            return {
              bgRadius: 0.5 * t,
              bgY: 0.25 * t + o,
              bgX: l,
              bgHeight: t,
              bgWidth: t,
              cutoutX: 0.5 * t + l,
              cutoutY: 0.75 * t + o,
              cutoutWidth: 0,
              cutoutHeight: 0,
              cutoutRadius: 0,
              polygonScale: m(t, 0, o, l),
              polygonOrigin: T(t, o, l),
              dotY: 0.75 * t + o,
              dotX: 0.5 * t + l,
              dotRadius: 0,
            };
          case d.StatusTypes.IDLE:
            return {
              bgRadius: 0.5 * t,
              bgY: 0.25 * t + o,
              bgX: l,
              bgHeight: t,
              bgWidth: t,
              cutoutX: -(0.125 * t) + l,
              cutoutY: 0.125 * t + o,
              cutoutWidth: 0.75 * t,
              cutoutHeight: 0.75 * t,
              cutoutRadius: 0.375 * t,
              polygonScale: m(t, 0, o, l),
              polygonOrigin: T(t, o, l),
              dotY: 0.75 * t + o,
              dotX: 0.5 * t + l,
              dotRadius: 0,
            };
          case d.StatusTypes.DND:
            return {
              bgRadius: 0.5 * t,
              bgY: 0.25 * t + o,
              bgX: l,
              bgHeight: t,
              bgWidth: t,
              cutoutX: 0.125 * t + l,
              cutoutY: 0.625 * t + o,
              cutoutWidth: 0.75 * t,
              cutoutHeight: 0.25 * t,
              cutoutRadius: 0.125 * t,
              polygonScale: m(t, 0, o, l),
              polygonOrigin: T(t, o, l),
              dotY: 0.75 * t + o,
              dotX: 0.5 * t + l,
              dotRadius: 0,
            };
          case d.StatusTypes.STREAMING:
            return {
              bgRadius: 0.5 * t,
              bgY: 0.25 * t + o,
              bgX: l,
              bgHeight: t,
              bgWidth: t,
              cutoutX: 0.5 * t + l,
              cutoutY: 0.75 * t + o,
              cutoutWidth: 0,
              cutoutHeight: 0,
              cutoutRadius: 0.25 * t,
              polygonScale: m(t, 1, o, l),
              polygonOrigin: T(t, o, l),
              dotY: 0.75 * t + o,
              dotX: 0.5 * t + l,
              dotRadius: 0,
            };
          case d.StatusTypes.INVISIBLE:
          case d.StatusTypes.UNKNOWN:
          case d.StatusTypes.OFFLINE:
          default:
            return {
              bgRadius: 0.5 * t,
              bgY: 0.25 * t + o,
              bgX: l,
              bgHeight: t,
              bgWidth: t,
              cutoutX: 0.25 * t + l,
              cutoutY: 0.5 * t + o,
              cutoutWidth: 0.5 * t,
              cutoutHeight: 0.5 * t,
              cutoutRadius: 0.25 * t,
              polygonScale: m(t, 0, o, l),
              polygonOrigin: T(t, o, l),
              dotY: 0.75 * t + o,
              dotX: 0.5 * t + l,
              dotRadius: 0,
            };
        }
      }
      function I(e, t, n) {
        var r;
        let {
          bgRadius: s,
          bgY: a,
          bgX: l,
          bgHeight: u,
          bgWidth: c,
          cutoutX: d,
          cutoutY: f,
          cutoutWidth: E,
          cutoutHeight: p,
          cutoutRadius: h,
          polygonScale: _,
          polygonOrigin: S,
          dotY: m,
          dotX: T,
          dotRadius: g,
        } = e;
        return (0, i.jsxs)("mask", {
          id: n,
          children: [
            (0, i.jsx)(o.animated.rect, {
              x: l,
              y: a,
              width: c,
              height: u,
              rx: s,
              ry: s,
              fill: "white",
            }),
            (0, i.jsx)(o.animated.rect, {
              x: d,
              y: f,
              width: E,
              height: p,
              rx: h,
              ry: h,
              fill: "black",
            }),
            (0, i.jsx)(o.animated.polygon, {
              points:
                ((r = t),
                "-"
                  .concat(0.216506 * r, ",-")
                  .concat(0.25 * r, " ")
                  .concat(0.216506 * r, ",0 -")
                  .concat(0.216506 * r, ",")
                  .concat(0.25 * r)),
              fill: "black",
              transform: _,
              style: { transformOrigin: S },
            }),
            (0, i.jsx)(o.animated.circle, {
              fill: "black",
              cx: T,
              cy: m,
              r: g,
            }),
          ],
        });
      }
      function C(e) {
        let {
            status: t,
            isMobile: n = !1,
            size: s = 8,
            color: l,
            className: u,
            style: c,
          } = e,
          _ = r.useId(),
          S = t === d.StatusTypes.ONLINE && n,
          m = r.useMemo(
            () => g({ size: s, status: t, isMobile: S }),
            [s, t, S]
          ),
          T = (0, o.useSpring)({ config: p, to: m }),
          C = h(t, l),
          [{ fill: v }] = (0, o.useSpring)({ config: p, fill: C }, [C]),
          A = Math.ceil(s * f.MOBILE_HEIGHT_RATIO);
        return (0, i.jsxs)("svg", {
          width: s,
          height: A,
          viewBox: "0 0 ".concat(s, " ").concat(A),
          className: a(E.mask, u),
          style: c,
          children: [
            I(T, s, _),
            (0, i.jsx)(o.animated.rect, {
              x: 0,
              y: 0,
              width: s,
              height: A,
              fill: v,
              mask: "url(#".concat(_, ")"),
            }),
          ],
        });
      }
      function v(e, t) {
        let n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        if (n) return c.default.Masks.STATUS_TYPING;
        switch (e) {
          case d.StatusTypes.IDLE:
            return c.default.Masks.STATUS_IDLE;
          case d.StatusTypes.DND:
            return c.default.Masks.STATUS_DND;
          case d.StatusTypes.STREAMING:
            return c.default.Masks.STATUS_STREAMING;
          case d.StatusTypes.INVISIBLE:
          case d.StatusTypes.UNKNOWN:
          case d.StatusTypes.OFFLINE:
            return c.default.Masks.STATUS_OFFLINE;
          case d.StatusTypes.ONLINE:
          default:
            if (t) return c.default.Masks.STATUS_ONLINE_MOBILE;
            return c.default.Masks.STATUS_ONLINE;
        }
      }
      function A(e, t, n) {
        let i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
        return t === d.StatusTypes.ONLINE && n && !i
          ? { width: e, height: e * f.MOBILE_HEIGHT_RATIO }
          : { width: i ? e * f.TYPING_WIDTH_RATIO : e, height: e };
      }
      function R(e) {
        let {
            status: t,
            isMobile: n = !1,
            size: r = 8,
            className: s,
            style: o,
            color: l,
          } = e,
          u = t === d.StatusTypes.ONLINE && n,
          f = h(t, l);
        return (0, i.jsx)(c.default, {
          mask: v(t, u),
          className: a(E.mask, s),
          style: o,
          ...A(r, t, u),
          children: (0, i.jsx)("div", {
            style: { backgroundColor: f },
            className: E.status,
          }),
        });
      }
    },
    980672: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Switch: function () {
            return h;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("907002"),
        l = n("669491"),
        u = n("413197"),
        c = n("718776"),
        d = n("708253"),
        f = n("322068");
      let E = { mass: 1, tension: 250 },
        p = {
          X: {
            TOP: "M5.13231 6.72963L6.7233 5.13864L14.855 13.2704L13.264 14.8614L5.13231 6.72963Z",
            BOTTOM:
              "M13.2704 5.13864L14.8614 6.72963L6.72963 14.8614L5.13864 13.2704L13.2704 5.13864Z",
          },
          BAR: {
            TOP: "M6.56666 11.0013L6.56666 8.96683L13.5667 8.96683L13.5667 11.0013L6.56666 11.0013Z",
            BOTTOM:
              "M13.5582 8.96683L13.5582 11.0013L6.56192 11.0013L6.56192 8.96683L13.5582 8.96683Z",
          },
          CHECK: {
            TOP: "M7.89561 14.8538L6.30462 13.2629L14.3099 5.25755L15.9009 6.84854L7.89561 14.8538Z",
            BOTTOM:
              "M4.08643 11.0903L5.67742 9.49929L9.4485 13.2704L7.85751 14.8614L4.08643 11.0903Z",
          },
        },
        h = function (e) {
          let {
              id: t,
              onChange: n,
              checked: s,
              disabled: h,
              className: _,
              focusProps: S,
              innerRef: m,
            } = e,
            { reducedMotion: T } = r.useContext(
              u.AccessibilityPreferencesContext
            ),
            g = r.useRef(null),
            [I, C] = r.useState(!1),
            v = (0, d.useToken)(
              l.default.unsafe_rawColors.PRIMARY_400
            ).spring(),
            A = (0, d.useToken)(l.default.unsafe_rawColors.GREEN_360).spring(),
            { state: R, opacity: N } = (0, o.useSpring)({
              config: E,
              opacity: h ? 0.3 : 1,
              state: I ? (s ? 0.7 : 0.3) : s ? 1 : 0,
            });
          return (0, i.jsx)(c.FocusRing, {
            ...S,
            within: !0,
            offset: -2,
            children: (0, i.jsxs)(o.animated.div, {
              className: a(f.container, _, { [f.checked]: s, [f.disabled]: h }),
              onMouseDown: () => !h && C(!0),
              onMouseUp: () => C(!1),
              onMouseLeave: () => C(!1),
              style: { opacity: N, backgroundColor: R.to({ output: [v, A] }) },
              children: [
                (0, i.jsxs)(o.animated.svg, {
                  className: f.slider,
                  viewBox: "0 0 28 20",
                  preserveAspectRatio: "xMinYMid meet",
                  style: {
                    left: R.to({
                      range: [0, 0.3, 0.7, 1],
                      output: [-3, 1, 8, 12],
                    }),
                  },
                  "aria-hidden": !0,
                  children: [
                    (0, i.jsx)(o.animated.rect, {
                      fill: "white",
                      x: R.to({
                        range: [0, 0.3, 0.7, 1],
                        output: [4, 0, 0, 4],
                      }),
                      y: R.to({
                        range: [0, 0.3, 0.7, 1],
                        output: [0, 1, 1, 0],
                      }),
                      height: R.to({
                        range: [0, 0.3, 0.7, 1],
                        output: [20, 18, 18, 20],
                      }),
                      width: R.to({
                        range: [0, 0.3, 0.7, 1],
                        output: [20, 28, 28, 20],
                      }),
                      rx: "10",
                    }),
                    (function (e, t, n, r) {
                      let s = e.to({ output: [t, n] }),
                        a = r
                          ? [p.X.TOP, p.X.TOP, p.CHECK.TOP, p.CHECK.TOP]
                          : [p.X.TOP, p.BAR.TOP, p.BAR.TOP, p.CHECK.TOP],
                        l = r
                          ? [
                              p.X.BOTTOM,
                              p.X.BOTTOM,
                              p.CHECK.BOTTOM,
                              p.CHECK.BOTTOM,
                            ]
                          : [
                              p.X.BOTTOM,
                              p.BAR.BOTTOM,
                              p.BAR.BOTTOM,
                              p.CHECK.BOTTOM,
                            ];
                      return (0, i.jsxs)("svg", {
                        viewBox: "0 0 20 20",
                        fill: "none",
                        children: [
                          (0, i.jsx)(o.animated.path, {
                            fill: s,
                            d: e.to({ range: [0, 0.3, 0.7, 1], output: a }),
                          }),
                          (0, i.jsx)(o.animated.path, {
                            fill: s,
                            d: e.to({ range: [0, 0.3, 0.7, 1], output: l }),
                          }),
                        ],
                      });
                    })(R, v, A, T.enabled),
                  ],
                }),
                (0, i.jsx)("input", {
                  id: t,
                  type: "checkbox",
                  ref: e => {
                    (g.current = e), null != m && (m.current = e);
                  },
                  className: f.input,
                  tabIndex: h ? -1 : 0,
                  onKeyDown: function (e) {
                    if (!h && !e.repeat)
                      (" " === e.key || "Enter" === e.key) && C(!0);
                  },
                  onKeyUp: function (e) {
                    var t;
                    if (!h && !!I && !e.repeat)
                      C(!1),
                        "Enter" === e.key &&
                          (null === (t = g.current) ||
                            void 0 === t ||
                            t.click());
                  },
                  onChange: function (e) {
                    C(!1), null == n || n(e.currentTarget.checked, e);
                  },
                  checked: s,
                  disabled: h,
                }),
              ],
            }),
          });
        };
    },
    914907: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          TabBar: function () {
            return I;
          },
        }),
        n("781738"),
        n("70102"),
        n("222007");
      var i,
        r,
        s = n("37983"),
        a = n("884691"),
        o = n("414456"),
        l = n.n(o),
        u = n("71185"),
        c = n("509043"),
        d = n("669491"),
        f = n("227645"),
        E = n("577776"),
        p = n("49111"),
        h = n("672531");
      let _ = { side: h.side, top: h.top, "top-pill": h.topPill },
        S = a.forwardRef(function (e, t) {
          let { children: n, id: i, ...r } = e;
          return (0, s.jsx)("div", {
            ...r,
            ref: t,
            role: "tabpanel",
            id: m(i),
            tabIndex: -1,
            children: n,
          });
        });
      function m(e) {
        return "".concat(e.replace(/\s+/g, "-").toLowerCase(), "-tab");
      }
      function T(e, t) {
        if (null == e) return;
        let n = {};
        return "Selected" === t
          ? ((n.backgroundColor = e),
            (n.color = d.default.unsafe_rawColors.WHITE_500.css),
            n)
          : ("Hover" === t && (n.backgroundColor = (0, c.hex2rgb)(e, 0.1)),
            (n.color = e),
            n);
      }
      ((r = i || (i = {})).DEFAULT = "Default"),
        (r.HOVER = "Hover"),
        (r.SELECTED = "Selected");
      class g extends a.Component {
        getStyle() {
          let { color: e, id: t, selectedItem: n, itemType: i } = this.props,
            { hover: r, active: s } = this.state;
          if (null != e) {
            if ("side" === i)
              return (null != t && n === t) || s
                ? T(e, "Selected")
                : r
                  ? T(e, "Hover")
                  : T(e);
            if ("top" === i)
              return n === t
                ? { borderColor: e, color: e }
                : r
                  ? {
                      borderColor: (0, c.hex2rgb)(e, 0.1),
                      color: (0, c.hex2rgb)(e, 0.6),
                    }
                  : {
                      borderColor: "transparent",
                      color: (0, c.hex2rgb)(e, 0.4),
                    };
            if ("top-pill" === i)
              return n === t
                ? { backgroundColor: (0, c.hex2rgb)(e, 0.2), color: e }
                : {
                    backgroundColor: e,
                    color: d.default.unsafe_rawColors.WHITE_500.css,
                  };
          }
        }
        render() {
          let {
              children: e,
              className: t,
              id: n,
              selectedItem: i,
              color: r,
              disabled: a,
              onContextMenu: o,
              clickableRef: u,
              look: c,
              disableItemStyles: d,
            } = this.props,
            E = this.props["aria-label"],
            p = i === n;
          return (0, s.jsx)(f.Clickable, {
            className: l(t, {
              [h.item]: !d,
              [h.brand]: "brand" === c,
              [h.selected]: null == r && p,
              [h.themed]: "grey" === c,
              [h.disabled]: null == r && a,
            }),
            style: this.getStyle(),
            role: "tab",
            "aria-selected": p,
            "aria-controls": p ? m("".concat(n)) : void 0,
            "aria-disabled": a,
            tabIndex: p ? 0 : -1,
            onMouseEnter: null != r ? this.handleMouseOver : void 0,
            onClick: this.handleClick,
            onMouseLeave: null != r ? this.handleMouseOut : void 0,
            onMouseUp: null != r ? this.handleMouseUp : void 0,
            onMouseDown: this.handleMouseDown,
            onContextMenu: o,
            "aria-label": E,
            ref: u,
            children: e,
          });
        }
        constructor(...e) {
          super(...e),
            (this.state = { hover: !1, active: !1 }),
            (this.handleClick = e => {
              let {
                disabled: t,
                onClick: n,
                id: i,
                onItemSelect: r,
              } = this.props;
              !t && (null != n ? n(e) : null != r && r(i));
            }),
            (this.handleMouseDown = () => {
              let { color: e } = this.props;
              null != e && this.setState({ active: !0 });
            }),
            (this.handleMouseUp = () => {
              this.setState({ active: !1 });
            }),
            (this.handleMouseOver = () => {
              this.setState({ hover: !0 });
            }),
            (this.handleMouseOut = () => {
              this.setState({ hover: !1, active: !1 });
            });
        }
      }
      g.defaultProps = { disabled: !1, look: "grey", disableItemStyles: !1 };
      class I extends a.Component {
        render() {
          let {
            className: e,
            children: t,
            type: n = "side",
            style: i,
            "aria-label": r,
            orientation: o = "horizontal",
          } = this.props;
          return (0, s.jsx)("div", {
            ref: this.tabBarRef,
            className: l(e, _[n]),
            style: i,
            role: "tablist",
            "aria-orientation": o,
            onKeyDown: this.handleKeyDown,
            "aria-label": r,
            children: a.Children.map(t, this.renderChildren),
          });
        }
        constructor(...e) {
          super(...e),
            (this.tabBarRef = a.createRef()),
            (this.focusManager = (0, u.createFocusManager)({
              getFocusableElements: () => {
                let e = this.tabBarRef.current;
                if (null != e) {
                  let t = e.querySelectorAll(
                    '[role="tab"][aria-disabled="false"]'
                  );
                  return Array.from(t);
                }
                return [];
              },
              getActiveElement: () => {
                var e;
                return null === (e = this.tabBarRef.current) || void 0 === e
                  ? void 0
                  : e.ownerDocument.activeElement;
              },
            })),
            (this.renderChildren = e => {
              let {
                selectedItem: t,
                onItemSelect: n,
                type: i = "side",
                look: r = "grey",
              } = this.props;
              return a.isValidElement(e)
                ? a.cloneElement(e, {
                    selectedItem: t,
                    onItemSelect: n,
                    itemType: i,
                    look: r,
                  })
                : null;
            }),
            (this.getNodeForKeydownEvent = async e => {
              let { orientation: t = "horizontal" } = this.props,
                n =
                  "vertical" === t
                    ? p.KeyboardKeys.ARROW_UP
                    : p.KeyboardKeys.ARROW_LEFT,
                i =
                  "vertical" === t
                    ? p.KeyboardKeys.ARROW_DOWN
                    : p.KeyboardKeys.ARROW_RIGHT;
              switch (e.which) {
                case n:
                  return this.focusManager.getPreviousFocusableElement();
                case i:
                  return this.focusManager.getNextFocusableElement();
                case p.KeyboardKeys.HOME:
                  return this.focusManager.getFirstFocusableElement();
                case p.KeyboardKeys.END:
                  return this.focusManager.getLastFocusableElement();
              }
              return null;
            }),
            (this.handleKeyDown = async e => {
              let t = await this.getNodeForKeydownEvent(e);
              null != t && (e.preventDefault(), t.focus());
            });
        }
      }
      (I.Header = function (e) {
        let {
          className: t,
          onClick: n,
          children: i,
          "aria-expanded": r,
          "aria-controls": a,
        } = e;
        return (0, s.jsx)(f.Clickable, {
          tabIndex: null == n ? -1 : 0,
          className: l(h.header, t),
          onClick: n,
          "aria-expanded": r,
          "aria-controls": a,
          focusProps: { offset: { top: -6 } },
          children: (0, s.jsx)(E.Text, {
            variant: "eyebrow",
            color: "none",
            className: h.headerText,
            children: i,
          }),
        });
      }),
        (I.Item = g),
        (I.Separator = function (e) {
          let { style: t } = e;
          return (0, s.jsx)("div", { className: h.separator, style: t });
        }),
        (I.Panel = S);
    },
    628400: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          TableCell: function () {
            return u;
          },
          TableColumn: function () {
            return c;
          },
          TableRow: function () {
            return d;
          },
          TableBody: function () {
            return f;
          },
          TableHeader: function () {
            return E;
          },
          Table: function () {
            return p;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("999013"),
        a = n("605451"),
        o = n("577776"),
        l = n("262417");
      function u(e) {
        return (0, i.jsx)(s.Cell, { ...e, className: l.cell });
      }
      function c(e) {
        let { children: t, ...n } = e;
        return (0, i.jsx)(s.Column, {
          ...n,
          className: l.column,
          children: (0, i.jsx)(o.Text, {
            variant: "eyebrow",
            className: l.columnText,
            children: t,
          }),
        });
      }
      function d(e) {
        return (0, i.jsx)(s.Row, { ...e, className: l.row });
      }
      function f(e) {
        return (0, i.jsx)(s.TableBody, { ...e, className: l.body });
      }
      function E(e) {
        return (0, i.jsx)(s.TableHeader, { ...e, className: l.header });
      }
      function p(e) {
        let { title: t, header: n, footer: o, ...u } = e,
          c = r.useId();
        return (0, i.jsxs)("div", {
          className: l.container,
          children: [
            (0, i.jsxs)("div", {
              className: l.toolbar,
              children: [
                (0, i.jsx)(a.Heading, {
                  className: l.title,
                  variant: "heading-md/semibold",
                  id: c,
                  children: t,
                }),
                (0, i.jsx)("div", { children: n }),
              ],
            }),
            (0, i.jsx)(s.Table, {
              ...u,
              "aria-labelledby": c,
              className: l.table,
            }),
            null != o &&
              (0, i.jsx)("div", { className: l.footer, children: o }),
          ],
        });
      }
    },
    577776: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Text: function () {
            return i.Text;
          },
        });
      var i = n("459334");
    },
    74307: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          TextArea: function () {
            return T;
          },
        }),
        n("424973");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("748820"),
        l = n("718776"),
        u = n("516826"),
        c = n("741662"),
        d = n("324584"),
        f = n("782340"),
        E = n("253469"),
        p = n("905518"),
        h = n("862839");
      let _ = (0, o.v4)(),
        S = (0, o.v4)(),
        m = (0, o.v4)();
      class T extends r.Component {
        getPaddingRight() {
          let { maxLength: e } = this.props;
          return null == e ? 10 : 7.23 * "".concat(e).length + 10;
        }
        getCharsLeftLength() {
          let { maxLength: e, value: t } = this.props;
          if (null == e) return null;
          let n = null != t ? t.length : 0;
          return e - n;
        }
        getIsOverflowing() {
          let e = this.getCharsLeftLength();
          return null != e && e < 0;
        }
        getIsUnderflowing() {
          let { minLength: e, value: t } = this.props;
          if (null == e) return !1;
          let n = null != t ? t.length : 0;
          return n < e;
        }
        renderCharacterCount() {
          if (this.props.showCharacterCount) {
            var e;
            let { value: t, maxLength: n } = this.props;
            return (0, i.jsxs)("div", {
              className: a(E.maxLength, { [E.errorOverflow]: this.hasError() }),
              "aria-hidden": "true",
              children: [
                null !== (e = null == t ? void 0 : t.length) && void 0 !== e
                  ? e
                  : 0,
                " ",
                null != n && "/ ".concat(n),
              ],
            });
          }
          return null;
        }
        renderMaxLength() {
          if (
            this.props.showCharacterCount ||
            !1 === this.props.showRemainingCharacterCount
          )
            return null;
          let e = this.getCharsLeftLength();
          return null == e
            ? null
            : (0, i.jsx)("div", {
                className: a(E.maxLength, { [E.errorOverflow]: e < 0 }),
                "aria-hidden": "true",
                children: e,
              });
        }
        hasError() {
          return (
            null != this.props.error ||
            null != this.context.error ||
            (!1 !== this.state.dirty &&
              (this.getIsOverflowing() || this.getIsUnderflowing() || !1))
          );
        }
        getErrorMessage() {
          let { error: e, maxLength: t, minLength: n } = this.props,
            i = this.getIsOverflowing()
              ? f.default.Messages.MAXIMUM_LENGTH_ERROR.format({ maxLength: t })
              : null,
            r = this.getIsUnderflowing()
              ? f.default.Messages.MINIMUM_LENGTH_ERROR.format({ minLength: n })
              : null;
          return (null != e && e.length < 1) || null === e
            ? null
            : void 0 !== e
              ? e
              : !1 === this.state.dirty
                ? null
                : null != i
                  ? i
                  : r;
        }
        renderErrorMessage() {
          let e = this.getErrorMessage();
          return null == e
            ? null
            : (0, i.jsx)("div", {
                id: _,
                className: E.errorMessage,
                children: e,
              });
        }
        render() {
          var e, t;
          let {
              disabled: n,
              value: r,
              placeholder: s,
              autoFocus: o,
              minLength: u,
              maxLength: _,
              allowOverflow: T,
              spellCheck: g,
              resizeable: I,
              className: C,
              id: v,
              rows: A,
              flex: R,
              autosize: N,
              required: O,
              onInvalid: D,
              inputRef: y,
            } = this.props,
            P = N ? d.TextAreaAutosize : "textarea",
            L = this.hasError(),
            b =
              null !== (t = this.props["aria-labelledby"]) && void 0 !== t
                ? t
                : null === (e = this.context) || void 0 === e
                  ? void 0
                  : e.titleId,
            M = this.getAriaDescribedBy();
          return (0, i.jsxs)("div", {
            className: a(p.inputWrapper, { [E.flex]: R }),
            children: [
              (0, i.jsxs)("div", {
                className: a(E.inputMaxLength, { [E.flex]: R }),
                children: [
                  (0, i.jsx)(l.FocusRing, {
                    children: (0, i.jsx)(P, {
                      type: "text",
                      className: a(
                        p.inputDefault,
                        E.textArea,
                        h.scrollbarDefault,
                        C,
                        { [p.error]: L, [p.disabled]: n, [E.resizeable]: I }
                      ),
                      "aria-labelledby": b,
                      "aria-describedby": M,
                      "aria-invalid": L,
                      style: { paddingRight: this.getPaddingRight() },
                      id: v,
                      disabled: n,
                      placeholder: s,
                      value: r,
                      autoFocus: o,
                      minLength: u,
                      maxLength: T ? void 0 : _,
                      spellCheck: g,
                      required: O,
                      onChange: this.onChange,
                      onBlur: this.onBlur,
                      onFocus: this.onFocus,
                      onKeyDown: this.onKeyDown,
                      onInvalid: D,
                      rows: A,
                      ref: y,
                    }),
                  }),
                  null != u &&
                    (0, i.jsx)(c.HiddenVisually, {
                      id: S,
                      children: f.default.Messages.MINIMUM_LENGTH.format({
                        minLength: u,
                      }),
                    }),
                  null != _ &&
                    (0, i.jsx)(c.HiddenVisually, {
                      id: m,
                      children: f.default.Messages.MAXIMUM_LENGTH.format({
                        maxLength: _,
                      }),
                    }),
                  this.renderCharacterCount(),
                  this.renderMaxLength(),
                ],
              }),
              this.renderErrorMessage(),
            ],
          });
        }
        constructor(e) {
          var t;
          super(e),
            (this.getAriaDescribedBy = () => {
              var e;
              let { maxLength: t, minLength: n, error: i } = this.props,
                r = [],
                s =
                  null === (e = this.context) || void 0 === e
                    ? void 0
                    : e.errorId;
              return (
                null != s && r.push(s),
                null != i
                  ? r.push(i)
                  : (null != t && r.push(m), null != n && r.push(S)),
                r.length > 0 ? r.join(" ") : void 0
              );
            }),
            (this.onChange = e => {
              let { onChange: t, name: n } = this.props;
              null == t || t(e.currentTarget.value, n),
                this.setState({ dirty: !0 });
            }),
            (this.onFocus = e => {
              let { onFocus: t, name: n } = this.props;
              null == t || t(e, n);
            }),
            (this.onBlur = e => {
              let { onBlur: t, name: n } = this.props;
              null == t || t(e, n);
            }),
            (this.onKeyDown = e => {
              let { onKeyDown: t } = this.props;
              null == t || t(e);
            }),
            (this.state = {
              dirty: null !== (t = e.defaultDirty) && void 0 !== t && t,
            });
        }
      }
      (T.contextType = u.FormContext),
        (T.defaultProps = {
          name: "",
          disabled: !1,
          placeholder: "",
          autoFocus: !1,
          resizeable: !1,
          flex: !1,
          autosize: !1,
          rows: 3,
          allowOverflow: !1,
        });
    },
    324584: function (e, t, n) {
      "use strict";
      let i;
      n.r(t),
        n.d(t, {
          TextAreaAutosize: function () {
            return f;
          },
        });
      var r = n("37983"),
        s = n("884691"),
        a = n("414456"),
        o = n.n(a),
        l = n("111749"),
        u = n("718776"),
        c = n("862839");
      let d = [
        "letter-spacing",
        "line-height",
        "padding-top",
        "padding-bottom",
        "font-family",
        "font-weight",
        "font-size",
        "text-transform",
        "width",
        "padding-left",
        "padding-right",
        "border-width",
        "box-sizing",
      ];
      class f extends s.PureComponent {
        componentDidMount() {
          Promise.resolve().then(() => this.calculateSize());
        }
        componentDidUpdate(e, t) {
          if (this.state.height !== t.height) {
            let { onResize: e } = this.props;
            null == e || e(this.state.height);
          }
          e.value !== this.props.value &&
            Promise.resolve().then(() => this.calculateSize());
        }
        calculateSize() {
          var e;
          let t = this._textArea;
          if (null == t) return;
          let { fontWidthEstimate: n, rows: r } = this.props,
            s = null !== (e = this.props.value) && void 0 !== e ? e : t.value;
          if (
            null != n &&
            -1 === s.indexOf("\n") &&
            s.length * n < 0.8 * t.offsetWidth
          ) {
            this.setState({ height: void 0 });
            return;
          }
          null == i &&
            null != document.body &&
            ((i = document.createElement("textarea")),
            document.body.appendChild(i));
          let {
            paddingSize: a,
            borderSize: o,
            boxSizing: l,
            sizingStyle: u,
          } = this.calculateNodeStyling(t);
          i.setAttribute(
            "style",
            u +
              ";\n  visibility:hidden;\n  overflow:hidden;\n  position:absolute;\n  z-index:-1000;\n  top:0;\n  right:0;\n"
          ),
            (i.value = s),
            null != r
              ? i.setAttribute("rows", "".concat(r))
              : i.removeAttribute("rows");
          let c = i.scrollHeight;
          "border-box" === l ? (c += o) : "content-box" === l && (c -= a),
            this.setState({ height: c });
        }
        calculateNodeStyling(e) {
          let t = window.getComputedStyle(e),
            n = (0, l.getFirstTruthyValue)(
              t.getPropertyValue("box-sizing"),
              t.getPropertyValue("-moz-box-sizing"),
              t.getPropertyValue("-webkit-box-sizing")
            ),
            i =
              parseFloat(t.getPropertyValue("padding-bottom")) +
              parseFloat(t.getPropertyValue("padding-top")),
            r =
              parseFloat(t.getPropertyValue("border-bottom-width")) +
              parseFloat(t.getPropertyValue("border-top-width")),
            s = d
              .map(e => "".concat(e, ":").concat(t.getPropertyValue(e)))
              .join(";");
          return {
            sizingStyle: s,
            paddingSize: i,
            borderSize: r,
            boxSizing: n,
          };
        }
        clear() {
          null != this._textArea && (this._textArea.value = ""),
            this.calculateSize();
        }
        blur() {
          let { _textArea: e } = this;
          null != e && e.blur();
        }
        focus() {
          let { _textArea: e } = this;
          null != e && e.focus();
        }
        setSelection(e, t) {
          null != this._textArea &&
            ((this._textArea.selectionStart = e),
            (this._textArea.selectionEnd = t));
        }
        get selectionStart() {
          var e, t;
          return null !==
            (t =
              null === (e = this._textArea) || void 0 === e
                ? void 0
                : e.selectionStart) && void 0 !== t
            ? t
            : 0;
        }
        get selectionEnd() {
          var e, t;
          return null !==
            (t =
              null === (e = this._textArea) || void 0 === e
                ? void 0
                : e.selectionEnd) && void 0 !== t
            ? t
            : 0;
        }
        get value() {
          var e, t;
          return null !==
            (t =
              null === (e = this._textArea) || void 0 === e
                ? void 0
                : e.value) && void 0 !== t
            ? t
            : "";
        }
        render() {
          let { style: e, className: t, ...n } = this.props;
          delete n.fontWidthEstimate, delete n.onResize;
          let i = { ...this.state, ...e };
          return (0, r.jsx)(u.FocusRing, {
            children: (0, r.jsx)("textarea", {
              ...n,
              className: o(t, c.scrollbarGhostHairline),
              ref: this.handleSetRef,
              style: i,
              onChange: this.handleChange,
            }),
          });
        }
        constructor(e) {
          super(e),
            (this.handleSetRef = e => {
              this._textArea = e;
            }),
            (this.handleChange = e => {
              let { onChange: t } = this.props;
              null == t || t(e), this.calculateSize();
            }),
            (this.state = { height: void 0 });
        }
      }
      f.defaultProps = { autoFocus: !1, disabled: !1, autoCorrect: "off" };
    },
    240353: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          InputError: function () {
            return h;
          },
          TextInput: function () {
            return _;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("907002"),
        l = n("718776"),
        u = n("516826"),
        c = n("577776"),
        d = n("634634"),
        f = n("782340"),
        E = n("905518");
      let p = { DEFAULT: E.inputDefault, MINI: E.inputMini };
      function h(e) {
        let { error: t } = e,
          n = (0, o.useTransition)(t, {
            config: { tension: 250, clamp: !0 },
            from: {
              marginTop: 0,
              height: 0,
              opacity: 0,
              transform: "translate3d(0, -100%, 0)",
            },
            enter: {
              marginTop: 4,
              height: "auto",
              opacity: 1,
              transform: "translate3d(0, -0px, 0)",
            },
            leave: {
              marginTop: 0,
              height: 0,
              opacity: 0,
              transform: "translate3d(0, -100%, 0)",
            },
          }),
          r = (0, d.default)(t);
        return (0, i.jsx)(i.Fragment, {
          children: n((e, n, s) => {
            let { key: a } = s,
              { transform: l, ...u } = e;
            return null != n && "" !== n
              ? (0, i.jsx)(
                  o.animated.div,
                  {
                    style: { ...u, overflow: "hidden" },
                    children: (0, i.jsx)(o.animated.div, {
                      style: { transform: l },
                      children: (0, i.jsx)(c.Text, {
                        color: "text-danger",
                        variant: "text-xs/normal",
                        children: null != t && "" !== t ? t : r,
                      }),
                    }),
                  },
                  a
                )
              : null;
          }),
        });
      }
      class _ extends r.Component {
        render() {
          var e, t;
          let {
              className: n,
              inputClassName: r,
              inputPrefix: s,
              disabled: o,
              size: u,
              editable: c,
              inputRef: d,
              prefixElement: f,
              focusProps: p,
              ..._
            } = this.props,
            S =
              null !== (t = _["aria-labelledby"]) && void 0 !== t
                ? t
                : null === (e = this.context) || void 0 === e
                  ? void 0
                  : e.titleId;
          return (0, i.jsxs)("div", {
            className: a(E.inputWrapper, n),
            children: [
              null != f && f,
              null != s
                ? (0, i.jsx)("span", { className: E.inputPrefix, children: s })
                : null,
              (0, i.jsx)(l.FocusRing, {
                ...p,
                children: (0, i.jsx)("input", {
                  className: a(u, r, {
                    [E.error]: this.hasError(),
                    [E.disabled]: o,
                    [E.editable]: c,
                  }),
                  disabled: o,
                  readOnly: !1 === c || void 0,
                  ..._,
                  "aria-labelledby": S,
                  onChange: this.onChange,
                  onBlur: this.onBlur,
                  onFocus: this.onFocus,
                  ref: d,
                }),
              }),
              (0, i.jsx)(h, { error: this.getError() }),
            ],
          });
        }
        constructor(e) {
          var t;
          super(e),
            (this.hasError = () =>
              (null != this.props.error && !!(this.props.error.length > 0)) ||
              (!1 !== this.state.dirty &&
                (this.getIsUnderFlowing() || this.getIsOverFlowing()))),
            (this.getError = () => {
              let { error: e, minLength: t, maxLength: n } = this.props,
                i = this.getIsUnderFlowing()
                  ? f.default.Messages.MINIMUM_LENGTH_ERROR.format({
                      minLength: t,
                    })
                  : null,
                r = this.getIsOverFlowing()
                  ? f.default.Messages.MAXIMUM_LENGTH_ERROR.format({
                      maxLength: n,
                    })
                  : null;
              return (null != e && e.length < 1) || null === e
                ? null
                : null != e
                  ? e
                  : !1 === this.state.dirty
                    ? null
                    : null != i
                      ? i
                      : r;
            }),
            (this.getIsUnderFlowing = () => {
              var e;
              let { value: t, minLength: n } = this.props;
              return (
                null != n &&
                (null !== (e = null == t ? void 0 : t.length) && void 0 !== e
                  ? e
                  : 0) < n
              );
            }),
            (this.getIsOverFlowing = () => {
              var e;
              let { value: t, maxLength: n } = this.props;
              return (
                null != n &&
                (null !== (e = null == t ? void 0 : t.length) && void 0 !== e
                  ? e
                  : 0) > n
              );
            }),
            (this.onChange = e => {
              var t, n;
              null === (t = (n = this.props).onChange) ||
                void 0 === t ||
                t.call(n, e.currentTarget.value, this.props.name),
                this.setState({ dirty: !0 });
            }),
            (this.onFocus = e => {
              var t, n;
              null === (t = (n = this.props).onFocus) ||
                void 0 === t ||
                t.call(n, e, this.props.name);
            }),
            (this.onBlur = e => {
              var t, n;
              null === (t = (n = this.props).onBlur) ||
                void 0 === t ||
                t.call(n, e, this.props.name);
            }),
            (this.state = {
              dirty: null !== (t = e.defaultDirty) && void 0 !== t && t,
            });
        }
      }
      (_.Sizes = p),
        (_.contextType = u.FormContext),
        (_.defaultProps = {
          name: "",
          size: p.DEFAULT,
          disabled: !1,
          type: "text",
          placeholder: "",
          autoFocus: !1,
          maxLength: 999,
        });
    },
    161814: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          TimeInput: function () {
            return l;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("774811"),
        a = n("859973"),
        o = n("407774");
      function l(e) {
        let { value: t, onChange: n, hideValue: l, disabled: u = !1 } = e,
          c = r.useRef(null),
          d = r.useMemo(() => new a.TimeOptions(), []),
          [f, E] = r.useState("");
        function p(e) {
          null != t && n((0, a.timeAtSpecificDay)(t, d.selectValue(e)));
        }
        return (0, i.jsx)(s.SearchableSelect, {
          ref: c,
          className: o.select,
          options: d.getOptions(f),
          value: l ? void 0 : d.lookupByValue(t),
          onChange: p,
          isDisabled: u,
          onSearchChange: E,
          onKeyDown: function (e) {
            if ("Enter" === e.key) {
              let e = (0, a.convertToTimeOfADay)(t, f);
              if (null != e) {
                var n;
                p(e), null === (n = c.current) || void 0 === n || n.close();
              }
            }
          },
        });
      }
    },
    35672: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          createToast: function () {
            return E;
          },
          Toast: function () {
            return p;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("748820"),
        a = n("577776"),
        o = n("77078"),
        l = n("522049"),
        u = n("984678"),
        c = n("830031"),
        d = n("159350"),
        f = n("677841");
      function E(e, t) {
        let n =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : d.TOAST_DEFAULT_OPTIONS,
          {
            position: i = d.TOAST_DEFAULT_OPTIONS.position,
            component: r = d.TOAST_DEFAULT_OPTIONS.component,
            duration: a = d.TOAST_DEFAULT_OPTIONS.duration,
          } = n;
        return {
          message: e,
          id: (0, s.v4)(),
          type: t,
          options: { position: i, component: r, duration: a },
        };
      }
      let p = r.memo(function (e) {
        let {
          message: t,
          type: n,
          id: r,
          options: {
            component: s = d.TOAST_DEFAULT_OPTIONS.component,
          } = d.TOAST_DEFAULT_OPTIONS,
        } = e;
        return null != s
          ? (0, i.jsx)(i.Fragment, { children: s })
          : (0, i.jsxs)("div", {
              id: r,
              className: f.toast,
              children: [
                (function (e) {
                  switch (e) {
                    case d.ToastType.SUCCESS:
                      return (0, i.jsx)(c.default, {
                        className: f.icon,
                        color: o.tokens.colors.STATUS_POSITIVE.css,
                      });
                    case d.ToastType.FAILURE:
                      return (0, i.jsx)(u.default, {
                        className: f.icon,
                        color: o.tokens.colors.STATUS_DANGER.css,
                      });
                    case d.ToastType.CLIP:
                      return (0, i.jsx)(l.default, {
                        className: f.clipIcon,
                        color: o.tokens.colors.HEADER_PRIMARY.css,
                      });
                    default:
                      return null;
                  }
                })(n),
                (0, i.jsx)(a.Text, {
                  className: f.content,
                  color: "header-primary",
                  variant: "text-md/normal",
                  children: t,
                }),
              ],
            });
      });
    },
    325236: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useToastStore: function () {
            return r;
          },
          showToast: function () {
            return s;
          },
          popToast: function () {
            return a;
          },
        }),
        n("222007");
      var i = n("308503");
      let r = (0, i.default)(() => ({ currentToast: null, queuedToasts: [] }));
      function s(e) {
        r.setState(t =>
          null != t.currentToast
            ? { ...t, queuedToasts: [...t.queuedToasts, e] }
            : { currentToast: e, queuedToasts: [] }
        );
      }
      function a() {
        r.setState(e => {
          let t = e.queuedToasts;
          return t.length > 0
            ? { currentToast: t[0], queuedToasts: t.slice(1) }
            : { currentToast: null, queuedToasts: [] };
        });
      }
    },
    159350: function (e, t, n) {
      "use strict";
      var i, r, s, a;
      n.r(t),
        n.d(t, {
          ToastType: function () {
            return i;
          },
          ToastPosition: function () {
            return r;
          },
          TOAST_DEFAULT_OPTIONS: function () {
            return o;
          },
        });
      ((s = i || (i = {}))[(s.MESSAGE = 0)] = "MESSAGE"),
        (s[(s.SUCCESS = 1)] = "SUCCESS"),
        (s[(s.FAILURE = 2)] = "FAILURE"),
        (s[(s.CUSTOM = 3)] = "CUSTOM"),
        (s[(s.CLIP = 4)] = "CLIP"),
        ((a = r || (r = {}))[(a.TOP = 0)] = "TOP"),
        (a[(a.BOTTOM = 1)] = "BOTTOM");
      let o = { position: 0, component: null, duration: 3e3 };
    },
    371557: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ToastContainer: function () {
            return p;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("907002"),
        a = n("446674"),
        o = n("206230"),
        l = n("35672"),
        u = n("325236"),
        c = n("159350"),
        d = n("640880");
      let f = { duration: 300, friction: 24, tension: 280 },
        E = {
          [c.ToastPosition.TOP]: {
            styles: d.containerTop,
            transition: {
              trail: 400,
              from: {
                transform: "translate3d(0, -100%, 0)",
                opacity: 0,
                config: f,
              },
              enter: {
                transform: "translate3d(0, -0px, 0)",
                opacity: 1,
                config: f,
              },
              leave: {
                transform: "translate3d(0, -100%, 0)",
                opacity: 0,
                config: { ...f, friction: 40, clamp: !0 },
              },
            },
          },
          [c.ToastPosition.BOTTOM]: {
            styles: d.containerBottom,
            transition: {
              trail: 400,
              from: {
                transform: "translate3d(0, 100%, 0)",
                opacity: 0,
                config: f,
              },
              enter: {
                transform: "translate3d(0, 0px, 0)",
                opacity: 1,
                config: f,
              },
              leave: {
                transform: "translate3d(0, 100%, 0)",
                opacity: 0,
                config: { ...f, friction: 40, clamp: !0 },
              },
            },
          },
        };
      function p() {
        var e, t, n, d;
        let f = (0, u.useToastStore)(e => e.currentToast),
          p = r.useRef(
            null !==
              (n =
                null == f
                  ? void 0
                  : null === (e = f.options) || void 0 === e
                    ? void 0
                    : e.position) && void 0 !== n
              ? n
              : c.TOAST_DEFAULT_OPTIONS.position
          ),
          h = r.useRef(
            null !==
              (d =
                null == f
                  ? void 0
                  : null === (t = f.options) || void 0 === t
                    ? void 0
                    : t.duration) && void 0 !== d
              ? d
              : c.TOAST_DEFAULT_OPTIONS.duration
          ),
          _ = (0, a.useStateFromStores)(
            [o.default],
            () => o.default.useReducedMotion
          );
        r.useEffect(() => {
          if (null != f) {
            var e, t, n, i;
            (p.current =
              null !==
                (n =
                  null === (e = f.options) || void 0 === e
                    ? void 0
                    : e.position) && void 0 !== n
                ? n
                : c.TOAST_DEFAULT_OPTIONS.position),
              (h.current =
                null !==
                  (i =
                    null === (t = f.options) || void 0 === t
                      ? void 0
                      : t.duration) && void 0 !== i
                  ? i
                  : c.TOAST_DEFAULT_OPTIONS.duration);
          }
        }, [f]);
        let S = r.useMemo(() => {
            var e, t;
            return E[
              null !==
                (t =
                  null == f
                    ? void 0
                    : null === (e = f.options) || void 0 === e
                      ? void 0
                      : e.position) && void 0 !== t
                ? t
                : p.current
            ];
          }, [f]),
          m = (0, s.useTransition)(f, {
            keys: e => {
              var t;
              return null !== (t = null == e ? void 0 : e.id) && void 0 !== t
                ? t
                : "";
            },
            immediate: _,
            ...S.transition,
          });
        return (
          r.useEffect(() => {
            null != f &&
              setTimeout(() => {
                (0, u.popToast)();
              }, h.current);
          }, [f]),
          (0, i.jsx)("div", {
            className: S.styles,
            children: m((e, t) =>
              null === t
                ? null
                : (0, i.jsx)(
                    s.animated.div,
                    { style: e, children: (0, i.jsx)(l.Toast, { ...t }) },
                    t.id
                  )
            ),
          })
        );
      }
    },
    414055: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          TooltipColors: function () {
            return i;
          },
          TooltipLayer: function () {
            return C;
          },
          Tooltip: function () {
            return O;
          },
          TooltipContainer: function () {
            return D;
          },
        }),
        n("70102"),
        n("222007");
      var i,
        r,
        s = n("37983"),
        a = n("884691"),
        o = n("414456"),
        l = n.n(o),
        u = n("817736"),
        c = n.n(u),
        d = n("907002"),
        f = n("394846"),
        E = n("118810"),
        p = n("862337"),
        h = n("413197"),
        _ = n("120590"),
        S = n("206230"),
        m = n("983782"),
        T = n("29017");
      ((r = i || (i = {})).PRIMARY = "primary"),
        (r.BLACK = "black"),
        (r.GREY = "grey"),
        (r.BRAND = "brand"),
        (r.GREEN = "green"),
        (r.YELLOW = "yellow"),
        (r.RED = "red"),
        (r.CUSTOM = "custom"),
        (r.PREMIUM = "premium");
      let g = Object.freeze({}),
        I = Object.freeze({
          top: T.tooltipTop,
          bottom: T.tooltipBottom,
          left: T.tooltipLeft,
          right: T.tooltipRight,
          center: T.tooltipCenter,
          window_center: T.tooltipCenter,
          primary: T.tooltipPrimary,
          black: T.tooltipBlack,
          grey: T.tooltipGrey,
          brand: T.tooltipBrand,
          green: T.tooltipGreen,
          yellow: T.tooltipYellow,
          red: T.tooltipRed,
          custom: null,
          premium: T.tooltipPremium,
        }),
        C = e => {
          let {
              targetElementRef: t,
              align: n = "center",
              position: i,
              color: r,
              children: a,
              onNonAccessibleClick: o,
              tooltipClassName: u,
              tooltipContentClassName: c,
              spacing: f = 8,
              animationStyle: E,
              disableTooltipPointerEvents: p = !1,
              allowOverflow: h = !1,
            } = e,
            _ = "".concat("string" == typeof a ? a : "", ":").concat(i);
          return (0, s.jsx)(m.AppReferencePositionLayer, {
            disablePointerEvents: p,
            reference: t,
            position: i,
            autoInvert: !0,
            align: n,
            positionKey: _,
            spacing: f,
            nudgeAlignIntoViewport: !0,
            children: e => {
              let { position: t, nudge: f } = e;
              return (0, s.jsxs)(d.animated.div, {
                onClick: o,
                className: l(
                  T.tooltip,
                  I[null != t ? t : i],
                  I[r],
                  { [T.tooltipDisablePointerEvents]: p },
                  u
                ),
                style: E,
                children: [
                  (0, s.jsx)("div", {
                    className: T.tooltipPointer,
                    style: (function (e, t, n) {
                      let i = "left" === e || "right" === e,
                        r = "50%",
                        s = n;
                      return (
                        t === (i ? "top" : "left")
                          ? ((r = "0%"), (s += 16))
                          : t === (i ? "bottom" : "right") &&
                            ((r = "100%"), (s -= 20)),
                        {
                          [i ? "top" : "left"]: "calc("
                            .concat(r, " + ")
                            .concat(s, "px)"),
                        }
                      );
                    })(null != t ? t : i, n, f),
                  }),
                  (0, s.jsx)("div", {
                    className: l(
                      T.tooltipContent,
                      { [T.tooltipContentAllowOverflow]: h },
                      c
                    ),
                    children: a,
                  }),
                ],
              });
            },
          });
        },
        v = { scale: 0.95, opacity: 0 },
        A = { scale: 1, opacity: 0 },
        R = { scale: 1, opacity: 1 },
        N = e => {
          let {
              isVisible: t,
              onAnimationRest: n,
              targetElementRef: i,
              ...r
            } = e,
            { reducedMotion: o } = a.useContext(
              h.AccessibilityPreferencesContext
            ),
            l = (0, d.useTransition)(t, {
              keys: e => (e ? "tooltip" : "empty"),
              config: _.TOOLTIP_SPRING_CONFIG,
              from: o.enabled ? A : v,
              enter: R,
              leave: o.enabled ? A : v,
              onRest: n,
            });
          return l((e, t) =>
            t
              ? (0, s.jsx)(C, { animationStyle: e, targetElementRef: i, ...r })
              : null
          );
        };
      class O extends a.Component {
        static getDerivedStateFromProps(e, t) {
          return t.shouldShowTooltip && null == e.text
            ? { shouldShowTooltip: !1 }
            : null;
        }
        componentDidMount() {
          this.shouldShowTooltip(this.props, this.state) &&
            this.setDomElement();
        }
        componentDidUpdate(e, t) {
          let n = this.shouldShowTooltip(this.props, this.state);
          n !== this.shouldShowTooltip(e, t) &&
            (n ? this.setDomElement() : (this.hasDomElement = !1));
        }
        setDomElement() {
          let e = c.findDOMNode(this);
          if (!(0, E.isElement)(e)) throw Error("Tooltip cannot find DOM node");
          (this.domElementRef.current = e),
            (this.hasDomElement = !0),
            this.forceUpdate();
        }
        componentWillUnmount() {
          this.showTimeout.stop(), (this.domElementRef.current = null);
        }
        render() {
          let e;
          let { children: t, text: n, "aria-label": i } = this.props;
          if (null == n) return t(g);
          "string" == typeof i
            ? (e = i)
            : "string" == typeof n && !1 !== i && (e = n);
          let r = {
            onClick: this.handleClick,
            onMouseEnter: this.handleMouseEnter,
            onMouseLeave: this.handleMouseLeave,
            onContextMenu: this.handleContextMenu,
            onFocus: this.handleFocus,
            onBlur: this.handleBlur,
          };
          return (
            null != e && (r["aria-label"] = e),
            (0, s.jsxs)(a.Fragment, { children: [t(r), this.renderTooltip()] })
          );
        }
        shouldShowTooltip(e, t) {
          return e.shouldShow && (t.shouldShowTooltip || e.forceOpen);
        }
        renderTooltip() {
          let {
              text: e,
              align: t,
              position: n,
              color: i,
              spacing: r,
              tooltipClassName: a,
              tooltipContentClassName: o,
              disableTooltipPointerEvents: l,
              onAnimationRest: u,
              allowOverflow: c,
              clickableOnMobile: d,
              hideOnClick: E,
            } = this.props,
            p = (f.isMobile || f.isTablet) && !0 === d && E,
            h =
              this.shouldShowTooltip(this.props, this.state) &&
              this.hasDomElement,
            _ = null;
          return (
            (_ = e instanceof Function ? (h ? e() : null) : e),
            (0, s.jsx)(N, {
              disableTooltipPointerEvents: (!1 !== l && !p) || !0 === l,
              targetElementRef: this.domElementRef,
              tooltipClassName: a,
              tooltipContentClassName: o,
              align: t,
              position: n,
              color: i,
              spacing: r,
              isVisible: h,
              onAnimationRest: u,
              onNonAccessibleClick: p ? this.handleClick : void 0,
              allowOverflow: c,
              children: _,
            })
          );
        }
        show() {
          let { delay: e, overflowOnly: t } = this.props;
          if (t) {
            let e = c.findDOMNode(this);
            if (
              null == e ||
              ((0, E.isElement)(e, HTMLElement) &&
                e.offsetWidth >= e.scrollWidth)
            )
              return;
          }
          null != e
            ? this.showTimeout.start(e, () => this.toggleShow(!0), !1)
            : this.toggleShow(!0);
        }
        hide() {
          this.showTimeout.stop(), this.toggleShow(!1);
        }
        toggleShow(e) {
          if (this.state.shouldShowTooltip !== e) {
            if (e) {
              var t, n;
              null === (t = (n = this.props).onTooltipShow) ||
                void 0 === t ||
                t.call(n);
            }
            c.flushSync(() => {
              this.setState({ shouldShowTooltip: e });
            });
          }
        }
        constructor(...e) {
          super(...e),
            (this.showTimeout = new p.Timeout()),
            (this.domElementRef = a.createRef()),
            (this.hasDomElement = !1),
            (this.state = { shouldShowTooltip: !1 }),
            (this.handleMouseEnter = () => {
              !(
                (f.isMobile || f.isTablet) &&
                !0 === this.props.clickableOnMobile
              ) && this.show();
            }),
            (this.handleMouseLeave = () => {
              !(
                (f.isMobile || f.isTablet) &&
                !0 === this.props.clickableOnMobile
              ) && this.hide();
            }),
            (this.handleFocus = () => {
              S.default.keyboardModeEnabled && this.show();
            }),
            (this.handleBlur = () => {
              this.hide();
            }),
            (this.handleClick = () => {
              let e = this.hasDomElement;
              e && this.props.hideOnClick
                ? this.hide()
                : !e &&
                  (f.isMobile || f.isTablet) &&
                  !0 === this.props.clickableOnMobile &&
                  this.show();
            }),
            (this.handleContextMenu = () => {
              this.hide();
            });
        }
      }
      (O.Colors = i),
        (O.defaultProps = {
          hideOnClick: !0,
          position: "top",
          color: "primary",
          forceOpen: !1,
          spacing: 8,
          shouldShow: !0,
          allowOverflow: !1,
          overflowOnly: !1,
        });
      let D = e => {
        let { children: t, className: n, element: i = "div", ...r } = e;
        return (0, s.jsx)(O, {
          ...r,
          children: e =>
            a.createElement(i, null != n ? { ...e, className: n } : e, t),
        });
      };
    },
    685639: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          TransitionStates: function () {
            return i;
          },
          TransitionGroup: function () {
            return u;
          },
        }),
        n("222007"),
        n("424973");
      var i,
        r,
        s = n("37983"),
        a = n("884691");
      ((r = i || (i = {}))[(r.MOUNTED = 0)] = "MOUNTED"),
        (r[(r.ENTERED = 1)] = "ENTERED"),
        (r[(r.YEETED = 2)] = "YEETED");
      let o = {};
      function l(e) {
        return e;
      }
      function u(e) {
        let {
            items: t,
            renderItem: n,
            getItemKey: i,
            wrapChildren: r = l,
            lazyCleanUpDelay: u,
          } = e,
          c = a.useRef(-1);
        a.useLayoutEffect(() => () => clearTimeout(c.current));
        let [, d] = a.useState(o),
          f = a.useRef(null),
          E = a.useMemo(() => {
            var e;
            let r = new Set(
                null === (e = f.current) || void 0 === e ? void 0 : e.keys()
              ),
              s = new Map(f.current);
            for (let e of t) {
              let t = i(e),
                a = s.get(t);
              if (null == a) {
                let i = null != f.current ? 1 : 0,
                  r = () => {
                    var e, n;
                    let i =
                      null === (e = f.current) || void 0 === e
                        ? void 0
                        : e.get(t);
                    null == i ||
                      (2 === i.state
                        ? (null === (n = f.current) ||
                            void 0 === n ||
                            n.delete(t),
                          null != u
                            ? (clearTimeout(c.current),
                              (c.current = setTimeout(() => d({}), u)))
                            : d({}))
                        : __DEV__ &&
                          console.warn(
                            "SimpleTransitionGroup.cleanUp: Attempted to remove an item that isn't yeetable: ".concat(
                              t
                            )
                          ));
                  },
                  s = n(t, e, i, r);
                a = {
                  item: e,
                  children: s,
                  state: i,
                  cleanUp: r,
                  renderItem: n,
                };
              } else if (a.item !== e || a.renderItem !== n || 2 === a.state) {
                let { cleanUp: i } = a,
                  r = 2 === a.state ? 1 : a.state,
                  s = n(t, e, r, a.cleanUp);
                a = {
                  item: e,
                  children: s,
                  state: r,
                  cleanUp: i,
                  renderItem: n,
                };
              }
              s.set(t, a), r.delete(t);
            }
            for (let e of r) {
              let t = s.get(e);
              if (null != t) {
                if (2 !== t.state || t.renderItem !== n) {
                  let { item: i, cleanUp: r } = t,
                    a = n(e, t.item, 2, t.cleanUp);
                  null !=
                  (t = {
                    item: i,
                    children: a,
                    state: 2,
                    cleanUp: r,
                    renderItem: n,
                  }).children
                    ? s.set(e, t)
                    : s.delete(e);
                } else s.set(e, t);
              }
            }
            return s;
          }, [t, i, n, u]);
        a.useInsertionEffect(
          () => (
            (f.current = E),
            () => {
              var e;
              return null === (e = f.current) || void 0 === e
                ? void 0
                : e.clear();
            }
          ),
          [E]
        );
        let p = [];
        for (let [, e] of E) p.push(e.children);
        return (0, s.jsx)(s.Fragment, { children: p.length > 0 ? r(p) : null });
      }
    },
    143435: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          designConfig: function () {
            return i;
          },
          setDesignConfig: function () {
            return r;
          },
        });
      let i = {
        getDefaultLinkInterceptor: () => void 0,
        useTrackNavigatorScreenImpression: () => void 0,
      };
      function r(e) {
        Object.assign(i, e);
      }
    },
    120590: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          TOOLTIP_SPRING_CONFIG: function () {
            return i;
          },
        });
      let i = { tension: 2400, friction: 52 };
    },
    708253: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useToken: function () {
            return a;
          },
        });
      var i = n("65597"),
        r = n("841098"),
        s = n("206230");
      function a(e, t) {
        let n = (0, r.default)(),
          a = (0, i.default)([s.default], () => s.default.saturation);
        return e.resolve({ theme: null != t ? t : n, saturation: a });
      }
    },
    77078: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          AccessibilityAnnouncer: function () {
            return i.AccessibilityAnnouncer;
          },
          AccessibilityPreferencesContext: function () {
            return r.AccessibilityPreferencesContext;
          },
          LOW_SATURATION_THRESHOLD: function () {
            return s.LOW_SATURATION_THRESHOLD;
          },
          Anchor: function () {
            return a.Anchor;
          },
          AnimatedAvatar: function () {
            return o.AnimatedAvatar;
          },
          Avatar: function () {
            return o.Avatar;
          },
          AvatarSizes: function () {
            return l.AvatarSizes;
          },
          AvatarSizeSpecs: function () {
            return l.AvatarSizeSpecs;
          },
          getAvatarSpecs: function () {
            return l.getAvatarSpecs;
          },
          getAvatarSize: function () {
            return l.getAvatarSize;
          },
          BlobMask: function () {
            return u.BlobMask;
          },
          BlockInteractions: function () {
            return c.BlockInteractions;
          },
          BlockInteractionsContext: function () {
            return c.BlockInteractionsContext;
          },
          Button: function () {
            return d.Button;
          },
          ButtonLink: function () {
            return d.ButtonLink;
          },
          ButtonColors: function () {
            return d.ButtonColors;
          },
          ButtonLooks: function () {
            return d.ButtonLooks;
          },
          ButtonBorderColors: function () {
            return d.ButtonBorderColors;
          },
          ButtonHovers: function () {
            return d.ButtonHovers;
          },
          ButtonSizes: function () {
            return d.ButtonSizes;
          },
          getButtonStyle: function () {
            return d.getButtonStyle;
          },
          Card: function () {
            return f.Card;
          },
          CardTypes: function () {
            return f.CardTypes;
          },
          Checkbox: function () {
            return E.Checkbox;
          },
          Collapsible: function () {
            return p.Collapsible;
          },
          Clickable: function () {
            return h.Clickable;
          },
          ClickableContainer: function () {
            return _.ClickableContainer;
          },
          Combobox: function () {
            return S.Combobox;
          },
          ComboboxItem: function () {
            return S.ComboboxItem;
          },
          useMultiSelect: function () {
            return S.useMultiSelect;
          },
          useSingleSelect: function () {
            return S.useSingleSelect;
          },
          ComboboxPopout: function () {
            return m.ComboboxPopout;
          },
          DateInput: function () {
            return T.DateInput;
          },
          Dialog: function () {
            return g.Dialog;
          },
          AnimatedDots: function () {
            return I.AnimatedDots;
          },
          Dots: function () {
            return I.Dots;
          },
          DnDKeyboardHelpBar: function () {
            return C.DnDKeyboardHelpBar;
          },
          DnDProvider: function () {
            return v.DnDProvider;
          },
          isInDndMode: function () {
            return A.isInDndMode;
          },
          useDndStore: function () {
            return A.useDndStore;
          },
          useDndMode: function () {
            return A.useDndMode;
          },
          toggleDndMode: function () {
            return A.toggleDndMode;
          },
          FocusBlock: function () {
            return R.FocusBlock;
          },
          useFocusBlock: function () {
            return R.useFocusBlock;
          },
          useFocusJumpSection: function () {
            return N.useFocusJumpSection;
          },
          useFocusJumpSectionManager: function () {
            return N.useFocusJumpSectionManager;
          },
          FocusJumpSection: function () {
            return N.FocusJumpSection;
          },
          FocusLock: function () {
            return O.FocusLock;
          },
          useFocusLock: function () {
            return O.useFocusLock;
          },
          FocusRing: function () {
            return D.FocusRing;
          },
          FocusRingScope: function () {
            return D.FocusRingScope;
          },
          FocusRingManager: function () {
            return y.FocusRingManager;
          },
          FormContext: function () {
            return P.FormContext;
          },
          useFormContext: function () {
            return P.useFormContext;
          },
          FormContextProvider: function () {
            return P.FormContextProvider;
          },
          FormDivider: function () {
            return L.FormDivider;
          },
          FormErrorBlock: function () {
            return b.FormErrorBlock;
          },
          FormErrorBlockColors: function () {
            return b.FormErrorBlockColors;
          },
          FormItem: function () {
            return M.FormItem;
          },
          FormLabel: function () {
            return U.FormLabel;
          },
          FormNoticeTypes: function () {
            return G.FormNoticeTypes;
          },
          FormNoticeImagePositions: function () {
            return G.FormNoticeImagePositions;
          },
          FormNotice: function () {
            return G.FormNotice;
          },
          FormSection: function () {
            return w.FormSection;
          },
          FormSwitch: function () {
            return k.FormSwitch;
          },
          FormTextTypes: function () {
            return x.FormTextTypes;
          },
          FormText: function () {
            return x.FormText;
          },
          FormTitleTags: function () {
            return F.FormTitleTags;
          },
          FormTitle: function () {
            return F.FormTitle;
          },
          Interactive: function () {
            return V.Interactive;
          },
          Heading: function () {
            return B.Heading;
          },
          HeadingLevel: function () {
            return H.HeadingLevel;
          },
          H: function () {
            return H.H;
          },
          usePrivateHeadingLevel: function () {
            return H.usePrivateHeadingLevel;
          },
          HiddenVisually: function () {
            return j.HiddenVisually;
          },
          KeyCombo: function () {
            return Y.KeyCombo;
          },
          PRETTY_KEYS: function () {
            return Y.PRETTY_KEYS;
          },
          Layer: function () {
            return W.Layer;
          },
          LayerContainer: function () {
            return W.LayerContainer;
          },
          LayerProvider: function () {
            return W.LayerProvider;
          },
          LayerClassName: function () {
            return W.LayerClassName;
          },
          createLayer: function () {
            return W.createLayer;
          },
          getParentLayerContainer: function () {
            return W.getParentLayerContainer;
          },
          ReferencePositionLayer: function () {
            return K.ReferencePositionLayer;
          },
          referencePortalAwareContains: function () {
            return K.referencePortalAwareContains;
          },
          createListScroller: function () {
            return z.createListScroller;
          },
          ListAuto: function () {
            return q.ListAuto;
          },
          ListNone: function () {
            return q.ListNone;
          },
          ListThin: function () {
            return q.ListThin;
          },
          List: function () {
            return q.ListThin;
          },
          createMasonryListScroller: function () {
            return X.createMasonryListScroller;
          },
          MasonryListScrollerRef: function () {
            return X.MasonryListScrollerRef;
          },
          RenderSection: function () {
            return X.RenderSection;
          },
          RenderItem: function () {
            return X.RenderItem;
          },
          MasonryListScrollerProps: function () {
            return X.MasonryListScrollerProps;
          },
          MasonryListAuto: function () {
            return Q.MasonryListAuto;
          },
          MasonryListThin: function () {
            return Q.MasonryListThin;
          },
          MasonryList: function () {
            return Q.MasonryListThin;
          },
          Menu: function () {
            return Z.Menu;
          },
          MenuSpinner: function () {
            return Z.MenuSpinner;
          },
          MenuSeparator: function () {
            return J.MenuSeparator;
          },
          MenuGroup: function () {
            return J.MenuGroup;
          },
          MenuItem: function () {
            return J.MenuItem;
          },
          MenuCheckboxItem: function () {
            return J.MenuCheckboxItem;
          },
          MenuRadioItem: function () {
            return J.MenuRadioItem;
          },
          MenuControlItem: function () {
            return J.MenuControlItem;
          },
          MenuCustomItemRenderProps: function () {
            return $.MenuCustomItemRenderProps;
          },
          MenuImageUploadControl: function () {
            return ee.MenuImageUploadControl;
          },
          MenuInteractiveCompositeControl: function () {
            return et.MenuInteractiveCompositeControl;
          },
          MenuSearchControl: function () {
            return en.MenuSearchControl;
          },
          MenuSliderControl: function () {
            return ei.MenuSliderControl;
          },
          ConfirmModal: function () {
            return er.ConfirmModal;
          },
          DeclarativeConfirmModal: function () {
            return er.DeclarativeConfirmModal;
          },
          Modal: function () {
            return es.Modal;
          },
          getInteractingModalContext: function () {
            return ea.getInteractingModalContext;
          },
          modalContextFromAppContext: function () {
            return ea.modalContextFromAppContext;
          },
          useModalsStore: function () {
            return ea.useModalsStore;
          },
          openModalLazy: function () {
            return ea.openModalLazy;
          },
          openModal: function () {
            return ea.openModal;
          },
          closeModal: function () {
            return ea.closeModal;
          },
          updateModal: function () {
            return ea.updateModal;
          },
          hasAnyModalOpenSelector: function () {
            return ea.hasAnyModalOpenSelector;
          },
          hasAnyModalOpen: function () {
            return ea.hasAnyModalOpen;
          },
          closeAllModals: function () {
            return ea.closeAllModals;
          },
          hasModalOpenSelector: function () {
            return ea.hasModalOpenSelector;
          },
          hasModalOpen: function () {
            return ea.hasModalOpen;
          },
          ModalCloseButton: function () {
            return eo.ModalCloseButton;
          },
          ModalContent: function () {
            return eo.ModalContent;
          },
          ModalFooter: function () {
            return eo.ModalFooter;
          },
          ModalHeader: function () {
            return eo.ModalHeader;
          },
          ModalListContent: function () {
            return eo.ModalListContent;
          },
          ModalRoot: function () {
            return eo.ModalRoot;
          },
          ModalSize: function () {
            return eo.ModalSize;
          },
          ModalTransitionState: function () {
            return el.ModalTransitionState;
          },
          DEFAULT_MODAL_CONTEXT: function () {
            return el.DEFAULT_MODAL_CONTEXT;
          },
          POPOUT_MODAL_CONTEXT: function () {
            return el.POPOUT_MODAL_CONTEXT;
          },
          Modals: function () {
            return eu.Modals;
          },
          useModalContext: function () {
            return eu.useModalContext;
          },
          Paginator: function () {
            return ec.Paginator;
          },
          Progress: function () {
            return ed.Progress;
          },
          ProgressCircle: function () {
            return ef.ProgressCircle;
          },
          StackedProgress: function () {
            return eE.StackedProgress;
          },
          BasePopout: function () {
            return ep.BasePopout;
          },
          LoadingPopout: function () {
            return eh.LoadingPopout;
          },
          Popout: function () {
            return e_.Popout;
          },
          LazyPopout: function () {
            return e_.LazyPopout;
          },
          PopoutCSSAnimator: function () {
            return eS.PopoutCSSAnimator;
          },
          PopoutList: function () {
            return em.PopoutList;
          },
          RadioGroup: function () {
            return eT.RadioGroup;
          },
          useRadioGroup: function () {
            return eT.useRadioGroup;
          },
          useRadioItem: function () {
            return eT.useRadioItem;
          },
          NameWithRole: function () {
            return eg.NameWithRole;
          },
          NameWithRoleAnchor: function () {
            return eg.NameWithRoleAnchor;
          },
          RoleDot: function () {
            return eI.RoleDot;
          },
          RoleCircle: function () {
            return eI.RoleCircle;
          },
          ListComputer: function () {
            return eC.ListComputer;
          },
          MasonryListComputer: function () {
            return eC.MasonryListComputer;
          },
          isListItemRow: function () {
            return eC.isListItemRow;
          },
          useResizeObserverSubscription: function () {
            return eC.useResizeObserverSubscription;
          },
          AdvancedScrollerAuto: function () {
            return ev.AdvancedScrollerAuto;
          },
          AdvancedScrollerNone: function () {
            return ev.AdvancedScrollerNone;
          },
          AdvancedScrollerThin: function () {
            return ev.AdvancedScrollerThin;
          },
          AdvancedScroller: function () {
            return ev.AdvancedScrollerThin;
          },
          createAdvancedScroller: function () {
            return eA.createAdvancedScroller;
          },
          createManagedReactiveScroller: function () {
            return eR.createManagedReactiveScroller;
          },
          createScroller: function () {
            return eN.createScroller;
          },
          PinToBottomScrollerAuto: function () {
            return eO.PinToBottomScrollerAuto;
          },
          ScrollerAuto: function () {
            return eD.ScrollerAuto;
          },
          ScrollerNone: function () {
            return eD.ScrollerNone;
          },
          ScrollerThin: function () {
            return eD.ScrollerThin;
          },
          Scroller: function () {
            return eD.ScrollerThin;
          },
          SegmentedControl: function () {
            return ey.SegmentedControl;
          },
          Select: function () {
            return eP.Select;
          },
          SingleSelect: function () {
            return eP.SingleSelect;
          },
          useSingleSelectState: function () {
            return eP.useSingleSelectState;
          },
          useMultiSelectState: function () {
            return eP.useMultiSelectState;
          },
          useVariableSelect: function () {
            return eP.useVariableSelect;
          },
          multiSelect: function () {
            return eP.multiSelect;
          },
          toggleSelect: function () {
            return eP.toggleSelect;
          },
          singleSelect: function () {
            return eP.singleSelect;
          },
          SearchableSelect: function () {
            return eL.SearchableSelect;
          },
          SearchableSelectRef: function () {
            return eL.SearchableSelectRef;
          },
          SelectLooks: function () {
            return eb.SelectLooks;
          },
          Sequencer: function () {
            return eM.Sequencer;
          },
          Shaker: function () {
            return eU.Shaker;
          },
          Shakeable: function () {
            return eG.Shakeable;
          },
          Slide: function () {
            return ew.Slide;
          },
          Slides: function () {
            return ew.Slides;
          },
          Slider: function () {
            return ek.Slider;
          },
          Spinner: function () {
            return ex.Spinner;
          },
          SpinnerTypes: function () {
            return ex.SpinnerTypes;
          },
          AnimatedStatus: function () {
            return eF.AnimatedStatus;
          },
          Status: function () {
            return eF.Status;
          },
          StatusTypes: function () {
            return eF.StatusTypes;
          },
          getStatusBackdropColor: function () {
            return eF.getStatusBackdropColor;
          },
          getStatusBackdropOpacity: function () {
            return eF.getStatusBackdropOpacity;
          },
          getStatusMask: function () {
            return eF.getStatusMask;
          },
          useStatusFillColor: function () {
            return eF.useStatusFillColor;
          },
          Switch: function () {
            return eV.Switch;
          },
          TabBar: function () {
            return eB.TabBar;
          },
          Text: function () {
            return eH.Text;
          },
          TextArea: function () {
            return ej.TextArea;
          },
          TextAreaAutosize: function () {
            return eY.TextAreaAutosize;
          },
          TextInput: function () {
            return eW.TextInput;
          },
          InputError: function () {
            return eW.InputError;
          },
          TextInputProps: function () {
            return eW.TextInputProps;
          },
          TimeInput: function () {
            return eK.TimeInput;
          },
          Toast: function () {
            return ez.Toast;
          },
          createToast: function () {
            return ez.createToast;
          },
          useToastStore: function () {
            return eq.useToastStore;
          },
          showToast: function () {
            return eq.showToast;
          },
          popToast: function () {
            return eq.popToast;
          },
          ToastType: function () {
            return eX.ToastType;
          },
          ToastPosition: function () {
            return eX.ToastPosition;
          },
          ToastContainer: function () {
            return eQ.ToastContainer;
          },
          Tooltip: function () {
            return eZ.Tooltip;
          },
          TooltipContainer: function () {
            return eZ.TooltipContainer;
          },
          TooltipColors: function () {
            return eZ.TooltipColors;
          },
          TooltipLayer: function () {
            return eZ.TooltipLayer;
          },
          tokens: function () {
            return eJ.default;
          },
          useToken: function () {
            return e$.useToken;
          },
          TransitionGroup: function () {
            return e0.TransitionGroup;
          },
          TransitionStates: function () {
            return e0.TransitionStates;
          },
          ThemeContextProvider: function () {
            return e1.ThemeContextProvider;
          },
          RootThemeContextProvider: function () {
            return e1.RootThemeContextProvider;
          },
          useThemeContext: function () {
            return e1.useThemeContext;
          },
          DisableCustomTheme: function () {
            return e1.DisableCustomTheme;
          },
          UseThemeContext: function () {
            return e1.UseThemeContext;
          },
          TableCell: function () {
            return e2.TableCell;
          },
          TableColumn: function () {
            return e2.TableColumn;
          },
          TableRow: function () {
            return e2.TableRow;
          },
          TableBody: function () {
            return e2.TableBody;
          },
          TableHeader: function () {
            return e2.TableHeader;
          },
          Table: function () {
            return e2.Table;
          },
          useRedesignIconContext: function () {
            return e4.useRedesignIconContext;
          },
          RedesignIconContextProvider: function () {
            return e4.RedesignIconContextProvider;
          },
        });
      var i = n("539826"),
        r = n("413197"),
        s = n("209613"),
        a = n("459462"),
        o = n("913365"),
        l = n("52904"),
        u = n("691609"),
        c = n("247716"),
        d = n("271841"),
        f = n("659397"),
        E = n("685698"),
        p = n("262448"),
        h = n("227645"),
        _ = n("456189"),
        S = n("960486"),
        m = n("923237"),
        T = n("322756"),
        g = n("130969"),
        I = n("709749"),
        C = n("990749"),
        v = n("187641"),
        A = n("57406"),
        R = n("633661"),
        N = n("690977"),
        O = n("311720"),
        D = n("718776"),
        y = n("688817"),
        P = n("516826"),
        L = n("370373"),
        b = n("16256"),
        M = n("298742"),
        U = n("603616"),
        G = n("135411"),
        w = n("392098"),
        k = n("266079"),
        x = n("329272"),
        F = n("818810"),
        V = n("224763"),
        B = n("605451"),
        H = n("860226"),
        j = n("741662"),
        Y = n("533979"),
        W = n("228256"),
        K = n("222163"),
        z = n("73643"),
        q = n("433600"),
        X = n("304549"),
        Q = n("384704"),
        Z = n("71096"),
        J = n("155823"),
        $ = n("916528"),
        ee = n("404417"),
        et = n("836234"),
        en = n("609026"),
        ei = n("873830"),
        er = n("348891"),
        es = n("314569"),
        ea = n("551042"),
        eo = n("516256"),
        el = n("625611"),
        eu = n("388495"),
        ec = n("125814"),
        ed = n("184456"),
        ef = n("852566"),
        eE = n("443083"),
        ep = n("533785"),
        eh = n("678904"),
        e_ = n("442761"),
        eS = n("276335"),
        em = n("694982"),
        eT = n("105265"),
        eg = n("552241"),
        eI = n("236532"),
        eC = n("462977"),
        ev = n("446662"),
        eA = n("858850"),
        eR = n("211009"),
        eN = n("256023"),
        eO = n("617657"),
        eD = n("670914"),
        ey = n("506395"),
        eP = n("935980"),
        eL = n("774811"),
        eb = n("178814"),
        eM = n("981579"),
        eU = n("68643"),
        eG = n("292842"),
        ew = n("265984"),
        ek = n("837443"),
        ex = n("242670"),
        eF = n("391010"),
        eV = n("980672"),
        eB = n("914907"),
        eH = n("577776"),
        ej = n("74307"),
        eY = n("324584"),
        eW = n("240353"),
        eK = n("161814"),
        ez = n("35672"),
        eq = n("325236"),
        eX = n("159350"),
        eQ = n("371557"),
        eZ = n("414055"),
        eJ = n("669491"),
        e$ = n("708253"),
        e0 = n("685639"),
        e1 = n("36763"),
        e2 = n("628400"),
        e4 = n("469563");
    },
    846071: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i,
        r = n("993105"),
        s = n("492249"),
        a = n("782340");
      i = class {
        get displayMessage() {
          if (null == this.code)
            return a.default.Messages.NOTICE_DISPATCH_ERROR;
          let { path: e } = this.context;
          switch (this.code) {
            case s.DispatchErrorCodes.DISK_LOW:
              let { available: t, required: n } = this.context,
                i = (0, r.formatSize)(t, { useKibibytes: !0 }),
                o = (0, r.formatSize)(n, { useKibibytes: !0 });
              return a.default.Messages.NOTICE_DISPATCH_ERROR_DISK_LOW.format({
                required: o,
                available: i,
              });
            case s.DispatchErrorCodes.POST_INSTALL_FAILED:
              let { name: l } = this.context;
              return a.default.Messages.NOTICE_DISPATCH_ERROR_POST_INSTALL_FAILED.format(
                { name: l }
              );
            case s.DispatchErrorCodes.FILE_NAME_TOO_LONG:
              return a.default.Messages
                .NOTICE_DISPATCH_ERROR_FILE_NAME_TOO_LONG;
            case s.DispatchErrorCodes.POST_INSTALL_CANCELLED:
              return a.default.Messages
                .NOTICE_DISPATCH_ERROR_POST_INSTALL_CANCELLED;
            case s.DispatchErrorCodes.IO_PERMISSION_DENIED:
              return a.default.Messages
                .NOTICE_DISPATCH_ERROR_IO_PERMISSION_DENIED;
            case s.DispatchErrorCodes.NO_MANIFESTS:
              return a.default.Messages.NOTICE_DISPATCH_ERROR_NO_MANIFESTS;
            case s.DispatchErrorCodes.NOT_ENTITLED:
              return a.default.Messages.NOTICE_DISPATCH_ERROR_NOT_ENTITLED;
            case s.DispatchErrorCodes.NOT_DIRECTORY:
            case s.DispatchErrorCodes.DISK_PERMISSION_DENIED:
              return a.default.Messages.NOTICE_DISPATCH_ERROR_UNWRITABLE.format(
                { path: e }
              );
            case s.DispatchErrorCodes.INVALID_DRIVE:
              return a.default.Messages.NOTICE_DISPATCH_ERROR_INVALID_DRIVE.format(
                { path: e }
              );
            case s.DispatchErrorCodes.APPLICATION_LOCK_FAILED:
              return a.default.Messages.NOTICE_DISPATCH_APPLICATION_LOCK_FAILED;
            case s.DispatchErrorCodes.DISK_FULL:
              return a.default.Messages.NOTICE_DISPATCH_ERROR_DISK_FULL;
            case s.DispatchErrorCodes.API_ERROR:
            case s.DispatchErrorCodes.MAX_REQUEST_RETRIES_EXCEEDED:
              return a.default.Messages.NOTICE_DISPATCH_API_ERROR;
            default:
              return a.default.Messages.NOTICE_DISPATCH_ERROR_WITH_CODE.format({
                code: "".concat(this.code),
              });
          }
        }
        constructor(e) {
          (this.raw = e),
            null != e.code && (this.code = e.code),
            null != e.uuid && (this.uuid = e.uuid),
            null != e.application_id && (this.applicationId = e.application_id),
            null != e.branch_id && (this.branchId = e.branch_id),
            null != e.context
              ? (this.context = e.context)
              : (this.context = {});
        }
      };
    },
    143068: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("862205");
      let r = (0, i.createExperiment)({
        kind: "user",
        id: "2022-07_file_upload_limit",
        label: "File Upload Limit Increase",
        defaultConfig: { enabled: !1 },
        treatments: [{ id: 1, label: "Enabled", config: { enabled: !0 } }],
      });
      var s = r;
    },
    700031: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("862205");
      let r = (0, i.createExperiment)({
        kind: "user",
        id: "2022-09_free_file_upload_limit",
        label: "Free File Upload Limit Increase",
        defaultConfig: { enabled: !1 },
        treatments: [{ id: 1, label: "Enabled", config: { enabled: !0 } }],
      });
      var s = r;
    },
    798609: function (e, t, n) {
      "use strict";
      var i,
        r,
        s,
        a,
        o,
        l,
        u,
        c,
        d,
        f,
        E,
        p,
        h,
        _,
        S,
        m,
        T,
        g,
        I,
        C,
        v,
        A,
        R,
        N,
        O,
        D,
        y,
        P;
      n.r(t),
        n.d(t, {
          PermissionOverwriteType: function () {
            return i;
          },
          EmbeddedActivitySupportedPlatforms: function () {
            return r;
          },
          EmbeddedActivityLabelTypes: function () {
            return s;
          },
          ApplicationDirectoryEntryCarouselItemType: function () {
            return a;
          },
          ApplicationCommandContextType: function () {
            return o;
          },
          ApplicationCommandOptionType: function () {
            return l;
          },
          ApplicationCommandType: function () {
            return u;
          },
          InteractionTypes: function () {
            return c;
          },
          ComponentType: function () {
            return d;
          },
          ButtonStyle: function () {
            return f;
          },
          TextComponentStyle: function () {
            return E;
          },
          InvoiceDiscountTypes: function () {
            return p;
          },
          PurchaseNotificationType: function () {
            return h;
          },
          AuthenticatorType: function () {
            return _;
          },
        }),
        ((S = i || (i = {}))[(S.ROLE = 0)] = "ROLE"),
        (S[(S.MEMBER = 1)] = "MEMBER"),
        ((m = r || (r = {})).IOS = "ios"),
        (m.ANDROID = "android"),
        (m.WEB = "web"),
        ((T = s || (s = {}))[(T.NONE = 0)] = "NONE"),
        (T[(T.NEW = 1)] = "NEW"),
        (T[(T.UPDATED = 2)] = "UPDATED"),
        ((g = a || (a = {}))[(g.MEDIA_PROXY = 1)] = "MEDIA_PROXY"),
        (g[(g.YOUTUBE = 2)] = "YOUTUBE"),
        ((I = o || (o = {}))[(I.GUILD = 0)] = "GUILD"),
        (I[(I.BOT_DM = 1)] = "BOT_DM"),
        (I[(I.PRIVATE_CHANNEL = 2)] = "PRIVATE_CHANNEL"),
        ((C = l || (l = {}))[(C.SUB_COMMAND = 1)] = "SUB_COMMAND"),
        (C[(C.SUB_COMMAND_GROUP = 2)] = "SUB_COMMAND_GROUP"),
        (C[(C.STRING = 3)] = "STRING"),
        (C[(C.INTEGER = 4)] = "INTEGER"),
        (C[(C.BOOLEAN = 5)] = "BOOLEAN"),
        (C[(C.USER = 6)] = "USER"),
        (C[(C.CHANNEL = 7)] = "CHANNEL"),
        (C[(C.ROLE = 8)] = "ROLE"),
        (C[(C.MENTIONABLE = 9)] = "MENTIONABLE"),
        (C[(C.NUMBER = 10)] = "NUMBER"),
        (C[(C.ATTACHMENT = 11)] = "ATTACHMENT"),
        ((v = u || (u = {}))[(v.CHAT = 1)] = "CHAT"),
        (v[(v.USER = 2)] = "USER"),
        (v[(v.MESSAGE = 3)] = "MESSAGE"),
        (v[(v.PRIMARY_ENTRY_POINT = 4)] = "PRIMARY_ENTRY_POINT"),
        ((A = c || (c = {}))[(A.APPLICATION_COMMAND = 2)] =
          "APPLICATION_COMMAND"),
        (A[(A.MESSAGE_COMPONENT = 3)] = "MESSAGE_COMPONENT"),
        (A[(A.APPLICATION_COMMAND_AUTOCOMPLETE = 4)] =
          "APPLICATION_COMMAND_AUTOCOMPLETE"),
        (A[(A.MODAL_SUBMIT = 5)] = "MODAL_SUBMIT"),
        ((R = d || (d = {}))[(R.ACTION_ROW = 1)] = "ACTION_ROW"),
        (R[(R.BUTTON = 2)] = "BUTTON"),
        (R[(R.STRING_SELECT = 3)] = "STRING_SELECT"),
        (R[(R.INPUT_TEXT = 4)] = "INPUT_TEXT"),
        (R[(R.USER_SELECT = 5)] = "USER_SELECT"),
        (R[(R.ROLE_SELECT = 6)] = "ROLE_SELECT"),
        (R[(R.MENTIONABLE_SELECT = 7)] = "MENTIONABLE_SELECT"),
        (R[(R.CHANNEL_SELECT = 8)] = "CHANNEL_SELECT"),
        ((N = f || (f = {}))[(N.PRIMARY = 1)] = "PRIMARY"),
        (N[(N.SECONDARY = 2)] = "SECONDARY"),
        (N[(N.SUCCESS = 3)] = "SUCCESS"),
        (N[(N.DESTRUCTIVE = 4)] = "DESTRUCTIVE"),
        (N[(N.LINK = 5)] = "LINK"),
        ((O = E || (E = {}))[(O.SMALL = 1)] = "SMALL"),
        (O[(O.PARAGRAPH = 2)] = "PARAGRAPH"),
        ((D = p || (p = {}))[(D.SUBSCRIPTION_PLAN = 1)] = "SUBSCRIPTION_PLAN"),
        (D[(D.ENTITLEMENT = 2)] = "ENTITLEMENT"),
        (D[(D.PREMIUM_LEGACY_UPGRADE_PROMOTION = 3)] =
          "PREMIUM_LEGACY_UPGRADE_PROMOTION"),
        (D[(D.PREMIUM_TRIAL = 4)] = "PREMIUM_TRIAL"),
        ((y = h || (h = {}))[(y.GUILD_PRODUCT = 0)] = "GUILD_PRODUCT"),
        ((P = _ || (_ = {}))[(P.WEBAUTHN = 1)] = "WEBAUTHN"),
        (P[(P.TOTP = 2)] = "TOTP"),
        (P[(P.SMS = 3)] = "SMS");
    },
    731898: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        }),
        n("222007");
      var i = n("884691");
      function r() {
        for (var e = arguments.length, t = Array(e), n = 0; n < e; n++)
          t[n] = arguments[n];
        let [r, s] = i.useState(void 0),
          [a, o] = i.useState(void 0),
          l = i.useRef(null);
        return (
          i.useLayoutEffect(() => {
            let e = l.current,
              t = null == e ? void 0 : e.ownerDocument.defaultView;
            if (null != e && null != t) {
              let n = new t.ResizeObserver(e => {
                var t, n, i, r, a, u;
                let c = e[0],
                  d =
                    null == c
                      ? void 0
                      : null === (n = c.borderBoxSize) || void 0 === n
                        ? void 0
                        : null === (t = n[0]) || void 0 === t
                          ? void 0
                          : t.inlineSize,
                  f =
                    null == c
                      ? void 0
                      : null === (r = c.borderBoxSize) || void 0 === r
                        ? void 0
                        : null === (i = r[0]) || void 0 === i
                          ? void 0
                          : i.blockSize;
                if (null == d || null == f) {
                  let e = l.current;
                  if (null != e) {
                    let t = window.getComputedStyle(e);
                    null == d &&
                      (d = parseFloat(
                        null !== (a = t.width) && void 0 !== a ? a : "0"
                      )),
                      null == f &&
                        (f = parseFloat(
                          null !== (u = t.height) && void 0 !== u ? u : "0"
                        ));
                  }
                }
                s(d), o(f);
              });
              return n.observe(e), () => n.disconnect();
            }
          }, [l.current, ...t]),
          { ref: l, width: r, height: a }
        );
      }
    },
    811425: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useIsVisible: function () {
            return l;
          },
        }),
        n("222007");
      var i = n("884691"),
        r = n("561744"),
        s = n("595698");
      let a = {},
        o = new Map([[1, { threshold: 1 }]]);
      function l(e) {
        let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1,
          n =
            !(arguments.length > 2) || void 0 === arguments[2] || arguments[2],
          l = (0, r.default)(t => {
            e(t.isIntersecting);
          }),
          u = (0, i.useMemo)(() => {
            var e;
            let n;
            return (
              (e = t),
              null != (n = o.get(e))
                ? n
                : ((n = { threshold: e }), o.set(e, n), n)
            );
          }, [t]);
        return (function (e, t) {
          let n =
              !(arguments.length > 2) ||
              void 0 === arguments[2] ||
              arguments[2],
            o = (0, i.useRef)(null),
            l = (0, r.default)(null != t ? t : a),
            u = (0, i.useRef)(null);
          return (
            (0, i.useLayoutEffect)(() => {
              if (!n) return;
              null == u.current &&
                (u.current = (0, s.getIntersectionObserver)(l.current));
              let t = o.current,
                i = u.current;
              null != t && null != i && (0, s.watch)(i, t, e);
            }, [n, e]),
            (0, i.useEffect)(() => {
              if (!n) return;
              let e = o.current,
                t = u.current;
              if (null != e && null != t)
                return () => {
                  (0, s.unwatch)(t, e);
                };
            }, [n, t]),
            o
          );
        })(l.current, u, n);
      }
    },
    634634: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        });
      var i = n("884691");
      function r(e) {
        let t = (0, i.useRef)(null),
          n = (0, i.useRef)(null);
        return (
          !Object.is(e, n.current) &&
            ((t.current = n.current), (n.current = e)),
          t.current
        );
      }
    },
    84339: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        });
      var i = n("884691");
      function r(e) {
        let t = (0, i.useRef)();
        return (
          (0, i.useEffect)(() => {
            t.current = e;
          }, [e]),
          t.current
        );
      }
    },
    31695: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("884691"),
        r = n("561744");
      function s(e) {
        let t = (0, r.default)(e);
        (0, i.useEffect)(() => {
          let e = requestAnimationFrame(function n() {
            var i;
            null === (i = t.current) || void 0 === i || i.call(t),
              (e = requestAnimationFrame(n));
          });
          return () => cancelAnimationFrame(e);
        }, []);
      }
    },
    841098: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useTheme: function () {
            return r;
          },
          default: function () {
            return s;
          },
        });
      var i = n("819855");
      function r() {
        let { theme: e } = (0, i.useThemeContext)();
        return e;
      }
      n("49111");
      var s = r;
    },
    953260: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          JUMP_TO_GUILD: function () {
            return f;
          },
        }),
        n("424973");
      var i = n("379881"),
        r = n("15131"),
        s = n("393414"),
        a = n("239380"),
        o = n("42203"),
        l = n("957255"),
        u = n("162771"),
        c = n("677099"),
        d = n("49111");
      let f = {
        binds: (() => {
          let e = [];
          for (let t = 1; t < 10; t++) e.push("mod+".concat(t));
          return e;
        })(),
        comboKeysBindGlobal: !0,
        action(e, t) {
          let n,
            f = parseInt(t.split("+")[1], 10);
          if ((0 === f && (f = 10), !isNaN(f) && 0 !== f)) {
            if (
              null !=
              (n =
                1 === f
                  ? d.ME
                  : (0, r.isFavoritesGuildVisible)(
                        i.default,
                        o.default,
                        l.default
                      )
                    ? 2 === f
                      ? d.FAVORITES
                      : c.default.getFlattenedGuildIds()[f - 3]
                    : c.default.getFlattenedGuildIds()[f - 2])
            )
              return n === d.ME && null == u.default.getGuildId()
                ? ((0, s.transitionTo)(d.Routes.CHANNEL(n)), !1)
                : ((0, a.transitionToGuild)(n), !1);
          }
        },
      };
    },
    226445: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Histogram: function () {
            return r;
          },
        }),
        n("424973"),
        n("222007");
      var i = n("265042");
      class r {
        addSample(e) {
          this.digest.push(e);
        }
        getReport() {
          var e, t, n, i;
          let r =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : [25, 50, 75, 90, 95],
            s = {};
          for (let t of r)
            s[t] =
              null !== (e = this.digest.percentile(t / 100)) && void 0 !== e
                ? e
                : 0;
          return {
            min:
              null !== (t = this.digest.percentile(0)) && void 0 !== t ? t : 0,
            max:
              null !== (n = this.digest.percentile(1)) && void 0 !== n ? n : 0,
            count: null !== (i = this.digest.size()) && void 0 !== i ? i : 0,
            percentiles: s,
          };
        }
        constructor() {
          this.digest = new i.Digest();
        }
      }
    },
    485328: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return R;
          },
        }),
        n("222007"),
        n("781738"),
        n("424973");
      var i = n("800648"),
        r = n.n(i),
        s = n("969230"),
        a = n.n(s),
        o = n("953260"),
        l = n("605250"),
        u = n("599110"),
        c = n("773336"),
        d = n("49111");
      let f = {},
        E = [],
        p = !1,
        h = a(new r(window)),
        _ = (0, c.isMac)() ? "cmd" : "ctrl",
        S = (0, c.isMac)() ? "opt" : "alt",
        m = (0, c.isMac)() ? "return" : "enter",
        T = [
          ...o.JUMP_TO_GUILD.binds,
          "mod+shift+[",
          "mod+shift+]",
          "mod+[",
          "mod+]",
          "alt+[",
          "alt+]",
          "ctrl+shift+tab",
          "ctrl+tab",
          "mod+n",
          "mod+t",
          "mod+shift+t",
          "mod+plus",
          "mod+minus",
          "mod+0",
        ].map(e => e.replace("mod", _)),
        g = () => [],
        I = [];
      if ((0, c.isDesktop)()) {
        let e = new r(document.documentElement);
        e.bind("backspace", e => e.preventDefault());
      }
      function C(e) {
        let t = [];
        for (let n of Object.values(e)) null != n && t.push(...n.binds);
        return t.map(e => e.replace("mod", _));
      }
      function v(e, t) {
        return (n, i) => (
          u.default.track(d.AnalyticEvents.KEYBOARD_SHORTCUT_USED, {
            shortcut_name: e,
          }),
          t(n, i)
        );
      }
      function A(e) {
        for (let [t, n] of Object.entries(e)) {
          if (null == n) continue;
          let e = g();
          !c.isPlatformEmbedded && (e = e.concat(T));
          let i = n.binds.filter(
            t => ((t = t.replace("mod", _)), 0 > e.indexOf(t))
          );
          if (0 === i.length) continue;
          let r = n.comboKeysBindGlobal ? h.bindGlobal : h.bind;
          if (
            (null != n.action && r.call(h, i, v(t, n.action)),
            null != n.keyup && r.call(h, i, v(t, n.keyup), "keyup"),
            null != n.keydown)
          ) {
            let e = i.indexOf("any-character");
            -1 !== e &&
              (!(function (e, t) {
                let n = e => t(e, e.key);
                document.addEventListener(e, n),
                  I.push(() => document.removeEventListener(e, n));
              })("keydown", n.keydown),
              i.splice(e, 1)),
              i.length > 0 && r.call(h, i, v(t, n.keydown), "keydown");
          }
          null != n.keypress && r.call(h, i, v(t, n.keypress), "keypress");
        }
      }
      var R = {
        combokeys: h,
        modKey: _,
        altKey: S,
        returnKey: m,
        setGetKeybindList(e) {
          g = e;
        },
        checkDupes(e) {
          let t = new Set(),
            n = [],
            i = C(e);
          for (let e of i) t.has(e) && n.push(e), t.add(e);
          n.length > 0 &&
            new (0, l.default)("Keybinds").warn(
              "Duplicate keyboard shortcuts defined:",
              n
            );
        },
        setLayout(e) {
          f = e;
        },
        enable() {
          !p && ((p = !0), this.checkDupes(f), A(f));
        },
        enableTemp(e) {
          E.push(f), (f = e), A(e), (p = !0);
        },
        disableTemp() {
          let e = E.pop();
          null != e && (f = e), this.disable(), this.enable();
        },
        disable() {
          p && ((p = !1), I.forEach(e => e()), (I = []), h.reset());
        },
        validateKeybind(e) {
          p && this.hasBind(e) && h.unbind(e);
        },
        hasBind(e) {
          let t = C(f);
          return (
            (e = (e = e.replace("meta", "cmd"))
              .replace(/right |left /i, "")
              .trim()),
            t.includes(e)
          );
        },
      };
    },
    316272: function (e, t, n) {
      "use strict";
      var i;
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("222007"),
        n("704744"),
        (i = class {
          initialize() {
            for (var e = arguments.length, t = Array(e), n = 0; n < e; n++)
              t[n] = arguments[n];
            !this.isInitialized &&
              ((this.isInitialized = !0), this._initialize(...t));
          }
          terminate() {
            this.isInitialized &&
              ((this.isInitialized = !1), this._terminate());
          }
          constructor() {
            this.isInitialized = !1;
          }
        });
    },
    668597: function (e, t, n) {
      "use strict";
      var i;
      n.r(t),
        n.d(t, {
          computeIsMuted: function () {
            return r;
          },
          isTemporarilyMuted: function () {
            return s;
          },
          default: function () {
            return i;
          },
        });
      function r(e) {
        var t;
        let { muted: n, mute_config: i } = e;
        return (
          !!n &&
          (null == (t = i) ||
            null == t.end_time ||
            new Date(t.end_time) >= new Date())
        );
      }
      function s(e) {
        let { muted: t, mute_config: n } = e;
        return (
          !!t &&
          null != n &&
          null != n.end_time &&
          new Date(n.end_time) >= new Date()
        );
      }
      i = class {
        reset() {
          Object.values(this.timers).forEach(e => clearTimeout(e)),
            (this.timers = {});
        }
        setTimer(e, t, n) {
          var i;
          if (null == e || null == t) return !1;
          let r =
            null == (i = t).end_time
              ? null
              : new Date(i.end_time).getTime() - Date.now();
          return (
            null != r &&
            (!!(r <= 0) ||
              ((this.timers[e] = setTimeout(n, Math.max(0, r))), !1))
          );
        }
        clearTimer(e) {
          null != e &&
            e in this.timers &&
            (clearTimeout(this.timers[e]), delete this.timers[e]);
        }
        constructor() {
          this.timers = {};
        }
      };
    },
    497407: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i,
        r = n("398183"),
        s = n("985365"),
        a = n("49111");
      function o(e) {
        let t =
          arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
        return null != e ? Math.round(e) : t;
      }
      i = class {
        _initStats() {
          let e = {
            effectiveConnectionSpeedBuckets: {},
            connectionTypeBuckets: {},
          };
          return (
            Object.values(a.NetworkConnectionTypes).forEach(t => {
              e.connectionTypeBuckets[t] = 0;
            }),
            Object.values(a.NetworkConnectionSpeeds).forEach(t => {
              e.effectiveConnectionSpeedBuckets[t] = 0;
            }),
            e
          );
        }
        getStats() {
          let { _networkStats: e } = this;
          return {
            duration_connection_type_wifi: o(
              e.connectionTypeBuckets[a.NetworkConnectionTypes.WIFI]
            ),
            duration_connection_type_cellular: o(
              e.connectionTypeBuckets[a.NetworkConnectionTypes.CELLULAR]
            ),
            duration_connection_type_ethernet: o(
              e.connectionTypeBuckets[a.NetworkConnectionTypes.ETHERNET]
            ),
            duration_connection_type_bluetooth: o(
              e.connectionTypeBuckets[a.NetworkConnectionTypes.BLUETOOTH]
            ),
            duration_connection_type_other: o(
              e.connectionTypeBuckets[a.NetworkConnectionTypes.OTHER]
            ),
            duration_connection_type_unknown: o(
              e.connectionTypeBuckets[a.NetworkConnectionTypes.UNKNOWN]
            ),
            duration_connection_type_none: o(
              e.connectionTypeBuckets[a.NetworkConnectionTypes.NONE]
            ),
            duration_effective_connection_speed_2g: o(
              e.effectiveConnectionSpeedBuckets[a.NetworkConnectionSpeeds.TWO_G]
            ),
            duration_effective_connection_speed_3g: o(
              e.effectiveConnectionSpeedBuckets[
                a.NetworkConnectionSpeeds.THREE_G
              ]
            ),
            duration_effective_connection_speed_4g: o(
              e.effectiveConnectionSpeedBuckets[
                a.NetworkConnectionSpeeds.FOUR_G
              ]
            ),
            duration_effective_connection_speed_5g: o(
              e.effectiveConnectionSpeedBuckets[
                a.NetworkConnectionSpeeds.FIVE_G
              ]
            ),
            duration_effective_connection_speed_unknown: o(
              e.effectiveConnectionSpeedBuckets[
                a.NetworkConnectionSpeeds.UNKNOWN
              ]
            ),
          };
        }
        incrementNetworkStats(e) {
          let t = (e - this._lastSampleTimestamp) / 1e3,
            n = s.default.getEffectiveConnectionSpeed();
          n === a.NetworkConnectionSpeeds.SLOW_TWO_G &&
            (n = a.NetworkConnectionSpeeds.TWO_G);
          let i = s.default.getType();
          i === a.NetworkConnectionTypes.WIMAX &&
            (i = a.NetworkConnectionTypes.WIFI),
            (this._networkStats.effectiveConnectionSpeedBuckets[n] += t),
            (this._networkStats.connectionTypeBuckets[i] += t),
            (this._lastSampleTimestamp = e);
        }
        constructor() {
          (this._networkStats = this._initStats()),
            (this._lastSampleTimestamp = (0, r.now)());
        }
      };
    },
    376556: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return c;
          },
        }),
        n("511434"),
        n("313619"),
        n("654714"),
        n("287168"),
        n("956660"),
        n("222007");
      var i = n("917351"),
        r = n.n(i),
        s = n("669491"),
        a = n("49111");
      let o = [
          {
            type: a.PlatformTypes.TWITCH,
            name: "Twitch",
            color: s.default.unsafe_rawColors.TWITCH.css,
            icon: {
              lightPNG: n("115658"),
              darkPNG: n("115658"),
              whitePNG: n("288589"),
              lightSVG: n("729332"),
              darkSVG: n("729332"),
              whiteSVG: n("31439"),
            },
            enabled: !0,
            getPlatformUserUrl: e => {
              let { name: t } = e;
              return "https://www.twitch.tv/".concat(encodeURIComponent(t));
            },
            domains: ["twitch.tv", "twitch.com"],
          },
          {
            type: a.PlatformTypes.YOUTUBE,
            name: "YouTube",
            color: s.default.unsafe_rawColors.YOUTUBE.css,
            icon: {
              lightPNG: n("299893"),
              darkPNG: n("299893"),
              whitePNG: n("255284"),
              lightSVG: n("997771"),
              darkSVG: n("997771"),
              whiteSVG: n("223406"),
            },
            enabled: !0,
            getPlatformUserUrl: e => {
              let { id: t } = e;
              return "https://www.youtube.com/channel/".concat(
                encodeURIComponent(t)
              );
            },
            domains: ["youtube.com", "youtu.be"],
          },
          {
            type: a.PlatformTypes.BATTLENET,
            name: "Battle.net",
            color: s.default.unsafe_rawColors.BATTLENET.css,
            icon: {
              lightPNG: n("194175"),
              darkPNG: n("194175"),
              whitePNG: n("159142"),
              lightSVG: n("35024"),
              darkSVG: n("35024"),
              whiteSVG: n("671223"),
            },
            enabled: !0,
          },
          {
            type: a.PlatformTypes.SKYPE,
            name: "Skype",
            color: s.default.unsafe_rawColors.SKYPE.css,
            icon: {
              lightPNG: n("992221"),
              darkPNG: n("992221"),
              whitePNG: n("731368"),
              lightSVG: n("894025"),
              darkSVG: n("894025"),
              whiteSVG: n("645496"),
            },
            enabled: !1,
            getPlatformUserUrl: e => {
              let { id: t } = e;
              return "skype:".concat(encodeURIComponent(t), "?userinfo");
            },
          },
          {
            type: a.PlatformTypes.LEAGUE_OF_LEGENDS,
            name: "League of Legends",
            color: s.default.unsafe_rawColors.LOL.css,
            icon: {
              lightPNG: n("530354"),
              darkPNG: n("530354"),
              whitePNG: n("925382"),
              lightSVG: n("667083"),
              darkSVG: n("667083"),
              whiteSVG: n("509949"),
            },
            enabled: !0,
          },
          {
            type: a.PlatformTypes.STEAM,
            name: "Steam",
            color: s.default.unsafe_rawColors.STEAM.css,
            icon: {
              lightPNG: n("777626"),
              darkPNG: n("877414"),
              whitePNG: n("877414"),
              lightSVG: n("566035"),
              darkSVG: n("309663"),
              whiteSVG: n("309663"),
            },
            enabled: !0,
            getPlatformUserUrl: e => {
              let { id: t } = e;
              return "https://steamcommunity.com/profiles/".concat(
                encodeURIComponent(t)
              );
            },
            hasMetadata: !0,
          },
          {
            type: a.PlatformTypes.REDDIT,
            name: "Reddit",
            color: s.default.unsafe_rawColors.REDDIT.css,
            icon: {
              lightPNG: n("373338"),
              darkPNG: n("373338"),
              whitePNG: n("479111"),
              lightSVG: n("977001"),
              darkSVG: n("977001"),
              whiteSVG: n("592466"),
            },
            enabled: !0,
            getPlatformUserUrl: e => {
              let { name: t } = e;
              return "https://www.reddit.com/u/".concat(encodeURIComponent(t));
            },
            hasMetadata: !0,
          },
          {
            type: a.PlatformTypes.FACEBOOK,
            name: "Facebook",
            color: s.default.unsafe_rawColors.FACEBOOK.css,
            icon: {
              lightPNG: n("879157"),
              darkPNG: n("879157"),
              whitePNG: n("259168"),
              lightSVG: n("870064"),
              darkSVG: n("870064"),
              whiteSVG: n("735638"),
            },
            enabled: !0,
          },
          {
            type: a.PlatformTypes.TWITTER_LEGACY,
            name: "Twitter",
            color: s.default.unsafe_rawColors.TWITTER.css,
            icon: {
              lightPNG: n("122630"),
              darkPNG: n("122630"),
              whitePNG: n("961232"),
              lightSVG: n("372786"),
              darkSVG: n("372786"),
              whiteSVG: n("387628"),
            },
            enabled: !1,
            getPlatformUserUrl: e => {
              let { name: t } = e;
              return "https://twitter.com/".concat(encodeURIComponent(t));
            },
            domains: ["twitter.com"],
            hasMetadata: !0,
          },
          {
            type: a.PlatformTypes.TWITTER,
            name: "X",
            color: s.default.unsafe_rawColors.TWITTER.css,
            icon: {
              lightPNG: n("483819"),
              darkPNG: n("980576"),
              whitePNG: n("192473"),
              lightSVG: n("955307"),
              darkSVG: n("552995"),
              whiteSVG: n("312139"),
            },
            enabled: !0,
            getPlatformUserUrl: e => {
              let { name: t } = e;
              return "https://x.com/".concat(encodeURIComponent(t));
            },
            domains: ["x.com"],
            hasMetadata: !0,
          },
          {
            type: a.PlatformTypes.SPOTIFY,
            name: "Spotify",
            color: s.default.unsafe_rawColors.SPOTIFY.css,
            icon: {
              lightPNG: n("561050"),
              darkPNG: n("561050"),
              whitePNG: n("618077"),
              lightSVG: n("630528"),
              darkSVG: n("630528"),
              whiteSVG: n("662418"),
            },
            enabled: !0,
            getPlatformUserUrl: e => {
              let { id: t } = e;
              return "https://open.spotify.com/user/".concat(
                encodeURIComponent(t)
              );
            },
          },
          {
            type: a.PlatformTypes.XBOX,
            name: "Xbox",
            color: s.default.unsafe_rawColors.XBOX.css,
            icon: {
              lightPNG: n("599004"),
              darkPNG: n("956204"),
              whitePNG: n("956204"),
              lightSVG: n("713106"),
              darkSVG: n("946662"),
              whiteSVG: n("946662"),
              customPNG: n("272378"),
            },
            enabled: !0,
          },
          {
            type: a.PlatformTypes.SAMSUNG,
            name: "Samsung Galaxy",
            color: s.default.unsafe_rawColors.SAMSUNG.css,
            icon: {
              lightPNG: n("768935"),
              darkPNG: n("768935"),
              whitePNG: n("629132"),
              lightSVG: n("869872"),
              darkSVG: n("869872"),
              whiteSVG: n("301098"),
            },
            enabled: !1,
          },
          {
            type: a.PlatformTypes.GITHUB,
            name: "GitHub",
            color: s.default.unsafe_rawColors.GITHUB.css,
            icon: {
              lightPNG: n("321223"),
              darkPNG: n("646994"),
              whitePNG: n("646994"),
              lightSVG: n("94470"),
              darkSVG: n("375518"),
              whiteSVG: n("375518"),
            },
            enabled: !0,
            getPlatformUserUrl: e => {
              let { name: t } = e;
              return "https://github.com/".concat(encodeURIComponent(t));
            },
            domains: ["github.com"],
          },
          {
            type: a.PlatformTypes.PLAYSTATION,
            name: "PlayStation Network",
            color: s.default.unsafe_rawColors.PLAYSTATION.css,
            icon: {
              lightPNG: n("322246"),
              darkPNG: n("964854"),
              whitePNG: n("964854"),
              lightSVG: n("154849"),
              darkSVG: n("895661"),
              whiteSVG: n("895661"),
            },
            enabled: !0,
          },
          {
            type: a.PlatformTypes.PLAYSTATION_STAGING,
            name: "PlayStation Network (Staging)",
            color: s.default.unsafe_rawColors.PLAYSTATION.css,
            icon: {
              lightPNG: n("964854"),
              darkPNG: n("322246"),
              whitePNG: n("322246"),
              lightSVG: n("895661"),
              darkSVG: n("154849"),
              whiteSVG: n("154849"),
            },
            enabled: !1,
          },
          {
            type: a.PlatformTypes.EPIC_GAMES,
            name: "Epic Games",
            icon: {
              lightPNG: n("1308"),
              darkPNG: n("396128"),
              whitePNG: n("396128"),
              lightSVG: n("746621"),
              darkSVG: n("497894"),
              whiteSVG: n("497894"),
            },
            enabled: !0,
          },
          {
            type: a.PlatformTypes.RIOT_GAMES,
            name: "Riot Games",
            icon: {
              lightPNG: n("300525"),
              darkPNG: n("300525"),
              whitePNG: n("501653"),
              lightSVG: n("704777"),
              darkSVG: n("704777"),
              whiteSVG: n("940593"),
            },
            enabled: !0,
          },
          {
            type: a.PlatformTypes.PAYPAL,
            name: "PayPal",
            icon: {
              lightPNG: n("347775"),
              darkPNG: n("347775"),
              whitePNG: n("770624"),
              lightSVG: n("524855"),
              darkSVG: n("524855"),
              whiteSVG: n("209560"),
            },
            enabled: !0,
            hasMetadata: !0,
          },
          {
            type: a.PlatformTypes.EBAY,
            name: "eBay",
            icon: {
              lightPNG: n("14366"),
              darkPNG: n("14366"),
              whitePNG: n("994873"),
              lightSVG: n("286611"),
              darkSVG: n("286611"),
              whiteSVG: n("376998"),
            },
            enabled: !0,
            hasMetadata: !0,
            getPlatformUserUrl: e => {
              let { name: t } = e;
              return "https://www.ebay.com/usr/".concat(encodeURIComponent(t));
            },
          },
          {
            type: a.PlatformTypes.TIKTOK,
            name: "TikTok",
            icon: {
              lightPNG: n("482311"),
              darkPNG: n("196135"),
              whitePNG: n("196135"),
              lightSVG: n("204844"),
              darkSVG: n("793866"),
              whiteSVG: n("793866"),
            },
            enabled: !0,
            hasMetadata: !0,
            getPlatformUserUrl: e => {
              let { name: t } = e;
              return "https://www.tiktok.com/@".concat(encodeURIComponent(t));
            },
          },
          {
            type: a.PlatformTypes.INSTAGRAM,
            name: "Instagram",
            icon: {
              lightPNG: n("299059"),
              darkPNG: n("299059"),
              whitePNG: n("612315"),
              lightSVG: n("496955"),
              darkSVG: n("496955"),
              whiteSVG: n("152071"),
            },
            enabled: !0,
            getPlatformUserUrl: e => {
              let { name: t } = e;
              return "https://www.instagram.com/".concat(encodeURIComponent(t));
            },
          },
          {
            type: a.PlatformTypes.CRUNCHYROLL,
            name: "Crunchyroll",
            color: s.default.unsafe_rawColors.CRUNCHYROLL.css,
            icon: {
              lightPNG: n("211689"),
              darkPNG: n("211689"),
              whitePNG: n("211689"),
              lightSVG: n("350043"),
              darkSVG: n("350043"),
              whiteSVG: n("698833"),
            },
            enabled: !0,
          },
          {
            type: a.PlatformTypes.DOMAIN,
            name: "Domain",
            icon: {
              lightPNG: n("145159"),
              darkPNG: n("523403"),
              whitePNG: n("523403"),
              lightSVG: n("994912"),
              darkSVG: n("153846"),
              whiteSVG: n("153846"),
            },
            getPlatformUserUrl: e => {
              let { id: t } = e;
              return "https://".concat(t, "/");
            },
            enabled: !0,
          },
        ],
        l = r.keyBy(o, "type"),
        u = {};
      o.forEach(e => {
        var t;
        null === (t = e.domains) ||
          void 0 === t ||
          t.forEach(t => {
            u[t] = e;
          });
      });
      var c = {
        get(e) {
          var t;
          return null !== (t = l[e]) && void 0 !== t ? t : null;
        },
        getByUrl(e) {
          let t = new URL(e),
            n = t.hostname,
            i = n.startsWith("www.") ? n.slice(4) : n;
          return u[i];
        },
        isSupported: e => Object.prototype.hasOwnProperty.call(l, e),
        map: e => o.map(e),
        filter(e) {
          let t = o.filter(e);
          return (
            t.sort((e, t) => {
              let { name: n } = e,
                { name: i } = t;
              return n.localeCompare(i);
            }),
            t
          );
        },
        find: e => o.find(e),
      };
    },
    70513: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        }),
        n("70102");
      var i = n("605250"),
        r = n("773336"),
        s = n("49671");
      let a = new i.default("ProgressBarManager");
      var o = new (class e {
        setProgress(e, t) {
          if (!(0, r.isDesktop)())
            throw Error("cannot set progress from non-native");
          if (null != this.taskID && this.taskID !== e) {
            a.warn(
              ""
                .concat(this.taskID, " is already running. cannot set ")
                .concat(e)
            );
            return;
          }
          (this.taskID = e), s.default.window.setProgressBar(t);
        }
        clearProgress(e) {
          if (!(0, r.isDesktop)())
            throw Error("cannot clear progress from non-native");
          if (null == this.taskID) {
            a.warn("cannot clear progress. No current progress running.");
            return;
          }
          if (this.taskID !== e) {
            a.warn(
              "cannot clear progress of "
                .concat(e, " when ")
                .concat(this.taskID, " is running")
            );
            return;
          }
          (this.taskID = null), s.default.window.setProgressBar(-1);
        }
      })();
    },
    43982: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return S;
          },
        }),
        n("70102");
      var i = n("44170"),
        r = n("597755"),
        s = n.n(r),
        a = n("522632"),
        o = n("748820"),
        l = n("872717"),
        u = n("861309"),
        c = n("49111");
      let d = c.RPC_STARTING_PORT + c.RPC_PORT_RANGE - 1;
      function f(e, t) {
        if (null == e || null == t) throw Error("cmd and name required");
        return "".concat(e, ":").concat(t);
      }
      let E = a.parse(location.search.slice(1)),
        p = parseInt(
          null != E.rpc && "" !== E.rpc ? E.rpc : c.RPC_STARTING_PORT,
          10
        ),
        h = null;
      class _ extends i.EventEmitter {
        get port() {
          return p;
        }
        get connected() {
          return null != h && h.readyState === WebSocket.OPEN;
        }
        connect() {
          if (null == h) {
            if (p > d) {
              (p = c.RPC_STARTING_PORT), this.emit("disconnected");
              return;
            }
            try {
              h = new WebSocket(
                "ws://127.0.0.1:"
                  .concat(this.port, "/?v=")
                  .concat(c.RPC_VERSION)
              );
            } catch (e) {
              this.disconnect({ code: c.RPCCloseCodes.CLOSE_ABNORMAL });
              return;
            }
            null != h &&
              ((h.onmessage = e => {
                let t;
                try {
                  if ("string" == typeof e.data) t = JSON.parse(e.data);
                  else throw Error("payload data not a string");
                } catch (e) {
                  this.emit("error", e), this.disconnect();
                  return;
                }
                let { cmd: n, evt: i, nonce: r, data: s } = t;
                if (n === c.RPCCommands.DISPATCH) {
                  if (i === c.RPCEvents.READY) {
                    this.emit("connected");
                    return;
                  }
                  if (i === c.RPCEvents.ERROR) {
                    this.emit(
                      "error",
                      new u.default({ errorCode: s.code }, s.message)
                    ),
                      this.disconnect();
                    return;
                  }
                  this.emit(f(n, i), s);
                  return;
                }
                let a = null;
                i === c.RPCEvents.ERROR &&
                  ((a = new u.default({ errorCode: s.code }, s.message)),
                  (s = null)),
                  this.emit(f(n, r), a, s);
              }),
              (h.onclose = h.onerror = e => this.disconnect(e)));
          }
        }
        disconnect(e) {
          if (
            null != e &&
            "code" in e &&
            [
              c.RPCCloseCodes.CLOSE_ABNORMAL,
              c.RPCCloseCodes.INVALID_CLIENTID,
            ].includes(e.code)
          ) {
            p++, (h = null), this.connect();
            return;
          }
          null != h && (this.emit("disconnected"), h.close(), (h = null));
        }
        subscribe(e, t, n) {
          return (
            this.on(f(c.RPCCommands.DISPATCH, e), n),
            this.request(c.RPCCommands.SUBSCRIBE, t, e)
          );
        }
        unsubscribe(e, t, n) {
          return (
            this.removeListener(f(c.RPCCommands.DISPATCH, e), n),
            this.request(c.RPCCommands.UNSUBSCRIBE, t, e)
          );
        }
        request(e, t, n) {
          return new Promise((i, r) => {
            if (!this.connected) {
              this.once("connected", () => {
                this.removeAllListeners("disconnected"),
                  i(this.request(e, t, n));
              }),
                this.once("disconnected", () => {
                  this.removeAllListeners("connected"),
                    r(Error("disconnected during request"));
                }),
                this.connect();
              return;
            }
            let s = (0, o.v4)(),
              a = JSON.stringify({ cmd: e, args: t, evt: n, nonce: s });
            this.once(f(e, s), (e, t) => (null != e ? r(e) : i(t))),
              null == h || h.send(a);
          });
        }
        requestOnce(e, t, n) {
          return l.default
            .post({
              url: "http://127.0.0.1:"
                .concat(this.port, "/rpc?v=")
                .concat(c.RPC_VERSION),
              body: { cmd: e, args: t, evt: n, nonce: (0, o.v4)() },
            })
            .then(e => {
              let {
                body: { evt: t, data: n },
              } = e;
              if (t === c.RPCEvents.ERROR)
                throw new u.default({ errorCode: n.code }, n.message);
              return n;
            });
        }
        requestRedirect(e, t, n) {
          if ("Chrome" === s.name && parseInt(s.version, 10) >= 58)
            return this.requestOnce(e, t, n);
          let i = encodeURIComponent(
              JSON.stringify({ cmd: e, args: t, evt: n, nonce: (0, o.v4)() })
            ),
            r = encodeURIComponent(
              ""
                .concat(location.protocol, "//")
                .concat(location.host)
                .concat(location.pathname, "?done=true")
            );
          return (
            window.open(
              "http://127.0.0.1:"
                .concat(this.port, "/rpc?v=")
                .concat(c.RPC_VERSION, "&payload=")
                .concat(i, "&callback=")
                .concat(r),
              "_self"
            ),
            new Promise(() => null)
          );
        }
      }
      var S = new _();
    },
    199948: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("424973"),
        n("222007");
      var i,
        r = n("917351"),
        s = n.n(r);
      let a = [];
      i = class e {
        static create() {
          let t = new e();
          return a.push(t), t.record;
        }
        getTotalBytes() {
          return s.sum(Object.values(this.bytes));
        }
        constructor() {
          (this.bytes = {}),
            (this.record = e => {
              if (null != e) {
                for (let t in e.rtp.inbound) {
                  let n = e.rtp.inbound[t];
                  for (let e of n) {
                    let n = "inbound-".concat(t, "-").concat(e.type);
                    !(n in this.bytes) && (this.bytes[n] = 0),
                      (this.bytes[n] = e.bytesReceived);
                  }
                }
                for (let t of e.rtp.outbound) {
                  let e = "outbound-".concat(t.type);
                  !(e in this.bytes) && (this.bytes[e] = 0),
                    (this.bytes[e] = t.bytesSent);
                }
              }
            });
        }
      };
    },
    997722: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        }),
        n("70102"),
        n("808653"),
        n("424973"),
        n("222007");
      var i,
        r,
        s = n("552442"),
        a = n.n(s),
        o = n("210696"),
        l = n.n(o),
        u = n("746379"),
        c = n.n(u),
        d = n("748820"),
        f = n("981980"),
        E = n("595275"),
        p = n("773364"),
        h = n("398183"),
        _ = n("913144"),
        S = n("673777"),
        m = n("605250"),
        T = n("808122"),
        g = n("601222"),
        I = n("967039"),
        C = n("81734"),
        v = n("813067"),
        A = n("694845"),
        R = n("311482"),
        N = n("834604"),
        O = n("355014");
      n("222920");
      var D = n("901946"),
        y = n("42203"),
        P = n("42887"),
        L = n("661919"),
        b = n("590401"),
        M = n("599110"),
        U = n("35468"),
        G = n("773336"),
        w = n("49671"),
        k = n("199948"),
        x = n("422791"),
        F = n("642099"),
        V = n("417040"),
        B = n("716380"),
        H = n("157547"),
        j = n("88313"),
        Y = n("531748"),
        W = n("760406"),
        K = n("478696"),
        z = n("49111"),
        q = n("353927");
      let X = /^https/.test(((i = "https:"), "https:")) ? "wss:" : "ws:";
      r = class extends E.default {
        get quality() {
          let e = this.getLastPing();
          if (
            this.state !== z.RTCConnectionStates.RTC_CONNECTED ||
            void 0 === e
          )
            return z.RTCConnectionQuality.UNKNOWN;
          if (
            e > 500 ||
            (null != this._outboundLossRate && this._outboundLossRate > 10)
          )
            return z.RTCConnectionQuality.BAD;
          if (
            e > 250 ||
            (null != this._outboundLossRate && this._outboundLossRate > 5)
          )
            return z.RTCConnectionQuality.AVERAGE;
          else return z.RTCConnectionQuality.FINE;
        }
        get endpoint() {
          return this._endpoint;
        }
        set endpoint(e) {
          if (null == e) (this._endpoint = null), (this.hostname = null);
          else {
            e = "".concat(X, "//").concat(e);
            let { hostname: t, port: n } = c.parse(e),
              i = null != n ? parseInt(n) : NaN;
            null != t &&
              (80 === i || 443 === i) &&
              (e = "".concat(X, "//").concat(t)),
              (this._endpoint = e + "/"),
              (this.hostname = t);
          }
        }
        connect(e, t) {
          if (this._destroyed)
            throw Error(
              "RTCConnection.connect(...): Attempting to connect on destroyed instance."
            );
          this._backoff.cancel();
          let { endpoint: n, token: i } = this;
          if (
            ((this.endpoint = e),
            (this.token = t),
            (n !== this.endpoint || i !== t) &&
              (this._cleanupSocket(),
              (this._mediaSessionId = null),
              null != n &&
                ((this._rtcConnectionId = (0, d.v4)()),
                _.default.dispatch({
                  type: "RTC_CONNECTION_UPDATE_ID",
                  connection: this,
                }))),
            null == this.endpoint)
          ) {
            this.setState(z.RTCConnectionStates.AWAITING_ENDPOINT);
            return;
          }
          let r = this._socket;
          null != r && this._cleanupSocket(),
            (r = this._socket = new V.default(this.endpoint)).on(
              V.SocketEvent.Connecting,
              this._handleConnecting.bind(this, r)
            ),
            r.on(V.SocketEvent.Connect, this._handleConnect.bind(this, r)),
            r.on(
              V.SocketEvent.Disconnect,
              this._handleDisconnect.bind(this, r)
            ),
            r.on(V.SocketEvent.Resuming, this._handleResuming.bind(this, r)),
            r.on(V.SocketEvent.Ready, this._handleReady.bind(this, r)),
            r.on(V.SocketEvent.Speaking, this._handleSpeaking.bind(this, r)),
            r.on(V.SocketEvent.Video, this._handleVideo.bind(this, r)),
            r.on(V.SocketEvent.Ping, this._handleControlPing.bind(this)),
            r.on(
              V.SocketEvent.ClientDisconnect,
              this._handleClientDisconnect.bind(this)
            ),
            r.on(V.SocketEvent.Codecs, this._handleCodecs.bind(this)),
            r.on(
              V.SocketEvent.MediaSessionId,
              this._handleMediaSessionId.bind(this)
            ),
            r.on(
              V.SocketEvent.MediaSinkWants,
              this._handleMediaSinkWants.bind(this)
            ),
            r.on(
              V.SocketEvent.VoiceBackendVersion,
              this._handleCodeVersion.bind(this)
            ),
            r.on(
              V.SocketEvent.KeyframeInterval,
              this._handleKeyframeInterval.bind(this)
            ),
            r.on(
              V.SocketEvent.ChannelOptionsUpdateRtcLog,
              this._handleUpdateRtcLog.bind(this)
            ),
            r.on(V.SocketEvent.Flags, this.handleFlags.bind(this)),
            r.on(V.SocketEvent.Platform, this.handlePlatform.bind(this)),
            r.on(
              V.SocketEvent.BandwidthEstimationExperiment,
              this._handleBandwidthEstimationExperiment.bind(this)
            ),
            r.on(
              V.SocketEvent.SecureFramesInit,
              this._handleSecureFramesInit.bind(this)
            ),
            r.on(
              V.SocketEvent.SecureFramesPrepareTransition,
              this._handleSecureFramesPrepareTransition.bind(this)
            ),
            r.on(
              V.SocketEvent.SecureFramesPrepareEpoch,
              this._handleSecureFramesPrepareEpoch.bind(this)
            ),
            r.on(
              V.SocketEvent.SecureFramesExecuteTransition,
              this._handleSecureFramesExecuteTransition.bind(this)
            ),
            r.on(
              V.SocketEvent.MLSExternalSenderPackage,
              this._handleMLSExternalSenderPackage.bind(this)
            ),
            r.on(
              V.SocketEvent.MLSProposals,
              this._handleMLSProposals.bind(this, r)
            ),
            r.on(
              V.SocketEvent.MLSPrepareCommitTransition,
              this._handleMLSPrepareCommitTransition.bind(this)
            ),
            r.on(V.SocketEvent.MLSWelcome, this._handleMLSWelcome.bind(this)),
            (this._connectStartTime = (0, h.now)()),
            this._connectCount++,
            (this._connecting = !0),
            null != r &&
              this._socket === r &&
              (this._trackVoiceConnectionConnecting(),
              (this._encountered_socket_failure = !1),
              r.connect());
        }
        destroy() {
          var e, t, n, i, r;
          if (
            (this.logger.info("Destroy RTCConnection"),
            U.default.removeOnlineCallback(this._handleNetworkOnline),
            U.default.removeOfflineCallback(this._handleNetworkOffline),
            (0, G.isDesktop)() &&
              (null === (r = this.powerMonitorListener) ||
                void 0 === r ||
                r.call(this)),
            this._backoff.cancel(),
            this._cleanupSocket(),
            null === (e = this._voiceQuality) || void 0 === e || e.stop(),
            (this._voiceQuality = null),
            clearInterval(this._voiceQualityPeriodicStatsInterval),
            (this._voiceQualityPeriodicStatsInterval = null),
            (this._voiceQualityPeriodicStatsSequenceId = 0),
            null === (t = this._voiceDuration) || void 0 === t || t.stop(),
            (this._voiceDuration = null),
            null === (n = this._videoQuality) || void 0 === n || n.stop(),
            (this._videoQuality = null),
            (this._videoHealthManager = null),
            null === (i = this._localMediaSinkWantsManager) ||
              void 0 === i ||
              i.reset(),
            null != this._connection)
          ) {
            let e = this._connection;
            (this._connection = null), e.destroy();
          }
          this.removeAllListeners(), (this._destroyed = !0);
        }
        sendSpeaking(e, t) {
          let n = this._socket;
          if (null != n) {
            let i = P.default.getPacketDelay();
            n.speaking(e, i, t);
          }
        }
        sendVideo(e, t, n, i) {
          let r = this._socket;
          null != r &&
            (0 !== t && (this._sentVideo = !0),
            this._sentVideo && r.video(e, t, n, i));
        }
        getPings() {
          return this._pings;
        }
        getAveragePing() {
          let e = this._pings.slice(0, Math.min(this._pings.length, 20));
          return 0 === e.length || null == this._socket
            ? 0
            : e.reduce((e, t) => e + t.value, 0) / e.length;
        }
        getLastPing() {
          var e;
          return null === (e = this._pings[this._pings.length - 1]) ||
            void 0 === e
            ? void 0
            : e.value;
        }
        getOutboundLossRate() {
          return this._outboundLossRate;
        }
        getMediaSessionId() {
          return this._mediaSessionId;
        }
        getRTCConnectionId() {
          return this._rtcConnectionId;
        }
        getVoiceVersion() {
          return this.voiceVersion;
        }
        getRtcWorkerVersion() {
          return this.rtcWorkerVersion;
        }
        getDuration() {
          let e =
            this._connectCompletedTime > 0
              ? (0, h.now)() - this._connectCompletedTime
              : 0;
          return e > 0 ? e : 0;
        }
        getPacketStats() {
          var e;
          return null === (e = this._voiceQuality) || void 0 === e
            ? void 0
            : e.getPacketStats();
        }
        getCreatedTime() {
          return this._createdTime;
        }
        getVideoHealthManager() {
          return this._videoHealthManager;
        }
        getBandwidthEstimationExperiment() {
          return this._bandwidthEstimationExperiment;
        }
        pauseStatsCollectionForUser(e, t) {
          let n = this.getOrCreateVideoQuality();
          if (null == n) {
            this.logger.error(
              "pauseStatsCollectionForUser: Unable to create videoQuality."
            );
            return;
          }
          t
            ? n.addUserToStatsCollectionPausedSet(e)
            : n.removeUserFromStatsCollectionPausedSet(e);
        }
        setState(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
          this.logger.info(
            "RTC connection state: ".concat(this.state, " => ").concat(e)
          ),
            (this.state = e),
            this.stateHistory.update(this.state),
            this.emit(
              x.RTCConnectionEvent.State,
              e,
              {
                hostname: this.hostname,
                channelId: this.trueChannelId,
                context: this.context,
                rtcLogEphemeralKey: this.rtcLogEphemeralKey,
              },
              t
            );
        }
        expeditedHeartbeat(e) {
          let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : "",
            n =
              !(arguments.length > 2) ||
              void 0 === arguments[2] ||
              arguments[2],
            i = this._socket;
          null != i && i.expeditedHeartbeat(e, t, n) && this._backoff.cancel();
        }
        resetBackoff() {
          let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "",
            t = this._socket;
          null != t && t.resetBackoff(e) && this._backoff.cancel();
        }
        setAppBackgrounded(e, t) {
          var n;
          null === (n = this._localMediaSinkWantsManager) ||
            void 0 === n ||
            n.setAppBackgrounded(e, t);
        }
        setSelectedParticipant(e) {
          var t;
          null === (t = this._localMediaSinkWantsManager) ||
            void 0 === t ||
            t.setSelectedParticipant(e);
        }
        setPipOpen(e) {
          var t;
          null === (t = this._localMediaSinkWantsManager) ||
            void 0 === t ||
            t.setPipOpen(e);
        }
        setRtcLogMarker(e) {
          var t;
          null === (t = this._connection) ||
            void 0 === t ||
            t.setRtcLogMarker(e);
        }
        setClipRecordUser(e, t, n) {
          var i;
          null === (i = this._connection) ||
            void 0 === i ||
            i.setClipRecordUser(e, t, n);
        }
        set channelId(e) {
          (this._channelId = e), this.channelIds.add(e);
        }
        get channelId() {
          return this._channelId;
        }
        get trueChannelId() {
          return null != this.rtcServerId
            ? a(this.rtcServerId).prev().toString()
            : this.channelId;
        }
        _cleanupSocket() {
          let e = this._socket;
          null != e &&
            (e.close(), e.removeAllListeners(), (this._socket = null));
        }
        _chooseExperiments(e) {
          let t = [];
          if (
            (this._recordingEnabled && t.push("connection_log"),
            P.default.supports(q.Features.FIXED_KEYFRAME_INTERVAL) &&
              t.push("fixed_keyframe_interval"),
            0 !== this._supportedBandwidthEstimationExperiments.length)
          ) {
            let { enabled: e, fullname: n } = I.default.getConfig(
              !0,
              this._supportedBandwidthEstimationExperiments
            );
            e && t.push(n);
          }
          this._selectedExperiments = t;
        }
        _handleConnecting(e) {
          null != this.endpoint &&
            this.logger.info(
              "Connecting to RTC server "
                .concat(this.endpoint, ", rtc-connection-id: ")
                .concat(this.getRTCConnectionId())
            ),
            this.setState(z.RTCConnectionStates.CONNECTING);
        }
        _handleConnect(e) {
          var t, n;
          let i = this.token;
          if (null == i)
            throw Error("RTCConnection._handleConnect(...): Token is missing.");
          this.logger.info("Connected to RTC server."),
            e.identify({
              serverId:
                null !==
                  (n =
                    null !== (t = this.rtcServerId) && void 0 !== t
                      ? t
                      : this.guildId) && void 0 !== n
                  ? n
                  : this.channelId,
              userId: this.userId,
              sessionId: this.sessionId,
              token: i,
              maxSecureFramesVersion:
                P.default.getSupportedSecureFramesProtocolVersion(this.guildId),
              video: P.default.supports(q.Features.VIDEO),
              streamParameters: P.default.getVideoStreamParameters(
                this.context
              ),
            }),
            this.setState(z.RTCConnectionStates.AUTHENTICATING);
        }
        _handleDisconnect(e, t, n, i) {
          var r, s, a, o, l;
          this.logger.info(
            "Disconnected from RTC server, clean: "
              .concat(t, ", code: ")
              .concat(n, ", reason: ")
              .concat(i, ", state: ")
              .concat(this.state)
          ),
            !t &&
              this._connecting &&
              !this._encountered_socket_failure &&
              (M.default.track(
                z.AnalyticEvents.VOICE_CONNECTION_SOCKET_FAILURE,
                {
                  ...this._getAnalyticsProperties(),
                  hostname: this.hostname,
                  connect_count: this._connectCount,
                  code: n,
                  reason: i,
                }
              ),
              (this._encountered_socket_failure = !0));
          let u = "Force Close" !== i;
          if (u) {
            let e = this._backoff.fail(this.reconnect);
            this.logger.warn(
              "Disconnect was not clean! reason="
                .concat(i, ". Reconnecting in ")
                .concat((e / 1e3).toFixed(2), " seconds.")
            );
          }
          if (this.state !== z.RTCConnectionStates.DISCONNECTED) {
            let e = this._videoQuality;
            if (
              null != e &&
              this.context === q.MediaEngineContextTypes.DEFAULT
            ) {
              if ((e.stop(), this._sentVideo)) {
                let t = e.getOutboundStats();
                t.forEach(t => {
                  var n;
                  let r = null !== (n = t.num_frames) && void 0 !== n ? n : 0;
                  r > 0 &&
                    M.default.track(z.AnalyticEvents.VIDEO_STREAM_ENDED, {
                      ...this._getAnalyticsProperties(),
                      media_session_id: this.getMediaSessionId(),
                      sender_user_id: this.userId,
                      reason: i,
                      participant_type: "sender",
                      guild_region: b.default.getRegion(this.hostname),
                      hostname: this.hostname,
                      ...t,
                      ...e.getNetworkStats(),
                      ...e.getCodecUsageStats("sender", this.userId),
                      ...this._soundshareStats.getStats(),
                      device_performance_class: (0,
                      T.getMediaPerformanceClass)(),
                    });
                });
              }
              let t = e.getInboundParticipants();
              t.forEach(t => {
                var n;
                let r = e.getInboundStats(t),
                  s =
                    null !== (n = null == r ? void 0 : r.num_frames) &&
                    void 0 !== n
                      ? n
                      : 0;
                s > 0 &&
                  M.default.track(z.AnalyticEvents.VIDEO_STREAM_ENDED, {
                    ...this._getAnalyticsProperties(),
                    media_session_id: this.getMediaSessionId(),
                    sender_user_id: t,
                    reason: i,
                    participant_type: "receiver",
                    guild_region: b.default.getRegion(this.hostname),
                    hostname: this.hostname,
                    ...r,
                    ...e.getNetworkStats(),
                    ...e.getCodecUsageStats("receiver", t),
                  });
              });
            }
            let t = b.default.shouldIncludePreferredRegion()
                ? b.default.getPreferredRegion()
                : null,
              n = P.default.getSettings(),
              r = y.default.getChannel(this.channelId);
            M.default.track(z.AnalyticEvents.VOICE_DISCONNECT, {
              ...this._getAnalyticsProperties(),
              hostname: this.hostname,
              port: this.port,
              protocol: this.protocol,
              reconnect: u,
              reason: i,
              duration: this.getDuration(),
              ...(null != this._voiceQuality
                ? this._voiceQuality.getMosStats()
                : null),
              ...(null != this._voiceQuality
                ? this._voiceQuality.getPacketStats()
                : null),
              ...(null != this._voiceQuality
                ? this._voiceQuality.getBytesStats()
                : null),
              ...(null != this._voiceQuality
                ? this._voiceQuality.getBufferStats()
                : null),
              ...(null != this._voiceQuality
                ? this._voiceQuality.getNetworkStats()
                : null),
              ...(null != this._voiceQuality
                ? this._voiceQuality.getFrameOpStats()
                : null),
              ...(null != this._voiceQuality
                ? this._voiceQuality.getDurationStats()
                : null),
              ...(null != this._voiceQuality
                ? this._voiceQuality.getTransportStats()
                : null),
              ...(null != this._voiceQuality
                ? this._voiceQuality.getE2EEStats()
                : null),
              ...(null != this._voiceDuration
                ? this._voiceDuration.getDurationStats()
                : null),
              media_session_id: this.getMediaSessionId(),
              channel_bitrate: null != r ? r.bitrate : null,
              cloudflare_best_region: t,
              connect_count: this._connectCount,
              ping_average: Math.round(this.getAveragePing()),
              ping_bad_count: this._pingBadCount,
              ping_timeout: this._pingTimeouts.length,
              input_detected: this._inputDetected,
              no_input_detected_notice: P.default.getNoInputDetectedNotice(),
              audio_input_mode: n.mode,
              automatic_audio_input_sensitivity_enabled:
                n.modeOptions.autoThreshold,
              audio_input_sensitivity: n.modeOptions.threshold,
              echo_cancellation_enabled: n.echoCancellation,
              noise_suppression_enabled: n.noiseSuppression,
              noise_cancellation_enabled: n.noiseCancellation,
              automatic_gain_control_enabled: n.automaticGainControl,
              voice_output_volume: n.outputVolume,
              encryption_mode: this._encryptionMode,
              channel_count: this.channelIds.size,
              input_device: this.getInputDeviceName(),
              output_device: this.getOutputDeviceName(),
              device_performance_class: (0, T.getMediaPerformanceClass)(),
              num_fast_udp_reconnects:
                null != this._connection
                  ? null === (l = this._connection) || void 0 === l
                    ? void 0
                    : l.getNumFastUdpReconnects()
                  : null,
              parent_media_session_id: this.parentMediaSessionId,
            });
            let s = this.getMediaSessionId();
            P.default
              .getMediaEngine()
              .getCodecSurvey()
              .then(e => {
                let t = JSON.parse(e);
                if (
                  null == t ||
                  null == t.available_video_encoders ||
                  null == t.available_video_decoders
                )
                  throw Error("codec survey is not available");
                M.default.track(z.AnalyticEvents.VOICE_CODEC_DETECTED, {
                  ...t,
                  rtc_connection_id: this.getRTCConnectionId(),
                  media_session_id: s,
                });
              })
              .catch(e => {
                this.logger.warn(e);
              });
          }
          if (
            ((this._pingTimeouts = []),
            (this._pings = []),
            (this._connectCompletedTime = 0),
            (this._pingBadCount = 0),
            (this._inputDetected = !1),
            (this._mediaSessionId = null),
            null === (r = this._voiceQuality) || void 0 === r || r.stop(),
            (this._voiceQuality = null),
            clearInterval(this._voiceQualityPeriodicStatsInterval),
            (this._voiceQualityPeriodicStatsInterval = null),
            (this._voiceQualityPeriodicStatsSequenceId = 0),
            null === (s = this._voiceDuration) || void 0 === s || s.stop(),
            (this._voiceDuration = null),
            null === (a = this._videoQuality) || void 0 === a || a.stop(),
            (this._videoQuality = null),
            (this._videoHealthManager = null),
            null === (o = this._localMediaSinkWantsManager) ||
              void 0 === o ||
              o.reset(),
            null != this._connection)
          ) {
            let e = this._connection;
            (this._connection = null), e.destroy();
          }
          this.setState(z.RTCConnectionStates.DISCONNECTED, {
            willReconnect: u,
          });
        }
        _handleResuming(e) {
          var t, n;
          null === (t = this._connection) ||
            void 0 === t ||
            t.fastUdpReconnect(),
            null === (n = this._connection) ||
              void 0 === n ||
              n.clearAllSpeaking();
        }
        _handleReady(e, t, n, i, r, s, a) {
          var o;
          this.setState(z.RTCConnectionStates.RTC_CONNECTING),
            (this.port = n),
            null != a && this._chooseExperiments(a),
            0 === s.length &&
              s.push({
                type: q.MediaTypes.VIDEO,
                rid: "100",
                ssrc: r + 1,
                rtxSsrc: r + 2,
                quality: 100,
                active: !1,
              });
          let l = P.default.getMediaEngine(),
            u = l.connect(
              this.context,
              {
                userId: this.userId,
                channelId: this.trueChannelId,
                guildId:
                  null !== (o = this.rtcServerId) && void 0 !== o
                    ? o
                    : this.guildId,
              },
              {
                ssrc: r,
                address: t,
                port: n,
                modes: i,
                experiments: this._selectedExperiments,
                streamParameters: s,
                qosEnabled: P.default.getQoS(),
                ...this._getExtraConnectionOptions(),
              }
            );
          if (
            (u.setUseElectronVideo(l.supports(q.Features.ELECTRON_VIDEO)),
            P.default.supports(q.Features.IMAGE_QUALITY_MEASUREMENT))
          ) {
            let { enabled: e, measurement: t } = N.default.getConfig(!0),
              { extraOptions: n } = O.default.getCurrentConfig(
                { location: "handleReady" },
                { autoTrackExposure: !0 }
              );
            e && u.setVideoQualityMeasurement(t + n);
          }
          let c = ["unk"];
          if (
            (P.default.supports(q.Features.AMD_EXPERIMENTAL_RATE_CONTROL) &&
              c.push("amdRelaxRc"),
            this.context === q.MediaEngineContextTypes.STREAM)
          ) {
            let { nvMediumVbvSizeMs: e } = A.default.getCurrentConfig(
              { location: "handleReady" },
              { autoTrackExposure: !0 }
            );
            if (e > 0) {
              c.push("nvRelaxRc=" + e);
              let { nvEnableNewPresets: t } = v.default.getCurrentConfig(
                { location: "handleReady" },
                { autoTrackExposure: !0 }
              );
              t && c.push("nvNewPresets");
            }
            if (null != this.guildId) {
              let { enableAdaptiveKeyFrame: e } = C.default.getCurrentConfig(
                { guildId: this.guildId, location: "handleReady" },
                { autoTrackExposure: !0 }
              );
              e && c.push("nvencAdaptiveIDR");
            }
          }
          u.setVideoEncoderExperiments(c.join(",")),
            u.on(p.BaseConnectionEvent.Speaking, (e, t, n) => {
              this.userId === e && this.sendSpeaking(t, n),
                this.emit(x.RTCConnectionEvent.Speaking, e, t);
            }),
            u.on(p.BaseConnectionEvent.Video, (e, t, n, i, r, s) => {
              this._handleVideoStreamId({
                userId: e,
                streamId: t,
                audioSsrc: n,
                videoSsrc: null != i ? i : 0,
                rtxSsrc: r,
                videoStreamParameters: s,
              }),
                this.userId === e &&
                  (this.sendVideo(
                    null != n ? n : 0,
                    null != i ? i : 0,
                    null != r ? r : 0,
                    s
                  ),
                  null == s ||
                    s.forEach(t => {
                      100 === t.quality &&
                        this.emit(
                          x.RTCConnectionEvent.VideoSourceQualityChanged,
                          this.guildId,
                          this.channelId,
                          e,
                          t.maxResolution,
                          t.maxFrameRate,
                          this.context
                        );
                    }));
            }),
            u.on(p.BaseConnectionEvent.FirstFrame, (e, t, n) => {
              null != this._localMediaSinkWantsManager &&
                (this._localMediaSinkWantsManager.setFirstFrameReceived(t),
                this.emit(
                  x.RTCConnectionEvent.Video,
                  this.guildId,
                  this.channelId,
                  e,
                  n,
                  this.rtcServerId
                ));
            }),
            u.on(p.BaseConnectionEvent.Silence, e => {
              this._inputDetected = this._inputDetected || !e;
            }),
            u.on(p.BaseConnectionEvent.Connected, (i, r) => {
              if (
                (this.logger.info(
                  "RTC connected to media server: ".concat(t, ":").concat(n)
                ),
                e !== this._socket)
              ) {
                this.logger.warn("Socket mismatch, disconnecting");
                return;
              }
              switch (
                ((this._voiceQuality = new K.default(u)),
                this._voiceQuality.start(),
                (this._voiceQualityPeriodicStatsSequenceId = 0),
                (this._voiceQualityPeriodicStatsInterval = setInterval(
                  this._handleVoiceQualityPeriodicsStats,
                  3e5
                )),
                (this._voiceDuration = new W.default(this.userId, u)),
                this._voiceDuration.start(),
                (this.protocol = i),
                i)
              ) {
                case "udp":
                  this.logger.info(
                    "Sending UDP info to RTC server.",
                    r,
                    this._selectedExperiments
                  ),
                    e.once(V.SocketEvent.Encryption, (e, t) => {
                      u === this._connection &&
                        (u.setEncryption(e, t), (this._encryptionMode = e));
                    }),
                    e.selectProtocol(
                      i,
                      this.getRTCConnectionId(),
                      r,
                      this._selectedExperiments
                    );
                  break;
                case "webrtc":
                  this.logger.info("Sending local SDP to RTC server."),
                    e.once(V.SocketEvent.SDP, this._handleSDP.bind(this)),
                    e.selectProtocol(i, this.getRTCConnectionId(), r);
                  break;
                default:
                  this.logger.error("Unable to determine protocol.");
                  return;
              }
              this._backoff.succeed();
            }),
            u.on(p.BaseConnectionEvent.VideoEncoderFallback, t => {
              let n = t
                .filter(e => "video" === e.type)
                .map(e => e.name)
                .join(",");
              this.logger.info(
                "The originally selected video encoder is not working, fallback to the other available encoders:" +
                  n
              ),
                e.updateSession({ codecs: t });
            }),
            u.on(p.BaseConnectionEvent.Error, t => {
              if (e !== this._socket) return;
              let n = b.default.shouldIncludePreferredRegion()
                ? b.default.getPreferredRegion()
                : null;
              this.logger.error(
                "Error occurred while connecting to RTC server: ".concat(t)
              ),
                M.default.track(z.AnalyticEvents.VOICE_CONNECTION_FAILURE, {
                  ...this._getAnalyticsProperties(),
                  hostname: this.hostname,
                  port: this.port,
                  protocol: this.protocol,
                  error: t,
                  cloudflare_best_region: n,
                  connect_count: this._connectCount,
                });
            }),
            u.on(p.BaseConnectionEvent.ConnectionStateChange, t => {
              if (
                (this.logger.info(
                  "RTC media connection state change: "
                    .concat(this.state, " => ")
                    .concat(t)
                ),
                e !== this._socket)
              )
                return;
              let n = this.state;
              switch (t) {
                case q.ConnectionStates.DISCONNECTED:
                  this.setState(z.RTCConnectionStates.RTC_DISCONNECTED);
                  break;
                case q.ConnectionStates.CONNECTING:
                  this.setState(z.RTCConnectionStates.RTC_CONNECTING);
                  break;
                case q.ConnectionStates.CONNECTED:
                  this.setState(z.RTCConnectionStates.RTC_CONNECTED);
                  break;
                case q.ConnectionStates.NO_ROUTE:
                  this.setState(z.RTCConnectionStates.NO_ROUTE);
                  break;
                case q.ConnectionStates.ICE_CHECKING:
                  this.setState(z.RTCConnectionStates.ICE_CHECKING);
                  break;
                case q.ConnectionStates.DTLS_CONNECTING:
                  this.setState(z.RTCConnectionStates.DTLS_CONNECTING);
              }
              if (
                (n === z.RTCConnectionStates.RTC_CONNECTING &&
                this.state === z.RTCConnectionStates.RTC_DISCONNECTED
                  ? this.reconnect()
                  : this.state === z.RTCConnectionStates.NO_ROUTE &&
                    this._backoff.fail(this.reconnect),
                this.state === z.RTCConnectionStates.RTC_CONNECTED)
              ) {
                var i;
                let e = b.default.shouldIncludePreferredRegion()
                  ? b.default.getPreferredRegion()
                  : null;
                this._connecting &&
                  M.default.track(z.AnalyticEvents.VOICE_CONNECTION_SUCCESS, {
                    ...this._getAnalyticsProperties(),
                    hostname: this.hostname,
                    port: this.port,
                    protocol: this.protocol,
                    cloudflare_best_region: e,
                    connect_time:
                      (0, h.now)() -
                      (this._connected
                        ? this._connectStartTime
                        : this._createdTime),
                    connect_count: this._connectCount,
                    audio_subsystem: P.default
                      .getMediaEngine()
                      .getAudioSubsystem(),
                    audio_layer: P.default.getMediaEngine().getAudioLayer(),
                    media_session_id: this.getMediaSessionId(),
                    ...this.stateHistory.getVoiceConnectionSuccessStats(),
                  }),
                  null === (i = this._localMediaSinkWantsManager) ||
                    void 0 === i ||
                    i.setConnection(u),
                  (this._connectCompletedTime = (0, h.now)()),
                  (this._connected = !0),
                  (this._connecting = !1),
                  (this._encountered_socket_failure = !1);
              } else
                n === z.RTCConnectionStates.RTC_CONNECTED &&
                  this.stateHistory.reset(this.state);
            }),
            u.on(p.BaseConnectionEvent.Ping, this._handlePing.bind(this)),
            u.on(
              p.BaseConnectionEvent.PingTimeout,
              this._handlePingTimeout.bind(this)
            ),
            u.on(
              p.BaseConnectionEvent.OutboundLossRate,
              this._handleOutboundLossRate.bind(this)
            ),
            u.on(
              p.BaseConnectionEvent.SoundshareTrace,
              this._handleSoundshareTrace.bind(this)
            ),
            u.on(
              p.BaseConnectionEvent.LocalVideoDisabled,
              this._handleLocalVideoDisabled.bind(this)
            ),
            u.on(p.BaseConnectionEvent.Stats, k.default.create()),
            u.on(
              p.BaseConnectionEvent.RemoteStreamsReady,
              this._handleRemoteStreamsReady.bind(this)
            ),
            u.setRemoteVideoSinkWants(this._remoteVideoSinkWants),
            (this._connection = u);
        }
        _handleSpeaking(e, t, n, i) {
          let r = this._connection;
          if (null != r && this.userId !== t) {
            var s;
            i !== q.SpeakingFlags.NONE &&
              (r.createUser(t, n),
              _.default.dispatch({
                type: "RTC_CONNECTION_USER_CREATE",
                userId: t,
                context: this.context,
              })),
              null === (s = this._localMediaSinkWantsManager) ||
                void 0 === s ||
                s.setAudioSSRC(t, n);
          }
        }
        handleFlags(e, t) {
          this.emit(x.RTCConnectionEvent.Flags, e, t);
        }
        handlePlatform(e, t) {
          this.emit(x.RTCConnectionEvent.Platform, e, t, this.channelId);
        }
        getOrCreateVideoQuality() {
          if (null != this._connection && null == this._videoQuality) {
            (this._videoQuality = new Y.VideoQuality(this._connection)),
              this._videoQuality.start();
            let {
              featureEnabled: e,
              windowLength: t,
              allowedPoorFpsRatio: n,
              fpsThreshold: i,
              backoffTimeSec: r,
            } = R.default.getConfig(!0);
            if (e) {
              (this._videoHealthManager = new j.VideoHealthManager(t, n, i, r)),
                null != this._localMediaSinkWantsManager &&
                  (this._localMediaSinkWantsManager.videoHealthManager =
                    this._videoHealthManager);
              this._videoQuality.on(
                Y.VideoQualityEvent.FpsUpdate,
                (e, t, n) => {
                  var i, r;
                  (null === (i = this._localMediaSinkWantsManager) ||
                  void 0 === i
                    ? void 0
                    : i.shouldReceiveFromUser(e)) &&
                    (null === (r = this._videoHealthManager) ||
                      void 0 === r ||
                      r.updateFps(e, t, n));
                }
              );
            }
          }
          return this._videoQuality;
        }
        _handleVideoStreamId(e) {
          var t, n, i, r;
          let {
            userId: s,
            streamId: a,
            videoSsrc: o,
            videoStreamParameters: l,
          } = e;
          if (
            (this.emit(
              x.RTCConnectionEvent.Video,
              this.guildId,
              this.channelId,
              s,
              a,
              this.rtcServerId
            ),
            null != a &&
              null == this.getOrCreateVideoQuality() &&
              this.logger.error(
                "_handleVideoStreamId: Unable to create videoQuality."
              ),
            null != this._videoQuality &&
              this.userId === s &&
              l.forEach(e => {
                var t, n;
                let i = null !== (t = e.ssrc) && void 0 !== t ? t : 0;
                i > 0 &&
                  !0 === e.active &&
                  (null === (n = this._videoQuality) ||
                    void 0 === n ||
                    n.setOutboundSsrc(i));
              }),
            this.userId !== s)
          ) {
            let e = 0 === o && null === a,
              r =
                !e ||
                (e &&
                  (null === (t = this._videoQuality) || void 0 === t
                    ? void 0
                    : t.getInboundParticipants().includes(s)));
            r &&
              (null === (n = this._videoQuality) ||
                void 0 === n ||
                n.setInboundUser(s, o),
              null === (i = this._videoHealthManager) ||
                void 0 === i ||
                i.createUser(s));
          }
          null != this._connection &&
            this.userId !== s &&
            (null === (r = this._localMediaSinkWantsManager) ||
              void 0 === r ||
              r.setStreamId(s, a));
        }
        _handleLocalVideoDisabled(e, t) {
          if (this.userId !== e) {
            let n = this.getOrCreateVideoQuality();
            if (null == n) {
              this.logger.error(
                "_handleLocalVideoDisabled: Unable to create videoQuality."
              );
              return;
            }
            n.setUserVideoDisabled(e, t);
          }
        }
        _handleRemoteStreamsReady(e) {
          let t = (0, h.now)() - this._connectStartTime;
          M.default.track(
            z.AnalyticEvents.VOICE_CONNECTION_REMOTE_STREAMS_CREATED,
            {
              ...this._getAnalyticsProperties(),
              number_of_users: e,
              duration_ms: t,
            }
          );
        }
        _handleVideo(e, t, n, i, r) {
          let s = this._connection;
          if (null != s && this.userId !== t) {
            if (null != this._localMediaSinkWantsManager) {
              this._localMediaSinkWantsManager.setAudioSSRC(t, n);
              let e = r.map(e => ({
                type: q.MediaTypes.VIDEO,
                rid: e.rid,
                ssrc: e.ssrc,
                rtxSsrc: e.rtxSsrc,
                quality: e.quality,
                active: i > 0,
              }));
              0 === e.length &&
                e.push({
                  type: q.MediaTypes.VIDEO,
                  rid: "100",
                  ssrc: i,
                  rtxSsrc: i + 1,
                  quality: 100,
                  active: i > 0,
                }),
                this._localMediaSinkWantsManager.setVideoSSRCs(t, e);
            } else s.createUser(t, n, [i]);
            null == r ||
              r.forEach(e => {
                100 === e.quality &&
                  this.emit(
                    x.RTCConnectionEvent.VideoSourceQualityChanged,
                    this.guildId,
                    this.channelId,
                    t,
                    e.maxResolution,
                    e.maxFrameRate,
                    this.context
                  );
              });
          }
        }
        _handleControlPing(e) {
          !P.default.supports(q.Features.NATIVE_PING) && this._handlePing(e);
        }
        _handlePing(e) {
          if (void 0 !== e) {
            for (
              this._pings.push({ time: Date.now(), value: e });
              this._pings.length >= 200;

            )
              this._pings.shift();
            e > 500 && this._pingBadCount++,
              this.emit(x.RTCConnectionEvent.Ping, this._pings, this.quality);
          }
        }
        _handlePingTimeout(e, t) {
          this._pingTimeouts.push(e);
          let n = this._pingTimeouts.length;
          n >= 3 &&
            this._pingTimeouts[n - 1] === this._pingTimeouts[n - 2] + 1 &&
            this._pingTimeouts[n - 2] === this._pingTimeouts[n - 3] + 1 &&
            this._handlePing(t);
        }
        _handleOutboundLossRate(e) {
          (this._outboundLossRate = e),
            this.emit(x.RTCConnectionEvent.OutboundLossRate, e);
        }
        _handleSoundshareTrace(e) {
          this._soundshareStats.traceEvent(void 0, e);
        }
        _getAnalyticsProperties() {
          let e = y.default.getChannel(this.channelId),
            t = null != e ? e.type : null;
          return {
            guild_id: this.guildId,
            channel_id: this.channelId,
            channel_type: t,
            rtc_connection_id: this.getRTCConnectionId(),
            context: this.context,
            voice_backend_version: this.voiceVersion,
            rtc_worker_backend_version: this.rtcWorkerVersion,
          };
        }
        _handleClientDisconnect(e) {
          var t, n, i;
          let r = this._videoQuality;
          if (null != r && this.context === q.MediaEngineContextTypes.DEFAULT) {
            let t = r.getInboundStats(e),
              s =
                null !== (n = null == t ? void 0 : t.num_frames) && void 0 !== n
                  ? n
                  : 0;
            null != t &&
              s > 0 &&
              (M.default.track(z.AnalyticEvents.VIDEO_STREAM_ENDED, {
                ...this._getAnalyticsProperties(),
                media_session_id: this.getMediaSessionId(),
                sender_user_id: e,
                reason: "User disconnected",
                participant_type: "receiver",
                guild_region: b.default.getRegion(this.hostname),
                hostname: this.hostname,
                ...t,
                ...r.getNetworkStats(),
                ...r.getCodecUsageStats("receiver", e),
              }),
              r.destroyUser(e),
              null === (i = this._videoHealthManager) ||
                void 0 === i ||
                i.deleteUser(e));
          }
          let s = this._connection;
          null != s && s.destroyUser(e),
            null === (t = this._localMediaSinkWantsManager) ||
              void 0 === t ||
              t.destroyUser(e);
        }
        _handleCodecs(e, t) {
          let n = this._connection;
          null != n && null != this.protocol
            ? n.setCodecs(
                null != e && "" !== e ? e : q.Codecs.OPUS,
                null != t && "" !== t ? t : q.Codecs.H264,
                this.context
              )
            : this.logger.warn(
                "Cannot set codecs on connection with protocol:",
                this.protocol
              );
        }
        _handleSDP(e) {
          let t = this._connection;
          null != t && null != this.protocol
            ? t.setSDP(e)
            : this.logger.warn(
                "Cannot set SDP on connection with protocol:",
                this.protocol
              );
        }
        async _handleMediaSessionId(e) {
          (this._mediaSessionId = e),
            this.logger.info(
              "Setting media-session-id: "
                .concat(e, " for rtc-connection-id: ")
                .concat(this.getRTCConnectionId())
            );
          let t = await (0, g.default)();
          M.default.track(z.AnalyticEvents.MEDIA_SESSION_JOINED, {
            ...this._getAnalyticsProperties(),
            media_session_id: this.getMediaSessionId(),
            parent_media_session_id: this.parentMediaSessionId,
            raw_thermal_state: t,
          }),
            _.default.dispatch({
              type: "MEDIA_SESSION_JOINED",
              mediaSessionId: this.getMediaSessionId(),
              context: this.context,
            });
        }
        _handleMediaSinkWants(e) {
          let t = this._connection;
          this.logger.info(
            "Remote media sink wants: ".concat(JSON.stringify(e))
          ),
            (this._remoteVideoSinkWants = e),
            null == t || t.setRemoteVideoSinkWants(e);
        }
        _handleCodeVersion(e, t) {
          (this.voiceVersion = e), (this.rtcWorkerVersion = t);
        }
        _handleKeyframeInterval(e) {
          let t = this._connection;
          null != t && null != this.protocol
            ? t.setKeyframeInterval(e)
            : this.logger.warn(
                "Cannot set keyframe interval on connection with protocol:",
                this.protocol
              );
        }
        _handleUpdateRtcLog(e) {
          var t;
          (this.rtcLogEphemeralKey = e),
            null === (t = this._connection) ||
              void 0 === t ||
              t.setRtcLogEphemeralKey(e);
        }
        _handleBandwidthEstimationExperiment(e) {
          this._bandwidthEstimationExperiment = e;
          let t = I.default.getMediaEngineExperiments(e);
          if (null !== t && 0 !== t.length) {
            var n;
            null === (n = this._connection) ||
              void 0 === n ||
              n.setBandwidthEstimationExperiments(t);
          }
        }
        _trackSecureFrameTransition(e, t) {
          M.default.track(z.AnalyticEvents.SECURE_FRAMES_TRANSITION, {
            ...this._getAnalyticsProperties(),
            media_session_id: this.getMediaSessionId(),
            parent_media_session_id: this.parentMediaSessionId,
            sender_user_id: this.userId,
            transition_id: e,
            protocol_version: t,
          });
        }
        _handleSecureFramesInit(e) {
          var t, n;
          e > 0 &&
            this.logger.info(
              "Secure frames init with protocol version: ".concat(e)
            ),
            e >= 100
              ? (null === (t = this._connection) ||
                  void 0 === t ||
                  t.prepareSecureFramesEpoch("1", e, this.trueChannelId),
                this._sendMLSKeyPackage())
              : null === (n = this._connection) ||
                void 0 === n ||
                n.prepareSecureFramesTransition(0, e, () => {
                  var t;
                  e > 0 && this._trackSecureFrameTransition(0, e),
                    null === (t = this._connection) ||
                      void 0 === t ||
                      t.executeSecureFramesTransition(0);
                });
        }
        _handleSecureFramesPrepareTransition(e, t) {
          var n;
          this.logger.info(
            "Preparing secure frames transition: "
              .concat(e, ", protocol version: ")
              .concat(t)
          ),
            null === (n = this._connection) ||
              void 0 === n ||
              n.prepareSecureFramesTransition(e, t, () => {
                this._maybeSendSecureFramesTransitionReady(e),
                  this._trackSecureFrameTransition(e, t);
              });
        }
        _handleSecureFramesPrepareEpoch(e, t) {
          var n;
          this.logger.info(
            "Preparing secure frames epoch: "
              .concat(e, ", protocol version: ")
              .concat(t)
          );
          let i = e.toString();
          null === (n = this._connection) ||
            void 0 === n ||
            n.prepareSecureFramesEpoch(i, t, this.channelId),
            "1" === i && this._sendMLSKeyPackage();
        }
        _sendMLSKeyPackage() {
          var e;
          null === (e = this._connection) ||
            void 0 === e ||
            e.getMLSKeyPackage(e => {
              var t;
              this.logger.info("Got MLS key package, sending to RTC server"),
                null === (t = this._socket) ||
                  void 0 === t ||
                  t.sendMLSKeyPackage(e);
            });
        }
        _maybeSendSecureFramesTransitionReady(e) {
          if (0 !== e) {
            var t;
            this.logger.info(
              "Sending secure frames ready for transition ID ".concat(e)
            ),
              null === (t = this._socket) ||
                void 0 === t ||
                t.secureFramesReadyForTransition(e);
          }
        }
        _handleSecureFramesExecuteTransition(e) {
          var t;
          this.logger.info("Executing secure frames transition: ".concat(e)),
            null === (t = this._connection) ||
              void 0 === t ||
              t.executeSecureFramesTransition(e);
        }
        _handleMLSExternalSenderPackage(e) {
          var t;
          this.logger.info("Received MLS external sender package"),
            null === (t = this._connection) ||
              void 0 === t ||
              t.updateMLSExternalSender(e);
        }
        _handleMLSProposals(e, t) {
          var n;
          this.logger.info("Received MLS proposals"),
            null === (n = this._connection) ||
              void 0 === n ||
              n.processMLSProposals(t, t => {
                this.logger.info("Sending MLS commit welcome message"),
                  e.sendMLSCommitWelcome(t);
              });
        }
        _handleMLSPrepareCommitTransition(e, t) {
          var n;
          this.logger.info("Received MLS commit for transition ID ".concat(e)),
            null === (n = this._connection) ||
              void 0 === n ||
              n.prepareMLSCommitTransition(e, t, (t, n) => {
                t
                  ? (this._maybeSendSecureFramesTransitionReady(e),
                    this._trackSecureFrameTransition(e, n))
                  : this.logger.warn(
                      "Failed to process MLS commit for transition ID ".concat(
                        e
                      )
                    );
              });
        }
        _handleMLSWelcome(e, t) {
          var n;
          this.logger.info("Received MLS welcome for transition ID ".concat(e)),
            null === (n = this._connection) ||
              void 0 === n ||
              n.processMLSWelcome(e, t, (t, n) => {
                t &&
                  (this._maybeSendSecureFramesTransitionReady(e),
                  this._trackSecureFrameTransition(e, n));
              });
        }
        _getExtraConnectionOptions() {
          return {};
        }
        shouldReportPeriodicStats(e) {
          if (e.length > 10) return !1;
          let { enableSendingVoiceStats: t, percentageOfCalls: n } =
            D.default.getCurrentConfig(
              { location: "104dee_3" },
              { autoTrackExposure: !1 }
            );
          if (!t) return !1;
          let i = this.getMediaSessionId();
          if (null == i) return !1;
          let r = l.v3(i);
          return !!(r % 100 <= n) || !1;
        }
        getInputDeviceName() {
          var e;
          let t = P.default.getInputDeviceId(),
            n =
              null === (e = P.default.getInputDevices()[t]) || void 0 === e
                ? void 0
                : e.name;
          return n;
        }
        getOutputDeviceName() {
          var e;
          let t = P.default.getOutputDeviceId(),
            n =
              null === (e = P.default.getOutputDevices()[t]) || void 0 === e
                ? void 0
                : e.name;
          return n;
        }
        getGoLiveSource() {
          return P.default.getGoLiveSource();
        }
        constructor({
          userId: e,
          sessionId: t,
          guildId: n,
          channelId: i,
          context: r = q.MediaEngineContextTypes.DEFAULT,
          rtcServerId: s,
          parentMediaSessionId: a,
        }) {
          var o, l;
          if (
            (super(),
            (this.reconnect = () => {
              let e = this._socket;
              null != e &&
                (this._connected && (this._connectStartTime = (0, h.now)()),
                !this._connecting &&
                  (this._trackVoiceConnectionConnecting(),
                  (this._connecting = !0),
                  (this._encountered_socket_failure = !1)),
                this._connectCount++,
                e.close(),
                e.connect());
            }),
            (this._handleNetworkOnline = () => {
              this.expeditedHeartbeat(5e3, "network detected online.");
            }),
            (this._handleNetworkOffline = () => {
              this.expeditedHeartbeat(15e3, "network detected offline.", !1);
            }),
            (this._handlePowerResume = () => {
              this.expeditedHeartbeat(5e3, "power monitor resumed");
            }),
            (this._handleVoiceQualityPeriodicsStats = () => {
              if (null != this._voiceQuality) {
                let e = this._voiceQuality.getPeriodicStats();
                if (this.shouldReportPeriodicStats(e))
                  for (let t of e)
                    M.default.track(
                      z.AnalyticEvents.VOICE_QUALITY_PERIODIC_STATS,
                      {
                        ...this._getAnalyticsProperties(),
                        media_session_id: this.getMediaSessionId(),
                        sender_user_id: t.userId,
                        hostname: this.hostname,
                        frame_op_silent: t.silent,
                        frame_op_normal: t.normal,
                        frame_op_merged: t.merged,
                        frame_op_expanded: t.expanded,
                        frame_op_accelerated: t.accelerated,
                        frame_op_preemptive_expanded: t.preemptiveExpanded,
                        frame_op_cng: t.cng,
                        accelerate_rate: t.accelerateRate,
                        expand_rate: t.expandRate,
                        preemptive_expand_rate: t.preemptiveExpandRate,
                        speech_expand_rate: t.speechExpandRate,
                        duration_ms: t.durationMs,
                        sequence_id: this._voiceQualityPeriodicStatsSequenceId,
                        input_device: this.getInputDeviceName(),
                        output_device: this.getOutputDeviceName(),
                        ping_average: Math.round(this.getAveragePing()),
                        ping_bad_count: this._pingBadCount,
                        parent_media_session_id: this.parentMediaSessionId,
                      }
                    );
                this._voiceQualityPeriodicStatsSequenceId++;
              }
            }),
            (this._trackVoiceConnectionConnecting = () => {
              let e = y.default.getChannel(this.channelId),
                t = null != e ? e.type : null;
              M.default.track(z.AnalyticEvents.VOICE_CONNECTION_CONNECTING, {
                guild_id: this.guildId,
                channel_id: this.channelId,
                rtc_connection_id: this.getRTCConnectionId(),
                hostname: this.hostname,
                connect_count: this._connectCount,
                context: this.context,
                channel_type: t,
              });
            }),
            (this.context = r),
            (this.logger = new m.default(
              "RTCConnection("
                .concat(
                  null !== (o = null != s ? s : n) && void 0 !== o ? o : i,
                  ", "
                )
                .concat(this.context, ")")
            )),
            (this.userId = e),
            (this.sessionId = t),
            (this.guildId = n),
            (this._channelId = i),
            (this.channelIds = new Set([i])),
            (this.rtcServerId = s),
            (this.parentMediaSessionId = a),
            (this._endpoint = null),
            (this.hostname = null),
            (this.port = null),
            (this.token = null),
            (this.voiceVersion = null),
            (this.rtcWorkerVersion = null),
            (this.state = z.RTCConnectionStates.AWAITING_ENDPOINT),
            (this.stateHistory = new F.StateHistory(this.state)),
            (this._socket = null),
            (this._backoff = new f.default(1e3, 1e4)),
            (this._destroyed = !1),
            (this._pings = []),
            (this._pingBadCount = 0),
            (this._pingTimeouts = []),
            (this._mediaSessionId = null),
            (this._voiceQuality = null),
            (this._voiceQualityPeriodicStatsInterval = null),
            (this._voiceQualityPeriodicStatsSequenceId = 0),
            (this._voiceDuration = null),
            (this._videoQuality = null),
            (this._videoHealthManager = null),
            (this._sentVideo = !1),
            (this._outboundLossRate = null),
            (this._createdTime = (0, h.now)()),
            (this._connectStartTime = 0),
            (this._connectCompletedTime = 0),
            (this._rtcConnectionId = (0, d.v4)()),
            (this._connectCount = 0),
            (this._connected = !1),
            (this._connecting = !1),
            (this._encountered_socket_failure = !1),
            (this._inputDetected = !1),
            (this._selectedExperiments = []),
            r === q.MediaEngineContextTypes.DEFAULT)
          ) {
            let t =
                P.default.supports(q.Features.FIRST_FRAME_CALLBACK) &&
                P.default.supports(q.Features.REMOTE_USER_MULTI_STREAM),
              n =
                (null === (l = y.default.getChannel(this.channelId)) ||
                void 0 === l
                  ? void 0
                  : l.type) === z.ChannelTypes.GUILD_STAGE_VOICE;
            (this._localMediaSinkWantsManager = new B.default(e, n, t)),
              this._localMediaSinkWantsManager.on(
                B.RTCMediaSinkWantsManagerEvent.Update,
                e => {
                  if (
                    this.state === z.RTCConnectionStates.RTC_CONNECTED &&
                    null != this._socket
                  ) {
                    var t;
                    this.logger.info(
                      "Media sink wants: ".concat(JSON.stringify(e))
                    ),
                      this._socket.mediaSinkWants(e),
                      null === (t = this._connection) ||
                        void 0 === t ||
                        t.setLocalVideoSinkWants(e);
                  }
                }
              ),
              this._localMediaSinkWantsManager.on(
                B.RTCMediaSinkWantsManagerEvent.UserSSRCUpdate,
                (e, t, n) => {
                  var i;
                  null === (i = this._connection) ||
                    void 0 === i ||
                    i.createUser(e, t, n);
                }
              );
          }
          (this._remoteVideoSinkWants = B.DEFAULT_WANTS_FULL),
            L.default.shouldRecordNextConnection()
              ? ((this._recordingEnabled = !0),
                S.setShouldRecordNextConnection(!1))
              : (this._recordingEnabled = !1),
            (this._soundshareStats = new H.default()),
            U.default.addOnlineCallback(this._handleNetworkOnline),
            U.default.addOfflineCallback(this._handleNetworkOffline),
            (0, G.isDesktop)() &&
              (this.powerMonitorListener = w.default.remotePowerMonitor.on(
                "resume",
                this._handlePowerResume
              )),
            (this._supportedBandwidthEstimationExperiments = []),
            (this._bandwidthEstimationExperiment = null),
            P.default
              .getMediaEngine()
              .getSupportedBandwidthEstimationExperiments(e => {
                this._supportedBandwidthEstimationExperiments = e;
              });
        }
      };
    },
    422791: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          RTCConnectionEvent: function () {
            return i;
          },
        }),
        ((r = i || (i = {})).State = "state"),
        (r.Speaking = "speaking"),
        (r.VideoSourceQualityChanged = "video-source-quality-changed"),
        (r.Video = "video"),
        (r.Flags = "flags"),
        (r.Platform = "platform"),
        (r.Ping = "ping"),
        (r.OutboundLossRate = "outboundlossrate");
    },
    642099: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          StateHistory: function () {
            return l;
          },
        }),
        n("424973");
      var i = n("917351"),
        r = n.n(i),
        s = n("398183"),
        a = n("713725"),
        o = n("49111");
      class l {
        reset(e) {
          (this.current = null),
            (this.history = []),
            null != e && this.update(e);
        }
        update(e) {
          this.current !== e &&
            ((this.current = e),
            this.history.push({ state: e, startTime: (0, s.now)() }));
        }
        getVoiceConnectionSuccessStats() {
          let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : (0, s.now)(),
            t = this.getStateDurations(e),
            n = e => r.sumBy(t, t => (t.state === e ? t.durationMs : 0));
          return {
            state_awaiting_endpoint_ms: n(
              o.RTCConnectionStates.AWAITING_ENDPOINT
            ),
            state_authenticating_ms: n(o.RTCConnectionStates.AUTHENTICATING),
            state_connecting_ms: n(o.RTCConnectionStates.CONNECTING),
            state_disconnected_ms: n(o.RTCConnectionStates.DISCONNECTED),
            state_ice_checking_ms: n(o.RTCConnectionStates.ICE_CHECKING),
            state_no_route_ms: n(o.RTCConnectionStates.NO_ROUTE),
            state_rtc_connecting_ms: n(o.RTCConnectionStates.RTC_CONNECTING),
            state_rtc_disconnected_ms: n(
              o.RTCConnectionStates.RTC_DISCONNECTED
            ),
          };
        }
        getStateDurations(e) {
          if (0 === this.history.length) return [];
          let t = (0, a.default)(this.history, (e, t) => ({
            state: e.state,
            durationMs: t.startTime - e.startTime,
          }));
          return (
            t.push(
              (() => {
                let t = r.last(this.history);
                return { state: t.state, durationMs: e - t.startTime };
              })()
            ),
            t
          );
        }
        constructor(e) {
          (this.current = null),
            (this.history = []),
            null != e && this.update(e);
        }
      }
    },
    417040: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          SocketEvent: function () {
            return a;
          },
          default: function () {
            return o;
          },
        }),
        n("311790"),
        n("477657"),
        n("811875"),
        n("90301"),
        n("652153"),
        n("28797"),
        n("817884"),
        n("597349"),
        n("667536"),
        n("690341"),
        n("222007"),
        n("702976");
      var i,
        r,
        s,
        a,
        o,
        l,
        u,
        c,
        d,
        f = n("627445"),
        E = n.n(f),
        p = n("981980"),
        h = n("595275"),
        _ = n("605250"),
        S = n("313915"),
        m = n("718517"),
        T = n("773336"),
        g = n("353927");
      function I() {}
      ((l = i || (i = {}))[(l.IDENTIFY = 0)] = "IDENTIFY"),
        (l[(l.SELECT_PROTOCOL = 1)] = "SELECT_PROTOCOL"),
        (l[(l.READY = 2)] = "READY"),
        (l[(l.HEARTBEAT = 3)] = "HEARTBEAT"),
        (l[(l.SELECT_PROTOCOL_ACK = 4)] = "SELECT_PROTOCOL_ACK"),
        (l[(l.SPEAKING = 5)] = "SPEAKING"),
        (l[(l.HEARTBEAT_ACK = 6)] = "HEARTBEAT_ACK"),
        (l[(l.RESUME = 7)] = "RESUME"),
        (l[(l.HELLO = 8)] = "HELLO"),
        (l[(l.RESUMED = 9)] = "RESUMED"),
        (l[(l.VIDEO = 12)] = "VIDEO"),
        (l[(l.CLIENT_DISCONNECT = 13)] = "CLIENT_DISCONNECT"),
        (l[(l.SESSION_UPDATE = 14)] = "SESSION_UPDATE"),
        (l[(l.MEDIA_SINK_WANTS = 15)] = "MEDIA_SINK_WANTS"),
        (l[(l.VOICE_BACKEND_VERSION = 16)] = "VOICE_BACKEND_VERSION"),
        (l[(l.CHANNEL_OPTIONS_UPDATE = 17)] = "CHANNEL_OPTIONS_UPDATE"),
        (l[(l.FLAGS = 18)] = "FLAGS"),
        (l[(l.SPEED_TEST = 19)] = "SPEED_TEST"),
        (l[(l.PLATFORM = 20)] = "PLATFORM"),
        (l[(l.SECURE_FRAMES_PREPARE_PROTOCOL_TRANSITION = 21)] =
          "SECURE_FRAMES_PREPARE_PROTOCOL_TRANSITION"),
        (l[(l.SECURE_FRAMES_EXECUTE_TRANSITION = 22)] =
          "SECURE_FRAMES_EXECUTE_TRANSITION"),
        (l[(l.SECURE_FRAMES_READY_FOR_TRANSITION = 23)] =
          "SECURE_FRAMES_READY_FOR_TRANSITION"),
        (l[(l.SECURE_FRAMES_PREPARE_EPOCH = 24)] =
          "SECURE_FRAMES_PREPARE_EPOCH"),
        (l[(l.MLS_EXTERNAL_SENDER_PACKAGE = 25)] =
          "MLS_EXTERNAL_SENDER_PACKAGE"),
        (l[(l.MLS_KEY_PACKAGE = 26)] = "MLS_KEY_PACKAGE"),
        (l[(l.MLS_PROPOSALS = 27)] = "MLS_PROPOSALS"),
        (l[(l.MLS_COMMIT_WELCOME = 28)] = "MLS_COMMIT_WELCOME"),
        (l[(l.MLS_PREPARE_COMMIT_TRANSITION = 29)] =
          "MLS_PREPARE_COMMIT_TRANSITION"),
        (l[(l.MLS_WELCOME = 30)] = "MLS_WELCOME"),
        ((u = r || (r = {}))[(u.AUTHENTICATION_FAILED = 4004)] =
          "AUTHENTICATION_FAILED"),
        (u[(u.INVALID_SESSION = 4006)] = "INVALID_SESSION"),
        (u[(u.SERVER_NOT_FOUND = 4011)] = "SERVER_NOT_FOUND"),
        (u[(u.SERVER_CRASH = 4015)] = "SERVER_CRASH"),
        (u[(u.CANCELED = 4016)] = "CANCELED"),
        (u[(u.HEARTBEAT_TIMEOUT = 4800)] = "HEARTBEAT_TIMEOUT"),
        (u[(u.UNRESUMABLE = 4801)] = "UNRESUMABLE"),
        (u[(u.RESET_BACKOFF = 4802)] = "RESET_BACKOFF"),
        ((c = s || (s = {}))[(c.DISCONNECTED = 0)] = "DISCONNECTED"),
        (c[(c.CONNECTING = 1)] = "CONNECTING"),
        (c[(c.IDENTIFYING = 2)] = "IDENTIFYING"),
        (c[(c.RESUMING = 3)] = "RESUMING"),
        (c[(c.CONNECTED = 4)] = "CONNECTED"),
        (c[(c.RECONNECTING = 5)] = "RECONNECTING");
      let C = 20 * m.default.Millis.SECOND,
        v = 1 * m.default.Millis.MINUTE,
        A = 5 * m.default.Millis.SECOND;
      function R(e) {
        return e.map(e => ({
          name: e.name,
          type: e.type,
          priority: 1e3 * e.priority,
          payload_type: e.payloadType,
          rtx_payload_type: e.rtxPayloadType,
          encode: e.encode,
          decode: e.decode,
        }));
      }
      function N(e) {
        return null == e
          ? void 0
          : e.map(e => ({
              type: e.type,
              rid: e.rid,
              ssrc: e.ssrc,
              active: e.active,
              quality: e.quality,
              rtx_ssrc: e.rtxSsrc,
              max_bitrate: e.maxBitrate,
              max_framerate: e.maxFrameRate,
              max_resolution:
                null != e.maxResolution
                  ? {
                      type: e.maxResolution.type,
                      width: e.maxResolution.width,
                      height: e.maxResolution.height,
                    }
                  : void 0,
            }));
      }
      function O(e) {
        var t;
        return null !==
          (t =
            null == e
              ? void 0
              : e.map(e => ({
                  type: (function (e) {
                    if ("audio" === e) return g.MediaTypes.AUDIO;
                    if ("test" === e) return g.MediaTypes.TEST;
                    if ("screen" === e) return g.MediaTypes.SCREEN;
                    else return g.MediaTypes.VIDEO;
                  })(e.type),
                  rid: e.rid,
                  ssrc: e.ssrc,
                  rtxSsrc: e.rtx_ssrc,
                  active: e.active,
                  quality: e.quality,
                  maxBitrate: e.max_bitrate,
                  maxFrameRate: e.max_framerate,
                  maxResolution:
                    null != e.max_resolution
                      ? {
                          type: e.max_resolution.type,
                          width: e.max_resolution.width,
                          height: e.max_resolution.height,
                        }
                      : void 0,
                }))) && void 0 !== t
          ? t
          : [];
      }
      ((d = a || (a = {})).Connecting = "connecting"),
        (d.Connect = "connect"),
        (d.Disconnect = "disconnect"),
        (d.Resuming = "resuming"),
        (d.Ready = "ready"),
        (d.Speaking = "speaking"),
        (d.Video = "video"),
        (d.Ping = "ping"),
        (d.ClientDisconnect = "client-disconnect"),
        (d.Codecs = "codecs"),
        (d.MediaSessionId = "media-session-id"),
        (d.MediaSinkWants = "media-sink-wants"),
        (d.VoiceBackendVersion = "voice-backend-version"),
        (d.KeyframeInterval = "keyframe-interval"),
        (d.ChannelOptionsUpdateRtcLog = "channel-options-update-rtc-log"),
        (d.ChannelOptionsUpdateSecureFramesProtocol =
          "update-secure-frames-protocol"),
        (d.Flags = "flags"),
        (d.Platform = "platform"),
        (d.SDP = "sdp"),
        (d.Encryption = "encryption"),
        (d.SpeedTest = "speed-test"),
        (d.BandwidthEstimationExperiment = "bandwidth-estimation-experiment"),
        (d.SecureFramesInit = "secure-frames-init"),
        (d.SecureFramesPrepareTransition = "secure-frames-prepare-transition"),
        (d.SecureFramesExecuteTransition = "secure-frames-execute-transition"),
        (d.SecureFramesPrepareEpoch = "secure-frames-prepare-epoch"),
        (d.MLSExternalSenderPackage = "mls-external-sender-package"),
        (d.MLSProposals = "mls-proposals"),
        (d.MLSPrepareCommitTransition = "mls-prepare-commit-transition"),
        (d.MLSWelcome = "mls-welcome"),
        (o = class extends h.default {
          createWebSocket() {
            this.logger.info("[CONNECT] ".concat(this.url)),
              null !== this.webSocket &&
                (this.logger.error(
                  "Connect called with already existing websocket"
                ),
                this.cleanupWebSocket(e => e.close(4e3))),
              (this.connectionStartTime = Date.now()),
              (this.helloTimeout = setTimeout(() => {
                let e = Date.now() - this.connectionStartTime;
                this.handleClose(
                  !1,
                  0,
                  "The connection timed out after ".concat(
                    e,
                    " ms - did not receive OP_HELLO in time."
                  )
                );
              }, C));
            let e = (this.webSocket = new WebSocket(
              "".concat(this.url, "?v=").concat(7)
            ));
            (e.binaryType = "arraybuffer"),
              (e.onopen = () => {
                1 === this.connectionState
                  ? this.emit("connect")
                  : 5 === this.connectionState && this.doResumeOrClose(),
                  (this.connectionState = 4);
                let e = Date.now() - this.connectionStartTime;
                this.logger.info(
                  "[CONNECTED] ".concat(this.url, " in ").concat(e, " ms")
                ),
                  this.emit("ping", Math.round(e / 2));
              }),
              (e.onmessage = e => {
                let { op: t, d: n } = this.parseWebSocketMessage(e);
                if (S.default.isLoggingGatewayEvents) {
                  if (n instanceof Uint8Array) {
                    let e = [...n]
                      .map(e => e.toString(16).padStart(2, "0"))
                      .join("");
                    this.logger.info("~> ".concat(t, ": 0x").concat(e));
                  } else
                    this.logger.info(
                      "~> ".concat(t, ": ").concat(JSON.stringify(n))
                    );
                }
                switch (t) {
                  case 8:
                    this.clearHelloTimeout(), this.handleHello(n);
                    break;
                  case 2:
                    this.handleReady(n);
                    break;
                  case 9:
                    this.handleResumed(n);
                    break;
                  case 4:
                    n.bandwidth_estimation_experiment &&
                      this.emit(
                        "bandwidth-estimation-experiment",
                        n.bandwidth_estimation_experiment
                      ),
                      this.emit("codecs", n.audio_codec, n.video_codec),
                      n.media_session_id &&
                        this.emit("media-session-id", n.media_session_id),
                      n.sdp
                        ? this.emit("sdp", n.sdp)
                        : n.mode &&
                          this.emit("encryption", n.mode, n.secret_key),
                      n.keyframe_interval &&
                        this.emit("keyframe-interval", n.keyframe_interval),
                      this.emit(
                        "secure-frames-init",
                        n.secure_frames_version || 0
                      ),
                      (this.resumable = !0);
                    break;
                  case 5:
                    let i = n.speaking;
                    "boolean" == typeof i &&
                      (i = i ? g.SpeakingFlags.VOICE : g.SpeakingFlags.NONE),
                      this.emit("speaking", n.user_id, n.ssrc, i);
                    break;
                  case 3:
                    this.sendHeartbeat();
                    break;
                  case 6:
                    this.emit("ping", Date.now() - n),
                      this.handleHeartbeatAck(n);
                    break;
                  case 12:
                    this.emit(
                      "video",
                      n.user_id,
                      n.audio_ssrc,
                      n.video_ssrc,
                      O(n.streams)
                    );
                    break;
                  case 13:
                    this.emit("client-disconnect", n.user_id);
                    break;
                  case 14:
                    (null != n.audio_codec || null != n.video_codec) &&
                      this.emit("codecs", n.audio_codec, n.video_codec),
                      null != n.media_session_id &&
                        this.emit("media-session-id", n.media_session_id),
                      n.keyframe_interval &&
                        this.emit("keyframe-interval", n.keyframe_interval);
                    break;
                  case 15:
                    this.emit("media-sink-wants", n);
                    break;
                  case 16:
                    null != n.voice &&
                      null != n.rtc_worker &&
                      this.emit("voice-backend-version", n.voice, n.rtc_worker);
                    break;
                  case 17:
                    n.rtc_log_ephemeral_key &&
                      this.emit(
                        "channel-options-update-rtc-log",
                        n.rtc_log_ephemeral_key
                      );
                    break;
                  case 19:
                    this.emit("speed-test", n.op, n);
                    break;
                  case 18:
                    null != n.flags &&
                      null != n.user_id &&
                      this.emit("flags", n.user_id, n.flags);
                    break;
                  case 20:
                    null != n.platform &&
                      null != n.user_id &&
                      this.emit("platform", n.user_id, n.platform);
                    break;
                  case 21:
                    null != n.transition_id &&
                      null != n.protocol_version &&
                      this.emit(
                        "secure-frames-prepare-transition",
                        n.transition_id,
                        n.protocol_version
                      );
                    break;
                  case 22:
                    null != n.transition_id &&
                      this.emit(
                        "secure-frames-execute-transition",
                        n.transition_id
                      );
                    break;
                  case 24:
                    null != n.epoch &&
                      null != n.protocol_version &&
                      this.emit(
                        "secure-frames-prepare-epoch",
                        n.epoch,
                        n.protocol_version
                      );
                    break;
                  case 25:
                    this.emit("mls-external-sender-package", n);
                    break;
                  case 27:
                    this.emit("mls-proposals", n);
                    break;
                  case 29: {
                    let e = new DataView(n.buffer, n.byteOffset, 2),
                      t = e.getUint16(0, !1),
                      i = n.slice(2);
                    this.emit("mls-prepare-commit-transition", t, i);
                    break;
                  }
                  case 30: {
                    let e = new DataView(n.buffer, n.byteOffset, 2),
                      t = e.getUint16(0, !1),
                      i = n.slice(2);
                    this.emit("mls-welcome", t, i);
                    break;
                  }
                  default:
                    this.logger.info("Unhandled op ".concat(t));
                }
              }),
              (e.onerror = () =>
                this.handleClose(
                  !1,
                  0,
                  "An error with the websocket occurred"
                )),
              (e.onclose = e => {
                let { wasClean: t, code: n, reason: i } = e;
                return this.handleClose(t, n, i);
              });
          }
          send(e) {
            let t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : null,
              n = this.webSocket;
            if (null == n || n.readyState !== WebSocket.OPEN) return;
            let i = JSON.stringify({ op: e, d: t });
            S.default.isLoggingGatewayEvents &&
              this.logger.info("<~ ".concat(i));
            try {
              n.send(i);
            } catch (e) {}
          }
          sendBinary(e, t) {
            let n = this.webSocket;
            if (null == n || n.readyState !== WebSocket.OPEN) return;
            let i = new Uint8Array(t.byteLength + 1);
            (i[0] = e), i.set(t, 1);
            try {
              n.send(i.buffer);
            } catch (e) {}
          }
          ping() {
            this.sendHeartbeat();
          }
          doResumeOrClose() {
            let e = Date.now(),
              t =
                null !== this.serverId &&
                null !== this.token &&
                null !== this.sessionId &&
                this.resumable &&
                (null == this.lastHeartbeatAckTime ||
                  e - this.lastHeartbeatAckTime <= v);
            t
              ? (this.doResume(), (this.lastHeartbeatAckTime = e))
              : this.disconnect(!1, 4801, "Cannot resume connection.");
          }
          doResume() {
            var e, t;
            this.logger.info(
              "[RESUME] resuming session. serverId="
                .concat(
                  null !== (e = this.serverId) && void 0 !== e ? e : "",
                  " sessionId="
                )
                .concat(null !== (t = this.sessionId) && void 0 !== t ? t : "")
            ),
              this.emit("resuming"),
              (this.connectionState = 3),
              this.send(7, {
                token: this.token,
                session_id: this.sessionId,
                server_id: this.serverId,
              });
          }
          handleHello(e) {
            var t, n, i;
            if (
              ((this.serverVersion =
                null !== (t = e.v) && void 0 !== t ? t : 3),
              this.serverVersion <= 3)
            ) {
              let t = T.isPlatformEmbedded ? 0.25 : 0.1;
              this.heartbeatInterval = e.heartbeat_interval * t;
            } else
              (this.heartbeatInterval =
                e.heartbeat_interval * this.heartbeatIntervalModifier),
                !T.isPlatformEmbedded &&
                  (this.heartbeatInterval = Math.min(
                    A,
                    null !== (n = this.heartbeatInterval) && void 0 !== n
                      ? n
                      : NaN
                  ));
            let r = Date.now() - this.connectionStartTime;
            this.logger.info(
              "[HELLO] heartbeat interval: "
                .concat(
                  null !== (i = this.heartbeatInterval) && void 0 !== i
                    ? i
                    : "??",
                  ", version: "
                )
                .concat(this.serverVersion, ", took ")
                .concat(r, " ms")
            ),
              this.startHeartbeater();
          }
          handleReady(e) {
            this.backoff.succeed();
            let t = Date.now() - this.connectionStartTime;
            this.logger.info("[READY] took ".concat(t, " ms")),
              this.serverVersion >= 6 && this.send(16, {}),
              this.emit(
                "ready",
                e.ip,
                e.port,
                e.modes,
                e.ssrc,
                O(e.streams),
                e.experiments
              );
          }
          handleResumed(e) {
            this.backoff.succeed();
          }
          handleClose(e, t, n) {
            if (
              ((this.connectionState = 0),
              (e = e || !1),
              this.cleanupWebSocket(),
              4004 === t || 4015 === t || 4011 === t || 4006 === t)
            )
              return this.disconnect(e, t, n);
            if (this.backoff.fails > 3)
              this.logger.warn("[WS CLOSED] Backoff exceed. Resetting."),
                this.disconnect(e, t, n);
            else {
              let i = this.backoff.fail(() => this.reconnect(e, t, n));
              this.logger.warn(
                "[WS CLOSED] (clean: "
                  .concat(e.toString(), ", code: ")
                  .concat(t, ", reason: ")
                  .concat(n, ") retrying in ")
                  .concat((i / 1e3).toFixed(2), " seconds.")
              );
            }
          }
          disconnect(e, t, n) {
            this.logger.warn(
              "[DISCONNECT] ("
                .concat(e.toString(), ", ")
                .concat(t, ", ")
                .concat(n, ")")
            ),
              this.cleanupWebSocket(),
              this.cleanupState(),
              (this.connectionState = 0),
              this.emit("disconnect", e, t, n);
          }
          reconnect(e, t, n) {
            this.logger.info(
              "[RECONNECT] wasClean="
                .concat(e.toString(), " code=")
                .concat(t, " reason=")
                .concat(n)
            ),
              this.cleanupWebSocket(e => e.close(4e3)),
              (this.connectionState = 5),
              this.createWebSocket();
          }
          cleanupWebSocket(e) {
            this.stopHeartbeater(), this.clearHelloTimeout();
            let t = this.webSocket;
            (this.webSocket = null),
              null != t &&
                ((t.onopen = I),
                (t.onmessage = I),
                (t.onerror = I),
                (t.onclose = I),
                null == e || e(t)),
              this.backoff.cancel();
          }
          cleanupState() {
            (this.serverId = null),
              (this.sessionId = null),
              (this.token = null),
              (this.resumable = !1);
          }
          parseWebSocketMessage(e) {
            if (!(e.data instanceof ArrayBuffer)) return JSON.parse(e.data);
            {
              let t = new Uint8Array(e.data);
              return { op: t[0], d: t.subarray(1) };
            }
          }
          clearHelloTimeout() {
            null != this.helloTimeout &&
              (clearTimeout(this.helloTimeout), (this.helloTimeout = null));
          }
          handleHeartbeatAck(e) {
            this.logger.info("Heartbeat ACK received"),
              (this.lastHeartbeatAckTime = Date.now()),
              (this.heartbeatAck = !0),
              null !== this.expeditedHeartbeatTimeout &&
                (clearTimeout(this.expeditedHeartbeatTimeout),
                (this.expeditedHeartbeatTimeout = null),
                this.logger.info("Expedited heartbeat succeeded"));
          }
          handleHeartbeatTimeout() {
            this.cleanupWebSocket(e => e.close(4e3));
            let e = this.backoff.fail(() =>
              this.reconnect(!1, 4800, "Heartbeat timeout.")
            );
            this.logger.warn(
              "[HEARTBEAT ACK TIMEOUT] reconnecting in ".concat(
                (e / 1e3).toFixed(2),
                " seconds."
              )
            );
          }
          startHeartbeater() {
            E(
              null != this.heartbeatInterval,
              "RTCControlSocket: Heartbeat interval should never null here."
            ),
              this.logger.info(
                "Starting heartbeat with interval: ".concat(
                  this.heartbeatInterval
                )
              ),
              null !== this.heartbeater && clearInterval(this.heartbeater),
              (this.heartbeatAck = !0),
              (this.heartbeater = setInterval(() => {
                this.heartbeatAck
                  ? ((this.heartbeatAck = !1), this.sendHeartbeat())
                  : null === this.expeditedHeartbeatTimeout &&
                    this.handleHeartbeatTimeout();
              }, this.heartbeatInterval));
          }
          sendHeartbeat() {
            this.logger.info("Sending heartbeat"), this.send(3, Date.now());
          }
          stopHeartbeater() {
            null !== this.heartbeater &&
              (clearInterval(this.heartbeater), (this.heartbeater = null)),
              null !== this.expeditedHeartbeatTimeout &&
                (clearTimeout(this.expeditedHeartbeatTimeout),
                (this.expeditedHeartbeatTimeout = null));
          }
          connect() {
            return 0 !== this.connectionState
              ? (this.logger.error(
                  "Cannot start a new connection, connection state is not disconnected"
                ),
                !1)
              : ((this.connectionState = 1),
                this.createWebSocket(),
                this.emit("connecting"),
                !0);
          }
          identify(e) {
            let {
              serverId: t,
              userId: n,
              sessionId: i,
              token: r,
              maxSecureFramesVersion: s,
              video: a = !1,
              streamParameters: o,
            } = e;
            (this.serverId = t),
              (this.sessionId = i),
              (this.token = r),
              (this.connectionState = 2),
              this.send(0, {
                server_id: t,
                user_id: n,
                session_id: i,
                token: r,
                max_secure_frames_version: s,
                video: a,
                streams: N(o),
              });
          }
          expeditedHeartbeat(e) {
            let t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : "",
              n =
                !(arguments.length > 2) ||
                void 0 === arguments[2] ||
                arguments[2];
            if (null != this.webSocket)
              this.logger.info(
                "Performing an expedited heartbeat ".concat(
                  "" !== t ? "reason: " + t : ""
                )
              ),
                (this.heartbeatAck = !1),
                this.sendHeartbeat(),
                null !== this.expeditedHeartbeatTimeout &&
                  clearTimeout(this.expeditedHeartbeatTimeout),
                (this.expeditedHeartbeatTimeout = setTimeout(() => {
                  (this.expeditedHeartbeatTimeout = null),
                    !1 === this.heartbeatAck && this.handleHeartbeatTimeout();
                }, e));
            else {
              if (n) return this.resetBackoff(t);
              this.logger.info(
                "Expedited heartbeat requested, but is disconnected and a reset was not " +
                  "requested ".concat("" !== t ? "reason: " + t : "")
              );
            }
            return !1;
          }
          resetBackoff() {
            let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : "";
            return (
              !!(this.backoff.fails > 0) &&
              null == this.webSocket &&
              (this.logger.info(
                "Connection backoff reset ".concat(
                  "" !== e ? "for reason: " + e : ""
                )
              ),
              this.backoff.succeed(),
              this.reconnect(!1, 4802, "Reset backoff."),
              !0)
            );
          }
          close() {
            this.logger.info("CLOSE"),
              this.cleanupWebSocket(e => e.close(4e3)),
              this.cleanupState(),
              (this.connectionState = 0),
              this.emit("disconnect", !0, 1e3, "Force Close");
          }
          destroy() {
            this.close();
          }
          selectProtocol(e, t, n, i) {
            let r;
            let s = {};
            null == n
              ? (r = null)
              : "sdp" in n && null != n.sdp && "" !== n.sdp
                ? ((r = n.sdp),
                  (s = { ...n, codecs: R(n.codecs), rtc_connection_id: t }))
                : "address" in n &&
                  null != n.address &&
                  "" !== n.address &&
                  n.port &&
                  null != n.mode &&
                  "" !== n.mode &&
                  ((r = { address: n.address, port: n.port, mode: n.mode }),
                  (s = {
                    ...n,
                    codecs: R(n.codecs),
                    rtc_connection_id: t,
                    experiments: i,
                  })),
              this.send(1, { protocol: e, data: r, ...s });
          }
          updateSession(e) {
            this.send(14, { codecs: R(e.codecs) });
          }
          speaking(e) {
            let t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : 0,
              n =
                arguments.length > 2 && void 0 !== arguments[2]
                  ? arguments[2]
                  : 0;
            this.send(5, {
              speaking: this.serverVersion <= 3 ? !!e : e,
              delay: t,
              ssrc: n,
            });
          }
          video(e, t, n, i) {
            this.send(12, {
              audio_ssrc: e,
              video_ssrc: t,
              rtx_ssrc: n,
              streams: N(i),
            });
          }
          mediaSinkWants(e) {
            this.serverVersion >= 5 && this.send(15, e);
          }
          speedTest(e, t) {
            this.send(19, { op: e, ...t });
          }
          secureFramesReadyForTransition(e) {
            this.send(23, { transition_id: e });
          }
          sendMLSKeyPackage(e) {
            this.logger.info("Sending MLS key package"),
              this.sendBinary(26, new Uint8Array(e));
          }
          sendMLSCommitWelcome(e) {
            this.logger.info("Sending MLS commit + welcome message"),
              this.sendBinary(28, new Uint8Array(e));
          }
          setHeartbeatIntervalModifier(e) {
            this.heartbeatIntervalModifier = e;
          }
          constructor(e) {
            super(),
              (this.logger = new _.default("RTCControlSocket")),
              (this.backoff = new p.default(1e3, 5e3)),
              (this.serverVersion = 0),
              (this.url = e),
              (this.webSocket = null),
              (this.connectionState = 0),
              (this.helloTimeout = null),
              (this.lastHeartbeatAckTime = null),
              (this.heartbeatInterval = null),
              (this.heartbeater = null),
              (this.heartbeatAck = !0),
              (this.expeditedHeartbeatTimeout = null),
              (this.heartbeatIntervalModifier = 1),
              (this.connectionStartTime = 0),
              (this.sessionId = null),
              (this.serverId = null),
              (this.token = null),
              (this.resumable = !1);
          }
        });
    },
    716380: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          DEFAULT_WANTS_FULL: function () {
            return p;
          },
          RTCMediaSinkWantsManagerEvent: function () {
            return i;
          },
          default: function () {
            return r;
          },
        }),
        n("222007"),
        n("424973");
      var i,
        r,
        s,
        a = n("595275"),
        o = n("773364"),
        l = n("582663"),
        u = n("233736"),
        c = n("862337"),
        d = n("560528"),
        f = n("718517"),
        E = n("49111");
      let p = { any: 100 },
        h = 30 * f.default.Millis.SECOND,
        _ = 120 * f.default.Millis.SECOND,
        S = -1 !== (0, d.getFirefoxVersion)();
      ((s = i || (i = {})).UserSSRCUpdate = "user-ssrc-update"),
        (s.Update = "update"),
        (r = class extends a.default {
          getWantsLevel() {
            let e = this.getVideoParticipantCount();
            return this.ladder.getMaxSinkValue(e);
          }
          userVideoDisabled(e) {
            return this.offscreenDisabledUsers[e];
          }
          shouldReceiveFromUser(e) {
            var t, n;
            return !(
              (null === (t = this.connection) || void 0 === t
                ? void 0
                : t.getLocalVideoDisabled(e)) ||
              (this.userVideoDisabled(e) &&
                (null === (n = this.videoHealthManager) || void 0 === n
                  ? void 0
                  : n.getCurrentVideoToggleState(e)) !==
                  E.VideoToggleState.AUTO_PROBING)
            );
          }
          getAudioSSRCs() {
            return this.audioSsrcs;
          }
          setConnection(e) {
            var t, n, i, r, s, a;
            let l =
              !(arguments.length > 1) ||
              void 0 === arguments[1] ||
              arguments[1];
            null === (t = this.connection) ||
              void 0 === t ||
              t.removeListener(
                o.BaseConnectionEvent.LocalVideoDisabled,
                this.handleLocalVideoDisabled
              ),
              null === (n = this.connection) ||
                void 0 === n ||
                n.removeListener(
                  o.BaseConnectionEvent.LocalMute,
                  this.handleLocalMute
                ),
              null === (i = this.connection) ||
                void 0 === i ||
                i.removeListener(
                  o.BaseConnectionEvent.ActiveSinksChange,
                  this.delayedUpdate
                ),
              (this.connection = e),
              null === (r = this.connection) ||
                void 0 === r ||
                r.addListener(
                  o.BaseConnectionEvent.LocalVideoDisabled,
                  this.handleLocalVideoDisabled
                ),
              null === (s = this.connection) ||
                void 0 === s ||
                s.addListener(
                  o.BaseConnectionEvent.LocalMute,
                  this.handleLocalMute
                ),
              null === (a = this.connection) ||
                void 0 === a ||
                a.addListener(
                  o.BaseConnectionEvent.ActiveSinksChange,
                  this.delayedUpdate
                ),
              l && this.update();
          }
          setAudioSSRC(e, t) {
            return (
              t > 0 ? (this.audioSsrcs[e] = t) : delete this.audioSsrcs[e],
              this.update()
            );
          }
          setVideoSSRCs(e, t) {
            let n = t
              .filter(e => {
                var t;
                return (
                  e.active &&
                  (null !== (t = e.ssrc) && void 0 !== t ? t : 0) > 0
                );
              })
              .map(e => {
                var t;
                return {
                  quality: null !== (t = e.quality) && void 0 !== t ? t : 100,
                  ssrc: e.ssrc,
                };
              });
            if (n.length > 0)
              (this.videoSsrcs[e] = n), this.participants.add(e);
            else {
              if (void 0 !== this.videoSsrcs[e])
                for (let { ssrc: t } of this.videoSsrcs[e])
                  delete this.framesReceived[t];
              delete this.remoteVideoSsrcs[e],
                delete this.videoSsrcs[e],
                this.participants.delete(e),
                this.emit("user-ssrc-update", e, this.audioSsrcs[e], []);
            }
            return this.update(Array.from(this.participants));
          }
          setFirstFrameReceived(e) {
            return (this.framesReceived[e] = !0), this.update();
          }
          setStreamId(e, t) {
            return (
              null != t ? (this.streamIds[e] = t) : delete this.streamIds[e],
              this.update()
            );
          }
          destroyUser(e) {
            return (
              delete this.audioSsrcs[e],
              delete this.videoSsrcs[e],
              this.participants.delete(e),
              delete this.streamIds[e],
              this.update(Array.from(this.participants))
            );
          }
          reset() {
            this.setConnection(null, !1),
              (this.audioSsrcs = {}),
              (this.videoSsrcs = {}),
              (this.remoteVideoSsrcs = {}),
              (this.framesReceived = {}),
              (this.streamIds = {}),
              (this.latestWants = p);
          }
          setSelectedParticipant(e) {
            if (e === this.selectedParticipantId) return this.latestWants;
            let t = [];
            if (
              (null != this.selectedParticipantId &&
                this.selectedParticipantId !== this.userId &&
                t.push(this.selectedParticipantId),
              null != e)
            ) {
              if (this.participants.has(e))
                (this.selectedParticipantId = e), t.push(e);
              else {
                if (this.userId !== e)
                  return (
                    console.warn("Participant not found: ".concat(e)),
                    this.latestWants
                  );
                this.selectedParticipantId = e;
              }
            } else this.selectedParticipantId = null;
            return this.update(
              t.filter(e => {
                var t;
                return (
                  (null === (t = this.videoSsrcs[e]) || void 0 === t
                    ? void 0
                    : t.length) > 1
                );
              })
            );
          }
          setPipOpen(e) {
            return ((this.pipOpen = e), null != this.selectedParticipantId)
              ? this.update([this.selectedParticipantId])
              : this.latestWants;
          }
          setAppBackgrounded(e) {
            let t =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
            for (let [i, r] of Object.entries(this.streamIds))
              if (((this.offscreenDisabledUsers[i] = e), null != r)) {
                var n;
                let i = !e || t;
                null === (n = this.connection) ||
                  void 0 === n ||
                  n.setHasActiveVideoOutputSink(r, i);
              }
            return this.update();
          }
          getOffscreenDisabledUsers() {
            return this.offscreenDisabledUsers;
          }
          getVideoParticipantCount() {
            let e = 0;
            for (let n of Object.keys(this.videoSsrcs)) {
              var t;
              !(null === (t = this.connection) || void 0 === t
                ? void 0
                : t.getLocalVideoDisabled(n)) && e++;
            }
            return e;
          }
          getOffscreenTimeoutMs() {
            return this.isStageChannel ? _ : h;
          }
          constructor(e, t, n, i = new l.MediaSinkWantsLadder()) {
            var r;
            super(),
              (r = this),
              (this.userId = e),
              (this.isStageChannel = t),
              (this.supportsSeamless = n),
              (this.ladder = i),
              (this.connection = null),
              (this.audioSsrcs = {}),
              (this.videoSsrcs = {}),
              (this.remoteVideoSsrcs = {}),
              (this.framesReceived = {}),
              (this.streamIds = {}),
              (this.offscreenUsers = {}),
              (this.offscreenDisabledUsers = {}),
              (this.latestWants = p),
              (this.participants = new Set()),
              (this.selectedParticipantId = null),
              (this.pipOpen = !1),
              (this.videoHealthManager = null),
              (this.delayedUpdate = () => {
                this.delayedCall.delay();
              }),
              (this.addLru = (e, t, n) => {
                if ((n.push(e), n.length <= 3)) return;
                let i = -1,
                  r = -1;
                for (let e = 0; e < n.length; e++) {
                  let s = n[e],
                    a = t - this.offscreenUsers[s];
                  a > i && ((i = a), (r = e));
                }
                (this.offscreenDisabledUsers[n[r]] = !0), n.splice(r, 1);
              }),
              (this.updateOffscreenUsers = () => {
                var e, t;
                if (
                  !(null === (e = this.connection) || void 0 === e
                    ? void 0
                    : e.getActiveOutputSinkTrackingEnabled())
                )
                  return;
                let n = Date.now(),
                  i = [];
                for (let [e, r] of Object.entries(this.streamIds))
                  if (null != r) {
                    if (
                      null === (t = this.connection) || void 0 === t
                        ? void 0
                        : t.getHasActiveVideoOutputSink(r)
                    )
                      delete this.offscreenUsers[e],
                        delete this.offscreenDisabledUsers[e];
                    else if (null == this.offscreenUsers[e])
                      (this.offscreenUsers[e] = n), this.addLru(e, n, i);
                    else if (!this.offscreenDisabledUsers[e]) {
                      let t = n - this.offscreenUsers[e];
                      t >= this.getOffscreenTimeoutMs()
                        ? (this.offscreenDisabledUsers[e] = !0)
                        : this.addLru(e, n, i);
                    }
                  }
                if (i.length > 0) {
                  let e = n + this.getOffscreenTimeoutMs();
                  for (let t of i)
                    e = Math.min(
                      e,
                      this.offscreenUsers[t] + this.getOffscreenTimeoutMs()
                    );
                  this.offscreenTimeout.start(e - n, this.update);
                } else this.offscreenTimeout.stop();
              }),
              (this.handleLocalVideoDisabled = (e, t) => {
                this.update();
              }),
              (this.handleLocalMute = (e, t) => {
                this.update();
              }),
              (this.update = function () {
                let e =
                    arguments.length > 0 && void 0 !== arguments[0]
                      ? arguments[0]
                      : [],
                  t = r.getWantsLevel(),
                  n = { any: t };
                for (let [i, s] of (r.updateOffscreenUsers(),
                Object.entries(r.videoSsrcs))) {
                  let a = [],
                    o = !1,
                    l = s[0].ssrc;
                  if (r.shouldReceiveFromUser(i)) {
                    let e =
                      i === r.selectedParticipantId && 100 !== t && !r.pipOpen;
                    if (s.length > 1) {
                      for (let t of s)
                        100 === t.quality
                          ? e
                            ? ((n[t.ssrc] = 100), (l = t.ssrc))
                            : (n[t.ssrc] = 0)
                          : e
                            ? (n[t.ssrc] = 0)
                            : (l = t.ssrc);
                      if (r.supportsSeamless && !r.framesReceived[l])
                        for (let e of ((o = !0), (a = [l]), s))
                          e.ssrc !== l &&
                            r.framesReceived[e.ssrc] &&
                            (100 === e.quality
                              ? (n[e.ssrc] = 100)
                              : (n[e.ssrc] = t),
                            a.push(e.ssrc));
                    } else e && (n[l] = 100);
                  } else for (let e of s) n[e.ssrc] = 0;
                  for (let e of ((!r.supportsSeamless || !o) && (a = [l]), s))
                    !a.includes(e.ssrc) && delete r.framesReceived[e.ssrc];
                  (e.includes(i) ||
                    (void 0 !== r.remoteVideoSsrcs[i] &&
                      !(0, u.default)(r.remoteVideoSsrcs[i], a))) &&
                    ((r.remoteVideoSsrcs[i] = [...a]),
                    r.emit("user-ssrc-update", i, r.audioSsrcs[i], a));
                }
                for (let [e, t] of Object.entries(r.audioSsrcs)) {
                  var i;
                  (null === (i = r.connection) || void 0 === i
                    ? void 0
                    : i.getLocalMute(e)) && (n[t] = 0);
                }
                return S
                  ? r.latestWants
                  : (null != r.connection &&
                      !(0, u.default)(r.latestWants, n) &&
                      ((r.latestWants = n), r.emit("update", n)),
                    n);
              }),
              (this.delayedCall = new c.DelayedCall(100, this.update)),
              (this.offscreenTimeout = new c.Timeout());
          }
        });
    },
    666038: function (e, t, n) {
      "use strict";
      var i;
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("222007"),
        (i = class e {
          toJS() {
            return { ...this };
          }
          set(e, t) {
            return this[e] !== t
              ? new this.constructor({ ...this, [e]: t })
              : this;
          }
          merge(e) {
            let t = null;
            for (let n in e) {
              if (!e.hasOwnProperty(n)) continue;
              let i = e[n];
              this[n] !== i && (null == t && (t = { ...this }), (t[n] = e[n]));
            }
            return null != t ? new this.constructor(t) : this;
          }
          update(t, n, i) {
            null == i && ((i = n), (n = void 0));
            let r = this[t];
            return (
              r instanceof e ||
                (r instanceof Array
                  ? (r = [...r])
                  : r instanceof Object && (r = { ...r })),
              void 0 === r && (r = n),
              this.set(t, i(r))
            );
          }
        });
    },
    157547: function (e, t, n) {
      "use strict";
      var i;
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("222007"),
        (i = class {
          traceEvent(e, t) {
            let n;
            let i = this._report;
            void 0 !==
            i[
              (n =
                "soundshare_state_transition" === t.type
                  ? "soundshare_state_transition_".concat(
                      [
                        "detached",
                        "waiting",
                        "attached",
                        "started",
                        "playing",
                        "silence",
                      ][t.newState],
                      "_count"
                    )
                  : "".concat(t.type, "_count"))
            ]
              ? i[n] < 32767 && i[n]++
              : i.soundshare_unknown_event_count++,
              "pid" in t &&
                (0 === i.soundshare_first_pid &&
                  (i.soundshare_first_pid = t.pid),
                (i.soundshare_last_pid = t.pid),
                this._pids.add(t.pid)),
              null != e &&
                (null == i.soundshare_first_session &&
                  (i.soundshare_first_session = e),
                (i.soundshare_last_session = e));
          }
          getStats() {
            return { ...this._report, soundshare_unique_pids: this._pids.size };
          }
          constructor() {
            (this._report = {
              soundshare_attach_requested_count: 0,
              soundshare_capturing_count: 0,
              soundshare_capture_stopped_count: 0,
              soundshare_hooked_count: 0,
              soundshare_recv_connect_count: 0,
              soundshare_recv_disconnect_count: 0,
              soundshare_recv_started_count: 0,
              soundshare_recv_stopped_count: 0,
              soundshare_recv_failed_count: 0,
              soundshare_recv_format_count: 0,
              soundshare_send_announce_count: 0,
              soundshare_send_start_count: 0,
              soundshare_send_stop_count: 0,
              soundshare_malformed_trace_count: 0,
              soundshare_audio_detected_count: 0,
              soundshare_state_transition_detached_count: 0,
              soundshare_state_transition_waiting_count: 0,
              soundshare_state_transition_attached_count: 0,
              soundshare_state_transition_started_count: 0,
              soundshare_state_transition_playing_count: 0,
              soundshare_state_transition_silence_count: 0,
              soundshare_unknown_event_count: 0,
              soundshare_first_pid: 0,
              soundshare_last_pid: 0,
              soundshare_unique_pids: 0,
              soundshare_first_session: null,
              soundshare_last_session: null,
            }),
              (this._pids = new Set());
          }
        });
    },
    88313: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          VideoHealthManager: function () {
            return l;
          },
        }),
        n("424973"),
        n("222007");
      var i = n("811022"),
        r = n("398183"),
        s = n("591883"),
        a = n("718517"),
        o = n("49111");
      class l {
        calculateFps(e, t, n) {
          if (
            -1 === this.prevFramesCodec[e] ||
            t < this.prevFramesCodec[e] ||
            n < this.prevTimestamp[e] ||
            n > this.prevTimestamp[e] + 1e3 * this.windowLength
          )
            return (
              (this.prevFramesCodec[e] = t),
              (this.prevTimestamp[e] = n),
              (this.perUserFpsWindow[e] = []),
              NaN
            );
          if (n < this.prevTimestamp[e] + 900) return NaN;
          let i = this.elapsedSeconds(n, this.prevTimestamp[e]);
          this.prevTimestamp[e] = n;
          let r = (t - this.prevFramesCodec[e]) / i;
          return (this.prevFramesCodec[e] = t), r;
        }
        updateFps(e, t, n) {
          if (!this.disabled && !this.streamDisabledUsers.has(e)) {
            let i = this.calculateFps(e, t, n);
            if (i < 0 || !Number.isFinite(i)) return;
            if (
              (this.perUserFpsWindow[e].push(i),
              this.perUserFpsWindow[e].length < this.windowLength)
            )
              return;
            this.perUserFpsWindow[e].length > this.windowLength &&
              this.perUserFpsWindow[e].shift();
            let r = this.perUserFpsWindow[e].filter(
              e => e < this.fpsThreshold
            ).length;
            r >= this.fpsWindowBorderlineCount
              ? (this.logger.info(
                  "".concat(
                    e,
                    ": detected poor network quality, turning off video"
                  )
                ),
                this.streamDisabledUsers.add(e),
                (this.currentVideoAutoToggleState[e] =
                  o.VideoToggleState.DISABLED),
                (0, s.default)(e, o.VideoToggleState.DISABLED),
                this.startReenableBackoffTimer(e))
              : this.currentVideoAutoToggleState[e] ===
                  o.VideoToggleState.AUTO_PROBING &&
                ((this.currentVideoAutoToggleState[e] =
                  o.VideoToggleState.AUTO_ENABLED),
                this.logger.info(
                  "acceptable conditions reached, will reset and send a AUTO_ENABLED for user ".concat(
                    e
                  )
                ),
                (0, s.default)(e, o.VideoToggleState.AUTO_ENABLED)),
              this.probingUserId === e &&
                ((this.probingUserId = void 0), this.tryReenableQueue());
          }
        }
        startReenableBackoffTimer(e) {
          if (this.disabled) return;
          this.logger.info("startReenableBackoffTimer for user ".concat(e));
          let { lastBackoffTime: t, expBackoffFactor: n } =
            this.retryBackoffCache[e];
          null === t || n > 16 || this.elapsedSeconds((0, r.now)(), t) > 600
            ? (n = 1)
            : (n *= 2),
            (this.retryBackoffCache[e] = {
              lastBackoffTime: (0, r.now)(),
              expBackoffFactor: n,
            });
          let i = n * this.backoffTimeSec * a.default.Millis.SECOND;
          this.logger.info(
            "starting backoff timer with time = ".concat(i, " milliseconds")
          ),
            (this.timeoutIdCache[e] = setTimeout(() => {
              this.queueReenable(e);
            }, i));
        }
        queueReenable(e) {
          this.enableQueue.push(e), this.tryReenableQueue();
        }
        tryReenableQueue() {
          if (!this.disabled) {
            if (
              null == this.probingUserId ||
              !(this.probingUserId in this.perUserFpsWindow)
            )
              for (
                let e = this.enableQueue.shift();
                null != e && !this.reenableVideo(e);

              );
          }
        }
        reenableVideo(e) {
          return (
            e in this.perUserFpsWindow &&
            (this.logger.info(
              "reenableVideo called for user "
                .concat(e, " - time = ")
                .concat((0, r.now)())
            ),
            this.stateCleanupBeforeEnable(e),
            (this.currentVideoAutoToggleState[e] =
              o.VideoToggleState.AUTO_PROBING),
            (this.probingUserId = e),
            (0, s.default)(e, o.VideoToggleState.AUTO_PROBING),
            !0)
          );
        }
        elapsedSeconds(e, t) {
          return (e - t) / 1e3;
        }
        stateCleanupBeforeEnable(e) {
          this.logger.info("VideoHealthManager::stateCleanupBeforeEnable"),
            (this.perUserFpsWindow[e] = []),
            (this.prevFramesCodec[e] = -1),
            this.streamDisabledUsers.delete(e);
        }
        getCurrentVideoToggleState(e) {
          return this.currentVideoAutoToggleState[e];
        }
        createUser(e) {
          this.logger.info("VideoHealthManager::createUser ".concat(e)),
            !(e in this.perUserFpsWindow) &&
              ((this.perUserFpsWindow[e] = []),
              (this.prevFramesCodec[e] = -1),
              (this.currentVideoAutoToggleState[e] = o.VideoToggleState.NONE),
              (this.retryBackoffCache[e] = {
                lastBackoffTime: null,
                expBackoffFactor: 1,
              }));
        }
        deleteUser(e) {
          this.logger.info("VideoHealthManager::deleteUser ".concat(e)),
            delete this.perUserFpsWindow[e],
            delete this.prevFramesCodec[e],
            delete this.retryBackoffCache[e],
            delete this.currentVideoAutoToggleState[e],
            this.streamDisabledUsers.delete(e),
            e === this.probingUserId &&
              ((this.probingUserId = void 0), this.tryReenableQueue()),
            clearTimeout(this.timeoutIdCache[e]),
            delete this.timeoutIdCache[e];
        }
        disable() {
          for (let e in ((this.disabled = !0), this.perUserFpsWindow))
            this.deleteUser(e);
        }
        constructor(e, t, n, r) {
          (this.logger = new i.default("VideoHealthManager")),
            (this.disabled = !1),
            (this.perUserFpsWindow = {}),
            (this.prevFramesCodec = {}),
            (this.prevTimestamp = {}),
            (this.streamDisabledUsers = new Set()),
            (this.retryBackoffCache = {}),
            (this.timeoutIdCache = {}),
            (this.currentVideoAutoToggleState = {}),
            (this.enableQueue = []),
            (this.windowLength = e),
            (this.fpsThreshold = n),
            (this.fpsWindowBorderlineCount = Math.ceil(e * t)),
            (this.backoffTimeSec = r),
            this.logger.info(
              "constructor with windowLength = "
                .concat(
                  this.windowLength,
                  ",\n      fpsWindowBorderlineCount = "
                )
                .concat(
                  this.fpsWindowBorderlineCount,
                  ",\n      fpsThreshold = "
                )
                .concat(this.fpsThreshold, ",\n      backoffTimeSec = ")
                .concat(r)
            );
        }
      }
    },
    531748: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          VideoQualityEvent: function () {
            return i;
          },
          VideoQuality: function () {
            return p;
          },
        }),
        n("222007"),
        n("424973");
      var i,
        r = n("917351"),
        s = n.n(r),
        a = n("595275"),
        o = n("773364"),
        l = n("398183"),
        u = n("773336"),
        c = n("497407"),
        d = n("44642");
      function f(e) {
        let t =
          arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;
        return null != e ? Math.round(e) : t;
      }
      class E {
        set value(e) {
          e && !this.state && (this.begin = this.timestampProducer.now()),
            !e &&
              this.state &&
              ((this.total +=
                this.timestampProducer.now() - Number(this.begin)),
              (this.begin = null)),
            (this.state = e);
        }
        get value() {
          return this.state;
        }
        totalDuration() {
          return null != this.begin
            ? this.total + this.timestampProducer.now() - this.begin
            : this.total;
        }
        constructor(e, t) {
          (this.timestampProducer = t),
            (this.total = 0),
            (this.state = e),
            (this.begin = e ? t.now() : null);
        }
      }
      (i || (i = {})).FpsUpdate = "fps-update";
      class p extends a.default {
        addUserToStatsCollectionPausedSet(e) {
          this.statCollectionPausedUsers.add(e);
        }
        removeUserFromStatsCollectionPausedSet(e) {
          this.statCollectionPausedUsers.delete(e);
        }
        start() {
          (this.streamStart = this.timestampProducer.now()),
            this.connection.on(o.BaseConnectionEvent.Stats, this.sampleStats);
        }
        setOutboundSsrc(e) {
          null == this.outboundStats[e] &&
            (this.outboundStats[e] = new d.OutboundStats(
              this.timestampProducer
            ));
        }
        getOrCreateInboundStats(e) {
          return (
            null == this.inboundStats[e] &&
              (this.inboundStats[e] = new d.InboundStats(
                this.timestampProducer
              )),
            this.inboundStats[e]
          );
        }
        setInboundUser(e, t) {
          let n = this.getOrCreateInboundStats(e);
          n.setVideoStopped(0 === t, d.VideoStoppedReasons.SenderStopped);
        }
        setUserVideoDisabled(e, t) {
          let n = this.getOrCreateInboundStats(e);
          n.setVideoStopped(t, d.VideoStoppedReasons.ClientSideDisableVideo),
            !t &&
              n.statsWindow.length > 0 &&
              0 === n.statsWindow[0].packets &&
              (n.startTime = this.timestampProducer.now());
        }
        pause() {
          !this.paused.value && this.pausedCount++,
            s.forEach(this.outboundStats, e => {
              e.statsWindow = [];
            }),
            s.forEach(this.inboundStats, e => {
              e.statsWindow = [];
            }),
            this.updateSendState({ paused: !0 });
        }
        resume() {
          this.updateSendState({ paused: !1 });
        }
        stop() {
          this.connection.off(o.BaseConnectionEvent.Stats, this.sampleStats),
            (this.streamEnd = this.timestampProducer.now()),
            this.removeAllListeners();
        }
        getNetworkStats() {
          return this.networkQuality.getStats();
        }
        getEncoderUsageStats() {
          let e = new Map();
          for (let t in this.outboundStats) {
            let n = new Map();
            for (let i of this.outboundStats[t].getCodecsUsed()) {
              let r = i.toUpperCase();
              n.set(r, f(this.outboundStats[t].codecBuckets[r])),
                e.set(parseInt(t), n);
            }
          }
          return e;
        }
        getDecoderUsageStats() {
          let e = new Map();
          for (let t in this.inboundStats) {
            let n = new Map();
            for (let i of this.inboundStats[t].getCodecsUsed()) {
              let r = i.toUpperCase();
              n.set(r, f(this.inboundStats[t].codecBuckets[r])), e.set(t, n);
            }
          }
          return e;
        }
        getCodecUsageStats(e, t) {
          var n, i, r, s, a, o, l, u, c, f;
          let E = this.asymmetricCodecUpdates > this.symmetricCodecUpdates,
            p = new Map();
          if ("sender" === e || "streamer" === e) {
            let e = this.getEncoderUsageStats();
            if (e.size > 0) {
              let t = [...e.keys()].sort()[0];
              p = e.get(t);
            }
            return {
              codec_asymmetric_session: E,
              codec_h264_encode_duration_sec:
                null !== (n = p.get(d.CodecTypes.H264)) && void 0 !== n ? n : 0,
              codec_h265_encode_duration_sec:
                null !== (i = p.get(d.CodecTypes.H265)) && void 0 !== i ? i : 0,
              codec_vp8_encode_duration_sec:
                null !== (r = p.get(d.CodecTypes.VP8)) && void 0 !== r ? r : 0,
              codec_vp9_encode_duration_sec:
                null !== (s = p.get(d.CodecTypes.VP9)) && void 0 !== s ? s : 0,
              codec_av1_encode_duration_sec:
                null !== (a = p.get(d.CodecTypes.AV1)) && void 0 !== a ? a : 0,
            };
          }
          {
            let e = this.getDecoderUsageStats();
            return (
              e.has(t) && (p = e.get(t)),
              {
                codec_asymmetric_session: E,
                codec_h264_decode_duration_sec:
                  null !== (o = p.get(d.CodecTypes.H264)) && void 0 !== o
                    ? o
                    : 0,
                codec_h265_decode_duration_sec:
                  null !== (l = p.get(d.CodecTypes.H265)) && void 0 !== l
                    ? l
                    : 0,
                codec_vp8_decode_duration_sec:
                  null !== (u = p.get(d.CodecTypes.VP8)) && void 0 !== u
                    ? u
                    : 0,
                codec_vp9_decode_duration_sec:
                  null !== (c = p.get(d.CodecTypes.VP9)) && void 0 !== c
                    ? c
                    : 0,
                codec_av1_decode_duration_sec:
                  null !== (f = p.get(d.CodecTypes.AV1)) && void 0 !== f
                    ? f
                    : 0,
              }
            );
          }
        }
        getOutboundStats() {
          let e = [];
          return (
            s.forEach(this.outboundStats, (t, n) => {
              var i, r, s, a;
              let o;
              let l =
                null === (i = this.connection) || void 0 === i
                  ? void 0
                  : i.getStreamParameters();
              l.length > 1 &&
                l.forEach(e => {
                  if (parseInt(n) === e.ssrc) {
                    var t;
                    o = null !== (t = e.quality) && void 0 !== t ? t : 50;
                  }
                });
              let u = [1, 5, 10, 25, 50, 75],
                c = t.vmafHistogram.getReport(u),
                E = t.psnrHistogram.getReport(u),
                p = t.targetBitrateHistogram.getReport([
                  1, 5, 10, 25, 50, 75, 99,
                ]),
                h = t.aggregationDuration / 1e3;
              e.push({
                ...this.getStats(t),
                target_fps:
                  h > 0
                    ? Math.round(
                        (null !== (r = t.targetFrames) && void 0 !== r
                          ? r
                          : 0) / h
                      )
                    : 0,
                target_bitrate_network:
                  h > 0
                    ? Math.round(
                        ((null !== (s = t.targetBytesNetwork) && void 0 !== s
                          ? s
                          : 0) *
                          8) /
                          h
                      )
                    : 0,
                target_bitrate_network_percentile1:
                  p.count > 0 ? p.percentiles[1] : null,
                target_bitrate_network_percentile5:
                  p.count > 0 ? p.percentiles[5] : null,
                target_bitrate_network_percentile10:
                  p.count > 0 ? p.percentiles[10] : null,
                target_bitrate_network_percentile25:
                  p.count > 0 ? p.percentiles[25] : null,
                target_bitrate_network_percentile50:
                  p.count > 0 ? p.percentiles[50] : null,
                target_bitrate_network_percentile75:
                  p.count > 0 ? p.percentiles[75] : null,
                target_bitrate_network_percentile99:
                  p.count > 0 ? p.percentiles[99] : null,
                target_bitrate_max:
                  h > 0
                    ? Math.round(
                        ((null !== (a = t.targetBytesMax) && void 0 !== a
                          ? a
                          : 0) *
                          8) /
                          h
                      )
                    : 0,
                duration_encoder_nvidia_cuda: f(
                  t.encoderBuckets[d.Encoders.NVIDIA_CUDA]
                ),
                duration_encoder_nvidia_direct3d: f(
                  t.encoderBuckets[d.Encoders.NVIDIA_DIRECT_3D]
                ),
                duration_encoder_openh264: f(
                  t.encoderBuckets[d.Encoders.OPENH264]
                ),
                duration_encoder_videotoolbox: f(
                  t.encoderBuckets[d.Encoders.VIDEOTOOLBOX]
                ),
                duration_encoder_amd_direct3d: f(
                  t.encoderBuckets[d.Encoders.AMD_DIRECT_3D]
                ),
                duration_encoder_intel: f(t.encoderBuckets[d.Encoders.INTEL]),
                duration_encoder_intel_direct3d: f(
                  t.encoderBuckets[d.Encoders.INTEL_DIRECT_3D]
                ),
                duration_encoder_vp8_libvpx: f(
                  t.encoderBuckets[d.Encoders.VP8_LIBVPX]
                ),
                duration_encoder_uncategorized: f(
                  t.encoderBuckets[d.Encoders.UNCATEGORIZED]
                ),
                duration_encoder_unknown: f(
                  t.encoderBuckets[d.Encoders.UNKNOWN]
                ),
                quality: o,
                average_encode_time_ms: t.averageEncodeTime,
                average_encoder_vmaf_score:
                  t.vmafScoreNum > 0 ? t.vmafScoreSum / t.vmafScoreNum : null,
                encoder_vmaf_score_percentile1:
                  c.count > 0 ? c.percentiles[1] : null,
                encoder_vmaf_score_percentile5:
                  c.count > 0 ? c.percentiles[5] : null,
                encoder_vmaf_score_percentile10:
                  c.count > 0 ? c.percentiles[10] : null,
                encoder_vmaf_score_percentile25:
                  c.count > 0 ? c.percentiles[25] : null,
                encoder_vmaf_score_percentile50:
                  c.count > 0 ? c.percentiles[50] : null,
                encoder_vmaf_score_percentile75:
                  c.count > 0 ? c.percentiles[75] : null,
                average_encoder_psnr_db:
                  t.psnrDbNum > 0 ? t.psnrDbSum / t.psnrDbNum : null,
                encoder_psnr_db_percentile1:
                  E.count > 0 ? E.percentiles[1] : null,
                encoder_psnr_db_percentile5:
                  E.count > 0 ? E.percentiles[5] : null,
                encoder_psnr_db_percentile10:
                  E.count > 0 ? E.percentiles[10] : null,
                encoder_psnr_db_percentile25:
                  E.count > 0 ? E.percentiles[25] : null,
                encoder_psnr_db_percentile50:
                  E.count > 0 ? E.percentiles[50] : null,
                encoder_psnr_db_percentile75:
                  E.count > 0 ? E.percentiles[75] : null,
                average_outbound_want:
                  t.outboundSinkWantNum > 0
                    ? t.outboundSinkWantSum / t.outboundSinkWantNum
                    : null,
                frames_dropped_rate_limiter: t.framesDroppedRateLimiter,
                frames_dropped_encoder_queue: t.framesDroppedEncoderQueue,
                frames_dropped_congestion_window:
                  t.framesDroppedCongestionWindow,
              });
            }),
            e
          );
        }
        getInboundStats(e) {
          return this.getStats(this.inboundStats[e]);
        }
        destroyUser(e) {
          delete this.inboundStats[e];
        }
        getInboundParticipants() {
          return Object.keys(this.inboundStats);
        }
        updateSendState(e) {
          null != e.paused && (this.paused.value = e.paused),
            null != e.receivers &&
              (this.zeroReceivers.value = 0 === e.receivers);
          let t = this.paused.value || this.zeroReceivers.value,
            n = this.videoStopped.value;
          (this.videoStopped.value = t),
            t !== n && s.forEach(this.outboundStats, e => (e.statsWindow = []));
        }
        getStats(e) {
          if (null == e) return;
          let t = Number(this.streamStart),
            n =
              null != this.streamEnd
                ? this.streamEnd - t
                : this.timestampProducer.now() - t,
            i = Math.max(e.aggregationDuration, 0),
            r = i / 1e3,
            s = [1, 5, 10, 25, 50, 75],
            a = e.cpuHistogram.getReport(),
            o = e.memoryHistogram.getReport(),
            l = e.fpsHistogram.getReport(s),
            u = e.bitrateHistogram.getReport([1, 5, 10, 25, 50, 75, 99]),
            c = e.resolutionHistogram.getReport(s),
            d = {
              duration: Math.floor(n / 1e3),
              duration_aggregation: f(r),
              duration_stopped_receiving: f(e.videoStoppedDuration.asSeconds()),
              duration_stream_under_8mbps: f(e.bitrateBuckets[8e6]),
              duration_stream_under_7mbps: f(e.bitrateBuckets[7e6]),
              duration_stream_under_6mbps: f(e.bitrateBuckets[6e6]),
              duration_stream_under_5mbps: f(e.bitrateBuckets[5e6]),
              duration_stream_under_4mbps: f(e.bitrateBuckets[4e6]),
              duration_stream_under_3mbps: f(e.bitrateBuckets[3e6]),
              duration_stream_under_2mbps: f(e.bitrateBuckets[2e6]),
              duration_stream_under_1_5mbps: f(e.bitrateBuckets[15e5]),
              duration_stream_under_1mbps: f(e.bitrateBuckets[1e6]),
              duration_stream_under_0_5mbps: f(e.bitrateBuckets[5e5]),
              duration_stream_at_0mbps: f(e.bitrateBuckets[0]),
              duration_fps_under_60: f(e.fpsBuckets[60]),
              duration_fps_under_55: f(e.fpsBuckets[55]),
              duration_fps_under_50: f(e.fpsBuckets[50]),
              duration_fps_under_45: f(e.fpsBuckets[45]),
              duration_fps_under_40: f(e.fpsBuckets[40]),
              duration_fps_under_35: f(e.fpsBuckets[35]),
              duration_fps_under_30: f(e.fpsBuckets[30]),
              duration_fps_under_25: f(e.fpsBuckets[25]),
              duration_fps_under_20: f(e.fpsBuckets[20]),
              duration_fps_under_15: f(e.fpsBuckets[15]),
              duration_fps_under_10: f(e.fpsBuckets[10]),
              duration_fps_under_5: f(e.fpsBuckets[5]),
              duration_fps_at_0: f(e.fpsBuckets[0]),
              avg_resolution:
                e.intervalTotal > 0
                  ? Math.round(e.resolutionTotal / e.intervalTotal)
                  : 0,
              avg_minor_resolution:
                e.intervalTotal > 0
                  ? Math.round(e.minorResolutionTotal / e.intervalTotal)
                  : 0,
              avg_major_resolution:
                e.intervalTotal > 0
                  ? Math.round(e.majorResolutionTotal / e.intervalTotal)
                  : 0,
              duration_resolution_under_720: f(e.resolutionBuckets[720]),
              duration_resolution_under_480: f(e.resolutionBuckets[480]),
              duration_resolution_under_360: f(e.resolutionBuckets[360]),
              num_pauses: this.pausedCount,
              duration_paused: f(this.paused.totalDuration() / 1e3),
              duration_zero_receivers: f(
                this.zeroReceivers.totalDuration() / 1e3
              ),
              duration_video_stopped: f(
                this.videoStopped.totalDuration() / 1e3
              ),
              client_performance_cpu_percentile25: a.percentiles[25],
              client_performance_cpu_percentile50: a.percentiles[50],
              client_performance_cpu_percentile75: a.percentiles[75],
              client_performance_cpu_percentile90: a.percentiles[90],
              client_performance_cpu_percentile95: a.percentiles[95],
              client_performance_memory_percentile25: o.percentiles[25],
              client_performance_memory_percentile50: o.percentiles[50],
              client_performance_memory_percentile75: o.percentiles[75],
              client_performance_memory_percentile90: o.percentiles[90],
              client_performance_memory_percentile95: o.percentiles[95],
              client_performance_memory_min: o.min,
              client_performance_memory_max: o.max,
              fps_percentile1: l.percentiles[1],
              fps_percentile5: l.percentiles[5],
              fps_percentile10: l.percentiles[10],
              fps_percentile25: l.percentiles[25],
              fps_percentile50: l.percentiles[50],
              fps_percentile75: l.percentiles[75],
              bitrate_percentile1: u.percentiles[1],
              bitrate_percentile5: u.percentiles[5],
              bitrate_percentile10: u.percentiles[10],
              bitrate_percentile25: u.percentiles[25],
              bitrate_percentile50: u.percentiles[50],
              bitrate_percentile75: u.percentiles[75],
              bitrate_percentile99: u.percentiles[99],
              resolution_percentile1: c.percentiles[1],
              resolution_percentile5: c.percentiles[5],
              resolution_percentile10: c.percentiles[10],
              resolution_percentile25: c.percentiles[25],
              resolution_percentile50: c.percentiles[50],
              resolution_percentile75: c.percentiles[75],
              duration_video_effect: f(
                this.videoEffectDuration.totalDuration() / 1e3
              ),
              cryptor_max_attempts: e.cryptorMaxAttempts,
            },
            {
              bytes: E,
              framesDropped: p,
              framesCodecError: h,
              framesCodec: _,
              framesNetwork: S,
              packets: m,
              packetsLost: T,
              nackCount: g,
              pliCount: I,
              qpSum: C,
              pauseCount: v,
              freezeCount: A,
              totalPausesDuration: R,
              totalFreezesDuration: N,
              totalFramesDuration: O,
              keyframes: D,
              passthroughCount: y,
              cryptorSuccessCount: P,
              cryptorFailureCount: L,
              cryptorDuration: b,
              cryptorAttempts: M,
            } = e.aggregatedProperties;
          return {
            ...d,
            avg_bitrate: r > 0 ? Math.round(((null != E ? E : 0) * 8) / r) : 0,
            avg_fps: r > 0 ? Math.round((null != _ ? _ : 0) / r) : 0,
            num_bytes: E,
            num_packets_lost: T,
            num_packets: m,
            num_frames: S,
            num_frames_codec_error: h,
            time_to_first_frame_ms: e.timeToFirstFrame,
            num_frames_dropped: p,
            num_nacks: g,
            num_plis: I,
            qp_sum: C,
            receiver_pause_count: v,
            receiver_freeze_count: A,
            receiver_total_pauses_duration: R,
            receiver_total_freezes_duration: N,
            receiver_total_frames_duration: O,
            num_keyframes: D,
            cryptor_passthrough_count: y,
            cryptor_success_count: P,
            cryptor_failure_count: L,
            cryptor_duration: b,
            cryptor_attempts: M,
          };
        }
        receivedStats(e, t, n) {
          var i, r, a, o;
          let l = t.transport,
            c = (0, u.isWeb)()
              ? 1
              : null !==
                    (r =
                      null === (i = l.receiverReports) || void 0 === i
                        ? void 0
                        : i.length) && void 0 !== r
                ? r
                : 0,
            f = new Set(),
            E = new Set();
          if (
            (this.updateSendState({ receivers: c }),
            t.rtp.outbound
              .filter(e => "video" === e.type)
              .forEach(t => {
                if (null != t) {
                  var i, r, s, a, o, u, c, E, p;
                  let h = t.ssrc,
                    _ = this.outboundStats[h];
                  if (
                    (null == _ &&
                      (console.warn(
                        "Unknown outbound video stream with SSRC: ".concat(h)
                      ),
                      (_ = new d.OutboundStats(this.timestampProducer)),
                      (this.outboundStats[h] = _)),
                    null == _.timeToFirstFrame &&
                      (t.framesEncoded > 0 ||
                        (null !== (i = t.frameRateInput) && void 0 !== i
                          ? i
                          : 0) > 0) &&
                      (_.timeToFirstFrame = Math.max(0, e - _.startTime)),
                    !this.videoStopped.value)
                  ) {
                    _.appendAndIncrementStats(
                      d.RawVideoStats.parseOutboundStats(t, e)
                    ),
                      _.encoderCodec !== d.CodecTypes.UNKNOWN &&
                        f.add(_.encoderCodec);
                    let i =
                      null === (r = n.find(e => e.ssrc === h)) || void 0 === r
                        ? void 0
                        : r.maxBitrate;
                    _.appendTargetRates(
                      null === (s = n.find(e => e.ssrc === h)) || void 0 === s
                        ? void 0
                        : s.maxFrameRate,
                      null !== (o = t.bitrateTarget) && void 0 !== o
                        ? o
                        : Math.min(
                            null !== (a = l.availableOutgoingBitrate) &&
                              void 0 !== a
                              ? a
                              : 0,
                            null != i ? i : 0
                          ),
                      i
                    ),
                      (_.averageEncodeTime =
                        null !== (u = t.averageEncodeTime) && void 0 !== u
                          ? u
                          : 0),
                      (_.framesDroppedRateLimiter =
                        null !== (c = t.framesDroppedRateLimiter) &&
                        void 0 !== c
                          ? c
                          : null),
                      (_.framesDroppedEncoderQueue =
                        null !== (E = t.framesDroppedEncoderQueue) &&
                        void 0 !== E
                          ? E
                          : null),
                      (_.framesDroppedCongestionWindow =
                        null !== (p = t.framesDroppedCongestionWindow) &&
                        void 0 !== p
                          ? p
                          : null);
                  }
                }
              }),
            !this.paused.value &&
              s.forEach(t.rtp.inbound, (t, n) => {
                let i = t.find(e => "video" === e.type);
                if (null != i) {
                  let t = this.inboundStats[n];
                  null == t &&
                    (console.warn(
                      "Unknown inbound video stream for user: ".concat(n)
                    ),
                    (t = new d.InboundStats(this.timestampProducer)),
                    (this.inboundStats[n] = t));
                  let r = d.RawVideoStats.parseInboundStats(i, e);
                  !this.statCollectionPausedUsers.has(n) &&
                    t.appendAndIncrementStats(r),
                    r.packets > 0 &&
                      this.emit("fps-update", n, r.framesCodec, r.timestamp),
                    t.decoderCodec !== d.CodecTypes.UNKNOWN &&
                      E.add(t.decoderCodec),
                    null == t.timeToFirstFrame &&
                      i.framesDecoded > 0 &&
                      (t.timeToFirstFrame = e - t.startTime);
                }
              }),
            0 !== f.size && 0 !== E.size)
          ) {
            if (
              ((a = f),
              (o = E),
              a.size === o.size && Array.from(a).every(e => o.has(e)))
            )
              this.symmetricCodecUpdates++;
            else this.asymmetricCodecUpdates++;
          }
        }
        updateSystemResourceStats() {
          for (let e in this.outboundStats)
            this.outboundStats[e].addSystemResources();
          for (let e in this.inboundStats)
            this.inboundStats[e].addSystemResources();
        }
        updateVideoEffectStats(e) {
          let t =
            null == e ? void 0 : e.rtp.outbound.find(e => "video" === e.type);
          this.videoEffectDuration.value =
            (null == t ? void 0 : t.type) === "video" && null != t.filter;
        }
        constructor(e, t = l.TimeStampProducer) {
          super(),
            (this.connection = e),
            (this.timestampProducer = t),
            (this.networkQuality = new c.default()),
            (this.pausedCount = 0),
            (this.outboundStats = {}),
            (this.inboundStats = {}),
            (this.symmetricCodecUpdates = 0),
            (this.asymmetricCodecUpdates = 0),
            (this.statCollectionPausedUsers = new Set()),
            (this.sampleStats = e => {
              if (null == e) return;
              let t = this.timestampProducer.now();
              if (
                (this.networkQuality.incrementNetworkStats(t),
                this.updateSystemResourceStats(),
                this.updateVideoEffectStats(e),
                null == e)
              )
                return;
              let n = this.connection.getStreamParameters();
              this.receivedStats(t, e, n);
            }),
            (this.paused = new E(!1, t)),
            (this.zeroReceivers = new E(!1, t)),
            (this.videoStopped = new E(!1, t)),
            (this.videoEffectDuration = new E(!1, t));
        }
      }
    },
    44642: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          CodecTypes: function () {
            return i;
          },
          Encoders: function () {
            return r;
          },
          VideoStoppedReasons: function () {
            return a;
          },
          parseEncoder: function () {
            return g;
          },
          RawVideoStats: function () {
            return C;
          },
          InboundStats: function () {
            return v;
          },
          OutboundStats: function () {
            return A;
          },
        }),
        n("222007"),
        n("424973");
      var i,
        r,
        s,
        a,
        o,
        l,
        u,
        c,
        d = n("398183"),
        f = n("872507"),
        E = n("226445");
      let p = [0, 5e5, 1e6, 15e5, 2e6, 3e6, 4e6, 5e6, 6e6, 7e6, 8e6],
        h = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60],
        _ = [720, 480, 360],
        S = [
          "framesCodec",
          "framesNetwork",
          "packets",
          "packetsLost",
          "framesDropped",
          "framesCodecError",
          "bytes",
          "nackCount",
          "pliCount",
          "qpSum",
          "freezeCount",
          "pauseCount",
          "totalFreezesDuration",
          "totalPausesDuration",
          "totalFramesDuration",
          "keyframes",
          "passthroughCount",
          "cryptorSuccessCount",
          "cryptorFailureCount",
          "cryptorDuration",
          "cryptorAttempts",
        ];
      ((o = i || (i = {})).H264 = "H264"),
        (o.H265 = "H265"),
        (o.VP8 = "VP8"),
        (o.VP9 = "VP9"),
        (o.AV1 = "AV1"),
        (o.UNKNOWN = "UNKNOWN"),
        ((l = r || (r = {})).NVIDIA_CUDA = "nvidia_cuda"),
        (l.NVIDIA_DIRECT_3D = "nvidia_direct_3d"),
        (l.OPENH264 = "openh264"),
        (l.VIDEOTOOLBOX = "videotoolbox"),
        (l.AMD_DIRECT_3D = "amd_direct_3d"),
        (l.INTEL = "intel"),
        (l.INTEL_DIRECT_3D = "intel_direct_3d"),
        (l.VP8_LIBVPX = "vp8_libvpx"),
        (l.UNCATEGORIZED = "uncategorized"),
        (l.UNKNOWN = "unknown"),
        ((u = s || (s = {})).NVIDIA_DIRECT_3D = "nvidia_direct_3d"),
        (u.OPENH264 = "openh264"),
        (u.VIDEOTOOLBOX = "videotoolbox"),
        (u.AMD_DIRECT_3D = "amd_direct_3d"),
        (u.INTEL = "intel"),
        (u.INTEL_DIRECT_3D = "intel_direct_3d"),
        (u.VP8_LIBVPX = "vp8_libvpx"),
        (u.UNCATEGORIZED = "uncategorized"),
        (u.UNKNOWN = "unknown");
      let m = Object.freeze({
          "nvidia: cuda": "nvidia_cuda",
          "nvidia: direct3d": "nvidia_direct_3d",
          "amd: direct3d": "amd_direct_3d",
          "intel: direct3d": "intel_direct_3d",
          intel: "intel",
          VideoToolbox: "videotoolbox",
          OpenH264: "openh264",
          libvpx: "vp8_libvpx",
        }),
        T = Object.freeze({
          "nvidia: direct3d": "nvidia_direct_3d",
          "amd: direct3d": "amd_direct_3d",
          "intel: direct3d": "intel_direct_3d",
          intel: "intel",
          VideoToolbox: "videotoolbox",
          OpenH264: "openh264",
          libvpx: "vp8_libvpx",
        });
      function g(e) {
        if (null == e) return "unknown";
        for (let t of Object.keys(m)) if (e.includes(t)) return m[t];
        return "uncategorized";
      }
      ((c = a || (a = {}))[(c.None = 0)] = "None"),
        (c[(c.ClientSideDisableVideo = 1)] = "ClientSideDisableVideo"),
        (c[(c.SenderStopped = 2)] = "SenderStopped");
      function I(e) {
        if (null == e) return "UNKNOWN";
        if ("H264" === (e = e.toUpperCase())) return "H264";
        if ("H265" === e) return "H265";
        if ("VP8" === e) return "VP8";
        else if ("VP9" === e) return "VP9";
        else if ("AV1" === e || "AV1X" === e) return "AV1";
        else return "UNKNOWN";
      }
      class C {
        static parseInboundStats(e, t) {
          var n, i, r, s, a, o, l;
          let u = new C();
          return null == e
            ? u
            : ((u.bytes = e.bytesReceived),
              (u.framesCodec = e.framesDecoded),
              (u.framesCodecError =
                null !== (n = e.framesDecodeErrors) && void 0 !== n ? n : null),
              (u.framesNetwork = e.framesReceived),
              (u.packets = e.packetsReceived),
              (u.packetsLost = e.packetsLost),
              (u.framesDropped = e.framesDropped),
              (u.resolution = null != e.resolution ? e.resolution.height : 0),
              (u.minorResolution =
                null != e.resolution
                  ? Math.min(e.resolution.height, e.resolution.width)
                  : 0),
              (u.majorResolution =
                null != e.resolution
                  ? Math.max(e.resolution.height, e.resolution.width)
                  : 0),
              (u.timestamp = t),
              (u.nackCount = e.nackCount),
              (u.pliCount = e.pliCount),
              (u.decoder = (function (e) {
                if (null == e) return "unknown";
                for (let t of Object.keys(T)) if (e.includes(t)) return T[t];
                return "uncategorized";
              })(e.decoderImplementationName)),
              (u.codecType = I(e.codec.name)),
              (u.qpSum = 0),
              (u.freezeCount = e.freezeCount),
              (u.pauseCount = e.pauseCount),
              (u.totalFreezesDuration = e.totalFreezesDuration),
              (u.totalPausesDuration = e.totalPausesDuration),
              (u.totalFramesDuration = e.totalFramesDuration),
              (u.keyframes =
                null !== (i = e.keyFramesDecoded) && void 0 !== i ? i : null),
              (u.passthroughCount =
                null !== (r = e.passthroughCount) && void 0 !== r ? r : 0),
              (u.cryptorSuccessCount =
                null !== (s = e.decryptSuccessCount) && void 0 !== s ? s : 0),
              (u.cryptorFailureCount =
                null !== (a = e.decryptFailureCount) && void 0 !== a ? a : 0),
              (u.cryptorDuration =
                null !== (o = e.decryptDuration) && void 0 !== o ? o : 0),
              (u.cryptorAttempts =
                null !== (l = e.decryptAttempts) && void 0 !== l ? l : 0),
              u);
        }
        static parseOutboundStats(e, t) {
          var n, i, r, s, a, o, l, u, c, d, f, E, p, h, _;
          let S = new C();
          return null == e
            ? S
            : {
                bytes: e.bytesSent,
                framesCodec: e.framesEncoded,
                framesCodecError: null,
                framesNetwork:
                  null !== (n = e.framesSent) && void 0 !== n ? n : 0,
                packets: e.packetsSent,
                packetsLost:
                  null !== (i = e.packetsLost) && void 0 !== i ? i : 0,
                framesDropped: 0,
                resolution: null != e.resolution ? e.resolution.height : 0,
                minorResolution:
                  null != e.resolution
                    ? Math.min(e.resolution.height, e.resolution.width)
                    : 0,
                majorResolution:
                  null != e.resolution
                    ? Math.max(e.resolution.height, e.resolution.width)
                    : 0,
                timestamp: t,
                encoder: g(e.encoderImplementationName),
                decoder: null,
                codecType: I(e.codec.name),
                nackCount: e.nackCount,
                pliCount: e.pliCount,
                qpSum: e.qpSum,
                freezeCount: 0,
                pauseCount: 0,
                totalFreezesDuration: 0,
                totalPausesDuration: 0,
                totalFramesDuration: 0,
                outboundSinkWant:
                  null !== (r = e.sinkWantAsInt) && void 0 !== r ? r : null,
                vmafScore:
                  null !== (s = e.encoderQualityVmaf) && void 0 !== s
                    ? s
                    : null,
                psnrDb:
                  null !== (a = e.encoderQualityPsnr) && void 0 !== a
                    ? a
                    : null,
                keyframes:
                  null !== (o = e.keyFramesEncoded) && void 0 !== o ? o : null,
                framesDroppedRateLimiter:
                  null !== (l = e.framesDroppedRateLimiter) && void 0 !== l
                    ? l
                    : null,
                framesDroppedEncoderQueue:
                  null !== (u = e.framesDroppedEncoderQueue) && void 0 !== u
                    ? u
                    : null,
                framesDroppedCongestionWindow:
                  null !== (c = e.framesDroppedCongestionWindow) && void 0 !== c
                    ? c
                    : null,
                passthroughCount:
                  null !== (d = e.passthroughCount) && void 0 !== d ? d : 0,
                cryptorSuccessCount:
                  null !== (f = e.encryptSuccessCount) && void 0 !== f ? f : 0,
                cryptorFailureCount:
                  null !== (E = e.encryptFailureCount) && void 0 !== E ? E : 0,
                cryptorDuration:
                  null !== (p = e.encryptDuration) && void 0 !== p ? p : 0,
                cryptorAttempts:
                  null !== (h = e.encryptAttempts) && void 0 !== h ? h : 0,
                cryptorMaxAttempts:
                  null !== (_ = e.encryptMaxAttempts) && void 0 !== _ ? _ : 0,
              };
        }
        constructor() {
          (this.bytes = 0),
            (this.framesCodec = 0),
            (this.framesCodecError = null),
            (this.framesNetwork = 0),
            (this.resolution = 0),
            (this.minorResolution = 0),
            (this.majorResolution = 0),
            (this.timestamp = 0),
            (this.packets = 0),
            (this.packetsLost = 0),
            (this.framesDropped = 0),
            (this.nackCount = 0),
            (this.pliCount = 0),
            (this.encoder = null),
            (this.decoder = null),
            (this.codecType = null),
            (this.qpSum = 0),
            (this.freezeCount = 0),
            (this.pauseCount = 0),
            (this.totalFreezesDuration = 0),
            (this.totalPausesDuration = 0),
            (this.totalFramesDuration = 0),
            (this.vmafScore = null),
            (this.psnrDb = null),
            (this.outboundSinkWant = null),
            (this.keyframes = null),
            (this.framesDroppedRateLimiter = null),
            (this.framesDroppedEncoderQueue = null),
            (this.framesDroppedCongestionWindow = null),
            (this.passthroughCount = 0),
            (this.cryptorSuccessCount = 0),
            (this.cryptorFailureCount = 0),
            (this.cryptorDuration = 0),
            (this.cryptorAttempts = 0),
            (this.cryptorMaxAttempts = 0);
        }
      }
      class v {
        get isVideoStopped() {
          return 0 !== this.videoStoppedReason;
        }
        get videoStoppedDuration() {
          return this.videoStoppedWatch.elapsed();
        }
        collectAggregationStats(e, t) {
          for (let i of S) {
            var n;
            let r = e[i];
            if (null === r) continue;
            let s = null !== (n = t[i]) && void 0 !== n ? n : 0;
            s > r
              ? (this.aggregatedProperties[i] += r)
              : (this.aggregatedProperties[i] += r - s);
          }
          this.aggregationDuration += e.timestamp - t.timestamp;
        }
        setVideoStopped(e, t) {
          if (e) {
            (this.videoStoppedReason |= t), this.videoStoppedWatch.start();
            return;
          }
          (this.videoStoppedReason &= ~t),
            0 === this.videoStoppedReason &&
              (this.statsWindow.splice(0), this.videoStoppedWatch.stop());
        }
        appendAndIncrementStats(e) {
          if (this.isVideoStopped) return;
          if ((this.statsWindow.push(e), this.statsWindow.length < 2)) return;
          let t = this.statsWindow[this.statsWindow.length - 1],
            n = this.statsWindow[this.statsWindow.length - 2];
          this.collectAggregationStats(t, n);
          let {
              bytes: i,
              framesCodec: r,
              timestamp: s,
              resolution: a,
              minorResolution: o,
              majorResolution: l,
              encoder: u,
              decoder: c,
              codecType: d,
            } = t,
            { timestamp: f } = n,
            E = (s - f) / 1e3;
          if (
            ((this.intervalTotal += E),
            (this.resolutionTotal += a * E),
            (this.minorResolutionTotal += o * E),
            (this.majorResolutionTotal += l * E),
            (this.cryptorMaxAttempts = Math.max(
              this.cryptorMaxAttempts,
              t.cryptorMaxAttempts
            )),
            null != u &&
              null != d &&
              "encoderBuckets" in this &&
              ((this.encoderBuckets[u] += E),
              (this.codecBuckets[d] += E),
              null != t.codecType &&
                "UNKNOWN" !== t.codecType &&
                (this.encoderCodec = t.codecType),
              null != e.vmafScore &&
                e.vmafScore >= 0 &&
                ((this.vmafScoreNum += 1),
                (this.vmafScoreSum += e.vmafScore),
                this.vmafHistogram.addSample(e.vmafScore)),
              null != e.psnrDb &&
                ((this.psnrDbNum += 1),
                (this.psnrDbSum += e.psnrDb),
                this.psnrHistogram.addSample(e.psnrDb)),
              null != e.outboundSinkWant &&
                0 !== e.outboundSinkWant &&
                ((this.outboundSinkWantNum += 1),
                (this.outboundSinkWantSum += e.outboundSinkWant))),
            null != c &&
              null != d &&
              "decoderBuckets" in this &&
              ((this.decoderBuckets[c] += E),
              (this.codecBuckets[d] += E),
              null != t.codecType &&
                "UNKNOWN" !== t.codecType &&
                (this.decoderCodec = t.codecType)),
            this.statsWindow.length < 6)
          )
            return;
          let {
            bytes: S,
            framesCodec: m,
            timestamp: T,
          } = this.statsWindow[this.statsWindow.length - 3];
          _.forEach(e => {
            a <= e && (this.resolutionBuckets[e] += E);
          });
          let g = (s - T) / 1e3,
            I = ((i - S) * 8) / g,
            C = (r - m) / g;
          p.forEach(e => {
            I <= e && (this.bitrateBuckets[e] += E);
          }),
            h.forEach(e => {
              C <= e && (this.fpsBuckets[e] += E);
            }),
            this.resolutionHistogram.addSample(a),
            this.bitrateHistogram.addSample(I),
            this.fpsHistogram.addSample(C),
            this.statsWindow.shift();
        }
        addSystemResources() {
          let e = f.default.getCurrentCPUUsagePercent(),
            t = f.default.getCurrentMemoryUsageKB();
          null != e && this.cpuHistogram.addSample(e),
            null != t && this.memoryHistogram.addSample(t);
        }
        getCodecsUsed() {
          let e = new Set();
          for (let [t, n] of Object.entries(this.codecBuckets))
            n > 0 && e.add(t);
          return e;
        }
        constructor(e) {
          (this.decoderBuckets = {
            nvidia_direct_3d: 0,
            openh264: 0,
            videotoolbox: 0,
            amd_direct_3d: 0,
            intel: 0,
            intel_direct_3d: 0,
            vp8_libvpx: 0,
            uncategorized: 0,
            unknown: 0,
          }),
            (this.codecBuckets = {
              H264: 0,
              H265: 0,
              VP8: 0,
              VP9: 0,
              AV1: 0,
              UNKNOWN: 0,
            }),
            (this.statsWindow = []),
            (this.cpuHistogram = new E.Histogram()),
            (this.memoryHistogram = new E.Histogram()),
            (this.fpsHistogram = new E.Histogram()),
            (this.bitrateHistogram = new E.Histogram()),
            (this.resolutionHistogram = new E.Histogram()),
            (this.decoderCodec = "UNKNOWN"),
            (this.aggregatedProperties = {
              framesCodec: 0,
              framesNetwork: 0,
              packets: 0,
              packetsLost: 0,
              framesDropped: 0,
              framesCodecError: 0,
              bytes: 0,
              nackCount: 0,
              pliCount: 0,
              qpSum: 0,
              freezeCount: 0,
              pauseCount: 0,
              totalFreezesDuration: 0,
              totalPausesDuration: 0,
              totalFramesDuration: 0,
              keyframes: 0,
              passthroughCount: 0,
              cryptorSuccessCount: 0,
              cryptorFailureCount: 0,
              cryptorDuration: 0,
              cryptorAttempts: 0,
            }),
            (this.aggregationDuration = 0),
            (this.bitrateBuckets = {}),
            (this.fpsBuckets = {}),
            (this.resolutionBuckets = {}),
            (this.resolutionTotal = 0),
            (this.minorResolutionTotal = 0),
            (this.majorResolutionTotal = 0),
            (this.intervalTotal = 0),
            (this.cryptorMaxAttempts = 0),
            (this.videoStoppedReason = 0),
            (this.startTime = e.now()),
            (this.videoStoppedWatch = new d.StopWatch(e)),
            p.forEach(e => {
              this.bitrateBuckets[e] = 0;
            }),
            h.forEach(e => {
              this.fpsBuckets[e] = 0;
            }),
            _.forEach(e => {
              this.resolutionBuckets[e] = 0;
            });
        }
      }
      class A extends v {
        appendTargetRates(e, t, n) {
          if (this.statsWindow.length < 2) return;
          (e = null != e ? e : 0),
            (t = null != t ? t : 0),
            (n = null != n ? n : 0);
          let i =
            (this.statsWindow[this.statsWindow.length - 1].timestamp -
              this.statsWindow[this.statsWindow.length - 2].timestamp) /
            1e3;
          (this.targetFrames = this.targetFrames + e * i),
            (this.targetBytesNetwork = this.targetBytesNetwork + (t / 8) * i),
            (this.targetBytesMax = this.targetBytesMax + (n / 8) * i),
            this.targetBitrateHistogram.addSample(t);
        }
        constructor(...e) {
          super(...e),
            (this.encoderBuckets = {
              nvidia_cuda: 0,
              nvidia_direct_3d: 0,
              openh264: 0,
              videotoolbox: 0,
              amd_direct_3d: 0,
              intel: 0,
              intel_direct_3d: 0,
              vp8_libvpx: 0,
              uncategorized: 0,
              unknown: 0,
            }),
            (this.encoderCodec = "UNKNOWN"),
            (this.targetFrames = 0),
            (this.targetBytesMax = 0),
            (this.targetBytesNetwork = 0),
            (this.targetBitrateHistogram = new E.Histogram()),
            (this.averageEncodeTime = 0),
            (this.vmafScoreSum = 0),
            (this.vmafScoreNum = 0),
            (this.vmafHistogram = new E.Histogram()),
            (this.psnrDbSum = 0),
            (this.psnrDbNum = 0),
            (this.psnrHistogram = new E.Histogram()),
            (this.outboundSinkWantSum = 0),
            (this.outboundSinkWantNum = 0),
            (this.framesDroppedRateLimiter = null),
            (this.framesDroppedEncoderQueue = null),
            (this.framesDroppedCongestionWindow = null);
        }
      }
    },
    760406: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("222007");
      var i,
        r = n("614276"),
        s = n("398183");
      i = class {
        start() {
          this.listeningUsers.clear(),
            this.listening.reset(),
            this.speaking.reset(),
            this.participation.reset(),
            this.connected.reset(),
            this.connected.start(),
            this.connection.on(r.BaseConnectionEvent.Speaking, (e, t, n) => {
              this.userId === e
                ? this.onSpeaking(0 !== t)
                : this.onListening(0 !== t, e);
            });
        }
        onSpeaking(e) {
          e
            ? (this.speaking.start(), this.participation.start())
            : (this.speaking.stop(),
              !this.listening.isRunning() && this.participation.stop());
        }
        onListening(e, t) {
          e
            ? (this.listeningUsers.add(t),
              this.listening.start(),
              this.participation.start())
            : this.listeningUsers.delete(t) &&
              0 === this.listeningUsers.size &&
              (this.listening.stop(),
              !this.speaking.isRunning() && this.participation.stop());
        }
        stop() {
          this.speaking.stop(),
            this.listening.stop(),
            this.participation.stop(),
            this.connected.stop();
        }
        getDurationStats() {
          return {
            duration_listening_ms: this.listening.elapsed().asMilliseconds(),
            duration_speaking_ms: this.speaking.elapsed().asMilliseconds(),
            duration_participation_ms: this.participation
              .elapsed()
              .asMilliseconds(),
            duration_connected_ms: this.connected.elapsed().asMilliseconds(),
          };
        }
        constructor(e, t, n = s.TimeStampProducer) {
          (this.userId = e),
            (this.connection = t),
            (this.timestampProducer = n),
            (this.listeningUsers = new Set()),
            (this.listening = new s.StopWatch(this.timestampProducer)),
            (this.speaking = new s.StopWatch(this.timestampProducer)),
            (this.participation = new s.StopWatch(this.timestampProducer)),
            (this.connected = new s.StopWatch(this.timestampProducer));
        }
      };
    },
    478696: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("808653"),
        n("222007"),
        n("424973");
      var i,
        r = n("917351"),
        s = n.n(r),
        a = n("773364"),
        o = n("398183"),
        l = n("497407");
      i = class {
        start() {
          this.connection.on(a.BaseConnectionEvent.Stats, this.sampleStats);
        }
        stop() {
          this.connection.off(a.BaseConnectionEvent.Stats, this.sampleStats);
        }
        getMosStats() {
          let e = s.reduce(
            this.inboundStats,
            (e, t) => {
              (e.mosSum += t.mosSum), (e.mosCount += t.mosCount);
              for (var n = 0; n < 5; n++) e.mosBuckets[n] += t.mosBuckets[n];
              return e;
            },
            { mosSum: 0, mosCount: 0, mosBuckets: [0, 0, 0, 0, 0] }
          );
          return {
            mos_mean: e.mosCount > 0 ? e.mosSum / e.mosCount : 0,
            mos_1: e.mosBuckets[1],
            mos_2: e.mosBuckets[2],
            mos_3: e.mosBuckets[3],
            mos_4: e.mosBuckets[4],
          };
        }
        getPacketStats() {
          let e = s.reduce(
            this.inboundStats,
            (e, t) => (
              (e.packetsReceived += t.packetsReceived),
              (e.packetsReceivedLost += t.packetsLost),
              null != e.fecPacketsReceived &&
                (e.fecPacketsReceived += t.fecPacketsReceived),
              null != e.fecPacketsDiscarded &&
                (e.fecPacketsDiscarded += t.fecPacketsDiscarded),
              e
            ),
            {
              packetsReceived: 0,
              packetsReceivedLost: 0,
              fecPacketsReceived: 0,
              fecPacketsDiscarded: 0,
            }
          );
          return {
            packets_sent: this.outboundStats.packetsSent,
            packets_sent_lost: this.outboundStats.packetsLost,
            packets_received: e.packetsReceived,
            packets_received_lost: e.packetsReceivedLost,
            fec_packets_received: e.fecPacketsReceived,
            fec_packets_discarded: e.fecPacketsDiscarded,
          };
        }
        getBytesStats() {
          let e = s.reduce(this.inboundStats, (e, t) => e + t.bytesReceived, 0);
          return {
            bytes_sent: this.outboundStats.bytesSent,
            bytes_received: e,
          };
        }
        getNetworkStats() {
          return this.networkQuality.getStats();
        }
        getBufferStats() {
          let e = s.reduce(
            this.inboundStats,
            (e, t) => (
              (null == e ||
                (null != t.bufferStats.audioJitterBuffer &&
                  null != e.audioJitterBuffer &&
                  t.bufferStats.audioJitterBuffer.p75 >
                    e.audioJitterBuffer.p75)) &&
                (e = t.bufferStats),
              e
            ),
            null
          );
          return {
            ...(function (e) {
              let t = {};
              for (let n in e) {
                let i = e[n];
                (t[n + "_mean"] = null != i ? i.mean : 0),
                  (t[n + "_p75"] = null != i ? i.p75 : 0),
                  (t[n + "_p95"] = null != i ? i.p95 : 0),
                  (t[n + "_p99"] = null != i ? i.p99 : 0),
                  (t[n + "_max"] = null != i ? i.max : 0);
              }
              return t;
            })({
              audio_jitter_buffer: null != e ? e.audioJitterBuffer : null,
              audio_jitter_target: null != e ? e.audioJitterTarget : null,
              audio_jitter_delay: null != e ? e.audioJitterDelay : null,
              relative_reception_delay:
                null != e ? e.relativeReceptionDelay : null,
              relative_playout_delay: null != e ? e.relativePlayoutDelay : null,
            }),
          };
        }
        getFrameOpStats() {
          let e = s.reduce(
            this.inboundStats,
            (e, t) => (
              null != t.frameOpStats.silent &&
                (e.silent += t.frameOpStats.silent),
              null != t.frameOpStats.normal &&
                (e.normal += t.frameOpStats.normal),
              null != t.frameOpStats.merged &&
                (e.merged += t.frameOpStats.merged),
              null != t.frameOpStats.expanded &&
                (e.expanded += t.frameOpStats.expanded),
              null != t.frameOpStats.accelerated &&
                (e.accelerated += t.frameOpStats.accelerated),
              null != t.frameOpStats.preemptiveExpanded &&
                (e.preemptiveExpanded += t.frameOpStats.preemptiveExpanded),
              null != t.frameOpStats.cng && (e.cng += t.frameOpStats.cng),
              e
            ),
            {
              silent: 0,
              normal: 0,
              merged: 0,
              expanded: 0,
              accelerated: 0,
              preemptiveExpanded: 0,
              cng: 0,
            }
          );
          return {
            frame_op_silent: e.silent,
            frame_op_normal: e.normal,
            frame_op_merged: e.merged,
            frame_op_expanded: e.expanded,
            frame_op_accelerated: e.accelerated,
            frame_op_preemptive_expanded: e.preemptiveExpanded,
            frame_op_cng: e.cng,
          };
        }
        getDurationStats() {
          return {
            duration_listening: this.duration.listening,
            duration_speaking: this.duration.speaking,
            duration_participation: this.duration.participation,
            duration_connected: this.duration.connected,
          };
        }
        getTransportStats() {
          return {
            decryption_failures: this.decryptionFailures,
            routing_failures: this.routingFailures,
          };
        }
        getE2EEStats() {
          let e = s.reduce(
            this.inboundStats,
            (e, t) => {
              var n, i, r, s, a;
              return (
                (e.passthroughCount +=
                  null !== (n = t.passthroughCount) && void 0 !== n ? n : 0),
                (e.decryptSuccessCount +=
                  null !== (i = t.decryptSuccessCount) && void 0 !== i ? i : 0),
                (e.decryptFailureCount +=
                  null !== (r = t.decryptFailureCount) && void 0 !== r ? r : 0),
                (e.decryptDuration +=
                  null !== (s = t.decryptDuration) && void 0 !== s ? s : 0),
                (e.decryptAttempts +=
                  null !== (a = t.decryptAttempts) && void 0 !== a ? a : 0),
                e
              );
            },
            {
              passthroughCount: 0,
              decryptSuccessCount: 0,
              decryptFailureCount: 0,
              decryptDuration: 0,
              decryptAttempts: 0,
            }
          );
          return {
            decrypt_passthrough_count: e.passthroughCount,
            decrypt_success_count: e.decryptSuccessCount,
            decrypt_failure_count: e.decryptFailureCount,
            decrypt_duration: e.decryptDuration,
            decrypt_attempts: e.decryptAttempts,
            encrypt_passthrough_count: this.outboundStats.passthroughCount,
            encrypt_success_count: this.outboundStats.encryptSuccessCount,
            encrypt_failure_count: this.outboundStats.encryptFailureCount,
            encrypt_duration: this.outboundStats.encryptDuration,
            encrypt_attempts: this.outboundStats.encryptAttempts,
            encrypt_max_attempts: this.outboundStats.encryptMaxAttempts,
          };
        }
        getPeriodicStats() {
          let e = [];
          for (let [h, _] of Object.entries(this.periodicInboundStats)) {
            let {
              previous: S,
              current: m,
              currentTimestampMs: T,
              previousTimestampMs: g,
              numRateSamples: I,
            } = _;
            if (void 0 !== g && T > g) {
              var t, n, i, r, s, a, o, l, u, c, d, f, E, p;
              let C = T - g,
                v = {
                  userId: h,
                  silent:
                    null !== (n = m.silent) && void 0 !== n
                      ? n
                      : 0 - (null !== (t = S.silent) && void 0 !== t ? t : 0),
                  normal:
                    null !== (r = m.normal) && void 0 !== r
                      ? r
                      : 0 - (null !== (i = S.normal) && void 0 !== i ? i : 0),
                  merged:
                    null !== (a = m.merged) && void 0 !== a
                      ? a
                      : 0 - (null !== (s = S.merged) && void 0 !== s ? s : 0),
                  expanded:
                    null !== (l = m.expanded) && void 0 !== l
                      ? l
                      : 0 - (null !== (o = S.expanded) && void 0 !== o ? o : 0),
                  accelerated:
                    null !== (c = m.accelerated) && void 0 !== c
                      ? c
                      : 0 -
                        (null !== (u = S.accelerated) && void 0 !== u ? u : 0),
                  preemptiveExpanded:
                    null !== (f = m.preemptiveExpanded) && void 0 !== f
                      ? f
                      : 0 -
                        (null !== (d = S.preemptiveExpanded) && void 0 !== d
                          ? d
                          : 0),
                  cng:
                    null !== (p = m.cng) && void 0 !== p
                      ? p
                      : 0 - (null !== (E = S.cng) && void 0 !== E ? E : 0),
                  accelerateRate: _.accelerateRateSum / I,
                  expandRate: _.expandRateSum / I,
                  preemptiveExpandRate: _.preemptiveExpandRateSum / I,
                  speechExpandRate: _.speechExpandRateSum / I,
                  durationMs: C,
                };
              v.normal +
                v.merged +
                v.expanded +
                v.accelerated +
                v.preemptiveExpanded >
                0 && e.push(v);
            }
            (this.periodicInboundStats[h].accelerateRateSum = 0),
              (this.periodicInboundStats[h].expandRateSum = 0),
              (this.periodicInboundStats[h].preemptiveExpandRateSum = 0),
              (this.periodicInboundStats[h].speechExpandRateSum = 0),
              (this.periodicInboundStats[h].numRateSamples = 0),
              (this.periodicInboundStats[h].previous = m),
              (this.periodicInboundStats[h].previousTimestampMs = T);
          }
          return e;
        }
        calculateMos(e, t) {
          let n = this.calculateR(e, t);
          return n < 0
            ? 1
            : n > 100
              ? 4.5
              : 1 + 0.035 * n + 71e-7 * n * (n - 60) * (100 - n);
        }
        calculateR(e, t) {
          return (
            93.4 -
            (0.024 * e + (e > 177.3 ? 0.11 * (e - 177.3) : 0)) -
            (10 + (122 * t) / (t + 10))
          );
        }
        constructor(e) {
          (this.connection = e),
            (this.sampleStats = e => {
              if (null == e) return;
              this.networkQuality.incrementNetworkStats((0, o.now)()),
                (this.decryptionFailures = e.transport.decryptionFailures),
                (this.routingFailures = e.transport.routingFailures),
                this.duration.connected++;
              let t = this.outboundStats.packetsSent,
                n = s.reduce(
                  this.inboundStats,
                  (e, t) => ((e.packetsReceived += t.packetsReceived), e),
                  { packetsReceived: 0 }
                );
              s.forEach(e.rtp.outbound, e => {
                if ("audio" === e.type) {
                  var t, n, i, r, s, a, o;
                  this.outboundStats = {
                    packetsSent: e.packetsSent,
                    bytesSent: e.bytesSent,
                    packetsLost:
                      null !== (t = e.packetsLost) && void 0 !== t ? t : 0,
                    passthroughCount:
                      null !== (n = e.passthroughCount) && void 0 !== n ? n : 0,
                    encryptSuccessCount:
                      null !== (i = e.encryptSuccessCount) && void 0 !== i
                        ? i
                        : 0,
                    encryptFailureCount:
                      null !== (r = e.encryptFailureCount) && void 0 !== r
                        ? r
                        : 0,
                    encryptDuration:
                      null !== (s = e.encryptDuration) && void 0 !== s ? s : 0,
                    encryptAttempts:
                      null !== (a = e.encryptAttempts) && void 0 !== a ? a : 0,
                    encryptMaxAttempts:
                      null !== (o = e.encryptMaxAttempts) && void 0 !== o
                        ? o
                        : 0,
                  };
                }
              }),
                s.forEach(e.rtp.inbound, (t, n) => {
                  s.forEach(t, t => {
                    if ("audio" === t.type) {
                      var i, r, a, o, l, u, c, d, f, E, p, h, _, S, m, T, g;
                      let I =
                          null !== (i = e.transport.ping) && void 0 !== i
                            ? i
                            : 0,
                        C = t.packetsReceived,
                        v = t.packetsLost,
                        A = t.bytesReceived,
                        R =
                          null !== (r = t.fecPacketsReceived) && void 0 !== r
                            ? r
                            : 0,
                        N =
                          null !== (a = t.fecPacketsDiscarded) && void 0 !== a
                            ? a
                            : 0,
                        O =
                          null !== (o = t.jitterBuffer) && void 0 !== o ? o : 0,
                        D = {
                          audioJitterBuffer: t.audioJitterBuffer,
                          audioJitterTarget: t.audioJitterTarget,
                          audioJitterDelay: t.audioJitterDelay,
                          relativeReceptionDelay: t.relativeReceptionDelay,
                          relativePlayoutDelay: t.relativePlayoutDelay,
                        },
                        y = {
                          silent: t.opSilence,
                          normal: t.opNormal,
                          merged: t.opMerge,
                          expanded: t.opExpand,
                          accelerated: t.opAccelerate,
                          preemptiveExpanded: t.opPreemptiveExpand,
                          cng: t.opCNG,
                        },
                        P = {
                          passthroughCount:
                            null !== (l = t.passthroughCount) && void 0 !== l
                              ? l
                              : 0,
                          decryptSuccessCount:
                            null !== (u = t.decryptSuccessCount) && void 0 !== u
                              ? u
                              : 0,
                          decryptFailureCount:
                            null !== (c = t.decryptFailureCount) && void 0 !== c
                              ? c
                              : 0,
                          decryptDuration:
                            null !== (d = t.decryptDuration) && void 0 !== d
                              ? d
                              : 0,
                          decryptAttempts:
                            null !== (f = t.decryptAttempts) && void 0 !== f
                              ? f
                              : 0,
                        };
                      if (null != this.inboundStats[n]) {
                        let e = C - this.inboundStats[n].packetsReceived,
                          i = v - this.inboundStats[n].packetsLost,
                          r = 0,
                          a = this.inboundStats[n].mosBuckets;
                        e > 0 &&
                          i >= 0 &&
                          ((r = this.calculateMos(
                            I + O,
                            s.clamp(i / (e + i), 0, 1)
                          )),
                          a[Math.floor(r)]++),
                          (this.inboundStats[n] = {
                            packetsReceived: C,
                            bytesReceived: A,
                            packetsLost: v,
                            fecPacketsReceived: R,
                            fecPacketsDiscarded: N,
                            mos: r,
                            mosSum: this.inboundStats[n].mosSum + r,
                            mosCount:
                              this.inboundStats[n].mosCount + (r > 0 ? 1 : 0),
                            mosBuckets: a,
                            bufferStats: D,
                            frameOpStats: y,
                            ...P,
                          }),
                          (this.periodicInboundStats[n] = {
                            previousTimestampMs:
                              this.periodicInboundStats[n].previousTimestampMs,
                            previous: this.periodicInboundStats[n].previous,
                            currentTimestampMs: Date.now(),
                            current: y,
                            accelerateRateSum:
                              this.periodicInboundStats[n].accelerateRateSum +
                              (null !== (E = t.accelerateRate) && void 0 !== E
                                ? E
                                : 0),
                            expandRateSum:
                              this.periodicInboundStats[n].expandRateSum +
                              (null !== (p = t.expandRate) && void 0 !== p
                                ? p
                                : 0),
                            preemptiveExpandRateSum:
                              this.periodicInboundStats[n]
                                .preemptiveExpandRateSum +
                              (null !== (h = t.preemptiveExpandRate) &&
                              void 0 !== h
                                ? h
                                : 0),
                            speechExpandRateSum:
                              this.periodicInboundStats[n].speechExpandRateSum +
                              (null !== (_ = t.speechExpandRate) && void 0 !== _
                                ? _
                                : 0),
                            numRateSamples:
                              this.periodicInboundStats[n].numRateSamples + 1,
                          });
                      } else
                        (this.inboundStats[n] = {
                          packetsReceived: C,
                          bytesReceived: A,
                          packetsLost: v,
                          fecPacketsReceived: R,
                          fecPacketsDiscarded: N,
                          mos: 0,
                          mosSum: 0,
                          mosCount: 0,
                          mosBuckets: [0, 0, 0, 0, 0],
                          bufferStats: D,
                          frameOpStats: y,
                          ...P,
                        }),
                          (this.periodicInboundStats[n] = {
                            previousTimestampMs: Date.now(),
                            previous: y,
                            currentTimestampMs: Date.now(),
                            current: y,
                            accelerateRateSum:
                              null !== (S = t.accelerateRate) && void 0 !== S
                                ? S
                                : 0,
                            expandRateSum:
                              null !== (m = t.expandRate) && void 0 !== m
                                ? m
                                : 0,
                            preemptiveExpandRateSum:
                              null !== (T = t.preemptiveExpandRate) &&
                              void 0 !== T
                                ? T
                                : 0,
                            speechExpandRateSum:
                              null !== (g = t.speechExpandRate) && void 0 !== g
                                ? g
                                : 0,
                            numRateSamples: 1,
                          });
                    }
                  });
                });
              let i = !1,
                r = !1;
              this.outboundStats.packetsSent > t &&
                ((i = !0), this.duration.speaking++);
              let a = s.reduce(
                this.inboundStats,
                (e, t) => ((e.packetsReceived += t.packetsReceived), e),
                { packetsReceived: 0 }
              );
              a.packetsReceived > n.packetsReceived &&
                ((r = !0), this.duration.listening++),
                (i || r) && this.duration.participation++;
            }),
            (this.networkQuality = new l.default()),
            (this.inboundStats = {}),
            (this.outboundStats = {
              packetsSent: 0,
              bytesSent: 0,
              packetsLost: 0,
              passthroughCount: 0,
              encryptSuccessCount: 0,
              encryptFailureCount: 0,
              encryptDuration: 0,
              encryptAttempts: 0,
              encryptMaxAttempts: 0,
            }),
            (this.duration = {
              listening: 0,
              speaking: 0,
              participation: 0,
              connected: 0,
            }),
            (this.periodicInboundStats = {});
        }
      };
    },
    241718: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("222007");
      var i,
        r = n("800762"),
        s = n("316133"),
        a = n("353927");
      i = class {
        updateVoiceStates(e, t) {
          t === this.channelId
            ? (this.totalParticipants.add(e),
              (this.maxVoiceStateCount = Math.max(
                s.default.countVoiceStatesForChannel(t),
                this.maxVoiceStateCount
              )))
            : (null == t &&
                e in this.totalSpeakers &&
                (this.totalSpeakers[e] = a.SpeakingFlags.NONE),
              e === this.userId && null != t && this.setChannelId(t));
        }
        getStats() {
          return {
            max_voice_state_count: this.maxVoiceStateCount,
            total_voice_state_count: this.totalParticipants.size,
            max_listener_count: this.maxListenerCount,
            total_listener_count: this.totalListeners.size,
            max_speaker_count: this.maxSpeakerCount,
            total_speaker_count: Object.keys(this.totalSpeakers).length,
          };
        }
        setSpeaking(e, t) {
          if (t !== a.SpeakingFlags.NONE) {
            let n = r.default.getVoiceStateForChannel(this.channelId, e);
            if (null != n && !n.selfMute && !n.mute) {
              this.totalSpeakers[e] = t;
              let n = Object.values(this.totalSpeakers).filter(
                e => e !== a.SpeakingFlags.NONE
              ).length;
              this.maxSpeakerCount = Math.max(this.maxSpeakerCount, n);
            }
          } else
            e in this.totalSpeakers &&
              (this.totalSpeakers[e] = a.SpeakingFlags.NONE);
          if (this.userId === e) {
            if (t === this.speaking) return;
            if (t !== a.SpeakingFlags.NONE) {
              let e = Object.values(
                r.default.getVoiceStatesForChannel(this.channelId)
              ).filter(e => !e.selfDeaf && !e.deaf);
              e.forEach(e => this.totalListeners.add(e.userId)),
                (this.maxListenerCount = Math.max(
                  e.length,
                  this.maxListenerCount
                ));
            }
            this.speaking = t;
          }
        }
        setChannelId(e) {
          if (e === this.channelId) return;
          (this.channelId = e),
            (this.totalParticipants = new Set([this.userId]));
          let t = Object.keys(
            r.default.getVoiceStatesForChannel(this.channelId)
          );
          t.forEach(e => this.totalParticipants.add(e)),
            (this.maxVoiceStateCount = t.length),
            (this.speaking = a.SpeakingFlags.NONE),
            (this.maxListenerCount = 0),
            (this.totalListeners = new Set()),
            (this.maxSpeakerCount = 0),
            (this.totalSpeakers = {});
        }
        constructor(e, t) {
          (this.maxVoiceStateCount = 1),
            (this.speaking = a.SpeakingFlags.NONE),
            (this.maxListenerCount = 0),
            (this.maxSpeakerCount = 0),
            (this.userId = e),
            this.setChannelId(t);
        }
      };
    },
    6193: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isHookModuleTooOld: function () {
            return S;
          },
          attachToProcess: function () {
            return T;
          },
          cancelAttachToProcess: function () {
            return g;
          },
        }),
        n("70102");
      var i,
        r,
        s = n("913144"),
        a = n("363658"),
        o = n("115718"),
        l = n("546463"),
        u = n("568307"),
        c = n("697218"),
        d = n("599110"),
        f = n("773336"),
        E = n("50885"),
        p = n("688225"),
        h = n("49111");
      let _ = {
        development: [0, 0, 0, 0],
        canary: [1, 0, 30, 10],
        ptb: [1, 0, 1005, 2],
        stable: [1, 0, 9001, 2],
      };
      function S() {
        var e;
        return !(null === E.default || void 0 === E.default
          ? void 0
          : null === (e = E.default.isModuleVersionAtLeast) || void 0 === e
            ? void 0
            : e.call(E.default, "discord_hook", _));
      }
      async function m() {
        if (!(0, f.isWindows)())
          return Promise.reject(Error("Hook is only available on Windows"));
        if (S()) return Promise.reject(Error("Hook module is too old"));
        await E.default.ensureModule("discord_hook");
        let e = await E.default.requireModule("discord_hook");
        return (
          (function (e) {
            if (null == e.setFlags) return;
            let t = 0,
              n = p.default.getCurrentConfig(
                { location: "edd7d3_1" },
                { autoTrackExposure: !1 }
              );
            n.enableCrashReporting &&
              (console.log("Hook: Enabling crash reporting."), (t |= 1));
            let i = c.default.getCurrentUser();
            null != i &&
              (i.isStaff() || n.enableCrashTrigger) &&
              (console.log("Hook: Enabling crash trigger."), (t |= 2)),
              e.setFlags(t);
          })(e),
          e
        );
      }
      ((r = i || (i = {}))[(r.None = 0)] = "None"),
        (r[(r.EnableCrashReporting = 1)] = "EnableCrashReporting"),
        (r[(r.EnableCrashTrigger = 2)] = "EnableCrashTrigger");
      function T(e, t) {
        return m().then(n => {
          var i;
          let r =
              null === (i = u.default.getGameForPID(e)) || void 0 === i
                ? void 0
                : i.name,
            c = l.default.getGameByName(r),
            f = null;
          return new Promise(i => {
            let l = (e, n) => {
                d.default.track(h.AnalyticEvents.HOOK_RESULT, {
                  game_name: r,
                  game_id: null == c ? null : c.id,
                  success: n,
                  error: e,
                  ...t,
                }),
                  null != f && (clearTimeout(f), (f = null)),
                  n ? i() : i((e = null != e ? e : "Unknown hook error"));
              },
              E = u.default.getOverlayOptionsForPID(e),
              p = {
                ...o.DEFAULT_OVERLAY_OPTIONS,
                ...E,
                elevate: u.default.shouldElevateProcessForPID(e),
              };
            null == p.allowHook || p.allowHook
              ? ((f = setTimeout(() => {
                  n.cancelAttachToProcess(e),
                    l("Timed out waiting for hook response", !1);
                }, 12e4)),
                n.attachToProcess(e, p, l),
                s.default.wait(() => a.default.clearElevatedProcess()))
              : i("Hook is disabled for this game");
          });
        });
      }
      function g(e) {
        return m().then(t => {
          t.cancelAttachToProcess(e);
        });
      }
    },
    688225: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2023-05_overlay_hook_crash_detection",
        label: "Detect and report crashes in the overlay hook",
        defaultConfig: { enableCrashReporting: !1, enableCrashTrigger: !1 },
        treatments: [
          {
            id: 1,
            label: "EnableCrashReporting",
            config: { enableCrashReporting: !0, enableCrashTrigger: !1 },
          },
          {
            id: 2,
            label: "EnableCrashTrigger",
            config: { enableCrashReporting: !0, enableCrashTrigger: !0 },
          },
        ],
      });
    },
    256955: function (e, t, n) {
      "use strict";
      n.r(t), n("70102");
      var i = n("784063"),
        r = n("605250"),
        s = n("773336"),
        a = n("50885");
      (0, i.inject)({
        supported() {
          try {
            if (__OVERLAY__);
            else if (s.isPlatformEmbedded) {
              let e = (0, i.getVoiceEngine)();
              if (
                null == e.VoiceConnection ||
                (null == e.setVideoOutputSink && null == e.addVideoOutputSink)
              )
                throw Error("voe function missing");
              return !0;
            }
          } catch (e) {
            new (0, r.default)("injectMediaEngine").error(
              "Potentially corrupt installation:",
              e.message
            );
          }
          return !1;
        },
        supportsFeature: e => a.default.supportsFeature(e),
        setProcessPriority(e) {
          a.default.getDiscordUtils().setProcessPriority(e);
        },
        getVoiceEngine: () => a.default.getVoiceEngine(),
      });
    },
    432959: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        }),
        n("781738"),
        n("424973"),
        n("70102");
      var i = n("866227"),
        r = n.n(i);
      function s(e, t) {
        if ("function" == typeof t) {
          let n = r.localeData(),
            i = t.bind(n);
          return (t, n) => i({ [e]: () => t }, n);
        }
        return (t = Array.isArray(t) ? t : t.format), e => t[e];
      }
      function a(e, t, n) {
        return e < 12 ? (n ? "am" : "AM") : n ? "pm" : "PM";
      }
      function o(e) {
        var t, n;
        let i =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : (function () {
                  var e;
                  let t = r.localeData()._config,
                    {
                      months: n,
                      monthsShort: i,
                      weekdays: o,
                      weekdaysShort: l,
                      weekdaysMin: u,
                      meridiem: c = a,
                      ordinal: d,
                      longDateFormat: f,
                      week: E = { dow: 0, doy: 6 },
                    } = t;
                  return {
                    months: s("month", n),
                    monthsShort: s("month", i),
                    weekdays: s("day", o),
                    weekdaysShort: s("day", l),
                    weekdaysMin: s("day", u),
                    meridiem: c,
                    ordinal:
                      "string" == typeof (e = d)
                        ? t => e.replace("%d", "".concat(t))
                        : e,
                    longDateFormat: f,
                    week: E,
                  };
                })(),
          o = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        (t = e),
          (n = i),
          (e = t.replace(/L[L|T|S]{0,3}/g, (e, i) => {
            if (/^LLLL/.test(e)) return n.longDateFormat.LLLL;
            if (/^LLL/.test(e)) return n.longDateFormat.LLL + e.slice(3);
            if (/^LL/.test(e)) return n.longDateFormat.LL + e.slice(2);
            else if (/^LTS/.test(e)) return n.longDateFormat.LTS + e.slice(3);
            else if (/^LT/.test(e)) return n.longDateFormat.LT + e.slice(2);
            else if (/^L/.test(e) && "[" !== t[i - 1])
              return n.longDateFormat.L + e.slice(1);
            return e;
          }));
        let l = [],
          u = {
            month: !1,
            dayOfYear: !1,
            date: !1,
            day: !1,
            week: !1,
            isoweek: !1,
            year: !1,
            hour: !1,
            minutes: !1,
            seconds: !1,
            millis: !1,
            offset: !1,
          },
          c = e;
        function d(e) {
          l.push("(" + e + ")");
        }
        function f(e) {
          c = c.slice(e);
        }
        for (; c.length > 0; ) {
          switch (c.charAt(0)) {
            case "M":
              if (((u.month = !0), /^MMMM/.test(c))) {
                d('localeData.months(_month, "'.concat(e, '")')), f(4);
                continue;
              }
              if (/^MMM/.test(c)) {
                d('localeData.monthsShort(_month, "'.concat(e, '")')), f(3);
                continue;
              }
              if (/^MM/.test(c)) {
                d('_month+1 < 10 ? "0" : ""'), d("_month+1"), f(2);
                continue;
              }
              if (/^Mo/.test(c)) {
                d('localeData.ordinal(_month, "M")'), f(2);
                continue;
              }
              d("_month + 1"), f(1);
              continue;
            case "Q":
              if (((u.month = !0), /^Qo/.test(c))) {
                d('localeData.ordinal((_month + 1) / 3, "Q")'), f(2);
                continue;
              }
              d("Math.ceil((_month + 1) / 3)"), f(1);
              continue;
            case "D":
              if (/^DDD/.test(c)) {
                if (((u.dayOfYear = !0), /^DDDD/.test(c))) {
                  d('_doy < 100 ? "0" : ""'),
                    d('_doy < 10 ? "0" : ""'),
                    d("_doy"),
                    f(4);
                  continue;
                }
                if (/^DDDo/.test(c)) {
                  d('localeData.ordinal(_doy, "DDD")'), f(4);
                  continue;
                }
                d("_doy"), f(3);
                continue;
              }
              if (((u.date = !0), /^DD/.test(c))) {
                d('_date < 10 ? "0" : ""'), d("_date"), f(2);
                continue;
              }
              if (/^Do/.test(c)) {
                d('localeData.ordinal(_date, "D")'), f(2);
                continue;
              }
              d("_date"), f(1);
              continue;
            case "d":
              if (((u.day = !0), /^dddd/.test(c))) {
                d('localeData.weekdays(_day, "'.concat(e, '")')), f(4);
                continue;
              }
              if (/^ddd/.test(c)) {
                d('localeData.weekdaysShort(_day, "'.concat(e, '")')), f(3);
                continue;
              }
              if (/^dd/.test(c)) {
                d('localeData.weekdaysMin(_day, "'.concat(e, '")')), f(2);
                continue;
              }
              if (/^do/.test(c)) {
                d('localeData.ordinal(_day, "d")'), f(2);
                continue;
              }
              d("_day"), f(1);
              continue;
            case "e":
              (u.day = !0), d("(_day + 7 - " + +i.week.dow + ") % 7"), f(1);
              continue;
            case "E":
              (u.day = !0), d("_day === 0 ? 7 : _day"), f(1);
              continue;
            case "w":
              if (((u.week = !0), /^ww/.test(c))) {
                d('_week < 10 ? "0" : ""'), d("_week"), f(2);
                continue;
              }
              if (/^wo/.test(c)) {
                d('localeData.ordinal(_week, "w")'), f(2);
                continue;
              }
              d("_week"), f(1);
              continue;
            case "W":
              if (((u.isoweek = !0), /^WW/.test(c))) {
                d('_i_week < 10 ? "0" : ""'), d("_i_week"), f(2);
                continue;
              }
              if (/^Wo/.test(c)) {
                d('localeData.ordinal(_i_week, "W")'), f(2);
                continue;
              }
              d("_i_week"), f(1);
              continue;
            case "Y":
              if (((u.year = !0), /^YYYY/.test(c))) {
                d("_year"), f(4);
                continue;
              }
              if (/^YY/.test(c)) {
                d('(_year % 100) < 10 ? "0" : ""'), d("_year % 100"), f(2);
                continue;
              }
              d('_year < 9999 ? _year : "+" + _year'), f(1);
              continue;
            case "g":
              if (((u.week = !0), /^gggg/.test(c))) {
                d("_weekYear"), f(4);
                continue;
              }
              if (/^gg/.test(c)) {
                d('(_weekYear % 100) < 10 ? "0" : ""'),
                  d("_weekYear % 100"),
                  f(2);
                continue;
              }
              break;
            case "G":
              if (((u.isoweek = !0), /^GGGG/.test(c))) {
                d("_i_weekYear"), f(4);
                continue;
              }
              if (/^GG/.test(c)) {
                d('(_i_weekYear % 100) < 10 ? "0" : ""'),
                  d("_i_weekYear % 100"),
                  f(2);
                continue;
              }
              break;
            case "A":
              (u.hour = !0),
                (u.minutes = !0),
                d("localeData.meridiem(_hour, _mins, false)"),
                f(1);
              continue;
            case "a":
              (u.hour = !0),
                (u.minutes = !0),
                d("localeData.meridiem(_hour, _mins, true)"),
                f(1);
              continue;
            case "H":
              if (((u.hour = !0), /^HH/.test(c))) {
                d('_hour < 10 ? "0" : ""'), d("_hour"), f(2);
                continue;
              }
              d("_hour"), f(1);
              continue;
            case "h":
              if (((u.hour = !0), /^hh/.test(c))) {
                d('((_hour+11) % 12) < 9 ? "0" : ""'),
                  d("((_hour+11) % 12) + 1"),
                  f(2);
                continue;
              }
              d("((_hour+11) % 12) + 1"), f(1);
              continue;
            case "k":
              if (((u.hour = !0), /^kk/.test(c))) {
                d('_hour > 0 && _hour < 10 ? "0" : ""'),
                  d('_hour === 0 ? "24" : _hour'),
                  f(2);
                continue;
              }
              d('_hour === 0 ? "24" : _hour'), f(1);
              continue;
            case "m":
              if (((u.minutes = !0), /^mm/.test(c))) {
                d('_mins < 10 ? "0" : ""'), d("_mins"), f(2);
                continue;
              }
              d("_mins"), f(1);
              continue;
            case "s":
              if (((u.seconds = !0), /^ss/.test(c))) {
                d('_secs < 10 ? "0" : ""'), d("_secs"), f(2);
                continue;
              }
              d("_secs"), f(1);
              continue;
            case "S":
              if (((u.millis = !0), /^SSS/.test(c))) {
                d('_ms < 100 ? "0" : ""'), d('_ms < 10 ? "0" : ""'), d("_ms");
                let e = /^S{3,9}/.exec(c);
                if (null == e) throw Error("ms len regex failed");
                let t = e[0].length;
                t > 3 && d('"'.concat(Array(t - 2).join("0"), '"')), f(t);
                continue;
              }
              if (/^SS/.test(c)) {
                d('_ms < 100 ? "0" : ""'), d("Math.floor(_ms/10)"), f(2);
                continue;
              }
              d("Math.floor(_ms / 100)"), f(1);
              continue;
            case "Z":
              if (((u.offset = !0), /^ZZ/.test(c))) {
                d('_offs >= 0 ? "+" : "-"'),
                  d('_offH < 10 ? "0" : ""'),
                  d("_offH"),
                  d('_offM < 10 ? "0" : ""'),
                  d("_offM"),
                  f(2);
                continue;
              }
              d('_offs >= 0 ? "+" : "-"'),
                d('_offH < 10 ? "0" : ""'),
                d("_offH"),
                d('":"'),
                d('_offM < 10 ? "0" : ""'),
                d("_offM"),
                f(1);
              continue;
            case "X":
              d("Math.floor(d / 1000)"), f(1);
              continue;
            case "x":
              d("d.valueOf()"), f(1);
              continue;
            case "[":
              let t = c.indexOf("]");
              if (-1 === t) {
                d('"["'), f(1);
                continue;
              }
              d(JSON.stringify(c.slice(1, t))), f(t + 1);
              continue;
          }
          d(JSON.stringify(c.charAt(0))), f(1);
        }
        let E = "";
        u.date && (E += "var _date = d.get" + (o ? "UTC" : "") + "Date();\n"),
          u.month &&
            (E += "var _month = d.get" + (o ? "UTC" : "") + "Month();\n"),
          u.dayOfYear &&
            (E +=
              "var _startOfYear = new Date(d.valueOf());\n_startOfYear.set" +
              (o ? "UTC" : "") +
              "Month(0);\n_startOfYear.set" +
              (o ? "UTC" : "") +
              "Date(1);\nvar _doy = Math.round((d - _startOfYear) / 864e5) + 1;\n"),
          u.day && (E += "var _day = d.get" + (o ? "UTC" : "") + "Day();\n"),
          u.year &&
            (E += "var _year = d.get" + (o ? "UTC" : "") + "FullYear();\n"),
          u.hour &&
            (E += "var _hour = d.get" + (o ? "UTC" : "") + "Hours();\n"),
          u.minutes &&
            (E += "var _mins = d.get" + (o ? "UTC" : "") + "Minutes();\n"),
          u.seconds &&
            (E += "var _secs = d.get" + (o ? "UTC" : "") + "Seconds();\n"),
          u.millis &&
            (E += "var _ms = d.get" + (o ? "UTC" : "") + "Milliseconds();\n"),
          u.offset &&
            (o
              ? (E += "var _offs = 0, _absOffs = 0, _offH = 0, _offM = 0;")
              : (E +=
                  "var _offs = -d.getTimezoneOffset();\nvar _absOffs = _offs < 0 ? -_offs : _offs;\nvar _offH = Math.floor(_absOffs / 60);\nvar _offM = _absOffs % 60;\n")),
          u.week &&
            (E +=
              "var _wend = " +
              (i.week.doy - i.week.dow) +
              ";\nvar _ddw = " +
              +i.week.doy +
              " - d.get" +
              (o ? "UTC" : "") +
              "Day();\nif(_ddw > _wend) _ddw -= 7;\nif(_ddw < _wend - 7) _ddw += 7;\nvar _d2 = new Date(d.valueOf());\n_d2.set" +
              (o ? "UTC" : "") +
              "Date(d.get" +
              (o ? "UTC" : "") +
              "Date() + _ddw);\nvar _soy2 = new Date(_d2.valueOf());\n_soy2.set" +
              (o ? "UTC" : "") +
              "Month(0);\n_soy2.set" +
              (o ? "UTC" : "") +
              "Date(1);\nvar _doy2 = Math.round((_d2 - _soy2) / 864e5) + 1;\nvar _week = Math.ceil(_doy2 / 7);\nvar _weekYear = _d2.get" +
              (o ? "UTC" : "") +
              "FullYear();\n"),
          u.isoweek &&
            (E +=
              "var _i_wend = 3;\nvar _i_ddw = 4 - d.get" +
              (o ? "UTC" : "") +
              "Day();\nif(_i_ddw > _i_wend) _i_ddw -= 7;\nif(_i_ddw < _i_wend - 7) _i_ddw += 7;\nvar _i_d2 = new Date(d.valueOf());\n_i_d2.set" +
              (o ? "UTC" : "") +
              "Date(d.get" +
              (o ? "UTC" : "") +
              "Date() + _i_ddw);\nvar _i_soy2 = new Date(_i_d2.valueOf());\n_i_soy2.set" +
              (o ? "UTC" : "") +
              "Month(0);\n_i_soy2.set" +
              (o ? "UTC" : "") +
              "Date(1);\nvar _i_doy2 = Math.round((_i_d2 - _i_soy2) / 864e5) + 1;\nvar _i_week = Math.ceil(_i_doy2 / 7);\nvar _i_weekYear = _i_d2.get" +
              (o ? "UTC" : "") +
              "FullYear();\n"),
          (E += 'return (\n"" +\n'.concat(l.join(" +\n"), "\n);"));
        let p = Function("d", "localeData", E);
        return e => p(e, i);
      }
    },
    121338: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          connect: function () {
            return u;
          },
          disconnect: function () {
            return c;
          },
          setReceiveEventHandler: function () {
            return d;
          },
          setReceiveCommandHandler: function () {
            return f;
          },
          send: function () {
            return E;
          },
        });
      var i = n("43982"),
        r = n("861309"),
        s = n("261131"),
        a = n("828777"),
        o = n("49111"),
        l = n("492249");
      function u() {
        i.default.connect();
      }
      function c() {
        i.default.disconnect();
      }
      function d(e, t) {
        if (!__OVERLAY__)
          throw new r.default(
            { errorCode: o.RPCErrors.UNKNOWN_ERROR },
            "called from wrong app context"
          );
        i.default.subscribe(o.RPCEvents.OVERLAY, { token: t }, t =>
          e((0, a.deserializeObject)(t))
        );
      }
      function f(e, t) {
        if (__OVERLAY__)
          throw new r.default(
            { errorCode: o.RPCErrors.UNKNOWN_ERROR },
            "called from wrong app context"
          );
        s.default.setCommandHandler(o.RPCCommands.OVERLAY, {
          scope: l.RPC_PRIVATE_SCOPE,
          handler(n) {
            let { args: i } = n;
            if (!t(i.token))
              throw new r.default(
                { errorCode: o.RPCErrors.INVALID_TOKEN },
                "Invalid RPC auth token provided"
              );
            e((0, a.deserializeObject)(i));
          },
        }),
          s.default.setEventHandler(o.RPCEvents.OVERLAY, {
            scope: l.RPC_PRIVATE_SCOPE,
            handler(e) {
              let { args: n } = e;
              if (!t(n.token))
                throw new r.default(
                  { errorCode: o.RPCErrors.INVALID_TOKEN },
                  "Invalid RPC auth token provided"
                );
            },
          });
      }
      function E(e) {
        __OVERLAY__
          ? i.default.request(o.RPCCommands.OVERLAY, (0, a.serializeObject)(e))
          : s.default.dispatchToSubscriptions(
              o.RPCEvents.OVERLAY,
              {},
              (0, a.serializeObject)(e)
            );
      }
    },
    713725: function (e, t, n) {
      "use strict";
      function i(e, t) {
        if (e.length < 2) return [];
        let n = [],
          i = e[0];
        for (let r = 1; r < e.length; r++) {
          let s = e[r];
          n.push(t(i, s)), (i = s);
        }
        return n;
      }
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("424973");
    },
    180748: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          setFontSize: function () {
            return c;
          },
          setMessageGroupSpacing: function () {
            return d;
          },
          setZoom: function () {
            return f;
          },
          enableKeyboardMode: function () {
            return E;
          },
          disableKeyboardMode: function () {
            return p;
          },
          toggleDesaturateUserColors: function () {
            return h;
          },
          toggleDarkSidebar: function () {
            return _;
          },
          keyboardNavigationExplainerModalSeen: function () {
            return S;
          },
          systemPrefersReducedMotionChanged: function () {
            return m;
          },
          setSaturation: function () {
            return T;
          },
          setPrefersReducedMotion: function () {
            return g;
          },
          setSyncForcedColors: function () {
            return I;
          },
          systemColorPreferencesChanged: function () {
            return C;
          },
          systemPrefersContrastChanged: function () {
            return v;
          },
          setAlwaysShowLinkDecorations: function () {
            return A;
          },
          setRoleStyle: function () {
            return R;
          },
          toggleSubmitButton: function () {
            return N;
          },
          toggleSyncProfileThemeWithUserTheme: function () {
            return O;
          },
        });
      var i = n("913144"),
        r = n("452804"),
        s = n("599110"),
        a = n("206230"),
        o = n("49111"),
        l = n("468200"),
        u = n("560241");
      function c(e) {
        i.default.dispatch({
          type: "ACCESSIBILITY_SET_FONT_SIZE",
          fontSize: e,
        });
      }
      function d() {
        let e =
          arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null;
        i.default.dispatch({
          type: "ACCESSIBILITY_SET_MESSAGE_GROUP_SPACING",
          messageGroupSpacing: e,
        });
      }
      function f(e) {
        i.default.dispatch({ type: "ACCESSIBILITY_SET_ZOOM", zoom: e });
      }
      function E() {
        i.default.dispatch({ type: "ACCESSIBILITY_KEYBOARD_MODE_ENABLE" }),
          s.default.track(o.AnalyticEvents.KEYBOARD_MODE_TOGGLED, {
            enabled: !0,
          });
      }
      function p() {
        i.default.dispatch({ type: "ACCESSIBILITY_KEYBOARD_MODE_DISABLE" }),
          s.default.track(o.AnalyticEvents.KEYBOARD_MODE_TOGGLED, {
            enabled: !1,
          });
      }
      function h() {
        i.default.dispatch({ type: "ACCESSIBILITY_DESATURATE_ROLES_TOGGLE" });
      }
      function _() {
        i.default.dispatch({ type: "ACCESSIBILITY_DARK_SIDEBAR_TOGGLE" });
      }
      function S() {
        i.default.dispatch({
          type: "KEYBOARD_NAVIGATION_EXPLAINER_MODAL_SEEN",
        });
      }
      function m(e) {
        i.default.dispatch({
          type: "ACCESSIBILITY_SYSTEM_PREFERS_REDUCED_MOTION_CHANGED",
          systemPrefersReducedMotion: e,
        });
      }
      function T(e) {
        i.default.dispatch({
          type: "ACCESSIBILITY_SET_SATURATION",
          saturation: e,
        });
      }
      function g(e) {
        let t = a.default.useReducedMotion;
        i.default.dispatch({
          type: "ACCESSIBILITY_SET_PREFERS_REDUCED_MOTION",
          prefersReducedMotion: e,
        });
        let n = a.default.useReducedMotion;
        !t && n
          ? r.default.applySettingsOverride({
              gifAutoPlay: {
                value: !1,
                reasonKey: l.SettingsOverrideReasonKeys.REDUCED_MOTION,
              },
              animateEmoji: {
                value: !1,
                reasonKey: l.SettingsOverrideReasonKeys.REDUCED_MOTION,
              },
              animateStickers: {
                value: u.StickerAnimationSettings.ANIMATE_ON_INTERACTION,
                reasonKey: l.SettingsOverrideReasonKeys.REDUCED_MOTION_STICKERS,
              },
            })
          : t &&
            !n &&
            r.default.clearSettingsOverride(
              "gifAutoPlay",
              "animateEmoji",
              "animateStickers"
            );
      }
      function I(e) {
        i.default.dispatch({
          type: "ACCESSIBILITY_SET_SYNC_FORCED_COLORS",
          syncForcedColors: e,
        });
      }
      function C(e, t) {
        i.default.dispatch({
          type: "ACCESSIBILITY_SYSTEM_COLOR_PREFERENCES_CHANGED",
          systemPrefersColorScheme: e,
          systemForcedColors: t,
        });
      }
      function v(e) {
        i.default.dispatch({
          type: "ACCESSIBILITY_SYSTEM_PREFERS_CONTRAST_CHANGED",
          systemPrefersContrast: e,
        });
      }
      function A(e) {
        i.default.dispatch({
          type: "ACCESSIBILITY_SET_ALWAYS_SHOW_LINK_DECORATIONS",
          alwaysShowLinkDecorations: e,
        });
      }
      function R(e) {
        i.default.dispatch({
          type: "ACCESSIBILITY_SET_ROLE_STYLE",
          roleStyle: e,
        }),
          s.default.track(o.AnalyticEvents.ROLE_STYLE_SETTING_UPDATED, {
            role_style: e,
          });
      }
      function N() {
        i.default.dispatch({ type: "ACCESSIBILITY_SUBMIT_BUTTON_TOGGLE" });
      }
      function O() {
        i.default.dispatch({
          type: "ACCESSIBILITY_SYNC_PROFILE_THEME_WITH_USER_THEME_TOGGLE",
        });
      }
    },
    727538: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          AccessibilityFeatureFlags: function () {
            return i;
          },
        }),
        ((r = i || (i = {}))[(r.NONE = 0)] = "NONE"),
        (r[(r.SCREENREADER = 1)] = "SCREENREADER"),
        (r[(r.REDUCED_MOTION = 2)] = "REDUCED_MOTION"),
        (r[(r.REDUCED_MOTION_PREFERS_CROSSFADES = 4194304)] =
          "REDUCED_MOTION_PREFERS_CROSSFADES"),
        (r[(r.REDUCED_TRANSPARENCY = 4)] = "REDUCED_TRANSPARENCY"),
        (r[(r.HIGH_CONTRAST = 8)] = "HIGH_CONTRAST"),
        (r[(r.BOLD_TEXT = 16)] = "BOLD_TEXT"),
        (r[(r.GRAYSCALE = 32)] = "GRAYSCALE"),
        (r[(r.INVERT_COLORS = 64)] = "INVERT_COLORS"),
        (r[(r.PREFERS_COLOR_SCHEME_LIGHT = 128)] =
          "PREFERS_COLOR_SCHEME_LIGHT"),
        (r[(r.PREFERS_COLOR_SCHEME_DARK = 256)] = "PREFERS_COLOR_SCHEME_DARK"),
        (r[(r.CHAT_FONT_SCALE_INCREASED = 512)] = "CHAT_FONT_SCALE_INCREASED"),
        (r[(r.CHAT_FONT_SCALE_DECREASED = 1024)] = "CHAT_FONT_SCALE_DECREASED"),
        (r[(r.ZOOM_LEVEL_INCREASED = 2048)] = "ZOOM_LEVEL_INCREASED"),
        (r[(r.ZOOM_LEVEL_DECREASED = 4096)] = "ZOOM_LEVEL_DECREASED"),
        (r[(r.MESSAGE_GROUP_SPACING_INCREASED = 8192)] =
          "MESSAGE_GROUP_SPACING_INCREASED"),
        (r[(r.MESSAGE_GROUP_SPACING_DECREASED = 16384)] =
          "MESSAGE_GROUP_SPACING_DECREASED"),
        (r[(r.DARK_SIDEBAR = 32768)] = "DARK_SIDEBAR"),
        (r[(r.REDUCED_MOTION_FROM_USER_SETTINGS = 65536)] =
          "REDUCED_MOTION_FROM_USER_SETTINGS"),
        (r[(r.SATURATION_LEVEL_DECREASED = 131072)] =
          "SATURATION_LEVEL_DECREASED"),
        (r[(r.FORCED_COLORS = 262144)] = "FORCED_COLORS"),
        (r[(r.FORCED_COLORS_FROM_USER_SETTINGS = 524288)] =
          "FORCED_COLORS_FROM_USER_SETTINGS"),
        (r[(r.ROLE_STYLE_ADJUSTED = 1048576)] = "ROLE_STYLE_ADJUSTED"),
        (r[(r.SYNC_PROFILE_THEME_WITH_USER_THEME = 2097152)] =
          "SYNC_PROFILE_THEME_WITH_USER_THEME");
    },
    954016: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ACTIVITY_INVITE_COVER_IMAGE_SIZE: function () {
            return O;
          },
          validStreamURL: function () {
            return D;
          },
          XBOX_ACTIVITY_APPLICATION_ID: function () {
            return y;
          },
          END_GAME_APPLICATION_ID: function () {
            return P;
          },
          JAM_SPACE_APPLICATION_ID: function () {
            return M;
          },
          GARTIC_PHONE_APPLICATION_ID: function () {
            return U;
          },
          COLOR_TOGETHER_APPLICATION_ID: function () {
            return G;
          },
          SPELL_CAST_APPLICATION_ID: function () {
            return w;
          },
          LAND_IO_APPLICATION_ID: function () {
            return k;
          },
          WATCH_YOUTUBE_PROD_APP_ID: function () {
            return x;
          },
          KWIM_APPLICATION_ID: function () {
            return F;
          },
          BOBBLE_LEAGUE_APPLICATION_ID: function () {
            return V;
          },
          CHECKERS_IN_THE_PARK_APP_ID: function () {
            return B;
          },
          CHESS_IN_THE_PARK_APP_ID: function () {
            return H;
          },
          BLAZIN_8S_APPLICATION_ID: function () {
            return j;
          },
          POKER_NIGHT_APPLICATION_ID: function () {
            return Y;
          },
          BYS_LETTER_APP_ID: function () {
            return W;
          },
          BYS_TWOODLE_APP_ID: function () {
            return K;
          },
          CHEF_SHOWDOWN_APPLICATION_ID: function () {
            return z;
          },
          PUTT_PARTY_APPLICATION_ID: function () {
            return q;
          },
          KRUNKER_STRIKE_APPLICATION_ID: function () {
            return X;
          },
          COLONIST_APPLICATION_ID: function () {
            return Q;
          },
          EMBEDDED_ACTIVITY_SURVEY_URL: function () {
            return Z;
          },
          ImageSizes: function () {
            return J;
          },
          STAFF_RELEASE_PHASES: function () {
            return $;
          },
          ActivityFeedbackReasons: function () {
            return i;
          },
          ActivityIntent: function () {
            return r;
          },
          ActivityPlatform: function () {
            return s;
          },
          ActivityAccessStatus: function () {
            return o;
          },
          EmbeddedActivityUpdateCodes: function () {
            return l;
          },
          OrientationLockState: function () {
            return u;
          },
          ActivityShelfSlides: function () {
            return c;
          },
          ACTIVITY_SHELF_WEB_MODAL_KEY: function () {
            return ee;
          },
          APPLICATIONS_WITH_ALLOWED_POPUPS: function () {
            return et;
          },
          APPLICATIONS_WITH_NO_REFFERER: function () {
            return en;
          },
          WhatsNewSection: function () {
            return d;
          },
          ActivityScreenOrientation: function () {
            return f;
          },
          ActivityLayoutMode: function () {
            return E;
          },
          DEFAULT_EMBEDDED_ACTIVITY_CONFIG: function () {
            return er;
          },
          SUPPORTED_ACTIVITY_IN_TEXT_CHANNEL_TYPES: function () {
            return es;
          },
        }),
        n("222007");
      var i,
        r,
        s,
        a,
        o,
        l,
        u,
        c,
        d,
        f,
        E,
        p,
        h,
        _,
        S,
        m,
        T,
        g,
        I,
        C,
        v,
        A,
        R = n("798609"),
        N = n("49111");
      let O = 160,
        D = /^https?:\/\/(?:www\.)?(twitch\.tv\/(.+)|youtube.com\/watch\?v=)/,
        y = "438122941302046720",
        P = "773336526917861400",
        L = "880218832743055411",
        b = "1050941315912835122",
        M = "1070087967294631976",
        U = "1007373802981822582",
        G = "1039835161136746497",
        w = "852509694341283871",
        k = "903769130790969345",
        x = "880218394199220334",
        F = "1078728822972764312",
        V = "947957217959759964",
        B = "832013003968348200",
        H = "832012774040141894",
        j = "832025144389533716",
        Y = "755827207812677713",
        W = "879863686565621790",
        K = "902271654783242291",
        z = "1037680572660727838",
        q = "945737671223947305",
        X = "1011683823555199066",
        Q = "1106787098452832296",
        Z = "https://discord.sjc1.qualtrics.com/jfe/form/SV_6SvWAOxlcSRWiEu",
        J = { SMALL: 64, LARGE: 160 },
        $ = ["in_development", "activities_team", "employee_release"];
      ((p = i || (i = {})).FAILED_LOAD = "FAILED_LOAD"),
        (p.LAGGING = "LAGGING"),
        (p.CONFUSING = "CONFUSING"),
        (p.NOT_FUN = "NOT_FUN"),
        (p.OTHER = "OTHER"),
        ((h = r || (r = {}))[(h.PLAY = 0)] = "PLAY"),
        (h[(h.SPECTATE = 1)] = "SPECTATE"),
        ((_ = s || (s = {})).DESKTOP = "desktop"),
        (_.MOBILE = "mobile"),
        ((S = a || (a = {})).BETRAYAL_MARKETING_TOOLTIP =
          "BETRAYAL_MARKETING_TOOLTIP"),
        (S.FISHINGTON_MARKETING_TOOLTIP = "FISHINGTON_MARKETING_TOOLTIP"),
        (S.POKER_MARKETING_TOOLTIP = "POKER_MARKETING_TOOLTIP"),
        (S.YOUTUBE_MARKETING_TOOLTIP = "YOUTUBE_MARKETING_TOOLTIP"),
        ((m = o || (o = {}))[(m.UNLOCKED = 0)] = "UNLOCKED"),
        (m[(m.NEEDS_NITRO = 1)] = "NEEDS_NITRO"),
        ((T = l || (l = {}))[(T.NO_UPDATE = 0)] = "NO_UPDATE"),
        (T[(T.ACTIVITY_STATE_UPDATE = 1)] = "ACTIVITY_STATE_UPDATE"),
        (T[(T.ACTIVITY_STARTED = 2)] = "ACTIVITY_STARTED"),
        (T[(T.ACTIVITY_ENDED = 3)] = "ACTIVITY_ENDED"),
        (T[(T.USER_JOINED = 4)] = "USER_JOINED"),
        (T[(T.USER_LEFT = 5)] = "USER_LEFT"),
        (T[(T.ACTIVITY_TERMINATED_NO_ELIGIBLE_HOST = 6)] =
          "ACTIVITY_TERMINATED_NO_ELIGIBLE_HOST"),
        ((g = u || (u = {}))[(g.UNLOCKED = 1)] = "UNLOCKED"),
        (g[(g.PORTRAIT = 2)] = "PORTRAIT"),
        (g[(g.LANDSCAPE = 3)] = "LANDSCAPE"),
        ((I = c || (c = {}))[(I.DIRECTORY = 0)] = "DIRECTORY"),
        (I[(I.SELECT_CHANNEL = 1)] = "SELECT_CHANNEL"),
        (I[(I.DETAIL_PAGE = 2)] = "DETAIL_PAGE");
      let ee = "activity-shelf",
        et = new Set(["755600276941176913", L, b, x]),
        en = new Set([L, b, x]);
      ((C = d || (d = {})).DISCORD_TURNS_8 = "DISCORD_TURNS_8"),
        (C.GDM_ACTIVITIES = "GDM_ACTIVITIES"),
        (C.PUTT_PARTY = "PUTT_PARTY"),
        (C.JAMSPACE_OLD = "JAMSPACE"),
        (C.JAMSPACE = "JAMSPACE2"),
        (C.POKER = "POKER"),
        (C.FREE = "FREE"),
        ((v = f || (f = {}))[(v.PORTRAIT = 0)] = "PORTRAIT"),
        (v[(v.LANDSCAPE = 1)] = "LANDSCAPE"),
        ((A = E || (E = {}))[(A.FOCUSED = 0)] = "FOCUSED"),
        (A[(A.PIP = 1)] = "PIP"),
        (A[(A.GRID = 2)] = "GRID");
      let ei = {
          label_type: R.EmbeddedActivityLabelTypes.NONE,
          release_phase: "",
          label_until: null,
        },
        er = {
          application_id: "",
          requires_age_gate: !1,
          default_orientation_lock_state: 1,
          tablet_default_orientation_lock_state: 1,
          supported_platforms: [R.EmbeddedActivitySupportedPlatforms.WEB],
          client_platform_config: {
            [R.EmbeddedActivitySupportedPlatforms.WEB]: ei,
            [R.EmbeddedActivitySupportedPlatforms.IOS]: ei,
            [R.EmbeddedActivitySupportedPlatforms.ANDROID]: ei,
          },
          has_csp_exception: !1,
          displays_advertisements: !1,
        },
        es = [
          N.ChannelTypes.GUILD_TEXT,
          N.ChannelTypes.DM,
          N.ChannelTypes.GROUP_DM,
        ];
    },
    586391: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          AGE_GATE_REGISTER_TIMEOUT_MS: function () {
            return l;
          },
          NEW_USER_AGE_GATE_MODAL_KEY: function () {
            return u;
          },
          EXISTING_USER_AGE_GATE_MODAL_KEY: function () {
            return c;
          },
          AgeGateSource: function () {
            return s;
          },
          AgeGateAnalyticAction: function () {
            return a;
          },
        });
      var i,
        r,
        s,
        a,
        o = n("718517");
      let l = 2 * o.default.Millis.HOUR,
        u = "new-user-age-gate-modal",
        c = "existing-user-age-gate-modal";
      ((i = s || (s = {})).AUTH = "Register Age Gate"),
        (i.NEW_USER_FLOW = "NUF"),
        (i.CLAIM_ACCOUNT = "Claim Age Gate"),
        (i.NSFW_CHANNEL = "NSFW Channel"),
        (i.NSFW_SERVER = "NSFW Server"),
        (i.NSFW_SERVER_INVITE = "NSFW Server Invite"),
        (i.NSFW_VOICE_CHANNEL = "NSFW Voice Channel"),
        (i.FAMILY_CENTER = "Family Center"),
        (i.REGISTER = "Register"),
        (i.DEEP_LINK_PROMPT = "Deep Link Prompt"),
        (i.UNSPECIFIED = "Unspecified"),
        ((r = a || (a = {})).AGE_GATE_OPEN = "AGE_GATE_OPEN"),
        (r.AGE_GATE_CLOSE = "AGE_GATE_CLOSE"),
        (r.AGE_GATE_SUBMITTED = "AGE_GATE_SUBMITTED"),
        (r.AGE_GATE_SUCCESS = "AGE_GATE_SUCCESS"),
        (r.AGE_GATE_FAILURE = "AGE_GATE_FAILURE"),
        (r.AGE_GATE_UNDERAGE = "AGE_GATE_UNDERAGE"),
        (r.AGE_GATE_PREVENT_UNDERAGE_REGISTRATION =
          "AGE_GATE_PREVENT_UNDERAGE_REGISTRATION"),
        (r.AGE_GATE_LOGOUT_UNDERAGE_NEW_USER =
          "AGE_GATE_LOGOUT_UNDERAGE_NEW_USER");
    },
    939011: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          setCurrentImpression: function () {
            return o;
          },
          cleanupImpression: function () {
            return l;
          },
          setDebugTrackedData: function () {
            return u;
          },
          useImpressionStore: function () {
            return c;
          },
          getLocation: function () {
            return d;
          },
          getImpressionStack: function () {
            return f;
          },
        }),
        n("222007");
      var i = n("308503"),
        r = n("759843");
      let s = Object.freeze({ debugTrackedData: null, impressions: [] }),
        a = (0, i.default)(e => s),
        o = e => {
          a.setState(t => ({ impressions: [...t.impressions, e] }));
        },
        l = e => {
          a.setState(t => ({
            impressions: t.impressions.filter(
              t => t.sequenceId !== e.sequenceId
            ),
          }));
        },
        u = (e, t) => {
          a.setState(() => ({ debugTrackedData: { name: e, ...t } }));
        },
        c = a;
      function d() {
        let e = {};
        return (
          a.getState().impressions.forEach(t => {
            t.type === r.ImpressionTypes.PAGE
              ? (e.page = t.name)
              : (e.section = t.name);
          }),
          e
        );
      }
      function f() {
        return a.getState().impressions;
      }
    },
    685665: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return f;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("714617"),
        a = n.n(s),
        o = n("917351"),
        l = n.n(o);
      let u = r.createContext([]);
      function c(e) {
        let { children: t, currentContext: n } = e;
        return (0, i.jsx)(u.Provider, { value: n, children: t });
      }
      function d(e, t) {
        if (0 === t.length) return e;
        let n = l.flatten(t);
        return [...e, ...n];
      }
      function f() {
        for (var e, t = arguments.length, n = Array(t), s = 0; s < t; s++)
          n[s] = arguments[s];
        let [o, l] = r.useState(n),
          f = r.useContext(u),
          E = r.useMemo(() => d(f, o), [o, f]),
          p = r.useMemo(() => d(f, o.slice(0, o.length - 1)), [o, f]);
        r.useEffect(() => {
          !a(n, o) && l(n);
        }, [n]);
        let h = r.useCallback(
          e => {
            let { children: t } = e;
            return (0, i.jsx)(c, { currentContext: E, children: t });
          },
          [E]
        );
        return {
          AnalyticsLocationProvider: h,
          analyticsLocations: E,
          sourceAnalyticsLocations: p,
          newestAnalyticsLocation:
            null !== (e = E[E.length - 1]) && void 0 !== e ? e : null,
        };
      }
    },
    802493: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return c;
          },
        }),
        n("222007");
      var i = n("446674"),
        r = n("705909"),
        s = n("913144"),
        a = n("271938"),
        o = n("723939");
      r.TableId.KvCache, r.TableId.KvCache;
      class l extends i.Store {
        initialize() {
          this.waitFor(a.default);
        }
        constructor(...e) {
          super(...e),
            (this.database = e =>
              o.default.database(null != e ? e : a.default.getId())),
            (this.channels = u(
              e => new r.GuildEntityDao("guild_channels", r.TableId.KvCache, e)
            )),
            (this.channelsTemp = u(
              e => new r.GuildDao("guild_channels_temp", r.TableId.KvCache, e)
            )),
            (this.basicChannels = u(
              e => new r.Dao("basic_channels", r.TableId.KvCache, e)
            )),
            (this.syncedBasicChannels = u(
              e => new r.Dao("basic_channels_synced", r.TableId.KvCache, e)
            )),
            (this.cache = u(e => new r.Dao("cache", r.TableId.KvCache, e))),
            (this.emojis = u(
              e => new r.GuildEntityDao("guild_emojis", r.TableId.KvCache, e)
            )),
            (this.guilds = u(
              e => new r.EntityDao("guilds", r.TableId.KvCache, e)
            )),
            (this.messages = u(
              e => new r.MessageDao("messages", r.TableId.Messages, e)
            )),
            (this.stickers = u(
              e => new r.GuildEntityDao("guild_stickers", r.TableId.KvCache, e)
            )),
            (this.guildVersions = u(
              e => new r.EntityDao("guild_versions", r.TableId.KvCache, e)
            )),
            (this.nonGuildVersions = u(
              e => new r.EntityDao("non_guild_versions", r.TableId.KvCache, e)
            )),
            (this.userSettings = u(
              e => new r.EntityDao("user_settings", r.TableId.KvCache, e)
            )),
            (this.readStates = u(
              e => new r.Dao("read_states", r.TableId.KvCache, e)
            )),
            (this.userGuildSettings = u(
              e => new r.Dao("user_guild_settings", r.TableId.KvCache, e)
            )),
            (this.channelsTransaction = e =>
              this.channels(e.database).upgradeTransaction(e)),
            (this.channelsTempTransaction = e =>
              this.channelsTemp(e.database).upgradeTransaction(e)),
            (this.basicChannelsTransaction = e =>
              this.basicChannels(e.database).upgradeTransaction(e)),
            (this.syncedBasicChannelsTransaction = e =>
              this.syncedBasicChannels(e.database).upgradeTransaction(e)),
            (this.cacheTransaction = e =>
              this.cache(e.database).upgradeTransaction(e)),
            (this.emojisTransaction = e =>
              this.emojis(e.database).upgradeTransaction(e)),
            (this.guildsTransaction = e =>
              this.guilds(e.database).upgradeTransaction(e)),
            (this.messagesTransaction = e =>
              this.messages(e.database).upgradeTransaction(e)),
            (this.stickersTransaction = e =>
              this.stickers(e.database).upgradeTransaction(e)),
            (this.guildVersionsTransaction = e =>
              this.guildVersions(e.database).upgradeTransaction(e)),
            (this.nonGuildVersionsTransaction = e =>
              this.nonGuildVersions(e.database).upgradeTransaction(e)),
            (this.userSettingsTransaction = e =>
              this.userSettings(e.database).upgradeTransaction(e)),
            (this.readStatesTransaction = e =>
              this.readStates(e.database).upgradeTransaction(e)),
            (this.userGuildSettingsTransaction = e =>
              this.userGuildSettings(e.database).upgradeTransaction(e));
        }
      }
      function u(e) {
        return function (t) {
          let n = null != t ? t : o.default.database(a.default.getId());
          return null == n ? null : e(n);
        };
      }
      var c = new l(s.default, {});
    },
    595525: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          tryLoadAsync: function () {
            return o;
          },
          tryLoadOrResetCacheGateway: function () {
            return l;
          },
          tryLoadOrResetCacheGatewayAsync: function () {
            return u;
          },
        });
      var i = n("913144"),
        r = n("605250"),
        s = n("723939");
      let a = new r.default("TryLoad");
      async function o(e) {
        try {
          return await e();
        } catch (e) {
          return a.log("database load failed.", e), null;
        }
      }
      function l(e, t) {
        try {
          return t();
        } catch (t) {
          return (
            a.log(
              "".concat(e, ": exception thrown, resetting socket."),
              t,
              t.stack
            ),
            s.default.replaceDisableAllDatabases(
              "tryLoadOrResetCacheGateway (".concat(e, ")")
            ),
            i.default.dispatch({ type: "RESET_CONNECTION", badCache: !0 }),
            null
          );
        }
      }
      async function u(e, t) {
        try {
          return await t();
        } catch (t) {
          return (
            a.log(
              "".concat(e, ": exception thrown, resetting socket."),
              t,
              t.stack
            ),
            s.default.replaceDisableAllDatabases(
              "tryLoadOrResetCacheGateway (".concat(e, ")")
            ),
            i.default.dispatch({ type: "RESET_CONNECTION", badCache: !0 }),
            null
          );
        }
      }
    },
    860255: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("222007");
      var i,
        r = n("605250"),
        s = n("802493");
      let a = new r.default("ChannelReader");
      i = class {
        static getSync(e, t) {
          let n = performance.now(),
            i = s.default.channels(e).getManySyncUnsafe(t),
            r = performance.now() - n;
          return (
            a.log(
              "synchronously loaded in "
                .concat(r, "ms (guild: ")
                .concat(t, ", channels: ")
                .concat(i.length, ")")
            ),
            [i, r]
          );
        }
        static async getAsync(e, t) {
          let n = performance.now(),
            i = await s.default.channels(e).getMany(t),
            r = performance.now() - n;
          return (
            a.verbose(
              "loaded in "
                .concat(r, "ms (guild: ")
                .concat(t, ", channels: ")
                .concat(i.length, ")")
            ),
            i
          );
        }
        static async getGuildIds() {
          try {
            var e;
            let t = s.default.channels();
            if (null == t) return new Set();
            let n =
                null !== (e = await t.getGuildIds()) && void 0 !== e ? e : [],
              i = n.filter(e => null !== e && "string" == typeof e);
            return new Set(i);
          } catch (e) {
            return a.warn("couldn't get guild ids", e), new Set();
          }
        }
      };
    },
    846527: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return u;
          },
        }),
        n("222007");
      var i = n("75247"),
        r = n("913144"),
        s = n("605250"),
        a = n("778689");
      let o = new s.default("BasicChannelCacheStore");
      class l extends i.default {
        hasChannel(e) {
          return this.channels.has(e);
        }
        hasGuild(e) {
          return this.guilds.has(e);
        }
        getBasicChannel(e) {
          var t;
          return null !== (t = this.channels.get(e)) && void 0 !== t ? t : null;
        }
        getGuildBasicChannels(e) {
          var t;
          return null !== (t = this.guilds.get(e)) && void 0 !== t ? t : null;
        }
        invalidate(e) {
          this.delete(e);
        }
        restored(e) {
          this.delete(e);
        }
        initialize() {
          this.waitFor(a.default);
        }
        handleCacheLoadedLazy(e) {
          for (let [t, n] of ((this.guilds = new Map()),
          (this.channels = new Map()),
          e.basicGuildChannels))
            for (let e of (this.guilds.set(
              t,
              Object.fromEntries(n.map(e => [e.id, e]))
            ),
            n))
              this.channels.set(e.id, e);
        }
        handleCacheLoadedLazyNoCache(e) {
          this.guilds.clear(), this.channels.clear();
        }
        handleConnectionOpen(e) {
          let t = a.default.allGuildIds();
          for (let e of this.guilds.keys()) !t.has(e) && this.delete(e);
        }
        handleLogout(e) {
          this.guilds.clear(), this.channels.clear();
        }
        delete(e) {
          var t;
          for (let n in null !== (t = this.guilds.get(e)) && void 0 !== t
            ? t
            : {})
            this.channels.delete(n);
          this.guilds.delete(e);
        }
        constructor() {
          super(r.default, {
            CACHE_LOADED_LAZY_NO_CACHE: e =>
              this.handleCacheLoadedLazyNoCache(e),
            CACHE_LOADED_LAZY: e => this.handleCacheLoadedLazy(e),
            CONNECTION_OPEN: e => this.handleConnectionOpen(e),
            LOGOUT: e => this.handleLogout(e),
          }),
            (this.channels = new Map()),
            (this.guilds = new Map());
        }
      }
      var u = new l();
    },
    723939: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return E;
          },
        }),
        n("222007");
      var i = n("446674"),
        r = n("705909"),
        s = n("913144"),
        a = n("605250"),
        o = n("271938"),
        l = n("496533");
      let u = new a.default("DatabaseManager");
      class c extends i.Store {
        initialize() {
          this.waitFor(o.default),
            this.carefullySpeculativelyOpen(l.getUserId()),
            this.handleAuthenticationStoreChanged(),
            o.default.addChangeListener(() =>
              this.handleAuthenticationStoreChanged()
            );
        }
        databaseName(e) {
          return d(e);
        }
        database(e) {
          if (null != e) {
            var t;
            return null !== (t = this.databases.get(e)) && void 0 !== t
              ? t
              : null;
          }
          return null;
        }
        carefullyOpenDatabase(e) {
          if (null != e && !this.databases.has(e)) {
            let t = (function (e) {
              return null;
            })(e);
            u.verbose("added database (".concat(e, " → ").concat(t, ")")),
              this.databases.set(e, t),
              this.emitChange();
          }
          return this.database(e);
        }
        replaceDisableAllDatabases(e) {
          for (let t of (u.info(
            "disabling and nulling all databases (reason: ".concat(e, ")")
          ),
          this.databases.keys())) {
            let n = this.databases.get(t);
            null == n || n.disable(e),
              null == n || n.close(),
              this.databases.set(t, null);
          }
          this.emitChange();
        }
        remove(e) {
          let t = this.databases.get(e);
          u.log(
            "removing database (user: ".concat(e, ", database: ").concat(t, ")")
          ),
            null == t || t.close(),
            this.databases.delete(e),
            this.emitChange();
        }
        handleClearCaches() {
          this.replaceDisableAllDatabases(
            "DatabaseManager (action: CLEAR_CACHES)"
          );
        }
        handleConnectionOpen() {
          let e = o.default.getId(),
            t = this.databases.get(e),
            n = null == t ? void 0 : t.state();
          null == t && n !== r.DatabaseState.Open && this.remove(e),
            this.carefullyOpenDatabase(e);
        }
        handleAuthenticationStoreChanged() {
          let e = o.default.getId(),
            t = this.activeUserId;
          if (e !== t) {
            let n = this.databases.get(t);
            u.verbose(
              "active user changed (now: "
                .concat(e, ", was: ")
                .concat(t, ", was: ")
                .concat(n, ")")
            ),
              null == n || n.close(),
              l.setUserId(e),
              (this.activeUserId = e),
              this.databases.delete(t);
          }
        }
        async carefullySpeculativelyOpen(e) {
          if (null != e) {
            let t = await f(e);
            null == t || this.databases.has(e)
              ? (u.verbose(
                  "discarding speculative database ("
                    .concat(e, " → ")
                    .concat(t, ")")
                ),
                null == t || t.close())
              : (u.verbose(
                  "added speculative database (".concat(e, " → ").concat(t, ")")
                ),
                this.databases.set(e, t),
                this.emitChange());
          }
        }
        constructor() {
          super(
            s.default,
            {
              CLEAR_CACHES: () => this.handleClearCaches(),
              CONNECTION_CLOSED: () => this.handleAuthenticationStoreChanged(),
              CONNECTION_OPEN: () => this.handleConnectionOpen(),
              LOGOUT: () => this.handleAuthenticationStoreChanged(),
            },
            s.DispatchBand.Early
          ),
            (this.databases = new Map()),
            (this.activeUserId = null);
        }
      }
      function d(e) {
        return "@account.".concat(e);
      }
      async function f(e) {
        var t;
        return null;
      }
      var E = new c();
    },
    496533: function (e, t, n) {
      "use strict";
      function i() {
        return null;
      }
      function r(e) {}
      n.r(t),
        n.d(t, {
          getUserId: function () {
            return i;
          },
          setUserId: function () {
            return r;
          },
        });
    },
    299285: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return p;
          },
        }),
        n("222007"),
        n("424973");
      var i = n("446674"),
        r = n("913144"),
        s = n("653047");
      let a = [],
        o = {},
        l = {},
        u = {},
        c = {};
      function d(e) {
        for (let t of ((o[e.id] = e), (u[e.name.toLowerCase()] = e), e.aliases))
          u[t.toLowerCase()] = e;
        delete c[e.id];
      }
      function f(e) {
        let { entitlements: t } = e,
          n = !1;
        for (let { sku: e } of t)
          (null == e ? void 0 : e.application) != null &&
            (d(s.default.createFromServer(e.application)), (n = !0));
        return n;
      }
      class E extends i.default.Store {
        _getAllApplications() {
          return Object.values(o);
        }
        getGuildApplication(e, t) {
          if (null != e) {
            for (let n of Object.values(o))
              if (n.guildId === e && n.type === t) return n;
          }
        }
        getGuildApplicationIds(e) {
          var t;
          return null == e ? a : null !== (t = l[e]) && void 0 !== t ? t : a;
        }
        getApplication(e) {
          return o[e];
        }
        getApplicationByName(e) {
          if (null == e) return;
          let t = e.toLowerCase();
          return Object.prototype.hasOwnProperty.call(u, t) ? u[t] : void 0;
        }
        isFetchingApplication(e) {
          return !0 === c[e];
        }
        didFetchingApplicationFail(e) {
          return !1 === c[e];
        }
        getFetchingOrFailedFetchingIds() {
          return Object.keys(c);
        }
      }
      E.displayName = "ApplicationStore";
      var p = new E(r.default, {
        CONNECTION_OPEN: function () {
          (o = {}), (l = {});
        },
        OVERLAY_INITIALIZE: function (e) {
          let { applications: t } = e;
          for (let e of t) d(new s.default(e));
        },
        APPLICATION_FETCH: function (e) {
          let { applicationId: t } = e,
            n = c[t];
          return (c[t] = !0), !0 !== n;
        },
        APPLICATION_FETCH_SUCCESS: function (e) {
          let { application: t } = e;
          d(s.default.createFromServer(t));
        },
        APPLICATION_FETCH_FAIL: function (e) {
          let { applicationId: t } = e,
            n = c[t];
          return (c[t] = !1), !1 !== n;
        },
        APPLICATIONS_FETCH: function (e) {
          let { applicationIds: t } = e,
            n = !1;
          for (let e of t) {
            let t = c[e];
            (c[e] = !0), (n = !0 !== t);
          }
          return n;
        },
        APPLICATIONS_FETCH_SUCCESS: function (e) {
          let { applications: t } = e;
          for (let e of t) d(s.default.createFromServer(e));
        },
        APPLICATIONS_FETCH_FAIL: function (e) {
          let { applicationIds: t } = e,
            n = !1;
          for (let e of t) {
            let t = c[e];
            (c[e] = !1), (n = !1 !== t);
          }
          return n;
        },
        APPLICATION_SUBSCRIPTIONS_FETCH_ENTITLEMENTS_SUCCESS: f,
        ENTITLEMENTS_FETCH_FOR_USER_SUCCESS: f,
        ENTITLEMENTS_GIFTABLE_FETCH_SUCCESS: f,
        GUILD_SETTINGS_LOADED_INTEGRATIONS: function (e) {
          let { integrations: t, guildId: n } = e,
            i = !1,
            r = [];
          for (let { application: e } of t)
            null != e && (d(e), r.push(e.id), (i = !0));
          return i && (l[n] = r), i;
        },
        GUILD_APPLICATIONS_FETCH_SUCCESS: function (e) {
          let { guildId: t, applications: n } = e,
            i = [];
          for (let e of n) i.push(e.id), d(s.default.createFromServer(e));
          l[t] = i;
        },
        BILLING_PAYMENTS_FETCH_SUCCESS: function (e) {
          let { payments: t } = e,
            n = new Set();
          for (let e of t) {
            var i;
            let t =
              null === (i = e.sku) || void 0 === i ? void 0 : i.application;
            !(null == t || n.has(t.id)) && d(s.default.createFromServer(t));
          }
          return n.size > 0;
        },
        PAYMENT_UPDATE: function (e) {
          var t;
          let { payment: n } = e;
          if (
            (null === (t = n.sku) || void 0 === t ? void 0 : t.application) ==
            null
          )
            return !1;
          d(s.default.createFromServer(n.sku.application));
        },
        INVITE_RESOLVE_SUCCESS: function (e) {
          let { invite: t } = e;
          if (null == t.target_application) return !1;
          d(s.default.createFromServer(t.target_application));
        },
        GIFT_CODE_RESOLVE_SUCCESS: function (e) {
          var t;
          let { giftCode: n } = e;
          if (
            (null === (t = n.store_listing) || void 0 === t
              ? void 0
              : t.sku.application) == null
          )
            return !1;
          d(s.default.createFromServer(n.store_listing.sku.application));
        },
        LIBRARY_FETCH_SUCCESS: function (e) {
          let { libraryApplications: t } = e;
          for (let e of t) d(s.default.createFromServer(e.application));
        },
        STORE_LISTING_FETCH_SUCCESS: function (e) {
          let { storeListing: t } = e;
          if (null == t.sku.application) return !1;
          d(s.default.createFromServer(t.sku.application));
        },
        LOAD_MESSAGES_SUCCESS: function (e) {
          let { messages: t } = e;
          t.forEach(e =>
            (function (e) {
              var t;
              null === (t = e.attachments) ||
                void 0 === t ||
                t.forEach(e => {
                  null != e.application &&
                    d(s.default.createFromServer(e.application));
                });
            })(e)
          );
        },
      });
    },
    519820: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return l;
          },
        });
      var i = n("446674"),
        r = n("913144"),
        s = n("665618");
      let a = {};
      class o extends i.default.Store {
        getGuild(e) {
          return a[e];
        }
      }
      o.displayName = "AuthInviteStore";
      var l = new o(r.default, {
        AUTH_INVITE_UPDATE: function (e) {
          let { invite: t } = e,
            n = t.guild;
          if (null == n) return !1;
          a[n.id] = (0, s.fromInviteGuild)(n);
        },
      });
    },
    573135: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          DECORATION_TO_AVATAR_RATIO: function () {
            return r;
          },
          AvatarDecorationBorderSizes: function () {
            return s;
          },
        });
      var i = n("52904");
      let r = 1.2,
        s = {
          [i.AvatarSizes.SIZE_56]: 4,
          [i.AvatarSizes.SIZE_80]: 6,
          [i.AvatarSizes.SIZE_120]: 8,
        };
    },
    234251: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isAnimatedAvatarDecoration: function () {
            return i;
          },
          isEqualAvatarDecoration: function () {
            return r;
          },
          parseAvatarDecorationData: function () {
            return s;
          },
        });
      let i = e => e.split("_", 2).includes("a"),
        r = (e, t) =>
          null == e || null == t
            ? e === t
            : e.asset === t.asset && e.skuId === t.skuId,
        s = e =>
          "object" == typeof e &&
          null != e &&
          "asset" in e &&
          "string" == typeof e.asset
            ? "sku_id" in e && "string" == typeof e.sku_id
              ? { asset: e.asset, skuId: e.sku_id }
              : "skuId" in e && "string" == typeof e.skuId
                ? { asset: e.asset, skuId: e.skuId }
                : { asset: e.asset }
            : null;
    },
    9759: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          CAN_VIEW_BROADCASTS_BUCKETS: function () {
            return s;
          },
          default: function () {
            return a;
          },
        });
      var i = n("862205");
      let r = (0, i.createExperiment)({
          kind: "user",
          id: "2023-04_broadcasting",
          label: "Go Live Broadcasting",
          defaultConfig: { canBroadcast: !1, canViewBroadcasts: !1 },
          treatments: [
            {
              id: 1,
              label: "Allow user to Broadcast to friends & guilds",
              config: { canBroadcast: !0, canViewBroadcasts: !0 },
            },
            {
              id: 2,
              label: "Cannot broadcast, cannot view broadcasts",
              config: { canBroadcast: !1, canViewBroadcasts: !0 },
            },
          ],
        }),
        s = r.definition.treatments
          .filter(e => e.config.canViewBroadcasts)
          .map(e => e.id);
      var a = r;
    },
    274870: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useIsBroadcastingGDM: function () {
            return a;
          },
          getIsBroadcastingGDM: function () {
            return o;
          },
          filterBroadcastingGDMs: function () {
            return l;
          },
        });
      var i = n("446674"),
        r = n("42203"),
        s = n("9759");
      function a(e) {
        let { canViewBroadcasts: t } = s.default.useExperiment(
            { location: "use_is_broadcasting_gdm" },
            { autoTrackExposure: !1 }
          ),
          n = (0, i.useStateFromStores)([r.default], () =>
            r.default.getChannel(e)
          );
        return !!t && !!(null == n ? void 0 : n.isBroadcastChannel());
      }
      function o(e) {
        let { canViewBroadcasts: t } = s.default.getCurrentConfig(
          { location: "get_is_broadcasting_gdm" },
          { autoTrackExposure: !1 }
        );
        if (!t) return !1;
        let n = r.default.getChannel(e);
        return !!(null == n ? void 0 : n.isBroadcastChannel());
      }
      function l(e) {
        return e.filter(e => {
          let t = o(e);
          return !t;
        });
      }
    },
    180855: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          BUILD_OVERRIDE_TARGET_NAMES: function () {
            return i;
          },
          BUILD_OVERRIDE_EXPIRATION_OPTIONS: function () {
            return r;
          },
          BUILD_OVERRIDE_RELEASE_CHANNEL_OPTIONS: function () {
            return s;
          },
          BUILD_OVERRIDE_COOKIE_NAME: function () {
            return a;
          },
        });
      let i = {
          discord_marketing: "Discord Marketing",
          discord_web: "Discord Web",
          discord_ios: "Discord iOS",
          discord_android: "Discord Android",
        },
        r = [
          { value: 3600, label: "1 Hour" },
          { value: 86400, label: "1 Day" },
          { value: 259200, label: "3 Days" },
          { value: 604800, label: "1 Week" },
          { value: 1209600, label: "2 Weeks" },
          { value: 1814400, label: "3 Weeks" },
          { value: 2628e3, label: "1 Month" },
        ],
        s = [
          { value: "all", label: "All" },
          { value: "canary", label: "Canary" },
          { value: "ptb", label: "PTB" },
          { value: "stable", label: "Stable" },
          { value: "staging", label: "Staging" },
        ],
        a = "buildOverride";
    },
    355025: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          APP_VERSION: function () {
            return c;
          },
          getAPIEndpoint: function () {
            return d;
          },
          getBuildOverride: function () {
            return f;
          },
          getBuildOverrideMeta: function () {
            return E;
          },
          probablyHasBuildOverride: function () {
            return p;
          },
          getBuildOverrideExperiments: function () {
            return h;
          },
          isBuildOverrideLink: function () {
            return S;
          },
          validateURL: function () {
            return C;
          },
        }),
        n("101997"),
        n("222007");
      var i = n("160679"),
        r = n("746379"),
        s = n("872717"),
        a = n("773336"),
        o = n("253981"),
        l = n("180855");
      n("49111");
      let u = void 0,
        c = (0, a.isAndroid)()
          ? u.Version.split(" - ")[0]
          : (0, a.isIOS)()
            ? u.Version
            : void 0;
      function d(e) {
        return ""
          .concat(location.protocol, "//")
          .concat(location.host)
          .concat(e);
      }
      function f() {
        let e = o.default.safeParseWithQuery(
          d("/__development/build_overrides")
        );
        return null == e
          ? Promise.resolve(null)
          : ((e.search = null),
            c && (e.query.version = c),
            s.default.get({ url: r.format(e), oldFormErrors: !0 }).then(
              e => e.body || null,
              () => null
            ));
      }
      function E(e) {
        if (T(e))
          return Promise.resolve(
            (function (e) {
              let t = e.match(m);
              if (null == t || 3 !== t.length) return null;
              let n = t[1],
                i = t[2];
              return {
                targetBuildOverride: {
                  ["discord_".concat(n)]: { type: "branch", id: i },
                },
                validForUserIds: [],
                expiresAt: "Mon, 1 Jan 2038 00:00:00 GMT",
              };
            })(e)
          );
        let t = o.default.safeParseWithQuery(e);
        return null == t
          ? Promise.resolve(null)
          : ((t.search = null),
            (t.query.meta = "true"),
            c && (t.query.version = c),
            (t.host = window.location.host),
            s.default.get({ url: r.format(t), oldFormErrors: !0 }).then(
              e => e.body || null,
              () => null
            ));
      }
      function p() {
        return (
          -1 !==
          window.document.cookie.indexOf(
            "".concat(l.BUILD_OVERRIDE_COOKIE_NAME, "=")
          )
        );
      }
      function h() {
        try {
          var e;
          let t = i.parse(window.document.cookie)[l.BUILD_OVERRIDE_COOKIE_NAME];
          if (null == t) return {};
          let n = JSON.parse(atob(t.substring(t.indexOf(".") + 1)));
          return null !== (e = n.$meta.experiments) && void 0 !== e ? e : {};
        } catch (e) {
          return {};
        }
      }
      let _ = RegExp(
        "^https://(?:ptb\\.|canary\\.)?(discordapp|discord)\\.com/__development/link?[\\S]+$",
        "i"
      );
      function S(e) {
        return null != e && _.test(e);
      }
      let m = RegExp("^dev://bo/(ios|android|web)/([\\w-./]+)$", "i");
      function T(e) {
        return null != e && m.test(e);
      }
      let g = new Set([
          "canary.discord.com",
          "ptb.discord.com",
          "discord.com",
          "canary.discordapp.com",
          "ptb.discordapp.com",
          "discordapp.com",
        ]),
        I = new Set(["/__development/link", "/__development/link/"]);
      function C(e) {
        if (T(e)) return { payload: null, url: e };
        let t = o.default.safeParseWithQuery(e);
        if (
          null == t ||
          !g.has(t.hostname) ||
          !("s" in t.query) ||
          !I.has(t.pathname)
        )
          return null;
        for (let e in t.query) "s" !== e && delete t.query[e];
        return { payload: t.query.s, url: r.format(t) };
      }
    },
    1544: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
          deserializeChannelEntries: function () {
            return s;
          },
          deserializeChannel: function () {
            return a;
          },
        }),
        n("222007");
      var i = n("316693");
      function r(e) {
        for (let { permissionOverwrites_: t } of e)
          if (null != t)
            for (let e in t) {
              let n = t[e];
              (n.allow = i.default.deserialize(n.allow)),
                (n.deny = i.default.deserialize(n.deny));
            }
      }
      function s(e) {
        for (let [t, n] of e) r(n);
      }
      function a(e) {
        let { permissionOverwrites_: t } = e;
        if (null != t)
          for (let e in t) {
            let n = t[e];
            (n.allow = i.default.deserialize(n.allow)),
              (n.deny = i.default.deserialize(n.deny));
          }
        return e;
      }
    },
    99795: function (e, t, n) {
      "use strict";
      var i, r, s, a, o, l;
      function u(e) {
        return !(
          (null == e ? void 0 : e.type) !== 0 &&
          (null == e ? void 0 : e.type) !== 1
        );
      }
      function c(e) {
        return (null == e ? void 0 : e.type) === 2;
      }
      n.r(t),
        n.d(t, {
          ParticipantTypes: function () {
            return i;
          },
          ParticipantSelectionTypes: function () {
            return r;
          },
          VoicePlatforms: function () {
            return s;
          },
          isStreamParticipant: function () {
            return u;
          },
          isUserParticipant: function () {
            return c;
          },
          PIP_WIDTH: function () {
            return d;
          },
          EMOJI_PICKER_EMOJI_TO_SHOW_COUNT: function () {
            return f;
          },
        }),
        ((a = i || (i = {}))[(a.STREAM = 0)] = "STREAM"),
        (a[(a.HIDDEN_STREAM = 1)] = "HIDDEN_STREAM"),
        (a[(a.USER = 2)] = "USER"),
        (a[(a.ACTIVITY = 3)] = "ACTIVITY"),
        ((o = r || (r = {})).NONE = "NONE"),
        (o.AUTO = "AUTO"),
        ((l = s || (s = {}))[(l.DESKTOP = 0)] = "DESKTOP"),
        (l[(l.MOBILE = 1)] = "MOBILE"),
        (l[(l.XBOX = 2)] = "XBOX"),
        (l[(l.PLAYSTATION = 3)] = "PLAYSTATION");
      let d = 320,
        f = 8;
    },
    724210: function (e, t, n) {
      "use strict";
      var i, r, s, a;
      n.r(t),
        n.d(t, {
          StaticChannelRoute: function () {
            return i;
          },
          StaticChannelRoutes: function () {
            return o;
          },
          isStaticChannelRoute: function () {
            return l;
          },
          buildGuildStaticChannelId: function () {
            return u;
          },
          isGuildHomeChannel: function () {
            return c;
          },
          ChannelFlags: function () {
            return d;
          },
          MAX_CHANNEL_TOPIC_LENGTH: function () {
            return f;
          },
          MAX_FORUM_CHANNEL_TOPIC_LENGTH: function () {
            return E;
          },
          StaticChannelId: function () {
            return r;
          },
          StaticChannelIds: function () {
            return p;
          },
          FAKE_PLACEHOLDER_PRIVATE_CHANNEL_ID: function () {
            return h;
          },
        }),
        n("222007"),
        ((s = i || (i = {})).ROLE_SUBSCRIPTIONS = "role-subscriptions"),
        (s.GUILD_SHOP = "shop"),
        (s.MEMBER_APPLICATIONS = "member-applications"),
        (s.GUILD_HOME = "@home"),
        (s.CHANNEL_BROWSER = "channel-browser"),
        (s.GUILD_ONBOARDING = "onboarding"),
        (s.CUSTOMIZE_COMMUNITY = "customize-community"),
        (s.MEMBER_SAFETY = "member-safety");
      let o = new Set(Object.values(i));
      function l(e) {
        return o.has(e);
      }
      function u(e, t) {
        return "".concat(e, "-").concat(t);
      }
      function c(e) {
        return !!(null == e ? void 0 : e.includes("@home"));
      }
      let d = Object.freeze({
          GUILD_FEED_REMOVED: 1,
          PINNED: 2,
          ACTIVE_CHANNELS_REMOVED: 4,
          REQUIRE_TAG: 16,
          IS_SPAM: 32,
          IS_GUILD_RESOURCE_CHANNEL: 128,
          CLYDE_AI: 256,
          IS_SCHEDULED_FOR_DELETION: 512,
          IS_MEDIA_CHANNEL: 1024,
          SUMMARIES_DISABLED: 2048,
          IS_ROLE_SUBSCRIPTION_TEMPLATE_PREVIEW_CHANNEL: 8192,
          IS_BROADCASTING: 16384,
          HIDE_MEDIA_DOWNLOAD_OPTIONS: 32768,
        }),
        f = 1024,
        E = 4096;
      ((a = r || (r = {})).GUILD_HOME = "home"),
        (a.SERVER_GUIDE = "guide"),
        (a.CHANNEL_BROWSER = "browse"),
        (a.CUSTOMIZE_COMMUNITY = "customize");
      let p = new Set(Object.values(r)),
        h = "131";
    },
    203288: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return D;
          },
        }),
        n("222007");
      var i = n("316693"),
        r = n("446674"),
        s = n("913144"),
        a = n("7331"),
        o = n("736271"),
        l = n("858560"),
        u = n("808388"),
        c = n("828674"),
        d = n("866595"),
        f = n("38654"),
        E = n("42203"),
        p = n("26989"),
        h = n("305961"),
        _ = n("697218"),
        S = n("49111");
      let m = {},
        T = new Set();
      function g(e) {
        let { guildId: t, role: n, isPreviewingRoles: i } = e;
        return (
          !!(0, c.isSubscriptionRole)(n) &&
          (!!(
            i ||
            (0, c.isSubscriptionRoleAvailableForPurchase)(
              null != n ? n : void 0
            ) ||
            (function (e, t) {
              if (null == e) return !1;
              let n = _.default.getCurrentUser();
              if (null == n) return !1;
              let i = p.default.getMember(t, n.id);
              return null != i && i.roles.includes(e.id);
            })(n, t)
          ) ||
            !1)
        );
      }
      function I(e, t) {
        if (
          !t.hasFeature(S.GuildFeatures.CREATOR_MONETIZABLE) &&
          !t.hasFeature(S.GuildFeatures.CREATOR_MONETIZABLE_PROVISIONAL)
        )
          return !1;
        let n = f.default.isViewingServerShop(t.id);
        for (let i of Object.keys(e.permissionOverwrites)) {
          let r = t.getRole(i);
          if (!g({ guildId: t.id, role: r, isPreviewingRoles: n })) continue;
          let s = e.permissionOverwrites[i];
          if ((0, d.isChannelAccessGrantedBy)(e, s)) return !0;
        }
        let r = t.getRole(t.id),
          s =
            null != r &&
            !i.default.has(r.permissions, S.Permissions.VIEW_CHANNEL),
          a = (0, d.isChannelAccessDeniedBy)(e, e.permissionOverwrites[t.id]);
        if (s && !a) {
          for (let e of Object.values(t.roles))
            if (
              g({ guildId: t.id, role: e, isPreviewingRoles: n }) &&
              (0, d.isAllChannelsRole)(e)
            )
              return !0;
        }
        return !1;
      }
      function C(e, t) {
        let n = m[e];
        if (null == n) return !1;
        let i = E.default.getChannel(t);
        if (null == i) return !1;
        let r = h.default.getGuild(i.getGuildId());
        if (null == r) return !1;
        let s = n.has(t),
          a = I(i, r);
        return s !== a && (a ? n.add(t) : n.delete(t), !0);
      }
      function v() {
        (m = {}), T.clear();
      }
      function A(e) {
        let { guild: t } = e;
        delete m[t.id];
      }
      function R(e) {
        let { guildId: t } = e;
        delete m[t];
      }
      function N(e) {
        let { channel: t } = e;
        return null != t.guild_id && C(t.guild_id, t.id);
      }
      class O extends r.default.Store {
        initialize() {
          this.waitFor(h.default, E.default, f.default),
            l.GuildRoleSubscriptionUsersExperiment.subscribe(
              { location: "1" },
              () => v()
            );
        }
        isChannelGated(e, t) {
          if (null == e) return !1;
          let n = m[e];
          return (
            null == n &&
              (!(function (e) {
                let t = h.default.getGuild(e);
                if (null == t) return;
                let n = (m[e] = new Set());
                if (
                  !t.hasFeature(S.GuildFeatures.ROLE_SUBSCRIPTIONS_ENABLED) ||
                  (!(0, u.isGuildEligibleForRoleSubscriptions)(e) &&
                    !(0, a.isExpeditedMonetizationOnboardingGuild)(t))
                )
                  return;
                let i = E.default.getMutableGuildChannelsForGuild(e);
                for (let e in i) {
                  let r = i[e];
                  I(r, t) && n.add(r.id);
                }
              })(e),
              (n = m[e])),
            null != n && n.has(t)
          );
        }
        isChannelGatedAndVisible(e, t) {
          return null != e && this.isChannelGated(e, t) && !T.has(e);
        }
      }
      O.displayName = "GatedChannelStore";
      var D = new O(s.default, {
        CONNECTION_OPEN: v,
        OVERLAY_INITIALIZE: v,
        CACHE_LOADED_LAZY: v,
        GUILD_CREATE: A,
        GUILD_UPDATE: A,
        GUILD_DELETE: A,
        GUILD_ROLE_CREATE: R,
        GUILD_ROLE_UPDATE: R,
        GUILD_ROLE_DELETE: R,
        IMPERSONATE_UPDATE: R,
        IMPERSONATE_STOP: R,
        CHANNEL_CREATE: N,
        CHANNEL_DELETE: N,
        CHANNEL_UPDATES: function (e) {
          let { channels: t } = e,
            n = !1;
          for (let e of t)
            null != e.guild_id && C(e.guild_id, e.id) && (n = !0);
          return n;
        },
        GUILD_ROLE_SUBSCRIPTIONS_FETCH_RESTRICTIONS_SUCCESS: function (e) {
          let { guildId: t, restrictions: n } = e;
          (0, o.isRestrictedFromShowingGuildPurchaseEntryPoints)(n)
            ? T.add(t)
            : T.delete(t);
        },
        GUILD_ROLE_SUBSCRIPTIONS_FETCH_RESTRICTIONS_FAILURE: function (e) {
          let { guildId: t } = e;
          T.add(t);
        },
      });
    },
    656038: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        });
      var i = n("316693"),
        r = n("233069"),
        s = n("991170"),
        a = n("843455");
      function o(e) {
        if (null == e) return !1;
        let { type: t } = e;
        if (null == e.guild_id || !r.GUILD_NON_CATEGORY_CHANNEL_TYPES.has(t))
          return !1;
        if (
          e.isGuildVocal() &&
          !s.default.canEveryoneRole(a.Permissions.CONNECT, e)
        )
          return !0;
        let n = e.permissionOverwrites[e.guild_id];
        return null != n && i.default.has(n.deny, a.Permissions.VIEW_CHANNEL);
      }
    },
    679653: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          computeChannelName: function () {
            return f;
          },
          escapeChannelName: function () {
            return E;
          },
          unescapeChannelName: function () {
            return p;
          },
          default: function () {
            return h;
          },
        }),
        n("222007"),
        n("781738");
      var i = n("446674"),
        r = n("274870"),
        s = n("760190"),
        a = n("27618"),
        o = n("697218"),
        l = n("449008"),
        u = n("158998"),
        c = n("49111"),
        d = n("782340");
      function f(e, t, n) {
        var i, s;
        let a = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
          o = arguments.length > 4 && void 0 !== arguments[4] && arguments[4];
        switch (e.type) {
          case c.ChannelTypes.DM:
            let [f] = e.recipients.map(t.getUser).filter(l.isNotNullish);
            if (null == f) return "???";
            let p = n.getNickname(f.id),
              h =
                null !== (i = null != p ? p : u.default.getName(f)) &&
                void 0 !== i
                  ? i
                  : "???";
            return a ? "@".concat(h) : h;
          case c.ChannelTypes.GROUP_DM:
            let _ = (0, r.getIsBroadcastingGDM)(e.id);
            if ("" !== e.name) return e.name;
            if (_ && null != e.ownerId && "" !== e.ownerId) {
              let i = t.getUser(e.ownerId),
                r =
                  null !== (s = n.getNickname(e.ownerId)) && void 0 !== s
                    ? s
                    : u.default.getName(i);
              return d.default.Messages.BROADCASTING_CHANNEL_NAME.format({
                name: r,
              });
            }
            let S = e.recipients.map(t.getUser).filter(l.isNotNullish),
              m = S.map(e => {
                var t;
                return null !== (t = n.getNickname(e.id)) && void 0 !== t
                  ? t
                  : u.default.getName(e);
              });
            if (m.length > 0) return m.join(", ");
            return d.default.Messages.GROUP_DM_ALONE.format({
              name: u.default.getName(t.getCurrentUser()),
            });
          case c.ChannelTypes.GUILD_ANNOUNCEMENT:
          case c.ChannelTypes.GUILD_TEXT:
          case c.ChannelTypes.GUILD_FORUM:
          case c.ChannelTypes.GUILD_MEDIA:
            if (a) return "#".concat(e.name);
            return e.name;
          case c.ChannelTypes.PUBLIC_THREAD:
          case c.ChannelTypes.PRIVATE_THREAD:
          case c.ChannelTypes.ANNOUNCEMENT_THREAD:
          case c.ChannelTypes.GUILD_VOICE:
          case c.ChannelTypes.GUILD_STAGE_VOICE:
          case c.ChannelTypes.GUILD_CATEGORY:
            if (o) return '#"'.concat(E(e.name), '"');
            if (a && e.isThread()) return '"'.concat(e.name, '"');
            return e.name;
          default:
            return e.name;
        }
      }
      function E(e) {
        return e.replace(/\\/g, "\\\\").replace(/"/g, '\\"');
      }
      function p(e) {
        return e.replace(/\\"/g, '"').replace(/\\\\/g, "\\");
      }
      function h(e) {
        let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        return (0, i.useStateFromStores)(
          [o.default, s.default, a.default],
          () => (null == e ? null : f(e, o.default, a.default, t))
        );
      }
    },
    714657: function (e, t, n) {
      "use strict";
      let i, r;
      n.r(t),
        n.d(t, {
          default: function () {
            return N;
          },
        }),
        n("222007");
      var s = n("35092"),
        a = n("151426"),
        o = n("913144"),
        l = n("10641"),
        u = n("737292"),
        c = n("161778"),
        d = n("233069"),
        f = n("42203"),
        E = n("697218"),
        p = n("719923"),
        h = n("158998"),
        _ = n("253539"),
        S = n("941719");
      let m = !1,
        T = !0,
        g = !1;
      function I() {
        m = !0;
      }
      function C() {
        T && (i = void 0), (g = !1), (m = !1);
      }
      let v = () => {
          T = !p.default.canUseClientThemes(E.default.getCurrentUser());
        },
        A = () => {
          var e, t;
          let n =
            null === (t = u.default.getAppearanceSettings()) || void 0 === t
              ? void 0
              : null === (e = t.clientThemeSettings) || void 0 === e
                ? void 0
                : e.backgroundGradientPresetId;
          null != n && (i = S.BACKGROUND_GRADIENT_PRESETS_MAP[n]);
        };
      class R extends s.default.PersistedStore {
        initialize(e) {
          null != e &&
            (i =
              (null == e ? void 0 : e.gradientPresetId) != null
                ? S.BACKGROUND_GRADIENT_PRESETS_MAP[e.gradientPresetId]
                : void 0),
            this.waitFor(E.default, c.default, f.default, u.default),
            this.syncWith([E.default], v),
            this.syncWith([u.default], A);
        }
        getState() {
          return T ? {} : { gradientPresetId: null == i ? void 0 : i.id };
        }
        get gradientPreset() {
          return i;
        }
        getLinearGradient() {
          return null == this.gradientPreset
            ? null
            : (0, _.getLinearGradientForBackgroundGradient)(
                this.gradientPreset
              );
        }
        get isEditorOpen() {
          return m;
        }
        get isPreview() {
          return T;
        }
        get isCoachmark() {
          return g;
        }
        get mobilePendingThemeIndex() {
          return r;
        }
        constructor(...e) {
          super(...e),
            (this.migrations = [
              e => {
                var t;
                return {
                  gradientPresetId:
                    null == e
                      ? void 0
                      : null === (t = e.gradientPreset) || void 0 === t
                        ? void 0
                        : t.id,
                };
              },
            ]);
        }
      }
      (R.displayName = "ClientThemesBackgroundStore"),
        (R.persistKey = "ClientThemesBackgroundStore");
      var N = new R(o.default, {
        UPDATE_BACKGROUND_GRADIENT_PRESET: e => {
          let { presetId: t } = e;
          if (null == t) {
            i = void 0;
            return;
          }
          i = S.BACKGROUND_GRADIENT_PRESETS_MAP[t];
        },
        UPDATE_MOBILE_PENDING_THEME_INDEX: e => {
          let { mobileThemesIndex: t } = e;
          if (null == t) {
            r = void 0;
            return;
          }
          r = t;
        },
        CLIENT_THEMES_EDITOR_OPEN: e => {
          (function () {
            m = !0;
          })();
        },
        CLIENT_THEMES_EDITOR_CLOSE: e => {
          C();
        },
        RESET_PREVIEW_CLIENT_THEME: e => {
          i = void 0;
        },
        CHANNEL_SELECT: e => {
          let { channelId: t, guildId: n } = e,
            i = E.default.getCurrentUser();
          if (
            null == t ||
            null == n ||
            (0, l.isDismissibleContentDismissed)(
              a.DismissibleContent.CLIENT_THEMES_COACHMARK
            ) ||
            !(0, h.ageEligibleForPremiumUpsell)(i)
          )
            return;
          let r = f.default.getChannel(t);
          null != r &&
            (0, d.isGuildTextChannelType)(r.type) &&
            ((g = !0),
            (function () {
              m = !0;
            })());
        },
        LOGOUT: e => {
          C();
        },
      });
    },
    941719: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          BACKGROUND_GRADIENT_PRESETS: function () {
            return f;
          },
          BACKGROUND_GRADIENT_PRESETS_MAP: function () {
            return E;
          },
        }),
        n("222007");
      var i,
        r,
        s = n("917351"),
        a = n("151426"),
        o = n("843455"),
        l = n("782340");
      let u = [
          {
            id: a.BackgroundGradientPresetId.MINT_APPLE,
            theme: o.ThemeTypes.LIGHT,
            colors: [
              { token: o.Color.BG_GRADIENT_MINT_APPLE_1, stop: 6.15 },
              { token: o.Color.BG_GRADIENT_MINT_APPLE_2, stop: 48.7 },
              { token: o.Color.BG_GRADIENT_MINT_APPLE_3, stop: 93.07 },
            ],
            angle: 180,
            getName: () => l.default.Messages.CLIENT_THEMES_GRADIENT_MINT_APPLE,
            midpointPercentage: 27,
          },
          {
            id: a.BackgroundGradientPresetId.CITRUS_SHERBERT,
            theme: o.ThemeTypes.LIGHT,
            colors: [
              { token: o.Color.BG_GRADIENT_CITRUS_SHERBERT_1, stop: 31.1 },
              { token: o.Color.BG_GRADIENT_CITRUS_SHERBERT_2, stop: 67.09 },
            ],
            angle: 180,
            getName: () =>
              l.default.Messages.CLIENT_THEMES_GRADIENT_CITRUS_SHERBERT,
            midpointPercentage: 27,
          },
          {
            id: a.BackgroundGradientPresetId.RETRO_RAINCLOUD,
            theme: o.ThemeTypes.LIGHT,
            colors: [
              { token: o.Color.BG_GRADIENT_RETRO_RAINCLOUD_1, stop: 5.64 },
              { token: o.Color.BG_GRADIENT_RETRO_RAINCLOUD_2, stop: 26.38 },
              { token: o.Color.BG_GRADIENT_RETRO_RAINCLOUD_2, stop: 49.92 },
              { token: o.Color.BG_GRADIENT_RETRO_RAINCLOUD_1, stop: 73.12 },
            ],
            angle: 148.71,
            getName: () =>
              l.default.Messages.CLIENT_THEMES_GRADIENT_RETRO_RAINCLOUD,
            midpointPercentage: 50,
          },
          {
            id: a.BackgroundGradientPresetId.HANAMI,
            theme: o.ThemeTypes.LIGHT,
            colors: [
              { token: o.Color.BG_GRADIENT_HANAMI_1, stop: 3.56 },
              { token: o.Color.BG_GRADIENT_HANAMI_2, stop: 35.49 },
              { token: o.Color.BG_GRADIENT_HANAMI_3, stop: 68.78 },
            ],
            angle: 38.08,
            getName: () => l.default.Messages.CLIENT_THEMES_GRADIENT_HANAMI,
            midpointPercentage: 50,
          },
          {
            id: a.BackgroundGradientPresetId.SUNRISE,
            theme: o.ThemeTypes.LIGHT,
            colors: [
              { token: o.Color.BG_GRADIENT_SUNRISE_1, stop: 8.62 },
              { token: o.Color.BG_GRADIENT_SUNRISE_2, stop: 48.07 },
              { token: o.Color.BG_GRADIENT_SUNRISE_3, stop: 76.04 },
            ],
            angle: 154.19,
            getName: () => l.default.Messages.CLIENT_THEMES_GRADIENT_SUNRISE,
            midpointPercentage: 50,
          },
          {
            id: a.BackgroundGradientPresetId.COTTON_CANDY,
            theme: o.ThemeTypes.LIGHT,
            colors: [
              { token: o.Color.BG_GRADIENT_COTTON_CANDY_1, stop: 8.5 },
              { token: o.Color.BG_GRADIENT_COTTON_CANDY_2, stop: 94.28 },
            ],
            angle: 180.14,
            getName: () =>
              l.default.Messages.CLIENT_THEMES_GRADIENT_COTTON_CANDY,
            midpointPercentage: 50,
          },
          {
            id: a.BackgroundGradientPresetId.LOFI_VIBES,
            theme: o.ThemeTypes.LIGHT,
            colors: [
              { token: o.Color.BG_GRADIENT_LOFI_VIBES_1, stop: 7.08 },
              { token: o.Color.BG_GRADIENT_LOFI_VIBES_2, stop: 34.94 },
              { token: o.Color.BG_GRADIENT_LOFI_VIBES_3, stop: 65.12 },
              { token: o.Color.BG_GRADIENT_LOFI_VIBES_4, stop: 96.23 },
            ],
            angle: 179.52,
            getName: () => l.default.Messages.CLIENT_THEMES_GRADIENT_LOFI_VIBES,
            midpointPercentage: 27,
          },
          {
            id: a.BackgroundGradientPresetId.DESERT_KHAKI,
            theme: o.ThemeTypes.LIGHT,
            colors: [
              { token: o.Color.BG_GRADIENT_DESERT_KHAKI_1, stop: 12.92 },
              { token: o.Color.BG_GRADIENT_DESERT_KHAKI_2, stop: 32.92 },
              { token: o.Color.BG_GRADIENT_DESERT_KHAKI_3, stop: 52.11 },
            ],
            angle: 38.99,
            getName: () =>
              l.default.Messages.CLIENT_THEMES_GRADIENT_DESERT_KHAKI,
            midpointPercentage: 50,
          },
        ],
        c = [
          {
            id: a.BackgroundGradientPresetId.SUNSET,
            theme: o.ThemeTypes.DARK,
            colors: [
              { token: o.Color.BG_GRADIENT_SUNSET_1, stop: 27.57 },
              { token: o.Color.BG_GRADIENT_SUNSET_2, stop: 71.25 },
            ],
            angle: 141.68,
            getName: () => l.default.Messages.CLIENT_THEMES_GRADIENT_SUNSET,
            midpointPercentage: 35,
          },
          {
            id: a.BackgroundGradientPresetId.CHROMA_GLOW,
            theme: o.ThemeTypes.DARK,
            colors: [
              { token: o.Color.BG_GRADIENT_CHROMA_GLOW_1, stop: 3.94 },
              { token: o.Color.BG_GRADIENT_CHROMA_GLOW_2, stop: 26.1 },
              { token: o.Color.BG_GRADIENT_CHROMA_GLOW_3, stop: 39.82 },
              { token: o.Color.BG_GRADIENT_CHROMA_GLOW_4, stop: 56.89 },
              { token: o.Color.BG_GRADIENT_CHROMA_GLOW_5, stop: 76.45 },
            ],
            angle: 128.92,
            getName: () =>
              l.default.Messages.CLIENT_THEMES_GRADIENT_CHROMA_GLOW,
            midpointPercentage: 15,
          },
          {
            id: a.BackgroundGradientPresetId.FOREST,
            theme: o.ThemeTypes.DARK,
            colors: [
              { token: o.Color.BG_GRADIENT_FOREST_1, stop: 11.2 },
              { token: o.Color.BG_GRADIENT_FOREST_2, stop: 29.93 },
              { token: o.Color.BG_GRADIENT_FOREST_3, stop: 48.64 },
              { token: o.Color.BG_GRADIENT_FOREST_4, stop: 67.85 },
              { token: o.Color.BG_GRADIENT_FOREST_5, stop: 83.54 },
            ],
            angle: 162.27,
            getName: () => l.default.Messages.CLIENT_THEMES_GRADIENT_FOREST,
            midpointPercentage: 50,
          },
          {
            id: a.BackgroundGradientPresetId.CRIMSON_MOON,
            theme: o.ThemeTypes.DARK,
            colors: [
              { token: o.Color.BG_GRADIENT_CRIMSON_MOON_1, stop: 16.17 },
              { token: o.Color.BG_GRADIENT_CRIMSON_MOON_2, stop: 72 },
            ],
            angle: 64.92,
            getName: () =>
              l.default.Messages.CLIENT_THEMES_GRADIENT_CRIMSON_MOON,
            midpointPercentage: 30,
          },
          {
            id: a.BackgroundGradientPresetId.MIDNIGHT_BLURPLE,
            theme: o.ThemeTypes.DARK,
            colors: [
              { token: o.Color.BG_GRADIENT_MIDNIGHT_BLURPLE_1, stop: 11.21 },
              { token: o.Color.BG_GRADIENT_MIDNIGHT_BLURPLE_2, stop: 61.92 },
            ],
            angle: 48.17,
            getName: () =>
              l.default.Messages.CLIENT_THEMES_GRADIENT_MIDNIGHT_BLURPLE,
            midpointPercentage: 24,
          },
          {
            id: a.BackgroundGradientPresetId.MARS,
            theme: o.ThemeTypes.DARK,
            colors: [
              { token: o.Color.BG_GRADIENT_MARS_1, stop: 14.61 },
              { token: o.Color.BG_GRADIENT_MARS_2, stop: 74.62 },
            ],
            angle: 170.82,
            getName: () => l.default.Messages.CLIENT_THEMES_GRADIENT_MARS,
            midpointPercentage: 50,
          },
          {
            id: a.BackgroundGradientPresetId.DUSK,
            theme: o.ThemeTypes.DARK,
            colors: [
              { token: o.Color.BG_GRADIENT_DUSK_1, stop: 12.84 },
              { token: o.Color.BG_GRADIENT_DUSK_2, stop: 85.99 },
            ],
            angle: 180,
            getName: () => l.default.Messages.CLIENT_THEMES_GRADIENT_DUSK,
            midpointPercentage: 50,
          },
          {
            id: a.BackgroundGradientPresetId.UNDER_THE_SEA,
            theme: o.ThemeTypes.DARK,
            colors: [
              { token: o.Color.BG_GRADIENT_UNDER_THE_SEA_1, stop: 1.91 },
              { token: o.Color.BG_GRADIENT_UNDER_THE_SEA_2, stop: 48.99 },
              { token: o.Color.BG_GRADIENT_UNDER_THE_SEA_3, stop: 96.35 },
            ],
            angle: 179.14,
            getName: () =>
              l.default.Messages.CLIENT_THEMES_GRADIENT_UNDER_THE_SEA,
            midpointPercentage: 50,
          },
          {
            id: a.BackgroundGradientPresetId.RETRO_STORM,
            theme: o.ThemeTypes.DARK,
            colors: [
              { token: o.Color.BG_GRADIENT_RETRO_STORM_1, stop: 5.64 },
              { token: o.Color.BG_GRADIENT_RETRO_STORM_2, stop: 26.38 },
              { token: o.Color.BG_GRADIENT_RETRO_STORM_2, stop: 49.92 },
              { token: o.Color.BG_GRADIENT_RETRO_STORM_1, stop: 73.12 },
            ],
            angle: 148.71,
            getName: () =>
              l.default.Messages.CLIENT_THEMES_GRADIENT_RETRO_STORM,
            midpointPercentage: 61,
          },
          {
            id: a.BackgroundGradientPresetId.NEON_NIGHTS,
            theme: o.ThemeTypes.DARK,
            colors: [
              { token: o.Color.BG_GRADIENT_NEON_NIGHTS_1, stop: 0 },
              { token: o.Color.BG_GRADIENT_NEON_NIGHTS_2, stop: 50 },
              { token: o.Color.BG_GRADIENT_NEON_NIGHTS_3, stop: 100 },
            ],
            angle: 180,
            getName: () =>
              l.default.Messages.CLIENT_THEMES_GRADIENT_NEON_NIGHTS,
            midpointPercentage: 50,
          },
          {
            id: a.BackgroundGradientPresetId.STRAWBERRY_LEMONADE,
            theme: o.ThemeTypes.DARK,
            colors: [
              { token: o.Color.BG_GRADIENT_STRAWBERRY_LEMONADE_1, stop: 18.79 },
              { token: o.Color.BG_GRADIENT_STRAWBERRY_LEMONADE_2, stop: 49.76 },
              { token: o.Color.BG_GRADIENT_STRAWBERRY_LEMONADE_3, stop: 80.72 },
            ],
            angle: 161.03,
            getName: () =>
              l.default.Messages.CLIENT_THEMES_GRADIENT_STRAWBERRY_LEMONADE,
            midpointPercentage: 32,
          },
          {
            id: a.BackgroundGradientPresetId.AURORA,
            theme: o.ThemeTypes.DARK,
            colors: [
              { token: o.Color.BG_GRADIENT_AURORA_1, stop: 10.39 },
              { token: o.Color.BG_GRADIENT_AURORA_2, stop: 26.87 },
              { token: o.Color.BG_GRADIENT_AURORA_3, stop: 48.31 },
              { token: o.Color.BG_GRADIENT_AURORA_4, stop: 64.98 },
              { token: o.Color.BG_GRADIENT_AURORA_5, stop: 92.5 },
            ],
            angle: 239.16,
            getName: () => l.default.Messages.CLIENT_THEMES_GRADIENT_AURORA,
            midpointPercentage: 34,
          },
          {
            id: a.BackgroundGradientPresetId.SEPIA,
            theme: o.ThemeTypes.DARK,
            colors: [
              { token: o.Color.BG_GRADIENT_SEPIA_1, stop: 14.14 },
              { token: o.Color.BG_GRADIENT_SEPIA_2, stop: 60.35 },
            ],
            angle: 69.98,
            getName: () => l.default.Messages.CLIENT_THEMES_GRADIENT_SEPIA,
            midpointPercentage: 50,
          },
        ],
        d = {
          id: a.BackgroundGradientPresetId.EASTER_EGG,
          theme: o.ThemeTypes.LIGHT,
          colors: [
            { token: o.Color.BG_GRADIENT_EASTER_EGG_1, stop: 4 },
            { token: o.Color.BG_GRADIENT_EASTER_EGG_2, stop: 96 },
          ],
          angle: 180,
          getName: () => l.default.Messages.CLIENT_THEMES_GRADIENT_EASTER_EGG,
          midpointPercentage: 50,
        },
        f = [...u, ...c, d];
      [...c, ...u],
        ((r = i || (i = {}))[(r.DARK = 0)] = "DARK"),
        (r[(r.LIGHT = 1)] = "LIGHT"),
        (r[(r.SYSTEM = 2)] = "SYSTEM"),
        o.ThemeTypes.DARK,
        o.ThemeTypes.LIGHT,
        o.ThemeTypes.DARKER,
        o.ThemeTypes.LIGHT,
        o.ThemeTypes.MIDNIGHT,
        () => l.default.Messages.THEME_MIDNIGHT;
      let E = (0, s.keyBy)(f, "id");
    },
    253539: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getLinearGradientForBackgroundGradient: function () {
            return s;
          },
          areThemesEqualForGradientThemes: function () {
            return a;
          },
        }),
        n("222007");
      var i = n("449918");
      n("941719");
      var r = n("843455");
      function s(e) {
        let { angle: t, colors: n } = e;
        return "linear-gradient(".concat(t, "deg, ").concat(
          n
            .map(e => {
              let { token: t, stop: n } = e;
              return "".concat((0, i.getColor)(t), " ").concat(n, "%");
            })
            .join(", "),
          ")"
        );
      }
      function a(e, t) {
        return (
          e === t ||
          (e === r.ThemeTypes.DARK && t === r.ThemeTypes.DARKER) ||
          (e === r.ThemeTypes.DARKER && t === r.ThemeTypes.DARK) ||
          !1
        );
      }
    },
    80028: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ClipsLengthSettings: function () {
            return o;
          },
          ClipsViewerConnectivitySettings: function () {
            return l;
          },
          ClipSaveTypes: function () {
            return u;
          },
          ClipsUserEducationType: function () {
            return c;
          },
          DEFAULT_KEYBIND: function () {
            return E;
          },
          CLIPS_TOAST_DURATION: function () {
            return p;
          },
          ClipsLogger: function () {
            return h;
          },
          CLIPS_EXPORT_FILENAME: function () {
            return _;
          },
          CURRENT_CLIP_METADATA_VERSION: function () {
            return S;
          },
          CLIPS_HARDWARE_CLASSIFICATION_VERSION: function () {
            return m;
          },
          WINDOWS_HARDWARE_MINIMUM_GPU_REGEX: function () {
            return T;
          },
          WINDOWS_HARDWARE_AUTO_ENABLE_GPU_REGEX: function () {
            return g;
          },
          OSX_HARDWARE_AUTO_ENABLE_GPU_REGEX: function () {
            return I;
          },
          MIN_CLIP_DURATION_SECONDS: function () {
            return C;
          },
          CLIP_PLAYING_DEBOUNCE_MS: function () {
            return v;
          },
          CLIP_NAME_MIN_CHAR_LENGTH: function () {
            return A;
          },
          CLIP_NAME_MAX_CHAR_LENGTH: function () {
            return R;
          },
          CLIPS_EDIT_MODAL_KEY: function () {
            return N;
          },
          CLIPS_GALLERY_MODAL_KEY: function () {
            return O;
          },
          CLIPS_THUMBNAIL_MAX_WIDTH: function () {
            return D;
          },
          CLIPS_THUMBNAIL_MAX_HEIGHT: function () {
            return y;
          },
          CLIPS_MAX_PARTICIPANTS: function () {
            return P;
          },
          CLIP_NAME_TEMPLATE: function () {
            return L;
          },
          MAX_SIMULTANEOUS_SAVE_CLIP_OPERATIONS: function () {
            return b;
          },
          CLIPS_RUNNING_GAME_CHANGE_CLIPS_INIT_DELAY: function () {
            return M;
          },
          SEEK_DENOMINATOR: function () {
            return U;
          },
          SEEK_SHIFT_MODIFIER: function () {
            return G;
          },
          CLIPS_EDUCATION_COOLDOWN: function () {
            return w;
          },
          CLIPS_EDUCATION_GAME_LAUNCH_THRESHOLD: function () {
            return k;
          },
          CLIPS_EDUCATION_MAX_DISMISSALS_ENABLED: function () {
            return x;
          },
          CLIPS_EDUCATION_MAX_DISMISSALS_DISABLED: function () {
            return F;
          },
        });
      var i,
        r,
        s,
        a,
        o,
        l,
        u,
        c,
        d = n("605250"),
        f = n("718517");
      ((i = o || (o = {}))[(i.SECONDS_30 = 30 * f.default.Millis.SECOND)] =
        "SECONDS_30"),
        (i[(i.MINUTES_1 = f.default.Millis.MINUTE)] = "MINUTES_1"),
        (i[(i.MINUTES_2 = 2 * f.default.Millis.MINUTE)] = "MINUTES_2"),
        ((r = l || (l = {}))[(r.ALL = 0)] = "ALL"),
        (r[(r.FRIENDS = 1)] = "FRIENDS"),
        ((s = u || (u = {})).DECOUPLED = "decoupled"),
        (s.VIEWER = "viewer"),
        (s.STREAMER = "streamer"),
        ((a = c || (c = {}))[(a.Error = 0)] = "Error"),
        (a[(a.Disabled = 1)] = "Disabled"),
        (a[(a.Enabled = 2)] = "Enabled");
      let E = "alt+c",
        p = 6 * f.default.Millis.SECOND,
        h = new d.default("Clips"),
        _ = e => "Discord_Clip_".concat(e, ".mp4"),
        S = 3,
        m = 1,
        T =
          /(NVIDIA GeForce GTX (98|10|16).*|Radeon RX 5(500|600|).*|Radeon RX5.*)/,
        g =
          /(NVIDIA GeForce (RTX (20|30|40).*))|(.*Radeon RX (57|58|59|6|7).*)/,
        I = /(Apple M[12].*)/,
        C = 0.1,
        v = 25,
        A = 0,
        R = 200,
        N = "clips-edit",
        O = "clips-gallery",
        D = 640,
        y = 360,
        P = 100,
        L = e => "Clip - ".concat(new Date(e).toLocaleString()),
        b = 15,
        M = 3e4,
        U = 30,
        G = 10,
        w = 14 * f.default.Millis.DAY,
        k = 5,
        x = 5,
        F = 1;
    },
    56947: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ClipsExperiment: function () {
            return u;
          },
          areClipsEnabled: function () {
            return d;
          },
          useEnableClips: function () {
            return f;
          },
          useShouldSeeClipsPremiumEarlyAccessGoLiveRoadblock: function () {
            return E;
          },
          useShouldSeeClipsPremiumEarlyAccessAnnouncementCoachmark:
            function () {
              return p;
            },
          isUserPremiumTypeForClipsEarlyAccess: function () {
            return h;
          },
        });
      var i = n("862205"),
        r = n("584687"),
        s = n("42887"),
        a = n("719923"),
        o = n("18346"),
        l = n("646718");
      let u = (0, i.createExperiment)({
          kind: "user",
          id: "2022-11_clips_experiment",
          label: "Clips Experiment",
          defaultConfig: {
            enableClips: !1,
            ignorePlatformRestriction: !1,
            showClipsHeaderEntrypoint: !1,
          },
          treatments: [
            {
              id: 1,
              label: "Clips without upsells",
              config: {
                enableClips: !0,
                ignorePlatformRestriction: !1,
                showClipsHeaderEntrypoint: !0,
              },
            },
            {
              id: 2,
              label: "Clips with upsells",
              config: {
                enableClips: !0,
                ignorePlatformRestriction: !1,
                showClipsHeaderEntrypoint: !0,
              },
            },
            {
              id: 99,
              label: "Clips 4 da Developerz",
              config: {
                enableClips: !0,
                ignorePlatformRestriction: !0,
                showClipsHeaderEntrypoint: !0,
              },
            },
          ],
        }),
        c = (0, i.createExperiment)({
          kind: "user",
          id: "2023-09_clips_nitro_early_access",
          label: "Clips (Nitro EA)",
          defaultConfig: {
            enableClips: !1,
            enablePremiumEarlyAccessAnnouncementCoachmark: !1,
            enablePremiumEarlyAccessGoLiveRoadblock: !1,
          },
          treatments: [
            {
              id: 1,
              label: "Clips Nitro EA Upsells Visible",
              config: {
                enableClips: !1,
                enablePremiumEarlyAccessAnnouncementCoachmark: !0,
                enablePremiumEarlyAccessGoLiveRoadblock: !0,
              },
            },
            {
              id: 2,
              label: "Clips Enabled (Nitro)",
              config: {
                enableClips: !0,
                enablePremiumEarlyAccessAnnouncementCoachmark: !0,
                enablePremiumEarlyAccessGoLiveRoadblock: !1,
              },
            },
          ],
        });
      function d() {
        if (!(0, o.default)(s.default)) return !1;
        let { enableClips: e } = c.getCurrentConfig(
            { location: "areClipsEnabled" },
            { autoTrackExposure: !1 }
          ),
          { enableClips: t } = u.getCurrentConfig(
            { location: "areClipsEnabled" },
            { autoTrackExposure: !1 }
          ),
          { enableDecoupledGameClipping: n } = r.default.getCurrentConfig(
            { location: "areClipsEnabled" },
            { autoTrackExposure: !1 }
          );
        return e || t || n;
      }
      function f() {
        let e = (0, o.default)(s.default),
          { enableClips: t } = c.useExperiment(
            { location: "useEnableClips" },
            { autoTrackExposure: !1 }
          ),
          { enableClips: n } = u.useExperiment(
            { location: "useEnableClips" },
            { autoTrackExposure: !1 }
          ),
          { enableDecoupledGameClipping: i } = r.default.useExperiment(
            { location: "useEnableClips" },
            { autoTrackExposure: !1 }
          );
        return (n || t || i) && e;
      }
      let E = e => {
          let { autoTrackExposure: t } = e,
            n = (0, o.default)(s.default),
            { enablePremiumEarlyAccessGoLiveRoadblock: i } = c.useExperiment(
              {
                location: "useShouldSeeClipsPremiumEarlyAccessGoLiveRoadblock",
              },
              { autoTrackExposure: t && n }
            );
          return !!n && i;
        },
        p = e => {
          let { autoTrackExposure: t } = e,
            n = (0, o.default)(s.default),
            { enablePremiumEarlyAccessAnnouncementCoachmark: i } =
              c.useExperiment(
                {
                  location:
                    "useShouldSeeClipsPremiumEarlyAccessGoLiveRoadblock",
                },
                { autoTrackExposure: t && n }
              );
          return !!n && i;
        };
      function h(e) {
        return a.default.isPremiumAtLeast(e.premiumType, l.PremiumTypes.TIER_2);
      }
    },
    965068: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2024-02_clips_quality_decoupling",
        label: "Clips quality decoupling",
        defaultConfig: { allowQualityDecoupling: !1 },
        treatments: [
          {
            id: 1,
            label: "Enable Clips quality decoupling",
            config: { allowQualityDecoupling: !0 },
          },
        ],
      });
    },
    386045: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return P;
          },
        }),
        n("222007"),
        n("702976");
      var i = n("446674"),
        r = n("913144"),
        s = n("49671"),
        a = n("374014"),
        o = n("271938"),
        l = n("568307"),
        u = n("568734"),
        c = n("30591"),
        d = n("80028"),
        f = n("49111"),
        E = n("686298");
      let p = "default",
        h = [],
        _ = [],
        S = [],
        m = 0,
        T = null,
        g = null,
        I = {},
        C = null,
        v = null,
        A = {},
        R = {
          clipsEnabled: !1,
          storageLocation: p,
          clipsQuality: {
            resolution: E.ApplicationStreamResolutions.RESOLUTION_1080,
            frameRate: E.ApplicationStreamFPS.FPS_30,
          },
          clipsLength: d.ClipsLengthSettings.SECONDS_30,
          remindersEnabled: !0,
          decoupledClipsEnabled: !1,
          viewerClipsEnabled: !0,
          viewerConnectivity: d.ClipsViewerConnectivitySettings.ALL,
        },
        N = {
          clipsSettings: R,
          hardwareClassification: null,
          hardwareClassificationForDecoupled: null,
          hardwareClassificationVersion: 0,
          newClipIds: [],
          hasClips: !1,
          hasTakenDecoupledClip: !1,
          clipsEducationState: {
            dismissedAt: null,
            numberOfGamesLaunchedSinceDismissal: 0,
            numberOfTimesDismissed: 0,
          },
        };
      async function O() {
        if (
          N.clipsSettings.storageLocation !== p ||
          null == s.default ||
          null == s.default.remoteApp
        )
          return;
        let e = await s.default.remoteApp.getPath("documents");
        (N.clipsSettings.storageLocation = e), y.emitChange();
      }
      class D extends i.default.DeviceSettingsStore {
        initialize(e) {
          null != e && (N = e), O(), this.waitFor(l.default);
        }
        getClips() {
          return _;
        }
        getPendingClips() {
          return S;
        }
        getUserAgnosticState() {
          return N;
        }
        getSettings() {
          return N.clipsSettings;
        }
        getLastClipsSession() {
          return g;
        }
        getClipsWarningShown(e) {
          return T === e;
        }
        getActiveAnimation() {
          return v;
        }
        getStreamClipAnimations(e) {
          var t;
          return null !== (t = A[e]) && void 0 !== t ? t : h;
        }
        hasAnyClipAnimations() {
          return Object.values(A).some(e => e.length > 0);
        }
        getHardwareClassification() {
          return N.hardwareClassification;
        }
        getHardwareClassificationForDecoupled() {
          return N.hardwareClassificationForDecoupled;
        }
        getHardwareClassificationVersion() {
          return N.hardwareClassificationVersion;
        }
        getIsAtMaxSaveClipOperations() {
          return m >= d.MAX_SIMULTANEOUS_SAVE_CLIP_OPERATIONS;
        }
        getLastClipsError() {
          return C;
        }
        isClipsEnabledForUser(e) {
          var t, n;
          return (
            null !==
              (n =
                null === (t = I[e]) || void 0 === t
                  ? void 0
                  : t.clipsEnabled) &&
            void 0 !== n &&
            n
          );
        }
        isVoiceRecordingAllowedForUser(e) {
          var t, n;
          return (
            null !==
              (n =
                null === (t = I[e]) || void 0 === t
                  ? void 0
                  : t.allowVoiceRecording) &&
            void 0 !== n &&
            n
          );
        }
        isViewerClippingAllowedForUser(e) {
          var t, n;
          return (
            null !==
              (n =
                null === (t = I[e]) || void 0 === t
                  ? void 0
                  : t.allowAnyViewerClips) &&
            void 0 !== n &&
            n
          );
        }
        hasClips() {
          return N.hasClips;
        }
        hasTakenDecoupledClip() {
          return N.hasTakenDecoupledClip;
        }
        getNewClipIds() {
          return N.newClipIds;
        }
      }
      (D.displayName = "ClipsStore"),
        (D.persistKey = "ClipsStore"),
        (D.migrations = [
          e => ({ clipsSettings: null != e ? e : R, newClipsCount: 0 }),
          e => {
            let t = { ...R, ...e.clipsSettings };
            return { ...e, clipsSettings: t };
          },
          e => {
            var t;
            return {
              ...e,
              newClipIds: null !== (t = e.newClipIds) && void 0 !== t ? t : [],
            };
          },
          e => {
            var t, n;
            return {
              ...e,
              hardwareClassification:
                null !== (t = e.hardwareClassification) && void 0 !== t
                  ? t
                  : null,
              hardwareClassificationVersion:
                null !== (n = e.hardwareClassificationVersion) && void 0 !== n
                  ? n
                  : 0,
            };
          },
          e => {
            var t;
            return {
              ...e,
              hasClips: null !== (t = e.hasClips) && void 0 !== t && t,
            };
          },
          e => ({
            ...e,
            clipsSettings: {
              ...e.clipsSettings,
              decoupledClipsEnabled: R.decoupledClipsEnabled,
            },
          }),
          e => {
            var t;
            return {
              ...e,
              hardwareClassificationForDecoupled:
                null !== (t = e.hardwareClassificationForDecoupled) &&
                void 0 !== t
                  ? t
                  : null,
            };
          },
          e => {
            var t;
            let i =
              null === (t = n("42887").default) || void 0 === t
                ? void 0
                : t.getHardwareH264();
            return {
              ...e,
              clipsSettings: {
                ...e.clipsSettings,
                clipsEnabled: !!i && e.clipsSettings.clipsEnabled,
                decoupledClipsEnabled:
                  !!i && e.clipsSettings.decoupledClipsEnabled,
              },
            };
          },
          e => {
            var t;
            return {
              ...e,
              newClipIds: null !== (t = e.newClipIds) && void 0 !== t ? t : [],
              newClipIDs: void 0,
            };
          },
          e => ({
            ...e,
            clipsSettings: {
              ...e.clipsSettings,
              clipsQuality:
                "number" == typeof e.clipsSettings.clipsQuality ||
                null == e.clipsSettings.clipsQuality
                  ? R.clipsQuality
                  : e.clipsSettings.clipsQuality,
            },
          }),
          e => {
            var t;
            return {
              ...e,
              clipsSettings: {
                ...e.clipsSettings,
                remindersEnabled:
                  null !== (t = e.clipsSettings.remindersEnabled) &&
                  void 0 !== t
                    ? t
                    : R.remindersEnabled,
              },
            };
          },
          e => ({
            ...e,
            hasTakenDecoupledClip: !1,
            clipsEducationState: {
              dismissedAt: null,
              numberOfGamesLaunchedSinceDismissal: 0,
              numberOfTimesDismissed: 0,
            },
          }),
        ]);
      let y = new D(r.default, {
        CLIPS_SETTINGS_UPDATE: function (e) {
          let { settings: t } = e;
          N = { ...N, clipsSettings: { ...N.clipsSettings, ...t } };
        },
        CLIPS_SAVE_CLIP: function (e) {
          var t, n;
          let { clip: i } = e;
          (m = Math.max(m - 1, 0)),
            (g = {
              applicationName: i.applicationName,
              ended: !1,
              ...g,
              newClipIds: [
                ...(null !== (t = null == g ? void 0 : g.newClipIds) &&
                void 0 !== t
                  ? t
                  : []),
                i.id,
              ],
            }),
            (N = {
              ...N,
              newClipIds: [
                ...(null !== (n = N.newClipIds) && void 0 !== n ? n : []),
                i.id,
              ],
            }),
            (S = S.filter(e => {
              let { id: t } = e;
              return t !== i.id;
            })),
            (_ = [i, ..._]),
            (N.hasClips = !0);
        },
        CLIPS_SAVE_CLIP_PLACEHOLDER: function (e) {
          let { clip: t } = e;
          S = [t, ...S];
        },
        CLIPS_SAVE_CLIP_PLACEHOLDER_ERROR: function (e) {
          let { clipId: t } = e;
          S = S.filter(e => {
            let { id: n } = e;
            return n !== t;
          });
        },
        CLIPS_SAVE_CLIP_START: function (e) {
          let { clipType: t, streamKey: n, thumbnail: i } = e;
          if (
            ((m += 1),
            (N.hasTakenDecoupledClip =
              N.hasTakenDecoupledClip || t === d.ClipSaveTypes.DECOUPLED),
            null != n && null != i)
          ) {
            var r;
            let e = Date.now();
            (v = null != v ? v : e),
              (A[n] = [
                ...(null !== (r = A[n]) && void 0 !== r ? r : []),
                { timestamp: e, thumbnail: i },
              ]);
          }
        },
        CLIPS_SAVE_CLIP_ERROR: function () {
          m = Math.max(m - 1, 0);
        },
        CLIPS_SAVE_ANIMATION_END: function (e) {
          let { streamKey: t, timestamp: n } = e;
          v === n && (v = null),
            null == n
              ? (A[t] = [])
              : (A[t] = A[t].filter(e => e.timestamp !== n));
        },
        STREAM_START: function (e) {
          let { sourceName: t, pid: n } = e;
          if (!N.clipsSettings.clipsEnabled) return !1;
          let i = t;
          if (null != n) {
            var r;
            let e = l.default.getGameForPID(n);
            i =
              null !== (r = null == e ? void 0 : e.name) && void 0 !== r
                ? r
                : i;
          }
          if (null == i || "" === i) return !1;
          g = { applicationName: i, newClipIds: [], ended: !1 };
        },
        STREAM_STOP: function (e) {
          let { streamKey: t } = e;
          if (
            ((v = null),
            (A[t] = []),
            null == g ||
              (0, a.decodeStreamKey)(t).ownerId !== o.default.getId())
          )
            return !1;
          g = 0 === g.newClipIds.length ? null : { ...g, ended: !0 };
        },
        CLIPS_CLEAR_CLIPS_SESSION: function () {
          if (null == g) return !1;
          g = null;
        },
        CLIPS_CLEAR_NEW_CLIP_IDS: function () {
          N.newClipIds = [];
        },
        CLIPS_LOAD_DIRECTORY_SUCCESS: function (e) {
          (N.hasClips = e.clips.length > 0), (_ = e.clips);
        },
        CLIPS_DELETE_CLIP: function (e) {
          0 ===
            (_ = _.filter(t => {
              let { filepath: n } = t;
              return n !== e.filepath;
            })).length && (N.hasClips = !1);
        },
        CLIPS_UPDATE_METADATA: function (e) {
          let { clip: t } = e;
          for (let [e, n] of _.entries())
            if (n.id === t.id) {
              (_[e] = t), (_ = [..._]);
              return;
            }
        },
        RTC_CONNECTION_FLAGS: function (e) {
          I[e.userId] = {
            clipsEnabled: (0, u.hasFlag)(e.flags, f.VoiceFlags.CLIPS_ENABLED),
            allowVoiceRecording: (0, u.hasFlag)(
              e.flags,
              f.VoiceFlags.ALLOW_VOICE_RECORDING
            ),
            allowAnyViewerClips: (0, u.hasFlag)(
              e.flags,
              f.VoiceFlags.ALLOW_ANY_VIEWER_CLIPS
            ),
          };
        },
        CLIPS_SHOW_CALL_WARNING: function (e) {
          let { channelId: t } = e;
          T = t;
        },
        VOICE_CHANNEL_SELECT: function (e) {
          let { channelId: t } = e;
          t !== T && (T = null);
        },
        CLIPS_CLASSIFY_HARDWARE: function (e) {
          let { classification: t } = e,
            n = N.hardwareClassification;
          (N.hardwareClassificationVersion =
            d.CLIPS_HARDWARE_CLASSIFICATION_VERSION),
            (N.hardwareClassification = t),
            N.hardwareClassification ===
              c.ClipsHardwareClassification.MEETS_AUTO_ENABLE &&
              n !== c.ClipsHardwareClassification.MEETS_AUTO_ENABLE &&
              (N.clipsSettings.clipsEnabled = !0);
          let i = N.hardwareClassificationForDecoupled;
          (N.hardwareClassificationForDecoupled = t),
            N.hardwareClassificationForDecoupled ===
              c.ClipsHardwareClassification.MEETS_AUTO_ENABLE &&
              i !== c.ClipsHardwareClassification.MEETS_AUTO_ENABLE &&
              N.clipsSettings.clipsEnabled &&
              (N.clipsSettings.decoupledClipsEnabled = !0);
        },
        CLIPS_INIT: function (e) {
          let { applicationName: t } = e;
          if (((C = null), !N.clipsSettings.clipsEnabled)) return !1;
          g = { applicationName: t, newClipIds: [], ended: !1 };
        },
        CLIPS_INIT_FAILURE: function (e) {
          let { errMsg: t } = e;
          C = t;
        },
        CLIPS_DISMISS_EDUCATION: function (e) {
          let { educationType: t } = e;
          switch (t) {
            case d.ClipsUserEducationType.Error:
              C = null;
              break;
            case d.ClipsUserEducationType.Disabled:
            case d.ClipsUserEducationType.Enabled:
              (N.clipsEducationState.dismissedAt = Date.now()),
                (N.clipsEducationState.numberOfGamesLaunchedSinceDismissal = 0),
                (N.clipsEducationState.numberOfTimesDismissed += 1);
          }
        },
        RUNNING_GAMES_CHANGE: function (e) {
          let { added: t } = e;
          t.length > 0 &&
            (N.clipsEducationState.numberOfGamesLaunchedSinceDismissal += 1);
        },
      });
      var P = y;
    },
    30591: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          ClipsHardwareClassification: function () {
            return i;
          },
        }),
        ((r = i || (i = {})).UNKNOWN = "unknown"),
        (r.BELOW_MINIMUM = "below_minimum"),
        (r.MEETS_MINIMUM = "meets_minimum"),
        (r.MEETS_AUTO_ENABLE = "meets_auto_enable");
    },
    66175: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getClipCreatedAt: function () {
            return s;
          },
          getClipParticipantIds: function () {
            return a;
          },
        });
      var i = n("299039"),
        r = n("80028");
      function s(e) {
        return new Date(i.default.extractTimestamp(e)).toISOString();
      }
      function a(e) {
        return e.slice(0, r.CLIPS_MAX_PARTICIPANTS);
      }
    },
    18346: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return a;
          },
        });
      var i = n("773336"),
        r = n("56947"),
        s = n("353927");
      function a(e) {
        let { ignorePlatformRestriction: t } =
          r.ClipsExperiment.getCurrentConfig(
            { location: "isClipsClientCapable" },
            { autoTrackExposure: !1 }
          );
        return (
          t || (i.isDesktop() && e.getMediaEngine().supports(s.Features.CLIPS))
        );
      }
    },
    680894: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          CLYDE_AI_USER_ID: function () {
            return i;
          },
          CLYDE_AI_MENTION_COLOR: function () {
            return r;
          },
        });
      let i = "1081004946872352958",
        r = 3000177;
    },
    449918: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getColor: function () {
            return f;
          },
          useColorValue: function () {
            return E;
          },
          useDesaturatedColorString: function () {
            return p;
          },
          useThemedColorValue: function () {
            return h;
          },
        }),
        n("781738");
      var i = n("884691"),
        r = n("10371"),
        s = n.n(r),
        a = n("368979"),
        o = n("65597"),
        l = n("669491"),
        u = n("841098"),
        c = n("206230");
      function d(e) {
        return e.toUpperCase().replace(/-/g, "_");
      }
      function f(e) {
        return l.default.unsafe_rawColors[d(e)].css;
      }
      function E(e) {
        return null != e ? a.ColorDetails[e] : null;
      }
      function p(e) {
        let t = (0, o.default)([c.default], () => c.default.saturation);
        return i.useMemo(() => {
          if (null == e) return null;
          if ("currentColor" === e || e.startsWith("var(")) return e;
          let n = s(e),
            i = n.set("hsl.s", n.get("hsl.s") * t);
          return i.hex();
        }, [e, t]);
      }
      function h(e, t) {
        let n = (0, u.useTheme)(),
          r = (0, o.default)([c.default], () => c.default.saturation),
          s = i.useMemo(() => {
            if (null == e) return null;
            let i = l.default.colors[d(e)].resolve({
                theme: null != t ? t : n,
                saturation: r,
              }),
              s = i.hex();
            return { hex: s };
          }, [e, r, n, t]);
        return s;
      }
      n("49111");
    },
    269936: function (e, t, n) {
      "use strict";
      n.r(t);
      var i = n("868233"),
        r = n("35468");
      n.es(i, t), (0, i.setAwaitOnline)(r.default.awaitOnline);
    },
    7331: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useIsUserInCreatorMonetizationEligibleCountry: function () {
            return s;
          },
          isUserInCreatorMonetizationEligibleCountry: function () {
            return a;
          },
          useIsExpeditedOnboardingGuild: function () {
            return o;
          },
          isExpeditedMonetizationOnboardingGuild: function () {
            return l;
          },
          useIsMonetizationWaitlistEnabledForGuild: function () {
            return u;
          },
          isMonetizationWaitlistEnabledForGuild: function () {
            return c;
          },
          isCreatorMonetizationNagActivateEnabled: function () {
            return d;
          },
        });
      var i = n("615923"),
        r = n("49111");
      function s() {
        let { isUserEligibleForCreatorMonetization: e } =
          i.CreatorMonetizationCountryAllowlistExperiment.useExperiment(
            { location: "e3bb71_1" },
            { autoTrackExposure: !1 }
          );
        return e;
      }
      function a() {
        let { isUserEligibleForCreatorMonetization: e } =
          i.CreatorMonetizationCountryAllowlistExperiment.getCurrentConfig(
            { location: "e3bb71_2" },
            { autoTrackExposure: !1 }
          );
        return e;
      }
      function o(e) {
        let t = (function (e) {
            let { enableFastMonetizationOnboardingForGuild: t } =
                i.CreatorMonetizationRavenOnboardingGuildExperiment.useExperiment(
                  {
                    guildId: null != e ? e : r.EMPTY_STRING_GUILD_ID,
                    location: "e3bb71_3",
                  },
                  { autoTrackExposure: !0 }
                ),
              { enableFastMonetizationOnboardingForUser: n } =
                i.CreatorMonetizationRavenOnboardingUserExperiment.useExperiment(
                  { location: "e3bb71_4" },
                  { autoTrackExposure: !1 }
                );
            return null != e && t && n;
          })(null == e ? void 0 : e.id),
          n = (function (e) {
            let { enableFastMonetizationOnboardingForUser: t } =
              i.CreatorMonetizationRavenOnboardingUserExperiment.useExperiment(
                { location: "e3bb71_7" },
                { autoTrackExposure: !1 }
              );
            return (
              null != e &&
              e.hasFeature(r.GuildFeatures.CREATOR_MONETIZABLE_WHITEGLOVE) &&
              t
            );
          })(e);
        return t || n;
      }
      function l(e) {
        return (
          (function (e) {
            let { enableFastMonetizationOnboardingForGuild: t } =
                i.CreatorMonetizationRavenOnboardingGuildExperiment.getCurrentConfig(
                  {
                    guildId: null != e ? e : r.EMPTY_STRING_GUILD_ID,
                    location: "e3bb71_5",
                  }
                ),
              { enableFastMonetizationOnboardingForUser: n } =
                i.CreatorMonetizationRavenOnboardingUserExperiment.getCurrentConfig(
                  { location: "e3bb71_6" }
                );
            return null != e && t && n;
          })(null == e ? void 0 : e.id) ||
          (function (e) {
            let { enableFastMonetizationOnboardingForUser: t } =
              i.CreatorMonetizationRavenOnboardingUserExperiment.getCurrentConfig(
                { location: "e3bb71_8" }
              );
            return (
              null != e &&
              e.hasFeature(r.GuildFeatures.CREATOR_MONETIZABLE_WHITEGLOVE) &&
              t
            );
          })(e)
        );
      }
      function u(e) {
        let { enableWaitlist: t } =
          i.CreatorMonetizationOnboardingWaitlistExperiment.useExperiment(
            {
              guildId: null != e ? e : r.EMPTY_STRING_GUILD_ID,
              location: "e3bb71_9",
            },
            { autoTrackExposure: !1 }
          );
        return t;
      }
      function c(e) {
        let { enableWaitlist: t } =
          i.CreatorMonetizationOnboardingWaitlistExperiment.getCurrentConfig({
            guildId: null != e ? e : r.EMPTY_STRING_GUILD_ID,
            location: "e3bb71_10",
          });
        return t;
      }
      function d() {
        let { enableCreatorMonetizationNagActivateForUser: e } =
          i.CreatorMonetizationNagActivateExperiment.getCurrentConfig(
            { location: "e3bb71_11" },
            { autoTrackExposure: !0 }
          );
        return e;
      }
    },
    615923: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          CreatorMonetizationCountryAllowlistExperiment: function () {
            return r;
          },
          CreatorMonetizationRavenOnboardingGuildExperiment: function () {
            return s;
          },
          CreatorMonetizationRavenOnboardingUserExperiment: function () {
            return a;
          },
          CreatorMonetizationOnboardingWaitlistExperiment: function () {
            return o;
          },
          CreatorMonetizationNagActivateExperiment: function () {
            return l;
          },
        });
      var i = n("862205");
      let r = (0, i.createExperiment)({
          kind: "user",
          id: "2022-04_creator_monetization_country_allowlist",
          label: "Creator Monetization Available in Country",
          defaultConfig: { isUserEligibleForCreatorMonetization: !1 },
          treatments: [
            {
              id: 1,
              label: "Enables users to view Creator Monetization entrypoints",
              config: { isUserEligibleForCreatorMonetization: !0 },
            },
          ],
        }),
        s = (0, i.createExperiment)({
          kind: "guild",
          id: "2022-09_creator_monetization_raven",
          label: "Creator Monetization Onboarding v2",
          defaultConfig: { enableFastMonetizationOnboardingForGuild: !1 },
          treatments: [
            {
              id: 1,
              label: "Enables guild to create Guild Role Subscriptions quickly",
              config: { enableFastMonetizationOnboardingForGuild: !0 },
            },
          ],
        }),
        a = (0, i.createExperiment)({
          kind: "user",
          id: "2022-09_creator_monetization_raven_users",
          label: "Creator Monetization Onboarding v2 Users",
          defaultConfig: { enableFastMonetizationOnboardingForUser: !1 },
          treatments: [
            {
              id: 1,
              label: "Enables users to create Guild Role Subscriptions quickly",
              config: { enableFastMonetizationOnboardingForUser: !0 },
            },
          ],
        }),
        o = (0, i.createExperiment)({
          kind: "guild",
          id: "2022-11_creator_monetization_onboarding_waitlist",
          label: "Creator Monetization Onboarding Waitlist",
          defaultConfig: { enableWaitlist: !1 },
          treatments: [
            {
              id: 1,
              label: "Enables Guilds to (possibly) see the waitlist",
              config: { enableWaitlist: !0 },
            },
          ],
        }),
        l = (0, i.createExperiment)({
          kind: "user",
          id: "2023-01_creator_monetization_nag_activate_users",
          label: "Creator Monetization Nag Activate Users",
          defaultConfig: { enableCreatorMonetizationNagActivateForUser: !1 },
          treatments: [
            {
              id: 1,
              label:
                "Enables users to see nag bar to activate server subscriptions",
              config: { enableCreatorMonetizationNagActivateForUser: !0 },
            },
          ],
        });
    },
    736271: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isRestrictedFromShowingGuildPurchaseEntryPoints: function () {
            return o;
          },
          shouldHideGuildPurchaseEntryPoints: function () {
            return l;
          },
          isRestrictedFromUpdatingCreatorMonetizationSettings: function () {
            return u;
          },
          shouldRestrictUpdatingCreatorMonetizationSettings: function () {
            return c;
          },
          isRestrictedFromMonetizationReapplication: function () {
            return d;
          },
        });
      var i = n("648825"),
        r = n("305961"),
        s = n("139170"),
        a = n("49111");
      function o(e) {
        return (
          null != e &&
          e.includes(s.CreatorMonetizationRestrictions.NEW_PURCHASES_DISABLED)
        );
      }
      function l(e) {
        var t;
        if (null == e) return !1;
        let n = i.default.getMonetizationRestrictionsFetchState(e),
          s = i.default.getMonetizationRestrictions(e),
          l = r.default.getGuild(e);
        return n === i.FetchState.FETCHED
          ? o(s)
          : null ===
              (t =
                null == l
                  ? void 0
                  : l.hasFeature(
                      a.GuildFeatures.CREATOR_MONETIZABLE_RESTRICTED
                    )) ||
              void 0 === t ||
              t;
      }
      function u(e) {
        return (
          null != e &&
          e.includes(s.CreatorMonetizationRestrictions.SETTINGS_READ_ONLY)
        );
      }
      function c(e) {
        var t;
        if (null == e) return !1;
        let n = i.default.getMonetizationRestrictionsFetchState(e),
          s = i.default.getMonetizationRestrictions(e),
          o = r.default.getGuild(e);
        return n === i.FetchState.FETCHED
          ? u(s)
          : null ===
              (t =
                null == o
                  ? void 0
                  : o.hasFeature(
                      a.GuildFeatures.CREATOR_MONETIZABLE_RESTRICTED
                    )) ||
              void 0 === t ||
              t;
      }
      function d(e) {
        return (
          null != e &&
          e.includes(s.CreatorMonetizationRestrictions.REAPPLICATION_DISABLED)
        );
      }
    },
    139170: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          CreatorMonetizationRestrictions: function () {
            return i;
          },
          DefaultCreatorMonetizationRestrictions: function () {
            return s;
          },
        }),
        ((r = i || (i = {})).NEW_PURCHASES_DISABLED = "NEW_PURCHASES_DISABLED"),
        (r.REAPPLICATION_DISABLED = "REAPPLICATION_DISABLED"),
        (r.SETTINGS_READ_ONLY = "SETTINGS_READ_ONLY"),
        (r.SUBSCRIPTIONS_ENDED_FULL_REFUND = "SUBSCRIPTIONS_ENDED_FULL_REFUND"),
        (r.SUBSCRIPTIONS_ENDED_PRORATED_REFUND =
          "SUBSCRIPTIONS_ENDED_PRORATED_REFUND");
      let s = [
        "NEW_PURCHASES_DISABLED",
        "REAPPLICATION_DISABLED",
        "SETTINGS_READ_ONLY",
      ];
    },
    808122: function (e, t, n) {
      "use strict";
      function i() {
        let e = r();
        return null === e || !!(e >= 31) || !1;
      }
      function r() {
        return null;
      }
      n.r(t),
        n.d(t, {
          hasPerformanceForKrispFullband: function () {
            return i;
          },
          getMediaPerformanceClass: function () {
            return r;
          },
        });
    },
    214647: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          GET_THERMAL_STATE_NOT_IMPLEMENTED_ERROR_MESSAGE: function () {
            return i;
          },
        });
      let i = "getThermalState not implemented for this client platform";
    },
    347672: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        }),
        n("70102");
      var i = n("214647"),
        r = {
          getThermalState: () =>
            Promise.reject(
              Error(i.GET_THERMAL_STATE_NOT_IMPLEMENTED_ERROR_MESSAGE)
            ),
        };
    },
    601222: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("347672"),
        r = n("214647");
      async function s() {
        let e = null;
        try {
          e = await i.default.getThermalState();
        } catch (e) {
          if (e.message === r.GET_THERMAL_STATE_NOT_IMPLEMENTED_ERROR_MESSAGE)
            return Promise.resolve(null);
          throw e;
        }
        return Promise.resolve(e);
      }
    },
    650033: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return l;
          },
        }),
        n("222007");
      var i = n("446674"),
        r = n("913144");
      let s = {
          enable_swipe_shortcuts:
            "Gestures shortcuts - swipe from right to left.",
          disable_alpha_voice_panel:
            "Disable new Voice Panel UI: Currently the new voice ui is defaulted ON for staff.  It's not feature complete so if there's something you are missing, or you find a problem, you can disable it here.",
          highlight_experimental_icons: "Highlight experimental icons",
          happening_now_summary_card: "Enable Happening Now Card with Summary",
          enable_last_channel: "Enable launch into last channel",
          enable_recently_active: "Enable recently active channels",
          happening_main_tab: "Enable Happening tab containing summaries",
          navigate_to_last_channel:
            "Navigate to last channel when selecting a guild.",
          new_theme_settings:
            "Enable the new theme settings, with Darker and Lights Out themes",
          enable_recently_active_summaries:
            "Enable summaries in recently active view",
          channel_list_layout_animations:
            "Enable experimental channel list layout animations",
          message_preview_animations: "Enable message preview animations",
          recent_channels_throttle: "Throttle recent channels reordering",
          force_voice_panel: "Force new voice panel to be shown.",
          enable_server_discovery: "Enable Server Discovery Search on mobile",
          messages_badge_num_channels:
            "Messages tab badge counts # of unread channels instead of # of unread messages",
          main_tab_launchpad: "Enable LaunchPad in Main Tab",
          redesign_individual_feature_you_tab: "Enable You tab in the old UI",
          disable_theme_key:
            "Disable reloading the entire app when the theme changes",
          theme_setting_in_account_sheet:
            "Show theme settings in the Account action sheet",
          cozy_header: "Cozy header",
          mobile_profile_effect_debug_controls:
            "mobile_profile_effect_debug_controls",
          enable_new_search_filters: "Enables new search filters behavior",
          force_channel_list_v2: "Force channel list V2",
          render_native_message_previews:
            "Render native message previews in search",
        },
        a = {};
      class o extends i.default.DeviceSettingsStore {
        getUserAgnosticState() {
          return { toggleStates: a };
        }
        initialize(e) {
          for (var t in s) {
            var n, i;
            let r =
              null !==
                (i =
                  null == e
                    ? void 0
                    : null === (n = e.toggleStates) || void 0 === n
                      ? void 0
                      : n[t]) &&
              void 0 !== i &&
              i;
            a[t] = r;
          }
        }
        get(e) {
          var t;
          return null !== (t = a[e]) && void 0 !== t && t;
        }
        set(e, t) {
          return (a[e] = t), t;
        }
        all() {
          return a;
        }
        allWithDescriptions() {
          return Object.entries(a).map(e => {
            let [t, n] = e;
            return [t, n, s[t]];
          });
        }
      }
      (o.displayName = "DevToolsDesignTogglesStore"),
        (o.persistKey = "DevToolsDesignTogglesStore");
      var l = new o(r.default, {
        DEV_TOOLS_DESIGN_TOGGLE_SET: function (e) {
          a[e.toggle] = e.value;
        },
      });
    },
    916523: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return l;
          },
        }),
        n("222007");
      var i = n("446674"),
        r = n("913144");
      let s = {
          use_topic_dividers_in_chat:
            "Use summary topics as divider content in chat instead of string formatted dates.",
          highlight_redesigned_icons: "Highlight redesigned icons",
          alt_clips_1: "Use alt clip icon 1",
          alt_clips_2: "Use alt clip icon 2",
          profile_effect_debug_controls:
            "Scrolls through profile effects with arrow up / down. Restart with R",
        },
        a = {};
      class o extends i.default.DeviceSettingsStore {
        getUserAgnosticState() {
          return { toggleStates: a };
        }
        initialize(e) {
          for (var t in s) {
            var n, i;
            let r =
              null !==
                (i =
                  null == e
                    ? void 0
                    : null === (n = e.toggleStates) || void 0 === n
                      ? void 0
                      : n[t]) &&
              void 0 !== i &&
              i;
            a[t] = r;
          }
        }
        get(e) {
          var t;
          return null !== (t = a[e]) && void 0 !== t && t;
        }
        set(e, t) {
          return (a[e] = t), t;
        }
        all() {
          return a;
        }
        allWithDescriptions() {
          return Object.entries(a).map(e => {
            let [t, n] = e;
            return [t, n, s[t]];
          });
        }
      }
      (o.displayName = "DevToolsDesignTogglesStore"),
        (o.persistKey = "DevToolsDesignTogglesStore");
      var l = new o(r.default, {
        DEV_TOOLS_DESIGN_TOGGLE_WEB_SET: function (e) {
          a[e.toggle] = e.value;
        },
      });
    },
    890503: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("446674"),
        r = n("916523");
      function s(e) {
        let t = (0, i.useStateFromStores)([r.default], () => r.default.get(e), [
          e,
        ]);
        return t;
      }
    },
    447621: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          DEFAULT_DISCOVERY_CATEGORY_ID: function () {
            return c;
          },
          OTHER_DISCOVERY_CATEGORY_ID: function () {
            return d;
          },
          DEFAULT_EMOJI_DISCOVERABILITY_SETTING: function () {
            return f;
          },
          DISCOVERY_ALL_CATEGORIES_ID: function () {
            return E;
          },
          DISCORD_HUB_ID: function () {
            return p;
          },
          MAX_ALGOLIA_PAGINATOR_RESULTS: function () {
            return h;
          },
          DISCOVERY_SIDEBAR_CATEGORIES: function () {
            return _;
          },
          SUGGESTED_TAGS_FOR_CATEGORIES: function () {
            return S;
          },
          calculateLocaleOptions: function () {
            return T;
          },
          LANGUAGE_OPTIONS: function () {
            return g;
          },
          DISCOVERY_PARTICIPATOR_REQUIREMENT: function () {
            return I;
          },
          DISCOVERY_COMMUNICATOR_REQUIREMENT: function () {
            return C;
          },
          CategoryIcons: function () {
            return l;
          },
          ALLOWED_SOCIAL_LINKS_DOMAINS: function () {
            return v;
          },
        });
      var i,
        r,
        s,
        a,
        o,
        l,
        u = n("782340");
      let c = 0,
        d = 13,
        f = !0,
        E = -1,
        p = -2,
        h = 1e3,
        _ = [
          { categoryId: -1, icon: "Discover" },
          { categoryId: 1, icon: "Activity" },
          { categoryId: 2, icon: "Music" },
          { categoryId: 6, icon: "Education" },
          { categoryId: 5, icon: "Science" },
          { categoryId: 3, icon: "Television" },
        ];
      ((i = a || (a = {}))[(i.GENERAL_CHATTING = 14)] = "GENERAL_CHATTING"),
        (i[(i.GAMING = 1)] = "GAMING"),
        (i[(i.MUSIC = 2)] = "MUSIC"),
        (i[(i.ENTERTAINMENT = 3)] = "ENTERTAINMENT"),
        (i[(i.CREATIVE_ARTS = 4)] = "CREATIVE_ARTS"),
        (i[(i.SCIENCE_AND_TECH = 5)] = "SCIENCE_AND_TECH"),
        (i[(i.EDUCATION = 6)] = "EDUCATION"),
        (i[(i.SPORTS = 7)] = "SPORTS"),
        (i[(i.FASHION_AND_BEAUTY = 8)] = "FASHION_AND_BEAUTY"),
        (i[(i.RELATIONSHIPS_AND_IDENTITY = 9)] = "RELATIONSHIPS_AND_IDENTITY"),
        (i[(i.TRAVEL_AND_FOOD = 10)] = "TRAVEL_AND_FOOD"),
        (i[(i.FITNESS_AND_HEALTH = 11)] = "FITNESS_AND_HEALTH"),
        (i[(i.FINANCE = 12)] = "FINANCE"),
        (i[(i.OTHER = 13)] = "OTHER"),
        (i[(i.EMOJI = 43)] = "EMOJI"),
        (i[(i.BOTS = 49)] = "BOTS");
      let S = {
          14: [
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_GAMING,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_ROBLOX,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_YOUTUBE,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_TWITCH,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_MINECRAFT,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_COMMUNITY,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_STREAMER,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_FORTNITE,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_ANIME,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_ROLEPLAY,
          ],
          1: [
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_MINECRAFT,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_ROBLOX,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_TWITCH,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_YOUTUBE,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_FORTNITE,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_ESPORTS,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_ROLEPLAY,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_VALORANT,
            () =>
              u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_LEAGUEOFLEGENDS,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_FIVEM,
          ],
          2: [
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_EDM,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_RAP,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_KPOP,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_YOUTUBE,
            () =>
              u.default.Messages
                .SERVER_DISCOVERY_SUGGESTED_TAG_MUSIC_PRODUCTION,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_HIPHOP,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_SINGING,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_GAMING,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_BTS,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_METAL,
          ],
          3: [
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_ANIME,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_YOUTUBE,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_GAMING,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_TWITCH,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_MANGA,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_MEMES,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_STREAMER,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_SOCIAL,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_REDDIT,
          ],
          4: [
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_ART,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_ANIME,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_DESIGN,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_YOUTUBE,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_ANIMATION,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_3D,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_NFT,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_MANGA,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_DRAWING,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_PHOTOGRAPHY,
          ],
          5: [
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_PROGRAMMING,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_TECH,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_CODING,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_GITHUB,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_OPENSOURCE,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_JAVASCRIPT,
            () =>
              u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_CRYPTOCURRENCY,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_HARDWARE,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_SOFTWARE,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_LINUX,
          ],
          6: [
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_STUDY,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_LANGUAGE,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_SCHOOL,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_ENGLISH,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_LEARNING,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_HOMEWORK,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_PROGRAMMING,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_COLLEGE,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_STOCKS,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_YOUTUBE,
          ],
          7: [
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_FOOTBALL,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_NBA,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_NFL,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_SOCCER,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_BASKETBALL,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_FORMULA1,
            () =>
              u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_PREMIER_LEAGUE,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_RACING,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_REDDIT,
            () =>
              u.default.Messages
                .SERVER_DISCOVERY_SUGGESTED_TAG_FANTASY_FOOTBALL,
          ],
          8: [
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_FASHION,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_STREETWEAR,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_SNEAKERS,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_CLOTHING,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_REDDIT,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_YEEZY,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_SUPREME,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_HYPEBEAST,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_STYLE,
          ],
          9: [
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_LGBTQ,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_ANIME,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_SOCIAL,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_FRIENDS,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_COMMUNITY,
          ],
          10: [
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_FOOD,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_DISNEY,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_BEVERAGE,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_SNACKS,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_YOUTUBE,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_TRAVEL,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_DISNEYWORLD,
          ],
          11: [
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_GYM,
            () =>
              u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_BODYBUILDING,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_EXERCISE,
            () =>
              u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_CALISTHENICS,
            () =>
              u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_MENTAL_HEALTH,
            () =>
              u.default.Messages
                .SERVER_DISCOVERY_SUGGESTED_TAG_SELF_IMPROVEMENT,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_EDUCATION,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_CROSSFIT,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_NUTRITION,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_SPORTS,
          ],
          12: [
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_STOCKS,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_TRADING,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_INVESTING,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_BITCOIN,
            () =>
              u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_CRYPTOCURRENCY,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_ETHEREUM,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_OPTIONS,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_DEFI,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_FOREX,
          ],
          13: [
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_GAMING,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_YOUTUBE,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_TWITCH,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_COMMUNITY,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_ANIME,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_EVENTS,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_SOCIAL,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_MEMES,
          ],
          43: [
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_EMOJI,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_EMOTES,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_NITRO,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_ANIME,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_CUTE,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_GIVEAWAYS,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_AESTHETIC,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_ART,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_MEMES,
          ],
          49: [
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_APPS,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_BOTS,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_DISCORD_BOT,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_GIVEAWAYS,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_SUPPORT,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_FUN,
            () => u.default.Messages.SERVER_DISCOVERY_SUGGESTED_TAG_MEMES,
          ],
        },
        m = ["en-GB"];
      function T() {
        return u.default
          .getAvailableLocales()
          .map(e => {
            let t;
            let { value: i, name: r } = e;
            try {
              t = n("20860")(
                "@discordapp/common/images/flags/"
                  .concat(e.value, ".png")
                  .replace("@discordapp/common/images/flags/", "./")
              );
            } catch (e) {
              t = n("799987");
            }
            return "en-US" === i
              ? {
                  value: i,
                  label: u.default.Messages.ENGLISH_LANGUAGE,
                  image: t,
                }
              : { value: i, label: r, image: t };
          })
          .filter(e => !m.includes(e.value));
      }
      T();
      let g = u.default
          .getLanguages()
          .filter(e => !m.includes(e.code))
          .map(e =>
            "en-US" === e.code ? { ...e, name: u.default.Messages.en } : e
          ),
        I = 40,
        C = 20;
      ((r = o || (o = {})).GAME_RECOMMENDATIONS = "Game Recommendations"),
        (r.SERVER_RECOMMENDATIONS = "Server Recommendations"),
        ((s = l || (l = {}))[(s.Activity = 0)] = "Activity"),
        (s[(s.Discover = 1)] = "Discover"),
        (s[(s.Education = 2)] = "Education"),
        (s[(s.Music = 3)] = "Music"),
        (s[(s.Science = 4)] = "Science"),
        (s[(s.Stage = 5)] = "Stage"),
        (s[(s.Television = 6)] = "Television");
      let v = {
        facebook: { presentation: "Facebook", baseUrl: "https://facebook.com" },
        instagram: {
          presentation: "Instagram",
          baseUrl: "https://instagram.com",
        },
        twitter: { presentation: "Twitter", baseUrl: "https://twitter.com" },
        tiktok: { presentation: "TikTok", baseUrl: "https://tiktok.com" },
        twitch: { presentation: "Twitch", baseUrl: "https://twitch.tv" },
        patreon: { presentation: "Patreon", baseUrl: "https://patreon.com" },
        reddit: { presentation: "Reddit", baseUrl: "https://reddit.com/r/" },
        youtube: { presentation: "YouTube", baseUrl: "https://youtube.com" },
        steamcommunity: {
          presentation: "Steam",
          baseUrl: "https://steamcommunity.com",
        },
        soundcloud: {
          presentation: "SoundCloud",
          baseUrl: "https://soundcloud.com",
        },
        bandcamp: { presentation: "Bandcamp", baseUrl: "https://bandcamp.com" },
        github: { presentation: "GitHub", baseUrl: "https://github.com" },
        etsy: { presentation: "Etsy", baseUrl: "https://etsy.com" },
      };
    },
    197231: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          makeAnalyticsID: function () {
            return r;
          },
        }),
        n("781738");
      var i = n("748820");
      function r() {
        return (0, i.v4)().replace(/-/g, "");
      }
    },
    994428: function (e, t, n) {
      "use strict";
      var i, r, s, a;
      n.r(t),
        n.d(t, {
          ContentDismissActionType: function () {
            return i;
          },
          DismissibleContentGroupName: function () {
            return r;
          },
        }),
        ((s = i || (i = {})).PRIMARY = "primary"),
        (s.SECONDARY = "secondary"),
        (s.DISMISS = "dismiss"),
        (s.AUTO = "auto"),
        (s.AUTO_DISMISS = "auto_dismiss"),
        (s.TAKE_ACTION = "take_action"),
        (s.USER_DISMISS = "user_dismiss"),
        (s.USER_DISMISS_ALL = "user_dismiss_all"),
        (s.UNKNOWN = "unknown"),
        ((a = r || (r = {})).GUILD_HEADER_TOOLTIPS = "GUILD_HEADER_TOOLTIPS"),
        (a.CHANNEL_NOTICES = "CHANNEL_NOTICES"),
        (a.CALL_CHAT_BUTTON = "CALL_CHAT_BUTTON"),
        (a.GUILD_FEED_TOP = "GUILD_FEED_TOP"),
        (a.MAIN_VIEW_TOOLTIPS = "MAIN_VIEW_TOOLTIPS"),
        (a.CHANNEL_HEADER_CALL_BUTTON_TOOLTIPS =
          "CHANNEL_HEADER_CALL_BUTTON_TOOLTIPS"),
        (a.YOU_TAB_ONBOARDING = "YOU_TAB_ONBOARDING"),
        (a.SUPER_REACTIONS_SPARKLES = "SUPER_REACTIONS_SPARKLES"),
        (a.NOTICE_BAR = "NOTICE_BAR"),
        (a.PROFILE_DRAWER_HEADER = "PROFILE_DRAWER_HEADER"),
        (a.GUILD_TAKEOVER_MODAL = "GUILD_TAKEOVER_MODAL"),
        (a.SIDEBAR = "SIDEBAR"),
        (a.MEMBER_LIST_HEADER = "MEMBER_LIST_HEADER");
    },
    495226: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          CONTENT_TYPES_WITH_BYPASS_FATIGUE: function () {
            return r;
          },
        }),
        n("222007");
      var i = n("151426");
      let r = new Set([
        i.DismissibleContent.APPLICATION_COMMAND_TOOLTIP,
        i.DismissibleContent.NOW_PLAYING_CONSENT_CARD,
        i.DismissibleContent.GUILD_INSIGHTS_ACCESS_RATE_NEW,
        i.DismissibleContent.FORUM_CHANNEL_UPSELL_MODAL,
        i.DismissibleContent.FORUM_CHANNEL_HELPER_CARD,
        i.DismissibleContent.AUTH_SESSIONS_NEW,
        i.DismissibleContent.COMMANDS_MIGRATION_UPSELL_MODAL,
        i.DismissibleContent.HUB_BACK_TO_SCHOOL_UPSELL,
        i.DismissibleContent.CHANNEL_BROWSER_NUX,
        i.DismissibleContent.BLACK_FRIDAY_2022_BOGO_ANNOUNCEMENT_MODAL,
        i.DismissibleContent.GG_ANNOUNCEMENT,
        i.DismissibleContent.GUILD_ONBOARDING_UPSELL_MODAL,
        i.DismissibleContent.SEASONAL_GIFTING_COACHMARK_2022,
        i.DismissibleContent.CLIENT_THEMES_SETTINGS_BADGE,
        i.DismissibleContent.CLIENT_THEMES_SPARKLE_PREVIEW,
        i.DismissibleContent.QUEST_1_COMPLETION_TOOLTIP,
        i.DismissibleContent.SOUNDBOARD_VOLUME_EDUCATION,
        i.DismissibleContent.REMIXING_ENTRYPOINT_EDUCATION_UPSELLS_MOBILE,
        i.DismissibleContent.GUEST_VOICE_INVITES_MENU_ITEM_NEW_BADGE,
        i.DismissibleContent.CUSTOM_CALL_SOUNDS_PICKER_UPSELL,
        i.DismissibleContent.CLIPS_ONBOARDING_CLIP_BUTTON_COACHMARK,
        i.DismissibleContent.CUSTOM_APP_ICONS_NEW_BADGE,
        i.DismissibleContent.DEKSTOP_CUSTOM_APP_ICON_BADGE,
        i.DismissibleContent.WHATS_NEW_AVATAR_DECOS_FLIP,
        i.DismissibleContent.WHATS_NEW_PROFILE_EFFECTS_FLIP,
        i.DismissibleContent.RECURRING_CONTACT_SYNC_PROMPT,
        i.DismissibleContent.WHATS_NEW_AVATAR_DECOS_NOTIF_BADGE,
        i.DismissibleContent.WHATS_NEW_PROFILE_EFFECTS_NOTIF_BADGE,
        i.DismissibleContent.NUX_GUILD_CHANNEL_EXPLAINER,
        i.DismissibleContent.SUPER_REACTION_TOGGLE_EDUCATION_MOBILE,
        i.DismissibleContent.SUPER_REACTION_TOGGLE_EDUCATION_DESKTOP,
        i.DismissibleContent.FRIEND_FINDER_CONTACTS_IN_NOTIFICATIONS,
      ]);
    },
    585653: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          handleDCShownToUser: function () {
            return r;
          },
          handleDCDismissed: function () {
            return s;
          },
          resetDismissibleContentFrameworkStore: function () {
            return a;
          },
          overrideDismissibleContentFramework: function () {
            return o;
          },
        });
      var i = n("913144");
      let r = e => {
          i.default.dispatch({
            type: "DCF_HANDLE_DC_SHOWN",
            dismissibleContent: e,
          });
        },
        s = e => {
          i.default.dispatch({
            type: "DCF_HANDLE_DC_DISMISSED",
            dismissibleContent: e,
          });
        },
        a = () => {
          i.default.dispatch({ type: "DCF_RESET" });
        },
        o = e => {
          i.default.dispatch({ type: "DCF_DAILY_CAP_OVERRIDE", value: e });
        };
    },
    989691: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return c;
          },
        }),
        n("222007");
      var i = n("446674"),
        r = n("913144"),
        s = n("599110"),
        a = n("495226"),
        o = n("49111");
      let l = {
        numberOfDCsShownToday: 0,
        dailyCapPeriodStart: null,
        dismissibleContentSeenDuringSession: new Set(),
        dailyCapOverridden: !1,
        renderedAtTimestamps: new Map(),
      };
      class u extends i.default.PersistedStore {
        initialize(e) {
          if (null != e) {
            var t;
            (l.numberOfDCsShownToday =
              null !== (t = e.numberOfDCsShownToday) && void 0 !== t ? t : 0),
              (l.dailyCapPeriodStart = e.dailyCapPeriodStart),
              (l.dailyCapOverridden = e.dailyCapOverridden);
          }
          l.dismissibleContentSeenDuringSession = new Set();
        }
        getState() {
          return l;
        }
        get dailyCapOverridden() {
          return l.dailyCapOverridden;
        }
        getRenderedAtTimestamp(e) {
          return l.renderedAtTimestamps.get(e);
        }
        hasUserHitDCCap(e) {
          if (
            (null != e &&
              (a.CONTENT_TYPES_WITH_BYPASS_FATIGUE.has(e) ||
                l.dailyCapOverridden)) ||
            (null != e && l.dismissibleContentSeenDuringSession.has(e))
          )
            return !1;
          let t = new Date();
          return (
            t.setHours(0, 0, 0, 0),
            null != l.dailyCapPeriodStart &&
              l.dailyCapPeriodStart < t.getTime() &&
              ((l.numberOfDCsShownToday = 0), (l.dailyCapPeriodStart = null)),
            l.numberOfDCsShownToday >= 3
          );
        }
      }
      (u.displayName = "DismissibleContentFrameworkStore"),
        (u.persistKey = "DismissibleContentFrameworkStore"),
        (u.migrations = [e => ({ ...e })]);
      var c = new u(r.default, {
        LOGOUT: function () {
          l = {
            ...l,
            dismissibleContentSeenDuringSession: new Set(),
            renderedAtTimestamps: new Map(),
          };
        },
        DCF_DAILY_CAP_OVERRIDE: function (e) {
          let { value: t } = e;
          l.dailyCapOverridden = t;
        },
        DCF_HANDLE_DC_SHOWN: function (e) {
          let { dismissibleContent: t } = e,
            n = new Date();
          if (
            (l.renderedAtTimestamps.set(t, n.getTime()),
            !a.CONTENT_TYPES_WITH_BYPASS_FATIGUE.has(t) &&
              !l.dailyCapOverridden)
          ) {
            if (!l.dismissibleContentSeenDuringSession.has(t)) {
              if (
                (l.dismissibleContentSeenDuringSession.add(t),
                null == l.dailyCapPeriodStart)
              ) {
                let e = new Date();
                e.setHours(0, 0, 0, 0), (l.dailyCapPeriodStart = e.getTime());
              }
              (l.numberOfDCsShownToday += 1),
                l.numberOfDCsShownToday > 3 &&
                  s.default.track(o.AnalyticEvents.DCF_CAP_EXCEEDED, {
                    cap_type: "daily_cap",
                    dismissible_content: t,
                    shown_dcs: l.numberOfDCsShownToday,
                  });
            }
          }
        },
        DCF_HANDLE_DC_DISMISSED: function (e) {
          let { dismissibleContent: t } = e;
          l.renderedAtTimestamps.delete(t);
        },
        DCF_RESET: function () {
          (l.dailyCapPeriodStart = null),
            (l.numberOfDCsShownToday = 0),
            (l.dismissibleContentSeenDuringSession = new Set());
        },
      });
    },
    127746: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          CONTENT_TYPES_WITH_BYPASS_HOLDOUT: function () {
            return r;
          },
        }),
        n("222007");
      var i = n("151426");
      let r = new Set([
        i.DismissibleContent.AUTH_SESSIONS_NEW,
        i.DismissibleContent.CHANNEL_NOTICE_CLYDE_NUX,
        i.DismissibleContent.CHANNEL_NOTICE_QUICKSWITCHER,
        i.DismissibleContent.NAGBAR_NOTICE_MFA_SMS_BACKUP,
        i.DismissibleContent.NAGBAR_NOTICE_POMELO,
        i.DismissibleContent.VOICE_CHANNEL_EFFECTS_REDUCED_MOTION_TOOLTIP,
      ]);
    },
    862853: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          addCandidateContent: function () {
            return T;
          },
          removeCandidateContent: function () {
            return g;
          },
          isContentShown: function () {
            return I;
          },
          useIsContentShown: function () {
            return C;
          },
          useIsAnyContentShown: function () {
            return v;
          },
          getCurrentlyShownCounts: function () {
            return A;
          },
          reset: function () {
            return R;
          },
          default: function () {
            return N;
          },
        }),
        n("222007"),
        n("843762");
      var i = n("308503"),
        r = n("495226"),
        s = n("543322");
      let a = new s.TaskRunner(),
        o = () => ({
          candidates: new Map(),
          shownFatigableCandidate: null,
          prevFatigableCandidate: null,
          recentlyShown: [],
          currentlyShown: new Set(),
          currentlyShownGroup: new Set(),
          lastWinnerTime: 0,
        }),
        l = (0, i.default)(o),
        u = e => ({
          ...e,
          candidates: new Map(e.candidates),
          currentlyShown: new Set(e.currentlyShown),
          currentlyShownGroup: new Set(e.currentlyShownGroup),
        }),
        c = (e, t) => {
          var n;
          return null == t
            ? e
            : (null != t.content && e.currentlyShown.delete(t.content),
              null != t.groupName && e.currentlyShownGroup.delete(t.groupName),
              (null === (n = e.shownFatigableCandidate) || void 0 === n
                ? void 0
                : n.content) === t.content &&
                (e.shownFatigableCandidate = null),
              e);
        },
        d = (e, t) => {
          var n, i;
          if (null == t) return e;
          e.currentlyShown.add(t.content);
          let s = e.recentlyShown.filter(e => e !== t.content);
          return (
            s.unshift(t.content),
            s.splice(5),
            (e.recentlyShown = s),
            null != t.groupName && e.currentlyShownGroup.add(t.groupName),
            !r.CONTENT_TYPES_WITH_BYPASS_FATIGUE.has(t.content) &&
              ((e.shownFatigableCandidate = t),
              (null === (i = e.prevFatigableCandidate) || void 0 === i
                ? void 0
                : i.content) !== t.content &&
                ((e.prevFatigableCandidate = t),
                (e.lastWinnerTime = new Date().getTime()))),
            null === (n = t.onAdded) || void 0 === n || n.call(t),
            e
          );
        },
        f = (e, t) => (e.candidates.set(t.content, t), e),
        E = (e, t) => (e.candidates.delete(t.content), e),
        p = (e, t) => d(c(e, e.shownFatigableCandidate), t),
        h = e =>
          null != e.prevFatigableCandidate
            ? e.candidates.get(e.prevFatigableCandidate.content)
            : void 0,
        _ = e => {
          let t = [...e.candidates.keys()];
          return (
            null !== e.prevFatigableCandidate &&
              e.candidates.has(e.prevFatigableCandidate.content) &&
              e.candidates.size > 1 &&
              (t = t.filter(t => {
                var n;
                return (
                  t !==
                  (null === (n = e.prevFatigableCandidate) || void 0 === n
                    ? void 0
                    : n.content)
                );
              })),
            e.candidates.get(t[Math.floor(Math.random() * t.length)])
          );
        },
        S = e =>
          null != e.prevFatigableCandidate &&
          e.candidates.has(e.prevFatigableCandidate.content) &&
          null == e.shownFatigableCandidate,
        m = e => {
          if (0 === e.candidates.size) return e;
          let t = new Date().getTime() - e.lastWinnerTime > 3e5;
          if (S(e) && !t) return a.unschedule(), p(e, h(e));
          if ((null != e.shownFatigableCandidate && !t) || a.scheduled())
            return e;
          let n = new Date().getTime();
          return null == e.shownFatigableCandidate &&
            n - e.lastWinnerTime < 36e5
            ? e
            : (a.schedule(() => {
                l.setState(e => {
                  let t = u(e);
                  return p(t, _(t));
                });
              }, 250),
              e);
        },
        T = e => {
          let t = r.CONTENT_TYPES_WITH_BYPASS_FATIGUE.has(e.content);
          l.setState(n => {
            let i = u(n);
            return t ? d(i, e) : m(f(i, e));
          });
        },
        g = (e, t) => {
          l.setState(n => {
            let i = u(n);
            return t ? m(c(E(i, e), e)) : c(E(i, e), e);
          });
        },
        I = e => l.getState().currentlyShown.has(e),
        C = e => l(t => t.currentlyShown.has(e)),
        v = e => l(t => e.some(e => t.currentlyShown.has(e))),
        A = () => {
          let e = [...l.getState().currentlyShown].filter(
              e => !r.CONTENT_TYPES_WITH_BYPASS_FATIGUE.has(e)
            ).length,
            t = l.getState().currentlyShown.size;
          return [t, e];
        },
        R = () => {
          l.setState(o), a.unschedule();
        };
      function N(e) {
        return l(e);
      }
    },
    10641: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isDismissibleContentDismissed: function () {
            return m;
          },
          useIsDismissibleContentDismissed: function () {
            return T;
          },
          requestMarkDismissibleContentAsShown: function () {
            return g;
          },
          markDismissibleContentAsDismissed: function () {
            return I;
          },
        }),
        n("222007");
      var i = n("446674"),
        r = n("151426"),
        s = n("193302"),
        a = n("872173"),
        o = n("374363"),
        l = n("599110"),
        u = n("674268"),
        c = n("495226"),
        d = n("585653"),
        f = n("989691"),
        E = n("127746"),
        p = n("862853"),
        h = n("846614"),
        _ = n("994428"),
        S = n("49111");
      function m(e) {
        var t;
        if ((0, h.disableNewUserDismissibleContent)(e)) return !0;
        let n =
          null === (t = o.default.settings.userContent) || void 0 === t
            ? void 0
            : t.dismissedContents;
        return null != n && (0, u.hasBit)(n, e);
      }
      function T(e) {
        return (0, i.useStateFromStores)([o.default], () => m(e));
      }
      function g(e, t, n) {
        if ((0, p.isContentShown)(e) || f.default.hasUserHitDCCap(e)) return;
        let i = (function (e) {
          let t = E.CONTENT_TYPES_WITH_BYPASS_HOLDOUT.has(e),
            { enabled: n } = s.default.getCurrentConfig(
              { location: "isUserSubjectToDCFHoldout" },
              { autoTrackExposure: !t }
            );
          return n && !t;
        })(e);
        if (!i)
          !n &&
            (0, p.addCandidateContent)({
              content: e,
              groupName: null == t ? void 0 : t.groupName,
              onAdded: () => {
                var n;
                let [i, s] = (0, p.getCurrentlyShownCounts)();
                (0, d.handleDCShownToUser)(e),
                  l.default.track(S.AnalyticEvents.DISMISSIBLE_CONTENT_SHOWN, {
                    type: r.DismissibleContent[e],
                    content_count: i,
                    fatigable_content_count: s,
                    group_name: null == t ? void 0 : t.groupName,
                    bypass_fatigue: c.CONTENT_TYPES_WITH_BYPASS_FATIGUE.has(e),
                    guild_id: null == t ? void 0 : t.guildId,
                  }),
                  null == t ||
                    null === (n = t.onShown) ||
                    void 0 === n ||
                    n.call(t);
              },
            });
      }
      async function I(e) {
        let t =
          arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        ((0, p.isContentShown)(e) || t.forceTrack) &&
          (function (e, t) {
            var n;
            let [i] = (0, p.getCurrentlyShownCounts)(),
              s = f.default.getRenderedAtTimestamp(e),
              a = new Date(),
              o = null == s ? null : a.getTime() - s;
            l.default.track(S.AnalyticEvents.DISMISSIBLE_CONTENT_DISMISSED, {
              type: r.DismissibleContent[e],
              action:
                null !== (n = null == t ? void 0 : t.dismissAction) &&
                void 0 !== n
                  ? n
                  : _.ContentDismissActionType.UNKNOWN,
              content_count: i,
              group_name: null == t ? void 0 : t.groupName,
              bypass_fatigue: c.CONTENT_TYPES_WITH_BYPASS_FATIGUE.has(e),
              guild_id: null == t ? void 0 : t.guildId,
              shown_duration: o,
            });
          })(e, t),
          (0, d.handleDCDismissed)(e),
          await (0, a.addDismissedContent)(e);
        let n = !f.default.hasUserHitDCCap();
        (0, p.removeCandidateContent)(
          { content: e, groupName: null == t ? void 0 : t.groupName },
          n
        );
      }
    },
    846614: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useNewUserDismissibleContent: function () {
            return c;
          },
          disableNewUserDismissibleContent: function () {
            return d;
          },
        });
      var i = n("249654"),
        r = n("65597"),
        s = n("151426"),
        a = n("271938"),
        o = n("718517");
      let l = {
          [s.DismissibleContent.MJ_NEW_USER_CHAT_BAR]: 0,
          [s.DismissibleContent.NUX_GUILD_CHANNEL_EXPLAINER]: 0,
          [s.DismissibleContent.SEEN_LAUNCH_WELCOME]: 0,
          [s.DismissibleContent.SEEN_OLD_DESIGN]: 0,
        },
        u = o.default.Millis.DAY;
      function c(e) {
        let t = (0, r.default)([a.default], () => a.default.getId()),
          n = null != t ? i.default.age(t) : 0;
        return e.filter(e => {
          var t;
          let i = null !== (t = l[e]) && void 0 !== t ? t : u;
          return n > i;
        });
      }
      function d(e) {
        var t;
        let n =
            null != a.default.getId() ? i.default.age(a.default.getId()) : 0,
          r = null !== (t = l[e]) && void 0 !== t ? t : u;
        return n < r;
      }
    },
    543322: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          TaskRunner: function () {
            return i;
          },
        });
      class i {
        schedule(e, t) {
          this.unschedule(),
            (this.timeoutId = setTimeout(() => {
              (this.timeoutId = null), e();
            }, t));
        }
        unschedule() {
          this.scheduled() &&
            (clearTimeout(this.timeoutId), (this.timeoutId = null));
        }
        scheduled() {
          return null !== this.timeoutId;
        }
        constructor() {
          this.timeoutId = null;
        }
      }
    },
    958706: function (e, t, n) {
      "use strict";
      var i, r, s, a, o, l, u, c;
      n.r(t),
        n.d(t, {
          EMOJI_MAX_SLOTS: function () {
            return d;
          },
          EMOJI_MAX_LENGTH: function () {
            return f;
          },
          EMOJI_RE: function () {
            return E;
          },
          EMOJI_MAX_FILESIZE_KB: function () {
            return p;
          },
          EMOJI_MAX_FILESIZE: function () {
            return h;
          },
          EmojiSprites: function () {
            return i;
          },
          EmojiDisabledReasons: function () {
            return r;
          },
          EmojiIntention: function () {
            return s;
          },
          EmojiInteractionPoint: function () {
            return a;
          },
          isExternalEmojiAllowedForIntention: function () {
            return S;
          },
        }),
        n("222007");
      let d = 50,
        f = 32,
        E = /[^a-zA-Z0-9_]/g,
        p = 256,
        h = 1024 * p;
      ((o = i || (i = {}))[(o.NonDiversityPerRow = 42)] = "NonDiversityPerRow"),
        (o[(o.DiversityPerRow = 10)] = "DiversityPerRow"),
        (o[(o.PickerPerRow = 11)] = "PickerPerRow"),
        (o[(o.PickerCount = 50)] = "PickerCount"),
        ((l = r || (r = {}))[(l.DISALLOW_EXTERNAL = 0)] = "DISALLOW_EXTERNAL"),
        (l[(l.GUILD_SUBSCRIPTION_UNAVAILABLE = 1)] =
          "GUILD_SUBSCRIPTION_UNAVAILABLE"),
        (l[(l.PREMIUM_LOCKED = 2)] = "PREMIUM_LOCKED"),
        (l[(l.ONLY_GUILD_EMOJIS_ALLOWED = 3)] = "ONLY_GUILD_EMOJIS_ALLOWED"),
        (l[(l.ROLE_SUBSCRIPTION_LOCKED = 4)] = "ROLE_SUBSCRIPTION_LOCKED"),
        (l[(l.ROLE_SUBSCRIPTION_UNAVAILABLE = 5)] =
          "ROLE_SUBSCRIPTION_UNAVAILABLE"),
        ((u = s || (s = {}))[(u.REACTION = 0)] = "REACTION"),
        (u[(u.STATUS = 1)] = "STATUS"),
        (u[(u.COMMUNITY_CONTENT = 2)] = "COMMUNITY_CONTENT"),
        (u[(u.CHAT = 3)] = "CHAT"),
        (u[(u.GUILD_STICKER_RELATED_EMOJI = 4)] =
          "GUILD_STICKER_RELATED_EMOJI"),
        (u[(u.GUILD_ROLE_BENEFIT_EMOJI = 5)] = "GUILD_ROLE_BENEFIT_EMOJI"),
        (u[(u.COMMUNITY_CONTENT_ONLY = 6)] = "COMMUNITY_CONTENT_ONLY"),
        (u[(u.SOUNDBOARD = 7)] = "SOUNDBOARD"),
        (u[(u.VOICE_CHANNEL_TOPIC = 8)] = "VOICE_CHANNEL_TOPIC"),
        (u[(u.GIFT = 9)] = "GIFT"),
        (u[(u.AUTO_SUGGESTION = 10)] = "AUTO_SUGGESTION");
      let _ = new Set([2, 6, 4, 5, 7, 9]);
      function S(e) {
        return !_.has(e);
      }
      ((c = a || (a = {})).EmojiButtonMouseEntered =
        "EMOJI_BUTTON_MOUSE_ENTERED"),
        (c.EmojiButtonFocused = "EMOJI_BUTTON_FOCUSED"),
        (c.ChatInputExpressionPressed = "CHAT_INPUT_EXPRESSION_PRESSED"),
        (c.ChatInputSuggestionsShown = "CHAT_INPUT_SUGGESTIONS_SHOWN"),
        (c.SearchEmojiKeybindPressed = "SEARCH_EMOJI_KEYBIND_PRESSED"),
        (c.AutocompleteTyped = "AUTOCOMPLETE_TYPED"),
        (c.AutocompleteWrapperShown = "AUTOCOMPLETE_WRAPPER_SHOWN"),
        (c.GuildLeaveModalShown = "GUILD_LEAVE_MODAL_SHOWN"),
        (c.AddReactionPopoutMouseEntered = "ADD_REACTION_POPOUT_MOUSE_ENTERED"),
        (c.AddReactionPopoutFocused = "ADD_REACTION_POPOUT_FOCUSED"),
        (c.MessageContextMenuMouseEntered =
          "MESSAGE_CONTEXT_MENU_MOUSE_ENTERED"),
        (c.EmojiPickerActionSheetOpened = "EMOJI_PICKER_ACTION_SHEET_OPENED"),
        (c.TrackOpenPopoutUsed = "TRACK_OPEN_POPOUT_USED"),
        (c.CustomEmojiTooltipShown = "CUSTOM_EMOJI_TOOLTIP_SHOWN");
    },
    316217: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          IGNORE_ANALYTICS_BREADCRUMB_EVENTS: function () {
            return r;
          },
          filterThrottle: function () {
            return s;
          },
        });
      var i = n("49111");
      let r = [
        i.AnalyticEvents.START_SPEAKING,
        i.AnalyticEvents.START_LISTENING,
        i.AnalyticEvents.APP_OPENED,
        i.AnalyticEvents.NOTIFICATION_CLICKED,
        i.AnalyticEvents.EXPERIMENT_USER_TRIGGERED,
        i.AnalyticEvents.EXPERIMENT_DM_TRIGGERED,
        i.AnalyticEvents.EXPERIMENT_GUILD_TRIGGERED,
      ];
      function s(e) {
        let { maxBudgetMinute: t, maxBudgetHour: n } = e,
          i = {
            minute: { slot: 0, budgetUsed: 0 },
            hour: { slot: 0, budgetUsed: 0 },
          };
        return () => {
          let e = Date.now(),
            r = Math.round(e / 1e3 / 60),
            s = Math.round(e / 1e3 / 60 / 60);
          return (
            i.minute.slot !== r &&
              ((i.minute.slot = r), (i.minute.budgetUsed = 0)),
            i.hour.slot !== s && ((i.hour.slot = s), (i.hour.budgetUsed = 0)),
            !!(i.minute.budgetUsed < t) &&
              (i.minute.budgetUsed++, !!(i.hour.budgetUsed < n)) &&
              (i.hour.budgetUsed++, !0)
          );
        };
      }
    },
    565034: function (e, t, n) {
      "use strict";
      var i, r, s, a, o, l;
      n.r(t),
        n.d(t, {
          ExperimentBuckets: function () {
            return i;
          },
          ExperimentTypes: function () {
            return r;
          },
          ExposureTypes: function () {
            return s;
          },
          userTriggerExperimentId: function () {
            return u;
          },
          guildTriggerExperimentId: function () {
            return c;
          },
          TriggerDebuggingAAExperiments: function () {
            return d;
          },
        }),
        ((a = i || (i = {}))[(a.NOT_ELIGIBLE = -1)] = "NOT_ELIGIBLE"),
        (a[(a.CONTROL = 0)] = "CONTROL"),
        (a[(a.TREATMENT_1 = 1)] = "TREATMENT_1"),
        (a[(a.TREATMENT_2 = 2)] = "TREATMENT_2"),
        (a[(a.TREATMENT_3 = 3)] = "TREATMENT_3"),
        (a[(a.TREATMENT_4 = 4)] = "TREATMENT_4"),
        (a[(a.TREATMENT_5 = 5)] = "TREATMENT_5"),
        (a[(a.TREATMENT_6 = 6)] = "TREATMENT_6"),
        (a[(a.TREATMENT_7 = 7)] = "TREATMENT_7"),
        (a[(a.TREATMENT_8 = 8)] = "TREATMENT_8"),
        (a[(a.TREATMENT_9 = 9)] = "TREATMENT_9"),
        (a[(a.TREATMENT_10 = 10)] = "TREATMENT_10"),
        (a[(a.TREATMENT_11 = 11)] = "TREATMENT_11"),
        (a[(a.TREATMENT_12 = 12)] = "TREATMENT_12"),
        (a[(a.TREATMENT_13 = 13)] = "TREATMENT_13"),
        (a[(a.TREATMENT_14 = 14)] = "TREATMENT_14"),
        (a[(a.TREATMENT_15 = 15)] = "TREATMENT_15"),
        (a[(a.TREATMENT_16 = 16)] = "TREATMENT_16"),
        (a[(a.TREATMENT_17 = 17)] = "TREATMENT_17"),
        (a[(a.TREATMENT_18 = 18)] = "TREATMENT_18"),
        (a[(a.TREATMENT_19 = 19)] = "TREATMENT_19"),
        (a[(a.TREATMENT_20 = 20)] = "TREATMENT_20"),
        (a[(a.TREATMENT_21 = 21)] = "TREATMENT_21"),
        (a[(a.TREATMENT_22 = 22)] = "TREATMENT_22"),
        (a[(a.TREATMENT_23 = 23)] = "TREATMENT_23"),
        (a[(a.TREATMENT_24 = 24)] = "TREATMENT_24"),
        (a[(a.TREATMENT_25 = 25)] = "TREATMENT_25"),
        ((o = r || (r = {})).NONE_LEGACY = "none"),
        (o.GUILD = "guild"),
        (o.USER = "user"),
        ((l = s || (s = {})).MANUAL = "manual"),
        (l.AUTO = "auto"),
        (l.AUTO_FALLBACK = "auto_fallback");
      let u = "2023-10_triggerdebuggingaa",
        c = "2023-10_guildaa",
        d = [u, c];
    },
    211470: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          trackExposureToExperiment: function () {
            return a;
          },
          registerUserExperiment: function () {
            return o;
          },
          registerGuildExperiment: function () {
            return l;
          },
          overrideBucket: function () {
            return u;
          },
        });
      var i = n("913144"),
        r = n("789563"),
        s = n("565034");
      function a(e, t, n) {
        var i, s;
        r.default.trackExposure({
          experimentId: e,
          descriptor: t,
          location: null == n ? void 0 : n.location,
          location_stack: null == n ? void 0 : n.analyticsLocations,
          fingerprint: null == n ? void 0 : n.fingerprint,
          excluded: null == n ? void 0 : n.excluded,
          exposureType: null == n ? void 0 : n.exposureType,
        });
      }
      function o(e) {
        let { id: t, title: n, description: i, buckets: a } = e;
        return (
          (0, r.registerExperiment)({
            experimentId: t,
            experimentType: s.ExperimentTypes.USER,
            title: n,
            description: i,
            buckets: a,
          }),
          { id: t }
        );
      }
      function l(e) {
        let { id: t, title: n, description: i, buckets: a } = e;
        return (
          (0, r.registerExperiment)({
            experimentId: t,
            experimentType: s.ExperimentTypes.GUILD,
            title: n,
            description: i,
            buckets: a,
          }),
          { id: t }
        );
      }
      function u(e, t) {
        i.default.dispatch({
          type: "EXPERIMENT_OVERRIDE_BUCKET",
          experimentId: e,
          experimentBucket: t,
        });
      }
    },
    789563: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          registerExperiment: function () {
            return ei;
          },
          default: function () {
            return el;
          },
        }),
        n("702976"),
        n("70102"),
        n("222007"),
        n("781738");
      var i = n("627445"),
        r = n.n(i),
        s = n("917351"),
        a = n.n(s),
        o = n("210696"),
        l = n.n(o),
        u = n("95410"),
        c = n("355025"),
        d = n("605250"),
        f = n("271938"),
        E = n("455079"),
        p = n("599110"),
        h = n("316805"),
        _ = n("565034"),
        S = n("49111");
      let m = "scientist:triggered",
        T = "exerimentOverrides",
        g = "userExperimentOverrides",
        I = "guildExperimentOverrides",
        C = new d.default("ExperimentStore"),
        v = !1,
        A = {},
        R = {},
        N = [],
        O = [],
        D = {},
        y = {},
        P = {},
        L = {},
        b = {},
        M = "staging" === window.GLOBAL_ENV.RELEASE_CHANNEL,
        U = {};
      function G(e) {
        let t = U[e];
        if (void 0 !== t) return t;
        {
          let t = l.v3(e);
          return (U[e] = t), t;
        }
      }
      let w = _.TriggerDebuggingAAExperiments.map(e => G(e)),
        k = {
          title: "Unnamed Experiment",
          description: "No description provided",
        };
      function x(e, t) {
        return e || w.includes(t);
      }
      function F(e) {
        var t;
        return (
          ((null !== (t = e.flags) && void 0 !== t ? t : 0) &
            S.UserFlags.STAFF) ===
            S.UserFlags.STAFF ||
          null != e.personal_connection_id ||
          !1
        );
      }
      function V(e, t, n, i) {
        let r = "".concat(t.type, "|").concat(e),
          s = t.triggerDebuggingEnabled && void 0 !== n && n.length > 0;
        if (t.type === _.ExperimentTypes.USER)
          return (
            s && ((r += "|".concat(n)), i && (r += "|triggerDebugging")), r
          );
        if (t.type === _.ExperimentTypes.GUILD)
          return (
            (r += "|".concat(t.guildId)),
            s && ((r += "|".concat(n)), i && (r += "|triggerDebugging")),
            r
          );
        throw Error();
      }
      function B(e) {
        if (e.type === _.ExperimentTypes.USER)
          return G("".concat(e.bucket, "|").concat(e.revision));
        if (e.type === _.ExperimentTypes.GUILD)
          return G(
            "".concat(e.bucket, "|").concat(e.revision, "|").concat(e.guildId)
          );
        throw Error();
      }
      let H = Date.now();
      function j(e, t, n, i) {
        let r = A[V(e, t, n, i)];
        if (null == r) return !1;
        let s = Date.now() - r.time > 6048e5;
        return !s && r.hash === B(t);
      }
      function Y(e) {
        let {
          experimentId: t,
          descriptor: n,
          location: i,
          location_stack: r,
          context: s,
          fingerprint: a,
          excluded: o,
          exposureType: l,
        } = e;
        if (n.override) return !1;
        let u =
            l === _.ExposureTypes.AUTO_FALLBACK && !!n.triggerDebuggingEnabled,
          c = j(t, n, i, u);
        if (c) return !1;
        if (n.type === _.ExperimentTypes.USER) {
          let e = {
            name: t,
            revision: n.revision,
            population: n.population,
            bucket: n.bucket,
            location: i,
            location_stack: r,
            hash_result: n.hashResult,
            excluded: o,
            exposure_type: l,
          };
          null != s && (e.context_guild_id = s.guildId);
          let c = u
            ? S.AnalyticEvents.EXPERIMENT_USER_TRIGGERED_FALLBACK
            : S.AnalyticEvents.EXPERIMENT_USER_TRIGGERED;
          p.default.track(c, e, { flush: !0, fingerprint: a });
        } else if (n.type === _.ExperimentTypes.GUILD) {
          let e = u
            ? S.AnalyticEvents.EXPERIMENT_GUILD_TRIGGERED_FALLBACK
            : S.AnalyticEvents.EXPERIMENT_GUILD_TRIGGERED;
          p.default.track(
            e,
            {
              name: t,
              revision: n.revision,
              bucket: n.bucket,
              guild_id: n.guildId,
              location: i,
              location_stack: r,
              hash_result: n.hashResult,
              excluded: o,
              exposure_type: l,
            },
            { flush: !0, fingerprint: a }
          );
        }
        (A[V(t, n, i, u)] = { time: Date.now(), hash: B(n) }), en(A);
      }
      function W(e) {
        let [t, n] = e;
        return null != h.GUILD_FILTERS[t] ? (0, h.GUILD_FILTERS)[t](n) : null;
      }
      function K(e) {
        let [t, n] = e;
        return {
          buckets: t.map(e => {
            let [t, n] = e;
            return {
              bucket: t,
              positions: n.map(e => {
                let { s: t, e: n } = e;
                return { start: t, end: n };
              }),
            };
          }),
          filters: n.map(W),
          rawFilterData: n,
        };
      }
      function z(e) {
        !M && "CONNECTION_OPEN" === e.type && F(e.user) && (M = !0),
          (D = {}),
          (y = {}),
          (P = {});
        let t =
            "CONNECTION_OPEN" === e.type ||
            null == e.fingerprint ||
            e.fingerprint === f.default.getFingerprint(),
          { experiments: n, guildExperiments: i } = e;
        t && q(n, i), (v = !0);
      }
      function q(e, t) {
        (N = e),
          (O = null != t ? t : []),
          e.forEach(e => {
            let [t, n, i, r, s, a, o, l] = e;
            D[t] = {
              type: "user",
              revision: n,
              population: s,
              bucket: i,
              override: 0 === r,
              hashResult: null != a ? a : -1,
              aaMode: 1 === o,
              triggerDebuggingEnabled: x(1 === l, t),
            };
          }),
          null != t &&
            t.forEach(e => {
              let [t, n, i, r, s, a, o, l, u, c] = e;
              y[t] = {
                hashKey: n,
                revision: i,
                populations: r.map(K),
                overrides: (function (e) {
                  let t = {};
                  if (null == e) return t;
                  for (let { b: n, k: i } of e) for (let e of i) t[e] = n;
                  return t;
                })(s),
                overridesFormatted: (null != a ? a : []).map(e => e.map(K)),
                holdoutName: null != o ? o : null,
                holdoutBucket: null != l ? l : null,
                aaMode: 1 === u,
                triggerDebuggingEnabled: x(1 === c, t),
              };
            });
      }
      function X(e, t, n) {
        let i = null;
        for (let { buckets: s, filters: a } of t) {
          var r = !0;
          if (null != a) {
            for (let t of a)
              if (null != t && !t(e)) {
                r = !1;
                break;
              }
          }
          if (!r) continue;
          let t = s.find(e => {
            let { positions: t } = e;
            return t.some(e => {
              let { start: t, end: i } = e;
              return n >= t && n < i;
            });
          });
          if (
            (i = null != t ? t.bucket : _.ExperimentBuckets.CONTROL) ===
            _.ExperimentBuckets.NOT_ELIGIBLE
          )
            break;
          return i;
        }
        return null;
      }
      function Q(e) {
        let t = {};
        for (let i in e) {
          var n;
          let r = e[i];
          for (let e of ((t[i] = { ...r }), t[i].populations))
            e.filters = e.rawFilterData.map(W);
          for (let e of null !== (n = t[i].overridesFormatted) && void 0 !== n
            ? n
            : [])
            for (let t of e) t.filters = t.rawFilterData.map(W);
        }
        return t;
      }
      function Z(e) {
        let { serializedExperimentStore: t, user: n } = e;
        !M && F(n) && (M = !0),
          (v = t.hasLoadedExperiments),
          (A = t.trackedExposureExperiments),
          (D = t.loadedUserExperiments),
          (L = t.userExperimentOverrides),
          (b = t.guildExperimentOverrides),
          (y = Q(t.loadedGuildExperiments)),
          (P = {});
      }
      function J() {
        v = !0;
      }
      function $(e) {
        let { isSwitchingAccount: t } = e;
        u.default.remove(m),
          !t &&
            (u.default.remove(T),
            u.default.remove(g),
            u.default.remove(I),
            (L = {}),
            (b = {})),
          (D = {}),
          (N = []),
          (A = {}),
          (v = !1);
      }
      function ee() {
        (v = !1), (A = {}), u.default.remove(m);
      }
      function et() {
        try {
          u.default.set(g, L);
        } catch (e) {
          C.error(
            "Error saving user experiment overrides, unsaved data will be lost",
            e
          ),
            p.default.track(S.AnalyticEvents.EXPERIMENT_SAVE_EXPOSURE_FAILED, {
              module: "discord_app",
              call: "ExperimentStore.saveExperimentOverrides",
            });
        }
        try {
          u.default.set(I, b);
        } catch (e) {
          C.error(
            "Error saving guild experiment overrides, unsaved data will be lost",
            e
          ),
            p.default.track(S.AnalyticEvents.EXPERIMENT_SAVE_EXPOSURE_FAILED, {
              module: "discord_app",
              call: "ExperimentStore.saveExperimentOverrides",
            });
        }
      }
      function en(e) {
        try {
          u.default.set(m, { v: 1, e: e });
        } catch (e) {
          C.error(
            "Error saving tracked exposure experiments, unsaved data will be lost",
            e
          ),
            p.default.track(S.AnalyticEvents.EXPERIMENT_SAVE_EXPOSURE_FAILED, {
              module: "discord_app",
              call: "ExperimentStore.saveTrackedExposureExperiments",
            });
        }
      }
      function ei(e) {
        let {
          experimentId: t,
          experimentType: n,
          title: i,
          description: r,
          buckets: s,
        } = e;
        R = { ...R, [t]: { type: n, title: i, description: r, buckets: s } };
      }
      function er(e) {
        let t,
          n,
          { store: i, renderFunctions: s } = e,
          a =
            "function" == typeof i.getExperimentId ? i.getExperimentId() : null;
        if (!a)
          throw Error(
            "Experiment Store must have a static getExperimentId method defined"
          );
        let o = "function" == typeof i.getMetaData ? i.getMetaData() : k;
        Object.keys(s).forEach(e => {
          if (e === _.ExperimentTypes.NONE_LEGACY) return;
          r(null != s[e], "Unexpected missing renderFunctions"), (t = e);
          let i = Object.keys(s[e]).map(e => parseInt(e));
          n = i;
        }),
          ei({
            experimentId: a,
            experimentType: null != t ? t : _.ExperimentTypes.USER,
            title: o.title,
            description: o.description,
            buckets: null != n ? n : [],
          });
      }
      function es(e) {
        let { experimentId: t, experimentBucket: n } = e,
          i = R[t];
        if (null == i) return !1;
        for (let e of (null == n
          ? ((L = { ...L }), delete L[t], (b = { ...b }), delete b[t])
          : "user" === i.type
            ? (L = {
                ...L,
                [t]: {
                  type: i.type,
                  revision: 1,
                  population: 0,
                  bucket: n,
                  override: !0,
                },
              })
            : (b = {
                ...b,
                [t]: { type: i.type, revision: 1, bucket: n, override: !0 },
              }),
        [L, b]))
          for (let t in e) null == R[t] && delete L[t];
        et();
      }
      function ea(e) {
        let { guild: t } = e;
        for (let e in P) {
          let [n] = e.split(":");
          t.id === n && delete P[e];
        }
      }
      class eo extends E.default {
        initialize() {
          (A = (function () {
            let e = u.default.get(m);
            if (null == e || 1 !== e.v) return {};
            let t = e.e,
              n = Date.now(),
              i = !1;
            for (let e in t) n - t[e].time > 6048e5 && (delete t[e], (i = !0));
            return i && en(t), t;
          })()),
            !(function () {
              var e, t, n;
              let i = [
                null !== (e = u.default.get(T)) && void 0 !== e ? e : {},
                null !== (t = u.default.get(g)) && void 0 !== t ? t : {},
                null !== (n = u.default.get(I)) && void 0 !== n ? n : {},
              ];
              (L = {}), (b = {});
              let r = !a.isEmpty(i[0]);
              for (let e of i)
                for (let t in e) {
                  let n = e[t];
                  null == n ||
                  (n.type !== _.ExperimentTypes.USER &&
                    n.type !== _.ExperimentTypes.GUILD) ||
                  null == n.bucket ||
                  !0 !== n.override ||
                  n.fromCookie
                    ? (delete e[t], (r = !0))
                    : n.type === _.ExperimentTypes.USER
                      ? (L[t] = n)
                      : (b[t] = n);
                }
              let s = (0, c.getBuildOverrideExperiments)();
              for (let e in s)
                (L[e] = {
                  type: _.ExperimentTypes.USER,
                  revision: 1,
                  population: 0,
                  override: !0,
                  fromCookie: !0,
                  bucket: s[e],
                }),
                  (b[e] = {
                    type: _.ExperimentTypes.GUILD,
                    revision: 1,
                    override: !0,
                    fromCookie: !0,
                    bucket: s[e],
                  }),
                  (r = !0);
              r && et();
            })();
        }
        takeSnapshot() {
          return {
            version: eo.LATEST_SNAPSHOT_VERSION,
            data: { rawUserExperiments: N, rawGuildExperiments: O },
          };
        }
        get hasLoadedExperiments() {
          return v;
        }
        hasRegisteredExperiment(e) {
          return null != R[e];
        }
        getUserExperimentDescriptor(e) {
          if (M) {
            let t = L[e];
            if (null != t) return t;
          }
          let t = G(e);
          return D["".concat(t)];
        }
        getGuildExperimentDescriptor(e, t) {
          let n = null != t ? t : S.EMPTY_STRING_GUILD_ID,
            i = b[e];
          if (M && null != i) return i;
          let r = "".concat(n, ":").concat(e);
          if (r in P) return P[r];
          let s = (function e(t, n) {
            var i, r;
            let s = G(n),
              a = y["".concat(s)];
            if (null == a) return null;
            let { revision: o, aaMode: l } = a,
              u = a.overrides[t],
              c = a.triggerDebuggingEnabled;
            if (null != u)
              return u === _.ExperimentBuckets.NOT_ELIGIBLE
                ? null
                : {
                    type: _.ExperimentTypes.GUILD,
                    guildId: t,
                    revision: o,
                    bucket: u,
                    override: !0,
                    hashResult: -1,
                    triggerDebuggingEnabled: c,
                  };
            let d = ""
                .concat(null !== (i = a.hashKey) && void 0 !== i ? i : n, ":")
                .concat(t),
              f = G(d),
              E = f % 1e4,
              p = null,
              h = null !== (r = a.overridesFormatted) && void 0 !== r ? r : [];
            for (let e of h)
              if (null !== (p = X(t, e, E)))
                return {
                  type: _.ExperimentTypes.GUILD,
                  guildId: t,
                  revision: a.revision,
                  bucket: p,
                  override: !0,
                  hashResult: E,
                  triggerDebuggingEnabled: c,
                };
            if (null == (p = X(t, a.populations, E))) return null;
            if (
              null != a.holdoutName &&
              null != a.holdoutBucket &&
              a.holdoutName !== n
            ) {
              let n = e(t, a.holdoutName);
              if (
                (null == n ? void 0 : n.bucket) != null &&
                (!0 !== n.override &&
                  Y({ experimentId: a.holdoutName, descriptor: n }),
                (null == n ? void 0 : n.bucket) === a.holdoutBucket)
              )
                return null;
            }
            return {
              type: _.ExperimentTypes.GUILD,
              guildId: t,
              revision: a.revision,
              bucket: p,
              hashResult: E,
              aaMode: l,
              triggerDebuggingEnabled: c,
            };
          })(n, e);
          return (P[r] = s), s;
        }
        getUserExperimentBucket(e) {
          let t = this.getUserExperimentDescriptor(e);
          return null != t ? t.bucket : _.ExperimentBuckets.NOT_ELIGIBLE;
        }
        getGuildExperimentBucket(e, t) {
          let n = this.getGuildExperimentDescriptor(e, t);
          return null != n ? n.bucket : _.ExperimentBuckets.NOT_ELIGIBLE;
        }
        getAllUserExperimentDescriptors() {
          return D;
        }
        getGuildExperiments() {
          return y;
        }
        getLoadedUserExperiment(e) {
          return D[G(e)];
        }
        getLoadedGuildExperiment(e) {
          return y[G(e)];
        }
        getRecentExposures(e, t) {
          let n = "".concat(e, "|").concat(t, "|");
          return Object.entries(A)
            .filter(e => {
              let [t] = e;
              return t.startsWith(n);
            })
            .map(e => {
              let [t, { time: i }] = e;
              return [t.replace(n, ""), i];
            });
        }
        getRegisteredExperiments() {
          return R;
        }
        getAllExperimentOverrideDescriptors() {
          return M ? { ...L, ...b } : {};
        }
        getExperimentOverrideDescriptor(e) {
          var t;
          return M ? (null !== (t = L[e]) && void 0 !== t ? t : b[e]) : null;
        }
        getAllExperimentAssignments() {
          let e = {},
            t = {};
          for (let n in (Object.keys(R).forEach(e => {
            t[G("".concat(e))] = e;
          }),
          D)) {
            let i = t[n];
            null != i && (e[i] = D[n].bucket);
          }
          for (let t in P) {
            let n = P[t];
            null != n && (e[t] = n.bucket);
          }
          return e;
        }
        getSerializedState() {
          let e = {};
          for (let t in y)
            for (let n of ((e[t] = JSON.parse(JSON.stringify(y[t]))),
            e[t].populations))
              n.filters = [];
          return {
            hasLoadedExperiments: v,
            trackedExposureExperiments: A,
            loadedUserExperiments: D,
            loadedGuildExperiments: e,
            userExperimentOverrides: L,
            guildExperimentOverrides: b,
          };
        }
        hasExperimentTrackedExposure(e, t, n, i) {
          return j(e, t, n, i);
        }
        constructor() {
          super(),
            (this.trackExposure = Y),
            (this.loadCache = () => {
              let e = this.readSnapshot(eo.LATEST_SNAPSHOT_VERSION);
              null != e &&
                ("loadedUserExperiments" in e
                  ? ((D = e.loadedUserExperiments),
                    (y = Q(e.loadedGuildExperiments)))
                  : q(e.rawUserExperiments, e.rawGuildExperiments));
            }),
            this.registerActionHandlers({
              LOGOUT: $,
              LOGIN_SUCCESS: ee,
              CONNECTION_OPEN: z,
              EXPERIMENTS_FETCH_SUCCESS: z,
              OVERLAY_INITIALIZE: Z,
              CACHE_LOADED: this.loadCache,
              EXPERIMENTS_FETCH_FAILURE: J,
              EXPERIMENT_REGISTER_LEGACY: er,
              EXPERIMENT_OVERRIDE_BUCKET: es,
              GUILD_CREATE: ea,
              GUILD_UPDATE: ea,
            });
        }
      }
      (eo.displayName = "ExperimentStore"), (eo.LATEST_SNAPSHOT_VERSION = 1);
      var el = new eo();
    },
    316805: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          GUILD_FILTERS: function () {
            return p;
          },
        }),
        n("222007");
      var i = n("552442"),
        r = n.n(i),
        s = n("210696"),
        a = n.n(s),
        o = n("249654"),
        l = n("519820"),
        u = n("525065"),
        c = n("305961"),
        d = n("718517");
      function f(e, t, n) {
        let i = r(e),
          s = null != t ? r(t) : null,
          a = null != n ? r(n) : null;
        return (
          !((null != s && i.lesser(s)) || (null != a && i.greater(a))) && !0
        );
      }
      function E(e) {
        let t, n;
        for (let [i, r] of e)
          switch (i) {
            case a.v3("min_id"):
              t = r;
              break;
            case a.v3("max_id"):
              n = r;
          }
        return { min: t, max: n };
      }
      let p = {
        [a.v3("guild_ids")]: e => {
          let t = [];
          for (let [n, i] of e) if (n === a.v3("guild_ids")) t = i;
          return e => t.includes(e);
        },
        [a.v3("guild_id_range")]: e => {
          let { min: t, max: n } = E(e);
          return e => f(e, t, n);
        },
        [a.v3("guild_age_range_days")]: e => {
          let { min: t, max: n } = E(e);
          return e => {
            let i = Math.floor(o.default.age(e) / d.default.Millis.DAY);
            return f(i, t, n);
          };
        },
        [a.v3("guild_member_count_range")]: e => {
          let { min: t, max: n } = E(e);
          return e => {
            let i = u.default.getMemberCount(e);
            return null != i && f(i, t, n);
          };
        },
        [a.v3("guild_has_feature")]: e => {
          let [[, t]] = e;
          return e => {
            var n;
            let i =
              null !== (n = c.default.getGuild(e)) && void 0 !== n
                ? n
                : l.default.getGuild(e);
            return null != i && t.some(e => i.hasFeature(e));
          };
        },
        [a.v3("guild_hub_types")]: e => {
          let [[, t]] = e;
          return e => {
            var n;
            let i =
              null !== (n = c.default.getGuild(e)) && void 0 !== n
                ? n
                : l.default.getGuild(e);
            return (
              null != i &&
              "number" == typeof i.hubType &&
              t.some(e => i.hubType === e)
            );
          };
        },
        [a.v3("guild_has_vanity_url")]: e => {
          let [[, t]] = e;
          return e => {
            var n;
            let i =
              null !== (n = c.default.getGuild(e)) && void 0 !== n
                ? n
                : l.default.getGuild(e);
            if (null == i) return !1;
            let r = null != i.vanityURLCode;
            return t === r;
          };
        },
        [a.v3("guild_in_range_by_hash")]: e => {
          let t, n;
          for (let [r, s] of e)
            switch (r) {
              case a.v3("hash_key"):
                t = s;
                break;
              case a.v3("target"):
                var i;
                n = null !== (i = parseInt(s)) && void 0 !== i ? i : 0;
            }
          return e => {
            let i = a.v3("".concat(t, ":").concat(e));
            return (i > 0 ? i + i : i >>> 0) % 1e4 < n;
          };
        },
      };
    },
    630915: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isOOPExperimentEnabled: function () {
            return s;
          },
        });
      var i = n("296892");
      let r = (0, i.default)({
        kind: "user",
        id: "2023-08_overlay3_out_of_process_enablement",
        label: "Overlay3 - Out of Process Enablement",
        defaultConfig: { useGlobalOverlay: !1 },
        treatments: [
          { id: 1, label: "Enabled", config: { useGlobalOverlay: !0 } },
        ],
      });
      function s() {
        let e = r.getCurrentConfig(
          { location: "isOOPExperimentEnabled" },
          { autoTrackExposure: !0 }
        );
        return null != e && e.useGlobalOverlay;
      }
    },
    296892: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return d;
          },
        }),
        n("222007");
      var i = n("884691"),
        r = n("261810"),
        s = n("271938"),
        a = n("211470"),
        o = n("789563"),
        l = n("565034");
      function u(e, t, n) {
        return "guild" === e
          ? o.default.getGuildExperimentDescriptor(t, n.guildId)
          : o.default.getUserExperimentDescriptor(t);
      }
      function c(e, t, n, i) {
        var r, s;
        return (null == i ? void 0 : i.aaMode)
          ? e.defaultConfig
          : null !==
                (s =
                  null === (r = n.get(t)) || void 0 === r
                    ? void 0
                    : r.config) && void 0 !== s
            ? s
            : e.defaultConfig;
      }
      function d(e) {
        var t, n;
        let d = new Map();
        d.set(l.ExperimentBuckets.NOT_ELIGIBLE, {
          description: "Not Eligible",
          config: e.defaultConfig,
        }),
          d.set(l.ExperimentBuckets.CONTROL, {
            description: "Control Bucket",
            config: e.defaultConfig,
          }),
          e.treatments.forEach(e => {
            d.set(e.id, {
              description: "Treatment ".concat(e.id, ": ").concat(e.label),
              config: e.config,
            });
          });
        let f =
          ((t = e.kind),
          (n = {
            id: e.id,
            title: e.label,
            description: [...d.values()].map(e => e.description),
            buckets: [...d.keys()],
          }),
          "guild" === t
            ? (0, a.registerGuildExperiment)(n)
            : (0, a.registerUserExperiment)(n));
        function E(e) {
          let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : {},
            n = arguments.length > 2 ? arguments[2] : void 0,
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : null;
          if (
            ((t.exposureType = n
              ? l.ExposureTypes.AUTO_FALLBACK
              : l.ExposureTypes.AUTO),
            (t.excluded = !1),
            null == i)
          ) {
            p(e, t);
            return;
          }
          h(e, t, i);
        }
        function p(t) {
          let n =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : { excluded: !1, exposureType: l.ExposureTypes.MANUAL },
            i = u(e.kind, f.id, t);
          null != i && h(t, n, i);
        }
        function h(e, t, n) {
          if (null != n) {
            var i, r, o, u, c;
            let d = l.ExposureTypes.MANUAL;
            (0, a.trackExposureToExperiment)(f.id, n, {
              location:
                null !== (i = null == e ? void 0 : e.location) && void 0 !== i
                  ? i
                  : "unknown",
              analyticsLocations:
                null !== (r = null == t ? void 0 : t.analyticsLocations) &&
                void 0 !== r
                  ? r
                  : [],
              fingerprint:
                null !==
                  (u =
                    null !== (o = null == t ? void 0 : t.fingerprint) &&
                    void 0 !== o
                      ? o
                      : s.default.getFingerprint()) && void 0 !== u
                  ? u
                  : void 0,
              excluded: (null == t ? void 0 : t.excluded) || !1,
              exposureType:
                null !== (c = null == t ? void 0 : t.exposureType) &&
                void 0 !== c
                  ? c
                  : d,
            });
          }
        }
        function _(t, n) {
          let i =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : {},
            r = null != i.disable && i.disable,
            s = u(e.kind, e.id, t),
            a = null == s || r ? l.ExperimentBuckets.NOT_ELIGIBLE : s.bucket,
            f = null == s ? -1 : s.revision,
            E = c(e, a, d, s);
          function p() {
            let i = u(e.kind, e.id, t),
              s = null == i || r ? l.ExperimentBuckets.NOT_ELIGIBLE : i.bucket,
              o = null == i ? -1 : i.revision;
            (s !== a || f !== o) && (n(c(e, s, d, i), s, o), (a = s), (f = o));
          }
          return (
            n(E, a, f),
            o.default.addReactChangeListener(p),
            () => {
              o.default.removeReactChangeListener(p);
            }
          );
        }
        return {
          useExperiment: function (t) {
            var n, s, a;
            let o =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : { autoTrackExposure: !0 },
              f = null !== (n = o.disable) && void 0 !== n && n,
              p = !1 !== o.autoTrackExposure,
              h = u(e.kind, e.id, t),
              S =
                null == o.trackExposureOptions
                  ? void 0
                  : (0, r.default)(
                      null !== (s = o.trackExposureOptions) && void 0 !== s
                        ? s
                        : {}
                    ),
              m =
                null !== (a = null == h ? void 0 : h.triggerDebuggingEnabled) &&
                void 0 !== a &&
                a,
              [[T, g, I], C] = (0, i.useState)(() => {
                let t =
                  null == h || f ? l.ExperimentBuckets.NOT_ELIGIBLE : h.bucket;
                return [c(e, t, d, h), t, null == h ? -1 : h.revision];
              }),
              v = (0, r.default)(t);
            return (
              (0, i.useEffect)(() => {
                if (!f && (!!p || !!m)) E(v, S, !1 === p);
              }, [f, p, v, S, g, I, m]),
              (0, i.useEffect)(
                () =>
                  _(
                    v,
                    (e, t, n) => {
                      C(i =>
                        i[0] === e && i[1] === t && i[2] === n ? i : [e, t, n]
                      );
                    },
                    { disable: f }
                  ),
                [f, v]
              ),
              T
            );
          },
          subscribe: _,
          trackExposure: p,
          getCurrentConfig: function (t) {
            let n =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : { autoTrackExposure: !0 },
              i = u(e.kind, e.id, t);
            if (null == i || n.disable)
              return c(e, l.ExperimentBuckets.NOT_ELIGIBLE, d, i);
            if (!1 !== n.autoTrackExposure || i.triggerDebuggingEnabled) {
              let e = !1 === n.autoTrackExposure;
              E(t, n.trackExposureOptions, e, i);
            }
            return c(e, i.bucket, d, i);
          },
          definition: e,
          isAAMode: function (t) {
            let n = u(e.kind, e.id, t);
            return !!(null == n ? void 0 : n.aaMode);
          },
        };
      }
    },
    862205: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          createExperiment: function () {
            return i.default;
          },
        });
      var i = n("296892");
    },
    13030: function (e, t, n) {
      "use strict";
      var i, r, s, a;
      n.r(t),
        n.d(t, {
          ExpressionPickerViewType: function () {
            return i;
          },
          CHAT_INPUT_BUTTON_CLASSNAME: function () {
            return o;
          },
          MIN_EXPRESSION_PICKER_WIDTH: function () {
            return l;
          },
          ExpressionPickerWidths: function () {
            return r;
          },
        }),
        ((s = i || (i = {})).EMOJI = "emoji"),
        (s.GIF = "gif"),
        (s.STICKER = "sticker"),
        (s.SOUNDBOARD = "soundboard"),
        (s.CUSTOM_UPLOAD = "custom-upload");
      let o = "expression-picker-chat-input-button",
        l = 498;
      ((a = r || (r = {})).MIN = "min"), (a.MAX = "max");
    },
    733589: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = n("106919").default;
    },
    106919: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        });
      let i = new (class e {
        enterPipMode() {
          return Promise.resolve();
        }
        setEnabled(e) {}
        setSelectedStream(e) {}
        setMirrored(e) {}
        setPipAspectRatio(e, t) {}
        addOnPipModeChangedListener(e) {}
        isEnabled() {
          return !1;
        }
      })();
      var r = i;
    },
    379881: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return E;
          },
        });
      var i = n("446674"),
        r = n("151426"),
        s = n("913144"),
        a = n("374363"),
        o = n("233069"),
        l = n("49111");
      let u = {},
        c = !1;
      function d() {
        var e, t, n;
        (c =
          null !==
            (n =
              null === (e = a.default.settings.favorites) || void 0 === e
                ? void 0
                : e.muted) &&
          void 0 !== n &&
          n),
          (u = {});
        let i =
          null === (t = a.default.settings.favorites) || void 0 === t
            ? void 0
            : t.favoriteChannels;
        if (null == i) return !1;
        for (let e in i) {
          let t = i[e];
          u[e] = {
            id: e,
            nickname: "" !== t.nickname ? t.nickname : null,
            type: t.type,
            order: t.position,
            parentId: "0" !== t.parentId ? t.parentId : null,
          };
        }
      }
      class f extends i.default.Store {
        initialize() {
          this.waitFor(a.default), d(), this.syncWith([a.default], d);
        }
        getFavoriteChannels() {
          return u;
        }
        get favoriteServerMuted() {
          return c;
        }
        isFavorite(e) {
          return null != e && null != u[e];
        }
        getFavorite(e) {
          if (null != e) return u[e];
        }
        getCategoryRecord(e) {
          if (e in u && u[e].type === r.FavoriteChannelType.CATEGORY) {
            var t, n;
            return (
              (t = u[e]),
              (0, o.createChannelRecord)({
                id: t.id,
                name: null !== (n = t.nickname) && void 0 !== n ? n : "",
                type: l.ChannelTypes.GUILD_CATEGORY,
                position: t.order,
                guild_id: l.FAVORITES,
              })
            );
          }
          return null;
        }
        getNickname(e) {
          var t;
          let n = this.getFavorite(e);
          return null !== (t = null == n ? void 0 : n.nickname) && void 0 !== t
            ? t
            : void 0;
        }
      }
      f.displayName = "FavoriteStore";
      var E = new f(s.default, {});
    },
    695838: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          FAVORITES_RAW_GUILD_ID: function () {
            return s;
          },
          FAVORITES_GUILD_RECORD: function () {
            return a;
          },
        });
      var i = n("813006"),
        r = n("49111");
      let s = "373",
        a = new i.default({
          id: s,
          name: "Favorites",
          description: "The place for all your favorite channels!",
          ownerId: "234",
          verificationLevel: r.VerificationLevels.NONE,
          region: "",
          joinedAt: new Date(),
          defaultMessageNotifications: 0,
          mfaLevel: r.MFALevels.NONE,
          explicitContentFilter: 0,
          maxMembers: 5e5,
          nsfwLevel: r.GuildNSFWContentLevel.DEFAULT,
        });
    },
    498139: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useFavoritesServerExperiment: function () {
            return s;
          },
          default: function () {
            return a;
          },
        });
      var i = n("862205");
      let r = (0, i.createExperiment)({
          kind: "user",
          id: "2021-09_favorites_server",
          label: "Favorites Server",
          defaultConfig: {
            favoritesEnabled: !1,
            canShow: !0,
            isFavoritesPerk: !1,
            hasStaffPrivileges: !1,
          },
          treatments: [
            {
              id: 1,
              label: "Favorites v1 - On",
              config: {
                favoritesEnabled: !0,
                canShow: !0,
                isFavoritesPerk: !1,
                hasStaffPrivileges: !0,
              },
            },
            {
              id: 2,
              label: "Favorites v1 - Forced Off",
              config: {
                favoritesEnabled: !1,
                canShow: !1,
                isFavoritesPerk: !1,
                hasStaffPrivileges: !0,
              },
            },
            {
              id: 3,
              label: "Favorites v2",
              config: {
                favoritesEnabled: !0,
                canShow: !0,
                isFavoritesPerk: !0,
                hasStaffPrivileges: !0,
              },
            },
            {
              id: 4,
              label: "Favorites v2 w/o Staff Privileges",
              config: {
                favoritesEnabled: !0,
                canShow: !0,
                isFavoritesPerk: !0,
                hasStaffPrivileges: !1,
              },
            },
          ],
        }),
        s = e => r.useExperiment({ location: e }, { autoTrackExposure: !0 });
      var a = r;
    },
    106682: function (e, t, n) {
      "use strict";
      function i(e, t, n) {
        let i = new n.constructor(n.toJS());
        return (
          (i.position_ = t.order),
          null != t.nickname && (i.name = t.nickname),
          null != t.parentId && t.parentId in e && (i.parent_id = t.parentId),
          i
        );
      }
      n.r(t),
        n.d(t, {
          createFavoritesChannelRecord: function () {
            return i;
          },
        });
    },
    15131: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isFavoritesGuildVisible: function () {
            return d;
          },
          default: function () {
            return f;
          },
        });
      var i = n("917351"),
        r = n.n(i),
        s = n("446674"),
        a = n("42203"),
        o = n("957255"),
        l = n("379881"),
        u = n("498139"),
        c = n("843455");
      function d(e, t, n) {
        let { canShow: i, isFavoritesPerk: s } = u.default.getCurrentConfig(
          { location: "7993a7_1" },
          { autoTrackExposure: !1 }
        );
        if (s) return !0;
        if (!i) return !1;
        let a = e.getFavoriteChannels();
        if (r.isEmpty(a)) return !1;
        let o = Object.keys(a).filter(e => {
          let i = t.getChannel(e);
          return (
            null != i &&
            (!!i.isPrivate() || n.can(c.Permissions.VIEW_CHANNEL, i))
          );
        });
        return !r.isEmpty(o) && !0;
      }
      function f() {
        let { canShow: e, isFavoritesPerk: t } = (0,
          u.useFavoritesServerExperiment)("7993a7_2"),
          n = (0, s.useStateFromStores)(
            [l.default, a.default, o.default],
            () => e && d(l.default, a.default, o.default)
          );
        return !!t || n;
      }
    },
    76393: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return h;
          },
        }),
        n("222007");
      var i = n("446674"),
        r = n("913144"),
        s = n("235660"),
        a = n("800762");
      let o = null,
        l = null,
        u = new Set(),
        c = {},
        d = {},
        f = new Set(),
        E = Object.freeze({});
      class p extends i.default.DeviceSettingsStore {
        initialize(e) {
          null != e && (d = e.lastSelectedDeviceByPlatform),
            this.waitFor(s.default, a.default);
        }
        getUserAgnosticState() {
          return { lastSelectedDeviceByPlatform: d };
        }
        getDevicesForPlatform(e) {
          var t;
          return null !== (t = c[e]) && void 0 !== t ? t : E;
        }
        getLastSelectedDeviceByPlatform(e) {
          return d[e];
        }
        getDevice(e, t) {
          var n;
          return null === (n = c[e]) || void 0 === n ? void 0 : n[t];
        }
        getFetchingDevices(e) {
          return f.has(e);
        }
        getPendingDeviceCommands() {
          return u;
        }
        getRemoteSessionId() {
          return o;
        }
        getAwaitingRemoteSessionInfo() {
          return l;
        }
      }
      (p.displayName = "GameConsoleStore"), (p.persistKey = "GameConsoleStore");
      var h = new p(r.default, {
        REMOTE_SESSION_CONNECT: function (e) {
          let { sessionId: t } = e;
          (o = t), (l = null);
        },
        REMOTE_SESSION_DISCONNECT: function () {
          (o = null), (l = null);
        },
        WAIT_FOR_REMOTE_SESSION: function (e) {
          let {
            sessionType: t,
            nonce: n,
            channelId: i,
            deviceId: r,
            commandId: s,
          } = e;
          l = {
            type: t,
            nonce: n,
            channelId: i,
            startedAt: Date.now(),
            deviceId: r,
            commandId: s,
          };
        },
        GAME_CONSOLE_FETCH_DEVICES_START: function (e) {
          let { platform: t } = e;
          f.add(t);
        },
        GAME_CONSOLE_FETCH_DEVICES_SUCCESS: function (e) {
          let { platform: t, devices: n } = e;
          f.delete(t);
          let i = (c[t] = {}),
            r = {};
          for (let e of n) (i[e.id] = e), d[t] === e.id && (r[t] = e.id);
          d = r;
        },
        GAME_CONSOLE_FETCH_DEVICES_FAIL: function (e) {
          let { platform: t } = e;
          f.delete(t);
        },
        GAME_CONSOLE_SELECT_DEVICE: function (e) {
          let { platform: t, deviceId: n } = e;
          d[t] = n;
        },
      });
    },
    831610: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        }),
        n("781738");
      let i = /\\/g;
      function r(e) {
        return e.replace(i, "/");
      }
    },
    706530: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          StreamIssueReportReasons: function () {
            return s;
          },
          DARWIN_SOUNDSHARE_VERSION: function () {
            return l;
          },
          DARWIN_SCKIT_VERSION: function () {
            return u;
          },
          DARWIN_SCKIT_AUDIO_VERSION: function () {
            return c;
          },
          WINDOWS_SOUNDSHARE_VERSION: function () {
            return d;
          },
          WINDOWS_GRAPHICS_CAPTURE_VERSION: function () {
            return f;
          },
          StreamTypes: function () {
            return a;
          },
          STREAM_NOTIFY_GUILD_MAX_SIZE: function () {
            return E;
          },
        });
      var i,
        r,
        s,
        a,
        o = n("561467");
      ((i = s || (s = {})).BLACK_SCREEN = "BLACK_SCREEN"),
        (i.BLURRY = "BLURRY"),
        (i.LAGGING = "LAGGING"),
        (i.OUT_OF_SYNC = "OUT_OF_SYNC"),
        (i.AUDIO_MISSING = "AUDIO_MISSING"),
        (i.AUDIO_POOR = "AUDIO_POOR"),
        (i.GAME_ISSUE = "GAME_ISSUE"),
        (i.STREAM_STOPPED = "STREAM_STOPPED"),
        (i.NO_ISSUE = "NO_ISSUE"),
        (i.OTHER = "OTHER");
      let l = ">=19.0.0",
        u = ">=22.0.0",
        c = ">=22.0.0",
        d = ">=10.0.17763",
        f = ">=10.0.22000";
      ((r = a || (a = {})).GUILD = "guild"), (r.CALL = "call");
      let E = o.Notifications.StreamNotificationsGuildMaxSize;
    },
    686298: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ApplicationStreamResolutions: function () {
            return i;
          },
          getApplicationResolution: function () {
            return f;
          },
          ApplicationStreamFPS: function () {
            return r;
          },
          ApplicationStreamPresets: function () {
            return s;
          },
          getApplicationFramerate: function () {
            return E;
          },
          ApplicationStreamPresetValues: function () {
            return p;
          },
          ApplicationStreamSettingRequirements: function () {
            return h;
          },
          ApplicationStreamResolutionButtons: function () {
            return S;
          },
          GoLiveDeviceResolutionButtons: function () {
            return m;
          },
          ApplicationStreamResolutionButtonsWithSuffixLabel: function () {
            return g;
          },
          ApplicationStreamFPSButtons: function () {
            return I;
          },
          ApplicationStreamFPSButtonsWithSuffixLabel: function () {
            return C;
          },
        }),
        n("70102");
      var i,
        r,
        s,
        a,
        o,
        l,
        u = n("49111"),
        c = n("646718"),
        d = n("782340");
      function f(e) {
        switch (e) {
          case 480:
            return 480;
          case 720:
            return 720;
          case 1080:
            return 1080;
          case 0:
            return 0;
          default:
            throw Error("Unknown resolution: ".concat(e));
        }
      }
      function E(e) {
        switch (e) {
          case 5:
            return 5;
          case 15:
            return 15;
          case 30:
            return 30;
          case 60:
            return 60;
          default:
            throw Error("Unknown frame rate: ".concat(e));
        }
      }
      ((a = i || (i = {}))[(a.RESOLUTION_480 = 480)] = "RESOLUTION_480"),
        (a[(a.RESOLUTION_720 = 720)] = "RESOLUTION_720"),
        (a[(a.RESOLUTION_1080 = 1080)] = "RESOLUTION_1080"),
        (a[(a.RESOLUTION_1440 = 1440)] = "RESOLUTION_1440"),
        (a[(a.RESOLUTION_SOURCE = 0)] = "RESOLUTION_SOURCE"),
        ((o = r || (r = {}))[(o.FPS_5 = 5)] = "FPS_5"),
        (o[(o.FPS_15 = 15)] = "FPS_15"),
        (o[(o.FPS_30 = 30)] = "FPS_30"),
        (o[(o.FPS_60 = 60)] = "FPS_60"),
        ((l = s || (s = {}))[(l.PRESET_VIDEO = 1)] = "PRESET_VIDEO"),
        (l[(l.PRESET_DOCUMENTS = 2)] = "PRESET_DOCUMENTS"),
        (l[(l.PRESET_CUSTOM = 3)] = "PRESET_CUSTOM");
      let p = {
          2: [
            { resolution: 0, fps: 15 },
            { resolution: 0, fps: 5 },
          ],
          1: [
            { resolution: 1440, fps: 60 },
            { resolution: 1080, fps: 60 },
            { resolution: 720, fps: 60 },
            { resolution: 720, fps: 30 },
          ],
          3: [],
        },
        h = [
          {
            resolution: 0,
            fps: 60,
            quality: c.StreamQualities.HIGH_STREAMING_QUALITY,
          },
          {
            resolution: 0,
            fps: 30,
            quality: c.StreamQualities.HIGH_STREAMING_QUALITY,
          },
          {
            resolution: 0,
            fps: 15,
            quality: c.StreamQualities.HIGH_STREAMING_QUALITY,
          },
          { resolution: 0, fps: 5, preset: 2 },
          {
            resolution: 1440,
            fps: 60,
            guildPremiumTier: u.BoostedGuildTiers.TIER_2,
            quality: c.StreamQualities.MID_STREAMING_QUALITY,
          },
          {
            resolution: 1440,
            fps: 30,
            guildPremiumTier: u.BoostedGuildTiers.TIER_2,
            quality: c.StreamQualities.MID_STREAMING_QUALITY,
          },
          {
            resolution: 1440,
            fps: 15,
            guildPremiumTier: u.BoostedGuildTiers.TIER_2,
            quality: c.StreamQualities.MID_STREAMING_QUALITY,
          },
          {
            resolution: 1080,
            fps: 60,
            guildPremiumTier: u.BoostedGuildTiers.TIER_2,
            quality: c.StreamQualities.MID_STREAMING_QUALITY,
          },
          {
            resolution: 1080,
            fps: 30,
            guildPremiumTier: u.BoostedGuildTiers.TIER_2,
            quality: c.StreamQualities.MID_STREAMING_QUALITY,
          },
          {
            resolution: 1080,
            fps: 15,
            guildPremiumTier: u.BoostedGuildTiers.TIER_2,
            quality: c.StreamQualities.MID_STREAMING_QUALITY,
          },
          {
            resolution: 720,
            fps: 60,
            guildPremiumTier: u.BoostedGuildTiers.TIER_1,
            quality: c.StreamQualities.MID_STREAMING_QUALITY,
          },
          { resolution: 720, fps: 30 },
          { resolution: 720, fps: 15 },
          { resolution: 720, fps: 5 },
          {
            resolution: 480,
            fps: 60,
            guildPremiumTier: u.BoostedGuildTiers.TIER_1,
            quality: c.StreamQualities.MID_STREAMING_QUALITY,
          },
          { resolution: 480, fps: 30 },
          { resolution: 480, fps: 15 },
          { resolution: 480, fps: 5 },
        ];
      function _(e, t) {
        return {
          value: e,
          get label() {
            return null != t ? t() : e;
          },
        };
      }
      let S = [
          _(720),
          _(1080),
          _(1440),
          _(0, () => d.default.Messages.SCREENSHARE_SOURCE),
        ],
        m = [_(720), _(1080), _(1440)],
        T = e => "".concat(e, "p"),
        g = [
          _(480, () => T(480)),
          _(720, () => T(720)),
          _(1080, () => T(1080)),
          _(1440, () => T(1440)),
          _(0, () => d.default.Messages.SCREENSHARE_SOURCE),
        ],
        I = [_(15), _(30), _(60)],
        C = [
          _(15, () =>
            d.default.Messages.STREAM_FPS_OPTION.format({ value: 15 })
          ),
          _(30, () =>
            d.default.Messages.STREAM_FPS_OPTION.format({ value: 30 })
          ),
          _(60, () =>
            d.default.Messages.STREAM_FPS_OPTION.format({ value: 60 })
          ),
        ];
    },
    374014: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isStreamKey: function () {
            return r;
          },
          decodeStreamKey: function () {
            return s;
          },
          encodeStreamKey: function () {
            return a;
          },
        }),
        n("222007"),
        n("70102");
      var i = n("706530");
      function r(e) {
        return (
          null != e &&
          (e.startsWith(i.StreamTypes.GUILD) ||
            e.startsWith(i.StreamTypes.CALL))
        );
      }
      function s(e) {
        let t = e.split(":"),
          n = t[0];
        switch (n) {
          case i.StreamTypes.GUILD: {
            let [e, n, i, r] = t;
            return { streamType: e, guildId: n, channelId: i, ownerId: r };
          }
          case i.StreamTypes.CALL: {
            let [e, n, i] = t;
            return { streamType: e, channelId: n, ownerId: i };
          }
          default:
            throw Error("Unknown stream type ".concat(n));
        }
      }
      function a(e) {
        let { streamType: t, guildId: n, channelId: r, ownerId: s } = e;
        switch (t) {
          case i.StreamTypes.GUILD:
            return [t, n, r, s].join(":");
          case i.StreamTypes.CALL:
            return [t, r, s].join(":");
          default:
            throw Error("Unknown stream type ".concat(t));
        }
      }
    },
    933034: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        });
      var i = n("568307");
      function r(e) {
        let t, n;
        if (null == e) return {};
        let r = e.sourcePid;
        if (null != r) {
          let e = i.default.getGameForPID(r);
          (t = null == e ? void 0 : e.name), (n = null == e ? void 0 : e.id);
        }
        return {
          soundshare_session: e.soundshareSession,
          share_game_name: t,
          share_game_id: n,
        };
      }
    },
    756898: function (e, t, n) {
      "use strict";
      function i(e, t) {
        return null != t && e.startsWith("window:".concat(t));
      }
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
    },
    681937: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getAutomodQuarantinedProfileFlags: function () {
            return a;
          },
          getAutomodQuarantinedGuildMemberFlags: function () {
            return o;
          },
          hasAutomodQuarantinedProfile: function () {
            return l;
          },
        }),
        n("222007"),
        n("808653"),
        n("424973"),
        n("702976");
      var i = n("568734"),
        r = n("657944");
      let s = [
        r.GuildMemberFlags.AUTOMOD_QUARANTINED_BIO,
        r.GuildMemberFlags.AUTOMOD_QUARANTINED_USERNAME_OR_GUILD_NICKNAME,
      ];
      function a(e) {
        if (null == e) return new Set();
        let t = new Set(
          s.reduce(
            (t, n) => ((0, i.hasFlag)(null != e ? e : 0, n) && t.push(n), t),
            []
          )
        );
        return t;
      }
      function o(e) {
        return null == e ? new Set() : a(e.flags);
      }
      function l(e) {
        return (
          null != e &&
          null != e.flags &&
          s.some(t => {
            var n;
            return (0, i.hasFlag)(
              null !== (n = e.flags) && void 0 !== n ? n : 0,
              t
            );
          })
        );
      }
    },
    509: function (e, t, n) {
      "use strict";
      function i(e) {
        return null != e && new Date(e) > new Date();
      }
      function r(e) {
        return i(null == e ? void 0 : e.communicationDisabledUntil);
      }
      n.r(t),
        n.d(t, {
          isCommunicationDisabled: function () {
            return i;
          },
          isMemberCommunicationDisabled: function () {
            return r;
          },
        });
    },
    903639: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          DisableCommunicationDuration: function () {
            return r;
          },
          getFriendlyDurationString: function () {
            return l;
          },
          getDisableCommunicationDurationOptions: function () {
            return u;
          },
          GUILD_COMMUNICATION_DISABLED_RESOURCE_LINK: function () {
            return c;
          },
          DISMISSED_COMMUNICATION_DISABLED_NOTIFICATION_GUILDS_KEY:
            function () {
              return d;
            },
          SET_COMMUNICATION_DISABLED_MODAL_NAME: function () {
            return f;
          },
          CLEAR_COMMUNICATION_DISABLED_MODAL_NAME: function () {
            return E;
          },
          MAX_REASON_LENGTH: function () {
            return p;
          },
        });
      var i,
        r,
        s = n("701909"),
        a = n("49111"),
        o = n("782340");
      function l(e) {
        switch (e) {
          case 60:
            return o.default.Messages.DURATION_SECS.format({ secs: 60 });
          case 300:
            return o.default.Messages.DURATION_MINS.format({ mins: 5 });
          case 600:
            return o.default.Messages.DURATION_MINS.format({ mins: 10 });
          case 3600:
            return o.default.Messages.DURATION_HOURS.format({ hours: 1 });
          case 86400:
            return o.default.Messages.DURATION_DAYS.format({ days: 1 });
          case 604800:
            return o.default.Messages.DURATION_WEEKS.format({ weeks: 1 });
          default:
            return;
        }
      }
      ((i = r || (r = {}))[(i.DURATION_60_SEC = 60)] = "DURATION_60_SEC"),
        (i[(i.DURATION_5_MIN = 300)] = "DURATION_5_MIN"),
        (i[(i.DURATION_10_MIN = 600)] = "DURATION_10_MIN"),
        (i[(i.DURATION_1_HOUR = 3600)] = "DURATION_1_HOUR"),
        (i[(i.DURATION_1_DAY = 86400)] = "DURATION_1_DAY"),
        (i[(i.DURATION_1_WEEK = 604800)] = "DURATION_1_WEEK");
      let u = () =>
          Object.keys(r)
            .filter(e => isNaN(Number(e)))
            .map(e => {
              var t;
              let n = null !== (t = l(r[e])) && void 0 !== t ? t : "";
              return { label: n, value: r[e] };
            }),
        c = s.default.getArticleURL(
          a.HelpdeskArticles.DISABLE_GUILD_COMMUNICATION
        ),
        d = "GuildCommunicationDisabledDismissedGuilds",
        f = "Set Communication Disabled Modal",
        E = "Clear Communication Disabled Modal",
        p = 512;
    },
    564568: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useCommunicationDisabledNoticeStore: function () {
            return c;
          },
          clearCommunicationDisabledNotice: function () {
            return d;
          },
        }),
        n("222007");
      var i = n("308503"),
        r = n("16470"),
        s = n("861907"),
        a = n("95410"),
        o = n("903639");
      let l = (0, s.default)((e, t) => ({
          notificationDismissedInGuilds: (function () {
            var e;
            let t =
              null !==
                (e = a.default.get(
                  o.DISMISSED_COMMUNICATION_DISABLED_NOTIFICATION_GUILDS_KEY
                )) && void 0 !== e
                ? e
                : [];
            return new Set(t);
          })(),
          dismissNotification: n => {
            let i = t().notificationDismissedInGuilds;
            i.add(n),
              a.default.set(
                o.DISMISSED_COMMUNICATION_DISABLED_NOTIFICATION_GUILDS_KEY,
                i
              ),
              e({ notificationDismissedInGuilds: i });
          },
          resetNotification: n => {
            let i = t().notificationDismissedInGuilds;
            i.has(n) &&
              (i.delete(n),
              a.default.set(
                o.DISMISSED_COMMUNICATION_DISABLED_NOTIFICATION_GUILDS_KEY,
                i
              ),
              e({ notificationDismissedInGuilds: i }));
          },
        })),
        u = (0, i.default)(l);
      function c(e) {
        let [t, n] = u(
          e => [e.notificationDismissedInGuilds, e.dismissNotification],
          r.default
        );
        return [!t.has(e), n];
      }
      function d(e) {
        return l.getState().resetNotification(e);
      }
    },
    560208: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getMessagesFromGuildFeedFetch: function () {
            return a;
          },
          getThreadsFromGuildFeedFetch: function () {
            return o;
          },
        }),
        n("222007"),
        n("834022"),
        n("881410"),
        n("424973");
      var i = n("611221"),
        r = n("449008");
      function s(e) {
        let t = e.children.map(e => s(e));
        return [e.messages.map(e => e.message), ...t].flat();
      }
      function a(e) {
        return e.results.items
          .flatMap(e => {
            switch (e.type) {
              case i.GuildFeedItemTypes.MESSAGE:
              case i.GuildFeedItemTypes.FORUM_POST:
                return [e.message];
              case i.GuildFeedItemTypes.MESSAGE_BUNDLE:
                return e.messages.map(e => e.message);
              case i.GuildFeedItemTypes.CONVERSATION:
                return s(e.root);
              default:
                (0, r.assertNever)(e);
            }
          })
          .filter(r.isNotNullish);
      }
      function o(e) {
        return e.results.items
          .flatMap(e => {
            let t = [];
            switch (e.type) {
              case i.GuildFeedItemTypes.MESSAGE:
                t.push(e.message.thread);
                break;
              case i.GuildFeedItemTypes.FORUM_POST:
                t.push(e.message.thread, e.thread);
                break;
              case i.GuildFeedItemTypes.MESSAGE_BUNDLE:
                t.push(...e.messages.map(e => e.message.thread));
                break;
              case i.GuildFeedItemTypes.CONVERSATION:
                t.push(...s(e.root).map(e => e.thread));
                break;
              default:
                (0, r.assertNever)(e);
            }
            return t;
          })
          .filter(r.isNotNullish);
      }
    },
    657944: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          GuildMemberFlags: function () {
            return i;
          },
        }),
        ((r = i || (i = {}))[(r.DID_REJOIN = 1)] = "DID_REJOIN"),
        (r[(r.COMPLETED_ONBOARDING = 2)] = "COMPLETED_ONBOARDING"),
        (r[(r.BYPASSES_VERIFICATION = 4)] = "BYPASSES_VERIFICATION"),
        (r[(r.STARTED_ONBOARDING = 8)] = "STARTED_ONBOARDING"),
        (r[(r.IS_GUEST = 16)] = "IS_GUEST"),
        (r[(r.STARTED_HOME_ACTIONS = 32)] = "STARTED_HOME_ACTIONS"),
        (r[(r.COMPLETED_HOME_ACTIONS = 64)] = "COMPLETED_HOME_ACTIONS"),
        (r[(r.AUTOMOD_QUARANTINED_USERNAME_OR_GUILD_NICKNAME = 128)] =
          "AUTOMOD_QUARANTINED_USERNAME_OR_GUILD_NICKNAME"),
        (r[(r.AUTOMOD_QUARANTINED_BIO = 256)] = "AUTOMOD_QUARANTINED_BIO");
    },
    591023: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isActionedApplicationStatus: function () {
            return r;
          },
          isSubmittedApplicationStatus: function () {
            return s;
          },
          isApprovedAndAcked: function () {
            return a;
          },
          isActionedAndNotAcked: function () {
            return o;
          },
        });
      var i = n("567054");
      function r(e) {
        return (
          e === i.GuildJoinRequestApplicationStatuses.APPROVED ||
          e === i.GuildJoinRequestApplicationStatuses.REJECTED
        );
      }
      function s(e) {
        return e === i.GuildJoinRequestApplicationStatuses.SUBMITTED;
      }
      function a(e) {
        return (
          e.applicationStatus ===
            i.GuildJoinRequestApplicationStatuses.APPROVED && null != e.lastSeen
        );
      }
      function o(e) {
        return r(e.applicationStatus) && null == e.lastSeen;
      }
    },
    567054: function (e, t, n) {
      "use strict";
      var i, r, s, a, o, l, u, c;
      n.r(t),
        n.d(t, {
          MAX_RESULTS_PER_PAGE: function () {
            return d;
          },
          MAX_VISIBLE_PAGES: function () {
            return f;
          },
          VerificationFormFieldTypes: function () {
            return i;
          },
          GuildJoinRequestSortOrders: function () {
            return s;
          },
          GuildJoinRequestApplicationStatuses: function () {
            return a;
          },
          isTermsFormField: function () {
            return E;
          },
        });
      let d = 25,
        f = 4;
      function E(e) {
        return null != e && "TERMS" === e.field_type;
      }
      ((o = i || (i = {})).TERMS = "TERMS"),
        (o.TEXT_INPUT = "TEXT_INPUT"),
        (o.PARAGRAPH = "PARAGRAPH"),
        (o.MULTIPLE_CHOICE = "MULTIPLE_CHOICE"),
        (o.VERIFICATION = "VERIFICATION"),
        ((l = r || (r = {})).EMAIL = "email"),
        (l.PHONE = "phone"),
        ((u = s || (s = {})).TIMESTAMP_DESC = "NEWEST"),
        (u.TIMESTAMP_ASC = "OLDEST"),
        ((c = a || (a = {})).STARTED = "STARTED"),
        (c.SUBMITTED = "SUBMITTED"),
        (c.REJECTED = "REJECTED"),
        (c.APPROVED = "APPROVED");
    },
    982527: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          joinRequestFromServer: function () {
            return d;
          },
          default: function () {
            return p;
          },
        });
      var i = n("446674"),
        r = n("913144"),
        s = n("813006"),
        a = n("697218"),
        o = n("591023");
      let l = {},
        u = !1,
        c = {};
      function d(e) {
        return {
          id: e.id,
          guildId: e.guild_id,
          userId: e.user_id,
          user: e.user,
          createdAt: e.created_at,
          formResponses: e.form_responses,
          rejectionReason: e.rejection_reason,
          applicationStatus: e.application_status,
          actionedAt: e.actioned_at,
          actionedByUser: e.actioned_by_user,
          lastSeen: e.last_seen,
        };
      }
      function f(e) {
        let { guildId: t, request: n } = e;
        if (null == n) return;
        let i = d(n),
          r = a.default.getCurrentUser();
        if (null != r && i.userId !== r.id) return !1;
        (0, o.isApprovedAndAcked)(i) ? delete l[t] : (l[t] = i);
      }
      class E extends i.default.Store {
        getRequest(e) {
          return l[e];
        }
        computeGuildIds() {
          return Object.values(l)
            .map(e => (null == e ? void 0 : e.guildId))
            .filter(e => null != e);
        }
        getJoinRequestGuild(e) {
          return null != c[e] ? new s.default(c[e]) : null;
        }
        get hasFetchedRequestToJoinGuilds() {
          return u;
        }
      }
      E.displayName = "UserGuildJoinRequestStore";
      var p = new E(r.default, {
        CONNECTION_OPEN: function (e) {
          let { guildJoinRequests: t } = e;
          (u = !1),
            (c = {}),
            (l = {}),
            t.forEach(e => {
              let { guild_id: t } = e;
              null != t && (l[t] = d(e));
            });
        },
        GUILD_JOIN_REQUEST_UPDATE: f,
        GUILD_JOIN_REQUEST_CREATE: f,
        USER_GUILD_JOIN_REQUEST_UPDATE: function (e) {
          let { request: t, guildId: n } = e;
          if (null == t) {
            delete l[n];
            return;
          }
          let i = d(t);
          (0, o.isApprovedAndAcked)(i) ? delete l[n] : (l[n] = i);
        },
        GUILD_DELETE: function (e) {
          let { guild: t } = e;
          delete l[t.id];
        },
        USER_JOIN_REQUEST_GUILDS_FETCH: function (e) {
          let { guilds: t } = e;
          (u = !0),
            t.forEach(e => {
              let { id: t, name: n, features: i, icon: r } = e;
              c[t] = { id: t, name: n, features: i, icon: r };
            });
        },
        MEMBER_VERIFICATION_FORM_UPDATE: function (e) {
          let { form: t, guildId: n } = e;
          if ((null == t ? void 0 : t.guild) != null) {
            let { id: e, name: i, icon: r, features: s } = t.guild;
            c[n] = { id: e, name: i, icon: r, features: null != s ? s : [] };
          }
        },
        INVITE_ACCEPT_SUCCESS: function (e) {
          let { invite: t } = e,
            { guild: n, join_request: i } = t;
          if (null != n && null != i) {
            let { guild_id: e } = i;
            l[e] = d(i);
            let { id: t, name: r, icon: s, features: a } = n;
            c[t] = { id: t, name: r, icon: s, features: null != a ? a : [] };
          }
        },
        ACK_APPROVED_GUILD_JOIN_REQUEST: function (e) {
          let { guildId: t } = e;
          delete l[t];
        },
      });
    },
    562980: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MemberSafetyPagePermissions: function () {
            return s;
          },
        });
      var i = n("316693"),
        r = n("49111");
      let s = i.default.combine(
        r.Permissions.ADMINISTRATOR,
        r.Permissions.MANAGE_GUILD,
        r.Permissions.BAN_MEMBERS,
        r.Permissions.KICK_MEMBERS,
        r.Permissions.MODERATE_MEMBERS,
        r.Permissions.MANAGE_ROLES,
        r.Permissions.MANAGE_NICKNAMES
      );
    },
    648747: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          canChannelBeDefault: function () {
            return o;
          },
        }),
        n("446674");
      var i = n("203288"),
        r = n("42203"),
        s = n("991170"),
        a = n("49111");
      function o(e, t) {
        return (
          i.default.isChannelGated(e, t) ||
          s.default.canEveryoneRole(
            a.Permissions.VIEW_CHANNEL,
            r.default.getChannel(t)
          )
        );
      }
    },
    471706: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          GuildOnboardingStatus: function () {
            return r;
          },
          isOnboarding: function () {
            return l;
          },
          default: function () {
            return f;
          },
        });
      var i,
        r,
        s = n("446674"),
        a = n("913144"),
        o = n("49111");
      function l(e) {
        return null != e && ["started", "ready"].includes(e);
      }
      ((i = r || (r = {})).STARTED = "started"),
        (i.READY = "ready"),
        (i.COMPLETED = "completed"),
        (i.NOT_APPLICABLE = "not_applicable");
      let u = {},
        c = {};
      class d extends s.default.Store {
        shouldShowOnboarding(e) {
          if (e === o.ME || e === o.FAVORITES) return !1;
          let t = u[e];
          return !!l(t) || !1;
        }
        getOnboardingStatus(e) {
          return u[e];
        }
        resetOnboardingStatus(e) {
          (u[e] = "started"), (c[e] = "cover");
        }
        getCurrentOnboardingStep(e) {
          var t;
          return null !== (t = c[e]) && void 0 !== t ? t : "cover";
        }
      }
      d.displayName = "GuildOnboardingStore";
      var f = new d(a.default, {
        LOGOUT: function () {
          (u = {}), (c = {});
        },
        GUILD_DELETE: function (e) {
          let { guild: t } = e;
          delete u[t.id], delete c[t.id];
        },
        GUILD_ONBOARDING_START: function (e) {
          let { guildId: t } = e;
          u[t] = "started";
        },
        GUILD_ONBOARDING_PROMPTS_FETCH_SUCCESS: function (e) {
          let { guildId: t, enabled: n } = e;
          if ("started" !== u[t]) return !1;
          n ? (u[t] = "ready") : (u[t] = "not_applicable");
        },
        GUILD_ONBOARDING_PROMPTS_FETCH_FAILURE: function (e) {
          let { guildId: t } = e;
          u[t] = "not_applicable";
        },
        GUILD_ONBOARDING_COMPLETE: function (e) {
          let { guildId: t } = e;
          u[t] = "completed";
        },
        GUILD_ONBOARDING_SET_STEP: function (e) {
          let { guildId: t, step: n } = e;
          c[t] = n;
        },
        CONNECTION_OPEN: function () {
          c = {};
        },
      });
    },
    380710: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useGuildOnboardingSettingsAvailable: function () {
            return _;
          },
          isGuildOnboardingSettingsAvailable: function () {
            return S;
          },
          isBlockedByOnboarding: function () {
            return m;
          },
          getChannelCoverageForOnboarding: function () {
            return g;
          },
          useChannelCoverageForOnboarding: function () {
            return I;
          },
          isChattableChannelId: function () {
            return C;
          },
          isChattableChannel: function () {
            return v;
          },
          useIsChattableChannel: function () {
            return A;
          },
          getMinimumSetOfDefaultChannelIds: function () {
            return R;
          },
          getChattableDefaultChannels: function () {
            return D;
          },
          useChattableDefaultChannels: function () {
            return y;
          },
          getSelectedRoleIds: function () {
            return P;
          },
          getSelectedChannelIds: function () {
            return L;
          },
        }),
        n("702976"),
        n("222007"),
        n("808653"),
        n("424973"),
        n("834022");
      var i = n("446674"),
        r = n("656038"),
        s = n("42203"),
        a = n("923959"),
        o = n("305961"),
        l = n("957255"),
        u = n("568734"),
        c = n("449008"),
        d = n("991170"),
        f = n("648747"),
        E = n("49111"),
        p = n("657944");
      let h = new Date(16824888e5);
      function _(e) {
        let t = (0, i.useStateFromStores)([o.default], () =>
            o.default.getGuild(e)
          ),
          n = !!(null == t ? void 0 : t.hasFeature(E.GuildFeatures.COMMUNITY)),
          r = l.default.can(E.Permissions.MANAGE_GUILD, t),
          s = l.default.can(E.Permissions.MANAGE_ROLES, t);
        return n && r && s;
      }
      function S(e) {
        let t = o.default.getGuild(e),
          n = !!(null == t ? void 0 : t.hasFeature(E.GuildFeatures.COMMUNITY)),
          i = l.default.can(E.Permissions.MANAGE_GUILD, t),
          r = l.default.can(E.Permissions.MANAGE_ROLES, t);
        return n && i && r;
      }
      function m(e, t) {
        var n;
        if (
          null == e ||
          !e.hasFeature(E.GuildFeatures.GUILD_ONBOARDING) ||
          null == t ||
          null == t.joinedAt ||
          new Date(t.joinedAt) < h
        )
          return !1;
        let i = null !== (n = t.flags) && void 0 !== n ? n : 0;
        return (
          u.hasFlag(i, p.GuildMemberFlags.STARTED_ONBOARDING) &&
          !u.hasFlag(i, p.GuildMemberFlags.COMPLETED_ONBOARDING)
        );
      }
      function T(e, t, n) {
        let i = new Set();
        e.forEach(e => {
          e.options.forEach(e => {
            var t;
            null == e ||
              null === (t = e.channelIds) ||
              void 0 === t ||
              t.forEach(e => {
                i.add(e);
              });
          });
        }),
          t.forEach(e => i.add(e));
        let s = n.filter(
            e => !e.isCategory() && !e.isThread() && !(0, r.default)(e)
          ),
          a = s.filter(
            e => i.has(e.id) || (null != e.parent_id && i.has(e.parent_id))
          ),
          o = s.filter(
            e => !i.has(e.id) && !(null != e.parent_id && i.has(e.parent_id))
          );
        return [a, o];
      }
      function g(e, t, n) {
        let i = a.default.getChannels(e);
        return T(
          t,
          n,
          i[(0, a.GUILD_SELECTABLE_CHANNELS_KEY)].map(e => {
            let { channel: t } = e;
            return t;
          })
        );
      }
      function I(e, t, n) {
        let r = (0, i.useStateFromStores)([a.default], () =>
          a.default.getChannels(e)
        );
        return T(
          t,
          n,
          r[(0, a.GUILD_SELECTABLE_CHANNELS_KEY)].map(e => {
            let { channel: t } = e;
            return t;
          })
        );
      }
      function C(e) {
        let t = s.default.getChannel(e);
        return v(t);
      }
      function v(e) {
        return (
          !!(null != e && (0, f.canChannelBeDefault)(e.guild_id, e.id)) &&
          (e.isForumChannel()
            ? d.default.canEveryoneRole(
                E.Permissions.SEND_MESSAGES_IN_THREADS,
                e
              )
            : d.default.canEveryoneRole(E.Permissions.SEND_MESSAGES, e))
        );
      }
      function A(e) {
        let t = (0, i.useStateFromStores)([s.default], () =>
          s.default.getChannel(e)
        );
        return (0, c.isNotNullish)(t) && v(t);
      }
      function R(e, t, n) {
        let i =
            arguments.length > 3 && void 0 !== arguments[3]
              ? arguments[3]
              : () => !0,
          r = O(e, t)
            .map(e => e.id)
            .filter(i);
        return (
          n.forEach(t => {
            var n, s;
            if (!t.required) return;
            let a = O(
                e,
                null !==
                  (s =
                    null === (n = t.options[0]) || void 0 === n
                      ? void 0
                      : n.channelIds) && void 0 !== s
                  ? s
                  : []
              ).map(e => e.id),
              o = t.options.reduce((t, n) => {
                if (null == n.channelIds) return [];
                let s = O(e, n.channelIds),
                  a = s.map(e => e.id).filter(e => i(e) && !r.includes(e));
                return a.length < t.length ? a : t;
              }, a);
            r.push(...o);
          }),
          r
        );
      }
      function N(e, t) {
        let n = e.filter(e => {
          let n = t.find(t => {
            let { channel: n } = t;
            return n.id === e;
          });
          return v(null == n ? void 0 : n.channel);
        });
        return n;
      }
      function O(e, t) {
        let n = a.default.getChannels(e),
          i = n[a.GUILD_SELECTABLE_CHANNELS_KEY];
        return i
          .filter(e => {
            let { channel: n } = e;
            return (
              (0, f.canChannelBeDefault)(n.guild_id, n.id) &&
              ((t.includes(n.id) && !n.isCategory()) ||
                (!n.isThread() &&
                  null != n.parent_id &&
                  t.includes(n.parent_id)))
            );
          })
          .map(e => {
            let { channel: t } = e;
            return t;
          });
      }
      function D(e, t) {
        let n = O(e, t),
          i = a.default.getChannels(e),
          r = i[a.GUILD_SELECTABLE_CHANNELS_KEY],
          s = N(
            n.map(e => {
              let { id: t } = e;
              return t;
            }),
            r
          );
        return [s, n];
      }
      function y(e, t) {
        let n = (function (e, t) {
            let n = (0, i.useStateFromStores)([a.default], () =>
                a.default.getChannels(e)
              ),
              r = n[a.GUILD_SELECTABLE_CHANNELS_KEY];
            return r
              .filter(e => {
                let { channel: n } = e;
                return (
                  (0, f.canChannelBeDefault)(n.guild_id, n.id) &&
                  ((t.includes(n.id) && !n.isCategory()) ||
                    (!n.isThread() &&
                      null != n.parent_id &&
                      t.includes(n.parent_id)))
                );
              })
              .map(e => {
                let { channel: t } = e;
                return t;
              });
          })(e, t),
          r = (0, i.useStateFromStores)([a.default], () =>
            a.default.getChannels(e)
          ),
          s = r[a.GUILD_SELECTABLE_CHANNELS_KEY],
          o = N(
            n.map(e => {
              let { id: t } = e;
              return t;
            }),
            s
          );
        return [o, n];
      }
      function P(e) {
        return new Set(
          e
            .map(e => e.roleIds)
            .flat()
            .filter(c.isNotNullish)
        );
      }
      function L(e) {
        return new Set(
          e
            .map(e => e.channelIds)
            .flat()
            .filter(c.isNotNullish)
        );
      }
    },
    698882: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          NO_SETTINGS: function () {
            return s;
          },
          default: function () {
            return E;
          },
        }),
        n("222007");
      var i = n("446674"),
        r = n("913144");
      let s = { enabled: !1 },
        a = [],
        o = {},
        l = new Set(),
        u = {};
      function c(e) {
        var t;
        let n =
          null === (t = o[e]) || void 0 === t ? void 0 : t.newMemberActions;
        return null == n ? null : ((u[e] = n), u[e]);
      }
      function d(e) {
        let { homeSettings: t, guildId: n } = e;
        null != n && (null == t && (o[n] = s), (o[n] = t), c(n), l.delete(n));
      }
      class f extends i.default.Store {
        getSettings(e) {
          var t;
          return null == e ? null : null !== (t = o[e]) && void 0 !== t ? t : s;
        }
        getNewMemberActions(e) {
          var t;
          return null == e ||
            (null === (t = this.getSettings(e)) || void 0 === t
              ? void 0
              : t.newMemberActions) == null
            ? null
            : null == u[e]
              ? c(e)
              : u[e];
        }
        getActionForChannel(e, t) {
          var n;
          let i = this.getSettings(e);
          return null == i
            ? null
            : (null !== (n = i.newMemberActions) && void 0 !== n ? n : []).find(
                e => e.channelId === t
              );
        }
        hasMemberAction(e, t) {
          return null != this.getActionForChannel(e, t);
        }
        getResourceChannels(e) {
          var t, n;
          return null !==
            (n =
              null === (t = o[e]) || void 0 === t
                ? void 0
                : t.resourceChannels) && void 0 !== n
            ? n
            : a;
        }
        getResourceForChannel(e, t) {
          if (null == e) return null;
          let n = this.getResourceChannels(e);
          return n === a ? null : n.find(e => e.channelId === t);
        }
        getIsLoading(e) {
          return null != e && l.has(e);
        }
        getWelcomeMessage(e) {
          var t;
          if (null != e)
            return null === (t = o[e]) || void 0 === t
              ? void 0
              : t.welcomeMessage;
        }
        hasSettings(e) {
          return null != e && null != o[e];
        }
        getEnabled(e) {
          var t, n;
          return (
            null != e &&
            null !==
              (n = null === (t = o[e]) || void 0 === t ? void 0 : t.enabled) &&
            void 0 !== n &&
            n
          );
        }
        getNewMemberAction(e, t) {
          var n, i, r;
          return null == e || null == t
            ? null
            : null !==
                  (r =
                    null === (i = o[e]) || void 0 === i
                      ? void 0
                      : null === (n = i.newMemberActions) || void 0 === n
                        ? void 0
                        : n.find(e => e.channelId === t)) && void 0 !== r
              ? r
              : null;
        }
      }
      f.displayName = "GuildOnboardingHomeSettingsStore";
      var E = new f(r.default, {
        GUILD_HOME_SETTINGS_FETCH_START: function (e) {
          let { guildId: t } = e;
          l.add(t);
        },
        GUILD_HOME_SETTINGS_FETCH_SUCCESS: d,
        GUILD_HOME_SETTINGS_FETCH_FAIL: function (e) {
          let { guildId: t } = e;
          l.delete(t);
        },
        GUILD_HOME_SETTINGS_UPDATE_SUCCESS: d,
        GUILD_HOME_SETTINGS_TOGGLE_ENABLED: function (e) {
          let { guildId: t, enabled: n } = e,
            i = o[t];
          if (null == i) return !1;
          i.enabled = n;
        },
        GUILD_RESOURCE_CHANNEL_UPDATE_SUCCESS: function (e) {
          var t;
          let { guildId: n, resourceChannel: i } = e,
            r = o[n];
          if (null == r) return !1;
          r.resourceChannels =
            null !== (t = r.resourceChannels) && void 0 !== t ? t : [];
          let s = r.resourceChannels.findIndex(
            e => e.channelId === i.channelId
          );
          return -1 !== s && ((r.resourceChannels[s] = { ...i }), !0);
        },
        GUILD_NEW_MEMBER_ACTION_UPDATE_SUCCESS: function (e) {
          var t;
          let { guildId: n, action: i } = e,
            r = o[n];
          if (null == r) return !1;
          r.newMemberActions =
            null !== (t = r.newMemberActions) && void 0 !== t ? t : [];
          let s = r.newMemberActions.findIndex(
            e => e.channelId === i.channelId
          );
          return -1 !== s && ((r.newMemberActions[s] = { ...i }), !0);
        },
        GUILD_DELETE: function (e) {
          let { guild: t } = e;
          if (null == o[t.id]) return !1;
          delete o[t.id], delete u[t.id];
        },
      });
    },
    233706: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useOnboardingHomeAdminExperiment: function () {
            return a;
          },
          getOnboardingHomeAdminExperiment: function () {
            return o;
          },
          useOptionalOnboardingHomeAdminExperiment: function () {
            return l;
          },
          getOptionalOnboardingHomeAdminExperiment: function () {
            return u;
          },
          default: function () {
            return c;
          },
        });
      var i = n("862205");
      let r = (0, i.createExperiment)({
          kind: "guild",
          id: "2023-02_onboarding_home_admin",
          label: "[ADMIN] Home as a community onboarding surface",
          defaultConfig: { homeSettingsEnabled: !1 },
          treatments: [
            {
              id: 1,
              label: "Show the Onboarding Version of Home in Admin Settings",
              config: { homeSettingsEnabled: !0 },
            },
          ],
        }),
        s = (0, i.createExperiment)({
          kind: "guild",
          id: "2023-05_optional_onboarding_home_admin",
          label: "[ADMIN] Make server guide optional",
          defaultConfig: { serverGuideOptional: !1 },
          treatments: [
            { id: 1, label: "Optional", config: { serverGuideOptional: !0 } },
          ],
        });
      function a(e) {
        return r.useExperiment(
          { guildId: e, location: "259c05_1" },
          { autoTrackExposure: !0 }
        );
      }
      function o(e) {
        return r.getCurrentConfig({ guildId: e, location: "259c05_2" });
      }
      function l(e) {
        return s.useExperiment(
          { guildId: e, location: "259c05_3" },
          { autoTrackExposure: !0 }
        );
      }
      function u(e) {
        return s.getCurrentConfig({ guildId: e, location: "259c05_4" });
      }
      var c = r;
    },
    6263: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useOnboardingHomeExperiment: function () {
            return o;
          },
          default: function () {
            return l;
          },
        });
      var i = n("862205"),
        r = n("49111");
      let s = new Date(168264e7),
        a = (0, i.createExperiment)({
          kind: "user",
          id: "2023-02_onboarding_home",
          label: "Home as a community onboarding surface",
          defaultConfig: { showOnboardingHome: !1, enableDevItems: !1 },
          treatments: [
            {
              id: 1,
              label: "Show the Onboarding Version of Home",
              config: { showOnboardingHome: !0, enableDevItems: !1 },
            },
            {
              id: 2,
              label: "Onboarding Home DEV",
              config: { showOnboardingHome: !0, enableDevItems: !0 },
            },
            {
              id: 3,
              label: "Show the Onboarding Version of Home",
              config: { showOnboardingHome: !0, enableDevItems: !1 },
            },
          ],
        });
      function o(e, t) {
        var n;
        let i =
            __OVERLAY__ ||
            null == e ||
            e.id === r.ME ||
            e.id === r.FAVORITES ||
            !e.hasFeature(r.GuildFeatures.COMMUNITY) ||
            !e.hasFeature(r.GuildFeatures.GUILD_SERVER_GUIDE) ||
            !e.hasFeature(r.GuildFeatures.GUILD_ONBOARDING),
          o = new Date(
            null !== (n = null == t ? void 0 : t.joinedAt) && void 0 !== n
              ? n
              : 0
          );
        return a.useExperiment(
          { location: "d98574_1" },
          { disable: i, autoTrackExposure: null != t && o >= s }
        );
      }
      var l = a;
    },
    290886: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useCanSeeOnboardingHome: function () {
            return m;
          },
          canSeeOnboardingHome: function () {
            return T;
          },
        }),
        n("222007");
      var i = n("917351"),
        r = n.n(i),
        s = n("65597"),
        a = n("380710"),
        o = n("38654"),
        l = n("42203"),
        u = n("26989"),
        c = n("305961"),
        d = n("698882"),
        f = n("233706"),
        E = n("6263"),
        p = n("363176"),
        h = n("49111"),
        _ = n("724210");
      function S(e) {
        var t;
        let n = e.id,
          { homeSettingsEnabled: i } = f.default.getCurrentConfig(
            { guildId: n, location: "61eef9_1" },
            { autoTrackExposure: !1 }
          ),
          r =
            (null !== (t = d.default.getNewMemberActions(n)) && void 0 !== t
              ? t
              : []
            ).length > 0,
          s = d.default.getEnabled(n);
        return (
          i &&
          r &&
          e.hasFeature(h.GuildFeatures.COMMUNITY) &&
          !(e.hasFeature(h.GuildFeatures.GUILD_ONBOARDING) && !s)
        );
      }
      function m(e) {
        let t = (0, s.default)([c.default], () => c.default.getGuild(e)),
          n = (0, s.default)([u.default], () => u.default.getSelfMember(e)),
          { showOnboardingHome: i } = (0, E.useOnboardingHomeExperiment)(t, n),
          { homeSettingsEnabled: d } = f.default.useExperiment(
            { guildId: e, location: "61eef9_2" },
            { autoTrackExposure: !1 }
          ),
          m = (0, s.default)([o.default], () =>
            o.default.isFullServerPreview(e)
          ),
          T = (0, p.default)(e),
          g = (0, s.default)([l.default], () =>
            l.default.getMutableGuildChannelsForGuild(e)
          );
        if (null == t || __OVERLAY__ || e === h.ME || e === h.FAVORITES)
          return !1;
        if (m) return S(t);
        let I =
            d &&
            (0, a.isGuildOnboardingSettingsAvailable)(e) &&
            t.hasFeature(h.GuildFeatures.GUILD_ONBOARDING) &&
            t.hasFeature(h.GuildFeatures.GUILD_SERVER_GUIDE),
          C = r.some(r.values(g), e =>
            e.hasFlag(_.ChannelFlags.IS_GUILD_RESOURCE_CHANNEL)
          );
        return (
          !(!T && !C) &&
          ((i &&
            t.hasFeature(h.GuildFeatures.GUILD_ONBOARDING) &&
            t.hasFeature(h.GuildFeatures.GUILD_SERVER_GUIDE)) ||
            I) &&
          t.hasFeature(h.GuildFeatures.COMMUNITY)
        );
      }
      function T(e) {
        let t = c.default.getGuild(e),
          { showOnboardingHome: n } = E.default.getCurrentConfig(
            { location: "61eef9_3" },
            { autoTrackExposure: !1 }
          ),
          { homeSettingsEnabled: i } = f.default.getCurrentConfig({
            guildId: e,
            location: "61eef9_4",
          }),
          r = o.default.isFullServerPreview(e);
        if (null == t || __OVERLAY__ || e === h.ME || e === h.FAVORITES)
          return !1;
        if (r) return S(t);
        let s =
          i &&
          (0, a.isGuildOnboardingSettingsAvailable)(e) &&
          t.hasFeature(h.GuildFeatures.GUILD_ONBOARDING) &&
          t.hasFeature(h.GuildFeatures.GUILD_SERVER_GUIDE);
        return (
          ((n &&
            t.hasFeature(h.GuildFeatures.GUILD_ONBOARDING) &&
            t.hasFeature(h.GuildFeatures.GUILD_SERVER_GUIDE)) ||
            s) &&
          t.hasFeature(h.GuildFeatures.COMMUNITY)
        );
      }
    },
    363176: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getIsNewMember: function () {
            return u;
          },
          default: function () {
            return c;
          },
        }),
        n("702976");
      var i = n("446674"),
        r = n("38654"),
        s = n("26989"),
        a = n("718517"),
        o = n("568734"),
        l = n("657944");
      function u(e) {
        var t;
        let n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
          i =
            (null == e ? void 0 : e.joinedAt) == null
              ? null
              : new Date(e.joinedAt),
          r = new Date();
        return (
          !!n ||
          (null != i &&
            r.getTime() - i.getTime() < a.default.Millis.WEEK &&
            !(0, o.hasFlag)(
              null !== (t = null == e ? void 0 : e.flags) && void 0 !== t
                ? t
                : 0,
              l.GuildMemberFlags.COMPLETED_HOME_ACTIONS
            ))
        );
      }
      function c(e) {
        let t = (0, i.useStateFromStores)([s.default], () =>
            s.default.getSelfMember(e)
          ),
          n = (0, i.useStateFromStores)([r.default], () =>
            r.default.isFullServerPreview(e)
          );
        return u(t, n);
      }
    },
    858560: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          GuildRoleSubscriptionsExperiment: function () {
            return s;
          },
          GuildRoleSubscriptionUsersExperiment: function () {
            return a;
          },
          GuildRoleSubscriptionMaxTiersExperiment: function () {
            return o;
          },
          GuildRoleSubscriptionsTierTemplatesExperiment: function () {
            return l;
          },
          GuildRoleSubscriptionsTierTemplatesUserExperiment: function () {
            return u;
          },
        });
      var i = n("862205"),
        r = n("677795");
      let s = (0, i.createExperiment)({
          kind: "guild",
          id: "2021-06_guild_role_subscriptions",
          label: "Guild Role Subscriptions",
          defaultConfig: { enableRoleSubscriptionsForGuild: !1 },
          treatments: [
            {
              id: 1,
              label: "Enables guild to create Guild Role Subscriptions",
              config: { enableRoleSubscriptionsForGuild: !0 },
            },
          ],
        }),
        a = (0, i.createExperiment)({
          kind: "user",
          id: "2021-08_guild_role_subscription_users",
          label: "Guild Role Subscription Users",
          defaultConfig: { enableRoleSubscriptionsForUser: !1 },
          treatments: [
            {
              id: 1,
              label: "Enables users to create Guild Role Subscriptions",
              config: { enableRoleSubscriptionsForUser: !0 },
            },
          ],
        });
      (0, i.createExperiment)({
        kind: "guild",
        id: "2022-01_guild_role_subscription_trials",
        label: "Guild Role Subscription Trials",
        defaultConfig: { enableRoleSubscriptionTrialsForGuild: !1 },
        treatments: [
          {
            id: 1,
            label: "Enables guild to create Guild Role Subscription Trials",
            config: { enableRoleSubscriptionTrialsForGuild: !0 },
          },
        ],
      });
      let o = (0, i.createExperiment)({
        kind: "guild",
        id: "2022-07_guild_role_subscriptions_variable_max_tiers",
        label: "Guild Role Subscription Max Tiers",
        defaultConfig: { enabled: !1, maxTiers: r.MAX_SUBSCRIPTION_TIERS },
        treatments: [4, 5, 6].map(e => ({
          id: e,
          label: "Enables {n} maximum published tiers",
          config: { enabled: !0, maxTiers: e },
        })),
      });
      (0, i.createExperiment)({
        kind: "guild",
        id: "2022-12_mobile_guild_role_subscription_team_setup",
        label: "Mobile Guild Role Subscription Team Setup",
        defaultConfig: { enabled: !1 },
        treatments: [
          {
            id: 1,
            label: "Enables guild to allow payout team setup on mobile",
            config: { enabled: !0 },
          },
        ],
      });
      let l = (0, i.createExperiment)({
          kind: "guild",
          id: "2023-03_server_subscriptions_tier_templates",
          label: "Server Subscriptions Tier Templates",
          defaultConfig: { enabled: !1, showCreatorPortalLink: !1 },
          treatments: [
            {
              id: 1,
              label: "299 basic tier + no link",
              config: { enabled: !0, showCreatorPortalLink: !1 },
            },
            {
              id: 2,
              label: "399 basic tier + no link",
              config: { enabled: !0, showCreatorPortalLink: !1 },
            },
            {
              id: 3,
              label: "399 basic tier + link",
              config: { enabled: !0, showCreatorPortalLink: !0 },
            },
          ],
        }),
        u = (0, i.createExperiment)({
          kind: "user",
          id: "2023-04_server_subscriptions_tier_templates_user",
          label: "Server Subscriptions Tier Templates",
          defaultConfig: { enabled: !1 },
          treatments: [
            {
              id: 1,
              label: "Enable tier templates for user",
              config: { enabled: !0 },
            },
          ],
        });
    },
    677795: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MAX_SUBSCRIPTION_TIERS: function () {
            return E;
          },
          RESPONSIVE_MOBILE_WIDTH_SIZE_QUERY: function () {
            return p;
          },
          RESPONSIVE_MOBILE_HEIGHT_SMALL_QUERY: function () {
            return h;
          },
          GuildRoleSubscriptionBenefitTypes: function () {
            return l;
          },
          GuildRoleSubscriptionFormat: function () {
            return u;
          },
          TIER_TRIAL_INTERVALS: function () {
            return _;
          },
          UserGuildRoleSubscriptionRelationship: function () {
            return c;
          },
          CREATOR_REVENUE_PORTAL_URL: function () {
            return S;
          },
          CREATOR_REVENUE_SHARE_PERCENTAGE: function () {
            return m;
          },
          SERVER_SUBSCRIPTIONS_PREMIUM_CHECKLIST_EDUCATIONAL_URLS: function () {
            return T;
          },
        });
      var i,
        r,
        s,
        a,
        o,
        l,
        u,
        c,
        d = n("646718"),
        f = n("843455");
      let E = 3,
        p = "(max-width: 485px)",
        h = "(max-height: 450px)";
      ((i = o || (o = {})).GATING = "GATING"),
        (i.GROUP = "GROUP"),
        (i.DETAILS = "DETAILS"),
        (i.BENEFITS = "BENEFITS"),
        (i.CHANNEL_BENEFITS = "CHANNEL_BENEFITS"),
        (i.INTANGIBLE_BENEFITS = "INTANGIBLE_BENEFITS "),
        (i.DESIGN = "DESIGN"),
        (i.CONFIRMATION = "CONFIRMATION"),
        (i.MEMBERS = "MEMBERS"),
        ((r = l || (l = {}))[(r.CHANNEL = 1)] = "CHANNEL"),
        (r[(r.INTANGIBLE = 2)] = "INTANGIBLE"),
        ((s = u || (u = {}))[(s.SOME_CHANNELS = 0)] = "SOME_CHANNELS"),
        (s[(s.ALL_CHANNELS = 1)] = "ALL_CHANNELS");
      let _ = [
        { interval: d.SubscriptionIntervalTypes.DAY, interval_count: 1 },
        { interval: d.SubscriptionIntervalTypes.DAY, interval_count: 7 },
      ];
      ((a = c || (c = {}))[(a.NONE = 0)] = "NONE"),
        (a[(a.IN_SUBSCRIPTION_SERVER = 1)] = "IN_SUBSCRIPTION_SERVER"),
        (a[(a.SUBSCRIBED = 2)] = "SUBSCRIBED");
      let S = "https://".concat(f.PRIMARY_DOMAIN, "/creators"),
        m = 90,
        T = Object.freeze({
          PROMO_PAGE_GUIDE:
            "https://discord.com/creators/say-hello-to-promo-pages-our-new-server-subscriptions-feature",
          CASE_STUDIES:
            "https://discord.com/creator-portal/learn-from-creators?tab=creator-case-studies",
          SUBSCRIPTION_OFFERING_GUIDE:
            "https://discord.com/creators/offering-inspiration-",
          TIER_STRUCTURE_GUIDE:
            "https://discord.com/creators/server-subs-102-to-tier-or-not-to-tier",
        });
    },
    808388: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useGuildEligibleForRoleSubscriptions: function () {
            return s;
          },
          isGuildEligibleForRoleSubscriptions: function () {
            return a;
          },
          useRoleSubscriptionMaxTiersExperiment: function () {
            return o;
          },
          hasEnabledMonetization: function () {
            return u;
          },
          isGuildEligibleForTierTemplates: function () {
            return c;
          },
          useGuildEligibleForTierTemplates: function () {
            return d;
          },
          useShowCreatorPortalLinkForTierTemplates: function () {
            return f;
          },
          isUserEligibleForTierTemplates: function () {
            return E;
          },
          useUserEligibleForTierTemplates: function () {
            return p;
          },
        }),
        n("7331");
      var i = n("858560"),
        r = n("49111");
      function s(e) {
        let { enableRoleSubscriptionsForGuild: t } =
            i.GuildRoleSubscriptionsExperiment.useExperiment(
              {
                guildId: null != e ? e : r.EMPTY_STRING_GUILD_ID,
                location: "504714_1",
              },
              { autoTrackExposure: !0 }
            ),
          { enableRoleSubscriptionsForUser: n } =
            i.GuildRoleSubscriptionUsersExperiment.useExperiment(
              { location: "504714_2" },
              { autoTrackExposure: !1 }
            );
        return null != e && t && n;
      }
      function a(e) {
        let { enableRoleSubscriptionsForGuild: t } =
            i.GuildRoleSubscriptionsExperiment.getCurrentConfig({
              guildId: null != e ? e : r.EMPTY_STRING_GUILD_ID,
              location: "504714_3",
            }),
          { enableRoleSubscriptionsForUser: n } =
            i.GuildRoleSubscriptionUsersExperiment.getCurrentConfig(
              { location: "504714_4" },
              { autoTrackExposure: !1 }
            );
        return null != e && t && n;
      }
      function o(e) {
        return i.GuildRoleSubscriptionMaxTiersExperiment.useExperiment({
          guildId: null != e ? e : r.EMPTY_STRING_GUILD_ID,
          location: "504714_7",
        });
      }
      let l = [
          r.GuildFeatures.ROLE_SUBSCRIPTIONS_ENABLED,
          r.GuildFeatures.CREATOR_MONETIZABLE,
          r.GuildFeatures.CREATOR_MONETIZABLE_PROVISIONAL,
        ],
        u = e => null != e && l.some(t => e.hasFeature(t));
      function c(e) {
        let { enabled: t } =
          i.GuildRoleSubscriptionsTierTemplatesExperiment.getCurrentConfig(
            {
              guildId: null != e ? e : r.EMPTY_STRING_GUILD_ID,
              location: "504714_9",
            },
            { autoTrackExposure: !1 }
          );
        return t;
      }
      function d(e) {
        let { enabled: t } =
          i.GuildRoleSubscriptionsTierTemplatesExperiment.useExperiment(
            {
              guildId: null != e ? e : r.EMPTY_STRING_GUILD_ID,
              location: "504714_10",
            },
            { autoTrackExposure: !1 }
          );
        return t;
      }
      function f(e) {
        let { showCreatorPortalLink: t } =
          i.GuildRoleSubscriptionsTierTemplatesExperiment.useExperiment(
            {
              guildId: null != e ? e : r.EMPTY_STRING_GUILD_ID,
              location: "504714_11",
            },
            { autoTrackExposure: !1 }
          );
        return t;
      }
      function E() {
        let { enabled: e } =
          i.GuildRoleSubscriptionsTierTemplatesUserExperiment.getCurrentConfig(
            { location: "504714_12" },
            { autoTrackExposure: !1 }
          );
        return e;
      }
      function p() {
        let { enabled: e } =
          i.GuildRoleSubscriptionsTierTemplatesUserExperiment.useExperiment(
            { location: "504714_13" },
            { autoTrackExposure: !1 }
          );
        return e;
      }
    },
    648825: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          FetchState: function () {
            return i;
          },
          default: function () {
            return y;
          },
        }),
        n("222007");
      var i,
        r,
        s = n("627445"),
        a = n.n(s),
        o = n("446674"),
        l = n("407846"),
        u = n("913144"),
        c = n("139170");
      function d(e) {
        return "guild:".concat(e);
      }
      function f(e) {
        return "subscription_listing:".concat(e);
      }
      function E(e) {
        return "application:".concat(e);
      }
      function p(e) {
        return "plan:".concat(e);
      }
      ((r = i || (i = {}))[(r.NOT_FETCHED = 0)] = "NOT_FETCHED"),
        (r[(r.FETCHING = 1)] = "FETCHING"),
        (r[(r.FETCHED = 2)] = "FETCHED");
      let h = new l.default(
          e => [d(e.guild_id), ...e.subscription_listings_ids.map(f)],
          e => e.id
        ),
        _ = new l.default(
          e => [E(e.application_id), p(e.subscription_plans[0].id)],
          e => e.id
        ),
        S = {},
        m = new Set(),
        T = {},
        g = {},
        I = {},
        C = {},
        v = new Map();
      function A(e) {
        return h.values(d(e));
      }
      function R(e) {
        var t;
        for (let n of (h.set(e.id, e),
        v.set(e.guild_id, e.application_id),
        null !== (t = e.subscription_listings) && void 0 !== t ? t : []))
          N(n);
      }
      function N(e) {
        _.set(e.id, e);
      }
      let O = [];
      class D extends o.default.Store {
        getSubscriptionGroupListingsForGuildFetchState(e) {
          var t;
          return null !== (t = S[e]) && void 0 !== t ? t : 0;
        }
        getDidFetchListingForSubscriptionPlanId(e) {
          return m.has(e);
        }
        getSubscriptionGroupListing(e) {
          return h.get(e);
        }
        getSubscriptionGroupListingsForGuild(e) {
          return A(e);
        }
        getSubscriptionGroupListingForSubscriptionListing(e) {
          let t = h.values(f(e));
          return (
            a(t.length <= 1, "Found multiple group listings for listing"), t[0]
          );
        }
        getSubscriptionListing(e) {
          return _.get(e);
        }
        getSubscriptionListingsForGuild(e) {
          var t;
          let n =
            null === (t = this.getSubscriptionGroupListingsForGuild(e)[0]) ||
            void 0 === t
              ? void 0
              : t.application_id;
          return null != n ? _.values(E(n)) : O;
        }
        getSubscriptionListingForPlan(e) {
          let t = _.values(p(e));
          return a(t.length <= 1, "Found multiple listings for plan"), t[0];
        }
        getSubscriptionSettings(e) {
          return T[e];
        }
        getSubscriptionTrial(e) {
          return g[e];
        }
        getMonetizationRestrictions(e) {
          return I[e];
        }
        getMonetizationRestrictionsFetchState(e) {
          var t;
          return null !== (t = C[e]) && void 0 !== t ? t : 0;
        }
        getApplicationIdForGuild(e) {
          return v.get(e);
        }
      }
      D.displayName = "GuildRoleSubscriptionsStore";
      var y = new D(u.default, {
        CONNECTION_OPEN: function () {
          h.clear(),
            _.clear(),
            (S = {}),
            m.clear(),
            (T = {}),
            (g = {}),
            (I = {}),
            (C = {}),
            v.clear();
        },
        GUILD_ROLE_SUBSCRIPTIONS_UPDATE_SUBSCRIPTIONS_SETTINGS: function (e) {
          let { settings: t } = e;
          T[t.guild_id] = t;
        },
        GUILD_ROLE_SUBSCRIPTIONS_FETCH_LISTINGS: function (e) {
          let { guildId: t } = e;
          for (let e of ((S[t] = 1), A(t)))
            for (let t of (h.delete(e.id), e.subscription_listings_ids))
              _.delete(t);
        },
        GUILD_ROLE_SUBSCRIPTIONS_FETCH_LISTINGS_SUCCESS: function (e) {
          let {
            guildId: t,
            groupListings: n,
            settings: i,
            subscriptionTrials: r,
          } = e;
          for (let e of ((S[t] = 2), n)) R(e);
          for (let e of ((T[t] = i), r)) g[e.id] = e;
        },
        GUILD_ROLE_SUBSCRIPTIONS_FETCH_LISTINGS_FAILURE: function (e) {
          let { guildId: t } = e;
          S[t] = 2;
        },
        GUILD_ROLE_SUBSCRIPTIONS_UPDATE_GROUP_LISTING: function (e) {
          let { listing: t } = e;
          R(t);
        },
        GUILD_ROLE_SUBSCRIPTIONS_DELETE_GROUP_LISTING: function (e) {
          let { groupListingId: t } = e;
          h.delete(t);
        },
        GUILD_ROLE_SUBSCRIPTIONS_FETCH_LISTING_FOR_PLAN: function (e) {
          let { planId: t } = e;
          m.add(t);
        },
        GUILD_ROLE_SUBSCRIPTIONS_FETCH_LISTING_FOR_PLAN_SUCCESS: function (e) {
          let { groupListing: t } = e;
          R(t);
        },
        GUILD_ROLE_SUBSCRIPTIONS_CREATE_LISTING: function (e) {
          let { listing: t, groupListing: n } = e;
          N(t), R(n);
        },
        GUILD_ROLE_SUBSCRIPTIONS_UPDATE_LISTING: function (e) {
          let { listing: t } = e;
          N(t);
        },
        GUILD_ROLE_SUBSCRIPTIONS_DELETE_LISTING: function (e) {
          let { listingId: t } = e;
          return _.delete(t);
        },
        GUILD_ROLE_SUBSCRIPTIONS_UPDATE_SUBSCRIPTION_TRIAL: function (e) {
          let { subscriptionTrial: t } = e;
          g[t.id] = t;
        },
        GUILD_ROLE_SUBSCRIPTIONS_FETCH_RESTRICTIONS: function (e) {
          let { guildId: t } = e;
          C[t] = 1;
        },
        GUILD_ROLE_SUBSCRIPTIONS_FETCH_RESTRICTIONS_SUCCESS: function (e) {
          let { guildId: t, restrictions: n } = e;
          (I[t] = n), (C[t] = 2);
        },
        GUILD_ROLE_SUBSCRIPTIONS_FETCH_RESTRICTIONS_FAILURE: function (e) {
          let { guildId: t } = e;
          (C[t] = 2), (I[t] = c.DefaultCreatorMonetizationRestrictions);
        },
        GUILD_ROLE_SUBSCRIPTIONS_FETCH_RESTRICTIONS_ABORTED: function (e) {
          let { guildId: t } = e;
          C[t] = 0;
        },
      });
    },
    828674: function (e, t, n) {
      "use strict";
      function i(e) {
        var t;
        return (
          (null == e
            ? void 0
            : null === (t = e.tags) || void 0 === t
              ? void 0
              : t.subscription_listing_id) != null
        );
      }
      function r(e) {
        var t;
        return (
          (null == e
            ? void 0
            : null === (t = e.tags) || void 0 === t
              ? void 0
              : t.available_for_purchase) !== void 0
        );
      }
      n.r(t),
        n.d(t, {
          isSubscriptionRole: function () {
            return i;
          },
          isSubscriptionRoleAvailableForPurchase: function () {
            return r;
          },
        });
    },
    866595: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isAllChannelsRole: function () {
            return s;
          },
          isChannelAccessDeniedBy: function () {
            return a;
          },
          isChannelAccessGrantedBy: function () {
            return o;
          },
        });
      var i = n("316693"),
        r = n("49111");
      function s(e) {
        return i.default.has(e.permissions, r.Permissions.VIEW_CHANNEL);
      }
      function a(e, t) {
        return (
          null != t &&
          (!!i.default.has(t.deny, r.Permissions.VIEW_CHANNEL) ||
            (e.isGuildVocal() && i.default.has(t.deny, r.Permissions.CONNECT)))
        );
      }
      function o(e, t) {
        return (
          !(null == t || a(e, t)) &&
          !!i.default.has(t.allow, r.Permissions.VIEW_CHANNEL) &&
          (!e.isGuildVocal() || i.default.has(t.allow, r.Permissions.CONNECT))
        );
      }
    },
    745049: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          GUILD_EVENT_MAX_DESCRIPTION_LENGTH: function () {
            return T;
          },
          MAX_EVENT_LOCATION_LENGTH: function () {
            return g;
          },
          ANALYTICS_GUILD_EVENTS_MODAL_NAME: function () {
            return I;
          },
          FAKE_EVENT_ID: function () {
            return C;
          },
          GuildScheduledEventStatus: function () {
            return i;
          },
          GuildScheduledEventStatusDone: function () {
            return v;
          },
          GuildScheduledEventEntityTypes: function () {
            return r;
          },
          GuildScheduledEventNotificationTypes: function () {
            return s;
          },
          GuildScheduledEventPrivacyLevel: function () {
            return a;
          },
          EntityChannelTypes: function () {
            return A;
          },
          ENTITY_TYPES_REQUIRED_ENTITY_METADATA: function () {
            return R;
          },
          ENTITY_TYPES_REQUIRED_CHANNEL_ID: function () {
            return N;
          },
          EventDetailSections: function () {
            return o;
          },
          MAX_RSVP_USER_DISPLAY_COUNT: function () {
            return O;
          },
          NEW_EVENT_WINDOW_MILLISECONDS: function () {
            return D;
          },
          EVENT_STARTING_SOON_WINDOW_MILLISECONDS: function () {
            return y;
          },
          ACKED_RECENTLY_WINDOW_DAYS: function () {
            return P;
          },
          UpcomingGuildEventNoticeTypes: function () {
            return l;
          },
          GuildScheduledEventUserResponses: function () {
            return u;
          },
        }),
        n("222007");
      var i,
        r,
        s,
        a,
        o,
        l,
        u,
        c,
        d,
        f,
        E,
        p,
        h,
        _,
        S = n("718517"),
        m = n("49111");
      let T = 1e3,
        g = 100,
        I = "Guild Events Modal",
        C = "-1";
      ((c = i || (i = {}))[(c.SCHEDULED = 1)] = "SCHEDULED"),
        (c[(c.ACTIVE = 2)] = "ACTIVE"),
        (c[(c.COMPLETED = 3)] = "COMPLETED"),
        (c[(c.CANCELED = 4)] = "CANCELED");
      let v = new Set([3, 4]);
      ((d = r || (r = {}))[(d.NONE = 0)] = "NONE"),
        (d[(d.STAGE_INSTANCE = 1)] = "STAGE_INSTANCE"),
        (d[(d.VOICE = 2)] = "VOICE"),
        (d[(d.EXTERNAL = 3)] = "EXTERNAL"),
        ((f = s || (s = {}))[(f.EVENT_START = 1)] = "EVENT_START"),
        ((E = a || (a = {}))[(E.PUBLIC = 1)] = "PUBLIC"),
        (E[(E.GUILD_ONLY = 2)] = "GUILD_ONLY");
      let A = {
          1: m.ChannelTypes.GUILD_STAGE_VOICE,
          2: m.ChannelTypes.GUILD_VOICE,
        },
        R = new Set([3]),
        N = new Set([1, 2]);
      ((p = o || (o = {}))[(p.EVENT_INFO = 0)] = "EVENT_INFO"),
        (p[(p.RSVP_LIST = 1)] = "RSVP_LIST");
      let O = 100,
        D = 2 * S.default.Millis.DAY,
        y = 12 * S.default.Millis.HOUR,
        P = 4;
      ((h = l || (l = {})).NEW_EVENT = "Upcoming Event Notice"),
        (h.EVENT_STARTING_SOON = "Event Starting Soon Notice"),
        ((_ = u || (u = {}))[(_.UNINTERESTED = 0)] = "UNINTERESTED"),
        (_[(_.INTERESTED = 1)] = "INTERESTED");
    },
    859973: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          convertToTimeOfADay: function () {
            return E;
          },
          timeAtSpecificDay: function () {
            return h;
          },
          TimeOptions: function () {
            return S;
          },
        }),
        n("781738"),
        n("424973"),
        n("222007"),
        n("70102");
      var i = n("866227"),
        r = n.n(i),
        s = n("888400");
      let a = /^[0]+/,
        o = /:00/,
        l = /(AM|ΠΜ|सुबह)/i,
        u = /(PM|ΜΜ|शाम)/i,
        c = /\s+/,
        d = e => e.replace(a, "").replace(o, "").replace(l, "").replace(c, ""),
        f = e => e.replace(a, "").replace(u, "").replace(c, ""),
        E = (e, t) => {
          let n = t.toUpperCase().trim();
          if (n.length > 0) {
            let t = r(
              ""
                .concat(null == e ? void 0 : e.format("YYYY-MM-DD"), " ")
                .concat(n),
              "YYYY-MM-DD LT"
            );
            if (d(t.format("LT")) === d(n)) return t;
          }
        },
        p = r("2021-04-12T00:00:00"),
        h = (e, t) => e.clone().hours(t.hour()).minutes(t.minutes()).seconds(0),
        _ = (e, t) => e.value.unix() - t.value.unix();
      class S {
        lookupByValue(e) {
          if (null == e) return;
          let t = h(p, e);
          return this._index[t.unix()];
        }
        _createLabel(e) {
          return (0, s.dateFormat)(e.locale(r.locale()), this.labelFormat);
        }
        _generateTimeOptions() {
          (this.options = []), (this._index = {});
          let e = r(p),
            t = r(e).add(1, "day"),
            n = r(e);
          for (; n < t; ) {
            let e = this._createNewOption(n.clone());
            this.options.push(e),
              (this._index[e.value.unix()] = e.value),
              n.add(this.intervalInMinutes, "minutes");
          }
        }
        _createNewOption(e) {
          let t = h(p, e),
            n = this._createLabel(t);
          return { label: n, value: t };
        }
        _addNewOption(e) {
          let t = h(p, e),
            n = this._createLabel(t);
          return (
            (this._index[t.unix()] = t),
            this.options.push({ label: n, value: t }),
            this.options.sort(_),
            e
          );
        }
        _guessOptions(e) {
          let t = [];
          if (/[:\\.]/.test(e)) {
            let n = E(p, e);
            if (null != n) {
              t.push(n.clone());
              let i = n.add({ hours: 12 });
              i.isBefore(p.clone().add({ hours: 24 })) &&
                f(i.format("LT")) === f(e) &&
                t.push(i);
            }
          }
          return t;
        }
        getOptions(e) {
          let t = this._guessOptions(e);
          if (!(t.length > 0)) return this.options;
          {
            let e = [...this.options];
            return (
              t.forEach(t => {
                null == this.lookupByValue(t) &&
                  e.push(this._createNewOption(t));
              }),
              e.sort(_),
              e
            );
          }
        }
        selectValue(e) {
          let t = this.lookupByValue(e);
          return null == t ? this._addNewOption(e) : t;
        }
        constructor({ intervalInMinutes: e = 15, labelFormat: t = "LT" } = {}) {
          if (((this.options = []), (this._index = {}), e <= 0))
            throw Error(
              "intervalInMinutes should be positive number, got ".concat(e)
            );
          (this.intervalInMinutes = e),
            (this.labelFormat = t),
            this._generateTimeOptions();
        }
      }
    },
    674644: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          GuildsNodeType: function () {
            return i;
          },
          GuildsTree: function () {
            return u;
          },
          createGuildNode: function () {
            return c;
          },
          createFolderNode: function () {
            return d;
          },
        }),
        n("222007"),
        n("834022");
      var i,
        r,
        s = n("627445"),
        a = n.n(s),
        o = n("917351");
      function l() {
        return Math.floor(4294967296 * Math.random());
      }
      ((r = i || (i = {})).ROOT = "root"),
        (r.FOLDER = "folder"),
        (r.GUILD = "guild");
      class u {
        getSnapshot() {
          return { root: this.root, nodes: this.nodes };
        }
        loadSnapshot(e) {
          (this.root = e.root), (this.nodes = e.nodes), this.version++;
        }
        moveNextTo(e, t) {
          let n =
            arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          this._pluckNode(e);
          let i = null != t.parentId ? this.nodes[t.parentId] : this.root,
            r = i.children.indexOf(t);
          return (
            a(
              !("folder" === e.type && "folder" === i.type),
              "[GUILDS TREE] Tried moving a folder ("
                .concat(e.id, ") inside of another folder (")
                .concat(i.id, ")")
            ),
            a(
              r >= 0,
              "[GUILDS TREE] target node ("
                .concat(t.id, ") did not exist within its specified parent (")
                .concat(t.parentId, ")")
            ),
            (i.children = [...i.children]),
            i.children.splice(r + (n ? 1 : 0), 0, e),
            (e.parentId = i.id),
            this.version++,
            this
          );
        }
        moveInto(e, t) {
          let n =
            !(arguments.length > 2) || void 0 === arguments[2] || arguments[2];
          this._pluckNode(e);
          let i = n ? t.children.length : 0;
          return (
            (t.children = [...t.children]),
            t.children.splice(i, 0, e),
            (e.parentId = t.id),
            this.version++,
            this
          );
        }
        addNode(e) {
          let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : this.root,
            n =
              !(arguments.length > 2) ||
              void 0 === arguments[2] ||
              arguments[2];
          return (
            a(
              "root" !== e.type,
              "[GUILDS TREE] Tried adding another root node into the tree"
            ),
            a(null != e.id, "[GUILDS TREE] Tried adding a node without an id"),
            a(
              null == this.nodes[e.id],
              "[GUILDS TREE] Tried adding a node that already exists (".concat(
                e.id,
                ")"
              )
            ),
            (this.nodes[e.id] = e),
            this.version++,
            this.moveInto(e, t, n)
          );
        }
        removeNode(e) {
          return (
            a(
              e !== this.root,
              "[GUILDS TREE] Tried removing the root node from the tree"
            ),
            a(
              null != e.id,
              "[GUILDS TREE] Tried removing a node without an id"
            ),
            this._pluckNode(e),
            (e.parentId = void 0),
            delete this.nodes[e.id],
            this.version++,
            this
          );
        }
        replaceNode(e, t) {
          a(
            e !== this.root,
            "[GUILDS TREE] Tried replacing the root node of the tree"
          ),
            a(
              null != e.id,
              "[GUILDS TREE] Tried replacing a node without an id"
            ),
            a(
              null != t.id,
              "[GUILDS TREE] Tried replacing a node with one that does not have an id"
            ),
            a(
              "root" !== t.type,
              "[GUILDS TREE] Tried adding another root node into the tree"
            );
          let n = null != e.parentId ? this.nodes[e.parentId] : this.root,
            i = n.children.indexOf(e);
          return (
            a(
              i >= 0,
              "[GUILDS TREE] existing node ("
                .concat(e.id, ") did not exist within its specified parent (")
                .concat(e.parentId, ")")
            ),
            (n.children = [...n.children]),
            n.children.splice(i, 1, t),
            (t.parentId = n.id),
            (e.parentId = void 0),
            delete this.nodes[e.id],
            (this.nodes[t.id] = t),
            this.version++,
            this
          );
        }
        cloneNode(e) {
          return (0, o.clone)(e);
        }
        convertToFolder(e) {
          let t = l();
          for (; null != this.getNode(t); ) t = l();
          let n = { type: "folder", id: t, expanded: !1, children: [] };
          return (
            this.replaceNode(e, n),
            this.removeNode(e),
            this.addNode(e, n, !1),
            this.version++,
            n
          );
        }
        allNodes() {
          return Object.values(this.nodes);
        }
        getNode(e) {
          return this.nodes[e];
        }
        getRoots() {
          return this.root.children;
        }
        get size() {
          return this.allNodes().length;
        }
        sortedGuildNodes() {
          return (function e(t) {
            return "guild" === t.type
              ? [t]
              : null == t.children
                ? []
                : t.children.map(t => e(t)).flat();
          })(this.root);
        }
        _pluckNode(e) {
          let t = null != e.parentId ? this.nodes[e.parentId] : this.root;
          a(
            null != t,
            "[GUILDS TREE] source node ("
              .concat(e.id, ") had a parent id (")
              .concat(e.parentId, ") which doesn't exist in the tree")
          );
          let n = t.children;
          a(
            null != n,
            "[GUILDS TREE] source node ("
              .concat(e.id, ") had a parent id (")
              .concat(e.parentId, ") which contains no children")
          ),
            (t.children = n.filter(t => t !== e)),
            (e.parentId = void 0),
            this.version++;
        }
        constructor() {
          (this.root = { type: "root", children: [] }),
            (this.nodes = {}),
            (this.version = 0);
        }
      }
      function c(e, t) {
        return {
          type: "guild",
          id: e,
          parentId: t,
          children: [],
          unavailable: !1,
        };
      }
      function d(e, t) {
        var n, i, r;
        return {
          type: "folder",
          id: e.folderId,
          parentId: t,
          name: null !== (n = e.folderName) && void 0 !== n ? n : void 0,
          color: null !== (i = e.folderColor) && void 0 !== i ? i : void 0,
          expanded: null !== (r = e.expanded) && void 0 !== r && r,
          children: [],
        };
      }
    },
    991207: function (e, t, n) {
      "use strict";
      var i;
      n.r(t),
        n.d(t, {
          FileTypes: function () {
            return i;
          },
        }),
        ((i || (i = {})).MP4 = "video/mp4");
    },
    407063: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getDevicePixelRatio: function () {
            return c.default;
          },
          isImageLoaded: function () {
            return _;
          },
          loadImage: function () {
            return S;
          },
          getBestMediaProxySize: function () {
            return m;
          },
          getImageSrc: function () {
            return T;
          },
        }),
        n("222007");
      var i = n("917351"),
        r = n.n(i),
        s = n("693566"),
        a = n.n(s),
        o = n("522632"),
        l = n("981980"),
        u = n("35468"),
        c = n("547630"),
        d = n("49111");
      let f = [
          16, 20, 22, 24, 28, 32, 40, 44, 48, 56, 60, 64, 80, 96, 100, 128, 160,
          240, 256, 300, 320, 480, 512, 600, 640, 1024, 1280, 1536, 2048, 3072,
          4096,
        ],
        E = new a({ max: 1e3 });
      function p(e) {
        let t = new Image();
        (t.onerror = (function (e, t) {
          null == e.backoff && (e.backoff = new l.default());
          let { backoff: n } = e;
          return async () => {
            await u.default.isOnline(),
              n.fails < 5
                ? n.fail(() => {
                    p(e);
                  })
                : h(!0, e, t);
          };
        })(e, t)),
          (t.onload = () => {
            let { backoff: n } = e;
            null != n && n.succeed(), h(!1, e, t);
          }),
          (t.src = e.url);
      }
      function h(e, t, n) {
        let { callbacks: i, url: r } = t;
        if (e) E.del(r);
        else {
          let { width: e, height: i } = n;
          (t = { url: r, loaded: !0, width: e, height: i }), E.set(r, t);
        }
        null != i && i.forEach(n => n(e, t));
      }
      function _(e) {
        let t = E.get(e);
        return null != t && t.loaded;
      }
      function S(e, t) {
        let n = E.get(e);
        if (null != n && n.loaded)
          return (
            null != t &&
              u.default.awaitOnline().then(() => {
                null != n &&
                  null != n.callbacks &&
                  n.callbacks.forEach(t => {
                    null != n ? t(!1, n) : t(!0, { url: e, loaded: !0 });
                  });
              }),
            d.NOOP
          );
        {
          let i;
          return (
            null == n && ((n = { url: e, loaded: !1 }), E.set(e, n), p(n)),
            null != t &&
              ((i = t.bind(null)),
              null == n.callbacks && (n.callbacks = new Set()),
              n.callbacks.add(i)),
            () => {
              null != i &&
                null != n &&
                (null != n.callbacks && n.callbacks.delete(i),
                null != n.backoff && n.backoff.cancel());
            }
          );
        }
      }
      function m(e) {
        var t;
        return null !== (t = f.find(t => e <= t)) && void 0 !== t
          ? t
          : f[f.length - 1];
      }
      function T(e) {
        let {
            src: t,
            width: n,
            height: i,
            maxWidth: s,
            maxHeight: a,
            ratio: l = 1,
            format: u = null,
            quality: d = null,
          } = e,
          f = n,
          E = i;
        l < 1 && ((f = Math.round(n * l)), (E = Math.round(i * l))),
          null != s && (f = Math.min(f, s)),
          null != a && (E = Math.min(E, a));
        let p = (0, c.default)();
        return (
          (f *= p),
          (function (e) {
            let {
                src: t,
                sourceWidth: n,
                sourceHeight: i,
                targetWidth: s,
                targetHeight: a,
                format: l = null,
                quality: u = null,
              } = e,
              [c, d] = (function (e) {
                let [t, n] = e.split("?");
                return [t, o.parse(n)];
              })(t);
            return (
              null != l && (d.format = l),
              null != u && (d.quality = u),
              (s !== n || a !== i) && ((d.width = 0 | s), (d.height = 0 | a)),
              !r.isEmpty(d) && (c += "?" + o.stringify(d)),
              c
            );
          })({
            src: t,
            sourceWidth: n,
            sourceHeight: i,
            targetWidth: f,
            targetHeight: (E *= p),
            format: u,
            quality: d,
          })
        );
      }
    },
    694187: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getFilters: function () {
            return l;
          },
          processImage: function () {
            return u;
          },
          default: function () {
            return d;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("371642"),
        a = n("991207"),
        o = n("782340");
      function l() {
        return [
          {
            name: o.default.Messages.IMAGES,
            extensions: ["jpg", "jpeg", "png", "gif"],
          },
        ];
      }
      function u(e, t, n) {
        !(function (e, t) {
          if (null != e) {
            let n = new FileReader();
            (n.onload = n => {
              var i;
              "string" ==
                typeof (null === (i = n.target) || void 0 === i
                  ? void 0
                  : i.result) && t(n.target.result, e);
            }),
              n.readAsDataURL(e);
          }
        })(e, i => {
          if (e.type === a.FileTypes.MP4) return t(i, e);
          let r = new Image();
          (r.src = i),
            (r.onload = () => {
              t(i, e);
            }),
            (r.onerror = () => {
              n();
            });
        });
      }
      class c extends r.PureComponent {
        componentDidMount() {
          this._isMounted = !0;
        }
        activateUploadDialogue() {
          var e;
          null === (e = this._ref.current) ||
            void 0 === e ||
            e.activateUploadDialogue();
        }
        render() {
          let {
            multiple: e,
            disabled: t,
            className: n,
            tabIndex: r,
            "aria-label": a,
            filters: o,
          } = this.props;
          return (0, i.jsx)(s.default, {
            ref: this._ref,
            onChange: this.handleFileChange,
            filters: null != o ? o : l(),
            multiple: e,
            disabled: t,
            className: n,
            tabIndex: r,
            "aria-label": a,
          });
        }
        constructor(...e) {
          super(...e),
            (this._ref = r.createRef()),
            (this._isMounted = !1),
            (this.handleFileChange = e => {
              let { onFileSizeError: t, maxFileSizeBytes: n } = this.props;
              if (
                (e.stopPropagation(),
                e.preventDefault(),
                null != e.currentTarget.files)
              )
                for (let i = 0; i < e.currentTarget.files.length; i++) {
                  let r = e.currentTarget.files[i];
                  if (r.size > n) {
                    null == t || t(n, r.size);
                    continue;
                  }
                  u(r, this.handleFileRead, this.handleFileError);
                }
            }),
            (this.handleFileRead = (e, t) => {
              let { onChange: n } = this.props;
              this._isMounted && n(e, t);
            }),
            (this.handleFileError = async () => {
              let { openUploadError: e } = await n
                .el("336522")
                .then(n.bind(n, "336522"));
              e({
                title: o.default.Messages.PREMIUM_ALERT_ERROR_TITLE,
                help: o.default.Messages.UNABLE_TO_PROCESS_IMAGE,
              });
            });
        }
      }
      c.defaultProps = { multiple: !0, tabIndex: -1, maxFileSizeBytes: 1 / 0 };
      var d = c;
    },
    38654: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return f;
          },
        }),
        n("222007"),
        n("702976"),
        n("808653");
      var i = n("446674"),
        r = n("913144"),
        s = n("305961"),
        a = n("568734"),
        o = n("507950"),
        l = n("49111"),
        u = n("397336");
      let c = {};
      class d extends i.default.Store {
        hasViewingRoles() {
          return Object.keys(c).length > 0;
        }
        isViewingRoles(e) {
          return null != e && null != c[e];
        }
        getViewingRoles(e) {
          var t;
          return null === (t = c[e]) || void 0 === t ? void 0 : t.roles;
        }
        getViewingRolesTimestamp(e) {
          var t;
          return null != e
            ? null === (t = c[e]) || void 0 === t
              ? void 0
              : t.timestamp
            : null;
        }
        getData(e) {
          return c[e];
        }
        isFullServerPreview(e) {
          var t;
          return (
            (null === (t = c[e]) || void 0 === t ? void 0 : t.type) ===
            o.ImpersonateType.NEW_MEMBER
          );
        }
        isOptInEnabled(e) {
          let t = c[e];
          return (
            null != t &&
            t.type === o.ImpersonateType.NEW_MEMBER &&
            t.optInEnabled
          );
        }
        isOnboardingEnabled(e) {
          let t = c[e];
          return (
            null != t &&
            t.type === o.ImpersonateType.NEW_MEMBER &&
            t.onboardingEnabled
          );
        }
        getViewingChannels(e) {
          let t = c[e];
          return null == t || t.type !== o.ImpersonateType.NEW_MEMBER
            ? null
            : t.optInChannels;
        }
        getOnboardingResponses(e) {
          let t = c[e];
          return null == t || t.type !== o.ImpersonateType.NEW_MEMBER
            ? null
            : t.onboardingResponses;
        }
        getMemberOptions(e) {
          let t = c[e];
          return null == t || t.type !== o.ImpersonateType.NEW_MEMBER
            ? null
            : t.memberOptions;
        }
        isChannelOptedIn(e, t) {
          let n = this.getViewingChannels(e);
          return null != n && n.has(t);
        }
        isViewingServerShop(e) {
          var t;
          return (
            null != e &&
            (null === (t = c[e]) || void 0 === t ? void 0 : t.type) ===
              o.ImpersonateType.SERVER_SHOP
          );
        }
        getImpersonateType(e) {
          if (null == e) return null;
          let t = c[e];
          return null == t ? null : t.type;
        }
        getBackNavigationSection(e) {
          if (null == e) return l.GuildSettingsSections.ROLES;
          let t = c[e];
          if (null == t) return l.GuildSettingsSections.ROLES;
          switch (t.type) {
            case o.ImpersonateType.ROLES:
            case o.ImpersonateType.SERVER_SHOP:
              return t.returnToSection;
            case o.ImpersonateType.NEW_MEMBER:
              return l.GuildSettingsSections.ONBOARDING;
            default:
              return l.GuildSettingsSections.ROLES;
          }
        }
      }
      d.displayName = "ImpersonateStore";
      var f = new d(r.default, {
        IMPERSONATE_UPDATE: function (e) {
          let { guildId: t, data: n } = e;
          delete n.roles[t], (c[t] = { ...n, timestamp: Date.now() });
        },
        IMPERSONATE_STOP: function (e) {
          let { guildId: t } = e;
          if (null == c[t]) return !1;
          delete c[t];
        },
        GUILD_ROLE_DELETE: function (e) {
          let { guildId: t, roleId: n } = e;
          if (null == c[t]) return !1;
          delete c[t].roles[n];
        },
        USER_GUILD_SETTINGS_CHANNEL_UPDATE_BULK: function (e) {
          var t;
          let { guildId: n, overrides: i } = e;
          if (null == n || null == c[n]) return !1;
          let r = c[n];
          if (null == r || r.type !== o.ImpersonateType.NEW_MEMBER) return !1;
          let s =
            null !== (t = r.optInChannels) && void 0 !== t ? t : new Set();
          return (
            Object.keys(i).forEach(e => {
              var t;
              let n = i[e];
              a.hasFlag(
                null !== (t = n.flags) && void 0 !== t ? t : 0,
                u.ChannelNotificationSettingsFlags.OPT_IN_ENABLED
              )
                ? s.add(e)
                : s.delete(e);
            }),
            (r.optInChannels = s),
            !0
          );
        },
        GUILD_ONBOARDING_SELECT_OPTION: function (e) {
          var t;
          let { guildId: n, optionId: i, selected: r, removedOptionIds: s } = e;
          if (null == n || null == c[n]) return !1;
          let a = c[n];
          if (null == a || a.type !== o.ImpersonateType.NEW_MEMBER) return !1;
          let l =
            null !== (t = a.onboardingResponses) && void 0 !== t
              ? t
              : new Set();
          return (
            null != s && s.length > 0 && s.forEach(e => l.delete(e)),
            r ? l.add(i) : l.delete(i),
            (a.onboardingResponses = l),
            !0
          );
        },
        GUILD_MEMBER_UPDATE_LOCAL: function (e) {
          let { guildId: t, roles: n, flags: i } = e;
          if (null == t) return !1;
          let r = c[t],
            a = s.default.getGuild(t);
          return (
            null != a &&
            null != r &&
            (null != n &&
              (r.roles = n.reduce((e, t) => {
                let n = a.getRole(t);
                return null != n && (e[t] = n), e;
              }, {})),
            null != i &&
              r.type === o.ImpersonateType.NEW_MEMBER &&
              (r.memberOptions.flags = i),
            !0)
          );
        },
      });
    },
    507950: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          ImpersonateType: function () {
            return i;
          },
        }),
        ((r = i || (i = {})).ROLES = "ROLES"),
        (r.NEW_MEMBER = "NEW_MEMBER"),
        (r.SERVER_SHOP = "SERVER_SHOP");
    },
    894282: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          KeyboardEventKey: function () {
            return s.Key;
          },
          FOCUS_SECTION_JUMP_KEY: function () {
            return a;
          },
          NavigationKeyShortcutMap: function () {
            return o;
          },
          NavigationShortcuts: function () {
            return l;
          },
          KeyboardKeysUpdated: function () {
            return i;
          },
        }),
        n("222007");
      var i,
        r,
        s = n("338923");
      let a = s.Key.F6,
        o = new Map([
          [s.Key.F6, "f6"],
          [s.Key.Tab, "tab"],
          [s.Key.ArrowDown, "down"],
          [s.Key.ArrowUp, "up"],
          [s.Key.ArrowLeft, "left"],
          [s.Key.ArrowRight, "right"],
          [s.Key.Home, "home"],
          [s.Key.End, "end"],
        ]),
        l = new Set([
          "tab",
          "shift+tab",
          "down",
          "up",
          "left",
          "right",
          "home",
          "end",
        ]);
      ((r = i || (i = {})).ENTER = "Enter"),
        (r.TAB = "Tab"),
        (r.SPACE = " "),
        (r.ESCAPE = "Escape"),
        (r.SHIFT = "Shift");
    },
    15649: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        });
      var i = n("782340");
      function r(e) {
        let t = i.default.getLocale().toLowerCase();
        return t in e ? e[t] : e.default;
      }
    },
    267567: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return _;
          },
        }),
        n("222007"),
        n("808653");
      var i = n("446674"),
        r = n("913144"),
        s = n("26989"),
        a = n("305961"),
        o = n("697218"),
        l = n("49111");
      let u = [],
        c = {},
        d = null,
        f = null;
      function E(e) {
        let t = u.indexOf(e);
        if (t > -1) {
          let n = [...u];
          return n.splice(t, 1), (u = n), delete c[e], !0;
        }
        return !1;
      }
      function p(e) {
        return !(e === l.ME || u.includes(e)) && ((u = [...u, e]), !0);
      }
      class h extends i.default.Store {
        initialize() {
          this.waitFor(a.default, o.default);
        }
        setHistorySnapshot(e) {
          d = e;
        }
        getHistorySnapshot() {
          return d;
        }
        lurkingGuildIds() {
          return u;
        }
        mostRecentLurkedGuildId() {
          return 0 === u.length ? null : u[u.length - 1];
        }
        isLurking(e) {
          var t;
          let n = s.default.isCurrentUserGuest(e),
            i =
              null === (t = a.default.getGuild(e)) || void 0 === t
                ? void 0
                : t.isLurker();
          return !!(!n && i);
        }
        getLurkingSource() {
          return f;
        }
        getLoadId(e) {
          return null != e ? c[e] : null;
        }
      }
      h.displayName = "LurkingStore";
      var _ = new h(r.default, {
        CONNECTION_OPEN: function () {
          let e = Object.values(a.default.getGuilds()).reduce((e, t) => {
            let n = t.isLurker();
            return n ? [...e, t.id] : e;
          }, []);
          u = e;
        },
        GUILD_JOIN: function (e) {
          let {
            guildId: t,
            lurker: n,
            source: i,
            directoryChannelId: r,
            loadId: s,
          } = e;
          if (n) {
            var a, o;
            switch ((p(t), (a = t), null != (o = s) && (c[a] = o), i)) {
              case l.JoinGuildSources.MOBILE_GUILD_DISCOVERY:
                f = { type: l.JoinGuildSources.MOBILE_GUILD_DISCOVERY };
                break;
              case l.JoinGuildSources.DIRECTORY_ENTRY:
                f = {
                  type: l.JoinGuildSources.DIRECTORY_ENTRY,
                  directoryChannelId: r,
                };
                break;
              default:
                f = null;
            }
            return !0;
          }
          return !1;
        },
        GUILD_STOP_LURKING: function (e) {
          let { ignoredGuildIds: t } = e,
            n = (function (e) {
              let t = new Set([...(null != e ? e : [])]);
              return [...u].reduce((e, n) => (t.has(n) ? e : E(n) || e), !1);
            })(t);
          return n && ((d = null), (f = null)), n;
        },
        GUILD_STOP_LURKING_FAILURE: function (e) {
          let { lurkingGuildId: t, lurkingSource: n } = e;
          return p(t), (f = n), !0;
        },
        GUILD_CREATE: function (e) {
          let { guild: t } = e,
            n = null == t.joined_at;
          return (
            !!(!n && u.includes(t.id)) && (E(t.id), (d = null), (f = null), !0)
          );
        },
        GUILD_DELETE: function (e) {
          let { guild: t } = e;
          return !!u.includes(t.id) && (E(t.id), (d = null), (f = null), !0);
        },
        GUILD_MEMBER_ADD: function (e) {
          var t;
          let { guildId: n, joinedAt: i, user: r } = e,
            s =
              r.id ===
              (null === (t = o.default.getCurrentUser()) || void 0 === t
                ? void 0
                : t.id);
          return (
            !!(s && null != i && u.includes(n)) &&
            (E(n), (d = null), (f = null), !0)
          );
        },
      });
    },
    21121: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getRootNavigationRefIfInExperiment: function () {
            return _;
          },
          isInMainTabsExperiment: function () {
            return S;
          },
          useInMainTabsExperiment: function () {
            return m;
          },
        }),
        n("70102"),
        n("884691");
      var i,
        r,
        s = n("308503"),
        a = n("95410");
      n("789563");
      var o = n("132522"),
        l = n("693051"),
        u = n("139404"),
        c = n("61796"),
        d = n("264325"),
        f = n("18108");
      ((r = i || (i = {}))[(r.EXISTING_USERS = 0)] = "EXISTING_USERS"),
        (r[(r.NEW_USERS = 1)] = "NEW_USERS");
      let E = "tabs-v2-experiment-key",
        p = (0, s.default)((e, t) => ({
          _experimentCacheInitialized: !1,
          _experimentEnabled: !1,
          getExperimentEnabled() {
            if (!(0, c.isMainTabsExperimentPlatformSupported)()) return !1;
            let { _experimentCacheInitialized: e, _experimentEnabled: n } = t();
            if (!e)
              throw Error(
                "MainTabsV2ExperimentStore: Experiment cache not initialized"
              );
            return n;
          },
          setExperimentEnabled: t => {
            e({ _experimentEnabled: t }), a.default.set(E, t);
          },
          setInitialized: () => {
            e(e =>
              e._experimentCacheInitialized
                ? e
                : {
                    _experimentCacheInitialized: !0,
                    _experimentEnabled: !0 === a.default.get(E),
                  }
            );
          },
        }));
      function h() {
        let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : (0, u.isMobileRedesignDisabled)(),
          t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
          n =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : p.getState().getExperimentEnabled(),
          i =
            arguments.length > 3 && void 0 !== arguments[3]
              ? arguments[3]
              : (0, d.isTabsUIEnabledManually)(),
          r =
            arguments.length > 4 && void 0 !== arguments[4]
              ? arguments[4]
              : (0, o.isRedesignToggleIgnored)();
        if (!(0, c.isMainTabsExperimentPlatformSupported)()) return !1;
        if (!r) {
          if (!t && e) return (0, f.updateIsInTabsUI)(!1), !1;
          if (i) return (0, f.updateIsInTabsUI)(!0), !0;
        }
        return !t && (0, f.updateIsInTabsUI)(n), n;
      }
      function _() {
        return S() ? (0, l.getRootNavigationRef)() : void 0;
      }
      function S() {
        return h();
      }
      function m() {
        let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
          t = (0, u.useMobileRedesignDisabled)(),
          n = p(e => e.getExperimentEnabled()),
          i = (0, d.useIsTabsUIEnabledManually)(),
          r = (0, o.useRedesignToggleIgnored)();
        return h(t, e, n, i, r);
      }
    },
    132522: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          useRedesignToggleIgnored: function () {
            return s;
          },
          isRedesignToggleIgnored: function () {
            return a;
          },
        });
      var i = n("862205");
      n("934306");
      let r = (0, i.createExperiment)({
        kind: "user",
        id: "2023-09_mobile_redesign_override_toggles",
        label: "Tabs V2 - redesign opt-out/in for all",
        defaultConfig: { hide: !1, ignore: !1 },
        treatments: [
          { id: 1, label: "control", config: { hide: !1, ignore: !1 } },
          { id: 2, label: "hide toggles", config: { hide: !0, ignore: !1 } },
          {
            id: 3,
            label: "hide & ignore toggles",
            config: { hide: !0, ignore: !0 },
          },
        ],
      });
      (0, i.createExperiment)({
        kind: "user",
        id: "2023-09_mobile_redesign_override_toggles_t2",
        label: "Tabs V2 - redesign opt-out for T2",
        defaultConfig: { hide: !1 },
        treatments: [
          { id: 1, label: "show", config: { hide: !1 } },
          { id: 2, label: "hide", config: { hide: !0 } },
        ],
      });
      let s = () =>
          r.useExperiment({ location: "x" }, { autoTrackExposure: !1 }).ignore,
        a = () =>
          r.getCurrentConfig({ location: "x" }, { autoTrackExposure: !1 })
            .ignore;
    },
    693051: function (e, t, n) {
      "use strict";
      function i() {}
      n.r(t),
        n.d(t, {
          getRootNavigationRef: function () {
            return i;
          },
        });
    },
    139404: function (e, t, n) {
      "use strict";
      function i() {
        return !1;
      }
      function r() {
        return !1;
      }
      n.r(t),
        n.d(t, {
          useMobileRedesignDisabled: function () {
            return i;
          },
          isMobileRedesignDisabled: function () {
            return r;
          },
        });
    },
    61796: function (e, t, n) {
      "use strict";
      function i() {
        return !1;
      }
      n.r(t),
        n.d(t, {
          isMainTabsExperimentPlatformSupported: function () {
            return i;
          },
        });
    },
    264325: function (e, t, n) {
      "use strict";
      function i() {
        return !1;
      }
      function r() {
        return !1;
      }
      n.r(t),
        n.d(t, {
          useIsTabsUIEnabledManually: function () {
            return i;
          },
          isTabsUIEnabledManually: function () {
            return r;
          },
        });
    },
    18108: function (e, t, n) {
      "use strict";
      let i, r;
      n.r(t),
        n.d(t, {
          updateIsInTabsUI: function () {
            return u;
          },
        });
      var s = n("411916"),
        a = n("827032"),
        o = n("599110"),
        l = n("286235");
      function u(e) {
        i !== e &&
          ((i = e),
          (r = e),
          !(function () {
            let e = i
              ? r
                ? s.DesignIds.DESIGN_TABS_IA
                : s.DesignIds.DESIGN_IA
              : s.DesignIds.CLASSIC_IA;
            o.default.extendSuperProperties({ design_id: e }),
              a.addGlobalTag("design_id", e),
              l.default.setTags({ design_id: "".concat(e) });
          })());
      }
    },
    934306: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isOnNewPanels: function () {
            return a;
          },
          isSplitMessagesTab: function () {
            return o;
          },
          isSplitMessagesTabAndOnMessagesTab: function () {
            return l;
          },
          shouldHandleNewPanelsRoute: function () {
            return u;
          },
        });
      var i = n("21121"),
        r = n("491246"),
        s = n("49111");
      function a() {
        return (0, i.isInMainTabsExperiment)();
      }
      function o() {
        return (0, i.isInMainTabsExperiment)();
      }
      function l() {
        if (!o()) return !1;
        let e = (0, r.default)();
        return (null == e ? void 0 : e.name) === "messages";
      }
      function u(e) {
        return !!a() && null != e && e !== s.ME;
      }
    },
    491246: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        });
      var i = n("693051");
      function r() {
        let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : (0, i.getRootNavigationRef)(),
          t =
            (null == e ? void 0 : e.isReady()) === !0
              ? null == e
                ? void 0
                : e.getCurrentRoute()
              : void 0;
        return t;
      }
    },
    746800: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2022-11_rtx40xx_gpu_screenshare_with_av1",
        label:
          "Test how AV1 works on windows with RTX40xx GPUs for screenshare",
        defaultConfig: { signalAV1Support: !1 },
        treatments: [
          {
            id: 1,
            label: "Screenshare with AV1",
            config: { signalAV1Support: !0 },
          },
        ],
      });
    },
    967039: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        }),
        n("222007");
      var i = n("862205");
      let r = (0, i.createExperiment)({
        kind: "user",
        id: "2023-10_bandwidth_estimation_v1",
        label: "Bandwidth Estimation",
        defaultConfig: { enabled: !1, fullname: "" },
        treatments: [
          {
            id: 1,
            label: "Sender: Loss-Based BWE V2",
            config: {
              enabled: !0,
              fullname: "bandwidth_estimation/loss-based-bwe-v2/",
            },
          },
          {
            id: 2,
            label: "Sender: Robust Estimator",
            config: {
              enabled: !0,
              fullname: "bandwidth_estimation/robust-estimator/",
            },
          },
          {
            id: 3,
            label: "Sender: Loss-Based BWE V2 + Robust Estimator",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation/loss-based-bwe-v2,robust-estimator/",
            },
          },
          {
            id: 4,
            label: "Sender: Trendline Window Size",
            config: {
              enabled: !0,
              fullname: "bandwidth_estimation/trendline-window-size/",
            },
          },
          {
            id: 5,
            label: "Sender: Trendline Window Size + Robust Estimator",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation/trendline-window-size,robust-estimator/",
            },
          },
          {
            id: 6,
            label: "Worker: Loss-Based BWE V2",
            config: {
              enabled: !0,
              fullname: "bandwidth_estimation//loss-based-bwe-v2",
            },
          },
          {
            id: 7,
            label: "Worker: Robust Estimator",
            config: {
              enabled: !0,
              fullname: "bandwidth_estimation//robust-estimator",
            },
          },
          {
            id: 8,
            label: "Worker: Loss-Based BWE V2 + Robust Estimator",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation//loss-based-bwe-v2,robust-estimator",
            },
          },
          {
            id: 9,
            label: "Worker: Trendline Window Size",
            config: {
              enabled: !0,
              fullname: "bandwidth_estimation//trendline-window-size",
            },
          },
          {
            id: 10,
            label: "Worker: Trendline Window Size + Robust Estimator",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation//trendline-window-size,robust-estimator",
            },
          },
          {
            id: 11,
            label: "Sender + Worker: Trendline Window Size",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation/trendline-window-size/trendline-window-size",
            },
          },
          {
            id: 12,
            label: "Sender + Worker: Trendline Window Size + Robust Estimator",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation/trendline-window-size,robust-estimator/trendline-window-size,robust-estimator",
            },
          },
          {
            id: 13,
            label:
              "Sender + Worker: Loss-Based-BWE V2 + Trendline Window Size + Robust Estimator",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation/loss-based-bwe-v2,trendline-window-size,robust-estimator/loss-based-bwe-v2,trendline-window-size,robust-estimator",
            },
          },
          {
            id: 14,
            label:
              "Sender + Worker: Trendline Window Duration 50ms + Robust Estimator",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation/trendline-window-duration-50,robust-estimator/trendline-window-duration-50,robust-estimator",
            },
          },
          {
            id: 15,
            label:
              "Sender + Worker: Trendline Window Duration 100ms + Robust Estimator",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation/trendline-window-duration-100,robust-estimator/trendline-window-duration-100,robust-estimator",
            },
          },
          {
            id: 16,
            label:
              "Sender + Worker: Trendline Window Duration 250ms + Robust Estimator",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation/trendline-window-duration-250,robust-estimator/trendline-window-duration-250,robust-estimator",
            },
          },
          {
            id: 17,
            label:
              "Sender + Worker: Trendline Window Duration 500ms + Robust Estimator",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation/trendline-window-duration-500,robust-estimator/trendline-window-duration-500,robust-estimator",
            },
          },
          {
            id: 18,
            label:
              "Sender + Worker: Trendline Window Duration 1000ms + Robust Estimator",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation/trendline-window-duration-1000,robust-estimator/trendline-window-duration-1000,robust-estimator",
            },
          },
          {
            id: 19,
            label:
              "Sender + Worker: Trendline Window Duration 2500ms + Robust Estimator",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation/trendline-window-duration-2500,robust-estimator/trendline-window-duration-2500,robust-estimator",
            },
          },
          {
            id: 20,
            label:
              "Sender + Worker: Trendline Window Duration 3750ms + Robust Estimator",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation/trendline-window-duration-3750,robust-estimator/trendline-window-duration-3750,robust-estimator",
            },
          },
          {
            id: 21,
            label:
              "Sender + Worker: Trendline Window Duration 5000ms + Robust Estimator",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation/trendline-window-duration-5000,robust-estimator/trendline-window-duration-5000,robust-estimator",
            },
          },
          {
            id: 22,
            label:
              "Sender + Worker: Trendline Window Duration 6250ms + Robust Estimator",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation/trendline-window-duration-6250,robust-estimator/trendline-window-duration-6250,robust-estimator",
            },
          },
          {
            id: 23,
            label:
              "Sender + Worker: Trendline Window Duration 7500ms + Robust Estimator",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation/trendline-window-duration-7500,robust-estimator/trendline-window-duration-7500,robust-estimator",
            },
          },
          {
            id: 24,
            label:
              "Sender + Worker: Trendline Window Duration 3750ms + Robust Estimator + RC Link Capacity Fix (Worker-only)",
            config: {
              enabled: !0,
              fullname:
                "bandwidth_estimation/trendline-window-duration-3750,robust-estimator/trendline-window-duration-3750,robust-estimator,rate-control-link-capacity-fix",
            },
          },
        ],
      });
      var s = {
        getConfig(e, t) {
          let n = r.getCurrentConfig(
            { location: "e1c55b_1" },
            { autoTrackExposure: e }
          );
          return (
            !this.supportsBandwidthEstimationExperimentFullname(
              n.fullname,
              t
            ) && (n.enabled = !1),
            n
          );
        },
        supportsBandwidthEstimationExperimentFullname(e, t) {
          let n = this.getMediaEngineExperiments(e);
          if (null === n) return !1;
          for (let e of n) if (!t.includes(e)) return !1;
          return !0;
        },
        getMediaEngineExperiments(e) {
          let t = e.split("/");
          return 3 !== t.length || "bandwidth_estimation" !== t[0]
            ? null
            : t[1].split(",").filter(e => 0 !== e.length);
        },
      };
    },
    584687: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2023-09_decoupled_game_clipping",
        label: "Test decoupled game clipping",
        defaultConfig: { enableDecoupledGameClipping: !1 },
        treatments: [
          {
            id: 1,
            label: "Decoupled Game Clipping",
            config: { enableDecoupledGameClipping: !0 },
          },
        ],
      });
    },
    705500: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2023-06_h265_macos",
        label: "Test how h265 works on macos",
        defaultConfig: { signalH265SupportMacOS: !1 },
        treatments: [
          {
            id: 1,
            label: "Calling with H.265",
            config: { signalH265SupportMacOS: !0 },
          },
        ],
      });
    },
    238847: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2023-07_h265_for_windows_with_nvidia",
        label: "Test how h265 works on Windows with Nvidia nvenc codec",
        defaultConfig: { signalH265SupportNvenc: !1 },
        treatments: [
          {
            id: 1,
            label: "Calling with H.265",
            config: { signalH265SupportNvenc: !0 },
          },
        ],
      });
    },
    981699: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2021-06_hdr_screen_capture",
        label: "HDR Screen Capture",
        defaultConfig: { hdrCaptureMode: "never" },
        treatments: [
          { id: 1, label: "Always", config: { hdrCaptureMode: "always" } },
          {
            id: 2,
            label: "Permitted Devices Only",
            config: { hdrCaptureMode: "permittedDevicesOnly" },
          },
        ],
      });
    },
    352705: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "guild",
        id: "2024-01_windows_key_frame_interval",
        label: "Windows key frame interval",
        defaultConfig: { keyFrameIntervalMs: 0 },
        treatments: [
          { id: 1, label: "KFI 60000 ms", config: { keyFrameIntervalMs: 6e4 } },
          { id: 2, label: "KFI 70000 ms", config: { keyFrameIntervalMs: 7e4 } },
          { id: 3, label: "KFI 80000 ms", config: { keyFrameIntervalMs: 8e4 } },
          { id: 4, label: "KFI 90000 ms", config: { keyFrameIntervalMs: 9e4 } },
        ],
      });
    },
    140622: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2023-08_full_band_krisp_android_",
        label: "Let us control if full band is enabled on Android",
        defaultConfig: { allowSettingFullbandAndroid: !1 },
        treatments: [
          {
            id: 1,
            label: "Load full band krisp model",
            config: { allowSettingFullbandAndroid: !0 },
          },
        ],
      });
    },
    16001: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2021-08_max_sync_delay",
        label: "Overrides the default max sync delay for AV streams in WebRTC",
        defaultConfig: { maxSyncDelayOverride: 0 },
        treatments: [
          {
            id: 1,
            label: "Use 3 seconds as max sync delay",
            config: { maxSyncDelayOverride: 3e3 },
          },
        ],
      });
    },
    81734: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "guild",
        id: "2024-01_nvencadaptivekeyframe",
        label: "nvenc adaptive key frame interval",
        defaultConfig: { enableAdaptiveKeyFrame: !1 },
        treatments: [
          {
            id: 1,
            label: "enable adaptive key frame for nvenc",
            config: { enableAdaptiveKeyFrame: !0 },
          },
        ],
      });
    },
    813067: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2024-02_nvenc_new_presets",
        label: "nvenc new presets",
        defaultConfig: { nvEnableNewPresets: !1 },
        treatments: [
          {
            id: 1,
            label: "enable adaptive key frame for nvenc",
            config: { nvEnableNewPresets: !0 },
          },
        ],
      });
    },
    694845: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2023-12_nv_relaxed_rate_control",
        label: "Alternative rate control proposal for Nvidia encoder",
        defaultConfig: { nvMediumVbvSizeMs: 0 },
        treatments: [
          { id: 1, label: "250 ms", config: { nvMediumVbvSizeMs: 250 } },
          { id: 2, label: "500 ms", config: { nvMediumVbvSizeMs: 500 } },
          { id: 3, label: "1000 ms", config: { nvMediumVbvSizeMs: 1e3 } },
        ],
      });
    },
    631508: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2021-02_quartz_video_source",
        label: "Quartz Video Source",
        defaultConfig: { useQuartzCapturer: !1, allowScreenCaptureKit: !1 },
        treatments: [
          {
            id: 1,
            label: "gotta go fast",
            config: { useQuartzCapturer: !0, allowScreenCaptureKit: !1 },
          },
          {
            id: 2,
            label: "2fast 2furious",
            config: { useQuartzCapturer: !0, allowScreenCaptureKit: !0 },
          },
        ],
      });
    },
    368765: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2023-10_screencapturekit",
        label: "ScreenCaptureKit",
        defaultConfig: { allowScreenCaptureKit: !1 },
        treatments: [
          { id: 1, label: "enabled", config: { allowScreenCaptureKit: !0 } },
        ],
      });
    },
    403770: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          SecureFramesUserExperiment: function () {
            return r;
          },
          SecureFramesGuildExperiment: function () {
            return s;
          },
        });
      var i = n("862205");
      let r = (0, i.createExperiment)({
          kind: "user",
          id: "2023-08_secure_frames_encryption",
          label: "Allowing testing secure frames for voice/video",
          defaultConfig: {
            protocolVersionFloor: 0,
            canSupportSecureFrames: !1,
            canSupportMls: !1,
          },
          treatments: [
            {
              id: 1,
              label: "Can support secure frames for voice/video",
              config: {
                protocolVersionFloor: 7,
                canSupportSecureFrames: !0,
                canSupportMls: !1,
              },
            },
            {
              id: 2,
              label:
                "Can support secure frames for voice/video w/ MLS negotiation",
              config: {
                protocolVersionFloor: 7,
                canSupportSecureFrames: !0,
                canSupportMls: !0,
              },
            },
            {
              id: 3,
              label: "Can support secure frames above protocol version 8",
              config: {
                protocolVersionFloor: 8,
                canSupportSecureFrames: !0,
                canSupportMls: !1,
              },
            },
            {
              id: 4,
              label:
                "Can support secure frames above protocol version 108 (MLS)",
              config: {
                protocolVersionFloor: 8,
                canSupportSecureFrames: !0,
                canSupportMls: !0,
              },
            },
            {
              id: 5,
              label:
                "Can support secure frames above protocol version 109 (MLS)",
              config: {
                protocolVersionFloor: 9,
                canSupportSecureFrames: !0,
                canSupportMls: !0,
              },
            },
            {
              id: 6,
              label: "Can support secure frames above protocol version 10",
              config: {
                protocolVersionFloor: 10,
                canSupportSecureFrames: !0,
                canSupportMls: !1,
              },
            },
            {
              id: 7,
              label:
                "Can support secure frames above protocol version 110 (MLS)",
              config: {
                protocolVersionFloor: 10,
                canSupportSecureFrames: !0,
                canSupportMls: !0,
              },
            },
          ],
        }),
        s = (0, i.createExperiment)({
          kind: "guild",
          id: "2023-11_secure_frames_encryption_guilds",
          label: "Allowing testing secure frames for voice/video (Guilds)",
          defaultConfig: {
            protocolVersionFloor: 0,
            canSupportSecureFrames: !1,
            canSupportMls: !1,
          },
          treatments: [
            {
              id: 1,
              label: "Can support secure frames for voice/video",
              config: {
                protocolVersionFloor: 7,
                canSupportSecureFrames: !0,
                canSupportMls: !1,
              },
            },
            {
              id: 2,
              label:
                "Can support secure frames for voice/video w/ MLS negotiation",
              config: {
                protocolVersionFloor: 107,
                canSupportSecureFrames: !0,
                canSupportMls: !0,
              },
            },
            {
              id: 3,
              label: "Can support secure frames above protocol version 8",
              config: {
                protocolVersionFloor: 8,
                canSupportSecureFrames: !0,
                canSupportMls: !1,
              },
            },
            {
              id: 4,
              label:
                "Can support secure frames above protocol version 108 (MLS)",
              config: {
                protocolVersionFloor: 8,
                canSupportSecureFrames: !0,
                canSupportMls: !0,
              },
            },
            {
              id: 5,
              label:
                "Can support secure frames above protocol version 109 (MLS)",
              config: {
                protocolVersionFloor: 9,
                canSupportSecureFrames: !0,
                canSupportMls: !0,
              },
            },
            {
              id: 6,
              label: "Can support secure frames above protocol version 10",
              config: {
                protocolVersionFloor: 10,
                canSupportSecureFrames: !0,
                canSupportMls: !1,
              },
            },
            {
              id: 7,
              label:
                "Can support secure frames above protocol version 110 (MLS)",
              config: {
                protocolVersionFloor: 10,
                canSupportSecureFrames: !0,
                canSupportMls: !0,
              },
            },
          ],
        });
    },
    311482: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("862205");
      let r = (0, i.createExperiment)({
        kind: "user",
        id: "2024-01_auto_disable_video_mobile_v2",
        label: "Mobile performance: VideoHealthManager (v2)",
        defaultConfig: {
          featureEnabled: !1,
          windowLength: 5,
          allowedPoorFpsRatio: 1,
          fpsThreshold: 5,
          backoffTimeSec: 15,
        },
        treatments: [
          {
            id: 1,
            label:
              "5 second window, 100% allowed poor fps ratio, 5 fps threshold, 15 second backoff",
            config: {
              featureEnabled: !0,
              windowLength: 5,
              allowedPoorFpsRatio: 1,
              fpsThreshold: 5,
              backoffTimeSec: 15,
            },
          },
          {
            id: 2,
            label:
              "5 second window, 100% allowed poor fps ratio, 5 fps threshold, 10 second backoff",
            config: {
              featureEnabled: !0,
              windowLength: 5,
              allowedPoorFpsRatio: 1,
              fpsThreshold: 5,
              backoffTimeSec: 10,
            },
          },
          {
            id: 3,
            label:
              "10 second window, 70% allowed poor fps ratio, 5 fps threshold, 15 second backoff",
            config: {
              featureEnabled: !0,
              windowLength: 10,
              allowedPoorFpsRatio: 0.7,
              fpsThreshold: 5,
              backoffTimeSec: 15,
            },
          },
          {
            id: 4,
            label:
              "10 second window, 90% allowed poor fps ratio, 5 fps threshold, 15 second backoff",
            config: {
              featureEnabled: !0,
              windowLength: 10,
              allowedPoorFpsRatio: 0.9,
              fpsThreshold: 5,
              backoffTimeSec: 15,
            },
          },
        ],
      });
      var s = {
        isFeatureSupportedOnPlatform: () => !1,
        getConfig(e) {
          let t = r.getCurrentConfig(
            { location: "508d6c_1" },
            { autoTrackExposure: e }
          );
          return (
            !this.isFeatureSupportedOnPlatform() && (t.featureEnabled = !1), t
          );
        },
      };
    },
    940146: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return a;
          },
        });
      var i = n("862205"),
        r = n("718517");
      let s = (0, i.createExperiment)({
        kind: "user",
        id: "2023-10_video_hook_stale_frame_timeout",
        label: "Video Hook Stale Frame Timeout",
        defaultConfig: { videoHookStaleFrameTimeoutMs: 500 },
        treatments: [
          {
            id: 1,
            label: "1 second",
            config: {
              videoHookStaleFrameTimeoutMs: 1 * r.default.Millis.SECOND,
            },
          },
          {
            id: 2,
            label: "5 seconds",
            config: {
              videoHookStaleFrameTimeoutMs: 5 * r.default.Millis.SECOND,
            },
          },
          {
            id: 3,
            label: "10 seconds",
            config: {
              videoHookStaleFrameTimeoutMs: 10 * r.default.Millis.SECOND,
            },
          },
          {
            id: 4,
            label: "30 seconds",
            config: {
              videoHookStaleFrameTimeoutMs: 30 * r.default.Millis.SECOND,
            },
          },
          {
            id: 5,
            label: "60 seconds",
            config: {
              videoHookStaleFrameTimeoutMs: 60 * r.default.Millis.SECOND,
            },
          },
          {
            id: 5,
            label: "120 seconds",
            config: {
              videoHookStaleFrameTimeoutMs: 120 * r.default.Millis.SECOND,
            },
          },
        ],
      });
      var a = {
        getConfig: (e, t, n) =>
          e
            ? s.getCurrentConfig({ location: t }, { autoTrackExposure: n })
            : s.definition.defaultConfig,
      };
    },
    834604: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("862205");
      let r = (0, i.createExperiment)({
        kind: "user",
        id: "2023-08_video_quality_measurement_v1",
        label: "Video Quality Measurement",
        defaultConfig: { enabled: !1, measurement: "" },
        treatments: [
          {
            id: 1,
            label: "Measure PSNR [DEPRECATED DO NOT USE]",
            config: { enabled: !0, measurement: "psnr" },
          },
          {
            id: 2,
            label: "Measure PSNR Only",
            config: { enabled: !0, measurement: "imageQualityWebrtcPsnrDb" },
          },
          {
            id: 3,
            label: "Measure VMAF Only",
            config: { enabled: !0, measurement: "imageQualityVmaf_v061" },
          },
          {
            id: 4,
            label: "Measure PSNR and VMAF",
            config: {
              enabled: !0,
              measurement: "imageQualityWebrtcPsnrDb,imageQualityVmaf_v061",
            },
          },
          {
            id: 5,
            label: "Measure PSNR Only, 5000ms",
            config: {
              enabled: !0,
              measurement: "imageQualityWebrtcPsnrDb:5000",
            },
          },
          {
            id: 6,
            label: "Measure VMAF Only, 5000ms",
            config: { enabled: !0, measurement: "imageQualityVmaf_v061:5000" },
          },
          {
            id: 7,
            label: "Measure PSNR and VMAF, 5000ms",
            config: {
              enabled: !0,
              measurement:
                "imageQualityWebrtcPsnrDb:5000,imageQualityVmaf_v061:5000",
            },
          },
          {
            id: 8,
            label: "Measure PSNR Only, 10000ms",
            config: {
              enabled: !0,
              measurement: "imageQualityWebrtcPsnrDb:10000",
            },
          },
          {
            id: 9,
            label: "Measure VMAF Only, 10000ms",
            config: { enabled: !0, measurement: "imageQualityVmaf_v061:10000" },
          },
          {
            id: 10,
            label: "Measure PSNR and VMAF, 10000ms",
            config: {
              enabled: !0,
              measurement:
                "imageQualityWebrtcPsnrDb:10000,imageQualityVmaf_v061:10000",
            },
          },
          {
            id: 11,
            label: "Measure PSNR Only, 30000ms",
            config: {
              enabled: !0,
              measurement: "imageQualityWebrtcPsnrDb:30000",
            },
          },
          {
            id: 12,
            label: "Measure VMAF Only, 30000ms",
            config: { enabled: !0, measurement: "imageQualityVmaf_v061:30000" },
          },
          {
            id: 13,
            label: "Measure PSNR and VMAF, 30000ms",
            config: {
              enabled: !0,
              measurement:
                "imageQualityWebrtcPsnrDb:30000,imageQualityVmaf_v061:30000",
            },
          },
        ],
      });
      var s = {
        isFeatureSupportedOnPlatform: () => !0,
        getConfig(e) {
          let t = r.getCurrentConfig(
            { location: "e1c55b_1" },
            { autoTrackExposure: e }
          );
          return !this.isFeatureSupportedOnPlatform() && (t.enabled = !1), t;
        },
      };
    },
    355014: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2023-11_video_quality_measurement_hwdec",
        label: "Video Quality Measurement Hardware Decoding",
        defaultConfig: { extraOptions: "" },
        treatments: [
          { id: 0, label: "Control", config: { extraOptions: "" } },
          {
            id: 1,
            label: "Enabled, default 500ms buffer",
            config: { extraOptions: ",hwdec" },
          },
          {
            id: 2,
            label: "Enabled, 750ms buffer",
            config: { extraOptions: ",hwdec,staleFrameThresholdMs:750" },
          },
          {
            id: 3,
            label: "Enabled, 1s buffer",
            config: { extraOptions: ",hwdec,staleFrameThresholdMs:1000" },
          },
          {
            id: 4,
            label: "Disabled, 750ms buffer",
            config: { extraOptions: ",staleFrameThresholdMs:750" },
          },
          {
            id: 5,
            label: "Disabled, 1s buffer",
            config: { extraOptions: ",staleFrameThresholdMs:1000" },
          },
        ],
      });
    },
    353500: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2021-03_videotoolbox_rate_optimization",
        label: "VideoToolbox Rate Control Optimizations",
        defaultConfig: { useExperimentalRateControl: !1 },
        treatments: [
          { id: 1, label: "On", config: { useExperimentalRateControl: !0 } },
        ],
      });
    },
    103979: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = (0, n("862205").createExperiment)({
        kind: "user",
        id: "2023-10_viewer_clipping",
        label: "Test viewer side clipping",
        defaultConfig: { enableViewerClipping: !1, ignoreSenderPreference: !1 },
        treatments: [
          {
            id: 1,
            label: "Viewer Clipping enabled",
            config: { enableViewerClipping: !0, ignoreSenderPreference: !1 },
          },
          {
            id: 2,
            label: "Viewer Clipping enabled; For developer testing",
            config: { enableViewerClipping: !0, ignoreSenderPreference: !0 },
          },
        ],
      });
    },
    665862: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return a;
          },
        });
      var i = n("862205"),
        r = n("718517");
      let s = (0, i.createExperiment)({
        kind: "user",
        id: "2023-10_wgc_stale_frame_timeout",
        label: "Windows Graphics Capture Stale Frame Timeout",
        defaultConfig: { graphicsCaptureStaleFrameTimeoutMs: 500 },
        treatments: [
          {
            id: 1,
            label: "1 second",
            config: {
              graphicsCaptureStaleFrameTimeoutMs: 1 * r.default.Millis.SECOND,
            },
          },
          {
            id: 2,
            label: "5 seconds",
            config: {
              graphicsCaptureStaleFrameTimeoutMs: 5 * r.default.Millis.SECOND,
            },
          },
          {
            id: 3,
            label: "10 seconds",
            config: {
              graphicsCaptureStaleFrameTimeoutMs: 10 * r.default.Millis.SECOND,
            },
          },
          {
            id: 4,
            label: "30 seconds",
            config: {
              graphicsCaptureStaleFrameTimeoutMs: 30 * r.default.Millis.SECOND,
            },
          },
          {
            id: 5,
            label: "60 seconds",
            config: {
              graphicsCaptureStaleFrameTimeoutMs: 60 * r.default.Millis.SECOND,
            },
          },
          {
            id: 5,
            label: "120 seconds",
            config: {
              graphicsCaptureStaleFrameTimeoutMs: 120 * r.default.Millis.SECOND,
            },
          },
        ],
      });
      var a = {
        getConfig: (e, t, n) =>
          e
            ? s.getCurrentConfig({ location: t }, { autoTrackExposure: n })
            : s.definition.defaultConfig,
      };
    },
    591883: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("913144"),
        r = n("353927");
      function s(e, t) {
        i.default.wait(() => {
          i.default.dispatch({
            type: "AUDIO_SET_LOCAL_VIDEO_DISABLED",
            context: r.MediaEngineContextTypes.DEFAULT,
            userId: e,
            videoToggleState: t,
            persist: !1,
            isAutomatic: !0,
          });
        });
      }
    },
    222920: function (e, t, n) {
      "use strict";
      n.r(t),
        (0, n("862205").createExperiment)({
          kind: "user",
          id: "2021-09_ios_screenshare_resolution_profiles",
          label: "iOS: Screenshare resolution profiles",
          defaultConfig: { profile: 0 },
          treatments: [
            {
              id: 1,
              label: "Permanent old resolution",
              config: { profile: 1 },
            },
            { id: 2, label: "Old resolution for 10s", config: { profile: 2 } },
            {
              id: 3,
              label: "Wait 3s after 1st frame capture",
              config: { profile: 3 },
            },
            {
              id: 4,
              label: "Wait 3s to capture 1st frame",
              config: { profile: 4 },
            },
          ],
        });
    },
    122530: function (e, t, n) {
      "use strict";
      let i, r;
      n.r(t),
        n.d(t, {
          default: function () {
            return l;
          },
          setVideoToggleAnalyticsParams: function () {
            return u;
          },
        });
      var s = n("599110"),
        a = n("311482"),
        o = n("49111");
      function l(e, t, n) {
        let {
          featureEnabled: l,
          windowLength: u,
          allowedPoorFpsRatio: c,
          fpsThreshold: d,
          backoffTimeSec: f,
        } = a.default.getConfig(!1);
        s.default.track(o.AnalyticEvents.VIDEO_TOGGLED, {
          video_toggle_reason: t,
          toggled_user_id: e,
          rtc_connection_id: null == i ? void 0 : i(),
          media_session_id: null == r ? void 0 : r(),
          video_health_manager_window_length: l ? u : null,
          video_health_manager_poor_fps_ratio: l ? c : null,
          video_health_manager_fps_threshold: l ? d : null,
          is_video_shown: n,
          video_health_manager_backoff_time_seconds: l ? f : null,
        });
      }
      function u(e, t) {
        (i = e), (r = t);
      }
    },
    827032: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          addGlobalTag: function () {
            return r;
          },
          getGlobalTagsArray: function () {
            return s;
          },
        });
      let i = {};
      function r(e, t) {
        i[e] = t;
      }
      function s() {
        return Object.keys(i).map(e => "".concat(e, ":").concat(i[e]));
      }
    },
    489269: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        });
      var i = n("913144"),
        r = class e {
          static setPermission(e, t) {
            i.default.dispatch({
              type: "SET_NATIVE_PERMISSION",
              permissionType: e,
              state: t,
            });
          }
        };
    },
    426685: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          NativePermissionBaseUtils: function () {
            return u;
          },
        }),
        n("70102");
      var i = n("599110"),
        r = n("489269"),
        s = n("581892"),
        a = n("180524"),
        o = n("49111"),
        l = n("782340");
      class u {
        async requestAuthorization(e, t, n) {
          if ("function" != typeof t)
            throw Error(
              "requestAuthorization: Was provided with not a function for ".concat(
                e,
                "."
              )
            );
          i.default.track(o.AnalyticEvents.PERMISSIONS_REQUESTED, { type: e });
          let s = (await t()) === a.NativePermissionStatus.AUTHORIZED,
            l = s
              ? a.NativePermissionStates.ACCEPTED
              : a.NativePermissionStates.DENIED;
          return (
            r.default.setPermission(e, l),
            !s && n.showAuthorizationError && this.showAlert(e),
            s
          );
        }
        requestPermission(e, t) {
          let n = u.defaultNativePermissionsRequestOptions(t);
          return this.requestPermissionCore(e, n);
        }
        hasPermission(e, t) {
          let n = u.defaultNativePermissionsRequestOptions(t);
          return this.hasPermissionCore(e, n);
        }
        showAlert(e) {
          let t = {
              [a.NativePermissionTypes.CAMERA]: ""
                .concat(l.default.Messages.NO_CAMERA_ACCESS, ". ")
                .concat(l.default.Messages.ENABLE_PRIVACY_ACCESS),
              [a.NativePermissionTypes.AUDIO]: ""
                .concat(l.default.Messages.NO_MICRPHONE_ACCESS, ". ")
                .concat(l.default.Messages.ENABLE_PRIVACY_ACCESS),
              [a.NativePermissionTypes.PHOTOS]: ""
                .concat(l.default.Messages.NO_PHOTOS_ACCESS, ". ")
                .concat(l.default.Messages.ENABLE_PRIVACY_ACCESS),
              [a.NativePermissionTypes.INPUT_MONITORING]: ""
                .concat(l.default.Messages.NO_INPUT_MONITORING_ACCESS, ". ")
                .concat(l.default.Messages.ENABLE_PRIVACY_ACCESS),
              [a.NativePermissionTypes.CONTACTS]: ""
                .concat(l.default.Messages.NO_CONTACTS_ACCESS, ". ")
                .concat(l.default.Messages.ENABLE_PRIVACY_ACCESS),
            },
            n = t[e];
          null != n &&
            this.openAlertModal({
              title: l.default.Messages.SYSTEM_PERMISSION_GRANT,
              body: n,
              onConfirm: () => this.openSettings(e),
              cancelText: l.default.Messages.CANCEL,
              confirmText: l.default.Messages.DEVICE_SETTINGS,
            });
        }
        static defaultNativePermissionsRequestOptions(e) {
          let t = { showAuthorizationError: !0 };
          return null == e ? t : { ...t, ...e };
        }
        constructor() {
          this.storage = new s.default();
        }
      }
    },
    180524: function (e, t, n) {
      "use strict";
      var i, r, s, a, o, l, u, c;
      n.r(t),
        n.d(t, {
          NativePermissionStatus: function () {
            return i;
          },
          NativePermissionStates: function () {
            return r;
          },
          NativePermissionTypes: function () {
            return s;
          },
        }),
        ((o = i || (i = {})).AUTHORIZED = "authorized"),
        (o.DENIED = "denied"),
        (o.RESTRICTED = "restricted"),
        (o.UNDETERMINED = "undetermined"),
        ((l = r || (r = {})).DISMISSED = "dismissed"),
        (l.DENIED = "denied"),
        (l.ACCEPTED = "accepted"),
        (l.NO_DEVICES = "no_devices"),
        (l.ERROR = "error"),
        (l.NONE = "none"),
        ((u = s || (s = {})).AUDIO = "audio"),
        (u.CAMERA = "camera"),
        (u.STORAGE = "storage"),
        (u.NOTIFICATIONS = "notifications"),
        (u.PHOTOS = "photos"),
        (u.CONTACTS = "contacts"),
        (u.INPUT_MONITORING = "input_monitoring"),
        (u.SCREEN_RECORDING = "screen_recording"),
        ((c = a || (a = {}))[(c.UNDETERMINED = 0)] = "UNDETERMINED"),
        (c[(c.DENIED = 1)] = "DENIED"),
        (c[(c.AUTHORIZED = 2)] = "AUTHORIZED"),
        (c[(c.PROVISIONAL = 3)] = "PROVISIONAL"),
        (c[(c.EPHEMERAL = 4)] = "EPHEMERAL");
    },
    66265: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return c;
          },
        });
      var i = n("913144"),
        r = n("316272"),
        s = n("773336"),
        a = n("197881"),
        o = n("180524"),
        l = n("49111");
      class u extends r.default {
        isEnabled() {
          return (
            (0, s.isDesktop)() &&
            (0, s.isMac)() &&
            !a.ProcessArgs.isDiscordTestSet()
          );
        }
        _initialize() {
          this.isEnabled() &&
            i.default.subscribe("AUDIO_SET_MODE", this.handleAudioSetMode);
        }
        _terminate() {
          this.isEnabled() &&
            i.default.unsubscribe("AUDIO_SET_MODE", this.handleAudioSetMode);
        }
        handleAudioSetMode(e) {
          let { mode: t } = e;
          if (t === l.InputModes.PUSH_TO_TALK) {
            let e = n("928609").default;
            e.requestPermission(o.NativePermissionTypes.INPUT_MONITORING);
          }
        }
      }
      var c = new u();
    },
    581892: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return c;
          },
        });
      var i = n("446674"),
        r = n("913144"),
        s = n("599110"),
        a = n("180524"),
        o = n("49111");
      let l = { permissionStates: {} };
      class u extends i.default.DeviceSettingsStore {
        initialize(e) {
          l = null != e ? e : l;
        }
        getUserAgnosticState() {
          return l;
        }
        hasPermission(e) {
          let t = l.permissionStates,
            n = t[e];
          return null != n && n === a.NativePermissionStates.ACCEPTED;
        }
        handleSetNativePermission(e) {
          let { state: t, permissionType: n } = e,
            i = l.permissionStates,
            r = i[n];
          (i[n] = t),
            r !== t &&
              s.default.track(o.AnalyticEvents.PERMISSIONS_ACKED, {
                type: n,
                action: t,
                previous_action: null != r ? r : a.NativePermissionStates.NONE,
              });
        }
        constructor() {
          super(r.default, {
            SET_NATIVE_PERMISSION: e => this.handleSetNativePermission(e),
          });
        }
      }
      (u.displayName = "NativePermissionStore"),
        (u.persistKey = "NativePermissionsStore");
      var c = u;
    },
    912067: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("426685");
      class r extends i.NativePermissionBaseUtils {
        requestPermissionCore(e, t) {
          return Promise.resolve(!0);
        }
        hasPermissionCore(e, t) {
          return Promise.resolve(!0);
        }
        openSettings(e) {}
        didHavePermission(e) {
          return !0;
        }
        openAlertModal(e) {}
      }
      var s = new r();
    },
    928609: function (e, t, n) {
      "use strict";
      let i;
      n.r(t),
        n.d(t, {
          NativePermissionsRequestOptions: function () {
            return o.NativePermissionsRequestOptions;
          },
          default: function () {
            return l;
          },
        });
      var r = n("773336"),
        s = n("197881"),
        a = n("66265"),
        o = n("426685");
      a.default.initialize();
      var l = (i = s.ProcessArgs.isDiscordTestSet()
        ? n("912067").default
        : (0, r.isDesktop)()
          ? n("401717").default
          : n("912067").default);
    },
    401717: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return l;
          },
        }),
        n("222007");
      var i = n("404118"),
        r = n("50885"),
        s = n("426685"),
        a = n("180524");
      class o extends s.NativePermissionBaseUtils {
        requestPermissionCore(e, t) {
          var n;
          return this.asyncify(
            null === (n = this.nativeUtils) || void 0 === n
              ? void 0
              : n.nativePermssionRequestAuthorization,
            e,
            t
          );
        }
        hasPermissionCore(e, t) {
          var n;
          return this.asyncify(
            null === (n = this.nativeUtils) || void 0 === n
              ? void 0
              : n.nativePermssionHasAuthorization,
            e,
            t
          );
        }
        asyncify(e, t, n) {
          let i = o.requestTypeLookup[t];
          return void 0 === i
            ? Promise.resolve(!0)
            : this.requestAuthorization(
                t,
                () =>
                  null == e
                    ? Promise.resolve(a.NativePermissionStatus.AUTHORIZED)
                    : new Promise((t, n) => e(t, i)),
                n
              );
        }
        openSettings(e) {
          var t;
          if (
            (null === (t = this.nativeUtils) || void 0 === t
              ? void 0
              : t.nativePermissionOpenSettings) == null
          )
            return;
          let n = o.requestTypeLookup[e];
          void 0 !== n && this.nativeUtils.nativePermissionOpenSettings(n);
        }
        didHavePermission(e) {
          return this.storage.hasPermission(e);
        }
        openAlertModal(e) {
          let {
            title: t,
            body: n,
            onConfirm: r,
            cancelText: s,
            confirmText: a,
          } = e;
          i.default.show({
            title: t,
            body: n,
            onConfirm: r,
            cancelText: s,
            confirmText: a,
          });
        }
        constructor(...e) {
          super(...e), (this.nativeUtils = r.default.getDiscordUtils());
        }
      }
      o.requestTypeLookup = {
        [a.NativePermissionTypes.CAMERA]: r.NativePermissionRequestType.Camera,
        [a.NativePermissionTypes.AUDIO]:
          r.NativePermissionRequestType.Microphone,
        [a.NativePermissionTypes.PHOTOS]: r.NativePermissionRequestType.Photo,
        [a.NativePermissionTypes.INPUT_MONITORING]:
          r.NativePermissionRequestType.InputMonitoring,
        [a.NativePermissionTypes.SCREEN_RECORDING]:
          r.NativePermissionRequestType.ScreenRecording,
      };
      var l = new o();
    },
    76618: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          AccountNotificationFlags: function () {
            return i;
          },
        }),
        ((r = i || (i = {}))[(r.USE_NEW_NOTIFICATIONS = 16)] =
          "USE_NEW_NOTIFICATIONS"),
        (r[(r.MENTION_ON_ALL_MESSAGES = 32)] = "MENTION_ON_ALL_MESSAGES");
    },
    640497: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          NotificationsExperiment: function () {
            return r;
          },
          UnreadsEntryPointExperiment: function () {
            return s;
          },
        });
      var i = n("862205");
      let r = (0, i.createExperiment)({
          kind: "user",
          id: "2023-11_totally_benign_and_non_controversial_notification_tweaks",
          label: "Notification Changes",
          defaultConfig: { enabled: !1 },
          treatments: [
            {
              id: 1,
              label:
                "Use the unfinished, not ready, and totally benign notification tweaks",
              config: { enabled: !0 },
            },
          ],
        }),
        s = (0, i.createExperiment)({
          kind: "user",
          id: "2024-01_unreads",
          label: "Unreads Experiment (grey-dot mode)",
          defaultConfig: { logExposure: !1, autoOpen: !1, manuallyOpen: !1 },
          treatments: [
            {
              id: 0,
              label: "Control",
              config: { logExposure: !0, autoOpen: !1, manuallyOpen: !1 },
            },
            {
              id: 1,
              label: "Auto open migration",
              config: { logExposure: !0, autoOpen: !0, manuallyOpen: !1 },
            },
            {
              id: 2,
              label: "Manually open migration",
              config: { logExposure: !1, autoOpen: !1, manuallyOpen: !0 },
            },
          ],
        });
    },
    6791: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          OVERLAY_SUPPORTED: function () {
            return _;
          },
          OverlayNudgeTypes: function () {
            return u;
          },
          getOverlayNotificationGroup: function () {
            return S;
          },
          OverlayNotificationGroup: function () {
            return d;
          },
          OverlayNotificationType: function () {
            return f;
          },
          OverlayNotificationAction: function () {
            return E;
          },
          BackgroundOpacityClasses: function () {
            return m;
          },
          OverlayMethod: function () {
            return p;
          },
          OpacityBounds: function () {
            return T;
          },
        });
      var i,
        r,
        s,
        a,
        o,
        l,
        u,
        c,
        d,
        f,
        E,
        p,
        h = n("773336");
      let _ = h.isPlatformEmbedded && ((0, h.isWindows)() || !1);
      function S(e) {
        switch (e) {
          case "News Nudge":
          case "Welcome Nudge":
          case "Go Live Nudge":
          case "Go Live Non Voice Nudge":
          case "Start Broadcast Notification":
            return 0;
          case "Text Chat":
            return 1;
          case "Activity User Join":
          case "Activity Invite":
            return 3;
          case "Incoming Call":
            return 2;
          case "Clips Reminder Notification":
          case "Clips Notification":
            return 4;
          default:
            return 5;
        }
      }
      ((i = u || (u = {}))[(i.WELCOME = 0)] = "WELCOME"),
        (i[(i.NEWS = 1)] = "NEWS"),
        (i[(i.GO_LIVE_VOICE = 2)] = "GO_LIVE_VOICE"),
        (i[(i.GO_LIVE_NON_VOICE = 3)] = "GO_LIVE_NON_VOICE"),
        (i[(i.BROADCAST = 4)] = "BROADCAST"),
        (i[(i.KEYBIND_INDICATORS = 5)] = "KEYBIND_INDICATORS"),
        ((r = c || (c = {})).PRIMARY = "PRIMARY"),
        (r.BRAND = "BRAND"),
        (r.DANGER = "DANGER"),
        ((s = d || (d = {}))[(s.Nudge = 0)] = "Nudge"),
        (s[(s.TextChat = 1)] = "TextChat"),
        (s[(s.VoiceCall = 2)] = "VoiceCall"),
        (s[(s.Activity = 3)] = "Activity"),
        (s[(s.Clips = 4)] = "Clips"),
        (s[(s.Other = 5)] = "Other"),
        ((a = f || (f = {})).NewsNudge = "News Nudge"),
        (a.WelcomeNudge = "Welcome Nudge"),
        (a.TextChat = "Text Chat"),
        (a.ActivityUserJoin = "Activity User Join"),
        (a.ActivityInvite = "Activity Invite"),
        (a.IncomingCall = "Incoming Call"),
        (a.GoLiveNudge = "Go Live Nudge"),
        (a.GoLiveNonVoiceNudge = "Go Live Non Voice Nudge"),
        (a.OverlayCrashed = "Overlay Crashed"),
        (a.StartBroadcastNotification = "Start Broadcast Notification"),
        (a.ClipsReminderNotification = "Clips Reminder Notification"),
        (a.ClipsNotification = "Clips Notification"),
        (a.KeybindIndicatorsNotification = "Keybind Indicators Notification"),
        ((o = E || (E = {}))[(o.Viewed = 0)] = "Viewed"),
        (o[(o.Clicked = 1)] = "Clicked");
      let m = Object.freeze({
        LOW: "background-opacity-low",
        MEDIUM: "background-opacity-medium",
        HIGH: "background-opacity-high",
        FULL: "background-opacity-full",
        DISABLED: null,
      });
      ((l = p || (p = {}))[(l.Disabled = 0)] = "Disabled"),
        (l[(l.Hook = 1)] = "Hook"),
        (l[(l.OutOfProcess = 2)] = "OutOfProcess");
      let T = Object.freeze({ BOTTOM: 0, LOWER: 0.25, UPPER: 0.75, TOP: 1 });
    },
    32128: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          OverlayStoredSettings: function () {
            return o;
          },
        });
      var i,
        r,
        s = n("95410"),
        a = n("6791");
      ((i = r || (r = {})).Version1 = "OverlayStore"),
        (i.Version2 = "overlayEnabled"),
        (i.Version3 = "OverlayStore3");
      class o {
        static get enabled() {
          return o.load().enabled;
        }
        static get methodOverride() {
          return o.load().methodOverride;
        }
        static update(e) {
          let t = o.load();
          "boolean" == typeof e.enabled && (t.enabled = e.enabled),
            "methodOverride" in e && (t.methodOverride = e.methodOverride),
            t.save();
        }
        save() {
          let e = {
            enabled: this.enabled,
            methodOverride: this.methodOverride,
          };
          s.default.set("OverlayStore3", e);
        }
        static load() {
          return null == o._loaded && (o._loaded = o.loadInternal()), o._loaded;
        }
        static loadInternal() {
          let e = void 0,
            t = s.default.get("OverlayStore");
          if (null != t) {
            let n =
                "boolean" == typeof t.enabled ? t.enabled : a.OVERLAY_SUPPORTED,
              i = new o(n, e);
            return i.save(), s.default.remove("OverlayStore"), i;
          }
          let n = s.default.get("overlayEnabled");
          if (null != n) {
            let t = "boolean" == typeof n ? n : a.OVERLAY_SUPPORTED,
              i = new o(t, e);
            return i.save(), s.default.remove("overlayEnabled"), i;
          }
          let i = s.default.get("OverlayStore3");
          if (null != i) {
            var r, l;
            return new o(
              null !== (r = i.enabled) && void 0 !== r
                ? r
                : a.OVERLAY_SUPPORTED,
              null !== (l = i.methodOverride) && void 0 !== l ? l : e
            );
          }
          let u = new o(a.OVERLAY_SUPPORTED, e);
          return u.save(), u;
        }
        constructor(e, t) {
          (this.enabled = e), (this.methodOverride = t);
        }
      }
      o._loaded = null;
    },
    53118: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("862205");
      let r = (0, i.createExperiment)({
        id: "2023-11_adyen_auth_without_capture",
        label: "Adyen auth without capture rollout",
        kind: "user",
        defaultConfig: { enabled: !1 },
        treatments: [{ id: 1, label: "Enabled", config: { enabled: !0 } }],
      });
      var s = r;
    },
    400205: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return d;
          },
        });
      var i = n("446674"),
        r = n("913144"),
        s = n("517001"),
        a = n("646718");
      let o = "OverridePremiumTypeStore",
        l = {
          premiumTypeOverride: a.UNSELECTED_PREMIUM_TYPE_OVERRIDE,
          premiumTypeActual: a.UNSELECTED_PREMIUM_TYPE_OVERRIDE,
        };
      function u(e) {
        let { user: t } = e;
        l.premiumTypeActual = (0, s.getPremiumTypeFromRawValue)(t.premium_type);
      }
      class c extends i.default.PersistedStore {
        initialize(e) {
          if (null != e) {
            l = e;
            return;
          }
          l.premiumTypeOverride = a.UNSELECTED_PREMIUM_TYPE_OVERRIDE;
        }
        getPremiumTypeOverride() {
          return l.premiumTypeOverride;
        }
        getPremiumTypeActual() {
          return l.premiumTypeActual;
        }
        getState() {
          return l;
        }
        get premiumType() {
          return l.premiumTypeOverride;
        }
      }
      (c.displayName = o), (c.persistKey = o);
      var d = new c(r.default, {
        SET_PREMIUM_TYPE_OVERRIDE: function (e) {
          let { premiumType: t } = e;
          l.premiumTypeOverride = t;
        },
        CURRENT_USER_UPDATE: u,
        CONNECTION_OPEN: u,
      });
    },
    646718: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          PremiumTypes: function () {
            return i;
          },
          UNSELECTED_PREMIUM_TYPE_OVERRIDE: function () {
            return F;
          },
          PREMIUM_TYPE_OVERRIDE_OPTIONS: function () {
            return V;
          },
          PremiumTypeOrder: function () {
            return B;
          },
          PREMIUM_SUBSCRIPTION_APPLICATION: function () {
            return H;
          },
          PremiumSubscriptionSKUs: function () {
            return r;
          },
          ACTIVE_PREMIUM_SKUS: function () {
            return j;
          },
          PremiumSubscriptionSKUToPremiumType: function () {
            return Y;
          },
          SubscriptionPlans: function () {
            return s;
          },
          PREMIUM_PLANS: function () {
            return W;
          },
          PREMIUM_TIER_2_PLANS: function () {
            return K;
          },
          PREMIUM_GUILD_SUBSCRIPTION_PLANS: function () {
            return z;
          },
          MULTI_MONTH_PLANS: function () {
            return q;
          },
          PREMIUM_MONTHLY_PLANS: function () {
            return X;
          },
          PREMIUM_SKU_TO_MONTHLY_PLAN: function () {
            return Q;
          },
          PREMIUM_SKU_TO_YEARLY_PLAN: function () {
            return Z;
          },
          SubscriptionIntervalTypes: function () {
            return a;
          },
          SubscriptionPlanInfo: function () {
            return J;
          },
          GUILD_BOOST_COST_FOR_PREMIUM_USER_DISCOUNT_PERCENT: function () {
            return $;
          },
          NUM_FREE_GUILD_BOOSTS_WITH_PREMIUM: function () {
            return ee;
          },
          DEFAULT_MAX_GRACE_PERIOD_DAYS: function () {
            return et;
          },
          PAID_SUBSCRIPTION_MAX_GRACE_PERIOD_DAYS: function () {
            return en;
          },
          MAX_ACCOUNT_HOLD_DAYS: function () {
            return ei;
          },
          BLACK_FRIDAY_2020_GIFT_CODE_BATCH_ID: function () {
            return er;
          },
          STICKERS_GIFT_CODE_BATCH_ID: function () {
            return es;
          },
          USER_PREMIUM_SUBSCRIPTION_TRIAL_EXPIRES_APPROACHING_5_DAY_THRESHOLD:
            function () {
              return ea;
            },
          MAX_PAYMENT_PROCESSING_TIME_DAYS: function () {
            return eo;
          },
          PREMIUM_TIER_2_LIKELIHOOD_TRIAL_ID: function () {
            return el;
          },
          PREMIUM_TIER_2_REACTIVATION_TRIAL_ID: function () {
            return eu;
          },
          PREMIUM_TIER_2_HFU_ONE_WEEK_TRIAL_ID: function () {
            return ec;
          },
          PREMIUM_TIER_2_HFU_TWO_WEEK_TRIAL_ID: function () {
            return ed;
          },
          PREMIUM_TIER_2_HFU_ONE_MONTH_TRIAL_ID: function () {
            return ef;
          },
          PREMIUM_TIER_2_AUTH3_TRIAL_ID: function () {
            return eE;
          },
          PREMIUM_TIER_0_LIKELIHOOD_TRIAL_ID: function () {
            return eh;
          },
          PREMIUM_TIER_2_LIKELIHOOD_DISCOUNT_ID: function () {
            return e_;
          },
          PREMIUM_TIER_2_REACTIVATION_DISCOUNT_ID: function () {
            return eS;
          },
          SubscriptionTrials: function () {
            return em;
          },
          PremiumUpsellTypes: function () {
            return o;
          },
          PurchasedFlags: function () {
            return l;
          },
          SKU_ID_PURCHASED_FLAGS: function () {
            return eT;
          },
          MAX_PREMIUM_TIER_0_ATTACHMENT_SIZE: function () {
            return eg;
          },
          IncrementalStickerCountsByTier: function () {
            return eI;
          },
          TotalStickerCountsByTier: function () {
            return eC;
          },
          TotalSoundboardSoundCountsByTier: function () {
            return ev;
          },
          BoostedGuildFeatures: function () {
            return eA;
          },
          ORDERED_PREMIUM_SUBSCRIPTION_PLANS: function () {
            return eR;
          },
          AnalyticsPremiumFeatureNames: function () {
            return u;
          },
          AnalyticsPremiumFeatureTiers: function () {
            return c;
          },
          DISCOUNTS: function () {
            return eN;
          },
          StreamQualities: function () {
            return d;
          },
          StreamQualitiesToPremiumType: function () {
            return eO;
          },
          PremiumMarketingEntrypoints: function () {
            return f;
          },
          PremiumHeaderThemes: function () {
            return E;
          },
          PremiumGiftStyles: function () {
            return p;
          },
          InboundPromotionErrorCodes: function () {
            return h;
          },
          PromotionFlags: function () {
            return eD;
          },
          PremiumUserLimits: function () {
            return ey;
          },
          BoostingUpsellAction: function () {
            return m;
          },
          ReferralTrialsAnalyticSteps: function () {
            return T;
          },
          LegacyPricingCountries: function () {
            return eP;
          },
          LegacySeasonalGiftStyles: function () {
            return eL;
          },
          SeasonalGiftStyles2023: function () {
            return eb;
          },
          AllSeasonalGiftStyles: function () {
            return eM;
          },
        }),
        n("222007");
      var i,
        r,
        s,
        a,
        o,
        l,
        u,
        c,
        d,
        f,
        E,
        p,
        h,
        _,
        S,
        m,
        T,
        g,
        I,
        C,
        v,
        A,
        R,
        N,
        O,
        D,
        y,
        P,
        L,
        b,
        M,
        U,
        G,
        w,
        k = n("49111"),
        x = n("958706");
      ((g = i || (i = {}))[(g.TIER_1 = 1)] = "TIER_1"),
        (g[(g.TIER_2 = 2)] = "TIER_2"),
        (g[(g.TIER_0 = 3)] = "TIER_0");
      let F = void 0,
        V = [
          { value: null, label: "Non-Nitro" },
          { value: 3, label: "Basic" },
          { value: 1, label: "Classic" },
          { value: 2, label: "Standard" },
        ],
        B = Object.freeze({ 3: 0, 1: 1, 2: 2 }),
        H = "521842831262875670";
      ((I = r || (r = {})).NONE = "628379670982688768"),
        (I.TIER_0 = "978380684370378762"),
        (I.TIER_1 = "521846918637420545"),
        (I.TIER_2 = "521847234246082599"),
        (I.GUILD = "590663762298667008"),
        (I.LEGACY = "521842865731534868");
      let j = [
          "628379670982688768",
          "978380684370378762",
          "521846918637420545",
          "521847234246082599",
          "590663762298667008",
        ],
        Y = Object.freeze({
          "978380684370378762": 3,
          "521846918637420545": 1,
          "521847234246082599": 2,
          "521842865731534868": 2,
        });
      ((C = s || (s = {})).NONE_MONTH = "628379151761408000"),
        (C.NONE_YEAR = "628381571568631808"),
        (C.PREMIUM_MONTH_TIER_0 = "978380692553465866"),
        (C.PREMIUM_YEAR_TIER_0 = "1024422698568122368"),
        (C.PREMIUM_MONTH_TIER_1 = "511651871736201216"),
        (C.PREMIUM_YEAR_TIER_1 = "511651876987469824"),
        (C.PREMIUM_MONTH_TIER_2 = "511651880837840896"),
        (C.PREMIUM_YEAR_TIER_2 = "511651885459963904"),
        (C.PREMIUM_MONTH_GUILD = "590665532894740483"),
        (C.PREMIUM_YEAR_GUILD = "590665538238152709"),
        (C.NONE_3_MONTH = "944265614527037440"),
        (C.NONE_6_MONTH = "944265636643602432"),
        (C.PREMIUM_3_MONTH_TIER_2 = "642251038925127690"),
        (C.PREMIUM_6_MONTH_TIER_2 = "944037208325619722"),
        (C.PREMIUM_3_MONTH_GUILD = "944037355453415424"),
        (C.PREMIUM_6_MONTH_GUILD = "944037391444738048"),
        (C.PREMIUM_MONTH_LEGACY = "511651856145973248"),
        (C.PREMIUM_YEAR_LEGACY = "511651860671627264");
      let W = new Set([
          "978380692553465866",
          "1024422698568122368",
          "511651871736201216",
          "511651876987469824",
          "511651880837840896",
          "642251038925127690",
          "944037208325619722",
          "511651885459963904",
          "511651856145973248",
          "511651860671627264",
        ]),
        K = new Set([
          "511651880837840896",
          "642251038925127690",
          "944037208325619722",
          "511651885459963904",
        ]),
        z = new Set([
          "590665532894740483",
          "944037355453415424",
          "944037391444738048",
          "590665538238152709",
        ]),
        q = new Set([
          "642251038925127690",
          "944037208325619722",
          "944037355453415424",
          "944037391444738048",
        ]),
        X = new Set([
          "978380692553465866",
          "511651871736201216",
          "511651880837840896",
        ]),
        Q = Object.freeze({
          "978380684370378762": "978380692553465866",
          "521846918637420545": "511651871736201216",
          "521847234246082599": "511651880837840896",
          "628379670982688768": void 0,
          "590663762298667008": void 0,
          "521842865731534868": void 0,
        }),
        Z = Object.freeze({
          "978380684370378762": "1024422698568122368",
          "521846918637420545": "511651876987469824",
          "521847234246082599": "511651885459963904",
          "628379670982688768": void 0,
          "590663762298667008": void 0,
          "521842865731534868": void 0,
        });
      ((v = a || (a = {}))[(v.MONTH = 1)] = "MONTH"),
        (v[(v.YEAR = 2)] = "YEAR"),
        (v[(v.DAY = 3)] = "DAY");
      let J = Object.freeze({
          628379151761408000: {
            id: "628379151761408000",
            name: "None Monthly",
            skuId: "628379670982688768",
            interval: 1,
            intervalCount: 1,
          },
          "628381571568631808": {
            id: "628381571568631808",
            name: "None Yearly",
            skuId: "628379670982688768",
            interval: 2,
            intervalCount: 1,
          },
          "978380692553465866": {
            id: "978380692553465866",
            name: "Nitro Basic Monthly",
            premiumType: 3,
            skuId: "978380684370378762",
            interval: 1,
            intervalCount: 1,
          },
          "1024422698568122368": {
            id: "1024422698568122368",
            name: "Nitro Basic Yearly",
            premiumType: 3,
            skuId: "978380684370378762",
            interval: 2,
            intervalCount: 1,
          },
          "511651871736201216": {
            id: "511651871736201216",
            name: "Nitro Classic Monthly",
            premiumType: 1,
            skuId: "521846918637420545",
            interval: 1,
            intervalCount: 1,
          },
          "511651876987469824": {
            id: "511651876987469824",
            name: "Nitro Classic Yearly",
            premiumType: 1,
            skuId: "521846918637420545",
            interval: 2,
            intervalCount: 1,
          },
          "511651880837840896": {
            id: "511651880837840896",
            name: "Nitro Monthly",
            premiumType: 2,
            skuId: "521847234246082599",
            interval: 1,
            intervalCount: 1,
          },
          "511651885459963904": {
            id: "511651885459963904",
            name: "Nitro Yearly",
            premiumType: 2,
            skuId: "521847234246082599",
            interval: 2,
            intervalCount: 1,
          },
          "590665532894740483": {
            id: "590665532894740483",
            name: "Nitro Server Boost Monthly",
            skuId: "590663762298667008",
            interval: 1,
            intervalCount: 1,
          },
          "590665538238152709": {
            id: "590665538238152709",
            name: "Nitro Server Boost Yearly",
            skuId: "590663762298667008",
            interval: 2,
            intervalCount: 1,
          },
          "642251038925127690": {
            id: "642251038925127690",
            name: "Nitro Three Month",
            premiumType: 2,
            skuId: "521847234246082599",
            interval: 1,
            intervalCount: 3,
          },
          "944037208325619722": {
            id: "944037208325619722",
            name: "Nitro Six Month",
            premiumType: 2,
            skuId: "521847234246082599",
            interval: 1,
            intervalCount: 6,
          },
          "944037355453415424": {
            id: "944037355453415424",
            name: "Nitro Server Boost Three Month",
            skuId: "590663762298667008",
            interval: 1,
            intervalCount: 3,
          },
          "944037391444738048": {
            id: "944037391444738048",
            name: "Nitro Server Boost Six Month",
            skuId: "590663762298667008",
            interval: 1,
            intervalCount: 6,
          },
          "944265614527037440": {
            id: "944265614527037440",
            name: "None Three Month",
            skuId: "628379670982688768",
            interval: 1,
            intervalCount: 3,
          },
          "944265636643602432": {
            id: "944265636643602432",
            name: "None Six Month",
            skuId: "628379670982688768",
            interval: 1,
            intervalCount: 6,
          },
          "511651856145973248": {
            id: "511651856145973248",
            name: "Nitro Monthly (Legacy)",
            premiumType: 2,
            skuId: "521842865731534868",
            interval: 1,
            intervalCount: 1,
          },
          "511651860671627264": {
            id: "511651860671627264",
            name: "Nitro Classic Yearly (Legacy)",
            premiumType: 2,
            skuId: "521842865731534868",
            interval: 2,
            intervalCount: 1,
          },
        }),
        $ = 30,
        ee = 2,
        et = 3,
        en = 7,
        ei = 30,
        er = "775514091874680832",
        es = "845031178288889946",
        ea = 432e6,
        eo = 14,
        el = "520373071933079552",
        eu = "902329034132684800",
        ec = "983601860436819968",
        ed = "983601860436819969",
        ef = "984244797441048577",
        eE = "1004850445463584768",
        ep = "1073698058383917056",
        eh = "1070132870233980928",
        e_ = "1150904354090532864",
        eS = "1199128659810582528",
        em = Object.freeze({
          [el]: { id: el, skus: ["521847234246082599"] },
          [eu]: { id: eu, skus: ["521847234246082599"] },
          [ec]: { id: ec, skus: ["521847234246082599"] },
          [ed]: { id: ed, skus: ["521847234246082599"] },
          [ef]: { id: ef, skus: ["521847234246082599"] },
          [eE]: { id: eE, skus: ["521847234246082599"] },
          [eh]: { id: eh, skus: ["978380684370378762"] },
          [ep]: { id: ep, skus: ["521847234246082599"] },
        });
      ((A = o || (o = {})).ANIMATED_GUILD_BANNER_TOOLTIP =
        "animated_guild_banner_tooltip"),
        (A.EMOJI_PICKER_SEARCH = "emoji_picker_search"),
        (A.EMOJI_PICKER_EMOJI_CLICKED = "emoji_picker_emoji_clicked"),
        (A.EMOJI_PICKER_STICKER_CLICKED = "emoji_picker_sticker_clicked"),
        (A.EMOJI_PICKER_REACTION_EMOJI_CLICKED =
          "emoji_picker_reaction_emoji_clicked"),
        (A.EMOJI_PICKER_SUPER_REACTION_EMOJI_CLICKED =
          "emoji_picker_super_reaction_emoji_clicked"),
        (A.EMOJI_PICKER_STATUS_EMOJI_CLICKED =
          "emoji_picker_status_emoji_clicked"),
        (A.EMOJI_PICKER_TOP_SERVER_EMOJI_CLICKED =
          "emoji_picker_top_server_emoji_clicked"),
        (A.EMOJI_PICKER_NEWLY_ADDED_EMOJI_CLICKED =
          "emoji_picker_newly_added_emoji_clicked"),
        (A.EMOJI_AUTOSUGGEST_CLICKED = "emoji_autosuggest_clicked"),
        (A.EMOJI_AUTOCOMPLETE_INLINE = "emoji_autocomplete_inline"),
        (A.EMOJI_AUTOCOMPLETE_MODAL = "emoji_autocomplete_modal"),
        (A.EMOJI_IN_MESSAGE_HOVER = "emoji_in_message_hover"),
        (A.EMOJI_IN_REACTION_HOVER = "emoji_in_reaction_hover"),
        (A.EMOJI_IN_BURST_REACTION_HOVER = "emoji_in_burst_reaction_hover"),
        (A.EMOJI_IN_BURST_REACTION_HOVER_UPSELL =
          "emoji_in_burst_reaction_hover_upsell"),
        (A.STICKER_IN_MESSAGE_HOVER = "sticker_in_message_hover"),
        (A.EMPTY_STICKER_PICKER_UPSELL = "empty_sticker_picker_upsell"),
        (A.STREAM_QUALITY_INDICATOR = "stream_quality_indicator"),
        (A.GIFT_STREAM_QUALITY_INDICATOR = "gift_stream_quality_indicator"),
        (A.STREAM_QUALITY_UPSELL = "stream_quality_upsell"),
        (A.MESSAGE_LENGTH_UPSELL = "message_length_upsell"),
        (A.MESSAGE_LENGTH_IN_EDITOR_UPSELL = "message_length_in_editor_upsell"),
        (A.CUSTOM_PROFILE_UPSELL = "custom profiles upsell modal"),
        (A.CUSTOM_PROFILE_TRY_OUT_UPSELL =
          "try out custom profile in settings upsell"),
        (A.VIDEO_BACKGROUNDS_MODAL = "video backgrounds modal"),
        (A.VIDEO_BACKGROUNDS_INLINE = "video backgrounds inline"),
        (A.GUILD_CAP_INLINE_SERVER_LIST = "guild_cap_inline_server_list"),
        (A.GUILD_PREMIUM_UPSELL_MODAL = "premium guild premium upsell modal"),
        (A.GUILD_CAP_INLINE_INVITE_MODAL = "guild_cap_inline_invite_modal"),
        (A.GUILD_CAP_MODAL_UPSELL = "guild_cap_modal_upsell"),
        (A.PREMIUM_GUILD_IDENTITY_MODAL =
          "premium guild identity upsell alert"),
        (A.CUSTOM_PROFILE_SETTINGS_BANNER_BUTTON =
          "custom profiles settings banner upsell"),
        (A.CUSTOM_PROFILES_PROFILE_BANNER_SOCIAL_UPSELL =
          "custom profiles profile banner social upsell"),
        (A.STICKER_PICKER_UPSELL = "sticker_picker_upsell"),
        (A.ANIMATED_AVATAR_PREVIEW_GIF_MODAL =
          "animated avatar preview gif modal"),
        (A.PREMIUM_PROGRESS_BAR = "premium_progress_bar_tooltip"),
        (A.INVITE_SPLASH_UPSELL = "premium_invite_splash_upsell"),
        (A.ANIMATED_USER_AVATAR_MODAL = "animated user avatar upsell modal"),
        (A.UPLOAD_ERROR_UPSELL = "upload error upsell"),
        (A.PREMIUM_GUILD_MEMBER_PROFILE_UPSELL_INLINE =
          "premium guild member profile upsell inline"),
        (A.CONCURRENT_ACTIVITIES = "Concurrent Activities"),
        (A.PREMIUM_UNCANCEL_WINBACK_MODAL_VIEWED =
          "premium_uncancel_winback_modal_viewed"),
        (A.ANIMATED_VIDEO_BACKGROUND_NEW_PRESET =
          "animated_video_background_new_preset"),
        (A.LOW_PRICE_EXPERIMENT_TOOLTIP = "low_price_experiment_tooltip"),
        (A.PREMIUM_PROFILE_BADGE_UPSELL = "premium_profile_badge_upsell"),
        (A.AGGREGATE_PREMIUM_UPSELL_MODAL_FEATURE_EMOJI = "emoji"),
        (A.AGGREGATE_PREMIUM_UPSELL_MODAL_FEATURE_PROFILE_CUSTOMIZATION =
          "profile customization"),
        (A.AGGREGATE_PREMIUM_UPSELL_MODAL_FEATURE_HD_STREAMING =
          "hd streaming"),
        (A.AGGREGATE_PREMIUM_UPSELL_MODAL_FEATURE_LARGER_FILE_UPLOADS =
          "larger file uploads"),
        (A.AGGREGATE_PREMIUM_UPSELL_MODAL_FEATURE_BOGO = "bogo"),
        (A.VOICE_CHANNEL_EFFECTS_UPSELL = "voice_channel_effects_upsell"),
        (A.VOICE_CHANNEL_EFFECTS_BAR_EMOJI_UPSELL =
          "Voice Channel Effect Bar Emoji Upsell"),
        (A.VOICE_CHANNEL_EFFECTS_TOGGLE_CLICKED =
          "voice_channel_effects_toggle_clicked"),
        (A.VOICE_CHANNEL_EFFECTS_TOGGLE_CLICKED_EXPANDED =
          "voice_channel_effects_toggle_clicked_expanded"),
        (A.PROFILE_THEME_UPSELL_MODAL = "profile_theme_upsell_modal"),
        (A.PROFILE_EFFECTS_INLINE_SETTINGS = "profile_effects_inline_settings"),
        (A.PROFILE_EFFECTS_INLINE_SETTINGS_MOBILE =
          "profile_effects_inline_settings_mobile"),
        (A.HIGH_VIDEO_QUALITY_UPSELL = "high_video_quality_upsell"),
        (A.PREMIUM_PROFILE_TRY_IT_OUT = "premium_profile_try_it_out"),
        (A.BURST_REACTION_RAIL_UPSELL = "burst_reaction_rail_upsell"),
        (A.BURST_REACTION_UPSELL = "burst_reaction_upsell"),
        (A.BURST_REACTION_QUICK_ACTION_UPSELL =
          "burst_reaction_quick_action_upsell"),
        (A.BURST_REACTION_CONTEXT_MENU_UPSELL =
          "burst_reaction_context_menu_upsell"),
        (A.PREMIUM_CLIENT_THEME_TRY_IT_OUT = "premium_client_theme_try_it_out"),
        (A.PREMIUM_CLIENT_THEME_SETTINGS_UPSELL =
          "premium_client_theme_settings_upsell"),
        (A.VIDEO_STAGE_LIMIT = "video_stage_limit"),
        (A.SOUND_PICKER_SOUND_CLICKED = "sound_picker_sound_clicked"),
        (A.APP_ICON_UPSELL = "app_icon_upsell"),
        (A.COLLECTIBLES_SHOP = "collectibles_shop"),
        (A.COLLECTIBLES_PROFILE_SETTINGS_UPSELL =
          "collectibles_profile_settings_upsell"),
        (A.COLLECTIBLES_PREMIUM_MARKETING_PAGE_UPSELL =
          "collectibles_premium_marketing_page_upsell"),
        (A.CLIPS_GUILD_SIDEBAR_COACHMARK_PREMIUM_EARLY_ACCESS_UPSELL =
          "clips_guild_sidebar_coachmark_premium_early_access_upsell"),
        (A.CLIPS_GO_LIVE_PREMIUM_EARLY_ACCESS_ROADBLOCK_UPSELL =
          "clips_go_live_premium_early_access_roadblock_upsell"),
        ((R = l || (l = {}))[(R.PREMIUM_TIER_1 = 1)] = "PREMIUM_TIER_1"),
        (R[(R.PREMIUM_TIER_2 = 2)] = "PREMIUM_TIER_2"),
        (R[(R.GUILD_BOOST = 4)] = "GUILD_BOOST"),
        (R[(R.PREMIUM_TIER_0 = 8)] = "PREMIUM_TIER_0");
      let eT = Object.freeze({
          "978380684370378762": 8,
          "521846918637420545": 1,
          "521847234246082599": 2,
          "590663762298667008": 4,
        }),
        eg = 52428800,
        eI = {
          [k.BoostedGuildTiers.NONE]: 5,
          [k.BoostedGuildTiers.TIER_1]: 10,
          [k.BoostedGuildTiers.TIER_2]: 15,
          [k.BoostedGuildTiers.TIER_3]: 30,
        },
        eC = {
          [k.BoostedGuildTiers.NONE]: eI[k.BoostedGuildTiers.NONE],
          [k.BoostedGuildTiers.TIER_1]:
            eI[k.BoostedGuildTiers.NONE] + eI[k.BoostedGuildTiers.TIER_1],
          [k.BoostedGuildTiers.TIER_2]:
            eI[k.BoostedGuildTiers.NONE] +
            eI[k.BoostedGuildTiers.TIER_1] +
            eI[k.BoostedGuildTiers.TIER_2],
          [k.BoostedGuildTiers.TIER_3]:
            eI[k.BoostedGuildTiers.NONE] +
            eI[k.BoostedGuildTiers.TIER_1] +
            eI[k.BoostedGuildTiers.TIER_2] +
            eI[k.BoostedGuildTiers.TIER_3],
        },
        ev = {
          [k.BoostedGuildTiers.NONE]: 8,
          [k.BoostedGuildTiers.TIER_1]: 24,
          [k.BoostedGuildTiers.TIER_2]: 36,
          [k.BoostedGuildTiers.TIER_3]: 48,
        },
        eA = Object.freeze({
          [k.BoostedGuildTiers.NONE]: {
            features: [],
            limits: {
              emoji: x.EMOJI_MAX_SLOTS,
              bitrate: k.BITRATE_MAX,
              fileSize: k.MAX_ATTACHMENT_SIZE,
              screenShareQualityFramerate: 30,
              screenShareQualityResolution: "720p",
              soundboardSounds: ev[k.BoostedGuildTiers.NONE],
              maxConcurrentActivities: 2,
              stickers: eC[k.BoostedGuildTiers.NONE],
              stageVideoUsers: k.MAX_STAGE_VIDEO_USER_LIMIT_TIER01,
            },
          },
          [k.BoostedGuildTiers.TIER_1]: {
            features: [
              k.GuildFeatures.INVITE_SPLASH,
              k.GuildFeatures.ANIMATED_ICON,
            ],
            limits: {
              emoji: 100,
              bitrate: 128e3,
              fileSize: k.MAX_ATTACHMENT_SIZE,
              screenShareQualityFramerate: 60,
              screenShareQualityResolution: "720p",
              soundboardSounds: ev[k.BoostedGuildTiers.TIER_1],
              maxConcurrentActivities: 3,
              stickers: eC[k.BoostedGuildTiers.TIER_1],
              stageVideoUsers: k.MAX_STAGE_VIDEO_USER_LIMIT_TIER01,
            },
          },
          [k.BoostedGuildTiers.TIER_2]: {
            features: [
              k.GuildFeatures.INVITE_SPLASH,
              k.GuildFeatures.ANIMATED_ICON,
              k.GuildFeatures.BANNER,
              k.GuildFeatures.ROLE_ICONS,
            ],
            limits: {
              emoji: 150,
              bitrate: 256e3,
              fileSize: 52428800,
              screenShareQualityFramerate: 60,
              screenShareQualityResolution: "1080p",
              soundboardSounds: ev[k.BoostedGuildTiers.TIER_2],
              maxConcurrentActivities: 5,
              stickers: eC[k.BoostedGuildTiers.TIER_2],
              stageVideoUsers: k.MAX_STAGE_VIDEO_USER_LIMIT_TIER2,
            },
          },
          [k.BoostedGuildTiers.TIER_3]: {
            features: [
              k.GuildFeatures.INVITE_SPLASH,
              k.GuildFeatures.ANIMATED_ICON,
              k.GuildFeatures.BANNER,
              k.GuildFeatures.ANIMATED_BANNER,
              k.GuildFeatures.VANITY_URL,
              k.GuildFeatures.ROLE_ICONS,
            ],
            limits: {
              emoji: 250,
              bitrate: 384e3,
              fileSize: 104857600,
              screenShareQualityFramerate: 60,
              screenShareQualityResolution: "1080p",
              soundboardSounds: ev[k.BoostedGuildTiers.TIER_3],
              maxConcurrentActivities: Number.MAX_SAFE_INTEGER,
              stickers: eC[k.BoostedGuildTiers.TIER_3],
              stageVideoUsers: k.MAX_STAGE_VIDEO_USER_LIMIT_TIER3,
            },
          },
        }),
        eR = [
          "978380692553465866",
          "1024422698568122368",
          "511651871736201216",
          "511651876987469824",
          "511651880837840896",
          "642251038925127690",
          "944037208325619722",
          "511651885459963904",
        ];
      ((N = u || (u = {})).SOUNDBOARD_PLAY = "soundboard play"),
        (N.PROFILE_THEME_COLOR = "profile_theme_color"),
        (N.PROFILE_BANNER = "profile_banner"),
        (N.ANIMATED_AVATAR = "animated_avatar"),
        (N.AVATAR_DECORATION = "avatar_decoration"),
        (N.CLIENT_THEME = "client_theme"),
        (N.SHARED_CANVAS = "shared_canvas"),
        (N.PROFILE_EFFECT = "profile_effect"),
        ((O = c || (c = {})).FREE = "free"),
        (O.PREMIUM_STANDARD = "premium-standard");
      let eN = {
        "1024422698568122368": 16,
        "511651876987469824": 16,
        "511651885459963904": 16,
        "944037208325619722": 8,
        "642251038925127690": 5,
      };
      ((D = d || (d = {})).HIGH_STREAMING_QUALITY = "high_streaming_quality"),
        (D.MID_STREAMING_QUALITY = "mid_streaming_quality");
      let eO = Object.freeze({
        high_streaming_quality: 2,
        mid_streaming_quality: 1,
      });
      ((y = f || (f = {}))[(y.UserSettings = 0)] = "UserSettings"),
        (y[(y.ApplicationStoreHome = 1)] = "ApplicationStoreHome"),
        ((P = E || (E = {}))[(P.DEFAULT = 0)] = "DEFAULT"),
        (P[(P.WINTER = 1)] = "WINTER"),
        ((L = p || (p = {}))[(L.SNOWGLOBE = 1)] = "SNOWGLOBE"),
        (L[(L.BOX = 2)] = "BOX"),
        (L[(L.CUP = 3)] = "CUP"),
        (L[(L.STANDARD_BOX = 4)] = "STANDARD_BOX"),
        (L[(L.CAKE = 5)] = "CAKE"),
        (L[(L.CHEST = 6)] = "CHEST"),
        (L[(L.COFFEE = 7)] = "COFFEE"),
        (L[(L.SEASONAL_STANDARD_BOX = 8)] = "SEASONAL_STANDARD_BOX"),
        (L[(L.SEASONAL_CAKE = 9)] = "SEASONAL_CAKE"),
        (L[(L.SEASONAL_CHEST = 10)] = "SEASONAL_CHEST"),
        (L[(L.SEASONAL_COFFEE = 11)] = "SEASONAL_COFFEE"),
        ((b = h || (h = {})).USER_NOT_VERIFIED = "user_not_verified"),
        (b.NO_CODE_BODY = "no_code_body"),
        (b.NO_PROMOTION = "no_promotion"),
        (b.CODE_CLAIMED = "code_claimed"),
        (b.EXISTING_SUBSCRIBER = "existing_subscriber"),
        (b.PREVIOUS_SUBSCRIBER = "previous_subscriber"),
        (b.BLOCKED_PAYMENT = "blocked_payment");
      let eD = Object.freeze({
          IS_BLOCKED_IOS: 32,
          IS_OUTBOUND_REDEEMABLE_BY_TRIAL_USERS: 64,
          SUPPRESS_NOTIFICATION: 128,
        }),
        ey = Object.freeze({
          3: { fileSize: eg },
          1: { fileSize: 52428800 },
          2: { fileSize: 524288e3 },
        });
      ((M = _ || (_ = {})).EXPLORE_ALL_PERKS_CLICKED =
        "explore_all_perks_clicked"),
        (M.HELPER_COLLAPSED = "helper_collapsed"),
        (M.HELPER_UNCOLLAPSED = "helper_uncollapsed"),
        (M.UNLOCK_EMOJI_CLICKED = "unlock_emoji_clicked"),
        (M.CUSTOM_PROFILES_CLICKED = "custom_profiles_clicked"),
        (M.SERVER_BOOSTS_CLICKED = "server_boosts_clicked"),
        (M.HELPER_DISMISSED = "premium_feature_helper_dismissed"),
        (M.HELPER_RENDERED = "premium_feature_helper_rendered"),
        ((U = S || (S = {})).EMOJI_TUTORIAL_STARTED = "emoji_tutorial_started"),
        (U.EMOJI_INTRO_VIEWED = "emoji_intro_viewed"),
        (U.EMOJI_PROMPT_VIEWED = "emoji_prompt_viewed"),
        (U.CUSTOM_PROFILE_TUTORIAL_STARTED = "custom_profile_tutorial_started"),
        (U.CUSTOM_PROFILE_AVATAR_INTRO_VIEWED =
          "custom_profile_avatar_intro_viewed"),
        (U.CUSTOM_PROFILE_AVATAR_DECORATIONS_VIEWED =
          "custom_profile_avatar_decorations_viewed"),
        (U.CUSTOM_PROFILE_BANNER_INTRO_VIEWED =
          "custom_profile_banner_intro_viewed"),
        (U.CUSTOM_PROFILE_THEME_INTRO_VIEWED =
          "custom_profile_theme_intro_viewed"),
        (U.SERVER_PROFILE_INTRO_VIEWED = "server_profile_intro_viewed"),
        (U.SERVER_BOOST_TUTORIAL_STARTED = "server_boost_tutorial_started"),
        (U.BOOST_INTRO_VIEWED = "boost_intro_viewed"),
        (U.BOOST_PROMPT_VIEWED = "boost_prompt_viewed"),
        ((G = m || (m = {})).BOOST = "boost"),
        (G.DISMISS = "dismiss"),
        ((w = T || (T = {})).BADGE_TOOLTIP_VIEWED =
          "share_nitro_bagde_tooltip_viewed"),
        (w.BADGE_CLICKED = "share_nitro_badge_clicked"),
        (w.FLOW_STARTED = "share_nitro_flow_started"),
        (w.FLOW_COMPLETED = "share_nitro_flow_completed");
      let eP = new Set(["PL", "TR"]),
        eL = [1, 2, 3],
        eb = [8, 9, 11, 10],
        eM = eb.concat(eL);
    },
    45120: function (e, t, n) {
      "use strict";
      var i;
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        (i = class {
          constructor(e, t, n) {
            (this.name = e),
              (this.description = n),
              (this.getFeatureValue = t),
              Object.defineProperty(this, "getFeatureValue", {
                value: t,
                configurable: !1,
                writable: !1,
              });
          }
        });
    },
    240577: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getBasePlanIdForSubscriptionItems: function () {
            return r;
          },
        });
      var i = n("646718");
      function r(e, t, n) {
        let r = e.find(e => {
          let t = i.SubscriptionPlanInfo[e.planId];
          return null != t && null != t.premiumType;
        });
        if (null == r) {
          if (e.length > 0) {
            let r = i.SubscriptionPlanInfo[e[0].planId];
            (t = r.interval), (n = r.intervalCount);
          }
          return (function (e) {
            let t =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : 1,
              n = Object.keys(i.SubscriptionPlanInfo).find(n => {
                let r = i.SubscriptionPlanInfo[n];
                return (
                  null != r &&
                  r.skuId === i.PremiumSubscriptionSKUs.NONE &&
                  r.interval === e &&
                  r.intervalCount === t
                );
              });
            return null != n ? n : i.SubscriptionPlans.NONE_MONTH;
          })(t, n);
        }
        return r.planId;
      }
    },
    643619: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          coalesceInvoiceItems: function () {
            return s;
          },
          createInvoiceItemFromServer: function () {
            return a;
          },
        }),
        n("222007"),
        n("424973");
      var i = n("917351"),
        r = n.n(i);
      function s(e) {
        let t = (e, t) =>
            e.subscriptionPlanId === t.subscriptionPlanId &&
            e.subscriptionPlanPrice === t.subscriptionPlanPrice &&
            e.amount === t.amount &&
            r.isEqual(e.discounts, t.discounts),
          n = [],
          i = new Set();
        e.map(e => {
          for (let r of n)
            if (t(r, e)) {
              i.add(r.subscriptionPlanId), (r.quantity += e.quantity);
              return;
            }
          n.push({ ...e });
        });
        let s = n.map(e => {
          let t = { ...e };
          return (
            i.has(e.subscriptionPlanId) &&
              ((t.amount = t.amount * t.quantity),
              (t.discounts = t.discounts.map(e => ({
                ...e,
                amount: e.amount * t.quantity,
              })))),
            t
          );
        });
        return s;
      }
      function a(e) {
        return {
          id: e.id,
          subscriptionPlanId: e.subscription_plan_id,
          subscriptionPlanPrice: e.subscription_plan_price,
          amount: e.amount,
          quantity: e.quantity,
          discounts: e.discounts,
        };
      }
    },
    432155: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ANIMATED_EMOJIS: function () {
            return d;
          },
          EMOJIS_EVERYWHERE: function () {
            return f;
          },
          STICKERS_EVERYWHERE: function () {
            return E;
          },
          SOUNDBOARD_EVERYWHERE: function () {
            return p;
          },
          CUSTOM_CALL_SOUNDS: function () {
            return h;
          },
          ANIMATED_AVATAR: function () {
            return _;
          },
          CUSTOM_DISCRIMINATOR: function () {
            return S;
          },
          PREMIUM_GUILD_MEMBER_PROFILE: function () {
            return m;
          },
          PROFILE_BADGES: function () {
            return T;
          },
          PROFILE_PREMIUM_FEATURES: function () {
            return g;
          },
          COLLECTIBLES: function () {
            return I;
          },
          APP_ICONS: function () {
            return C;
          },
          CLIENT_THEMES: function () {
            return v;
          },
          BOOST_DISCOUNT: function () {
            return A;
          },
          FREE_BOOSTS: function () {
            return R;
          },
          HOST_PREMIUM_ACTIVITIES: function () {
            return N;
          },
          STREAM_MID_QUALITY: function () {
            return O;
          },
          STREAM_HIGH_QUALITY: function () {
            return D;
          },
          FANCY_VOICE_CHANNEL_REACTIONS: function () {
            return y;
          },
          INSTALL_PREMIUM_APPLICATIONS: function () {
            return P;
          },
          REDEEM_PREMIUM_PERKS: function () {
            return L;
          },
          VIDEO_FILTER_ASSETS: function () {
            return b;
          },
          INCREASED_GUILD_LIMIT: function () {
            return M;
          },
          INCREASED_MESSAGE_LENGTH: function () {
            return U;
          },
          INCREASED_VIDEO_UPLOAD_QUALITY: function () {
            return G;
          },
          UPLOAD_LARGE_FILES: function () {
            return w;
          },
          canUserUse: function () {
            return x;
          },
        });
      var i = n("605250"),
        r = n("886551"),
        s = n("45120"),
        a = n("715757"),
        o = n("646718");
      let l = new i.default("ProductCatalog.tsx"),
        u = Object.freeze({
          [o.PremiumTypes.TIER_0]: o.PremiumSubscriptionSKUs.TIER_0,
          [o.PremiumTypes.TIER_1]: o.PremiumSubscriptionSKUs.TIER_1,
          [o.PremiumTypes.TIER_2]: o.PremiumSubscriptionSKUs.TIER_2,
        });
      class c extends s.default {
        constructor(e, t) {
          super(
            e,
            e =>
              (function (e, t) {
                if (null == t || null == t.premiumType) return !1;
                try {
                  let n = u[t.premiumType];
                  if (null == n)
                    return (
                      l.warn(
                        "Cannot find the corresponding SKU to the user's premium type ".concat(
                          t.premiumType
                        )
                      ),
                      !1
                    );
                  let i = k[n];
                  if (null == i)
                    return (
                      l.warn(
                        "Cannot find the corresponding product catalog entry to the user's SKU "
                          .concat(n, " and premium type ")
                          .concat(t.premiumType)
                      ),
                      !1
                    );
                  return i.skuFeatures.includes(e);
                } catch (e) {
                  var n;
                  l.error(
                    "Error while retrieving user's feature access: ".concat(
                      null !== (n = e.message) && void 0 !== n
                        ? n
                        : JSON.stringify(e)
                    )
                  );
                }
                return !1;
              })(this, e),
            t
          );
        }
      }
      let d = new c("animatedEmojis"),
        f = new c("emojisEverywhere"),
        E = new c("stickersEverywhere"),
        p = new c("soundboardEverywhere"),
        h = new c("customCallSounds"),
        _ = new c("animatedAvatar"),
        S = new c("customDiscriminator"),
        m = new c("premiumGuildMemberProfile"),
        T = new c("profileBadges"),
        g = new c(
          "profilePremiumFeatures",
          "custom banner and avatar decoration"
        ),
        I = new c("collectibles"),
        C = new c("appIcons"),
        v = new c("clientThemes"),
        A = new c("boostDiscount"),
        R = new c("freeBoosts"),
        N = new c("hostPremiumActivities"),
        O = new c("streamMidQuality"),
        D = new c("streamHighQuality"),
        y = new c("fancyVoiceChannelReactions"),
        P = new c("installPremiumApplications"),
        L = new c("redeemPremiumPerks"),
        b = new c("videoFilterAssets");
      new s.default("increasedFileUploadSize", r.getUserMaxFileSize);
      let M = new c("increasedGuildLimit"),
        U = new c("increasedMessageLength"),
        G = new c("increasedVideoUploadQuality"),
        w = new c("uploadLargeFiles"),
        k = Object.freeze({
          [o.PremiumSubscriptionSKUs.TIER_0]: new a.default(
            o.PremiumSubscriptionSKUs.TIER_0,
            [d, f, E, T, b, G, w, C]
          ),
          [o.PremiumSubscriptionSKUs.TIER_1]: new a.default(
            o.PremiumSubscriptionSKUs.TIER_1,
            [d, f, _, S, T, A, O, y, G, w, C]
          ),
          [o.PremiumSubscriptionSKUs.TIER_2]: new a.default(
            o.PremiumSubscriptionSKUs.TIER_2,
            [
              d,
              f,
              E,
              p,
              h,
              _,
              S,
              m,
              T,
              g,
              v,
              A,
              R,
              N,
              O,
              D,
              y,
              P,
              L,
              b,
              M,
              U,
              G,
              w,
              C,
              I,
            ]
          ),
        });
      function x(e, t) {
        return e.getFeatureValue(t);
      }
    },
    715757: function (e, t, n) {
      "use strict";
      var i;
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        (i = class {
          constructor(e, t) {
            (this.skuId = e), (this.skuFeatures = t);
          }
        });
    },
    193302: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("862205");
      let r = (0, i.createExperiment)({
        kind: "user",
        id: "2023-10_dcf_holdout",
        label: "DCF Holdout",
        defaultConfig: { enabled: !1 },
        treatments: [
          {
            id: 1,
            label: "Users will only see DCs that bypass the holdout",
            config: { enabled: !0 },
          },
        ],
      });
      var s = r;
    },
    669073: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          TrialRedemptionDefaultPlanExperiment: function () {
            return r;
          },
        });
      var i = n("862205");
      let r = (0, i.createExperiment)({
        kind: "user",
        id: "2023-03_trial_redemption_default_to_monthly_plan",
        label: "Trial Redemption Default To Monthly Plan",
        defaultConfig: { defaultToMonthlyPlan: !1 },
        treatments: [
          {
            id: 1,
            label: "Set default plan to monthly plan",
            config: { defaultToMonthlyPlan: !0 },
          },
        ],
      });
    },
    946028: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          createPrivateChannelIntegration: function () {
            return r;
          },
        });
      var i = n("653047");
      function r(e) {
        return { ...e, application: i.default.createFromServer(e.application) };
      }
    },
    133335: function (e, t, n) {
      "use strict";
      var i, r, s, a;
      n.r(t),
        n.d(t, {
          ReadStateTypes: function () {
            return i;
          },
          UnreadSetting: function () {
            return r;
          },
        }),
        ((s = i || (i = {}))[(s.CHANNEL = 0)] = "CHANNEL"),
        (s[(s.GUILD_EVENT = 1)] = "GUILD_EVENT"),
        (s[(s.NOTIFICATION_CENTER = 2)] = "NOTIFICATION_CENTER"),
        (s[(s.GUILD_HOME = 3)] = "GUILD_HOME"),
        (s[(s.GUILD_ONBOARDING_QUESTION = 4)] = "GUILD_ONBOARDING_QUESTION"),
        ((a = r || (r = {}))[(a.UNSET = 0)] = "UNSET"),
        (a[(a.ALL_MESSAGES = 1)] = "ALL_MESSAGES"),
        (a[(a.ONLY_MENTIONS = 2)] = "ONLY_MENTIONS");
    },
    877275: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
          ChannelBackNavigationSources: function () {
            return a;
          },
        }),
        n("222007");
      var i,
        r = n("648564");
      (i || (i = {})).INVITE_ACCEPT = "invite_accept";
      var s = i;
      let a = new Set([
        r.OpenThreadAnalyticsLocations.EMBED,
        r.OpenThreadAnalyticsLocations.FORUM,
      ]);
    },
    393414: function (e, t, n) {
      "use strict";
      let i, r, s;
      n.r(t),
        n.d(t, {
          transitionTo: function () {
            return S;
          },
          transitionToGuild: function () {
            return m;
          },
          currentRouteHasBackNavigation: function () {
            return T;
          },
          replaceWith: function () {
            return g;
          },
          getHistory: function () {
            return I;
          },
          getLastRouteChangeSource: function () {
            return C;
          },
          getLastRouteChangeSourceLocationStack: function () {
            return v;
          },
          isValidFingerprintRoute: function () {
            return A;
          },
          getFingerprintLocation: function () {
            return R;
          },
          hasNavigated: function () {
            return N;
          },
          back: function () {
            return O;
          },
          forward: function () {
            return D;
          },
        }),
        n("424973"),
        n("781738");
      var a = n("294094"),
        o = n("605250"),
        l = n("659500"),
        u = n("877275"),
        c = n("49111");
      let d = new o.default("Routing/Utils"),
        f = [c.RelativeMarketingURLs.DEVELOPER_PORTAL];
      i = __OVERLAY__
        ? (0, a.createMemoryHistory)()
        : (0, a.createBrowserHistory)();
      let E = !1,
        p = i.listen((e, t) => {
          "REPLACE" !== t && ((E = !0), p());
        });
      function h() {
        return (
          !l.ComponentDispatch.hasSubscribers(c.ComponentActions.MODAL_CLOSE) &&
          (n("144747").default.close(), !0)
        );
      }
      function _(e, t) {
        return (
          !!("string" == typeof e && f.some(t => e.startsWith(t))) &&
          (d.log("".concat(t, " - route to external path ").concat(e)),
          window.dispatchEvent(new Event("beforeunload")),
          window.location[t](e),
          !0)
        );
      }
      function S(e, t, n, a) {
        !_(e, "assign") &&
          (d.log("transitionTo - Transitioning to ".concat(e)),
          null != n && (null == t ? (t = { source: n }) : (t.source = n)),
          null == t ? i.push(e) : i.push({ pathname: e, ...t }),
          (r = n),
          (s = a));
      }
      function m(e, t, n, i, r) {
        d.log(
          "transitionToGuild - Transitioning to ".concat(
            JSON.stringify({ guildId: e, channelId: t, messageId: n })
          )
        ),
          S(c.Routes.CHANNEL(e, t, n), null != r ? r : null, i);
      }
      function T() {
        return null != r && u.ChannelBackNavigationSources.has(r);
      }
      function g(e, t, n) {
        !_(e, "replace") &&
          (d.log("Replacing route with ".concat(e)),
          "string" == typeof e ? i.replace(e, t) : i.replace(e),
          (r = n));
      }
      function I() {
        return i;
      }
      function C() {
        return r;
      }
      function v() {
        return s;
      }
      function A(e) {
        if (null == e) {
          var t;
          e = null !== (t = i.location.pathname) && void 0 !== t ? t : "";
        }
        return !e.startsWith(c.Routes.HANDOFF) && !0;
      }
      function R(e) {
        if (null == e) {
          var t;
          e = null !== (t = i.location.pathname) && void 0 !== t ? t : "";
        }
        if (e.startsWith(c.Routes.LOGIN)) return c.PageAnalyticsLocations.LOGIN;
        if (e.startsWith(c.Routes.REGISTER))
          return c.PageAnalyticsLocations.REGISTER;
        if (e.startsWith(c.Routes.INVITE("")))
          return c.PageAnalyticsLocations.INVITE;
        else if (e.startsWith(c.Routes.VERIFY))
          return c.PageAnalyticsLocations.VERIFY;
        else if (e.startsWith(c.Routes.DISABLE_EMAIL_NOTIFICATIONS))
          return c.PageAnalyticsLocations.DISABLE_EMAIL_NOTIFICATIONS;
        else if (e.startsWith(c.Routes.DISABLE_SERVER_HIGHLIGHT_NOTIFICATIONS))
          return c.PageAnalyticsLocations
            .DISABLE_SERVER_HIGHLIGHT_NOTIFICATIONS;
        else if (e.startsWith(c.Routes.REJECT_IP))
          return c.PageAnalyticsLocations.REJECT_IP;
        else if (e.startsWith(c.Routes.REJECT_MFA))
          return c.PageAnalyticsLocations.REJECT_MFA;
        else if (e.startsWith(c.Routes.AUTHORIZE_IP))
          return c.PageAnalyticsLocations.AUTHORIZE_IP;
        else if (e.startsWith(c.Routes.AUTHORIZE_PAYMENT))
          return c.PageAnalyticsLocations.AUTHORIZE_PAYMENT;
        else if (e.startsWith(c.Routes.RESET))
          return c.PageAnalyticsLocations.RESET;
        else if (e.startsWith(c.Routes.REPORT))
          return c.PageAnalyticsLocations.REPORT;
        else if (e.startsWith(c.Routes.REPORT_SECOND_LOOK))
          return c.PageAnalyticsLocations.REPORT_SECOND_LOOK;
        return e;
      }
      function N() {
        return E;
      }
      function O() {
        h() && ((r = null), i.goBack());
      }
      function D() {
        h() && ((r = null), i.goForward());
      }
    },
    239380: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getChannelIdForGuildTransition: function () {
            return p;
          },
          transitionToGuild: function () {
            return h;
          },
        });
      var i = n("650033"),
        r = n("471706"),
        s = n("290886"),
        a = n("21121"),
        o = n("934306"),
        l = n("42203"),
        u = n("923959"),
        c = n("18494"),
        d = n("393414"),
        f = n("49111"),
        E = n("724210");
      function p(e) {
        var t;
        let n = c.default.getChannelId(e),
          i =
            null === (t = u.default.getDefaultChannel(e)) || void 0 === t
              ? void 0
              : t.id;
        if (
          (n === E.StaticChannelRoute.GUILD_ONBOARDING &&
            !r.default.shouldShowOnboarding(e)) ||
          (n === E.StaticChannelRoute.GUILD_HOME &&
            !(0, s.canSeeOnboardingHome)(e))
        )
          return i;
        let a = l.default.getChannel(n);
        return null == a || a.isGuildVocal() ? i : n;
      }
      function h(e, t) {
        let n =
          !(0, a.isInMainTabsExperiment)() ||
          (0, o.shouldHandleNewPanelsRoute)(e) ||
          i.default.get("navigate_to_last_channel")
            ? p(e)
            : void 0;
        (0, d.transitionTo)(f.Routes.CHANNEL(e, n), {
          navigationReplace:
            (0, o.shouldHandleNewPanelsRoute)(e) ||
            i.default.get("navigate_to_last_channel"),
          ...t,
        });
      }
    },
    492249: function (e, t, n) {
      "use strict";
      var i, r, s, a, o, l, u, c;
      n.r(t),
        n.d(t, {
          RPC_SCOPE_CONFIG: function () {
            return i;
          },
          RPC_PRIVATE_SCOPE: function () {
            return d;
          },
          RPC_PRIVATE_LIMITED_SCOPE: function () {
            return f;
          },
          RPC_LOCAL_SCOPE: function () {
            return E;
          },
          RPC_AUTHENTICATED_SCOPE: function () {
            return p;
          },
          RPCDeepLinks: function () {
            return r;
          },
          DispatchErrorCodes: function () {
            return s;
          },
          TransportTypes: function () {
            return a;
          },
        }),
        ((o = i || (i = {})).ANY = "$any"),
        (o.ALL = "$all");
      let d = "RPC_PRIVATE_SCOPE",
        f = "RPC_PRIVATE_LIMITED_SCOPE",
        E = "RPC_LOCAL_SCOPE",
        p = "RPC_AUTHENTICATED_SCOPE";
      ((l = r || (r = {})).USER_SETTINGS = "USER_SETTINGS"),
        (l.CHANGELOG = "CHANGELOG"),
        (l.LIBRARY = "LIBRARY"),
        (l.STORE_HOME = "STORE_HOME"),
        (l.STORE_LISTING = "STORE_LISTING"),
        (l.CHANNEL = "CHANNEL"),
        (l.PICK_GUILD_SETTINGS = "PICK_GUILD_SETTINGS"),
        ((u = s || (s = {}))[(u.APPLICATION_NOT_FOUND = 101)] =
          "APPLICATION_NOT_FOUND"),
        (u[(u.DISK_LOW = 2022)] = "DISK_LOW"),
        (u[(u.DISK_PERMISSION_DENIED = 2025)] = "DISK_PERMISSION_DENIED"),
        (u[(u.POST_INSTALL_FAILED = 2025)] = "POST_INSTALL_FAILED"),
        (u[(u.REDISTRIBUTABLE_INSTALL_FAILED = 2026)] =
          "REDISTRIBUTABLE_INSTALL_FAILED"),
        (u[(u.APPLICATION_LOAD_FAILED = 2034)] = "APPLICATION_LOAD_FAILED"),
        (u[(u.DESERIALIZATION_FAILED = 2047)] = "DESERIALIZATION_FAILED"),
        (u[(u.INTERRUPTED = 2055)] = "INTERRUPTED"),
        (u[(u.MAX_REQUEST_RETRIES_EXCEEDED = 2058)] =
          "MAX_REQUEST_RETRIES_EXCEEDED"),
        (u[(u.AUTHENTICATION_FAILED = 2063)] = "AUTHENTICATION_FAILED"),
        (u[(u.IO_PERMISSION_DENIED = 2064)] = "IO_PERMISSION_DENIED"),
        (u[(u.NO_MANIFESTS = 2065)] = "NO_MANIFESTS"),
        (u[(u.POST_INSTALL_CANCELLED = 2066)] = "POST_INSTALL_CANCELLED"),
        (u[(u.API_ERROR = 2069)] = "API_ERROR"),
        (u[(u.FILE_NAME_TOO_LONG = 2072)] = "FILE_NAME_TOO_LONG"),
        (u[(u.NOT_ENTITLED = 2073)] = "NOT_ENTITLED"),
        (u[(u.APPLICATION_LOCK_FAILED = 2076)] = "APPLICATION_LOCK_FAILED"),
        (u[(u.NOT_DIRECTORY = 2077)] = "NOT_DIRECTORY"),
        (u[(u.INVALID_DRIVE = 2078)] = "INVALID_DRIVE"),
        (u[(u.DISK_FULL = 2080)] = "DISK_FULL"),
        ((c = a || (a = {})).IPC = "ipc"),
        (c.WEBSOCKET = "ws"),
        (c.HTTP = "http"),
        (c.POST_MESSAGE = "post_message");
    },
    843158: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ExperimentRPCServerAnalyticsKillswitch: function () {
            return r;
          },
        });
      var i = n("862205");
      let r = (0, i.createExperiment)({
        kind: "user",
        id: "2024-01_rpc_analytics_killswitch",
        label: "RPC Server Analytics Killswitch",
        defaultConfig: { enabled: !1 },
        treatments: [
          {
            id: 1,
            label: "Enable RPC Server Analytics",
            config: { enabled: !0 },
          },
        ],
      });
    },
    861309: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i = n("631734").default;
    },
    648030: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("843762"),
        n("424973"),
        n("70102"),
        n("222007");
      var i,
        r = n("627445"),
        s = n.n(r),
        a = n("917351"),
        o = n.n(a),
        l = n("599110"),
        u = n("718517"),
        c = n("843158"),
        d = n("861309"),
        f = n("694352"),
        E = n("846678"),
        p = n("492249"),
        h = n("49111");
      let _ = "RPC_STORE_WAIT",
        S = [];
      i = class {
        registerTransport(e) {
          e.on("connect", e => this.handleConnect(e)),
            e.on("request", (e, t) => this.handleRequest(e, t)),
            e.on("disconnect", (e, t) => this.handleDisconnect(e, t));
        }
        handleConnect(e) {
          this.sockets.add(e), this.onConnect(e);
          let t = {
            v: e.version,
            config: {
              cdn_host: window.GLOBAL_ENV.CDN_HOST,
              api_endpoint: window.GLOBAL_ENV.API_ENDPOINT,
              environment: "production",
            },
          };
          if (e.transport === p.TransportTypes.IPC) {
            let n = this.getCurrentUser();
            if (null == n) {
              e.close(h.RPCCloseCodes.CLOSE_NORMAL, "User logged out");
              return;
            }
            t.user = (0, f.default)(n);
          }
          this.dispatch(e, null, h.RPCCommands.DISPATCH, h.RPCEvents.READY, t);
        }
        handleDisconnect(e, t) {
          this.removeSubscriptions(e),
            this.sockets.delete(e),
            this.onDisconnect(e, t);
        }
        handleRequest(e, t) {
          new Promise(n => {
            if (null == t.nonce || "" === t.nonce)
              throw new d.default(
                { errorCode: h.RPCErrors.INVALID_PAYLOAD },
                "Payload requires a nonce"
              );
            let i = t.cmd,
              r = this.commands[i];
            if (null == r)
              throw new d.default(
                { errorCode: h.RPCErrors.INVALID_COMMAND },
                "Invalid command: ".concat(t.cmd)
              );
            if (!(0, E.default)(e.authorization.scopes, r.scope))
              throw new d.default(
                { errorCode: h.RPCErrors.INVALID_PERMISSIONS },
                "Not authenticated or invalid scope"
              );
            c.ExperimentRPCServerAnalyticsKillswitch.getCurrentConfig({
              location: "RPCServer",
            }).enabled &&
              l.default.track(h.AnalyticEvents.RPC_COMMAND_SENT, {
                command: i,
                scope:
                  "object" == typeof r.scope
                    ? JSON.stringify(r.scope)
                    : r.scope,
                application_id: e.application.id,
              }),
              n(r);
          })
            .then(
              e =>
                new Promise(async (n, i) => {
                  if (null != e.validation) {
                    let r = await this.getJoi();
                    s(
                      null != e.validation,
                      "command.validation must not be null"
                    ),
                      r.validate(
                        t.args,
                        e.validation(r),
                        { convert: !1 },
                        t => {
                          if (null != t) {
                            i(
                              new d.default(
                                { errorCode: h.RPCErrors.INVALID_PAYLOAD },
                                t.message
                              )
                            );
                            return;
                          }
                          n(e);
                        }
                      );
                  } else n(e);
                })
            )
            .then(n => {
              var i;
              return n.handler({
                socket: e,
                server: this,
                cmd: t.cmd,
                evt: t.evt,
                nonce: t.nonce,
                args: null !== (i = t.args) && void 0 !== i ? i : {},
                isSocketConnected: () => this.sockets.has(e),
              });
            })
            .then(n => this.dispatch(e, t.nonce, t.cmd, null, n))
            .catch(n => {
              let { code: i, message: r } = n;
              return this.error(e, t.nonce, t.cmd, i, r);
            });
        }
        setCommandHandler(e, t) {
          this.commands[e] = t;
        }
        setEventHandler(e, t) {
          this.events[e] = t;
        }
        dispatch(e) {
          let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : null,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : h.RPCCommands.DISPATCH,
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : null,
            r =
              arguments.length > 4 && void 0 !== arguments[4]
                ? arguments[4]
                : null;
          e.send({ cmd: n, data: r, evt: i, nonce: t });
        }
        error(e) {
          let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : null,
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : h.RPCCommands.DISPATCH,
            i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : h.RPCErrors.UNKNOWN_ERROR,
            r =
              arguments.length > 4 && void 0 !== arguments[4]
                ? arguments[4]
                : "Unknown Error";
          l.default.track(h.AnalyticEvents.RPC_SERVER_ERROR_CAUGHT, {
            command: n,
            code: i,
            message: r,
          }),
            this.dispatch(e, t, n, h.RPCEvents.ERROR, { code: i, message: r });
        }
        isSubscribed(e, t) {
          return (
            void 0 !==
            this.subscriptions.find(
              n => n.socket.application.id === e && n.evt === t
            )
          );
        }
        getSubscription(e, t, n) {
          return this.subscriptions.find(
            i => i.socket === e && i.evt === t && o.isEqual(i.args, n)
          );
        }
        addSubscription(e, t, n) {
          let i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : null,
            r = this.dispatch.bind(this, e, null, h.RPCCommands.DISPATCH, t);
          null == this.getSubscription(e, t, n) &&
            this.subscriptions.push({
              update: i,
              dispatch: r,
              prevState: i ? i({ prevState: null, dispatch: r }) : null,
              socket: e,
              evt: t,
              args: n,
            });
        }
        removeSubscription(e, t, n) {
          o.remove(
            this.subscriptions,
            i => i.socket === e && i.evt === t && o.isEqual(i.args, n)
          );
        }
        removeSubscriptions(e) {
          o.remove(this.subscriptions, t => t.socket === e);
        }
        dispatchToSubscriptions(e, t, n, i) {
          var r;
          if (
            !(
              null != i &&
              "" !== i &&
              ((r = i), S.includes(r) || (S.unshift(r), S.splice(50), 0))
            )
          )
            this.subscriptions.forEach(i => {
              var r, s, a;
              if (i.evt === e) {
                if (
                  ("function" != typeof t || t(i)) &&
                  ("object" != typeof t ||
                    ((s = t),
                    (a = null !== (r = i.args) && void 0 !== r ? r : {}),
                    o.isEqual(s, o.pick(a, Object.keys(s)))))
                )
                  this.dispatch(
                    i.socket,
                    null,
                    h.RPCCommands.DISPATCH,
                    i.evt,
                    n
                  );
              }
            });
        }
        updateSubscriptions() {
          this.subscriptions.forEach(e => {
            e.update && (e.prevState = e.update(e));
          });
        }
        storeWait(e, t, n) {
          let i = t();
          if (i || 0 === n) return Promise.resolve(i);
          let r = o.uniqueId(),
            s = () => this.removeSubscription(e, _, { uniqueId: r });
          return new Promise((i, a) => {
            let o = setTimeout(() => {
              s(), a(Error("timeout"));
            }, n * u.default.Millis.SECOND);
            this.addSubscription(e, _, { uniqueId: r }, () => {
              let e = t();
              e && (clearTimeout(o), i(e));
            });
          }).then(e => (s(), e));
        }
        constructor(e) {
          (this.getCurrentUser = () => null),
            (this.onConnect = () => {}),
            (this.onDisconnect = () => {}),
            (this.events = {}),
            (this.commands = {}),
            (this.sockets = new Set()),
            (this.subscriptions = []),
            (this.getJoi = e);
        }
      };
    },
    694352: function (e, t, n) {
      "use strict";
      function i(e) {
        let {
          id: t,
          username: n,
          discriminator: i,
          globalName: r,
          avatar: s,
          avatarDecoration: a,
          bot: o,
          flags: l,
          premiumType: u,
        } = e;
        return {
          id: t,
          username: n,
          discriminator: i,
          global_name: r,
          avatar: s,
          avatar_decoration_data:
            null != a ? { asset: a.asset, sku_id: a.skuId } : null,
          bot: o,
          flags: l,
          premium_type: null != u ? u : 0,
        };
      }
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("702976");
    },
    846678: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        });
      var i = n("492249");
      function r(e, t) {
        if (null == t) return !0;
        if ("string" == typeof t) return e.includes(t);
        if ("object" != typeof t) return !1;
        let n = t[i.RPC_SCOPE_CONFIG.ANY],
          r = t[i.RPC_SCOPE_CONFIG.ALL];
        return (
          !!(
            (Array.isArray(n) && n.some(t => e.includes(t))) ||
            (Array.isArray(r) && r.every(t => e.includes(t)))
          ) || !1
        );
      }
    },
    261131: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return a;
          },
        });
      var i = n("269936"),
        r = n("648030");
      let s = async () => {
        let { default: e } = await (0, i.importWithRetry)({
          createPromise: () => n.el("990599").then(n.t.bind(n, "990599", 23)),
          webpackId: "990599",
        });
        return e;
      };
      var a = new r.default(s);
    },
    901946: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("862205");
      let r = (0, i.createExperiment)({
        kind: "user",
        id: "2023-08_periodic_voice_stats",
        label: "Periodic Voice Stats",
        defaultConfig: { enableSendingVoiceStats: !1, percentageOfCalls: 0 },
        treatments: [
          {
            id: 1,
            label: "Enable sending periodic voice stats for 100% of calls",
            config: { enableSendingVoiceStats: !0, percentageOfCalls: 100 },
          },
          {
            id: 2,
            label: "Enable sending periodic voice stats for 50% of calls",
            config: { enableSendingVoiceStats: !0, percentageOfCalls: 50 },
          },
          {
            id: 3,
            label: "Enable sending periodic voice stats for 20% of calls",
            config: { enableSendingVoiceStats: !0, percentageOfCalls: 20 },
          },
          {
            id: 4,
            label: "Enable sending periodic voice stats for 10% of calls",
            config: { enableSendingVoiceStats: !0, percentageOfCalls: 10 },
          },
          {
            id: 5,
            label: "Enable sending periodic voice stats for 5% of calls",
            config: { enableSendingVoiceStats: !0, percentageOfCalls: 5 },
          },
        ],
      });
      var s = r;
    },
    468200: function (e, t, n) {
      "use strict";
      var i, r, s, a;
      n.r(t),
        n.d(t, {
          MuteUntilSeconds: function () {
            return i;
          },
          SettingsOverrideReasonKeys: function () {
            return r;
          },
        }),
        ((s = i || (i = {}))[(s.MINUTES_15 = 900)] = "MINUTES_15"),
        (s[(s.HOURS_1 = 3600)] = "HOURS_1"),
        (s[(s.HOURS_3 = 10800)] = "HOURS_3"),
        (s[(s.HOURS_8 = 28800)] = "HOURS_8"),
        (s[(s.HOURS_24 = 86400)] = "HOURS_24"),
        (s[(s.ALWAYS = -1)] = "ALWAYS"),
        ((a = r || (r = {})).REDUCED_MOTION = "REDUCED_MOTION"),
        (a.REDUCED_MOTION_STICKERS = "REDUCED_MOTION_STICKERS");
    },
    923510: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MODERATE_STAGE_CHANNEL_PERMISSIONS: function () {
            return s;
          },
          STAGE_CHANNEL_DISABLED_PERMISSIONS: function () {
            return a;
          },
          UPDATE_STAGE_CHANNEL_MODERATOR_PERMISSIONS: function () {
            return o;
          },
          JOIN_VOCAL_CHANNEL_PERMISSIONS: function () {
            return l;
          },
          LURKER_STAGE_CHANNEL_PERMISSIONS_ALLOWLIST: function () {
            return u;
          },
        }),
        n("222007");
      var i = n("316693"),
        r = n("49111");
      let s = i.default.combine(
        r.Permissions.MANAGE_CHANNELS,
        r.Permissions.MUTE_MEMBERS,
        r.Permissions.MOVE_MEMBERS
      );
      i.default.combine(
        r.Permissions.MANAGE_CHANNELS,
        r.Permissions.MANAGE_ROLES
      );
      let a = new Set([
          r.Permissions.SPEAK,
          r.Permissions.REQUEST_TO_SPEAK,
          r.Permissions.USE_VAD,
        ]),
        o = i.default.combine(s, r.Permissions.MANAGE_ROLES),
        l = i.default.combine(
          r.Permissions.CONNECT,
          r.Permissions.VIEW_CHANNEL
        ),
        u = i.default.combine(
          l,
          r.Permissions.READ_MESSAGE_HISTORY,
          r.Permissions.REQUEST_TO_SPEAK,
          r.Permissions.SPEAK,
          r.Permissions.USE_VAD
        );
    },
    834052: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return f;
          },
        });
      var i = n("446674"),
        r = n("913144"),
        s = n("745049");
      let a = {},
        o = {};
      function l(e, t) {
        var n;
        let i = null !== (n = a[e]) && void 0 !== n ? n : {},
          r = { ...i };
        null == t ||
          t.forEach(e => {
            (o[e.channel_id] = e), (r[e.channel_id] = e);
          }),
          (a[e] = r);
      }
      function u(e) {
        let { instance: t } = e;
        l(t.guild_id, [t]);
      }
      function c(e, t) {
        var n;
        if ((delete o[t], null == e)) return;
        let i = null !== (n = a[e]) && void 0 !== n ? n : {},
          r = { ...i };
        delete r[t], (a[e] = r);
      }
      class d extends i.default.Store {
        getStageInstanceByChannel(e) {
          if (null != e) return o[e];
        }
        isLive(e) {
          return null != this.getStageInstanceByChannel(e);
        }
        isPublic(e) {
          var t;
          return (
            (null === (t = this.getStageInstanceByChannel(e)) || void 0 === t
              ? void 0
              : t.privacy_level) === s.GuildScheduledEventPrivacyLevel.PUBLIC
          );
        }
        getStageInstancesByGuild(e) {
          var t;
          return null == e ? {} : null !== (t = a[e]) && void 0 !== t ? t : {};
        }
        getAllStageInstances() {
          return Object.values(o);
        }
      }
      d.displayName = "StageInstanceStore";
      var f = new d(r.default, {
        CONNECTION_OPEN: function (e) {
          let { guilds: t } = e;
          (a = {}), (o = {}), t.forEach(e => l(e.id, e.stage_instances));
        },
        GUILD_CREATE: function (e) {
          let { guild: t } = e;
          l(t.id, t.stage_instances);
        },
        GUILD_DELETE: function (e) {
          var t;
          let { guild: n } = e,
            i = null !== (t = a[n.id]) && void 0 !== t ? t : {};
          delete a[n.id],
            Object.keys(i).forEach(e => {
              delete o[e];
            });
        },
        STAGE_INSTANCE_CREATE: u,
        STAGE_INSTANCE_UPDATE: u,
        STAGE_INSTANCE_DELETE: function (e) {
          let { instance: t } = e;
          c(t.guild_id, t.channel_id);
        },
        CHANNEL_DELETE: function (e) {
          let { channel: t } = e;
          c(t.guild_id, t.id);
        },
        LOGOUT: function () {
          (o = {}), (a = {});
        },
      });
    },
    228803: function (e, t, n) {
      "use strict";
      function i() {
        return null;
      }
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
    },
    755624: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return g;
          },
        }),
        n("222007"),
        n("702976");
      var i = n("917351"),
        r = n.n(i),
        s = n("446674"),
        a = n("913144"),
        o = n("668597"),
        l = n("233069"),
        u = n("271938");
      let c = {},
        d = new o.default(),
        f = new Set();
      function E(e) {
        c = r(c)
          .reject(t => t.guildId === e)
          .keyBy("threadId")
          .value();
      }
      function p(e) {
        var t;
        null === (t = e.threads) || void 0 === t || t.forEach(h);
      }
      function h(e) {
        l.ALL_CHANNEL_TYPES.has(e.type) &&
          null != e.member &&
          ((c[e.id] = {
            threadId: e.id,
            guildId: e.guild_id,
            flags: e.member.flags,
            muted: e.member.muted,
            muteConfig: e.member.muteConfig,
            joinTimestamp: new Date(e.member.joinTimestamp),
          }),
          _(e.id));
      }
      function _(e) {
        let t = c[e];
        if ((d.clearTimer(e), !0 === t.muted)) {
          (f = new Set(f)).add(e);
          let n = d.setTimer(e, t.muteConfig, () => {
            (c[e].muted = !1), (f = new Set(f)).delete(e), T.emitChange();
          });
          n && ((c[e].muted = !1), (f = new Set(f)).delete(e));
        } else (f = new Set(f)).delete(e);
      }
      function S(e) {
        let { guildId: t, members: n } = e;
        null != t &&
          null != n &&
          n.forEach(e => {
            (c[e.id] = {
              threadId: e.id,
              guildId: t,
              flags: e.flags,
              muted: e.muted,
              muteConfig: e.muteConfig,
              joinTimestamp: new Date(e.joinTimestamp),
            }),
              _(e.id);
          });
      }
      class m extends s.default.Store {
        hasJoined(e) {
          return e in c;
        }
        joinTimestamp(e) {
          var t;
          return null === (t = c[e]) || void 0 === t ? void 0 : t.joinTimestamp;
        }
        flags(e) {
          var t;
          return null === (t = c[e]) || void 0 === t ? void 0 : t.flags;
        }
        getInitialOverlayState() {
          return Object.values(c);
        }
        getMuteConfig(e) {
          var t;
          return null === (t = c[e]) || void 0 === t ? void 0 : t.muteConfig;
        }
        getMutedThreads() {
          return f;
        }
        isMuted(e) {
          return f.has(e);
        }
      }
      m.displayName = "JoinedThreadsStore";
      let T = new m(a.default, {
        CONNECTION_OPEN: function (e) {
          d.reset(),
            (f = new Set()),
            (c = {}),
            e.guilds.forEach(e => {
              p(e);
            });
        },
        OVERLAY_INITIALIZE: function (e) {
          let { joinedThreads: t } = e;
          c = r(t)
            .map(e => ({ ...e, joinTimestamp: new Date(e.joinTimestamp) }))
            .keyBy("threadId")
            .value();
        },
        GUILD_CREATE: function (e) {
          let { guild: t } = e;
          E(t.id), p(t);
        },
        GUILD_DELETE: function (e) {
          let { guild: t } = e;
          E(t.id);
        },
        THREAD_CREATE: function (e) {
          let { channel: t } = e;
          h(t);
        },
        THREAD_LIST_SYNC: S,
        SEARCH_FINISH: S,
        LOAD_THREADS_SUCCESS: S,
        LOAD_ARCHIVED_THREADS_SUCCESS: S,
        THREAD_DELETE: function (e) {
          let { channel: t } = e;
          if (!(t.id in c)) return !1;
          (c = { ...c }), delete c[t.id];
        },
        THREAD_MEMBER_UPDATE: function (e) {
          if (u.default.getId() !== e.userId) return !1;
          (c[e.id] = {
            threadId: e.id,
            guildId: e.guildId,
            flags: e.flags,
            muted: e.muted,
            muteConfig: e.muteConfig,
            joinTimestamp: new Date(e.joinTimestamp),
          }),
            _(e.id);
        },
        THREAD_MEMBER_LOCAL_UPDATE: function (e) {
          let { id: t, userId: n, guildId: i, isJoining: r } = e;
          if (u.default.getId() !== n || null === i) return !1;
          r
            ? (c[t] = {
                threadId: t,
                guildId: i,
                flags: 0,
                muted: !0,
                muteConfig: { end_time: void 0 },
                joinTimestamp: new Date(),
              })
            : delete c[t];
        },
        THREAD_MEMBERS_UPDATE: function (e) {
          var t, n;
          let i = !1;
          return (
            (null === (t = e.removedMemberIds) || void 0 === t
              ? void 0
              : t.includes(u.default.getId())) &&
              e.id in c &&
              ((c = { ...c }), delete c[e.id], (i = !0)),
            null === (n = e.addedMembers) ||
              void 0 === n ||
              n.forEach(t => {
                t.userId === u.default.getId() &&
                  (((c = { ...c })[e.id] = {
                    threadId: e.id,
                    guildId: e.guildId,
                    flags: t.flags,
                    muted: t.muted,
                    muteConfig: t.muteConfig,
                    joinTimestamp: new Date(t.joinTimestamp),
                  }),
                  _(e.id),
                  (i = !0));
              }),
            i
          );
        },
      });
      var g = T;
    },
    526311: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          doesThreadMembersActionAffectMe: function () {
            return r;
          },
        });
      var i = n("271938");
      function r(e) {
        var t, n;
        let r = i.default.getId();
        return (
          null != r &&
          (!!(
            (null === (t = e.removedMemberIds) || void 0 === t
              ? void 0
              : t.includes(r)) ||
            (null === (n = e.addedMembers) || void 0 === n
              ? void 0
              : n.some(e => e.userId === r))
          ) ||
            !1)
        );
      }
    },
    648564: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          DEFAULT_AUTO_ARCHIVE_DURATION: function () {
            return u;
          },
          MAX_THREAD_MESSAGE_COUNT_OLD: function () {
            return c;
          },
          MAX_THREAD_MESSAGE_COUNT: function () {
            return d;
          },
          MAX_THREAD_MEMBERS_PREVIEW: function () {
            return f;
          },
          MAX_THREAD_UNREAD_MESSAGE_COUNT: function () {
            return E;
          },
          ThreadMemberFlags: function () {
            return p;
          },
          OpenThreadAnalyticsLocations: function () {
            return i;
          },
          getThreadNotificationOptions: function () {
            return h;
          },
          ThreadSortOrderReadableForAnalytics: function () {
            return r;
          },
          FORUM_POST_CREATION_UPLOAD_ERRORS: function () {
            return _;
          },
          FORUM_POST_CREATION_AUTOMOD_ERRORS: function () {
            return S;
          },
        }),
        n("222007");
      var i,
        r,
        s,
        a,
        o = n("49111"),
        l = n("782340");
      let u = 4320,
        c = 50,
        d = 1e5,
        f = 50,
        E = 25,
        p = {
          HAS_INTERACTED: 1,
          ALL_MESSAGES: 2,
          ONLY_MENTIONS: 4,
          NO_MESSAGES: 8,
        };
      function h() {
        return [
          {
            setting: p.ALL_MESSAGES,
            label: l.default.Messages.FORM_LABEL_ALL_MESSAGES,
          },
          {
            setting: p.ONLY_MENTIONS,
            label: l.default.Messages.FORM_LABEL_ONLY_MENTIONS.format(),
          },
          {
            setting: p.NO_MESSAGES,
            label: l.default.Messages.FORM_LABEL_NOTHING,
          },
        ];
      }
      ((s = i || (i = {})).EMBED = "Embed"),
        (s.BROWSER = "Thread Browser"),
        (s.POPOUT = "Active Threads Popout"),
        (s.CHANNEL_LIST = "Channel List"),
        (s.GUILD_ACTIVE_THREADS_MODAL = "Guild Active Threads Modal"),
        (s.INBOX = "Inbox"),
        (s.FORUM = "Forum"),
        (s.VOICE_AUTO_OPEN = "Voice Auto Open"),
        ((a = r || (r = {})).LATEST_ACTIVITY = "Last Message"),
        (a.CREATION_DATE = "Creation");
      let _ = new Set([
          o.AbortCodes.TOO_MANY_ATTACHMENTS,
          o.AbortCodes.EXPLICIT_CONTENT,
          o.AbortCodes.ENTITY_TOO_LARGE,
        ]),
        S = new Set([
          o.AbortCodes.AUTOMOD_MESSAGE_BLOCKED,
          o.AbortCodes.AUTOMOD_TITLE_BLOCKED,
        ]);
    },
    963903: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          Environments: function () {
            return i;
          },
        }),
        ((r = i || (i = {})).STAGING = "staging"),
        (r.DEVELOPMENT = "development"),
        (r.PRODUCTION = "production"),
        (r.TEST = "test");
    },
    517001: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          validatePremiumType: function () {
            return l;
          },
          isStaffEnv: function () {
            return c;
          },
          isStaffEnvRawData: function () {
            return d;
          },
          getPremiumTypeFromRawValue: function () {
            return f;
          },
        }),
        n("702976");
      var i = n("627445"),
        r = n.n(i),
        s = n("568734"),
        a = n("963903"),
        o = n("49111");
      function l(e, t, n) {
        !e &&
          void 0 !== t &&
          r(n === t, "Premium type should not change for non-staff users");
      }
      function u(e) {
        return "production" === a.Environments.TEST && null != e
          ? e
          : "production";
      }
      function c(e) {
        let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : void 0,
          n =
            u(t) === a.Environments.DEVELOPMENT ||
            window.GLOBAL_ENV.RELEASE_CHANNEL === a.Environments.STAGING;
        if (n) return !0;
        if (null == e) return !1;
        let i = e.isStaff() || e.isStaffPersonal();
        return i;
      }
      function d(e) {
        let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : void 0,
          n =
            u(t) === a.Environments.DEVELOPMENT ||
            window.GLOBAL_ENV.RELEASE_CHANNEL === a.Environments.STAGING;
        return (
          !!n ||
          (null != e &&
            (!!(
              null != e.flags && (0, s.hasFlag)(e.flags, o.UserFlags.STAFF)
            ) ||
              null != e.personal_connection_id))
        );
      }
      function f(e) {
        return void 0 !== e ? (e === o.PREMIUM_TYPE_NONE ? null : e) : e;
      }
    },
    705873: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        }),
        n("702976");
      var i = n("49111");
      function r(e) {
        var t;
        return (
          ((null !== (t = e.flags) && void 0 !== t ? t : 0) &
            i.UserFlags.STAFF) ===
            i.UserFlags.STAFF ||
          (null == e ? void 0 : e.personal_connection_id) != null
        );
      }
    },
    891760: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          shouldReadWriteAudioSettings: function () {
            return s;
          },
        });
      var i = n("862205");
      let r = (0, i.createExperiment)({
        kind: "user",
        id: "2022-09_remote_audio_settings",
        label: "Remote Audio Settings",
        defaultConfig: { readWriteRemoteSettings: !1 },
        treatments: [
          {
            id: 1,
            label: "Read/write remote audio settings",
            config: { readWriteRemoteSettings: !0 },
          },
        ],
      });
      function s() {
        return r.getCurrentConfig(
          { location: "da0fa6_1" },
          { autoTrackExposure: !1 }
        ).readWriteRemoteSettings;
      }
    },
    536692: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getPendingAudioSettings: function () {
            return s;
          },
          updatePendingSettings: function () {
            return a;
          },
          drainPendingAudioSettings: function () {
            return o;
          },
        }),
        n("222007");
      let i = {};
      function r(e, t) {
        return "".concat(e, ":").concat(t);
      }
      function s(e, t) {
        let n = r(e, t);
        return i[n];
      }
      function a(e, t, n) {
        let s = r(e, t);
        i[s] = { ...i[s], ...n };
      }
      function o(e) {
        for (let t in i) {
          let [n, r] = (function (e) {
            let [t, n] = e.split(":");
            return [t, n];
          })(t);
          e(n, r, i[t]);
        }
        i = {};
      }
    },
    116319: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          SystemThemeState: function () {
            return i;
          },
        }),
        ((r = i || (i = {}))[(r.UNSET = 0)] = "UNSET"),
        (r[(r.OFF = 1)] = "OFF"),
        (r[(r.ON = 2)] = "ON");
    },
    161778: function (e, t, n) {
      "use strict";
      let i;
      n.r(t),
        n.d(t, {
          default: function () {
            return P;
          },
        });
      var r,
        s = n("446674"),
        a = n("151426"),
        o = n("669491"),
        l = n("819855"),
        u = n("913144"),
        c = n("206230"),
        d = n("253539");
      n("21121");
      var f = n("228803");
      n("831588");
      var E = n("922932"),
        p = n("773336"),
        h = n("737292"),
        _ = n("168973"),
        S = n("374363"),
        m = n("116319"),
        T = n("49111"),
        g = n("941719");
      let I =
          null !== (r = (0, f.default)()) && void 0 !== r
            ? r
            : T.ThemeTypes.DARK,
        C = I,
        v = null,
        A = !1;
      function R() {
        let e = (function () {
          var e, t;
          if (__OVERLAY__) return T.ThemeTypes.DARK;
          if (
            c.default.syncForcedColors &&
            "active" === c.default.systemForcedColors &&
            null != i
          )
            return i;
          let n = _.default.useSystemTheme;
          if (n === m.SystemThemeState.ON && null != i) return i;
          let r =
            null === (e = h.default.getAppearanceSettings()) || void 0 === e
              ? void 0
              : e.theme;
          if (null != r) return r;
          let s =
            null === (t = S.default.settings.appearance) || void 0 === t
              ? void 0
              : t.theme;
          return null == s
            ? C
            : s === a.Theme.LIGHT
              ? T.ThemeTypes.LIGHT
              : T.ThemeTypes.DARK;
        })();
        return e;
      }
      function N() {
        return D();
      }
      function O() {
        return D();
      }
      function D() {
        let e = R();
        return e !== C && ((C = e), !0);
      }
      class y extends s.default.PersistedStore {
        initialize(e) {
          (null == e ? void 0 : e.theme) != null && (C = e.theme),
            this.waitFor(_.default, h.default, S.default, c.default);
        }
        getState() {
          return { theme: this.theme };
        }
        get darkSidebar() {
          return (0, l.isThemeLight)(this.theme) && _.default.darkSidebar && !A;
        }
        get theme() {
          return R();
        }
        get systemTheme() {
          return v;
        }
        get systemPrefersColorScheme() {
          return i;
        }
        get isSystemThemeAvailable() {
          return null !== v;
        }
      }
      (y.displayName = "ThemeStore"),
        (y.persistKey = "ThemeStore"),
        (y.migrations = [
          e => {
            let t = e.theme;
            return "amoled" === t && (t = "midnight"), { ...e, theme: t };
          },
        ]);
      var P = new y(u.default, {
        CACHE_LOADED: N,
        CONNECTION_OPEN: N,
        LOGOUT: function (e) {
          return (
            !e.isSwitchingAccount &&
            C !== T.ThemeTypes.DARK &&
            ((C = T.ThemeTypes.DARK),
            (function () {
              !__OVERLAY__ &&
                p.isPlatformEmbedded &&
                E.default.setApplicationBackgroundColor(
                  (0, l.isThemeDark)(R())
                    ? o.default.unsafe_rawColors.PRIMARY_700.resolve({
                        saturation: c.default.saturation,
                      }).hsl()
                    : o.default.unsafe_rawColors.WHITE_500.resolve({
                        saturation: c.default.saturation,
                      }).hsl()
                );
            })(),
            D())
          );
        },
        OVERLAY_INITIALIZE: N,
        SELECTIVELY_SYNCED_USER_SETTINGS_UPDATE: O,
        UNSYNCED_USER_SETTINGS_UPDATE: O,
        USER_SETTINGS_PROTO_UPDATE: N,
        UPDATE_BACKGROUND_GRADIENT_PRESET: function (e) {
          var t, n;
          let { presetId: i } = e;
          C =
            null != i &&
            null !==
              (n =
                null === (t = g.BACKGROUND_GRADIENT_PRESETS_MAP[i]) ||
                void 0 === t
                  ? void 0
                  : t.theme) &&
            void 0 !== n
              ? n
              : R();
          let r = null != i;
          return A !== r
            ? ((A = r), !0)
            : (function () {
                let e = R();
                return (
                  !(0, d.areThemesEqualForGradientThemes)(C, e) && ((C = e), !0)
                );
              })();
        },
        RESET_PREVIEW_CLIENT_THEME: N,
        SYSTEM_THEME_CHANGE: function (e) {
          let { systemTheme: t } = e;
          return (v = t), D();
        },
        ACCESSIBILITY_SYSTEM_COLOR_PREFERENCES_CHANGED: function (e) {
          return (i = e.systemPrefersColorScheme), D();
        },
        ACCESSIBILITY_DARK_SIDEBAR_TOGGLE: function () {
          return (0, l.isThemeLight)(R());
        },
      });
    },
    168973: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return T;
          },
        });
      var i,
        r,
        s,
        a,
        o = n("917351"),
        l = n.n(o),
        u = n("446674"),
        c = n("95410"),
        d = n("913144");
      n("228803");
      var f = n("116319"),
        E = n("49111"),
        p = n("13030");
      ((i = s || (s = {})).DATA_SAVER = "data_saver"),
        (i.STANDARD = "standard"),
        (i.BEST = "best"),
        ((r = a || (a = {})).VERY_LOW = "very_low"),
        (r.LOW = "low"),
        (r.MEDIUM = "medium"),
        (r.HIGH = "high"),
        (r.VERY_HIGH = "very_high");
      let h = (window.innerWidth - E.CHANNEL_SIDEBAR_WIDTH) / 2,
        _ = null,
        S = {};
      class m extends u.default.DeviceSettingsStore {
        initialize(e) {
          var t;
          (S = null != e ? e : {}).darkSidebar =
            null !== (t = S.darkSidebar) && void 0 !== t
              ? t
              : (function () {
                  var e;
                  let t = u.default.PersistedStore.migrateAndReadStoreState(
                    "AccessibilityStore",
                    []
                  ).state;
                  return (
                    null !== (e = null == t ? void 0 : t.darkSidebar) &&
                    void 0 !== e &&
                    e
                  );
                })();
        }
        getUserAgnosticState() {
          return S;
        }
        get displayCompactAvatars() {
          var e;
          return null !== (e = S.displayCompactAvatars) && void 0 !== e && e;
        }
        get lowQualityImageMode() {
          var e;
          return null !== (e = S.lowQualityImageMode) && void 0 !== e && e;
        }
        get videoUploadQuality() {
          var e;
          return null !== (e = S.videoUploadQuality) && void 0 !== e
            ? e
            : "standard";
        }
        get dataSavingMode() {
          var e, t;
          return (
            null !==
              (t =
                null !== (e = S.dataSavingMode) && void 0 !== e
                  ? e
                  : S.lowQualityImageMode) &&
            void 0 !== t &&
            t
          );
        }
        get expressionPickerWidth() {
          var e;
          return null !== (e = S.expressionPickerWidth) && void 0 !== e
            ? e
            : p.ExpressionPickerWidths.MIN;
        }
        get messageRequestSidebarWidth() {
          var e;
          return null !== (e = S.messageRequestSidebarWidth) && void 0 !== e
            ? e
            : E.DEFAULT_MESSAGE_REQUEST_SIDEBAR_WIDTH;
        }
        get threadSidebarWidth() {
          var e;
          return null !== (e = S.threadSidebarWidth) && void 0 !== e
            ? e
            : E.DEFAULT_CHAT_SIDEBAR_WIDTH;
        }
        get postSidebarWidth() {
          var e;
          return null !== (e = S.postSidebarWidth) && void 0 !== e ? e : h;
        }
        get callChatSidebarWidth() {
          var e;
          return null !== (e = S.callChatSidebarWidth) && void 0 !== e
            ? e
            : E.DEFAULT_CHAT_SIDEBAR_WIDTH;
        }
        get homeSidebarWidth() {
          var e;
          return null !== (e = S.homeSidebarWidth) && void 0 !== e
            ? e
            : (null == _ &&
                (_ = Math.max(
                  (window.innerWidth - E.CHANNEL_SIDEBAR_WIDTH) * 0.4,
                  E.DEFAULT_CHAT_SIDEBAR_WIDTH
                )),
              _);
        }
        get callHeaderHeight() {
          return S.callHeaderHeight;
        }
        get useSystemTheme() {
          var e;
          return null !== (e = S.useSystemTheme) && void 0 !== e
            ? e
            : f.SystemThemeState.UNSET;
        }
        get activityPanelHeight() {
          return S.activityPanelHeight;
        }
        get disableVoiceChannelChangeAlert() {
          var e;
          return (
            null !== (e = S.disableVoiceChannelChangeAlert) && void 0 !== e && e
          );
        }
        get disableEmbeddedActivityPopOutAlert() {
          var e;
          return (
            null !== (e = S.disableEmbeddedActivityPopOutAlert) &&
            void 0 !== e &&
            e
          );
        }
        get disableActivityHardwareAccelerationPrompt() {
          var e;
          return (
            null !== (e = S.disableActivityHardwareAccelerationPrompt) &&
            void 0 !== e &&
            e
          );
        }
        get disableInviteWithTextChannelActivityLaunch() {
          var e;
          return (
            null !== (e = S.disableInviteWithTextChannelActivityLaunch) &&
            void 0 !== e &&
            e
          );
        }
        get disableHideSelfStreamAndVideoConfirmationAlert() {
          var e;
          return (
            null !== (e = S.disableHideSelfStreamAndVideoConfirmationAlert) &&
            void 0 !== e &&
            e
          );
        }
        get pushUpsellUserSettingsDismissed() {
          var e;
          return null !== (e = S.pushUpsellDismissed) && void 0 !== e && e;
        }
        get disableActivityHostLeftNitroUpsell() {
          var e;
          return (
            null !== (e = S.disableActivityHostLeftNitroUpsell) &&
            void 0 !== e &&
            e
          );
        }
        get disableCallUserConfirmationPrompt() {
          var e;
          return (
            null !== (e = S.disableCallUserConfirmationPrompt) &&
            void 0 !== e &&
            e
          );
        }
        get disableApplicationSubscriptionCancellationSurvey() {
          var e;
          return (
            null !== (e = S.disableApplicationSubscriptionCancellationSurvey) &&
            void 0 !== e &&
            e
          );
        }
        get enableAndroidChatListAnimations() {
          var e;
          return (
            null !== (e = S.enableAndroidChatListAnimations) &&
            void 0 !== e &&
            e
          );
        }
        get darkSidebar() {
          var e;
          return null !== (e = S.darkSidebar) && void 0 !== e && e;
        }
        get useMobileChatCustomRenderer() {
          var e;
          return (
            null !== (e = S.useMobileChatCustomRenderer) && void 0 !== e && e
          );
        }
        get saveCameraUploadsToDevice() {
          var e;
          return (
            null === (e = S.saveCameraUploadsToDevice) || void 0 === e || e
          );
        }
        get swipeToReply() {
          var e;
          return null !== (e = S.swipeToReply) && void 0 !== e && e;
        }
      }
      (m.displayName = "UnsyncedUserSettingsStore"),
        (m.persistKey = "UnsyncedUserSettingsStore"),
        (m.migrations = [
          () => {
            let e = c.default.get("UserSettingsStore");
            return (
              c.default.remove("UserSettingsStore"),
              l.pick(
                e,
                "dataSavingMode",
                "videoUploadQuality",
                "lowQualityImageMode",
                "useSystemTheme",
                "expressionPickerWidth",
                "disableVoiceChannelChangeAlert",
                "disableHideSelfStreamAndVideoConfirmationAlert",
                "pushUpsellDismissed",
                "disableEmbeddedActivityPopOutAlert",
                "disableActivityHardwareAccelerationPrompt",
                "disableInviteWithTextChannelActivityLaunch",
                "disableActivityHostLeftNitroUpsell",
                "disableCallUserConfirmationPrompt",
                "disableApplicationSubscriptionCancellationSurvey",
                "enableAndroidChatListAnimations"
              )
            );
          },
        ]);
      var T = new m(d.default, {
        UNSYNCED_USER_SETTINGS_UPDATE: function (e) {
          S = { ...S, ...e.settings };
        },
        LOGOUT: function () {
          S = { useSystemTheme: S.useSystemTheme, darkSidebar: S.darkSidebar };
        },
        LOGIN_SUCCESS: function () {
          null == S && (S = {});
        },
        REGISTER_SUCCESS: function () {},
        ACCESSIBILITY_DARK_SIDEBAR_TOGGLE: function () {
          return (S.darkSidebar = !S.darkSidebar), !0;
        },
      });
    },
    333188: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          VoiceCallBackgroundTypes: function () {
            return o;
          },
        }),
        n("222007");
      var i,
        r,
        s,
        a,
        o,
        l,
        u,
        c,
        d,
        f,
        E = n("773336");
      ((l = i || (i = {})).DISMISSED = "dismissed"),
        (l.PIP = "pip"),
        (l.PIP_EXTERNAL = "pip_external"),
        (l.PANEL = "panel");
      let p = { mass: 0.5, damping: 80, stiffness: 320 };
      ({ ...p }),
        { ...p },
        { ...p },
        ((u = r || (r = {})).USER = "USER"),
        (u.STREAM = "STREAM"),
        (u.ACTIVITY = "ACTIVIY"),
        ((c = s || (s = {})).NO_VIDEO_PARTICIPANTS = "no_video_participants"),
        (c.CALLER_DISCONNECTED = "caller_disconnected");
      ((d = a || (a = {})).PARTICIPANT = "participant"),
        (d.CTA = "cta"),
        (0, E.isAndroid)(),
        (0, E.isIOS)(),
        ((f = o || (o = {}))[(f.EMPTY = 0)] = "EMPTY"),
        (f[(f.GRADIENT = 1)] = "GRADIENT");
    },
    653047: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          createExecutable: function () {
            return d;
          },
          default: function () {
            return i;
          },
        }),
        n("702976");
      var i,
        r = n("266088"),
        s = n("666038"),
        a = n("315102"),
        o = n("331082"),
        l = n("766274"),
        u = n("954016");
      let c = {
        [u.POKER_NIGHT_APPLICATION_ID]: 7,
        [u.END_GAME_APPLICATION_ID]: 12,
      };
      function d(e) {
        let t = { os: e.os, name: e.name };
        return (
          null != e.arguments && (t.arguments = e.arguments),
          null != e.is_launcher && (t.isLauncher = e.is_launcher),
          t
        );
      }
      i = class e extends s.default {
        static createFromServer(t) {
          var n, i;
          return new e({
            ...t,
            thirdPartySkus: t.third_party_skus,
            overlayWarn: t.overlay_warn,
            overlayCompatibilityHook: t.overlay_compatibility_hook,
            overlayMethods:
              null !== (n = t.overlay_methods) && void 0 !== n
                ? n
                : r.ApplicationOverlayMethodFlags.DEFAULT,
            hook: t.hook,
            primarySkuId: t.primary_sku_id,
            storeListingSkuId: t.store_listing_sku_id,
            guildId: t.guild_id,
            guild: t.guild,
            publishers:
              null != t.publishers
                ? t.publishers.map(o.default.createFromServer)
                : [],
            developers:
              null != t.developers
                ? t.developers.map(o.default.createFromServer)
                : [],
            eulaId: t.eula_id,
            slug: t.slug,
            coverImage: t.cover_image,
            bot: null != t.bot ? new l.default(t.bot) : null,
            flags: null !== (i = t.flags) && void 0 !== i ? i : 0,
            maxParticipants: t.max_participants,
            tags: t.tags,
            embeddedActivityConfig: t.embedded_activity_config,
            roleConnectionsVerificationUrl: t.role_connections_verification_url,
          });
        }
        getIconURL(e) {
          return null != this.icon
            ? a.default.getGameAssetURL({
                id: this.id,
                hash: this.icon,
                size: e,
              })
            : null;
        }
        getIconSource(e) {
          return null != this.icon
            ? a.default.getGameAssetSource({
                id: this.id,
                hash: this.icon,
                size: e,
              })
            : null;
        }
        getSplashURL(e) {
          return null != this.splash
            ? a.default.getGameAssetURL({
                id: this.id,
                hash: this.splash,
                size: e,
                keepAspectRatio: !0,
              })
            : null;
        }
        getCoverImageURL(e) {
          return null != this.coverImage
            ? a.default.getApplicationIconURL({
                id: this.id,
                icon: this.coverImage,
                size: e,
              })
            : null;
        }
        getMaxParticipants() {
          var e, t;
          return null !==
            (t =
              null !== (e = this.maxParticipants) && void 0 !== e
                ? e
                : c[this.id]) && void 0 !== t
            ? t
            : 0;
        }
        get destinationSkuId() {
          return null != this.storeListingSkuId
            ? this.storeListingSkuId
            : this.primarySkuId;
        }
        get supportsOutOfProcessOverlay() {
          return e.supportsOutOfProcessOverlay(this.overlayMethods);
        }
        static supportsOutOfProcessOverlay(e) {
          let t = r.ApplicationOverlayMethodFlags.OUT_OF_PROCESS;
          return null != e && (e & t) === t;
        }
        constructor(e) {
          var t, n, i, s;
          super(),
            (this.id = e.id),
            (this.name = e.name),
            (this.icon = e.icon || null),
            (this.splash = e.splash || null),
            (this.overlay = e.overlay || !1),
            (this.overlayWarn = e.overlayWarn || !1),
            (this.overlayCompatibilityHook = e.overlayCompatibilityHook || !1),
            (this.overlayMethods =
              null !== (t = e.overlayMethods) && void 0 !== t
                ? t
                : r.ApplicationOverlayMethodFlags.DEFAULT),
            (this.hook = null === (n = e.hook) || void 0 === n || n),
            (this.aliases = e.aliases || []),
            (this.publishers = e.publishers || []),
            (this.developers = e.developers || []),
            (this.primarySkuId = e.primarySkuId),
            (this.storeListingSkuId = e.storeListingSkuId),
            (this.guildId = e.guildId || null),
            (this.guild = e.guild || null),
            (this.thirdPartySkus = e.thirdPartySkus || []),
            (this.executables = (e.executables || []).map(d)),
            (this.hashes = e.hashes || []),
            (this.description = e.description || null),
            (this.eulaId = e.eulaId || null),
            (this.slug = e.slug || null),
            (this.bot = e.bot || null),
            (this.coverImage = e.coverImage || null),
            (this.flags = null !== (i = e.flags) && void 0 !== i ? i : 0),
            (this.tags = null !== (s = e.tags) && void 0 !== s ? s : []),
            (this.maxParticipants = e.maxParticipants),
            (this.embeddedActivityConfig = e.embedded_activity_config),
            (this.type = e.type),
            (this.team = e.team),
            (this.roleConnectionsVerificationUrl =
              e.roleConnectionsVerificationUrl);
        }
      };
    },
    807085: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i,
        r = n("666038"),
        s = n("782340");
      i = class e extends r.default {
        static createFromServer(t) {
          return new e({
            id: t.id,
            liveBuildId: t.live_build_id,
            name: t.name,
          });
        }
        getName(e) {
          return null != this.name
            ? this.name
            : this.id === e
              ? s.default.Messages.APPLICATION_BRANCH_NAME_MASTER
              : s.default.Messages.APPLICATION_BRANCH_NAME_UNKNOWN;
        }
        constructor(e) {
          super(),
            (this.id = e.id),
            (this.liveBuildId = e.liveBuildId),
            (this.name = e.name);
        }
      };
    },
    233069: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isGuildSelectableChannelType: function () {
            return _;
          },
          ALL_CHANNEL_TYPES: function () {
            return S;
          },
          isGuildTextChannelType: function () {
            return T;
          },
          GUILD_WEBHOOK_CHANNEL_TYPES: function () {
            return g;
          },
          GUILD_CHANNEL_TYPES: function () {
            return I;
          },
          isGuildChannelType: function () {
            return C;
          },
          GUILD_VOCAL_CHANNEL_TYPES: function () {
            return v;
          },
          isGuildVocalChannelType: function () {
            return A;
          },
          SILENT_JOIN_LEAVE_CHANNEL_TYPES: function () {
            return R;
          },
          isPrivate: function () {
            return O;
          },
          isMultiUserDM: function () {
            return y;
          },
          TEXT_CHANNEL_TYPES: function () {
            return P;
          },
          isTextChannel: function () {
            return L;
          },
          isVoiceChannel: function () {
            return M;
          },
          isGuildReadableType: function () {
            return G;
          },
          THREAD_CHANNEL_TYPES: function () {
            return w;
          },
          THREADED_CHANNEL_TYPES: function () {
            return k;
          },
          isThread: function () {
            return x;
          },
          isReadableType: function () {
            return V;
          },
          GUILD_NON_CATEGORY_CHANNEL_TYPES: function () {
            return B;
          },
          EDITABLE_CHANNEL_TYPES: function () {
            return H;
          },
          TOGGLE_ANNOUNCEMENT_CHANNEL_TYPES: function () {
            return j;
          },
          TOPIC_CHANNEL_TYPES: function () {
            return Y;
          },
          NSFW_CHANNEL_TYPES: function () {
            return W;
          },
          CREATEABLE_NON_VOCAL_CHANNEL_NAME_TYPES: function () {
            return K;
          },
          SLOWMODE_CHANNEL_TYPES: function () {
            return z;
          },
          EDITABLE_VOICE_SETTINGS_TYPES: function () {
            return q;
          },
          VOICE_THREAD_PARENT_CHANNEL_TYPES: function () {
            return X;
          },
          CHANNEL_ELIGIBLE_FOR_UNREAD_SETTING: function () {
            return Q;
          },
          GUILD_FAVORITES_CHANNEL_TYPES: function () {
            return Z;
          },
          getAccessPermissions: function () {
            return es;
          },
          getBasicAccessPermissions: function () {
            return ea;
          },
          ChannelRecordBase: function () {
            return ec;
          },
          UnknownChannelRecord: function () {
            return ed;
          },
          GuildTextualChannelRecord: function () {
            return eE;
          },
          PrivateChannelRecord: function () {
            return eh;
          },
          DMChannelRecord: function () {
            return e_;
          },
          createChannelRecordFromServer: function () {
            return eT;
          },
          createChannelRecordFromInvite: function () {
            return eg;
          },
          castChannelRecord: function () {
            return eC;
          },
          createChannelRecord: function () {
            return ev;
          },
        }),
        n("222007"),
        n("808653"),
        n("70102"),
        n("702976");
      var i = n("917351"),
        r = n.n(i),
        s = n("482402"),
        a = n("335710"),
        o = n("316693"),
        l = n("627929"),
        u = n("923510"),
        c = n("834052"),
        d = n("568734"),
        f = n("49111"),
        E = n("724210"),
        p = n("333188");
      let h = new Set([
        f.ChannelTypes.GUILD_TEXT,
        f.ChannelTypes.GUILD_ANNOUNCEMENT,
        f.ChannelTypes.GUILD_STORE,
        f.ChannelTypes.ANNOUNCEMENT_THREAD,
        f.ChannelTypes.PUBLIC_THREAD,
        f.ChannelTypes.PRIVATE_THREAD,
        f.ChannelTypes.GUILD_DIRECTORY,
        f.ChannelTypes.GUILD_FORUM,
        f.ChannelTypes.GUILD_MEDIA,
        f.ChannelTypes.DM,
        f.ChannelTypes.GROUP_DM,
      ]);
      function _(e) {
        return h.has(e);
      }
      let S = new Set([
          f.ChannelTypes.DM,
          f.ChannelTypes.GROUP_DM,
          f.ChannelTypes.GUILD_TEXT,
          f.ChannelTypes.GUILD_VOICE,
          f.ChannelTypes.GUILD_STAGE_VOICE,
          f.ChannelTypes.GUILD_CATEGORY,
          f.ChannelTypes.GUILD_ANNOUNCEMENT,
          f.ChannelTypes.GUILD_STORE,
          f.ChannelTypes.ANNOUNCEMENT_THREAD,
          f.ChannelTypes.PUBLIC_THREAD,
          f.ChannelTypes.PRIVATE_THREAD,
          f.ChannelTypes.GUILD_DIRECTORY,
          f.ChannelTypes.GUILD_FORUM,
          f.ChannelTypes.GUILD_MEDIA,
        ]),
        m = new Set([
          f.ChannelTypes.GUILD_TEXT,
          f.ChannelTypes.GUILD_ANNOUNCEMENT,
          f.ChannelTypes.ANNOUNCEMENT_THREAD,
          f.ChannelTypes.PUBLIC_THREAD,
          f.ChannelTypes.PRIVATE_THREAD,
        ]);
      function T(e) {
        return m.has(e);
      }
      let g = new Set([
          f.ChannelTypes.GUILD_TEXT,
          f.ChannelTypes.GUILD_ANNOUNCEMENT,
          f.ChannelTypes.GUILD_FORUM,
          f.ChannelTypes.GUILD_MEDIA,
          f.ChannelTypes.GUILD_VOICE,
          f.ChannelTypes.GUILD_STAGE_VOICE,
        ]),
        I = new Set([
          f.ChannelTypes.GUILD_TEXT,
          f.ChannelTypes.GUILD_VOICE,
          f.ChannelTypes.GUILD_STAGE_VOICE,
          f.ChannelTypes.GUILD_CATEGORY,
          f.ChannelTypes.GUILD_ANNOUNCEMENT,
          f.ChannelTypes.GUILD_STORE,
          f.ChannelTypes.ANNOUNCEMENT_THREAD,
          f.ChannelTypes.PUBLIC_THREAD,
          f.ChannelTypes.PRIVATE_THREAD,
          f.ChannelTypes.GUILD_DIRECTORY,
          f.ChannelTypes.GUILD_FORUM,
          f.ChannelTypes.GUILD_MEDIA,
        ]);
      function C(e) {
        return I.has(e);
      }
      f.ChannelTypes.GUILD_TEXT,
        f.ChannelTypes.GUILD_ANNOUNCEMENT,
        f.ChannelTypes.GUILD_FORUM,
        f.ChannelTypes.GUILD_MEDIA;
      let v = new Set([
        f.ChannelTypes.GUILD_VOICE,
        f.ChannelTypes.GUILD_STAGE_VOICE,
      ]);
      function A(e) {
        return "SELECTABLE" !== e && v.has(e);
      }
      let R = new Set([f.ChannelTypes.GUILD_STAGE_VOICE]),
        N = new Set([f.ChannelTypes.DM, f.ChannelTypes.GROUP_DM]);
      function O(e) {
        return N.has(e);
      }
      let D = new Set([f.ChannelTypes.GROUP_DM]);
      function y(e) {
        return D.has(e);
      }
      let P = new Set([
        f.ChannelTypes.DM,
        f.ChannelTypes.GROUP_DM,
        f.ChannelTypes.GUILD_TEXT,
        f.ChannelTypes.GUILD_ANNOUNCEMENT,
        f.ChannelTypes.ANNOUNCEMENT_THREAD,
        f.ChannelTypes.PUBLIC_THREAD,
        f.ChannelTypes.PRIVATE_THREAD,
      ]);
      function L(e) {
        return P.has(e);
      }
      let b = new Set([
        f.ChannelTypes.DM,
        f.ChannelTypes.GROUP_DM,
        f.ChannelTypes.GUILD_VOICE,
        f.ChannelTypes.GUILD_STAGE_VOICE,
        f.ChannelTypes.PUBLIC_THREAD,
        f.ChannelTypes.PRIVATE_THREAD,
      ]);
      function M(e) {
        return b.has(e);
      }
      let U = new Set([
        f.ChannelTypes.GUILD_TEXT,
        f.ChannelTypes.GUILD_ANNOUNCEMENT,
        f.ChannelTypes.ANNOUNCEMENT_THREAD,
        f.ChannelTypes.PUBLIC_THREAD,
        f.ChannelTypes.PRIVATE_THREAD,
        f.ChannelTypes.GUILD_DIRECTORY,
        f.ChannelTypes.GUILD_FORUM,
        f.ChannelTypes.GUILD_MEDIA,
        f.ChannelTypes.DM,
        f.ChannelTypes.GROUP_DM,
      ]);
      function G(e) {
        return U.has(e);
      }
      let w = new Set([
          f.ChannelTypes.ANNOUNCEMENT_THREAD,
          f.ChannelTypes.PUBLIC_THREAD,
          f.ChannelTypes.PRIVATE_THREAD,
        ]),
        k = new Set([
          f.ChannelTypes.GUILD_TEXT,
          f.ChannelTypes.GUILD_ANNOUNCEMENT,
          f.ChannelTypes.GUILD_FORUM,
          f.ChannelTypes.GUILD_MEDIA,
        ]);
      function x(e) {
        return w.has(e);
      }
      let F = new Set([
        f.ChannelTypes.DM,
        f.ChannelTypes.GROUP_DM,
        f.ChannelTypes.GUILD_TEXT,
        f.ChannelTypes.GUILD_ANNOUNCEMENT,
        f.ChannelTypes.ANNOUNCEMENT_THREAD,
        f.ChannelTypes.PUBLIC_THREAD,
        f.ChannelTypes.PRIVATE_THREAD,
        f.ChannelTypes.GUILD_FORUM,
        f.ChannelTypes.GUILD_MEDIA,
        f.ChannelTypes.GUILD_DIRECTORY,
        f.ChannelTypes.GUILD_VOICE,
        f.ChannelTypes.GUILD_STAGE_VOICE,
      ]);
      function V(e) {
        return F.has(e);
      }
      let B = new Set([
          f.ChannelTypes.GUILD_TEXT,
          f.ChannelTypes.GUILD_ANNOUNCEMENT,
          f.ChannelTypes.GUILD_STORE,
          f.ChannelTypes.GUILD_VOICE,
          f.ChannelTypes.GUILD_STAGE_VOICE,
          f.ChannelTypes.ANNOUNCEMENT_THREAD,
          f.ChannelTypes.PUBLIC_THREAD,
          f.ChannelTypes.PRIVATE_THREAD,
          f.ChannelTypes.GUILD_DIRECTORY,
          f.ChannelTypes.GUILD_FORUM,
          f.ChannelTypes.GUILD_MEDIA,
        ]),
        H = new Set([
          f.ChannelTypes.GUILD_ANNOUNCEMENT,
          f.ChannelTypes.GUILD_CATEGORY,
          f.ChannelTypes.GUILD_STORE,
          f.ChannelTypes.GUILD_TEXT,
          f.ChannelTypes.GUILD_VOICE,
          f.ChannelTypes.GUILD_STAGE_VOICE,
          f.ChannelTypes.GUILD_DIRECTORY,
          f.ChannelTypes.GUILD_FORUM,
          f.ChannelTypes.GUILD_MEDIA,
        ]),
        j = new Set([
          f.ChannelTypes.GUILD_TEXT,
          f.ChannelTypes.GUILD_ANNOUNCEMENT,
        ]),
        Y = new Set([
          f.ChannelTypes.GUILD_TEXT,
          f.ChannelTypes.GUILD_ANNOUNCEMENT,
          f.ChannelTypes.GUILD_FORUM,
          f.ChannelTypes.GUILD_MEDIA,
        ]),
        W = new Set([
          f.ChannelTypes.GUILD_TEXT,
          f.ChannelTypes.GUILD_ANNOUNCEMENT,
          f.ChannelTypes.GUILD_FORUM,
          f.ChannelTypes.GUILD_MEDIA,
          f.ChannelTypes.GUILD_VOICE,
          f.ChannelTypes.GUILD_STAGE_VOICE,
        ]),
        K = new Set([
          f.ChannelTypes.GUILD_ANNOUNCEMENT,
          f.ChannelTypes.GUILD_TEXT,
          f.ChannelTypes.GUILD_FORUM,
          f.ChannelTypes.GUILD_MEDIA,
          f.ChannelTypes.ANNOUNCEMENT_THREAD,
        ]),
        z = new Set([
          f.ChannelTypes.GUILD_TEXT,
          f.ChannelTypes.GUILD_FORUM,
          f.ChannelTypes.GUILD_MEDIA,
          f.ChannelTypes.ANNOUNCEMENT_THREAD,
          f.ChannelTypes.PUBLIC_THREAD,
          f.ChannelTypes.PRIVATE_THREAD,
          f.ChannelTypes.GUILD_VOICE,
          f.ChannelTypes.GUILD_STAGE_VOICE,
        ]),
        q = new Set([
          f.ChannelTypes.PUBLIC_THREAD,
          f.ChannelTypes.PRIVATE_THREAD,
          f.ChannelTypes.GUILD_VOICE,
          f.ChannelTypes.GUILD_STAGE_VOICE,
        ]),
        X = new Set([
          f.ChannelTypes.GUILD_TEXT,
          f.ChannelTypes.GUILD_FORUM,
          f.ChannelTypes.GUILD_MEDIA,
        ]),
        Q = new Set([
          f.ChannelTypes.GUILD_TEXT,
          f.ChannelTypes.GUILD_CATEGORY,
          f.ChannelTypes.GUILD_FORUM,
          f.ChannelTypes.GUILD_ANNOUNCEMENT,
        ]),
        Z = new Set([
          f.ChannelTypes.GUILD_TEXT,
          f.ChannelTypes.GUILD_ANNOUNCEMENT,
          f.ChannelTypes.GUILD_FORUM,
          f.ChannelTypes.GUILD_VOICE,
        ]);
      function J(e) {
        let t = {};
        return (
          null == e ||
            e.forEach(e => {
              t[e.id] = {
                id: e.id,
                type: e.type,
                allow: o.default.deserialize(e.allow),
                deny: o.default.deserialize(e.deny),
              };
            }),
          t
        );
      }
      function $(e) {
        return null == e
          ? {}
          : r.reduce(e, (e, t) => ((e[t.id] = t.nick), e), {});
      }
      function ee(e) {
        return null == e
          ? []
          : e.map(e => ({
              id: e.id,
              name: e.name,
              emojiId: 0 !== e.emoji_id ? e.emoji_id : void 0,
              emojiName: e.emoji_name,
              moderated: e.moderated,
            }));
      }
      function et(e) {
        return null != e ? { id: e.id, name: e.name } : void 0;
      }
      function en(e) {
        if (null == e) return null;
        switch (e.type) {
          case p.VoiceCallBackgroundTypes.EMPTY:
            return { type: e.type };
          case p.VoiceCallBackgroundTypes.GRADIENT:
            return { type: e.type, resourceId: e.resource_id };
          default:
            throw Error("unknown voice background display type");
        }
      }
      let ei = o.default.combine(
          f.Permissions.CONNECT,
          f.Permissions.VIEW_CHANNEL
        ),
        er = f.BasicPermissions.CONNECT | f.BasicPermissions.VIEW_CHANNEL;
      function es(e) {
        return A(e) ? ei : f.Permissions.VIEW_CHANNEL;
      }
      function ea(e) {
        return A(e) ? er : f.BasicPermissions.VIEW_CHANNEL;
      }
      class eo {
        constructor(e) {
          var t, n, i;
          (this.id = e.id),
            (this.type =
              null !== (t = e.type) && void 0 !== t
                ? t
                : f.ChannelTypes.GUILD_TEXT),
            (this.name = null !== (n = e.name) && void 0 !== n ? n : ""),
            (this.guild_id =
              null !== (i = e.guild_id) && void 0 !== i ? i : null);
        }
      }
      function el(e) {
        return (
          "topic" in e && ((e.topic_ = e.topic), delete e.topic),
          "position" in e && ((e.position_ = e.position), delete e.position),
          "permissionOverwrites" in e &&
            ((e.permissionOverwrites_ = e.permissionOverwrites),
            delete e.permissionOverwrites),
          "bitrate" in e && ((e.bitrate_ = e.bitrate), delete e.bitrate),
          "userLimit" in e &&
            ((e.userLimit_ = e.userLimit), delete e.userLimit),
          "nsfw" in e && ((e.nsfw_ = e.nsfw), delete e.nsfw),
          "rateLimitPerUser" in e &&
            ((e.rateLimitPerUser_ = e.rateLimitPerUser),
            delete e.rateLimitPerUser),
          "flags" in e && ((e.flags_ = e.flags), delete e.flags),
          e
        );
      }
      let eu = Object.freeze({});
      class ec extends eo {
        get permissionOverwrites() {
          var e;
          return null !== (e = this.permissionOverwrites_) && void 0 !== e
            ? e
            : eu;
        }
        get topic() {
          var e;
          return null !== (e = this.topic_) && void 0 !== e ? e : "";
        }
        get position() {
          var e;
          return null !== (e = this.position_) && void 0 !== e ? e : 0;
        }
        get bitrate() {
          var e;
          return null !== (e = this.bitrate_) && void 0 !== e
            ? e
            : f.BITRATE_DEFAULT;
        }
        get userLimit() {
          var e;
          return null !== (e = this.userLimit_) && void 0 !== e ? e : 0;
        }
        get nsfw() {
          var e;
          return null !== (e = this.nsfw_) && void 0 !== e && e;
        }
        get rateLimitPerUser() {
          var e;
          return null !== (e = this.rateLimitPerUser_) && void 0 !== e ? e : 0;
        }
        get flags() {
          var e;
          return null !== (e = this.flags_) && void 0 !== e ? e : 0;
        }
        toJS() {
          return { ...this };
        }
        set(e, t) {
          return this.merge(el({ [e]: t }));
        }
        merge(e) {
          let t = null,
            n = el(e);
          for (let e in n)
            n.hasOwnProperty(e) &&
              this[e] !== n[e] &&
              (null == t && (t = this.toJS()), (t[e] = n[e]));
          return null != t ? new this.constructor(t) : this;
        }
        computeLurkerPermissionsAllowList() {
          if (this.isGuildStageVoice() && c.default.isPublic(this.id))
            return u.LURKER_STAGE_CHANNEL_PERMISSIONS_ALLOWLIST;
        }
        isNSFW() {
          return this.nsfw;
        }
        isManaged() {
          return null != this.application_id;
        }
        isPrivate() {
          return O(this.type);
        }
        isGroupDM() {
          return this.type === f.ChannelTypes.GROUP_DM;
        }
        isMultiUserDM() {
          return y(this.type);
        }
        isDM() {
          return this.type === f.ChannelTypes.DM;
        }
        isSystemDM() {
          return !1;
        }
        isArchivedThread() {
          var e;
          return (
            this.isThread() &&
            (null === (e = this.threadMetadata) || void 0 === e
              ? void 0
              : e.archived) === !0
          );
        }
        isLockedThread() {
          var e;
          return (
            this.isThread() &&
            (null === (e = this.threadMetadata) || void 0 === e
              ? void 0
              : e.locked) === !0
          );
        }
        isScheduledForDeletion() {
          return this.hasFlag(E.ChannelFlags.IS_SCHEDULED_FOR_DELETION);
        }
        isBroadcastChannel() {
          return this.hasFlag(E.ChannelFlags.IS_BROADCASTING);
        }
        isArchivedLockedThread() {
          var e, t;
          return (
            w.has(this.type) &&
            (null === (e = this.threadMetadata) || void 0 === e
              ? void 0
              : e.archived) === !0 &&
            (null === (t = this.threadMetadata) || void 0 === t
              ? void 0
              : t.locked) === !0
          );
        }
        isForumPost() {
          return (
            this.type === f.ChannelTypes.PUBLIC_THREAD &&
            null != this.parentChannelThreadType &&
            f.ChannelTypesSets.GUILD_THREADS_ONLY.has(
              this.parentChannelThreadType
            )
          );
        }
        isCategory() {
          return this.type === f.ChannelTypes.GUILD_CATEGORY;
        }
        isVocal() {
          return M(this.type);
        }
        isGuildVocal() {
          return A(this.type);
        }
        isGuildVocalOrThread() {
          return this.isGuildVocal() || this.isVocalThread();
        }
        isGuildVoice() {
          return this.type === f.ChannelTypes.GUILD_VOICE;
        }
        isGuildStageVoice() {
          return this.type === f.ChannelTypes.GUILD_STAGE_VOICE;
        }
        isListenModeCapable() {
          return this.isGuildStageVoice();
        }
        isThread() {
          return x(this.type);
        }
        isAnnouncementThread() {
          return this.type === f.ChannelTypes.ANNOUNCEMENT_THREAD;
        }
        isVocalThread() {
          return (
            this.type === f.ChannelTypes.PUBLIC_THREAD ||
            this.type === f.ChannelTypes.PRIVATE_THREAD
          );
        }
        isActiveThread() {
          var e;
          return (
            this.isThread() &&
            (null === (e = this.threadMetadata) || void 0 === e
              ? void 0
              : e.archived) !== !0
          );
        }
        isDirectory() {
          return this.type === f.ChannelTypes.GUILD_DIRECTORY;
        }
        isForumLikeChannel() {
          return this.isForumChannel() || this.isMediaChannel();
        }
        isForumChannel() {
          return this.type === f.ChannelTypes.GUILD_FORUM;
        }
        isMediaChannel() {
          return this.type === f.ChannelTypes.GUILD_MEDIA;
        }
        isMediaPost() {
          return (
            this.type === f.ChannelTypes.PUBLIC_THREAD &&
            this.parentChannelThreadType === f.ChannelTypes.GUILD_MEDIA
          );
        }
        isRoleSubscriptionTemplatePreviewChannel() {
          return this.hasFlag(
            E.ChannelFlags.IS_ROLE_SUBSCRIPTION_TEMPLATE_PREVIEW_CHANNEL
          );
        }
        isOwner(e) {
          return this.ownerId === e;
        }
        getGuildId() {
          return this.guild_id;
        }
        getApplicationId() {
          return this.application_id;
        }
        getDefaultSortOrder() {
          var e;
          return null !== (e = this.defaultSortOrder) && void 0 !== e
            ? e
            : a.ThreadSortOrder.LATEST_ACTIVITY;
        }
        getDefaultLayout() {
          return this.isMediaChannel()
            ? s.ForumLayout.GRID
            : null == this.defaultForumLayout ||
                this.defaultForumLayout === s.ForumLayout.DEFAULT
              ? s.ForumLayout.LIST
              : this.defaultForumLayout;
        }
        get accessPermissions() {
          return es(this.type);
        }
        hasFlag(e) {
          return (0, d.hasFlag)(this.flags, e);
        }
      }
      class ed extends ec {
        static fromServer(e, t) {
          var n, i, r;
          let s = {
            application_id: e.application_id,
            appliedTags: e.applied_tags,
            availableTags:
              null != e.available_tags ? ee(e.available_tags) : void 0,
            bitrate_: e.bitrate,
            defaultAutoArchiveDuration: e.default_auto_archive_duration,
            defaultForumLayout: e.default_forum_layout,
            defaultReactionEmoji:
              null != e.default_reaction_emoji
                ? {
                    emojiId:
                      0 !== e.default_reaction_emoji.emoji_id
                        ? e.default_reaction_emoji.emoji_id
                        : void 0,
                    emojiName: e.default_reaction_emoji.emoji_name,
                  }
                : void 0,
            defaultSortOrder: e.default_sort_order,
            defaultThreadRateLimitPerUser: e.default_thread_rate_limit_per_user,
            flags_: e.flags,
            guild_id:
              null !== (n = null != t ? t : e.guild_id) && void 0 !== n
                ? n
                : null,
            icon: e.icon,
            iconEmoji: et(e.icon_emoji),
            id: e.id,
            isMessageRequest: e.is_message_request,
            isMessageRequestTimestamp: e.is_message_request_timestamp,
            isSpam: e.is_spam,
            lastMessageId: e.last_message_id,
            lastPinTimestamp: e.last_pin_timestamp,
            member:
              null != e.member
                ? {
                    flags: e.member.flags,
                    muted: e.member.muted,
                    muteConfig: e.member.mute_config,
                    joinTimestamp: e.member.join_timestamp,
                  }
                : void 0,
            memberCount: e.member_count,
            memberIdsPreview: e.member_ids_preview,
            memberListId: e.member_list_id,
            messageCount: e.message_count,
            name: null !== (i = e.name) && void 0 !== i ? i : "",
            nicks: $(e.nicks),
            nsfw_: e.nsfw,
            originChannelId: e.origin_channel_id,
            ownerId: e.owner_id,
            parent_id: e.parent_id,
            parentChannelThreadType: void 0,
            permissionOverwrites_: J(e.permission_overwrites),
            position_: e.position,
            rateLimitPerUser_: e.rate_limit_per_user,
            rawRecipients: null != e.recipients ? e.recipients : [],
            recipients: null != e.recipients ? e.recipients.map(e => e.id) : [],
            rtcRegion: e.rtc_region,
            safetyWarnings: e.safety_warnings,
            template: e.template,
            themeColor: e.theme_color,
            threadMetadata:
              null != e.thread_metadata
                ? {
                    archived: e.thread_metadata.archived,
                    autoArchiveDuration:
                      e.thread_metadata.auto_archive_duration,
                    archiveTimestamp: e.thread_metadata.archive_timestamp,
                    createTimestamp: e.thread_metadata.create_timestamp,
                    locked: e.thread_metadata.locked,
                    invitable:
                      null === (r = e.thread_metadata.invitable) ||
                      void 0 === r ||
                      r,
                  }
                : void 0,
            topic_: e.topic,
            totalMessageSent: e.total_message_sent,
            type: null != e.type ? e.type : f.ChannelTypes.UNKNOWN,
            userLimit_: e.user_limit,
            version: e.version,
            videoQualityMode: e.video_quality_mode,
            voiceBackgroundDisplay: en(e.voice_background_display),
          };
          return (0, l.dangerouslyCast)(s, ed);
        }
        constructor(e) {
          super(e),
            (this.application_id = e.application_id),
            (this.appliedTags = e.appliedTags),
            (this.availableTags = e.availableTags),
            (this.bitrate_ = e.bitrate_),
            (this.defaultAutoArchiveDuration = e.defaultAutoArchiveDuration),
            (this.defaultForumLayout = e.defaultForumLayout),
            (this.defaultReactionEmoji = e.defaultReactionEmoji),
            (this.defaultSortOrder = e.defaultSortOrder),
            (this.defaultThreadRateLimitPerUser =
              e.defaultThreadRateLimitPerUser),
            (this.flags_ = e.flags_),
            (this.icon = e.icon),
            (this.iconEmoji = e.iconEmoji),
            (this.isMessageRequest = e.isMessageRequest),
            (this.isMessageRequestTimestamp = e.isMessageRequestTimestamp),
            (this.isSpam = e.isSpam),
            (this.lastMessageId = e.lastMessageId),
            (this.lastPinTimestamp = e.lastPinTimestamp),
            (this.member = e.member),
            (this.memberCount = e.memberCount),
            (this.memberIdsPreview = e.memberIdsPreview),
            (this.memberListId = e.memberListId),
            (this.messageCount = e.messageCount),
            (this.nicks = e.nicks),
            (this.nsfw_ = e.nsfw_),
            (this.originChannelId = e.originChannelId),
            (this.ownerId = e.ownerId),
            (this.parent_id = e.parent_id),
            (this.parentChannelThreadType = e.parentChannelThreadType),
            (this.permissionOverwrites_ = e.permissionOverwrites_),
            (this.position_ = e.position_),
            (this.rateLimitPerUser_ = e.rateLimitPerUser_),
            (this.rawRecipients = e.rawRecipients),
            (this.recipients = e.recipients),
            (this.rtcRegion = e.rtcRegion),
            (this.safetyWarnings = e.safetyWarnings),
            (this.template = e.template),
            (this.themeColor = e.themeColor),
            (this.threadMetadata = e.threadMetadata),
            (this.topic_ = e.topic_),
            (this.userLimit_ = e.userLimit_),
            (this.version = e.version),
            (this.videoQualityMode = e.videoQualityMode),
            (this.voiceBackgroundDisplay = e.voiceBackgroundDisplay);
        }
      }
      class ef extends ec {
        static fromServer(e, t) {
          var n, i, r, s;
          let a = {
            application_id: e.application_id,
            bitrate_: e.bitrate,
            flags_: e.flags,
            guild_id:
              null !== (n = null != t ? t : e.guild_id) && void 0 !== n
                ? n
                : null,
            iconEmoji: et(e.icon_emoji),
            id: e.id,
            lastMessageId: e.last_message_id,
            lastPinTimestamp: e.last_pin_timestamp,
            memberListId: e.member_list_id,
            name: null !== (i = e.name) && void 0 !== i ? i : "",
            nsfw_: null !== (r = e.nsfw) && void 0 !== r && r,
            originChannelId: e.origin_channel_id,
            parent_id: e.parent_id,
            permissionOverwrites_: J(e.permission_overwrites),
            position_: e.position,
            rateLimitPerUser_:
              null !== (s = e.rate_limit_per_user) && void 0 !== s ? s : 0,
            rtcRegion: e.rtc_region,
            themeColor: e.theme_color,
            topic_: e.topic,
            type: null != e.type ? e.type : f.ChannelTypes.GUILD_VOICE,
            userLimit_: e.user_limit,
            version: e.version,
            videoQualityMode: e.video_quality_mode,
            voiceBackgroundDisplay: en(e.voice_background_display),
          };
          return eC(a);
        }
        constructor(e) {
          var t;
          super(e),
            (this.application_id = e.application_id),
            (this.bitrate_ = e.bitrate_),
            (this.flags_ = e.flags_),
            (this.iconEmoji = e.iconEmoji),
            (this.lastMessageId = e.lastMessageId),
            (this.lastPinTimestamp = e.lastPinTimestamp),
            (this.memberListId = e.memberListId),
            (this.nsfw_ = e.nsfw_),
            (this.originChannelId = e.originChannelId),
            (this.parent_id = e.parent_id),
            (this.permissionOverwrites_ =
              null !== (t = e.permissionOverwrites_) && void 0 !== t ? t : {}),
            (this.position_ = e.position_),
            (this.rateLimitPerUser_ = e.rateLimitPerUser_),
            (this.rtcRegion = e.rtcRegion),
            (this.themeColor = e.themeColor),
            (this.topic_ = e.topic_),
            (this.userLimit_ = e.userLimit_),
            (this.version = e.version),
            (this.videoQualityMode = e.videoQualityMode),
            (this.voiceBackgroundDisplay = e.voiceBackgroundDisplay);
        }
      }
      class eE extends ec {
        static fromServer(e, t) {
          var n, i, r, s;
          let a = {
            application_id: e.application_id,
            defaultAutoArchiveDuration: e.default_auto_archive_duration,
            defaultThreadRateLimitPerUser: e.default_thread_rate_limit_per_user,
            flags_: e.flags,
            guild_id:
              null !== (n = null != t ? t : e.guild_id) && void 0 !== n
                ? n
                : null,
            iconEmoji: et(e.icon_emoji),
            id: e.id,
            lastMessageId: e.last_message_id,
            lastPinTimestamp: e.last_pin_timestamp,
            memberListId: e.member_list_id,
            name: null !== (i = e.name) && void 0 !== i ? i : "",
            nsfw_: null !== (r = e.nsfw) && void 0 !== r && r,
            parent_id: e.parent_id,
            permissionOverwrites_: J(e.permission_overwrites),
            position_: e.position,
            rateLimitPerUser_:
              null !== (s = e.rate_limit_per_user) && void 0 !== s ? s : 0,
            themeColor: e.theme_color,
            topic_: e.topic,
            type: null != e.type ? e.type : f.ChannelTypes.GUILD_TEXT,
            version: e.version,
          };
          return eC(a);
        }
        constructor(e) {
          var t;
          super(e),
            (this.application_id = e.application_id),
            (this.defaultAutoArchiveDuration = e.defaultAutoArchiveDuration),
            (this.defaultThreadRateLimitPerUser =
              e.defaultThreadRateLimitPerUser),
            (this.flags_ = e.flags_),
            (this.iconEmoji = e.iconEmoji),
            (this.lastMessageId = e.lastMessageId),
            (this.lastPinTimestamp = e.lastPinTimestamp),
            (this.memberListId = e.memberListId),
            (this.nsfw_ = e.nsfw_),
            (this.parent_id = e.parent_id),
            (this.permissionOverwrites_ =
              null !== (t = e.permissionOverwrites_) && void 0 !== t ? t : {}),
            (this.position_ = e.position_),
            (this.rateLimitPerUser_ = e.rateLimitPerUser_),
            (this.themeColor = e.themeColor),
            (this.topic_ = e.topic_),
            (this.version = e.version);
        }
      }
      class ep extends ec {
        static fromServer(e, t) {
          var n, i, r, s;
          let a = {
            availableTags: null != e.available_tags ? ee(e.available_tags) : [],
            defaultAutoArchiveDuration: e.default_auto_archive_duration,
            defaultForumLayout: e.default_forum_layout,
            defaultReactionEmoji:
              null != e.default_reaction_emoji
                ? {
                    emojiId:
                      0 !== e.default_reaction_emoji.emoji_id
                        ? e.default_reaction_emoji.emoji_id
                        : void 0,
                    emojiName: e.default_reaction_emoji.emoji_name,
                  }
                : void 0,
            defaultSortOrder: e.default_sort_order,
            defaultThreadRateLimitPerUser: e.default_thread_rate_limit_per_user,
            flags_: e.flags,
            guild_id:
              null !== (n = null != t ? t : e.guild_id) && void 0 !== n
                ? n
                : null,
            iconEmoji: et(e.icon_emoji),
            id: e.id,
            lastMessageId: e.last_message_id,
            lastPinTimestamp: e.last_pin_timestamp,
            memberListId: e.member_list_id,
            name: null !== (i = e.name) && void 0 !== i ? i : "",
            nsfw_: null !== (r = e.nsfw) && void 0 !== r && r,
            parent_id: e.parent_id,
            permissionOverwrites_: J(e.permission_overwrites),
            position_: e.position,
            rateLimitPerUser_:
              null !== (s = e.rate_limit_per_user) && void 0 !== s ? s : 0,
            template: e.template,
            themeColor: e.theme_color,
            topic_: e.topic,
            type: null != e.type ? e.type : f.ChannelTypes.GUILD_TEXT,
            version: e.version,
          };
          return (0, l.dangerouslyCast)(a, ep);
        }
        constructor(e) {
          var t, n;
          super(e),
            (this.availableTags =
              null !== (t = e.availableTags) && void 0 !== t ? t : []),
            (this.defaultAutoArchiveDuration = e.defaultAutoArchiveDuration),
            (this.defaultForumLayout = e.defaultForumLayout),
            (this.defaultReactionEmoji = e.defaultReactionEmoji),
            (this.defaultSortOrder = e.defaultSortOrder),
            (this.defaultThreadRateLimitPerUser =
              e.defaultThreadRateLimitPerUser),
            (this.flags_ = e.flags_),
            (this.iconEmoji = e.iconEmoji),
            (this.lastMessageId = e.lastMessageId),
            (this.lastPinTimestamp = e.lastPinTimestamp),
            (this.memberListId = e.memberListId),
            (this.nsfw_ = e.nsfw_),
            (this.parent_id = e.parent_id),
            (this.permissionOverwrites_ =
              null !== (n = e.permissionOverwrites_) && void 0 !== n ? n : {}),
            (this.position_ = e.position_),
            (this.rateLimitPerUser_ = e.rateLimitPerUser_),
            (this.template = e.template),
            (this.themeColor = e.themeColor),
            (this.topic_ = e.topic_),
            (this.version = e.version);
        }
      }
      class eh extends ec {
        static fromServer(e) {
          var t, n;
          let i = {
            application_id: e.application_id,
            flags_: e.flags,
            guild_id: null,
            icon: e.icon,
            id: e.id,
            isMessageRequest: e.is_message_request,
            isMessageRequestTimestamp: e.is_message_request_timestamp,
            isSpam: null !== (t = e.is_spam) && void 0 !== t && t,
            lastMessageId: e.last_message_id,
            lastPinTimestamp: e.last_pin_timestamp,
            name: null !== (n = e.name) && void 0 !== n ? n : "",
            nicks: $(e.nicks),
            ownerId: e.owner_id,
            rawRecipients: null != e.recipients ? e.recipients : [],
            recipients: null != e.recipients ? e.recipients.map(e => e.id) : [],
            safetyWarnings: e.safety_warnings,
            type: null != e.type ? e.type : f.ChannelTypes.DM,
          };
          return (0, l.dangerouslyCast)(i, eh);
        }
        isSystemDM() {
          let e = this.rawRecipients[0];
          return (
            this.type === f.ChannelTypes.DM && null != e && !0 === e.system
          );
        }
        getRecipientId() {
          return this.recipients[0];
        }
        addRecipient(e, t, n) {
          if (e === n) return this;
          {
            var i;
            let n = this.set(
              "recipients",
              r.uniq([
                ...(null !== (i = this.recipients) && void 0 !== i ? i : []),
                e,
              ])
            );
            return null == t ? n : n.set("nicks", { ...n.nicks, [e]: t });
          }
        }
        removeRecipient(e) {
          return this.set("recipients", r.without(this.recipients, e));
        }
        constructor(e) {
          var t, n, i;
          super(e),
            (this.application_id = e.application_id),
            (this.flags_ = e.flags_),
            (this.icon = e.icon),
            (this.isMessageRequest = e.isMessageRequest),
            (this.isMessageRequestTimestamp = e.isMessageRequestTimestamp),
            (this.isSpam = e.isSpam),
            (this.lastMessageId = e.lastMessageId),
            (this.lastPinTimestamp = e.lastPinTimestamp),
            (this.nicks = e.nicks),
            (this.ownerId = e.ownerId),
            (this.rawRecipients =
              null !== (t = e.rawRecipients) && void 0 !== t ? t : []),
            (this.recipients =
              null !== (n = e.recipients) && void 0 !== n ? n : []),
            (this.safetyWarnings =
              null !== (i = e.safetyWarnings) && void 0 !== i ? i : []);
        }
      }
      class e_ extends eh {}
      class eS extends ec {
        static fromServer(e, t) {
          var n, i, r, s, a;
          let o = {
            appliedTags: null !== (n = e.applied_tags) && void 0 !== n ? n : [],
            bitrate_: e.bitrate,
            flags_: e.flags,
            guild_id:
              null !== (i = null != t ? t : e.guild_id) && void 0 !== i
                ? i
                : null,
            id: e.id,
            lastMessageId: e.last_message_id,
            lastPinTimestamp: e.last_pin_timestamp,
            member:
              null != e.member
                ? {
                    flags: e.member.flags,
                    muted: e.member.muted,
                    muteConfig: e.member.mute_config,
                    joinTimestamp: e.member.join_timestamp,
                  }
                : void 0,
            memberCount: e.member_count,
            memberIdsPreview: e.member_ids_preview,
            messageCount: e.message_count,
            name: null !== (r = e.name) && void 0 !== r ? r : "",
            nsfw_: null !== (s = e.nsfw) && void 0 !== s && s,
            ownerId: e.owner_id,
            parent_id: e.parent_id,
            parentChannelThreadType: e.parentChannelThreadType,
            rateLimitPerUser_: e.rate_limit_per_user,
            rtcRegion: e.rtc_region,
            threadMetadata:
              null != e.thread_metadata
                ? {
                    archived: e.thread_metadata.archived,
                    autoArchiveDuration:
                      e.thread_metadata.auto_archive_duration,
                    archiveTimestamp: e.thread_metadata.archive_timestamp,
                    createTimestamp: e.thread_metadata.create_timestamp,
                    locked: e.thread_metadata.locked,
                    invitable:
                      null === (a = e.thread_metadata.invitable) ||
                      void 0 === a ||
                      a,
                  }
                : void 0,
            totalMessageSent: e.total_message_sent,
            type: null != e.type ? e.type : f.ChannelTypes.PUBLIC_THREAD,
            userLimit_: e.user_limit,
            videoQualityMode: e.video_quality_mode,
          };
          return (0, l.dangerouslyCast)(o, eS);
        }
        constructor(e) {
          var t;
          super(e),
            (this.appliedTags =
              null !== (t = e.appliedTags) && void 0 !== t ? t : []),
            (this.bitrate_ = e.bitrate_),
            (this.flags_ = e.flags_),
            (this.lastMessageId = e.lastMessageId),
            (this.lastPinTimestamp = e.lastPinTimestamp),
            (this.member = e.member),
            (this.memberCount = e.memberCount),
            (this.memberIdsPreview = e.memberIdsPreview),
            (this.messageCount = e.messageCount),
            (this.nsfw_ = e.nsfw_),
            (this.ownerId = e.ownerId),
            (this.parent_id = e.parent_id),
            (this.parentChannelThreadType = e.parentChannelThreadType),
            (this.rateLimitPerUser_ = e.rateLimitPerUser_),
            (this.rtcRegion = e.rtcRegion),
            (this.threadMetadata = e.threadMetadata),
            (this.userLimit_ = e.userLimit_),
            (this.videoQualityMode = e.videoQualityMode);
        }
      }
      let em = {
        [f.ChannelTypes.DM]: eh.fromServer,
        [f.ChannelTypes.GROUP_DM]: eh.fromServer,
        [f.ChannelTypes.GUILD_TEXT]: eE.fromServer,
        [f.ChannelTypes.GUILD_VOICE]: ef.fromServer,
        [f.ChannelTypes.GUILD_STAGE_VOICE]: ef.fromServer,
        [f.ChannelTypes.GUILD_CATEGORY]: eE.fromServer,
        [f.ChannelTypes.GUILD_ANNOUNCEMENT]: eE.fromServer,
        [f.ChannelTypes.GUILD_STORE]: eE.fromServer,
        [f.ChannelTypes.ANNOUNCEMENT_THREAD]: eS.fromServer,
        [f.ChannelTypes.PUBLIC_THREAD]: eS.fromServer,
        [f.ChannelTypes.PRIVATE_THREAD]: eS.fromServer,
        [f.ChannelTypes.GUILD_DIRECTORY]: eE.fromServer,
        [f.ChannelTypes.GUILD_FORUM]: ep.fromServer,
        [f.ChannelTypes.GUILD_MEDIA]: ep.fromServer,
      };
      function eT(e, t) {
        var n, i;
        let r =
          null !==
            (i =
              em[
                null !== (n = e.type) && void 0 !== n
                  ? n
                  : f.ChannelTypes.GUILD_TEXT
              ]) && void 0 !== i
            ? i
            : ed.fromServer;
        return r(e, t);
      }
      function eg(e) {
        return ev(e);
      }
      let eI = {
        [f.ChannelTypes.DM]: e_,
        [f.ChannelTypes.GROUP_DM]: class e extends eh {},
        [f.ChannelTypes.GUILD_TEXT]: class e extends eE {},
        [f.ChannelTypes.GUILD_VOICE]: class e extends ef {},
        [f.ChannelTypes.GUILD_STAGE_VOICE]: class e extends ef {},
        [f.ChannelTypes.GUILD_CATEGORY]: class e extends eE {},
        [f.ChannelTypes.GUILD_ANNOUNCEMENT]: class e extends eE {},
        [f.ChannelTypes.GUILD_STORE]: class e extends eE {},
        [f.ChannelTypes.ANNOUNCEMENT_THREAD]: eS,
        [f.ChannelTypes.PUBLIC_THREAD]: eS,
        [f.ChannelTypes.PRIVATE_THREAD]: eS,
        [f.ChannelTypes.GUILD_DIRECTORY]: class e extends eE {},
        [f.ChannelTypes.GUILD_FORUM]: ep,
        [f.ChannelTypes.GUILD_MEDIA]: ep,
      };
      function eC(e) {
        var t, n;
        let i =
          null !==
            (n =
              eI[
                null !== (t = e.type) && void 0 !== t
                  ? t
                  : f.ChannelTypes.GUILD_TEXT
              ]) && void 0 !== n
            ? n
            : ed;
        return (0, l.dangerouslyCast)(e, i);
      }
      function ev(e) {
        var t, n;
        let i =
          null !==
            (n =
              eI[
                null !== (t = e.type) && void 0 !== t
                  ? t
                  : f.ChannelTypes.GUILD_TEXT
              ]) && void 0 !== n
            ? n
            : ed;
        return new i(el(e));
      }
    },
    331082: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i,
        r = n("666038");
      i = class e extends r.default {
        static createFromServer(t) {
          return new e(t);
        }
        constructor(e) {
          super(), (this.id = e.id), (this.name = e.name);
        }
      };
    },
    984273: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i,
        r = n("666038"),
        s = n("719923"),
        a = n("49111");
      i = class e extends r.default {
        static createFromServer(t) {
          var n, i;
          return new e({
            id: t.id,
            skuId: t.sku_id,
            applicationId: t.application_id,
            userId: t.user_id,
            gifterId: t.gifter_user_id,
            type: t.type,
            branches: null !== (n = t.branches) && void 0 !== n ? n : [],
            startsAt: null != t.starts_at ? new Date(t.starts_at) : null,
            endsAt: null != t.ends_at ? new Date(t.ends_at) : null,
            subscriptionId: t.subscription_id,
            subscriptionPlanId:
              null != t.subscription_plan ? t.subscription_plan.id : null,
            parentId: null != t.parent_id ? t.parent_id : null,
            consumed: null != t.consumed ? t.consumed : null,
            giftCodeBatchId:
              null !== (i = t.gift_code_batch_id) && void 0 !== i ? i : null,
            giftStyle: t.gift_style,
            guildId: t.guild_id,
            deleted: t.deleted,
          });
        }
        get isGiftable() {
          return (
            this.type === a.EntitlementTypes.USER_GIFT && null == this.gifterId
          );
        }
        isValid(e, t) {
          let n =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : null;
          if (this.isGiftable || this.deleted) return !1;
          if (this.type === a.EntitlementTypes.PREMIUM_SUBSCRIPTION) {
            let n = t.get(this.skuId);
            if (
              (null != n && !n.premium) ||
              !s.default.canInstallPremiumApplications(e)
            )
              return !1;
          }
          let i = new Date();
          if (
            (null != this.startsAt && i < this.startsAt) ||
            (null != this.endsAt && i >= this.endsAt)
          )
            return !1;
          if (null != n) {
            if (0 === this.branches.length) {
              if (this.applicationId !== n) return !1;
            } else if (!this.branches.includes(n)) return !1;
          }
          return !0;
        }
        constructor(e) {
          super(),
            (this.id = e.id),
            (this.skuId = e.skuId),
            (this.applicationId = e.applicationId),
            (this.userId = e.userId),
            (this.gifterId = e.gifterId),
            (this.type = e.type),
            (this.branches = e.branches),
            (this.startsAt = e.startsAt),
            (this.endsAt = e.endsAt),
            (this.subscriptionId = e.subscriptionId),
            (this.subscriptionPlanId = e.subscriptionPlanId),
            (this.parentId = e.parentId),
            (this.consumed = e.consumed),
            (this.giftCodeBatchId = e.giftCodeBatchId),
            (this.giftStyle = e.giftStyle),
            (this.guildId = e.guildId),
            (this.deleted = e.deleted);
        }
      };
    },
    813006: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("222007");
      var i,
        r = n("666038"),
        s = n("315102"),
        a = n("605136"),
        o = n("299039"),
        l = n("159885"),
        u = n("49111"),
        c = n("958706"),
        d = n("646718");
      i = class extends r.default {
        getSafetyAlertsChannelId() {
          var e;
          return null !== (e = this.safetyAlertsChannelId) && void 0 !== e
            ? e
            : this.publicUpdatesChannelId;
        }
        getIconURL(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          return s.default.getGuildIconURL({
            id: this.id,
            size: e,
            icon: this.icon,
            canAnimate: t,
          });
        }
        getIconSource(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          return s.default.getAnimatableSourceWithFallback(t, t =>
            s.default.getGuildIconSource({
              id: this.id,
              size: e,
              icon: this.icon,
              canAnimate: t,
            })
          );
        }
        getApplicationId() {
          return this.application_id;
        }
        toString() {
          var e;
          return null !== (e = this.name) && void 0 !== e ? e : "";
        }
        get acronym() {
          return (0, l.getAcronym)(this.name);
        }
        isOwner(e) {
          let t = "string" == typeof e ? e : null != e ? e.id : null;
          return this.ownerId === t;
        }
        isOwnerWithRequiredMfaLevel(e) {
          return (
            (!!e.mfaEnabled || this.mfaLevel !== u.MFALevels.ELEVATED) &&
            this.isOwner(e)
          );
        }
        isNew() {
          let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : 7,
            t = o.default.extractTimestamp(this.id);
          return Date.now() - t < 864e5 * e;
        }
        isLurker() {
          return null == this.joinedAt;
        }
        hasFeature(e) {
          return this.features.has(e);
        }
        getRole(e) {
          return this.roles[e];
        }
        getMaxEmojiSlots() {
          return Math.max(
            this.hasFeature(u.GuildFeatures.MORE_EMOJI)
              ? 200
              : c.EMOJI_MAX_SLOTS,
            d.BoostedGuildFeatures[this.premiumTier].limits.emoji
          );
        }
        getMaxRoleSubscriptionEmojiSlots() {
          return 25;
        }
        getMaxSoundboardSlots() {
          return d.BoostedGuildFeatures[this.premiumTier].limits
            .soundboardSounds;
        }
        isCommunity() {
          return this.hasFeature(u.GuildFeatures.COMMUNITY);
        }
        hasVerificationGate() {
          return (
            this.hasFeature(u.GuildFeatures.MEMBER_VERIFICATION_GATE_ENABLED) &&
            this.hasFeature(u.GuildFeatures.COMMUNITY)
          );
        }
        hasCommunityInfoSubheader() {
          return (
            this.hasFeature(u.GuildFeatures.COMMUNITY) &&
            this.hasFeature(u.GuildFeatures.DISCOVERABLE)
          );
        }
        canHaveRaidActivityAlerts() {
          return (
            (!this.hasFeature(u.GuildFeatures.COMMUNITY) &&
              this.hasFeature(u.GuildFeatures.NON_COMMUNITY_RAID_ALERTS)) ||
            (this.hasFeature(u.GuildFeatures.COMMUNITY) &&
              !this.hasFeature(u.GuildFeatures.RAID_ALERTS_DISABLED))
          );
        }
        upsertRole(e) {
          return this.update(
            "roles",
            t => (
              (t[e.id] = e), (0, a.sortClientRoles)(this.id, Object.values(t))
            )
          );
        }
        deleteRole(e) {
          return this.update("roles", t => (delete t[e], t));
        }
        updateJoinedAt(e) {
          return this.set("joinedAt", "string" == typeof e ? new Date(e) : e);
        }
        constructor(e) {
          var t, n;
          super();
          let i = new Set(Array.from(e.features || []));
          (this.id = e.id),
            (this.name = e.name || ""),
            (this.description = e.description || null),
            (this.ownerId = e.ownerId || null),
            (this.icon = e.icon || null),
            (this.splash = e.splash || null),
            (this.banner = e.banner || null),
            (this.homeHeader = e.homeHeader || null),
            (this.features = i),
            (this.preferredLocale = e.preferredLocale || "en-US"),
            (this.roles = e.roles || {}),
            (this.afkChannelId = e.afkChannelId || null),
            (this.afkTimeout = e.afkTimeout),
            (this.systemChannelId = e.systemChannelId || null),
            (this.verificationLevel =
              e.verificationLevel || u.VerificationLevels.NONE),
            (this.joinedAt =
              null != e.joinedAt ? new Date(e.joinedAt) : e.joinedAt),
            (this.defaultMessageNotifications =
              e.defaultMessageNotifications ||
              u.UserNotificationSettings.ALL_MESSAGES),
            (this.mfaLevel = e.mfaLevel || u.MFALevels.NONE),
            (this.application_id = e.application_id || null),
            (this.explicitContentFilter =
              e.explicitContentFilter ||
              u.GuildExplicitContentFilterTypes.DISABLED),
            (this.vanityURLCode = e.vanityURLCode || void 0),
            (this.premiumTier = e.premiumTier || u.BoostedGuildTiers.NONE),
            (this.premiumSubscriberCount = e.premiumSubscriberCount || 0),
            (this.premiumProgressBarEnabled =
              e.premiumProgressBarEnabled || !1),
            (this.systemChannelFlags = e.systemChannelFlags),
            (this.discoverySplash = e.discoverySplash || null),
            (this.rulesChannelId = e.rulesChannelId || null),
            (this.safetyAlertsChannelId = e.safetyAlertsChannelId || null),
            (this.publicUpdatesChannelId = e.publicUpdatesChannelId || null),
            (this.maxStageVideoChannelUsers =
              e.maxStageVideoChannelUsers || -1),
            (this.maxVideoChannelUsers = e.maxVideoChannelUsers || -1),
            (this.maxMembers = e.maxMembers || -1),
            (this.nsfwLevel =
              null !== (t = e.nsfwLevel) && void 0 !== t
                ? t
                : u.GuildNSFWContentLevel.DEFAULT),
            (this.hubType = e.hubType),
            (this.latestOnboardingQuestionId =
              null !== (n = e.latestOnboardingQuestionId) && void 0 !== n
                ? n
                : null);
        }
      };
    },
    370999: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("702976");
      var i,
        r = n("866227"),
        s = n.n(r),
        a = n("666038"),
        o = n("299285"),
        l = n("568734"),
        u = n("984273"),
        c = n("49111");
      i = class e extends a.default {
        static createFromServer(t) {
          return new e({
            id: t.application.id,
            branchId: t.branch_id,
            entitlements:
              null != t.entitlements
                ? t.entitlements.map(e => u.default.createFromServer(e))
                : [],
            branch: t.branch,
            flags: t.flags,
            createdAt: t.created_at,
            sku: {
              id: t.sku.id,
              type: t.sku.type,
              premium: t.sku.premium,
              preorderReleaseAt:
                null != t.sku.preorder_release_at
                  ? s(t.sku.preorder_release_at)
                  : null,
              preorderApproximateReleaseDate:
                null != t.sku.preorder_approximate_release_date
                  ? t.sku.preorder_approximate_release_date
                  : null,
            },
          });
        }
        static createForTestMode(t) {
          return new e({
            id: t.id,
            entitlements: [],
            branchId: t.branch.id,
            branch: t.branch,
            flags: c.LibraryApplicationFlags.ENTITLED,
            createdAt: t.branch.created_at,
            sku: { id: t.skuId, type: c.SKUTypes.DURABLE_PRIMARY, premium: !1 },
            isTestMode: !0,
          });
        }
        getFlags() {
          return this.flags;
        }
        hasFlag(e) {
          return l.hasFlag(this.flags, e);
        }
        isHidden() {
          return this.hasFlag(c.LibraryApplicationFlags.HIDDEN);
        }
        isOverlayEnabled() {
          return !this.hasFlag(c.LibraryApplicationFlags.OVERLAY_DISABLED);
        }
        isMasterBranch() {
          return this.branchId === this.id;
        }
        isDiscordApplication() {
          return !0;
        }
        isEntitled(e, t) {
          return (
            !!this.isTestMode ||
            this.entitlements.some(n => n.isValid(e, t, this.branchId))
          );
        }
        isPreorder() {
          return (
            null != this.sku.preorderReleaseAt ||
            null != this.sku.preorderApproximateReleaseDate
          );
        }
        getDistributor() {
          return c.Distributors.DISCORD;
        }
        getBranchName() {
          return null != this.branch ? this.branch.name : "master";
        }
        getBranchedName(e) {
          return this.isMasterBranch() || null == this.branch
            ? e.name
            : "".concat(e.name, " (").concat(this.branch.name, ")");
        }
        getSkuIdForAnalytics() {
          return this.sku.id;
        }
        getAnalyticsData() {
          let e = o.default.getApplication(this.id);
          return {
            application_id: null != e ? e.id : null,
            application_name: null != e ? e.name : null,
            sku_id: this.getSkuIdForAnalytics(),
            launcher_platform: this.getDistributor(),
          };
        }
        constructor(e) {
          super(),
            (this.id = e.id),
            (this.createdAt = e.createdAt),
            (this.flags = e.flags),
            (this.branchId = e.branchId),
            (this.entitlements = e.entitlements),
            (this.branch = e.branch),
            (this.sku = e.sku),
            (this.isTestMode = e.isTestMode || !1);
        }
      };
    },
    519023: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          LocalizedPricingPromoRecord: function () {
            return r;
          },
        });
      var i = n("666038");
      class r extends i.default {
        static createFromServer(e) {
          var t, n;
          return new r({
            planId: e.plan_id,
            countryCode: e.country_code,
            amount: null === (t = e.price) || void 0 === t ? void 0 : t.amount,
            currency:
              null === (n = e.price) || void 0 === n ? void 0 : n.currency,
            paymentSourceTypes: e.payment_source_types,
          });
        }
        constructor(e) {
          super(),
            (this.planId = e.planId),
            (this.countryCode = e.countryCode),
            (this.amount = e.amount),
            (this.currency = e.currency),
            (this.paymentSourceTypes = e.paymentSourceTypes);
        }
      }
    },
    865146: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          CreditCardSourceRecord: function () {
            return u;
          },
          PaypalSourceRecord: function () {
            return c;
          },
          SofortSourceRecord: function () {
            return d;
          },
          GiropaySourceRecord: function () {
            return f;
          },
          Przelewy24SourceRecord: function () {
            return E;
          },
          EPSSourceRecord: function () {
            return p;
          },
          IdealSourceRecord: function () {
            return h;
          },
          PaysafeSourceRecord: function () {
            return _;
          },
          GcashSourceRecord: function () {
            return S;
          },
          GrabPayMySourceRecord: function () {
            return m;
          },
          MomoWalletSourceRecord: function () {
            return T;
          },
          VenmoSourceRecord: function () {
            return g;
          },
          KaKaoPaySourceRecord: function () {
            return I;
          },
          GoPayWalletSourceRecord: function () {
            return C;
          },
          BancontactSourceRecord: function () {
            return v;
          },
          CashAppSourceRecord: function () {
            return A;
          },
          AppleSourceRecord: function () {
            return R;
          },
          default: function () {
            return i;
          },
        }),
        n("702976"),
        n("70102");
      var i,
        r = n("666038"),
        s = n("53118"),
        a = n("568734"),
        o = n("449008"),
        l = n("49111");
      i = class extends r.default {
        static createFromServer(e) {
          var t;
          let n = null !== (t = e.billing_address) && void 0 !== t ? t : {},
            i = {
              id: e.id,
              type: e.type,
              paymentGateway: e.payment_gateway,
              invalid: e.invalid,
              isDefault: e.default,
              billingAddress: {
                name: n.name,
                line1: n.line_1,
                line2: n.line_2,
                city: n.city,
                postalCode: n.postal_code,
                state: n.state,
                country: n.country,
              },
              country: e.country,
              flags: e.flags,
            };
          switch (e.type) {
            case l.PaymentSourceTypes.CARD:
              let r = new u({
                ...i,
                brand: e.brand,
                last4: e.last_4,
                expiresMonth: e.expires_month,
                expiresYear: e.expires_year,
              });
              return r;
            case l.PaymentSourceTypes.PAYPAL:
              return new c({ ...i, email: e.email });
            case l.PaymentSourceTypes.VENMO:
              return new g({ ...i, username: e.username });
            case l.PaymentSourceTypes.SEPA_DEBIT:
            case l.PaymentSourceTypes.SOFORT:
              return new d({ ...i, email: e.email });
            case l.PaymentSourceTypes.GIROPAY:
              return new f({ ...i });
            case l.PaymentSourceTypes.PRZELEWY24:
              return new E({ ...i, email: e.email, bank: e.bank });
            case l.PaymentSourceTypes.EPS:
              return new p({ ...i, bank: e.bank });
            case l.PaymentSourceTypes.PAYSAFE_CARD:
              return new _({ ...i });
            case l.PaymentSourceTypes.GCASH:
              return new S({ ...i });
            case l.PaymentSourceTypes.GRABPAY_MY:
              return new m({ ...i });
            case l.PaymentSourceTypes.MOMO_WALLET:
              return new T({ ...i });
            case l.PaymentSourceTypes.KAKAOPAY:
              return new I({ ...i });
            case l.PaymentSourceTypes.GOPAY_WALLET:
              return new C({ ...i });
            case l.PaymentSourceTypes.BANCONTACT:
              return new v({ ...i });
            case l.PaymentSourceTypes.IDEAL:
              return new h({ ...i, bank: e.bank });
            case l.PaymentSourceTypes.CASH_APP:
              return new A({ ...i, username: e.username });
            default:
              (0, o.assertNever)(e);
          }
        }
        static createFromSerialized(e) {
          let t = e.type;
          switch (t) {
            case l.PaymentSourceTypes.CARD:
              return new u(e);
            case l.PaymentSourceTypes.PAYPAL:
              return new c(e);
            case l.PaymentSourceTypes.SOFORT:
            case l.PaymentSourceTypes.SEPA_DEBIT:
              return new d(e);
            case l.PaymentSourceTypes.GIROPAY:
              return new f(e);
            case l.PaymentSourceTypes.PRZELEWY24:
              return new E(e);
            case l.PaymentSourceTypes.PAYSAFE_CARD:
              return new _(e);
            case l.PaymentSourceTypes.GCASH:
              return new S(e);
            case l.PaymentSourceTypes.GRABPAY_MY:
              return new m(e);
            case l.PaymentSourceTypes.MOMO_WALLET:
              return new T(e);
            case l.PaymentSourceTypes.VENMO:
              return new g(e);
            case l.PaymentSourceTypes.KAKAOPAY:
              return new I(e);
            case l.PaymentSourceTypes.GOPAY_WALLET:
              return new C(e);
            case l.PaymentSourceTypes.BANCONTACT:
              return new v(e);
            case l.PaymentSourceTypes.EPS:
              return new p(e);
            case l.PaymentSourceTypes.IDEAL:
              return new h(e);
            case l.PaymentSourceTypes.CASH_APP:
              return new A(e);
            default:
              (0, o.assertNever)(t);
          }
        }
        hasFlag(e) {
          return (0, a.hasFlag)(this.flags, e);
        }
        get paymentMethodCountry() {
          return null != this.country && "" !== this.country
            ? this.country
            : this.billingAddress.country;
        }
        canRedeemTrial() {
          let { enabled: e } = s.default.getCurrentConfig({
            location: "3a6d55_1",
          });
          return this.paymentGateway === l.PaymentGateways.ADYEN &&
            this.type === l.PaymentSourceTypes.CASH_APP
            ? e
            : !l.IRREDEEMABLE_PAYMENT_SOURCES.has(this.type);
        }
        constructor(e) {
          var t, n, i, r;
          if ((super(), !Object.values(l.PaymentSourceTypes).includes(e.type)))
            throw Error("Unrecognized payment source type ".concat(e.type));
          (this.id = e.id),
            (this.type = e.type),
            (this.paymentGateway = e.paymentGateway),
            (this.invalid = null !== (t = e.invalid) && void 0 !== t && t),
            (this.billingAddress =
              null !== (n = e.billingAddress) && void 0 !== n ? n : {}),
            (this.isDefault = e.isDefault),
            (this.flags = null !== (i = e.flags) && void 0 !== i ? i : 0),
            (this.country = null !== (r = e.country) && void 0 !== r ? r : "");
        }
      };
      class u extends i {
        constructor(e) {
          var t, n, i, r;
          if ((super(e), e.type !== l.PaymentSourceTypes.CARD))
            throw Error(
              "Cannot instantiate CreditCardSourceRecord with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.CARD)
            );
          (this.brand = null !== (t = e.brand) && void 0 !== t ? t : ""),
            (this.last4 = null !== (n = e.last4) && void 0 !== n ? n : ""),
            (this.expiresMonth =
              null !== (i = e.expiresMonth) && void 0 !== i ? i : 0),
            (this.expiresYear =
              null !== (r = e.expiresYear) && void 0 !== r ? r : 0);
        }
      }
      class c extends i {
        constructor(e) {
          if ((super(e), e.type !== l.PaymentSourceTypes.PAYPAL))
            throw Error(
              "Cannot instantiate PaypalSourceRecord with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.PAYPAL)
            );
          this.email = e.email || "";
        }
      }
      class d extends i {
        constructor(e) {
          if (
            (super(e),
            e.type !== l.PaymentSourceTypes.SOFORT &&
              e.type !== l.PaymentSourceTypes.SEPA_DEBIT)
          )
            throw Error(
              "Cannot instantiate SofortSourceRecord with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.SOFORT, " or ") +
                l.PaymentSourceTypes.SEPA_DEBIT
            );
          this.email = e.email || "";
        }
      }
      class f extends i {
        constructor(e) {
          if ((super(e), e.type !== l.PaymentSourceTypes.GIROPAY))
            throw Error(
              "Cannot instantiate GiropaySourceRecord with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.GIROPAY)
            );
        }
      }
      class E extends i {
        constructor(e) {
          if ((super(e), e.type !== l.PaymentSourceTypes.PRZELEWY24))
            throw Error(
              "Cannot instantiate Przelewy24SourceRecord with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.PRZELEWY24)
            );
          (this.email = e.email || ""), (this.bank = e.bank);
        }
      }
      class p extends i {
        constructor(e) {
          if ((super(e), e.type !== l.PaymentSourceTypes.EPS))
            throw Error(
              "Cannot instantiate EPSSourceRecord with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.EPS)
            );
          this.bank = e.bank;
        }
      }
      class h extends i {
        constructor(e) {
          if ((super(e), e.type !== l.PaymentSourceTypes.IDEAL))
            throw Error(
              "Cannot instantiate IdealSourceRecord with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.IDEAL)
            );
          this.bank = e.bank;
        }
      }
      class _ extends i {
        constructor(e) {
          if ((super(e), e.type !== l.PaymentSourceTypes.PAYSAFE_CARD))
            throw Error(
              "Cannot instantiate PaysafeSourceRecord with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.PAYSAFE_CARD)
            );
        }
      }
      class S extends i {
        constructor(e) {
          if ((super(e), e.type !== l.PaymentSourceTypes.GCASH))
            throw Error(
              "Cannot instantiate GcashSourceRecord with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.GCASH)
            );
        }
      }
      class m extends i {
        constructor(e) {
          if ((super(e), e.type !== l.PaymentSourceTypes.GRABPAY_MY))
            throw Error(
              "Cannot instantiate GrabPayMySourceRecord with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.GRABPAY_MY)
            );
        }
      }
      class T extends i {
        constructor(e) {
          if ((super(e), e.type !== l.PaymentSourceTypes.MOMO_WALLET))
            throw Error(
              "Cannot instantiate MomoWalletSourceRecord with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.MOMO_WALLET)
            );
        }
      }
      class g extends i {
        constructor(e) {
          if ((super(e), e.type !== l.PaymentSourceTypes.VENMO))
            throw Error(
              "Cannot instantiate VenmoSourceRecord with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.VENMO)
            );
          this.username = e.username || "";
        }
      }
      class I extends i {
        constructor(e) {
          if ((super(e), e.type !== l.PaymentSourceTypes.KAKAOPAY))
            throw Error(
              "Cannot instantiate KaKaoPaySourceRecord with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.KAKAOPAY)
            );
        }
      }
      class C extends i {
        constructor(e) {
          if ((super(e), e.type !== l.PaymentSourceTypes.GOPAY_WALLET))
            throw Error(
              "Cannot instantiate GoPayWalletSourceRecord with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.GOPAY_WALLET)
            );
        }
      }
      class v extends i {
        constructor(e) {
          if ((super(e), e.type !== l.PaymentSourceTypes.BANCONTACT))
            throw Error(
              "Cannot instantiate BancontactSourceRecord with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.BANCONTACT)
            );
        }
      }
      class A extends i {
        constructor(e) {
          if ((super(e), e.type !== l.PaymentSourceTypes.CASH_APP))
            throw Error(
              "Cannot instantiate Cashapp with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.CASH_APP)
            );
          this.username = e.username || "";
        }
      }
      class R extends i {
        constructor(e) {
          if (
            ((e.id = ""),
            (e.paymentGateway = l.PaymentGateways.APPLE_PARTNER),
            (e.type = l.PaymentSourceTypes.APPLE),
            (e.billingAddress = {}),
            (e.country = ""),
            (e.invalid = !1),
            (e.isDefault = !1),
            (e.flags = 0),
            super(e),
            e.type !== l.PaymentSourceTypes.APPLE)
          )
            throw Error(
              "Cannot instantiate AppleSourceRecord with type: "
                .concat(e.type, ", must be ")
                .concat(l.PaymentSourceTypes.APPLE)
            );
        }
      }
    },
    137406: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("222007"),
        n("702976");
      var i,
        r = n("866227"),
        s = n.n(r),
        a = n("666038"),
        o = n("568734"),
        l = n("653047"),
        u = n("49111");
      let c = [
        "500428425362931713",
        "451550535720501248",
        "471376328319303681",
        "466696214818193408",
      ];
      i = class e extends a.default {
        static createFromServer(t) {
          var n, i, r, a, o;
          let { price: u } = t;
          return new e({
            id: t.id,
            type: t.type,
            applicationId: t.application_id,
            application:
              null != t.application
                ? l.default.createFromServer(t.application)
                : null,
            productLine: t.product_line,
            name: null !== (n = t.name) && void 0 !== n ? n : "",
            releaseDate: null != t.release_date ? s(t.release_date) : null,
            preorderReleaseAt:
              null != t.preorder_release_at ? s(t.preorder_release_at) : null,
            preorderApproximateReleaseDate: t.preorder_approximate_release_date,
            summary: t.summary,
            features: new Set(t.features),
            genres: new Set(t.genres),
            dependentSkuId: t.dependent_sku_id,
            manifests: t.manifests,
            availableRegions: t.available_regions,
            accessType: t.access_type,
            systemRequirements: t.system_requirements,
            contentRating: t.content_rating,
            contentRatingAgency: t.content_rating_agency,
            legalNotice: t.legal_notice,
            price:
              null != u
                ? {
                    amount: u.amount,
                    currency: u.currency,
                    saleAmount: u.sale_amount,
                    salePercentage: u.sale_percentage,
                    premium: u.premium,
                  }
                : null,
            premium: null !== (i = t.premium) && void 0 !== i && i,
            showAgeGate: t.show_age_gate || !1,
            restricted: t.restricted || !1,
            slug: null !== (r = t.slug) && void 0 !== r ? r : "",
            exclusive: t.exclusive || !1,
            locales: null !== (a = t.locales) && void 0 !== a ? a : ["en-US"],
            flags: t.flags,
            externalPurchaseUrl: t.external_purchase_url,
            deleted: null !== (o = t.deleted) && void 0 !== o && o,
          });
        }
        get supportedOperatingSystems() {
          let e =
            null != this.systemRequirements
              ? Object.keys(this.systemRequirements)
              : [];
          return e.length > 0 ? e : [u.OperatingSystems.WINDOWS];
        }
        get isOnSale() {
          return null != this.price && null != this.price.saleAmount;
        }
        isGiftable() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : this.price;
          return (
            this.type === u.SKUTypes.DURABLE_PRIMARY &&
            this.available &&
            this.requiresPayment &&
            null != e &&
            u.GIFTABLE_CURRENCIES.has(e.currency) &&
            null == this.externalPurchaseUrl
          );
        }
        getPrice() {
          let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : null,
            t =
              !(arguments.length > 1) ||
              void 0 === arguments[1] ||
              arguments[1],
            { price: n } = this;
          if (null == n) return null;
          if (null != e) {
            var i;
            let t = null === (i = n.premium) || void 0 === i ? void 0 : i[e];
            if (null != t) return { amount: t.amount, currency: n.currency };
          }
          return t && null != n.saleAmount
            ? { amount: n.saleAmount, currency: n.currency }
            : { amount: n.amount, currency: n.currency };
        }
        getDisplaySalePercentage() {
          return null == this.price || null == this.price.salePercentage
            ? null
            : "-".concat(this.price.salePercentage, "%");
        }
        get requiresPayment() {
          let e = this.getPrice();
          return !this.premium && null != e && e.amount > 0;
        }
        get isTheGameAwardsWinner() {
          return c.includes(this.id);
        }
        get available() {
          return (
            (0, o.hasFlag)(this.flags, u.SKUFlags.AVAILABLE) ||
            null != this.externalPurchaseUrl
          );
        }
        isAvailableForDistribution() {
          return (
            this.available &&
            null != this.getPrice() &&
            null == this.externalPurchaseUrl &&
            (!this.premium ||
              (0, o.hasFlag)(this.flags, u.SKUFlags.PREMIUM_AND_DISTRIBUTION))
          );
        }
        isAvailable() {
          return (0, o.hasFlag)(this.flags, u.SKUFlags.AVAILABLE);
        }
        isPremiumPerk() {
          return (
            this.premium &&
            ((0, o.hasFlag)(this.flags, u.SKUFlags.PREMIUM_PURCHASE) ||
              (0, o.hasFlag)(this.flags, u.SKUFlags.PREMIUM_AND_DISTRIBUTION))
          );
        }
        hasFeature(e) {
          return this.features.has(e);
        }
        isPreorder() {
          return (
            null != this.preorderReleaseAt ||
            null != this.preorderApproximateReleaseDate
          );
        }
        constructor(e) {
          super(),
            (this.id = e.id),
            (this.type = e.type),
            (this.applicationId = e.applicationId),
            (this.application = e.application),
            (this.productLine = e.productLine),
            (this.name = e.name),
            (this.preorderReleaseAt = e.preorderReleaseAt),
            (this.preorderApproximateReleaseDate =
              e.preorderApproximateReleaseDate),
            (this.releaseDate = e.releaseDate),
            (this.summary = e.summary),
            (this.features = e.features),
            (this.genres = e.genres),
            (this.dependentSkuId = e.dependentSkuId),
            (this.manifests = e.manifests),
            (this.availableRegions = e.availableRegions),
            (this.accessType = e.accessType),
            (this.systemRequirements = e.systemRequirements),
            (this.contentRating = e.contentRating),
            (this.contentRatingAgency = e.contentRatingAgency),
            (this.legalNotice = e.legalNotice),
            (this.price = e.price),
            (this.premium = e.premium),
            (this.showAgeGate = e.showAgeGate),
            (this.restricted = e.restricted),
            (this.slug = e.slug),
            (this.exclusive = e.exclusive),
            (this.locales = e.locales),
            (this.flags = e.flags),
            (this.externalPurchaseUrl = e.externalPurchaseUrl || null),
            (this.deleted = e.deleted);
        }
      };
    },
    195358: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i,
        r = n("666038"),
        s = n("643619");
      i = class e extends r.default {
        static createInvoiceFromServer(t) {
          return new e({
            id: t.id,
            invoiceItems: t.invoice_items.map(s.createInvoiceItemFromServer),
            total: t.total,
            subtotal: t.subtotal,
            currency: t.currency,
            tax: t.tax,
            taxInclusive: t.tax_inclusive,
            subscriptionPeriodStart: new Date(t.subscription_period_start),
            subscriptionPeriodEnd: new Date(t.subscription_period_end),
            status: t.status,
          });
        }
        constructor(e) {
          super(),
            (this.id = e.id),
            (this.invoiceItems = e.invoiceItems),
            (this.total = e.total),
            (this.subtotal = e.subtotal),
            (this.currency = e.currency),
            (this.tax = e.tax),
            (this.taxInclusive = e.taxInclusive),
            (this.subscriptionPeriodStart = e.subscriptionPeriodStart),
            (this.subscriptionPeriodEnd = e.subscriptionPeriodEnd),
            (this.status = e.status);
        }
      };
    },
    797647: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getPriceFromServer: function () {
            return o;
          },
          isNoneSubscription: function () {
            return l;
          },
          default: function () {
            return u;
          },
        }),
        n("808653"),
        n("222007"),
        n("70102");
      var i = n("666038"),
        r = n("49111"),
        s = n("646718");
      class a extends i.default {
        static createFromServer(e) {
          let t = {};
          null != e.prices &&
            (t = Object.keys(e.prices).reduce((t, n) => {
              if (null == e.prices) return t;
              let i = e.prices[n];
              return (
                (t[n] = {
                  countryPrices: {
                    countryCode: i.country_prices.country_code,
                    prices: i.country_prices.prices.map(t =>
                      o(t, e.tax_inclusive)
                    ),
                  },
                  paymentSourcePrices: Object.entries(
                    i.payment_source_prices
                  ).reduce((t, n) => {
                    let [i, r] = n;
                    return (t[i] = r.map(t => o(t, e.tax_inclusive))), t;
                  }, {}),
                }),
                t
              );
            }, {}));
          let n = {
            id: e.id,
            name: e.name,
            interval: e.interval,
            intervalCount: e.interval_count,
            taxInclusive: e.tax_inclusive,
            skuId: e.sku_id,
            currency: e.currency,
            price: e.price,
            prices: t,
            premiumUserPrice: e.discount_price,
          };
          return (
            null != e.fallback_price &&
              0 !== e.fallback_price &&
              Object.assign(n, {
                fallbackPrice: e.fallback_price,
                fallbackCurrency: e.fallback_currency,
                fallbackPremiumUserPrice: e.fallback_discount_price,
              }),
            new a(n)
          );
        }
        get premiumSubscriptionType() {
          switch (this.skuId) {
            case s.PremiumSubscriptionSKUs.LEGACY:
            case s.PremiumSubscriptionSKUs.TIER_2:
              return s.PremiumTypes.TIER_2;
            case s.PremiumSubscriptionSKUs.TIER_1:
              return s.PremiumTypes.TIER_1;
            case s.PremiumSubscriptionSKUs.TIER_0:
              return s.PremiumTypes.TIER_0;
            default:
              return null;
          }
        }
        get isGiftableCurrency() {
          return r.GIFTABLE_CURRENCIES.has(this.currency);
        }
        get giftPrice() {
          if (this.isGiftableCurrency) return this.price;
          if ("number" == typeof this.fallbackPrice) return this.fallbackPrice;
          throw Error("Missing fallback price for non-giftable currency");
        }
        get giftCurrency() {
          if (this.isGiftableCurrency) return this.currency;
          if ("string" == typeof this.fallbackCurrency)
            return this.fallbackCurrency;
          throw Error("Missing fallback currency for non-giftable currency");
        }
        get giftPremiumUserPrice() {
          return this.isGiftableCurrency
            ? this.premiumUserPrice
            : this.fallbackPremiumUserPrice;
        }
        getPrice() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
          return e ? this.giftPrice : this.price;
        }
        getCurrency() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
          return e ? this.giftCurrency : this.currency;
        }
        getPremiumUserPrice() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
          return e ? this.giftPremiumUserPrice : this.premiumUserPrice;
        }
        constructor(e) {
          super(),
            (this.id = e.id),
            (this.name = e.name),
            (this.interval = e.interval),
            (this.intervalCount = e.intervalCount),
            (this.taxInclusive = e.taxInclusive),
            (this.skuId = e.skuId),
            (this.currency = e.currency),
            (this.price = e.price),
            (this.premiumUserPrice = e.premiumUserPrice),
            (this.prices = e.prices),
            e.fallbackPrice &&
              ((this.fallbackPrice = e.fallbackPrice),
              (this.fallbackCurrency = e.fallbackCurrency),
              (this.fallbackPremiumUserPrice = e.fallbackPremiumUserPrice));
        }
      }
      function o(e, t) {
        return {
          amount: e.amount,
          currency: e.currency,
          tax: 0,
          taxInclusive: t,
        };
      }
      function l(e) {
        return [
          s.SubscriptionPlans.NONE_MONTH,
          s.SubscriptionPlans.NONE_3_MONTH,
          s.SubscriptionPlans.NONE_6_MONTH,
          s.SubscriptionPlans.NONE_YEAR,
        ].includes(e);
      }
      var u = a;
    },
    388290: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          SubscriptionRecord: function () {
            return f;
          },
          default: function () {
            return E;
          },
        });
      var i = n("627445"),
        r = n.n(i),
        s = n("666038"),
        a = n("240577"),
        o = n("773336"),
        l = n("195358"),
        u = n("49111"),
        c = n("646718");
      function d(e) {
        return { id: e.id, planId: e.plan_id, quantity: e.quantity };
      }
      class f extends s.default {
        static createFromServer(e) {
          return new f({
            id: e.id,
            type: e.type,
            createdAt: new Date(e.created_at),
            canceledAt: null != e.canceled_at ? new Date(e.canceled_at) : null,
            currentPeriodStart: new Date(e.current_period_start),
            currentPeriodEnd: new Date(e.current_period_end),
            status: e.status,
            paymentSourceId: e.payment_source_id,
            paymentGateway: e.payment_gateway,
            paymentGatewayPlanId: e.payment_gateway_plan_id,
            paymentGatewaySubscriptionId: e.payment_gateway_subscription_id,
            trialId: e.trial_id,
            trialEndsAt: e.trial_ends_at,
            items: e.items.map(d),
            renewalMutations:
              null != e.renewal_mutations
                ? {
                    items: e.renewal_mutations.items.map(d),
                    paymentGatewayPlanId:
                      e.renewal_mutations.payment_gateway_plan_id,
                  }
                : null,
            streakStartedAt:
              null != e.streak_started_at
                ? new Date(e.streak_started_at)
                : null,
            currency: e.currency,
            metadata: e.metadata,
            useStorekitResubscribe: e.use_storekit_resubscribe,
            price: e.price,
            userId: e.user_id,
            ...(null != e.latest_invoice
              ? {
                  latestInvoice: l.default.createInvoiceFromServer(
                    e.latest_invoice
                  ),
                }
              : {}),
          });
        }
        getCurrentSubscriptionPlanIdForGroup(e) {
          var t;
          return null === (t = this.items.find(t => e.includes(t.planId))) ||
            void 0 === t
            ? void 0
            : t.planId;
        }
        get isPremium() {
          return this.type === u.SubscriptionTypes.PREMIUM;
        }
        get planIdForCurrencies() {
          let e;
          return (
            this.isPremium
              ? (r(
                  this.planIdFromItems,
                  "Premium subscription has no planId for currencies"
                ),
                (e = this.planIdFromItems))
              : (e = this.planId),
            e
          );
        }
        get planIdFromItems() {
          return this.getCurrentSubscriptionPlanIdForGroup(
            Object.values(c.SubscriptionPlans)
          );
        }
        get isPurchasedViaApple() {
          return this.paymentGateway === u.PaymentGateways.APPLE;
        }
        get isPurchasedViaGoogle() {
          return this.paymentGateway === u.PaymentGateways.GOOGLE;
        }
        get isPurchasedExternally() {
          return this.isPurchasedViaApple || this.isPurchasedViaGoogle;
        }
        get isOnPlatformMatchingExternalPaymentGateway() {
          return (
            (this.isPurchasedViaApple && (0, o.isIOS)()) ||
            (this.isPurchasedViaGoogle && (0, o.isAndroid)())
          );
        }
        get hasExternalPlanChange() {
          return (
            this.isPurchasedExternally &&
            null != this.renewalMutations &&
            this.paymentGatewayPlanId !==
              this.renewalMutations.paymentGatewayPlanId
          );
        }
        get hasPremiumNitroMonthly() {
          return (
            null !=
            this.items.find(
              e => e.planId === c.SubscriptionPlans.PREMIUM_MONTH_TIER_2
            )
          );
        }
        constructor(e) {
          super(),
            (this.id = e.id),
            (this.type = e.type),
            (this.items = e.items),
            (this.createdAt = e.createdAt),
            (this.canceledAt = e.canceledAt),
            (this.currentPeriodStart = e.currentPeriodStart),
            (this.currentPeriodEnd = e.currentPeriodEnd),
            (this.status = e.status),
            (this.paymentSourceId = e.paymentSourceId),
            (this.paymentGateway = e.paymentGateway),
            (this.paymentGatewayPlanId = e.paymentGatewayPlanId),
            (this.paymentGatewaySubscriptionId =
              e.paymentGatewaySubscriptionId),
            (this.trialId = e.trialId),
            (this.trialEndsAt = e.trialEndsAt),
            (this.renewalMutations = e.renewalMutations),
            (this.currency = e.currency),
            (this.metadata = e.metadata),
            (this.latestInvoice = e.latestInvoice),
            (this.useStorekitResubscribe = e.useStorekitResubscribe),
            (this.price = e.price),
            (this.userId = e.userId);
          let t = this.renewalMutations,
            n = e.items[0].planId,
            i = null;
          if (e.type === u.SubscriptionTypes.PREMIUM) {
            let r = c.SubscriptionPlanInfo[e.items[0].planId],
              s = r.interval,
              o = r.intervalCount;
            (n = (0, a.getBasePlanIdForSubscriptionItems)(e.items, s, o)),
              null != t &&
                (i = (0, a.getBasePlanIdForSubscriptionItems)(t.items, s, o));
          } else null != t && t.items.length > 0 && (i = t.items[0].planId);
          (this.planId = n),
            (this.additionalPlans = e.items.filter(e => e.planId !== n)),
            null != t &&
              null != i &&
              ((t.planId = i),
              (t.additionalPlans = t.items.filter(e => e.planId !== i)));
        }
      }
      var E = f;
    },
    766274: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("70102"),
        n("702976");
      var i,
        r = n("316693"),
        s = n("666038"),
        a = n("234251"),
        o = n("315102"),
        l = n("299039"),
        u = n("49111"),
        c = n("680894"),
        d = n("646718");
      new (i = class extends s.default {
        get createdAt() {
          return new Date(l.default.extractTimestamp(this.id));
        }
        hasVerifiedEmailOrPhone() {
          return !0 === this.verified || null != this.phone;
        }
        getAvatarURL(e, t) {
          let n =
              arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            i = null != e ? this.guildMemberAvatars[e] : void 0;
          return null != i && null != e
            ? o.default.getGuildMemberAvatarURLSimple({
                guildId: e,
                avatar: i,
                userId: this.id,
                canAnimate: n,
              })
            : o.default.getUserAvatarURL(this, n, t);
        }
        addGuildAvatarHash(e, t) {
          if (this.guildMemberAvatars[e] === t) return this;
          let n = { ...this.guildMemberAvatars, [e]: t };
          return this.merge({ guildMemberAvatars: n });
        }
        removeGuildAvatarHash(e) {
          if (void 0 === this.guildMemberAvatars[e]) return this;
          let t = { ...this.guildMemberAvatars, [e]: void 0 };
          return this.merge({ guildMemberAvatars: t });
        }
        getAvatarSource(e) {
          let t =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            n = arguments.length > 2 ? arguments[2] : void 0;
          if (null != e) {
            let i = this.guildMemberAvatars[e];
            if (null != i)
              return o.default.getAnimatableSourceWithFallback(t, t =>
                o.default.makeSource(
                  o.default.getGuildMemberAvatarURLSimple({
                    guildId: e,
                    avatar: i,
                    userId: this.id,
                    canAnimate: t,
                    size: n,
                  })
                )
              );
          }
          return o.default.getAnimatableSourceWithFallback(t, e =>
            o.default.getUserAvatarSource(
              {
                id: this.id,
                avatar: this.avatar,
                discriminator: this.discriminator,
                bot: this.bot,
              },
              e,
              n
            )
          );
        }
        isClaimed() {
          return null != this.email || null != this.phone;
        }
        isPhoneVerified() {
          return null != this.phone;
        }
        toString() {
          return "" !== this.username ? this.username : "???";
        }
        get tag() {
          return ""
            .concat(this.username, "#")
            .concat("".concat(this.discriminator).padStart(4, "0"));
        }
        hasPurchasedFlag(e) {
          return (this.purchasedFlags & e) === e;
        }
        hasPremiumUsageFlag(e) {
          return (this.premiumUsageFlags & e) === e;
        }
        hasHadSKU(e) {
          let t = d.SKU_ID_PURCHASED_FLAGS[e];
          return null != t && this.hasPurchasedFlag(t);
        }
        hasHadPremium() {
          let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : null,
            t = this.hasHadSKU(d.PremiumSubscriptionSKUs.TIER_0),
            n = this.hasHadSKU(d.PremiumSubscriptionSKUs.TIER_1),
            i = this.hasHadSKU(d.PremiumSubscriptionSKUs.TIER_2);
          if (e === d.PremiumTypes.TIER_1) return n;
          if (e === d.PremiumTypes.TIER_2) return i;
          if (e === d.PremiumTypes.TIER_0) return t;
          else return t || n || i;
        }
        hasFreePremium() {
          return (
            this.isStaff() ||
            this.hasFlag(u.UserFlags.PARTNER) ||
            this.isStaffPersonal()
          );
        }
        hasUrgentMessages() {
          return this.hasFlag(u.UserFlags.HAS_UNREAD_URGENT_MESSAGES);
        }
        isNonUserBot() {
          return (
            this.isSystemUser() ||
            (this.bot && this.discriminator === u.NON_USER_BOT_DISCRIMINATOR)
          );
        }
        isLocalBot() {
          return this.bot && this.id === u.LOCAL_BOT_ID;
        }
        isVerifiedBot() {
          return (
            this.isSystemUser() ||
            this.isLocalBot() ||
            this.hasFlag(u.UserFlags.VERIFIED_BOT)
          );
        }
        isSystemUser() {
          return !0 === this.system;
        }
        isClyde() {
          return this.id === c.CLYDE_AI_USER_ID;
        }
        hasAvatarForGuild(e) {
          return null != e && null != this.guildMemberAvatars[e];
        }
        isPomelo() {
          return "0" === this.discriminator;
        }
        get avatarDecoration() {
          return this.avatarDecorationData;
        }
        set avatarDecoration(e) {
          this.avatarDecorationData = (0, a.parseAvatarDecorationData)(e);
        }
        constructor(e) {
          var t,
            n,
            i,
            s,
            a,
            o,
            l,
            c,
            d,
            f,
            E,
            p,
            h,
            _,
            S,
            m,
            T,
            g,
            I,
            C,
            v,
            A,
            R,
            N,
            O,
            D,
            y,
            P,
            L;
          super(),
            (this.hasFlag = e => !1),
            (this.isStaff = () => !1),
            (this.isStaffPersonal = () => !1),
            (this.hasAnyStaffLevel = () => !1);
          let b =
            null !== (n = e.premium_type) && void 0 !== n ? n : e.premiumType;
          (this.id = e.id),
            (this.username =
              null !== (i = e.username) && void 0 !== i ? i : ""),
            (this.discriminator =
              null !== (s = e.discriminator) && void 0 !== s
                ? s
                : u.NON_USER_BOT_DISCRIMINATOR),
            (this.avatar = null !== (a = e.avatar) && void 0 !== a ? a : null),
            (this.avatarDecoration =
              null !== (o = e.avatar_decoration_data) && void 0 !== o
                ? o
                : e.avatarDecorationData),
            (this.email = null !== (l = e.email) && void 0 !== l ? l : null),
            (this.verified = null !== (c = e.verified) && void 0 !== c && c),
            (this.bot = null !== (d = e.bot) && void 0 !== d && d),
            (this.system = null !== (f = e.system) && void 0 !== f && f),
            (this.mfaEnabled =
              null !==
                (p =
                  null !== (E = e.mfa_enabled) && void 0 !== E
                    ? E
                    : e.mfaEnabled) &&
              void 0 !== p &&
              p),
            (this.mobile = null !== (h = e.mobile) && void 0 !== h && h),
            (this.desktop = null !== (_ = e.desktop) && void 0 !== _ && _),
            (this.premiumType = b === u.PREMIUM_TYPE_NONE ? null : b),
            (this.flags = null !== (S = e.flags) && void 0 !== S ? S : 0),
            (this.publicFlags =
              null !==
                (T =
                  null !== (m = e.public_flags) && void 0 !== m
                    ? m
                    : e.publicFlags) && void 0 !== T
                ? T
                : 0),
            (this.purchasedFlags =
              null !==
                (I =
                  null !== (g = e.purchased_flags) && void 0 !== g
                    ? g
                    : e.purchasedFlags) && void 0 !== I
                ? I
                : 0),
            (this.premiumUsageFlags =
              null !==
                (v =
                  null !== (C = e.premium_usage_flags) && void 0 !== C
                    ? C
                    : e.premiumUsageFlags) && void 0 !== v
                ? v
                : 0),
            (this.phone = null !== (A = e.phone) && void 0 !== A ? A : null),
            (this.nsfwAllowed =
              null !== (R = e.nsfw_allowed) && void 0 !== R
                ? R
                : e.nsfwAllowed),
            (this.guildMemberAvatars =
              null !== (N = e.guildMemberAvatars) && void 0 !== N ? N : {}),
            (this.hasBouncedEmail =
              null !==
                (D =
                  null !== (O = e.has_bounced_email) && void 0 !== O
                    ? O
                    : e.hasBouncedEmail) &&
              void 0 !== D &&
              D),
            (this.personalConnectionId =
              null !==
                (P =
                  null !== (y = e.personal_connection_id) && void 0 !== y
                    ? y
                    : e.personalConnectionId) && void 0 !== P
                ? P
                : null),
            (this.globalName =
              null !== (L = e.global_name) && void 0 !== L ? L : e.globalName),
            Object.defineProperties(this, {
              hasFlag: {
                writable: !1,
                configurable: !1,
                value: e => {
                  if (e <= 1073741824)
                    return ((this.flags | this.publicFlags) & e) === e;
                  let t = r.default.deserialize(this.flags),
                    n = r.default.deserialize(this.publicFlags),
                    i = r.default.deserialize(e);
                  return r.default.has(r.default.combine(t, n), i);
                },
              },
              isStaff: {
                writable: !1,
                configurable: !1,
                value: () => this.hasFlag(u.UserFlags.STAFF),
              },
              isStaffPersonal: {
                writable: !1,
                configurable: !1,
                value: () =>
                  !this.hasFlag(u.UserFlags.STAFF) &&
                  null != this.personalConnectionId,
              },
              hasAnyStaffLevel: {
                writable: !1,
                configurable: !1,
                value: () =>
                  this.hasFlag(u.UserFlags.STAFF) ||
                  this.hasFlag(u.UserFlags.COLLABORATOR) ||
                  this.hasFlag(u.UserFlags.RESTRICTED_COLLABORATOR),
              },
            }),
            (null === (t = this.globalName) || void 0 === t
              ? void 0
              : t.length) === 0 && (this.globalName = null);
        }
      })({ id: "0" });
    },
    628454: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i,
        r = n("666038");
      i = class extends r.default {
        isVoiceMuted() {
          return (
            this.selfMute ||
            this.mute ||
            this.suppress ||
            null != this.requestToSpeakTimestamp
          );
        }
        isVoiceDeafened() {
          return this.selfDeaf || this.deaf;
        }
        constructor(e) {
          super(),
            (this.userId = e.userId || ""),
            (this.channelId = e.channelId || null),
            (this.sessionId = e.sessionId || null),
            (this.mute = e.mute || !1),
            (this.deaf = e.deaf || !1),
            (this.selfMute = e.selfMute || !1),
            (this.selfDeaf = e.selfDeaf || !1),
            (this.selfVideo = e.selfVideo || !1),
            (this.selfStream = e.selfStream || !1),
            (this.suppress = e.suppress || !1),
            (this.requestToSpeakTimestamp = e.requestToSpeakTimestamp);
        }
      };
    },
    271938: function (e, t, n) {
      "use strict";
      let i, r;
      n.r(t),
        n.d(t, {
          default: function () {
            return ec;
          },
        }),
        n("222007"),
        n("860677"),
        n("424973"),
        n("70102");
      var s = n("627445"),
        a = n.n(s),
        o = n("171718"),
        l = n("391679"),
        u = n("446674"),
        c = n("872717"),
        d = n("95410"),
        f = n("913144"),
        E = n("798609"),
        p = n("821316"),
        h = n("605250"),
        _ = n("393414"),
        S = n("705873"),
        m = n("599110"),
        T = n("831588"),
        g = n("286235"),
        I = n("72177"),
        C = n("455079"),
        v = n("49111"),
        A = n("586391");
      let R = n("551042").hasModalOpen,
        N = new h.default("AuthenticationStore"),
        O = "fingerprint",
        D = "email_cache",
        y = "user_id_cache",
        P = null,
        L = null,
        b = null,
        M = null,
        U = null,
        G = null,
        w = null,
        k = v.LoginStates.NONE,
        x = v.RegistrationStates.NONE,
        F = !1,
        V = [],
        B = "",
        H = !1,
        j = null,
        Y = !1,
        W = !1,
        K = "",
        z = !1,
        q = !1,
        X = {},
        Q = {},
        Z = null,
        J = null,
        $ = null,
        ee = null;
      function et(e) {
        let t = null != o.default.getToken(),
          n = null != d.default.get(v.TOKEN_KEY);
        N.verbose(e, { tokenManagerHasToken: t, storageHasToken: n });
      }
      function en() {
        let e =
          !(arguments.length > 0) || void 0 === arguments[0] || arguments[0];
        if (((U = d.default.get(O)), null != J)) return J;
        let t = null != U ? U : o.default.getToken();
        !(
          !(0, _.isValidFingerprintRoute)() ||
          (!e && null != t) ||
          I.default.isHandoffAvailable()
        ) && ei({ withGuildExperiments: !0 });
      }
      function ei(e) {
        let { withGuildExperiments: t } = e,
          n = {},
          i = m.default.getSuperPropertiesBase64();
        null != i && (n["X-Super-Properties"] = i),
          null != U && (n["X-Fingerprint"] = U),
          (J = c.default
            .get({
              url: v.Endpoints.EXPERIMENTS,
              query: { with_guild_experiments: t },
              headers: n,
              context: { location: (0, _.getFingerprintLocation)() },
              retries: 3,
              oldFormErrors: !0,
            })
            .then(
              e => {
                let {
                  fingerprint: t,
                  assignments: n,
                  guild_experiments: i,
                } = e.body;
                t &&
                  f.default.dispatch({ type: "FINGERPRINT", fingerprint: t }),
                  f.default.dispatch({
                    type: "EXPERIMENTS_FETCH_SUCCESS",
                    fingerprint: t,
                    experiments: n,
                    guildExperiments: i,
                  }),
                  (J = null);
              },
              () => {
                (J = null),
                  f.default.dispatch({ type: "EXPERIMENTS_FETCH_FAILURE" });
              }
            ));
      }
      function er() {
        (G = U), (U = null), d.default.remove(O);
      }
      function es(e, t) {
        et("setAuthToken called."), o.default.setToken(e, t);
      }
      function ea() {
        et("removeAuthToken called."), o.default.removeToken();
      }
      function eo() {
        (F = !0),
          el(),
          f.default.wait(() => {
            (0, _.transitionTo)(v.Routes.REGISTER);
          });
      }
      function el(e) {
        et("handleLogout called."),
          ea(),
          er(),
          !(null == e ? void 0 : e.isSwitchingAccount) && en(),
          u.default.PersistedStore.clearAll({
            omit: [
              "InstallationManagerStore",
              "AgeGateStore",
              "NativePermissionsStore",
              "MultiAccountStore",
              "DraftStore",
              "OverlayStoreV2",
              "StreamerModeStore",
              "LoginRequiredActionStore",
            ],
            type: (null == e ? void 0 : e.isSwitchingAccount)
              ? "user-data-only"
              : "all",
          }),
          C.default.clearAll(),
          p.clear(),
          g.default.clearUser(),
          d.default.remove(y),
          (P = null),
          (k = (null == e ? void 0 : e.isSwitchingAccount)
            ? v.LoginStates.LOGGING_IN
            : v.LoginStates.NONE),
          (x = v.RegistrationStates.NONE),
          (B = ""),
          (K = ""),
          (j = null),
          (H = !1),
          (z = !1),
          (q = !1),
          (X = {}),
          (Q = {});
      }
      class eu extends u.default.Store {
        initialize() {
          (P = d.default.get(y)),
            (L = d.default.get(D)),
            ($ = d.default.get("login_cache")),
            null == o.default.getToken() && en();
        }
        getEmail() {
          return L;
        }
        getLogin() {
          return $;
        }
        didVerifyFail() {
          return z;
        }
        getVerifyErrors() {
          return X;
        }
        didVerifySucceed() {
          return q;
        }
        getLoginStatus() {
          return k;
        }
        getRegisterStatus() {
          return x;
        }
        getId() {
          return P;
        }
        getSessionId() {
          return b;
        }
        getAuthSessionIdHash() {
          return M;
        }
        getToken() {
          return (0, T.getToken)();
        }
        isAuthenticated() {
          return (0, T.isAuthenticated)();
        }
        getFingerprint() {
          return U;
        }
        getAnalyticsToken() {
          return w;
        }
        getErrors() {
          return Q;
        }
        getMFATicket() {
          return B;
        }
        getMFASMS() {
          return H;
        }
        getMFATotp() {
          return Y;
        }
        getMFABackup() {
          return W;
        }
        getMFAWebAuthn() {
          return j;
        }
        getMFAMethods() {
          let e = [];
          return (
            null != j && e.push({ type: "webauthn", challenge: j }),
            Y && e.push({ type: "totp", backup_codes_allowed: W }),
            W && e.push({ type: "backup" }),
            H && e.push({ type: "sms" }),
            e
          );
        }
        hasTOTPEnabled() {
          return V.includes(E.AuthenticatorType.TOTP);
        }
        hasSMSEnabled() {
          return V.includes(E.AuthenticatorType.SMS);
        }
        hasWebAuthnEnabled() {
          return V.includes(E.AuthenticatorType.WEBAUTHN);
        }
        getMaskedPhone() {
          return K;
        }
        getCredentials() {
          if (null == i) throw Error("no credentials");
          return i;
        }
        getVerifyingUserId() {
          return Z;
        }
        getCurrentRegistrationOptions() {
          return r;
        }
        allowLogoutRedirect() {
          return !F;
        }
        getWebAuthnChallenge() {
          return j;
        }
        getSuspendedUserToken() {
          return ee;
        }
      }
      eu.displayName = "AuthenticationStore";
      var ec = new eu(
        f.default,
        {
          CONNECTION_OPEN: function (e) {
            var t;
            let {
              user: n,
              sessionId: i,
              authSessionIdHash: r,
              analyticsToken: s,
              auth: a,
            } = e;
            et("handleConnectionOpen called"),
              g.default.setUser(
                n.id,
                n.username,
                null !== (t = n.email) && void 0 !== t ? t : void 0,
                (0, S.default)(n)
              ),
              (b = i),
              (M = r),
              (w = s),
              (P = n.id),
              (L = n.email),
              void 0 !== a && (V = a.authenticator_types),
              d.default.set(D, n.email),
              d.default.set(y, n.id);
          },
          OVERLAY_INITIALIZE: function (e) {
            var t;
            let { user: n, sessionId: i, analyticsToken: r, token: s } = e;
            g.default.setUser(
              n.id,
              n.username,
              null !== (t = n.email) && void 0 !== t ? t : void 0,
              (0, S.default)(n)
            ),
              (b = i),
              (w = r),
              es(s),
              er(),
              (P = n.id),
              d.default.set(y, n.id);
          },
          CONNECTION_CLOSED: function (e) {
            let { code: t } = e;
            if (
              (et("handleConnectionClosed called with code ".concat(t, ".")),
              4004 === t)
            ) {
              if (
                F ||
                R(A.NEW_USER_AGE_GATE_MODAL_KEY) ||
                R(A.EXISTING_USER_AGE_GATE_MODAL_KEY)
              ) {
                eo();
                return;
              }
              m.default.track(v.AnalyticEvents.APP_USER_DEAUTHENTICATED, {
                user_id: d.default.get(y),
              }),
                el(),
                setImmediate(() =>
                  (0, _.transitionTo)(v.Routes.DEFAULT_LOGGED_OUT)
                );
            }
          },
          AUTH_SESSION_CHANGE: function (e) {
            let { authSessionIdHash: t } = e;
            null != t && (M = t);
          },
          LOGIN: function (e) {
            (Q = {}),
              (k = v.LoginStates.LOGGING_IN),
              (K = ""),
              (r = null),
              null != e.login && ($ = e.login);
          },
          LOGIN_SUCCESS: function (e) {
            let { token: t } = e;
            (k = v.LoginStates.NONE),
              es(t),
              er(),
              (B = ""),
              (H = !1),
              (j = null),
              (K = "");
          },
          LOGIN_FAILURE: function (e) {
            let { error: t } = e;
            (B = ""),
              (H = !1),
              (j = null),
              (k =
                null !=
                (Q = (function (e) {
                  if (Object.keys(e.fields).length > 0) return e.fields;
                  let t = { message: e.message };
                  return (
                    null != e.retryAfter && (t.retry_after = e.retryAfter), t
                  );
                })(t)).date_of_birth
                  ? v.LoginStates.LOGIN_AGE_GATE
                  : v.LoginStates.NONE);
          },
          LOGIN_MFA_STEP: function (e) {
            let { ticket: t, sms: n, webauthn: i, backup: r, totp: s } = e;
            null != t &&
              ((B = t),
              (H = n),
              (K = ""),
              (j = null != i ? i : null),
              (W = r),
              (Y = s)),
              (Q = {}),
              (k = v.LoginStates.MFA_STEP);
          },
          LOGIN_MFA: function () {
            k = v.LoginStates.LOGGING_IN_MFA;
          },
          LOGIN_MFA_FAILURE: function (e) {
            let { message: t } = e;
            (k = v.LoginStates.MFA_STEP), (Q = { code: t });
          },
          LOGIN_MFA_SMS: function () {
            k = v.LoginStates.LOGGING_IN_MFA_SMS;
          },
          LOGIN_MFA_SMS_REQUEST_SUCCESS: function (e) {
            let { phone: t } = e;
            (k = v.LoginStates.MFA_SMS_STEP), (K = t);
          },
          LOGIN_MFA_SMS_FAILURE: function (e) {
            let { message: t } = e;
            (k = v.LoginStates.MFA_SMS_STEP), (Q = { code: t });
          },
          LOGIN_ACCOUNT_SCHEDULED_FOR_DELETION: function (e) {
            (k = v.LoginStates.ACCOUNT_SCHEDULED_FOR_DELETION),
              (i = e.credentials);
          },
          LOGIN_ACCOUNT_DISABLED: function (e) {
            (k = v.LoginStates.ACCOUNT_DISABLED), (i = e.credentials);
          },
          LOGIN_PASSWORD_RECOVERY_PHONE_VERIFICATION: function () {
            k = v.LoginStates.PASSWORD_RECOVERY_PHONE_VERIFICATION;
          },
          LOGIN_PHONE_IP_AUTHORIZATION_REQUIRED: function () {
            k = v.LoginStates.PHONE_IP_AUTHORIZATION;
          },
          LOGIN_RESET: function (e) {
            let { isMultiAccount: t } = e;
            (Q = {}),
              (k = v.LoginStates.NONE),
              (B = ""),
              (H = !1),
              (j = null),
              (r = null),
              (i = null),
              !t && (ea(), en(!1));
          },
          LOGIN_STATUS_RESET: function () {
            k = v.LoginStates.NONE;
          },
          LOGIN_SUSPENDED_USER: function (e) {
            let { suspendedUserToken: t } = e;
            (ee = t),
              setImmediate(() =>
                (0, _.transitionTo)(v.Routes.ACCOUNT_STANDING)
              );
          },
          SET_LOGIN_CREDENTIALS: function (e) {
            let { login: t, password: n } = e;
            i = { login: t, password: n };
          },
          LOGOUT: el,
          FINGERPRINT: function (e) {
            let t = e.fingerprint;
            null == U
              ? null != t
                ? (m.default.track(v.AnalyticEvents.USER_FINGERPRINT_CHANGED, {
                    old_fingerprint: null != G ? (0, l.extractId)(G) : null,
                    new_fingerprint: (0, l.extractId)(t),
                  }),
                  (U = t),
                  (G = t),
                  d.default.set(O, U))
                : en()
              : null != t &&
                U !== t &&
                m.default.track(v.AnalyticEvents.EXTERNAL_FINGERPRINT_DROPPED, {
                  fingerprint: (0, l.extractId)(U),
                  dropped_fingerprint: (0, l.extractId)(t),
                });
          },
          REGISTER_SAVE_FORM: function (e) {
            let { form: t } = e;
            (r = t), (x = v.RegistrationStates.REGISTER_AGE_GATE);
          },
          REGISTER: function (e) {
            let { birthday: t } = e;
            (Q = {}),
              null != t &&
                (a(
                  null != r,
                  "Got birthday in multistep registration without existing form"
                ),
                (r = { ...r, birthday: t })),
              (x = v.RegistrationStates.REGISTERING);
          },
          REGISTER_SUCCESS: function (e) {
            let { token: t } = e;
            (x = v.RegistrationStates.NONE), (r = null), es(t), er();
          },
          REGISTER_FAILURE: function (e) {
            let { error: t } = e;
            (Q = (function (e) {
              let t = {};
              if (((t.error_code = e.code), null != e.errors)) {
                for (let n of Object.keys(e.errors))
                  t[n] = [e.getFirstFieldErrorMessage(n)];
                return t;
              }
              return (
                (t.message = e.message),
                null != e.retryAfter && (t.retry_after = e.retryAfter),
                t
              );
            })(t)),
              (x =
                null != t.getFieldErrors("date_of_birth")
                  ? v.RegistrationStates.REGISTER_AGE_GATE
                  : v.RegistrationStates.REGISTER_WITH_ERROR);
          },
          VERIFY_FAILURE: function (e) {
            let { errors: t } = e;
            (z = !0), (q = !1), (X = null != t ? t : {});
          },
          VERIFY_SUCCESS: function (e) {
            (q = !0), (z = !1), (X = {}), (Z = e.verifyingUserId);
          },
          START_SESSION: function () {
            if (0 === Object.keys(Q).length) return !1;
            Q = {};
          },
          FORGOT_PASSWORD_REQUEST: function () {
            (k = v.LoginStates.FORGOT_PASSWORD), (Q = {});
          },
          FORGOT_PASSWORD_SENT: function () {
            (k = v.LoginStates.NONE), (Q = {});
          },
          UPDATE_TOKEN: function (e) {
            let { token: t, userId: n } = e;
            et("handleUpdateToken called"), es(t, n), er();
          },
          EXPERIMENTS_FETCH: ei,
          CURRENT_USER_UPDATE: function (e) {
            let { user: t } = e;
            (P = t.id),
              (L = t.email),
              void 0 !== t.authenticator_types && (V = t.authenticator_types),
              d.default.set(D, t.email),
              d.default.set(y, t.id);
          },
          AGE_GATE_LOGOUT_UNDERAGE_NEW_USER: eo,
          CLEAR_AUTHENTICATION_ERRORS: function () {
            Q = {};
          },
          CLOSE_SUSPENDED_USER: function () {
            (ee = null),
              (k = v.LoginStates.NONE),
              el(),
              setImmediate(() =>
                (0, _.transitionTo)(v.Routes.DEFAULT_LOGGED_OUT)
              );
          },
        },
        f.DispatchBand.Early
      );
    },
    366679: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        });
      var i = n("446674"),
        r = n("913144");
      let s = n("353927").DEFAULT_VOICE_BITRATE;
      class a extends i.default.Store {
        get bitrate() {
          return s;
        }
      }
      a.displayName = "BitRateStore";
      var o = new a(r.default, {
        SET_CHANNEL_BITRATE: function (e) {
          s = e.bitrate;
        },
      });
    },
    72177: function (e, t, n) {
      "use strict";
      let i, r, s;
      n.r(t),
        n.d(t, {
          default: function () {
            return v;
          },
        });
      var a = n("748820"),
        o = n("446674"),
        l = n("95410"),
        u = n("862337"),
        c = n("913144"),
        d = n("697796"),
        f = n("766274"),
        E = n("922932"),
        p = n("773336"),
        h = n("197881");
      let _ = "BrowserHandoffStore",
        S = !1,
        m = new u.Timeout();
      function T() {
        null != i &&
          null != r &&
          (window.open("".concat(i, "&key=").concat(r)),
          E.default.focus(null, !0));
      }
      function g() {
        (r = null), m.stop(), (S = !1), l.default.set(_, S);
      }
      function I() {
        g();
      }
      class C extends o.default.Store {
        initialize() {
          !1 !== l.default.get(_) &&
            (S =
              p.isPlatformEmbedded &&
              "stable" === window.GLOBAL_ENV.RELEASE_CHANNEL);
        }
        isHandoffAvailable() {
          return !h.ProcessArgs.isDisallowPopupsSet() && S;
        }
        get user() {
          return s;
        }
        get key() {
          return r;
        }
      }
      C.displayName = "BrowserHandoffStore";
      var v = new C(c.default, {
        RPC_SERVER_READY: function (e) {
          (i = ""
            .concat(location.protocol, "//")
            .concat(location.host, "/handoff?rpc=")
            .concat(e.port)),
            T();
        },
        BROWSER_HANDOFF_BEGIN: function (e) {
          if (null != r) return !1;
          (r = (0, a.v4)()), m.start(e.timeout, () => (0, d.handoffEnd)()), T();
        },
        BROWSER_HANDOFF_FROM_APP: function (e) {
          let { handoffKey: t, handoffToken: n, timeout: i } = e;
          if (null == t || null == n) return !1;
          (S = !0), m.start(i, () => (0, d.handoffEnd)());
        },
        BROWSER_HANDOFF_UNAVAILABLE: g,
        BROWSER_HANDOFF_SET_USER: function (e) {
          s = new f.default(e.user);
        },
        LOGIN: I,
        LOGIN_SUCCESS: I,
        LOGOUT: I,
        REGISTER: I,
      });
    },
    533222: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return _;
          },
        });
      var i = n("917351"),
        r = n.n(i),
        s = n("446674"),
        a = n("95410"),
        o = n("913144"),
        l = n("353927");
      let u = "CertifiedDeviceStore",
        c = {},
        d = {},
        f = 0;
      function E(e, t, n) {
        let i = d[e];
        return null != i ? n(i) : t;
      }
      function p(e, t) {
        let n = c[e];
        null != n && n.forEach(e => delete d[e.id]),
          (c[e] = t),
          t.forEach(e => (d[e.id] = e));
      }
      class h extends s.default.Store {
        initialize() {
          let e = a.default.get(u);
          null != e &&
            r.forEach(e, (e, t) => {
              e.forEach(e => {
                "audioinput" === e.type &&
                  e.hardwareMute &&
                  (e.hardwareMute = !1);
              }),
                p(t, e);
            });
        }
        isCertified(e) {
          return null != d[e];
        }
        getCertifiedDevice(e) {
          return d[e];
        }
        getCertifiedDeviceName(e, t) {
          let n = this.getCertifiedDevice(e);
          return null != n
            ? "".concat(n.vendor.name, " ").concat(n.model.name)
            : t;
        }
        getCertifiedDeviceByType(e) {
          return r.find(d, t => t.type === e);
        }
        isHardwareMute(e) {
          return E(
            e,
            !1,
            e => e.type === l.DeviceTypes.AUDIO_INPUT && e.hardwareMute
          );
        }
        hasEchoCancellation(e) {
          return E(
            e,
            !1,
            e => e.type === l.DeviceTypes.AUDIO_INPUT && e.echoCancellation
          );
        }
        hasNoiseSuppression(e) {
          return E(
            e,
            !1,
            e => e.type === l.DeviceTypes.AUDIO_INPUT && e.noiseSuppression
          );
        }
        hasAutomaticGainControl(e) {
          return E(
            e,
            !1,
            e => e.type === l.DeviceTypes.AUDIO_INPUT && e.automaticGainControl
          );
        }
        getVendor(e) {
          return E(e, null, e => e.vendor);
        }
        getModel(e) {
          return E(e, null, e => e.model);
        }
        getRevision() {
          return f;
        }
      }
      h.displayName = "CertifiedDeviceStore";
      var _ = new h(o.default, {
        CERTIFIED_DEVICES_SET: function (e) {
          let { applicationId: t, devices: n } = e;
          p(t, n), a.default.set(u, c), f++;
        },
      });
    },
    42203: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return ei;
          },
        }),
        n("222007"),
        n("581081"),
        n("70102");
      var i = n("917351"),
        r = n.n(i),
        s = n("102053"),
        a = n("249654"),
        o = n("446674"),
        l = n("913144"),
        u = n("802493"),
        c = n("595525"),
        d = n("860255"),
        f = n("846527"),
        E = n("1544"),
        p = n("605250"),
        h = n("379881"),
        _ = n("560208"),
        S = n("233069"),
        m = n("271938"),
        T = n("305961"),
        g = n("697218"),
        I = n("49111");
      let C = new p.default("ChannelStore"),
        v = {},
        A = {},
        R = {},
        N = {},
        O = null,
        D = {},
        y = {},
        P = 0,
        L = {},
        b = {},
        M = new Set(),
        U = {},
        G = 0,
        w = 0;
      function k(e, t, n) {
        if (null == e || !M.has(e) || (0 === t && f.default.hasGuild(e)))
          return;
        C.verbose(
          "hydrating guild (guild: ".concat(e, ", trace: ").concat(n, ")")
        );
        let i = u.default.database(),
          r =
            null != i
              ? (0, c.tryLoadOrResetCacheGateway)(
                  "ensureGuildLoaded(".concat(e, ")"),
                  () => d.default.getSync(i, e)
                )
              : null;
        if (null == r) {
          M.delete(e),
            f.default.restored(e),
            C.log(
              "load returned null; early returning (guild: "
                .concat(e, ", database: ")
                .concat(i, ")")
            );
          return;
        }
        let [a, o] = r;
        for (let n of ((0, E.default)(a),
        0 !== t && (w += 1),
        M.delete(e),
        f.default.restored(e),
        s.default.mark(
          "❗",
          "loaded guild channels (guild: ".concat(e, ")"),
          o
        ),
        a))
          !Object.hasOwn(A, n.id) && W((0, S.castChannelRecord)(n));
        C.verbose(
          "hydration complete (guild: "
            .concat(e, ", channels: ")
            .concat(a.length, ", guilds_loaded: ")
            .concat(w, ")")
        );
      }
      function x(e, t, n) {
        if (
          M.size > 0 &&
          !Object.hasOwn(A, e) &&
          !Object.hasOwn(N, e) &&
          !Object.hasOwn(D, e) &&
          !Object.hasOwn(b, e) &&
          1 === t
        ) {
          let i = f.default.getBasicChannel(e);
          (null == i ? void 0 : i.guild_id) != null && k(i.guild_id, t, n);
        }
      }
      function F(e) {
        if (null != R[e]) {
          for (let t of Object.keys(R[e])) delete A[t];
          delete R[e];
        }
      }
      function V(e) {
        var t, n, i, r;
        return (
          x(e, 0, "getBasicChannel"),
          null !==
            (r =
              null !==
                (i =
                  null !==
                    (n = null !== (t = A[e]) && void 0 !== t ? t : N[e]) &&
                  void 0 !== n
                    ? n
                    : D[e]) && void 0 !== i
                ? i
                : b[e]) && void 0 !== r
            ? r
            : f.default.getBasicChannel(e)
        );
      }
      function B(e) {
        var t, n, i, r;
        return (
          x(e, 1, "getChannel"),
          null !==
            (r =
              null !==
                (i =
                  null !==
                    (n = null !== (t = A[e]) && void 0 !== t ? t : N[e]) &&
                  void 0 !== n
                    ? n
                    : D[e]) && void 0 !== i
                ? i
                : b[e]) && void 0 !== r
            ? r
            : U[e]
        );
      }
      function H(e) {
        e.isPrivate()
          ? (delete U[e.id], j(e))
          : e.isThread()
            ? Y(e)
            : S.GUILD_CHANNEL_TYPES.has(e.type) &&
              (function (e) {
                W(e);
              })(e);
      }
      function j(e) {
        (N[e.id] = e),
          e.type === I.ChannelTypes.DM && (y[e.getRecipientId()] = e.id),
          (P += 1);
      }
      function Y(e) {
        let t = A[e.parent_id];
        (D[e.id] = e.merge({
          nsfw: (null == t ? void 0 : t.nsfw) === !0,
          parentChannelThreadType: null == t ? void 0 : t.type,
        })),
          e.isScheduledForDeletion() &&
            l.default.dispatch({ type: "THREAD_DELETE", channel: e });
      }
      function W(e) {
        var t, n;
        let { id: i, guild_id: r } = e;
        (A[i] = e),
          (R[r] = null !== (t = R[r]) && void 0 !== t ? t : {}),
          (R[r][i] = e),
          (L[r] = (null !== (n = L[r]) && void 0 !== n ? n : 0) + 1);
      }
      function K(e) {
        if ((M.add(e.id), null != e.channels))
          for (let t of (F(e.id),
          M.delete(e.id),
          f.default.restored(e.id),
          e.channels))
            W(t);
        if (null != e.channelUpdates) {
          let t = e.channelUpdates;
          for (let n of ((t.writes.length > 0 || t.deletes.length > 0) &&
            f.default.invalidate(e.id),
          t.deletes))
            Z(A[n]);
          for (let e of t.writes) W(e);
        }
        if (null != e.threads) for (let t of e.threads) Y(t);
      }
      function z() {
        (y = {}),
          (A = {}),
          (R = {}),
          (L = {}),
          (N = {}),
          (U = {}),
          (D = {}),
          (M = new Set());
      }
      function q(e) {
        for (let t of (z(), e.channels))
          H((0, E.deserializeChannel)((0, S.castChannelRecord)(t)));
        M = new Set(e.guilds.map(e => e.id));
      }
      function X(e) {
        if (!S.ALL_CHANNEL_TYPES.has(e.channel.type)) return !1;
        let t = B(e.channel.id);
        if (null == t) t = e.channel;
        else {
          var n;
          t = t.merge({
            ...e.channel.toJS(),
            bitrate:
              null !== (n = e.channel.bitrate) && void 0 !== n ? n : t.bitrate,
          });
        }
        H(t);
      }
      function Q(e) {
        let { threads: t } = e;
        t.forEach(e => {
          S.ALL_CHANNEL_TYPES.has(e.type) &&
            H((0, S.createChannelRecordFromServer)(e));
        });
      }
      function Z(e) {
        if (null == e) return;
        let t = e.guild_id;
        e.id in N && delete N[e.id],
          e.id in A && delete A[e.id],
          e.id in D && delete D[e.id],
          null != t && null != R[t] && e.id in R[t] && delete R[t][e.id],
          !(function (e) {
            if (null == e.guild_id || S.THREAD_CHANNEL_TYPES.has(e.type))
              (0, S.isPrivate)(e.type) && (P += 1);
            else {
              var t;
              L[e.guild_id] =
                (null !== (t = L[e.guild_id]) && void 0 !== t ? t : 0) + 1;
            }
          })(e);
      }
      function J(e) {
        var t, n;
        let { channel: i } = e,
          r =
            null !==
              (n = null !== (t = A[i.id]) && void 0 !== t ? t : N[i.id]) &&
            void 0 !== n
              ? n
              : D[i.id];
        if (null == r) return !1;
        Z(r),
          !(function (e) {
            if ("basicPermissions" in e || e.type !== I.ChannelTypes.DM) return;
            let t = e.getRecipientId(),
              n = y[t];
            n === e.id && delete y[t];
          })(r);
      }
      function $(e) {
        let { messages: t } = e;
        for (let e of t)
          null != e.thread &&
            !(e.thread.id in D) &&
            S.ALL_CHANNEL_TYPES.has(e.thread.type) &&
            Y((0, S.createChannelRecordFromServer)(e.thread));
      }
      function ee(e) {
        null != e &&
          !(e.id in D) &&
          S.ALL_CHANNEL_TYPES.has(e.type) &&
          Y((0, S.createChannelRecordFromServer)(e));
      }
      function et() {
        for (let e in ((b = {}), h.default.getFavoriteChannels())) {
          let t = h.default.getCategoryRecord(e);
          null != t && (b[e] = t);
        }
      }
      class en extends o.default.Store {
        initialize() {
          this.waitFor(f.default, g.default, T.default, h.default),
            this.syncWith([h.default], et);
        }
        hasChannel(e) {
          return null != V(e);
        }
        getBasicChannel(e) {
          if (null != e) return V(e);
        }
        getChannel(e) {
          if (null != e) return B(e);
        }
        loadAllGuildAndPrivateChannelsFromDisk() {
          for (let e of T.default.getGuildIds())
            k(e, 1, "loadAllGuildAndPrivateChannelsFromDisk");
          return { ...A, ...N };
        }
        getChannelIds(e) {
          var t, n;
          return (k(e, 0, "getChannelIds"), null == e)
            ? Object.keys(N)
            : Object.keys(
                null !==
                  (n =
                    null !== (t = f.default.getGuildBasicChannels(e)) &&
                    void 0 !== t
                      ? t
                      : R[e]) && void 0 !== n
                  ? n
                  : v
              );
        }
        getMutablePrivateChannels() {
          return N;
        }
        getMutableBasicGuildChannelsForGuild(e) {
          var t, n;
          return (
            k(e, 0, "getMutableBasicGuildChannelsForGuild"),
            null !==
              (n =
                null !== (t = f.default.getGuildBasicChannels(e)) &&
                void 0 !== t
                  ? t
                  : R[e]) && void 0 !== n
              ? n
              : v
          );
        }
        getMutableGuildChannelsForGuild(e) {
          var t;
          return (
            k(e, 1, "getMutableGuildChannelsForGuild"),
            null !== (t = R[e]) && void 0 !== t ? t : v
          );
        }
        getSortedPrivateChannels() {
          return r(N)
            .values()
            .sort((e, t) => a.default.compare(e.lastMessageId, t.lastMessageId))
            .reverse()
            .value();
        }
        getDMFromUserId(e) {
          if (null != e) return y[e];
        }
        getDMUserIds() {
          return Object.keys(y);
        }
        getPrivateChannelsVersion() {
          return P;
        }
        getGuildChannelsVersion(e) {
          var t;
          return null !== (t = L[e]) && void 0 !== t ? t : 0;
        }
        getAllThreadsForParent(e) {
          return r.values(D).filter(t => t.parent_id === e);
        }
        getInitialOverlayState() {
          return { ...A, ...N, ...D };
        }
      }
      en.displayName = "ChannelStore";
      var ei = new en(l.default, {
        BACKGROUND_SYNC: function (e) {
          let { guilds: t } = e,
            n = R;
          (A = {}),
            (R = {}),
            (L = {}),
            t.forEach(e => {
              if ("unavailable" === e.data_mode) r.forEach(n[e.id], W);
              else if ("partial" === e.data_mode) {
                var t, i;
                r.forEach(n[e.id], W);
                let s =
                  null !== (i = e.partial_updates.deleted_channel_ids) &&
                  void 0 !== i
                    ? i
                    : [];
                s.length > 0 &&
                  (k(e.id, 1, "handleBackgroundSync"), s.forEach(e => Z(A[e]))),
                  null === (t = e.partial_updates.channels) ||
                    void 0 === t ||
                    t.forEach(t =>
                      W((0, S.createChannelRecordFromServer)(t, e.id))
                    );
              } else
                F(e.id),
                  M.delete(e.id),
                  f.default.restored(e.id),
                  e.channels.forEach(t =>
                    W((0, S.createChannelRecordFromServer)(t, e.id))
                  );
            });
        },
        CACHE_LOADED_LAZY: function (e) {
          if (null != e.privateChannels)
            for (let t of e.privateChannels) H((0, S.castChannelRecord)(t));
          for (let [t, n] of e.guildChannels)
            for (let e of n) H((0, S.castChannelRecord)(e));
          e.guilds.length, (M = new Set(e.guilds.map(e => e.id)));
        },
        CACHE_LOADED: q,
        CHANNEL_CREATE: function (e) {
          H(e.channel);
        },
        CHANNEL_DELETE: J,
        CHANNEL_RECIPIENT_ADD: function (e) {
          let t = B(e.channelId),
            n = m.default.getId();
          return (
            (null == t ? !!void 0 : !!t.isPrivate()) &&
            (H(t.addRecipient(e.user.id, e.nick, n)), !0)
          );
        },
        CHANNEL_RECIPIENT_REMOVE: function (e) {
          let t = B(e.channelId);
          return (
            (null == t ? !!void 0 : !!t.isPrivate()) &&
            (H(t.removeRecipient(e.user.id)), !0)
          );
        },
        CHANNEL_UPDATES: function (e) {
          let t = e.channels.some(e => {
            let t = B(e.id);
            return (
              e.nsfw !== (null == t ? void 0 : t.nsfw) ||
              e.type !== (null == t ? void 0 : t.type)
            );
          });
          for (let t of e.channels) H(t);
          t && Object.values(D).forEach(e => H(e));
        },
        CONNECTION_OPEN_SUPPLEMENTAL: function (e) {
          let { lazyPrivateChannels: t } = e;
          null != O && ((N = {}), O.forEach(j)), t.forEach(j);
        },
        CONNECTION_OPEN: function (e) {
          let t = R;
          for (let n of ((y = {}),
          (A = {}),
          (R = {}),
          (D = {}),
          (L = {}),
          (U = {}),
          (M = new Set()),
          (O = e.initialPrivateChannels),
          e.initialPrivateChannels.forEach(j),
          e.guilds))
            "partial" === n.dataMode && r.forEach(t[n.id], W), K(n);
          et();
        },
        GUILD_CREATE: function (e) {
          K(e.guild);
        },
        GUILD_DELETE: function (e) {
          F(e.guild.id), M.delete(e.guild.id), f.default.invalidate(e.guild.id);
        },
        GUILD_FEED_FETCH_SUCCESS: function (e) {
          let { data: t } = e,
            n = !1,
            i = (0, _.getThreadsFromGuildFeedFetch)(t);
          for (let e of i)
            !(e.id in D) &&
              S.ALL_CHANNEL_TYPES.has(e.type) &&
              (Y((0, S.createChannelRecordFromServer)(e)), (n = !0));
          return n;
        },
        LOAD_ARCHIVED_THREADS_SUCCESS: Q,
        LOAD_MESSAGES_AROUND_SUCCESS: $,
        LOAD_MESSAGES_SUCCESS: $,
        LOAD_THREADS_SUCCESS: Q,
        LOGOUT: function () {
          z();
        },
        OVERLAY_INITIALIZE: q,
        SEARCH_FINISH: function (e) {
          let { messages: t, threads: n, channels: i } = e;
          for (let e of t) for (let t of e) ee(t.thread);
          n.forEach(ee),
            null == i ||
              i.forEach(e => {
                let t = (0, S.createChannelRecordFromServer)(e),
                  n = null != B(e.id),
                  i = null != U[e.id];
                t.isPrivate() && (!n || i) ? (U[t.id] = t) : !n && H(t);
              });
        },
        THREAD_CREATE: X,
        THREAD_DELETE: J,
        THREAD_LIST_SYNC: function (e) {
          let { threads: t } = e;
          t.forEach(e => {
            S.ALL_CHANNEL_TYPES.has(e.type) && H(e);
          });
        },
        THREAD_UPDATE: X,
        VOICE_BACKGROUND_UPDATE: function (e) {
          let t = B(e.channelId);
          null != t && ((t.voiceBackgroundDisplay = e.background), H(t));
        },
      });
    },
    86878: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return u;
          },
        }),
        n("222007");
      var i = n("917351"),
        r = n.n(i),
        s = n("446674"),
        a = n("913144");
      let o = {};
      class l extends s.default.Store {
        isConnected(e) {
          return null != o[e];
        }
        get connections() {
          return r.values(o);
        }
        getApplication(e) {
          return o[e];
        }
        getAllConnections() {
          return o;
        }
      }
      l.displayName = "ConnectedAppsStore";
      var u = new l(a.default, {
        OVERLAY_INITIALIZE: function (e) {
          let { connectedApps: t } = e;
          o = { ...t };
        },
        RPC_APP_CONNECTED: function (e) {
          let { application: t } = e;
          if (null == t.id) return !1;
          let n = t.id;
          null == o[n] &&
            (o[n] = {
              count: 0,
              id: t.id,
              name: t.name,
              icon: t.icon,
              coverImage: t.coverImage,
              authenticated: !1,
            }),
            o[n].count++;
        },
        RPC_APP_AUTHENTICATED: function (e) {
          let { application: t } = e;
          null != t.id && null != o[t.id] && (o[t.id].authenticated = !0);
        },
        RPC_APP_DISCONNECTED: function (e) {
          let { application: t } = e;
          null != t.id &&
            null != o[t.id] &&
            (o[t.id].count--, 0 === o[t.id].count && delete o[t.id]);
        },
      });
    },
    368694: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return E;
          },
        }),
        n("222007");
      var i = n("446674"),
        r = n("913144"),
        s = n("517001"),
        a = n("305961"),
        o = n("697218"),
        l = n("565034"),
        u = n("963903");
      let c =
        "production" === u.Environments.DEVELOPMENT ||
        window.GLOBAL_ENV.RELEASE_CHANNEL === u.Environments.STAGING;
      function d() {
        c = (0, s.isStaffEnv)(o.default.getCurrentUser());
      }
      class f extends i.default.Store {
        initialize() {
          this.waitFor(o.default, a.default),
            Object.defineProperties(this, {
              isDeveloper: { configurable: !1, get: () => c },
            }),
            d(),
            setTimeout(() => Object.freeze(this));
        }
        getExperimentDescriptor() {
          return c
            ? {
                type: "developer",
                name: "discord_dev_testing",
                revision: 1,
                override: !0,
                bucket: l.ExperimentBuckets.TREATMENT_1,
              }
            : null;
        }
        constructor(...e) {
          super(...e), (this.isDeveloper = !1);
        }
      }
      f.displayName = "DeveloperExperimentStore";
      var E = new f(r.default, {
        CONNECTION_OPEN: d,
        OVERLAY_INITIALIZE: d,
        CURRENT_USER_UPDATE: d,
      });
    },
    313915: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return T;
          },
        }),
        n("702976");
      var i = n("981980"),
        r = n("171718"),
        s = n("446674"),
        a = n("872717"),
        o = n("95410"),
        l = n("913144"),
        u = n("527015"),
        c = n("718517"),
        d = n("286235"),
        f = n("49111");
      let E = (() => {
          let e = ""
              .concat(location.protocol, "//")
              .concat(location.host, "/__development/source_maps"),
            t = null,
            n = new i.default(
              5 * c.default.Millis.SECOND,
              1 * c.default.Millis.MINUTE,
              !0
            ),
            s = () => {
              a.default
                .put({
                  url: e,
                  headers: { Authorization: r.default.getToken() },
                  oldFormErrors: !0,
                })
                .then(
                  e => {
                    401 === e.status || 403 === e.status
                      ? ((t = null),
                        (0, u.setDeveloperOptionSettings)({
                          sourceMapsEnabled: !1,
                        }))
                      : 200 !== e.status
                        ? (t = setTimeout(s, n.fail()))
                        : (n.succeed(),
                          (t = setTimeout(
                            s,
                            e.body.sourceMapCookieTTLSeconds *
                              c.default.Millis.SECOND *
                              0.75
                          )));
                  },
                  () => {
                    t = setTimeout(s, n.fail());
                  }
                );
            };
          return {
            set: n => {
              let i = null != t;
              n !== i &&
                (n
                  ? (t = setTimeout(s, 0))
                  : (clearTimeout(t),
                    (t = null),
                    a.default.delete({
                      url: e,
                      headers: { Authorization: r.default.getToken() },
                      oldFormErrors: !0,
                    })));
            },
          };
        })(),
        p = "DeveloperOptionsStore",
        h = {
          trace: !1,
          canary: !1,
          logGatewayEvents: !1,
          logOverlayEvents: !1,
          logAnalyticsEvents: !1,
          sourceMapsEnabled: !1,
          axeEnabled: !1,
          analyticsDebuggerEnabled: !1,
          bugReporterEnabled: !0,
          idleStatusIndicatorEnabled: !1,
          appDirectoryIncludesInactiveCollections: !1,
        },
        _ = { ...h };
      function S(e) {
        (_ = { ...h, ..._, ...e }),
          E.set(_.sourceMapsEnabled),
          o.default.set(p, _);
      }
      class m extends s.default.Store {
        initialize() {
          let e = o.default.get(p);
          null != e && (_ = { ...h, ...e });
        }
        get isTracingRequests() {
          return _.trace;
        }
        get isForcedCanary() {
          return _.canary;
        }
        get isLoggingGatewayEvents() {
          return _.logGatewayEvents;
        }
        get isLoggingOverlayEvents() {
          return _.logOverlayEvents;
        }
        get isLoggingAnalyticsEvents() {
          return _.logAnalyticsEvents;
        }
        get isAxeEnabled() {
          return _.axeEnabled;
        }
        get sourceMapsEnabled() {
          return _.sourceMapsEnabled;
        }
        get isAnalyticsDebuggerEnabled() {
          return _.analyticsDebuggerEnabled;
        }
        get isBugReporterEnabled() {
          return _.bugReporterEnabled;
        }
        get isIdleStatusIndicatorEnabled() {
          return _.idleStatusIndicatorEnabled;
        }
        get appDirectoryIncludesInactiveCollections() {
          return _.appDirectoryIncludesInactiveCollections;
        }
        getDebugOptionsHeaderValue() {
          Object.keys(_).map(e => _[e]);
          let e = Object.keys(_).filter(e => _[e]);
          return e.join(",");
        }
      }
      m.displayName = "DeveloperOptionsStore";
      var T = new m(l.default, {
        LOGOUT: function (e) {
          S(h);
        },
        CONNECTION_OPEN: function (e) {
          var t;
          let n =
              ((null !== (t = e.user.flags) && void 0 !== t ? t : 0) &
                f.UserFlags.STAFF) ===
              f.UserFlags.STAFF,
            i = n || null != e.user.personal_connection_id;
          n && E.set(_.sourceMapsEnabled),
            d.default.setTags({ isStaff: i.toString() });
        },
        DEVELOPER_OPTIONS_UPDATE_SETTINGS: function (e) {
          let { settings: t } = e;
          S(t);
        },
      });
    },
    760190: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return l;
          },
        });
      var i = n("446674"),
        r = n("913144"),
        s = n("789563");
      class a extends i.default.Store {
        initialize() {
          this.waitFor(s.default);
        }
        get hasLoadedExperiments() {
          return s.default.hasLoadedExperiments;
        }
        getExperimentBucket(e) {
          return s.default.getUserExperimentBucket(e);
        }
        getEligibleExperiment(e) {
          return s.default.getUserExperimentDescriptor(e);
        }
        getEligibleExperiments() {
          return s.default.getAllUserExperimentDescriptors();
        }
        getRegisteredExperiments() {
          return s.default.getRegisteredExperiments();
        }
        getExperimentOverrides() {
          return s.default.getAllExperimentOverrideDescriptors();
        }
        getOverrideExperimentDescriptor(e) {
          return s.default.getExperimentOverrideDescriptor(e);
        }
      }
      function o() {
        return !0;
      }
      a.displayName = "LegacyExperimentStore";
      var l = new a(r.default, {
        LOGOUT: o,
        LOGIN_SUCCESS: o,
        CONNECTION_OPEN: o,
        EXPERIMENTS_FETCH_SUCCESS: o,
        OVERLAY_INITIALIZE: o,
        CACHE_LOADED: o,
        EXPERIMENTS_FETCH_FAILURE: o,
        EXPERIMENT_REGISTER_LEGACY: o,
        EXPERIMENT_OVERRIDE_BUCKET: o,
      });
    },
    546463: function (e, t, n) {
      "use strict";
      let i;
      n.r(t),
        n.d(t, {
          default: function () {
            return I;
          },
        }),
        n("222007");
      var r,
        s = n("446674"),
        a = n("95410"),
        o = n("913144"),
        l = n("845579"),
        u = n("653047"),
        c = n("773336");
      let d = "GameStoreReportedGames",
        f = {},
        E = {},
        p = {},
        h = null !== (r = a.default.get(d)) && void 0 !== r ? r : {},
        _ = "";
      let S = null;
      function m(e) {
        return {
          id: e.id,
          name: e.name,
          executables: e.executables,
          overlayWarn: e.overlayWarn,
          overlayCompatibilityHook: e.overlayCompatibilityHook,
          overlay: e.overlay,
          hook: e.hook,
          aliases: e.aliases,
          supportsOutOfProcessOverlay: e.supportsOutOfProcessOverlay,
        };
      }
      function T(e) {
        let t = e instanceof u.default ? m(e) : e;
        for (let n of ((f[e.id] = t), (E[e.name.toLowerCase()] = t), e.aliases))
          E[n.toLowerCase()] = t;
        if ((0, c.isDesktop)()) for (let n of e.executables) p[n.name] = t;
      }
      class g extends s.default.PersistedStore {
        initialize(e) {
          var t;
          null != e &&
            (null != e.detectableGamesEtag && (_ = e.detectableGamesEtag),
            null === (t = e.detectableGames) ||
              void 0 === t ||
              t.forEach(e => T(e)));
        }
        getState() {
          return (0, c.isDesktop)()
            ? { detectableGamesEtag: _, detectableGames: Object.values(f) }
            : { detectableGamesEtag: "", detectableGames: [] };
        }
        get games() {
          return Object.values(f);
        }
        getDetectableGame(e) {
          return f[e];
        }
        getGameByName(e) {
          if (null == e) return null;
          let t = e.toLowerCase();
          return Object.prototype.hasOwnProperty.call(E, t) ? E[t] : null;
        }
        get fetching() {
          return !0 === i;
        }
        get detectableGamesEtag() {
          return _;
        }
        get lastFetched() {
          return S;
        }
        getGameByExecutable(e) {
          return p[e];
        }
        getGameByGameData(e) {
          var t, n;
          let i;
          if (null == e.exePath) return null;
          let r = e.exePath.split("/").pop(),
            s = e.exePath.split("/").slice(-2).join("/");
          if (null != e.name) {
            if (
              null != (i = this.getGameByName(e.name)) &&
              null != i.executables
            ) {
              let e = i.executables.map(e => e.name);
              if (e.includes(r) || e.includes(s)) return i;
            } else if (null != i) return null;
          }
          return null !==
            (n =
              null !== (t = this.getGameByExecutable(r)) && void 0 !== t
                ? t
                : this.getGameByExecutable(s)) && void 0 !== n
            ? n
            : i;
        }
        shouldReport(e) {
          let t = null != this.getGameByName(e),
            n = null != h[e];
          return l.ShowCurrentGame.getSetting() && !i && !(t || n);
        }
        markGameReported(e) {
          (h[e] = !0), a.default.set(d, h);
        }
      }
      (g.displayName = "GameStore"),
        (g.persistKey = "GameStore"),
        (g.migrations = [
          e => {
            var t, n;
            if (null == e)
              return { detectableGamesEtag: "", detectableGames: [] };
            return {
              detectableGamesEtag: e.detectableGamesEtag,
              detectableGames:
                null !==
                  (n =
                    null === (t = e.detectableGames) || void 0 === t
                      ? void 0
                      : t.map(e => m(new u.default(e)))) && void 0 !== n
                  ? n
                  : [],
            };
          },
          e =>
            (0, c.isDesktop)()
              ? e
              : { detectableGamesEtag: "", detectableGames: [] },
        ]);
      var I = new g(o.default, {
        OVERLAY_INITIALIZE: function (e) {
          let { detectableApplications: t } = e;
          for (let e of t) T(e);
        },
        GAMES_DATABASE_FETCH: function () {
          i = !0;
        },
        GAMES_DATABASE_FETCH_FAIL: function () {
          i = !1;
        },
        GAMES_DATABASE_UPDATE: function (e) {
          let { games: t, etag: n } = e;
          for (let e of (null != n && _ !== n && (_ = n), t))
            T(
              (function (e) {
                var t, n, i, r, s, a;
                return {
                  id: e.id,
                  name: e.name,
                  executables: (null !== (t = e.executables) && void 0 !== t
                    ? t
                    : []
                  ).map(u.createExecutable),
                  overlay: null !== (n = e.overlay) && void 0 !== n && n,
                  overlayWarn:
                    null !== (i = e.overlay_warn) && void 0 !== i && i,
                  overlayCompatibilityHook:
                    null !== (r = e.overlay_compatibility_hook) &&
                    void 0 !== r &&
                    r,
                  hook: null === (s = e.hook) || void 0 === s || s,
                  aliases: null !== (a = e.aliases) && void 0 !== a ? a : [],
                  supportsOutOfProcessOverlay:
                    u.default.supportsOutOfProcessOverlay(e.overlay_methods),
                };
              })(e)
            );
          (i = void 0), (S = Date.now());
        },
      });
    },
    341542: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return p;
          },
        }),
        n("222007");
      var i = n("917351"),
        r = n.n(i),
        s = n("446674"),
        a = n("913144"),
        o = n("605250"),
        l = n("305961");
      let u = new o.default("GuildAvailabilityStore"),
        c = new Set();
      function d(e) {
        (c = new Set(e.unavailableGuilds)),
          e.unavailableGuilds.length > 0 &&
            u.warn(
              ""
                .concat(
                  e.unavailableGuilds.length,
                  " guilds are unavailable on connection open: "
                )
                .concat(e.unavailableGuilds)
            );
      }
      function f(e) {
        if (!c.has(e.guild.id)) return !1;
        c.delete(e.guild.id),
          u.info("Guild has become available: ".concat(e.guild.id));
      }
      class E extends s.default.Store {
        initialize() {
          this.waitFor(l.default);
        }
        isUnavailable(e) {
          return null != e && c.has(e);
        }
        get totalGuilds() {
          return r.size(l.default.getGuilds()) + c.size;
        }
        get totalUnavailableGuilds() {
          return c.size;
        }
        get unavailableGuilds() {
          return Array.from(c);
        }
      }
      E.displayName = "GuildAvailabilityStore";
      var p = new E(a.default, {
        CONNECTION_OPEN: d,
        OVERLAY_INITIALIZE: d,
        GUILD_UNAVAILABLE: function (e) {
          if (c.has(e.guildId)) return !1;
          let t = l.default.getGuild(e.guildId),
            n = "???";
          null != t && null != t.name && (n = t.name),
            u.warn(
              "Guild has gone unavailable: "
                .concat(e.guildId, " (")
                .concat(n, ")")
            ),
            c.add(e.guildId);
        },
        GUILD_DELETE: function (e) {
          !0 !== e.guild.unavailable && c.delete(e.guild.id);
        },
        GUILD_CREATE: f,
        GUILD_UPDATE: f,
        GUILD_GEO_RESTRICTED: function (e) {
          if (!c.has(e.guildId)) return !1;
          c.delete(e.guildId);
        },
      });
    },
    923959: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          GUILD_SELECTABLE_CHANNELS_KEY: function () {
            return v;
          },
          GUILD_VOCAL_CHANNELS_KEY: function () {
            return A;
          },
          default: function () {
            return K;
          },
        }),
        n("424973"),
        n("222007"),
        n("808653");
      var i = n("917351"),
        r = n.n(i),
        s = n("316693"),
        a = n("446674"),
        o = n("913144"),
        l = n("203288"),
        u = n("679653"),
        c = n("379881"),
        d = n("106682"),
        f = n("233069"),
        E = n("991170"),
        p = n("271938"),
        h = n("42203"),
        _ = n("26989"),
        S = n("305961"),
        m = n("957255"),
        T = n("27618"),
        g = n("697218"),
        I = n("49111"),
        C = n("782340");
      let v = "SELECTABLE",
        A = "VOCAL",
        R = null,
        N = {},
        O = {},
        D = {},
        y = null,
        P = {},
        L = {
          comparator: -1,
          channel: (0, f.createChannelRecord)({
            id: "null",
            type: I.ChannelTypes.GUILD_CATEGORY,
            name: C.default.Messages.UNCATEGORIZED,
          }),
        },
        b = G(I.NULL_STRING_GUILD_ID),
        M = [],
        U = {};
      function G(e) {
        return {
          id: e,
          [v]: [],
          [A]: [],
          [I.ChannelTypes.GUILD_CATEGORY]: [L],
          count: 0,
        };
      }
      function w(e, t) {
        let { comparator: n } = e,
          { comparator: i } = t;
        return n - i;
      }
      function k() {
        (N = {}), (P = {}), (O = {}), (D = {}), null != R && x(R);
      }
      function x(e) {
        var t;
        let n = G(e);
        return (
          (N[e] = n),
          (P[e] = []),
          !(function (e) {
            let { id: t } = e,
              n = (function (e) {
                if (e === I.FAVORITES)
                  return (function () {
                    let e = {},
                      t = c.default.getFavoriteChannels();
                    for (let n in t) {
                      let i = h.default.getChannel(n);
                      if (null == i) continue;
                      let r = t[n],
                        s = (0, d.createFavoritesChannelRecord)(t, r, i);
                      e[n] = { channel: s, comparator: s.position };
                    }
                    return e;
                  })();
                let t = {},
                  n = h.default.getMutableGuildChannelsForGuild(e);
                for (let e in n)
                  t[e] = { channel: n[e], comparator: n[e].position };
                return t;
              })(t);
            r.forEach(n, n => {
              var i;
              let r = n.channel;
              if (
                ((e.count += 1),
                f.GUILD_NON_CATEGORY_CHANNEL_TYPES.has(r.type) &&
                  !m.default.can(I.Permissions.VIEW_CHANNEL, r) &&
                  !l.default.isChannelGated(r.guild_id, r.id) &&
                  r.id !== y)
              )
                return;
              let s =
                ((i = r.type),
                (0, f.isGuildSelectableChannelType)(i)
                  ? v
                  : (0, f.isGuildVocalChannelType)(i)
                    ? A
                    : i);
              r.type === I.ChannelTypes.GUILD_DIRECTORY &&
                (null == P[t] && (P[t] = []), P[t].push(n)),
                null != e[s] && e[s].push(n);
            });
          })(n),
          (t = n)[v].sort(w),
          t[A].sort(w),
          t[I.ChannelTypes.GUILD_CATEGORY].sort(w),
          (function (e) {
            let t = (O[e.id] = {}),
              n = {};
            e[v].forEach(e => {
              let { channel: i } = e,
                r = (0, u.computeChannelName)(i, g.default, T.default),
                s = Object.prototype.hasOwnProperty.call(n, r) ? n[r] : null;
              null == s ? (n[r] = 1) : ((n[r] = s + 1), (r += "~".concat(s))),
                (t[i.id] = { id: i.id, name: r });
            });
          })(n),
          (function (e) {
            let t = g.default.getCurrentUser();
            (function (e, t) {
              let n = S.default.getGuild(t);
              if (null != n && H(e, n)) return !0;
              let i = N[t];
              null == i && (i = x(t));
              let { [v]: r, [A]: s } = i;
              for (let { channel: t } of r) if (H(e, t)) return !0;
              for (let { channel: t } of s) if (H(e, t)) return !0;
              return !1;
            })(t, e)
              ? (D[e] = !0)
              : delete D[e];
          })(e),
          n
        );
      }
      function F(e) {
        let {
          guild: { id: t },
        } = e;
        if (null == t) return !1;
        (N[t] = void 0), R === t && x(t);
      }
      function V(e) {
        let {
          channel: { guild_id: t },
        } = e;
        if (null == t) return !1;
        (N[t] = void 0), t === R && x(t);
      }
      function B(e) {
        let { guildId: t } = e;
        (N[t] = void 0), t === R && x(t);
      }
      function H(e, t) {
        return s.default.hasAny(
          E.default.computePermissions({
            user: e,
            context: t,
            checkElevated: !1,
          }),
          I.ElevatedPermissions
        );
      }
      function j(e, t) {
        var n;
        y = t;
        let i =
          null !== (n = null == e ? void 0 : e.getGuildId()) && void 0 !== n
            ? n
            : null;
        if (null == i) return !1;
        (N[i] = void 0), i === R && x(i);
      }
      function Y() {
        x(I.FAVORITES);
      }
      class W extends a.default.Store {
        initialize() {
          this.waitFor(
            S.default,
            _.default,
            h.default,
            m.default,
            p.default,
            l.default,
            c.default
          ),
            this.syncWith([c.default], Y);
        }
        getAllGuilds() {
          return N;
        }
        getChannels(e) {
          var t;
          let n;
          return null != e ? (null == (n = N[(t = e)]) && (n = x(t)), n) : b;
        }
        getFirstChannelOfType(e, t, n) {
          let i = this.getChannels(e)[n],
            r = i.find(t);
          return null != r ? r.channel : null;
        }
        getFirstChannel(e, t) {
          var n;
          let i =
            arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          return null !== (n = this.getFirstChannelOfType(e, t, v)) &&
            void 0 !== n
            ? n
            : i
              ? this.getFirstChannelOfType(e, t, A)
              : null;
        }
        getDefaultChannel(e) {
          let t =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : I.Permissions.VIEW_CHANNEL;
          return this.getFirstChannel(e, e => m.default.can(n, e.channel), t);
        }
        getSFWDefaultChannel(e) {
          let t =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            n =
              arguments.length > 2 && void 0 !== arguments[2]
                ? arguments[2]
                : I.Permissions.VIEW_CHANNEL;
          return this.getFirstChannel(
            e,
            e => m.default.can(n, e.channel) && !e.channel.nsfw,
            t
          );
        }
        getSelectableChannelIds(e) {
          return this.getChannels(e)[v].map(e => {
            let { channel: t } = e;
            return t.id;
          });
        }
        getSelectableChannels(e) {
          return this.getChannels(e)[v];
        }
        getVocalChannelIds(e) {
          return this.getChannels(e)[A].map(e => {
            let { channel: t } = e;
            return t.id;
          });
        }
        getDirectoryChannelIds(e) {
          var t, n;
          return null !==
            (n =
              null === (t = P[e]) || void 0 === t
                ? void 0
                : t.map(e => {
                    let { channel: t } = e;
                    return t.id;
                  })) && void 0 !== n
            ? n
            : M;
        }
        hasSelectableChannel(e, t) {
          return this.getSelectableChannelIds(e).includes(t);
        }
        hasElevatedPermissions(e) {
          return D[e] || !1;
        }
        hasChannels(e) {
          return this.getChannels(e).count > 0;
        }
        hasCategories(e) {
          return this.getChannels(e)[I.ChannelTypes.GUILD_CATEGORY].length > 1;
        }
        getTextChannelNameDisambiguations(e) {
          var t;
          return null != e && null !== (t = O[e]) && void 0 !== t ? t : U;
        }
      }
      W.displayName = "GuildChannelStore";
      var K = new W(o.default, {
        BACKGROUND_SYNC: k,
        CHANNEL_SELECT: function (e) {
          let { guildId: t } = e;
          if (((R = null != t ? t : null), null == t || null != N[t]))
            return !1;
          x(t);
        },
        CONNECTION_OPEN: k,
        OVERLAY_INITIALIZE: k,
        CACHE_LOADED_LAZY: k,
        GUILD_CREATE: F,
        GUILD_UPDATE: F,
        GUILD_DELETE: function (e) {
          let {
            guild: { id: t },
          } = e;
          return delete N[t], delete O[t], delete D[t], delete P[t], !0;
        },
        GUILD_MEMBER_UPDATE: function (e) {
          let { guildId: t, user: n } = e;
          if (p.default.getId() !== n.id) return !1;
          (N[t] = void 0), t === R && x(t);
        },
        CHANNEL_CREATE: V,
        CHANNEL_DELETE: V,
        CHANNEL_UPDATES: function (e) {
          let { channels: t } = e,
            n = !1;
          for (let e of t) {
            let { guild_id: t } = e;
            null != t && ((N[t] = void 0), (n = !0), R === t && x(t));
          }
          return n;
        },
        GUILD_ROLE_CREATE: B,
        GUILD_ROLE_UPDATE: B,
        GUILD_ROLE_DELETE: B,
        IMPERSONATE_UPDATE: B,
        IMPERSONATE_STOP: B,
        VOICE_CHANNEL_SELECT: function (e) {
          let { channelId: t } = e;
          return null == t && null != y
            ? j(h.default.getChannel(y), null)
            : j(h.default.getChannel(t), t);
        },
        VOICE_CHANNEL_STATUS_UPDATE: function (e) {
          let t = h.default.getBasicChannel(e.id);
          null != t && null != t.guild_id && x(t.guild_id);
        },
        VOICE_STATE_UPDATES: function (e) {
          let { voiceStates: t } = e;
          return t.reduce((e, t) => {
            let { channelId: n, sessionId: i } = t;
            return p.default.getSessionId() !== i
              ? e
              : j(h.default.getChannel(n), n) || e;
          }, !1);
        },
      });
    },
    926787: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          EMPTY_DISCOVERABLE_GUILDS_SECTION: function () {
            return _;
          },
          default: function () {
            return y;
          },
        }),
        n("222007"),
        n("424973");
      var i,
        r,
        s = n("627445"),
        a = n.n(s),
        o = n("917351"),
        l = n.n(o),
        u = n("446674");
      n("233736");
      var c = n("913144"),
        d = n("197231"),
        f = n("271938"),
        E = n("251013"),
        p = n("49111"),
        h = n("447621");
      ((r = i || (i = {})).UNSET = "unset"),
        (r.FETCHING = "fetching"),
        (r.FAILED = "failed"),
        (r.SUCCEEDED = "succeeded");
      let _ = {
          guilds: [],
          total: 0,
          offset: 0,
          limit: 0,
          loading: !1,
          isFirstLoad: !0,
        },
        S = {
          [p.GuildDiscoverySections.FEATURED]: { ..._ },
          [p.GuildDiscoverySections.GAMES_YOU_PLAY]: { ..._ },
          [p.GuildDiscoverySections.MISC]: { ..._ },
          [p.GuildDiscoverySections.SEARCH]: {},
          [h.DISCOVERY_ALL_CATEGORIES_ID]: { ..._ },
        },
        m = "",
        T = !1,
        g = "unset",
        I = null,
        C = h.DISCOVERY_ALL_CATEGORIES_ID,
        v = h.DISCOVERY_ALL_CATEGORIES_ID,
        A = null,
        R = [],
        N = (0, d.makeAnalyticsID)();
      function O(e) {
        return {
          id: e.id,
          name: e.name,
          description: e.description,
          splash: e.splash,
          banner: e.banner,
          icon: e.icon,
          features: new Set(e.features),
          presenceCount: e.approximate_presence_count,
          memberCount: e.approximate_member_count,
          premiumSubscriptionCount: e.premium_subscription_count,
          preferredLocale: e.preferred_locale,
          discoverySplash: e.discovery_splash,
          emojis: e.emojis,
          emojiCount: e.emoji_count,
          keywords: e.keywords,
        };
      }
      class D extends u.default.Store {
        initialize() {
          this.waitFor(f.default);
        }
        isFetching() {
          return T || null == I || null == E.default.lastFetched;
        }
        isFetchingSearch() {
          return "fetching" === g;
        }
        hasSearchError() {
          return "failed" === g;
        }
        getDiscoverableGuilds() {
          return S;
        }
        getCurrentCategoryId() {
          return C;
        }
        getCurrentHomepageCategoryId() {
          return v;
        }
        getSearchIndex() {
          return A;
        }
        getMostRecentQuery() {
          return m;
        }
        getTopCategoryCounts(e) {
          var t;
          return null === (t = S[p.GuildDiscoverySections.SEARCH][e]) ||
            void 0 === t
            ? void 0
            : t.resultCounts;
        }
        getSeenGuildIds() {
          return R;
        }
        getLoadId() {
          return N;
        }
      }
      D.displayName = "GuildDiscoveryStore";
      var y = new D(c.default, {
        GUILD_DISCOVERY_SEARCH_INIT: function (e) {
          let { index: t } = e;
          A = t;
        },
        GUILD_DISCOVERY_FETCH_START: function (e) {
          let { section: t } = e;
          (T = !0), (S = { ...S, [t]: { ...S[t], loading: !0 } });
        },
        GUILD_DISCOVERY_FETCH_SUCCESS: function (e) {
          let { guilds: t, section: n, total: i, offset: r, limit: s } = e;
          (T = !1), (I = Date.now()), (N = (0, d.makeAnalyticsID)());
          let a = l.map(t, O);
          S = {
            ...S,
            [n]: {
              guilds: a,
              offset: r,
              limit: s,
              total: i,
              loading: !1,
              isFirstLoad: !1,
            },
          };
        },
        GUILD_DISCOVERY_FETCH_FAILURE: function (e) {
          let { section: t } = e;
          (T = !1), (S = { ...S, [t]: { ..._, loading: !1 } });
        },
        GUILD_DISCOVERY_POPULAR_FETCH_START: function (e) {
          let { categoryId: t } = e;
          (T = !0), (S = { ...S, [t]: { ..._, ...S[t], loading: !0 } });
        },
        GUILD_DISCOVERY_POPULAR_FETCH_SUCCESS: function (e) {
          let { categoryId: t, guilds: n } = e;
          (T = !1), (I = Date.now());
          let i = l.map(n, O);
          S = { ...S, [t]: { ..._, guilds: i, loading: !1, isFirstLoad: !1 } };
        },
        GUILD_DISCOVERY_POPULAR_FETCH_FAILURE: function (e) {
          let { categoryId: t } = e;
          (T = !1), (S = { ...S, [t]: { ..._, loading: !1 } });
        },
        GUILD_DISCOVERY_SEARCH_FETCH_START: function (e) {
          var t;
          let { section: n, query: i, categoryId: r } = e;
          a("search" === n, "This action only supports search it seems"),
            (g = "fetching"),
            (S = {
              ...S,
              [n]: {
                ...S[n],
                [i]: {
                  ...S[n][i],
                  [r]: {
                    ...(null === (t = S[n][i]) || void 0 === t ? void 0 : t[r]),
                    loading: !0,
                  },
                },
              },
            }),
            (m = i);
        },
        GUILD_DISCOVERY_SEARCH_FETCH_SUCCESS: function (e) {
          var t;
          let {
            section: n,
            guilds: i,
            total: r,
            offset: s,
            limit: o,
            query: l,
            categoryId: u,
          } = e;
          a("search" === n, "This action only supports search it seems");
          let c = i.map(O);
          (S = {
            ...S,
            [n]: {
              ...S[n],
              [l]: {
                ...S[n][l],
                [u]: {
                  ...(null === (t = S[n][l]) || void 0 === t ? void 0 : t[u]),
                  guilds: c,
                  total: r,
                  offset: s,
                  limit: o,
                  loading: !1,
                },
              },
            },
          }),
            (m = l),
            (g = "succeeded");
        },
        GUILD_DISCOVERY_SEARCH_FETCH_FAILURE: function (e) {
          var t;
          let { section: n, query: i, categoryId: r } = e;
          a("search" === n, "This action only supports search it seems"),
            (g = "failed"),
            (S = {
              ...S,
              [n]: {
                ...S[n],
                [i]: {
                  ...S[n][i],
                  [r]: {
                    ...(null === (t = S[n][i]) || void 0 === t ? void 0 : t[r]),
                    loading: !1,
                  },
                },
              },
            });
        },
        GUILD_DISCOVERY_SELECT_CATEGORY: function (e) {
          let { categoryId: t, isHomepage: n } = e;
          (C = t), n && (v = t);
        },
        GUILD_DISCOVERY_CLEAR_SEARCH: function () {
          m = "";
        },
        GUILD_DISCOVERY_SEARCH_UPDATE_COUNTS: function (e) {
          let { nbHits: t, facets: n, query: i } = e,
            r = [];
          if (null != n) {
            var s;
            let e = null !== (s = n["categories.id"]) && void 0 !== s ? s : {};
            delete e[h.DEFAULT_DISCOVERY_CATEGORY_ID],
              (r = Object.entries(e)
                .map(e => {
                  let [t, n] = e;
                  return [parseInt(t, 10), n];
                })
                .sort((e, t) => t[1] - e[1])
                .slice(0, 7));
          }
          S = {
            ...S,
            [p.GuildDiscoverySections.SEARCH]: {
              ...S[p.GuildDiscoverySections.SEARCH],
              [i]: {
                ...S[p.GuildDiscoverySections.SEARCH][i],
                resultCounts: [
                  [
                    h.DISCOVERY_ALL_CATEGORIES_ID,
                    Math.min(h.MAX_ALGOLIA_PAGINATOR_RESULTS, t),
                  ],
                  ...r,
                ],
              },
            },
          };
        },
        GUILD_DISCOVERY_SEARCH_COUNTS_FAIL: function (e) {
          let { query: t } = e;
          S = {
            ...S,
            [p.GuildDiscoverySections.SEARCH]: {
              ...S[p.GuildDiscoverySections.SEARCH],
              [t]: {
                ...S[p.GuildDiscoverySections.SEARCH][t],
                resultCounts: null,
              },
            },
          };
        },
        GUILD_DISCOVERY_GUILD_SEEN: function (e) {
          let { guildId: t } = e;
          !R.includes(t) && R.push(t);
        },
        GUILD_DISCOVERY_CLEAR_SEEN_GUILDS: function () {
          R = [];
        },
      });
    },
    525065: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return u;
          },
        });
      var i = n("446674"),
        r = n("913144");
      let s = {},
        a = {};
      function o(e) {
        let { invite: t } = e,
          { guild: n, approximate_presence_count: i } = t;
        if ((null == n ? void 0 : n.id) == null || null == i) return !1;
        a[n.id] = i;
      }
      class l extends i.default.Store {
        getMemberCounts() {
          return s;
        }
        getMemberCount(e) {
          return null != e ? s[e] : null;
        }
        getOnlineCount(e) {
          return null != e ? a[e] : null;
        }
      }
      l.displayName = "GuildMemberCountStore";
      var u = new l(r.default, {
        CONNECTION_OPEN: function (e) {
          let { guilds: t } = e;
          (s = {}),
            t.forEach(e => {
              s[e.id] = e.member_count;
            });
        },
        OVERLAY_INITIALIZE: function (e) {
          s = { ...e.guildMemberCounts };
        },
        GUILD_CREATE: function (e) {
          let { guild: t } = e;
          s[t.id] = t.member_count;
        },
        GUILD_DELETE: function (e) {
          let { guild: t } = e;
          if (null == s[t.id] && null == a[t.id]) return !1;
          delete s[t.id], delete a[t.id];
        },
        GUILD_MEMBER_LIST_UPDATE: function (e) {
          let { guildId: t, memberCount: n, onlineCount: i } = e,
            r = !1;
          return (
            s[t] !== n && ((s[t] = n), (r = !0)),
            a[t] !== i && ((a[t] = i), (r = !0)),
            r
          );
        },
        INVITE_ACCEPT_SUCCESS: o,
        INVITE_RESOLVE_SUCCESS: o,
        ONLINE_GUILD_MEMBER_COUNT_UPDATE: function (e) {
          let { guildId: t, count: n } = e;
          if (null == t || null == n) return !1;
          a[t] = n;
        },
      });
    },
    26989: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getUserIdFromCommunicationDisabledUserKey: function () {
            return G;
          },
          getGuildIdFromCommunicationDisabledUserKey: function () {
            return w;
          },
          default: function () {
            return q;
          },
        }),
        n("222007"),
        n("702976"),
        n("424973");
      var i,
        r,
        s = n("917351"),
        a = n.n(s),
        o = n("509043"),
        l = n("446674"),
        u = n("913144"),
        c = n("605250"),
        d = n("509"),
        f = n("564568"),
        E = n("38654"),
        p = n("568734"),
        h = n("449008"),
        _ = n("271938"),
        S = n("42203"),
        m = n("305961"),
        T = n("657944");
      let g = new c.default("GuildMemberStore"),
        I = {},
        C = {},
        v = {},
        A = !1,
        R = 0,
        N = 0,
        O = {},
        D = {},
        y = { added: [], removed: [] };
      function P(e, t) {
        if (
          null == t.communicationDisabledUntil ||
          !(0, d.isMemberCommunicationDisabled)(t)
        )
          return L(e, t.userId);
        let n = U(e, t.userId),
          i = v[n];
        i !== t.communicationDisabledUntil &&
          (0, d.isMemberCommunicationDisabled)(t) &&
          ((v[n] = t.communicationDisabledUntil), b(n));
      }
      function L(e, t) {
        if (null != t) {
          let n = U(e, t);
          null != v[n] && b(n), M(U(e, t));
        } else
          for (let t in v) {
            let n = w(t);
            n === e && (b(t), M(t));
          }
      }
      function b(e) {
        (R += 1), (O[e] = R);
      }
      function M(e) {
        G(e) === _.default.getId() &&
          (0, f.clearCommunicationDisabledNotice)(w(e)),
          delete v[e];
      }
      function U(e, t) {
        let n = [];
        return (n[0] = e), (n[1] = t), n.join("-");
      }
      function G(e) {
        return e.split("-")[1];
      }
      function w(e) {
        return e.split("-")[0];
      }
      function k(e, t) {
        let n, i, r, s, a;
        if (0 === t.length)
          return {
            colorString: void 0,
            colorRoleId: void 0,
            hoistRoleId: void 0,
            iconRoleId: void 0,
            highestRoleId: void 0,
          };
        for (let n of t) {
          let t = e[n];
          if (null == t) continue;
          (null == a || t.position > a.position) && (a = t),
            t.color > 0 && (null == i || t.position > i.position) && (i = t),
            t.hoist && (null == r || t.position > r.position) && (r = t);
          let o = null != t.icon || null != t.unicodeEmoji;
          o && (null == s || t.position > s.position) && (s = t);
        }
        if (null != i) {
          var l;
          null == i.colorString &&
            i.color > 0 &&
            (i.colorString = (0, o.int2hex)(i.color)),
            (n = null !== (l = i.colorString) && void 0 !== l ? l : void 0);
        }
        return {
          colorString: n,
          colorRoleId: null == i ? void 0 : i.id,
          iconRoleId: null == s ? void 0 : s.id,
          hoistRoleId: null == r ? void 0 : r.id,
          highestRoleId: null == a ? void 0 : a.id,
        };
      }
      function x(e) {
        let {
            userId: t,
            nick: n,
            guildId: i,
            avatar: r,
            guildRoles: s,
            roles: a,
            premiumSince: o,
            isPending: l,
            joinedAt: u,
            communicationDisabledUntil: c,
            unusualDMActivityUntil: d,
            fullProfileLoadedTimestamp: f,
            flags: p,
          } = e,
          {
            colorString: h,
            colorRoleId: S,
            iconRoleId: m,
            hoistRoleId: T,
            highestRoleId: g,
          } = k(s, a),
          v = {
            userId: t,
            nick: n,
            guildId: i,
            avatar: r,
            roles: a,
            colorString: h,
            colorRoleId: S,
            iconRoleId: m,
            hoistRoleId: T,
            highestRoleId: g,
            premiumSince: o,
            isPending: l,
            joinedAt: u,
            communicationDisabledUntil: c,
            unusualDMActivityUntil: d,
            fullProfileLoadedTimestamp: f,
            flags: p,
          },
          A = I[i];
        if (null == A) return v;
        if (t === _.default.getId()) {
          if (E.default.isViewingRoles(i) || E.default.isFullServerPreview(i)) {
            let e = E.default.getViewingRoles(i);
            C[i] = {
              ...v,
              ...E.default.getMemberOptions(i),
              roles: null != e ? Object.keys(e) : [],
            };
          } else null != C[i] && delete C[i];
        }
        return v;
      }
      ((r = i || (i = {}))[(r.GUILD = 0)] = "GUILD"),
        (r[(r.USER = 1)] = "USER");
      function F(e) {
        e.guilds.forEach(e => {
          H(e);
        });
      }
      function V(e) {
        var t;
        let {
            guildId: n,
            user: i,
            nick: r,
            avatar: s,
            roles: a,
            premiumSince: o,
            isPending: l,
            joinedAt: u,
            communicationDisabledUntil: c,
            unusualDMActivityUntil: d,
            flags: f,
          } = e,
          E = I[n];
        if (null == E) return !1;
        let p = m.default.getGuild(n);
        if (null == p)
          return (
            g.warn(
              "Guild ".concat(n, " not found during GUILD_MEMBER_UPDATE.")
            ),
            !1
          );
        (E[i.id] = x({
          userId: i.id,
          nick: r,
          guildId: n,
          avatar: s,
          guildRoles: p.roles,
          roles: a,
          premiumSince: o,
          isPending: l,
          joinedAt: u,
          communicationDisabledUntil: c,
          unusualDMActivityUntil: d,
          fullProfileLoadedTimestamp:
            null === (t = E[i.id]) || void 0 === t
              ? void 0
              : t.fullProfileLoadedTimestamp,
          flags: f,
        })),
          P(n, E[i.id]);
      }
      function B(e, t) {
        let n = I[e];
        if (null == n) return !1;
        let i = m.default.getGuild(e);
        return null == i
          ? (g.warn(
              "Guild ".concat(e, " not found during GUILD_MEMBERS_CHUNK.")
            ),
            !1)
          : (t.forEach(t => {
              var r;
              let s = n[t.user.id];
              (n[t.user.id] = x({
                userId: t.user.id,
                nick: t.nick,
                guildId: e,
                avatar: t.avatar,
                guildRoles: i.roles,
                roles: t.roles,
                premiumSince: t.premium_since,
                isPending: t.pending,
                joinedAt: t.joined_at,
                communicationDisabledUntil: t.communication_disabled_until,
                flags: t.flags,
                fullProfileLoadedTimestamp:
                  null == s ? void 0 : s.fullProfileLoadedTimestamp,
                unusualDMActivityUntil:
                  null !== (r = t.unusual_dm_activity_until) && void 0 !== r
                    ? r
                    : null == s
                      ? void 0
                      : s.unusualDMActivityUntil,
              })),
                P(e, n[t.user.id]);
            }),
            N++,
            !0);
      }
      function H(e) {
        let t = e.id;
        !(t in I) && (I[e.id] = {});
        let n = m.default.getGuild(t);
        if (null == n) return !1;
        let i = I[t];
        for (let s of e.members) {
          var r;
          let a = s.user.id,
            o = i[a],
            l = x({
              userId: a,
              nick: s.nick,
              guildId: e.id,
              avatar: s.avatar,
              guildRoles: n.roles,
              roles: s.roles,
              premiumSince: s.premium_since,
              isPending: s.pending,
              joinedAt: s.joined_at,
              communicationDisabledUntil: s.communication_disabled_until,
              fullProfileLoadedTimestamp:
                null == o ? void 0 : o.fullProfileLoadedTimestamp,
              flags: s.flags,
              unusualDMActivityUntil:
                null !== (r = s.unusual_dm_activity_until) && void 0 !== r
                  ? r
                  : null == o
                    ? void 0
                    : o.unusualDMActivityUntil,
            });
          (i[a] = l), P(t, l);
        }
        return !0;
      }
      function j(e) {
        let t = I[e.guildId];
        if (null == t) return !1;
        let n = m.default.getGuild(e.guildId);
        if (null == n)
          return (
            g.warn(
              "Guild "
                .concat(e.guildId, " not found during ")
                .concat(e.type, ".")
            ),
            !1
          );
        for (let i of Object.keys(t)) {
          let r = t[i];
          ((null != r.roles && r.roles.length > 0) ||
            null != r.colorString ||
            null != r.hoistRoleId) &&
            ((t[i] = x({
              userId: i,
              nick: r.nick,
              guildId: e.guildId,
              avatar: r.avatar,
              guildRoles: n.roles,
              roles: r.roles,
              premiumSince: r.premiumSince,
              isPending: r.isPending,
              joinedAt: r.joinedAt,
              flags: r.flags,
              fullProfileLoadedTimestamp:
                null == r ? void 0 : r.fullProfileLoadedTimestamp,
            })),
            P(e.guildId, t[i]));
        }
      }
      function Y(e) {
        let { guildId: t } = e,
          n = I[t];
        if (null == n) return !1;
        let i = m.default.getGuild(t);
        if (null == i)
          return (
            g.warn("Guild ".concat(t, " not found during IMPERSONATE_UPDATE.")),
            !1
          );
        let r = _.default.getId(),
          s = n[r];
        n[r] = x({
          userId: r,
          nick: s.nick,
          guildId: t,
          avatar: s.avatar,
          guildRoles: i.roles,
          roles: s.roles,
          premiumSince: s.premiumSince,
          isPending: s.isPending,
          joinedAt: s.joinedAt,
          communicationDisabledUntil: s.communicationDisabledUntil,
          fullProfileLoadedTimestamp: s.fullProfileLoadedTimestamp,
          flags: s.flags,
        });
      }
      function W(e) {
        var t;
        let { message: n, guildId: i } = e;
        (null === (t = n.resolved) || void 0 === t ? void 0 : t.members) !=
          null &&
          null != i &&
          H({
            id: i,
            members: Object.entries(n.resolved.members)
              .map(e => {
                var t, i;
                let [r, s] = e,
                  a =
                    null === (i = n.resolved) || void 0 === i
                      ? void 0
                      : null === (t = i.users) || void 0 === t
                        ? void 0
                        : t[r];
                if (null != a) return { ...s, user: a };
              })
              .filter(e => null != e),
          });
      }
      function K(e) {
        let { messages: t } = e;
        t.forEach(e =>
          (function (e) {
            var t;
            if (
              (null === (t = e.resolved) || void 0 === t
                ? void 0
                : t.members) == null
            )
              return;
            let n = S.default.getChannel(e.channel_id);
            !(null == n || n.isPrivate()) &&
              H({
                id: n.guild_id,
                members: Object.entries(e.resolved.members)
                  .map(t => {
                    var n, i;
                    let [r, s] = t,
                      a =
                        null === (i = e.resolved) || void 0 === i
                          ? void 0
                          : null === (n = i.users) || void 0 === n
                            ? void 0
                            : n[r];
                    if (null != a) return { ...s, user: a };
                  })
                  .filter(e => null != e),
              });
          })(e)
        );
      }
      class z extends l.default.Store {
        initialize() {
          this.waitFor(m.default, _.default, E.default);
        }
        getMutableAllGuildsAndMembers() {
          return I;
        }
        memberOf(e) {
          return a(I)
            .toPairs()
            .filter(t => {
              let [n, i] = t;
              return null != i[e];
            })
            .map(e => {
              let [t] = e;
              return t;
            })
            .value();
        }
        getNicknameGuildsMapping(e) {
          let t = {};
          for (let i in I) {
            var n;
            let r = I[i],
              s = null === (n = r[e]) || void 0 === n ? void 0 : n.nick;
            null != s &&
              (!Object.prototype.hasOwnProperty.call(t, s) && (t[s] = []),
              t[s].push(i));
          }
          return t;
        }
        getNicknames(e) {
          return Object.keys(this.getNicknameGuildsMapping(e));
        }
        isMember(e, t) {
          if (null == e || null == t) return !1;
          let n = I[e];
          return null != n && null != n[t];
        }
        isGuestOrLurker(e, t) {
          var n;
          if (null == e || null == t) return !1;
          let i = I[e];
          return (
            null != i &&
            (null === (n = i[t]) || void 0 === n ? void 0 : n.joinedAt) == null
          );
        }
        isCurrentUserGuest(e) {
          if (null == e) return !1;
          let t = _.default.getId(),
            n = I[e];
          if (null == n || null == n[t]) return !1;
          let i = n[t].flags;
          return null != i && (0, p.hasFlag)(i, T.GuildMemberFlags.IS_GUEST);
        }
        getMemberIds(e) {
          if (null == e) return [];
          let t = I[e];
          return null == t ? [] : Object.keys(t);
        }
        getMembers(e) {
          if (null == e) return [];
          let t = I[e];
          return null == t ? [] : Object.values(t);
        }
        getTrueMember(e, t) {
          let n = I[e];
          return null != n ? n[t] : null;
        }
        getMember(e, t) {
          let n = this.getTrueMember(e, t);
          if (
            null != n &&
            t === _.default.getId() &&
            (E.default.isViewingRoles(e) || E.default.isFullServerPreview(e))
          ) {
            var i;
            return null !== (i = C[e]) && void 0 !== i ? i : n;
          }
          return n;
        }
        getSelfMember(e) {
          return this.getMember(e, _.default.getId());
        }
        getNick(e, t) {
          if (null == e || null == t) return null;
          let n = this.getMember(e, t);
          return null != n ? n.nick : null;
        }
        getCommunicationDisabledUserMap() {
          return v;
        }
        getCommunicationDisabledVersion() {
          return R;
        }
        getPendingRoleUpdates(e) {
          var t;
          return null !== (t = D[e]) && void 0 !== t ? t : y;
        }
        getMemberRoleWithPendingUpdates(e, t) {
          var n, i;
          let r =
              null !==
                (i =
                  null === (n = this.getMember(e, t)) || void 0 === n
                    ? void 0
                    : n.roles) && void 0 !== i
                ? i
                : [],
            s = D[e];
          return null == s ? r : a.difference(a.union(r, s.added), s.removed);
        }
        getMemberVersion() {
          return N;
        }
      }
      z.displayName = "GuildMemberStore";
      var q = new z(u.default, {
        CONNECTION_OPEN: function (e) {
          A ? (A = !1) : (I = {}), (v = {}), F(e);
        },
        CONNECTION_OPEN_SUPPLEMENTAL: function (e) {
          F(e);
        },
        OVERLAY_INITIALIZE: function (e) {
          let { guildMembers: t } = e;
          I = { ...t };
        },
        CACHE_LOADED: function (e) {
          let { guildMembers: t } = e;
          (A = !0), (I = { ...t });
        },
        GUILD_CREATE: function (e) {
          let { guild: t } = e;
          return H(t);
        },
        GUILD_DELETE: function (e) {
          let { guild: t } = e;
          delete I[t.id], L(t.id);
        },
        GUILD_MEMBER_ADD: V,
        GUILD_MEMBER_UPDATE: V,
        GUILD_MEMBER_UPDATE_LOCAL: function (e) {
          var t, n, i;
          let {
              guildId: r,
              roles: s,
              addedRoleIds: o,
              removedRoleIds: l,
              flags: u,
            } = e,
            c = _.default.getId(),
            d = I[r],
            f = null != d ? d[c] : null;
          if (null == f) return !1;
          let E = m.default.getGuild(r);
          if (null == E) return !1;
          let p = null !== (t = D[r]) && void 0 !== t ? t : {};
          (D[r] = {
            added: a.difference(
              a.union(null !== (n = p.added) && void 0 !== n ? n : [], o),
              null != l ? l : []
            ),
            removed: a.difference(
              a.union(null !== (i = p.removed) && void 0 !== i ? i : [], l),
              null != o ? o : []
            ),
          }),
            (d[c] = x({
              userId: c,
              guildId: r,
              nick: f.nick,
              avatar: f.avatar,
              guildRoles: E.roles,
              roles: null != s ? s : f.roles,
              premiumSince: f.premiumSince,
              isPending: f.isPending,
              joinedAt: f.joinedAt,
              flags: null != u ? u : f.flags,
              fullProfileLoadedTimestamp: f.fullProfileLoadedTimestamp,
            }));
        },
        GUILD_MEMBERS_CHUNK: function (e) {
          return B(e.guildId, e.members);
        },
        GUILD_MEMBER_REMOVE: function (e) {
          let { guildId: t, user: n } = e,
            i = I[t];
          if (null == i || null == i[n.id]) return !1;
          delete i[n.id], L(t, n.id), N++;
        },
        THREAD_MEMBER_LIST_UPDATE: function (e) {
          let { guildId: t, members: n } = e;
          return B(t, n.map(e => e.member).filter(h.isNotNullish));
        },
        THREAD_MEMBERS_UPDATE: function (e) {
          let { guildId: t, addedMembers: n } = e;
          return null != n && B(t, n.map(e => e.member).filter(h.isNotNullish));
        },
        LOAD_ARCHIVED_THREADS_SUCCESS: function (e) {
          let { guildId: t, owners: n } = e;
          return B(t, n);
        },
        LOAD_FORUM_POSTS: function (e) {
          let { guildId: t, threads: n } = e;
          return B(
            t,
            Object.values(n)
              .map(e => e.owner)
              .filter(h.isNotNullish)
          );
        },
        GUILD_ROLE_UPDATE: j,
        GUILD_ROLE_DELETE: j,
        GUILD_ROLE_MEMBER_REMOVE: function (e) {
          let { guildId: t, userId: n, roleId: i } = e,
            r = I[t];
          if (null == r) return !1;
          let s = m.default.getGuild(t);
          if (null == s)
            return (
              g.warn(
                "Guild ".concat(t, " not found during GUILD_MEMBER_UPDATE.")
              ),
              !1
            );
          let a = r[n];
          if (null == a || !a.roles.includes(i)) return !1;
          a.roles = a.roles.filter(e => e !== i);
          let o = k(s.roles, a.roles);
          return (r[n] = { ...a, ...o }), !0;
        },
        GUILD_ROLE_MEMBER_ADD: function (e) {
          let { guildId: t, userId: n, roleId: i } = e,
            r = I[t];
          if (null == r) return !1;
          let s = m.default.getGuild(t);
          if (null == s)
            return (
              g.warn(
                "Guild ".concat(t, " not found during GUILD_MEMBER_UPDATE.")
              ),
              !1
            );
          let a = r[n];
          if (null == a || a.roles.includes(i)) return !1;
          a.roles.push(i);
          let o = k(s.roles, a.roles);
          return (r[n] = { ...a, ...o }), !0;
        },
        GUILD_MEMBER_PROFILE_UPDATE: function (e) {
          let { guildMember: t, guildId: n } = e,
            i = I[n];
          if (null == i) return !1;
          let r = m.default.getGuild(n);
          if (null == r)
            return (
              g.warn(
                "Guild ".concat(n, " not found during GUILD_MEMBER_UPDATE.")
              ),
              !1
            );
          (i[t.user.id] = x({
            userId: t.user.id,
            nick: t.nick,
            guildId: n,
            avatar: t.avatar,
            guildRoles: r.roles,
            roles: t.roles,
            premiumSince: t.premium_since,
            isPending: t.pending,
            joinedAt: t.joined_at,
            communicationDisabledUntil: t.communication_disabled_until,
            unusualDMActivityUntil: t.unusual_dm_activity_until,
            flags: t.flags,
            fullProfileLoadedTimestamp: Date.now(),
          })),
            P(n, i[t.user.id]);
        },
        IMPERSONATE_UPDATE: Y,
        IMPERSONATE_STOP: Y,
        PASSIVE_UPDATE_V1: function (e) {
          return null != e.members && B(e.guildId, e.members);
        },
        CLEAR_PENDING_CHANNEL_AND_ROLE_UPDATES: function (e) {
          let { guildId: t } = e;
          if (null == t) return !1;
          delete D[t];
        },
        LOCAL_MESSAGES_LOADED: function (e) {
          var t, n;
          if (null == e.guildId || null == m.default.getGuild(e.guildId))
            return !1;
          (A = !0),
            (I[e.guildId] =
              null !== (t = I[e.guildId]) && void 0 !== t ? t : {});
          let i = !1;
          for (let t of ((A = !0),
          (I[e.guildId] = null !== (n = I[e.guildId]) && void 0 !== n ? n : {}),
          e.members))
            null == I[e.guildId][t.userId] &&
              ((i = !0), (I[e.guildId][t.userId] = t));
          return i;
        },
        MESSAGE_CREATE: W,
        MESSAGE_UPDATE: W,
        LOAD_MESSAGES_SUCCESS: K,
        LOAD_MESSAGES_AROUND_SUCCESS: K,
        LOAD_PINNED_MESSAGES_SUCCESS: K,
        LOAD_RECENT_MENTIONS_SUCCESS: K,
        SEARCH_FINISH: function (e) {
          let { messages: t } = e;
          t.forEach(e => K({ messages: e }));
        },
        MEMBER_SAFETY_GUILD_MEMBER_SEARCH_SUCCESS: function (e) {
          let { guildId: t, members: n } = e,
            i = n.map(e => {
              let { member: t } = e;
              return t;
            });
          return B(t, i);
        },
      });
    },
    778689: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return a;
          },
        }),
        n("222007");
      var i = n("446674"),
        r = n("913144");
      class s extends i.Store {
        allGuildIds() {
          return this.guildIds;
        }
        isMember(e) {
          return this.guildIds.has(e);
        }
        handleConnectionOpen(e) {
          this.guildIds = new Set([
            ...e.guilds.map(e => e.id),
            ...e.unavailableGuilds,
          ]);
        }
        handleCacheLoaded(e) {
          this.guildIds = new Set(e.guilds.map(e => e.id));
        }
        handleGuildCreate(e) {
          this.guildIds.add(e.guild.id);
        }
        handleGuildDelete(e) {
          !0 !== e.guild.unavailable && this.guildIds.delete(e.guild.id);
        }
        constructor() {
          super(
            r.default,
            {
              CACHE_LOADED_LAZY: e => this.handleCacheLoaded(e),
              CACHE_LOADED: e => this.handleCacheLoaded(e),
              CONNECTION_OPEN: e => this.handleConnectionOpen(e),
              GUILD_CREATE: e => this.handleGuildCreate(e),
              GUILD_DELETE: e => this.handleGuildDelete(e),
            },
            r.DispatchBand.Early
          ),
            (this.guildIds = new Set());
        }
      }
      var a = new s();
    },
    305961: function (e, t, n) {
      "use strict";
      let i;
      n.r(t),
        n.d(t, {
          default: function () {
            return I;
          },
        }),
        n("222007");
      var r = n("917351"),
        s = n.n(r),
        a = n("446674"),
        o = n("913144"),
        l = n("813006"),
        u = n("665618"),
        c = n("605136"),
        d = n("299039"),
        f = n("271938"),
        E = n("49111"),
        p = n("695838");
      let h = {},
        _ = !1,
        S = [];
      function m(e) {
        (h = {}),
          (i = 0),
          null != e.guilds &&
            s.forEach(e.guilds, e => {
              i++, (h[e.id] = u.fromSerializedGuildRecord(e));
            });
      }
      function T(e) {
        let { guildId: t, role: n } = e,
          i = h[t];
        null != i && (h = { ...h, [i.id]: i.upsertRole(c.fromServerRole(n)) });
      }
      class g extends a.default.Store {
        getGuild(e) {
          if (null != e)
            return e === E.FAVORITES ? p.FAVORITES_GUILD_RECORD : h[e];
        }
        getGuilds() {
          return h;
        }
        getGuildIds() {
          return d.default.keys(h);
        }
        getGuildCount() {
          return i;
        }
        isLoaded() {
          return _;
        }
        getGeoRestrictedGuilds() {
          return S;
        }
      }
      g.displayName = "GuildStore";
      var I = new g(o.default, {
        BACKGROUND_SYNC: function (e) {
          for (let t of e.guilds) {
            let e = h[t.id];
            if (null == e || "unavailable" === t.data_mode) return;
            h[t.id] = u.fromBackgroundSync(t, e);
          }
          i = Object.keys(h).length;
        },
        CONNECTION_OPEN: function (e) {
          (_ = !0),
            (h = {}),
            (i = 0),
            e.guilds.forEach(e => {
              i++, (h[e.id] = u.fromServer(e));
            }),
            (S = e.geoRestrictedGuilds);
        },
        OVERLAY_INITIALIZE: function (e) {
          var t;
          (h = {}),
            (i = 0),
            null === (t = e.guilds) ||
              void 0 === t ||
              t.forEach(e => {
                i++, (h[e.id] = new l.default(e));
              });
        },
        CACHE_LOADED: m,
        CACHE_LOADED_LAZY: m,
        GUILD_CREATE: function (e) {
          let t = u.fromServer(e.guild, h[e.guild.id]);
          null == h[t.id] && i++, (h = { ...h, [t.id]: t });
        },
        GUILD_UPDATE: function (e) {
          let t = u.fromServerUpdate(e.guild, h[e.guild.id]);
          null == h[t.id] && i++, (h = { ...h, [t.id]: t });
        },
        GUILD_DELETE: function (e) {
          let { guild: t } = e,
            n = S.findIndex(e => e.id === t.id);
          if (-1 !== n) {
            S.splice(n, 1), (S = [...S]);
            return;
          }
          if (null == h[t.id] || t.unavailable) return !1;
          (h = { ...h }), delete h[t.id], i--;
        },
        GUILD_ROLE_CREATE: T,
        GUILD_ROLE_UPDATE: T,
        GUILD_ROLE_DELETE: function (e) {
          let { guildId: t, roleId: n } = e,
            i = h[t];
          null != i && (h = { ...h, [t]: i.deleteRole(n) });
        },
        GUILD_MEMBER_ADD: function (e) {
          let { guildId: t, joinedAt: n, user: i } = e,
            r = f.default.getId(),
            s = h[t];
          if (r !== i.id || null == s) return !1;
          let a = "string" == typeof n ? new Date(n) : n;
          if (a === s.joinedAt || null == a) return !1;
          h = { ...h, [t]: s.updateJoinedAt(a) };
        },
        GUILD_SETTINGS_SUBMIT_SUCCESS: function () {
          return !0;
        },
        GUILD_GEO_RESTRICTED: function (e) {
          S = [
            ...S,
            {
              id: e.guildId,
              name: e.name,
              icon: e.icon,
              unavailable: !0,
              geo_restricted: !0,
            },
          ];
        },
      });
    },
    855867: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return l;
          },
        });
      var i = n("446674"),
        r = n("913144"),
        s = n("49111");
      let a = {};
      class o extends i.default.Store {
        getHookError(e) {
          return a[e];
        }
      }
      o.displayName = "HookErrorStore";
      var l = new o(r.default, {
        MEDIA_ENGINE_SET_GO_LIVE_SOURCE: function () {
          a = {};
        },
        MEDIA_ENGINE_SOUNDSHARE_TRANSMITTING: function () {
          delete a[s.MediaEngineHookTypes.SOUND];
        },
        MEDIA_ENGINE_SOUNDSHARE_FAILED: function (e) {
          let { errorMessage: t, errorCode: n } = e;
          a[s.MediaEngineHookTypes.SOUND] = { errorMessage: t, errorCode: n };
        },
      });
    },
    560733: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return l;
          },
        });
      var i = n("446674"),
        r = n("913144"),
        s = n("49111");
      let a = 0;
      class o extends i.default.Store {
        getId() {
          return a;
        }
      }
      o.displayName = "InstanceIdStore";
      var l = new o(r.default, {
        RPC_SERVER_READY: function (e) {
          let { port: t } = e;
          a = s.RPC_STARTING_PORT - t;
        },
      });
    },
    686470: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return y;
          },
        }),
        n("222007"),
        n("702976"),
        n("860677");
      var i = n("917351"),
        r = n.n(i),
        s = n("446674"),
        a = n("95410"),
        o = n("913144"),
        l = n("370999"),
        u = n("568734"),
        c = n("964889"),
        d = n("271938"),
        f = n("49111");
      let E = "LibraryApplicationStore";
      function p() {
        var e;
        return null !== (e = a.default.get(E)) && void 0 !== e ? e : {};
      }
      let h = !1,
        _ = {},
        S = {},
        m = new Set(),
        T = {},
        g = {},
        I = !1;
      function C() {
        a.default.set(E, { ...p(), activeLaunchOptionIds: g });
      }
      function v() {
        a.default.set(E, { ...p(), activeLibraryApplicationBranchIds: T });
      }
      function A(e) {
        for (let t of e) {
          let e = l.default.createFromServer(t),
            n = (0, c.getComboId)(e.id, e.branchId);
          _[n] = e;
        }
      }
      function R(e) {
        let { libraryApplication: t } = e,
          n = l.default.createFromServer(t),
          i = (0, c.getComboId)(n.id, n.branchId);
        (_[i] = n), m.delete(i);
      }
      function N(e, t) {
        var n;
        let i = (0, c.getComboId)(e, t);
        return null !== (n = _[i]) && void 0 !== n ? n : S[i];
      }
      function O() {
        return { ...S, ..._ };
      }
      class D extends s.default.Store {
        initialize() {
          this.waitFor(d.default);
          let e = a.default.get(E);
          null != e &&
            (null == e.activeLaunchOptionIds
              ? C()
              : (g = e.activeLaunchOptionIds),
            null == e.activeLibraryApplicationBranchIds
              ? v()
              : (T = e.activeLibraryApplicationBranchIds));
        }
        get libraryApplications() {
          return (function (e) {
            let t = O();
            return (
              Object.keys(t).forEach(n => {
                !e(t[n]) && delete t[n];
              }),
              t
            );
          })(e => !e.isHidden());
        }
        getAllLibraryApplications() {
          return O();
        }
        hasLibraryApplication() {
          return Object.keys(O()).length > 0;
        }
        hasApplication(e, t) {
          let n =
              arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            i = N(e, t);
          return (
            !(null == i || (!n && i.isHidden())) &&
            (0, c.isUserEntitledToLibraryApplication)(i)
          );
        }
        getLibraryApplication(e, t) {
          let n =
              arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            i = N(e, t);
          return n && null != i
            ? (0, c.isUserEntitledToLibraryApplication)(i)
              ? i
              : null
            : i;
        }
        getActiveLibraryApplication(e) {
          let t =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            n = T[e];
          if (null != n) {
            var i;
            let r = (0, c.getComboId)(e, n),
              s = null !== (i = _[r]) && void 0 !== i ? i : S[r];
            if (
              null != s &&
              (0, c.isUserEntitledToLibraryApplication)(s) &&
              (t || !s.isHidden())
            )
              return s;
          }
          let r = O();
          for (let n in r)
            if (r[n].id === e) {
              let e = r[n];
              if (
                (0, c.isUserEntitledToLibraryApplication)(e) &&
                (t || !e.isHidden())
              )
                return e;
            }
        }
        isUpdatingFlags(e, t) {
          return m.has((0, c.getComboId)(e, t));
        }
        getActiveLaunchOptionId(e, t) {
          return g[(0, c.getComboId)(e, t)];
        }
        get fetched() {
          return h;
        }
        get entitledBranchIds() {
          return r(O())
            .values()
            .filter(e => (0, c.isUserEntitledToLibraryApplication)(e))
            .map(e => e.branchId)
            .value();
        }
        get hasRemovedLibraryApplicationThisSession() {
          return I;
        }
        whenInitialized(e) {
          this.addConditionalChangeListener(() => {
            if (h) return setImmediate(e), !1;
          });
        }
      }
      D.displayName = "LibraryApplicationStore";
      var y = new D(o.default, {
        LOGOUT: function () {
          h = !1;
        },
        LIBRARY_FETCH_SUCCESS: function (e) {
          let { libraryApplications: t } = e;
          (_ = {}), A(t), (h = !0);
        },
        SKU_PURCHASE_SUCCESS: function (e) {
          let { libraryApplications: t } = e;
          A(t);
        },
        LIBRARY_APPLICATION_FLAGS_UPDATE_START: function (e) {
          let { applicationId: t, branchId: n, flags: i } = e,
            r = (0, c.getComboId)(t, n),
            s = N(t, n);
          null != s &&
            !s.isHidden() &&
            u.hasFlag(i, f.LibraryApplicationFlags.HIDDEN) &&
            (I = !0),
            m.add(r);
        },
        LIBRARY_APPLICATION_FLAGS_UPDATE_SUCCESS: R,
        LIBRARY_APPLICATION_UPDATE: R,
        LIBRARY_APPLICATION_ACTIVE_LAUNCH_OPTION_UPDATE: function (e) {
          let { applicationId: t, branchId: n, launchOptionId: i } = e;
          (g[(0, c.getComboId)(t, n)] = i), C();
        },
        LIBRARY_APPLICATION_ACTIVE_BRANCH_UPDATE: function (e) {
          let { applicationId: t, branchId: n } = e;
          if (T[t] === n) return !1;
          (T[t] = n), v();
        },
        LIBRARY_APPLICATIONS_TEST_MODE_ENABLED: function (e) {
          let { libraryApplications: t } = e;
          for (let e of t) {
            let t = (0, c.getComboId)(e.id, e.branchId);
            S[t] = e;
          }
        },
        DEVELOPER_TEST_MODE_RESET: function () {
          S = {};
        },
      });
    },
    42887: function (e, t, n) {
      "use strict";
      let i, r, s, a;
      n.r(t),
        n.d(t, {
          default: function () {
            return tI;
          },
        }),
        n("222007"),
        n("808653"),
        n("506083"),
        n("424973"),
        n("256955");
      var o,
        l,
        u,
        c,
        d = n("627445"),
        f = n.n(d),
        E = n("917351"),
        p = n.n(E),
        h = n("570277"),
        _ = n.n(h),
        S = n("446674"),
        m = n("773364"),
        T = n("95410"),
        g = n("862337"),
        I = n("913144"),
        C = n("49671"),
        v = n("6193"),
        A = n("965068"),
        R = n("386045"),
        N = n("18346"),
        O = n("605250"),
        D = n("808122"),
        y = n("733589"),
        P = n("933034"),
        L = n("746800"),
        b = n("584687"),
        M = n("705500"),
        U = n("238847"),
        G = n("981699"),
        w = n("352705"),
        k = n("140622"),
        x = n("16001"),
        F = n("631508"),
        V = n("368765"),
        B = n("403770"),
        H = n("940146"),
        j = n("353500"),
        Y = n("103979"),
        W = n("665862"),
        K = n("122530"),
        z = n("928609"),
        q = n("891760"),
        X = n("536692"),
        Q = n("374363"),
        Z = n("599110"),
        J = n("922932"),
        $ = n("718517"),
        ee = n("773336"),
        et = n("286235"),
        en = n("50885"),
        ei = n("13798"),
        er = n("271938"),
        es = n("366679"),
        ea = n("533222"),
        eo = n("42203"),
        el = n("760190"),
        eu = n("855867"),
        ec = n("945956"),
        ed = n("568307"),
        ef = n("123647"),
        eE = n("49111"),
        ep = n("706530"),
        eh = n("180524"),
        e_ = n("397336"),
        eS = n("353927"),
        em = n("782340");
      let eT = new O.default("MediaEngineStore");
      ((u = o || (o = {}))[(u.DETACHED = 0)] = "DETACHED"),
        (u[(u.WAITING = 1)] = "WAITING"),
        (u[(u.ATTACHED = 2)] = "ATTACHED"),
        (u[(u.STARTED = 3)] = "STARTED"),
        (u[(u.PLAYING = 4)] = "PLAYING"),
        (u[(u.SILENCE = 5)] = "SILENCE"),
        ((c = l || (l = {}))[(c.FAILED = -1)] = "FAILED"),
        (c[(c.OK = 0)] = "OK"),
        (c[(c.ACE_INSTALL_FAILED = 4)] = "ACE_INSTALL_FAILED"),
        (c[(c.ACE_NOT_AUTHORIZED = 5)] = "ACE_NOT_AUTHORIZED");
      let eg = "MediaEngineStore",
        eI = { left: 1, right: 1 };
      function eC() {
        let e = {
          mode: eE.InputModes.VOICE_ACTIVITY,
          modeOptions: {
            threshold: -60,
            autoThreshold: ee.isPlatformEmbedded || __OVERLAY__,
            vadUseKrisp: !0,
            vadLeading: 5,
            vadTrailing: 25,
            delay: 20,
            shortcut: [],
          },
          vadUseKrispSettingVersion: 0,
          ncUseKrispSettingVersion: 0,
          ncUseKrispjsSettingVersion: 0,
          av1EnabledSettingVersion: 0,
          mute: !1,
          deaf: !1,
          echoCancellation: !0,
          noiseSuppression: !1,
          automaticGainControl: !0,
          noiseCancellation: !0,
          experimentalEncoders: !1,
          hardwareH264: !0,
          silenceWarning: !0,
          attenuation: 0,
          attenuateWhileSpeakingSelf: !1,
          attenuateWhileSpeakingOthers: !0,
          localMutes: {},
          disabledLocalVideos: {},
          videoToggleStateMap: {},
          localVolumes: {},
          localPans: {},
          inputVolume: eS.DEFAULT_VOLUME,
          outputVolume: eS.DEFAULT_VOLUME,
          inputDeviceId: eS.DEFAULT_DEVICE_ID,
          outputDeviceId: eS.DEFAULT_DEVICE_ID,
          videoDeviceId: eS.DEFAULT_DEVICE_ID,
          qos: !1,
          qosMigrated: !1,
          videoHook: ev.supports(eS.Features.VIDEO_HOOK),
          experimentalSoundshare2: null,
          openH264: !0,
          av1Enabled: !0,
          h265Enabled: !0,
          vadThrehsoldMigrated: !1,
          aecDumpEnabled: !1,
        };
        return e;
      }
      let ev = (0, m.initializeMediaEngine)((0, m.determineMediaEngine)()),
        eA = {},
        eR = new Set([eS.MediaEngineContextTypes.DEFAULT]),
        eN = ev.supports(eS.Features.AUTO_ENABLE),
        eO = !1,
        eD = eS.MediaEngineContextTypes.STREAM,
        ey = {
          [eS.DEFAULT_DEVICE_ID]: ta(em.default.Messages.NO_INPUT_DEVICES),
        },
        eP = {
          [eS.DEFAULT_DEVICE_ID]: ta(em.default.Messages.NO_OUTPUT_DEVICES),
        },
        eL = {
          [eS.DEFAULT_DEVICE_ID]: ta(em.default.Messages.NO_VIDEO_DEVICES),
        },
        eb = !1,
        eM = !1,
        eU = !1,
        eG = !1,
        ew = !1,
        ek = eS.DISABLED_DEVICE_ID,
        ex = !1,
        eF = !1,
        eV = !1,
        eB = null,
        eH = !1,
        ej = !1,
        eY = !1,
        eW = !1,
        eK = !1,
        ez = null,
        eq = !1,
        eX = eE.SoundshareEnableState.NOT_ENABLED,
        eQ = !1,
        eZ = !1;
      z.default.hasPermission(eh.NativePermissionTypes.AUDIO, {
        showAuthorizationError: !1,
      }),
        z.default.hasPermission(eh.NativePermissionTypes.CAMERA, {
          showAuthorizationError: !1,
        });
      let eJ = new Set(),
        e$ = !1,
        e0 = !1,
        e1 = {},
        e2 = {},
        e4 = 5 * $.default.Millis.SECOND;
      function e3() {
        let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : eS.MediaEngineContextTypes.DEFAULT,
          t = eA[e];
        return null == t && ((t = eC()), (eA[e] = t)), t;
      }
      function e6(e) {
        let t = e3(e.context);
        e.setInputMode(t.mode, {
          vadThreshold: t.modeOptions.threshold,
          vadAutoThreshold: t.modeOptions.autoThreshold,
          vadUseKrisp:
            t.modeOptions.vadUseKrisp &&
            (function () {
              return eK || !1;
            })(),
          vadLeading: t.modeOptions.vadLeading,
          vadTrailing: t.modeOptions.vadTrailing,
          pttReleaseDelay: t.modeOptions.delay,
        });
      }
      function e5(e) {
        let t =
          arguments.length > 1 && void 0 !== arguments[1]
            ? arguments[1]
            : eS.DEFAULT_VOLUME;
        return p.clamp(e, 0, t);
      }
      function e7(e) {
        let t = e3(e.context),
          n = !eN || t.mute || t.deaf;
        e.context === eS.MediaEngineContextTypes.DEFAULT &&
          (n =
            n ||
            eb ||
            eM ||
            eU ||
            !z.default.didHavePermission(eh.NativePermissionTypes.AUDIO)),
          e.setSelfMute(n),
          e.setSelfDeaf(t.deaf);
      }
      function e8() {
        var e, t, n;
        let r =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ew,
          a =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : s,
          o = s;
        if (
          ((null == o ? void 0 : o.desktopSource) != null &&
            o.desktopSource.id !==
              (null == a
                ? void 0
                : null === (e = a.desktopSource) || void 0 === e
                  ? void 0
                  : e.id) &&
            (null != o.desktopSource.soundshareId &&
              (0, ee.isWindows)() &&
              v.cancelAttachToProcess(o.desktopSource.soundshareId),
            ev.setGoLiveSource(null, eD)),
          (null == o ? void 0 : o.cameraSource) != null &&
            (o.cameraSource.videoDeviceGuid !==
              (null == a
                ? void 0
                : null === (t = a.cameraSource) || void 0 === t
                  ? void 0
                  : t.videoDeviceGuid) ||
              o.cameraSource.audioDeviceGuid !==
                (null == a
                  ? void 0
                  : null === (n = a.cameraSource) || void 0 === n
                    ? void 0
                    : n.audioDeviceGuid)) &&
            ev.setGoLiveSource(null, eD),
          (ew || r) &&
            ((ek = (ew = r)
              ? tl(eL, e3().videoDeviceId)
              : eS.DISABLED_DEVICE_ID),
            ev.setVideoInputDevice(ek)),
          (s = a),
          null != a)
        ) {
          let e = {
            resolution: a.quality.resolution,
            frameRate: a.quality.frameRate,
          };
          if (null != a.desktopSource) {
            let { useQuartzCapturer: t } = F.default.getCurrentConfig(
                { location: "f627ab_1" },
                { autoTrackExposure: !1 }
              ),
              { hdrCaptureMode: n } = G.default.getCurrentConfig(
                { location: "f627ab_2" },
                { autoTrackExposure: !1 }
              ),
              r = e3().videoHook,
              s = ev.supports(eS.Features.CAPTURE_TIMEOUT_EXPERIMENTS),
              { videoHookStaleFrameTimeoutMs: o } = H.default.getConfig(
                s && r,
                "e225cfdf5_vh1",
                !0
              ),
              { graphicsCaptureStaleFrameTimeoutMs: l } = W.default.getConfig(
                s && tt(),
                "e225cfdf5_wgc2",
                !0
              );
            ev.setGoLiveSource(
              {
                desktopDescription: {
                  id: a.desktopSource.id,
                  soundshareId: a.desktopSource.soundshareId,
                  useVideoHook: r,
                  useGraphicsCapture: tt(),
                  useLoopback: i.getExperimentalSoundshare(),
                  useQuartzCapturer: t,
                  allowScreenCaptureKit: tn(!0),
                  videoHookStaleFrameTimeoutMs: o,
                  graphicsCaptureStaleFrameTimeoutMs: l,
                  hdrCaptureMode: n,
                },
                quality: e,
              },
              eD
            );
          }
          null != a.cameraSource &&
            ev.setGoLiveSource(
              {
                cameraDescription: {
                  videoDeviceGuid: a.cameraSource.videoDeviceGuid,
                  audioDeviceGuid: a.cameraSource.audioDeviceGuid,
                },
                quality: e,
              },
              eD
            );
        }
      }
      function e9(e, t, n, i) {
        var r;
        let s =
          null !== (r = null == e ? void 0 : e.soundshareSession) &&
          void 0 !== r
            ? r
            : "";
        null == e2[s] && (e2[s] = new Set());
        let a = null != t && !e2[s].has(t);
        a && e2[s].add(t),
          (null == t || a) &&
            Z.default.track(eE.AnalyticEvents.SOUNDSHARE_FAILED, {
              soundshare_failure_code: t,
              soundshare_failure_reason: n,
              soundshare_failure_will_retry: i,
              ...(0, P.default)(e),
            });
      }
      function te(e) {
        let t = e3(),
          n = t.inputDeviceId;
        if (
          (e.setEchoCancellation(
            ea.default.hasEchoCancellation(n) || t.echoCancellation
          ),
          e.setNoiseSuppression(
            ea.default.hasNoiseSuppression(n) || t.noiseSuppression
          ),
          e.setAutomaticGainControl(
            ea.default.hasAutomaticGainControl(n) || t.automaticGainControl
          ),
          e.setNoiseCancellation(t.noiseCancellation),
          (0, ee.isWeb)())
        ) {
          let n = t.noiseCancellation ? -150 : -100;
          e.setSilenceThreshold(n);
        }
      }
      function tt() {
        return (
          (0, ee.isWindows)() &&
          _.satisfies(
            null === C.default || void 0 === C.default
              ? void 0
              : C.default.os.release,
            ep.WINDOWS_GRAPHICS_CAPTURE_VERSION
          )
        );
      }
      function tn(e) {
        return (
          !!(
            (0, ee.isMac)() &&
            ev.supports(eS.Features.SCREEN_CAPTURE_KIT) &&
            _.satisfies(
              null === C.default || void 0 === C.default
                ? void 0
                : C.default.os.release,
              ep.DARWIN_SCKIT_VERSION
            )
          ) &&
          V.default.getCurrentConfig(
            { location: "screenCaptureKitEnabled" },
            { autoTrackExposure: e }
          ).allowScreenCaptureKit
        );
      }
      let ti = new (class {
        start() {
          !this.started &&
            ((this.started = !0),
            ev.on(m.MediaEngineEvent.Silence, this.handleSilence));
        }
        stop() {
          this.started &&
            ((this.started = !1),
            null != this.stateChangeTimeout &&
              (clearTimeout(this.stateChangeTimeout),
              (this.stateChangeTimeout = null)),
            ev.removeListener(m.MediaEngineEvent.Silence, this.handleSilence),
            I.default.dispatch({
              type: "AUDIO_INPUT_DETECTED",
              inputDetected: null,
            }));
        }
        update() {
          let e = e3();
          !eH &&
          ec.default.getState() === eE.RTCConnectionStates.RTC_CONNECTED &&
          e.mode === eE.InputModes.VOICE_ACTIVITY &&
          e.silenceWarning
            ? this.start()
            : this.stop();
        }
        reset() {
          this.stop(), this.update();
        }
        constructor() {
          (this.noVoiceTimeout = 5e3),
            (this.voiceTimeout = 1500),
            (this.started = !1),
            (this.handleSilence = e => {
              let t = !e;
              null != this.stateChangeTimeout &&
                clearTimeout(this.stateChangeTimeout),
                (this.stateChangeTimeout = setTimeout(
                  () => {
                    (this.stateChangeTimeout = null),
                      this.started &&
                        (I.default.dispatch({
                          type: "AUDIO_INPUT_DETECTED",
                          inputDetected: t,
                        }),
                        e && (ej = !0));
                  },
                  t ? this.voiceTimeout : this.noVoiceTimeout
                ));
            });
        }
      })();
      function tr(e) {
        let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : eS.MediaEngineContextTypes.DEFAULT,
          n =
            !(arguments.length > 2) || void 0 === arguments[2] || arguments[2],
          i = e3(t);
        return (
          Object.assign(i, e), !__OVERLAY__ && n && T.default.set(eg, eA), i
        );
      }
      function ts() {
        !eN &&
          ev
            .enable()
            .then(() =>
              I.default.dispatch({
                type: "MEDIA_ENGINE_SET_AUDIO_ENABLED",
                enabled: !0,
                unmute: !1,
              })
            );
      }
      function ta(e) {
        return { id: eS.DEFAULT_DEVICE_ID, index: 0, name: e, disabled: !0 };
      }
      function to(e, t) {
        if (0 === e.length) {
          let e = ta(t);
          return { [e.id]: e };
        }
        return p(e)
          .map(e => ({ id: e.id, index: e.index, name: e.name, disabled: !1 }))
          .keyBy("id")
          .value();
      }
      function tl(e, t) {
        var n;
        let i = null !== (n = e[t]) && void 0 !== n ? n : p(e).values().first();
        return null != i ? i.id : t;
      }
      function tu() {
        var e, t;
        let n = arguments.length > 0 && void 0 !== arguments[0] && arguments[0],
          i =
            null !== (e = Q.default.settings.audioContextSettings) &&
            void 0 !== e
              ? e
              : { user: {}, stream: {} };
        for (let e of Object.keys(i)) {
          let r =
              e === e_.ProtoAudioSettingsContextTypes.USER
                ? eS.MediaEngineContextTypes.DEFAULT
                : eS.MediaEngineContextTypes.STREAM,
            s =
              r === eS.MediaEngineContextTypes.STREAM
                ? eS.DEFAULT_STREAM_VOLUME
                : eS.DEFAULT_VOLUME,
            a = null !== (t = i[e]) && void 0 !== t ? t : {},
            { localMutes: o, localVolumes: l } = e3(r);
          for (let [e, t] of Object.entries(a))
            null == (0, X.getPendingAudioSettings)(r, e) &&
              (t.muted ? (o[e] = !0) : delete o[e],
              t.volume !== s ? (l[e] = t.volume) : delete l[e],
              ev.eachConnection(n => {
                n.setLocalVolume(e, t.volume), n.setLocalMute(e, t.muted);
              }, r));
          if (n) {
            let e = new Set([...Object.keys(o), ...Object.keys(l)]);
            for (let t of e)
              null == a[t] &&
                (delete o[t],
                delete l[t],
                ev.eachConnection(e => {
                  e.setLocalVolume(t, s), e.setLocalMute(t, !1);
                }, r));
          }
          tr({ localMutes: o, localVolumes: l }, r);
        }
      }
      function tc(e) {
        if (null == i)
          return (
            eT.info(
              "Error: trying to get soundshare id before MediaEngineStore is instantiated."
            ),
            { soundshareId: null, soundshareSession: "" }
          );
        {
          let t = i.getExperimentalSoundshare() ? e : J.default.getAudioPid(e),
            n = "";
          return (
            null != t && (n = J.default.generateSessionFromPid(t)),
            { soundshareId: t, soundshareSession: n }
          );
        }
      }
      function td(e, t) {
        (0, ee.isWindows)() &&
          v.attachToProcess(e, { soundshare_session: t }).then(t => {
            null != t &&
              !ed.default.shouldContinueWithoutElevatedProcessForPID(e) &&
              I.default.wait(() => {
                I.default.dispatch({
                  type: "MEDIA_ENGINE_SOUNDSHARE_FAILED",
                  errorMessage: t,
                });
              });
          });
      }
      function tf() {
        let e = eS.MediaEngineContextTypes.DEFAULT,
          { videoToggleStateMap: t } = e3(e);
        for (let [e, n] of Object.entries(t))
          n === eE.VideoToggleState.AUTO_PROBING && delete t[e];
        tr({ videoToggleStateMap: t }, e, !1);
      }
      function tE(e) {
        let t = e3();
        Z.default.track(eE.AnalyticEvents.VOICE_PROCESSING, {
          echo_cancellation: t.echoCancellation,
          noise_cancellation: t.noiseCancellation,
          noise_suppression: t.noiseSuppression,
          automatic_gain_control: t.automaticGainControl,
          location: e,
        });
      }
      function tp() {
        let e = e3(),
          t = e.inputDeviceId,
          n = ea.default.hasEchoCancellation(t) || e.echoCancellation,
          i = ea.default.hasNoiseSuppression(t) || e.noiseSuppression,
          r = ea.default.hasAutomaticGainControl(t) || e.automaticGainControl,
          s = e.noiseCancellation;
        ev.setLoopback(e0, {
          echoCancellation: n,
          noiseSuppression: i,
          automaticGainControl: r,
          noiseCancellation: s,
        });
      }
      function th() {
        return eK || !1;
      }
      async function t_() {
        try {
          await en.default.ensureModule("discord_krisp"),
            en.default.requireModule("discord_krisp"),
            (eK = !0),
            i.emitChange();
        } catch (t) {
          eT.warn("Failed to load Krisp module: ".concat(t.message)),
            et.default.captureException(t);
          let e = eS.NoiseCancellerError.INITIALIZED;
          if (t.message.includes(": ")) {
            let n = parseInt(t.message.substring(t.message.indexOf(": ") + 1));
            e = isNaN(n) || 0 === n ? eS.NoiseCancellerError.INITIALIZED : n;
          }
          Z.default.track(eE.AnalyticEvents.VOICE_PROCESSING, {
            noise_canceller_error: e,
          }),
            tr({ noiseCancellation: !1 });
        } finally {
          eW = !1;
        }
      }
      function tS(e) {
        let { section: t } = e;
        return t === eE.UserSettingsSections.VOICE && ts(), !1;
      }
      function tm(e) {
        eX =
          0 === e
            ? eE.SoundshareEnableState.ENABLED
            : 5 === e
              ? eE.SoundshareEnableState.ENABLING
              : -1 === e || 4 === e
                ? eE.SoundshareEnableState.FAILED_TO_ENABLE
                : eE.SoundshareEnableState.NOT_ENABLED;
      }
      async function tT() {
        if (eX === eE.SoundshareEnableState.ENABLING) return;
        eX = eE.SoundshareEnableState.ENABLING;
        let e = {};
        try {
          let t = await ev.enableSoundshare();
          tm(t.code), (e = { status_code: t.code, message: t.message });
        } catch (t) {
          eT.warn("Failed to enable macOS soundshare: ".concat(t)),
            tm(-1),
            (e = { status_code: -1, message: "".concat(t) });
        } finally {
          i.emitChange(),
            Z.default.track(eE.AnalyticEvents.SOUNDSHARE_ENABLE, e);
        }
      }
      class tg extends S.default.Store {
        initialize() {
          ev.on(m.MediaEngineEvent.Connection, e => {
            let { maxSyncDelayOverride: t } = x.default.getCurrentConfig(
              { location: "f627ab_3" },
              { autoTrackExposure: !1 }
            );
            t > 0 && ev.setMaxSyncDelayOverride(t), e6(e), e7(e), te(e);
            let n = e3();
            e.setAttenuation(
              n.attenuation,
              n.attenuateWhileSpeakingSelf,
              n.attenuateWhileSpeakingOthers
            ),
              e.setQoS(n.qos),
              e.setExperimentalEncoders(n.experimentalEncoders),
              e.setHardwareH264(n.hardwareH264);
            let { useExperimentalRateControl: r } = j.default.getCurrentConfig(
              { location: "f627ab_4" },
              { autoTrackExposure: !1 }
            );
            r &&
              e.setExperimentFlag(
                eS.ExperimentFlags.VIDEOTOOLBOX_RATE_CONTROL,
                !0
              );
            {
              (0, ee.isWindows)() &&
                e.setExperimentFlag(
                  eS.ExperimentFlags.SIGNAL_H265_DECODE_SUPPORT,
                  !0
                );
              let { signalH265SupportNvenc: t } = U.default.getCurrentConfig(
                { location: "f627ab_9" },
                { autoTrackExposure: !0 }
              );
              t &&
                e.setExperimentFlag(eS.ExperimentFlags.SIGNAL_H265_SUPPORT, !0);
              let { signalH265SupportMacOS: n } = M.default.getCurrentConfig(
                { location: "f627ab_8" },
                { autoTrackExposure: !0 }
              );
              n &&
                e.setExperimentFlag(eS.ExperimentFlags.SIGNAL_H265_SUPPORT, !0);
            }
            let { signalAV1Support: a } = L.default.getCurrentConfig(
              { location: "f627ab_10" },
              { autoTrackExposure: !0 }
            );
            a && e.setExperimentFlag(eS.ExperimentFlags.SIGNAL_AV1_SUPPORT, !0);
            let { allowSettingFullbandAndroid: o } = k.default.getCurrentConfig(
              { location: "f627ab_14" },
              { autoTrackExposure: !0 }
            );
            if (
              (o &&
                ev.setHasFullbandPerformance(
                  (0, D.hasPerformanceForKrispFullband)()
                ),
              (0, N.default)(i))
            ) {
              let t = R.default.getSettings();
              e.setExperimentFlag(
                eS.ExperimentFlags.STREAMER_CLIP,
                t.clipsEnabled
              );
              let { enableViewerClipping: n } = Y.default.getCurrentConfig(
                { location: "f627ab_15" },
                { autoTrackExposure: !1 }
              );
              e.setViewerSideClip(n);
              let i = ec.default.getGuildId(),
                r = 0;
              null != i &&
                e.context === eS.MediaEngineContextTypes.STREAM &&
                (r = w.default.getCurrentConfig(
                  { guildId: i, location: "MediaEngineStore_SetupMediaEngine" },
                  { autoTrackExposure: !0 }
                ).keyFrameIntervalMs),
                e.setClipsKeyFrameInterval(
                  n && t.viewerClipsEnabled ? eS.VIEWERSIDE_CLIP_KFI_MS : r
                );
              let { allowQualityDecoupling: s } = A.default.getCurrentConfig(
                { location: "MediaEngineStore_setupMediaEngine" },
                { autoTrackExposure: !0 }
              );
              e.setQualityDecoupling(s);
            }
            for (let t of ((n = e3(e.context)),
            e.setPostponeDecodeLevel(100),
            Object.keys(n.localMutes)))
              t !== er.default.getId() && e.setLocalMute(t, n.localMutes[t]);
            for (let t of Object.keys(n.localVolumes))
              t !== er.default.getId() &&
                e.setLocalVolume(t, n.localVolumes[t]);
            for (let t of Object.keys(n.localPans)) {
              let i = n.localPans[t];
              e.setLocalPan(t, i.left, i.right);
            }
            for (let t of Object.keys(n.disabledLocalVideos))
              e.setLocalVideoDisabled(t, n.disabledLocalVideos[t]);
            e.on(m.BaseConnectionEvent.Speaking, (t, n) => {
              I.default.dispatch({
                type: "SPEAKING",
                context: e.context,
                userId: t,
                speakingFlags: n,
              });
            }),
              e.context === eS.MediaEngineContextTypes.DEFAULT &&
                ((ex = !1),
                e.on(m.BaseConnectionEvent.SpeakingWhileMuted, () => {
                  (ex = !0), i.emitChange();
                })),
              e.on(m.BaseConnectionEvent.DesktopSourceEnd, () => {
                I.default.dispatch({
                  type: "MEDIA_ENGINE_SET_GO_LIVE_SOURCE",
                  settings: { context: e.context },
                });
              }),
              e.on(m.BaseConnectionEvent.SoundshareAttached, () => {
                (null == s ? void 0 : s.desktopSource) != null &&
                  Z.default.track(
                    eE.AnalyticEvents.SOUNDSHARE_ATTACHED,
                    (0, P.default)(null == s ? void 0 : s.desktopSource)
                  );
              }),
              e.on(m.BaseConnectionEvent.SoundshareFailed, e => {
                let { failureCode: t, failureReason: n, willRetry: i } = e;
                e9(null == s ? void 0 : s.desktopSource, t, n, i);
              }),
              e.on(m.BaseConnectionEvent.SoundshareSpeaking, () => {
                (null == s ? void 0 : s.desktopSource) != null &&
                  (Z.default.track(
                    eE.AnalyticEvents.SOUNDSHARE_TRANSMITTING,
                    (0, P.default)(null == s ? void 0 : s.desktopSource)
                  ),
                  null !=
                    eu.default.getHookError(eE.MediaEngineHookTypes.SOUND) &&
                    I.default.wait(() =>
                      I.default.dispatch({
                        type: "MEDIA_ENGINE_SOUNDSHARE_TRANSMITTING",
                      })
                    ));
              });
            let l = new g.Timeout();
            e.on(m.BaseConnectionEvent.SoundshareTrace, e => {
              switch (e.type) {
                case "soundshare_attach_requested":
                  l.start(e4, () => {
                    I.default.dispatch({
                      type: "MEDIA_ENGINE_SOUNDSHARE_FAILED",
                      errorMessage: "Sound Hook Failed",
                    });
                  });
                  break;
                case "soundshare_recv_failed":
                  let t = e.reason,
                    n = e.code,
                    i = e.retry;
                  (null == s ? void 0 : s.desktopSource) != null &&
                    (e9(null == s ? void 0 : s.desktopSource, n, t, i),
                    !i &&
                      (l.stop(),
                      I.default.wait(() =>
                        I.default.dispatch({
                          type: "MEDIA_ENGINE_SOUNDSHARE_FAILED",
                          errorMessage: t,
                          errorCode: n,
                        })
                      )));
                  break;
                case "soundshare_state_transition":
                  4 === e.newState &&
                    (l.stop(),
                    I.default.wait(() =>
                      I.default.dispatch({
                        type: "MEDIA_ENGINE_SOUNDSHARE_TRANSMITTING",
                      })
                    ));
              }
            }),
              e.on(m.BaseConnectionEvent.InteractionRequired, e => {
                I.default.dispatch({
                  type: "MEDIA_ENGINE_INTERACTION_REQUIRED",
                  required: e,
                });
              }),
              e.on(
                m.BaseConnectionEvent.VideoHookInitialize,
                (e, t, n, i, r, a) => {
                  (null == s ? void 0 : s.desktopSource) != null &&
                    Z.default.track(eE.AnalyticEvents.VIDEOHOOK_INITIALIZED, {
                      backend: e,
                      format: t,
                      framebuffer_format: n,
                      sample_count: i,
                      success: r,
                      reinitialization: a,
                      ...(0, P.default)(null == s ? void 0 : s.desktopSource),
                    });
                }
              ),
              e.on(m.BaseConnectionEvent.NoiseCancellationError, e => {
                eT.warn("noisecancellererror event: ".concat(e)),
                  (eq = !0),
                  Z.default.track(eE.AnalyticEvents.VOICE_PROCESSING, {
                    noise_canceller_error: e,
                  }),
                  I.default.dispatch({
                    type: "AUDIO_SET_NOISE_SUPPRESSION",
                    enabled: !0,
                  }),
                  I.default.dispatch({
                    type: "AUDIO_SET_NOISE_CANCELLATION",
                    enabled: !1,
                  }),
                  I.default.dispatch({
                    type: "MEDIA_ENGINE_NOISE_CANCELLATION_ERROR",
                    code: e,
                  });
              }),
              e.on(m.BaseConnectionEvent.VoiceActivityDetectorError, e => {
                eT.warn("voiceactivitydetectorerror event: ".concat(e)),
                  Z.default.track(eE.AnalyticEvents.VOICE_PROCESSING, {
                    noise_canceller_error: e,
                  }),
                  I.default.dispatch({
                    type: "AUDIO_SET_MODE",
                    context: eS.MediaEngineContextTypes.DEFAULT,
                    mode: eE.InputModes.VOICE_ACTIVITY,
                    options: {
                      ...e3(eS.MediaEngineContextTypes.DEFAULT).modeOptions,
                      vadUseKrisp: !1,
                    },
                  }),
                  I.default.dispatch({
                    type: "MEDIA_ENGINE_VOICE_ACTIVITY_DETECTION_ERROR",
                    code: e,
                  });
              }),
              e.on(m.BaseConnectionEvent.VideoState, t => {
                I.default.dispatch({
                  type: "MEDIA_ENGINE_VIDEO_STATE_CHANGED",
                  videoState: t,
                  context: e.context,
                });
              }),
              e.on(m.BaseConnectionEvent.Destroy, () => {
                l.stop();
              }),
              e.setBitRate(es.default.bitrate),
              e.applyVideoQualityMode(ef.default.mode);
          }),
            ev.on(m.MediaEngineEvent.DeviceChange, (e, t, n) => {
              I.default.dispatch({
                type: "MEDIA_ENGINE_DEVICES",
                inputDevices: e,
                outputDevices: t,
                videoDevices: n,
              });
            }),
            ev.on(m.MediaEngineEvent.VolumeChange, (e, t) => {
              I.default.dispatch({
                type: "AUDIO_VOLUME_CHANGE",
                inputVolume: e,
                outputVolume: t,
              });
            }),
            ev.on(m.MediaEngineEvent.DesktopSourceEnd, () => {
              I.default.dispatch({
                type: "MEDIA_ENGINE_SET_GO_LIVE_SOURCE",
                settings: null,
              });
            }),
            ev.on(m.MediaEngineEvent.AudioPermission, e => {
              (eZ = !0),
                I.default.dispatch({
                  type: "MEDIA_ENGINE_PERMISSION",
                  kind: "audio",
                  granted: e,
                });
            }),
            ev.on(m.MediaEngineEvent.VideoPermission, e => {
              I.default.dispatch({
                type: "MEDIA_ENGINE_PERMISSION",
                kind: "video",
                granted: e,
              });
            }),
            ev.on(m.MediaEngineEvent.WatchdogTimeout, async () => {
              let e;
              try {
                await J.default.submitLiveCrashReport({
                  message: { message: "Voice Watchdog Timeout" },
                });
              } catch (t) {
                "number" == typeof t.status && (e = t.status);
              }
              eT.warn(
                "Watchdog timeout, report submission status: ".concat(
                  null != e ? e : 200
                )
              ),
                Z.default.track(eE.AnalyticEvents.VOICE_WATCHDOG_TIMEOUT, {
                  minidump_submission_error: e,
                });
            }),
            ev.on(m.MediaEngineEvent.VideoInputInitialized, e => {
              Z.default.track(eE.AnalyticEvents.VIDEO_INPUT_INITIALIZED, {
                device_name: e.description.name,
                time_to_first_frame_ms: e.initializationTimerExpired
                  ? null
                  : Math.round(e.timeToFirstFrame * $.default.Millis.SECOND),
                timed_out: e.initializationTimerExpired,
                activity: e.entropy,
              });
            }),
            ev.on(m.MediaEngineEvent.ClipsRecordingRestartNeeded, () => {
              I.default.dispatch({ type: "CLIPS_RESTART" });
            }),
            ev.on(m.MediaEngineEvent.ClipsInitFailure, (e, t) => {
              I.default.wait(() => {
                I.default.dispatch({
                  type: "CLIPS_INIT_FAILURE",
                  errMsg: e,
                  applicationName: t,
                });
              });
            }),
            ev.on(m.MediaEngineEvent.ClipsRecordingEnded, (e, t) => {
              var n, i;
              (null == a
                ? void 0
                : null === (n = a.desktopSource) || void 0 === n
                  ? void 0
                  : n.id) === e &&
                (null != t &&
                  (null == s
                    ? void 0
                    : null === (i = s.desktopSource) || void 0 === i
                      ? void 0
                      : i.soundshareId) !== t &&
                  v.cancelAttachToProcess(t),
                (a = null));
            }),
            ti.reset(),
            !(function () {
              var e;
              let t = T.default.get("audio");
              null != t &&
                (T.default.set(eg, { [eS.MediaEngineContextTypes.DEFAULT]: t }),
                T.default.remove("audio")),
                (eA =
                  null !== (e = T.default.get(eg)) && void 0 !== e ? e : {}),
                p.each(eA, e => {
                  if (
                    (p.defaultsDeep(e, eC()),
                    null != e.modeOptions &&
                      "string" == typeof e.modeOptions.shortcut &&
                      (e.modeOptions.shortcut = (0, ei.toCombo)(
                        e.modeOptions.shortcut
                      )),
                    null != e.modeOptions &&
                      4 !== e.vadUseKrispSettingVersion &&
                      ((e.vadUseKrispSettingVersion = 4),
                      (e.modeOptions.vadUseKrisp = !0)),
                    !e.qosMigrated && ((e.qosMigrated = !0), (e.qos = !1)),
                    !e.vadThrehsoldMigrated)
                  ) {
                    var t;
                    (e.vadThrehsoldMigrated = !0),
                      (null === (t = e.modeOptions) || void 0 === t
                        ? void 0
                        : t.threshold) === -40 &&
                        (e.modeOptions.threshold = -60);
                  }
                  (0, ee.isWeb)()
                    ? 1 !== e.ncUseKrispjsSettingVersion &&
                      ((e.ncUseKrispjsSettingVersion = 1),
                      (e.noiseSuppression = !1),
                      (e.noiseCancellation = !0))
                    : 1 !== e.ncUseKrispSettingVersion &&
                      ((e.ncUseKrispSettingVersion = 1),
                      (e.noiseSuppression = !1),
                      (e.noiseCancellation = !0)),
                    1 !== e.av1EnabledSettingVersion &&
                      ((e.av1EnabledSettingVersion = 1), (e.av1Enabled = !0));
                }),
                (function () {
                  let e = e3();
                  ev.setAudioInputDevice(e.inputDeviceId),
                    ev.setAudioOutputDevice(e.outputDeviceId),
                    e8(),
                    ev.setInputVolume(e.inputVolume),
                    ev.setOutputVolume(e.outputVolume),
                    ev.setH264Enabled(e.openH264),
                    ev.setAv1Enabled(e.av1Enabled),
                    ev.setAecDump(e.aecDumpEnabled);
                })();
            })(),
            !(0, ee.isDesktop)() || __OVERLAY__ || eW || eK
              ? (0, ee.isWeb)() && ev.supports(eS.Features.NOISE_CANCELLATION)
                ? ((eK = !0), i.emitChange())
                : (0, ee.isWeb)() && tr({ noiseCancellation: !1 })
              : ((eW = !0), t_()),
            (0, ee.isMac)() && ev.supports(eS.Features.SOUNDSHARE)
              ? ev
                  .getSoundshareStatus()
                  .then(e => {
                    tm(e);
                  })
                  .catch(e => {
                    eT.warn(
                      "Failed to check if soundshare is enabled: ".concat(e)
                    );
                  })
              : (eX = eE.SoundshareEnableState.ENABLED),
            tf(),
            (e1 = {
              [eS.Features.VIDEO]: ev.supports(eS.Features.VIDEO),
              [eS.Features.DESKTOP_CAPTURE]: ev.supports(
                eS.Features.DESKTOP_CAPTURE
              ),
              [eS.Features.HYBRID_VIDEO]: ev.supports(eS.Features.HYBRID_VIDEO),
            }),
            this.waitFor(
              er.default,
              ea.default,
              eo.default,
              eu.default,
              ec.default,
              ed.default,
              z.default.storage,
              Q.default,
              el.default,
              R.default
            );
        }
        supports(e) {
          return ev.supports(e);
        }
        supportsInApp(e) {
          return e1[e] || ev.supports(e);
        }
        isSupported() {
          return ev.supported();
        }
        isExperimentalEncodersSupported() {
          return ev.supports(eS.Features.EXPERIMENTAL_ENCODERS);
        }
        isNoiseSuppressionSupported() {
          return ev.supports(eS.Features.NOISE_SUPPRESSION);
        }
        isNoiseCancellationSupported() {
          return eK || !1;
        }
        isNoiseCancellationError() {
          return eq;
        }
        isAutomaticGainControlSupported() {
          return ev.supports(eS.Features.AUTOMATIC_GAIN_CONTROL);
        }
        isAdvancedVoiceActivitySupported() {
          return eK || !1;
        }
        isAecDumpSupported() {
          return ev.supports(eS.Features.AEC_DUMP);
        }
        isSimulcastSupported() {
          return (
            ev.supports(eS.Features.VIDEO) && ev.supports(eS.Features.SIMULCAST)
          );
        }
        getAecDump() {
          return e3().aecDumpEnabled;
        }
        getMediaEngine() {
          return ev;
        }
        getVideoComponent() {
          return (
            ev.supports(eS.Features.DIRECT_VIDEO) && ev.setUseDirectVideo(!0),
            ev.Video
          );
        }
        getCameraComponent() {
          return (
            ev.supports(eS.Features.DIRECT_VIDEO) && ev.setUseDirectVideo(!0),
            ev.Camera
          );
        }
        isEnabled() {
          return eN;
        }
        isMute() {
          return this.isSelfMute() || eb;
        }
        isDeaf() {
          return this.isSelfDeaf() || eG;
        }
        hasContext(e) {
          return null != eA[e];
        }
        isSelfMutedTemporarily() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : eS.MediaEngineContextTypes.DEFAULT;
          return e === eS.MediaEngineContextTypes.DEFAULT && eM;
        }
        isSelfMute() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : eS.MediaEngineContextTypes.DEFAULT;
          return (
            !this.isEnabled() ||
            e3(e).mute ||
            !z.default.didHavePermission(eh.NativePermissionTypes.AUDIO) ||
            this.isSelfDeaf(e) ||
            (e === eS.MediaEngineContextTypes.DEFAULT && eU)
          );
        }
        isHardwareMute() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : eS.MediaEngineContextTypes.DEFAULT;
          return (
            !this.isMute() &&
            !this.isSelfMutedTemporarily(e) &&
            ea.default.isHardwareMute(this.getInputDeviceId())
          );
        }
        isSelfDeaf() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : eS.MediaEngineContextTypes.DEFAULT;
          return !this.isSupported() || e3(e).deaf;
        }
        isVideoEnabled() {
          return ew && eV;
        }
        isVideoAvailable() {
          return Object.values(eL).some(e => {
            let { disabled: t } = e;
            return !t;
          });
        }
        isScreenSharing() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : eS.MediaEngineContextTypes.STREAM;
          return eD === e && null != s;
        }
        isSoundSharing() {
          var e;
          let t =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : eS.MediaEngineContextTypes.STREAM;
          return (
            eD === t &&
            null != s &&
            (null === (e = s.desktopSource) || void 0 === e
              ? void 0
              : e.soundshareId) != null
          );
        }
        isLocalMute(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : eS.MediaEngineContextTypes.DEFAULT;
          return e !== er.default.getId() && (e3(t).localMutes[e] || !1);
        }
        supportsDisableLocalVideo() {
          return ev.supports(eS.Features.DISABLE_VIDEO);
        }
        isLocalVideoDisabled(e) {
          var t;
          let n =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : eS.MediaEngineContextTypes.DEFAULT;
          return (
            null !== (t = e3(n).disabledLocalVideos[e]) && void 0 !== t && t
          );
        }
        getVideoToggleState(e) {
          var t;
          let n =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : eS.MediaEngineContextTypes.DEFAULT;
          return null !== (t = e3(n).videoToggleStateMap[e]) && void 0 !== t
            ? t
            : eE.VideoToggleState.NONE;
        }
        isLocalVideoAutoDisabled(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : eS.MediaEngineContextTypes.DEFAULT;
          return t === eS.MediaEngineContextTypes.DEFAULT && eJ.has(e);
        }
        isAnyLocalVideoAutoDisabled() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : eS.MediaEngineContextTypes.DEFAULT;
          return e === eS.MediaEngineContextTypes.DEFAULT && eJ.size > 0;
        }
        isMediaFilterSettingLoading() {
          return eQ;
        }
        isNativeAudioPermissionReady() {
          return eZ;
        }
        getGoLiveSource() {
          return s;
        }
        getGoLiveContext() {
          return eD;
        }
        getLocalPan(e) {
          let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : eS.MediaEngineContextTypes.DEFAULT,
            n = e3(t).localPans[e];
          return null != n ? n : eI;
        }
        getLocalVolume(e) {
          let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : eS.MediaEngineContextTypes.DEFAULT,
            n = t === eS.MediaEngineContextTypes.STREAM,
            i = n ? eS.DEFAULT_STREAM_VOLUME : eS.DEFAULT_VOLUME,
            r = e3(t).localVolumes[e];
          return null != r ? r : i;
        }
        getInputVolume() {
          return e3().inputVolume;
        }
        getOutputVolume() {
          return e3().outputVolume;
        }
        getMode() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : eS.MediaEngineContextTypes.DEFAULT;
          return e3(e).mode;
        }
        getModeOptions() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : eS.MediaEngineContextTypes.DEFAULT;
          return e3(e).modeOptions;
        }
        getShortcuts() {
          let e = {};
          return (
            p.each(eA, (t, n) => {
              let {
                mode: i,
                modeOptions: { shortcut: r },
              } = t;
              i === eE.InputModes.PUSH_TO_TALK && eR.has(n) && (e[n] = r);
            }),
            e
          );
        }
        getInputDeviceId() {
          return tl(ey, e3().inputDeviceId);
        }
        getOutputDeviceId() {
          return tl(eP, e3().outputDeviceId);
        }
        getVideoDeviceId() {
          return tl(eL, e3().videoDeviceId);
        }
        getInputDevices() {
          return ey;
        }
        getOutputDevices() {
          return eP;
        }
        getVideoDevices() {
          return eL;
        }
        getEchoCancellation() {
          let e = e3();
          return (
            ea.default.hasEchoCancellation(e.inputDeviceId) ||
            e.echoCancellation
          );
        }
        getH265Enabled() {
          return e3().h265Enabled;
        }
        getLoopback() {
          return ev.getLoopback();
        }
        getNoiseSuppression() {
          let e = e3();
          return (
            ea.default.hasNoiseSuppression(e.inputDeviceId) ||
            e.noiseSuppression
          );
        }
        getAutomaticGainControl() {
          let e = e3();
          return (
            ea.default.hasAutomaticGainControl(e.inputDeviceId) ||
            e.automaticGainControl
          );
        }
        getNoiseCancellation() {
          return e3().noiseCancellation;
        }
        getExperimentalEncoders() {
          return e3().experimentalEncoders;
        }
        getHardwareH264() {
          return e3().hardwareH264;
        }
        getEnableSilenceWarning() {
          return e3().silenceWarning;
        }
        getDebugLogging() {
          return ev.getDebugLogging();
        }
        getQoS() {
          return e3().qos;
        }
        getAttenuation() {
          return e3().attenuation;
        }
        getAttenuateWhileSpeakingSelf() {
          return e3().attenuateWhileSpeakingSelf;
        }
        getAttenuateWhileSpeakingOthers() {
          return e3().attenuateWhileSpeakingOthers;
        }
        getAudioSubsystem() {
          return ev.getAudioSubsystem();
        }
        getSettings() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : eS.MediaEngineContextTypes.DEFAULT;
          return e3(e);
        }
        getState() {
          return {
            settingsByContext: eA,
            inputDevices: ey,
            outputDevices: eP,
            appSupported: e1,
            krispModuleLoaded: eK,
            goLiveSource: s,
            goLiveContext: eD,
          };
        }
        getInputDetected() {
          return eB;
        }
        getNoInputDetectedNotice() {
          return ej;
        }
        getPacketDelay() {
          return ee.isPlatformEmbedded ||
            this.getMode() !== eE.InputModes.VOICE_ACTIVITY
            ? 0
            : this.getModeOptions().vadLeading;
        }
        setCanHavePriority(e, t) {
          ev.eachConnection(n => n.setCanHavePriority(e, t));
        }
        isInteractionRequired() {
          return eO;
        }
        getVideoHook() {
          return e3().videoHook;
        }
        supportsVideoHook() {
          return ev.supports(eS.Features.VIDEO_HOOK);
        }
        getExperimentalSoundshare() {
          let e = e3().experimentalSoundshare2;
          return this.supportsExperimentalSoundshare() && (null == e || e);
        }
        supportsExperimentalSoundshare() {
          return (
            ev.supports(eS.Features.EXPERIMENTAL_SOUNDSHARE) &&
            _.satisfies(
              null === C.default || void 0 === C.default
                ? void 0
                : C.default.os.release,
              ep.WINDOWS_SOUNDSHARE_VERSION
            )
          );
        }
        getOpenH264() {
          return e3().openH264;
        }
        getAv1Enabled() {
          return e3().av1Enabled;
        }
        getEverSpeakingWhileMuted() {
          return ex;
        }
        getSoundshareEnabled() {
          return eX;
        }
        supportsEnableSoundshare() {
          return (
            (0, ee.isMac)() &&
            ev.supports(eS.Features.SOUNDSHARE) &&
            _.satisfies(
              null === C.default || void 0 === C.default
                ? void 0
                : C.default.os.release,
              ep.DARWIN_SOUNDSHARE_VERSION
            ) &&
            !(
              _.satisfies(
                null === C.default || void 0 === C.default
                  ? void 0
                  : C.default.os.release,
                ep.DARWIN_SCKIT_AUDIO_VERSION
              ) && tn(!1)
            )
          );
        }
        supportsScreenSoundshare() {
          return (
            ((0, ee.isMac)() &&
              ev.supports(eS.Features.SOUNDSHARE) &&
              _.satisfies(
                null === C.default || void 0 === C.default
                  ? void 0
                  : C.default.os.release,
                ep.DARWIN_SCKIT_AUDIO_VERSION
              ) &&
              tn(!1)) ||
            ((0, ee.isWindows)() &&
              ev.supports(eS.Features.SCREEN_SOUNDSHARE) &&
              this.getExperimentalSoundshare())
          );
        }
        getVideoStreamParameters() {
          let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : eS.MediaEngineContextTypes.DEFAULT,
            t = this.supports(eS.Features.VIDEO)
              ? [
                  {
                    rid: "100",
                    type:
                      e === eS.MediaEngineContextTypes.DEFAULT
                        ? eS.MediaTypes.VIDEO
                        : eS.MediaTypes.SCREEN,
                    quality: 100,
                  },
                ]
              : [];
          return (
            this.isSimulcastSupported() &&
              e === eS.MediaEngineContextTypes.DEFAULT &&
              t.push({ rid: "50", type: eS.MediaTypes.VIDEO, quality: 50 }),
            t
          );
        }
        getSupportedSecureFramesProtocolVersion(e) {
          var t;
          let n = ev.getSupportedSecureFramesProtocolVersion(),
            i = B.SecureFramesUserExperiment.getCurrentConfig({
              location: "MediaEngineStore",
            }),
            r =
              null != e
                ? B.SecureFramesGuildExperiment.getCurrentConfig({
                    guildId: e,
                    location: "MediaEngineStore",
                  })
                : null,
            s =
              i.canSupportSecureFrames ||
              (null == r ? void 0 : r.canSupportSecureFrames),
            a =
              !(0, ee.isIOS)() &&
              !(0, ee.isAndroid)() &&
              (i.canSupportMls || (null == r ? void 0 : r.canSupportMls)),
            o = Math.max(
              i.protocolVersionFloor,
              null !== (t = null == r ? void 0 : r.protocolVersionFloor) &&
                void 0 !== t
                ? t
                : 0
            );
          return s && n % 100 >= o ? (a ? n : n % 100) : 0;
        }
        hasClipsSource() {
          return null != a;
        }
      }
      tg.displayName = "MediaEngineStore";
      var tI = (i = new tg(I.default, {
        VOICE_CHANNEL_SELECT: function (e) {
          let {
            guildId: t,
            channelId: n,
            currentVoiceChannelId: i,
            video: r,
          } = e;
          if ((i !== n && e8(r, null), null != t || null == n)) {
            eY = !1;
            return;
          }
          if (eY) return;
          eY = !0;
          let s = e3();
          (s.mute || s.deaf) &&
            (tr({ deaf: !1, mute: !1 }), ev.eachConnection(e7));
        },
        VOICE_STATE_UPDATES: function (e) {
          let { voiceStates: t } = e;
          return t.reduce((e, t) => {
            if (r === t.sessionId) {
              (eb = t.mute || t.suppress), (eG = t.deaf), ev.eachConnection(e7);
              let e =
                  null != t.guildId &&
                  null != t.channelId &&
                  null != ez &&
                  ez !== t.channelId,
                n = !e && ew;
              return e8(n), (ez = t.channelId), !0;
            }
            return (
              !__OVERLAY__ &&
                t.userId === er.default.getId() &&
                null == ec.default.getChannelId() &&
                e8(!1, null),
              e
            );
          }, !1);
        },
        CONNECTION_OPEN: function (e) {
          (r = e.sessionId),
            (eb = !1),
            (eG = !1),
            (0, q.shouldReadWriteAudioSettings)() && tu();
        },
        CONNECTION_CLOSED: function () {
          r = null;
        },
        RTC_CONNECTION_STATE: function (e) {
          switch (e.state) {
            case eE.RTCConnectionStates.CONNECTING:
              ts();
              break;
            case eE.RTCConnectionStates.RTC_CONNECTING:
              (eH = !1), (ej = !1);
              break;
            case eE.RTCConnectionStates.RTC_CONNECTED:
              e8();
              break;
            case eE.RTCConnectionStates.DISCONNECTED:
              (function () {
                if (0 === eJ.size) return;
                let e = eS.MediaEngineContextTypes.DEFAULT,
                  { disabledLocalVideos: t } = e3(e);
                eJ.forEach(n => {
                  f(
                    t[n],
                    "If you are auto-disabled, then you are also disabled."
                  ),
                    delete t[n],
                    ev.eachConnection(e => e.setLocalVideoDisabled(n, !1), e);
                }),
                  eJ.clear(),
                  tr({ disabledLocalVideos: t }, e, !1);
              })(),
                tf();
          }
          ti.update();
        },
        AUDIO_SET_TEMPORARY_SELF_MUTE: function (e) {
          let { mute: t } = e;
          (eM = t), ev.eachConnection(e7);
        },
        AUDIO_TOGGLE_SELF_MUTE: function (e) {
          let { context: t } = e,
            { mute: n, deaf: i } = e3(t);
          if (
            t === eS.MediaEngineContextTypes.DEFAULT &&
            (z.default.requestPermission(eh.NativePermissionTypes.AUDIO), eU)
          )
            return !1;
          !(n = !i && !n) && (i = !1),
            tr({ mute: n, deaf: i }, t),
            ev.eachConnection(e7);
        },
        AUDIO_TOGGLE_SELF_DEAF: function (e) {
          let { context: t } = e,
            n = e3(t);
          tr({ deaf: !n.deaf }, t), ev.eachConnection(e7);
        },
        AUDIO_TOGGLE_LOCAL_MUTE: function (e) {
          let { context: t, userId: n } = e;
          if (n === er.default.getId()) return;
          let { localMutes: i } = e3(t);
          i[n] ? delete i[n] : (i[n] = !0),
            tr({ localMutes: i }, t),
            ev.eachConnection(e => e.setLocalMute(n, i[n] || !1), t);
        },
        AUDIO_SET_LOCAL_VIDEO_DISABLED: function (e) {
          var t, n, i, r, s, a, o;
          let {
            context: l,
            userId: u,
            videoToggleState: c,
            persist: d,
            isAutomatic: E,
          } = e;
          f(!(d && E), "These are not allowed to both be true.");
          let p = c === eE.VideoToggleState.DISABLED,
            { disabledLocalVideos: h } = e3(l),
            _ = null !== (t = h[u]) && void 0 !== t && t,
            S = eJ.has(u),
            m =
              c === eE.VideoToggleState.AUTO_ENABLED ||
              c === eE.VideoToggleState.MANUAL_ENABLED;
          eT.info(
            "disableVideo="
              .concat(p, " currentlyDisabled=")
              .concat(_, " currentlyAutoDisabled=")
              .concat(S, ", isVideoShown=")
              .concat(m)
          ),
            f(
              !(S && !_),
              "If you are auto-disabled, then you are also disabled."
            );
          let T = p !== _,
            g = l === eS.MediaEngineContextTypes.DEFAULT,
            I = E && T && g,
            C = d && T && g;
          eT.info(
            "changed="
              .concat(T, " isDefaultContext=")
              .concat(g, " isUpdateCausedByVideoHealthManager=")
              .concat(I, " isManualToggleByUser=")
              .concat(C)
          );
          let { videoToggleStateMap: v } = e3(l);
          if (
            (v[u] === eE.VideoToggleState.AUTO_PROBING &&
              c === eE.VideoToggleState.AUTO_ENABLED &&
              (0, K.default)(
                u,
                p
                  ? eS.VideoToggleReason.AUTO_DISABLE
                  : eS.VideoToggleReason.AUTO_ENABLE,
                m
              ),
            (v[u] = c),
            tr({ videoToggleStateMap: v }, l, d),
            c === eE.VideoToggleState.AUTO_PROBING
              ? null === (n = ec.default.getRTCConnection()) ||
                void 0 === n ||
                n.pauseStatsCollectionForUser(u, !0)
              : null === (i = ec.default.getRTCConnection()) ||
                void 0 === i ||
                i.pauseStatsCollectionForUser(u, !1),
            !e$ &&
              (eT.info(
                "isAutoDisableAllowed=".concat(
                  e$,
                  " - disabling VideoHealthManager"
                )
              ),
              null === (s = ec.default.getRTCConnection()) ||
                void 0 === s ||
                null === (r = s.getVideoHealthManager()) ||
                void 0 === r ||
                r.disable()),
            I)
          ) {
            if ((!p && !S) || (p && !e$)) return;
            (0, K.default)(
              u,
              p
                ? eS.VideoToggleReason.AUTO_DISABLE
                : eS.VideoToggleReason.AUTO_ENABLE,
              m
            ),
              p ? eJ.add(u) : eJ.delete(u);
          } else
            C &&
              (S && !p
                ? (eT.info(
                    "disallowing auto-disable for this session because of manual override by user"
                  ),
                  (e$ = !1),
                  null === (o = ec.default.getRTCConnection()) ||
                    void 0 === o ||
                    null === (a = o.getVideoHealthManager()) ||
                    void 0 === a ||
                    a.disable(),
                  (0, K.default)(u, eS.VideoToggleReason.MANUAL_REENABLE, m))
                : (0, K.default)(
                    u,
                    p
                      ? eS.VideoToggleReason.MANUAL_DISABLE
                      : eS.VideoToggleReason.MANUAL_ENABLE,
                    m
                  ));
          g && !p && eJ.delete(u),
            p ? (h[u] = !0) : delete h[u],
            tr({ disabledLocalVideos: h }, l, d),
            ev.eachConnection(e => {
              var t;
              return e.setLocalVideoDisabled(
                u,
                null !== (t = h[u]) && void 0 !== t && t
              );
            }, l);
        },
        AUDIO_SET_LOCAL_VOLUME: function (e) {
          let { context: t, userId: n, volume: i } = e;
          if (n === er.default.getId()) return;
          let r = t === eS.MediaEngineContextTypes.STREAM,
            s = r ? eS.DEFAULT_STREAM_VOLUME : eS.DEFAULT_VOLUME,
            { localVolumes: a } = e3(t);
          i === s ? delete a[n] : (a[n] = i),
            tr({ localVolumes: a }, t),
            ev.eachConnection(e => e.setLocalVolume(n, i), t);
        },
        AUDIO_SET_LOCAL_PAN: function (e) {
          let { context: t, userId: n, left: i, right: r } = e,
            { localPans: s } = e3(t);
          (s[n] = { left: i, right: r }),
            tr({ localPans: s }, t),
            ev.eachConnection(e => e.setLocalPan(n, i, r), t);
        },
        AUDIO_SET_MODE: function (e) {
          let { context: t, mode: n, options: i } = e;
          tr({ mode: n, modeOptions: i }, t),
            ev.eachConnection(e6),
            ti.update();
        },
        AUDIO_SET_INPUT_VOLUME: function (e) {
          let { volume: t } = e;
          tr({ inputVolume: e5(t) }), ev.setInputVolume(t);
        },
        AUDIO_SET_OUTPUT_VOLUME: function (e) {
          let { volume: t } = e;
          tr({ outputVolume: t }), ev.setOutputVolume(t);
        },
        AUDIO_SET_INPUT_DEVICE: function (e) {
          let { id: t } = e;
          tr({ inputDeviceId: (t = tl(ey, t)) }), ev.setAudioInputDevice(t);
        },
        AUDIO_SET_OUTPUT_DEVICE: function (e) {
          let { id: t } = e;
          tr({ outputDeviceId: (t = tl(eP, t)) }), ev.setAudioOutputDevice(t);
        },
        AUDIO_SET_ECHO_CANCELLATION: function (e) {
          let t = tr({ echoCancellation: e.enabled });
          ev.eachConnection(e => e.setEchoCancellation(t.echoCancellation)),
            tp(),
            tE(e.location);
        },
        MEDIA_ENGINE_SET_H265: function (e) {
          let t = tr({ h265Enabled: e.enabled });
          ev.setH265Enabled(t.h265Enabled);
        },
        AUDIO_SET_LOOPBACK: function (e) {
          let { enabled: t } = e;
          return (e0 = t), tp();
        },
        AUDIO_SET_NOISE_SUPPRESSION: function (e) {
          let t = tr({ noiseSuppression: e.enabled });
          ev.eachConnection(e => e.setNoiseSuppression(t.noiseSuppression)),
            tp(),
            tE(e.location);
        },
        AUDIO_SET_AUTOMATIC_GAIN_CONTROL: function (e) {
          let t = tr({ automaticGainControl: e.enabled });
          ev.eachConnection(e =>
            e.setAutomaticGainControl(t.automaticGainControl)
          ),
            tp(),
            tE(e.location);
        },
        AUDIO_SET_NOISE_CANCELLATION: function (e) {
          let t = tr({ noiseCancellation: e.enabled });
          ev.eachConnection(e => e.setNoiseCancellation(t.noiseCancellation)),
            tp(),
            tE(e.location);
        },
        AUDIO_SET_DISPLAY_SILENCE_WARNING: function (e) {
          tr({ silenceWarning: e.enabled }), ti.update();
        },
        AUDIO_SET_DEBUG_LOGGING: function (e) {
          ev.setDebugLogging(e.enabled);
        },
        MEDIA_ENGINE_SET_VIDEO_HOOK: function (e) {
          tr({ videoHook: e.enabled });
        },
        MEDIA_ENGINE_SET_EXPERIMENTAL_SOUNDSHARE: function (e) {
          tr({ experimentalSoundshare2: e.enabled });
        },
        AUDIO_SET_ATTENUATION: function (e) {
          let {
              attenuation: t,
              attenuateWhileSpeakingSelf: n,
              attenuateWhileSpeakingOthers: i,
            } = e,
            r = tr({
              attenuation: t,
              attenuateWhileSpeakingSelf: n,
              attenuateWhileSpeakingOthers: i,
            });
          ev.eachConnection(e =>
            e.setAttenuation(
              r.attenuation,
              r.attenuateWhileSpeakingSelf,
              r.attenuateWhileSpeakingOthers
            )
          );
        },
        AUDIO_SET_QOS: function (e) {
          let { enabled: t } = e;
          tr({ qos: t }), ev.eachConnection(e => e.setQoS(t));
        },
        MEDIA_ENGINE_DEVICES: function (e) {
          let { inputDevices: t, outputDevices: n, videoDevices: i } = e;
          !(function (e) {
            let t = ey;
            if (
              ((ey = to(e, em.default.Messages.NO_INPUT_DEVICES)),
              !p.isEqual(ey, t))
            ) {
              let e = e3(),
                t = tl(ey, e.inputDeviceId);
              ev.setAudioInputDevice(t);
            }
          })(t),
            !(function (e) {
              let t = eP;
              if (
                ((eP = to(e, em.default.Messages.NO_OUTPUT_DEVICES)),
                !p.isEqual(eP, t))
              ) {
                let e = e3(),
                  t = tl(eP, e.outputDeviceId);
                ev.setAudioOutputDevice(t);
              }
            })(n),
            !(function (e) {
              eV = e.length > 0;
              let t = eL;
              if (
                ((eL = to(e, em.default.Messages.NO_VIDEO_DEVICES)),
                ew && !p.isEqual(eL, t))
              ) {
                var n;
                let e = void 0 !== eL[ek],
                  i =
                    ek === eS.DEFAULT_DEVICE_ID &&
                    (null === (n = t[eS.DEFAULT_DEVICE_ID]) || void 0 === n
                      ? void 0
                      : n.disabled);
                e8(e || i);
              }
            })(i);
        },
        AUDIO_VOLUME_CHANGE: function (e) {
          let { inputVolume: t, outputVolume: n } = e;
          tr({ inputVolume: e5(t), outputVolume: n });
        },
        AUDIO_RESET: function () {
          T.default.remove(eg), location.reload();
        },
        AUDIO_INPUT_DETECTED: function (e) {
          let { inputDetected: t } = e;
          (eB = t), !eH && eB && ((eH = !0), ti.update());
        },
        AUDIO_SET_SUBSYSTEM: function (e) {
          ev.setAudioSubsystem(e.subsystem);
        },
        MEDIA_ENGINE_SET_AUDIO_ENABLED: function (e) {
          (eN = e.enabled),
            e.unmute && tr({ mute: !1, deaf: !1 }),
            ev.eachConnection(e7);
        },
        MEDIA_ENGINE_SET_VIDEO_ENABLED: function (e) {
          let { enabled: t } = e;
          z.default.requestPermission(eh.NativePermissionTypes.CAMERA), e8(t);
        },
        MEDIA_ENGINE_PERMISSION: function (e) {
          let { kind: t, granted: n } = e;
          if (!n)
            switch (t) {
              case "audio":
                (eN = !1), ev.eachConnection(e7);
                break;
              case "video":
                e8(!1);
            }
        },
        MEDIA_ENGINE_SET_GO_LIVE_SOURCE: function (e) {
          var t, n, i, r, a;
          let { settings: o } = e;
          if ((null == o ? void 0 : o.desktopSettings) != null) {
            let e = null,
              i = null,
              { sourceId: r, sound: l } = o.desktopSettings,
              u =
                null !== (t = o.context) && void 0 !== t
                  ? t
                  : eS.MediaEngineContextTypes.DEFAULT,
              c =
                null !== (n = o.qualityOptions) && void 0 !== n
                  ? n
                  : { resolution: 720, frameRate: 30 },
              d = J.default.getPidFromDesktopSource(r);
            ee.isPlatformEmbedded &&
              !0 === l &&
              (({ soundshareId: e, soundshareSession: i } = tc(d)),
              null != e && td(e, i)),
              (a = u) !== eD &&
                (null != s && ev.setGoLiveSource(null, eD), (eD = a));
            let f = u === eS.MediaEngineContextTypes.STREAM && ew;
            e8(f, {
              desktopSource: {
                id: r,
                sourcePid: d,
                soundshareId: e,
                soundshareSession: i,
              },
              quality: { resolution: c.resolution, frameRate: c.frameRate },
            });
          } else if ((null == o ? void 0 : o.cameraSettings) != null) {
            let e =
                null !== (i = o.context) && void 0 !== i
                  ? i
                  : eS.MediaEngineContextTypes.DEFAULT,
              { videoDeviceGuid: t, audioDeviceGuid: n } = o.cameraSettings,
              s = e === eS.MediaEngineContextTypes.STREAM && ew,
              a =
                null !== (r = o.qualityOptions) && void 0 !== r
                  ? r
                  : { resolution: 720, frameRate: 30 };
            e8(s, {
              cameraSource: { videoDeviceGuid: t, audioDeviceGuid: n },
              quality: { resolution: a.resolution, frameRate: a.frameRate },
            });
          } else e8(ew, null);
        },
        MEDIA_ENGINE_SET_VIDEO_DEVICE: function (e) {
          let { id: t } = e;
          tr({ videoDeviceId: (t = tl(eL, t)) }), e8();
        },
        MEDIA_ENGINE_SET_EXPERIMENTAL_ENCODERS: function (e) {
          let t = tr({ experimentalEncoders: e.enabled });
          ev.eachConnection(e =>
            e.setExperimentalEncoders(t.experimentalEncoders)
          );
        },
        MEDIA_ENGINE_INTERACTION_REQUIRED: function (e) {
          return (
            eO !== e.required &&
            ((eO = e.required), !e.required && ev.interact(), !0)
          );
        },
        USER_SETTINGS_MODAL_INIT: tS,
        USER_SETTINGS_MODAL_SET_SECTION: tS,
        CERTIFIED_DEVICES_SET: function () {
          return ev.eachConnection(te), !1;
        },
        RPC_APP_CONNECTED: function (e) {
          let { application: t } = e;
          eR.add(t.id);
        },
        RPC_APP_DISCONNECTED: function (e) {
          let { application: t } = e;
          eR.delete(t.id);
        },
        OVERLAY_INITIALIZE: function (e) {
          let { mediaEngineState: t } = e;
          (eA = t.settingsByContext),
            (ey = t.inputDevices),
            (eP = t.outputDevices),
            (e1 = t.appSupported),
            (eK = t.krispModuleLoaded),
            (eD = t.goLiveContext);
        },
        MEDIA_ENGINE_SET_OPEN_H264: function (e) {
          let { enabled: t } = e,
            n = tr({ openH264: t });
          ev.setH264Enabled(n.openH264);
        },
        MEDIA_ENGINE_SET_HARDWARE_H264: function (e) {
          let { enabled: t } = e,
            n = tr({ hardwareH264: t });
          ev.eachConnection(e => e.setHardwareH264(n.hardwareH264));
        },
        MEDIA_ENGINE_SET_AV1: function (e) {
          let { enabled: t } = e,
            n = tr({ av1Enabled: t });
          ev.setAv1Enabled(n.av1Enabled);
        },
        APP_STATE_UPDATE: function (e) {
          let { state: t } = e,
            n = y.default.isEnabled();
          if (t === eE.AppStates.BACKGROUND && ew && !n) (eF = !0), e8(!1);
          else {
            if (t !== eE.AppStates.ACTIVE || !eF) return !1;
            (eF = !1), e8(!0);
          }
          return !0;
        },
        SET_CHANNEL_BITRATE: function (e) {
          ev.eachConnection(t => t.setBitRate(e.bitrate));
        },
        SET_VAD_PERMISSION: function (e) {
          let { hasPermission: t } = e,
            n = !t;
          if (n === eU) return !1;
          (eU = n), ev.eachConnection(e7);
        },
        SET_NATIVE_PERMISSION: function (e) {
          let { state: t, permissionType: n } = e,
            i = t === eh.NativePermissionStates.ACCEPTED;
          switch (n) {
            case eh.NativePermissionTypes.AUDIO:
              (eZ = !0), ev.eachConnection(e7);
              break;
            case eh.NativePermissionTypes.CAMERA:
              !i && ew && e8(!1);
              break;
            default:
              return !1;
          }
        },
        SET_CHANNEL_VIDEO_QUALITY_MODE: function (e) {
          ev.eachConnection(t => t.applyVideoQualityMode(e.mode));
        },
        MEDIA_ENGINE_SET_AEC_DUMP: function (e) {
          let { enabled: t } = e,
            n = tr({ aecDumpEnabled: t });
          ev.setAecDump(n.aecDumpEnabled);
        },
        CHANNEL_DELETE: function () {
          if ((!ew && null == s) || null != ec.default.getRTCConnectionId())
            return !1;
          e8(!1, null);
        },
        MEDIA_ENGINE_NOISE_CANCELLATION_ERROR_RESET: function () {
          return !!eq && ((eq = !1), !0);
        },
        MEDIA_ENGINE_ENABLE_SOUNDSHARE: function () {
          tT(),
            !(function () {
              var e, t;
              let n = i.isSoundSharing(),
                r =
                  null === (e = i.getGoLiveSource()) || void 0 === e
                    ? void 0
                    : e.desktopSource;
              if (null != r) {
                let e = null !== (t = r.soundshareId) && void 0 !== t ? t : 0,
                  s = i.getExperimentalSoundshare();
                n && ev.setSoundshareSource(e, s, eD);
              }
            })();
        },
        MEDIA_ENGINE_APPLY_MEDIA_FILTER_SETTINGS: function (e) {
          let { settings: t } = e;
          ev.applyMediaFilterSettings(t).finally(() => {
            (eQ = !1), i.emitChange();
          });
        },
        MEDIA_ENGINE_APPLY_MEDIA_FILTER_SETTINGS_START: function () {
          eQ = !0;
        },
        MEDIA_ENGINE_APPLY_MEDIA_FILTER_SETTINGS_ERROR: function () {
          eQ = !1;
        },
        USER_SETTINGS_PROTO_UPDATE: function (e) {
          let {
            settings: { type: t },
            local: n,
            wasSaved: i,
          } = e;
          if (
            !(0, q.shouldReadWriteAudioSettings)() ||
            t !== e_.UserSettingsTypes.PRELOADED_USER_SETTINGS ||
            n ||
            null != i
          )
            return !1;
          tu(!0);
        },
        CLIPS_INIT: function (e) {
          let { sourceId: t, applicationName: n, quality: r } = e,
            { enableDecoupledGameClipping: s } = b.default.getCurrentConfig(
              { location: "handleClipsInit" },
              { autoTrackExposure: !0 }
            ),
            o = R.default.getSettings().decoupledClipsEnabled;
          if (!s || !o || null == C.default) return;
          let l = null,
            u = null,
            c = J.default.getPidFromDesktopSource(t);
          ({ soundshareId: l, soundshareSession: u } = tc(c));
          let d = {
            desktopSource: {
              id: t,
              sourcePid: c,
              soundshareId: l,
              soundshareSession: u,
            },
            quality: r,
          };
          null != a &&
            a.desktopSource.id !== d.desktopSource.id &&
            (ev.setClipsSource(null),
            (0, ee.isWindows)() &&
              null != a.desktopSource.soundshareId &&
              v.cancelAttachToProcess(a.desktopSource.soundshareId)),
            null != l && td(l, u),
            (a = d);
          let { useQuartzCapturer: f } = F.default.getCurrentConfig(
              { location: "f627ab_11" },
              { autoTrackExposure: !1 }
            ),
            { hdrCaptureMode: E } = G.default.getCurrentConfig(
              { location: "f627ab_12" },
              { autoTrackExposure: !1 }
            ),
            p = e3().videoHook,
            h = ev.supports(eS.Features.CAPTURE_TIMEOUT_EXPERIMENTS),
            { videoHookStaleFrameTimeoutMs: _ } = H.default.getConfig(
              h && p,
              "e225cfdf5_vh2",
              !1
            ),
            { graphicsCaptureStaleFrameTimeoutMs: S } = W.default.getConfig(
              h && tt(),
              "e225cfdf5_wgc2",
              !1
            );
          ev.setClipsSource({
            desktopDescription: {
              id: a.desktopSource.id,
              soundshareId: a.desktopSource.soundshareId,
              useVideoHook: p,
              useGraphicsCapture: tt(),
              useLoopback: i.getExperimentalSoundshare(),
              useQuartzCapturer: f,
              allowScreenCaptureKit: tn(!1),
              videoHookStaleFrameTimeoutMs: _,
              graphicsCaptureStaleFrameTimeoutMs: S,
              hdrCaptureMode: E,
            },
            quality: r,
            applicationName: n,
          });
        },
        CLIPS_SETTINGS_UPDATE: function (e) {
          let { settings: t } = e;
          void 0 !== t.viewerClipsEnabled &&
            ev.eachConnection(
              e =>
                e.setClipsKeyFrameInterval(
                  R.default.getSettings().viewerClipsEnabled
                    ? eS.VIEWERSIDE_CLIP_KFI_MS
                    : 0
                ),
              eS.MediaEngineContextTypes.STREAM
            ),
            !1 === t.decoupledClipsEnabled &&
              ((a = null), ev.setClipsSource(null));
        },
      }));
    },
    985365: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return E;
          },
        });
      var i = n("446674"),
        r = n("913144"),
        s = n("35468"),
        a = n("49111");
      let o = a.NetworkConnectionTypes.UNKNOWN,
        l = a.NetworkConnectionSpeeds.UNKNOWN,
        u = null;
      function c(e) {
        var t;
        (o = null != e.type ? e.type : a.NetworkConnectionTypes.UNKNOWN),
          (l =
            null !== (t = e.effectiveSpeed) && void 0 !== t
              ? t
              : a.NetworkConnectionSpeeds.UNKNOWN),
          (u = e.serviceProvider),
          f.emitChange();
      }
      class d extends i.default.Store {
        initialize() {
          s.default.getNetworkInformation().then(c),
            s.default.addChangeCallback(c);
        }
        getType() {
          return o;
        }
        getEffectiveConnectionSpeed() {
          return l;
        }
        getServiceProvider() {
          return u;
        }
      }
      d.displayName = "NetworkStore";
      let f = new d(r.default, {});
      var E = f;
    },
    957255: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return W;
          },
        }),
        n("222007");
      var i = n("917351"),
        r = n.n(i),
        s = n("316693"),
        a = n("446674"),
        o = n("913144"),
        l = n("560208"),
        u = n("38654"),
        c = n("267567"),
        d = n("834052"),
        f = n("755624"),
        E = n("526311"),
        p = n("233069"),
        h = n("813006"),
        _ = n("766274"),
        S = n("845078"),
        m = n("991170"),
        T = n("42203"),
        g = n("926787"),
        I = n("26989"),
        C = n("305961"),
        v = n("697218"),
        A = n("49111"),
        R = n("562980");
      let N = {},
        O = {},
        D = {},
        y = 0;
      function P(e) {
        let t =
            !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
          n = N[e];
        if (null != n) return n;
        let i = v.default.getCurrentUser();
        if (null == i) return m.default.NONE;
        let r = C.default.getGuild(e);
        return null == r
          ? m.default.NONE
          : (N[e] = m.default.computePermissions({
              user: i,
              context: r,
              checkElevated: t,
            }));
      }
      function L(e) {
        var t;
        let n =
            !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
          i = v.default.getCurrentUser();
        if (null == i) return m.default.NONE;
        let s = T.default.getChannel(e);
        if (null == s) return m.default.NONE;
        let a = s.getGuildId(),
          o =
            null != a &&
            (c.default.isLurking(a) ||
              (null === (t = I.default.getMember(a, i.id)) || void 0 === t
                ? void 0
                : t.isPending));
        return !s.isScheduledForDeletion() &&
          !o &&
          r.isEmpty(s.permissionOverwrites) &&
          null != a
          ? P(a)
          : m.default.computePermissions({
              user: i,
              context: s,
              checkElevated: n,
            });
      }
      function b(e) {
        let t =
            !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
          n = O[e];
        return null != n ? n : (O[e] = L(e, t));
      }
      function M(e) {
        if (null != e) {
          var t;
          D[e] = (null !== (t = D[e]) && void 0 !== t ? t : 0) + 1;
        }
      }
      function U() {
        for (let e in ((N = {}), (O = {}), D)) D[e] += 1;
        y += 1;
      }
      function G() {
        U();
      }
      function w() {
        U();
      }
      function k(e) {
        var t;
        let { user: n } = e;
        if (
          n.id !==
          (null === (t = v.default.getCurrentUser()) || void 0 === t
            ? void 0
            : t.id)
        )
          return !1;
        U();
      }
      function x() {
        return !0;
      }
      function F(e) {
        let { guildId: t } = e;
        delete N[t];
        let n = T.default.getMutableBasicGuildChannelsForGuild(t);
        r.forEach(n, e => {
          delete O[e.id];
        }),
          (y += 1),
          M(t);
      }
      function V(e) {
        let { instance: t } = e,
          n = T.default.getChannel(t.channel_id);
        if (null == n) return !1;
        let i = v.default.getCurrentUser(),
          r = m.default.computePermissions({ user: i, context: n });
        if (r === O[n.id]) return !1;
        (O[n.id] = r), (y += 1);
      }
      function B(e) {
        let { guildId: t } = e;
        delete N[t];
        let n = T.default.getMutableBasicGuildChannelsForGuild(t);
        r.forEach(n, e => {
          delete O[e.id];
        }),
          (y += 1),
          M(t);
      }
      function H(e, t, n, i) {
        let r = m.default.NONE;
        if (e instanceof p.ChannelRecordBase) {
          if (p.THREAD_CHANNEL_TYPES.has(e.type)) {
            let r = T.default.getChannel(e.parent_id);
            return null == r
              ? m.default.NONE
              : m.default.applyThreadPermissions(
                  e,
                  H(r, t, n, i),
                  f.default.hasJoined(e.id)
                );
          }
          r = b(e.id);
        } else e instanceof h.default && (r = P(e.id));
        return void 0 !== t || void 0 !== n || void 0 !== i
          ? m.default.computePermissions({
              user: v.default.getCurrentUser(),
              context: e,
              overwrites: t,
              roles: n,
              checkElevated: !0,
              excludeGuildPermissions: i,
            })
          : r;
      }
      class j extends a.default.Store {
        initialize() {
          this.waitFor(
            v.default,
            C.default,
            T.default,
            I.default,
            g.default,
            f.default,
            d.default,
            u.default
          );
        }
        getChannelPermissions(e) {
          return p.THREAD_CHANNEL_TYPES.has(e.type) ? L(e.id) : b(e.id);
        }
        getGuildPermissions(e) {
          return P(e.id);
        }
        getGuildPermissionProps(e) {
          let t = v.default.getCurrentUser();
          return {
            canManageGuild: this.can(A.Permissions.MANAGE_GUILD, e),
            canManageChannels: this.can(A.Permissions.MANAGE_CHANNELS, e),
            canManageRoles: this.can(A.Permissions.MANAGE_ROLES, e),
            canManageBans: this.can(A.Permissions.BAN_MEMBERS, e),
            canManageNicknames: this.can(A.Permissions.MANAGE_NICKNAMES, e),
            canManageGuildExpressions:
              this.can(A.Permissions.MANAGE_GUILD_EXPRESSIONS, e) ||
              this.can(A.Permissions.CREATE_GUILD_EXPRESSIONS, e),
            canViewAuditLog: this.can(A.Permissions.VIEW_AUDIT_LOG, e),
            canViewAuditLogV2: this.can(A.Permissions.VIEW_AUDIT_LOG, e),
            canManageWebhooks: this.can(A.Permissions.MANAGE_WEBHOOKS, e),
            canViewGuildAnalytics: this.can(
              A.Permissions.VIEW_GUILD_ANALYTICS,
              e
            ),
            canAccessMembersPage: this.canAccessMemberSafetyPage(e),
            isGuildAdmin: this.can(A.Permissions.ADMINISTRATOR, e),
            isOwner: null != t && e.isOwner(t),
            isOwnerWithRequiredMfaLevel:
              null != t && e.isOwnerWithRequiredMfaLevel(t),
            guild: e,
          };
        }
        canAccessMemberSafetyPage(e) {
          return s.default.hasAny(P(e.id), R.MemberSafetyPagePermissions);
        }
        canAccessGuildSettings(e) {
          return s.default.hasAny(P(e.id), m.default.VIEW_GUILD_SETTINGS);
        }
        canWithPartialContext(e, t) {
          return "channelId" in t && "string" == typeof t.channelId
            ? this.can(e, T.default.getChannel(t.channelId))
            : "guildId" in t &&
                "string" == typeof t.guildId &&
                this.can(e, C.default.getGuild(t.guildId));
        }
        can(e, t, n, i, r) {
          let a = H(t, n, i, r);
          return s.default.has(a, e);
        }
        canBasicChannel(e, t, n, i, r) {
          return "basicPermissions" in t
            ? S.default.has(t.basicPermissions, e)
            : s.default.has(H(t, n, i, r), S.default.asBigFlag(e));
        }
        computePermissions(e, t, n, i) {
          return H(e, t, n, i);
        }
        computeBasicPermissions(e) {
          return "basicPermissions" in e
            ? e.basicPermissions
            : S.default.asBasicFlag(H(e));
        }
        canManageUser(e, t, n) {
          let i = t instanceof _.default ? t.id : t;
          if (n.isOwner(i)) return !1;
          let r = v.default.getCurrentUser();
          if (!this.can(e, n)) return !1;
          let s = null != r ? m.default.getHighestRole(n, r.id) : void 0,
            a = m.default.getHighestRole(n, i);
          return null != r && m.default.isRoleHigher(n, r.id, s, a);
        }
        getHighestRole(e) {
          let t = v.default.getCurrentUser();
          return null != t ? m.default.getHighestRole(e, t.id) : null;
        }
        isRoleHigher(e, t, n) {
          let i = v.default.getCurrentUser(),
            r = u.default.isViewingRoles(e.id);
          return m.default.isRoleHigher(
            e,
            r ? void 0 : null == i ? void 0 : i.id,
            t,
            n
          );
        }
        canImpersonateRole(e, t) {
          let n = this.getHighestRole(e),
            i =
              this.can(A.Permissions.MANAGE_GUILD, e) &&
              this.can(A.Permissions.MANAGE_ROLES, e),
            r = this.isRoleHigher(e, n, t);
          return i && (r || t.id === (null == n ? void 0 : n.id));
        }
        getGuildVersion(e) {
          var t;
          return null !== (t = D[e]) && void 0 !== t ? t : 0;
        }
        getChannelsVersion() {
          return y;
        }
      }
      function Y() {
        (O = {}), (N = {}), (D = {}), (y = 0);
      }
      j.displayName = "PermissionStore";
      var W = new j(o.default, {
        BACKGROUND_SYNC: G,
        CONNECTION_OPEN: G,
        OVERLAY_INITIALIZE: G,
        CACHE_LOADED: G,
        CACHE_LOADED_LAZY: G,
        CONNECTION_CLOSED: function () {
          Y();
        },
        GUILD_CREATE: w,
        GUILD_UPDATE: w,
        GUILD_DELETE: w,
        GUILD_MEMBER_ADD: k,
        GUILD_MEMBER_UPDATE: k,
        CURRENT_USER_UPDATE: k,
        CHANNEL_CREATE: function (e) {
          let {
              channel: { id: t },
            } = e,
            n = T.default.getChannel(t);
          if (null == n || n.isPrivate()) return !1;
          let i = v.default.getCurrentUser(),
            r = m.default.computePermissions({ user: i, context: n });
          if (O[n.id] === r) return !1;
          (O[n.id] = r), (y += 1), M(n.getGuildId());
        },
        THREAD_CREATE: x,
        THREAD_UPDATE: x,
        THREAD_LIST_SYNC: x,
        LOAD_THREADS_SUCCESS: x,
        LOAD_ARCHIVED_THREADS_SUCCESS: x,
        CHANNEL_UPDATES: function (e) {
          let { channels: t } = e,
            n = !1;
          for (let { id: e } of t) {
            let t = T.default.getChannel(e);
            if (null == t || t.isPrivate()) continue;
            let i = v.default.getCurrentUser(),
              r = m.default.computePermissions({ user: i, context: t });
            O[t.id] !== r && ((O[t.id] = r), M(t.getGuildId()), (n = !0));
          }
          return !!n && ((y += 1), n);
        },
        LOAD_MESSAGES_SUCCESS: function (e) {
          let { messages: t } = e;
          return t.some(e => null != e.thread);
        },
        SEARCH_FINISH: function (e) {
          let { messages: t, threads: n } = e;
          return !!(n.length > 0) || t.some(e => e.some(e => null != e.thread));
        },
        GUILD_FEED_FETCH_SUCCESS: function (e) {
          let { data: t } = e;
          return (0, l.getThreadsFromGuildFeedFetch)(t).length > 0;
        },
        THREAD_MEMBER_UPDATE: function (e) {
          var t;
          return (
            (null === (t = v.default.getCurrentUser()) || void 0 === t
              ? void 0
              : t.id) === e.userId && (M(e.guildId), !0)
          );
        },
        THREAD_MEMBERS_UPDATE: function (e) {
          return (
            !!(0, E.doesThreadMembersActionAffectMe)(e) && (M(e.guildId), !0)
          );
        },
        CHANNEL_DELETE: function (e) {
          let { channel: t } = e;
          return delete O[t.id], (y += 1), M(t.guild_id), !1;
        },
        GUILD_ROLE_CREATE: F,
        GUILD_ROLE_UPDATE: F,
        GUILD_ROLE_DELETE: F,
        LOGOUT: Y,
        STAGE_INSTANCE_CREATE: V,
        STAGE_INSTANCE_UPDATE: V,
        STAGE_INSTANCE_DELETE: V,
        IMPERSONATE_UPDATE: B,
        IMPERSONATE_STOP: B,
      });
    },
    945956: function (e, t, n) {
      "use strict";
      let i, r;
      n.r(t),
        n.d(t, {
          default: function () {
            return y;
          },
        }),
        n("70102"),
        n("808653");
      var s = n("446674"),
        a = n("913144"),
        o = n("422791"),
        l = n("241718"),
        u = n("733589"),
        c = n("76393"),
        d = n("122530"),
        f = n("271938"),
        E = n("316133"),
        p = n("49111"),
        h = n("353927");
      let _ = null,
        S = null,
        m = null,
        T = null,
        g = !1,
        I = !1;
      function C(e, t) {
        if (null == r) throw Error("Creating RTCConnection without session.");
        let i = f.default.getId(),
          s = n("997722").default,
          u = new s({ userId: i, sessionId: r, guildId: e, channelId: t });
        return (
          u.on(o.RTCConnectionEvent.State, (e, t, n) => {
            a.default.wait(() =>
              a.default.dispatch({
                type: "RTC_CONNECTION_STATE",
                state: e,
                ...t,
                ...n,
              })
            );
          }),
          u.on(o.RTCConnectionEvent.Video, (e, t, n, i, r) => {
            a.default.wait(() =>
              a.default.dispatch({
                type: "RTC_CONNECTION_VIDEO",
                guildId: e,
                channelId: t,
                userId: n,
                streamId: i,
                rtcServerId: r,
                context: h.MediaEngineContextTypes.DEFAULT,
              })
            );
          }),
          u.on(o.RTCConnectionEvent.Ping, (e, t) => {
            a.default.wait(() =>
              a.default.dispatch({
                type: "RTC_CONNECTION_PING",
                pings: e,
                quality: t,
              })
            );
          }),
          u.on(o.RTCConnectionEvent.OutboundLossRate, e => {
            a.default.wait(() =>
              a.default.dispatch({
                type: "RTC_CONNECTION_LOSS_RATE",
                lossRate: e,
              })
            );
          }),
          u.on(o.RTCConnectionEvent.Speaking, (e, t) => {
            null == m || m.setSpeaking(e, t);
          }),
          u.on(o.RTCConnectionEvent.Flags, (e, t) => {
            a.default.wait(() => {
              a.default.dispatch({
                type: "RTC_CONNECTION_FLAGS",
                flags: t,
                userId: e,
                guildId: u.guildId,
                channelId: u.channelId,
                context: u.context,
              });
            });
          }),
          u.on(o.RTCConnectionEvent.Platform, (e, t, n) => {
            a.default.wait(() => {
              a.default.dispatch({
                type: "RTC_CONNECTION_PLATFORM",
                platform: t,
                userId: e,
                channelId: n,
              });
            });
          }),
          (m = new l.default(f.default.getId(), t)),
          (T = null),
          (g = !1),
          (I = !1),
          u
        );
      }
      function v() {
        if (null == i) return !1;
        (T = i.getDuration()), i.destroy(), (i = null), (m = null);
      }
      function A() {
        _ = null;
      }
      function R(e) {
        let { channel: t } = e;
        if (null == i || i.channelId !== t.id) return !1;
        v();
      }
      function N() {
        return !0;
      }
      class O extends s.default.Store {
        initialize() {
          this.waitFor(E.default),
            (0, d.setVideoToggleAnalyticsParams)(
              this.getRTCConnectionId,
              this.getMediaSessionId
            );
        }
        getRTCConnection() {
          return i;
        }
        getState() {
          return null != i ? i.state : p.RTCConnectionStates.DISCONNECTED;
        }
        isConnected() {
          return this.getState() === p.RTCConnectionStates.RTC_CONNECTED;
        }
        isDisconnected() {
          return this.getState() === p.RTCConnectionStates.DISCONNECTED;
        }
        getRemoteDisconnectVoiceChannelId() {
          return _;
        }
        getLastSessionVoiceChannelId() {
          return S;
        }
        setLastSessionVoiceChannelId(e) {
          S = e;
        }
        getGuildId() {
          return null == i ? void 0 : i.guildId;
        }
        getChannelId() {
          return null == i ? void 0 : i.channelId;
        }
        getHostname() {
          return null != i ? i.hostname : "";
        }
        getQuality() {
          return null != i ? i.quality : p.RTCConnectionQuality.UNKNOWN;
        }
        getPings() {
          return null != i ? i.getPings() : [];
        }
        getAveragePing() {
          return null != i ? (null == i ? void 0 : i.getAveragePing()) : 0;
        }
        getLastPing() {
          return null == i ? void 0 : i.getLastPing();
        }
        getOutboundLossRate() {
          return null == i ? void 0 : i.getOutboundLossRate();
        }
        getMediaSessionId() {
          return null == i ? void 0 : i.getMediaSessionId();
        }
        getRTCConnectionId() {
          return null == i ? void 0 : i.getRTCConnectionId();
        }
        getDuration() {
          var e;
          return null !== (e = null == i ? void 0 : i.getDuration()) &&
            void 0 !== e
            ? e
            : T;
        }
        getPacketStats() {
          return null == i ? void 0 : i.getPacketStats();
        }
        getVoiceStateStats() {
          return null == m ? void 0 : m.getStats();
        }
        getWasEverMultiParticipant() {
          return g;
        }
        getWasEverRtcConnected() {
          return I;
        }
      }
      O.displayName = "RTCConnectionStore";
      let D = new O(
        a.default,
        __OVERLAY__
          ? {}
          : {
              CONNECTION_OPEN: function (e) {
                return (r = e.sessionId), (_ = null), (S = null), v(), !1;
              },
              CONNECTION_CLOSED: function () {
                (r = null), (_ = null), (S = null), v();
              },
              RTC_CONNECTION_STATE: function (e) {
                return (
                  e.state === p.RTCConnectionStates.RTC_CONNECTED && (I = !0),
                  !0
                );
              },
              RTC_CONNECTION_PING: N,
              RTC_CONNECTION_LOSS_RATE: N,
              RTC_CONNECTION_UPDATE_ID: function (e) {
                return e.connection === i;
              },
              VOICE_STATE_UPDATES: function (e) {
                let { voiceStates: t } = e;
                return t.reduce((e, t) => {
                  var n, s, a;
                  if (
                    (null == m || m.updateVoiceStates(t.userId, t.channelId),
                    (g =
                      g ||
                      (null !==
                        (n =
                          null == m
                            ? void 0
                            : m.getStats().max_voice_state_count) &&
                      void 0 !== n
                        ? n
                        : 0) > 1),
                    f.default.getId() !== t.userId)
                  )
                    return !1;
                  if (null != i) {
                    if (t.sessionId === r)
                      (null != t.guildId && t.guildId === i.guildId) ||
                      (null == t.guildId && t.channelId === i.channelId)
                        ? null == t.channelId
                          ? v()
                          : (i.channelId = t.channelId)
                        : ((t.guildId !== i.guildId && null == t.channelId) ||
                            v(),
                          null != t.channelId &&
                            ((_ = null),
                            (S = null),
                            (i = C(t.guildId, t.channelId)),
                            (g =
                              (null !==
                                (s =
                                  null == m
                                    ? void 0
                                    : m.getStats().max_voice_state_count) &&
                              void 0 !== s
                                ? s
                                : 0) > 1)));
                    else if (t.guildId === i.guildId) {
                      let e =
                        null != c.default.getAwaitingRemoteSessionInfo() &&
                        null != c.default.getRemoteSessionId();
                      !e && (_ = i.channelId), v();
                    }
                  } else {
                    if (t.sessionId !== r || null == t.channelId) return e;
                    (_ = null),
                      (S = null),
                      (i = C(t.guildId, t.channelId)),
                      (g =
                        (null !==
                          (a =
                            null == m
                              ? void 0
                              : m.getStats().max_voice_state_count) &&
                        void 0 !== a
                          ? a
                          : 0) > 1);
                  }
                  return !0;
                }, !1);
              },
              VOICE_CHANNEL_SELECT: function (e) {
                let { channelId: t } = e;
                if (null == i || (null != t && i.channelId === t)) return !1;
                v();
              },
              VOICE_SERVER_UPDATE: function (e) {
                if (
                  null == i ||
                  (null != e.guildId && e.guildId !== i.guildId) ||
                  (null != e.channelId && e.channelId !== i.channelId)
                )
                  return !1;
                i.connect(e.endpoint, e.token);
              },
              CLEAR_REMOTE_DISCONNECT_VOICE_CHANNEL_ID: A,
              REMOTE_SESSION_CONNECT: A,
              CLEAR_LAST_SESSION_VOICE_CHANNEL_ID: function () {
                S = null;
              },
              GUILD_DELETE: function (e) {
                let { guild: t } = e;
                if (null == i || i.guildId !== t.id) return !1;
                v();
              },
              CHANNEL_DELETE: R,
              THREAD_DELETE: R,
              CALL_DELETE: function (e) {
                let { channelId: t } = e;
                if (null == i || i.channelId !== t) return !1;
                v();
              },
              APP_STATE_UPDATE: function (e) {
                if (null != i) {
                  let t = e.state === p.AppStates.BACKGROUND,
                    n = u.default.isEnabled();
                  i.setAppBackgrounded(t, n);
                }
                return (
                  e.state === p.AppStates.ACTIVE &&
                    null != i &&
                    i.resetBackoff("App state is active"),
                  !1
                );
              },
              RTC_LOG_MARKER: function (e) {
                if (null == i) {
                  console.warn(
                    "handleRtcLogMarker: Unexpected state, no rtcConnection."
                  );
                  return;
                }
                i.setRtcLogMarker(e.marker);
              },
            }
      );
      n.el("599110")
        .then(n.bind(n, "599110"))
        .then(e => {
          let { addExtraAnalyticsDecorator: t } = e;
          t(e => {
            e.client_rtc_state = D.getState();
          });
        });
      var y = D;
    },
    661919: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          graphs: function () {
            return p;
          },
          keySection: function () {
            return g;
          },
          parseSection: function () {
            return I;
          },
          default: function () {
            return R;
          },
        }),
        n("222007"),
        n("424973");
      var i = n("446674"),
        r = n("773364"),
        s = n("913144"),
        a = n("673777"),
        o = n("42887"),
        l = n("697218"),
        u = n("49111"),
        c = n("353927");
      let d = g(
          c.MediaEngineContextTypes.DEFAULT,
          u.RTCDebugSections.TRANSPORT,
          0
        ),
        f = d,
        E = {},
        p = {
          availableOutgoingBitrate: !0,
          bitrate: !0,
          bitrateTarget: !0,
          bytesReceived: !0,
          bytesSent: !0,
          encoderQualityPsnr: !0,
          encoderQualityVmaf: !0,
          encodeUsage: !0,
          frameRateDecode: !0,
          frameRateEncode: !0,
          frameRateInput: !0,
          frameRateNetwork: !0,
          frameRateRender: !0,
          inboundBitrateEstimate: !0,
          packetsLost: !0,
          packetsReceived: !0,
          packetsSent: !0,
          ping: !0,
        };
      function h(e, t, n) {
        return "".concat(e, ":").concat(t, ":").concat(n);
      }
      class _ {
        static empty() {
          return new _({});
        }
        put(e, t, n, i) {
          if ("" === i) {
            let i = { ...this.state };
            return delete i[h(e, t, n)], new _(i);
          }
          return new _({ [h(e, t, n)]: i, ...this.state });
        }
        get(e, t, n) {
          let i = this.state[h(e, t, n)];
          return null != i ? i : null;
        }
        constructor(e) {
          this.state = e;
        }
      }
      let S = _.empty(),
        m = !1,
        T = null;
      function g(e, t, n) {
        return "".concat(e, ":").concat(t, ":").concat(n);
      }
      function I(e) {
        let [t, n] = e.split(":");
        return { context: t, section: n };
      }
      function C() {
        Object.values(c.MediaEngineContextTypes).forEach(e => {
          E[e] = {};
        });
      }
      C();
      function v() {
        null != T && (T.destroy(), (T = null));
      }
      class A extends i.default.Store {
        getSection() {
          return f;
        }
        getStats() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : c.MediaEngineContextTypes.DEFAULT;
          return E[e][0];
        }
        getAllStats() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : c.MediaEngineContextTypes.DEFAULT;
          return Object.values(E[e]);
        }
        getVideoStreams() {
          return S;
        }
        shouldRecordNextConnection() {
          return m;
        }
      }
      A.displayName = "RTCDebugStore";
      var R = new A(s.default, {
        RTC_DEBUG_MODAL_OPEN: function (e) {
          var t;
          f = null !== (t = e.section) && void 0 !== t ? t : d;
        },
        RTC_DEBUG_MODAL_CLOSE: function () {
          v();
        },
        RTC_DEBUG_MODAL_SET_SECTION: function (e) {
          f = e.section;
        },
        RTC_DEBUG_MODAL_UPDATE: function (e) {
          let { context: t, stats: n, index: i } = e,
            r = E[t];
          if (null != n) {
            let [e, s, a] = f.split(":");
            if (e === t && parseInt(a) === i) {
              let e = l.default.getUser(s);
              if (null != e) {
                let {
                  rtp: { inbound: e },
                } = n;
                !Object.keys(e).includes(s) && (f = d);
              }
            }
            r[i] = (function e(t) {
              let n =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : {},
                i =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : Date.now(),
                r = {};
              for (let [s, a] of Object.entries(t)) {
                let t = n[s];
                if (Array.isArray(a)) {
                  if ("object" == typeof a[0]) {
                    let n = Array.isArray(t) ? t : [],
                      o = (r[s] = []);
                    for (let t = 0; t < a.length; t++) {
                      let r = n[t],
                        s = "object" == typeof r ? r : {};
                      o.push(e(a[t], s, i));
                    }
                  } else r[s] = a;
                } else if ("object" == typeof a && null !== a) {
                  let n = "object" == typeof t && null !== t ? t : {};
                  r[s] = e(a, n, i);
                } else if (s in p && "number" == typeof a) {
                  let e = (r[s] = Array.isArray(t) ? t : []);
                  e.push({ value: a, time: i }), e.length > 600 && e.shift();
                } else r[s] = a;
              }
              return r;
            })(n, r[i]);
          } else delete r[i];
        },
        RTC_DEBUG_MODAL_OPEN_REPLAY: function (e) {
          a.chooseReplayPath();
        },
        RTC_DEBUG_MODAL_OPEN_REPLAY_AT_PATH: function (e) {
          let { path: t } = e,
            n = o.default.getMediaEngine();
          if (
            (v(), !n.supports(c.Features.CONNECTION_REPLAY) || 0 === t.length)
          )
            return;
          let i = n.createReplayConnection(
            c.MediaEngineContextTypes.DEFAULT,
            t
          );
          null != i &&
            ((T = i),
            i.on(r.BaseConnectionEvent.Video, (e, t, n, r, a) => {
              s.default.dispatch({
                type: "RTC_DEBUG_MODAL_UPDATE_VIDEO_OUTPUT",
                mediaEngineConnectionId: i.mediaEngineConnectionId,
                userId: e,
                videoSsrc: null != r ? r : 0,
                streamId: null != t ? t : "",
              });
            }),
            s.default.wait(() => a.open()));
        },
        RTC_DEBUG_MODAL_UPDATE_VIDEO_OUTPUT: function (e) {
          S = S.put(
            e.mediaEngineConnectionId,
            e.userId,
            e.videoSsrc,
            e.streamId
          );
        },
        RTC_DEBUG_SET_RECORDING_FLAG: function (e) {
          let { value: t } = e;
          m = t;
        },
        VOICE_CHANNEL_SELECT: function (e) {
          null != e.channelId && C();
        },
      });
      o.default
        .getMediaEngine()
        .on(r.MediaEngineEvent.ConnectionStats, function (e) {
          Object.values(c.MediaEngineContextTypes).forEach(t => {
            e.filter(e => {
              let { connection: n } = e;
              return n.context === t;
            }).forEach((e, n) => {
              s.default.dispatch({
                type: "RTC_DEBUG_MODAL_UPDATE",
                stats: e.stats,
                context: t,
                index: n,
                mediaEngineConnectionId: e.connection.mediaEngineConnectionId,
              });
            });
          });
        });
    },
    590401: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return f;
          },
        });
      var i = n("917351"),
        r = n.n(i),
        s = n("446674"),
        a = n("913144"),
        o = n("718517");
      let l = {
          preferredRegion: null,
          lastTestTimestamp: null,
          lastGeoRankedOrder: null,
        },
        u = l,
        c = 1 * o.default.Millis.HOUR;
      class d extends s.default.DeviceSettingsStore {
        initialize(e) {
          u = null != e ? e : l;
        }
        shouldIncludePreferredRegion() {
          return null != u.preferredRegion;
        }
        getPreferredRegion() {
          return u.preferredRegion;
        }
        getRegion(e) {
          if (null != e) return e.substr(0, e.search(/\d/));
        }
        getUserAgnosticState() {
          return u;
        }
        shouldPerformLatencyTest(e) {
          var t, n;
          return (
            null === u.preferredRegion ||
            !r.isEqual(
              e,
              null !== (t = u.lastGeoRankedOrder) && void 0 !== t ? t : []
            ) ||
            Date.now() -
              (null !== (n = u.lastTestTimestamp) && void 0 !== n ? n : 0) >=
              c
          );
        }
      }
      (d.displayName = "RTCRegionStore"), (d.persistKey = "RTCRegionStore");
      var f = new d(a.default, {
        RTC_LATENCY_TEST_COMPLETE: function (e) {
          e.latencyRankedRegions.length > 0 &&
            ((u.lastGeoRankedOrder = e.geoRankedRegions),
            (u.preferredRegion = e.latencyRankedRegions[0])),
            (u.lastTestTimestamp = Date.now());
        },
      });
    },
    27618: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return m;
          },
        });
      var i = n("917351"),
        r = n.n(i),
        s = n("446674"),
        a = n("913144"),
        o = n("697218"),
        l = n("49111");
      let u = {},
        c = {},
        d = {},
        f = 0,
        E = 0,
        p = 0,
        h = 0;
      function _() {
        let e = Object.values(u);
        h = e.length;
        let {
          [l.RelationshipTypes.PENDING_INCOMING]: t = 0,
          [l.RelationshipTypes.PENDING_OUTGOING]: n = 0,
          [l.RelationshipTypes.FRIEND]: i = 0,
        } = r.countBy(Object.values(u), e => e);
        (f = t), (E = n), (p = i);
      }
      class S extends s.default.Store {
        initialize() {
          this.waitFor(o.default);
        }
        isFriend(e) {
          return u[e] === l.RelationshipTypes.FRIEND;
        }
        isBlocked(e) {
          return u[e] === l.RelationshipTypes.BLOCKED;
        }
        getPendingCount() {
          return f;
        }
        getOutgoingCount() {
          return E;
        }
        getFriendCount() {
          return p;
        }
        getRelationshipCount() {
          return h;
        }
        getRelationships() {
          return u;
        }
        getRelationshipType(e) {
          let t = u[e];
          return null != t ? t : l.RelationshipTypes.NONE;
        }
        getNickname(e) {
          let t = c[e];
          return t;
        }
        getSince(e) {
          return d[e];
        }
        getSinces() {
          return d;
        }
        getFriendIDs() {
          return Object.keys(u).filter(
            e => u[e] === l.RelationshipTypes.FRIEND
          );
        }
      }
      S.displayName = "RelationshipStore";
      var m = new S(a.default, {
        CONNECTION_OPEN: function (e) {
          (u = {}),
            (c = {}),
            (d = {}),
            e.relationships.forEach(e => {
              (u[e.id] = e.type),
                null != e.nickname && (c[e.id] = e.nickname),
                null != e.since && (d[e.id] = e.since);
            }),
            _();
        },
        OVERLAY_INITIALIZE: function (e) {
          (u = { ...e.relationships }), _();
        },
        RELATIONSHIP_ADD: function (e) {
          let t = u[e.relationship.id];
          (u = { ...u, [e.relationship.id]: e.relationship.type }),
            null != e.relationship.nickname &&
              (c = { ...c, [e.relationship.id]: e.relationship.nickname }),
            null != e.relationship.since &&
              (d = { ...d, [e.relationship.id]: e.relationship.since }),
            _(),
            e.relationship.type === l.RelationshipTypes.FRIEND &&
              t === l.RelationshipTypes.PENDING_OUTGOING &&
              a.default.dispatch({
                type: "FRIEND_REQUEST_ACCEPTED",
                user: e.relationship.user,
              });
        },
        RELATIONSHIP_REMOVE: function (e) {
          (u = { ...u }),
            delete u[e.relationship.id],
            null != c[e.relationship.id] &&
              ((c = { ...c }), delete c[e.relationship.id]),
            null != d[e.relationship.id] &&
              ((d = { ...d }), delete d[e.relationship.id]),
            _();
        },
        RELATIONSHIP_UPDATE: function (e) {
          null == e.relationship.since
            ? delete d[e.relationship.id]
            : (d[e.relationship.id] = e.relationship.since),
            null == e.relationship.nickname
              ? delete c[e.relationship.id]
              : (c[e.relationship.id] = e.relationship.nickname);
        },
        RELATIONSHIP_PENDING_INCOMING_REMOVED: function (e) {
          Object.keys((u = { ...u })).forEach(e => {
            u[e] === l.RelationshipTypes.PENDING_INCOMING && delete u[e];
          }),
            _();
        },
      });
    },
    568307: function (e, t, n) {
      "use strict";
      let i;
      n.r(t),
        n.d(t, {
          gameKey: function () {
            return ee;
          },
          gameInDatabase: function () {
            return et;
          },
          getOverlayGameStatus: function () {
            return en;
          },
          isDetectionEnabled: function () {
            return ei;
          },
          transformForGameSettings: function () {
            return es;
          },
          default: function () {
            return ed;
          },
        }),
        n("222007"),
        n("424973"),
        n("808653"),
        n("781738"),
        n("843762");
      var r,
        s,
        a = n("917351"),
        o = n.n(a),
        l = n("866227"),
        u = n.n(l),
        c = n("446674"),
        d = n("95410"),
        f = n("913144"),
        E = n("115718"),
        p = n("376556"),
        h = n("605250"),
        _ = n("630915"),
        S = n("756898"),
        m = n("32128"),
        T = n("599110"),
        g = n("718517"),
        I = n("269180"),
        C = n("449008"),
        v = n("773336"),
        A = n("50885"),
        R = n("819068"),
        N = n("546463"),
        O = n("686470"),
        D = n("535974"),
        y = n("49111"),
        P = n("6791");
      let L = new h.default("RunningGameStore"),
        b = "RunningGameStore",
        M = [
          {
            executables: [
              { os: "win32", name: "obs/obs.exe" },
              { os: "win32", name: "obs32.exe" },
              { os: "win32", name: "obs64.exe" },
              { os: "darwin", name: "OBS.app" },
              { os: "linux", name: "obs" },
            ],
            name: "OBS",
            streamerTool: !0,
          },
          {
            executables: [
              { os: "win32", name: "XSplit.Gamecaster.exe" },
              { os: "win32", name: "XSplit.Core.exe" },
              { os: "win32", name: "Gamecaster.exe" },
            ],
            name: "XSplit",
            streamerTool: !0,
          },
          {
            executables: [{ os: "win32", name: "bebo.exe" }],
            name: "Bebo",
            streamerTool: !0,
          },
          {
            executables: [
              { os: "win32", name: "Streamlabs OBS.exe" },
              { os: "win32", name: "Streamlabs Desktop.exe" },
              { os: "darwin", name: "Streamlabs Desktop.app" },
            ],
            name: "Streamlabs Desktop",
            streamerTool: !0,
          },
          {
            executables: [
              { os: "win32", name: "TwitchStudio.exe" },
              { os: "darwin", name: "Twitch Studio.app" },
            ],
            name: "Twitch Studio",
            streamerTool: !0,
          },
          {
            executables: [
              { os: "win32", name: "Spotify.exe" },
              { os: "darwin", name: "Spotify.app" },
              { os: "linux", name: "spotify" },
            ],
            name: p.default.get(y.PlatformTypes.SPOTIFY).name,
          },
        ],
        U = !0,
        G = new Set(),
        w = [],
        k = [],
        x = [],
        F = null,
        V = [],
        B = {},
        H = {},
        j = {
          gamesSeen: [],
          gameOverrides: {},
          enableOverlay: {},
          enableDetection: {},
        },
        Y = function () {},
        W = {},
        K = 0,
        z = null,
        q = null,
        X = {};
      function Q(e, t, n) {
        let i = e[t];
        void 0 !== i && (delete e[t], (e[n] = i));
      }
      function Z(e, t) {
        null != t.lastLaunched
          ? (e.lastLaunched = t.lastLaunched)
          : null != t.start && (e.lastLaunched = t.start);
      }
      function J(e) {
        return M.some(t => t.name === e.name && !0 === t.streamerTool);
      }
      function $() {
        if (x.length > 0) {
          let e = F;
          (F = x[0]),
            null != e && F.pid === e.pid
              ? (F.start = e.start)
              : (F.start = Date.now());
        } else F = null;
        let e = [];
        for (let t of x) !(t.pid in X) && ((X[t.pid] = t), e.push(t));
        let t = [];
        for (let e of Object.values(X))
          !x.some(t => t.pid === e.pid) && (t.push(e), delete X[e.pid]);
        L.info("games", {
          runningGames: x,
          added: e,
          removed: t,
          previousGames: X,
        }),
          f.default.dispatch({
            type: "RUNNING_GAMES_CHANGE",
            games: x,
            added: e,
            removed: t,
          });
      }
      function ee(e) {
        let t = null != e.name ? e.name : "";
        return "".concat(e.exePath, ":").concat(t);
      }
      function et(e) {
        let t = N.default.getGameByName(e.name);
        return (
          null != t ||
          (void 0 !== e.nativeProcessObserverId &&
            (2147483648 & e.nativeProcessObserverId) == 0)
        );
      }
      function en(e) {
        if (e.isLauncher)
          return {
            source: "LAUNCHER",
            enabled: !1,
            overlayMethod: P.OverlayMethod.Disabled,
          };
        let t = N.default.getGameByName(e.name);
        if (null != t) {
          let e = O.default.getActiveLibraryApplication(t.id);
          if (null != e)
            return {
              source: "LIBRARY_APPLICATION",
              enabled: e.isOverlayEnabled(),
              overlayMethod: P.OverlayMethod.Disabled,
            };
        }
        let n = _.isOOPExperimentEnabled() && (0, R.supportsOutOfProcess)(),
          i = null == e.id ? null : W[e.id],
          r = n && null != i && i.supportsOutOfProcessOverlay,
          s = r ? P.OverlayMethod.OutOfProcess : P.OverlayMethod.Hook,
          a = m.OverlayStoredSettings.methodOverride;
        if (null != a && a !== P.OverlayMethod.Disabled) {
          let t = P.OverlayMethod[s],
            n = P.OverlayMethod[a];
          L.info(
            "getOverlayGameStatus: overlay method overriden "
              .concat(t, " -> ")
              .concat(n, " (")
              .concat(e.name, ")")
          ),
            (s = a);
        }
        let o = j.enableOverlay[ee(e)];
        return null != o
          ? { source: "USER_OVERRIDE", enabled: o, overlayMethod: s }
          : null != i
            ? { source: "DATABASE", enabled: i.enabled || r, overlayMethod: s }
            : {
                source: "DEFAULT",
                enabled: !1,
                overlayMethod: P.OverlayMethod.Hook,
              };
      }
      ((s = r || (r = {})).LAUNCHER = "LAUNCHER"),
        (s.LIBRARY_APPLICATION = "LIBRARY_APPLICATION"),
        (s.USER_OVERRIDE = "USER_OVERRIDE"),
        (s.DATABASE = "DATABASE"),
        (s.DEFAULT = "DEFAULT");
      function ei(e) {
        let t = j.enableDetection[ee(e)];
        return null == t || t;
      }
      function er() {
        d.default.set(b, j);
      }
      function es(e) {
        var t, n;
        let i = {
          ...e,
          played:
            null != e.lastFocused && 0 !== e.lastFocused
              ? u(new Date(e.lastFocused * g.default.Millis.SECOND)).fromNow()
              : " ",
          overlay:
            ((t = e),
            null !== (n = j.enableOverlay[ee(t)]) && void 0 !== n
              ? n
              : en(t).enabled),
          verified: et(e),
          detectable: ei(e),
        };
        if (null != e.id && null != W[e.id]) {
          let t = W[e.id];
          i.overlayWarn = t.warn;
        }
        return i;
      }
      function ea() {
        let e = !1;
        return (
          (w = o.values(O.default.libraryApplications).reduce((t, n) => {
            let i = N.default.getDetectableGame(n.id);
            if (null == i) return t;
            let r = D.default.getLaunchOptions(n.id, n.branchId);
            for (let s of r) {
              let r = "".concat(n.id, ":").concat(n.branchId);
              !G.has(r) && ((e = !0), G.add(r));
              let { fullExecutablePath: a } = s,
                o = a.replace(/\\/g, "/").toLowerCase();
              (B[o] = i.id),
                t.push({
                  id: i.id,
                  name: i.name,
                  exePath: o,
                  cmdLine: "",
                  lastFocused: 0,
                  add: !0,
                });
            }
            return t;
          }, [])),
          e && eo(),
          e
        );
      }
      function eo() {
        if (!__OVERLAY__ && v.isPlatformEmbedded) {
          let e = [...w, ...o.values(j.gameOverrides)];
          A.default.setGameCandidateOverrides(e);
        }
      }
      function el(e) {
        null != e &&
          0 !== e.length &&
          (e.forEach(e => {
            let t = j.gamesSeen.some(t => {
              if (t.name === e.name) {
                if (e.lastFocused) {
                  t.lastFocused = e.lastFocused;
                  let n = j.gameOverrides[ee(e)];
                  null != n && (n.lastFocused = e.lastFocused);
                }
                return Z(t, e), !0;
              }
              return !1;
            });
            if (t);
            else {
              if (e.hidden) return;
              j.gamesSeen.unshift(
                (function (e) {
                  let t = {
                    exePath: e.exePath,
                    cmdLine: e.cmdLine,
                    lastFocused: e.lastFocused,
                  };
                  return (
                    null != e.id && (t.id = e.id),
                    null != e.nativeProcessObserverId &&
                      (t.nativeProcessObserverId = e.nativeProcessObserverId),
                    null != e.name && (t.name = e.name),
                    e.add && (t.add = !0),
                    e.block && (t.block = !0),
                    Z(t, e),
                    t
                  );
                })(e)
              );
            }
          }),
          j.gamesSeen.sort((e, t) => t.lastFocused - e.lastFocused),
          er(),
          I.default.setRecentGames(eu().map(e => es(e))));
      }
      function eu() {
        let e = o.values(j.gameOverrides),
          t = j.gamesSeen.filter(e => void 0 === j.gameOverrides[ee(e)]);
        return t.concat(e);
      }
      !__OVERLAY__ &&
        (0, v.isDesktop)() &&
        (Y = function () {
          let e = [],
            t = new Set();
          i = {};
          let n = N.default.games;
          for (let e of n) {
            var r, s, a, o;
            W[e.id] = {
              compatibilityHook:
                null !== (r = e.overlayCompatibilityHook) && void 0 !== r
                  ? r
                  : E.DEFAULT_OVERLAY_OPTIONS.compatibilityHook,
              warn:
                null !== (s = e.overlayWarn) && void 0 !== s
                  ? s
                  : E.DEFAULT_OVERLAY_OPTIONS.warn,
              enabled:
                null !== (a = e.overlay) && void 0 !== a
                  ? a
                  : E.DEFAULT_OVERLAY_OPTIONS.enabled,
              allowHook:
                null !== (o = e.hook) && void 0 !== o
                  ? o
                  : E.DEFAULT_OVERLAY_OPTIONS.allowHook,
              supportsOutOfProcessOverlay: e.supportsOutOfProcessOverlay,
            };
          }
          [...n, ...M].forEach(n => {
            var i;
            let r =
                null != n.executables
                  ? null === (i = n.executables) || void 0 === i
                    ? void 0
                    : i.filter(e => {
                        let { os: t } = e;
                        return t === (0, v.getPlatformName)();
                      })
                  : [],
              s = {};
            r.forEach(e => {
              let n =
                null != e.arguments && e.arguments.length > 0
                  ? e.arguments
                  : "null";
              null == s[n] && (s[n] = []),
                s[n].push(e.name),
                e.isLauncher && t.add(e.name);
            }),
              Object.keys(s).forEach(t =>
                e.push({
                  name: n.name,
                  id: n.id,
                  executables: s[t],
                  cmdLine: "null" !== t ? t : null,
                })
              );
          }),
            (e = e.filter(
              e => null != e.executables && e.executables.length > 0
            )),
            A.default.setObservedGamesCallback(e, e => {
              let n = [],
                r = {};
              e = e.filter(
                e => (
                  (e.distributor = (function (e) {
                    if (null != B[e.exePath]) return y.Distributors.DISCORD;
                    if (/steamapps/.test(e.cmdLine))
                      return y.Distributors.STEAM;
                    if (/-epicapp/.test(e.cmdLine)) return y.Distributors.EPIC;
                    return e.distributor;
                  })(e)),
                  (e.isLauncher = t.has(e.exeName)),
                  e.isLauncher && null != e.id && (r[e.id] = e),
                  (e.windowHandle = (function (e, t) {
                    if (void 0 === t) {
                      let t = A.default.getDiscordUtils();
                      if (null != t && null != t.getWindowHandleFromPid) {
                        let n = t.getWindowHandleFromPid(e);
                        return null != n && "0" !== n ? n : null;
                      }
                      return null;
                    }
                    return "0" === t ? null : t;
                  })(e.pid, e.windowHandle)),
                  null ==
                    M.find(t => {
                      let { name: n } = t;
                      return n === e.name;
                    }) || (n.push(e), !1)
                )
              );
              let s = n.filter(J).length;
              s !== K &&
                ((K = s),
                f.default.dispatch({
                  type: "RUNNING_STREAMER_TOOLS_CHANGE",
                  count: K,
                })),
                (x = e),
                (V = n),
                (i = r),
                $();
            }),
            eo();
        });
      class ec extends c.default.Store {
        initialize() {
          var e, t, n, i;
          let r =
            null !== (e = d.default.get(b)) && void 0 !== e
              ? e
              : {
                  gamesSeen: [],
                  gameOverrides: {},
                  enableOverlay: {},
                  enableDetection: {},
                };
          j.gameOverrides = {};
          let s = !1;
          if (
            (o
              .values(null !== (t = r.gameOverrides) && void 0 !== t ? t : {})
              .forEach(e => {
                let t = ee(e);
                j.gameOverrides[t] = e;
              }),
            (j.enableOverlay =
              null !== (n = r.enableOverlay) && void 0 !== n ? n : {}),
            (j.enableDetection =
              null !== (i = r.enableDetection) && void 0 !== i ? i : {}),
            eo(),
            Array.isArray(r.gamesSeen))
          )
            for (let e of r.gamesSeen)
              "number" == typeof e.id &&
                ((e.nativeProcessObserverId = e.id), delete e.id, (s = !0));
          el(r.gamesSeen),
            this.waitFor(N.default),
            this.syncWith(
              [O.default, N.default, D.default],
              o.throttle(ea, 1e3)
            ),
            s && er();
        }
        getVisibleGame() {
          return null != F && (F.hidden || !ei(F)) ? null : F;
        }
        getCurrentGameForAnalytics() {
          return F;
        }
        getRunningDiscordApplicationIds() {
          let e = [];
          for (let t of x) null != B[t.exePath] && e.push(B[t.exePath]);
          return e;
        }
        getRunningVerifiedApplicationIds() {
          return this.getRunningGames()
            .map(e => N.default.getGameByName(e.name))
            .filter(C.isNotNullish)
            .map(e => e.id);
        }
        getGameForPID(e) {
          var t;
          return null !== (t = x.find(t => t.pid === e)) && void 0 !== t
            ? t
            : null;
        }
        getLauncherForPID(e) {
          let t = this.getGameForPID(e);
          return null != t ? (null != t.id ? i[t.id] : null) : null;
        }
        getOverlayOptionsForPID(e) {
          let t = this.getGameForPID(e);
          return null == t || t.isLauncher || null == t.id
            ? null
            : { ...W[t.id] };
        }
        shouldElevateProcessForPID(e) {
          return null != z && z === e;
        }
        shouldContinueWithoutElevatedProcessForPID(e) {
          return null != q && q === e;
        }
        getCandidateGames() {
          return k
            .filter(e => e.hidden || null == e.id)
            .filter(e => void 0 === j.gameOverrides[ee(e)]);
        }
        getRunningGames() {
          return x;
        }
        getGamesSeen(e) {
          let t =
              !(arguments.length > 1) ||
              void 0 === arguments[1] ||
              arguments[1],
            n = eu();
          if (e) {
            let e = this.getVisibleGame();
            if (null != e) {
              let t = ee(e);
              n = n.filter(e => ee(e) !== t);
            }
          }
          return t && n.sort((e, t) => t.lastFocused - e.lastFocused), n;
        }
        getSeenGameByName(e) {
          return j.gamesSeen.find(
            t => null != t.name && t.name.toLowerCase() === e.toLowerCase()
          );
        }
        isObservedAppRunning(e) {
          return V.some(t => t.name === e);
        }
        getOverrides() {
          return Object.values(j.gameOverrides);
        }
        getOverrideForGame(e) {
          return j.gameOverrides[ee(e)];
        }
        getGameOverlayStatus(e) {
          if (e.hidden || e.isLauncher || e.elevated || e.sandboxed)
            return (
              L.verbose("getGameOverlayStatus: Overlay not supported.", e), null
            );
          let t = en(e);
          return t.enabled ? t : null;
        }
        getObservedAppNameForWindow(e) {
          var t, n;
          return null !==
            (n =
              null === (t = V.find(t => (0, S.default)(e, t.windowHandle))) ||
              void 0 === t
                ? void 0
                : t.name) && void 0 !== n
            ? n
            : null;
        }
        get canShowAdminWarning() {
          return U;
        }
      }
      ec.displayName = "RunningGameStore";
      var ed = new ec(f.default, {
        RUNNING_GAMES_CHANGE: function (e) {
          el(x);
        },
        CANDIDATE_GAMES_CHANGE: function (e) {
          k = e.games;
        },
        PERMISSION_CLEAR_PTT_ADMIN_WARNING: function () {
          U = !1;
        },
        PERMISSION_REQUEST_ELEVATED_PROCESS: function (e) {
          let { pid: t } = e;
          (z = t), (q = null);
        },
        PERMISSION_CLEAR_ELEVATED_PROCESS: function () {
          z = null;
        },
        PERMISSION_CONTINUE_NONELEVATED_PROCESS: function (e) {
          let { pid: t } = e;
          (q = t), (z = null);
        },
        RUNNING_GAME_ADD_OVERRIDE: function (e) {
          let t;
          let n = e.pid,
            i = x.find(e => e.pid === n);
          if (null == i) {
            let e = k.find(e => e.pid === n);
            if (null == e) return;
            ((i = { ...e }).hidden = !1), x.push(i), (t = ee(i));
          } else (t = ee(i)), i.hidden && (H[t] = !0), (i.hidden = !1);
          (null == i.lastFocused || 0 === i.lastFocused) &&
            (i.lastFocused = Math.floor(Date.now() / 1e3)),
            (j.gameOverrides[t] = { ...i, add: !0 }),
            el(x),
            eo(),
            er(),
            $();
        },
        RUNNING_GAME_TOGGLE_OVERLAY: function (e) {
          if (
            ((j.enableOverlay[ee(e.game)] = e.newEnabledValue),
            er(),
            !__OVERLAY__)
          ) {
            let t =
              null != e.game.id ? N.default.getDetectableGame(e.game.id) : null;
            null != t &&
              T.default.track(y.AnalyticEvents.OVERLAY_TOGGLED, {
                enabled: e.newEnabledValue,
                setting_type: "overlay toggled - game",
                application_id: t.id,
                application_name: t.name,
              });
          }
        },
        RUNNING_GAME_TOGGLE_DETECTION: function (e) {
          let { game: t } = e,
            n = ei(t);
          (j.enableDetection[ee(t)] = !n),
            er(),
            T.default.track(
              y.AnalyticEvents.USER_SETTINGS_GAME_DETECTION_TOGGLE,
              { enabled: !n }
            );
        },
        RUNNING_GAME_EDIT_NAME: function (e) {
          let t = ee(e.game),
            n = j.gameOverrides[t];
          if (null == n) {
            var i;
            (n = {
              name: (i = e.game).name,
              exePath: i.exePath,
              cmdLine: i.cmdLine,
              lastFocused: i.lastFocused,
            }).add = !0;
          }
          n.name = e.newName;
          let r = ee(n);
          delete j.gameOverrides[t],
            (j.gameOverrides[r] = n),
            Q(j.enableOverlay, t, r),
            Q(j.enableDetection, t, r),
            Q(H, t, r),
            j.gamesSeen.forEach(n => {
              ee(n) === t && (n.name = e.newName);
            });
          let s = !1;
          x.forEach(n => {
            ee(n) === t && ((n.name = e.newName), (s = !0));
          }),
            eo(),
            er(),
            s && $();
        },
        RUNNING_GAME_DELETE_ENTRY: function (e) {
          let t = ee(e.game);
          delete j.gameOverrides[t],
            delete j.enableOverlay[t],
            delete j.enableDetection[t],
            (j.gamesSeen = j.gamesSeen.filter(e => ee(e) !== t)),
            H[t] &&
              (x.forEach(e => {
                t === ee(e) && (e.hidden = !0);
              }),
              delete H[t],
              $()),
            eo(),
            er();
        },
        GAMES_DATABASE_UPDATE: Y,
        GAME_LAUNCH_SUCCESS: function (e) {
          var t;
          if (__OVERLAY__ || !v.isPlatformEmbedded) return;
          let n = A.default.getDiscordUtils().notifyGameLaunched;
          if (null == n) return;
          let i = N.default.getDetectableGame(e.applicationId);
          null != i &&
            n(i.id, i.name, null !== (t = e.pids) && void 0 !== t ? t : []);
        },
        GAME_DETECTION_WATCH_CANDIDATE_GAMES_START: function () {
          eo();
        },
      });
    },
    18494: function (e, t, n) {
      "use strict";
      let i, r, s, a, o, l, u;
      n.r(t),
        n.d(t, {
          findFirstVoiceChannelId: function () {
            return k;
          },
          default: function () {
            return H;
          },
        }),
        n("222007"),
        n("808653");
      var c = n("917351"),
        d = n.n(c),
        f = n("446674"),
        E = n("95410"),
        p = n("913144"),
        h = n("21121"),
        _ = n("934306"),
        S = n("393414"),
        m = n("233069"),
        T = n("449008"),
        g = n("271938"),
        I = n("42203"),
        C = n("923959"),
        v = n("305961"),
        A = n("42887"),
        R = n("162771"),
        N = n("49111"),
        O = n("724210");
      let D = "SelectedChannelStore",
        y = {},
        P = {},
        L = {},
        b = new Set();
      function M(e) {
        return String(e);
      }
      function U() {
        !__OVERLAY__ &&
          E.default.set(D, {
            selectedChannelId: s,
            selectedVoiceChannelId: o,
            lastChannelFollowingDestination: a,
            lastConnectedTime: l,
            selectedChannelIds: y,
            mostRecentSelectedTextChannelIds: L,
            knownThreadIds: d(y)
              .values()
              .concat(d.values(L))
              .filter(T.isNotNullish)
              .uniq()
              .filter(e => {
                let t = I.default.getBasicChannel(e);
                return (
                  b.has(e) || (null != t && m.THREAD_CHANNEL_TYPES.has(t.type))
                );
              })
              .value(),
          });
      }
      function G(e) {
        if (null != e) {
          let t = C.default.getDefaultChannel(e);
          if (null != t) return t.id;
        }
      }
      function w(e, t) {
        if (null == e || null == t || L[e] === t) return !1;
        let n = I.default.getChannel(t),
          i = null != n && (0, m.isGuildTextChannelType)(n.type),
          r = (null == n ? void 0 : n.getGuildId()) === e;
        return !!i && !!r && ((L[e] = t), !0);
      }
      function k(e) {
        let t = I.default.getMutableBasicGuildChannelsForGuild(e),
          n = d.find(t, e => e.type === N.ChannelTypes.GUILD_VOICE);
        return null == n ? void 0 : n.id;
      }
      function x() {
        let e = !1,
          t = v.default.getGuilds();
        return (
          d.each(y, (t, n) => {
            (null == t ||
              (!I.default.hasChannel(t) &&
                t !== s &&
                !b.has(t) &&
                !(0, O.isGuildHomeChannel)(t))) &&
              (delete y[n], delete P[n], (e = !0));
          }),
          d.each(L, (t, n) => {
            (null == t || (!I.default.hasChannel(t) && !b.has(t))) &&
              (delete L[n], (e = !0));
          }),
          d.each(t, e => {
            let t = y[e.id];
            null == L[e.id] && w(e.id, t);
          }),
          null != l && Date.now() - l >= 3e5 && ((o = null), (e = !0)),
          e
        );
      }
      function F(e, t) {
        if ((b.delete(e), null == t)) {
          let n = R.default.getGuildId();
          y[M(n)] === e && (t = n);
        }
        let n = null != v.default.getGuild(t) ? t : null,
          i = !1;
        o === e && ((o = null), (i = !0)),
          !(0, h.isInMainTabsExperiment)() &&
            (y[M(n)] === e &&
              ((y[M(n)] = G(M(n))),
              R.default.getGuildId() === n &&
                (0, S.replaceWith)(N.Routes.CHANNEL(t, y[M(n)])),
              (i = !0)),
            null != n && L[n] === e && (delete L[n], (i = !0))),
          i && U();
      }
      function V(e) {
        let {
          channel: { id: t, guild_id: n },
        } = e;
        F(t, n);
      }
      class B extends f.default.Store {
        initialize() {
          if (!__OVERLAY__) {
            var e, t;
            let n =
              null !== (e = E.default.get(D)) && void 0 !== e
                ? e
                : {
                    selectedChannelId: s,
                    selectedVoiceChannelId: o,
                    lastChannelFollowingDestination: a,
                    lastConnectedTime: l,
                    selectedChannelIds: y,
                    mostRecentSelectedTextChannelIds: L,
                  };
            null != n.knownThreadIds && (b = new Set(n.knownThreadIds)),
              (o = n.selectedVoiceChannelId),
              (a = n.lastChannelFollowingDestination),
              (l = n.lastConnectedTime),
              (L =
                null !== (t = n.mostRecentSelectedTextChannelIds) &&
                void 0 !== t
                  ? t
                  : {}),
              null != n.selectedChannelIds &&
                (y = { ...n.selectedChannelIds, null: null });
          }
          this.mustEmitChanges(
            e =>
              "CONNECTION_OPEN" !== e.type && "VOICE_STATE_UPDATES" !== e.type
          ),
            this.waitFor(v.default, I.default, R.default, C.default, A.default);
        }
        getChannelId(e) {
          var t, n;
          let i =
              !(arguments.length > 1) ||
              void 0 === arguments[1] ||
              arguments[1],
            r = M(
              e === N.ME
                ? null
                : null !== (t = null != e ? e : R.default.getGuildId()) &&
                    void 0 !== t
                  ? t
                  : null
            );
          return i ? (null !== (n = y[r]) && void 0 !== n ? n : G(r)) : y[r];
        }
        getVoiceChannelId() {
          return A.default.isSupported() ? o : null;
        }
        getMostRecentSelectedTextChannelId(e) {
          var t;
          return null == e
            ? null
            : null !== (t = L[e]) && void 0 !== t
              ? t
              : null;
        }
        getCurrentlySelectedChannelId(e) {
          return null != e ? y[e] : s;
        }
        getLastSelectedChannelId(e) {
          return null != e ? P[e] : r;
        }
        getLastSelectedChannels(e) {
          return P[e];
        }
        getLastChannelFollowingDestination() {
          return a;
        }
      }
      B.displayName = "SelectedChannelStore";
      var H = new B(p.default, {
        CONNECTION_OPEN: function (e) {
          (i = e.sessionId),
            null != o && null == I.default.getChannel(o) && (o = null);
          let t = x();
          t && U();
        },
        OVERLAY_INITIALIZE: function (e) {
          (i = e.sessionId),
            (o = e.selectedVoiceChannelId),
            (y = {}),
            (P = {}),
            (s = e.selectedChannelId),
            (y[e.selectedGuildId] = e.selectedChannelId),
            w(e.selectedGuildId, s),
            x();
        },
        CONNECTION_CLOSED: function () {
          i = null;
        },
        CHANNEL_SELECT: function (e) {
          let { guildId: t, channelId: n } = e;
          if (void 0 === t) return !1;
          null == n &&
            (!(0, h.isInMainTabsExperiment)() ||
              (0, _.shouldHandleNewPanelsRoute)(t)) &&
            (n = G(t)),
            null != s && n !== s && (r = s),
            (s = n),
            w(t, n),
            y[M(t)] !== n && ((P[M(t)] = y[M(t)]), (y[M(t)] = s)),
            U();
        },
        CHANNEL_CREATE: function (e) {
          let { channel: t } = e;
          switch (t.type) {
            case N.ChannelTypes.GUILD_ANNOUNCEMENT:
            case N.ChannelTypes.GUILD_TEXT:
              let n = t.guild_id;
              if (
                (null != n && null == L[n] && (L[n] = t.id),
                null != n && null == y[n])
              )
                return (y[n] = G(n)), !0;
          }
          return !1;
        },
        CHANNEL_DELETE: V,
        CHANNEL_UPDATES: function (e) {
          let { channels: t } = e;
          for (let e of t) e.isScheduledForDeletion() && F(e.id, e.guild_id);
        },
        THREAD_DELETE: V,
        GUILD_CREATE: function (e) {
          let { guild: t } = e;
          if (null == y[t.id]) {
            let e = G(t.id);
            (y[t.id] = e), w(t.id, e), U();
          }
        },
        GUILD_DELETE: function (e) {
          let {
            guild: { id: t, unavailable: n },
          } = e;
          if ((o === y[t] && (o = null), n)) return !1;
          delete L[t], delete y[t], U();
        },
        VOICE_CHANNEL_SELECT: function (e) {
          let { channelId: t } = e;
          if (null == t) {
            let e = I.default.getChannel(o),
              t = null == e ? void 0 : e.guild_id;
            null != t &&
              t !== R.default.getGuildId() &&
              y[t] === o &&
              (y[t] = G(t));
          }
          (o = t), U();
        },
        VOICE_STATE_UPDATES: function (e) {
          let { voiceStates: t } = e;
          return t.reduce((e, t) => {
            var n, r, s;
            if (t.sessionId === i) {
              clearInterval(u);
              let e =
                null === (n = I.default.getChannel(o)) || void 0 === n
                  ? void 0
                  : n.getGuildId();
              (t.guildId !== e && null == t.channelId) || (o = t.channelId),
                (l = Date.now()),
                null != o &&
                  (u = setInterval(() => {
                    (l = Date.now()), U();
                  }, 6e4)),
                U();
            } else {
              if (t.userId !== g.default.getId()) return e;
              clearInterval(u), (u = void 0), (l = 0);
              let n =
                  null === (r = I.default.getChannel(o)) || void 0 === r
                    ? void 0
                    : r.getGuildId(),
                i =
                  null === (s = I.default.getChannel(t.channelId)) ||
                  void 0 === s
                    ? void 0
                    : s.getGuildId();
              null != n && i === n && (o = null), U();
            }
            return !0;
          }, !1);
        },
        CHANNEL_FOLLOWER_CREATED: function (e) {
          let { channelId: t, guildId: n } = e;
          (null == a || t !== a.channelId) &&
            ((a = { channelId: t, guildId: n }), U());
        },
        LOGOUT: function () {
          (y = {}),
            (s = null),
            (r = void 0),
            (L = {}),
            (a = {}),
            (o = null),
            E.default.remove(D);
        },
      });
    },
    162771: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return S;
          },
        });
      var i = n("446674"),
        r = n("913144"),
        s = n("982527");
      n("21121");
      var a = n("393414"),
        o = n("271938"),
        l = n("305961"),
        u = n("49111");
      let c = null,
        d = null,
        f = {};
      function E() {
        null != c &&
          null == l.default.getGuild(c) &&
          null == s.default.getRequest(c) &&
          (c = null),
          null != d &&
            null == l.default.getGuild(d) &&
            null == s.default.getRequest(d) &&
            (d = null),
          p(c);
      }
      function p(e) {
        null != e && (f[e] = Date.now());
      }
      function h(e) {
        let t = !1;
        return (
          delete f[e],
          d === e && ((d = null), (t = !0)),
          c === e &&
            (Object.values(l.default.getGuilds()).find(t => t.id !== e),
            (c = null),
            (0, a.replaceWith)(u.Routes.ME),
            (t = !0)),
          t
        );
      }
      class _ extends i.default.PersistedStore {
        initialize(e) {
          var t, n, i;
          this.mustEmitChanges(e => "CONNECTION_OPEN" !== e.type),
            this.waitFor(l.default, o.default),
            (f =
              null !==
                (t = null == e ? void 0 : e.selectedGuildTimestampMillis) &&
              void 0 !== t
                ? t
                : {}),
            (c =
              null !== (n = null == e ? void 0 : e.selectedGuildId) &&
              void 0 !== n
                ? n
                : null),
            (d =
              null !== (i = null == e ? void 0 : e.lastSelectedGuildId) &&
              void 0 !== i
                ? i
                : null);
        }
        getState() {
          return {
            selectedGuildTimestampMillis: f,
            selectedGuildId: c,
            lastSelectedGuildId: d,
          };
        }
        getGuildId() {
          return c;
        }
        getLastSelectedGuildId() {
          return d;
        }
        getLastSelectedTimestamp(e) {
          return c === e ? -1 : f[e];
        }
      }
      (_.displayName = "SelectedGuildStore"),
        (_.persistKey = "SelectedGuildStore");
      var S = new _(r.default, {
        CONNECTION_OPEN: E,
        OVERLAY_INITIALIZE: function (e) {
          (c = e.selectedGuildId), (d = void 0), E();
        },
        CHANNEL_SELECT: function (e) {
          let { guildId: t } = e;
          if (c === t) return !1;
          p(c), p(t), null != t && (d = t), (c = t);
        },
        GUILD_MEMBER_REMOVE: function (e) {
          let { guildId: t, user: n } = e;
          return n.id === o.default.getId() && h(t);
        },
        GUILD_DELETE: function (e) {
          let {
            guild: { id: t, unavailable: n },
          } = e;
          return !0 !== n && h(t);
        },
        LOGOUT: function () {
          (c = null), (d = null);
        },
      });
    },
    235660: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return f;
          },
        });
      var i = n("917351"),
        r = n.n(i),
        s = n("446674"),
        a = n("913144"),
        o = n("271938");
      let l = Object.freeze([]),
        u = {};
      function c(e) {
        (u = {}),
          e.sessions.forEach(e => {
            u[e.sessionId] = e;
          });
      }
      class d extends s.default.Store {
        initialize() {
          this.waitFor(o.default);
        }
        getSessions() {
          return u;
        }
        getSession() {
          let e = o.default.getSessionId();
          return null != e ? this.getSessionById(e) : null;
        }
        getRemoteActivities() {
          let e = o.default.getSessionId(),
            t = r.find(u, t => t.active && t.sessionId !== e);
          return null != t ? t.activities : l;
        }
        getSessionById(e) {
          return u[e];
        }
        getActiveSession() {
          return r.find(u, e => {
            let { active: t } = e;
            return t;
          });
        }
      }
      d.displayName = "SessionsStore";
      var f = new d(a.default, { CONNECTION_OPEN: c, SESSIONS_REPLACE: c });
    },
    455079: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        }),
        n("424973");
      var i,
        r,
        s = n("627445"),
        a = n.n(s),
        o = n("446674"),
        l = n("95410"),
        u = n("913144");
      ((i = class e extends o.default.Store {
        static clearAll() {
          e.allStores.forEach(e => e.clear());
        }
        registerActionHandlers(e) {
          return (
            a(
              !("CLEAR_CACHES" in e),
              "SnapshotStores cannot use the 'CLEAR_CACHES' action"
            ),
            a(
              !("WRITE_CACHES" in e),
              "SnapshotStores cannot use the 'WRITE_CACHES' action"
            ),
            super.registerActionHandlers({
              ...e,
              CLEAR_CACHES: () => this.clear(),
              WRITE_CACHES: () => this.save(),
            })
          );
        }
        get persistKey() {
          return "".concat(this.getClass().displayName, "-snapshot");
        }
        clear() {
          l.default.remove(this.persistKey);
        }
        save() {
          l.default.set(this.persistKey, this.takeSnapshot());
        }
        readSnapshot(e) {
          let t = l.default.get(this.persistKey);
          return null == t || t.version !== e ? null : t.data;
        }
        getClass() {
          return this.constructor;
        }
        constructor() {
          super(u.default, null),
            a(
              null != this.getClass().displayName,
              "Snapshot stores need a display name"
            ),
            e.allStores.push(this);
        }
      }).allStores = []),
        (r = i);
    },
    677099: function (e, t, n) {
      "use strict";
      let i;
      n.r(t),
        n.d(t, {
          default: function () {
            return b;
          },
        }),
        n("70102"),
        n("222007");
      var r = n("714617"),
        s = n.n(r),
        a = n("627445"),
        o = n.n(a),
        l = n("674644"),
        u = n("267567"),
        c = n("374363"),
        d = n("117362"),
        f = n("449008"),
        E = n("341542"),
        p = n("26989"),
        h = n("305961"),
        _ = n("455079"),
        S = n("282109"),
        m = n("697218");
      let T = new l.GuildsTree();
      function g(e) {
        switch (e.type) {
          case l.GuildsNodeType.FOLDER:
            return {
              folderId: e.id,
              folderName: e.name,
              folderColor: e.color,
              expanded: e.expanded,
              guildIds: e.children.map(e => e.id),
            };
          case l.GuildsNodeType.GUILD:
            return { folderId: void 0, guildIds: [e.id] };
          default:
            throw Error("[SortedGuildStore] Unexpected guilds tree node type.");
        }
      }
      function I(e, t) {
        let n = T;
        if (((T = new l.GuildsTree()), 0 === e.length && t.length > 0))
          for (let e of t) T.addNode((0, l.createGuildNode)(e));
        else
          for (let t of e)
            if (0 !== t.guildIds.length) {
              if (null == t.folderId)
                T.addNode((0, l.createGuildNode)(t.guildIds[0]));
              else {
                let e = (0, l.createFolderNode)(t);
                for (let n of (T.addNode(e), t.guildIds))
                  T.addNode((0, l.createGuildNode)(n), e);
              }
            }
        for (let e of T.allNodes())
          e.type === l.GuildsNodeType.GUILD &&
            (u.default.isLurking(e.id) ||
              p.default.isCurrentUserGuest(e.id) ||
              (null == h.default.getGuild(e.id) &&
                !E.default.isUnavailable(e.id))) &&
            T.removeNode(e);
        for (let e of Object.values(T.nodes))
          e.type === l.GuildsNodeType.FOLDER &&
            0 === e.children.length &&
            T.removeNode(e);
        return (
          !(function (e, t) {
            for (let n in h.default.getGuilds())
              e(n) &&
                !u.default.isLurking(n) &&
                !p.default.isCurrentUserGuest(n) &&
                t(n);
          })(
            e => null == T.nodes[e],
            e => T.addNode((0, l.createGuildNode)(e), T.root, !1)
          ),
          !s(n, T)
        );
      }
      function C() {
        var e, t, n;
        return I(
          null !== (t = c.default.getGuildFolders()) && void 0 !== t ? t : [],
          null !==
            (n =
              null === (e = c.default.settings.guildFolders) || void 0 === e
                ? void 0
                : e.guildPositions) && void 0 !== n
            ? n
            : []
        );
      }
      function v() {
        var e, t;
        let n = c.default.getGuildFolders();
        return (
          !(null != i && s(i, n)) &&
          I(
            null != (i = n) ? i : [],
            null !==
              (t =
                null === (e = c.default.settings.guildFolders) || void 0 === e
                  ? void 0
                  : e.guildPositions) && void 0 !== t
              ? t
              : []
          )
        );
      }
      function A(e) {
        let { sourceId: t, targetId: n, moveToBelow: i, combine: r } = e,
          s = T.getNode(t),
          a = T.getNode(n);
        if (null == s || null == a) return !1;
        if (
          (o(
            !(r && s.type === l.GuildsNodeType.FOLDER),
            "[SORTED GUILDS] Can't combine a folder ".concat(
              s.id,
              " with another guilds list item"
            )
          ),
          o(
            !(r && null != a.parentId),
            "[SORTED GUILDS] Can't combine with a guild ".concat(
              a.id,
              " that's already inside of a folder"
            )
          ),
          o(
            !(s.type === l.GuildsNodeType.FOLDER && null != a.parentId),
            "[SORTED GUILDS] Can't move a folder "
              .concat(s.id, " to inside of another folder ")
              .concat(a.parentId)
          ),
          r)
        ) {
          let e = a.type !== l.GuildsNodeType.FOLDER ? T.convertToFolder(a) : a;
          T.moveInto(s, e, i);
        } else T.moveNextTo(s, a, i);
      }
      function R(e) {
        let { sourceIds: t, name: n } = e,
          i = t.shift();
        if (null == i) return !1;
        let r = T.getNode(i);
        if (null == r) return !1;
        let s = T.convertToFolder(r);
        (s.name = n),
          t.forEach(e => {
            let t = T.getNode(e);
            null != t && T.moveInto(t, s, !0);
          });
      }
      function N(e) {
        let { targetId: t, sourceIds: n, ...i } = e,
          r = T.getNode(t);
        if (null == r || r.type !== l.GuildsNodeType.FOLDER) return !1;
        let s = "" === i.name ? void 0 : i.name;
        if (s !== r.name) {
          let e = T.cloneNode(r);
          o(
            e.id === r.id,
            "[SORTED GUILDS] Replacement folder node must have same id."
          ),
            (e.name = s),
            T.replaceNode(r, e);
        }
        let a = T.getNode(t);
        if (null == a) return !1;
        let u = a.children.map(e => e.id).filter(f.isNotNullish),
          c = new Set(u),
          d = new Set(n),
          E = new Set([...u].filter(e => !d.has(e))),
          p = n.filter(e => !c.has(e));
        p.forEach(e => {
          let t = T.getNode(e);
          null != t && T.moveInto(t, a, !0);
        }),
          E.forEach(e => {
            let t = T.getNode(e);
            null != t && T.moveNextTo(t, a, !0);
          });
      }
      function O(e) {
        let { targetId: t } = e,
          n = T.getNode(t);
        if (null == n || n.type !== l.GuildsNodeType.FOLDER) return !1;
        let i = n.children.map(e => e.id).filter(f.isNotNullish);
        i.forEach(e => {
          let t = T.getNode(e);
          null != t && T.moveNextTo(t, n, !0);
        });
      }
      function D(e) {
        let { guildId: t, joinedAt: n, user: i } = e,
          r = m.default.getCurrentUser(),
          s = h.default.getGuild(t);
        if ((null == r ? void 0 : r.id) !== i.id || null == s) return !1;
        let a = "string" == typeof n ? new Date(n) : n;
        return a !== s.joinedAt && null != a && C();
      }
      let y = (0, d.cachedFunction)((e, t) =>
          e.sortedGuildNodes().map(e => e.id)
        ),
        P = (0, d.cachedFunction)((e, t) => e.getRoots().map(g));
      class L extends _.default {
        getGuildsTree() {
          return T;
        }
        getGuildFolders() {
          return P(T, T.version);
        }
        getGuildFolderById(e) {
          return this.getGuildFolders().find(t => t.folderId === e);
        }
        getFlattenedGuildIds() {
          return y(T, T.version);
        }
        getCompatibleGuildFolders() {
          return T.root.children.map(g);
        }
        takeSnapshot() {
          return {
            version: L.LATEST_SNAPSHOT_VERSION,
            data: { tree: T.getSnapshot() },
          };
        }
        constructor() {
          super(),
            (this.loadCache = () => {
              let e = this.readSnapshot(L.LATEST_SNAPSHOT_VERSION),
                t = null == e ? void 0 : e.tree;
              null != t && (T = new l.GuildsTree()).loadSnapshot(t);
            }),
            this.registerActionHandlers({
              CONNECTION_OPEN: C,
              OVERLAY_INITIALIZE: C,
              CACHE_LOADED_LAZY: this.loadCache,
              GUILD_CREATE: C,
              GUILD_DELETE: C,
              GUILD_MEMBER_ADD: D,
              USER_SETTINGS_PROTO_UPDATE: v,
              GUILD_MOVE_BY_ID: A,
              GUILD_FOLDER_CREATE_LOCAL: R,
              GUILD_FOLDER_EDIT_LOCAL: N,
              GUILD_FOLDER_DELETE_LOCAL: O,
            }),
            this.waitFor(h.default, S.default, c.default, E.default, u.default);
        }
      }
      (L.displayName = "SortedGuildStore"), (L.LATEST_SNAPSHOT_VERSION = 1);
      var b = new L();
    },
    102985: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return E;
          },
        });
      var i = n("446674"),
        r = n("913144"),
        s = n("599110"),
        a = n("271938"),
        o = n("49111");
      function l(e, t) {
        s.default.track(o.AnalyticEvents.STREAMER_MODE_TOGGLE, {
          enabled: e,
          automatic: t,
        });
      }
      let u = {
          enabled: !1,
          autoToggle: !0,
          hideInstantInvites: !0,
          hidePersonalInformation: !0,
          disableSounds: !0,
          disableNotifications: !0,
          enableContentProtection: !1,
        },
        c = {},
        d = { ...u };
      class f extends i.default.PersistedStore {
        initialize(e) {
          Object.assign(c, e),
            this.syncWith([a.default], () => {
              var e;
              let t,
                n = a.default.getId();
              d =
                null != n
                  ? (null == (t = c[(e = n)]) && (t = c[e] = { ...u }), t)
                  : { ...u };
            });
        }
        getState() {
          return c;
        }
        getSettings() {
          return d;
        }
        get enabled() {
          return d.enabled;
        }
        get autoToggle() {
          return d.autoToggle;
        }
        get hideInstantInvites() {
          return this.enabled && d.hideInstantInvites;
        }
        get hidePersonalInformation() {
          return this.enabled && d.hidePersonalInformation;
        }
        get disableSounds() {
          return this.enabled && d.disableSounds;
        }
        get disableNotifications() {
          return this.enabled && d.disableNotifications;
        }
        get enableContentProtection() {
          return this.enabled && d.enableContentProtection;
        }
      }
      (f.displayName = "StreamerModeStore"),
        (f.persistKey = "StreamerModeStore"),
        (f.migrations = [
          e => {
            let t = a.default.getId();
            if (null == e || null == t) return {};
            let n = { [t]: { ...e } };
            return n;
          },
        ]);
      var E = new f(r.default, {
        LOGOUT: function (e) {
          !e.isSwitchingAccount && (c = {});
        },
        MULTI_ACCOUNT_REMOVE_ACCOUNT: function (e) {
          e.userId in c && delete c[e.userId];
        },
        STREAMER_MODE_UPDATE: function (e) {
          let t = { ...d };
          return (
            (d[e.key] = e.value),
            "enabled" === e.key
              ? l(e.value, !1)
              : s.default.track(
                  o.AnalyticEvents.UPDATE_STREAMER_MODE_SETTINGS,
                  {
                    enabled: d.enabled,
                    automatic: d.autoToggle,
                    disable_notifications: d.disableNotifications,
                    disable_sounds: d.disableSounds,
                    hide_instant_invites: d.hideInstantInvites,
                    hide_personal_info: d.hidePersonalInformation,
                    enable_content_protection: d.enableContentProtection,
                    old_enabled: t.enabled,
                    old_automatic: t.autoToggle,
                    old_disable_notifications: t.disableNotifications,
                    old_disable_sounds: t.disableSounds,
                    old_hide_instant_invites: t.hideInstantInvites,
                    old_hide_personal_info: t.hidePersonalInformation,
                    old_enable_content_protection: t.enableContentProtection,
                  }
                ),
            !0
          );
        },
        RUNNING_STREAMER_TOOLS_CHANGE: function (e) {
          if (!d.autoToggle) return !1;
          {
            let t = e.count > 0;
            return (d.enabled = t), l(t, !0), !0;
          }
        },
      });
    },
    282109: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getGuildDefaults: function () {
            return H;
          },
          convertChannelOverridesToMap: function () {
            return j;
          },
          default: function () {
            return Z;
          },
        }),
        n("222007"),
        n("702976");
      var i = n("917351"),
        r = n.n(i),
        s = n("446674"),
        a = n("913144"),
        o = n("668597"),
        l = n("38654"),
        u = n("640497"),
        c = n("755624"),
        d = n("233069"),
        f = n("568734"),
        E = n("299039"),
        p = n("42203"),
        h = n("305961"),
        _ = n("697218"),
        S = n("49111"),
        m = n("76618"),
        T = n("133335"),
        g = n("397336");
      let I = {},
        C = {},
        v = !1,
        A = !1,
        R = { flags: 0 },
        N = new o.default(),
        O = new o.default(),
        D = {
          suppress_everyone: !1,
          suppress_roles: !1,
          mute_scheduled_events: !1,
          mobile_push: !0,
          muted: !1,
          message_notifications: S.UserNotificationSettings.ALL_MESSAGES,
          flags: 0,
          channel_overrides: {},
          notify_highlights: S.HighlightSettings.NULL,
          hide_muted_channels: !1,
          version: -1,
          mute_config: null,
        },
        y = {
          [S.UserNotificationSettings.ALL_MESSAGES]: {
            ...D,
            message_notifications: S.UserNotificationSettings.ALL_MESSAGES,
          },
          [S.UserNotificationSettings.ONLY_MENTIONS]: {
            ...D,
            message_notifications: S.UserNotificationSettings.ONLY_MENTIONS,
          },
        },
        P = {},
        L = {},
        b = new Set(),
        M = {},
        U = {};
      function G(e, t) {
        var n;
        let i = I[e],
          s =
            null !== (n = null == i ? void 0 : i.channel_overrides) &&
            void 0 !== n
              ? n
              : {},
          a = j(t.channel_overrides),
          o = { ...H(e), ...i, ...t, channel_overrides: a };
        N.clearTimer(e),
          r.forEach(s, e => {
            O.clearTimer(e.channel_id);
          }),
          w(e, o),
          (I[e] = o),
          (P[e] = K(I[e]));
        let l = r.filter(o.channel_overrides, e => {
          var t;
          return f.hasFlag(
            null !== (t = e.flags) && void 0 !== t ? t : 0,
            g.ChannelNotificationSettingsFlags.OPT_IN_ENABLED
          );
        });
        (L[e] = new Set(l.map(e => e.channel_id))),
          (function (e) {
            var t;
            if (null == e) return;
            let n = new Set(L[e]),
              i = null !== (t = M[e]) && void 0 !== t ? t : {};
            for (let e in i) {
              let t = i[e];
              f.hasFlag(
                t.flags,
                g.ChannelNotificationSettingsFlags.OPT_IN_ENABLED
              )
                ? n.add(e)
                : n.delete(e);
            }
            Object.keys(i).length > 0 ? (U[e] = n) : delete U[e];
          })(e),
          delete C[e];
      }
      function w(e, t) {
        if (!0 === t.muted) {
          let n = N.setTimer(e, t.mute_config, () => {
            k(e, { muted: !1 }),
              a.default.dispatch({ type: "GUILD_MUTE_EXPIRED", guildId: e });
          });
          n && (t.muted = !1);
        }
        r.forEach(t.channel_overrides, t => {
          if (!0 === t.muted) {
            let n = O.setTimer(t.channel_id, t.mute_config, () => {
              x(e, t.channel_id, { muted: !1 }),
                a.default.dispatch({
                  type: "CHANNEL_MUTE_EXPIRED",
                  guildId: e,
                  channelId: t.channel_id,
                });
            });
            n && (t.muted = !1);
          }
        });
      }
      function k(e, t) {
        var n;
        let i = I[e];
        G(e, {
          channel_overrides:
            null !== (n = null == i ? void 0 : i.channel_overrides) &&
            void 0 !== n
              ? n
              : {},
          ...t,
        });
      }
      function x(e, t, n) {
        let i = B(e, t, n);
        V(e, { [t]: i });
      }
      function F(e, t) {
        var n;
        let i = {},
          r = null !== (n = null != e ? M[e] : null) && void 0 !== n ? n : {};
        Object.keys(t).forEach(n => {
          var s;
          let a = B(e, n, t[n]);
          (i[n] = a),
            (r[n] = { flags: null !== (s = a.flags) && void 0 !== s ? s : 0 });
        }),
          null != e && (M[e] = { ...M[e], ...r }),
          V(e, i);
      }
      function V(e, t) {
        var n;
        let i = I[e],
          r =
            null !== (n = null == i ? void 0 : i.channel_overrides) &&
            void 0 !== n
              ? n
              : {};
        G(e, { channel_overrides: null == i ? t : { ...r, ...t } });
      }
      function B(e, t, n) {
        var i;
        let r = I[e],
          s =
            null !== (i = null == r ? void 0 : r.channel_overrides) &&
            void 0 !== i
              ? i
              : {};
        return { channel_id: t, muted: !1, ...s[t], ...n };
      }
      function H(e) {
        let t = h.default.getGuild(e),
          n =
            null != t
              ? t.defaultMessageNotifications
              : S.UserNotificationSettings.ALL_MESSAGES;
        return y[n];
      }
      function j() {
        let e =
          arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        return e instanceof Array ? r.keyBy(e, "channel_id") : e;
      }
      function Y(e) {
        var t;
        return null !== (t = I[e]) && void 0 !== t ? t : H(e);
      }
      function W(e) {
        (v = f.hasFlag(
          e.flags,
          m.AccountNotificationFlags.USE_NEW_NOTIFICATIONS
        )),
          (A = f.hasFlag(
            e.flags,
            m.AccountNotificationFlags.MENTION_ON_ALL_MESSAGES
          )),
          (R = e);
      }
      function K(e) {
        return new Set(
          null != e.channel_overrides
            ? r(e.channel_overrides)
                .filter(e => (0, o.computeIsMuted)(e))
                .map(e => e.channel_id)
                .value()
            : null
        );
      }
      function z() {
        return !0;
      }
      function q() {
        return (
          v &&
          u.NotificationsExperiment.getCurrentConfig(
            { location: "UserGuildSettingsStore" },
            { autoTrackExposure: !1 }
          ).enabled
        );
      }
      class X extends s.default.PersistedStore {
        initialize(e) {
          if (
            (this.waitFor(_.default, h.default, l.default, c.default),
            null != e)
          ) {
            var t, n;
            (v = null !== (t = e.useNewNotifications) && void 0 !== t && t),
              "userGuildSettings" in e &&
                ((I = e.userGuildSettings),
                (L = r.mapValues(
                  null !== (n = e.optedInChannelsByGuild) && void 0 !== n
                    ? n
                    : {},
                  e => new Set(e)
                )),
                r.forEach(I, (e, t) => {
                  P[t] = K(e);
                }));
          }
        }
        getState() {
          return { useNewNotifications: v };
        }
        get mentionOnAllMessages() {
          return A;
        }
        isSuppressEveryoneEnabled(e) {
          return Y(e).suppress_everyone;
        }
        isSuppressRolesEnabled(e) {
          return Y(e).suppress_roles;
        }
        isMuteScheduledEventsEnabled(e) {
          return Y(e).mute_scheduled_events;
        }
        isMobilePushEnabled(e) {
          return Y(e).mobile_push;
        }
        isMuted(e) {
          let t = Y(e);
          return (0, o.computeIsMuted)(t);
        }
        isTemporarilyMuted(e) {
          let t = Y(e);
          return (0, o.isTemporarilyMuted)(t);
        }
        getMuteConfig(e) {
          let t = Y(e);
          return t.mute_config;
        }
        getMessageNotifications(e) {
          return Y(e).message_notifications;
        }
        getChannelOverrides(e) {
          var t;
          return null !== (t = Y(e).channel_overrides) && void 0 !== t ? t : {};
        }
        getNotifyHighlights(e) {
          return Y(e).notify_highlights;
        }
        getGuildFlags(e) {
          return Y(e).flags;
        }
        getChannelMessageNotifications(e, t) {
          let n = this.getChannelOverrides(e)[t];
          return null == n || null == n.message_notifications
            ? S.UserNotificationSettings.NULL
            : n.message_notifications;
        }
        getChannelMuteConfig(e, t) {
          let n = this.getChannelOverrides(e)[t];
          return null != n ? n.mute_config : null;
        }
        getMutedChannels(e) {
          var t;
          return null !== (t = P[e]) && void 0 !== t ? t : b;
        }
        isChannelMuted(e, t) {
          var n;
          let i = p.default.getChannel(t);
          return (
            (e =
              null !== (n = null == i ? void 0 : i.getGuildId()) && void 0 !== n
                ? n
                : e),
            this.getMutedChannels(e).has(t)
          );
        }
        isCategoryMuted(e, t) {
          let n = p.default.getChannel(t);
          if (null == n) return !1;
          let i = n.parent_id;
          return null != i && this.getMutedChannels(e).has(i);
        }
        resolvedMessageNotifications(e) {
          let t = this.getChannelMessageNotifications(e.guild_id, e.id);
          if (t !== S.UserNotificationSettings.NULL) return t;
          if (null != e.parent_id) {
            let t = this.getChannelMessageNotifications(
              e.guild_id,
              e.parent_id
            );
            if (t !== S.UserNotificationSettings.NULL) return t;
          }
          return this.getMessageNotifications(e.guild_id);
        }
        resolveUnreadSetting(e) {
          if (
            d.THREAD_CHANNEL_TYPES.has(e.type) ||
            (0, d.isPrivate)(e.type) ||
            !q()
          )
            return T.UnreadSetting.ALL_MESSAGES;
          let t = this.getChannelUnreadSetting(e.guild_id, e.id);
          if (t !== T.UnreadSetting.UNSET) return t;
          if (null != e.parent_id) {
            let t = this.getChannelUnreadSetting(e.guild_id, e.parent_id);
            if (t !== T.UnreadSetting.UNSET) return t;
          }
          let n = this.getGuildUnreadSetting(e.guild_id);
          return n !== T.UnreadSetting.UNSET
            ? n
            : this.resolvedMessageNotifications(e) ===
                S.UserNotificationSettings.ALL_MESSAGES
              ? T.UnreadSetting.ALL_MESSAGES
              : T.UnreadSetting.ONLY_MENTIONS;
        }
        isGuildOrCategoryOrChannelMuted(e, t) {
          return (
            this.isMuted(e) ||
            this.isCategoryMuted(e, t) ||
            this.isChannelMuted(e, t)
          );
        }
        allowNoMessages(e) {
          return (
            this.isGuildOrCategoryOrChannelMuted(e.guild_id, e.id) ||
            this.resolvedMessageNotifications(e) ===
              S.UserNotificationSettings.NO_MESSAGES ||
            (this.isOptInEnabled(e.guild_id) &&
              !this.isChannelRecordOrParentOptedIn(e))
          );
        }
        allowAllMessages(e) {
          return (
            !this.isGuildOrCategoryOrChannelMuted(e.guild_id, e.id) &&
            this.resolvedMessageNotifications(e) ===
              S.UserNotificationSettings.ALL_MESSAGES &&
            (!this.isOptInEnabled(e.guild_id) ||
              this.isChannelRecordOrParentOptedIn(e))
          );
        }
        isGuildCollapsed(e) {
          var t;
          return (
            (null === (t = I[e]) || void 0 === t
              ? void 0
              : t.hide_muted_channels) === !0
          );
        }
        getAllSettings() {
          return {
            userGuildSettings: I,
            mutedChannels: P,
            optedInChannelsByGuild: L,
          };
        }
        getChannelIdFlags(e, t) {
          var n;
          let i = this.getChannelOverrides(e)[t];
          return null !== (n = null == i ? void 0 : i.flags) && void 0 !== n
            ? n
            : 0;
        }
        getChannelFlags(e) {
          return this.getChannelIdFlags(e.guild_id, e.id);
        }
        getNewForumThreadsCreated(e) {
          let t = this.getChannelOverrides(e.guild_id)[e.id];
          if (null != t && null != t.flags) {
            if (
              f.hasFlag(
                t.flags,
                g.ChannelNotificationSettingsFlags.NEW_FORUM_THREADS_ON
              )
            )
              return !0;
            if (
              f.hasFlag(
                t.flags,
                g.ChannelNotificationSettingsFlags.NEW_FORUM_THREADS_OFF
              )
            )
              return !1;
          }
          return (
            this.resolvedMessageNotifications(e) ===
            S.UserNotificationSettings.ALL_MESSAGES
          );
        }
        isOptInEnabled(e) {
          return (
            null != e &&
            (l.default.isFullServerPreview(e)
              ? l.default.isOptInEnabled(e)
              : f.hasFlag(
                  this.getGuildFlags(e),
                  g.GuildNotificationSettingsFlags.OPT_IN_CHANNELS_ON
                ))
          );
        }
        isChannelRecordOrParentOptedIn(e, t) {
          return (
            null != e &&
            null != e.guild_id &&
            (this.isChannelOptedIn(e.guild_id, e.id, t) ||
              (null != e.parent_id &&
                this.isChannelOptedIn(e.guild_id, e.parent_id, t)))
          );
        }
        isChannelOrParentOptedIn(e, t, n) {
          return this.isChannelRecordOrParentOptedIn(
            p.default.getChannel(t),
            n
          );
        }
        isChannelOptedIn(e, t) {
          var n, i;
          let r =
            arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          if (null == e) return !1;
          if (l.default.isFullServerPreview(e))
            return l.default.isChannelOptedIn(e, t);
          if (r && null != U[e]) return U[e].has(t);
          let s =
            null !==
              (i =
                null === (n = this.getChannelOverrides(e)[t]) || void 0 === n
                  ? void 0
                  : n.flags) && void 0 !== i
              ? i
              : 0;
          return f.hasFlag(
            s,
            g.ChannelNotificationSettingsFlags.OPT_IN_ENABLED
          );
        }
        getOptedInChannels(e) {
          var t, n;
          return l.default.isFullServerPreview(e)
            ? null !== (t = l.default.getViewingChannels(e)) && void 0 !== t
              ? t
              : b
            : null !== (n = L[e]) && void 0 !== n
              ? n
              : b;
        }
        getOptedInChannelsWithPendingUpdates(e) {
          return U[e];
        }
        getPendingChannelUpdates(e) {
          return M[e];
        }
        getGuildFavorites(e) {
          if (l.default.isFullServerPreview(e)) return null;
          if (null == C[e]) {
            let t = r.filter(this.getChannelOverrides(e), t => {
              var n, i;
              return (
                f.hasFlag(
                  null !== (i = t.flags) && void 0 !== i ? i : 0,
                  g.ChannelNotificationSettingsFlags.FAVORITED
                ) &&
                (null === (n = p.default.getChannel(t.channel_id)) ||
                void 0 === n
                  ? void 0
                  : n.guild_id) === e
              );
            });
            C[e] = t.map(e => e.channel_id);
          }
          return C[e];
        }
        isFavorite(e, t) {
          var n;
          return (
            !l.default.isFullServerPreview(e) &&
            (null === (n = this.getGuildFavorites(e)) || void 0 === n
              ? void 0
              : n.includes(t)) === !0
          );
        }
        isMessagesFavorite(e) {
          var t, n;
          let i =
            null !==
              (n =
                null === (t = this.getChannelOverrides(null)[e]) || void 0 === t
                  ? void 0
                  : t.flags) && void 0 !== n
              ? n
              : 0;
          return f.hasFlag(i, g.ChannelNotificationSettingsFlags.FAVORITED);
        }
        isAddedToMessages(e) {
          var t, n;
          let i =
            null !==
              (n =
                null === (t = this.getChannelOverrides(null)[e]) || void 0 === t
                  ? void 0
                  : t.flags) && void 0 !== n
              ? n
              : 0;
          return f.hasFlag(
            i,
            g.ChannelNotificationSettingsFlags.OPT_IN_ENABLED
          );
        }
        getAddedToMessages() {
          var e;
          return null !== (e = L.null) && void 0 !== e ? e : b;
        }
        get accountNotificationSettings() {
          return R;
        }
        get useNewNotifications() {
          return v;
        }
        getGuildUnreadSetting(e) {
          if (!q()) return T.UnreadSetting.ALL_MESSAGES;
          let t = this.getGuildFlags(e);
          return f.hasFlag(
            t,
            g.GuildNotificationSettingsFlags.UNREADS_ALL_MESSAGES
          )
            ? T.UnreadSetting.ALL_MESSAGES
            : f.hasFlag(
                  t,
                  g.GuildNotificationSettingsFlags.UNREADS_ONLY_MENTIONS
                )
              ? T.UnreadSetting.ONLY_MENTIONS
              : T.UnreadSetting.UNSET;
        }
        resolveGuildUnreadSetting(e) {
          let t = this.getGuildFlags(e.id);
          return !q() ||
            f.hasFlag(t, g.GuildNotificationSettingsFlags.UNREADS_ALL_MESSAGES)
            ? T.UnreadSetting.ALL_MESSAGES
            : f.hasFlag(
                  t,
                  g.GuildNotificationSettingsFlags.UNREADS_ONLY_MENTIONS
                )
              ? T.UnreadSetting.ONLY_MENTIONS
              : e.defaultMessageNotifications ===
                  S.UserNotificationSettings.ALL_MESSAGES
                ? T.UnreadSetting.ALL_MESSAGES
                : T.UnreadSetting.ONLY_MENTIONS;
        }
        getChannelRecordUnreadSetting(e) {
          return this.getChannelUnreadSetting(e.guild_id, e.id);
        }
        getChannelUnreadSetting(e, t) {
          let n = this.getChannelIdFlags(e, t);
          return f.hasFlag(
            n,
            g.ChannelNotificationSettingsFlags.UNREADS_ALL_MESSAGES
          )
            ? T.UnreadSetting.ALL_MESSAGES
            : f.hasFlag(
                  n,
                  g.ChannelNotificationSettingsFlags.UNREADS_ONLY_MENTIONS
                )
              ? T.UnreadSetting.ONLY_MENTIONS
              : T.UnreadSetting.UNSET;
        }
      }
      (X.displayName = "UserGuildSettingsStore"),
        (X.persistKey = "collapsedGuilds");
      let Q = new X(a.default, {
        USER_GUILD_SETTINGS_FULL_UPDATE: function (e) {
          let { userGuildSettings: t } = e;
          t.forEach(e => {
            G(e.guild_id, { channel_overrides: {}, ...e });
          });
        },
        USER_GUILD_SETTINGS_GUILD_UPDATE: function (e) {
          let { guildId: t, settings: n } = e;
          k(t, n);
        },
        USER_GUILD_SETTINGS_GUILD_AND_CHANNELS_UPDATE: function (e) {
          let { guildId: t, settings: n } = e;
          k(t, n), F(t, n.channel_overrides);
        },
        USER_GUILD_SETTINGS_CHANNEL_UPDATE: function (e) {
          let { guildId: t, channelId: n, settings: i } = e;
          null != t &&
            null != i.flags &&
            (M[t] = { ...M[t], [n]: { flags: i.flags } }),
            x(t, n, i);
        },
        USER_GUILD_SETTINGS_CHANNEL_UPDATE_BULK: function (e) {
          let { guildId: t, overrides: n } = e;
          return (
            !(null == t || l.default.isFullServerPreview(t)) && (F(t, n), !0)
          );
        },
        CONNECTION_OPEN: function (e) {
          W(e.notificationSettings),
            N.reset(),
            O.reset(),
            !e.userGuildSettings.partial && ((I = {}), (P = {}), (L = {}));
          let t = new Set();
          for (let n in (e.userGuildSettings.entries.forEach(e => {
            !("channel_overrides" in e) && (e.channel_overrides = {}),
              G(e.guild_id, e),
              null != e.guild_id && t.add(e.guild_id);
          }),
          I))
            !t.has(n) && w(n, I[n]);
        },
        CACHE_LOADED: function (e) {
          null != e.userGuildSettings &&
            0 !== e.userGuildSettings.length &&
            ((I = {}),
            (P = {}),
            (L = {}),
            e.userGuildSettings.forEach(e => {
              let t = e.guild_id;
              I[t] = e;
              let n = new Set(),
                i = new Set();
              for (let t in e.channel_overrides) {
                var r;
                let s = e.channel_overrides[t];
                (0, o.computeIsMuted)(s) && n.add(t),
                  f.hasFlag(
                    null !== (r = s.flags) && void 0 !== r ? r : 0,
                    g.ChannelNotificationSettingsFlags.OPT_IN_ENABLED
                  ) && i.add(t);
              }
              (P[t] = n), (L[t] = i);
            }));
        },
        OVERLAY_INITIALIZE: function (e) {
          let { allUserGuildSettings: t } = e,
            {
              userGuildSettings: n,
              mutedChannels: i,
              optedInChannelsByGuild: r,
            } = t;
          (I = { ...n }),
            (P = {}),
            (L = {}),
            E.default.keys(i).forEach(e => {
              P[e] = new Set(i[e]);
            }),
            E.default.keys(r).forEach(e => {
              L[e] = new Set(r[e]);
            });
        },
        GUILD_CREATE: z,
        GUILD_UPDATE: z,
        GUILD_TOGGLE_COLLAPSE_MUTED: function (e) {
          let { guildId: t } = e,
            n = null == I[t] ? H(t) : I[t];
          I[t] = {
            ...n,
            guild_id: t,
            hide_muted_channels: !0 !== n.hide_muted_channels,
          };
        },
        IMPERSONATE_UPDATE: z,
        IMPERSONATE_STOP: z,
        USER_GUILD_SETTINGS_REMOVE_PENDING_CHANNEL_UPDATES: function (e) {
          let { guildId: t, updates: n } = e;
          if (null == t) return !1;
          let i = M[t];
          if (null == i) return !1;
          for (let e in n) r.isEqual(n[e], i[e]) && delete i[e];
        },
        CLEAR_PENDING_CHANNEL_AND_ROLE_UPDATES: function (e) {
          let { guildId: t } = e;
          if (null == t) return !1;
          delete M[t], delete U[t];
        },
        NOTIFICATION_SETTINGS_UPDATE: function (e) {
          let { settings: t } = e;
          W(t);
        },
        GUILD_MUTE_EXPIRED: () => !0,
        CHANNEL_MUTE_EXPIRED: () => !0,
      });
      var Z = Q;
    },
    697218: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          users: function () {
            return _;
          },
          ASSISTANT_WUMPUS_VOICE_USER: function () {
            return m;
          },
          transformUser: function () {
            return g;
          },
          mergeUser: function () {
            return C;
          },
          default: function () {
            return x;
          },
        }),
        n("222007"),
        n("702976"),
        n("808653"),
        n("581081"),
        n("424973");
      var i = n("917351"),
        r = n("446674"),
        s = n("913144"),
        a = n("234251"),
        o = n("560208"),
        l = n("400205"),
        u = n("946028"),
        c = n("517001"),
        d = n("766274"),
        f = n("568734"),
        E = n("271938"),
        p = n("49111"),
        h = n("646718");
      let _ = {},
        S = 0,
        m = "47835198259242069";
      function T(e, t, n) {
        let i = e;
        (i =
          null == n ? e.removeGuildAvatarHash(t) : e.addGuildAvatarHash(t, n)),
          (_[e.id] = i);
        let r = e !== i;
        return r && S++, r;
      }
      function g(e) {
        let t = e.mfa_enabled;
        null != t && ((e.mfaEnabled = t), delete e.mfa_enabled);
        let n = (0, c.getPremiumTypeFromRawValue)(e.premium_type);
        void 0 !== n && ((e.premiumType = n), delete e.premium_type);
        let i = e.nsfw_allowed;
        null != i && ((e.nsfwAllowed = i), delete e.nsfw_allowed);
        let r = e.public_flags;
        null != r && ((e.publicFlags = r), delete e.public_flags);
        let s = e.purchased_flags;
        void 0 !== s && ((e.purchasedFlags = s), delete e.purchased_flags);
        let o = e.premium_usage_flags;
        void 0 !== o &&
          ((e.premiumUsageFlags = o), delete e.premium_usage_flags),
          null === e.banner_color && delete e.banner_color;
        let l = e.avatar_decoration_data;
        void 0 !== l &&
          ((e.avatarDecorationData = (0, a.parseAvatarDecorationData)(l)),
          delete e.avatar_decoration_data);
        let u = e.global_name;
        return void 0 !== u && ((e.globalName = u), delete e.global_name), e;
      }
      function I(e) {
        return e.id !== E.default.getId();
      }
      function C(e) {
        let t,
          n =
            !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
          i = _[e.id],
          r = void 0 !== e.id && e.id === E.default.getId();
        if (null == i)
          void 0 !== (t = (i = new d.default(e)).premiumType) &&
            r &&
            (i.premiumType = v((0, c.isStaffEnv)(i), i.premiumType));
        else if (n) {
          var s;
          let n = g(e);
          void 0 !==
            (t =
              null !== (s = n.premium_type) && void 0 !== s
                ? s
                : n.premiumType) &&
            r &&
            (0, c.isStaffEnvRawData)(n) &&
            (n = (function (e) {
              var t;
              let n =
                  null !== (t = e.premium_type) && void 0 !== t
                    ? t
                    : e.premiumType,
                i = v((0, c.isStaffEnvRawData)(e), n);
              return (
                void 0 !== e.premiumType
                  ? (e.premiumType = i)
                  : void 0 !== e.premium_type && (e.premium_type = i),
                e
              );
            })(n)),
            (i = i.merge(n));
        }
        (0, c.validatePremiumType)((0, c.isStaffEnv)(i), t, i.premiumType);
        let a = _[e.id] !== i;
        return (_[e.id] = i), a && S++, a;
      }
      function v(e, t) {
        if (!e) return t;
        let n = l.default.getPremiumTypeOverride(),
          i = l.default.getPremiumTypeActual();
        return n === h.UNSELECTED_PREMIUM_TYPE_OVERRIDE ? i : n;
      }
      function A(e, t) {
        var n, i, r, s, a;
        if (
          (null != e.author &&
            "SENDING" !== e.state &&
            I(e.author) &&
            C(e.author, t),
          null === (n = e.mentions) ||
            void 0 === n ||
            n.forEach(e => {
              I(e) && C(e, t);
            }),
          (null === (i = e.interaction) || void 0 === i ? void 0 : i.user) !=
            null &&
            I(null === (r = e.interaction) || void 0 === r ? void 0 : r.user) &&
            C(e.interaction.user, t),
          null === (s = e.attachments) ||
            void 0 === s ||
            s.forEach(e => {
              var n;
              null === (n = e.clip_participants) ||
                void 0 === n ||
                n.forEach(e => {
                  I(e) && C(e, t);
                });
            }),
          (null === (a = e.resolved) || void 0 === a ? void 0 : a.users) !=
            null)
        )
          for (let n in e.resolved.users) {
            let i = e.resolved.users[n];
            I(i) && C(i, t);
          }
      }
      function R(e) {
        null != e.application.bot && C(e.application.bot);
      }
      function N(e) {
        if (null != e.users) {
          for (let t of e.users)
            if (!(t.id in _ && !("incomplete" in t)))
              _[t.id] = new d.default(t);
        }
      }
      function O(e) {
        let { messages: t } = e;
        return t.forEach(e => A(e, !0)), !1;
      }
      function D(e) {
        let { firstMessages: t, owners: n } = e;
        null != t && t.forEach(e => A(e, !0)),
          null != n && n.forEach(e => C(e.user, !0));
      }
      function y(e) {
        let { message: t } = e;
        if (
          (A(t, !0),
          null != t.flags && f.hasFlag(t.flags, p.MessageFlags.URGENT))
        ) {
          let e = _[E.default.getId()];
          return (
            null != e &&
            ((_[E.default.getId()] = e.set(
              "flags",
              f.setFlag(e.flags, p.UserFlags.HAS_UNREAD_URGENT_MESSAGES, !0)
            )),
            !0)
          );
        }
        return !1;
      }
      let P = ["username", "avatar", "global_name", "discriminator", "bot"];
      function L(e) {
        return C(e.user);
      }
      function b(e) {
        return !!e.isMember && C(e.user);
      }
      function M(e) {
        let t = C(e.user),
          n = _[e.user.id];
        if (null == n) return t;
        let { avatar: i, guildId: r } = e;
        return T(n, r, i) || t;
      }
      function U(e) {
        let { users: t } = e;
        t.forEach(e => {
          null == _[e.id] && (_[e.id] = new d.default(e));
        });
      }
      function G(e) {
        return C(e.member.user);
      }
      function w(e) {
        let { request: t } = e,
          { user: n, actioned_by_user: i } = t,
          r = !1;
        return null != n && (r = r || C(n)), null != i && (r = r || C(i)), r;
      }
      class k extends r.default.Store {
        initialize() {
          this.waitFor(E.default);
        }
        getUserStoreVersion() {
          return S;
        }
        getUser(e) {
          if (null != e) return _[e];
        }
        getUsers() {
          return _;
        }
        forEach(e) {
          for (let t in _) if (!1 === e(_[t])) break;
        }
        findByTag(e, t) {
          for (let n in _) {
            let i = _[n];
            if (null != t && i.username === e && i.discriminator === t)
              return i;
            if (null == t && i.username === e && i.isPomelo()) return i;
          }
        }
        filter(e) {
          let t =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            n = [];
          for (let t in _) {
            let i = _[t];
            e(i) && n.push(i);
          }
          return (
            t &&
              n.sort((e, t) =>
                e.username > t.username ? 1 : e.username < t.username ? -1 : 0
              ),
            n
          );
        }
        getCurrentUser() {
          return _[E.default.getId()];
        }
      }
      k.displayName = "UserStore";
      var x = new k(s.default, {
        CONNECTION_OPEN: function (e) {
          let { user: t, users: n, guilds: i } = e;
          delete t.premium,
            delete t.banner_color,
            C(t),
            n.forEach(e => {
              C(e);
            }),
            i.forEach(e => {
              e.members.forEach(t => {
                let n = _[t.user.id];
                null != n && T(n, e.id, t.avatar);
              });
            });
          let r = _[E.default.getId()];
          null != r &&
            (_[m] = new d.default({
              id: m,
              username: "Wumpus",
              discriminator: "0",
              globalName: "Wumpus",
              avatar: "c1f86b313385cb97985f1b118851c28c",
            }));
        },
        CONNECTION_OPEN_SUPPLEMENTAL: function (e) {
          let { guilds: t, lazyPrivateChannels: n } = e;
          t.forEach(e => {
            e.members.forEach(t => {
              let n = _[t.user.id];
              null != n && T(n, e.id, t.avatar);
            });
          }),
            null == n ||
              n.forEach(e => {
                var t;
                null === (t = e.rawRecipients) ||
                  void 0 === t ||
                  t.forEach(e => {
                    C(e);
                  });
              });
        },
        UPDATE_CLIENT_PREMIUM_TYPE: function (e) {
          let { user: t } = e;
          C(t);
        },
        OVERLAY_INITIALIZE: N,
        CACHE_LOADED: N,
        CACHE_LOADED_LAZY: N,
        USER_UPDATE: function (e) {
          let { user: t } = e;
          t.id !== E.default.getId() && C(t);
        },
        CURRENT_USER_UPDATE: function (e) {
          let { user: t } = e;
          C(t);
        },
        PRESENCE_UPDATES: function (e) {
          let { updates: t } = e;
          return t
            .map(e => {
              let t = _[e.user.id];
              if (null == t) return !1;
              let n = P.reduce((n, r) => {
                if (e.user.hasOwnProperty(r)) {
                  let s = t.set((0, i.camelCase)(r), e.user[r]);
                  (n = n || s !== t), (t = s);
                }
                return n;
              }, !1);
              return !!n && ((_[t.id] = t), n);
            })
            .some(e => e);
        },
        SEARCH_FINISH: function (e) {
          let { messages: t } = e;
          return t.forEach(e => O({ messages: e })), !1;
        },
        LOAD_MESSAGES_SUCCESS: O,
        LOAD_MESSAGES_AROUND_SUCCESS: O,
        LOAD_PINNED_MESSAGES_SUCCESS: O,
        LOAD_RECENT_MENTIONS_SUCCESS: O,
        THREAD_LIST_SYNC: function (e) {
          let { mostRecentMessages: t } = e;
          return null == t || t.forEach(e => A(e, !1)), !1;
        },
        MESSAGE_CREATE: y,
        MESSAGE_UPDATE: y,
        GUILD_SETTINGS_LOADED_BANS: function (e) {
          let { bans: t } = e;
          t.forEach(e => C(e.user));
        },
        GUILD_SETTINGS_LOADED_BANS_BATCH: function (e) {
          let { bans: t } = e;
          t.forEach(e => C(e.user));
        },
        GUILD_CREATE: function (e) {
          let { guild: t } = e;
          t.members.forEach(e => {
            let {
              user: { id: n, username: i, avatar: r, discriminator: s, bot: a },
              avatar: o,
            } = e;
            n !== E.default.getId() &&
              C({ id: n, username: i, avatar: r, discriminator: s, bot: a });
            let l = _[n];
            null != l && T(l, t.id, o);
          });
        },
        GUILD_BAN_ADD: L,
        GUILD_BAN_REMOVE: L,
        CHANNEL_RECIPIENT_ADD: b,
        CHANNEL_RECIPIENT_REMOVE: b,
        GUILD_JOIN_REQUEST_CREATE: w,
        GUILD_JOIN_REQUEST_UPDATE: w,
        GUILD_MEMBER_ADD: M,
        GUILD_MEMBER_UPDATE: M,
        GUILD_MEMBERS_CHUNK: function (e) {
          let { members: t, guildId: n } = e;
          return t.reduce((e, t) => {
            let i = C(t.user),
              r = _[t.user.id];
            if (null == r) return i || e;
            let { avatar: s } = t;
            return T(r, n, s) || i || e;
          }, !1);
        },
        THREAD_MEMBER_LIST_UPDATE: function (e) {
          let { members: t } = e,
            n = !1;
          return (
            t.forEach(e => {
              null != e.member && C(e.member.user) && (n = !0),
                null != e.presence && C(e.presence.user) && (n = !0);
            }),
            n
          );
        },
        THREAD_MEMBERS_UPDATE: function (e) {
          let { addedMembers: t } = e,
            n = !1;
          return (
            null == t ||
              t.forEach(e => {
                null != e.member && C(e.member.user) && (n = !0),
                  null != e.presence && C(e.presence.user) && (n = !0);
              }),
            n
          );
        },
        CHANNEL_CREATE: function (e) {
          let {
            channel: { rawRecipients: t },
          } = e;
          return null != t && t.forEach(e => C(e)), !1;
        },
        CHANNEL_UPDATES: function (e) {
          let { channels: t } = e;
          for (let { rawRecipients: e } of t) null != e && e.forEach(e => C(e));
          return !1;
        },
        RELATIONSHIP_ADD: function (e) {
          return C(e.relationship.user);
        },
        LOAD_RELATIONSHIPS_SUCCESS: function (e) {
          let { relationships: t } = e;
          return t.reduce((e, t) => C(t.user) || e, !1);
        },
        FRIEND_SUGGESTION_CREATE: function (e) {
          return C(e.suggestion.suggested_user);
        },
        LOAD_FRIEND_SUGGESTIONS_SUCCESS: function (e) {
          let { suggestions: t } = e;
          return t.reduce((e, t) => C(t.suggested_user) || e, !1);
        },
        AUDIT_LOG_FETCH_SUCCESS: U,
        AUDIT_LOG_FETCH_NEXT_PAGE_SUCCESS: U,
        LOBBY_CREATE: function (e) {
          let { lobby: t } = e;
          return t.members.reduce((e, t) => C(t.user) || e, !1);
        },
        LOBBY_MEMBER_CONNECT: G,
        LOBBY_MEMBER_UPDATE: G,
        GIFT_CODE_RESOLVE_SUCCESS: function (e) {
          let { giftCode: t } = e;
          return null != t.user && C(t.user);
        },
        GUILD_APPLIED_BOOSTS_FETCH_SUCCESS: function (e) {
          let { appliedBoosts: t } = e;
          t.forEach(e => {
            let { user: t } = e;
            null != t && C(t);
          });
        },
        GUILD_FEED_FETCH_SUCCESS: function (e) {
          let { data: t } = e;
          (0, o.getMessagesFromGuildFeedFetch)(t).forEach(e => A(e, !0));
        },
        LOAD_THREADS_SUCCESS: D,
        LOAD_ARCHIVED_THREADS_SUCCESS: D,
        LOAD_FORUM_POSTS: function (e) {
          let { threads: t } = e;
          Object.values(t).forEach(e => {
            let { first_message: t, most_recent_message: n, owner: i } = e;
            null != t && A(t, !0),
              null != n && A(n, !0),
              null != i && null != i.user && C(i.user, !0);
          });
        },
        GUILD_SCHEDULED_EVENT_USERS_FETCH_SUCCESS: function (e) {
          let { guildScheduledEventUsers: t, guildId: n } = e;
          t.forEach(e => {
            let { user: t, member: i } = e;
            if (null == t) return;
            C(t);
            let r = _[t.id],
              s = null == i ? void 0 : i.avatar;
            null != r && null != s && T(r, n, s);
          });
        },
        LOAD_NOTIFICATION_CENTER_ITEMS_SUCCESS: function (e) {
          let { items: t } = e;
          t.forEach(e => {
            null != e.other_user && C(e.other_user);
          });
        },
        NOTIFICATION_CENTER_ITEM_CREATE: function (e) {
          let { item: t } = e;
          null != t.other_user && C(t.other_user);
        },
        LOAD_MESSAGE_REQUESTS_SUPPLEMENTAL_DATA_SUCCESS: function (e) {
          let { supplementalData: t } = e;
          Object.values(t).forEach(e => {
            let { message_preview: t } = e;
            null != t && A(t, !0);
          });
        },
        STORE_APPLICATION_INTERACTION_FAKE_USER: function (e) {
          let { user: t } = e;
          C(t);
        },
        PASSIVE_UPDATE_V1: function (e) {
          var t;
          let n = !1;
          for (let i of null !== (t = e.members) && void 0 !== t ? t : [])
            C(i.user) && (n = !0),
              null != _[i.user.id] &&
                T(_[i.user.id], e.guildId, i.avatar) &&
                (n = !0);
          return n;
        },
        LOCAL_MESSAGES_LOADED: function (e) {
          var t;
          let n = !1;
          for (let i of null !== (t = e.users) && void 0 !== t ? t : [])
            !Object.hasOwn(_, i.id) && (n = C(i) || n);
          return n;
        },
        FETCH_PRIVATE_CHANNEL_INTEGRATIONS_SUCCESS: function (e) {
          let { integrations: t } = e;
          t.forEach(e => R((0, u.createPrivateChannelIntegration)(e)));
        },
        PRIVATE_CHANNEL_INTEGRATION_CREATE: function (e) {
          let { integration: t } = e;
          R((0, u.createPrivateChannelIntegration)(t));
        },
        PRIVATE_CHANNEL_INTEGRATION_UPDATE: function (e) {
          let { integration: t } = e;
          R((0, u.createPrivateChannelIntegration)(t));
        },
        FAMILY_CENTER_INITIAL_LOAD: function (e) {
          let { users: t, familyCenterTeenActivity: n } = e,
            { users: i } = n,
            r = [...t, ...i];
          return r.reduce((e, t) => C(t) || e, !1);
        },
        FAMILY_CENTER_LINKED_USERS_FETCH_SUCCESS: function (e) {
          let { users: t } = e;
          return t.reduce((e, t) => C(t) || e, !1);
        },
        FAMILY_CENTER_TEEN_ACTIVITY_FETCH_SUCCESS: function (e) {
          let { familyCenterTeenActivity: t } = e;
          if (void 0 === t) return;
          let { users: n } = t;
          return n.reduce((e, t) => C(t) || e, !1);
        },
        FAMILY_CENTER_TEEN_ACTIVITY_MORE_FETCH_SUCCESS: function (e) {
          let { familyCenterTeenActivity: t } = e,
            { users: n } = t;
          return n.reduce((e, t) => C(t) || e, !1);
        },
        FAMILY_CENTER_REQUEST_LINK_SUCCESS: function (e) {
          let { users: t } = e;
          return t.reduce((e, t) => C(t) || e, !1);
        },
        FRIEND_FINDER_PYMK_LOADED: function (e) {
          let { users: t } = e;
          return t.reduce((e, t) => C(t) || e, !1);
        },
        MEMBER_SAFETY_GUILD_MEMBER_SEARCH_SUCCESS: function (e) {
          let { members: t } = e,
            n = E.default.getId();
          return t.reduce((e, t) => {
            if (t.member.user.id === n) return e;
            let i = C(t.member.user);
            return i || e;
          }, !1);
        },
      });
    },
    123647: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        });
      var i = n("446674"),
        r = n("913144");
      let s = n("49111").VideoQualityMode.AUTO;
      class a extends i.default.Store {
        get mode() {
          return s;
        }
      }
      a.displayName = "VideoQualityModeStore";
      var o = new a(r.default, {
        SET_CHANNEL_VIDEO_QUALITY_MODE: function (e) {
          s = e.mode;
        },
      });
    },
    800762: function (e, t, n) {
      "use strict";
      let i, r;
      n.r(t),
        n.d(t, {
          default: function () {
            return N;
          },
        }),
        n("808653"),
        n("222007");
      var s = n("917351"),
        a = n.n(s),
        o = n("446674"),
        l = n("913144"),
        u = n("628454"),
        c = n("49111"),
        d = n("99795");
      let f = 0,
        E = 0,
        p = {},
        h = {},
        _ = {},
        S = {},
        m = {};
      function T(e, t) {
        return "".concat(e, ":").concat(t);
      }
      function g(e, t) {
        let n = e[t];
        return null == n && ((n = {}), (e[t] = n)), n;
      }
      function I(e) {
        var t;
        let n = null !== (t = p[c.ME]) && void 0 !== t ? t : {},
          i = {};
        a.each(n, (t, n) => {
          t.channelId !== e && (i[n] = t);
        }),
          (p[c.ME] = i);
      }
      function C(e, t, n) {
        let i = g(p, null != e ? e : c.ME),
          r = i[t],
          s = n(r);
        return r === s
          ? [!1, s, r]
          : (null != r &&
              (delete i[t],
              null != r.channelId &&
                (delete g(h, r.channelId)[t], delete g(_, r.channelId)[t]),
              null != r.sessionId && delete g(S, t)[r.sessionId]),
            null != s &&
              ((i[t] = s),
              null != s.channelId &&
                ((g(h, s.channelId)[t] = s),
                s.selfVideo && (g(_, s.channelId)[t] = s)),
              null != s.sessionId && (g(S, t)[s.sessionId] = s)),
            [!0, s, r]);
      }
      function v(e, t) {
        return C(e, t.userId, e => {
          if (null == t.channelId) return null;
          {
            let n = {
              channelId: t.channelId,
              deaf: t.deaf,
              mute: t.mute,
              requestToSpeakTimestamp: t.requestToSpeakTimestamp,
              selfDeaf: t.selfDeaf,
              selfMute: t.selfMute,
              selfStream: t.selfStream,
              selfVideo: t.selfVideo,
              sessionId: t.sessionId,
              suppress: t.suppress,
              userId: t.userId,
            };
            return null != e ? e.merge(n) : new u.default(n);
          }
        });
      }
      function A(e) {
        let { guild: t } = e;
        a.forEach(p[t.id], e => {
          C(t.id, e.userId, () => null);
        }),
          delete p[t.id];
      }
      class R extends o.default.Store {
        getAllVoiceStates() {
          return p;
        }
        getVoiceStateVersion() {
          return E;
        }
        getVoiceStates(e) {
          return g(p, null != e ? e : c.ME);
        }
        getVoiceStatesForChannel(e) {
          return g(h, e);
        }
        getVideoVoiceStatesForChannel(e) {
          return g(_, e);
        }
        getVoiceState(e, t) {
          return this.getVoiceStates(e)[t];
        }
        getVoiceStateForChannel(e) {
          var t;
          let n =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i;
          return null === (t = g(h, e)) || void 0 === t ? void 0 : t[n];
        }
        getVoiceStateForUser(e) {
          return Object.values(g(S, e))[0];
        }
        getVoiceStateForSession(e, t) {
          var n;
          return null != t
            ? null === (n = g(S, e)) || void 0 === n
              ? void 0
              : n[t]
            : null;
        }
        getUserVoiceChannelId(e, t) {
          var n;
          return null === (n = this.getVoiceState(e, t)) || void 0 === n
            ? void 0
            : n.channelId;
        }
        getCurrentClientVoiceChannelId(e) {
          let t = this.getVoiceState(e, i);
          return null != t && null != r && t.sessionId === r
            ? t.channelId
            : null;
        }
        isCurrentClientInVoiceChannel() {
          var e;
          return (
            null != r &&
            (null === (e = S[i]) || void 0 === e ? void 0 : e[r]) != null
          );
        }
        isInChannel(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i;
          if (null == e) return !1;
          let n = this.getVoiceStateForChannel(e, t);
          return null != n && (t !== i || (null != r && n.sessionId === r));
        }
        hasVideo(e) {
          return Object.values(g(_, e)).length > 0;
        }
        getVoicePlatformForChannel(e, t) {
          var n, s;
          let a =
            null != r &&
            (null === (s = S[i]) || void 0 === s
              ? void 0
              : null === (n = s[r]) || void 0 === n
                ? void 0
                : n.channelId);
          return t === i && e === a ? d.VoicePlatforms.DESKTOP : m[T(t, e)];
        }
        get userHasBeenMovedVersion() {
          return f;
        }
      }
      R.displayName = "VoiceStateStore";
      var N = new R(l.default, {
        CONNECTION_OPEN: function (e) {
          let { user: t, sessionId: n } = e;
          (p = {}), (h = {}), (S = {}), (_ = {}), (i = t.id), (r = n);
        },
        OVERLAY_INITIALIZE: function (e) {
          let { voiceStates: t, user: n, sessionId: s } = e;
          for (let [e, n] of ((p = {}),
          (h = {}),
          (S = {}),
          (_ = {}),
          Object.entries(t)))
            for (let [t, i] of Object.entries(n))
              C(e, t, () => new u.default(i));
          (i = n.id), (r = s);
        },
        VOICE_CHANNEL_SELECT: function (e) {
          let { guildId: t, channelId: n } = e,
            [r] = C(t, i, e => (null == e ? void 0 : e.set("channelId", n)));
          return r;
        },
        VOICE_STATE_UPDATES: function (e) {
          let { voiceStates: t } = e;
          return t.reduce((e, t) => {
            let [n, i, s] = v(t.guildId, t);
            return n
              ? (t.sessionId === r &&
                  null != i &&
                  null != s &&
                  s.channelId !== i.channelId &&
                  (f += 1),
                E++,
                !0)
              : e;
          }, !1);
        },
        GUILD_DELETE: A,
        GUILD_CREATE: A,
        CHANNEL_DELETE: function (e) {
          let { channel: t } = e;
          I(t.id);
        },
        CALL_DELETE: function (e) {
          let { channelId: t } = e;
          I(t);
        },
        PASSIVE_UPDATE_V1: function (e) {
          var t, n;
          let i = !1,
            r = Object.keys(
              null !== (t = p[e.guildId]) && void 0 !== t ? t : {}
            ),
            s = new Set(r);
          for (let t of null !== (n = e.voiceStates) && void 0 !== n ? n : []) {
            let [n] = v(e.guildId, t);
            (i = i || n), s.delete(t.userId);
          }
          for (let t of s) C(e.guildId, t, () => null), (i = !0);
          return i && E++, i;
        },
        RTC_CONNECTION_PLATFORM: function (e) {
          let { userId: t, channelId: n, platform: i } = e;
          m[T(t, n)] = i;
        },
      });
    },
    160299: function (e, t, n) {
      "use strict";
      let i, r, s, a;
      n.r(t),
        n.d(t, {
          default: function () {
            return N;
          },
        });
      var o = n("446674"),
        l = n("913144"),
        u = n("519023"),
        c = n("49111");
      let d = !1,
        f = !1,
        E = !1,
        p = !1,
        h = !1,
        _ = null,
        S = null,
        m = !1,
        T = !1;
      function g() {
        d = !1;
      }
      function I() {
        i = void 0;
      }
      function C() {
        p = !1;
      }
      function v() {
        h = !0;
      }
      function A() {
        h = !1;
      }
      class R extends o.default.Store {
        get isBusy() {
          return d || f || h || E;
        }
        get isUpdatingPaymentSource() {
          return f;
        }
        get isRemovingPaymentSource() {
          return E;
        }
        get isSyncing() {
          return this.isPaymentSourceFetching || this.isSubscriptionFetching;
        }
        get isSubscriptionFetching() {
          return p;
        }
        get isPaymentSourceFetching() {
          return null != i;
        }
        get editSourceError() {
          return _;
        }
        get removeSourceError() {
          return S;
        }
        get ipCountryCodeLoaded() {
          return void 0 !== r;
        }
        get ipCountryCode() {
          return r;
        }
        get ipCountryCodeRequest() {
          return s;
        }
        get ipCountryCodeWithFallback() {
          return null != r ? r : c.FallbackCurrencyCountry;
        }
        get ipCountryCodeHasError() {
          return m;
        }
        get paymentSourcesFetchRequest() {
          return i;
        }
        get localizedPricingPromo() {
          return a;
        }
        get localizedPricingPromoHasError() {
          return T;
        }
        get isLocalizedPromoEnabled() {
          return null != a;
        }
      }
      R.displayName = "BillingInfoStore";
      var N = new R(l.default, {
        BILLING_PAYMENT_SOURCE_CREATE_START: function () {
          d = !0;
        },
        BILLING_PAYMENT_SOURCE_CREATE_SUCCESS: g,
        BILLING_PAYMENT_SOURCE_CREATE_FAIL: g,
        STRIPE_TOKEN_FAILURE: g,
        BILLING_PAYMENT_SOURCE_REMOVE_START: function () {
          E = !0;
        },
        BILLING_PAYMENT_SOURCE_REMOVE_SUCCESS: function () {
          E = !1;
        },
        BILLING_PAYMENT_SOURCE_REMOVE_FAIL: function (e) {
          let { error: t } = e;
          (E = !1), (S = t);
        },
        BILLING_PAYMENT_SOURCE_REMOVE_CLEAR_ERROR: function () {
          S = null;
        },
        BILLING_PAYMENT_SOURCE_UPDATE_START: function () {
          f = !0;
        },
        BILLING_PAYMENT_SOURCE_UPDATE_SUCCESS: function () {
          f = !1;
        },
        BILLING_PAYMENT_SOURCE_UPDATE_FAIL: function (e) {
          let { error: t } = e;
          (f = !1), (_ = t);
        },
        BILLING_PAYMENT_SOURCE_UPDATE_CLEAR_ERROR: function () {
          _ = null;
        },
        BILLING_PAYMENT_SOURCES_FETCH_START: function (e) {
          let { request: t } = e;
          i = t;
        },
        BILLING_PAYMENT_SOURCES_FETCH_SUCCESS: I,
        BILLING_PAYMENT_SOURCES_FETCH_FAIL: I,
        BILLING_SUBSCRIPTION_FETCH_START: function () {
          p = !0;
        },
        BILLING_SUBSCRIPTION_FETCH_SUCCESS: C,
        BILLING_SUBSCRIPTION_FETCH_FAIL: C,
        BILLING_SUBSCRIPTION_UPDATE_START: v,
        BILLING_SUBSCRIPTION_CANCEL_START: v,
        BILLING_SUBSCRIPTION_UPDATE_SUCCESS: A,
        BILLING_SUBSCRIPTION_UPDATE_FAIL: A,
        BILLING_SUBSCRIPTION_CANCEL_FAIL: A,
        BILLING_SUBSCRIPTION_CANCEL_SUCCESS: A,
        BILLING_IP_COUNTRY_CODE_FETCH_START: function (e) {
          let { request: t } = e;
          s = t;
        },
        BILLING_SET_IP_COUNTRY_CODE: function (e) {
          let { countryCode: t } = e;
          r = t;
        },
        BILLING_IP_COUNTRY_CODE_FAILURE: function () {
          (r = null), (m = !0);
        },
        BILLING_SET_LOCALIZED_PRICING_PROMO: function (e) {
          let { localizedPricingPromo: t } = e;
          a = u.LocalizedPricingPromoRecord.createFromServer(t);
        },
        BILLING_LOCALIZED_PRICING_PROMO_FAILURE: function () {
          (a = null), (T = !0);
        },
        LOGOUT: function () {
          (i = void 0),
            (s = void 0),
            (r = void 0),
            (m = !1),
            (a = null),
            (S = null),
            (_ = null);
        },
        CONNECTION_OPEN: e => {
          let { countryCode: t } = e;
          null != t && (r = t);
        },
      });
    },
    40597: function (e, t, n) {
      "use strict";
      let i, r;
      n.r(t),
        n.d(t, {
          default: function () {
            return h;
          },
        }),
        n("70102");
      var s = n("446674"),
        a = n("872717"),
        o = n("913144"),
        l = n("773336"),
        u = n("49111");
      let c = null,
        d = null,
        f = null;
      (0, l.isDesktop)() &&
        (window.popupBridge = {
          getReturnUrlPrefix: () => {
            if (null == i) throw Error("popupBridgeState is unset");
            return (
              a.default.getAPIBaseURL() +
              u.Endpoints.BILLING_POPUP_BRIDGE_CALLBACK_REDIRECT_PREFIX(
                u.PaymentGateways.BRAINTREE,
                i
              )
            );
          },
          open: e => {
            (r = e), window.open(e), p.emitChange();
          },
        });
      class E extends s.default.Store {
        getClient() {
          return c;
        }
        getPayPalClient() {
          return d;
        }
        getVenmoClient() {
          return f;
        }
        getLastURL() {
          return r;
        }
      }
      E.displayName = "BraintreeStore";
      let p = new E(o.default, {
        BRAINTREE_CREATE_CLIENT_SUCCESS: function (e) {
          let { client: t } = e;
          c = t;
        },
        BRAINTREE_CREATE_PAYPAL_CLIENT_SUCCESS: function (e) {
          let { paypalClient: t } = e;
          d = t;
        },
        BILLING_POPUP_BRIDGE_CALLBACK: function (e) {
          let { paymentSourceType: t, state: n, path: r, query: s } = e;
          if (t !== u.PaymentSourceTypes.PAYPAL || n !== i) return;
          let a = window.popupBridge.onComplete;
          "function" == typeof a && a(null, { path: r, queryItems: s });
        },
        BILLING_POPUP_BRIDGE_STATE_UPDATE: function (e) {
          let { paymentSourceType: t, state: n } = e;
          t === u.PaymentSourceTypes.PAYPAL && (i = n);
        },
        BRAINTREE_TEARDOWN_PAYPAL_CLIENT: function () {
          d = null;
        },
        BRAINTREE_CREATE_VENMO_CLIENT_SUCCESS: function (e) {
          let { venmoClient: t } = e;
          f = t;
        },
        BRAINTREE_TEARDOWN_VENMO_CLIENT: function () {
          f = null;
        },
      });
      var h = p;
    },
    357957: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return d;
          },
        }),
        n("222007");
      var i = n("446674"),
        r = n("913144"),
        s = n("865146");
      let a = {},
        o = null,
        l = !1;
      function u(e) {
        let { paymentSource: t } = e;
        (a = { ...a, [t.id]: t }),
          (t.isDefault || 1 === Object.keys(a).length) && (o = t.id);
      }
      class c extends i.default.Store {
        get paymentSources() {
          return a;
        }
        get paymentSourceIds() {
          return Object.keys(a);
        }
        get defaultPaymentSourceId() {
          return o;
        }
        get defaultPaymentSource() {
          return null != o ? a[o] : null;
        }
        get hasFetchedPaymentSources() {
          return l;
        }
        getDefaultBillingCountryCode() {
          let e = this.defaultPaymentSource;
          return null == e ? null : e.paymentMethodCountry;
        }
        getPaymentSource(e) {
          return a[e];
        }
      }
      c.displayName = "PaymentSourceStore";
      var d = new c(r.default, {
        BILLING_PAYMENT_SOURCE_CREATE_SUCCESS: u,
        BILLING_PAYMENT_SOURCE_UPDATE_SUCCESS: u,
        BILLING_PAYMENT_SOURCES_FETCH_SUCCESS: function (e) {
          let { paymentSources: t } = e;
          for (let e of ((a = {}), (o = null), t))
            (a[e.id] = s.default.createFromServer(e)), e.default && (o = e.id);
          null == o && t.length > 0 && (o = t[0].id), (l = !0);
        },
        BILLING_PAYMENT_SOURCE_REMOVE_SUCCESS: function (e) {
          let { id: t } = e;
          if (((a = { ...a }), delete a[t], o === t)) {
            let e = Object.keys(a);
            o = 0 === e.length ? null : e[0];
          }
        },
        LOGOUT: function () {
          (a = {}), (o = null), (l = !1);
        },
      });
    },
    10514: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return I;
          },
        }),
        n("222007"),
        n("424973");
      var i = n("446674"),
        r = n("913144"),
        s = n("797647"),
        a = n("117362"),
        o = n("49111"),
        l = n("646718");
      let u = {},
        c = {},
        d = new Set(),
        f = new Set(),
        E = {},
        p = {};
      function h(e) {
        let t = e.skuId;
        u[e.id] = e;
        let n = e.prices[o.PriceSetAssignmentPurchaseTypes.DEFAULT];
        if (null != n) {
          var i;
          let t = new Set(Object.keys(n.paymentSourcePrices));
          E[e.id] = t;
          let r = Array.from(
            null !== (i = p[e.skuId]) && void 0 !== i ? i : new Set()
          );
          p[e.skuId] = new Set([...r, ...Array.from(t)]);
        }
        let r = c[t];
        null != r ? r.add(e.id) : (c[t] = new Set([e.id]));
      }
      function _() {
        [
          (0, l.SubscriptionPlanInfo)[l.SubscriptionPlans.NONE_MONTH],
          (0, l.SubscriptionPlanInfo)[l.SubscriptionPlans.NONE_YEAR],
          (0, l.SubscriptionPlanInfo)[l.SubscriptionPlans.NONE_3_MONTH],
          (0, l.SubscriptionPlanInfo)[l.SubscriptionPlans.NONE_6_MONTH],
        ].forEach(e =>
          h(
            s.default.createFromServer({
              id: e.id,
              name: e.name,
              interval: e.interval,
              interval_count: e.intervalCount,
              tax_inclusive: !0,
              sku_id: e.skuId,
              currency: o.CurrencyCodes.USD,
              price: 0,
              price_tier: 0,
              discount_price: null,
            })
          )
        );
      }
      function S(e) {
        h(s.default.createFromServer(e));
      }
      _();
      function m() {
        (0, a.clearObject)(u),
          (0, a.clearObject)(c),
          d.clear(),
          f.clear(),
          (0, a.clearObject)(E),
          (0, a.clearObject)(p),
          _();
      }
      let T = [
        l.SubscriptionIntervalTypes.DAY,
        l.SubscriptionIntervalTypes.MONTH,
        l.SubscriptionIntervalTypes.YEAR,
      ];
      class g extends i.default.Store {
        getPlanIdsForSkus(e) {
          let t = [];
          for (let i of e) {
            var n;
            let e = Array.from(
              null !== (n = c[i]) && void 0 !== n ? n : new Set()
            );
            e.sort((e, t) => {
              let n = u[e],
                i = u[t];
              return (
                T.indexOf(n.interval) - T.indexOf(i.interval) ||
                n.intervalCount - i.intervalCount
              );
            }),
              t.push(...e);
          }
          return t;
        }
        getFetchedSKUIDs() {
          return Object.keys(c);
        }
        getForSKU(e) {
          var t;
          return Array.from(null !== (t = c[e]) && void 0 !== t ? t : []).map(
            e => u[e]
          );
        }
        getForSkuAndInterval(e, t) {
          let n =
            arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 1;
          return this.getForSKU(e).find(
            e => e.interval === t && e.intervalCount === n
          );
        }
        get(e) {
          return u[e];
        }
        isFetchingForSKU(e) {
          return d.has(e);
        }
        isFetchingForSKUs(e) {
          return e.some(e => this.isFetchingForSKU(e));
        }
        isLoadedForSKU(e) {
          return !!f.has(e) || (!d.has(e) && null != c[e]);
        }
        isLoadedForSKUs(e) {
          return e.every(e => this.isLoadedForSKU(e));
        }
        isFetchingForPremiumSKUs() {
          return l.ACTIVE_PREMIUM_SKUS.map(e =>
            this.isFetchingForSKU(e)
          ).includes(!0);
        }
        isLoadedForPremiumSKUs() {
          return l.ACTIVE_PREMIUM_SKUS.every(e => this.isLoadedForSKU(e));
        }
        ignoreSKUFetch(e) {
          f.add(e);
        }
        getPaymentSourcesForPlanId(e) {
          return E.hasOwnProperty(e) ? E[e] : null;
        }
        getPaymentSourceIds() {
          let e = new Set();
          return Object.values(E).forEach(t => t.forEach(t => e.add(t))), e;
        }
        hasPaymentSourceForSKUId(e, t) {
          return (
            l.PremiumSubscriptionSKUs.NONE === t ||
            (null != p[t] && p[t].has(e))
          );
        }
        hasPaymentSourceForSKUIds(e, t) {
          let n = t.every(t => this.hasPaymentSourceForSKUId(e, t));
          return n;
        }
      }
      g.displayName = "SubscriptionPlanStore";
      var I = new g(r.default, {
        SUBSCRIPTION_PLANS_FETCH: function (e) {
          let { skuId: t } = e;
          d.add(t);
        },
        SUBSCRIPTION_PLANS_FETCH_SUCCESS: function (e) {
          let { skuId: t, subscriptionPlans: n } = e;
          (c[t] = new Set()),
            (p[t] = new Set()),
            n.forEach(S),
            d.delete(t),
            f.delete(t);
        },
        SUBSCRIPTION_PLANS_FETCH_FAILURE: function (e) {
          let { skuId: t } = e;
          d.delete(t), f.delete(t);
        },
        SUBSCRIPTION_PLANS_RESET: m,
        GIFT_CODE_RESOLVE_SUCCESS: function (e) {
          let { giftCode: t } = e;
          null != t.subscription_plan && S(t.subscription_plan);
        },
        ENTITLEMENTS_GIFTABLE_FETCH_SUCCESS: function (e) {
          let { entitlements: t } = e;
          for (let e of t)
            null != e.subscription_plan && S(e.subscription_plan);
        },
        LOGOUT: m,
      });
    },
    521012: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          authenticatedUserFilter: function () {
            return A;
          },
          default: function () {
            return O;
          },
        }),
        n("424973"),
        n("222007");
      var i = n("446674"),
        r = n("913144"),
        s = n("605250"),
        a = n("797647"),
        o = n("388290"),
        l = n("271938"),
        u = n("745279"),
        c = n("49111");
      let d = null,
        f = null,
        E = null,
        p = null,
        h = null,
        _ = !1,
        S = !1,
        m = null,
        T = !1,
        g = new s.default("SubscriptionStore");
      function I(e) {
        let { activeSubscriptions: t, record: n } = e,
          i = t.findIndex(e => e.id === n.id);
        if (-1 === i) return [n, ...t];
        {
          let e = [...t];
          return (
            v(n) && n.status !== c.SubscriptionStatusTypes.ENDED
              ? (e[i] = n)
              : e.splice(i, 1),
            e
          );
        }
      }
      function C() {
        (d = null),
          (f = null),
          (E = null),
          (p = null),
          (h = null),
          (_ = !1),
          (S = !1),
          (m = null),
          (T = !1);
      }
      function v(e) {
        return e.status !== c.SubscriptionStatusTypes.UNPAID;
      }
      function A(e) {
        let t = l.default.getId();
        return e.userId === t;
      }
      function R(e, t) {
        let n =
            !(arguments.length > 2) || void 0 === arguments[2] || arguments[2],
          i = n ? f : d;
        if (null == i) return null;
        for (let n in i) {
          let r = i[n];
          if (!A(r)) {
            if (!S) {
              let e = l.default.getId();
              g.log(
                "user id mismatch between logged in user and SubscriptionStore user"
              ),
                (0, u.captureBillingMessage)(
                  "user id mismatch between logged in user and SubscriptionStore user",
                  {
                    extra: {
                      authUserId: e,
                      subscriptionId: r.id,
                      subscriptionUserId: r.userId,
                    },
                  }
                ),
                (S = !0);
            }
            break;
          }
          if (r.type === e && (null == t || t(r))) return r;
        }
        return null;
      }
      class N extends i.default.Store {
        hasFetchedSubscriptions() {
          return null != d;
        }
        hasFetchedMostRecentPremiumTypeSubscription() {
          return _;
        }
        hasFetchedPreviousPremiumTypeSubscription() {
          return T;
        }
        getPremiumSubscription() {
          let e =
            !(arguments.length > 0) || void 0 === arguments[0] || arguments[0];
          return R(
            c.SubscriptionTypes.PREMIUM,
            e => !(0, a.isNoneSubscription)(e.planId),
            e
          );
        }
        getPremiumTypeSubscription() {
          let e =
            !(arguments.length > 0) || void 0 === arguments[0] || arguments[0];
          return R(c.SubscriptionTypes.PREMIUM, void 0, e);
        }
        getSubscriptions() {
          let e =
            !(arguments.length > 0) || void 0 === arguments[0] || arguments[0];
          return e ? f : d;
        }
        getSubscriptionById(e) {
          var t;
          return null !== (t = null == d ? void 0 : d[e]) && void 0 !== t
            ? t
            : void 0;
        }
        getActiveGuildSubscriptions() {
          return p;
        }
        getActiveApplicationSubscriptions() {
          return h;
        }
        getSubscriptionForPlanIds(e) {
          var t;
          let n =
              !(arguments.length > 1) ||
              void 0 === arguments[1] ||
              arguments[1],
            i = new Set(e),
            r = n ? f : d;
          return null == r
            ? null
            : null !==
                  (t = Object.values(r).find(e =>
                    e.items.some(e => i.has(e.planId))
                  )) && void 0 !== t
              ? t
              : null;
        }
        getMostRecentPremiumTypeSubscription() {
          return E;
        }
        getPreviousPremiumTypeSubscription() {
          return m;
        }
      }
      N.displayName = "SubscriptionStore";
      var O = new N(r.default, {
        BILLING_SUBSCRIPTION_FETCH_SUCCESS: function (e) {
          let { subscriptions: t } = e,
            n = {},
            i = {},
            r = [],
            s = [],
            a = l.default.getId();
          t.forEach(e => {
            if (e.user_id !== a && !S) {
              g.log(
                "[handleSubscriptionsFetch] Skipping adding Subscription into SubscriptionStore because of userId mismatch"
              ),
                (0, u.captureBillingMessage)(
                  "[handleSubscriptionsFetch] Skipping adding Subscription into SubscriptionStore because of userId mismatch",
                  {
                    extra: {
                      authUserId: a,
                      subscriptionId: e.id,
                      subscriptionUserId: e.user_id,
                    },
                  }
                ),
                (S = !0);
              return;
            }
            let t = o.SubscriptionRecord.createFromServer(e);
            (n[t.id] = t),
              v(t) &&
                ((i[t.id] = t),
                t.type === c.SubscriptionTypes.GUILD &&
                  t.status !== c.SubscriptionStatusTypes.ENDED &&
                  r.push(t),
                t.type === c.SubscriptionTypes.APPLICATION &&
                  t.status !== c.SubscriptionStatusTypes.ENDED &&
                  s.push(t));
          }),
            (d = n),
            (f = i),
            (p = r),
            (h = s);
        },
        BILLING_SUBSCRIPTION_UPDATE_SUCCESS: function (e) {
          let { subscription: t } = e,
            n = o.SubscriptionRecord.createFromServer(t);
          (d = { ...d, [n.id]: n }),
            v(n) && (f = { ...f, [n.id]: n }),
            null != p &&
              n.type === c.SubscriptionTypes.GUILD &&
              (p = I({ activeSubscriptions: p, record: n })),
            null != h &&
              n.type === c.SubscriptionTypes.APPLICATION &&
              (p = I({ activeSubscriptions: h, record: n }));
        },
        BILLING_MOST_RECENT_SUBSCRIPTION_FETCH_SUCCESS: function (e) {
          let { subscription: t } = e;
          if (((_ = !0), null != t)) {
            let e = l.default.getId();
            if (t.user_id !== e && !S) {
              g.log(
                "[handleMostRecentSubscriptionFetch] Skipping adding Subscription into SubscriptionStore because of userId mismatch"
              ),
                (0, u.captureBillingMessage)(
                  "[handleMostRecentSubscriptionFetch] Skipping adding Subscription into SubscriptionStore because of userId mismatch",
                  {
                    extra: {
                      authUserId: e,
                      subscriptionId: t.id,
                      subscriptionUserId: t.user_id,
                    },
                  }
                ),
                (_ = !1),
                (S = !0);
              return;
            }
            let n = o.SubscriptionRecord.createFromServer(t);
            E = n;
          }
        },
        BILLING_PREVIOUS_PREMIUM_SUBSCRIPTION_FETCH_SUCCESS: function (e) {
          let { subscription: t } = e;
          if (((T = !0), null != t)) {
            let e = l.default.getId();
            if (t.user_id !== e && !S) {
              g.log(
                "[handlePreviousSubscriptionFetch] Skipping adding Subscription into SubscriptionStore because of userId mismatch"
              ),
                (0, u.captureBillingMessage)(
                  "[handlePreviousSubscriptionFetch] Skipping adding Subscription into SubscriptionStore because of userId mismatch",
                  {
                    extra: {
                      authUserId: e,
                      subscriptionId: t.id,
                      subscriptionUserId: t.user_id,
                    },
                  }
                ),
                (T = !1),
                (S = !0);
              return;
            }
            let n = o.SubscriptionRecord.createFromServer(t);
            m = n;
          }
        },
        BILLING_SUBSCRIPTION_RESET: C,
        LOGOUT: C,
      });
    },
    251013: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return u;
          },
        });
      var i = n("446674"),
        r = n("913144"),
        s = n("49111");
      let a = {},
        o = null;
      class l extends i.default.Store {
        get applicationStatistics() {
          return a;
        }
        get lastFetched() {
          return o;
        }
        getGameDuration(e) {
          let t = a[e];
          return null != t ? t.total_duration : 0;
        }
        getLastPlayedDateTime(e) {
          let t = a[e];
          return null != t ? new Date(t.last_played_at).getTime() : null;
        }
        hasApplicationStatistic(e) {
          return null != a[e];
        }
        getCurrentUserStatisticsForApplication(e) {
          return a[e];
        }
        getQuickSwitcherScoreForApplication(e) {
          let t = a[e],
            n = 0;
          if (null != t) {
            let e = Date.now(),
              i = new Date(t.last_played_at).getTime(),
              r = Math.floor((e - i) / 864e5),
              s = Math.floor((1e3 * t.total_duration) / 36e5);
            0 === r
              ? (n += 50)
              : r >= 1 && r < 2
                ? (n += 40)
                : r >= 2 && r < 4
                  ? (n += 30)
                  : r >= 4 && r < 7
                    ? (n += 20)
                    : r >= 7 && (n += 10),
              0 === s
                ? (n += 0)
                : s >= 1 && s < 12
                  ? (n += 10)
                  : s >= 12 && s < 168
                    ? (n += 20)
                    : s >= 168 && s < 720
                      ? (n += 40)
                      : s >= 720 && (n += 50);
          }
          return n;
        }
      }
      l.displayName = "LibraryApplicationStatisticsStore";
      var u = new l(r.default, {
        USER_ACTIVITY_STATISTICS_FETCH_SUCCESS: function (e) {
          let { statistics: t } = e;
          t.forEach(e => {
            a[e.application_id] = e;
          }),
            (o = Date.now());
        },
        ACTIVITY_UPDATE_START: function (e) {
          let { duration: t, applicationId: n, distributor: i } = e,
            r = a[n],
            o = new Date().toISOString(),
            l = 0,
            u = 0;
          if (null != r) {
            var c;
            (l = r.total_duration),
              (u =
                null !== (c = r.total_discord_sku_duration) && void 0 !== c
                  ? c
                  : 0);
          }
          (l += t),
            i === s.Distributors.DISCORD && (u += t),
            (a[n] = {
              application_id: n,
              total_duration: l,
              last_played_at: o,
              total_discord_sku_duration: u,
            });
        },
        LOGOUT: function () {
          (a = {}), (o = null);
        },
      });
    },
    677225: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return M;
          },
        }),
        n("222007"),
        n("424973");
      var i = n("917351"),
        r = n.n(i),
        s = n("446674"),
        a = n("862337"),
        o = n("913144"),
        l = n("157552"),
        u = n("71313"),
        c = n("190017"),
        d = n("299285"),
        f = n("686470"),
        E = n("535974"),
        p = n("98328"),
        h = n("718517"),
        _ = n("964889"),
        S = n("602043");
      let m = new Set(),
        T = {},
        g = new Set(),
        I = {},
        C = new Set(),
        v = {},
        A = 10 * h.default.Millis.MINUTE,
        R = 6 * h.default.Millis.HOUR,
        N = 10 * h.default.Millis.MINUTE,
        O = new a.Timeout();
      function D(e) {
        O.start(e + Math.random() * A, l.fetchBranches);
      }
      function y() {
        if (!(0, S.isSupportedPlatform)()) return !1;
        let e = f.default.entitledBranchIds,
          t = [];
        for (let n of e) !v.hasOwnProperty(n) && ((v[n] = null), t.push(n));
        if (0 === t.length) return !1;
        o.default.wait(() => l.fetchBranches(t));
      }
      function P(e, t) {
        if (null != T[t] && p.default.shouldBeInstalled(e, t)) {
          let n = T[t],
            i = n.manifestIds,
            s = E.default.getState(e, t);
          null != s &&
            s.shouldPatch &&
            (s.buildId !== n.id || !r.isEqual(s.manifestIds, i)) &&
            o.default.wait(() => {
              let r = d.default.getApplication(e);
              null != r
                ? (C.delete((0, _.getComboId)(e, t)),
                  (0, c.updateApplication)(r, t, n.id, i, !0))
                : C.add((0, _.getComboId)(e, t));
            });
        }
      }
      function L() {
        O.stop();
      }
      class b extends s.default.Store {
        initialize() {
          this.syncWith([f.default], y),
            this.waitFor(E.default, f.default, d.default);
        }
        getTargetBuildId(e, t) {
          return null == T[t] ? null : T[t].id;
        }
        getTargetManifests(e, t) {
          return null == T[t] ? null : T[t].manifestIds;
        }
        hasNoBuild(e, t) {
          return g.has(t);
        }
        isFetching(e, t) {
          return m.has(t);
        }
        needsToFetchBuildSize(e) {
          return !I.hasOwnProperty(e);
        }
        getBuildSize(e) {
          return I[e];
        }
      }
      b.displayName = "ApplicationBuildStore";
      var M = new b(o.default, {
        CONNECTION_OPEN: function () {
          return D(R), y();
        },
        GAMES_DATABASE_UPDATE: function () {
          if (!(0, S.isSupportedPlatform)()) return !1;
          for (let e of C) {
            let { applicationId: t, branchId: n } = (0, _.convertComboId)(e),
              i = d.default.getApplication(t);
            null != i && (C.delete(e), P(t, n));
          }
        },
        APPLICATION_BUILD_FETCH_START: function (e) {
          let { branchId: t } = e;
          m.add(t);
        },
        APPLICATION_BUILD_FETCH_SUCCESS: function (e) {
          let { applicationId: t, branchId: n, locale: i, build: r } = e;
          m.delete(n);
          let s = r.manifests.map(e => {
              let { id: t } = e;
              return t;
            }),
            a = r.id;
          g.delete(n),
            (T[n] = {
              id: a,
              applicationId: t,
              branchId: n,
              locale: i,
              manifestIds: s,
            }),
            P(t, n);
        },
        APPLICATION_BUILD_NOT_FOUND: function (e) {
          let { branchId: t } = e;
          m.delete(t), g.add(t);
        },
        APPLICATION_BUILD_SIZE_FETCH_START: function (e) {
          let { buildId: t } = e;
          !I.hasOwnProperty(t) && (I[t] = null);
        },
        APPLICATION_BUILD_SIZE_FETCH_SUCCESS: function (e) {
          let { buildId: t, sizeKB: n } = e;
          I[t] = n;
        },
        APPLICATION_BUILD_SIZE_FETCH_FAIL: function (e) {
          let { buildId: t } = e;
          null == I[t] && delete I[t];
        },
        APPLICATION_BRANCHES_FETCH_SUCCESS: function (e) {
          let { branches: t } = e,
            n = {};
          for (let e in f.default.libraryApplications) {
            let t = f.default.libraryApplications[e];
            n[t.branchId] = t;
          }
          for (let e of t) {
            let { id: t, liveBuildId: i } = e,
              r = v[t];
            if (i !== r) {
              let e = n[t];
              null != e &&
                o.default.wait(() => u.fetchLiveBuild(e.id, e.branchId, !0));
            }
            v[t] = i;
          }
          D(R);
        },
        APPLICATION_BRANCHES_FETCH_FAIL: function () {
          D(N);
        },
        CONNECTION_CLOSED: L,
        LOGOUT: L,
        SKU_PURCHASE_SUCCESS: function (e) {
          let { entitlements: t } = e;
          if (!(0, S.isSupportedPlatform)()) return !1;
          let n = new Set();
          for (let e of t) n.add(e.application_id);
          for (let e in f.default.libraryApplications) {
            let t = f.default.libraryApplications[e];
            n.has(t.id) &&
              (0, _.isUserEntitledToLibraryApplication)(t) &&
              o.default.wait(() => u.fetchLiveBuild(t.id, t.branchId));
          }
        },
      });
    },
    552712: function (e, t, n) {
      "use strict";
      let i;
      n.r(t),
        n.d(t, {
          default: function () {
            return C;
          },
        }),
        n("222007");
      var r = n("446674"),
        s = n("913144"),
        a = n("915639"),
        o = n("137406"),
        l = n("546463");
      let u = new Set(),
        c = new Set(),
        d = {},
        f = {},
        E = {};
      function p(e) {
        d[e.id] = o.default.createFromServer(e);
      }
      function h(e) {
        u.delete(e.id), c.delete(e.id), p(e);
      }
      function _(e) {
        p(e.sku),
          null != e.child_skus && e.child_skus.forEach(e => p(e)),
          null != e.alternative_skus && e.alternative_skus.forEach(e => p(e));
      }
      function S(e) {
        let { storeListings: t } = e;
        for (let e of t) _(e);
      }
      function m(e) {
        let { entitlements: t } = e;
        for (let e of t) null != e.sku && p(e.sku);
      }
      function T() {
        (u = new Set()), (c = new Set()), (d = {}), (f = {}), (E = {});
      }
      function g() {
        if (i === a.default.locale) return !1;
        (i = a.default.locale), T();
      }
      class I extends r.default.Store {
        initialize() {
          this.waitFor(a.default, l.default),
            this.syncWith([a.default], g),
            (i = a.default.locale);
        }
        get(e) {
          return d[e];
        }
        getForApplication(e) {
          let t = f[e];
          return null == t ? [] : Array.from(t).map(e => d[e]);
        }
        isFetching(e) {
          return u.has(e);
        }
        getSKUs() {
          return d;
        }
        didFetchingSkuFail(e) {
          return c.has(e);
        }
      }
      I.displayName = "SKUStore";
      var C = new I(s.default, {
        STORE_LISTINGS_FETCH_SUCCESS: S,
        APPLICATION_STORE_DIRECTORY_FETCH_SUCCESS: S,
        STORE_LISTING_FETCH_SUCCESS: function (e) {
          let { storeListing: t } = e;
          _(t);
        },
        GIFT_CODE_RESOLVE_SUCCESS: function (e) {
          let { giftCode: t } = e;
          if (null == t.store_listing) return !1;
          p(t.store_listing.sku);
        },
        SKU_FETCH_START: function (e) {
          let { skuId: t } = e;
          u.add(t);
        },
        SKU_FETCH_SUCCESS: function (e) {
          let { sku: t } = e;
          h(t);
        },
        SKU_FETCH_FAIL: function (e) {
          let { skuId: t } = e;
          u.delete(t), c.add(t);
        },
        SKUS_FETCH_SUCCESS: function (e) {
          let { guildId: t, applicationId: n, skus: i } = e;
          for (let e of i) h(e);
          null != t && (E[t] = new Set(i.map(e => e.id))),
            null != n && (f[n] = new Set(i.map(e => e.id)));
        },
        ENTITLEMENTS_GIFTABLE_FETCH_SUCCESS: m,
        APPLICATION_STORE_CLEAR_DATA: T,
        APPLICATION_SUBSCRIPTIONS_FETCH_ENTITLEMENTS_SUCCESS: m,
        ENTITLEMENTS_FETCH_FOR_USER_SUCCESS: m,
      });
    },
    316133: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getComparator: function () {
            return C;
          },
          default: function () {
            return D;
          },
        }),
        n("222007"),
        n("808653");
      var i = n("917351"),
        r = n.n(i),
        s = n("446674"),
        a = n("407846"),
        o = n("913144"),
        l = n("766274"),
        u = n("271938"),
        c = n("42203"),
        d = n("26989"),
        f = n("697218"),
        E = n("800762"),
        p = n("299039"),
        h = n("158998"),
        _ = n("49111");
      let S = Object.freeze([]),
        m = {};
      function T(e) {
        let t = m[e];
        return null == t && ((t = new A(e)), (m[e] = t)), t;
      }
      function g(e, t) {
        return d.default.getMember(e, t.id);
      }
      function I(e, t, n) {
        var i;
        let r =
          null !== (i = null == t ? void 0 : t.nick) && void 0 !== i
            ? i
            : h.default.getName(n);
        return { member: t, comparator: C(e, r) };
      }
      function C(e, t) {
        return ""
          .concat(e.selfStream ? "\x00" : "\x01")
          .concat(t.toLowerCase(), "\x00")
          .concat(e.userId);
      }
      function v(e, t, n) {
        let i = f.default.getUser(n),
          r = null == i;
        null == i &&
          (i = new l.default({
            id: n,
            username: "...",
            discriminator: n.slice(-5, -1),
          }));
        let { member: s, comparator: a } = (function (e, t, n) {
            let i = g(e, t);
            return I(n, i, t);
          })(t, i, e),
          o = {
            voiceState: e,
            user: i,
            member: s,
            comparator: a,
            nick: null == s ? void 0 : s.nick,
          };
        return r && (o._isPlaceholder = !0), o;
      }
      class A {
        updateVoiceState(e) {
          if (null != this._pending) return this._pending.add(e), !1;
          let t = E.default.getVoiceState(this.guildId, e),
            n = this._voiceStates.get(e),
            i = f.default.getUser(e);
          if (null != t && null != i) {
            if (null == n)
              return this._voiceStates.set(e, v(t, this.guildId, e)), !0;
            if (n.voiceState !== t) {
              var r;
              let s = g(this.guildId, i),
                a =
                  null !== (r = null == s ? void 0 : s.nick) && void 0 !== r
                    ? r
                    : h.default.getName(i);
              return (
                this._voiceStates.set(e, {
                  ...n,
                  member: s,
                  comparator: C(t, a),
                  nick: a,
                  voiceState: t,
                }),
                !0
              );
            }
          } else if (null != n) return this._voiceStates.delete(e), !0;
          return !1;
        }
        updateMember(e) {
          if (null != this._pending) return this._pending.add(e), !1;
          let t = this._voiceStates.get(e),
            n = f.default.getUser(e);
          if (null != t && null != n) {
            var i, r;
            let s = g(this.guildId, n);
            if (
              (null == s ? void 0 : s.nick) !==
                (null === (i = t.member) || void 0 === i ? void 0 : i.nick) ||
              (null == s ? void 0 : s.avatar) !==
                (null === (r = t.member) || void 0 === r ? void 0 : r.avatar)
            ) {
              let { comparator: i } = I(t.voiceState, s, n);
              return (
                this._voiceStates.set(e, {
                  ...t,
                  member: s,
                  comparator: i,
                  nick: null == s ? void 0 : s.nick,
                }),
                !0
              );
            }
          }
          return !1;
        }
        updateUsers() {
          return (
            null == this._pending &&
            this._voiceStates.values().reduce((e, t) => {
              let n = f.default.getUser(t.user.id);
              return null != n && t.user !== n
                ? (this._voiceStates.set(
                    n.id,
                    v(t.voiceState, this.guildId, n.id)
                  ),
                  !0)
                : e;
            }, !1)
          );
        }
        getUserIds() {
          return this.processPending(), this._voiceStates.keys();
        }
        getVoiceStates() {
          return this.processPending(), this._voiceStates.indexes();
        }
        getVoiceStatesForChannel(e) {
          this.processPending();
          let t = this._voiceStates.values(e);
          return 0 === t.length ? S : t;
        }
        countVoiceStatesForChannel(e) {
          return this.processPending(), this._voiceStates.size(e);
        }
        getVersion() {
          return this.processPending(), this._voiceStates.version;
        }
        processPending() {
          if (null != this._pending) {
            let e = this._pending;
            (this._pending = void 0), e.forEach(e => this.updateVoiceState(e));
          }
        }
        constructor(e) {
          (this._pending = new Set()),
            (this._voiceStates = new a.default(
              e => {
                let {
                  voiceState: { channelId: t },
                } = e;
                return null != t ? [t] : [];
              },
              e => {
                let { comparator: t } = e;
                return t;
              }
            )),
            (this.guildId = e);
        }
      }
      function R() {
        return r.reduce(m, (e, t) => t.updateUsers() || e, !1);
      }
      function N() {
        m = {};
        let e = E.default.getAllVoiceStates();
        p.default.keys(e).forEach(t => {
          Object.keys(e[t]).forEach(e => {
            T(null != t ? t : _.ME).updateVoiceState(e);
          });
        });
      }
      class O extends s.default.Store {
        initialize() {
          N(),
            this.waitFor(u.default, f.default, d.default, E.default),
            this.syncWith([f.default], R);
        }
        getVoiceStates(e) {
          return T(null != e ? e : _.ME).getVoiceStates();
        }
        getAllVoiceStates() {
          return m;
        }
        getVoiceStatesForChannel(e) {
          let t = e.getGuildId(),
            n = e.id;
          return T(null != t ? t : _.ME).getVoiceStatesForChannel(n);
        }
        getVoiceStatesForChannelAlt(e, t) {
          return T(null != t ? t : _.ME).getVoiceStatesForChannel(e);
        }
        countVoiceStatesForChannel(e) {
          let t = c.default.getChannel(e);
          if (null == t) return 0;
          let n = t.getGuildId();
          return T(null != n ? n : _.ME).countVoiceStatesForChannel(e);
        }
        getVoiceStateVersion(e) {
          return T(null != e ? e : _.ME).getVersion();
        }
      }
      O.displayName = "SortedVoiceStateStore";
      var D = new O(o.default, {
        CONNECTION_OPEN: function () {
          m = {};
        },
        OVERLAY_INITIALIZE: function () {
          N();
        },
        VOICE_CHANNEL_SELECT: function (e) {
          let { guildId: t } = e,
            n = u.default.getId();
          return null != n && T(null != t ? t : _.ME).updateVoiceState(n);
        },
        VOICE_STATE_UPDATES: function (e) {
          let { voiceStates: t } = e;
          return t.reduce((e, t) => {
            let { guildId: n, userId: i } = t;
            return T(null != n ? n : _.ME).updateVoiceState(i) || e;
          }, !1);
        },
        GUILD_MEMBER_UPDATE: function (e) {
          let { guildId: t, user: n } = e;
          return T(t).updateMember(n.id);
        },
        GUILD_CREATE: function (e) {
          let { guild: t } = e;
          delete m[t.id];
        },
        GUILD_DELETE: function (e) {
          let { guild: t } = e;
          delete m[t.id];
        },
        PASSIVE_UPDATE_V1: function (e) {
          var t, n;
          let i = !1,
            r = new Set(
              null === (t = m[e.guildId]) || void 0 === t
                ? void 0
                : t.getUserIds()
            ),
            s = new Set(
              null === (n = e.voiceStates) || void 0 === n
                ? void 0
                : n.map(e => e.userId)
            ),
            a = new Set([...r, ...s]);
          for (let t of a) i = T(e.guildId).updateVoiceState(t) || i;
          for (let t of s) r.has(t) && (i = T(e.guildId).updateMember(t) || i);
          return i;
        },
      });
    },
    144747: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return d;
          },
        });
      var i = n("446674"),
        r = n("913144"),
        s = n("659500"),
        a = n("49111");
      let o = null,
        l = 0;
      function u() {
        o = null;
      }
      class c extends i.default.Store {
        isOpen() {
          return null != o;
        }
        get version() {
          return l;
        }
        getContextMenu() {
          return o;
        }
        close() {
          return (
            !!this.isOpen() &&
            (s.ComponentDispatch.dispatch(
              a.ComponentActions.CONTEXT_MENU_CLOSE
            ),
            !0)
          );
        }
      }
      c.displayName = "ContextMenuStore";
      var d = new c(r.default, {
        CONTEXT_MENU_OPEN: function (e) {
          let { contextMenu: t } = e;
          l++, (o = t);
        },
        LAYER_PUSH: u,
        CONTEXT_MENU_CLOSE: u,
        OVERLAY_SET_UI_LOCKED: u,
        OVERLAY_DEACTIVATE_ALL_REGIONS: u,
      });
    },
    316661: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return l;
          },
        });
      var i = n("446674"),
        r = n("913144");
      let s = null,
        a = !1;
      class o extends i.default.Store {
        getLastProgress() {
          return s;
        }
        isRunning() {
          return a;
        }
      }
      o.displayName = "DispatchApplicationLaunchSetupStore";
      var l = new o(r.default, {
        DISPATCH_APPLICATION_LAUNCH_SETUP_START: function () {
          a = !0;
        },
        DISPATCH_APPLICATION_INSTALL_SCRIPTS_PROGRESS_UPDATE: function (e) {
          let { progress: t, total: n, name: i } = e;
          s = { progress: t, total: n, name: i };
        },
        DISPATCH_APPLICATION_LAUNCH_SETUP_COMPLETE: function () {
          (s = null), (a = !1);
        },
      });
    },
    535974: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return F;
          },
        }),
        n("222007"),
        n("70102"),
        n("860677");
      var i,
        r = n("917351"),
        s = n.n(r),
        a = n("446674"),
        o = n("913144"),
        l = n("49671"),
        u = n("70513"),
        c = n("271938"),
        d = n("686470"),
        f = n("645672"),
        E = n("718517"),
        p = n("964889"),
        h = n("773336"),
        _ = n("602043"),
        S = n("352326"),
        m = n("98328"),
        T = n("49111");
      let g = 1 * E.default.Millis.MINUTE;
      (i || (i = {})).DISPATCH_APPLICATION_PROGRESS =
        "dispatch_application_progress";
      let I = {},
        C = "file://",
        v = !1,
        A = 0,
        R = 0,
        N = 0,
        O = [],
        D = [],
        y = [],
        P = !1;
      function L(e) {
        return e.type === T.LocalDispatchApplicationStates.INSTALLING ||
          e.type === T.LocalDispatchApplicationStates.UPDATING ||
          e.type === T.LocalDispatchApplicationStates.REPAIRING
          ? e.networkProgress
          : null;
      }
      function b(e) {
        return e.type === T.LocalDispatchApplicationStates.INSTALLING ||
          e.type === T.LocalDispatchApplicationStates.UPDATING ||
          e.type === T.LocalDispatchApplicationStates.REPAIRING
          ? e.diskProgress
          : null;
      }
      function M(e) {
        return e.type === T.LocalDispatchApplicationStates.INSTALLING ||
          e.type === T.LocalDispatchApplicationStates.UPDATING ||
          e.type === T.LocalDispatchApplicationStates.REPAIRING
          ? e.readerProgress
          : null;
      }
      let U = s.throttle(function (e) {
          D = (D = [{ bytes: e, timestamp: Date.now() }, ...D]).slice(0, 200);
        }, 200),
        G = s.throttle(function (e) {
          let t = Date.now(),
            n = t - g;
          O = (O = [{ bytes: e, timestamp: t }, ...O])
            .slice(0, 200)
            .filter(e => {
              let { timestamp: t } = e;
              return t >= n;
            });
        }, 200),
        w = s.throttle(function (e) {
          y = (y = [{ bytes: e, timestamp: Date.now() }, ...y]).slice(0, 200);
        }, 200);
      function k(e, t, n) {
        let i = n(I[t]),
          r = n(e[t]);
        return null != i && null != r && 0 !== i ? Math.max(r - i, 0) : 0;
      }
      class x extends a.default.Store {
        initialize() {
          this.waitFor(c.default);
        }
        getState(e, t) {
          let n = (0, p.getComboId)(e, t);
          return I[n];
        }
        isUpToDate(e, t) {
          let n = I[(0, p.getComboId)(e, t)];
          return (
            null != n && n.type === T.LocalDispatchApplicationStates.UP_TO_DATE
          );
        }
        shouldPatch(e, t) {
          let n = I[(0, p.getComboId)(e, t)];
          return null != n && !0 === n.shouldPatch;
        }
        isInstalled(e, t) {
          let n = I[(0, p.getComboId)(e, t)];
          return null != n
            ? n.type !== T.LocalDispatchApplicationStates.UNINSTALLING
            : m.default.shouldBeInstalled(e, t);
        }
        supportsCloudSync(e, t) {
          null == t && (t = e);
          let n = I[(0, p.getComboId)(e, t)];
          return null != n && null != n.storage && !!n.storage.sync;
        }
        isLaunchable(e, t) {
          if (!(0, _.isSupportedPlatform)()) return !1;
          let n = I[(0, p.getComboId)(e, t)];
          return (
            null != n &&
            n.type === T.LocalDispatchApplicationStates.UP_TO_DATE &&
            null != n.launchOptions &&
            0 !== n.launchOptions.length
          );
        }
        getDefaultLaunchOption(e, t) {
          let n = I[(0, p.getComboId)(e, t)];
          if (null == n) return null;
          let { defaultLaunchOptionId: i, launchOptions: r } = n;
          return null == i || null == r ? null : r[i];
        }
        getLaunchOptions(e, t) {
          let n = I[(0, p.getComboId)(e, t)];
          return null == n || null == n.launchOptions
            ? []
            : Object.values(n.launchOptions);
        }
        getHistoricalTotalBytesRead() {
          return O;
        }
        getHistoricalTotalBytesDownloaded() {
          return D;
        }
        getHistoricalTotalBytesWritten() {
          return y;
        }
        whenInitialized(e) {
          this.addConditionalChangeListener(() => {
            if (v) return setImmediate(e), !1;
          });
        }
      }
      x.displayName = "DispatchApplicationStore";
      var F = new x(o.default, {
        CONNECTION_OPEN: function () {
          v = !1;
        },
        DISPATCH_APPLICATION_STATE_UPDATE: function (e) {
          let { state: t } = e;
          v = !0;
          let n = {},
            i = t.applications,
            r = null != t.currentTask ? t.currentTask.branchId : null,
            a = !1;
          for (let e in i)
            for (let t in i[e]) {
              let c = (0, p.getComboId)(e, t);
              if (
                ((n[c] = (function (e) {
                  let {
                      build_id: t,
                      target_build_id: n,
                      manifest_ids: i,
                      target_manifest_ids: r,
                      application_id: a,
                      branch_id: o,
                      launch_commands: u,
                      launch_options: c,
                      storage: d,
                      install_path: E,
                      installed_size: p,
                      repairing: _,
                    } = e,
                    { should_patch: S } = e;
                  switch ((null == S && (S = !0), e.state.type)) {
                    case T.DispatchApplicationStates.COMPLETE: {
                      let e;
                      let g = {},
                        I = null;
                      if (_) e = T.LocalDispatchApplicationStates.REPAIRING;
                      else if (null == t)
                        e = T.LocalDispatchApplicationStates.INSTALL_REQUIRED;
                      else if (
                        S &&
                        (t !== n ||
                          (null != i && 0 !== s.difference(i, r).length))
                      )
                        e = T.LocalDispatchApplicationStates.UPDATE_REQUIRED;
                      else if (
                        ((e = T.LocalDispatchApplicationStates.UP_TO_DATE),
                        null != E)
                      ) {
                        let e = l.default.fileManager.join(E, "content"),
                          t = (0, f.getBuildPlatform)();
                        if (null != c && 0 !== c.length) {
                          var m;
                          if (
                            t === T.BuildPlatformTypes.WIN64 &&
                            ((m = t), !c.some(e => e.platforms.includes(m)))
                          )
                            t = T.BuildPlatformTypes.WIN32;
                          for (let n of c)
                            if (n.platforms.includes(t)) {
                              let t;
                              let {
                                  executable: i,
                                  name: r,
                                  working_dir: s,
                                } = n,
                                a = l.default.fileManager.join(e, i);
                              (0, h.isMac)() &&
                                !a.startsWith(C) &&
                                (a = "".concat(C).concat(a)),
                                (t =
                                  null != s
                                    ? l.default.fileManager.join(e, s)
                                    : l.default.fileManager.dirname(a)),
                                (g[r] = {
                                  ...n,
                                  id: r,
                                  fullExecutablePath: a,
                                  fullWorkingDir: t,
                                }),
                                null == I && (I = r);
                            }
                        } else if (null != u) {
                          t === T.BuildPlatformTypes.WIN64 &&
                            null == u[t] &&
                            (t = T.BuildPlatformTypes.WIN32);
                          let n = u[t];
                          if (null != n) {
                            let { executable: i } = n,
                              r = "Default";
                            (g[r] = {
                              ...n,
                              name: r,
                              id: r,
                              fullExecutablePath: l.default.fileManager.join(
                                e,
                                i
                              ),
                              fullWorkingDir: e,
                              platforms: [t],
                            }),
                              (I = r);
                          }
                        }
                      }
                      return {
                        type: e,
                        applicationId: a,
                        branchId: o,
                        buildId: t,
                        manifestIds: i,
                        targetBuildId: n,
                        targetManifestIds: r,
                        installPath: E,
                        installedSize: p,
                        launchOptions: g,
                        defaultLaunchOptionId: I,
                        shouldPatch: S,
                        storage: d,
                      };
                    }
                    case T.DispatchApplicationStates.TRANSITION: {
                      let s;
                      let {
                          stage: l,
                          disk_progress: u,
                          network_progress: c,
                          reader_progress: d,
                          progress: f,
                          total: h,
                          paused: m,
                        } = e.state,
                        g = l.type;
                      return {
                        type: (s =
                          g === T.DispatchApplicationStages.UNINSTALLING
                            ? T.LocalDispatchApplicationStates.UNINSTALLING
                            : _
                              ? T.LocalDispatchApplicationStates.REPAIRING
                              : null == t
                                ? T.LocalDispatchApplicationStates.INSTALLING
                                : T.LocalDispatchApplicationStates.UPDATING),
                        stage: g,
                        applicationId: a,
                        branchId: o,
                        buildId: t,
                        manifestIds: i,
                        targetBuildId: n,
                        targetManifestIds: r,
                        installPath: E,
                        installedSize: p,
                        diskProgress: u,
                        networkProgress: c,
                        readerProgress: d,
                        progress: f,
                        total: h,
                        paused: m,
                        shouldPatch: S,
                      };
                    }
                  }
                  throw Error(
                    "Invalid Dispatch State. state=".concat(e.state.type)
                  );
                })(i[e][t])),
                null != I[c])
              ) {
                let e = k(n, c, L);
                e > 0 && U((A += e));
                let i = k(n, c, b);
                i > 0 && w((R += i));
                let s = k(n, c, M);
                if ((s > 0 && G((N += s)), r === t)) {
                  let e = n[c];
                  if (
                    !0 !== e.paused &&
                    (e.type === T.LocalDispatchApplicationStates.UNINSTALLING ||
                      e.type === T.LocalDispatchApplicationStates.INSTALLING ||
                      e.type === T.LocalDispatchApplicationStates.UPDATING)
                  )
                    switch (e.stage) {
                      case T.DispatchApplicationStages.PATCHING:
                      case T.DispatchApplicationStages.FINALIZING:
                      case T.DispatchApplicationStages.VERIFYING:
                      case T.DispatchApplicationStages.REPAIRING:
                      case T.DispatchApplicationStages.POST_INSTALL_SCRIPTS:
                        u.default.setProgress(
                          "dispatch_application_progress",
                          (0, p.calculateProgressPercentage)(
                            e.progress,
                            e.total
                          ) / 100
                        ),
                          (a = !0);
                    }
                }
              }
              if (!P) {
                let i = l.default.fileManager.dirname(n[c].installPath);
                m.default.getInstallationPath(e, t) !== i &&
                  o.default.wait(() => {
                    o.default.dispatch({
                      type: "DISPATCH_APPLICATION_ADD_TO_INSTALLATIONS",
                      applicationId: e,
                      branchId: t,
                      installationPath: i,
                    });
                  }),
                  -1 === S.default.getQueuePosition(e, t) &&
                    (n[c].type ===
                      T.LocalDispatchApplicationStates.INSTALLING ||
                      n[c].type ===
                        T.LocalDispatchApplicationStates.UPDATING) &&
                    d.default.hasApplication(e, t) &&
                    m.default.shouldBeInstalled(e, t) &&
                    o.default.wait(() => {
                      o.default.dispatch({
                        type: "DISPATCH_APPLICATION_UPDATE",
                        applicationId: e,
                        branchId: t,
                        automatic: !0,
                      });
                    });
              }
            }
          !a &&
            "dispatch_application_progress" === u.default.taskID &&
            u.default.clearProgress("dispatch_application_progress"),
            (I = n),
            (P = !0);
        },
      });
    },
    352326: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return j;
          },
        }),
        n("222007"),
        n("70102"),
        n("424973"),
        n("843762");
      var i,
        r,
        s,
        a,
        o = n("917351"),
        l = n.n(o),
        u = n("446674"),
        c = n("95410"),
        d = n("913144"),
        f = n("190017"),
        E = n("271938"),
        p = n("568307"),
        h = n("677225"),
        _ = n("964889"),
        S = n("152723"),
        m = n("773336"),
        T = n("535974"),
        g = n("49111"),
        I = n("492249");
      ((s = i || (i = {})).INSTALL = "Install"),
        (s.REPAIR = "Repair"),
        ((a = r || (r = {})).PATCH = "Patch"),
        (a.REPAIR = "Repair");
      let C = [
          I.DispatchErrorCodes.AUTHENTICATION_FAILED,
          I.DispatchErrorCodes.NOT_ENTITLED,
        ],
        v = "DispatchManagerStore",
        A = [],
        R = [],
        N = !1,
        O = null,
        D = null,
        y = !1,
        P = new Map(),
        L = !1,
        b = null;
      function M() {
        let e = { queue: A, paused: N, userActions: Array.from(P) };
        c.default.set(v, e);
      }
      function U() {
        let e = A[0];
        if (null != e) {
          var t, n;
          let { comboId: i, action: r } = e,
            { applicationId: s, branchId: a } = (0, _.convertComboId)(i);
          if (
            ((t = s),
            (n = a),
            (null == O || O.applicationId !== t || O.branchId !== n) &&
              (null == D || D.applicationId !== t || D.branchId !== n))
          ) {
            let e = E.default.getToken(),
              t = E.default.getId();
            if (null == e) throw Error("missing user token");
            L = !S.default.setCurrentTask(s, a, r, t, e);
          }
        }
      }
      function G(e, t) {
        let n = (0, _.getComboId)(e, t);
        return A.findIndex(e => e.comboId === n);
      }
      function w(e, t, n, i) {
        let r = (0, _.getComboId)(e, t),
          s = { comboId: r, action: i },
          a = R.indexOf(r);
        -1 !== a && R.splice(a, 1);
        let o = G(e, t);
        0 !== o &&
          (n
            ? -1 === o && (A.push(s), U())
            : (o > 0 && A.splice(o, 1), A.unshift(s), U())),
          !n && N && S.default.resume(),
          M();
      }
      function k(e, t) {
        let n = (0, _.getComboId)(e, t),
          i = R.indexOf(n);
        -1 !== i && R.splice(i, 1);
        let r = G(e, t);
        -1 !== r && (A.splice(r, 1), M()), U();
      }
      function x(e) {
        let { applicationId: t, branchId: n } = e;
        k(t, n);
      }
      function F(e) {
        let { applicationId: t, branchId: n } = e,
          i = (0, _.getComboId)(t, n),
          r = R.indexOf(i);
        -1 !== r && R.splice(r, 1);
      }
      function V() {
        let e = E.default.getToken(),
          t = E.default.getId();
        null != e && S.default.setCredentials(t, e);
      }
      function B() {
        for (let e of p.default.getRunningDiscordApplicationIds())
          f.cancel(e, e);
        let e = p.default.getVisibleGame();
        return (
          !N && null != e && e.pid !== b && f.pause(),
          (b = null == e ? null : e.pid),
          !1
        );
      }
      class H extends u.default.Store {
        initialize() {
          var e;
          let t =
            null !== (e = c.default.get(v)) && void 0 !== e
              ? e
              : { queue: null, paused: null, userActions: null };
          if (null != t.queue)
            A = t.queue.map(e =>
              "string" == typeof e ? { comboId: e, action: "Patch" } : e
            );
          null != t.paused && (N = t.paused),
            null != t.userActions && (P = new Map(Array.from(t.userActions))),
            this.waitFor(T.default, p.default),
            this.syncWith([p.default], B),
            this.waitFor(T.default);
        }
        get activeItems() {
          return A.map(e => {
            let { comboId: t } = e;
            return (0, _.convertComboId)(t);
          });
        }
        get finishedItems() {
          return R.map(_.convertComboId);
        }
        get paused() {
          return N;
        }
        getQueuePosition(e, t) {
          return G(e, t);
        }
        isCorruptInstallation() {
          return L;
        }
      }
      H.displayName = "DispatchManagerStore";
      var j = new H(d.default, {
        DISPATCH_APPLICATION_INSTALL: function (e) {
          let { applicationId: t, branchId: n } = e;
          P.set((0, _.getComboId)(t, n), "Install"), w(t, n, !1, "Patch");
        },
        DISPATCH_APPLICATION_UPDATE: function (e) {
          let { applicationId: t, branchId: n, automatic: i } = e;
          w(t, n, i, "Patch");
        },
        DISPATCH_APPLICATION_UNINSTALL: function (e) {
          x(e), F(e);
        },
        DISPATCH_APPLICATION_CANCEL: x,
        DISPATCH_APPLICATION_REPAIR: function (e) {
          let { applicationId: t, branchId: n } = e;
          P.set((0, _.getComboId)(t, n), "Repair"), w(t, n, !1, "Repair");
        },
        DISPATCH_APPLICATION_MOVE_UP: function (e) {
          let { applicationId: t, branchId: n } = e,
            i = G(t, n);
          if (i < 1) return !1;
          A.splice(0, 0, A.splice(i, 1)[0]), U(), N && S.default.resume(), M();
        },
        DISPATCH_APPLICATION_REMOVE_FINISHED: F,
        DISPATCH_APPLICATION_STATE_UPDATE: function (e) {
          let { state: t } = e;
          !y && ((y = !0), U(), !N && S.default.resume());
          let n = N;
          (N = t.paused), (O = t.currentTask), (D = t.nextTask);
          let i = !1;
          (A = A.filter(e => {
            let { comboId: t } = e,
              { applicationId: n, branchId: r } = (0, _.convertComboId)(t),
              s = T.default.getState(n, r),
              a = h.default.getTargetBuildId(n, r),
              o = h.default.getTargetManifests(n, r);
            if (
              null != s &&
              s.type === g.LocalDispatchApplicationStates.UP_TO_DATE &&
              s.buildId === s.targetBuildId &&
              s.buildId === a &&
              l.isEqual(s.manifestIds, s.targetManifestIds) &&
              l.isEqual(s.manifestIds, o)
            ) {
              if ((R.push(t), P.has(t))) {
                let e = P.get(t);
                switch (e) {
                  case "Install":
                    f.completeInstall(n, s);
                    break;
                  case "Repair":
                    f.completeRepair(n, s);
                }
                P.delete(t);
              }
              return (i = !0), !1;
            }
            return !0;
          })),
            U(),
            (i || n !== N) && M();
        },
        DISPATCH_APPLICATION_ERROR: function (e) {
          let { error: t } = e,
            { code: n } = t;
          if (null != n) {
            if (C.includes(n)) V();
            else if (n === I.DispatchErrorCodes.APPLICATION_NOT_FOUND) {
              let { context: e } = t;
              if (null != e) {
                let { application_id: t, branch_id: n } = e;
                k(t, n);
              }
            }
          }
        },
        CONNECTION_OPEN: function () {
          (0, m.isDesktop)() && V();
        },
        LOGOUT: function () {
          c.default.remove(v), (0, m.isDesktop)() && S.default.pause();
        },
      });
    },
    98328: function (e, t, n) {
      "use strict";
      let i;
      n.r(t),
        n.d(t, {
          default: function () {
            return S;
          },
        }),
        n("222007"),
        n("781738");
      var r = n("446674"),
        s = n("913144"),
        a = n("49671"),
        o = n("773336"),
        l = n("535974"),
        u = n("782340");
      let c = {},
        d = (0, o.isWindows)()
          ? "".concat(a.default.process.env.LOCALAPPDATA, "\\DiscordGames")
          : (0, o.isMac)()
            ? "/Applications/DiscordGames"
            : "/tmp";
      function f(e, t) {
        var n;
        c = {
          ...c,
          [e]: { ...(null !== (n = c[e]) && void 0 !== n ? n : {}), ...t },
        };
      }
      function E(e) {
        let { applicationId: t, branchId: n, installationPath: r } = e;
        null == i.installations[t] && (i.installations[t] = {}),
          (i.installations[t][n] = { installationPath: r }),
          !i.installationPaths.has(r) && h({ path: r, metadata: {} });
      }
      function p(e) {
        let { applicationId: t, branchId: n } = e;
        if (null == i.installations[t]) return !1;
        delete i.installations[t][n],
          0 === Object.keys(i.installations[t]).length &&
            delete i.installations[t];
      }
      function h(e) {
        if (i.installationPaths.has(e.path)) return !1;
        f(e.path, e.metadata);
        let t = new Set(i.installationPaths);
        t.add(e.path), (i.installationPaths = t);
      }
      class _ extends r.default.PersistedStore {
        initialize(e) {
          let t = { ...e };
          null == t.installations && (t.installations = {}),
            null == t.defaultInstallationPath &&
              (t.defaultInstallationPath = d),
            null == t.installationPaths
              ? (t.installationPaths = new Set([t.defaultInstallationPath]))
              : (t.installationPaths = new Set(
                  Array.from(t.installationPaths)
                )),
            null == t.pathLabels && (t.pathLabels = {}),
            (i = t);
        }
        getState() {
          return i;
        }
        get defaultInstallationPath() {
          return i.defaultInstallationPath;
        }
        get installationPaths() {
          return Array.from(i.installationPaths).map(e => ({
            path: e,
            label: i.pathLabels[e],
          }));
        }
        get installationPathsMetadata() {
          return c;
        }
        hasGamesInstalledInPath(e) {
          let { installations: t } = i;
          for (let n in t)
            for (let i in t[n]) if (t[n][i].installationPath === e) return !0;
          return !1;
        }
        shouldBeInstalled(e, t) {
          return null != i.installations[e] && null != i.installations[e][t];
        }
        getInstallationPath(e, t) {
          return null == i.installations[e] || null == i.installations[e][t]
            ? null
            : i.installations[e][t].installationPath;
        }
        getLabelFromPath(e) {
          var t, n;
          return e === d
            ? u.default.Messages.INSTALL_LOCATION_MAIN
            : null !==
                  (n =
                    null !== (t = a.default.fileManager.basename(e)) &&
                    void 0 !== t
                      ? t
                      : e
                          .replace(/[/\\]+$/, "")
                          .split(/[/\\]+/g)
                          .slice(-1)[0]) && void 0 !== n
              ? n
              : "?";
        }
      }
      (_.displayName = "InstallationManagerStore"),
        (_.persistKey = "InstallationManagerStore");
      var S = new _(s.default, {
        DISPATCH_APPLICATION_INSTALL: E,
        DISPATCH_APPLICATION_UNINSTALL: p,
        DISPATCH_APPLICATION_CANCEL: function (e) {
          let { applicationId: t, branchId: n } = e,
            i = l.default.getState(t, n);
          null != i &&
            null == i.buildId &&
            null == i.manifestIds &&
            p({ applicationId: t, branchId: n });
        },
        INSTALLATION_LOCATION_ADD: h,
        INSTALLATION_LOCATION_REMOVE: function (e) {
          var t;
          let { path: n } = e;
          if (!i.installationPaths.has(n) || i.defaultInstallationPath === n)
            return !1;
          let r = new Set(i.installationPaths);
          r.delete(n),
            (i.installationPaths = r),
            (t = n),
            (c = { ...c }),
            delete c[t],
            !(function (e) {
              if (null == i.pathLabels[e]) return;
              (i.pathLabels = { ...i.pathLabels }), delete i.pathLabels[e];
            })(n);
        },
        INSTALLATION_LOCATION_UPDATE: function (e) {
          let { path: t, label: n, isDefault: r } = e;
          if (!i.installationPaths.has(t)) return !1;
          if (null != n && "" !== n && i.pathLabels[t] !== n) {
            var s, a;
            (s = t), (a = n), (i.pathLabels = { ...i.pathLabels, [s]: a });
          }
          r &&
            i.defaultInstallationPath !== t &&
            (i.defaultInstallationPath = t);
        },
        INSTALLATION_LOCATION_FETCH_METADATA: function (e) {
          let { metadataPayload: t } = e;
          for (let e in t) f(e, t[e]);
        },
        DISPATCH_APPLICATION_ADD_TO_INSTALLATIONS: E,
      });
    },
    892974: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          BackdropStyles: function () {
            return r;
          },
          default: function () {
            return p;
          },
        });
      var i,
        r,
        s = n("37983"),
        a = n("884691"),
        o = n("414456"),
        l = n.n(o),
        u = n("907002"),
        c = n("77078"),
        d = n("84339"),
        f = n("930352");
      ((i = r || (r = {})).SUBTLE = "SUBTLE"),
        (i.DARK = "DARK"),
        (i.BLUR = "BLUR");
      let E = a.forwardRef(function (e, t) {
        let {
            backdropStyle: n = "SUBTLE",
            backdropInstant: i = !1,
            zIndexBoost: r = 0,
            LayerComponent: a,
            isVisible: o,
            onClose: E,
          } = e,
          p = (function () {
            let e = (0, c.useToken)(
                c.tokens.colors.BG_BACKDROP_NO_OPACITY
              ).spring({ opacity: 0.25 }),
              t = (0, c.useToken)(c.tokens.colors.BG_BACKDROP).spring();
            return { SUBTLE: e, DARK: t, BLUR: t };
          })(),
          h = p[n],
          _ = (0, c.useToken)(c.tokens.colors.BG_BACKDROP_NO_OPACITY).spring({
            opacity: 0,
          }),
          S = { background: _, backdropFilter: "blur(0px)" },
          m = (0, d.default)(i),
          T = (0, u.useTransition)(o, {
            keys: e => (e ? "backdrop" : "empty"),
            config: { duration: i || m ? 0 : 300 },
            from: S,
            enter: {
              background: h,
              backdropFilter: "blur(".concat("BLUR" === n ? 8 : 0, "px)"),
            },
            leave: S,
          });
        if (null == a) {
          let e = { zIndex: 1e3 + r };
          return T((t, n) =>
            n
              ? (0, s.jsx)(u.animated.div, {
                  className: f.backdrop,
                  style: { ...t, ...e },
                  onClick: E,
                })
              : null
          );
        }
        return (0, s.jsx)(a, {
          children: T((e, t) =>
            t
              ? (0, s.jsx)(u.animated.div, {
                  className: l(f.backdrop, f.withLayer),
                  style: e,
                  onClick: E,
                })
              : null
          ),
        });
      });
      var p = E;
    },
    201959: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return f;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("866227"),
        a = n.n(s),
        o = n("900419"),
        l = n.n(o),
        u = n("446674"),
        c = n("915639");
      n("277728");
      var d = n("911045");
      function f(e) {
        let {
            value: t = a().local(),
            minDate: n,
            maxDate: s,
            onSelect: o,
            calendarClassName: f,
            autoFocus: E,
            onClickOutside: p,
          } = e,
          h = r.useCallback(
            (e, t) => {
              null == o || o(a(e), t);
            },
            [o]
          ),
          _ = r.useMemo(() => t.toDate(), [t]),
          S = r.useMemo(() => (null == s ? void 0 : s.toDate()), [s]),
          m = r.useMemo(() => (null == n ? void 0 : n.toDate()), [n]),
          T = (0, u.useStateFromStores)([c.default], () => c.default.locale),
          g = r.useRef(null),
          I = r.useCallback(e => {
            let t = e.currentTarget;
            t.classList.contains("react-datepicker__day") &&
              setTimeout(() => {
                var e, n;
                if (
                  null === (e = g.current) || void 0 === e
                    ? void 0
                    : e.contains(t)
                )
                  return;
                let i =
                  null === (n = g.current) || void 0 === n
                    ? void 0
                    : n.querySelector('.react-datepicker__day[tabindex="0"]');
                null != i && i.focus();
              }, 100);
          }, []);
        return (0, i.jsx)("div", {
          ref: g,
          className: d.calendarPicker,
          children: (0, i.jsx)(l, {
            calendarClassName: f,
            selected: _,
            onChange: h,
            autoFocus: E,
            fixedHeight: !0,
            inline: !0,
            locale: T,
            maxDate: S,
            minDate: m,
            onKeyDown: I,
            onClickOutside: p,
          }),
        });
      }
    },
    491605: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return u;
          },
        }),
        n("222007");
      var i,
        r,
        s = n("37983"),
        a = n("884691"),
        o = n("862337");
      ((r = i || (i = {})).SVG = "svg"),
        (r.CANVAS = "canvas"),
        (r.HYBRID = "hybrid");
      class l extends a.Component {
        componentDidMount() {
          (null == this.props.versionKey || !(this.props.versionKey < 0)) &&
            this.loadAnimation();
        }
        componentDidUpdate(e) {
          (null == this.props.versionKey || !(this.props.versionKey < 0)) &&
            (null != this.props.versionKey &&
            null != e.versionKey &&
            this.props.versionKey > e.versionKey
              ? this.loadAnimation()
              : this.playOrPauseAnimation(e));
        }
        componentWillUnmount() {
          null != this.animation &&
            (this.animation.stop(),
            this.animation.destroy(),
            (this.animation = null)),
            this.delayTimeout.stop();
        }
        playOrPauseAnimation(e) {
          null != this.animation &&
            (this.props.shouldAnimate && (null == e || !e.shouldAnimate)
              ? this.props.resetOnPlay
                ? this.animation.goToAndPlay(0)
                : this.animation.play()
              : !this.props.shouldAnimate &&
                (null == e || e.shouldAnimate) &&
                (this.animation.pause(),
                null != this.props.pauseAtFrame &&
                  this.animation.goToAndStop(this.props.pauseAtFrame, !0)));
        }
        render() {
          return (0, s.jsx)("div", {
            className: this.props.className,
            ref: this.animationRef,
          });
        }
        constructor(...e) {
          super(...e),
            (this.animationRef = a.createRef()),
            (this.delayTimeout = new o.Timeout()),
            (this.loadAnimation = async () => {
              let {
                importData: e,
                loop: t,
                autoplay: i,
                delay: r,
                renderer: s,
                shouldAnimate: a,
              } = this.props;
              null != this.animation && this.animation.destroy();
              let [o, { default: l }] = await Promise.all([
                e(),
                n.el("865981").then(n.t.bind(n, "865981", 23)),
              ]);
              null != this.animationRef.current &&
                ((this.animation = l.loadAnimation({
                  container: this.animationRef.current,
                  renderer: s,
                  loop: t,
                  autoplay: i && null == r && a,
                  animationData: o,
                })),
                null != r
                  ? this.delayTimeout.start(r, () => {
                      var e;
                      null === (e = this.animation) || void 0 === e || e.play();
                    })
                  : this.playOrPauseAnimation(),
                this.animation.addEventListener(
                  "complete",
                  this.handleComplete
                ));
            }),
            (this.handleComplete = () => {
              let { onComplete: e } = this.props;
              null != e && e();
            });
        }
      }
      (l.defaultProps = {
        loop: !0,
        autoplay: !0,
        renderer: "svg",
        shouldAnimate: !0,
        resetOnPlay: !1,
      }),
        (l.Renderers = i);
      var u = l;
    },
    886074: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return c;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("414456"),
        s = n.n(r),
        a = n("65597"),
        o = n("206230"),
        l = n("491605"),
        u = n("962026");
      function c(e) {
        let { className: t } = e,
          r = (0, a.default)([o.default], () => o.default.useReducedMotion);
        async function c() {
          let { default: e } = await n
            .el("801926")
            .then(n.t.bind(n, "801926", 19));
          return e;
        }
        return (0, i.jsx)(l.default, {
          importData: c,
          shouldAnimate: !r,
          className: s(u.sparkles, t),
        });
      }
    },
    810567: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return S;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("227645"),
        l = n("718776"),
        u = n("242670"),
        c = n("945330"),
        d = n("229915"),
        f = n("782340"),
        E = n("62184");
      let p = Object.freeze({
          SMALL: E.small,
          MEDIUM: E.medium,
          LARGE: E.large,
        }),
        h = e => {
          let {
            hasContent: t,
            onClear: n,
            className: s,
            isLoading: l,
            size: h = p.SMALL,
          } = e;
          return (0, i.jsx)(o.Clickable, {
            className: a(s, E.iconLayout, h, { [E.pointer]: t }),
            onClick: e => {
              e.stopPropagation(), null != n && n(e);
            },
            tabIndex: t ? 0 : -1,
            "aria-hidden": !t,
            onMouseDown: e => {
              e.preventDefault(), e.stopPropagation();
            },
            children: (0, i.jsx)("div", {
              className: E.iconContainer,
              children: l
                ? (0, i.jsx)(u.Spinner, {
                    type: u.Spinner.Type.SPINNING_CIRCLE,
                    className: a(E.icon, E.visible),
                  })
                : (0, i.jsxs)(r.Fragment, {
                    children: [
                      (0, i.jsx)(d.default, {
                        className: a(E.icon, { [E.visible]: !t }),
                        "aria-label": f.default.Messages.SEARCH,
                      }),
                      (0, i.jsx)(c.default, {
                        className: a(E.clear, { [E.visible]: t }),
                        "aria-label": f.default.Messages.CLEAR,
                      }),
                    ],
                  }),
            }),
          });
        };
      h.Sizes = p;
      class _ extends r.PureComponent {
        focus() {
          let { current: e } = this.inputRef;
          null == e || e.focus();
        }
        blur() {
          let { current: e } = this.inputRef;
          null == e || e.blur();
        }
        render() {
          let {
            query: e,
            autoFocus: t,
            onClear: n,
            className: r,
            placeholder: s = f.default.Messages.SEARCH,
            iconClassName: o,
            onKeyDown: u,
            onKeyUp: c,
            onKeyPress: d,
            isLoading: p,
            size: _,
            disabled: S,
            onChange: m,
            onBlur: T,
            onFocus: g,
            autoComplete: I,
            inputProps: C,
            hideSearchIcon: v,
            "aria-label": A = f.default.Messages.SEARCH,
            ...R
          } = this.props;
          return (0, i.jsx)(l.FocusRing, {
            focusTarget: this.inputRef,
            ringTarget: this.containerRef,
            children: (0, i.jsx)("div", {
              className: a(r, E.container, _, { [E.disabled]: S }),
              ref: this.containerRef,
              ...R,
              children: (0, i.jsxs)("div", {
                className: E.inner,
                children: [
                  (0, i.jsx)("input", {
                    ...C,
                    onFocus: g,
                    onBlur: T,
                    className: E.input,
                    value: e,
                    onChange: this.handleOnChange,
                    onKeyDown: u,
                    onKeyUp: c,
                    onKeyPress: d,
                    placeholder: s,
                    disabled: S,
                    autoFocus: t,
                    autoComplete: I,
                    "aria-label": A,
                    ref: this.inputRef,
                  }),
                  !v &&
                    (0, i.jsx)(h, {
                      size: _,
                      hasContent: e.length > 0,
                      onClear: n,
                      className: o,
                      isLoading: p,
                    }),
                ],
              }),
            }),
          });
        }
        constructor(...e) {
          super(...e),
            (this.inputRef = r.createRef()),
            (this.containerRef = r.createRef()),
            (this.handleOnChange = e => {
              let { onChange: t } = this.props;
              null == t || t(e.currentTarget.value);
            });
        }
      }
      (_.Sizes = p),
        (_.defaultProps = { size: p.SMALL, isLoading: !1, disabled: !1 });
      var S = _;
    },
    529e3: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return T;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("917351"),
        l = n.n(o),
        u = n("509043"),
        c = n("669491"),
        d = n("718776"),
        f = n("145131"),
        E = n("36694"),
        p = n("49111"),
        h = n("422955"),
        _ = n("926622");
      let S = l.memoize(e => {
        let t = !1;
        if (null != e && (0, u.isValidHex)(e)) {
          let n = (0, u.hex2int)(e);
          null != n && (t = 0.2 > (0, u.getDarkness)(n));
        }
        return t
          ? c.default.unsafe_rawColors.BLACK_500.css
          : c.default.unsafe_rawColors.WHITE_500.css;
      });
      class m extends r.PureComponent {
        render() {
          let e;
          let { selected: t, color: n, className: r, children: s } = this.props,
            o = S(n);
          return (
            t
              ? (e = {
                  color: o,
                  background:
                    null != n ? n : c.default.unsafe_rawColors.BRAND_500.css,
                })
              : null != n && (e = { color: n }),
            (0, i.jsx)(d.FocusRing, {
              offset: { left: 4 },
              children: (0, i.jsxs)(f.default, {
                className: a(h.selectableItem, r, { [h.selected]: t }),
                onClick: this.handleClick,
                onKeyUp: this.handleKeyUp,
                align: f.default.Align.CENTER,
                style: { ...e, ...this.props.style },
                role: "button",
                tabIndex: 0,
                children: [
                  (0, i.jsx)(f.default, {
                    align: f.default.Align.CENTER,
                    className: h.selectableItemLabel,
                    shrink: 1,
                    children: s,
                  }),
                  t &&
                    (0, i.jsx)(f.default, {
                      wrap: f.default.Wrap.WRAP,
                      className: _.marginReset,
                      grow: 0,
                      shrink: 0,
                      children: (0, i.jsx)(E.default, { color: o }),
                    }),
                ],
              }),
            })
          );
        }
        constructor(...e) {
          super(...e),
            (this.state = { color: S(this.props.color) }),
            (this.handleKeyUp = e => {
              if (
                e.which === p.KeyboardKeys.ENTER ||
                e.which === p.KeyboardKeys.SPACE
              ) {
                let { onClick: e, ...t } = this.props;
                e(t);
              }
            }),
            (this.handleClick = () => {
              let { onClick: e, ...t } = this.props;
              e(t);
            });
        }
      }
      var T = m;
    },
    124299: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return c;
          },
        }),
        n("222007"),
        n("424973");
      var i = n("37983"),
        r = n("884691"),
        s = n("414456"),
        a = n.n(s),
        o = n("446662"),
        l = n("684510");
      let u = r.memo(
        r.forwardRef((e, t) => {
          let {
              onScroll: n,
              onResize: s,
              listPadding: u = [0, 0, 0, 0],
              renderRow: c,
              renderSection: d,
              renderSectionHeader: f,
              renderSectionFooter: E,
              renderListHeader: p,
              rowCount: h,
              rowCountBySection: _,
              rowHeight: S,
              sectionMarginBottom: m,
              sectionHeaderHeight: T,
              sectionFooterHeight: g,
              listHeaderHeight: I,
              stickyHeaders: C = !1,
              className: v,
              hideScrollbar: A = !1,
              fade: R = !1,
              initialScrollTop: N = 0,
              role: O = "list",
            } = e,
            [D, y] = r.useState(-1),
            [P, L] = r.useState(-1),
            b = r.useRef(null),
            M = r.useRef(0),
            U = r.useRef(-1);
          r.useLayoutEffect(() => {
            var e;
            let t =
              null === (e = b.current) || void 0 === e
                ? void 0
                : e.getScrollerNode();
            null != t && (t.scrollTop = N);
          }, []);
          let G = r.useCallback(() => {
              let e = "function" == typeof I ? I() : I;
              return null == e ? 0 : e;
            }, [I]),
            w = r.useCallback(
              (e, t, n) =>
                "function" == typeof S
                  ? S(n, { sectionIndex: e, sectionRowIndex: t })
                  : S,
              [S]
            ),
            k = r.useCallback(
              e => {
                let t = "function" == typeof T ? T(e) : T;
                return null == t ? 0 : t;
              },
              [T]
            ),
            x = r.useCallback(
              e => {
                let t = "function" == typeof g ? g(e) : g;
                return null == t ? 0 : t;
              },
              [g]
            ),
            F = r.useCallback(
              e => {
                let t = "function" == typeof m ? m(e) : m;
                return null == t ? 0 : t;
              },
              [m]
            ),
            V = r.useRef([]),
            B = r.useRef([]),
            {
              totalHeight: H,
              rowDescriptors: j,
              sectionDescriptors: Y,
            } = r.useMemo(() => {
              let e = 0,
                t = null != _,
                n = t ? _.length : 1,
                i = u[0],
                r = [],
                s = [];
              i += G();
              for (let a = 0; a < n; a++) {
                let n = t ? _[a] : h,
                  o = (null == _ ? void 0 : _[a]) !== 0;
                (s[a] = { firstRowIndex: e, offset: { top: i, bottom: -1 } }),
                  (i += k(a));
                for (let t = 0; t < n; t++) {
                  let n = o ? w(a, t, e) : 0,
                    s = i + n,
                    l = { top: i, bottom: s };
                  (r[e] = { sectionIndex: a, offset: l }), (i = s), e++;
                }
                (i += x(a) + F(a)), (s[a].offset.bottom = i);
              }
              return {
                totalHeight: (i += u[2]),
                rowDescriptors: r,
                sectionDescriptors: s,
              };
            }, [w, x, k, F, u, h, _, G]);
          (V.current = Y), (B.current = j);
          let W = r.useCallback(() => {
            var e;
            let t =
              null === (e = b.current) || void 0 === e
                ? void 0
                : e.getScrollerNode();
            if (null == t) return;
            let { offsetWidth: n, offsetHeight: i, scrollTop: r } = t;
            L(i), y(r), null == s || s({ width: n, height: i });
          }, [s]);
          r.useLayoutEffect(() => {
            -1 === P && W();
          }, [P, W]),
            r.useEffect(() => {
              var e;
              let t =
                  null === (e = b.current) || void 0 === e
                    ? void 0
                    : e.getScrollerNode(),
                n = null == t ? void 0 : t.ownerDocument.defaultView;
              if (null == t || null == n) return;
              let i = new n.ResizeObserver(W);
              return i.observe(t), () => i.disconnect();
            }, [W]);
          let K = r.useCallback(() => {
            var e;
            let t =
              null === (e = b.current) || void 0 === e
                ? void 0
                : e.getScrollerNode();
            null != t &&
              (window.cancelAnimationFrame(U.current),
              (U.current = window.requestAnimationFrame(() => {
                let { scrollTop: e } = t;
                (M.current = e), null == n || n(e), y(e);
              })));
          }, [n]);
          r.useImperativeHandle(
            t,
            () => ({
              scrollTo: function (e) {
                var t;
                let n =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : {},
                  { animate: i = !1 } = n;
                null === (t = b.current) ||
                  void 0 === t ||
                  t.scrollTo({ to: e, animate: i });
              },
              scrollRowIntoView: function (e) {
                let t =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : {},
                  { animate: n = !1, offset: i = 0 } = t,
                  r = B.current[e];
                null != r &&
                  window.requestAnimationFrame(() => {
                    var t, s;
                    let {
                        sectionIndex: a,
                        offset: { top: o, bottom: l },
                      } = r,
                      u = k(a),
                      c = o - (C ? u : 0) - i <= M.current,
                      d = l + i >= M.current + P;
                    if (c) {
                      let r = M.current + u - o,
                        s = C ? M.current - r : o;
                      null === (t = b.current) ||
                        void 0 === t ||
                        t.scrollTo({ to: 0 === e ? 0 : s - i, animate: n });
                    } else if (d) {
                      let e = l - (M.current + P);
                      null === (s = b.current) ||
                        void 0 === s ||
                        s.scrollTo({ to: M.current + e + i, animate: n });
                    }
                  });
              },
              scrollToSectionTop: function (e) {
                let t =
                    arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : {},
                  { animate: n = !1, offset: i = 0 } = t,
                  r = V.current[e];
                null != r &&
                  window.requestAnimationFrame(() => {
                    var t;
                    null === (t = b.current) ||
                      void 0 === t ||
                      t.scrollTo({
                        to: (0 === e ? 0 : r.offset.top) + i,
                        animate: n,
                      });
                  });
              },
              getListDimensions: () => ({ height: P, totalHeight: H }),
              getSectionDescriptors: () => V.current,
              getRowDescriptors: () => B.current,
              getScrollerNode: () => {
                var e;
                return null === (e = b.current) || void 0 === e
                  ? void 0
                  : e.getScrollerNode();
              },
              scrollIntoViewNode: e => {
                var t;
                return null === (t = b.current) || void 0 === t
                  ? void 0
                  : t.scrollIntoViewNode({ node: e });
              },
            }),
            [k, C, H, P]
          );
          let { visibleItems: z, listOffset: q } = r.useMemo(() => {
              if (-1 === P || -1 === D)
                return { visibleItems: null, listOffset: 0 };
              let e = D + P,
                t = 0,
                n = u[0],
                i = [],
                r = G();
              null != p && D < r ? i.push(p()) : (n += r);
              for (let r = 0; r < Y.length; r++) {
                let s = Y[r],
                  {
                    firstRowIndex: a,
                    offset: { top: o, bottom: l },
                  } = s,
                  u = l - o;
                if (0 === u) continue;
                let p = k(r),
                  h = x(r),
                  _ = F(r);
                if (l <= D) n = l;
                else if (l > D && o < e) {
                  t = a;
                  let s = [],
                    l = 0,
                    S = 0,
                    m = o + p,
                    T = m >= D && o <= e;
                  for (
                    null != f && (C || T) && s.push(f(r)), !T && !C && (n += p);
                    l + p + h < u - _;

                  ) {
                    let i = w(r, S, t),
                      a = o + l + p,
                      u = a + i;
                    if (u <= D) n = u - (C ? p : 0);
                    else if (u > D && a < e)
                      s.push(c(t, { sectionIndex: r, sectionRowIndex: S }));
                    else break;
                    (l += i), S++, t++;
                  }
                  let g = o + p + l,
                    I = g + h,
                    v = I >= D && g <= e;
                  null != E && v && s.push(E(r)),
                    null != d ? i.push(d(r, s)) : (i = [...i, ...s]);
                } else break;
              }
              return { visibleItems: i, listOffset: n };
            }, [w, x, k, F, u, c, d, E, f, D, Y, C, p, G, P]),
            X = r.useMemo(() => {
              var e, t, n;
              return {
                top: q,
                right:
                  null !== (e = null == u ? void 0 : u[1]) && void 0 !== e
                    ? e
                    : 0,
                bottom:
                  null !== (t = null == u ? void 0 : u[2]) && void 0 !== t
                    ? t
                    : 0,
                left:
                  null !== (n = null == u ? void 0 : u[3]) && void 0 !== n
                    ? n
                    : 0,
              };
            }, [q, u]),
            Q = r.useMemo(() => ({ height: H }), [H]),
            Z = A ? o.AdvancedScrollerNone : o.AdvancedScrollerThin;
          return (0, i.jsxs)(Z, {
            fade: R,
            className: a(l.scroller, v),
            ref: b,
            onScroll: K,
            children: [
              (0, i.jsx)("div", {
                role: O,
                className: l.listItems,
                style: X,
                children: z,
              }),
              (0, i.jsx)("div", { className: l.listHeight, style: Q }),
            ],
          });
        })
      );
      var c = u;
    },
    561744: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        });
      var i = n("884691");
      function r(e) {
        let t = i.useRef(e);
        return (t.current = e), t;
      }
    },
    837899: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("469563"),
        s = n("384737"),
        a = n("75196"),
        o = (0, r.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: n = 24,
              color: r = "currentColor",
              foreground: s,
              ...o
            } = e;
            return (0, i.jsx)("svg", {
              ...(0, a.default)(o),
              width: t,
              height: n,
              viewBox: "0 0 24 24",
              children: (0, i.jsx)("path", {
                fill: r,
                className: s,
                d: "M16.59 8.59003L12 13.17L7.41 8.59003L6 10L12 16L18 10L16.59 8.59003Z",
              }),
            });
          },
          s.ChevronSmallDownIcon,
          void 0,
          { size: 24 }
        );
    },
    425190: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("469563"),
        s = n("260792"),
        a = n("75196"),
        o = (0, r.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: n = 24,
              color: r = "currentColor",
              foreground: s,
              ...o
            } = e;
            return (0, i.jsx)("svg", {
              ...(0, a.default)(o),
              width: t,
              height: n,
              viewBox: "0 0 24 24",
              children: (0, i.jsx)("path", {
                fill: r,
                className: s,
                d: "M7.41 16.0001L12 11.4201L16.59 16.0001L18 14.5901L12 8.59006L6 14.5901L7.41 16.0001Z",
              }),
            });
          },
          s.ChevronSmallUpIcon,
          void 0,
          { size: 24 }
        );
    },
    943232: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("469563"),
        s = n("867603"),
        a = n("75196"),
        o = (0, r.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: n = 24,
              color: r = "currentColor",
              foreground: s,
              ...o
            } = e;
            return (0, i.jsx)("svg", {
              ...(0, a.default)(o),
              width: t,
              height: n,
              viewBox: "0 0 24 24",
              children: (0, i.jsxs)("g", {
                fill: "none",
                fillRule: "evenodd",
                children: [
                  (0, i.jsx)("path", {
                    className: s,
                    fill: r,
                    d: "M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19a2 2 0 0 0 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7v-5z",
                  }),
                  (0, i.jsx)("rect", { width: "24", height: "24" }),
                ],
              }),
            });
          },
          s.CalendarIcon,
          void 0,
          { size: 24 }
        );
    },
    36562: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("75196");
      function s(e) {
        let {
          width: t = 24,
          height: n = 24,
          color: s = "currentColor",
          className: a,
          foreground: o,
          ...l
        } = e;
        return (0, i.jsx)("svg", {
          ...(0, r.default)(l),
          className: a,
          width: t,
          height: n,
          viewBox: "0 0 24 24",
          children: (0, i.jsx)("path", {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M18.625 3H5.375C4.06519 3 3 4.06519 3 5.375V18.625C3 19.936 4.06519 21 5.375 21H18.625C19.936 21 21 19.936 21 18.625V5.375C21.0057 4.08803 19.9197 3 18.625 3ZM19 19V5H4.99999V19H19Z",
            className: o,
            fill: s,
          }),
        });
      }
    },
    781291: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("75196");
      function s(e) {
        let {
          width: t = 24,
          height: n = 24,
          color: s = "currentColor",
          className: a,
          background: o,
          foreground: l,
          ...u
        } = e;
        return (0, i.jsxs)("svg", {
          ...(0, r.default)(u),
          className: a,
          width: t,
          height: n,
          viewBox: "0 0 24 24",
          children: [
            (0, i.jsx)("path", {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M5.37499 3H18.625C19.9197 3 21.0056 4.08803 21 5.375V18.625C21 19.936 19.9359 21 18.625 21H5.37499C4.06518 21 3 19.936 3 18.625V5.375C3 4.06519 4.06518 3 5.37499 3Z",
              className: o,
              fill: s,
            }),
            (0, i.jsx)("path", {
              d: "M9.58473 14.8636L6.04944 11.4051L4.50003 12.9978L9.58473 18L19.5 8.26174L17.9656 6.64795L9.58473 14.8636Z",
              className: l,
              fill: s,
            }),
          ],
        });
      }
    },
    36694: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("469563"),
        s = n("269096"),
        a = n("75196"),
        o = (0, r.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: n = 24,
              color: r = "currentColor",
              foreground: s,
              ...o
            } = e;
            return (0, i.jsx)("svg", {
              ...(0, a.default)(o),
              width: t,
              height: n,
              viewBox: "0 0 24 24",
              children: (0, i.jsx)("path", {
                className: s,
                fill: r,
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M8.99991 16.17L4.82991 12L3.40991 13.41L8.99991 19L20.9999 7.00003L19.5899 5.59003L8.99991 16.17Z",
              }),
            });
          },
          s.CheckmarkLargeIcon,
          void 0,
          { size: 24 }
        );
    },
    578706: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("469563"),
        s = n("891128"),
        a = n("75196"),
        o = (0, r.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: n = 24,
              color: r = "currentColor",
              foreground: s,
              backgroundColor: o,
              ...l
            } = e;
            return (0, i.jsxs)("svg", {
              ...(0, a.default)(l),
              width: t,
              height: n,
              viewBox: "0 0 24 24",
              xmlns: "http://www.w3.org/2000/svg",
              children: [
                null != o
                  ? (0, i.jsx)("circle", { r: 8, cx: 12, cy: 12, fill: o })
                  : null,
                (0, i.jsx)("g", {
                  fill: "none",
                  fillRule: "evenodd",
                  children: (0, i.jsx)("path", {
                    className: s,
                    fill: r,
                    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z",
                  }),
                }),
              ],
            });
          },
          s.CircleCheckIcon,
          {
            backgroundColor: "secondaryColor",
            foreground: "colorClass",
            className: "className",
            color: "color",
          },
          { size: 24 }
        );
    },
    522049: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("469563"),
        s = n("797439"),
        a = n("75196"),
        o = (0, r.replaceIcon)(
          function (e) {
            let {
              width: t = 16,
              height: n = 16,
              color: r = "currentColor",
              foreground: s,
              ...o
            } = e;
            return (0, i.jsx)("svg", {
              ...(0, a.default)(o),
              width: t,
              height: n,
              viewBox: "0 0 26 28",
              fill: "none",
              children: (0, i.jsx)("path", {
                className: s,
                fill: r,
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M25.4655 8.13686L24.0851 2.98525C23.5134 0.851387 21.32 -0.414947 19.1862 0.156821L3.73134 4.29792C1.59748 4.86969 0.331147 7.06304 0.902914 9.19691L2.01124 13.3332L1.9999 15.9999L1.9999 23.3332C1.9999 25.5424 3.79077 27.3332 5.99991 27.3332L21.9999 27.3332C24.209 27.3332 25.9999 25.5424 25.9999 23.3332V15.3333H5.99991L6.07237 13.3332L25.4655 8.13686ZM14.609 8.28512L10.8245 9.29916L10.7552 5.17663L14.5396 4.1626L14.609 8.28512ZM17.264 7.5737L22.1995 6.25124L21.5093 3.67543C21.3187 2.96415 20.5876 2.54204 19.8763 2.73263L17.1947 3.45117L17.264 7.5737ZM8.10009 5.88806L8.16944 10.0106L4.1689 11.0825L3.47872 8.50672C3.28813 7.79543 3.71024 7.06432 4.42153 6.87373L8.10009 5.88806Z",
              }),
            });
          },
          s.ClipsIcon,
          void 0,
          { size: 16 }
        );
    },
    984678: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("469563"),
        s = n("49482"),
        a = n("75196"),
        o = (0, r.replaceIcon)(
          function (e) {
            let { width: t = 24, height: n = 24, ...r } = e;
            return (0, i.jsx)("svg", {
              ...(0, a.default)(r),
              width: t,
              height: n,
              viewBox: "0 0 24 24",
              children: (0, i.jsx)("path", {
                fill: "#ED4245",
                d: "M18.4 1.879L22.121 5.6l-6.4 6.4 6.4 6.4-3.721 3.721-6.4-6.4-6.4 6.4L1.879 18.4l6.4-6.4-6.4-6.4L5.6 1.879l6.4 6.4 6.4-6.4z",
              }),
            });
          },
          s.CloseLargeIcon,
          void 0,
          { size: 24 }
        );
    },
    980428: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("469563"),
        s = n("448052"),
        a = n("75196"),
        o = (0, r.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: n = 24,
              color: r = "currentColor",
              foreground: s,
              ...o
            } = e;
            return (0, i.jsx)("svg", {
              ...(0, a.default)(o),
              width: t,
              height: n,
              viewBox: "0 0 24 24",
              children: (0, i.jsxs)("g", {
                fill: "none",
                fillRule: "evenodd",
                children: [
                  (0, i.jsx)("polygon", {
                    className: s,
                    fill: r,
                    fillRule: "nonzero",
                    points: "18.35 4.35 16 2 6 12 16 22 18.35 19.65 10.717 12",
                  }),
                  (0, i.jsx)("polygon", { points: "0 0 24 0 24 24 0 24" }),
                ],
              }),
            });
          },
          s.ChevronSmallLeftIcon,
          void 0,
          { size: 24 }
        );
    },
    904276: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("75196");
      function s(e) {
        let {
          width: t = 24,
          height: n = 24,
          color: s = "currentColor",
          foreground: a,
          ...o
        } = e;
        return (0, i.jsx)("svg", {
          ...(0, r.default)(o),
          width: t,
          height: n,
          viewBox: "0 0 24 24",
          children: (0, i.jsx)("path", {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z",
            className: a,
            fill: s,
          }),
        });
      }
    },
    875436: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("75196");
      function s(e) {
        let {
          width: t = 24,
          height: n = 24,
          color: s = "currentColor",
          background: a,
          foreground: o,
          ...l
        } = e;
        return (0, i.jsxs)("svg", {
          ...(0, r.default)(l),
          width: t,
          height: n,
          viewBox: "0 0 24 24",
          children: [
            (0, i.jsx)("path", {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M12 20C16.4183 20 20 16.4183 20 12C20 7.58172 16.4183 4 12 4C7.58172 4 4 7.58172 4 12C4 16.4183 7.58172 20 12 20ZM12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z",
              className: a,
              fill: s,
            }),
            (0, i.jsx)("circle", {
              cx: "12",
              cy: "12",
              r: "5",
              className: o,
              fill: s,
            }),
          ],
        });
      }
    },
    772280: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("469563"),
        s = n("748802"),
        a = n("75196"),
        o = (0, r.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: n = 24,
              color: r = "currentColor",
              foreground: s,
              ...o
            } = e;
            return (0, i.jsx)("svg", {
              ...(0, a.default)(o),
              width: t,
              height: n,
              viewBox: "0 0 24 24",
              children: (0, i.jsxs)("g", {
                fill: "none",
                fillRule: "evenodd",
                children: [
                  (0, i.jsx)("polygon", {
                    className: s,
                    fill: r,
                    fillRule: "nonzero",
                    points:
                      "8.47 2 6.12 4.35 13.753 12 6.12 19.65 8.47 22 18.47 12",
                  }),
                  (0, i.jsx)("polygon", { points: "0 0 24 0 24 24 0 24" }),
                ],
              }),
            });
          },
          s.ChevronSmallRightIcon,
          void 0,
          { size: 24 }
        );
    },
    229915: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("469563"),
        s = n("638558"),
        a = n("75196"),
        o = (0, r.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: n = 24,
              color: r = "currentColor",
              foreground: s,
              ...o
            } = e;
            return (0, i.jsx)("svg", {
              ...(0, a.default)(o),
              width: t,
              height: n,
              viewBox: "0 0 24 24",
              children: (0, i.jsx)("path", {
                className: s,
                fill: r,
                d: "M21.707 20.293L16.314 14.9C17.403 13.504 18 11.799 18 10C18 7.863 17.167 5.854 15.656 4.344C14.146 2.832 12.137 2 10 2C7.863 2 5.854 2.832 4.344 4.344C2.833 5.854 2 7.863 2 10C2 12.137 2.833 14.146 4.344 15.656C5.854 17.168 7.863 18 10 18C11.799 18 13.504 17.404 14.9 16.314L20.293 21.706L21.707 20.293ZM10 16C8.397 16 6.891 15.376 5.758 14.243C4.624 13.11 4 11.603 4 10C4 8.398 4.624 6.891 5.758 5.758C6.891 4.624 8.397 4 10 4C11.603 4 13.109 4.624 14.242 5.758C15.376 6.891 16 8.398 16 10C16 11.603 15.376 13.11 14.242 14.243C13.109 15.376 11.603 16 10 16Z",
              }),
            });
          },
          s.MagnifyingGlassIcon,
          void 0,
          { size: 24 }
        );
    },
    830031: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("469563"),
        s = n("269096"),
        a = n("75196"),
        o = (0, r.replaceIcon)(
          function (e) {
            let { width: t = 24, height: n = 24, className: r, ...s } = e;
            return (0, i.jsx)("svg", {
              className: r,
              width: t,
              height: n,
              viewBox: "0 0 24 24",
              fill: "none",
              ...(0, a.default)(s),
              children: (0, i.jsx)("path", {
                fill: "#3BA55C",
                d: "M9.00043 14.0492L19.5904 3.46924L23.1212 7.00006L8.99993 21.1214L1.28485 13.4063L4.83367 9.88248L9.00043 14.0492Z",
              }),
            });
          },
          s.CheckmarkLargeIcon,
          void 0,
          { size: 24 }
        );
    },
    423487: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("469563"),
        s = n("165984"),
        a = n("75196"),
        o = (0, r.replaceIcon)(
          function (e) {
            let {
              width: t = 20,
              height: n = 20,
              color: r = "currentColor",
              foreground: s,
              ...o
            } = e;
            return (0, i.jsx)("svg", {
              ...(0, a.default)(o),
              width: t,
              height: n,
              viewBox: "0 0 20 20",
              children: (0, i.jsx)("path", {
                d: "M10 0C4.486 0 0 4.486 0 10C0 15.515 4.486 20 10 20C15.514 20 20 15.515 20 10C20 4.486 15.514 0 10 0ZM9 4H11V11H9V4ZM10 15.25C9.31 15.25 8.75 14.691 8.75 14C8.75 13.31 9.31 12.75 10 12.75C10.69 12.75 11.25 13.31 11.25 14C11.25 14.691 10.69 15.25 10 15.25Z",
                fillRule: "evenodd",
                clipRule: "evenodd",
                className: s,
                fill: r,
              }),
            });
          },
          s.CircleExclamationPointIcon,
          void 0,
          { size: 20 }
        );
    },
    983782: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          AppLayerContainer: function () {
            return d;
          },
          AppLayerProvider: function () {
            return f;
          },
          appLayerContext: function () {
            return E;
          },
          AppReferencePositionLayer: function () {
            return p;
          },
          default: function () {
            return h;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("228256"),
        a = n("222163");
      let {
          Layer: o,
          LayerContainer: l,
          LayerProvider: u,
          layerContext: c,
        } = (0, s.createLayer)("App"),
        d = l,
        f = u,
        E = c,
        p = r.forwardRef(function (e, t) {
          return (0, i.jsx)(o, {
            children: (0, i.jsx)(a.ReferencePositionLayer, { ref: t, ...e }),
          });
        });
      var h = o;
    },
    668596: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          VerificationLayerContainer: function () {
            return o;
          },
          VerificationLayerProvider: function () {
            return l;
          },
          default: function () {
            return u;
          },
        });
      var i = n("228256");
      let {
          Layer: r,
          LayerContainer: s,
          LayerProvider: a,
        } = (0, i.createLayer)("Verification"),
        o = s,
        l = a;
      var u = r;
    },
    258078: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return d;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("414456"),
        s = n.n(r),
        a = n("426656"),
        o = n("851706");
      let l = Object.freeze({
          STANDARD: a.colorStandard,
          MUTED: a.colorMuted,
          ERROR: a.colorError,
          BRAND: a.colorBrand,
          LINK: a.colorLink,
          HEADER_PRIMARY: a.colorHeaderPrimary,
          HEADER_SECONDARY: a.colorHeaderSecondary,
          STATUS_YELLOW: a.colorStatusYellow,
          STATUS_GREEN: a.colorStatusGreen,
          STATUS_RED: a.colorStatusRed,
          INTERACTIVE_ACTIVE: a.colorInteractiveActive,
          INTERACTIVE_NORMAL: a.colorInteractiveNormal,
          ALWAYS_WHITE: a.colorWhite,
          CUSTOM: null,
        }),
        u = Object.freeze({
          SIZE_10: o.size10,
          SIZE_12: o.size12,
          SIZE_14: o.size14,
          SIZE_16: o.size16,
          SIZE_20: o.size20,
          SIZE_24: o.size24,
          SIZE_32: o.size32,
        }),
        c = e => {
          let {
            className: t,
            color: n = l.STANDARD,
            size: r = u.SIZE_14,
            tag: o = "div",
            selectable: c = !1,
            strong: d = !1,
            children: f,
            style: E,
            "aria-label": p,
            ...h
          } = e;
          return (0, i.jsx)(o, {
            "aria-label": p,
            className: s(n, r, t, { [a.selectable]: c, [a.strong]: d }),
            style: E,
            ...h,
            children: f,
          });
        };
      (c.Colors = l), (c.Sizes = u);
      var d = c;
    },
    587974: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MaskIDs: function () {
            return r;
          },
          default: function () {
            return v;
          },
          MaskLibrary: function () {
            return A;
          },
        });
      var i,
        r,
        s = n("37983"),
        a = n("884691"),
        o = n("414456"),
        l = n.n(o),
        u = n("52904"),
        c = n("573135"),
        d = n("580016");
      ((i = r || (r = {})).SQUIRCLE = "svg-mask-squircle"),
        (i.HEADER_BAR_BADGE = "svg-mask-header-bar-badge"),
        (i.VOICE_USER_SUMMARY_ITEM = "svg-mask-voice-user-summary-item"),
        (i.VERTICAL_FADE = "svg-mask-vertical-fade"),
        (i.PANEL_BUTTON = "svg-mask-panel-button"),
        (i.CHANNEL_CALL_CONTROL_BUTTON =
          "svg-mask-channel-call-control-button"),
        (i.CHANNEL_CALL_CONTROL_BUTTON_BADGE_16 =
          "svg-mask-channel-call-control-button-badge-16"),
        (i.CHANNEL_CALL_CONTROL_BUTTON_BADGE_22 =
          "svg-mask-channel-call-control-button-badge-22"),
        (i.CHANNEL_CALL_CONTROL_BUTTON_BADGE_29 =
          "svg-mask-channel-call-control-button-badge-29"),
        (i.AVATAR_DEFAULT = "svg-mask-avatar-default"),
        (i.AVATAR_STATUS_ROUND_16 = "svg-mask-avatar-status-round-16"),
        (i.AVATAR_STATUS_ROUND_20 = "svg-mask-avatar-status-round-20"),
        (i.AVATAR_STATUS_ROUND_24 = "svg-mask-avatar-status-round-24"),
        (i.AVATAR_STATUS_ROUND_32 = "svg-mask-avatar-status-round-32"),
        (i.AVATAR_STATUS_ROUND_40 = "svg-mask-avatar-status-round-40"),
        (i.AVATAR_STATUS_ROUND_48 = "svg-mask-avatar-status-round-48"),
        (i.AVATAR_STATUS_ROUND_56 = "svg-mask-avatar-status-round-56"),
        (i.AVATAR_STATUS_ROUND_80 = "svg-mask-avatar-status-round-80"),
        (i.AVATAR_STATUS_ROUND_100 = "svg-mask-avatar-status-round-100"),
        (i.AVATAR_STATUS_ROUND_120 = "svg-mask-avatar-status-round-120"),
        (i.AVATAR_STATUS_MOBILE_16 = "svg-mask-avatar-status-mobile-16"),
        (i.AVATAR_STATUS_MOBILE_20 = "svg-mask-avatar-status-mobile-20"),
        (i.AVATAR_STATUS_MOBILE_24 = "svg-mask-avatar-status-mobile-24"),
        (i.AVATAR_STATUS_MOBILE_32 = "svg-mask-avatar-status-mobile-32"),
        (i.AVATAR_STATUS_MOBILE_40 = "svg-mask-avatar-status-mobile-40"),
        (i.AVATAR_STATUS_MOBILE_48 = "svg-mask-avatar-status-mobile-48"),
        (i.AVATAR_STATUS_MOBILE_56 = "svg-mask-avatar-status-mobile-56"),
        (i.AVATAR_STATUS_MOBILE_80 = "svg-mask-avatar-status-mobile-80"),
        (i.AVATAR_STATUS_MOBILE_100 = "svg-mask-avatar-status-mobile-100"),
        (i.AVATAR_STATUS_MOBILE_120 = "svg-mask-avatar-status-mobile-120"),
        (i.AVATAR_STATUS_TYPING_16 = "svg-mask-avatar-status-typing-16"),
        (i.AVATAR_STATUS_TYPING_20 = "svg-mask-avatar-status-typing-20"),
        (i.AVATAR_STATUS_TYPING_24 = "svg-mask-avatar-status-typing-24"),
        (i.AVATAR_STATUS_TYPING_32 = "svg-mask-avatar-status-typing-32"),
        (i.AVATAR_STATUS_TYPING_40 = "svg-mask-avatar-status-typing-40"),
        (i.AVATAR_STATUS_TYPING_48 = "svg-mask-avatar-status-typing-48"),
        (i.AVATAR_STATUS_TYPING_56 = "svg-mask-avatar-status-typing-56"),
        (i.AVATAR_STATUS_TYPING_80 = "svg-mask-avatar-status-typing-80"),
        (i.AVATAR_STATUS_TYPING_100 = "svg-mask-avatar-status-typing-100"),
        (i.AVATAR_STATUS_TYPING_120 = "svg-mask-avatar-status-typing-120"),
        (i.AVATAR_DECORATION_STATUS_ROUND_16 =
          "svg-mask-avatar-decoration-status-round-16"),
        (i.AVATAR_DECORATION_STATUS_ROUND_20 =
          "svg-mask-avatar-decoration-status-round-20"),
        (i.AVATAR_DECORATION_STATUS_ROUND_24 =
          "svg-mask-avatar-decoration-status-round-24"),
        (i.AVATAR_DECORATION_STATUS_ROUND_32 =
          "svg-mask-avatar-decoration-status-round-32"),
        (i.AVATAR_DECORATION_STATUS_ROUND_40 =
          "svg-mask-avatar-decoration-status-round-40"),
        (i.AVATAR_DECORATION_STATUS_ROUND_48 =
          "svg-mask-avatar-decoration-status-round-48"),
        (i.AVATAR_DECORATION_STATUS_ROUND_56 =
          "svg-mask-avatar-decoration-status-round-56"),
        (i.AVATAR_DECORATION_STATUS_ROUND_80 =
          "svg-mask-avatar-decoration-status-round-80"),
        (i.AVATAR_DECORATION_STATUS_ROUND_120 =
          "svg-mask-avatar-decoration-status-round-120"),
        (i.AVATAR_DECORATION_STATUS_MOBILE_16 =
          "svg-mask-avatar-decoration-status-mobile-16"),
        (i.AVATAR_DECORATION_STATUS_MOBILE_20 =
          "svg-mask-avatar-decoration-status-mobile-20"),
        (i.AVATAR_DECORATION_STATUS_MOBILE_24 =
          "svg-mask-avatar-decoration-status-mobile-24"),
        (i.AVATAR_DECORATION_STATUS_MOBILE_32 =
          "svg-mask-avatar-decoration-status-mobile-32"),
        (i.AVATAR_DECORATION_STATUS_MOBILE_40 =
          "svg-mask-avatar-decoration-status-mobile-40"),
        (i.AVATAR_DECORATION_STATUS_MOBILE_48 =
          "svg-mask-avatar-decoration-status-mobile-48"),
        (i.AVATAR_DECORATION_STATUS_MOBILE_56 =
          "svg-mask-avatar-decoration-status-mobile-56"),
        (i.AVATAR_DECORATION_STATUS_MOBILE_80 =
          "svg-mask-avatar-decoration-status-mobile-80"),
        (i.AVATAR_DECORATION_STATUS_MOBILE_100 =
          "svg-mask-avatar-decoration-status-mobile-100"),
        (i.AVATAR_DECORATION_STATUS_MOBILE_120 =
          "svg-mask-avatar-decoration-status-mobile-120"),
        (i.AVATAR_DECORATION_STATUS_TYPING_16 =
          "svg-mask-avatar-decoration-status-typing-16"),
        (i.AVATAR_DECORATION_STATUS_TYPING_20 =
          "svg-mask-avatar-decoration-status-typing-20"),
        (i.AVATAR_DECORATION_STATUS_TYPING_24 =
          "svg-mask-avatar-decoration-status-typing-24"),
        (i.AVATAR_DECORATION_STATUS_TYPING_32 =
          "svg-mask-avatar-decoration-status-typing-32"),
        (i.AVATAR_DECORATION_STATUS_TYPING_40 =
          "svg-mask-avatar-decoration-status-typing-40"),
        (i.AVATAR_DECORATION_STATUS_TYPING_48 =
          "svg-mask-avatar-decoration-status-typing-48"),
        (i.AVATAR_DECORATION_STATUS_TYPING_56 =
          "svg-mask-avatar-decoration-status-typing-56"),
        (i.AVATAR_DECORATION_STATUS_TYPING_80 =
          "svg-mask-avatar-decoration-status-typing-80"),
        (i.AVATAR_DECORATION_STATUS_TYPING_100 =
          "svg-mask-avatar-decoration-status-typing-100"),
        (i.AVATAR_DECORATION_STATUS_TYPING_120 =
          "svg-mask-avatar-decoration-status-typing-120"),
        (i.AVATAR_DECORATION_PROFILE_STATUS_SQUARE_80 =
          "svg-mask-avatar-decoration-profile-status-square-80"),
        (i.AVATAR_DECORATION_PROFILE_STATUS_MOBILE_SQUARE_80 =
          "svg-mask-avatar-decoration-profile-status-mobile-square-80"),
        (i.AVATAR_VOICE_CALL_80 = "svg-mask-avatar-voice-call-80"),
        (i.AVATAR_CALL_ICON = "svg-mask-avatar-call-icon"),
        (i.AVATAR_CALL_ICON_32 = "svg-mask-avatar-call-icon-32"),
        (i.STATUS_ONLINE_MOBILE = "svg-mask-status-online-mobile"),
        (i.STATUS_ONLINE = "svg-mask-status-online"),
        (i.STATUS_IDLE = "svg-mask-status-idle"),
        (i.STATUS_DND = "svg-mask-status-dnd"),
        (i.STATUS_OFFLINE = "svg-mask-status-offline"),
        (i.STATUS_STREAMING = "svg-mask-status-streaming"),
        (i.STATUS_TYPING = "svg-mask-status-typing"),
        (i.STATUS_SCREENSHARE = "svg-mask-status-screenshare"),
        (i.STICKER_ROUNDED_RECT = "svg-mask-sticker-rounded-rect"),
        (i.STICKER_SHOP_NOTIFICATION = "svg-mask-sticker-shop-notification"),
        (i.GUILD_ICON_WITH_CHANNEL_TYPE =
          "svg-mask-guild-icon-with-channel-type"),
        (i.CHAT_INPUT_BUTTON_NOTIFICATION =
          "svg-mask-chat-input-button-notification"),
        (i.AUTOCOMPLETE_EMOJI_UPSELL_EMOJI =
          "svg-mask-autocomplete-emoji-upsell-emoji"),
        (i.EVENT_TICKET = "svg-mask-event-ticket");
      function f(e, t) {
        let n = null != t ? t : c.DECORATION_TO_AVATAR_RATIO;
        return (e - 0.5) / n + 0.5;
      }
      function E(e, t, n) {
        let i = (0, u.getAvatarSpecs)(t),
          r = 32 === i.size,
          a = r ? 8 : 0,
          o = r ? 24 : 12;
        return (0, s.jsxs)("mask", {
          id: e,
          maskContentUnits: "objectBoundingBox",
          viewBox: "0 0 1 1",
          children: [
            (0, s.jsx)("circle", {
              fill: "white",
              cx: 0.5,
              cy: 0.5,
              r: 0.5,
              opacity: n,
            }),
            (0, s.jsx)("circle", {
              fill: "black",
              cx: (80 - o + a) / 80,
              cy: (o - a / 2) / 80,
              r: (o + (r ? 2 : 4)) / 80,
            }),
          ],
        });
      }
      function p(e, t) {
        return (0, s.jsxs)("mask", {
          id: e,
          maskContentUnits: "objectBoundingBox",
          viewBox: "0 0 1 1",
          children: [
            (0, s.jsx)("circle", { fill: "white", cx: 0.5, cy: 0.5, r: 0.5 }),
            (0, s.jsx)("rect", {
              fill: "black",
              x: (56 - t - 4 - 0) / 56,
              y: -0.07142857142857142,
              width: (t + 8) / 56,
              height: 0.42857142857142855,
              rx: 0.21428571428571427,
              ry: 0.21428571428571427,
            }),
          ],
        });
      }
      function h(e) {
        return (0, s.jsx)("mask", {
          id: e,
          maskContentUnits: "objectBoundingBox",
          viewBox: "0 0 1 1",
          children: (0, s.jsx)("circle", {
            fill: "white",
            cx: 0.5,
            cy: 0.5,
            r: 0.5,
          }),
        });
      }
      function _(e, t) {
        let n = (0, u.getAvatarSpecs)(t),
          i = n.status / 2;
        return (0, s.jsxs)("mask", {
          id: e,
          maskContentUnits: "objectBoundingBox",
          viewBox: "0 0 1 1",
          children: [
            (0, s.jsx)("circle", {
              fill: "white",
              cx: n.size / 2 / n.size,
              cy: n.size / 2 / n.size,
              r: n.size / 2 / n.size,
            }),
            (0, s.jsx)("circle", {
              fill: "black",
              cx: (n.size - i - n.offset) / n.size,
              cy: (n.size - i - n.offset) / n.size,
              r: (i + n.stroke) / n.size,
            }),
          ],
        });
      }
      function S(e, t) {
        let n = (0, u.getAvatarSpecs)(t),
          i = n.status / 2,
          r = (i + n.stroke) / n.size / c.DECORATION_TO_AVATAR_RATIO,
          a = f((n.size - i - n.offset) / n.size);
        return (0, s.jsxs)("mask", {
          id: e,
          maskContentUnits: "objectBoundingBox",
          viewBox: "0 0 1 1",
          children: [
            (0, s.jsx)("rect", {
              fill: "white",
              x: 0,
              y: 0,
              width: "100%",
              height: "100%",
            }),
            (0, s.jsx)("circle", { fill: "black", cx: a, cy: a, r: r }),
          ],
        });
      }
      function m(e, t) {
        let n = (0, u.getAvatarSpecs)(t),
          i = (2.5 * n.status - n.status + 2 * n.stroke) / 2,
          r = n.size - n.status - i - n.offset,
          a = n.status + 2 * n.stroke;
        return (0, s.jsxs)("mask", {
          id: e,
          maskContentUnits: "objectBoundingBox",
          viewBox: "0 0 1 1",
          children: [
            (0, s.jsx)("circle", {
              fill: "white",
              cx: n.size / 2 / n.size,
              cy: n.size / 2 / n.size,
              r: n.size / 2 / n.size,
            }),
            (0, s.jsx)("rect", {
              fill: "black",
              x: r / n.size,
              y: (n.size - n.status - n.stroke - n.offset) / n.size,
              width: (2.5 * n.status + 2 * n.stroke) / n.size,
              height: a / n.size,
              rx: a / 2 / n.size,
              ry: a / 2 / n.size,
            }),
          ],
        });
      }
      function T(e, t) {
        let n = (0, u.getAvatarSpecs)(t),
          i = (2.5 * n.status - n.status + 2 * n.stroke) / 2,
          r = f((n.size - n.status - n.stroke - n.offset) / n.size),
          a = f((n.size - n.status - i - n.offset) / n.size),
          o =
            (2.5 * n.status + 2 * n.stroke) /
            n.size /
            c.DECORATION_TO_AVATAR_RATIO,
          l = (n.status + 2 * n.stroke) / n.size / c.DECORATION_TO_AVATAR_RATIO,
          d = f(l / 2 / n.size);
        return (0, s.jsxs)("mask", {
          id: e,
          maskContentUnits: "objectBoundingBox",
          viewBox: "0 0 1 1",
          children: [
            (0, s.jsx)("rect", {
              fill: "white",
              x: 0,
              y: 0,
              width: "100%",
              height: "100%",
            }),
            (0, s.jsx)("rect", {
              fill: "black",
              x: a,
              y: r,
              width: o,
              height: l,
              rx: d,
              ry: d,
            }),
          ],
        });
      }
      function g(e, t) {
        let n = (0, u.getAvatarSpecs)(t);
        return (0, s.jsxs)("mask", {
          id: e,
          maskContentUnits: "objectBoundingBox",
          viewBox: "0 0 1 1",
          children: [
            (0, s.jsx)("circle", {
              fill: "white",
              cx: n.size / 2 / n.size,
              cy: n.size / 2 / n.size,
              r: n.size / 2 / n.size,
            }),
            (0, s.jsx)("rect", {
              fill: "black",
              x: (n.size - n.status - n.stroke - n.offset) / n.size,
              y:
                (n.size -
                  n.status * u.MOBILE_HEIGHT_RATIO -
                  n.stroke -
                  n.offset) /
                n.size,
              width: (n.status + 2 * n.stroke) / n.size,
              height:
                (n.status * u.MOBILE_HEIGHT_RATIO + 2 * n.stroke) / n.size,
              rx:
                ((n.status * u.MOBILE_HEIGHT_RATIO + 2 * n.stroke) *
                  u.CUTOUT_BORDER_RADIUS) /
                n.size,
              ry:
                ((n.status * u.MOBILE_HEIGHT_RATIO + 2 * n.stroke) *
                  u.CUTOUT_BORDER_RADIUS) /
                n.size,
            }),
          ],
        });
      }
      function I(e, t) {
        let n = (0, u.getAvatarSpecs)(t),
          i = f((n.size - n.status - n.stroke - n.offset) / n.size),
          r = f(
            (n.size - n.status * u.MOBILE_HEIGHT_RATIO - n.stroke - n.offset) /
              n.size
          ),
          a = (n.status + 2 * n.stroke) / n.size / c.DECORATION_TO_AVATAR_RATIO,
          o =
            (n.status * u.MOBILE_HEIGHT_RATIO + 2 * n.stroke) /
            n.size /
            c.DECORATION_TO_AVATAR_RATIO;
        return (0, s.jsxs)("mask", {
          id: e,
          maskContentUnits: "objectBoundingBox",
          viewBox: "0 0 1 1",
          children: [
            (0, s.jsx)("rect", {
              fill: "white",
              x: 0,
              y: 0,
              width: "100%",
              height: "100%",
            }),
            (0, s.jsx)("rect", {
              fill: "black",
              x: i,
              y: r,
              width: a,
              height: o,
              rx:
                ((n.status * u.MOBILE_HEIGHT_RATIO + 2 * n.stroke) *
                  u.CUTOUT_BORDER_RADIUS) /
                n.size,
              ry:
                ((n.status * u.MOBILE_HEIGHT_RATIO + 2 * n.stroke) *
                  u.CUTOUT_BORDER_RADIUS) /
                n.size,
            }),
          ],
        });
      }
      function C(e) {
        let {
          mask: t,
          width: n = 24,
          height: i = 24,
          rightOverhang: r = 0,
          bottomOverhang: a = 0,
          children: o,
          className: u,
          style: c,
          "aria-label": f,
          ...E
        } = e;
        return (0, s.jsx)("svg", {
          width: n + r,
          height: i + a,
          className: l(d.svg, u),
          viewBox: "0 0 ".concat(n + r, " ").concat(i + a),
          style: c,
          "aria-label": f,
          ...E,
          children: (0, s.jsx)("foreignObject", {
            x: 0,
            y: 0,
            width: n,
            height: i,
            overflow: "visible",
            mask: "url(#".concat(t, ")"),
            children: o,
          }),
        });
      }
      C.Masks = r;
      var v = C;
      let A = a.memo(
        function () {
          var e, t, n, i, r, a, o, l, d, C, v, A, R, N, O, D, y, P;
          return (0, s.jsxs)("svg", {
            viewBox: "0 0 1 1",
            style: {
              position: "absolute",
              pointerEvents: "none",
              top: -1,
              left: -1,
              width: 1,
              height: 1,
            },
            "aria-hidden": !0,
            children: [
              ((e = "svg-mask-squircle"),
              (0, s.jsx)("mask", {
                id: e,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: (0, s.jsx)("path", {
                  fill: "white",
                  d: "M0 0.464C0 0.301585 0 0.220377 0.0316081 0.158343C0.0594114 0.103776 0.103776 0.0594114 0.158343 0.0316081C0.220377 0 0.301585 0 0.464 0H0.536C0.698415 0 0.779623 0 0.841657 0.0316081C0.896224 0.0594114 0.940589 0.103776 0.968392 0.158343C1 0.220377 1 0.301585 1 0.464V0.536C1 0.698415 1 0.779623 0.968392 0.841657C0.940589 0.896224 0.896224 0.940589 0.841657 0.968392C0.779623 1 0.698415 1 0.536 1H0.464C0.301585 1 0.220377 1 0.158343 0.968392C0.103776 0.940589 0.0594114 0.896224 0.0316081 0.841657C0 0.779623 0 0.698415 0 0.536V0.464Z",
                }),
              })),
              ((t = "svg-mask-header-bar-badge"),
              (0, s.jsxs)("mask", {
                id: t,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: [
                  (0, s.jsx)("rect", {
                    fill: "white",
                    x: 0,
                    y: 0,
                    width: 1,
                    height: 1,
                  }),
                  (0, s.jsx)("circle", {
                    fill: "black",
                    cx: 0.75,
                    cy: 0.75,
                    r: 0.25,
                  }),
                ],
              })),
              ((n = "svg-mask-voice-user-summary-item"),
              (0, s.jsxs)("mask", {
                id: n,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: [
                  (0, s.jsx)("rect", { fill: "white", width: 1, height: 1 }),
                  (0, s.jsx)("circle", {
                    fill: "black",
                    cx: 1.2083333333333333,
                    cy: 0.5,
                    r: 0.5416666666666666,
                  }),
                ],
              })),
              (function (e) {
                let t = "".concat(e, "-gradient");
                return (0, s.jsxs)("mask", {
                  id: e,
                  maskContentUnits: "objectBoundingBox",
                  viewBox: "0 0 1 1",
                  children: [
                    (0, s.jsxs)("linearGradient", {
                      id: t,
                      gradientTransform: "rotate(90)",
                      x1: 0,
                      x2: 1,
                      y1: 0,
                      y2: 0,
                      children: [
                        (0, s.jsx)("stop", {
                          offset: "0%",
                          stopColor: "white",
                        }),
                        (0, s.jsx)("stop", {
                          offset: "100%",
                          stopColor: "black",
                        }),
                      ],
                    }),
                    (0, s.jsx)("rect", {
                      fill: "url(#".concat(t, ")"),
                      x: 0,
                      y: 0,
                      width: 1,
                      height: 1,
                    }),
                  ],
                });
              })("svg-mask-vertical-fade"),
              ((i = "svg-mask-panel-button"),
              (0, s.jsxs)("mask", {
                id: i,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: [
                  (0, s.jsx)("rect", {
                    fill: "white",
                    x: 0,
                    y: 0,
                    width: 1,
                    height: 1,
                  }),
                  (0, s.jsx)("circle", {
                    fill: "black",
                    cx: 0.75,
                    cy: 0.75,
                    r: 0.25,
                  }),
                ],
              })),
              ((r = "svg-mask-channel-call-control-button"),
              (0, s.jsxs)("mask", {
                id: r,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: [
                  (0, s.jsx)("circle", {
                    fill: "white",
                    cx: 0.5,
                    cy: 0.5,
                    r: 0.5,
                  }),
                  (0, s.jsx)("circle", {
                    fill: "black",
                    cx: 0.8214285714285714,
                    cy: 0.8214285714285714,
                    r: 0.25,
                  }),
                ],
              })),
              p("svg-mask-channel-call-control-button-badge-16", 16),
              p("svg-mask-channel-call-control-button-badge-22", 22),
              p("svg-mask-channel-call-control-button-badge-29", 29),
              h("svg-mask-avatar-default"),
              _("svg-mask-avatar-status-round-16", u.AvatarSizes.SIZE_16),
              S(
                "svg-mask-avatar-decoration-status-round-16",
                u.AvatarSizes.SIZE_16
              ),
              g("svg-mask-avatar-status-mobile-16", u.AvatarSizes.SIZE_16),
              I(
                "svg-mask-avatar-decoration-status-mobile-16",
                u.AvatarSizes.SIZE_16
              ),
              m("svg-mask-avatar-status-typing-16", u.AvatarSizes.SIZE_16),
              T(
                "svg-mask-avatar-decoration-status-typing-16",
                u.AvatarSizes.SIZE_16
              ),
              _("svg-mask-avatar-status-round-20", u.AvatarSizes.SIZE_20),
              S(
                "svg-mask-avatar-decoration-status-round-20",
                u.AvatarSizes.SIZE_20
              ),
              g("svg-mask-avatar-status-mobile-20", u.AvatarSizes.SIZE_20),
              I(
                "svg-mask-avatar-decoration-status-mobile-20",
                u.AvatarSizes.SIZE_20
              ),
              m("svg-mask-avatar-status-typing-20", u.AvatarSizes.SIZE_20),
              T(
                "svg-mask-avatar-decoration-status-typing-20",
                u.AvatarSizes.SIZE_20
              ),
              _("svg-mask-avatar-status-round-24", u.AvatarSizes.SIZE_24),
              S(
                "svg-mask-avatar-decoration-status-round-24",
                u.AvatarSizes.SIZE_24
              ),
              g("svg-mask-avatar-status-mobile-24", u.AvatarSizes.SIZE_24),
              I(
                "svg-mask-avatar-decoration-status-mobile-24",
                u.AvatarSizes.SIZE_24
              ),
              m("svg-mask-avatar-status-typing-24", u.AvatarSizes.SIZE_24),
              T(
                "svg-mask-avatar-decoration-status-typing-24",
                u.AvatarSizes.SIZE_24
              ),
              _("svg-mask-avatar-status-round-32", u.AvatarSizes.SIZE_32),
              S(
                "svg-mask-avatar-decoration-status-round-32",
                u.AvatarSizes.SIZE_32
              ),
              g("svg-mask-avatar-status-mobile-32", u.AvatarSizes.SIZE_32),
              I(
                "svg-mask-avatar-decoration-status-mobile-32",
                u.AvatarSizes.SIZE_32
              ),
              m("svg-mask-avatar-status-typing-32", u.AvatarSizes.SIZE_32),
              T(
                "svg-mask-avatar-decoration-status-typing-32",
                u.AvatarSizes.SIZE_32
              ),
              _("svg-mask-avatar-status-round-40", u.AvatarSizes.SIZE_40),
              S(
                "svg-mask-avatar-decoration-status-round-40",
                u.AvatarSizes.SIZE_40
              ),
              g("svg-mask-avatar-status-mobile-40", u.AvatarSizes.SIZE_40),
              I(
                "svg-mask-avatar-decoration-status-mobile-40",
                u.AvatarSizes.SIZE_40
              ),
              m("svg-mask-avatar-status-typing-40", u.AvatarSizes.SIZE_40),
              T(
                "svg-mask-avatar-decoration-status-typing-40",
                u.AvatarSizes.SIZE_40
              ),
              _("svg-mask-avatar-status-round-48", u.AvatarSizes.SIZE_48),
              S(
                "svg-mask-avatar-decoration-status-round-48",
                u.AvatarSizes.SIZE_48
              ),
              g("svg-mask-avatar-status-mobile-48", u.AvatarSizes.SIZE_48),
              I(
                "svg-mask-avatar-decoration-status-mobile-48",
                u.AvatarSizes.SIZE_48
              ),
              m("svg-mask-avatar-status-typing-48", u.AvatarSizes.SIZE_48),
              T(
                "svg-mask-avatar-decoration-status-typing-48",
                u.AvatarSizes.SIZE_48
              ),
              _("svg-mask-avatar-status-round-56", u.AvatarSizes.SIZE_56),
              S(
                "svg-mask-avatar-decoration-status-round-56",
                u.AvatarSizes.SIZE_56
              ),
              g("svg-mask-avatar-status-mobile-56", u.AvatarSizes.SIZE_56),
              I(
                "svg-mask-avatar-decoration-status-mobile-56",
                u.AvatarSizes.SIZE_56
              ),
              m("svg-mask-avatar-status-typing-56", u.AvatarSizes.SIZE_56),
              T(
                "svg-mask-avatar-decoration-status-typing-56",
                u.AvatarSizes.SIZE_56
              ),
              _("svg-mask-avatar-status-round-80", u.AvatarSizes.SIZE_80),
              S(
                "svg-mask-avatar-decoration-status-round-80",
                u.AvatarSizes.SIZE_80
              ),
              (function (e, t) {
                let n = (0, u.getAvatarSpecs)(t),
                  i = n.status / 2,
                  r = n.size * c.DECORATION_TO_AVATAR_RATIO,
                  a = r / n.size,
                  o = (i + n.stroke) / n.size / a,
                  l = f((n.size - i - n.offset) / n.size, a);
                return (0, s.jsxs)("mask", {
                  id: e,
                  maskContentUnits: "objectBoundingBox",
                  viewBox: "0 0 1 1",
                  children: [
                    (0, s.jsx)("rect", {
                      fill: "white",
                      x: 0,
                      y: 0,
                      width: "100%",
                      height: "100%",
                    }),
                    (0, s.jsx)("circle", { fill: "black", cx: l, cy: l, r: o }),
                  ],
                });
              })(
                "svg-mask-avatar-decoration-profile-status-square-80",
                u.AvatarSizes.SIZE_80
              ),
              g("svg-mask-avatar-status-mobile-80", u.AvatarSizes.SIZE_80),
              I(
                "svg-mask-avatar-decoration-status-mobile-80",
                u.AvatarSizes.SIZE_80
              ),
              (function (e, t) {
                let n = (0, u.getAvatarSpecs)(t),
                  i = n.size * c.DECORATION_TO_AVATAR_RATIO,
                  r = i / n.size,
                  a = f((n.size - n.status - n.stroke - n.offset) / n.size, r),
                  o = f(
                    (n.size -
                      n.status * u.MOBILE_HEIGHT_RATIO -
                      n.stroke -
                      n.offset) /
                      n.size,
                    r
                  ),
                  l = (n.status + 2 * n.stroke) / n.size / r,
                  d =
                    (n.status * u.MOBILE_HEIGHT_RATIO + 2 * n.stroke) /
                    n.size /
                    r;
                return (0, s.jsxs)("mask", {
                  id: e,
                  maskContentUnits: "objectBoundingBox",
                  viewBox: "0 0 1 1",
                  children: [
                    (0, s.jsx)("rect", {
                      fill: "white",
                      x: 0,
                      y: 0,
                      width: "100%",
                      height: "100%",
                    }),
                    (0, s.jsx)("rect", {
                      fill: "black",
                      x: a,
                      y: o,
                      width: l,
                      height: d,
                      rx:
                        ((n.status * u.MOBILE_HEIGHT_RATIO + 2 * n.stroke) *
                          u.CUTOUT_BORDER_RADIUS) /
                        n.size,
                      ry:
                        ((n.status * u.MOBILE_HEIGHT_RATIO + 2 * n.stroke) *
                          u.CUTOUT_BORDER_RADIUS) /
                        n.size,
                    }),
                  ],
                });
              })(
                "svg-mask-avatar-decoration-profile-status-mobile-square-80",
                u.AvatarSizes.SIZE_80
              ),
              m("svg-mask-avatar-status-typing-80", u.AvatarSizes.SIZE_80),
              T(
                "svg-mask-avatar-decoration-status-typing-80",
                u.AvatarSizes.SIZE_80
              ),
              _("svg-mask-avatar-status-round-120", u.AvatarSizes.SIZE_120),
              S(
                "svg-mask-avatar-decoration-status-round-120",
                u.AvatarSizes.SIZE_120
              ),
              g("svg-mask-avatar-status-mobile-120", u.AvatarSizes.SIZE_120),
              I(
                "svg-mask-avatar-decoration-status-mobile-120",
                u.AvatarSizes.SIZE_120
              ),
              m("svg-mask-avatar-status-typing-120", u.AvatarSizes.SIZE_120),
              T(
                "svg-mask-avatar-decoration-status-typing-120",
                u.AvatarSizes.SIZE_120
              ),
              (function (e) {
                let t = 8 * u.MOBILE_HEIGHT_RATIO;
                return (0, s.jsxs)("mask", {
                  id: e,
                  maskContentUnits: "objectBoundingBox",
                  viewBox: "0 0 1 1",
                  children: [
                    (0, s.jsx)("rect", {
                      fill: "white",
                      x: 0,
                      y: 0,
                      width: 1,
                      height: 1,
                      rx: (t * u.MOBILE_ICON_RADIUS) / 8,
                      ry: (t * u.MOBILE_ICON_RADIUS) / t,
                    }),
                    (0, s.jsx)("rect", {
                      fill: "black",
                      x: 0.125,
                      y: 2 / t,
                      width: 0.75,
                      height: 6 / t,
                    }),
                    (0, s.jsx)("ellipse", {
                      fill: "black",
                      cx: 0.5,
                      cy: 10 / t,
                      rx: 0.125,
                      ry: 1 / t,
                    }),
                  ],
                });
              })("svg-mask-status-online-mobile"),
              h("svg-mask-status-online"),
              ((a = "svg-mask-status-idle"),
              (0, s.jsxs)("mask", {
                id: a,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: [
                  (0, s.jsx)("circle", {
                    fill: "white",
                    cx: 0.5,
                    cy: 0.5,
                    r: 0.5,
                  }),
                  (0, s.jsx)("circle", {
                    fill: "black",
                    cx: 0.25,
                    cy: 0.25,
                    r: 0.375,
                  }),
                ],
              })),
              ((o = "svg-mask-status-dnd"),
              (0, s.jsxs)("mask", {
                id: o,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: [
                  (0, s.jsx)("circle", {
                    fill: "white",
                    cx: 0.5,
                    cy: 0.5,
                    r: 0.5,
                  }),
                  (0, s.jsx)("rect", {
                    fill: "black",
                    x: 0.125,
                    y: 0.375,
                    width: 0.75,
                    height: 0.25,
                    rx: 0.125,
                    ry: 0.125,
                  }),
                ],
              })),
              ((l = "svg-mask-status-offline"),
              (0, s.jsxs)("mask", {
                id: l,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: [
                  (0, s.jsx)("circle", {
                    fill: "white",
                    cx: 0.5,
                    cy: 0.5,
                    r: 0.5,
                  }),
                  (0, s.jsx)("circle", {
                    fill: "black",
                    cx: 0.5,
                    cy: 0.5,
                    r: 0.25,
                  }),
                ],
              })),
              ((d = "svg-mask-status-streaming"),
              (0, s.jsxs)("mask", {
                id: d,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: [
                  (0, s.jsx)("circle", {
                    fill: "white",
                    cx: 0.5,
                    cy: 0.5,
                    r: 0.5,
                  }),
                  (0, s.jsx)("polygon", {
                    fill: "black",
                    points: ""
                      .concat(0.35, ",")
                      .concat(0.25, " ")
                      .concat(0.78301275, ",")
                      .concat(0.5, " ")
                      .concat(0.35, ",")
                      .concat(0.75),
                  }),
                ],
              })),
              ((C = "svg-mask-status-typing"),
              (0, s.jsx)("mask", {
                id: C,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: (0, s.jsx)("rect", {
                  fill: "white",
                  cx: 0,
                  cy: 0,
                  width: 1,
                  height: 1,
                  ry: 0.5,
                  rx: 0.2,
                }),
              })),
              ((v = "svg-mask-status-screenshare"),
              (0, s.jsxs)("mask", {
                id: v,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: [
                  (0, s.jsx)("rect", {
                    width: "1",
                    height: "1",
                    fill: "white",
                  }),
                  (0, s.jsx)("path", {
                    d: "M0.5 0.71875C0.5 0.649716 0.555966 0.59375 0.625 0.59375H1.0V1.0H0.5V0.71875Z",
                    fill: "black",
                  }),
                ],
              })),
              ((A = "svg-mask-avatar-voice-call-80"),
              (0, s.jsxs)("mask", {
                id: A,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: [
                  (0, s.jsx)("circle", {
                    fill: "white",
                    cx: 0.5,
                    cy: 0.5,
                    r: 0.5,
                  }),
                  (0, s.jsx)("circle", {
                    fill: "black",
                    cx: 0.85,
                    cy: 0.85,
                    r: 0.2,
                  }),
                ],
              })),
              E("svg-mask-avatar-call-icon", u.AvatarSizes.SIZE_56, 1),
              E("svg-mask-avatar-call-icon-32", u.AvatarSizes.SIZE_32, 0.5),
              ((R = "svg-mask-sticker-rounded-rect"),
              (0, s.jsx)("mask", {
                id: R,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: (0, s.jsx)("path", {
                  d: "M0 0.26087C0 0.137894 0 0.0764069 0.0382035 0.0382035C0.0764069 0 0.137894 0 0.26087 0H0.73913C0.862106 0 0.923593 0 0.961797 0.0382035C1 0.0764069 1 0.137894 1 0.26087V0.73913C1 0.862106 1 0.923593 0.961797 0.961797C0.923593 1 0.862106 1 0.73913 1H0.26087C0.137894 1 0.0764069 1 0.0382035 0.961797C0 0.923593 0 0.862106 0 0.73913V0.26087Z",
                  fill: "white",
                }),
              })),
              ((N = "svg-mask-chat-input-button-notification"),
              (0, s.jsxs)("mask", {
                id: N,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: [
                  (0, s.jsx)("rect", {
                    width: "1",
                    height: "1",
                    fill: "white",
                  }),
                  (0, s.jsx)("circle", {
                    cx: "0.85",
                    cy: "0.85",
                    r: "0.25",
                    fill: "black",
                  }),
                ],
              })),
              ((O = "svg-mask-sticker-shop-notification"),
              (0, s.jsxs)("mask", {
                id: O,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: [
                  (0, s.jsx)("rect", {
                    width: "1",
                    height: "1",
                    fill: "white",
                  }),
                  (0, s.jsx)("circle", {
                    cx: "0.9",
                    cy: "0.9",
                    r: "0.5",
                    fill: "black",
                  }),
                ],
              })),
              ((D = "svg-mask-autocomplete-emoji-upsell-emoji"),
              (0, s.jsxs)("mask", {
                id: D,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: [
                  (0, s.jsx)("rect", { fill: "white", width: 1, height: 1 }),
                  (0, s.jsx)("circle", {
                    fill: "black",
                    cx: 1.33,
                    cy: 0.5,
                    r: 0.5833333333333334,
                  }),
                ],
              })),
              ((y = "svg-mask-event-ticket"),
              (0, s.jsx)("mask", {
                id: y,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: (0, s.jsx)("path", {
                  d: "M0 0.12C0 0.0779961 0 0.0569941 0.00408726 0.0409507C0.00768251 0.0268386 0.0134193 0.015365 0.0204754 0.00817451C0.028497 0 0.038998 0 0.06 0H0.94C0.961002 0 0.971503 0 0.979525 0.00817451C0.986581 0.015365 0.992318 0.0268386 0.995913 0.0409507C1 0.0569941 1 0.0779961 1 0.12V0.45C0.986193 0.45 0.975 0.472386 0.975 0.5C0.975 0.527614 0.986193 0.55 1 0.55V0.88C1 0.922004 1 0.943006 0.995913 0.959049C0.992318 0.973161 0.986581 0.984635 0.979525 0.991826C0.971503 1 0.961002 1 0.94 1H0.0600001C0.0389981 1 0.028497 1 0.0204754 0.991826C0.0134193 0.984635 0.00768251 0.973161 0.00408726 0.959049C0 0.943006 0 0.922004 0 0.88V0.55C0.0138071 0.55 0.025 0.527614 0.025 0.5C0.025 0.472386 0.0138071 0.45 0 0.45V0.12Z",
                  fill: "white",
                }),
              })),
              ((P = "svg-mask-guild-icon-with-channel-type"),
              (0, s.jsxs)("mask", {
                id: P,
                maskContentUnits: "objectBoundingBox",
                viewBox: "0 0 1 1",
                children: [
                  (0, s.jsx)("path", {
                    fill: "white",
                    d: "M0 0.464C0 0.301585 0 0.220377 0.0316081 0.158343C0.0594114 0.103776 0.103776 0.0594114 0.158343 0.0316081C0.220377 0 0.301585 0 0.464 0H0.536C0.698415 0 0.779623 0 0.841657 0.0316081C0.896224 0.0594114 0.940589 0.103776 0.968392 0.158343C1 0.220377 1 0.301585 1 0.464V0.536C1 0.698415 1 0.779623 0.968392 0.841657C0.940589 0.896224 0.896224 0.940589 0.841657 0.968392C0.779623 1 0.698415 1 0.536 1H0.464C0.301585 1 0.220377 1 0.158343 0.968392C0.103776 0.940589 0.0594114 0.896224 0.0316081 0.841657C0 0.779623 0 0.698415 0 0.536V0.464Z",
                  }),
                  (0, s.jsx)("circle", {
                    cx: "0.9",
                    cy: "0.9",
                    r: "0.5",
                    fill: "black",
                  }),
                ],
              })),
            ],
          });
        },
        () => !0
      );
    },
    870623: function (e, t, n) {
      "use strict";
      n.r(t);
    },
    599110: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          AnalyticsContext: function () {
            return _;
          },
          addExtraAnalyticsDecorator: function () {
            return g;
          },
          AnalyticEventConfigs: function () {
            return I;
          },
          expandLocation: function () {
            return C;
          },
          setUTMContext: function () {
            return R;
          },
          expandEventProperties: function () {
            return N;
          },
          debugLogEvent: function () {
            return O;
          },
          trackNetworkAction: function () {
            return y;
          },
          AnalyticsSchema: function () {
            return c;
          },
          default: function () {
            return P;
          },
        }),
        n("424973"),
        n("222007");
      var i = n("884691"),
        r = n("759843"),
        s = n("913144"),
        a = n("939011"),
        o = n("821316"),
        l = n("316217"),
        u = n("313915"),
        c = n("870623"),
        d = n("872507"),
        f = n("286235"),
        E = n("49111"),
        p = n("727538"),
        h = n("782340");
      let _ = i.createContext({ location: {} }),
        S = {},
        m = performance.now(),
        T = [];
      function g(e) {
        T.push(e);
      }
      let I = {
        [E.AnalyticEvents.APP_OPENED]: {
          throttlePeriod: 3e5,
          throttleKeys: () => [],
        },
        [E.AnalyticEvents.APP_BACKGROUND]: {
          throttlePeriod: 12e4,
          throttleKeys: () => [],
        },
        [E.AnalyticEvents.ACK_MESSAGES]: {
          throttlePeriod: 9e5,
          throttleKeys: e => [e.guild_id, e.channel_id, e.location_section],
        },
        [E.AnalyticEvents.GUILD_VIEWED]: {
          throttlePeriod: 9e5,
          throttleKeys: e => [e.guild_id, e.is_pending],
        },
        [E.AnalyticEvents.FRIENDS_LIST_VIEWED]: {
          throttlePeriod: 9e5,
          throttleKeys: e => [e.tab_opened],
        },
        [E.AnalyticEvents.NOW_PLAYING_CARD_HOVERED]: {
          throttlePeriod: 9e5,
          throttleKeys: e => [e.tab_opened],
        },
        [E.AnalyticEvents.START_SPEAKING]: {
          throttlePeriod: 9e5,
          throttleKeys: e => [e.server],
        },
        [E.AnalyticEvents.START_LISTENING]: {
          throttlePeriod: 9e5,
          throttleKeys: e => [e.server],
        },
        [E.AnalyticEvents.ACTIVITY_UPDATED]: {
          throttlePeriod: 6e4,
          throttleKeys: e => [e.application_id],
          deduplicate: !0,
        },
        [E.AnalyticEvents.CHANNEL_OPENED]: {
          throttlePeriod: 9e5,
          throttleKeys: e =>
            null != e.channel_static_route
              ? [e.guild_id, e.channel_static_route, e.channel_view]
              : [e.channel_id, e.channel_view],
        },
        [E.AnalyticEvents.TEXT_IN_VOICE_OPENED]: {
          throttlePeriod: 864e5,
          throttleKeys: e => [e.channel_id],
        },
        [E.AnalyticEvents.NOTIFICATION_VIEWED]: {
          throttlePeriod: 9e5,
          throttleKeys: e => [e.notif_type],
        },
        [E.AnalyticEvents.MEMBER_LIST_VIEWED]: {
          throttlePeriod: 9e5,
          throttleKeys: e => [e.channel_id],
        },
        [E.AnalyticEvents.DM_LIST_VIEWED]: {
          throttlePeriod: 9e5,
          throttleKeys: e => [e.channel_id],
        },
        [E.AnalyticEvents.NAV_DRAWER_OPENED]: {
          throttlePeriod: 9e5,
          throttleKeys: () => [],
        },
        [E.AnalyticEvents.KEYBOARD_SHORTCUT_USED]: {
          throttlePeriod: 12e4,
          throttleKeys: e => {
            var t;
            return [
              e.shortcut_name,
              e.location_object,
              ...(null !== (t = e.source_class_list) && void 0 !== t ? t : []),
            ];
          },
        },
        [E.AnalyticEvents.QUICKSWITCHER_OPENED]: {
          throttlePeriod: 1e4,
          throttleKeys: () => [],
        },
        [E.AnalyticEvents.CHAT_INPUT_COMPONENT_VIEWED]: {
          throttlePeriod: 9e5,
          throttleKeys: e => [e.type],
        },
        [E.AnalyticEvents.ROLE_PAGE_VIEWED]: {
          throttlePeriod: 12e4,
          throttleKeys: e => [e.role_id, e.tab_opened],
        },
        [E.AnalyticEvents.VIDEO_INPUT_INITIALIZED]: {
          throttlePeriod: 3e5,
          throttleKeys: () => [],
        },
        [E.AnalyticEvents.HUB_ONBOARDING_CAROUSEL_SCROLLED]: {
          throttlePeriod: 9e5,
          throttleKeys: () => [],
        },
        [E.AnalyticEvents.HUB_STUDENT_PROMPT_CLICKED]: {
          throttlePeriod: 9e5,
          throttleKeys: () => [],
        },
        [E.AnalyticEvents.RPC_SERVER_ERROR_CAUGHT]: {
          throttlePeriod: 864e5,
          throttleKeys: () => [],
        },
        [E.AnalyticEvents.RPC_COMMAND_SENT]: {
          throttlePeriod: 864e5,
          throttleKeys: e => [e.application_id, e.command],
          throttlePercent: 0.001,
        },
        [E.AnalyticEvents.RPC_SUBSCRIPTION_REQUESTED]: {
          throttlePeriod: 864e5,
          throttleKeys: e => [e.application_id, e.event],
          throttlePercent: 0.001,
        },
        [E.AnalyticEvents.CHANNEL_BANNER_VIEWED]: {
          throttlePeriod: 864e5,
          throttleKeys: e => [e.banner_type, e.channel_id],
        },
        [E.AnalyticEvents.PREMIUM_UPSELL_VIEWED]: {
          throttlePeriod: 6e4,
          throttleKeys: e => [e.type],
        },
        [E.AnalyticEvents.CHANNEL_HIGHLIGHTS_VIEWED]: {
          throttlePeriod: 36e5,
          throttleKeys: e => [e.guild_id, e.channel_id],
        },
        [E.AnalyticEvents.GUILD_CHANNEL_HIGHLIGHTS_LOADED]: {
          throttlePeriod: 36e5,
          throttleKeys: e => [e.guild_id],
        },
        [E.AnalyticEvents.FORUM_CHANNEL_SEARCHED]: {
          throttlePeriod: 6e4,
          throttleKeys: e => [e.guild_id, e.channel_id],
        },
        [E.AnalyticEvents.FORUM_CHANNEL_SCROLLED]: {
          throttlePeriod: 9e5,
          throttleKeys: e => [e.guild_id, e.channel_id],
        },
        [E.AnalyticEvents.VOICE_CHANNEL_GAME_ACTIVITY_INDICATOR_VIEWED]: {
          throttlePeriod: 6e4,
          throttleKeys: e => [e.user_id],
        },
        [E.AnalyticEvents.DM_PROFILE_VIEWED]: {
          throttlePeriod: 36e5,
          throttleKeys: e => [e.viewed_profile_user_id],
        },
        [E.AnalyticEvents.MEDIA_VIEWER_SESSION_COMPLETED]: {
          throttlePercent: 0.01,
        },
        [E.AnalyticEvents.SUMMARIES_UNREAD_BAR_VIEWED]: {
          throttlePeriod: 3e5,
          throttleKeys: e => [e.channel_id],
        },
        [E.AnalyticEvents.ACTIVITY_CARDS_VIEWED]: {
          throttlePeriod: 9e5,
          throttleKeys: e => [e.context, e.guild_id],
        },
        [E.AnalyticEvents.ACK_COMMUNITY_MESSAGES]: {
          throttlePeriod: 9e5,
          throttleKeys: e => [e.channel_id],
        },
        [E.AnalyticEvents.REDESIGN_NAV_BAR_CLICKED]: {
          throttlePeriod: 9e5,
          throttleKeys: e => [e.tab],
        },
        [E.AnalyticEvents.BROADCAST_START_BUTTON_HOVERED]: {
          throttlePeriod: 6e4,
          throttleKeys: () => [],
        },
        [E.AnalyticEvents.BROADCAST_LIST_VISITED]: {
          throttlePeriod: 3e5,
          throttleKeys: () => [],
        },
        [E.AnalyticEvents.CHANNEL_LIST_END_REACHED]: {
          throttlePeriod: 9e5,
          throttleKeys: e => [e.guild_id],
        },
        [E.AnalyticEvents.EXPLICIT_MEDIA_REDACTABLE_MESSAGES_LOADED]: {
          throttlePeriod: 6e4,
          throttleKeys: e => [e.guild_id, e.channel_id],
        },
        [E.AnalyticEvents.LIVE_ACTIVITY_SETTINGS_UPDATED]: {
          throttlePeriod: 36e5,
          throttleKeys: () => [],
        },
      };
      function C(e) {
        return "string" == typeof e
          ? { location: e }
          : {
              location: e.page,
              location_page: e.page,
              location_section: e.section,
              location_object: e.object,
              location_object_type: e.objectType,
            };
      }
      let v = () => p.AccessibilityFeatureFlags.NONE,
        A = (0, r.trackMaker)({
          analyticEventConfigs: I,
          dispatcher: s.default,
          TRACK_ACTION_NAME: "TRACK",
        });
      function R(e) {
        return (S = e);
      }
      function N(e) {
        var t, n, i, r, s;
        let a = e;
        if ((!a && (a = {}), null != a.location)) {
          let { location: e, ...t } = a;
          a = { ...t, ...C(e) };
        }
        if (null != a.source) {
          let { source: e, ...t } = a;
          a = {
            ...t,
            ...("string" == typeof (s = e)
              ? { source: s }
              : {
                  source_page: s.page,
                  source_section: s.section,
                  source_object: s.object,
                  source_object_type: s.objectType,
                  source_promotion_id: s.promotionId,
                }),
          };
        }
        (a.client_performance_cpu = d.default.getCurrentCPUUsagePercent()),
          (a.client_performance_memory = d.default.getCurrentMemoryUsageKB()),
          (a.cpu_core_count = d.default.getCPUCoreCount()),
          (a.accessibility_features = v()),
          (a.rendered_locale = h.default.getLocale()),
          (a.uptime_app = Math.floor((performance.now() - m) / 1e3));
        let o = d.default.getProcessUptime();
        null != o && (a.uptime_process_renderer = Math.floor(o));
        let { utmSource: l, utmMedium: u, utmCampaign: c, utmContent: f } = S;
        return (
          (a.utm_source = null !== (t = a.utm_source) && void 0 !== t ? t : l),
          (a.utm_medium = null !== (n = a.utm_medium) && void 0 !== n ? n : u),
          (a.utm_campaign =
            null !== (i = a.utm_campaign) && void 0 !== i ? i : c),
          (a.utm_content =
            null !== (r = a.utm_content) && void 0 !== r ? r : f),
          T.forEach(e => e(a)),
          a
        );
      }
      function O(e, t) {
        let n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        u.default.isLoggingAnalyticsEvents &&
          console.info("AnalyticsUtils.track(...):", e, t),
          n ? o.report("Analytics", e, t) : o.report("Analytics", e);
      }
      let D = (0, r.trackMaker)({
        analyticEventConfigs: I,
        dispatcher: s.default,
        TRACK_ACTION_NAME: "TRACK",
      });
      function y(e, t) {
        let n = (0, a.getLocation)(),
          i = N({ location: n, ...t });
        (0, a.setDebugTrackedData)(e, { type: "action", ...t }),
          O(e, i),
          D(e, i);
      }
      var P = {
        ...r.default,
        getCampaignParams: r.getCampaignParams,
        setSystemAccessibilityFeatures: function (e) {
          v = e;
        },
        expandEventProperties: N,
        track: function (e, t) {
          let n =
            arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
          if (
            (!l.IGNORE_ANALYTICS_BREADCRUMB_EVENTS.includes(e) &&
              f.default.addBreadcrumb({
                category: "analytics",
                message: "".concat(e),
              }),
            null != n.throttlePercent && Math.random() > n.throttlePercent)
          )
            return Promise.resolve();
          let i = N(t);
          return (
            O(e, i, n.logEventProperties),
            A(e, i, { flush: n.flush, fingerprint: n.fingerprint })
          );
        },
      };
    },
    645672: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getBuildPlatform: function () {
            return o;
          },
        }),
        n("70102");
      var i,
        r,
        s = n("773336"),
        a = n("49111");
      function o() {
        switch ((0, s.getPlatform)()) {
          case s.PlatformTypes.WINDOWS:
            let e = "x86",
              t = window.DiscordNative;
            if (
              (null != t && (e = window.DiscordNative.os.arch),
              "x86" === e || "ia32" === e)
            )
              return a.BuildPlatformTypes.WIN32;
            return a.BuildPlatformTypes.WIN64;
          case s.PlatformTypes.OSX:
            return a.BuildPlatformTypes.MACOS;
          case s.PlatformTypes.LINUX:
            return a.BuildPlatformTypes.LINUX;
          default:
            throw Error("Unsupported build type");
        }
      }
      ((r = i || (i = {})).X86 = "x86"), (r.IA32 = "ia32");
    },
    831588: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getToken: function () {
            return r;
          },
          isAuthenticated: function () {
            return s;
          },
          getArtForPath: function () {
            return a;
          },
        });
      var i = n("171718");
      function r() {
        return i.default.getToken();
      }
      function s() {
        return null != r();
      }
      let a = e => (null != e && /^\/developers/.test(e) ? n("501617") : null);
    },
    315102: function (e, t, n) {
      "use strict";
      let i;
      n.r(t),
        n.d(t, {
          DEFAULT_AVATARS: function () {
            return h;
          },
          SUPPORTS_WEBP: function () {
            return _;
          },
          getEmojiURL: function () {
            return T;
          },
          getUserAvatarURL: function () {
            return C;
          },
          getGuildMemberAvatarURLSimple: function () {
            return v;
          },
          getGuildMemberAvatarURL: function () {
            return A;
          },
          getUserBannerURL: function () {
            return R;
          },
          getAvatarDecorationURL: function () {
            return N;
          },
          getGuildMemberBannerURL: function () {
            return O;
          },
          getVideoFilterAssetURL: function () {
            return w;
          },
          isAnimatedIconHash: function () {
            return x;
          },
          isVideoAssetHash: function () {
            return F;
          },
          isAnimatedImageURL: function () {
            return V;
          },
          default: function () {
            return H;
          },
        }),
        n("511434"),
        n("313619"),
        n("654714"),
        n("287168"),
        n("956660"),
        n("222007");
      var r = n("552442"),
        s = n.n(r),
        a = n("522632"),
        o = n("249654"),
        l = n("234251"),
        u = n("407063"),
        c = n("240481"),
        d = n("773336"),
        f = n("49111"),
        E = n("680894"),
        p = n("363577");
      i = n("523096").default;
      let h = i.DEFAULT_AVATARS;
      i.DEFAULT_GROUP_DM_AVATARS;
      let _ = i.canUseWebp(),
        S = (0, d.isAndroid)();
      function m(e) {
        let t,
          {
            endpoint: n,
            path: i,
            id: r,
            hash: s,
            size: o,
            canAnimate: l = !1,
            keepAspectRatio: c,
            format: d = null,
          } = e;
        if (null == r || null == s) return;
        let f = null != d ? d : l && x(s) ? "gif" : "jpg";
        l && F(s) && (f = "mp4");
        let E = window.GLOBAL_ENV.CDN_HOST;
        if (
          (null != E
            ? ("jpg" === f && (f = _ ? "webp" : "png"),
              (t = ""
                .concat(location.protocol, "//")
                .concat(E, "/")
                .concat(i, "/")
                .concat(r, "/")
                .concat(s, ".")
                .concat(f)))
            : (t =
                location.protocol +
                window.GLOBAL_ENV.API_ENDPOINT +
                n(r, s, f)),
          "mp4" === f)
        )
          return t;
        let p = {};
        return (
          null != o &&
            (p.size = (0, u.getBestMediaProxySize)(
              o * (0, u.getDevicePixelRatio)()
            )),
          null != c && (p.keep_aspect_ratio = c),
          t + "?".concat(a.stringify(p))
        );
      }
      function T(e) {
        let { id: t, animated: n, size: i, forcePNG: r = !1 } = e,
          s = _ && !r ? "webp" : "png",
          a = _ && !S ? "&quality=lossless" : "";
        return null != window.GLOBAL_ENV.CDN_HOST
          ? ""
              .concat(location.protocol, "//")
              .concat(window.GLOBAL_ENV.CDN_HOST, "/emojis/")
              .concat(t, ".")
              .concat(n ? "gif" : s, "?size=")
              .concat(
                (0, u.getBestMediaProxySize)(i * (0, u.getDevicePixelRatio)())
              )
              .concat(a)
          : location.protocol +
              window.GLOBAL_ENV.API_ENDPOINT +
              f.Endpoints.EMOJI(t, n ? "gif" : s);
      }
      function g(e, t) {
        if (null == e && null == t) return h[0];
        let n = (0, c.parseInteger)(t, 0);
        return n > 0
          ? h[n % 5]
          : null != e
            ? h[s(e).shiftRight(22).mod(6).toJSNumber()]
            : h[0];
      }
      function I(e) {
        let { id: t, avatar: n, discriminator: r, bot: s } = e,
          a = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
          o =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : f.AVATAR_SIZE,
          l =
            arguments.length > 3 && void 0 !== arguments[3]
              ? arguments[3]
              : null;
        if (s && t !== E.CLYDE_AI_USER_ID) {
          let e = i.BOT_AVATARS[n];
          if (e) return e;
          if (null == n && "0000" === r) return h[0];
        }
        return m({
          endpoint: f.Endpoints.AVATAR,
          path: "avatars",
          id: t,
          hash: n,
          size: o,
          canAnimate: a,
          format: l,
        });
      }
      function C(e) {
        var t;
        let n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
          i =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : f.AVATAR_SIZE,
          r =
            arguments.length > 3 && void 0 !== arguments[3]
              ? arguments[3]
              : null;
        return null !== (t = I(e, n, i, r)) && void 0 !== t
          ? t
          : g(e.id, e.discriminator);
      }
      function v(e) {
        let t,
          {
            guildId: n,
            userId: i,
            avatar: r,
            canAnimate: s = !1,
            size: o = f.AVATAR_SIZE,
          } = e,
          l = s && x(r) ? "gif" : "jpg",
          { CDN_HOST: c } = window.GLOBAL_ENV;
        return (
          null != c
            ? ("jpg" === l && (l = _ ? "webp" : "png"),
              (t = ""
                .concat(location.protocol, "//")
                .concat(c)
                .concat(f.Endpoints.GUILD_MEMBER_AVATAR(n, i, r, l))))
            : (t =
                location.protocol +
                window.GLOBAL_ENV.API_ENDPOINT +
                f.Endpoints.GUILD_MEMBER_AVATAR(n, i, r, l)),
          t +
            "?".concat(
              a.stringify({
                size: (0, u.getBestMediaProxySize)(
                  o * (0, u.getDevicePixelRatio)()
                ),
              })
            )
        );
      }
      function A(e) {
        let { userId: t, avatar: n, guildId: i } = e,
          r = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        return null == n
          ? null
          : v({ userId: t, avatar: n, guildId: i, canAnimate: r });
      }
      function R(e) {
        let t,
          { id: n, banner: i, canAnimate: r, size: s } = e;
        if (null == i) return;
        let a = window.GLOBAL_ENV.CDN_HOST,
          o = r && x(i) ? "gif" : "png";
        return (t =
          (null != a
            ? ""
                .concat(location.protocol, "//")
                .concat(a, "/banners/")
                .concat(n, "/")
                .concat(i, ".")
                .concat(o)
            : location.protocol +
              window.GLOBAL_ENV.API_ENDPOINT +
              f.Endpoints.USER_BANNER(n, i, o)) +
          "?size=".concat(
            (0, u.getBestMediaProxySize)(s * (0, u.getDevicePixelRatio)())
          ));
      }
      function N(e) {
        let { avatarDecoration: t, size: n, canAnimate: i = !1 } = e;
        if (null == t) return;
        let { CDN_HOST: r, API_ENDPOINT: s } = window.GLOBAL_ENV,
          a = f.Endpoints.AVATAR_DECORATION_PRESETS(t.asset),
          o = new URL(
            null != r
              ? "".concat(location.protocol, "//").concat(r).concat(a)
              : "".concat(location.protocol).concat(s).concat(a)
          );
        return (
          o.searchParams.set(
            "size",
            "".concat(
              (0, u.getBestMediaProxySize)(n * (0, u.getDevicePixelRatio)())
            )
          ),
          o.searchParams.set(
            "passthrough",
            "".concat(i && (0, l.isAnimatedAvatarDecoration)(t.asset))
          ),
          o.toString()
        );
      }
      function O(e) {
        let t,
          { id: n, guildId: i, banner: r, canAnimate: s, size: a } = e;
        if (null == r || null == i) return;
        let o = window.GLOBAL_ENV.CDN_HOST,
          l = s && x(r) ? "gif" : "png",
          c = f.Endpoints.GUILD_MEMBER_BANNER(i, n, r, l);
        return (t =
          (null != o
            ? "".concat(location.protocol, "//").concat(o).concat(c)
            : location.protocol + window.GLOBAL_ENV.API_ENDPOINT + c) +
          "?size=".concat(
            (0, u.getBestMediaProxySize)(a * (0, u.getDevicePixelRatio)())
          ));
      }
      function D(e) {
        let t,
          { id: n, splash: i, size: r } = e;
        if (null == i) return null;
        null == r && (r = window.screen.width * (0, u.getDevicePixelRatio)()),
          (r = (0, u.getBestMediaProxySize)(r));
        let s = window.GLOBAL_ENV.CDN_HOST;
        return (t =
          (null != s
            ? ""
                .concat(location.protocol, "//")
                .concat(s, "/splashes/")
                .concat(n, "/")
                .concat(i, ".jpg")
            : location.protocol +
              window.GLOBAL_ENV.API_ENDPOINT +
              f.Endpoints.GUILD_SPLASH(n, i)) + "?size=".concat(r));
      }
      function y(e) {
        let t,
          { id: n, banner: i } = e,
          r = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        if (null == i) return null;
        let s = (0, u.getBestMediaProxySize)(
            240 * (0, u.getDevicePixelRatio)()
          ),
          a = _ ? "webp" : "jpg",
          o = r && x(i) ? "gif" : a,
          l = window.GLOBAL_ENV.CDN_HOST;
        return (
          (t =
            (null != l
              ? ""
                  .concat(location.protocol, "//")
                  .concat(l, "/banners/")
                  .concat(n, "/")
                  .concat(i, ".")
                  .concat(o)
              : location.protocol +
                window.GLOBAL_ENV.API_ENDPOINT +
                f.Endpoints.GUILD_BANNER(n, i, o)) + "?size=".concat(s)),
          "jpg" === o && (t += "&quality=lossless"),
          t
        );
      }
      function P(e) {
        let t,
          { id: n, homeHeader: i } = e;
        if (null == i) return null;
        let r = (0, u.getBestMediaProxySize)(
            1096 * (0, u.getDevicePixelRatio)()
          ),
          s = window.GLOBAL_ENV.CDN_HOST;
        return (t =
          (null != s
            ? ""
                .concat(location.protocol, "//")
                .concat(s, "/home-headers/")
                .concat(n, "/")
                .concat(i, ".png")
            : location.protocol +
              window.GLOBAL_ENV.API_ENDPOINT +
              f.Endpoints.GUILD_HOME_HEADER(n, i)) + "?size=".concat(r));
      }
      function L(e) {
        let t,
          { id: n, splash: i, size: r } = e;
        if (null == i) return null;
        null == r && (r = window.screen.width * (0, u.getDevicePixelRatio)()),
          (r = (0, u.getBestMediaProxySize)(r));
        let s = window.GLOBAL_ENV.CDN_HOST;
        return (t =
          (null != s
            ? ""
                .concat(location.protocol, "//")
                .concat(s, "/discovery-splashes/")
                .concat(n, "/")
                .concat(i, ".jpg")
            : location.protocol +
              window.GLOBAL_ENV.API_ENDPOINT +
              f.Endpoints.GUILD_DISCOVERY_SPLASH(n, i)) + "?size=".concat(r));
      }
      function b(e) {
        let { id: t, icon: n, size: i, canAnimate: r = !1 } = e;
        return m({
          endpoint: f.Endpoints.GUILD_ICON,
          path: "icons",
          id: t,
          hash: n,
          size: i,
          canAnimate: r,
        });
      }
      function M(e) {
        let { id: t, icon: n, size: i = f.AVATAR_SIZE, canAnimate: r = !1 } = e;
        return m({
          endpoint: f.Endpoints.GUILD_TEMPLATE_ICON,
          path: "guild-templates",
          id: t,
          hash: n,
          size: i,
          canAnimate: r,
        });
      }
      function U(e) {
        let {
          id: t,
          icon: n,
          size: i = f.AVATAR_SIZE,
          bot: r,
          botIconFirst: s,
          fallbackAvatar: a = !0,
        } = e;
        if (null != r && s) {
          let e = I(r, !1, i);
          if (null != e) return e;
        }
        if (null != n)
          return m({
            endpoint: f.Endpoints.APPLICATION_ICON,
            path: "app-icons",
            id: t,
            hash: n,
            size: i,
            canAnimate: !1,
          });
        if (null != r) {
          let e = I(r, !1, i);
          if (null != e) return e;
        }
        if (a) return p;
      }
      function G(e) {
        let {
          id: t,
          hash: n,
          size: i = f.AVATAR_SIZE,
          keepAspectRatio: r = !1,
        } = e;
        return m({
          endpoint: f.Endpoints.APPLICATION_ICON,
          path: "app-icons",
          id: t,
          hash: n,
          size: i,
          canAnimate: !1,
          keepAspectRatio: r,
        });
      }
      function w(e) {
        let {
          userId: t,
          assetId: n,
          assetHash: i,
          size: r,
          canAnimate: s = !0,
        } = e;
        return m({
          endpoint: (e, r, s) =>
            f.Endpoints.VIDEO_FILTER_ASSET_STORAGE(t, n, i, s),
          path: "video-filter-assets/".concat(t),
          id: n,
          hash: i,
          size: r,
          canAnimate: s,
        });
      }
      function k(e) {
        var t, n, r;
        let { id: s, icon: a, applicationId: l, size: u } = e;
        if (null != l)
          return null !== (t = U({ id: l, icon: a, size: u })) && void 0 !== t
            ? t
            : i.DEFAULT_CHANNEL_ICON;
        return null !==
          (n = m({
            endpoint: f.Endpoints.CHANNEL_ICON,
            path: "channel-icons",
            id: s,
            hash: a,
            canAnimate: !1,
            size: u,
          })) && void 0 !== n
          ? n
          : ((r = s),
            i.DEFAULT_GROUP_DM_AVATARS[
              o.default.extractTimestamp(r) % i.DEFAULT_GROUP_DM_AVATARS.length
            ]);
      }
      function x(e) {
        return null != e && e.startsWith("a_");
      }
      function F(e) {
        return null != e && e.startsWith("v_");
      }
      function V(e) {
        return (
          null != e &&
          x(
            (function (e) {
              let t;
              try {
                {
                  let n = new URL(e);
                  t = n.pathname;
                }
                let n = t.split("/");
                return n.pop();
              } catch (e) {
                return null;
              }
            })(e)
          )
        );
      }
      function B(e) {
        return "number" == typeof e ? e : { uri: null != e ? e : void 0 };
      }
      var H = {
        getUserAvatarURL: C,
        getDefaultAvatarURL: g,
        getGuildMemberAvatarURL: A,
        getGuildMemberAvatarURLSimple: v,
        getGuildMemberAvatarSource: function (e, t) {
          let n =
              arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            i = A(e, n);
          return null != i ? B(i) : t.getAvatarSource(e.guildId, n);
        },
        getGuildMemberBannerURL: O,
        getUserBannerURL: R,
        getAvatarDecorationURL: N,
        hasAnimatedGuildIcon: function (e) {
          return x(null == e ? void 0 : e.icon);
        },
        isAnimatedIconHash: x,
        getUserAvatarSource(e, t, n) {
          let i = C(e, t, n);
          return B(i);
        },
        getGuildIconURL: b,
        getGuildSplashURL: D,
        getGuildSplashSource: function (e) {
          return B(D(e));
        },
        getGuildDiscoverySplashURL: L,
        getGuildDiscoverySplashSource: function (e) {
          return B(L(e));
        },
        getGuildBannerURL: y,
        getGuildHomeHeaderURL: P,
        getResourceChannelIconURL: function (e) {
          let { channelId: t, icon: n } = e;
          return null == n
            ? null
            : m({
                endpoint: f.Endpoints.GUILD_RESOURCE_CHANNELS_ICON,
                path: "resource-channels",
                id: t,
                hash: n,
                size: f.AVATAR_SIZE,
                canAnimate: !0,
              });
        },
        getNewMemberActionIconURL: function (e) {
          let { channelId: t, icon: n } = e;
          return null == n
            ? null
            : m({
                endpoint: f.Endpoints.GUILD_NEW_MEMBER_ACTIONS_ICON,
                path: "new-member-actions",
                id: t,
                hash: n,
                size: f.AVATAR_SIZE,
                canAnimate: !0,
              });
        },
        getGuildTemplateIconURL: M,
        getChannelIconURL: k,
        getEmojiURL: T,
        getApplicationIconURL: U,
        getGameAssetURL: G,
        getVideoFilterAssetURL: w,
        getGameAssetSource(e) {
          let t = G(e);
          return B(t);
        },
        getGuildIconSource(e) {
          let t = b(e);
          return B(t);
        },
        getGuildTemplateIconSource(e) {
          let t = M(e);
          return B(t);
        },
        getGuildBannerSource(e) {
          let t =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            n = y(e, t);
          return B(n);
        },
        getGuildHomeHeaderSource(e) {
          let t = P(e);
          return B(t);
        },
        getChannelIconSource(e) {
          let t = k(e);
          return B(t);
        },
        getApplicationIconSource(e) {
          let t = U(e);
          return B(t);
        },
        makeSource: B,
        getAnimatableSourceWithFallback(e, t) {
          let n = t(e);
          if (!(0, d.isAndroid)() || !e || "number" == typeof n) return n;
          {
            let e = t(!1);
            return "number" != typeof e && e.uri === n.uri
              ? e
              : [n, { ...e, isForceCached: !0 }];
          }
        },
      };
    },
    845078: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        }),
        n("581081");
      var i,
        r,
        s = n("316693");
      ((i = class {
        static has(e, t) {
          return (e & t) != 0;
        }
        static asBasicFlag(e) {
          return s.default.asUintN(20, e);
        }
        static asBigFlag(e) {
          return (
            !Object.hasOwn(this.cache, e) &&
              (this.cache[e] = s.default.deserialize(e)),
            this.cache[e]
          );
        }
      }).cache = {}),
        (r = i);
    },
    745279: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getLocalizedDisplayMonth: function () {
            return a;
          },
          createGatewayCheckoutContext: function () {
            return o;
          },
          captureBillingException: function () {
            return l;
          },
          captureBillingMessage: function () {
            return u;
          },
        });
      var i = n("967117"),
        r = n("286235"),
        s = n("843455");
      function a(e, t) {
        let n = new Date();
        return n.setMonth(e - 1), n.toLocaleString(t, { month: "short" });
      }
      async function o(e) {
        let t = null;
        if (null != e && e.paymentGateway === s.PaymentGateways.BRAINTREE) {
          let e = await (0, i.collectDeviceData)();
          null != e && (t = { braintree_device_data: e });
        }
        return t;
      }
      function l(e, t) {
        r.default.captureException(e, {
          ...t,
          tags: { ...(null == t ? void 0 : t.tags), app_context: "billing" },
        });
      }
      function u(e, t) {
        r.default.captureMessage(e, {
          ...t,
          tags: { ...(null == t ? void 0 : t.tags), app_context: "billing" },
        });
      }
    },
    967117: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getBraintreeSDK: function () {
            return a;
          },
          collectDeviceData: function () {
            return o;
          },
        });
      var i = n("269936"),
        r = n("40597"),
        s = n("49111");
      function a() {
        return (0, i.importWithRetry)({
          createPromise: () => n.el("725271").then(n.t.bind(n, "725271", 23)),
          webpackId: "725271",
        }).then(e => {
          let { default: t } = e;
          return t;
        });
      }
      function o() {
        let e = r.default.getClient();
        return null == e
          ? a().then(e =>
              e.client
                .create({ authorization: s.PaymentSettings.BRAINTREE.KEY })
                .then(e => l(e))
                .catch(() => null)
            )
          : l(e);
      }
      function l(e) {
        return a().then(t =>
          t.dataCollector
            .create({ client: e })
            .then(e => e.deviceData)
            .catch(() => null)
        );
      }
    },
    560528: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getChromeVersion: function () {
            return f;
          },
          getFirefoxVersion: function () {
            return h;
          },
          canUseWebp: function () {
            return S;
          },
          supportsHEVCAlpha: function () {
            return m;
          },
        });
      var i,
        r,
        s,
        a,
        o,
        l = n("597755"),
        u = n.n(l);
      let c = (
          null !== (i = u.name) && void 0 !== i ? i : "unknown"
        ).toLowerCase(),
        d =
          "chrome" === c.toLowerCase()
            ? parseInt(null !== (r = u.version) && void 0 !== r ? r : "", 10)
            : -1;
      function f() {
        return d;
      }
      let E =
          "electron" === c.toLowerCase()
            ? parseInt(null !== (s = u.version) && void 0 !== s ? s : "", 10)
            : -1,
        p =
          "firefox" === c.toLowerCase()
            ? parseInt(null !== (a = u.version) && void 0 !== a ? a : "", 10)
            : -1;
      function h() {
        return p;
      }
      let _ =
        "edge" === c.toLowerCase()
          ? parseInt(null !== (o = u.version) && void 0 !== o ? o : "", 10)
          : -1;
      function S() {
        return -1 !== d || -1 !== E || -1 !== p || -1 !== _;
      }
      function m() {
        var e;
        let t = window.navigator,
          n = t.userAgent.toLowerCase(),
          i =
            (null === (e = t.mediaCapabilities) || void 0 === e
              ? void 0
              : e.decodingInfo) != null,
          r =
            -1 !== n.indexOf("safari") &&
            !(-1 !== n.indexOf("chrome")) &&
            -1 !== n.indexOf("version/");
        return r && i;
      }
    },
    791776: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isInputLikeElement: function () {
            return s;
          },
          eventOwnerDocument: function () {
            return a;
          },
        });
      let i = /input/i,
        r = /textarea/i;
      function s(e) {
        if (null == e) return !1;
        if ("true" === e.getAttribute("contenteditable") || r.test(e.tagName))
          return !0;
        if (i.test(e.tagName)) {
          var t;
          let n =
            null !== (t = e.getAttribute("type")) && void 0 !== t ? t : "text";
          if ("text" === n || "password" === n) return !0;
        }
        return !1;
      }
      function a(e) {
        let { target: t } = e;
        return null == t
          ? null
          : "ownerDocument" in t
            ? t.ownerDocument
            : "document" in t
              ? t.document
              : (console.warn(
                  "Unable to get owner document from event",
                  e.type
                ),
                null);
      }
    },
    888400: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isSameDay: function () {
            return d;
          },
          isWithinInterval: function () {
            return f;
          },
          dateFormat: function () {
            return E;
          },
          calendarFormat: function () {
            return p;
          },
          accessibilityLabelCalendarFormat: function () {
            return h;
          },
          diffAsUnits: function () {
            return S;
          },
          unitsAsStrings: function () {
            return m;
          },
        });
      var i = n("866227"),
        r = n.n(i),
        s = n("432959"),
        a = n("915639");
      let o = 864e5,
        l = Object.create(null);
      function u(e) {
        let t =
            !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
          n = e.getTime();
        return !t && (n -= 6e4 * e.getTimezoneOffset()), Math.floor(n / o) * o;
      }
      function c(e, t) {
        return Math.floor((u(e, !1) - u(t, !1)) / o);
      }
      function d(e, t) {
        return Math.abs(+e - +t) <= o && e.getDate() === t.getDate();
      }
      function f(e, t, n) {
        return Math.abs(e.valueOf() - t.valueOf()) < n;
      }
      function E(e, t) {
        let n = e instanceof Date ? r(e).locale() : e.locale(),
          i = "".concat(n, ":").concat(t),
          a = l[i];
        return (
          null == a && (a = l[i] = (0, s.default)(t)),
          a(e instanceof Date ? e : e.toDate())
        );
      }
      function p(e) {
        let t;
        let n = r.localeData(),
          i = r(),
          s = c(e instanceof Date ? e : e.toDate(), i.toDate());
        return s < -1
          ? E(e, "L LT")
          : ((t =
              s < 0
                ? "lastDay"
                : s < 1
                  ? "sameDay"
                  : s < 2
                    ? "nextDay"
                    : "sameElse"),
            E(e, n.calendar(t, e instanceof Date ? r(e) : e, i)));
      }
      function h(e) {
        let t;
        let n = r.localeData(),
          i = new Date(),
          s = c(e, i);
        return "sameElse" ==
          (t =
            s < -1
              ? "sameElse"
              : s < 0
                ? "lastDay"
                : s < 1
                  ? "sameDay"
                  : s < 2
                    ? "nextDay"
                    : "sameElse")
          ? E(e, "LLL")
          : E(e, n.calendar(t, r(e), r(i)));
      }
      a.default.addChangeListener(() => {
        l = Object.create(null);
      });
      let _ = [
        { key: "days", millisecondsInUnit: 864e5 },
        { key: "hours", millisecondsInUnit: 36e5 },
        { key: "minutes", millisecondsInUnit: 6e4 },
        { key: "seconds", millisecondsInUnit: 1e3 },
      ];
      function S(e, t) {
        let n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
          i = { days: 0, hours: 0, minutes: 0, seconds: n ? 1 : 0 };
        if (e > t || (n && Number(e) + 1200 > Number(t))) return i;
        let r = Number(t) - Number(e);
        return (
          _.forEach(e => {
            let { key: t, millisecondsInUnit: n } = e;
            (i[t] = Math.floor(r / n)), (r -= i[t] * n);
          }),
          i
        );
      }
      function m(e, t) {
        return e.days > 0
          ? t.days.format({ days: e.days, hours: e.hours })
          : e.hours > 0
            ? t.hours.format({ hours: e.hours, minutes: e.minutes })
            : t.minutes.format({ minutes: Math.max(1, e.minutes) });
      }
    },
    993105: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          formatSize: function () {
            return s;
          },
          formatKbSize: function () {
            return a;
          },
        });
      var i = n("782340");
      let r = { useKibibytes: !1, showDecimalForGB: !0, useSpace: !0 };
      function s(e) {
        let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : r,
          n = t.useKibibytes ? 1024 : 1e3,
          s = t.useKibibytes ? 1024 : 1e3,
          a = Math.ceil(e / n);
        if (a < s)
          return t.useSpace
            ? i.default.Messages.FILE_SIZE_MB.format({ size: a })
            : i.default.Messages.FILE_SIZE_MB_NO_SPACE.format({ size: a });
        let o = a / s;
        return (
          (o = t.showDecimalForGB ? Math.round(10 * o) / 10 : Math.round(o)),
          t.useSpace
            ? i.default.Messages.FILE_SIZE_GB.format({ size: o })
            : i.default.Messages.FILE_SIZE_GB_NO_SPACE.format({ size: o })
        );
      }
      function a(e) {
        let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : r,
          n = t.useKibibytes ? 1024 : 1e3,
          a = t.useKibibytes ? 1024 : 1e3,
          o = e / n,
          l = o / a;
        return l >= 1
          ? s(o, t)
          : t.useSpace
            ? i.default.Messages.FILE_SIZE_KB.format({ size: Math.ceil(o) })
            : i.default.Messages.FILE_SIZE_KB_NO_SPACE.format({
                size: Math.ceil(o),
              });
      }
    },
    254490: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          transformNativeFile: function () {
            return p;
          },
          makeFile: function () {
            return h;
          },
          classifyFile: function () {
            return S;
          },
          classifyFileName: function () {
            return m;
          },
          sizeString: function () {
            return T;
          },
          maxFileSize: function () {
            return g;
          },
          anyFileTooLarge: function () {
            return I;
          },
          uploadSumTooLarge: function () {
            return C;
          },
          getMaxRequestSize: function () {
            return v;
          },
        }),
        n("222007");
      var i = n("477850"),
        r = n.n(i),
        s = n("917351"),
        a = n.n(s),
        o = n("143068"),
        l = n("700031"),
        u = n("305961"),
        c = n("697218"),
        d = n("719923"),
        f = n("49111"),
        E = n("646718");
      function p(e, t) {
        return e instanceof File ? e : h(e.data, e.filename, t);
      }
      function h(e, t, i) {
        let r = n("637139");
        if (null == t && ((t = "unknown"), "type" in e)) {
          let n = r.extension(e.type);
          n && (t += ".".concat(n));
        }
        return (
          null == i &&
            ("type" in e && (i = e.type), (i = null != i ? i : r.lookup(t))),
          new File([e], t, { type: i })
        );
      }
      let _ = [
        { reType: /^image\/vnd.adobe.photoshop/, klass: "photoshop" },
        { reType: /^image\/svg\+xml/, klass: "webcode" },
        { reType: /^image\//, klass: "image" },
        { reType: /^video\//, klass: "video" },
        { reName: /\.pdf$/, klass: "acrobat" },
        { reName: /\.ae/, klass: "ae" },
        { reName: /\.sketch$/, klass: "sketch" },
        { reName: /\.ai$/, klass: "ai" },
        { reName: /\.(?:rar|zip|7z|tar|tar\.gz)$/, klass: "archive" },
        {
          reName:
            /\.(?:c\+\+|cpp|cc|c|h|hpp|mm|m|json|js|rb|rake|py|asm|fs|pyc|dtd|cgi|bat|rss|java|graphml|idb|lua|o|gml|prl|sls|conf|cmake|make|sln|vbe|cxx|wbf|vbs|r|wml|php|bash|applescript|fcgi|yaml|ex|exs|sh|ml|actionscript)$/,
          klass: "code",
        },
        {
          reName: /\.(?:txt|rtf|doc|docx|md|pages|ppt|pptx|pptm|key|log)$/,
          klass: "document",
        },
        { reName: /\.(?:xls|xlsx|numbers|csv)$/, klass: "spreadsheet" },
        {
          reName: /\.(?:html|xhtml|htm|js|xml|xls|xsd|css|styl)$/,
          klass: "webcode",
        },
        { reName: /\.(?:mp3|ogg|wav|flac)$/, klass: "audio" },
      ];
      function S(e) {
        return m(e.name, e.type);
      }
      function m(e, t) {
        var n;
        e =
          null !== (n = null == e ? void 0 : e.toLowerCase()) && void 0 !== n
            ? n
            : "";
        let i = a.find(_, n =>
          null != n.reType && null != t
            ? n.reType.test(t)
            : null != n.reName && "" !== e && n.reName.test(e)
        );
        return null != i ? i.klass : "unknown";
      }
      function T(e) {
        return r.filesize(e);
      }
      function g(e) {
        let t = c.default.getCurrentUser();
        o.default.trackExposure({ location: "de18ec_1" }),
          l.default.trackExposure({ location: "de18ec_2" });
        let n = d.default.getUserMaxFileSize(t);
        if (null == e) return n;
        let i = u.default.getGuild(e),
          r =
            null != i
              ? E.BoostedGuildFeatures[i.premiumTier].limits.fileSize
              : f.MAX_ATTACHMENT_SIZE;
        return Math.max(r, n);
      }
      function I(e, t) {
        let n = g(t);
        return Array.from(e).some(e => e.size > n);
      }
      function C(e) {
        return (
          (function (e) {
            let t = 0;
            for (let n of e) t += n.size;
            return t;
          })(e) > v()
        );
      }
      function v() {
        let e = c.default.getCurrentUser();
        return null != e && e.isStaff() ? 524288e3 : 524288e3;
      }
    },
    568734: function (e, t, n) {
      "use strict";
      function i(e, t) {
        return (e & t) === t;
      }
      function r(e, t) {
        return e | t;
      }
      function s(e, t) {
        return e & ~t;
      }
      function a(e) {
        for (
          var t = arguments.length, n = Array(t > 1 ? t - 1 : 0), i = 1;
          i < t;
          i++
        )
          n[i - 1] = arguments[i];
        return n.reduce((e, t) => e & ~t, e);
      }
      function o(e, t, n) {
        if (n) return e | t;
        return e & ~t;
      }
      function l(e, t) {
        if (i(e, t)) return e & ~t;
        return e | t;
      }
      n.r(t),
        n.d(t, {
          hasFlag: function () {
            return i;
          },
          addFlag: function () {
            return r;
          },
          removeFlag: function () {
            return s;
          },
          removeFlags: function () {
            return a;
          },
          setFlag: function () {
            return o;
          },
          toggleFlag: function () {
            return l;
          },
        }),
        n("808653");
    },
    117362: function (e, t, n) {
      "use strict";
      function i(e, t) {
        if (e === t) return !0;
        if (null == e || null == t || e.length !== t.length) return !1;
        let n = e.length;
        for (let i = 0; i < n; i++) if (e[i] !== t[i]) return !1;
        return !0;
      }
      function r(e) {
        let t = null,
          n = null;
        return function () {
          for (var r = arguments.length, s = Array(r), a = 0; a < r; a++)
            s[a] = arguments[a];
          return !i(t, s) && (n = e(...s)), (t = s), n;
        };
      }
      function s(e) {
        let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : 5e3,
          n = -1,
          i = null;
        return () => (
          (null == i || Date.now() >= n) && ((n = Date.now() + t), (i = e())), i
        );
      }
      function a(e) {
        for (var t in e) e.hasOwnProperty(t) && delete e[t];
      }
      n.r(t),
        n.d(t, {
          areArraysShallowlyEqual: function () {
            return i;
          },
          cachedFunction: function () {
            return r;
          },
          promiseThrottle: function () {
            return s;
          },
          clearObject: function () {
            return a;
          },
        }),
        n("424973"),
        n("860677"),
        n("222007");
    },
    269180: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return N;
          },
        }),
        n("70102"),
        n("222007");
      var i = n("157552"),
        r = n("605250"),
        s = n("831610"),
        a = n("261131"),
        o = n("271938"),
        l = n("86878"),
        u = n("368694"),
        c = n("560733"),
        d = n("152723"),
        f = n("773336"),
        E = n("253981"),
        p = n("50885"),
        h = n("49111");
      let _ = new r.default("Games"),
        S = {},
        m = 0,
        T = null;
      function g() {
        return null != T
          ? Promise.resolve(T)
          : (0, f.isDesktop)()
            ? p.default.ensureModule("discord_game_utils").then(() => {
                let e = p.default.getGameUtils();
                return null != e && null != e.findLaunchable
                  ? ((T = e), e)
                  : Promise.reject(Error("game utils not found"));
              })
            : Promise.reject(Error("not desktop client"));
      }
      function I(e) {
        let t = {
            id: e.id,
            name: e.name,
            thirdPartySkus: e.thirdPartySkus,
            executables: e.executables
              .filter(e => e.os === (0, f.getPlatformName)())
              .map(e => e.name),
          },
          n = e.aliases.map(e => ({ ...t, name: e }));
        return [t, ...n];
      }
      function C(e) {
        return { id: e };
      }
      async function v(e) {
        if (
          (!Array.isArray(e) && (e = [e]),
          !u.default.isDeveloper &&
            (e = e.filter(
              e =>
                null == e.thirdPartySkus ||
                -1 ===
                  e.thirdPartySkus.findIndex(e => {
                    let { distributor: t } = e;
                    return t === h.Distributors.BATTLENET;
                  })
            )),
          0 === e.length)
        )
          throw Error("No remaining launchable queries");
        let t = Date.now();
        t > m && ((m = t + 36e5), (S = {}));
        let n = await g();
        for (let t of e) {
          let e = S[t.id];
          if (null != e) return e;
          let i = await new Promise(e => n.findLaunchable(t, e));
          if (null != i) return (S[t.id] = i), i;
        }
        throw Error("could not find launchable");
      }
      function A(e, t, n) {
        let i =
          arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 0;
        if (e()) {
          t();
          return;
        }
        setTimeout(() => {
          250 * i <= 12e4 ? A(e, t, n, i + 1) : n();
        }, 250);
      }
      function R(e) {
        return (
          _.info("launch", e),
          new Promise((t, n) => {
            let i = E.default.safeParseWithQuery(e.launchTarget);
            null == i
              ? n(
                  Error(
                    "Failed to parse launch target. ".concat(e.launchTarget)
                  )
                )
              : (window.open(e.launchTarget), t([]));
          })
        );
      }
      var N = {
        waitSubscribed: (e, t) =>
          new Promise((n, i) => A(() => a.default.isSubscribed(e, t), n, i)),
        waitConnected(e) {
          return new Promise(A.bind(this, () => l.default.isConnected(e)));
        },
        isLaunchable: e =>
          v(I(e))
            .then(e => null != e)
            .catch(() => !1),
        launch: e => v(I(e)).then(R),
        launchDispatchApplication(e, t, n, r, a) {
          let {
            launchOptions: l,
            defaultLaunchOptionId: u,
            installPath: f,
            applicationId: E,
            branchId: p,
            buildId: _,
            shouldPatch: S,
          } = e;
          if (null == l || null == u || null == f)
            throw Error(
              "Couldn't construct launchable for ".concat(e.applicationId)
            );
          null == a && (a = u);
          let m = l[a];
          if (null == m)
            throw Error(
              "Couldn't construct launchable for ".concat(
                e.applicationId,
                ". No launch option."
              )
            );
          return (0, i.fetchBranches)([p])
            .then(e => {
              let t = e[0];
              if (null == t) return Promise.reject(Error("branch is null"));
              let { liveBuildId: n } = t;
              if (S && n !== _)
                return Promise.reject(Error("live build id changed"));
            })
            .then(() => d.default.runLaunchSetup(E, p))
            .then(() => {
              let e = (0, s.default)(f),
                i = {
                  DISCORD_INSTANCE_ID: c.default.getId().toString(),
                  DISCORD_ACCESS_TOKEN: null != t ? t : "",
                  DISCORD_CURRENT_LOCALE: n,
                  DISCORD_CURRENT_BRANCH: r,
                  DISCORD_STORAGE_PATH:
                    h.DefaultCloudSyncConfiguration.ROOT_STORAGE_PATH(
                      e,
                      o.default.getId()
                    ),
                };
              return d.default.launch(E, p, m.name, i);
            });
        },
        removeShortcuts: e =>
          (0, f.isWindows)()
            ? g().then(t => {
                var n, i;
                return (
                  null !==
                    (i =
                      null === (n = t.removeShortcuts) || void 0 === n
                        ? void 0
                        : n.call(t, e)) &&
                  void 0 !== i &&
                  i
                );
              })
            : Promise.resolve(!1),
        createShortcuts(e, t, n, i, r) {
          if (null == r || !(0, f.isWindows)()) return Promise.resolve(!1);
          let s = "discord:///library/".concat(i, "/launch"),
            a = "".concat(r, "\\icon.ico");
          return g().then(i => {
            var r, o;
            return (
              null !==
                (o =
                  null === (r = i.createShortcuts) || void 0 === r
                    ? void 0
                    : r.call(i, e, t, n, s, a)) &&
              void 0 !== o &&
              o
            );
          });
        },
        isGameLaunchable: e =>
          v({ id: e })
            .then(e => null != e)
            .catch(() => !1),
        launchGame(e) {
          if (l.default.isConnected(e)) return Promise.resolve();
          return v({ id: e }).then(R);
        },
        isProtocolRegistered: e =>
          g().then(t => {
            var n, i;
            return (
              null !==
                (i =
                  null === (n = t.isProtocolSchemeRegistered) || void 0 === n
                    ? void 0
                    : n.call(t, e)) &&
              void 0 !== i &&
              i
            );
          }),
        setRecentGames(e) {
          g()
            .then(t => {
              var n;
              return null === (n = t.setRecentGames) || void 0 === n
                ? void 0
                : n.call(t, e);
            })
            .catch(() => {});
        },
      };
    },
    665618: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          fromServer: function () {
            return o;
          },
          fromBackgroundSync: function () {
            return l;
          },
          fromServerUpdate: function () {
            return u;
          },
          fromInviteGuild: function () {
            return c;
          },
          toServer: function () {
            return d;
          },
          fromSerializedGuildRecord: function () {
            return f;
          },
          filterRoleDeletes: function () {
            return E;
          },
        }),
        n("222007");
      var i = n("627929"),
        r = n("813006"),
        s = n("605136"),
        a = n("49111");
      function o(e, t) {
        var n, o, l, u, c, d, f, E, p, h, _, S, m;
        let T = {
          id: e.id,
          name: null !== (n = e.properties.name) && void 0 !== n ? n : "",
          description: e.properties.description,
          icon: e.properties.icon,
          splash: e.properties.splash,
          banner: e.properties.banner,
          homeHeader: e.properties.home_header,
          features: new Set(
            null !== (o = e.properties.features) && void 0 !== o ? o : []
          ),
          preferredLocale:
            null !== (l = e.properties.preferred_locale) && void 0 !== l
              ? l
              : "en-us",
          ownerId: e.properties.owner_id,
          application_id: e.properties.application_id,
          roles:
            e.roles instanceof Array
              ? (0, s.sortServerRoles)(e.id, e.roles)
              : e.roles,
          afkChannelId: e.properties.afk_channel_id,
          afkTimeout: e.properties.afk_timeout,
          systemChannelId: e.properties.system_channel_id,
          joinedAt:
            null != e.joined_at
              ? new Date(e.joined_at)
              : null == t
                ? void 0
                : t.joinedAt,
          verificationLevel:
            null !== (u = e.properties.verification_level) && void 0 !== u
              ? u
              : a.VerificationLevels.NONE,
          explicitContentFilter:
            null !== (c = e.properties.explicit_content_filter) && void 0 !== c
              ? c
              : a.GuildExplicitContentFilterTypes.DISABLED,
          defaultMessageNotifications:
            null !== (d = e.properties.default_message_notifications) &&
            void 0 !== d
              ? d
              : a.UserNotificationSettings.ALL_MESSAGES,
          mfaLevel:
            null !== (f = e.properties.mfa_level) && void 0 !== f
              ? f
              : a.MFALevels.NONE,
          vanityURLCode: e.properties.vanity_url_code,
          premiumTier:
            null !== (E = e.properties.premium_tier) && void 0 !== E
              ? E
              : a.BoostedGuildTiers.NONE,
          premiumSubscriberCount:
            null !== (p = e.premium_subscription_count) && void 0 !== p ? p : 0,
          premiumProgressBarEnabled:
            e.properties.premium_progress_bar_enabled || !1,
          systemChannelFlags: e.properties.system_channel_flags,
          discoverySplash: e.properties.discovery_splash,
          rulesChannelId: e.properties.rules_channel_id,
          safetyAlertsChannelId: e.properties.safety_alerts_channel_id,
          publicUpdatesChannelId: e.properties.public_updates_channel_id,
          maxStageVideoChannelUsers:
            null !== (h = e.properties.max_stage_video_channel_users) &&
            void 0 !== h
              ? h
              : -1,
          maxVideoChannelUsers:
            null !== (_ = e.properties.max_video_channel_users) && void 0 !== _
              ? _
              : -1,
          maxMembers:
            null !== (S = e.properties.max_members) && void 0 !== S ? S : -1,
          nsfwLevel:
            null !== (m = e.properties.nsfw_level) && void 0 !== m
              ? m
              : a.GuildNSFWContentLevel.DEFAULT,
          hubType: e.properties.hub_type,
          latestOnboardingQuestionId:
            e.properties.latest_onboarding_question_id,
        };
        return null == t ? (0, i.dangerouslyCast)(T, r.default) : t.merge(T);
      }
      function l(e, t) {
        var n, i, r, o, l, u, c, f, p, h, _, S, m;
        let T = null !== (n = e.properties) && void 0 !== n ? n : d(t),
          g = {
            id: e.id,
            name: null !== (i = T.name) && void 0 !== i ? i : "",
            description: T.description,
            icon: T.icon,
            splash: T.splash,
            banner: T.banner,
            homeHeader: T.home_header,
            features: new Set(
              null !== (r = T.features) && void 0 !== r ? r : []
            ),
            preferredLocale:
              null !== (o = T.preferred_locale) && void 0 !== o ? o : "en-us",
            ownerId: T.owner_id,
            application_id: T.application_id,
            roles:
              "partial" === e.data_mode
                ? E(
                    e.id,
                    t.roles,
                    e.partial_updates.roles,
                    e.partial_updates.deleted_role_ids
                  )
                : (0, s.sortServerRoles)(e.id, e.roles),
            afkChannelId: T.afk_channel_id,
            afkTimeout: T.afk_timeout,
            systemChannelId: T.system_channel_id,
            verificationLevel:
              null !== (l = T.verification_level) && void 0 !== l
                ? l
                : a.VerificationLevels.NONE,
            explicitContentFilter:
              null !== (u = T.explicit_content_filter) && void 0 !== u
                ? u
                : a.GuildExplicitContentFilterTypes.DISABLED,
            defaultMessageNotifications:
              null !== (c = T.default_message_notifications) && void 0 !== c
                ? c
                : a.UserNotificationSettings.ALL_MESSAGES,
            mfaLevel:
              null !== (f = T.mfa_level) && void 0 !== f ? f : a.MFALevels.NONE,
            vanityURLCode: T.vanity_url_code,
            premiumTier:
              null !== (p = T.premium_tier) && void 0 !== p
                ? p
                : a.BoostedGuildTiers.NONE,
            premiumProgressBarEnabled: T.premium_progress_bar_enabled || !1,
            systemChannelFlags: T.system_channel_flags,
            discoverySplash: T.discovery_splash,
            rulesChannelId: T.rules_channel_id,
            safetyAlertsChannelId: T.safety_alerts_channel_id,
            publicUpdatesChannelId: T.public_updates_channel_id,
            maxStageVideoChannelUsers:
              null !== (h = T.max_stage_video_channel_users) && void 0 !== h
                ? h
                : -1,
            maxVideoChannelUsers:
              null !== (_ = T.max_video_channel_users) && void 0 !== _ ? _ : -1,
            maxMembers: null !== (S = T.max_members) && void 0 !== S ? S : -1,
            nsfwLevel:
              null !== (m = T.nsfw_level) && void 0 !== m
                ? m
                : a.GuildNSFWContentLevel.DEFAULT,
            hubType: T.hub_type,
            latestOnboardingQuestionId: T.latest_onboarding_question_id,
          };
        return t.merge(g);
      }
      function u(e, t) {
        let n = {
          id: e.id,
          name: e.name,
          description: e.description,
          icon: e.icon,
          splash: e.splash,
          banner: e.banner,
          homeHeader: e.home_header,
          features: e.features,
          preferredLocale: e.preferred_locale,
          ownerId: e.owner_id,
          application_id: e.application_id,
          roles: (0, s.sortServerRoles)(e.id, e.roles),
          afkChannelId: e.afk_channel_id,
          afkTimeout: e.afk_timeout,
          systemChannelId: e.system_channel_id,
          joinedAt:
            null != e.joined_at
              ? new Date(e.joined_at)
              : null == t
                ? void 0
                : t.joinedAt,
          verificationLevel: e.verification_level,
          explicitContentFilter: e.explicit_content_filter,
          defaultMessageNotifications: e.default_message_notifications,
          mfaLevel: e.mfa_level,
          vanityURLCode: e.vanity_url_code,
          premiumTier: e.premium_tier,
          premiumSubscriberCount: e.premium_subscription_count,
          premiumProgressBarEnabled: e.premium_progress_bar_enabled,
          systemChannelFlags: e.system_channel_flags,
          discoverySplash: e.discovery_splash,
          rulesChannelId: e.rules_channel_id,
          safetyAlertsChannelId: e.safety_alerts_channel_id,
          publicUpdatesChannelId: e.public_updates_channel_id,
          maxStageVideoChannelUsers: e.max_stage_video_channel_users,
          maxVideoChannelUsers: e.max_video_channel_users,
          maxMembers: e.max_members,
          nsfwLevel: e.nsfw_level,
          hubType: e.hub_type,
          latestOnboardingQuestionId: e.latest_onboarding_question_id,
        };
        return null == t ? new r.default(n) : t.merge(n);
      }
      function c(e) {
        let t = {
          id: e.id,
          name: e.name,
          description: e.description,
          icon: e.icon,
          splash: e.splash,
          banner: e.banner,
          features: e.features,
          verificationLevel: e.verification_level,
          vanityURLCode: e.vanity_url_code,
          premiumSubscriberCount: e.premium_subscription_count,
          nsfwLevel: e.nsfw_level,
          memberCount: e.approximate_member_count,
        };
        return new r.default(t);
      }
      function d(e) {
        return {
          id: e.id,
          name: e.name,
          description: e.description,
          icon: e.icon,
          splash: e.splash,
          banner: e.banner,
          home_header: e.homeHeader,
          features: Array.from(e.features),
          preferred_locale: e.preferredLocale,
          owner_id: e.ownerId,
          application_id: e.application_id,
          afk_channel_id: e.afkChannelId,
          afk_timeout: e.afkTimeout,
          system_channel_id: e.systemChannelId,
          verification_level: e.verificationLevel,
          explicit_content_filter: e.explicitContentFilter,
          default_message_notifications: e.defaultMessageNotifications,
          mfa_level: e.mfaLevel,
          vanity_url_code: e.vanityURLCode,
          premium_tier: e.premiumTier,
          premium_progress_bar_enabled: e.premiumProgressBarEnabled,
          system_channel_flags: e.systemChannelFlags,
          discovery_splash: e.discoverySplash,
          rules_channel_id: e.rulesChannelId,
          safety_alerts_channel_id: e.safetyAlertsChannelId,
          public_updates_channel_id: e.publicUpdatesChannelId,
          max_stage_video_channel_users: e.maxStageVideoChannelUsers,
          max_video_channel_users: e.maxVideoChannelUsers,
          unavailable: !1,
          max_members: e.maxMembers,
          nsfw_level: e.nsfwLevel,
          hub_type: e.hubType,
          latest_onboarding_question_id: e.latestOnboardingQuestionId,
        };
      }
      function f(e) {
        var t;
        for (let n in (null != e.joinedAt &&
          (e.joinedAt = new Date(e.joinedAt)),
        (e.features = new Set(
          null !== (t = e.features) && void 0 !== t ? t : []
        )),
        e.roles))
          (0, s.fromSerializedGuildRole)(e.roles[n]);
        return (0, i.dangerouslyCast)(e, r.default);
      }
      function E(e, t, n, i) {
        let r = !1;
        if (null != i) for (let e of i) delete t[e], (r = !0);
        if (null != n && n.length > 0) {
          for (let e of n) t[e.id] = (0, s.fromServerRole)(e);
          r = !0;
        }
        return r ? (0, s.sortClientRoles)(e, Object.values(t)) : t;
      }
    },
    605136: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          fromSerializedGuildRole: function () {
            return a;
          },
          fromServerRole: function () {
            return o;
          },
          sortClientRoles: function () {
            return l;
          },
          sortServerRoles: function () {
            return u;
          },
        }),
        n("702976");
      var i = n("316693"),
        r = n("509043"),
        s = n("299039");
      function a(e) {
        e.permissions = i.default.deserialize(e.permissions);
      }
      function o(e) {
        var t;
        return {
          id: e.id,
          name: e.name,
          permissions: i.default.deserialize(e.permissions),
          mentionable: e.mentionable,
          position: e.position,
          originalPosition: e.position,
          color: e.color,
          colorString:
            null != e.color && 0 !== e.color ? (0, r.int2hex)(e.color) : null,
          hoist: e.hoist,
          managed: e.managed,
          tags: e.tags,
          icon: e.icon,
          unicodeEmoji: e.unicode_emoji,
          flags: null !== (t = e.flags) && void 0 !== t ? t : 0,
        };
      }
      function l(e, t) {
        if (null == t) return {};
        let n = t.length - 1,
          i = {};
        return (
          t
            .sort((t, n) => {
              var i, r;
              let a =
                  t.id === e
                    ? 1 / 0
                    : -(null !== (i = t.originalPosition) && void 0 !== i
                        ? i
                        : t.position),
                o =
                  n.id === e
                    ? 1 / 0
                    : -(null !== (r = n.originalPosition) && void 0 !== r
                        ? r
                        : n.position);
              return a === o
                ? s.default.compare(t.id, n.id)
                : a < o
                  ? -1
                  : a === o
                    ? 0
                    : 1;
            })
            .forEach((e, t) => {
              (e.position = n - t), (i[e.id] = e);
            }),
          i
        );
      }
      function u(e, t) {
        return null == t ? {} : l(e, t.map(o));
      }
    },
    701909: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          SUPPORT_LOCATION: function () {
            return u;
          },
          default: function () {
            return E;
          },
        });
      var i = n("872717"),
        r = n("15649"),
        s = n("915639"),
        a = n("271938"),
        o = n("773336"),
        l = n("49111");
      let u = "https://".concat(l.SUPPORT_DOMAIN),
        c = "https://".concat(l.SUPPORT_DEV_DOMAIN);
      function d(e) {
        let t =
          arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : u;
        return t + e;
      }
      function f() {
        return s.default.locale.toLowerCase();
      }
      var E = {
        getArticleURL: e => d("/hc/".concat(f(), "/articles/").concat(e)),
        getDevArticleURL: e => d("/hc/".concat(f(), "/articles/").concat(e), c),
        getCreatorSupportArticleURL: e =>
          d(
            "/hc/".concat(f(), "/articles/").concat(e),
            "https://creator-support.discord.com"
          ),
        getTwitterURL: () => (0, r.default)(l.LocalizedLinks.TWITTER),
        getCommunityURL: () => d("/hc/".concat(f())),
        getSubmitRequestURL(e) {
          let t = d(
            "/hc/"
              .concat(f(), "/requests/new?platform=")
              .concat(encodeURIComponent((0, o.getPlatformName)()))
          );
          return (
            null != e && (t += "&device_info=".concat(encodeURIComponent(e))), t
          );
        },
        async getSubmitRequestURLAuthenticated(e) {
          let t = a.default.getToken();
          if (null == t) return this.getSubmitRequestURL(e);
          let n = await i.default.get({
              url: l.Endpoints.SSO_TOKEN,
              headers: { authorization: t },
            }),
            r = this.getSubmitRequestURL(e);
          return ""
            .concat(i.default.getAPIBaseURL())
            .concat(l.Endpoints.SSO, "?service=zendesk&return_to=")
            .concat(r, "&token=")
            .concat(n.body.token);
        },
        getSearchURL(e) {
          let t = encodeURIComponent(e);
          return d(
            "/hc/"
              .concat(f(), "/search?utf8=%E2%9C%93&query=")
              .concat(t, "&commit=Search")
          );
        },
        getFeaturedArticlesJsonURL: () =>
          d("/api/v2/help_center/en-us/articles.json?label_names=featured"),
      };
    },
    595698: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getIntersectionObserver: function () {
            return a;
          },
          watch: function () {
            return o;
          },
          unwatch: function () {
            return l;
          },
        }),
        n("222007");
      let i = new WeakMap(),
        r = new WeakMap();
      function s(e, t) {
        e.forEach(e => {
          var n;
          let i =
            null === (n = r.get(t)) || void 0 === n ? void 0 : n.get(e.target);
          null != i && i.call(null, e);
        });
      }
      function a(e) {
        let t = i.get(e);
        return (
          null == t &&
            ((t = new IntersectionObserver(s, e)),
            i.set(e, t),
            r.set(t, new WeakMap())),
          t
        );
      }
      function o(e, t, n) {
        var i;
        let s = null !== (i = r.get(e)) && void 0 !== i ? i : new WeakMap();
        !s.has(t) && e.observe(t), s.set(t, n), r.set(e, s);
      }
      function l(e, t) {
        var n;
        let i = null !== (n = r.get(e)) && void 0 !== n ? n : new WeakMap();
        i.has(t) && (i.delete(t), e.unobserve(t), r.set(e, i));
      }
    },
    964889: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getComboId: function () {
            return o;
          },
          convertComboId: function () {
            return l;
          },
          shouldShareApplicationActivity: function () {
            return u;
          },
          calculateProgressPercentage: function () {
            return c;
          },
          shouldShowGameInLibrary: function () {
            return d;
          },
          convertToTransitionState: function () {
            return f;
          },
          getCombinedProgress: function () {
            return E;
          },
          isUserEntitledToLibraryApplication: function () {
            return p;
          },
        }),
        n("222007"),
        n("808653");
      var i = n("845579"),
        r = n("697218"),
        s = n("552712"),
        a = n("49111");
      function o(e, t) {
        return "".concat(e, ":").concat(t);
      }
      function l(e) {
        let [t, n] = e.split(":");
        return { applicationId: t, branchId: n };
      }
      function u(e, t) {
        if (
          !i.ShowCurrentGame.getSetting() ||
          i.StatusSetting.getSetting() === a.StatusTypes.INVISIBLE
        )
          return !1;
        let n = t.getActiveLibraryApplication(e);
        return null == n || !n.hasFlag(a.LibraryApplicationFlags.PRIVATE);
      }
      function c(e, t) {
        return 0 === t ? 100 : (e / t) * 100;
      }
      function d(e, t, n) {
        return (
          !(
            null == t ||
            (n.enabled && t.hasFlag(a.LibraryApplicationFlags.PRIVATE))
          ) && !t.isHidden()
        );
      }
      function f(e) {
        return null == e
          ? null
          : e.type === a.LocalDispatchApplicationStates.INSTALLING ||
              e.type === a.LocalDispatchApplicationStates.UPDATING ||
              e.type === a.LocalDispatchApplicationStates.UNINSTALLING
            ? e
            : null;
      }
      function E(e) {
        return e.reduce(
          (e, t) => {
            let n = f(t);
            return null == n ||
              t.type === a.LocalDispatchApplicationStates.UP_TO_DATE
              ? e
              : {
                  total: e.total + Number(n.total),
                  progress: e.progress + Number(n.progress),
                };
          },
          { total: 0, progress: 0 }
        );
      }
      function p(e) {
        return (
          !!e.isDiscordApplication() &&
          e.isEntitled(r.default.getCurrentUser(), s.default)
        );
      }
    },
    152723: function (e, t, n) {
      "use strict";
      let i, r;
      n.r(t),
        n.d(t, {
          default: function () {
            return T;
          },
        }),
        n("222007"),
        n("70102");
      var s = n("913144"),
        a = n("846071"),
        o = n("605250"),
        l = n("697218"),
        u = n("316661"),
        c = n("599110"),
        d = n("773336"),
        f = n("50885"),
        E = n("49111"),
        p = n("492249");
      let h = new o.default("NativeDispatchUtils");
      function _() {
        return (
          null == r &&
            h.warn("Tried getting Dispatch instance before instantiated"),
          r
        );
      }
      function S(e) {
        let t = JSON.parse(e);
        return h.log("Native Dispatch error", t), new a.default(t);
      }
      function m(e, t) {
        "" !== e && S(e);
      }
      var T = {
        init(e) {
          let {
            userToken: t,
            userId: n,
            installPaths: s,
            platform: a,
            stateCallback: o,
            errorCallback: u,
          } = e;
          null == r &&
            (null != i
              ? Promise.resolve(i)
              : (0, d.isDesktop)()
                ? Promise.all([
                    f.default.ensureModule("discord_dispatch"),
                    f.default.ensureModule("discord_modules"),
                  ]).then(() => {
                    f.default.requireModule("discord_modules");
                    let e = f.default.getDispatch();
                    return null != e
                      ? ((i = e), e)
                      : Promise.reject(Error("dispatch not found"));
                  })
                : Promise.reject(Error("not desktop client"))
            ).then(e => {
              var i;
              let d = {
                  environment: window.GLOBAL_ENV.RELEASE_CHANNEL,
                  build_number: "265822",
                },
                f = l.default.getCurrentUser();
              null != f &&
                ((d.user_id = f.id),
                (d.user_name = f.tag),
                null != f.email && (d.email = f.email));
              let p = {
                user_token: t,
                user_id: n,
                install_paths: s.map(e => {
                  let { path: t } = e;
                  return t;
                }),
                api_endpoint: ""
                  .concat(((i = "https:"), "https:"))
                  .concat(window.GLOBAL_ENV.API_ENDPOINT),
                environment: window.GLOBAL_ENV.PROJECT_ENV,
                sentry: d,
                platform: a,
              };
              r = new e.Dispatch(
                JSON.stringify(p),
                e => {
                  let t = JSON.parse(e);
                  o({
                    applications: t.applications,
                    paused: t.paused,
                    currentTask:
                      null != t.current_task
                        ? {
                            applicationId: t.current_task.application_id,
                            branchId: t.current_task.branch_id,
                          }
                        : null,
                    nextTask:
                      null != t.next_task
                        ? {
                            applicationId: t.next_task.application_id,
                            branchId: t.next_task.branch_id,
                          }
                        : null,
                  });
                },
                e => {
                  let t = S(e);
                  u(t);
                },
                e => {
                  let t = JSON.parse(e);
                  !(function (e) {
                    let { properties: t } = e;
                    switch (
                      (null != t.stage &&
                        null != t.stage.type &&
                        (t.stage = t.stage.type),
                      e.event_name)
                    ) {
                      case E.AnalyticEvents.DISPATCH_PATCH_STARTED:
                      case E.AnalyticEvents.DISPATCH_PATCH_PAUSED:
                      case E.AnalyticEvents.DISPATCH_PATCH_FAILED:
                      case E.AnalyticEvents.DISPATCH_PATCH_VERIFICATION_FAILED:
                      case E.AnalyticEvents.DISPATCH_PATCH_COMPLETE:
                      case E.AnalyticEvents.DISPATCH_PATCH_CANCELLED:
                      case E.AnalyticEvents.DISPATCH_APPLICATION_UNINSTALLED:
                        c.default.track(e.event_name, t);
                    }
                  })(t);
                }
              );
            });
        },
        destroy() {
          let e = _();
          null != e && void 0 !== e.destroy && (e.destroy(), (r = null));
        },
        setTargetManifest(e) {
          let {
              applicationId: t,
              applicationName: n,
              applicationIcon: i,
              branchId: r,
              buildId: s,
              manifestIds: a,
              installationPath: o,
            } = e,
            l = _();
          null != l &&
            l.command(
              JSON.stringify({
                command: "SetTargetManifest",
                application_id: t,
                application_name: n,
                application_icon: i,
                branch_id: r,
                build_id: s,
                manifest_ids: a,
                install_path: o,
              }),
              m
            );
        },
        setCurrentTask(e, t, n, i, r) {
          let s = _();
          return (
            null != s &&
            (s.command(
              JSON.stringify({
                command: "SetCurrentTask",
                application_id: e,
                branch_id: t,
                action: n,
                user_id: i,
                user_token: r,
              }),
              m
            ),
            !0)
          );
        },
        setCredentials(e, t) {
          let n = _();
          null != n &&
            n.command(
              JSON.stringify({
                command: "SetCredentials",
                user_id: e,
                user_token: t,
              }),
              m
            );
        },
        cancel(e, t) {
          let n = _();
          null != n &&
            n.command(
              JSON.stringify({
                command: "Cancel",
                application_id: e,
                branch_id: t,
              }),
              m
            );
        },
        uninstall(e, t) {
          let n = _();
          null != n &&
            n.command(
              JSON.stringify({
                command: "Uninstall",
                application_id: e,
                branch_id: t,
              }),
              m
            );
        },
        pause() {
          let e = _();
          null != e && e.command(JSON.stringify({ command: "Pause" }), m);
        },
        resume() {
          let e = _();
          null != e && e.command(JSON.stringify({ command: "Resume" }), m);
        },
        queryDirectory(e, t) {
          let n = _();
          null != n &&
            n.command(
              JSON.stringify({ command: "QueryDirectory", path: e }),
              (e, n) => {
                if ("" !== e) t(JSON.parse(e));
                else if (null != n) {
                  let e = JSON.parse(n);
                  t(null, {
                    hasPermission: e.has_permission,
                    availableKB: parseInt(e.available_kb),
                    totalKB: parseInt(e.total_kb),
                  });
                }
              }
            );
        },
        runLaunchSetup: (e, t) =>
          u.default.isRunning()
            ? Promise.reject(Error("Already running launch setup."))
            : (s.default.dispatch({
                type: "DISPATCH_APPLICATION_LAUNCH_SETUP_START",
              }),
              new Promise((n, i) => {
                let r = _();
                if (null == r) {
                  i(Error("native dispatch instance not found"));
                  return;
                }
                r.command(
                  JSON.stringify({
                    command: "RunLaunchSetup",
                    application_id: e,
                    branch_id: t,
                  }),
                  (e, t, r) => {
                    if ("" !== e) {
                      s.default.dispatch({
                        type: "DISPATCH_APPLICATION_LAUNCH_SETUP_COMPLETE",
                      });
                      let t = S(e);
                      s.default.dispatch({
                        type: "DISPATCH_APPLICATION_ERROR",
                        error: t,
                      }),
                        null != t.code &&
                        t.code === p.DispatchErrorCodes.POST_INSTALL_CANCELLED
                          ? i(t)
                          : n();
                      return;
                    }
                    if ("" !== t) {
                      s.default.dispatch({
                        type: "DISPATCH_APPLICATION_LAUNCH_SETUP_COMPLETE",
                      }),
                        n();
                      return;
                    }
                    if ("" !== r) {
                      let e = JSON.parse(r);
                      s.default.dispatch({
                        type: "DISPATCH_APPLICATION_INSTALL_SCRIPTS_PROGRESS_UPDATE",
                        progress: e.progress,
                        total: e.total,
                        name: e.name,
                      });
                    }
                  }
                );
              })),
        launch: (e, t, n, i) =>
          new Promise((r, s) => {
            let a = _();
            if (null == a) {
              s(Error("native dispatch instance not found"));
              return;
            }
            a.command(
              JSON.stringify({
                command: "Launch",
                application_id: e,
                branch_id: t,
                option_name: n,
                environment: i,
              }),
              function (e, t) {
                if ("" !== e) s(S(e));
                else {
                  let e = JSON.parse(t);
                  r([e.pid]);
                }
              }
            );
          }),
      };
    },
    35468: function (e, t, n) {
      "use strict";
      let i;
      n.r(t),
        n.d(t, {
          default: function () {
            return a;
          },
        }),
        n("424973"),
        (i = n("788235").default);
      let r = [],
        s = !1;
      var a = {
        ...i,
        awaitOnline: () =>
          new Promise(e => {
            if (i.isOnline()) return e();
            {
              if ((r.push(e), s)) return;
              s = !0;
              let t = () => {
                r.forEach(e => e()),
                  (r.length = 0),
                  (s = !1),
                  i.removeOnlineCallback(t);
              };
              i.addOnlineCallback(t);
            }
          }),
      };
    },
    240481: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          shortenAndLocalizeNumber: function () {
            return r;
          },
          parseInteger: function () {
            return s;
          },
          formatPercent: function () {
            return a;
          },
        });
      var i = n("782340");
      function r(e) {
        if (e < 1e6)
          return i.default.Messages.NUMBER_ABBREVIATION_FULL.format({
            value: e,
          });
        let t = (e / 1e6).toFixed(1);
        return i.default.Messages.NUMBER_ABBREVIATION_MILLIONS.format({
          value: t,
        });
      }
      function s(e) {
        let t =
          arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : NaN;
        if (null == e) return t;
        let n = parseInt(e);
        return Number.isNaN(n) ? t : n;
      }
      function a(e, t) {
        let n =
          arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
        return Intl.NumberFormat(e, {
          style: "percent",
          minimumFractionDigits: 0,
          ...n,
        }).format(t);
      }
    },
    991170: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return U;
          },
        }),
        n("222007");
      var i = n("917351"),
        r = n.n(i),
        s = n("316693"),
        a = n("798609"),
        o = n("681937"),
        l = n("509"),
        u = n("38654"),
        c = n("267567"),
        d = n("755624"),
        f = n("233069"),
        E = n("271938"),
        p = n("42203"),
        h = n("26989"),
        _ = n("305961"),
        S = n("697218"),
        m = n("49111");
      let T = s.default.deserialize(0),
        g = s.default.combine(...r.values(m.Permissions)),
        I = s.default.combine(
          m.Permissions.CREATE_INSTANT_INVITE,
          m.Permissions.CHANGE_NICKNAME,
          m.Permissions.VIEW_CHANNEL,
          m.Permissions.SEND_MESSAGES,
          m.Permissions.EMBED_LINKS,
          m.Permissions.ATTACH_FILES,
          m.Permissions.READ_MESSAGE_HISTORY,
          m.Permissions.MENTION_EVERYONE,
          m.Permissions.USE_EXTERNAL_EMOJIS,
          m.Permissions.USE_EXTERNAL_STICKERS,
          m.Permissions.ADD_REACTIONS,
          m.Permissions.CREATE_PUBLIC_THREADS,
          m.Permissions.CREATE_PRIVATE_THREADS,
          m.Permissions.SEND_MESSAGES_IN_THREADS,
          m.Permissions.CONNECT,
          m.Permissions.SPEAK,
          m.Permissions.USE_VAD,
          m.Permissions.STREAM,
          m.Permissions.USE_EMBEDDED_ACTIVITIES,
          m.Permissions.USE_SOUNDBOARD,
          m.Permissions.REQUEST_TO_SPEAK,
          m.Permissions.USE_APPLICATION_COMMANDS,
          m.Permissions.CREATE_GUILD_EXPRESSIONS,
          m.Permissions.CREATE_EVENTS
        ),
        C = s.default.combine(
          m.Permissions.VIEW_CHANNEL,
          m.Permissions.READ_MESSAGE_HISTORY
        ),
        v = s.default.combine(
          m.Permissions.VIEW_CHANNEL,
          m.Permissions.SEND_MESSAGES,
          m.Permissions.CONNECT,
          m.Permissions.SPEAK,
          m.Permissions.STREAM,
          m.Permissions.USE_EMBEDDED_ACTIVITIES,
          m.Permissions.USE_EXTERNAL_EMOJIS,
          m.Permissions.USE_EXTERNAL_SOUNDS,
          m.Permissions.USE_EXTERNAL_STICKERS,
          m.Permissions.USE_SOUNDBOARD,
          m.Permissions.USE_VAD
        ),
        A = s.default.combine(
          m.Permissions.VIEW_CHANNEL,
          m.Permissions.READ_MESSAGE_HISTORY
        ),
        R = s.default.combine(
          m.Permissions.VIEW_CHANNEL,
          m.Permissions.READ_MESSAGE_HISTORY,
          m.Permissions.CHANGE_NICKNAME
        ),
        N = s.default.combine(
          m.Permissions.MANAGE_GUILD,
          m.Permissions.MANAGE_ROLES,
          m.Permissions.ADMINISTRATOR,
          m.Permissions.BAN_MEMBERS,
          m.Permissions.MANAGE_NICKNAMES,
          m.Permissions.CREATE_GUILD_EXPRESSIONS,
          m.Permissions.MANAGE_GUILD_EXPRESSIONS,
          m.Permissions.MANAGE_WEBHOOKS,
          m.Permissions.VIEW_AUDIT_LOG
        );
      function O(e, t, n) {
        let i =
          !(arguments.length > 3) || void 0 === arguments[3] || arguments[3];
        if (
          i &&
          t.mfaLevel === m.MFALevels.ELEVATED &&
          n === E.default.getId()
        ) {
          var r;
          !(null === (r = S.default.getCurrentUser()) || void 0 === r
            ? void 0
            : r.mfaEnabled) && (e = s.default.remove(e, m.ElevatedPermissions));
        }
        return e;
      }
      function D(e, t, n, i) {
        let r = i[e];
        if (
          (null != r &&
            ((n = s.default.remove(n, r.deny)),
            (n = s.default.add(n, r.allow))),
          null != t)
        ) {
          let e = T,
            r = T;
          for (let n = 0; n < t.roles.length; n++) {
            let a = i[t.roles[n]];
            null != a &&
              ((e = s.default.add(e, a.allow)), (r = s.default.add(r, a.deny)));
          }
          (n = s.default.remove(n, r)), (n = s.default.add(n, e));
          let a = i[t.userId];
          null != a &&
            ((n = s.default.remove(n, a.deny)),
            (n = s.default.add(n, a.allow)));
          let u = s.default.has(n, m.Permissions.ADMINISTRATOR),
            c = (0, o.hasAutomodQuarantinedProfile)(t);
          c && !u && (n = s.default.filter(n, R));
          let d = (0, l.isMemberCommunicationDisabled)(t);
          d && !u && (n = s.default.filter(n, A));
        }
        return n;
      }
      function y(e) {
        let {
          userId: t,
          member: n,
          guild: i,
          overwrites: r,
          roles: a,
          checkElevated: o = !0,
          excludeGuildPermissions: l = !1,
          lurkerPermissionsMask: u = C,
        } = e;
        if (l) return D(i.id, n, T, r);
        a = null != a ? { ...i.roles, ...a } : i.roles;
        let d = a[i.id],
          f = null != d ? d.permissions : I;
        if (null != n)
          for (let e = 0; e < n.roles.length; e++) {
            let t = a[n.roles[e]];
            void 0 !== t && (f = s.default.add(f, t.permissions));
          }
        return (
          (f = s.default.has(f, m.Permissions.ADMINISTRATOR)
            ? g
            : D(i.id, n, f, r)),
          (c.default.isLurking(i.id) || (null == n ? void 0 : n.isPending)) &&
            (f = s.default.filter(f, u)),
          h.default.isCurrentUserGuest(i.id) && (f = s.default.filter(f, v)),
          O(f, i, t, o)
        );
      }
      function P(e) {
        var t, n, i;
        let r,
          {
            user: s,
            context: a,
            overwrites: o,
            roles: l,
            checkElevated: c = !0,
            excludeGuildPermissions: E = !1,
          } = e;
        if (null == s) return T;
        let m = "string" == typeof s ? s : s.id,
          I = C;
        if (a instanceof f.ChannelRecordBase) {
          if (a.isScheduledForDeletion()) return T;
          if (f.THREAD_CHANNEL_TYPES.has(a.type)) {
            let e = p.default.getChannel(a.parent_id);
            if (null == e || e.isScheduledForDeletion()) return T;
            let t =
              m ===
                (null === (n = S.default.getCurrentUser()) || void 0 === n
                  ? void 0
                  : n.id) && d.default.hasJoined(a.id);
            return L(
              a,
              P({
                user: s,
                context: e,
                overwrites: o,
                roles: l,
                checkElevated: c,
                excludeGuildPermissions: E,
              }),
              t
            );
          }
          I =
            null !== (i = a.computeLurkerPermissionsAllowList()) && void 0 !== i
              ? i
              : I;
          o =
            null != o
              ? { ...a.permissionOverwrites, ...o }
              : a.permissionOverwrites;
          let e = a.getGuildId();
          r = null != e ? _.default.getGuild(e) : null;
        } else (o = null != o ? o : {}), (r = a);
        if (null == r) return T;
        if (
          !(
            m ===
              (null === (t = S.default.getCurrentUser()) || void 0 === t
                ? void 0
                : t.id) && u.default.isViewingRoles(r.id)
          ) &&
          r.isOwner(m)
        )
          return O(g, r, m, c);
        let v = h.default.getMember(r.id, m);
        return y({
          userId: m,
          member: v,
          guild: r,
          overwrites: o,
          roles: l,
          checkElevated: c,
          excludeGuildPermissions: E,
          lurkerPermissionsMask: I,
        });
      }
      function L(e, t, n) {
        return e.type !== m.ChannelTypes.PRIVATE_THREAD ||
          n ||
          s.default.has(t, m.Permissions.MANAGE_THREADS)
          ? s.default.has(t, m.Permissions.SEND_MESSAGES_IN_THREADS)
            ? e.isLockedThread() &&
              !s.default.has(t, m.Permissions.MANAGE_THREADS)
              ? s.default.remove(t, m.Permissions.SEND_MESSAGES)
              : s.default.combine(t, m.Permissions.SEND_MESSAGES)
            : s.default.remove(t, m.Permissions.SEND_MESSAGES)
          : T;
      }
      function b(e) {
        return {
          id: e,
          type: a.PermissionOverwriteType.ROLE,
          allow: T,
          deny: T,
        };
      }
      function M(e) {
        let {
          permission: t,
          user: n,
          context: i,
          overwrites: r,
          roles: a,
          excludeGuildPermissions: o,
        } = e;
        return s.default.has(
          P({
            user: n,
            context: i,
            overwrites: r,
            roles: a,
            checkElevated: !0,
            excludeGuildPermissions: o,
          }),
          t
        );
      }
      var U = {
        PASSTHROUGH: "PASSTHROUGH",
        ALLOW: "ALLOW",
        DENY: "DENY",
        NONE: T,
        DEFAULT: I,
        ALL: g,
        VIEW_GUILD_SETTINGS: N,
        computePermissionsForRoles: function e(t) {
          let n,
            {
              forceRoles: i,
              context: r,
              overwrites: s,
              roles: a,
              checkElevated: o = !0,
              excludeGuildPermissions: l,
            } = t,
            u = C;
          if (r instanceof f.ChannelRecordBase) {
            var c;
            if (r.isScheduledForDeletion()) return T;
            if (f.THREAD_CHANNEL_TYPES.has(r.type)) {
              let t = p.default.getChannel(r.parent_id);
              return null == t
                ? T
                : L(
                    r,
                    e({
                      forceRoles: i,
                      context: t,
                      overwrites: s,
                      roles: a,
                      checkElevated: o,
                      excludeGuildPermissions: l,
                    }),
                    !1
                  );
            }
            u =
              null !== (c = r.computeLurkerPermissionsAllowList()) &&
              void 0 !== c
                ? c
                : u;
            s =
              null != s
                ? { ...r.permissionOverwrites, ...s }
                : r.permissionOverwrites;
            let t = r.getGuildId();
            n = null != t ? _.default.getGuild(t) : null;
          } else (s = null != s ? s : {}), (n = r);
          if (null == n) return T;
          let d = {
            userId: "",
            nick: "",
            guildId: n.id,
            guildMemberAvatar: null,
            roles: Object.keys(i),
            colorString: null,
            hoistRoleId: null,
            premiumSince: null,
            isPending: !1,
            joinedAt: new Date().toISOString(),
            communicationDisabledUntil: null,
          };
          return y({
            userId: "",
            member: d,
            guild: n,
            overwrites: s,
            roles: a,
            checkElevated: o,
            excludeGuildPermissions: l,
            lurkerPermissionsMask: u,
          });
        },
        computePermissions: P,
        applyThreadPermissions: L,
        getGuildVisualOwnerId: function (e) {
          var t;
          let n = r.some(
            e.roles,
            e =>
              e.hoist &&
              s.default.has(e.permissions, m.Permissions.ADMINISTRATOR)
          );
          return n
            ? void 0
            : null !== (t = e.ownerId) && void 0 !== t
              ? t
              : void 0;
        },
        isRoleHigher: function (e, t, n, i) {
          if (null != t && e.isOwner(t)) return !0;
          if (null == n) return !1;
          let s = r(e.roles)
            .sortBy(e => e.position)
            .map(e => e.id)
            .value();
          return s.indexOf(n.id) > (null != i ? s.indexOf(i.id) : -1);
        },
        getHighestRole: function (e, t) {
          let n = h.default.getMember(e.id, t);
          if (null != n)
            return r(e.roles)
              .filter(e => -1 !== n.roles.indexOf(e.id))
              .sortBy(e => -e.position)
              .first();
        },
        getHighestHoistedRole: function (e, t) {
          return null == t.hoistRoleId ? null : e.getRole(t.hoistRoleId);
        },
        can: M,
        canEveryoneRole(e, t) {
          let n;
          let i = {};
          if (t instanceof f.ChannelRecordBase) {
            if (
              t.type === m.ChannelTypes.PRIVATE_THREAD ||
              (f.THREAD_CHANNEL_TYPES.has(t.type) &&
                null == (t = p.default.getChannel(t.parent_id)))
            )
              return !1;
            i = t.permissionOverwrites;
            let e = t.getGuildId();
            n = null != e ? _.default.getGuild(e) : null;
          } else n = t;
          if (null == n) return !1;
          let r = n.roles[n.id],
            a = r.permissions,
            o = i[n.id];
          return (
            null != o &&
              ((a = s.default.remove(a, o.deny)),
              (a = s.default.add(a, o.allow))),
            s.default.has(a, e)
          );
        },
        canEveryone(e, t) {
          let n;
          let i = {};
          if (t instanceof f.ChannelRecordBase) {
            if (
              t.type === m.ChannelTypes.PRIVATE_THREAD ||
              (f.THREAD_CHANNEL_TYPES.has(t.type) &&
                null == (t = p.default.getChannel(t.parent_id)))
            )
              return !1;
            i = t.permissionOverwrites;
            let e = t.getGuildId();
            n = null != e ? _.default.getGuild(e) : null;
          } else n = t;
          if (null == n) return !1;
          let a = n.roles[n.id];
          return (
            !(
              !s.default.has(a.permissions, e) ||
              r.some(i, t => s.default.has(t.deny, e))
            ) && !0
          );
        },
        canManageACategory: function (e, t, n) {
          return (
            !!M({
              permission: m.Permissions.MANAGE_CHANNELS,
              user: e,
              context: t,
            }) ||
            n.some(t => {
              let { channel: n } = t;
              return (
                "null" !== n.id &&
                M({
                  permission: m.Permissions.MANAGE_CHANNELS,
                  user: e,
                  context: n,
                })
              );
            })
          );
        },
        areChannelsLocked: function (e, t) {
          if (f.THREAD_CHANNEL_TYPES.has(e.type)) return !0;
          let { guild_id: n } = e;
          if (null == t || null == n || n !== t.guild_id) return !1;
          let i = { ...e.permissionOverwrites },
            r = { ...t.permissionOverwrites };
          return (
            null == i[n] && (i[n] = b(n)),
            null == r[n] && (r[n] = b(n)),
            Object.keys(i).length === Object.keys(r).length &&
              !Object.keys(i).some(e => {
                let t = i[e],
                  n = r[e];
                return (
                  !(
                    null != n &&
                    s.default.equals(n.deny, t.deny) &&
                    s.default.equals(n.allow, t.allow)
                  ) && !0
                );
              })
          );
        },
        makeEveryoneOverwrite: b,
      };
    },
    886551: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getUserMaxFileSize: function () {
            return o;
          },
        });
      var i = n("400205"),
        r = n("764364"),
        s = n("49111"),
        a = n("646718");
      function o(e) {
        if (null == e) return s.MAX_ATTACHMENT_SIZE;
        let t = i.default.getPremiumTypeOverride();
        return e.isStaff() && t === a.UNSELECTED_PREMIUM_TYPE_OVERRIDE
          ? s.MAX_STAFF_ATTACHMENT_SIZE
          : null != e.premiumType && (0, r.isPremium)(e)
            ? a.PremiumUserLimits[e.premiumType].fileSize
            : s.MAX_ATTACHMENT_SIZE;
      }
    },
    764364: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isPremiumAtLeast: function () {
            return r;
          },
          isPremium: function () {
            return s;
          },
          isPremiumExactly: function () {
            return a;
          },
        });
      var i = n("646718");
      function r(e, t) {
        return (
          null == t ||
          (null != e && i.PremiumTypeOrder[e] >= i.PremiumTypeOrder[t])
        );
      }
      function s(e, t) {
        return null != e && null != e.premiumType && r(e.premiumType, t);
      }
      function a(e, t) {
        return null != e && e.premiumType === t;
      }
    },
    719923: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isPremiumAtLeast: function () {
            return A.isPremiumAtLeast;
          },
          isPremium: function () {
            return A.isPremium;
          },
          isPremiumExactly: function () {
            return A.isPremiumExactly;
          },
          StreamQuality: function () {
            return r;
          },
          getPremiumPlanItem: function () {
            return w;
          },
          getDefaultPrice: function () {
            return k;
          },
          getPrice: function () {
            return x;
          },
          experimentalGetPrices: function () {
            return F;
          },
          getIntervalString: function () {
            return V;
          },
          getIntervalStringAsNoun: function () {
            return B;
          },
          getPremiumType: function () {
            return H;
          },
          getDisplayName: function () {
            return j;
          },
          getDisplayNameFromSku: function () {
            return Y;
          },
          getTierDisplayName: function () {
            return W;
          },
          getDisplayPremiumType: function () {
            return K;
          },
          getPremiumTypeDisplayName: function () {
            return z;
          },
          getPlanDescriptionFromInvoice: function () {
            return X;
          },
          getExternalPlanDisplayName: function () {
            return Q;
          },
          getPremiumPlanOptions: function () {
            return Z;
          },
          getNumPremiumGuildSubscriptions: function () {
            return ee;
          },
          isPremiumBaseSubscriptionPlan: function () {
            return en;
          },
          isPremiumGuildSubscriptionPlan: function () {
            return ei;
          },
          isPremiumSubscriptionPlan: function () {
            return er;
          },
          getBillingGracePeriodDays: function () {
            return es;
          },
          isPrepaidPaymentSource: function () {
            return ea;
          },
          isPremiumGuildSubscriptionCanceled: function () {
            return eo;
          },
          getPremiumGuildHeaderDescription: function () {
            return el;
          },
          getFormattedPriceForPlan: function () {
            return eu;
          },
          getFormattedRateForPlan: function () {
            return ec;
          },
          isSubscriptionStatusFailedPayment: function () {
            return ef;
          },
          getBillingReviewSubheader: function () {
            return ep;
          },
          getIntervalForInvoice: function () {
            return eh;
          },
          formatTrialOfferIntervalDuration: function () {
            return e_;
          },
          formatTrialCtaIntervalDuration: function () {
            return eS;
          },
          formatIntervalDuration: function () {
            return em;
          },
          getExternalSubscriptionMethodUrl: function () {
            return eT;
          },
          hasPremiumSubscriptionToDisplay: function () {
            return eg;
          },
          getItemsFromNewAdditionalPlans: function () {
            return eI;
          },
          getItemsWithoutPremiumPlanItem: function () {
            return eC;
          },
          getItemsWithUpsertedPlanIdForGroup: function () {
            return ev;
          },
          getItemsWithUpsertedPremiumPlanId: function () {
            return eA;
          },
          getItemsWithUpsertedPremiumGuildPlan: function () {
            return eR;
          },
          coerceExistingItemsToNewItemInterval: function () {
            return eN;
          },
          getMaxFileSizeForPremiumType: function () {
            return eO;
          },
          getPremiumSkuIdForSubscription: function () {
            return ey;
          },
          default: function () {
            return eP;
          },
        }),
        n("70102"),
        n("222007"),
        n("843762"),
        n("808653"),
        n("424973");
      var i,
        r,
        s,
        a,
        o = n("627445"),
        l = n.n(o),
        u = n("866227"),
        c = n.n(u);
      n("446674");
      var d = n("605250"),
        f = n("432155"),
        E = n("669073"),
        p = n("797647"),
        h = n("697218"),
        _ = n("160299"),
        S = n("357957"),
        m = n("10514"),
        T = n("521012"),
        g = n("745279"),
        I = n("993105"),
        C = n("773336"),
        v = n("886551"),
        A = n("764364"),
        R = n("719923"),
        N = n("153160"),
        O = n("49111"),
        D = n("504593"),
        y = n("646718"),
        P = n("843455"),
        L = n("782340");
      let b = {
          PAYMENT_SOURCE_MANAGEMENT: "https://support.apple.com/HT201266",
          BILLING_HISTORY: "https://support.apple.com/HT201266",
          SUBSCRIPTION_MANAGEMENT: "https://support.apple.com/HT202039",
        },
        M = {
          SUBSCRIPTION_MANAGEMENT:
            "https://play.google.com/store/account/subscriptions",
          PAYMENT_SOURCE_MANAGEMENT:
            "https://play.google.com/store/paymentmethods",
          BILLING_HISTORY: "https://play.google.com/store/account/orderhistory",
        },
        U = new d.default("PremiumUtils.tsx"),
        G = {
          [y.SubscriptionPlans.NONE_MONTH]: [
            y.SubscriptionPlans.NONE_YEAR,
            y.SubscriptionPlans.PREMIUM_YEAR_TIER_2,
            y.SubscriptionPlans.PREMIUM_MONTH_TIER_2,
            y.SubscriptionPlans.PREMIUM_YEAR_TIER_1,
            y.SubscriptionPlans.PREMIUM_MONTH_TIER_1,
          ],
          [y.SubscriptionPlans.NONE_YEAR]: [
            y.SubscriptionPlans.PREMIUM_YEAR_TIER_2,
            y.SubscriptionPlans.PREMIUM_MONTH_TIER_2,
            y.SubscriptionPlans.PREMIUM_YEAR_TIER_1,
            y.SubscriptionPlans.PREMIUM_MONTH_TIER_1,
          ],
          [y.SubscriptionPlans.PREMIUM_MONTH_TIER_0]: [
            y.SubscriptionPlans.PREMIUM_YEAR_TIER_2,
            y.SubscriptionPlans.PREMIUM_MONTH_TIER_2,
            y.SubscriptionPlans.PREMIUM_YEAR_TIER_1,
            y.SubscriptionPlans.PREMIUM_MONTH_TIER_1,
            y.SubscriptionPlans.PREMIUM_YEAR_TIER_0,
          ],
          [y.SubscriptionPlans.PREMIUM_YEAR_TIER_0]: [
            y.SubscriptionPlans.PREMIUM_YEAR_TIER_2,
            y.SubscriptionPlans.PREMIUM_MONTH_TIER_2,
            y.SubscriptionPlans.PREMIUM_YEAR_TIER_1,
            y.SubscriptionPlans.PREMIUM_MONTH_TIER_1,
          ],
          [y.SubscriptionPlans.PREMIUM_MONTH_TIER_1]: [
            y.SubscriptionPlans.PREMIUM_YEAR_TIER_2,
            y.SubscriptionPlans.PREMIUM_MONTH_TIER_2,
            y.SubscriptionPlans.PREMIUM_YEAR_TIER_1,
          ],
          [y.SubscriptionPlans.PREMIUM_YEAR_TIER_1]: [
            y.SubscriptionPlans.PREMIUM_YEAR_TIER_2,
          ],
          [y.SubscriptionPlans.PREMIUM_MONTH_TIER_2]: [
            y.SubscriptionPlans.PREMIUM_YEAR_TIER_2,
          ],
          [y.SubscriptionPlans.PREMIUM_YEAR_TIER_2]: [],
          ALL: [
            y.SubscriptionPlans.NONE_MONTH,
            y.SubscriptionPlans.NONE_YEAR,
            y.SubscriptionPlans.PREMIUM_YEAR_TIER_2,
            y.SubscriptionPlans.PREMIUM_MONTH_TIER_2,
            y.SubscriptionPlans.PREMIUM_YEAR_TIER_1,
            y.SubscriptionPlans.PREMIUM_MONTH_TIER_1,
            y.SubscriptionPlans.PREMIUM_YEAR_TIER_0,
            y.SubscriptionPlans.PREMIUM_MONTH_TIER_0,
          ],
        };
      function w(e) {
        return e.items.find(e => y.PREMIUM_PLANS.has(e.planId));
      }
      function k(e) {
        var t;
        let n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
          i = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
          r =
            null !== (t = S.default.defaultPaymentSourceId) && void 0 !== t
              ? t
              : void 0,
          s = T.default.getPremiumTypeSubscription();
        return (
          null != s && null != s.paymentSourceId && (r = s.paymentSourceId),
          x(e, n, i, { paymentSourceId: r })
        );
      }
      function x(e) {
        let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
          n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
          i =
            arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : {},
          { paymentSourceId: r, currency: s } = i,
          a = m.default.get(e);
        if (null != a) {
          let i = O.PriceSetAssignmentPurchaseTypes.DEFAULT;
          n
            ? (i = O.PriceSetAssignmentPurchaseTypes.GIFT)
            : t && (i = O.PriceSetAssignmentPurchaseTypes.PREMIUM_TIER_1);
          let a = (function (e) {
            let {
                paymentSourceId: t,
                purchaseType: n,
                currency: i,
              } = arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : { purchaseType: O.PriceSetAssignmentPurchaseTypes.DEFAULT },
              r = F(e, { paymentSourceId: t, purchaseType: n });
            return (0 === r.length &&
              U.warn(
                "No prices found for planId: "
                  .concat(e, ", paymentSourceId: ")
                  .concat(t, ", purchaseType: ")
                  .concat(n)
              ),
            null != i)
              ? r.find(e => e.currency === i)
              : r[0];
          })(e, { paymentSourceId: r, purchaseType: i, currency: s });
          if (null == a) {
            let t = Error("Couldn't find price");
            throw (
              ((0, g.captureBillingException)(t, {
                extra: { paymentSourceId: r },
                tags: {
                  purchaseType: i.toString(),
                  planId: e,
                  currency: null != s ? s : "unknown",
                },
              }),
              t)
            );
          }
          return a;
        }
        let o = Error("Plan not found");
        throw (
          ((0, g.captureBillingException)(o, {
            tags: { planId: e, currency: null != s ? s : "unknown" },
            extra: { ...i, isGift: n },
          }),
          o)
        );
      }
      ((s = i || (i = {})).BUNDLE = "bundle"),
        (s.TIER_0 = "tier_0"),
        (s.TIER_1 = "tier_1"),
        (s.TIER_2 = "tier_2"),
        (s.PREMIUM_GUILD = "premium_guild"),
        ((a = r || (r = {})).MID = "mid"),
        (a.HIGH = "high");
      function F(e) {
        let { paymentSourceId: t, purchaseType: n } =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : { purchaseType: O.PriceSetAssignmentPurchaseTypes.DEFAULT },
          i = (function (e, t) {
            let n = m.default.get(e);
            if (null == n) {
              let n = Error("Plan not found");
              throw (
                ((0, g.captureBillingException)(n, {
                  tags: { planId: e, purchaseType: t.toString() },
                }),
                n)
              );
            }
            if (null == n.prices)
              throw Error(
                "No prices returned for ".concat(
                  e,
                  ", is your user in the experiment?"
                )
              );
            let i = n.prices[t];
            if (null == i)
              throw (
                (U.info(
                  "Purchase types: ".concat(
                    JSON.stringify(Object.keys(n.prices))
                  )
                ),
                Error(
                  "No prices returned for purchase type "
                    .concat(t, " for plan ")
                    .concat(e)
                ))
              );
            return i;
          })(e, n);
        if (null != t) {
          let r = i.paymentSourcePrices[t];
          if (null == r) {
            U.info(
              "Payment sources IDs: ".concat(
                JSON.stringify(Object.keys(i.paymentSourcePrices))
              )
            ),
              U.info("prices: ".concat(r));
            let s = Error(
              "Missing prices for payment source on subscription plan"
            );
            (0, g.captureBillingException)(s, {
              extra: { paymentSourceId: t },
              tags: { purchaseType: n.toString(), planId: e },
            });
          } else if (0 !== r.length) return r;
        }
        if (null == i.countryPrices.prices) {
          U.info("countryPrices: ".concat(JSON.stringify(i.countryPrices)));
          let t = Error("Missing prices for country");
          throw (
            ((0, g.captureBillingException)(t, {
              tags: { countryCode: i.countryPrices.countryCode, planId: e },
            }),
            t)
          );
        }
        return i.countryPrices.prices;
      }
      function V(e, t, n) {
        let i =
            arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1,
          r = arguments.length > 4 && void 0 !== arguments[4] && arguments[4],
          s =
            arguments.length > 5 && void 0 !== arguments[5]
              ? arguments[5]
              : y.PremiumTypes.TIER_2;
        if (t || n)
          switch (e) {
            case y.SubscriptionIntervalTypes.MONTH:
              let a = (
                s === y.PremiumTypes.TIER_0
                  ? L.default.Messages.BASIC_GIFT_DURATION
                  : L.default.Messages.GIFT_DURATION
              ).format({
                timeInterval:
                  L.default.Messages.PREMIUM_SUBSCRIPTION_INTERVAL_MONTH,
              });
              return r ? a : L.default.Messages.PAYMENT_MODAL_ONE_MONTH;
            case y.SubscriptionIntervalTypes.YEAR:
              let o = (
                s === y.PremiumTypes.TIER_0
                  ? L.default.Messages.BASIC_GIFT_DURATION
                  : L.default.Messages.GIFT_DURATION
              ).format({
                timeInterval:
                  L.default.Messages.PREMIUM_SUBSCRIPTION_INTERVAL_YEAR,
              });
              return r ? o : L.default.Messages.PAYMENT_MODAL_ONE_YEAR;
            default:
              throw Error("Unexpected interval");
          }
        switch (e) {
          case y.SubscriptionIntervalTypes.MONTH:
            if (1 !== i)
              return L.default.Messages.MULTI_MONTHS.format({
                intervalCount: i,
              });
            return L.default.Messages.MONTHLY;
          case y.SubscriptionIntervalTypes.YEAR:
            return L.default.Messages.YEARLY;
          default:
            throw Error("Unexpected interval");
        }
      }
      function B(e) {
        switch (e) {
          case y.SubscriptionIntervalTypes.MONTH:
            return L.default.Messages.PREMIUM_SUBSCRIPTION_INTERVAL_MONTH;
          case y.SubscriptionIntervalTypes.YEAR:
            return L.default.Messages.PREMIUM_SUBSCRIPTION_INTERVAL_YEAR;
          default:
            throw Error("Unexpected interval");
        }
      }
      function H(e) {
        let t = y.SubscriptionPlanInfo[e];
        if (null != t) return t.premiumType;
        let n = Error("Unsupported plan");
        throw ((0, g.captureBillingException)(n, { tags: { planId: e } }), n);
      }
      function j(e) {
        let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
          n = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
          i = arguments.length > 3 ? arguments[3] : void 0;
        switch (e) {
          case y.SubscriptionPlans.PREMIUM_MONTH_TIER_0:
            return t
              ? L.default.Messages.PREMIUM_PLAN_MONTH_TIER_0_TRIAL_DURATION.format(
                  { duration: i }
                )
              : n
                ? L.default.Messages.PREMIUM_PLAN_ONE_MONTH_TIER_0
                : L.default.Messages.PREMIUM_PLAN_MONTH_TIER_0;
          case y.SubscriptionPlans.PREMIUM_YEAR_TIER_0:
            return t
              ? L.default.Messages.PREMIUM_PLAN_YEAR_TIER_0_TRIAL_DURATION.format(
                  { duration: i }
                )
              : n
                ? L.default.Messages.PREMIUM_PLAN_ONE_YEAR_TIER_0
                : L.default.Messages.PREMIUM_PLAN_YEAR_TIER_0;
          case y.SubscriptionPlans.PREMIUM_MONTH_TIER_1:
            return n
              ? L.default.Messages.PREMIUM_PLAN_ONE_MONTH_TIER_1
              : L.default.Messages.PREMIUM_PLAN_MONTH_TIER_1;
          case y.SubscriptionPlans.PREMIUM_YEAR_TIER_1:
            return n
              ? L.default.Messages.PREMIUM_PLAN_ONE_YEAR_TIER_1
              : L.default.Messages.PREMIUM_PLAN_YEAR_TIER_1;
          case y.SubscriptionPlans.PREMIUM_MONTH_TIER_2:
            return t
              ? L.default.Messages.PREMIUM_PLAN_MONTH_TIER_2_TRIAL_DURATION.format(
                  { duration: i }
                )
              : n
                ? L.default.Messages.PREMIUM_PLAN_ONE_MONTH_TIER_2
                : L.default.Messages.PREMIUM_PLAN_MONTH_TIER_2;
          case y.SubscriptionPlans.PREMIUM_YEAR_TIER_2:
            return t
              ? L.default.Messages.PREMIUM_PLAN_YEAR_TIER_2_TRIAL_DURATION.format(
                  { duration: i }
                )
              : n
                ? L.default.Messages.PREMIUM_PLAN_ONE_YEAR_TIER_2
                : L.default.Messages.PREMIUM_PLAN_YEAR_TIER_2;
          case y.SubscriptionPlans.PREMIUM_3_MONTH_TIER_2:
            return L.default.Messages.PREMIUM_PLAN_3_MONTH_TIER_2;
          case y.SubscriptionPlans.PREMIUM_6_MONTH_TIER_2:
            return L.default.Messages.PREMIUM_PLAN_6_MONTH_TIER_2;
          case y.SubscriptionPlans.PREMIUM_MONTH_GUILD:
            return n
              ? L.default.Messages.PREMIUM_GUILD_PLAN_SINGLE_MONTH
              : L.default.Messages.PREMIUM_GUILD_PLAN_MONTH;
          case y.SubscriptionPlans.PREMIUM_YEAR_GUILD:
            return n
              ? L.default.Messages.PREMIUM_GUILD_PLAN_SINGLE_YEAR
              : L.default.Messages.PREMIUM_GUILD_PLAN_YEAR;
          case y.SubscriptionPlans.PREMIUM_3_MONTH_GUILD:
            return L.default.Messages.PREMIUM_GUILD_PLAN_3_MONTH;
          case y.SubscriptionPlans.PREMIUM_6_MONTH_GUILD:
            return L.default.Messages.PREMIUM_GUILD_PLAN_6_MONTH;
          case y.SubscriptionPlans.PREMIUM_MONTH_LEGACY:
            return L.default.Messages.PREMIUM_PLAN_MONTH;
          case y.SubscriptionPlans.PREMIUM_YEAR_LEGACY:
            return L.default.Messages.PREMIUM_PLAN_YEAR;
        }
        let r = Error("Unsupported plan");
        throw ((0, g.captureBillingException)(r, { tags: { planId: e } }), r);
      }
      function Y(e) {
        switch (e) {
          case y.PremiumSubscriptionSKUs.TIER_0:
            return L.default.Messages.PREMIUM_TIER_0;
          case y.PremiumSubscriptionSKUs.TIER_1:
            return L.default.Messages.PREMIUM_TIER_1;
          case y.PremiumSubscriptionSKUs.TIER_2:
            return L.default.Messages.PREMIUM_TIER_2;
        }
        let t = Error("Unsupported sku");
        throw ((0, g.captureBillingException)(t, { tags: { skuId: e } }), t);
      }
      function W(e) {
        switch (e) {
          case y.SubscriptionPlans.PREMIUM_MONTH_TIER_0:
          case y.SubscriptionPlans.PREMIUM_YEAR_TIER_0:
            return L.default.Messages.PREMIUM_TIER_0;
          case y.SubscriptionPlans.PREMIUM_MONTH_TIER_1:
          case y.SubscriptionPlans.PREMIUM_YEAR_TIER_1:
            return L.default.Messages.PREMIUM_TIER_1;
          case y.SubscriptionPlans.PREMIUM_MONTH_TIER_2:
          case y.SubscriptionPlans.PREMIUM_3_MONTH_TIER_2:
          case y.SubscriptionPlans.PREMIUM_6_MONTH_TIER_2:
          case y.SubscriptionPlans.PREMIUM_YEAR_TIER_2:
            return L.default.Messages.PREMIUM_TIER_2;
        }
        let t = Error("Unsupported plan");
        throw ((0, g.captureBillingException)(t, { tags: { planId: e } }), t);
      }
      function K(e) {
        let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        switch (e) {
          case y.SubscriptionPlans.PREMIUM_MONTH_TIER_0:
          case y.SubscriptionPlans.PREMIUM_YEAR_TIER_0:
            return t ? "Basic" : "Nitro Basic";
          case y.SubscriptionPlans.PREMIUM_MONTH_TIER_1:
          case y.SubscriptionPlans.PREMIUM_YEAR_TIER_1:
            return t ? "Classic" : "Nitro Classic";
          case y.SubscriptionPlans.PREMIUM_MONTH_TIER_2:
          case y.SubscriptionPlans.PREMIUM_YEAR_TIER_2:
          case y.SubscriptionPlans.PREMIUM_3_MONTH_TIER_2:
          case y.SubscriptionPlans.PREMIUM_6_MONTH_TIER_2:
            return "Nitro";
        }
        let n = Error("Unsupported plan");
        throw ((0, g.captureBillingException)(n, { tags: { planId: e } }), n);
      }
      function z(e) {
        let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        switch (e) {
          case y.PremiumTypes.TIER_0:
            return t ? "Basic" : L.default.Messages.PREMIUM_TIER_0;
          case y.PremiumTypes.TIER_1:
            return t ? "Classic" : L.default.Messages.PREMIUM_TIER_1;
          case y.PremiumTypes.TIER_2:
            return L.default.Messages.PREMIUM_TIER_2;
        }
      }
      function q(e) {
        var t, n;
        let {
            subscription: i,
            planId: r,
            price: s,
            includePremiumGuilds: a,
            hasDiscountApplied: o,
          } = e,
          l = R.default.formatPriceString(
            R.default.getDefaultPrice(y.SubscriptionPlans.PREMIUM_MONTH_TIER_2),
            y.SubscriptionIntervalTypes.MONTH
          ),
          u =
            ed(i) ||
            (null == i.paymentSourceId &&
              !i.isPurchasedExternally &&
              !(null === (t = h.default.getCurrentUser()) || void 0 === t
                ? void 0
                : t.hasFreePremium())),
          c = null != s,
          d =
            i.status === O.SubscriptionStatusTypes.UNPAID &&
            null !== i.latestInvoice &&
            (null === (n = i.latestInvoice) || void 0 === n
              ? void 0
              : n.status) === O.InvoiceStatusTypes.OPEN,
          f = u
            ? O.SubscriptionStatusTypes.CANCELED
            : d
              ? O.SubscriptionStatusTypes.UNPAID
              : i.status,
          E =
            y.NUM_FREE_GUILD_BOOSTS_WITH_PREMIUM +
            (a ? ee(i.additionalPlans) : 0);
        switch (r) {
          case y.SubscriptionPlans.PREMIUM_MONTH_TIER_0:
          case y.SubscriptionPlans.PREMIUM_YEAR_TIER_0:
            switch (f) {
              case O.SubscriptionStatusTypes.CANCELED:
                return c
                  ? L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_0_PENDING_CANCELATION.format(
                      { price: s }
                    )
                  : L.default.Messages
                      .PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_0_PENDING_CANCELATION_NO_PRICE;
              case O.SubscriptionStatusTypes.ACCOUNT_HOLD:
                return c
                  ? L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_0_ACCOUNT_HOLD.format(
                      { price: s }
                    )
                  : L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_0_ACCOUNT_HOLD_NO_PRICE.format();
              case O.SubscriptionStatusTypes.UNPAID:
                return L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_0_PENDING_PAYMENT.format();
              default:
                return c
                  ? L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_0.format(
                      { price: s }
                    )
                  : L.default.Messages
                      .PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_0_NO_PRICE;
            }
          case y.SubscriptionPlans.PREMIUM_MONTH_TIER_1:
          case y.SubscriptionPlans.PREMIUM_YEAR_TIER_1:
            switch (f) {
              case O.SubscriptionStatusTypes.CANCELED:
                return c
                  ? L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_1_PENDING_CANCELATION.format(
                      { price: s }
                    )
                  : L.default.Messages
                      .PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_1_PENDING_CANCELATION_NO_PRICE;
              case O.SubscriptionStatusTypes.ACCOUNT_HOLD:
                return c
                  ? L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_1_ACCOUNT_HOLD.format(
                      { price: s }
                    )
                  : L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_1_ACCOUNT_HOLD_NO_PRICE.format();
              case O.SubscriptionStatusTypes.UNPAID:
                return L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_1_PENDING_PAYMENT.format();
              default:
                return c
                  ? L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_1.format(
                      { price: s }
                    )
                  : L.default.Messages
                      .PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_1_NO_PRICE;
            }
          case y.SubscriptionPlans.PREMIUM_MONTH_TIER_2:
          case y.SubscriptionPlans.PREMIUM_YEAR_TIER_2:
          case y.SubscriptionPlans.PREMIUM_3_MONTH_TIER_2:
          case y.SubscriptionPlans.PREMIUM_6_MONTH_TIER_2:
            switch (f) {
              case O.SubscriptionStatusTypes.CANCELED:
                return c
                  ? L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_2_PENDING_CANCELATION.format(
                      { price: s, num: E }
                    )
                  : L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_2_PENDING_CANCELATION_NO_PRICE.format(
                      { num: E }
                    );
              case O.SubscriptionStatusTypes.ACCOUNT_HOLD:
                return c
                  ? L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_2_ACCOUNT_HOLD.format(
                      { price: s, num: E }
                    )
                  : L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_2_ACCOUNT_HOLD_NO_PRICE.format(
                      { num: E }
                    );
              case O.SubscriptionStatusTypes.UNPAID:
                return L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_2_PENDING_PAYMENT.format(
                  { num: E }
                );
              default:
                return o
                  ? L.default.Messages.PREMIUM_TIER_SUBSCRIPTION_DESCRIPTION_AFTER_REDEMPTION.format(
                      { discountedPrice: s, regularPrice: l }
                    )
                  : c
                    ? L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_2.format(
                        { price: s, num: E }
                      )
                    : L.default.Messages.PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_2_NO_PRICE.format(
                        { num: E }
                      );
            }
          default:
            throw Error("Invalid planId ".concat(r));
        }
      }
      function X(e) {
        let {
            renewalInvoicePreview: t,
            subscription: n,
            planId: i,
            includePremiumGuilds: r = !1,
            hasDiscountApplied: s = !1,
          } = e,
          a = m.default.get(i);
        return (
          l(null != a, "Missing plan"),
          q({
            subscription: n,
            planId: a.id,
            price: (function (e, t, n) {
              let i = e.invoiceItems.find(e => {
                  let { subscriptionPlanId: t } = e;
                  return t === n.id;
                }),
                r =
                  null == i
                    ? x(n.id, !1, !1, {
                        paymentSourceId: t.paymentSourceId,
                        currency: t.currency,
                      }).amount
                    : i.amount;
              return (0, N.formatRate)(
                (0, N.formatPrice)(r, e.currency),
                n.interval,
                n.intervalCount
              );
            })(t, n, a),
            includePremiumGuilds: r,
            hasDiscountApplied: s,
          })
        );
      }
      function Q(e) {
        let { planId: t, additionalPlans: n } = e,
          i = (0, p.isNoneSubscription)(t) ? null : j(t),
          r =
            null == n
              ? void 0
              : n.find(e => {
                  let { planId: t } = e;
                  return y.PREMIUM_GUILD_SUBSCRIPTION_PLANS.has(t);
                }),
          s =
            (null == r ? void 0 : r.planId) ===
            y.SubscriptionPlans.PREMIUM_MONTH_GUILD
              ? L.default.Messages
                  .PREMIUM_GUILD_NUM_MONTH_GUILD_SUBSCRIPTIONS_UNFORMATTED
              : (null == r ? void 0 : r.planId) ===
                  y.SubscriptionPlans.PREMIUM_YEAR_GUILD
                ? L.default.Messages
                    .PREMIUM_GUILD_NUM_MONTH_GUILD_SUBSCRIPTIONS_UNFORMATTED
                : null,
          a =
            null == s
              ? void 0
              : s.format({ num: null == r ? void 0 : r.quantity });
        if (null != i && null != a)
          return L.default.Messages.PREMIUM_WITH_PREMIUM_GUILD_EXTERNAL_PLAN_DESCRIPTION.format(
            { premiumDescription: i, premiumGuildDescription: a }
          );
        if (null != i) return i;
        if (null != a) return a;
        else
          throw Error(
            "Subscription without premium or premium guild subscription"
          );
      }
      function Z(e) {
        let {
          skuId: t,
          isPremium: n,
          multiMonthPlans: i,
          currentSubscription: r,
          isGift: s,
          isEligibleForTrial: a,
          defaultPlanId: o,
          defaultToMonthlyPlan: l,
        } = e;
        if (null == t || !n) return [];
        let u =
          void 0 !== o && t === y.SubscriptionPlanInfo[o].skuId ? o : void 0;
        void 0 === u && l && !s && (u = y.PREMIUM_SKU_TO_MONTHLY_PLAN[t]),
          a &&
            !s &&
            (void 0 === o || (l && y.PREMIUM_MONTHLY_PLANS.has(o))) &&
            E.TrialRedemptionDefaultPlanExperiment.trackExposure({
              location: "de805e_1",
            });
        let c = [];
        switch (t) {
          case y.PremiumSubscriptionSKUs.TIER_0:
            c = [
              y.SubscriptionPlans.PREMIUM_YEAR_TIER_0,
              y.SubscriptionPlans.PREMIUM_MONTH_TIER_0,
            ];
            break;
          case y.PremiumSubscriptionSKUs.TIER_1:
            c = [y.SubscriptionPlans.PREMIUM_MONTH_TIER_1];
            break;
          case y.PremiumSubscriptionSKUs.TIER_2:
            let d = i;
            if (null != r) {
              let e = r.items[0].planId;
              if (y.MULTI_MONTH_PLANS.has(e)) {
                let t = y.SubscriptionPlanInfo[e];
                d = [...(0, y.MULTI_MONTH_PLANS)].filter(e => {
                  let n = y.SubscriptionPlanInfo[e];
                  return (
                    n.interval === t.interval &&
                    n.intervalCount === t.intervalCount &&
                    n.skuId === y.PremiumSubscriptionSKUs.TIER_2
                  );
                });
              } else d = [];
            }
            c = [
              y.SubscriptionPlans.PREMIUM_YEAR_TIER_2,
              ...d,
              y.SubscriptionPlans.PREMIUM_MONTH_TIER_2,
            ];
            break;
          default:
            throw Error("Unexpected SKU: ".concat(t));
        }
        if (void 0 !== u) {
          let e = c.indexOf(u);
          c.splice(e, 1), c.unshift(u);
        }
        return c;
      }
      function J(e) {
        let t = y.SubscriptionPlanInfo[e];
        if (null == t) {
          let t = Error("Unsupported plan");
          throw ((0, g.captureBillingException)(t, { tags: { planId: e } }), t);
        }
        return t.skuId;
      }
      function $(e) {
        var t;
        return null == e ? G.ALL : null !== (t = G[e]) && void 0 !== t ? t : [];
      }
      function ee(e) {
        let t = m.default.getPlanIdsForSkus([y.PremiumSubscriptionSKUs.GUILD]);
        l(null != t, "Missing guildSubscriptionPlanIds");
        let n = e.find(e => {
          let { planId: n } = e;
          return t.includes(n);
        });
        return null != n ? n.quantity : 0;
      }
      let et = new Set([
        y.SubscriptionPlans.NONE_MONTH,
        y.SubscriptionPlans.NONE_3_MONTH,
        y.SubscriptionPlans.NONE_6_MONTH,
        y.SubscriptionPlans.NONE_YEAR,
        y.SubscriptionPlans.PREMIUM_MONTH_TIER_0,
        y.SubscriptionPlans.PREMIUM_MONTH_TIER_1,
        y.SubscriptionPlans.PREMIUM_MONTH_TIER_2,
        y.SubscriptionPlans.PREMIUM_YEAR_TIER_0,
        y.SubscriptionPlans.PREMIUM_YEAR_TIER_1,
        y.SubscriptionPlans.PREMIUM_YEAR_TIER_2,
        y.SubscriptionPlans.PREMIUM_3_MONTH_TIER_2,
        y.SubscriptionPlans.PREMIUM_6_MONTH_TIER_2,
      ]);
      function en(e) {
        return et.has(e);
      }
      function ei(e) {
        return y.PREMIUM_GUILD_SUBSCRIPTION_PLANS.has(e);
      }
      function er(e) {
        return en(e) || ei(e);
      }
      function es(e) {
        var t, n, i;
        if (
          e.isPurchasedViaApple &&
          (null === (t = e.metadata) || void 0 === t
            ? void 0
            : t.apple_grace_period_expires_date) != null
        ) {
          let t = c(e.metadata.apple_grace_period_expires_date),
            n = c(e.currentPeriodStart);
          return c.duration(t.diff(n)).days();
        }
        if (
          e.isPurchasedViaGoogle &&
          (null === (n = e.metadata) || void 0 === n
            ? void 0
            : n.google_grace_period_expires_date) != null &&
          (null === (i = e.metadata) || void 0 === i
            ? void 0
            : i.google_original_expires_date) != null
        ) {
          let t = c(e.metadata.google_grace_period_expires_date),
            n = c(e.metadata.google_original_expires_date);
          return c.duration(t.diff(n)).days();
        }
        if (e.isPurchasedExternally || null == e.paymentSourceId)
          return y.DEFAULT_MAX_GRACE_PERIOD_DAYS;
        return y.PAID_SUBSCRIPTION_MAX_GRACE_PERIOD_DAYS;
      }
      function ea(e) {
        if (null == e) return !1;
        let t = S.default.getPaymentSource(e);
        return null != t && P.PREPAID_PAYMENT_SOURCES.has(t.type);
      }
      function eo(e) {
        return e.isPurchasedExternally
          ? e.status === O.SubscriptionStatusTypes.CANCELED
          : (function (e) {
              let { renewalMutations: t, additionalPlans: n, status: i } = e,
                r = ee(n),
                s = null != t ? ee(t.additionalPlans) : null;
              return 0 === s && 0 !== r
                ? O.SubscriptionStatusTypes.CANCELED
                : i;
            })(e) === O.SubscriptionStatusTypes.CANCELED;
      }
      function el(e) {
        let {
            subscription: t,
            user: n,
            price: i,
            renewalInvoicePreview: r,
          } = e,
          { planId: s, additionalPlans: a } = t,
          o = m.default.get(s);
        l(null != o, "Missing plan");
        let u = ee(a),
          c = eE(t.planId, t.paymentSourceId, t.currency, n),
          d = c.amount * u;
        if (null != r) {
          let e = r.invoiceItems.find(e =>
            y.PREMIUM_GUILD_SUBSCRIPTION_PLANS.has(e.subscriptionPlanId)
          );
          null != e && (d = e.amount);
        }
        i = null != i ? i : (0, N.formatPrice)(d, t.currency);
        let f = eo(t);
        return f
          ? t.isPurchasedViaGoogle
            ? L.default.Messages.PREMIUM_GUILD_SUBSCRIPTIONS_RENEWAL_INFO_PENDING_CANCELATION_NO_PRICE.format(
                { quantity: u }
              )
            : L.default.Messages.PREMIUM_GUILD_SUBSCRIPTIONS_RENEWAL_INFO_PENDING_CANCELATION.format(
                {
                  quantity: u,
                  rate: (0, N.formatRate)(i, o.interval, o.intervalCount),
                }
              )
          : t.status === O.SubscriptionStatusTypes.ACCOUNT_HOLD
            ? t.isPurchasedViaGoogle
              ? L.default.Messages.PREMIUM_GUILD_SUBSCRIPTIONS_RENEWAL_INFO_ACCOUNT_HOLD_NO_PRICE.format(
                  { quantity: u, boostQuantity: u }
                )
              : L.default.Messages.PREMIUM_GUILD_SUBSCRIPTIONS_RENEWAL_INFO_ACCOUNT_HOLD.format(
                  {
                    quantity: u,
                    boostQuantity: u,
                    rate: (0, N.formatRate)(i, o.interval, o.intervalCount),
                  }
                )
            : t.isPurchasedViaGoogle
              ? L.default.Messages.PREMIUM_GUILD_SUBSCRIPTIONS_RENEWAL_INFO_NO_PRICE.format(
                  { quantity: u }
                )
              : L.default.Messages.PREMIUM_GUILD_SUBSCRIPTIONS_RENEWAL_INFO.format(
                  {
                    quantity: u,
                    rate: (0, N.formatRate)(i, o.interval, o.intervalCount),
                  }
                );
      }
      function eu(e, t, n) {
        let i = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
          r = null != t ? x(e.id, !1, i, t) : k(e.id, !1, i),
          s = (0, N.formatPrice)(r.amount, r.currency);
        return (
          e.currency !== P.CurrencyCodes.USD && !0 === n && (s = s.concat("*")),
          s
        );
      }
      function ec(e, t, n) {
        let i = eu(e, t, n);
        return (0, N.formatRate)(i, e.interval, e.intervalCount);
      }
      function ed(e) {
        let { status: t, renewalMutations: n } = e;
        return (
          t === O.SubscriptionStatusTypes.CANCELED ||
          (null != n &&
            (0, p.isNoneSubscription)(n.planId) &&
            !e.isPurchasedExternally)
        );
      }
      function ef(e) {
        return (
          e === O.SubscriptionStatusTypes.PAST_DUE ||
          e === O.SubscriptionStatusTypes.ACCOUNT_HOLD ||
          e === O.SubscriptionStatusTypes.BILLING_RETRY
        );
      }
      function eE(e, t, n, i) {
        let r =
            null != t
              ? { paymentSourceId: t, currency: n }
              : { country: _.default.ipCountryCodeWithFallback, currency: n },
          s = m.default.get(e);
        if (null == s) {
          let t = Error("Unsupported plan");
          throw ((0, g.captureBillingException)(t, { tags: { planId: e } }), t);
        }
        let a = m.default.getForSkuAndInterval(
          y.PremiumSubscriptionSKUs.GUILD,
          s.interval,
          s.intervalCount
        );
        if (null == a) {
          let t = Error("Unsupported plan");
          throw ((0, g.captureBillingException)(t, { tags: { planId: e } }), t);
        }
        return x(a.id, (0, A.isPremium)(i), !1, r);
      }
      function ep(e, t, n) {
        let i = t.id;
        if (null != e)
          switch (i) {
            case y.SubscriptionPlans.PREMIUM_MONTH_TIER_0:
              return L.default.Messages
                .PREMIUM_SWITCH_REVIEW_HEADER_PREMIUM_MONTH_TIER_0;
            case y.SubscriptionPlans.PREMIUM_YEAR_TIER_0:
              return L.default.Messages
                .PREMIUM_SWITCH_REVIEW_HEADER_PREMIUM_YEAR_TIER_0;
            case y.SubscriptionPlans.PREMIUM_MONTH_TIER_1:
              return L.default.Messages
                .PREMIUM_SWITCH_REVIEW_HEADER_PREMIUM_MONTH_TIER_1;
            case y.SubscriptionPlans.PREMIUM_YEAR_TIER_1:
              return L.default.Messages
                .PREMIUM_SWITCH_REVIEW_HEADER_PREMIUM_YEAR_TIER_1;
            case y.SubscriptionPlans.PREMIUM_MONTH_TIER_2:
              return L.default.Messages
                .PREMIUM_SWITCH_REVIEW_HEADER_PREMIUM_MONTH_TIER_2;
            case y.SubscriptionPlans.PREMIUM_YEAR_TIER_2:
              return L.default.Messages
                .PREMIUM_SWITCH_REVIEW_HEADER_PREMIUM_YEAR_TIER_2;
          }
        switch (i) {
          case y.SubscriptionPlans.PREMIUM_MONTH_TIER_0:
            return n
              ? L.default.Messages.BILLING_SELECT_PLAN
              : L.default.Messages.BILLING_SELECT_PLAN_PREMIUM_MONTH_TIER_0;
          case y.SubscriptionPlans.PREMIUM_YEAR_TIER_0:
            return n
              ? L.default.Messages.BILLING_SELECT_PLAN
              : L.default.Messages.BILLING_SELECT_PLAN_PREMIUM_YEAR_TIER_0;
          case y.SubscriptionPlans.PREMIUM_MONTH_TIER_1:
            return n
              ? L.default.Messages.BILLING_SELECT_PLAN
              : L.default.Messages.BILLING_SELECT_PLAN_PREMIUM_MONTH_TIER_1;
          case y.SubscriptionPlans.PREMIUM_YEAR_TIER_1:
            return n
              ? L.default.Messages.BILLING_SELECT_PLAN
              : L.default.Messages.BILLING_SELECT_PLAN_PREMIUM_YEAR_TIER_1;
          case y.SubscriptionPlans.PREMIUM_MONTH_TIER_2:
            return n
              ? L.default.Messages.BILLING_SELECT_PLAN
              : L.default.Messages.BILLING_SELECT_PLAN_PREMIUM_MONTH_TIER_2;
          case y.SubscriptionPlans.PREMIUM_YEAR_TIER_2:
            return n
              ? L.default.Messages.BILLING_SELECT_PLAN
              : L.default.Messages.BILLING_SELECT_PLAN_PREMIUM_YEAR_TIER_2;
          case y.SubscriptionPlans.PREMIUM_3_MONTH_TIER_2:
          case y.SubscriptionPlans.PREMIUM_6_MONTH_TIER_2:
            return L.default.Messages.BILLING_SELECT_PLAN_PREMIUM_MONTHS_TIER_2.format(
              { intervalCount: t.intervalCount }
            );
          case y.SubscriptionPlans.NONE_MONTH:
          case y.SubscriptionPlans.NONE_YEAR:
          case y.SubscriptionPlans.NONE_3_MONTH:
          case y.SubscriptionPlans.NONE_6_MONTH:
          case y.SubscriptionPlans.PREMIUM_MONTH_GUILD:
          case y.SubscriptionPlans.PREMIUM_YEAR_GUILD:
          case y.SubscriptionPlans.PREMIUM_3_MONTH_GUILD:
          case y.SubscriptionPlans.PREMIUM_6_MONTH_GUILD:
            return L.default.Messages.GUILD_SUBSCRIPTION_PURCHASE_MODAL_SUBMIT;
        }
        let r = Error("User is purchasing an unsupported plan");
        throw ((0, g.captureBillingException)(r, { tags: { planId: i } }), r);
      }
      function eh(e) {
        let t = e.invoiceItems[0].subscriptionPlanId,
          n = m.default.get(t);
        return (
          l(null != n, "Missing subscriptionPlan"),
          { intervalType: n.interval, intervalCount: n.intervalCount }
        );
      }
      function e_(e) {
        let {
          intervalType: t = y.SubscriptionIntervalTypes.MONTH,
          intervalCount: n = 1,
          capitalize: i = !1,
        } = e;
        switch (t) {
          case y.SubscriptionIntervalTypes.DAY:
            if (n >= 7 && n % 7 == 0)
              return i
                ? L.default.Messages.PREMIUM_TRIAL_MARKETING_TRIAL_HEADING_WEEKS.format(
                    { weeks: n / 7 }
                  )
                : L.default.Messages.PREMIUM_TRIAL_FREE_DURATION_WEEKS.format({
                    weeks: n / 7,
                  });
            return i
              ? L.default.Messages.PREMIUM_TRIAL_MARKETING_TRIAL_HEADING_DAYS.format(
                  { days: n }
                )
              : L.default.Messages.PREMIUM_TRIAL_FREE_DURATION_DAYS.format({
                  days: n,
                });
          case y.SubscriptionIntervalTypes.MONTH:
            return i
              ? L.default.Messages.PREMIUM_TRIAL_MARKETING_TRIAL_HEADING_MONTHS.format(
                  { months: n }
                )
              : L.default.Messages.PREMIUM_TRIAL_FREE_DURATION_MONTHS.format({
                  months: n,
                });
          case y.SubscriptionIntervalTypes.YEAR:
            return i
              ? L.default.Messages.PREMIUM_TRIAL_MARKETING_TRIAL_HEADING_YEARS.format(
                  { years: n }
                )
              : L.default.Messages.PREMIUM_TRIAL_FREE_DURATION_YEARS.format({
                  years: n,
                });
          default:
            throw Error("Unsupported interval duration.");
        }
      }
      function eS(e) {
        let {
          intervalType: t = y.SubscriptionIntervalTypes.MONTH,
          intervalCount: n = 1,
        } = e;
        switch (t) {
          case y.SubscriptionIntervalTypes.DAY:
            if (n >= 7 && n % 7 == 0)
              return L.default.Messages.PREMIUM_TRIAL_MARKETING_TRIAL_CTA_WEEKS.format(
                { weeks: n / 7 }
              );
            return L.default.Messages.PREMIUM_TRIAL_MARKETING_TRIAL_CTA_DAYS.format(
              { days: n }
            );
          case y.SubscriptionIntervalTypes.MONTH:
            return L.default.Messages.PREMIUM_TRIAL_MARKETING_TRIAL_CTA_MONTHS.format(
              { months: n }
            );
          case y.SubscriptionIntervalTypes.YEAR:
            return L.default.Messages.PREMIUM_TRIAL_MARKETING_TRIAL_CTA_YEARS.format(
              { years: n }
            );
          default:
            throw Error("Unsupported interval duration.");
        }
      }
      function em(e) {
        let {
          intervalType: t = y.SubscriptionIntervalTypes.MONTH,
          intervalCount: n = 1,
          capitalize: i = !1,
        } = e;
        switch (t) {
          case y.SubscriptionIntervalTypes.DAY:
            if (n >= 7 && n % 7 == 0)
              return i
                ? L.default.Messages.DURATION_WEEKS_CAPITALIZE.format({
                    weeks: n / 7,
                  })
                : L.default.Messages.DURATION_WEEKS.format({ weeks: n / 7 });
            return i
              ? L.default.Messages.DURATION_DAYS_CAPITALIZE.format({ days: n })
              : L.default.Messages.DURATION_DAYS.format({ days: n });
          case y.SubscriptionIntervalTypes.MONTH:
            return i
              ? L.default.Messages.DURATION_MONTHS_CAPITALIZE.format({
                  months: n,
                })
              : L.default.Messages.DURATION_MONTHS.format({ months: n });
          case y.SubscriptionIntervalTypes.YEAR:
            return i
              ? L.default.Messages.DURATION_YEARS_CAPITALIZE.format({
                  years: n,
                })
              : L.default.Messages.DURATION_YEARS.format({ years: n });
          default:
            throw Error("Unsupported interval duration.");
        }
      }
      function eT(e, t) {
        switch (e) {
          case O.PaymentGateways.APPLE_PARTNER:
          case O.PaymentGateways.APPLE:
            return b[t];
          case O.PaymentGateways.GOOGLE:
            return M[t];
        }
        throw Error("Invalid external payment gateway ".concat(e));
      }
      function eg(e, t) {
        return (0, A.isPremium)(e) || ef(null == t ? void 0 : t.status);
      }
      function eI(e, t) {
        var n, i;
        let r = [],
          s =
            null !==
              (i =
                null === (n = e.renewalMutations) || void 0 === n
                  ? void 0
                  : n.items) && void 0 !== i
              ? i
              : e.items,
          a = s.find(e => y.PREMIUM_PLANS.has(e.planId));
        return (
          null != a && r.push(a),
          r.push(...t),
          r.map(t => {
            for (let n of e.items)
              if (t.planId === n.planId) return { ...n, ...t };
            return t;
          })
        );
      }
      function eC(e) {
        return e.filter(e => !y.PREMIUM_PLANS.has(e.planId));
      }
      function ev(e, t, n, i) {
        var r, s;
        l(i.has(t), "Expected planId in group");
        let a = !1,
          o =
            null !==
              (s =
                null === (r = e.renewalMutations) || void 0 === r
                  ? void 0
                  : r.items) && void 0 !== s
              ? s
              : e.items,
          u = o.map(e =>
            i.has(e.planId) ? ((a = !0), { ...e, quantity: n, planId: t }) : e
          );
        if (!a) {
          let i = { planId: t, quantity: n },
            r = e.items.find(e => e.planId === t);
          null != r && (i.id = r.id), u.push(i);
        }
        return u.filter(e => 0 !== e.quantity);
      }
      function eA(e, t) {
        return ev(e, t, 1, y.PREMIUM_PLANS);
      }
      function eR(e, t, n) {
        return ev(e, n, t, y.PREMIUM_GUILD_SUBSCRIPTION_PLANS);
      }
      function eN(e) {
        var t;
        let n =
          null !== (t = e.find(e => !("id" in e))) && void 0 !== t
            ? t
            : e.find(e => y.PREMIUM_PLANS.has(e.planId));
        if (null != n) {
          let t = m.default.get(n.planId);
          l(null != t, "Missing plan"),
            (e = e.map(e => {
              if (e === n) return e;
              let i = m.default.get(e.planId);
              l(null != i, "Missing plan");
              let r = m.default.getForSkuAndInterval(
                i.skuId,
                t.interval,
                t.intervalCount
              );
              return (
                l(null != r, "Missing planForInterval"), { ...e, planId: r.id }
              );
            }));
        }
        return e;
      }
      function eO(e) {
        let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : { useSpace: !0 },
          n = y.PremiumUserLimits[e].fileSize;
        return (0, I.formatSize)(n / 1024, {
          useKibibytes: !0,
          useSpace: t.useSpace,
        });
      }
      function eD(e) {
        return null == e
          ? null
          : e.items.find(e => y.PREMIUM_GUILD_SUBSCRIPTION_PLANS.has(e.planId));
      }
      function ey(e) {
        let t = null != e ? w(e) : null,
          n = null != t ? J(t.planId) : null;
        return n;
      }
      var eP = Object.freeze({
        isNewUser: e =>
          null != e && Date.now() - e.createdAt.getTime() < 2592e6,
        isPremiumAtLeast: A.isPremiumAtLeast,
        isPremium: A.isPremium,
        isPremiumExactly: A.isPremiumExactly,
        getPrice: x,
        getDefaultPrice: k,
        getInterval: function (e) {
          let t = y.SubscriptionPlanInfo[e];
          if (null != t)
            return { intervalType: t.interval, intervalCount: t.intervalCount };
          let n = Error("Unsupported plan");
          throw ((0, g.captureBillingException)(n, { tags: { planId: e } }), n);
        },
        getIntervalString: V,
        getIntervalStringAsNoun: B,
        getPremiumType: H,
        getDisplayName: j,
        getDisplayPremiumType: K,
        getPremiumPlanOptions: Z,
        getUpgradeEligibilities: $,
        getPlanDescription: q,
        isPremiumSku: function (e) {
          return (
            e === y.PremiumSubscriptionSKUs.TIER_0 ||
            e === y.PremiumSubscriptionSKUs.TIER_1 ||
            e === y.PremiumSubscriptionSKUs.TIER_2
          );
        },
        getClosestUpgrade: function (e) {
          let t = y.SubscriptionPlanInfo[e];
          if (null == t) throw Error("Unrecognized plan.");
          let { interval: n } = t,
            i = $(e);
          for (let e of Object.keys(y.SubscriptionPlanInfo)) {
            let { interval: t } = y.SubscriptionPlanInfo[e];
            if (n === t && i.includes(e)) return e;
          }
          return null;
        },
        getIntervalMonths: function (e, t) {
          if (e === y.SubscriptionIntervalTypes.MONTH) return t;
          if (e === y.SubscriptionIntervalTypes.YEAR) return 12 * t;
          throw Error(
            "".concat(e, " interval subscription period not implemented")
          );
        },
        getUserMaxFileSize: v.getUserMaxFileSize,
        getSkuIdForPlan: J,
        getSkuIdForPremiumType: function (e) {
          switch (e) {
            case y.PremiumTypes.TIER_0:
              return y.PremiumSubscriptionSKUs.TIER_0;
            case y.PremiumTypes.TIER_1:
              return y.PremiumSubscriptionSKUs.TIER_1;
            case y.PremiumTypes.TIER_2:
              return y.PremiumSubscriptionSKUs.TIER_2;
          }
        },
        getNumIncludedPremiumGuildSubscriptionSlots: function (e) {
          if (H(e) === y.PremiumTypes.TIER_2)
            return y.NUM_FREE_GUILD_BOOSTS_WITH_PREMIUM;
          return 0;
        },
        getBillingInformationString: function (e, t) {
          let n =
              arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            i = n
              ? (0, N.formatPrice)(
                  t.invoiceItems
                    .filter(e =>
                      y.PREMIUM_TIER_2_PLANS.has(e.subscriptionPlanId)
                    )
                    .map(e => e.amount)
                    .reduce((e, t) => t + e, 0),
                  t.currency
                )
              : (0, N.formatPrice)(t.total, t.currency);
          if (e.status === O.SubscriptionStatusTypes.CANCELED)
            return L.default.Messages.PREMIUM_SETTINGS_CANCELLED_INFO.format({
              endDate: t.subscriptionPeriodStart,
            });
          if (e.status === O.SubscriptionStatusTypes.PAST_DUE) {
            var r, s;
            let t = es(e),
              n = c(e.currentPeriodStart).add(t, "days");
            return (e.isPurchasedViaGoogle &&
              (null === (r = e.metadata) || void 0 === r
                ? void 0
                : r.google_grace_period_expires_date) != null &&
              (n = c(e.metadata.google_grace_period_expires_date)),
            e.isPurchasedViaApple &&
              (null === (s = e.metadata) || void 0 === s
                ? void 0
                : s.apple_grace_period_expires_date) != null &&
              (n = c(e.metadata.apple_grace_period_expires_date)),
            e.isPurchasedExternally)
              ? L.default.Messages.PREMIUM_SETTINGS_PAST_DUE_INFO_EXTERNAL.format(
                  {
                    endDate: n,
                    paymentGatewayName:
                      P.PaymentGatewayToFriendlyName[e.paymentGateway],
                    paymentSourceLink: eT(
                      e.paymentGateway,
                      "PAYMENT_SOURCE_MANAGEMENT"
                    ),
                  }
                )
              : L.default.Messages.PREMIUM_SETTINGS_PAST_DUE_INFO.format({
                  endDate: c(e.currentPeriodStart).add(t, "days"),
                  price: i,
                });
          }
          return e.status === O.SubscriptionStatusTypes.ACCOUNT_HOLD
            ? e.isPurchasedViaGoogle && !(0, C.isAndroid)()
              ? L.default.Messages.PREMIUM_SETTINGS_ACCOUNT_HOLD_INFO_EXTERNAL.format(
                  {
                    endDate: c(e.currentPeriodStart).add(
                      y.MAX_ACCOUNT_HOLD_DAYS,
                      "days"
                    ),
                    paymentGatewayName:
                      P.PaymentGatewayToFriendlyName[e.paymentGateway],
                    paymentSourceLink: eT(
                      e.paymentGateway,
                      "PAYMENT_SOURCE_MANAGEMENT"
                    ),
                  }
                )
              : L.default.Messages.PREMIUM_SETTINGS_ACCOUNT_HOLD_INFO_PRICE.format(
                  {
                    endDate: c(e.currentPeriodStart).add(
                      y.MAX_ACCOUNT_HOLD_DAYS,
                      "days"
                    ),
                    price: i,
                  }
                )
            : (function (e) {
                  return null != e.paymentSourceId && ea(e.paymentSourceId);
                })(e)
              ? L.default.Messages.PREMIUM_SETTINGS_PREPAID_THROUGH_DATE.format(
                  { prepaidEndDate: e.currentPeriodEnd }
                )
              : e.status === O.SubscriptionStatusTypes.UNPAID
                ? L.default.Messages.PREMIUM_SETTINGS_PAYMENT_PROCESSING.format(
                    {
                      maxProcessingTimeInDays:
                        y.MAX_PAYMENT_PROCESSING_TIME_DAYS,
                    }
                  )
                : e.isPurchasedExternally
                  ? L.default.Messages.PREMIUM_SETTINGS_RENEWAL_INFO_EXTERNAL.format(
                      {
                        renewalDate: t.subscriptionPeriodStart,
                        paymentGatewayName:
                          P.PaymentGatewayToFriendlyName[e.paymentGateway],
                        subscriptionManagementLink: eT(
                          e.paymentGateway,
                          "SUBSCRIPTION_MANAGEMENT"
                        ),
                      }
                    )
                  : n
                    ? L.default.Messages.PREMIUM_SETTINGS_RENEWAL_INFO_WITH_PLAN.format(
                        {
                          planName: L.default.Messages.PREMIUM,
                          renewalDate: t.subscriptionPeriodStart,
                          price: i,
                        }
                      )
                    : L.default.Messages.PREMIUM_SETTINGS_RENEWAL_INFO.format({
                        renewalDate: t.subscriptionPeriodStart,
                        price: i,
                      });
        },
        isNoneSubscription: p.isNoneSubscription,
        getPlanIdFromInvoice: function (e, t) {
          let { planId: n } = e;
          if (e.status === O.SubscriptionStatusTypes.CANCELED) return n;
          l(null != t, "Expected invoicePreview");
          let i = t.invoiceItems.find(e => {
            let { subscriptionPlanId: t } = e;
            return en(t);
          });
          return (n =
            null == i || (0, p.isNoneSubscription)(i.subscriptionPlanId)
              ? e.planId
              : null != e.renewalMutations &&
                  e.renewalMutations.planId !== e.planId
                ? e.planId
                : i.subscriptionPlanId);
        },
        getStatusFromInvoice: function (e, t) {
          let { status: n } = e;
          if (e.status === O.SubscriptionStatusTypes.CANCELED) return n;
          l(null != t, "Expected invoicePreview");
          let i = t.invoiceItems.find(e => {
            let { subscriptionPlanId: t } = e;
            return en(t);
          });
          return (
            (null == i || (0, p.isNoneSubscription)(i.subscriptionPlanId)) &&
              (n = O.SubscriptionStatusTypes.CANCELED),
            n
          );
        },
        isBaseSubscriptionCanceled: ed,
        getPremiumGuildIntervalPrice: eE,
        hasAccountCredit: function (e) {
          return (
            null != e &&
            0 !== e.size &&
            Array.from(e).some(e => {
              let { subscriptionPlanId: t, parentId: n, consumed: i } = e;
              return null != t && null != n && !i;
            })
          );
        },
        getBillingReviewSubheader: ep,
        getIntervalForInvoice: eh,
        getPremiumPlanItem: w,
        getGuildBoostPlanItem: eD,
        isBoostOnlySubscription: function (e) {
          return null != e && null == w(e) && null != eD(e);
        },
        getPremiumSkuIdForSubscription: ey,
        getPremiumTypeFromSubscription: function (e) {
          if (null != e) {
            let t = w(e);
            if (null != t) return H(t.planId);
          }
        },
        getPremiumTypeFromSubscriptionRenewalMutations: function (e) {
          if (null != e && null != e.renewalMutations) {
            let t = w(e.renewalMutations);
            if (null != t) return H(t.planId);
          }
        },
        getPremiumGradientColor: function (e) {
          switch (e) {
            case y.PremiumTypes.TIER_0:
              return D.Gradients.PREMIUM_TIER_0;
            case y.PremiumTypes.TIER_1:
              return D.Gradients.PREMIUM_TIER_1;
            case y.PremiumTypes.TIER_2:
              return D.Gradients.PREMIUM_TIER_2;
          }
        },
        canUseAnimatedEmojis: function (e) {
          return (0, f.canUserUse)(f.ANIMATED_EMOJIS, e);
        },
        canUseEmojisEverywhere: function (e) {
          return (0, f.canUserUse)(f.EMOJIS_EVERYWHERE, e);
        },
        canUseSoundboardEverywhere: function (e) {
          return (0, f.canUserUse)(f.SOUNDBOARD_EVERYWHERE, e);
        },
        canUseCustomCallSounds: function (e) {
          return (0, f.canUserUse)(f.CUSTOM_CALL_SOUNDS, e);
        },
        canUploadLargeFiles: function (e) {
          return (0, f.canUserUse)(f.UPLOAD_LARGE_FILES, e);
        },
        canUseBadges: function (e) {
          return (0, f.canUserUse)(f.PROFILE_BADGES, e);
        },
        canUseHighVideoUploadQuality: function (e) {
          return (0, f.canUserUse)(f.INCREASED_VIDEO_UPLOAD_QUALITY, e);
        },
        canEditDiscriminator: function (e) {
          return (0, f.canUserUse)(f.CUSTOM_DISCRIMINATOR, e);
        },
        hasBoostDiscount: function (e) {
          return (0, f.canUserUse)(f.BOOST_DISCOUNT, e);
        },
        canUseAnimatedAvatar: function (e) {
          return (0, f.canUserUse)(f.ANIMATED_AVATAR, e);
        },
        canUseFancyVoiceChannelReactions: function (e) {
          return (0, f.canUserUse)(f.FANCY_VOICE_CHANNEL_REACTIONS, e);
        },
        canInstallPremiumApplications: function (e) {
          return (0, f.canUserUse)(f.INSTALL_PREMIUM_APPLICATIONS, e);
        },
        canUseIncreasedMessageLength: function (e) {
          return (0, f.canUserUse)(f.INCREASED_MESSAGE_LENGTH, e);
        },
        canUseIncreasedGuildCap: function (e) {
          return (0, f.canUserUse)(f.INCREASED_GUILD_LIMIT, e);
        },
        canRedeemPremiumPerks: function (e) {
          return (0, f.canUserUse)(f.REDEEM_PREMIUM_PERKS, e);
        },
        canUsePremiumProfileCustomization: function (e) {
          return (0, f.canUserUse)(f.PROFILE_PREMIUM_FEATURES, e);
        },
        canUsePremiumAppIcons: function (e) {
          return (0, f.canUserUse)(f.APP_ICONS, e);
        },
        canUsePremiumGuildMemberProfile: function (e) {
          return (0, f.canUserUse)(f.PREMIUM_GUILD_MEMBER_PROFILE, e);
        },
        canUseClientThemes: function (e) {
          return (0, f.canUserUse)(f.CLIENT_THEMES, e);
        },
        canStreamQuality: function (e, t) {
          return "high" === e
            ? (0, f.canUserUse)(f.STREAM_HIGH_QUALITY, t)
            : "mid" === e && (0, f.canUserUse)(f.STREAM_MID_QUALITY, t);
        },
        hasFreeBoosts: function (e) {
          return (0, f.canUserUse)(f.FREE_BOOSTS, e);
        },
        canUsePremiumActivities: function (e) {
          return (0, f.canUserUse)(f.HOST_PREMIUM_ACTIVITIES, e);
        },
        canUseCustomStickersEverywhere: function (e) {
          return (0, f.canUserUse)(f.STICKERS_EVERYWHERE, e);
        },
        canUseCustomBackgrounds: function (e) {
          return (0, f.canUserUse)(f.VIDEO_FILTER_ASSETS, e);
        },
        canUseCollectibles: function (e) {
          return (0, f.canUserUse)(f.COLLECTIBLES, e);
        },
        formatPriceString: function (e, t) {
          let n = (0, N.formatPrice)(e.amount, e.currency),
            i = B(t);
          return "".concat(n, "/").concat(i);
        },
        StreamQuality: r,
      });
    },
    153160: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          formatPrice: function () {
            return o;
          },
          formatRate: function () {
            return l;
          },
          formatPercent: function () {
            return u;
          },
        }),
        n("70102");
      var i = n("988025"),
        r = n("915639"),
        s = n("646718"),
        a = n("782340");
      function o(e, t, n) {
        var s;
        let a =
          null !== (s = null == n ? void 0 : n.localeOverride) && void 0 !== s
            ? s
            : r.default.locale;
        return (0, i.formatPrice)(e, t, a, n);
      }
      function l(e, t, n) {
        if (t === s.SubscriptionIntervalTypes.YEAR)
          return a.default.Messages.BILLING_PRICE_PER_YEAR.format({ price: e });
        if (t === s.SubscriptionIntervalTypes.MONTH && 1 === n)
          return a.default.Messages.BILLING_PRICE_PER_MONTH.format({
            price: e,
          });
        if (t === s.SubscriptionIntervalTypes.MONTH && n > 1)
          return a.default.Messages.BILLING_PRICE_PER_MULTI_MONTHS.format({
            price: e,
            intervalCount: n,
          });
        throw Error(
          "Unsupported interval type: "
            .concat(t, ", and interval count: ")
            .concat(n)
        );
      }
      function u(e, t) {
        return Intl.NumberFormat(e, {
          style: "percent",
          minimumFractionDigits: 0,
        }).format(t);
      }
    },
    197881: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ProcessArgs: function () {
            return r;
          },
        });
      var i = n("49671");
      class r {
        static get() {
          if (null == r.cached) {
            var e, t;
            let n =
              null === i.default || void 0 === i.default
                ? void 0
                : null === (t = i.default.processUtils) || void 0 === t
                  ? void 0
                  : null === (e = t.getMainArgvSync) || void 0 === e
                    ? void 0
                    : e.call(t);
            null != n && n.length > 1 && n.shift(),
              (r.cached = null != n ? n : []);
          }
          return r.cached;
        }
        static contains(e) {
          return r.get().includes(e);
        }
        static isEnvVariableTrue(e) {
          var t, n;
          if (void 0 === i.default) return !1;
          switch (
            null === i.default || void 0 === i.default
              ? void 0
              : null === (n = i.default.process) || void 0 === n
                ? void 0
                : null === (t = n.env) || void 0 === t
                  ? void 0
                  : t[e]
          ) {
            case "1":
            case "true":
              return !0;
          }
          return !1;
        }
        static isDisallowPopupsSet() {
          return (
            r.contains("--disallow-popups") ||
            r.isEnvVariableTrue("DISCORD_DISALLOW_POPUPS")
          );
        }
        static isDiscordTestSet() {
          return r.isEnvVariableTrue("DISCORD_TEST");
        }
        static isDiscordGatewayPlaintextSet() {
          return !1;
        }
      }
    },
    872507: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return u;
          },
        }),
        n("808653");
      var i = n("811022"),
        r = n("49671"),
        s = n("921278"),
        a = n("50885");
      let o = new i.default("ProcessUtilsElectron");
      class l extends s.ProcessUtils {
        setupReportingTimer() {
          var e, t;
          let n =
            null === r.default || void 0 === r.default
              ? void 0
              : null === (e = r.default.processUtils) || void 0 === e
                ? void 0
                : e.setMemoryInformation;
          if (null == n) {
            o.log("setMemoryInformation not available.");
            return;
          }
          (null === (t = performance.memory) || void 0 === t
            ? void 0
            : t.usedJSHeapSize) == null &&
            o.error("usedJSHeapSize is not available.");
          setInterval(() => {
            var e, t, i;
            let r =
              null !==
                (t =
                  null === (e = performance.memory) || void 0 === e
                    ? void 0
                    : e.usedJSHeapSize) && void 0 !== t
                ? t
                : 0;
            n({
              memoryUsageKB:
                null !== (i = this.lastMemoryUsageKB) && void 0 !== i ? i : 0,
              usedJSHeapSizeKB: Math.ceil(r / 1024),
            });
          }, 1e4);
        }
        getProcessUptime() {
          var e, t;
          return null === r.default || void 0 === r.default
            ? void 0
            : null === (t = r.default.processUtils) || void 0 === t
              ? void 0
              : null === (e = t.getProcessUptime) || void 0 === e
                ? void 0
                : e.call(t);
        }
        getCurrentCPUUsagePercent() {
          var e, t;
          return null === r.default || void 0 === r.default
            ? void 0
            : null === (t = r.default.processUtils) || void 0 === t
              ? void 0
              : null === (e = t.getCurrentCPUUsagePercent) || void 0 === e
                ? void 0
                : e.call(t);
        }
        getCurrentMemoryUsageKB() {
          let e = l.getCurrentMemoryUsageKBCore();
          return (this.lastMemoryUsageKB = e), e;
        }
        static getCurrentMemoryUsageKBCore() {
          try {
            let e = a.default.getDiscordMemoryUsage();
            if (null == e) return 0;
            let t = Object.values(e).reduce((e, t) => e + t, 0);
            return Math.ceil(t / 1024);
          } catch (e) {
            return 0;
          }
        }
        getMemoryUsageDetails() {
          return a.default.getDiscordMemoryUsage();
        }
        getMemoryUsageElectronRenderer() {
          try {
            return a.default.getDiscordMemoryUsageElectronRenderer();
          } catch (e) {
            return null;
          }
        }
        getMemoryUsageElectronRendererUsedHeapSize() {
          var e, t;
          return null === r.default || void 0 === r.default
            ? void 0
            : null === (t = r.default.processUtils) || void 0 === t
              ? void 0
              : null === (e = t.getUsedHeapSize) || void 0 === e
                ? void 0
                : e.call(t);
        }
        constructor() {
          var e, t;
          super(),
            (this.lastMemoryUsageKB = void 0),
            (this.cpuCoreCount =
              null === r.default || void 0 === r.default
                ? void 0
                : null === (t = r.default.processUtils) || void 0 === t
                  ? void 0
                  : null === (e = t.getCPUCoreCount) || void 0 === e
                    ? void 0
                    : e.call(t)),
            this.setupReportingTimer();
        }
      }
      var u = new l();
    },
    921278: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ProcessUtils: function () {
            return i;
          },
        });
      class i {
        getCPUCoreCount() {
          return this.cpuCoreCount;
        }
      }
    },
    315733: function (e, t, n) {
      "use strict";
      function i(e) {
        return /^(?:discord:\/)?\/[a-zA-Z0-9_-]/.test(e);
      }
      n.r(t),
        n.d(t, {
          isSafeRedirect: function () {
            return i;
          },
        });
    },
    828777: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          serializeObject: function () {
            return o;
          },
          deserializeObject: function () {
            return l;
          },
        }),
        n("274635"),
        n("311790"),
        n("477657"),
        n("811875"),
        n("90301"),
        n("652153"),
        n("28797"),
        n("817884"),
        n("597349"),
        n("667536"),
        n("690341");
      var i = n("917351"),
        r = n.n(i),
        s = n("316693"),
        a = n("674268");
      function o(e) {
        return r.cloneDeepWith(e, e =>
          (0, s.isBigFlag)(e)
            ? { __tag__: "bigflag", data: e.toJSON() }
            : (0, a.isUint8Array)(e)
              ? { __tag__: "uint8array", data: Array.from(e) }
              : void 0
        );
      }
      function l(e) {
        return r.cloneDeepWith(e, e =>
          null != e &&
          "object" == typeof e &&
          "__tag__" in e &&
          "bigflag" === e.__tag__
            ? s.default.deserialize(e.data)
            : (0, a.isSerializedUint8Array)(e)
              ? new Uint8Array(e.data)
              : void 0
        );
      }
    },
    299039: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          DISCORD_EPOCH: function () {
            return i.DISCORD_EPOCH;
          },
          default: function () {
            return r;
          },
        });
      var i = n("249654"),
        r = {
          age: i.default.age,
          extractTimestamp: i.default.extractTimestamp,
          fromTimestamp: i.default.fromTimestamp,
          atPreviousMillisecond: i.default.atPreviousMillisecond,
          compare: i.default.compare,
          keys: function (e) {
            return Object.keys(e);
          },
          forEachKey: function (e, t) {
            for (let n in e) t(n);
          },
          entries: function (e) {
            return Object.entries(e);
          },
        };
    },
    439932: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getThemeClass: function () {
            return r;
          },
        });
      var i = n("49111");
      function r(e) {
        if (null == e) return;
        let t = i.ThemeExtends.get(e);
        return null != t
          ? "theme-".concat(t, " theme-").concat(e)
          : "theme-".concat(e);
      }
    },
    253981: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return m;
          },
        }),
        n("222007");
      var i = n("943224"),
        r = n.n(i),
        s = n("917351"),
        a = n.n(s),
        o = n("746379"),
        l = n("49111");
      let u = /(?:^|\.)(?:discordapp|discord)\.com$/i,
        c = r.v4().source,
        d = "(?:"
          .concat("(?:(?:[a-z]+:)?//)", "|www\\.)")
          .concat("(?:\\S+(?::\\S*)?@)?", "(?:localhost|")
          .concat(c, "|")
          .concat("(?:[a-z\\u00a1-\\uffff0-9-_]+\\.)+")
          .concat("(?:(?:[a-z\\u00a1-\\uffff]{2,}))", ")")
          .concat("(?::\\d{2,5})?")
          .concat('(?:[/?#][^\\s"]*)?'),
        f = RegExp(d, "ig"),
        E = new Set([
          window.GLOBAL_ENV.CDN_HOST,
          window.GLOBAL_ENV.INVITE_HOST,
          window.GLOBAL_ENV.GIFT_CODE_HOST,
          window.GLOBAL_ENV.GUILD_TEMPLATE_HOST,
        ]);
      function p(e) {
        var t;
        let n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        if (null == e) return !1;
        return u.test(e) || (n && ((t = e), E.has(t.toLowerCase())));
      }
      function h(e) {
        return null != e && "discord:" === e;
      }
      function _(e) {
        let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        return null != e && p(o.parse(e).hostname, t);
      }
      function S(e) {
        return null != e && h(o.parse(e).protocol);
      }
      var m = {
        URL_REGEX: f,
        isDiscordHostname: p,
        isDiscordLocalhost: function (e, t) {
          return null != e && null != t && (window.location.host === e || !1);
        },
        isDiscordProtocol: h,
        isDiscordUrl: _,
        isDiscordUri: S,
        isDiscordCdnUrl: function (e) {
          return (
            null != e && o.parse(e).hostname === window.GLOBAL_ENV.CDN_HOST
          );
        },
        isDiscordUrlOrUri: e => _(e) || S(e),
        isAppRoute: e => {
          let t = e.toLowerCase();
          return (
            t.startsWith("/channels/") ||
            t.startsWith(l.Routes.APPLICATION_STORE) ||
            t.startsWith(l.Routes.APPLICATION_LIBRARY) ||
            t.startsWith(l.Routes.MESSAGE_REQUESTS) ||
            t.startsWith(l.Routes.ACTIVITIES) ||
            t.startsWith(l.Routes.COLLECTIBLES_SHOP) ||
            t.startsWith(l.Routes.ACTIVITY)
          );
        },
        format: e => o.format(e),
        formatPathWithQuery: (e, t) =>
          o.format({ pathname: e, query: a.pickBy(t) }),
        formatSearch: e => o.format({ query: a.pickBy(e) }),
        safeParseWithQuery(e) {
          try {
            return o.parse(e, !0);
          } catch (e) {
            return null;
          }
        },
        makeUrl: function (e) {
          let t = __DEV__ ? window.GLOBAL_ENV.INVITE_HOST : location.host;
          return "".concat(location.protocol, "//").concat(t).concat(e);
        },
      };
    },
    980134: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MAX_TOTAL_ATTACHMENT_SIZE: function () {
            return a;
          },
          getAttachmentPayload: function () {
            return o;
          },
          getFileChunk: function () {
            return l;
          },
          getFileData: function () {
            return u;
          },
          getFileContentLength: function () {
            return c;
          },
          getFile: function () {
            return d;
          },
        }),
        n("70102");
      var i = n("66175"),
        r = n("894488");
      let s = [
          {
            reName: /\.jpe?g$/i,
            name: e => "image".concat(e, ".jpg"),
            type: "image/jpeg",
          },
          {
            reName: /\.png$/i,
            name: e => "image".concat(e, ".png"),
            type: "image/png",
          },
          {
            reName: /\.gif$/i,
            name: e => "image".concat(e, ".gif"),
            type: "image/gif",
          },
          {
            reName: /\.webp$/i,
            name: e => "image".concat(e, ".webp"),
            type: "image/webp",
          },
          {
            reName: /\.heic$/i,
            name: e => "image".concat(e, ".heic"),
            type: "image/heic",
          },
          {
            reName: /\.heif$/i,
            name: e => "image".concat(e, ".heif"),
            type: "image/heif",
          },
          {
            reName: /\.dng$/i,
            name: e => "image".concat(e, ".dng"),
            type: "image/x-adobe-dng",
          },
          {
            reName: /\.mov$/i,
            name: e => "video".concat(e, ".mov"),
            type: "video/quicktime",
          },
          {
            reName: /\.avi$/i,
            name: e => "video".concat(e, ".avi"),
            type: "video/x-msvideo",
          },
          {
            reName: /\.mp4$/i,
            name: e => "video".concat(e, ".mp4"),
            type: "video/mp4",
          },
          {
            reName: /\.webm$/i,
            name: e => "video".concat(e, ".webm"),
            type: "image/webm",
          },
        ],
        a = 524288e3;
      function o(e) {
        var t;
        let n =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : null,
          s = arguments.length > 2 ? arguments[2] : void 0,
          a = {
            id:
              null !== (t = null == n ? void 0 : n.toString()) && void 0 !== t
                ? t
                : e.id,
          };
        null != e.description && (a.description = e.description);
        let o = (function (e) {
          let { spoiler: t } = e;
          return t ? r.SPOILER_ATTACHMENT_PREFIX : "";
        })({ spoiler: e.spoiler });
        return (
          (a.filename = "".concat(o).concat(null != s ? s : e.filename)),
          (a.uploaded_filename = e.uploadedFilename),
          "durationSecs" in e &&
            null != e.durationSecs &&
            (a.duration_secs = e.durationSecs),
          "waveform" in e && null != e.waveform && (a.waveform = e.waveform),
          "isThumbnail" in e &&
            !0 === e.isThumbnail &&
            (a.is_thumbnail = e.isThumbnail),
          "isRemix" in e && !0 === e.isRemix && (a.is_remix = e.isRemix),
          "clip" in e &&
            null != e.clip &&
            ((a.is_clip = !0),
            (a.title = e.clip.name),
            (a.application_id = e.clip.applicationId),
            (a.clip_created_at = (0, i.getClipCreatedAt)(e.clip.id)),
            (a.clip_participant_ids = (0, i.getClipParticipantIds)(
              e.clip.users
            ))),
          a
        );
      }
      function l(e, t, n) {
        let i = new XMLHttpRequest();
        return new Promise((r, s) => {
          i.open("GET", e, !0),
            (i.responseType = "blob"),
            i.setRequestHeader("Range", "bytes=".concat(t, "-").concat(n)),
            (i.onabort = e => s(e)),
            (i.onerror = e => s(e)),
            (i.ontimeout = e => s(e)),
            (i.onload = () => {
              206 === i.status
                ? r(i.response)
                : s(Error("Range request failed"));
            }),
            i.send();
        });
      }
      function u(e) {
        let t = new XMLHttpRequest();
        return new Promise((n, i) => {
          t.open("GET", e, !0),
            (t.responseType = "blob"),
            (t.onabort = e => i(e)),
            (t.onerror = e => i(e)),
            (t.ontimeout = e => i(e)),
            (t.onload = () => {
              var e;
              return n(
                null == t
                  ? void 0
                  : null === (e = t.response) || void 0 === e
                    ? void 0
                    : e.data
              );
            }),
            t.send();
        });
      }
      function c(e) {
        return new Promise((t, n) => {
          let i = new XMLHttpRequest();
          i.open("HEAD", e, !0),
            (i.onload = () => {
              if (i.status >= 200 && i.status < 300) {
                let e = i.getResponseHeader("Content-Length");
                null != e && "" !== e
                  ? t(parseInt(e, 10))
                  : n(Error("Content-Length header is missing"));
              } else
                n(
                  Error(
                    "HTTP request failed with status code ".concat(i.status)
                  )
                );
            }),
            (i.onerror = n),
            (i.onabort = n),
            (i.ontimeout = n),
            i.send();
        });
      }
      function d(e) {
        var t, n, i, r, a, o;
        let l,
          { uri: u, i: c, overrideFilename: d, overrideType: f } = e,
          E = u.split("/"),
          p = E[E.length - 1];
        p =
          null !==
            (i =
              null === (n = p.split("?")) || void 0 === n
                ? void 0
                : null === (t = n[0]) || void 0 === t
                  ? void 0
                  : t.toLowerCase()) && void 0 !== i
            ? i
            : "";
        let h = s.find(e => e.reName.test(p));
        if (
          (null == h && null != d && (h = s.find(e => e.reName.test(d))),
          null != h && null != d)
        ) {
          let e = h.name(c).split(".").pop(),
            t = d.lastIndexOf(".");
          l =
            -1 !== t
              ? "".concat(d.substr(0, t), ".").concat(e)
              : "".concat(d, ".").concat(e);
        } else l = null != h ? h.name(c) : null != d ? d : "unknown";
        return {
          uri: u,
          filename: l,
          type:
            null !== (r = null != f ? f : null == h ? void 0 : h.type) &&
            void 0 !== r
              ? r
              : "unknown",
          isVideo:
            -1 !==
            (null !== (a = null != f ? f : null == h ? void 0 : h.name(c)) &&
            void 0 !== a
              ? a
              : ""
            ).indexOf("video"),
          isImage:
            -1 !==
            (null !== (o = null != f ? f : null == h ? void 0 : h.name(c)) &&
            void 0 !== o
              ? o
              : ""
            ).indexOf("image"),
        };
      }
    },
    158998: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getName: function () {
            return E;
          },
          useName: function () {
            return p;
          },
          humanizeStatus: function () {
            return _;
          },
          ageEligibleForPremiumUpsell: function () {
            return m;
          },
          isNewUser: function () {
            return T;
          },
          getUserTag: function () {
            return I;
          },
          useDirectMessageRecipient: function () {
            return C;
          },
          default: function () {
            return v;
          },
        }),
        n("70102");
      var i = n("446674"),
        r = n("102985"),
        s = n("697218"),
        a = n("49111"),
        o = n("782340");
      let l = e => "".concat(e[0], "..."),
        u = e => "@".concat(e),
        c = {
          mode: "full",
          decoration: "never",
          identifiable: "auto",
          forcePomelo: !1,
        };
      function d(e) {
        return !!(null != e && e.length > 0);
      }
      function f(e) {
        if (d(e.global_name)) return e.global_name;
        if (d(e.globalName)) return e.globalName;
        if (d(e.username)) return e.username;
        else return "???";
      }
      function E(e) {
        var t;
        if (null == e) return;
        let n = r.default.hidePersonalInformation,
          i = f(e);
        return (
          n &&
            i.toLocaleLowerCase() ===
              (null === (t = e.username) || void 0 === t
                ? void 0
                : t.toLocaleLowerCase()) &&
            "0" === e.discriminator &&
            (i = l(i)),
          i
        );
      }
      function p(e) {
        var t;
        let n = (0, i.useStateFromStores)(
          [r.default],
          () => r.default.hidePersonalInformation
        );
        if (null == e) return;
        let s = f(e);
        return (
          n &&
            s.toLocaleLowerCase() ===
              (null === (t = e.username) || void 0 === t
                ? void 0
                : t.toLocaleLowerCase()) &&
            "0" === e.discriminator &&
            (s = l(s)),
          s
        );
      }
      function h(e) {
        if (null != e) {
          if (d(e.globalName)) return e.globalName;
          else if (d(e.global_name)) return e.global_name;
          else return;
        }
      }
      function _(e) {
        let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        switch (e) {
          case a.StatusTypes.ONLINE:
            return t
              ? o.default.Messages.STATUS_ONLINE_MOBILE
              : o.default.Messages.STATUS_ONLINE;
          case a.StatusTypes.OFFLINE:
            return o.default.Messages.STATUS_OFFLINE;
          case a.StatusTypes.IDLE:
            return o.default.Messages.STATUS_IDLE;
          case a.StatusTypes.DND:
            return o.default.Messages.STATUS_DND;
          case a.StatusTypes.INVISIBLE:
            return o.default.Messages.STATUS_INVISIBLE;
          case a.StatusTypes.STREAMING:
            return o.default.Messages.STATUS_STREAMING;
          case a.StatusTypes.UNKNOWN:
          default:
            return null;
        }
      }
      function S(e, t) {
        let { maxDaysOld: n, minDaysOld: i = 0 } = t;
        if (null == e) return !1;
        let r = Date.now() - e.createdAt.getTime();
        return ((null == n || !!(r <= 864e5 * n)) && !!(r >= 864e5 * i)) || !1;
      }
      function m(e) {
        return !S(e, { minDaysOld: 0, maxDaysOld: 30 });
      }
      function T(e) {
        return S(e, { minDaysOld: 0, maxDaysOld: 7 });
      }
      function g(e, t, n) {
        if (null == e) return o.default.Messages.UNKNOWN_USER;
        if (!d(e.username)) return "???";
        let i = n;
        if (
          ("always" === t.identifiable
            ? (i = !1)
            : "never" === t.identifiable && (i = !0),
          "0" !== e.discriminator &&
            e.discriminator !== a.NON_USER_BOT_DISCRIMINATOR &&
            !t.forcePomelo)
        )
          return "username" === t.mode
            ? e.username
            : i
              ? e.username
              : "".concat(e.username, "#").concat(e.discriminator);
        let r = i ? l(e.username) : e.username;
        return "never" !== t.decoration ? u(r) : r;
      }
      function I(e, t) {
        let n = { ...c, ...t },
          i = "auto" !== n.identifiable || r.default.hidePersonalInformation;
        return g(e, n, i);
      }
      function C(e) {
        return (0, i.useStateFromStores)([s.default], () => {
          if (null != e)
            return e.isPrivate() && e.isDM()
              ? s.default.getUser(e.getRecipientId())
              : null;
        });
      }
      var v = {
        getName: E,
        useName: p,
        getUserTag: I,
        useUserTag: function (e, t) {
          let n = { ...c, ...t },
            s = (0, i.useStateFromStores)(
              [r.default],
              () => r.default.hidePersonalInformation
            );
          return g(e, n, s);
        },
        getFormattedName: function (e) {
          var t;
          let n =
            arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          if (null == e) return "???";
          let i = h(e),
            r = n
              ? I(e)
              : null !== (t = e.username) && void 0 !== t
                ? t
                : "???";
          return i === r
            ? i
            : null != i
              ? "".concat(i, " (").concat(r, ")")
              : r;
        },
        getGlobalName: h,
        humanizeStatus: _,
        useDirectMessageRecipient: C,
      };
    },
    411093: function (e, t, n) {
      "use strict";
      function i(e, t) {
        let n = e.parentElement;
        for (; null != n; ) {
          if (n.classList.contains(t)) return n;
          n = n.parentElement;
        }
        return null;
      }
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
    },
    547630: function (e, t, n) {
      "use strict";
      function i() {
        var e;
        return null !== (e = window.devicePixelRatio) && void 0 !== e ? e : 1;
      }
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
    },
    523096: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getAutomodAvatarURL: function () {
            return C;
          },
          default: function () {
            return v;
          },
        });
      var i = n("560528"),
        r = n("324241"),
        s = n("307757"),
        a = n("548520"),
        o = n("445724"),
        l = n("170382"),
        u = n("593285"),
        c = n("575603"),
        d = n("181815"),
        f = n("521089"),
        E = n("366942"),
        p = n("125707"),
        h = n("785744"),
        _ = n("297384"),
        S = n("573220"),
        m = n("265284"),
        T = n("320436"),
        g = n("348044"),
        I = n("36409");
      function C() {
        let e = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
        return e ? I : r;
      }
      var v = {
        DEFAULT_AVATARS: [s, a, o, l, u, c],
        DEFAULT_GROUP_DM_AVATARS: [d, f, E, p, h, _, S, m],
        BOT_AVATARS: { clyde: g },
        DEFAULT_CHANNEL_ICON: T,
        canUseWebp: function () {
          return i.canUseWebp();
        },
      };
    },
    602043: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isSupportedPlatform: function () {
            return s;
          },
          isLaunchable: function () {
            return a;
          },
        });
      var i = n("964889"),
        r = n("773336");
      function s() {
        return (0, r.isWindows)() || (0, r.isMac)();
      }
      function a(e) {
        let {
          LibraryApplicationStore: t,
          LaunchableGameStore: n,
          DispatchApplicationStore: r,
          ConnectedAppsStore: s,
          applicationId: a,
          branchId: o,
        } = e;
        if (s.isConnected(a)) return !0;
        if ((null == o && (o = a), r.isLaunchable(a, o))) return !0;
        let l = t.getLibraryApplication(a, o);
        return (
          !(null != l && (0, i.isUserEntitledToLibraryApplication)(l)) &&
          n.isLaunchable(a)
        );
      }
    },
    13798: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getEnv: function () {
            return _;
          },
          codeToKey: function () {
            return S;
          },
          keyToCode: function () {
            return m;
          },
          toBrowserEvents: function () {
            return v;
          },
          toCombo: function () {
            return A;
          },
          toString: function () {
            return R;
          },
        }),
        n("222007"),
        n("781738"),
        n("70102"),
        n("808653"),
        n("424973");
      var i = n("499032"),
        r = n.n(i),
        s = n("917351"),
        a = n.n(s),
        o = n("485328"),
        l = n("449008"),
        u = n("773336"),
        c = n("49111");
      let d = (0, u.isLinux)()
          ? c.LinuxKeyToCode
          : (0, u.isMac)()
            ? c.MacosKeyToCode
            : (0, u.isWindows)()
              ? c.WindowsKeyToCode
              : void 0,
        f = a.invert(c.LinuxKeyToCode);
      (f["223"] = "`"), Object.freeze(f);
      let E = Object.freeze(a.invert(c.MacosKeyToCode)),
        p = a.invert(c.WindowsKeyToCode);
      (p["223"] = "`"), Object.freeze(p);
      let h = a.invert(null != d ? d : {});
      function _() {
        if ((0, u.isLinux)()) return c.KeyboardEnvs.LINUX;
        if ((0, u.isMac)()) return c.KeyboardEnvs.MACOS;
        if ((0, u.isWindows)()) return c.KeyboardEnvs.WINDOWS;
        else return c.KeyboardEnvs.BROWSER;
      }
      function S(e) {
        let [, t, n] = e;
        switch (n) {
          case c.KeyboardEnvs.LINUX:
            return f["" + t];
          case c.KeyboardEnvs.MACOS:
            return E["" + t];
          case c.KeyboardEnvs.WINDOWS:
            return p["" + t];
          case c.KeyboardEnvs.BROWSER:
            return r(t);
          default:
            return h["" + t];
        }
      }
      function m(e) {
        let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : _(),
          n =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : c.KeyboardDeviceTypes.KEYBOARD_KEY;
        switch (n) {
          case c.KeyboardDeviceTypes.KEYBOARD_KEY:
          case c.KeyboardDeviceTypes.KEYBOARD_MODIFIER_KEY:
            switch (t) {
              case c.KeyboardEnvs.LINUX:
                return c.LinuxKeyToCode[e];
              case c.KeyboardEnvs.MACOS:
                return c.MacosKeyToCode[e];
              case c.KeyboardEnvs.WINDOWS:
                return c.WindowsKeyToCode[e];
              case c.KeyboardEnvs.BROWSER:
                return r(
                  e
                    .replace(/^(right|left) (shift|meta|ctrl|alt)$/, "$2")
                    .replace("meta", "command")
                );
              default:
                return d[e];
            }
          case c.KeyboardDeviceTypes.MOUSE_BUTTON:
            return parseInt(e.replace("MOUSE", ""), 10);
          case c.KeyboardDeviceTypes.GAMEPAD_BUTTON:
            return parseInt(e.replace("GAMEPAD", ""), 10);
          default:
            throw Error("Unrecognized DeviceType ".concat(n, "."));
        }
      }
      !(0, u.isMac)() && (h["223"] = "`"), Object.freeze(h);
      let T = [
          ["META", "⌘"],
          ["RIGHT META", "RIGHT ⌘"],
          ["SHIFT", "⇧"],
          ["RIGHT SHIFT", "RIGHT ⇧"],
          ["ALT", "⌥"],
          ["RIGHT ALT", "RIGHT ⌥"],
          ["CTRL", "⌃"],
          ["RIGHT CTRL", "RIGHT ⌃"],
          ["ENTER", "↵"],
          ["BACKSPACE", "⌫"],
          ["DEL", "⌦"],
          ["ESC", "⎋"],
          ["PAGEUP", "⇞"],
          ["PAGEDOWN", "⇟"],
          ["UP", "↑"],
          ["DOWN", "↓"],
          ["LEFT", "←"],
          ["RIGHT", "→"],
          ["HOME", "↖"],
          ["END", "↘"],
          ["TAB", "⇥"],
          ["SPACE", "␣"],
        ],
        g = e => {
          for (let [t, n] of T) if (t === e.toUpperCase()) return n;
          return e;
        },
        I = e => {
          for (let [t, n] of T)
            if (n === e.toUpperCase()) return t.toLowerCase();
          return e;
        },
        C = /shift|meta|ctrl|alt$/;
      function v(e) {
        let t = {
          keyCode: 0,
          metaKey: !1,
          shiftKey: !1,
          altKey: !1,
          ctrlKey: !1,
        };
        return null == e
          ? []
          : e.reduce((e, n) => {
              let i = S(n),
                r = { ...t };
              if (null == i) return e.push({ ...r, combo: n }), e;
              if (C.test(i))
                return (
                  (t[i + "Key"] = !0), e.map(e => ((e[i + "Key"] = !0), e))
                );
              {
                let t = m(i, c.KeyboardEnvs.BROWSER);
                return null != t && (r.keyCode = t), e.push(r), e;
              }
            }, []);
      }
      function A(e) {
        let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : _(),
          n =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : c.KeyboardDeviceTypes.KEYBOARD_KEY,
          i = e
            .replace(/numpad plus/i, "")
            .replace(/NUMPAD \+/i, "numpad plus")
            .replace(/mod/i, o.default.modKey)
            .split("+")
            .map(e => e.trim().replace("plus", "+"));
        return i.reduce((e, i) => {
          let r = I(i),
            s = m(r, t, n);
          return null != s && e.push([n, s, t]), e;
        }, []);
      }
      function R(e) {
        let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
          i = e
            .map(e => {
              let [t, n, i] = e;
              if (
                t === c.KeyboardDeviceTypes.KEYBOARD_KEY ||
                t === c.KeyboardDeviceTypes.KEYBOARD_MODIFIER_KEY
              ) {
                var r;
                return null !== (r = S(null != i ? [t, n, i] : [t, n])) &&
                  void 0 !== r
                  ? r
                  : "UNK".concat(n);
              }
              if (t === c.KeyboardDeviceTypes.MOUSE_BUTTON)
                return "mouse".concat(n);
              if (t === c.KeyboardDeviceTypes.GAMEPAD_BUTTON)
                return "gamepad".concat(n);
              else return "dev".concat(t, ",").concat(n);
            })
            .filter(l.isNotNullish);
        if (!t) return i.join("+");
        {
          let e =
            -1 !== n.g.navigator.appVersion.indexOf("Mac OS X") ? i.map(g) : i;
          return e.join(" + ").toUpperCase();
        }
      }
    },
    788235: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return l;
          },
        }),
        n("424973");
      var i = n("49111");
      let r = [],
        s = !1;
      function a() {
        let e = window.navigator.connection;
        return null == e
          ? {
              type: i.NetworkConnectionTypes.UNKNOWN,
              effectiveSpeed: i.NetworkConnectionSpeeds.UNKNOWN,
            }
          : {
              type: null != e.type ? e.type : i.NetworkConnectionTypes.UNKNOWN,
              effectiveSpeed: e.effectiveType,
            };
      }
      function o() {
        let e = a();
        r.forEach(t => t(e));
      }
      var l = {
        addOnlineCallback(e) {
          window.addEventListener("online", e);
        },
        removeOnlineCallback(e) {
          window.removeEventListener("online", e);
        },
        addOfflineCallback(e) {
          window.addEventListener("offline", e);
        },
        removeOfflineCallback(e) {
          window.removeEventListener("offline", e);
        },
        addChangeCallback(e) {
          var t;
          (t = e),
            r.push(t),
            (function () {
              if (!0 === s) return;
              let e = window.navigator.connection;
              null != e && ((s = !0), e.addEventListener("change", o));
            })();
        },
        removeChangeCallback(e) {
          !(function (e) {
            let t = r.indexOf(e);
            -1 !== t &&
              (r.splice(t, 1),
              !(function () {
                if (!1 === s) return;
                let e = window.navigator.connection;
                null != e &&
                  0 === r.length &&
                  null != e &&
                  (e.removeEventListener("change", o), (s = !1));
              })());
          })(e);
        },
        getNetworkInformation: () => Promise.resolve(a()),
        isOnline() {
          let e = navigator.onLine;
          return void 0 === e || e;
        },
      };
    },
    819068: function (e, t, n) {
      "use strict";
      let i, r;
      n.r(t),
        n.d(t, {
          OVERLAY_VERSION: function () {
            return a;
          },
          OVERLAY_DEFAULT_RESOLUTION: function () {
            return o;
          },
          OVERLAY_MIN_RESOLUTION: function () {
            return l;
          },
          OVERLAY_LAYOUT_ID: function () {
            return u;
          },
          DEV_PID: function () {
            return c;
          },
          getPID: function () {
            return f;
          },
          setPID: function () {
            return E;
          },
          getRPCAuthToken: function () {
            return p;
          },
          validResolution: function () {
            return h;
          },
          setOutOfProcessSupport: function () {
            return _;
          },
          supportsOutOfProcess: function () {
            return S;
          },
          isOutOfProcess: function () {
            return m;
          },
        }),
        n("313619"),
        n("654714"),
        n("287168"),
        n("956660"),
        n("222007"),
        n("121338");
      var s = n("773336");
      n("49111");
      let a = 2,
        o = { width: 3840, height: 2160 },
        l = { width: 768, height: 432 },
        u = "overlay_default",
        c = -2,
        d = !1;
      function f() {
        var e;
        if (void 0 !== i) return i;
        let t = new URLSearchParams(window.location.search),
          n = null !== (e = t.get("pid")) && void 0 !== e ? e : "",
          r = parseInt(n, 10);
        return isNaN(r) && (r = -1), (i = r);
      }
      function E(e) {
        m() && (i = e);
      }
      function p() {
        let e = new URLSearchParams(window.location.search);
        return e.get("rpc_auth_token");
      }
      function h(e) {
        return (
          !s.isPlatformEmbedded || (e.width >= l.width && e.height >= l.height)
        );
      }
      function _(e) {
        d = e;
      }
      function S() {
        return d;
      }
      function m() {
        var e;
        if (void 0 !== r) return r;
        let t = new URLSearchParams(window.location.search);
        return (r =
          (null !== (e = t.get("oop")) && void 0 !== e ? e : "") === "true");
      }
    },
    71185: function (e, t, n) {
      "use strict";
      function i(e) {
        let {
          getFocusableElements: t,
          getActiveElement: n,
          scrollToStart: i,
          scrollToEnd: r,
        } = e;
        async function s(e) {
          let r = (null == e ? void 0 : e.from) || n();
          if (null == r) return null;
          let s = (function (e) {
            var n;
            let i = t();
            return null !==
              (n = i.find(
                t =>
                  !!(
                    e.compareDocumentPosition(t) &
                    (Node.DOCUMENT_POSITION_FOLLOWING |
                      Node.DOCUMENT_POSITION_CONTAINED_BY)
                  )
              )) && void 0 !== n
              ? n
              : null;
          })(r);
          return null == s && (null == e ? void 0 : e.wrap)
            ? (await (null == i ? void 0 : i()), a())
            : s;
        }
        function a() {
          var e;
          let n = t();
          return null !== (e = n[0]) && void 0 !== e ? e : null;
        }
        function o() {
          var e;
          let n = t();
          return null !== (e = n[n.length - 1]) && void 0 !== e ? e : null;
        }
        return {
          getNextFocusableElement: s,
          getPreviousFocusableElement: async function e(e) {
            let i = (null == e ? void 0 : e.from) || n();
            if (null == i) return null;
            let s = (function (e) {
              let n = t();
              for (let t = n.length - 1; t >= 0; t--) {
                let i = n[t];
                if (
                  e.compareDocumentPosition(i) &
                  (Node.DOCUMENT_POSITION_PRECEDING |
                    Node.DOCUMENT_POSITION_CONTAINED_BY)
                )
                  return i;
              }
              return null;
            })(i);
            return null == s && (null == e ? void 0 : e.wrap)
              ? (await (null == r ? void 0 : r()), o())
              : s;
          },
          getFirstFocusableElement: a,
          getLastFocusableElement: o,
        };
      }
      n.r(t),
        n.d(t, {
          createFocusManager: function () {
            return i;
          },
        });
    },
    909283: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          addFocusSubscriber: function () {
            return r;
          },
          notifyFocusSubscribers: function () {
            return s;
          },
        }),
        n("222007");
      let i = new Map();
      function r(e, t) {
        let n = i.get(e);
        return (
          null == n && ((n = new Set()), i.set(e, n)),
          n.add(t),
          () => (null == n ? void 0 : n.delete(t))
        );
      }
      function s(e, t, n) {
        let r = i.get(e);
        if (null != r) for (let e of r) e(t, n);
      }
    },
    585463: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          GridActionType: function () {
            return r;
          },
          default: function () {
            return l;
          },
        });
      var i,
        r,
        s = n("942367");
      function a(e, t) {
        return Number.isNaN(e) ? t : Number.isNaN(t) ? e : Math.max(e, t);
      }
      function o(e, t) {
        return Number.isNaN(e) ? t : Number.isNaN(t) ? e : Math.min(e, t);
      }
      ((i = r || (r = {})).UPDATE_COLUMN_COUNTS = "UPDATE_COLUMN_COUNTS"),
        (i.SET_FOCUSED_POSITION = "SET_FOCUSED_POSITION");
      function l(e, t) {
        var n, i, r, l;
        switch (t.type) {
          case s.ActionType.NAVIGATE_UP:
            return (function (e, t) {
              let n = a(0, e.focusedY - 1);
              return {
                ...e,
                focusedX: o(e.columnCounts[n] - 1, e.focusedX),
                focusedY: n,
              };
            })(e, 0);
          case s.ActionType.NAVIGATE_DOWN:
            return (function (e, t) {
              let n = o(e.focusedY + 1, e.columnCounts.length - 1);
              return {
                ...e,
                focusedX: o(e.columnCounts[n] - 1, e.focusedX),
                focusedY: n,
              };
            })(e, 0);
          case s.ActionType.NAVIGATE_RIGHT:
            return (function (e, t) {
              let n = e.focusedY === e.columnCounts.length - 1,
                i = !n && e.focusedX + 1 === e.columnCounts[e.focusedY],
                r = i ? 0 : o(e.focusedX + 1, e.columnCounts[e.focusedY] - 1),
                s = i ? e.focusedY + 1 : e.focusedY;
              return { ...e, focusedX: r, focusedY: s };
            })(e, 0);
          case s.ActionType.NAVIGATE_LEFT:
            return (function (e, t) {
              let n = 0 === e.focusedY,
                i = !n && 0 === e.focusedX,
                r = i ? e.focusedY - 1 : e.focusedY,
                s = i ? e.columnCounts[r] - 1 : a(0, e.focusedX - 1);
              return { ...e, focusedX: s, focusedY: r };
            })(e, 0);
          case s.ActionType.NAVIGATE_INLINE_START:
            return (n = 0), { ...e, focusedX: 0 };
          case s.ActionType.NAVIGATE_INLINE_END:
            return (
              (r = 0), { ...(i = e), focusedX: i.columnCounts[i.focusedY] - 1 }
            );
          case s.ActionType.NAVIGATE_START:
            return (l = 0), { ...e, focusedX: 0, focusedY: 0 };
          case s.ActionType.NAVIGATE_END:
            return (function (e, t) {
              let n = e.columnCounts.length - 1;
              return { ...e, focusedX: e.columnCounts[n] - 1, focusedY: n };
            })(e, 0);
          case "UPDATE_COLUMN_COUNTS":
            return (function (e, t) {
              let { columnCounts: n } = t,
                i = o(a(0, n.length - 1), e.focusedY);
              return {
                ...e,
                columnCounts: n,
                focusedX: o(null == n[i] ? 0 : n[i] - 1, e.focusedX),
                focusedY: i,
              };
            })(e, t);
          case "SET_FOCUSED_POSITION":
            return (function (e, t) {
              let { x: n, y: i } = t,
                r = a(0, o(i, e.columnCounts.length - 1));
              return {
                ...e,
                focusedX: a(0, o(n, e.columnCounts[r] - 1)),
                focusedY: r,
              };
            })(e, t);
          case s.ActionType.SELECT_FOCUSED_ITEM:
            break;
          default:
            console.warn(
              "Grid navigator was given an unhandled action ".concat(t.type)
            );
        }
        return e;
      }
    },
    533619: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          findFirstVisibleItem: function () {
            return r;
          },
          findLastVisibleItem: function () {
            return s;
          },
          isItemVisible: function () {
            return a;
          },
        }),
        n("222007");
      var i = n("74139");
      function r(e, t) {
        return new Promise(n => {
          let r = new IntersectionObserver(
            e => {
              let t = 0,
                s = null;
              for (let {
                isIntersecting: a,
                intersectionRatio: o,
                target: l,
              } of e) {
                if (a && 1 === o) {
                  r.disconnect();
                  let e = l.getAttribute(i.LIST_ITEM_ID_ATTRIBUTE);
                  if (null != e) return n(e);
                }
                o > t &&
                  ((t = o), (s = l.getAttribute(i.LIST_ITEM_ID_ATTRIBUTE)));
              }
              r.disconnect(), n(s);
            },
            { root: e }
          );
          for (let e of t) r.observe(e);
        });
      }
      function s(e, t) {
        return new Promise(n => {
          let r = new IntersectionObserver(
            e => {
              let t = 0,
                s = null;
              for (let a = e.length - 1; a >= 0; a--) {
                let {
                  isIntersecting: o,
                  intersectionRatio: l,
                  target: u,
                } = e[a];
                if (o && 1 === l) {
                  r.disconnect();
                  let e = u.getAttribute(i.LIST_ITEM_ID_ATTRIBUTE);
                  if (null != e) return n(e);
                }
                l > t &&
                  ((t = l), (s = u.getAttribute(i.LIST_ITEM_ID_ATTRIBUTE)));
              }
              r.disconnect(), n(s);
            },
            { root: e }
          );
          for (let e of t) r.observe(e);
        });
      }
      function a(e, t) {
        let n =
          arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 0.5;
        return new Promise(i => {
          let r = new IntersectionObserver(
            e => {
              let t = e[0];
              r.disconnect(), i(t.intersectionRatio >= n);
            },
            { root: e }
          );
          r.observe(t);
        });
      }
    },
    974667: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          createListItemId: function () {
            return l.createListItemId;
          },
          default: function () {
            return d;
          },
        }),
        n("222007");
      var i = n("884691"),
        r = n("71185"),
        s = n("909283"),
        a = n("533619"),
        o = n("942367"),
        l = n("74139"),
        u = n("355262");
      function c(e, t) {
        var n;
        let i = null !== (n = t.current) && void 0 !== n ? n : document,
          r = i.querySelectorAll(
            "[".concat(l.LIST_ITEM_ID_ATTRIBUTE, '^="').concat(e, '"]')
          );
        return Array.from(r);
      }
      function d(e) {
        let {
            id: t,
            defaultFocused: n,
            isEnabled: u,
            scrollToStart: d,
            scrollToEnd: f,
            onNavigatePreviousAtStart: E,
            onNavigateNextAtEnd: p,
            setFocus: h,
            setFocusOnList: _,
            preserveFocusPosition: S = !0,
            useVirtualFocus: m = !1,
            wrap: T = !1,
            orientation: g = o.Orientations.VERTICAL,
            disableClickOnSpace: I = !1,
          } = e,
          C = i.useRef(n ? (0, l.createListItemId)(t, n) : null),
          v = i.useRef(!1),
          A = i.useRef(null),
          R = i.useRef(u);
        function N(e) {
          var t;
          return (
            null !== (t = A.current) && void 0 !== t ? t : document
          ).querySelector(e);
        }
        function O(e) {
          var t;
          null === (t = N(e)) || void 0 === t || t.focus();
        }
        i.useLayoutEffect(() => {
          R.current = u;
        }, [u]);
        let D = i.useCallback(
            (e, t) => {
              if (R.current) {
                let n = null != h ? h : O;
                n(e, t);
              }
            },
            [h]
          ),
          y = i.useCallback(
            e => {
              if (R.current) {
                let t = null != _ ? _ : O;
                t(e);
              }
            },
            [_]
          ),
          P = i.useCallback(
            e => {
              C.current = e;
              let n = (0, l.createSelector)(e),
                i = (0, l.getItemId)(e);
              D(n, i), (0, s.notifyFocusSubscribers)(t, i, S);
            },
            [t, S, D]
          ),
          L = i.useMemo(
            () =>
              (0, r.createFocusManager)({
                getFocusableElements: () => c(t, A),
                getActiveElement() {
                  var e;
                  return null === (e = A.current) || void 0 === e
                    ? void 0
                    : e.ownerDocument.activeElement;
                },
                scrollToStart: d,
                scrollToEnd: f,
              }),
            [t, d, f]
          ),
          [b, M] = i.useState(!1),
          U = i.useRef(b);
        i.useLayoutEffect(() => {
          U.current = b;
        }, [b]),
          i.useLayoutEffect(() => {
            let e = A.current;
            if (null != e) {
              if (u)
                return (
                  e.addEventListener("focusin", n),
                  e.addEventListener("focusout", i),
                  e.addEventListener("focus", r),
                  e.addEventListener("scroll", s, { passive: !0 }),
                  () => {
                    e.removeEventListener("focusin", n),
                      e.removeEventListener("focusout", i),
                      e.removeEventListener("focus", r),
                      e.removeEventListener("scroll", s);
                  }
                );
            }
            function n() {
              M(!0);
            }
            function i(e) {
              !e.currentTarget.contains(e.relatedTarget) &&
                (M(!1),
                requestAnimationFrame(() => {
                  let e = C.current;
                  if (null !== e) {
                    let n = (0, l.createSelector)(e);
                    null == N(n) &&
                      y((0, l.createSelector)(t, l.LIST_ID_ATTRIBUTE));
                  }
                }));
            }
            async function r() {
              let e = A.current,
                n = U.current;
              if (n || null == e) return;
              let i = C.current;
              if (S && null !== i) {
                let t = (0, l.createSelector)(i),
                  n = N(t);
                if (null != n) {
                  if (!0 !== v.current) return D(t, (0, l.getItemId)(i));
                  {
                    let r = await (0, a.isItemVisible)(e, n);
                    if (r) return D(t, (0, l.getItemId)(i));
                  }
                }
              }
              let r = await (0, a.findFirstVisibleItem)(e, c(t, A));
              null !== r && P(r);
            }
            function s() {
              v.current = !0;
            }
          }, [u, t, S, D, _, y, P]);
        let G = i.useMemo(
            () => ({
              wrap: T,
              get from() {
                if (!m) return;
                let t = C.current;
                if (null != t) {
                  var e;
                  let n = (0, l.createSelector)(t);
                  return null !== (e = N(n)) && void 0 !== e ? e : void 0;
                }
                return;
              },
            }),
            [m, T]
          ),
          w = i.useCallback(async () => {
            let e = await L.getNextFocusableElement(G),
              t = null == e ? void 0 : e.getAttribute(l.LIST_ITEM_ID_ATTRIBUTE);
            null != t ? P(t) : null == e && null != p && p();
          }, [L, G, p, P]),
          k = i.useCallback(async () => {
            let e = await L.getPreviousFocusableElement(G),
              t = null == e ? void 0 : e.getAttribute(l.LIST_ITEM_ID_ATTRIBUTE);
            null != t ? P(t) : null == e && null != E && E();
          }, [L, G, E, P]),
          x = i.useCallback(
            e => {
              if (!R.current || (!m && !U.current)) return;
              let n =
                  g === o.Orientations.HORIZONTAL ? o.Keys.RIGHT : o.Keys.DOWN,
                i = g === o.Orientations.HORIZONTAL ? o.Keys.LEFT : o.Keys.UP;
              switch (e.key) {
                case n:
                  e.stopPropagation(), e.preventDefault(), w();
                  return;
                case i:
                  e.stopPropagation(), e.preventDefault(), k();
                  return;
                case o.Keys.HOME:
                  e.stopPropagation(),
                    e.preventDefault(),
                    d().then(() => {
                      var e;
                      let n = c(t, A),
                        i =
                          null === (e = n[0]) || void 0 === e
                            ? void 0
                            : e.getAttribute(l.LIST_ITEM_ID_ATTRIBUTE);
                      null != i && P(i);
                    });
                  return;
                case o.Keys.END:
                  e.stopPropagation(),
                    e.preventDefault(),
                    f().then(() => {
                      var e;
                      let n = c(t, A),
                        i =
                          null === (e = n[n.length - 1]) || void 0 === e
                            ? void 0
                            : e.getAttribute(l.LIST_ITEM_ID_ATTRIBUTE);
                      null != i && P(i);
                    });
                  return;
                case o.Keys.SPACE:
                case o.Keys.ENTER: {
                  if ((e.key === o.Keys.SPACE && I) || e.repeat) return;
                  let t = C.current;
                  if (null != t) {
                    var r;
                    let n = (0, l.createSelector)(t),
                      i = N(n),
                      s =
                        null !== (r = null == i ? void 0 : i.ownerDocument) &&
                        void 0 !== r
                          ? r
                          : document,
                      a = m || i === s.activeElement;
                    null != i &&
                      a &&
                      (e.preventDefault(),
                      e.stopPropagation(),
                      null == i || i.click());
                  }
                }
              }
            },
            [w, k, t, g, f, d, P, m]
          ),
          F = i.useCallback(
            e => {
              let n = null != e ? (0, l.createListItemId)(t, e) : null;
              C.current = n;
            },
            [t]
          );
        return i.useMemo(
          () => ({
            id: t,
            containerProps: { onKeyDown: x, ref: A, tabIndex: b && S ? -1 : 0 },
            orientation: g,
            setFocus: F,
            async focusLastVisibleItem() {
              var e;
              let n = await (0, a.findLastVisibleItem)(
                null !== (e = A.current) && void 0 !== e ? e : document.body,
                c(t, A)
              );
              null !== n && P(n);
            },
            async focusFirstVisibleItem() {
              var e;
              let n = await (0, a.findFirstVisibleItem)(
                null !== (e = A.current) && void 0 !== e ? e : document.body,
                c(t, A)
              );
              null !== n && P(n);
            },
            focusPreviousItem: k,
            focusNextItem: w,
            focusedItemId() {
              let e = C.current;
              return e ? (0, l.getItemId)(e) : null;
            },
          }),
          [t, x, g, b, S, F, k, w, P]
        );
      }
      n.es(u, t);
    },
    355262: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ListContainerContext: function () {
            return c;
          },
          useListItem: function () {
            return d;
          },
          useTreeItem: function () {
            return f;
          },
          ListNavigatorItem: function () {
            return E;
          },
          useListContainerProps: function () {
            return p;
          },
          getContainerPropsFromNavigator: function () {
            return h;
          },
          ListNavigatorContainer: function () {
            return _;
          },
          ListNavigatorProvider: function () {
            return S;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("909283"),
        a = n("942367"),
        o = n("74139");
      let l = {
          id: "NO_LIST",
          onKeyDown() {},
          orientation: a.Orientations.VERTICAL,
          ref: r.createRef(),
          tabIndex: -1,
        },
        u = r.createContext({ id: "NO_LIST", setFocus() {} }),
        c = r.createContext(l);
      function d(e) {
        let [t, n] = r.useState(-1),
          i = r.useContext(u),
          { id: a, setFocus: l } = i,
          c = r.useCallback(() => l(e), [e, l]);
        return (
          r.useLayoutEffect(
            () =>
              (0, s.addFocusSubscriber)(a, (t, i) => {
                n(i && t === e ? 0 : -1);
              }),
            [e, a]
          ),
          {
            role: "listitem",
            [o.LIST_ITEM_ID_ATTRIBUTE]: (0, o.createListItemId)(a, e),
            tabIndex: t,
            onFocus: c,
          }
        );
      }
      function f(e) {
        let t = d(e);
        return { ...t, role: "treeitem" };
      }
      function E(e) {
        let { children: t, id: n } = e,
          i = d(n);
        return t(i);
      }
      function p() {
        let e = r.useContext(c),
          { id: t, onKeyDown: n, ref: i, tabIndex: s } = e;
        return {
          role: "list",
          tabIndex: s,
          [o.LIST_ID_ATTRIBUTE]: t,
          onKeyDown: n,
          ref: i,
        };
      }
      function h(e) {
        let {
          id: t,
          containerProps: { onKeyDown: n, ref: i, tabIndex: r },
          orientation: s,
        } = e;
        return {
          role: "list",
          onKeyDown: n,
          ref: i,
          [o.LIST_ID_ATTRIBUTE]: t,
          tabIndex: r,
        };
      }
      function _(e) {
        let { children: t } = e,
          n = p();
        return t(n);
      }
      function S(e) {
        let { children: t, navigator: n } = e,
          {
            id: s,
            setFocus: a,
            containerProps: { onKeyDown: o, ref: l, tabIndex: d },
            orientation: f,
          } = n,
          E = r.useMemo(() => ({ id: s, setFocus: a }), [s, a]),
          p = r.useMemo(
            () => ({
              onKeyDown: o,
              orientation: f,
              ref: l,
              id: s,
              tabIndex: d,
            }),
            [o, f, l, s, d]
          );
        return (0, i.jsxs)(c.Provider, {
          value: p,
          children: [(0, i.jsx)(u.Provider, { value: E, children: t }), " "],
        });
      }
    },
    134322: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ListActionType: function () {
            return r;
          },
          default: function () {
            return a;
          },
        });
      var i,
        r,
        s = n("942367");
      ((i = r || (r = {})).UPDATE_ITEM_COUNT = "UPDATE_ITEM_COUNT"),
        (i.SET_FOCUSED_INDEX = "SET_FOCUSED_INDEX");
      function a(e, t) {
        var n, i, r, a, o, l, u;
        switch (t.type) {
          case s.ActionType.NAVIGATE_UP:
            return (
              (i = 0),
              { ...(n = e), focusedIndex: Math.max(0, n.focusedIndex - 1) }
            );
          case s.ActionType.NAVIGATE_DOWN:
            return (
              (a = 0),
              {
                ...(r = e),
                focusedIndex: Math.min(r.focusedIndex + 1, r.itemCount - 1),
              }
            );
          case s.ActionType.NAVIGATE_START:
            return (o = 0), { ...e, focusedIndex: 0 };
          case s.ActionType.NAVIGATE_END:
            return (u = 0), { ...(l = e), focusedIndex: l.itemCount - 1 };
          case "UPDATE_ITEM_COUNT":
            return (function (e, t) {
              let { itemCount: n } = t;
              return {
                ...e,
                itemCount: n,
                focusedIndex: Math.min(n - 1, e.focusedIndex),
              };
            })(e, t);
          case "SET_FOCUSED_INDEX":
            return (function (e, t) {
              let { index: n } = t;
              return {
                ...e,
                focusedIndex: Math.max(0, Math.min(n, e.itemCount - 1)),
              };
            })(e, t);
          case s.ActionType.SELECT_FOCUSED_ITEM:
            break;
          default:
            console.warn(
              "Listbox navigator was given an unhandled action ".concat(t.type)
            );
        }
        return e;
      }
    },
    429787: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MenuActionType: function () {
            return i;
          },
          default: function () {
            return d;
          },
        }),
        n("424973"),
        n("222007"),
        n("70102");
      var i,
        r,
        s = n("942367");
      function a(e, t) {
        return e.findIndex(e => t === e.key);
      }
      function o(e) {
        return e.focusPath[e.focusPath.length - 1];
      }
      function l(e) {
        let t = e.items;
        for (let n = 0; n < e.focusPath.length - 1; n++) {
          if (null == t) return;
          let i = a(t, e.focusPath[n]);
          t = t[i].children;
        }
        return t;
      }
      function u(e, t) {
        let n = e,
          i = [];
        for (let e = 0; e < t.length && null != n; e++) {
          let r = t[e],
            s = a(n, r);
          if (s < 0 || s >= n.length) {
            let e = n[0];
            null != e && i.push(e.key);
            break;
          }
          i.push(r), (n = n[s].children);
        }
        return i;
      }
      ((r = i || (i = {})).UPDATE_ITEMS = "UPDATE_ITEMS"),
        (r.SET_FOCUS_PATH = "SET_FOCUS_PATH");
      function c(e) {
        let t = o(e),
          n = l(e);
        return null == n ? -1 : a(n, t);
      }
      function d(e, t) {
        switch (t.type) {
          case s.ActionType.NAVIGATE_UP:
            return (function (e, t) {
              let n = o(e),
                i = l(e);
              if (null == i) return e;
              let r = a(i, n),
                s = (r - 1) % i.length;
              if ((s < 0 && (s = i.length - 1), null == i[s])) return e;
              let u = {
                ...e,
                focusPath: [...e.focusPath.slice(0, -1), i[s].key],
              };
              return { ...u, focusIndex: c(u) };
            })(e, 0);
          case s.ActionType.NAVIGATE_DOWN:
            return (function (e, t) {
              let n = o(e),
                i = l(e);
              if (null == i) return e;
              let r = a(i, n),
                s = (r + 1) % i.length;
              if (null == i[s]) return e;
              let u = {
                ...e,
                focusPath: [...e.focusPath.slice(0, -1), i[s].key],
              };
              return { ...u, focusIndex: c(u) };
            })(e, 0);
          case s.ActionType.NAVIGATE_IN:
            return (function (e, t) {
              var n;
              let i = o(e),
                r = l(e);
              if (null == r) return e;
              let s = r[a(r, i)],
                u =
                  null == s
                    ? void 0
                    : null === (n = s.children) || void 0 === n
                      ? void 0
                      : n[0];
              if (null == u) return e;
              let d = { ...e, focusPath: [...e.focusPath, u.key] };
              return { ...d, focusIndex: c(d) };
            })(e, 0);
          case s.ActionType.NAVIGATE_OUT:
            return (function (e, t) {
              if (e.focusPath.length <= 1) return e;
              let n = { ...e, focusPath: e.focusPath.slice(0, -1) };
              return { ...n, focusIndex: c(n) };
            })(e, 0);
          case "UPDATE_ITEMS":
            return (function (e, t) {
              let { items: n } = t,
                i = { ...e, items: n, focusPath: u(n, e.focusPath) };
              return { ...i, focusIndex: c(i) };
            })(e, t);
          case "SET_FOCUS_PATH":
            return (function (e, t) {
              let { path: n } = t,
                i = { ...e, focusPath: u(e.items, n) };
              return { ...i, focusIndex: c(i) };
            })(e, t);
          case s.ActionType.SELECT_FOCUSED_ITEM:
            break;
          default:
            throw Error(
              "Menu navigator was given an unhandled action ".concat(t.type)
            );
        }
        return e;
      }
    },
    942367: function (e, t, n) {
      "use strict";
      var i, r, s, a, o, l;
      n.r(t),
        n.d(t, {
          ActionType: function () {
            return i;
          },
          Keys: function () {
            return r;
          },
          Orientations: function () {
            return s;
          },
        }),
        ((a = i || (i = {})).NAVIGATE_UP = "NAVIGATE_UP"),
        (a.NAVIGATE_DOWN = "NAVIGATE_DOWN"),
        (a.NAVIGATE_LEFT = "NAVIGATE_LEFT"),
        (a.NAVIGATE_RIGHT = "NAVIGATE_RIGHT"),
        (a.NAVIGATE_START = "NAVIGATE_START"),
        (a.NAVIGATE_END = "NAVIGATE_END"),
        (a.NAVIGATE_INLINE_START = "NAVIGATE_INLINE_START"),
        (a.NAVIGATE_INLINE_END = "NAVIGATE_INLINE_END"),
        (a.NAVIGATE_CROSSLINE_START = "NAVIGATE_CROSSLINE_START"),
        (a.NAVIGATE_CROSSLINE_END = "NAVIGATE_CROSSLINE_END"),
        (a.NAVIGATE_NEXT_INTERACTABLE = "NAVIGATE_NEXT_INTERACTABLE"),
        (a.NAVIGATE_PREV_INTERACTABLE = "NAVIGATE_PREV_INTERACTABLE"),
        (a.NAVIGATE_IN = "NAVIGATE_IN"),
        (a.NAVIGATE_OUT = "NAVIGATE_OUT"),
        (a.SELECT_FOCUSED_ITEM = "SELECT_FOCUSED_ITEM"),
        (a.QUERY_START = "QUERY_START"),
        (a.QUERY_CLEAR = "QUERY_CLEAR"),
        ((o = r || (r = {})).ENTER = "Enter"),
        (o.SPACE = " "),
        (o.ESCAPE = "Escape"),
        (o.TAB = "Tab"),
        (o.F10 = "F10"),
        (o.HOME = "Home"),
        (o.END = "End"),
        (o.UP = "ArrowUp"),
        (o.DOWN = "ArrowDown"),
        (o.LEFT = "ArrowLeft"),
        (o.RIGHT = "ArrowRight"),
        (o.PAGE_UP = "PageUp"),
        (o.PAGE_DOWN = "PageDown"),
        ((l = s || (s = {})).HORIZONTAL = "horizontal"),
        (l.VERTICAL = "vertical");
    },
    74139: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          LIST_ITEM_ID_ATTRIBUTE: function () {
            return i;
          },
          LIST_ID_ATTRIBUTE: function () {
            return r;
          },
          createListItemId: function () {
            return s;
          },
          getItemId: function () {
            return a;
          },
          createSelector: function () {
            return o;
          },
          makeId: function () {
            return l;
          },
          makeGridId: function () {
            return u;
          },
          throttle: function () {
            return c;
          },
          HandlerMemoizer: function () {
            return d;
          },
        }),
        n("222007");
      let i = "data-list-item-id",
        r = "data-list-id";
      function s(e, t) {
        return "".concat(e).concat("___").concat(t);
      }
      function a(e) {
        return e.split("___")[1];
      }
      function o(e) {
        let t =
          arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : i;
        return "[".concat(t, '="').concat(e, '"]');
      }
      function l(e, t) {
        return "".concat(e, "-").concat(t);
      }
      function u(e, t, n) {
        return "".concat(e, "-").concat(t, "-").concat(n);
      }
      function c(e, t) {
        let n = !1;
        return function () {
          for (var i = arguments.length, r = Array(i), s = 0; s < i; s++)
            r[s] = arguments[s];
          !n && (e(...r), (n = !0), setTimeout(() => (n = !1), t));
        };
      }
      class d {
        get(e) {
          let t = this.handlers.get(e);
          return (
            null == t && ((t = this.makeHandler(e)), this.handlers.set(e, t)), t
          );
        }
        clean() {
          delete this.handlers, (this.handlers = new Map());
        }
        constructor(e) {
          (this.makeHandler = e),
            (this.handlers = new Map()),
            (this.makeHandler = e);
        }
      }
    },
    880317: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ActionType: function () {
            return i.ActionType;
          },
          useGridNavigator: function () {
            return r.default;
          },
          useListNavigator: function () {
            return s.default;
          },
          useMenuNavigator: function () {
            return a.default;
          },
        });
      var i = n("942367"),
        r = n("857029");
      n.es(r, t);
      var s = n("389752");
      n.es(s, t);
      var a = n("881545");
      n.es(a, t);
    },
    857029: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          GridActionType: function () {
            return r.GridActionType;
          },
          default: function () {
            return c;
          },
        }),
        n("222007");
      var i = n("884691"),
        r = n("585463"),
        s = n("942367"),
        a = n("74139");
      let o = [s.Keys.TAB];
      function l(e, t, n) {
        return null != t && null != n
          ? "#".concat((0, a.makeGridId)(e, t, n))
          : "[data-ref-id=".concat(e, "]");
      }
      function u(e) {
        return document.querySelector(e);
      }
      function c(e) {
        let {
            navId: t,
            columnCounts: n,
            focusedX: c = 0,
            focusedY: d = 0,
            onSelect: f,
            prepareFocus: E,
            getNewFocusPosition: p,
            maintainFocusPosition: h = !0,
            enabled: _ = !0,
            onDispatch: S,
            autoFocusElement: m = !0,
            useVirtualFocus: T = !1,
          } = e,
          g = i.useCallback(
            (e, t) => {
              let n = (0, r.default)(e, t);
              return null != S && S(e, n, t), n;
            },
            [S]
          ),
          [I, C] = i.useReducer(g, {
            focusedX: c,
            focusedY: d,
            columnCounts: n,
          }),
          { columnCounts: v, focusedX: A, focusedY: R } = I,
          [N] = i.useState(() => (0, a.throttle)(C, 16));
        return (
          i.useEffect(() => {
            C({ type: r.GridActionType.UPDATE_COLUMN_COUNTS, columnCounts: n });
          }, [n]),
          (function (e) {
            let {
                navId: t,
                columnCounts: n,
                focusedX: c,
                focusedY: d,
                onSelect: f,
                prepareFocus: E,
                getNewFocusPosition: p,
                dispatch: h,
                maintainFocusPosition: _,
                enabled: S,
                autoFocusElement: m,
                useVirtualFocus: T,
              } = e,
              g = i.useRef();
            g.current = S;
            let I = u(l(t, c, d)),
              [C, v] = i.useState(!1),
              [A, R] = i.useState(!1),
              [N, O] = i.useState(!1),
              [D] = i.useState(
                () =>
                  new a.HandlerMemoizer(e => {
                    let [t, n] = e.split(",").map(Number);
                    return () => {
                      v(!0),
                        h({
                          type: r.GridActionType.SET_FOCUSED_POSITION,
                          x: t,
                          y: n,
                        });
                    };
                  })
              );
            i.useEffect(() => () => D.clean(), [D]);
            let y = i.useCallback(
                e => {
                  if (!g.current || !m) return !1;
                  e.focus();
                },
                [m]
              ),
              P = i.useCallback(
                (e, n) => {
                  let i = l(t, e, n),
                    r = null != E ? E(e, n, i) : Promise.resolve();
                  r.then(() => {
                    let e = u(i);
                    null != e
                      ? (y(e), R(!1))
                      : requestAnimationFrame(() => R(!0));
                  });
                },
                [t, E, y]
              ),
              L = i.useCallback(
                function () {
                  let e =
                      !(arguments.length > 0) ||
                      void 0 === arguments[0] ||
                      arguments[0],
                    [n, i] = null != p ? p(c, d) : [c, d];
                  if (
                    (n !== c || i !== d) &&
                    (h({
                      type: r.GridActionType.SET_FOCUSED_POSITION,
                      x: n,
                      y: i,
                    }),
                    !e)
                  ) {
                    O(!0);
                    return;
                  }
                  let s = u(l(t, n, i));
                  null != s && (O(!0), y(s));
                },
                [h, c, d, p, t, y]
              ),
              [b, M] = i.useState(!1);
            i.useEffect(() => {
              if (!b || !C) return;
              M(!1);
              let e = u(l(t, c, d));
              if (null != e) {
                y(e);
                return;
              }
              v(!1);
              let n = u(l(t));
              null != n && y(n);
            }, [t, b, C, y, c, d]);
            let U = i.useCallback(e => {
              g.current && null == e && M(!0);
            }, []);
            i.useEffect(() => {
              C && A && null != I && (y(I), R(!1));
            }, [A, I]),
              i.useEffect(() => {
                C && (!N && P(c, d), O(!1));
              }, [c, d]);
            let G = i.useCallback(
                e => {
                  if (!g.current) return;
                  if (
                    !T &&
                    o.includes(e.key) &&
                    !(e.shiftKey || e.altKey || e.metaKey || e.ctrlKey) &&
                    e.currentTarget === e.target
                  ) {
                    e.preventDefault(), e.stopPropagation(), L();
                    return;
                  }
                  let t = (function (e) {
                    switch (e.key) {
                      case s.Keys.ENTER:
                        return s.ActionType.SELECT_FOCUSED_ITEM;
                      case s.Keys.UP:
                        return s.ActionType.NAVIGATE_UP;
                      case s.Keys.DOWN:
                        return s.ActionType.NAVIGATE_DOWN;
                      case s.Keys.RIGHT:
                        return s.ActionType.NAVIGATE_RIGHT;
                      case s.Keys.LEFT:
                        return s.ActionType.NAVIGATE_LEFT;
                      case s.Keys.HOME:
                        if (e.ctrlKey) return s.ActionType.NAVIGATE_START;
                        return s.ActionType.NAVIGATE_INLINE_START;
                      case s.Keys.END:
                        if (e.ctrlKey) return s.ActionType.NAVIGATE_END;
                        return s.ActionType.NAVIGATE_INLINE_END;
                    }
                  })(e);
                  switch (t) {
                    case s.ActionType.NAVIGATE_UP:
                    case s.ActionType.NAVIGATE_DOWN:
                    case s.ActionType.NAVIGATE_RIGHT:
                    case s.ActionType.NAVIGATE_LEFT:
                    case s.ActionType.NAVIGATE_INLINE_START:
                    case s.ActionType.NAVIGATE_INLINE_END:
                    case s.ActionType.NAVIGATE_START:
                    case s.ActionType.NAVIGATE_END:
                      let i =
                        0 === n.length ||
                        (0 === c &&
                          0 === d &&
                          t === s.ActionType.NAVIGATE_LEFT);
                      !i && (e.preventDefault(), e.stopPropagation()),
                        h({ type: t });
                      return;
                    case s.ActionType.SELECT_FOCUSED_ITEM:
                      var r;
                      if (
                        (m &&
                          (null == (r = I)
                            ? void 0
                            : r.ownerDocument.activeElement) !== r) ||
                        e.repeat
                      )
                        return;
                      e.preventDefault(),
                        e.stopPropagation(),
                        h({ type: t }),
                        null != f ? f(c, d, e) : null != I && I.click();
                  }
                },
                [L, h, m, I, f, c, d]
              ),
              w = i.useCallback(
                e =>
                  e.currentTarget !== e.target
                    ? (!C && (v(!0), O(!0)), !1)
                    : C
                      ? (L(!1), !1)
                      : void (_ && null != I ? P(c, d) : L(!0)),
                [C, _, I, L, P, c, d]
              ),
              k = i.useCallback(e => {
                if (e.target !== e.currentTarget) {
                  if (e.currentTarget.contains(e.relatedTarget)) return !1;
                  v(!1);
                }
              }, []),
              x = i.useMemo(() => Math.max(...n), [n]),
              F = i.useCallback(
                () => ({
                  role: "grid",
                  "aria-rowcount": n.length,
                  "aria-colcount": x,
                  tabIndex: C && _ ? -1 : 0,
                  "data-ref-id": t,
                  onKeyDown: G,
                  onFocus: w,
                  onBlur: k,
                }),
                [n.length, x, C, _, t, G, w, k]
              ),
              V = i.useCallback(
                (e, n) => {
                  let i = {
                    role: "gridcell",
                    "aria-rowindex": n + 1,
                    "aria-colindex": e + 1,
                    id: (0, a.makeGridId)(t, e, n),
                    tabIndex: _ && e === c && n === d ? 0 : -1,
                    onFocus: D.get("".concat(e, ",").concat(n)),
                  };
                  return e === c && n === d && (i.ref = U), i;
                },
                [t, _, c, d, D, U]
              ),
              B = i.useCallback(
                e => ({ role: "row", "aria-rowindex": e + 1 }),
                []
              ),
              H = i.useMemo(
                () => ({
                  dispatch: h,
                  getContainerProps: F,
                  getItemProps: V,
                  getRowProps: B,
                }),
                [h, F, V, B]
              );
            return H;
          })({
            navId: t,
            columnCounts: v,
            focusedX: A,
            focusedY: R,
            dispatch: N,
            onSelect: f,
            prepareFocus: E,
            getNewFocusPosition: p,
            maintainFocusPosition: h,
            enabled: _,
            autoFocusElement: m,
            useVirtualFocus: T,
          })
        );
      }
    },
    389752: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return d;
          },
        }),
        n("222007");
      var i = n("884691"),
        r = n("134322"),
        s = n("942367"),
        a = n("74139");
      let o = [s.Keys.TAB, s.Keys.UP, s.Keys.DOWN];
      function l(e, t, n) {
        return null != n ? "#".concat(e(t, n)) : "#".concat(t);
      }
      function u(e) {
        return document.querySelector(e);
      }
      function c(e) {
        var t;
        null === (t = document.getElementById(e)) || void 0 === t || t.focus();
      }
      function d(e) {
        let {
            navId: t,
            itemCount: n,
            focusedIndex: d = 0,
            onSelect: f,
            setFocus: E,
            getNewFocusIndex: p,
            maintainFocusPosition: h = !0,
            includeSetSizes: _ = !0,
            focusOnMount: S = !0,
            enabled: m = !0,
            onDispatch: T,
          } = e,
          g = i.useCallback(
            (e, t) => {
              let n = (0, r.default)(e, t);
              return null != T && T(e, n, t), n;
            },
            [T]
          ),
          [I, C] = i.useReducer(g, { focusedIndex: d, itemCount: n }),
          { itemCount: v, focusedIndex: A } = I,
          [R] = i.useState(() => (0, a.throttle)(C, 16));
        return (
          i.useEffect(() => {
            C({ type: r.ListActionType.UPDATE_ITEM_COUNT, itemCount: n });
          }, [n]),
          (function (e) {
            let {
                navId: t,
                itemCount: n,
                focusedIndex: d,
                onSelect: f,
                setFocus: E = c,
                getNewFocusIndex: p,
                dispatch: h,
                maintainFocusPosition: _,
                includeSetSizes: S,
                focusOnMount: m,
                enabled: T,
                makeId: g = a.makeId,
                getIndexFromId: I,
              } = e,
              C = i.useRef(n),
              v = i.useRef(I);
            (v.current = I), (C.current = n);
            let A = i.useRef();
            i.useEffect(() => {
              A.current = T;
            }, [T]);
            let [R, N] = i.useState(!1),
              [O] = i.useState(
                () =>
                  new a.HandlerMemoizer(e => () => {
                    let t =
                      null != v.current && "string" == typeof e
                        ? v.current(e)
                        : e;
                    "number" == typeof t &&
                      !(t < 0) &&
                      h({ type: r.ListActionType.SET_FOCUSED_INDEX, index: t });
                  })
              );
            i.useEffect(() => () => O.clean(), [O]);
            let D = i.useCallback(
                (e, t) => {
                  A.current && E(e, t);
                },
                [E]
              ),
              [y, P] = i.useState(!0);
            i.useEffect(() => {
              if (y && !m) {
                P(!1);
                return;
              }
              D(g(t, d), d);
            }, [d]);
            let L = i.useCallback(
                function () {
                  let e =
                      !(arguments.length > 0) ||
                      void 0 === arguments[0] ||
                      arguments[0],
                    n = null != p ? p(d) : d;
                  n !== d &&
                    h({ type: r.ListActionType.SET_FOCUSED_INDEX, index: n }),
                    e && D(g(t, n), n);
                },
                [g, d, p, h, t, D]
              ),
              b = i.useCallback(
                e => {
                  if (!A.current) return;
                  if (
                    o.includes(e.key) &&
                    !(e.shiftKey || e.altKey || e.metaKey || e.ctrlKey) &&
                    e.currentTarget === e.target
                  ) {
                    e.preventDefault(), e.stopPropagation(), L();
                    return;
                  }
                  let n = (function (e) {
                    switch (e.key) {
                      case s.Keys.ENTER:
                      case s.Keys.SPACE:
                        return s.ActionType.SELECT_FOCUSED_ITEM;
                      case s.Keys.UP:
                        return s.ActionType.NAVIGATE_UP;
                      case s.Keys.DOWN:
                        return s.ActionType.NAVIGATE_DOWN;
                      case s.Keys.HOME:
                        return s.ActionType.NAVIGATE_START;
                      case s.Keys.END:
                        return s.ActionType.NAVIGATE_END;
                    }
                  })(e);
                  switch (n) {
                    case s.ActionType.NAVIGATE_UP:
                    case s.ActionType.NAVIGATE_DOWN:
                    case s.ActionType.NAVIGATE_START:
                    case s.ActionType.NAVIGATE_END:
                      e.preventDefault(), e.stopPropagation(), h({ type: n });
                      return;
                    case s.ActionType.SELECT_FOCUSED_ITEM:
                      var i;
                      let r = u(l(g, t, d));
                      if (
                        (null == (i = r)
                          ? void 0
                          : i.ownerDocument.activeElement) !== i ||
                        e.repeat
                      )
                        return;
                      if (
                        (e.preventDefault(),
                        e.stopPropagation(),
                        h({ type: n }),
                        null != f)
                      ) {
                        f(d);
                        return;
                      }
                      null == r || r.click();
                  }
                },
                [g, t, h, d, L, f]
              ),
              M = i.useCallback(() => {
                R || N(!0);
              }, [R]),
              U = i.useCallback(() => {
                !R && (_ ? D(g(t, d), d) : L(!0));
              }, [g, t, D, _, R, d, L]),
              G = i.useCallback(
                e => {
                  !e.currentTarget.contains(e.relatedTarget) &&
                    requestAnimationFrame(() => {
                      if (null == u(l(g, t, d))) {
                        D(t);
                        return;
                      }
                      N(!1);
                    });
                },
                [g, t, d, D]
              ),
              w = i.useRef(null);
            i.useLayoutEffect(() => {
              let e = w.current;
              if (null != e)
                return (
                  e.addEventListener("focusin", M),
                  e.addEventListener("focus", U),
                  e.addEventListener("focusout", G),
                  () => {
                    e.removeEventListener("focusin", M),
                      e.removeEventListener("focus", U),
                      e.removeEventListener("focusout", G);
                  }
                );
            }, [U, M, G]);
            let k = i.useCallback(
                () => ({
                  role: "list",
                  tabIndex: R && _ ? -1 : 0,
                  id: t,
                  onKeyDown: b,
                  ref: w,
                }),
                [t, R, b, _]
              ),
              x = i.useCallback(
                e => {
                  let { index: n } = e;
                  return {
                    role: "listitem",
                    "aria-setsize": S ? C.current : void 0,
                    "aria-posinset": S ? n + 1 : void 0,
                    id: g(t, n),
                    tabIndex: _ && n === d ? 0 : -1,
                    onFocus: O.get(null != v.current ? g(t, n) : n),
                  };
                },
                [g, t, d, _, O, S]
              ),
              F = i.useMemo(
                () => ({ dispatch: h, getContainerProps: k, getItemProps: x }),
                [h, k, x]
              );
            return F;
          })({
            navId: t,
            itemCount: v,
            focusedIndex: A,
            dispatch: R,
            onSelect: f,
            setFocus: E,
            getNewFocusIndex: p,
            maintainFocusPosition: h,
            includeSetSizes: _,
            focusOnMount: S,
            enabled: m,
          })
        );
      }
    },
    881545: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return o;
          },
        }),
        n("222007");
      var i = n("884691"),
        r = n("429787"),
        s = n("942367"),
        a = n("74139");
      function o(e) {
        let {
            navId: t,
            items: n,
            initialFocusPath: o,
            onSelect: l,
            enabled: u = !0,
            closeMenu: c,
          } = e,
          d = i.useRef(u);
        i.useLayoutEffect(() => {
          d.current = u;
        }, [u]);
        let [f, E] = i.useReducer(r.default, {
            items: n,
            focusPath: o,
            focusIndex: -1,
          }),
          p = i.useMemo(() => (0, a.throttle)(E, 30), [E]);
        i.useEffect(() => {
          E({ type: r.MenuActionType.UPDATE_ITEMS, items: n });
        }, [n]);
        let { focusPath: h } = f,
          [_, S] = i.useState(!1),
          [m, T] = i.useState(!1),
          [{ onItemFocusMemoizer: g, onItemMouseEnterMemoizer: I }] =
            i.useState(() => ({
              onItemFocusMemoizer: new a.HandlerMemoizer(e => () => {
                S(!0),
                  E({
                    type: r.MenuActionType.SET_FOCUS_PATH,
                    path: e.split("--"),
                  });
              }),
              onItemMouseEnterMemoizer: new a.HandlerMemoizer(e => () => {
                T(!1),
                  E({
                    type: r.MenuActionType.SET_FOCUS_PATH,
                    path: e.split("--"),
                  });
              }),
            })),
          C = i.useCallback(
            e => {
              if (!d.current) return;
              e.key === s.Keys.ESCAPE &&
                null != c &&
                (e.stopPropagation(), e.preventDefault(), c());
              let n = (function (e) {
                switch (e.key) {
                  case s.Keys.ENTER:
                  case s.Keys.SPACE:
                    return s.ActionType.SELECT_FOCUSED_ITEM;
                  case s.Keys.UP:
                    return s.ActionType.NAVIGATE_UP;
                  case s.Keys.DOWN:
                    return s.ActionType.NAVIGATE_DOWN;
                  case s.Keys.RIGHT:
                    return s.ActionType.NAVIGATE_IN;
                  case s.Keys.LEFT:
                    return s.ActionType.NAVIGATE_OUT;
                }
              })(e);
              switch (n) {
                case s.ActionType.NAVIGATE_UP:
                case s.ActionType.NAVIGATE_DOWN:
                case s.ActionType.NAVIGATE_IN:
                case s.ActionType.NAVIGATE_OUT:
                  e.preventDefault(),
                    e.stopPropagation(),
                    T(!0),
                    p({ type: n });
                  return;
                case s.ActionType.SELECT_FOCUSED_ITEM:
                  var i, r, o, u, f;
                  if (e.repeat) return;
                  if (e.target.tabIndex >= 0) return;
                  if (
                    (e.preventDefault(),
                    e.stopPropagation(),
                    T(!1),
                    p({ type: n }),
                    null != l)
                  ) {
                    l(h);
                    return;
                  }
                  let E =
                    null !== (i = e.target.ownerDocument) && void 0 !== i
                      ? i
                      : document;
                  let _ =
                    ((u = E),
                    (f =
                      ((r = t),
                      null != (o = h)
                        ? "".concat((0, a.makeId)(r, o.join("--")))
                        : r)),
                    u.getElementById(f));
                  null == _ || _.click();
              }
            },
            [p, t, h, l, c]
          ),
          v = i.useCallback(() => {
            !_ && S(!0);
          }, [_]),
          A = i.useCallback(
            e => {
              e.target !== e.currentTarget &&
                !e.currentTarget.contains(e.relatedTarget) &&
                _ &&
                S(!1);
            },
            [_]
          ),
          R = i.useCallback(() => {
            E({ type: r.MenuActionType.SET_FOCUS_PATH, path: [] }), S(!1);
          }, []),
          N = i.useCallback(e => e.every((e, t) => h[t] === e), [h]),
          O = i.useCallback(
            () => ({
              role: "menu",
              id: t,
              tabIndex: -1,
              onKeyDown: C,
              onFocus: v,
              onBlur: A,
              onMouseLeave: R,
              "aria-activedescendant":
                h.length > 0 ? (0, a.makeId)(t, h.join("--")) : void 0,
            }),
            [t, C, v, A, R, h]
          ),
          D = i.useCallback(
            e => {
              let { path: n } = e;
              return {
                role: "menu",
                tabIndex: -1,
                "aria-activedescendant": N(n)
                  ? (0, a.makeId)(t, h.join("--"))
                  : void 0,
                focusIndex: f.focusIndex,
                isUsingKeyboardNavigation: m,
              };
            },
            [t, h, N, f.focusIndex, m]
          ),
          y = i.useCallback(
            e => {
              let { path: n, hasSubmenu: i = !1, role: r = "menuitem" } = e,
                s = n.join("--"),
                o = i ? { "aria-expanded": N(n), "aria-haspopup": !0 } : {};
              return {
                ...o,
                role: r,
                id: (0, a.makeId)(t, s),
                tabIndex: -1,
                onFocus: g.get(s),
                onMouseEnter: I.get(s),
              };
            },
            [t, N, g, I]
          ),
          P = i.useMemo(
            () => ({
              dispatch: p,
              getContainerProps: O,
              getSubmenuProps: D,
              getItemProps: y,
              isFocused: N,
              isUsingKeyboardNavigation: m,
            }),
            [p, O, D, y, N, m]
          );
        return P;
      }
    },
    868233: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          setAwaitOnline: function () {
            return o;
          },
          importWithRetry: function () {
            return u;
          },
          makeLazy: function () {
            return c;
          },
          LazyLibrary: function () {
            return d;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691");
      let s = function () {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : "transparent";
          return () =>
            (0, i.jsx)("div", {
              style: {
                position: "absolute",
                width: "100%",
                height: "100%",
                backgroundColor: e,
              },
            });
        },
        a = () => Promise.resolve();
      function o(e) {
        a = e;
      }
      let l = e => new Promise(t => setTimeout(t, e));
      async function u(e) {
        let { createPromise: t, webpackId: i } = e,
          r = 500,
          s = 0;
        for (;;)
          try {
            return await t();
          } catch (e) {
            if ((console.log(e), i in n.c))
              throw (
                (console.log(
                  "Module was found in webpack cache so it has loaded from the network and webpack will not retry"
                ),
                e)
              );
            if (s >= 50) throw e;
            await l(r), await a(), (r = Math.min(5e3, 2 * r)), s++;
          }
      }
      function c(e) {
        let {
            createPromise: t,
            webpackId: n,
            renderLoader: a,
            name: o,
            memo: l = !1,
          } = e,
          c = r.lazy(() => u({ createPromise: t, webpackId: n })),
          d = e =>
            (0, i.jsx)(r.Suspense, {
              fallback: null != a ? a() : s()(),
              children: (0, i.jsx)(c, { ...e }),
            });
        return (
          l && (d = r.memo(d)),
          (d.displayName = "Suspense(".concat(o || "Unknown", ")")),
          d
        );
      }
      function d(e) {
        let {
            createPromise: t,
            webpackId: n,
            render: s,
            renderFallback: a,
          } = e,
          [o, l] = r.useState(null);
        return (
          r.useEffect(() => {
            u({ createPromise: t, webpackId: n }).then(e => {
              let { default: t } = e;
              return l(t);
            });
          }, []),
          (0, i.jsx)(i.Fragment, { children: null == o ? a() : s(o) })
        );
      }
    },
    679263: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          CalendarIcon: function () {
            return a;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("669491"),
        s = n("82169");
      let a = e => {
        let {
          width: t = 24,
          height: n = 24,
          color: a = r.default.colors.INTERACTIVE_NORMAL,
          colorClass: o = "",
          ...l
        } = e;
        return (0, i.jsxs)("svg", {
          ...(0, s.default)(l),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: n,
          fill: "none",
          viewBox: "0 0 24 24",
          children: [
            (0, i.jsx)("path", {
              fill: "string" == typeof a ? a : a.css,
              d: "M7 1a1 1 0 0 1 1 1v.75c0 .14.11.25.25.25h7.5c.14 0 .25-.11.25-.25V2a1 1 0 1 1 2 0v.75c0 .14.11.25.25.25H19a3 3 0 0 1 3 3 1 1 0 0 1-1 1H3a1 1 0 0 1-1-1 3 3 0 0 1 3-3h.75c.14 0 .25-.11.25-.25V2a1 1 0 0 1 1-1Z",
              className: o,
            }),
            (0, i.jsx)("path", {
              fill: "string" == typeof a ? a : a.css,
              fillRule: "evenodd",
              d: "M2 10a1 1 0 0 1 1-1h18a1 1 0 0 1 1 1v9a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-9Zm3.5 2a.5.5 0 0 0-.5.5v3c0 .28.22.5.5.5h3a.5.5 0 0 0 .5-.5v-3a.5.5 0 0 0-.5-.5h-3Z",
              clipRule: "evenodd",
              className: o,
            }),
          ],
        });
      };
    },
    828595: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          CheckmarkLargeIcon: function () {
            return a;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("669491"),
        s = n("82169");
      let a = e => {
        let {
          width: t = 24,
          height: n = 24,
          color: a = r.default.colors.INTERACTIVE_NORMAL,
          colorClass: o = "",
          ...l
        } = e;
        return (0, i.jsx)("svg", {
          ...(0, s.default)(l),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: n,
          fill: "none",
          viewBox: "0 0 24 24",
          children: (0, i.jsx)("path", {
            fill: "string" == typeof a ? a : a.css,
            d: "M21.7 5.3a1 1 0 0 1 0 1.4l-12 12a1 1 0 0 1-1.4 0l-6-6a1 1 0 1 1 1.4-1.4L9 16.58l11.3-11.3a1 1 0 0 1 1.4 0Z",
            className: o,
          }),
        });
      };
    },
    351964: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ChevronSmallDownIcon: function () {
            return a;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("669491"),
        s = n("82169");
      let a = e => {
        let {
          width: t = 24,
          height: n = 24,
          color: a = r.default.colors.INTERACTIVE_NORMAL,
          colorClass: o = "",
          ...l
        } = e;
        return (0, i.jsx)("svg", {
          ...(0, s.default)(l),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: n,
          fill: "none",
          viewBox: "0 0 24 24",
          children: (0, i.jsx)("path", {
            fill: "string" == typeof a ? a : a.css,
            d: "M5.3 9.3a1 1 0 0 1 1.4 0l5.3 5.29 5.3-5.3a1 1 0 1 1 1.4 1.42l-6 6a1 1 0 0 1-1.4 0l-6-6a1 1 0 0 1 0-1.42Z",
            className: o,
          }),
        });
      };
    },
    778804: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ChevronSmallLeftIcon: function () {
            return a;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("669491"),
        s = n("82169");
      let a = e => {
        let {
          width: t = 24,
          height: n = 24,
          color: a = r.default.colors.INTERACTIVE_NORMAL,
          colorClass: o = "",
          ...l
        } = e;
        return (0, i.jsx)("svg", {
          ...(0, s.default)(l),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: n,
          fill: "none",
          viewBox: "0 0 24 24",
          children: (0, i.jsx)("path", {
            fill: "string" == typeof a ? a : a.css,
            d: "M14.7 5.3a1 1 0 0 1 0 1.4L9.42 12l5.3 5.3a1 1 0 0 1-1.42 1.4l-6-6a1 1 0 0 1 0-1.4l6-6a1 1 0 0 1 1.42 0Z",
            className: o,
          }),
        });
      };
    },
    467722: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ChevronSmallRightIcon: function () {
            return a;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("669491"),
        s = n("82169");
      let a = e => {
        let {
          width: t = 24,
          height: n = 24,
          color: a = r.default.colors.INTERACTIVE_NORMAL,
          colorClass: o = "",
          ...l
        } = e;
        return (0, i.jsx)("svg", {
          ...(0, s.default)(l),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: n,
          fill: "none",
          viewBox: "0 0 24 24",
          children: (0, i.jsx)("path", {
            fill: "string" == typeof a ? a : a.css,
            d: "M9.3 5.3a1 1 0 0 0 0 1.4l5.29 5.3-5.3 5.3a1 1 0 1 0 1.42 1.4l6-6a1 1 0 0 0 0-1.4l-6-6a1 1 0 0 0-1.42 0Z",
            className: o,
          }),
        });
      };
    },
    419067: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ChevronSmallUpIcon: function () {
            return a;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("669491"),
        s = n("82169");
      let a = e => {
        let {
          width: t = 24,
          height: n = 24,
          color: a = r.default.colors.INTERACTIVE_NORMAL,
          colorClass: o = "",
          ...l
        } = e;
        return (0, i.jsx)("svg", {
          ...(0, s.default)(l),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: n,
          fill: "none",
          viewBox: "0 0 24 24",
          children: (0, i.jsx)("path", {
            fill: "string" == typeof a ? a : a.css,
            d: "M5.3 14.7a1 1 0 0 0 1.4 0L12 9.42l5.3 5.3a1 1 0 0 0 1.4-1.42l-6-6a1 1 0 0 0-1.4 0l-6 6a1 1 0 0 0 0 1.42Z",
            className: o,
          }),
        });
      };
    },
    243976: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          CircleCheckIcon: function () {
            return a;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("669491"),
        s = n("82169");
      let a = e => {
        let {
          width: t = 24,
          height: n = 24,
          secondaryColor: a = "transparent",
          secondaryColorClass: o = "",
          color: l = r.default.colors.INTERACTIVE_NORMAL,
          colorClass: u = "",
          ...c
        } = e;
        return (0, i.jsxs)("svg", {
          ...(0, s.default)(c),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: n,
          fill: "none",
          viewBox: "0 0 24 24",
          children: [
            (0, i.jsx)("circle", {
              cx: "12",
              cy: "12",
              r: "10",
              fill: "string" == typeof a ? a : a.css,
              className: o,
            }),
            (0, i.jsx)("path", {
              fill: "string" == typeof l ? l : l.css,
              fillRule: "evenodd",
              d: "M12 23a11 11 0 1 0 0-22 11 11 0 0 0 0 22Zm5.7-13.3a1 1 0 0 0-1.4-1.4L10 14.58l-2.3-2.3a1 1 0 0 0-1.4 1.42l3 3a1 1 0 0 0 1.4 0l7-7Z",
              clipRule: "evenodd",
              className: u,
            }),
          ],
        });
      };
    },
    185429: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          CircleExclamationPointIcon: function () {
            return a;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("669491"),
        s = n("82169");
      let a = e => {
        let {
          width: t = 24,
          height: n = 24,
          secondaryColor: a = "transparent",
          secondaryColorClass: o = "",
          color: l = r.default.colors.INTERACTIVE_NORMAL,
          colorClass: u = "",
          ...c
        } = e;
        return (0, i.jsxs)("svg", {
          ...(0, s.default)(c),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: n,
          fill: "none",
          viewBox: "0 0 24 24",
          children: [
            (0, i.jsx)("circle", {
              cx: "12",
              cy: "12",
              r: "10",
              fill: "string" == typeof a ? a : a.css,
              className: o,
            }),
            (0, i.jsx)("path", {
              fill: "string" == typeof l ? l : l.css,
              fillRule: "evenodd",
              d: "M12 23a11 11 0 1 0 0-22 11 11 0 0 0 0 22Zm1.44-15.94L13.06 14a1.06 1.06 0 0 1-2.12 0l-.38-6.94a1 1 0 0 1 1-1.06h.88a1 1 0 0 1 1 1.06Zm-.19 10.69a1.25 1.25 0 1 1-2.5 0 1.25 1.25 0 0 1 2.5 0Z",
              clipRule: "evenodd",
              className: u,
            }),
          ],
        });
      };
    },
    166432: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          ClipsIcon: function () {
            return a;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("669491"),
        s = n("82169");
      let a = e => {
        let {
          width: t = 24,
          height: n = 24,
          color: a = r.default.colors.INTERACTIVE_NORMAL,
          colorClass: o = "",
          ...l
        } = e;
        return (0, i.jsxs)("svg", {
          ...(0, s.default)(l),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: n,
          fill: "none",
          viewBox: "0 0 24 24",
          children: [
            (0, i.jsx)("path", {
              fill: "string" == typeof a ? a : a.css,
              d: "M15.74 5.74a.5.5 0 0 0 .54.7l5.01-.88a.5.5 0 0 0 .4-.58l-.26-1.47a3 3 0 0 0-3.2-2.47.46.46 0 0 0-.37.26l-2.12 4.44ZM15.13 2.37a.5.5 0 0 0-.53-.7l-4.25.74a.5.5 0 0 0-.37.28L7.87 7.13a.5.5 0 0 0 .53.7l4.25-.74a.5.5 0 0 0 .37-.28l2.11-4.44ZM6.72 3.05l-2.55.45a3 3 0 0 0-2.43 3.48L2 8.46c.05.27.3.45.58.4l2.2-.39a.5.5 0 0 0 .36-.27l2.12-4.44a.5.5 0 0 0-.54-.7Z",
              className: o,
            }),
            (0, i.jsx)("path", {
              fill: "string" == typeof a ? a : a.css,
              fillRule: "evenodd",
              d: "M2 10.5c0-.28.22-.5.5-.5h19c.28 0 .5.22.5.5V19a3 3 0 0 1-3 3H5a3 3 0 0 1-3-3v-8.5ZM5 14a1 1 0 0 1 1-1h9a1 1 0 1 1 0 2H6a1 1 0 0 1-1-1Zm1 3a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2H6Z",
              clipRule: "evenodd",
              className: o,
            }),
          ],
        });
      };
    },
    81257: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          CloseLargeIcon: function () {
            return a;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("669491"),
        s = n("82169");
      let a = e => {
        let {
          width: t = 24,
          height: n = 24,
          color: a = r.default.colors.INTERACTIVE_NORMAL,
          colorClass: o = "",
          ...l
        } = e;
        return (0, i.jsx)("svg", {
          ...(0, s.default)(l),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: n,
          fill: "none",
          viewBox: "0 0 24 24",
          children: (0, i.jsx)("path", {
            fill: "string" == typeof a ? a : a.css,
            d: "M19.3 20.7a1 1 0 0 0 1.4-1.4L13.42 12l7.3-7.3a1 1 0 0 0-1.42-1.4L12 10.58l-7.3-7.3a1 1 0 0 0-1.4 1.42L10.58 12l-7.3 7.3a1 1 0 1 0 1.42 1.4L12 13.42l7.3 7.3Z",
            className: o,
          }),
        });
      };
    },
    182459: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MagnifyingGlassIcon: function () {
            return a;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("669491"),
        s = n("82169");
      let a = e => {
        let {
          width: t = 24,
          height: n = 24,
          color: a = r.default.colors.INTERACTIVE_NORMAL,
          colorClass: o = "",
          ...l
        } = e;
        return (0, i.jsx)("svg", {
          ...(0, s.default)(l),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: n,
          fill: "none",
          viewBox: "0 0 24 24",
          children: (0, i.jsx)("path", {
            fill: "string" == typeof a ? a : a.css,
            fillRule: "evenodd",
            d: "M15.62 17.03a9 9 0 1 1 1.41-1.41l4.68 4.67a1 1 0 0 1-1.42 1.42l-4.67-4.68ZM17 10a7 7 0 1 1-14 0 7 7 0 0 1 14 0Z",
            clipRule: "evenodd",
            className: o,
          }),
        });
      };
    },
    916842: function (e, t, n) {
      "use strict";
      n.r(t), n("37983"), n("884691");
    },
    502026: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Text: function () {
            return Text;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("414456"),
        s = n.n(r),
        a = n("773179"),
        o = n.n(a),
        l = n("669491"),
        u = n("383817"),
        c = n("339010");
      let d = Object.fromEntries(
          Object.keys(l.default.colors).map(e => [o.kebabCase(e), e])
        ),
        Text = e => {
          let t,
            {
              variant: n,
              tag: r = "div",
              selectable: a = !1,
              className: o,
              lineClamp: f,
              color: E,
              tabularNumbers: p = !1,
              scaleFontToUserSetting: h = !1,
              ..._
            } = e,
            S = "",
            m = {};
          if (
            (null != f &&
              (1 === f
                ? (S = u.lineClamp1)
                : ((S = u.lineClamp2Plus),
                  (m = { lineClamp: f, WebkitLineClamp: f }))),
            void 0 !== E)
          )
            switch (E) {
              case "none":
                t = void 0;
                break;
              case "always-white":
                t = "white";
                break;
              default:
                var T;
                t =
                  null === (T = l.default.colors[d[E]]) || void 0 === T
                    ? void 0
                    : T.css;
            }
          let g = { color: t, ...m, ..._.style };
          return (0, i.jsx)(r, {
            className: s(
              {
                [u.defaultColor]: void 0 === E,
                [u.selectable]: a,
                [u.tabularNumbers]: p,
                [c.fontScaling]: h,
              },
              S,
              c[n],
              o
            ),
            ..._,
            style: Object.values(g).filter(Boolean).length > 0 ? g : void 0,
            "data-text-variant": n,
          });
        };
    },
    459334: function (e, t, n) {
      "use strict";
      n.r(t);
      var i = n("502026");
      n.es(i, t);
      var r = n("916842");
      n.es(r, t);
    },
    771281: function (e, t, n) {
      "use strict";
      var i, r, s, a, o, l;
      n.r(t),
        n.d(t, {
          StoredCrashInformation: function () {
            return i;
          },
          JSExceptionLocation: function () {
            return r;
          },
          DesktopSources: function () {
            return s;
          },
        }),
        ((a = i || (i = {}))[(a.HasRTCConnection = 0)] = "HasRTCConnection"),
        (a[(a.IsSendingVideo = 1)] = "IsSendingVideo"),
        (a[(a.IsSendingStream = 2)] = "IsSendingStream"),
        (a[(a.IsReceivingVideo = 3)] = "IsReceivingVideo"),
        (a[(a.IsReceivingStream = 4)] = "IsReceivingStream"),
        (a[(a.VideoMediaSessionId = 5)] = "VideoMediaSessionId"),
        (a[(a.StreamMediaSessionId = 6)] = "StreamMediaSessionId"),
        ((o = r || (r = {}))[(o.RendererProcessDelayed = 0)] =
          "RendererProcessDelayed"),
        (o[(o.RendererProcess = 1)] = "RendererProcess"),
        (o[(o.MainProcess = 2)] = "MainProcess"),
        ((l = s || (s = {})).WINDOW = "window"),
        (l.SCREEN = "screen"),
        (l.CAMERA = "camera");
    },
    42013: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Dao: function () {
            return s;
          },
        });
      var i = n("999673"),
        r = n("429231");
      class s {
        get prefix() {
          return this.table.prefix;
        }
        withoutLogging() {
          return new s(
            this.originalPrefix,
            this.table.tableId,
            this.table.database,
            !1
          );
        }
        get(e) {
          return this.table.get([e]);
        }
        getMany(e) {
          return this.table.getMany([], e);
        }
        getRange(e, t, n) {
          return this.table.getRange([e], [t], n);
        }
        getKvEntries() {
          return this.table.getKvEntries();
        }
        getMapEntries() {
          return this.table.getMapEntries();
        }
        getIds() {
          return this.table.getChildIds([]);
        }
        getParentId(e) {
          return this.table.getParentId([null, e]);
        }
        put(e, t) {
          let n =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : i.ConflictOptions.Replace;
          return this.table.put({ key: [e], data: t, generation: null }, n);
        }
        delete(e) {
          return 0 == arguments.length
            ? this.table.delete()
            : this.table.delete([e]);
        }
        transaction(e, t) {
          return this.table.transaction(t => e(new a(t)), t);
        }
        upgradeTransaction(e) {
          return new a(this.table.upgradeTransaction(e));
        }
        getManySyncUnsafe(e) {
          return this.table.getManySyncUnsafe([], e);
        }
        getMapEntriesSyncUnsafe() {
          return this.table.getMapEntriesSyncUnsafe();
        }
        constructor(e, t, n, i = !0) {
          (this.originalPrefix = e), (this.table = new r.Table([e], t, n, i));
        }
      }
      class a {
        static fromDatabaseTransaction(e, t, n) {
          return new a(new r.TableTransaction(e, t, n));
        }
        put(e, t) {
          let n =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : i.ConflictOptions.Replace;
          this.transaction.put({ key: [e], data: t, generation: null }, n);
        }
        delete(e) {
          return 0 == arguments.length
            ? this.transaction.delete()
            : this.transaction.delete([e]);
        }
        constructor(e) {
          this.transaction = e;
        }
      }
    },
    734955: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Database: function () {
            return o;
          },
        }),
        n("70102"),
        n("424973"),
        n("222007");
      var i = n("102053"),
        r = n("400340"),
        s = n("30773"),
        a = n("999673");
      class o {
        static async open(e, t) {
          return new o(await r.Host.open(e, t));
        }
        static openSyncUnsafe(e, t) {
          return new o(r.Host.openSyncUnsafe(e, t));
        }
        static delete(e) {
          return r.Host.delete(e);
        }
        close() {
          var e;
          (this.lastState = a.DatabaseState.Closed),
            null === (e = this.raw) || void 0 === e || e.close(),
            (this.raw = null),
            s.Runtime.removeCompletionCallback(this.databaseStateCallback);
        }
        disable(e) {
          return null == this.raw
            ? Promise.resolve()
            : ((this.lastState = a.DatabaseState.Disabled),
              this.execute({ type: "db.disable", handle: 0, reason: e }));
        }
        execute(e, t) {
          if (null == this.raw)
            throw Error("database is no longer open (database: ".concat(this));
          let n = "key" in e ? e.key[0] : e.table,
            r = () =>
              s.Runtime.executeAsync(null != t ? t : e.type, t => {
                this.raw.execute(t, { ...e, handle: 0 });
              });
          return null === t
            ? r()
            : i.default.timeAsync(
                "\uD83D\uDCBE",
                ""
                  .concat(null != t ? t : e.type, " ")
                  .concat(null != n ? n : ""),
                r
              );
        }
        executeSync(e) {
          if (null == this.raw)
            throw Error("database is no longer open (database: ".concat(this));
          let t = "key" in e ? e.key[0] : e.table;
          return i.default.time(
            "\uD83D\uDCBE",
            "SYNC: ".concat(e.type, " ").concat(null != t ? t : ""),
            () =>
              this.raw.execute(null, { ...e, handle: 0 }, { synchronous: !0 })
          );
        }
        fullVacuum() {
          return this.execute({ type: "db.vacuum", handle: 0, complete: !0 });
        }
        fsInfo() {
          return this.execute({ type: "db.fs_info", handle: 0 });
        }
        incrementalVacuum() {
          return this.execute({ type: "db.vacuum", handle: 0, complete: !1 });
        }
        instantaneousState() {
          return null == this.raw
            ? a.DatabaseState.Closed
            : (this.lastState = this.executeSync({ type: "db.state" }));
        }
        async instantaneousStateAsync() {
          return null == this.raw
            ? a.DatabaseState.Closed
            : (this.lastState = await this.execute({ type: "db.state" }));
        }
        state() {
          return this.lastState;
        }
        transaction(e, t) {
          let n = new l(this),
            i = e(n);
          return Promise.resolve(i).then(() =>
            n.operations.length > 0
              ? this.execute(
                  { type: "db.transaction", operations: n.complete() },
                  t
                )
              : Promise.resolve()
          );
        }
        toString() {
          return "[Database #".concat(this.handle, ": ").concat(this.name, "]");
        }
        constructor(e) {
          (this.raw = e),
            (this.name = e.name),
            (this.lastState = a.DatabaseState.Open),
            (this.handle = e.handle),
            (this.databaseStateCallback = s.Runtime.addDatabaseStateCallback(
              (e, t) => {
                this.handle === e && (this.lastState = t);
              }
            ));
        }
      }
      class l {
        add(e) {
          this.operations.push(e);
        }
        complete() {
          for (let e of this.operations) e.handle = 0;
          return this.operations;
        }
        toString() {
          return "[DatabaseTransaction "
            .concat(this.database.handle, ": ")
            .concat(this.operations.length, " ops]");
        }
        constructor(e) {
          (this.database = e), (this.operations = []);
        }
      }
    },
    494931: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          EntityDao: function () {
            return s;
          },
        }),
        n("686130"),
        n("781738");
      var i = n("999673"),
        r = n("429231");
      class s {
        get prefix() {
          return this.table.prefix;
        }
        withoutLogging() {
          return new s(
            this.originalPrefix,
            this.table.tableId,
            this.table.database,
            !1
          );
        }
        get(e) {
          return this.table.get([e]);
        }
        getMany(e) {
          return this.table.getMany([], e);
        }
        getRange(e, t, n) {
          return this.table.getRange([e], [t], n);
        }
        getKvEntries() {
          return this.table.getKvEntries();
        }
        getMapEntries() {
          return this.table.getMapEntries();
        }
        getIds() {
          return this.table.getChildIds([]);
        }
        getParentId(e) {
          return this.table.getParentId([null, e]);
        }
        put(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : i.ConflictOptions.Replace;
          return this.transaction(
            n => n.put(e, t),
            "".concat(this.prefix, " put")
          );
        }
        putAll(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : i.ConflictOptions.Replace;
          return this.transaction(
            n => n.putAll(e, t),
            "".concat(this.prefix, " putAll")
          );
        }
        replaceAll(e) {
          return this.transaction(
            t => t.replaceAll(e),
            "".concat(this.prefix, " replaceAll")
          );
        }
        delete(e) {
          return this.transaction(
            t => t.delete(e),
            "".concat(this.prefix, " delete")
          );
        }
        transaction(e, t) {
          return this.table.transaction(t => e(new a(t)), t);
        }
        upgradeTransaction(e) {
          return new a(this.table.upgradeTransaction(e));
        }
        getManySyncUnsafe(e) {
          return this.table.getManySyncUnsafe([], e);
        }
        getMapEntriesSyncUnsafe() {
          return this.table.getMapEntriesSyncUnsafe();
        }
        static cell(e, t) {
          return { key: [e.id], data: e, generation: t };
        }
        constructor(e, t, n, i = !0) {
          (this.originalPrefix = e), (this.table = new r.Table([e], t, n, i));
        }
      }
      class a {
        static fromDatabaseTransaction(e, t, n) {
          return new a(new r.TableTransaction(e, t, n));
        }
        put(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : i.ConflictOptions.Replace;
          return this.transaction.put(s.cell(e, null), t);
        }
        putAll(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : i.ConflictOptions.Replace;
          return this.transaction.putAll(
            e.map(e => s.cell(e, null)),
            t
          );
        }
        replaceAll(e) {
          this.delete(), this.putAll(e);
        }
        delete(e) {
          return 0 == arguments.length
            ? this.transaction.delete([])
            : this.transaction.delete([e]);
        }
        constructor(e) {
          this.transaction = e;
        }
      }
    },
    243479: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          GuildDao: function () {
            return s;
          },
        });
      var i = n("999673"),
        r = n("429231");
      class s {
        get prefix() {
          return this.table.prefix;
        }
        withoutLogging() {
          return new s(
            this.originalPrefix,
            this.table.tableId,
            this.table.database,
            !1
          );
        }
        get(e, t) {
          return this.table.get([e, t]);
        }
        getMany(e, t) {
          return this.table.getMany([e], t);
        }
        getRange(e, t, n, i) {
          return this.table.getRange([e, t], [e, n], i);
        }
        getKvEntries() {
          return this.table.getKvEntries();
        }
        getMapEntries() {
          return this.table.getMapEntries();
        }
        getIds(e) {
          return this.table.getChildIds([e]);
        }
        getGuildIds() {
          return this.table.getChildIds([]);
        }
        getGuildId(e) {
          return this.table.getParentId([null, e]);
        }
        put(e, t, n) {
          let r =
            arguments.length > 3 && void 0 !== arguments[3]
              ? arguments[3]
              : i.ConflictOptions.Replace;
          return this.putWithGeneration(e, t, n, null, r);
        }
        putWithGeneration(e, t, n, r) {
          let s =
            arguments.length > 4 && void 0 !== arguments[4]
              ? arguments[4]
              : i.ConflictOptions.Replace;
          return this.table.put({ key: [e, t], data: n, generation: r }, s);
        }
        delete(e, t) {
          switch (arguments.length) {
            case 0:
              return this.table.delete([]);
            case 1:
              return this.table.delete([e]);
            default:
              return this.table.delete([e, t]);
          }
        }
        deleteGeneration(e, t) {
          return this.table.deleteGeneration([], e, t);
        }
        transaction(e, t) {
          return this.table.transaction(t => e(new a(t)), t);
        }
        upgradeTransaction(e) {
          return new a(this.table.upgradeTransaction(e));
        }
        getManySyncUnsafe(e, t) {
          return this.table.getManySyncUnsafe([e], t);
        }
        getMapEntriesSyncUnsafe() {
          return this.table.getMapEntriesSyncUnsafe();
        }
        constructor(e, t, n, i = !0) {
          (this.originalPrefix = e), (this.table = new r.Table([e], t, n, i));
        }
      }
      class a {
        static fromDatabaseTransaction(e, t, n) {
          return new a(new r.TableTransaction(e, t, n));
        }
        put(e, t, n) {
          let r =
            arguments.length > 3 && void 0 !== arguments[3]
              ? arguments[3]
              : i.ConflictOptions.Replace;
          this.putWithGeneration(e, t, n, null, r);
        }
        putWithGeneration(e, t, n, r) {
          let s =
            arguments.length > 4 && void 0 !== arguments[4]
              ? arguments[4]
              : i.ConflictOptions.Replace;
          return this.state.put({ key: [e, t], data: n, generation: r }, s);
        }
        delete(e, t) {
          switch (arguments.length) {
            case 0:
              this.state.delete([]);
              break;
            case 1:
              this.state.delete([e]);
              break;
            default:
              this.state.delete([e, t]);
          }
        }
        deleteGeneration(e, t) {
          return this.state.deleteGeneration([], e, t);
        }
        constructor(e) {
          this.state = e;
        }
      }
    },
    763475: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          GuildEntityDao: function () {
            return s;
          },
        }),
        n("686130"),
        n("781738");
      var i = n("999673"),
        r = n("429231");
      class s {
        get prefix() {
          return this.table.prefix;
        }
        withoutLogging() {
          return new s(
            this.originalPrefix,
            this.table.tableId,
            this.table.database,
            !1
          );
        }
        get(e, t) {
          return this.table.get([e, t]);
        }
        getMany(e, t) {
          return this.table.getMany([e], t);
        }
        getRange(e, t, n, i) {
          return this.table.getRange([e, t], [e, n], i);
        }
        getKvEntries() {
          return this.table.getKvEntries();
        }
        getMapEntries() {
          return this.table.getMapEntries();
        }
        getIds(e) {
          return this.table.getChildIds([e]);
        }
        getGuildIds() {
          return this.table.getChildIds([]);
        }
        getGuildId(e) {
          return this.table.getParentId([null, e]);
        }
        put(e, t) {
          let n =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : i.ConflictOptions.Replace;
          return this.transaction(
            i => i.put(e, t, n),
            "".concat(this.prefix, " put")
          );
        }
        putAll(e, t) {
          let n =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : i.ConflictOptions.Replace;
          return this.transaction(
            i => i.putAll(e, t, n),
            "".concat(this.prefix, " putAll")
          );
        }
        replaceAll(e, t) {
          return this.transaction(
            n => n.replaceAll(e, t),
            "".concat(this.prefix, " replaceAll")
          );
        }
        delete(e, t) {
          return this.transaction(
            n => n.delete(e, t),
            "".concat(this.prefix, " delete")
          );
        }
        deleteGeneration(e, t) {
          return this.transaction(
            n => n.deleteGeneration(e, t),
            "".concat(this.prefix, " deleteGeneration")
          );
        }
        transaction(e, t) {
          return this.table.transaction(t => e(new a(t)), t);
        }
        upgradeTransaction(e) {
          return new a(this.table.upgradeTransaction(e));
        }
        getManySyncUnsafe(e, t) {
          return this.table.getManySyncUnsafe([e], t);
        }
        getMapEntriesSyncUnsafe() {
          return this.table.getMapEntriesSyncUnsafe();
        }
        static cell(e, t, n) {
          return { key: [e, t.id], data: t, generation: n };
        }
        constructor(e, t, n, i = !0) {
          (this.originalPrefix = e), (this.table = new r.Table([e], t, n, i));
        }
      }
      class a {
        static fromDatabaseTransaction(e, t, n) {
          return new a(new r.TableTransaction(e, t, n));
        }
        put(e, t) {
          let n =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : i.ConflictOptions.Replace;
          return this.putWithGeneration(e, t, null, n);
        }
        putWithGeneration(e, t, n) {
          let r =
            arguments.length > 3 && void 0 !== arguments[3]
              ? arguments[3]
              : i.ConflictOptions.Replace;
          return this.transaction.put(s.cell(e, t, n), r);
        }
        putAll(e, t) {
          let n =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : i.ConflictOptions.Replace;
          return this.transaction.putAll(
            t.map(t => s.cell(e, t, null)),
            n
          );
        }
        replaceAll(e, t) {
          this.delete(e), this.putAll(e, t);
        }
        delete(e, t) {
          switch (arguments.length) {
            case 0:
              return this.transaction.delete([]);
            case 1:
              return this.transaction.delete([e]);
            default:
              return this.transaction.delete([e, t]);
          }
        }
        deleteGeneration(e, t) {
          return this.transaction.deleteGeneration([], e, t);
        }
        constructor(e) {
          this.transaction = e;
        }
      }
    },
    633795: function (e, t, n) {
      "use strict";
      n.r(t), n("400340");
    },
    370056: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MessageDao: function () {
            return s;
          },
        });
      var i = n("999673"),
        r = n("429231");
      class s {
        get prefix() {
          return this.table.prefix;
        }
        withoutLogging() {
          return new s(
            this.originalPrefix,
            this.table.tableId,
            this.table.database,
            !1
          );
        }
        get(e, t, n) {
          return this.table.get([e, t, l(n)]);
        }
        getLatest(e, t, n) {
          return this.table.getMany([e, t], {
            ordering: i.Ordering.Descending,
            limit: n,
          });
        }
        getRange(e, t, n, i, r) {
          return this.table.getRange([e, t, l(n)], [e, t, l(i)], r);
        }
        getMostRecents(e) {
          return this.table.messages.getLatest(e);
        }
        put(e, t, n) {
          let r =
            arguments.length > 3 && void 0 !== arguments[3]
              ? arguments[3]
              : i.ConflictOptions.Replace;
          return this.table.put(o(e, t, n), r);
        }
        putAll(e, t, n) {
          let r =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : i.ConflictOptions.Replace,
            s = n.map(n => o(e, t, n));
          return this.table.putAll(s, r);
        }
        deleteAll() {
          return this.table.delete();
        }
        deleteGuild(e) {
          return this.table.delete([e]);
        }
        deleteChannel(e, t) {
          return this.table.delete([e, t]);
        }
        deleteMessage(e, t, n) {
          return this.table.delete([e, t, l(n)]);
        }
        transaction(e, t) {
          return this.table.transaction(t => e(new a(t)), t);
        }
        upgradeTransaction(e) {
          return new a(this.table.upgradeTransaction(e));
        }
        constructor(e, t, n, i = !0) {
          (this.originalPrefix = e), (this.table = new r.Table([e], t, n, i));
        }
      }
      class a {
        static fromTableTransaction(e) {
          return new a(e);
        }
        static fromDatabaseTransaction(e, t, n) {
          return new a(new r.TableTransaction(e, t, n));
        }
        put(e, t, n) {
          let r =
            arguments.length > 3 && void 0 !== arguments[3]
              ? arguments[3]
              : i.ConflictOptions.Replace;
          this.transaction.put(o(e, t, n), r);
        }
        putAll(e, t, n) {
          let r =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : i.ConflictOptions.Replace,
            s = n.map(n => o(e, t, n));
          this.transaction.putAll(s, r);
        }
        deleteAll() {
          this.transaction.delete();
        }
        deleteGuild(e) {
          this.transaction.delete([e]);
        }
        deleteChannel(e, t) {
          this.transaction.delete([e, t]);
        }
        deleteMessage(e, t, n) {
          this.transaction.delete([e, t, l(n)]);
        }
        trimOrphans(e) {
          this.transaction.messages.trimOrphans(e);
        }
        trimChannel(e, t, n) {
          this.transaction.messages.trimChannel([e, t], n);
        }
        trimChannelsIn(e, t) {
          this.transaction.messages.trimChannelsIn(e, t);
        }
        trimChannelsNotIn(e, t) {
          this.transaction.messages.trimChannelsNotIn(e, t);
        }
        constructor(e) {
          this.transaction = e;
        }
      }
      function o(e, t, n) {
        let i = l(n.id);
        return { key: [e, t, i], data: n, generation: i };
      }
      function l(e) {
        return e.padStart(19, "0");
      }
    },
    429231: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Table: function () {
            return o;
          },
          TableTransaction: function () {
            return l;
          },
        }),
        n("70102");
      var i = n("999673"),
        r = n("481871");
      function s(e, t) {
        return 0 === t.length
          ? e
          : {
              key: (0, r.combineKey)(t, e.key),
              data: e.data,
              generation: e.generation,
            };
      }
      function a(e, t) {
        return 0 === t.length ? e : e.map(e => s(e, t));
      }
      class o {
        close() {
          this.database.close();
        }
        async get(e) {
          var t;
          let n = await this.getMany(e, { limit: 1 });
          return null !== (t = n[0]) && void 0 !== t ? t : null;
        }
        getMany() {
          let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : [],
            t = arguments.length > 1 ? arguments[1] : void 0;
          return this.database.execute(
            {
              type: "kv.get_many",
              table: this.tableId,
              key: (0, r.combineKeyPrefix)(this.prefix, e),
              ordering: null == t ? void 0 : t.ordering,
              limit: null == t ? void 0 : t.limit,
            },
            this.defaultDebugTag
          );
        }
        getRange(e, t, n) {
          let i = (0, r.combineKey)(this.prefix, e),
            s = (0, r.combineKey)(this.prefix, t);
          return this.database.execute(
            {
              type: "kv.get_range",
              table: this.tableId,
              range: [i, s],
              ordering: null == n ? void 0 : n.ordering,
              limit: null == n ? void 0 : n.limit,
            },
            this.defaultDebugTag
          );
        }
        getKvEntries() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
          return this.database.execute(
            {
              type: "kv.get_kv_entries",
              table: this.tableId,
              key: (0, r.combineKeyPrefix)(this.prefix, e),
            },
            this.defaultDebugTag
          );
        }
        getMapEntries() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
          return this.database.execute(
            {
              type: "kv.get_map_entries",
              table: this.tableId,
              key: (0, r.combineKeyPrefix)(this.prefix, e),
            },
            this.defaultDebugTag
          );
        }
        getChildIds() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
          return this.database.execute(
            {
              type: "kv.get_child_ids",
              table: this.tableId,
              key: (0, r.combineKeyPrefix)(this.prefix, e),
            },
            this.defaultDebugTag
          );
        }
        getParentId() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
          return this.database.execute(
            {
              type: "kv.get_parent_id",
              table: this.tableId,
              key: (0, r.combineKey)(this.prefix, e),
            },
            this.defaultDebugTag
          );
        }
        put(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : i.ConflictOptions.Replace;
          return this.database.execute(
            {
              type: "kv.put_one",
              table: this.tableId,
              cell: s(e, this.prefix),
              overwrite: t === i.ConflictOptions.Replace,
            },
            this.defaultDebugTag
          );
        }
        putAll(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : i.ConflictOptions.Replace;
          return this.database.execute(
            {
              type: "kv.put_many",
              table: this.tableId,
              cells: a(e, this.prefix),
              overwrite: t === i.ConflictOptions.Replace,
            },
            this.defaultDebugTag
          );
        }
        replaceAll(e) {
          return this.transaction(t => {
            t.delete(), t.putAll(e);
          }, this.defaultDebugTag);
        }
        delete() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
          return this.database.execute(
            {
              type: "kv.delete_many",
              table: this.tableId,
              key: (0, r.combineKeyPrefix)(this.prefix, e),
            },
            this.defaultDebugTag
          );
        }
        deleteRange(e, t) {
          let n = (0, r.combineKey)(this.prefix, e),
            i = (0, r.combineKey)(this.prefix, t);
          return this.database.execute(
            { type: "kv.delete_range", table: this.tableId, range: [n, i] },
            this.defaultDebugTag
          );
        }
        deleteGeneration() {
          let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : [],
            t = arguments.length > 1 ? arguments[1] : void 0,
            n = arguments.length > 2 ? arguments[2] : void 0;
          return this.database.execute(
            {
              type: "kv.delete_generation",
              table: this.tableId,
              key: (0, r.combineKeyPrefix)(this.prefix, e),
              generation: n,
              comparer: t,
            },
            this.defaultDebugTag
          );
        }
        transaction(e, t) {
          return this.database.transaction(
            t => e(new l(this.prefix, this.tableId, t)),
            t
          );
        }
        upgradeTransaction(e) {
          return new l(this.prefix, this.tableId, e);
        }
        getManySyncUnsafe() {
          let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : [],
            t = arguments.length > 1 ? arguments[1] : void 0;
          return this.database.executeSync({
            type: "kv.get_many",
            table: this.tableId,
            key: (0, r.combineKeyPrefix)(this.prefix, e),
            ordering: null == t ? void 0 : t.ordering,
            limit: null == t ? void 0 : t.limit,
          });
        }
        getMapEntriesSyncUnsafe() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
          return this.database.executeSync({
            type: "kv.get_map_entries",
            table: this.tableId,
            key: (0, r.combineKeyPrefix)(this.prefix, e),
          });
        }
        constructor(e, t, n, i) {
          (this.messages = {
            getLatest: e =>
              this.database.execute(
                {
                  type: "messages.get_latest",
                  table: this.tableId,
                  guildId: e,
                },
                this.defaultDebugTag
              ),
          }),
            (this.prefix = e),
            (this.tableId = t),
            (this.database = n),
            (this.defaultDebugTag = i ? void 0 : null);
        }
      }
      class l {
        static fromDatabaseTransaction(e, t, n) {
          return new l(e, t, n);
        }
        put(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : i.ConflictOptions.Replace;
          this.transaction.add({
            type: "kv.put_one",
            table: this.tableId,
            cell: s(e, this.prefix),
            overwrite: t === i.ConflictOptions.Replace,
          });
        }
        putAll(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : i.ConflictOptions.Replace;
          this.transaction.add({
            type: "kv.put_many",
            table: this.tableId,
            cells: a(e, this.prefix),
            overwrite: t === i.ConflictOptions.Replace,
          });
        }
        replaceAll(e) {
          this.delete(), this.putAll(e);
        }
        delete() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : [];
          this.transaction.add({
            type: "kv.delete_many",
            table: this.tableId,
            key: (0, r.combineKeyPrefix)(this.prefix, e),
          });
        }
        deleteRange(e, t) {
          let n = (0, r.combineKey)(this.prefix, e),
            i = (0, r.combineKey)(this.prefix, t);
          this.transaction.add({
            type: "kv.delete_range",
            table: this.tableId,
            range: [n, i],
          });
        }
        deleteGeneration() {
          let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : [],
            t = arguments.length > 1 ? arguments[1] : void 0,
            n = arguments.length > 2 ? arguments[2] : void 0;
          this.transaction.add({
            type: "kv.delete_generation",
            table: this.tableId,
            key: (0, r.combineKeyPrefix)(this.prefix, e),
            generation: n,
            comparer: t,
          });
        }
        constructor(e, t, n) {
          (this.messages = {
            trimOrphans: e => {
              if (1 !== this.prefix.length || 1 !== e.length)
                throw Error(
                  "trimOrphans: only one prefix component is supported at this time"
                );
              this.transaction.add({
                type: "messages.trim_orphans",
                table: this.tableId,
                channelKey: e[0],
                messageKey: this.prefix[0],
              });
            },
            trimChannel: (e, t) => {
              this.transaction.add({
                type: "messages.trim_channel",
                table: this.tableId,
                key: (0, r.combineKey)(this.prefix, e),
                limit: t,
              });
            },
            trimChannelsIn: (e, t) => {
              if (1 !== this.prefix.length || 1 !== e.length)
                throw Error(
                  "trimChannelsIn: only one prefix component is supported at this time"
                );
              this.transaction.add({
                type: "messages.trim_channels_in",
                table: this.tableId,
                channelKey: e[0],
                messageKey: this.prefix[0],
                limit: t,
              });
            },
            trimChannelsNotIn: (e, t) => {
              if (1 !== this.prefix.length || 1 !== e.length)
                throw Error(
                  "trimChannelsNotIn: only one prefix component is supported at this time"
                );
              this.transaction.add({
                type: "messages.trim_channels_not_in",
                table: this.tableId,
                channelKey: e[0],
                messageKey: this.prefix[0],
                limit: t,
              });
            },
          }),
            (this.prefix = e),
            (this.tableId = t),
            (this.transaction = n);
        }
      }
    },
    627315: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          KV_RAW: function () {
            return i;
          },
        }),
        n("70102");
      let i = new (class e {
        raise(e) {
          throw e;
        }
        setCallbacks(e) {
          this.callback = e.response;
        }
        databaseOpen(e, t, n) {
          let i = 'kv_storage: platform "web" is not supported at this time.';
          if (null == n ? void 0 : n.synchronous) throw Error(i);
          return this.reply({ requestId: e, synchronous: !1, ok: !1, data: i });
        }
        databaseList(e, t) {
          return this.reply({
            requestId: e,
            synchronous: null == t ? void 0 : t.synchronous,
            ok: !0,
            data: [],
          });
        }
        databaseDelete(e, t, n) {
          return this.reply({
            requestId: e,
            synchronous: null == n ? void 0 : n.synchronous,
            ok: !0,
            data: void 0,
          });
        }
        databaseOptimize(e, t, n) {
          return this.reply({
            requestId: e,
            synchronous: null == n ? void 0 : n.synchronous,
            ok: !0,
            data: void 0,
          });
        }
        reply(e) {
          if (e.synchronous) return e.data;
          if (null != e.requestId) {
            var t;
            null === (t = this.callback) ||
              void 0 === t ||
              t.call(
                this,
                {
                  id: e.requestId,
                  ok: e.ok,
                  data: e.data,
                  timings: {
                    queueTimeNanoseconds: 0,
                    executionTimeNanoseconds: 0,
                    materializationTimeNanoseconds: 0,
                    totalTimeNanoseconds: 0,
                  },
                },
                0
              );
          }
        }
        constructor() {
          this.callback = null;
        }
      })();
    },
    350798: function (e, t, n) {
      "use strict";
      n.r(t);
      var i = n("627315");
      n.es(i, t);
    },
    705909: function (e, t, n) {
      "use strict";
      n.r(t), n("350798");
      var i = n("42013");
      n.es(i, t);
      var r = n("734955");
      n.es(r, t);
      var s = n("494931");
      n.es(s, t);
      var a = n("243479");
      n.es(a, t);
      var o = n("763475");
      n.es(o, t);
      var l = n("633795");
      n.es(l, t);
      var u = n("370056");
      n.es(u, t);
      var c = n("429231");
      n.es(c, t);
      var d = n("999673");
      n.es(d, t);
    },
    400340: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Host: function () {
            return s;
          },
        });
      var i = n("350798"),
        r = n("30773");
      class s {
        static open(e, t) {
          return r.Runtime.executeAsync("database_open", n => {
            var r;
            return i.KV_RAW.databaseOpen(n, {
              database: e,
              invalidateDisabledHandles:
                null !==
                  (r = null == t ? void 0 : t.invalidateDisabledHandles) &&
                void 0 !== r &&
                r,
            });
          });
        }
        static openSyncUnsafe(e, t) {
          var n;
          return i.KV_RAW.databaseOpen(
            null,
            {
              database: e,
              invalidateDisabledHandles:
                null !==
                  (n = null == t ? void 0 : t.invalidateDisabledHandles) &&
                void 0 !== n &&
                n,
            },
            { synchronous: !0 }
          );
        }
        static delete(e) {
          return r.Runtime.executeAsync("database_delete", t =>
            i.KV_RAW.databaseDelete(t, { database: e })
          );
        }
        static async list() {
          let e = await r.Runtime.executeAsync("database_list", e =>
            i.KV_RAW.databaseList(e)
          );
          return e.map(e => e.data);
        }
        static optimize(e) {
          return r.Runtime.executeAsync("database_optimize", t =>
            i.KV_RAW.databaseOptimize(t, { aggressive: e })
          );
        }
        static raise(e) {
          i.KV_RAW.raise(e);
        }
      }
    },
    30773: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Runtime: function () {
            return l;
          },
        }),
        n("424973"),
        n("222007"),
        n("70102");
      var i = n("811022"),
        r = n("350798"),
        s = n("390493");
      let a = "1" === s.env.KV_STORAGE_LOGGING,
        o = new i.default("Runtime");
      class l {
        static nextId() {
          return ++this.counter;
        }
        static executeAsync(e, t) {
          return (
            this.initialize(),
            new Promise((n, i) => {
              let r = this.nextId();
              t(r),
                this.pending.set(r, {
                  id: r,
                  tag: e,
                  started: performance.now(),
                  resolve: n,
                  reject: i,
                });
            })
          );
        }
        static addCompletionCallback(e) {
          return this.completionCallbacks.push(e), e;
        }
        static addDatabaseStateCallback(e) {
          return this.dbStateCallbacks.push(e), e;
        }
        static removeCompletionCallback(e) {
          this.completionCallbacks = this.completionCallbacks.filter(
            t => t !== e
          );
        }
        static removeDatabaseStateCallback(e) {
          this.dbStateCallbacks = this.dbStateCallbacks.filter(t => t !== e);
        }
        static onResponse(e, t) {
          let n = performance.now(),
            i = this.pending.get(e.id);
          null != i &&
            (this.pending.delete(e.id),
            (e.timings.materializationTimeNanoseconds = null != t ? t : 0),
            this.completeOperation(i, e, n),
            this.resolveOperation(i, e));
        }
        static onStatus(e) {
          for (let t of this.dbStateCallbacks) t(e.handle, e.state);
        }
        static resolveOperation(e, t) {
          t.ok
            ? e.resolve(t.data)
            : e.reject("string" == typeof t.data ? Error(t.data) : t.data);
        }
        static completeOperation(e, t, n) {
          if (this.completionCallbacks.length > 0) {
            let i = {
              id: e.id,
              tag: e.tag,
              ok: t.ok,
              value: t.data,
              timings: {
                queue: t.timings.queueTimeNanoseconds / 1e6,
                execution: t.timings.executionTimeNanoseconds / 1e6,
                materialization: t.timings.materializationTimeNanoseconds / 1e6,
                ccTotal: t.timings.totalTimeNanoseconds / 1e6,
                jsTotal: n - e.started,
              },
            };
            for (let e of this.completionCallbacks) e(i);
          }
        }
        static initialize() {
          !this.initialized &&
            (r.KV_RAW.setCallbacks({
              status: e => this.onStatus(e),
              response: (e, t) => this.onResponse(e, t),
            }),
            a &&
              (this.addCompletionCallback(e => {
                let t = e.ok ? "completed" : "failed",
                  n = [
                    "".concat(e.timings.execution.toFixed(3), "ms execution"),
                    "".concat(
                      e.timings.materialization.toFixed(3),
                      "ms js materialization"
                    ),
                    "".concat(e.timings.ccTotal.toFixed(3), "ms cc completion"),
                    "".concat(e.timings.jsTotal.toFixed(3), "ms js reception"),
                  ].join(", ");
                o.info(
                  ""
                    .concat(e.tag, " (#")
                    .concat(e.id, ") ")
                    .concat(t, " in ")
                    .concat(e.timings.ccTotal.toFixed(3), "ms (")
                    .concat(n, ").")
                );
              }),
              this.addDatabaseStateCallback((e, t) =>
                o.info("".concat(e, " (state: ").concat(t, ")"))
              )),
            (this.initialized = !0));
        }
      }
      (l.counter = 0),
        (l.pending = new Map()),
        (l.initialized = !1),
        (l.dbStateCallbacks = []),
        (l.completionCallbacks = []);
    },
    999673: function (e, t, n) {
      "use strict";
      var i, r, s, a, o, l, u, c;
      n.r(t),
        n.d(t, {
          TableId: function () {
            return i;
          },
          MAXIMUM_KEY_BITS: function () {
            return d;
          },
          Ordering: function () {
            return r;
          },
          DatabaseState: function () {
            return s;
          },
          ConflictOptions: function () {
            return a;
          },
        }),
        ((o = i || (i = {})).Kv = "kv"),
        (o.KvCache = "kv_cache"),
        (o.Messages = "messages");
      let d = 5;
      ((l = r || (r = {}))[(l.Ascending = 0)] = "Ascending"),
        (l[(l.Descending = 1)] = "Descending"),
        ((u = s || (s = {}))[(u.Closed = 0)] = "Closed"),
        (u[(u.Open = 1)] = "Open"),
        (u[(u.Disabled = 2)] = "Disabled"),
        ((c = a || (a = {}))[(c.Skip = 0)] = "Skip"),
        (c[(c.Replace = 1)] = "Replace");
    },
    481871: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          combineKey: function () {
            return r;
          },
          combineKeyPrefix: function () {
            return s;
          },
        }),
        n("222007"),
        n("70102");
      var i = n("999673");
      function r(e, t) {
        let n = Array.isArray(t) ? [...e, ...t] : [...e, t];
        if (n.length >= 1 && n.length <= i.MAXIMUM_KEY_BITS) return n;
        throw Error(
          "combination results in an invalid key that has "
            .concat(n.length, " elements: ")
            .concat(JSON.stringify(n))
        );
      }
      function s(e, t) {
        let n = Array.isArray(t) ? [...e, ...t] : [...e, t];
        if (n.length <= i.MAXIMUM_KEY_BITS) return n;
        throw Error(
          "combination results in an invalid prefix key that has "
            .concat(n.length, " elements: ")
            .concat(JSON.stringify(n))
        );
      }
    },
    947279: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          BaseConnectionEvent: function () {
            return o.BaseConnectionEvent;
          },
          default: function () {
            return i;
          },
        }),
        n("222007");
      var i,
        r = n("773179"),
        s = n.n(r),
        a = n("595275"),
        o = n("614276"),
        l = n("685961"),
        u = n("353927");
      let c = 0;
      i = class extends a.default {
        destroy() {
          (this.destroyed = !0),
            this.framerateReducer.destroy(),
            this.setConnectionState(u.ConnectionStates.DISCONNECTED),
            this.emit(o.BaseConnectionEvent.Destroy, this),
            this.removeAllListeners();
        }
        getLocalMute(e) {
          return this.localMutes[e] || !1;
        }
        getLocalVideoDisabled(e) {
          var t;
          return (
            null !== (t = this.disabledLocalVideos[e]) && void 0 !== t && t
          );
        }
        setLocalVideoDisabled(e, t) {
          (this.disabledLocalVideos[e] = t),
            this.emit(o.BaseConnectionEvent.LocalVideoDisabled, e, t);
        }
        getHasActiveVideoOutputSink(e) {
          var t;
          return null !== (t = this.activeOutputSinks[e]) && void 0 !== t && t;
        }
        setHasActiveVideoOutputSink(e, t) {
          (this.isActiveOutputSinksEnabled = !0),
            (this.activeOutputSinks[e] = t),
            this.emit(o.BaseConnectionEvent.ActiveSinksChange, e, t);
        }
        getActiveOutputSinkTrackingEnabled() {
          return this.isActiveOutputSinksEnabled;
        }
        setUseElectronVideo(e) {
          this.useElectronVideo = e;
        }
        setClipRecordUser(e, t, n) {}
        setViewerSideClip(e) {}
        setClipsKeyFrameInterval(e) {}
        setQualityDecoupling(e) {}
        getStreamParameters() {
          return s.cloneDeep(this.videoStreamParameters);
        }
        setExperimentFlag(e, t) {
          t ? this.experimentFlags.add(e) : this.experimentFlags.delete(e);
        }
        setConnectionState(e) {
          this.logger.info(
            "Connection state change: "
              .concat(this.connectionState, " => ")
              .concat(e)
          ),
            (this.connectionState = e),
            this.emit(
              o.BaseConnectionEvent.ConnectionStateChange,
              this.connectionState
            );
        }
        updateVideoQuality(e) {
          let { quality: t, constraints: n } = this.applyQualityConstraints(
              {},
              this.videoStreamParameters[0].ssrc
            ),
            i = s.cloneDeep(this.videoStreamParameters);
          null != t &&
            ((i[0].maxBitrate = t.bitrateMax),
            null != t.encode &&
              ((i[0].maxPixelCount = t.encode.pixelCount),
              (i[0].maxFrameRate = t.encode.framerate))),
            (this.videoStreamParameters = i);
          for (let e = 1; e < this.videoStreamParameters.length; e++) {
            let { quality: i, constraints: r } = this.applyQualityConstraints(
              {},
              this.videoStreamParameters[e].ssrc
            );
            null != i &&
              ((this.videoStreamParameters[e].maxBitrate = i.bitrateMax),
              null != i.encode &&
                ((this.videoStreamParameters[e].maxPixelCount =
                  i.encode.pixelCount),
                (this.videoStreamParameters[e].maxFrameRate =
                  i.encode.framerate))),
              100 === this.videoStreamParameters[e].quality &&
                ((n = r), (t = i));
          }
          (n.streamParameters = s.cloneDeep(this.videoStreamParameters)),
            (n.remoteSinkWantsPixelCount = Math.max(
              ...this.videoStreamParameters.map(e => {
                var t;
                return null !== (t = e.maxPixelCount) && void 0 !== t ? t : 0;
              })
            ));
          let r = this.pickProperties(n, e);
          this.logger.info(
            "updateVideoQuality: ".concat(JSON.stringify(r, void 0, 4))
          ),
            this.updateVideoQualityCore(r, t);
        }
        applyVideoQualityMode(e) {
          if (this.context !== u.MediaEngineContextTypes.DEFAULT) return;
          let t = l.VIDEO_QUALITY_MODES_TO_OVERWRITES[e];
          this.videoQualityManager.setQuality(t), this.updateVideoQuality();
        }
        overwriteQualityForTesting(e) {
          this.videoQualityManager.setQuality(e), this.updateVideoQuality();
        }
        applyQualityConstraints() {
          let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : {},
            t = arguments.length > 1 ? arguments[1] : void 0;
          return this.videoQualityManager.applyQualityConstraints(e, t);
        }
        pickProperties(e, t) {
          if (null == t || null == e) return e;
          let n = {};
          for (let i of t) n[i] = e[i];
          return n;
        }
        initializeStreamParameters(e) {
          let t = this.videoQualityManager.getQuality();
          this.videoStreamParameters = e
            .filter(
              e =>
                (e.type === u.MediaTypes.VIDEO ||
                  e.type === u.MediaTypes.SCREEN) &&
                "string" == typeof e.rid
            )
            .map(e => {
              var n, i, r, s;
              return {
                type: e.type,
                active: e.active,
                rid: e.rid,
                ssrc: e.ssrc,
                rtxSsrc: e.rtxSsrc,
                quality: e.quality,
                maxBitrate:
                  (null !== (s = e.quality) && void 0 !== s ? s : 100) < 100
                    ? t.bitrateMax / 4
                    : t.bitrateMax,
                maxFrameRate:
                  null === (n = t.capture) || void 0 === n
                    ? void 0
                    : n.framerate,
                maxResolution: {
                  type: u.ResolutionTypes.FIXED,
                  width:
                    null === (i = t.capture) || void 0 === i ? void 0 : i.width,
                  height:
                    null === (r = t.capture) || void 0 === r
                      ? void 0
                      : r.height,
                },
                profile: e.profile,
              };
            });
        }
        getLocalWant(e) {
          var t, n;
          let i =
            this.remoteVideoSinkWants[
              null !==
                (n =
                  null != e
                    ? e
                    : null === (t = this.videoStreamParameters[0]) ||
                        void 0 === t
                      ? void 0
                      : t.ssrc) && void 0 !== n
                ? n
                : 0
            ];
          if (null != i && i > 0) return i;
          let r = this.remoteVideoSinkWants.any;
          return null != r && r > 0 ? r : 100;
        }
        async emitStats() {
          let e = await this.getStats();
          return null != e && this.emit(o.BaseConnectionEvent.Stats, e), e;
        }
        constructor(e, t) {
          super(),
            (this.mediaEngineConnectionId = "WebRTC-".concat(c++)),
            (this.destroyed = !1),
            (this.audioSSRC = 0),
            (this.selfDeaf = !1),
            (this.localMutes = {}),
            (this.disabledLocalVideos = {}),
            (this.localVolumes = {}),
            (this.isActiveOutputSinksEnabled = !1),
            (this.activeOutputSinks = {}),
            (this.videoSupported = !1),
            (this.useElectronVideo = !1),
            (this.voiceBitrate = u.DEFAULT_VOICE_BITRATE),
            (this.remoteSinkWantsMaxFramerate = u.VIDEO_QUALITY_FRAMERATE),
            (this.wantsPriority = new Set()),
            (this.localSpeakingFlags = {}),
            (this.videoReady = !1),
            (this.videoStreamParameters = []),
            (this.remoteVideoSinkWants = { any: 100 }),
            (this.localVideoSinkWants = { any: 100 }),
            (this.connectionState = u.ConnectionStates.CONNECTING),
            (this.experimentFlags = new Set()),
            (this.context = e),
            (this.ids = t),
            (this.videoQualityManager = new l.VideoQualityManager(e, this));
          let i = n("920363").default;
          this.framerateReducer = new i(this, this.videoQualityManager);
        }
      };
    },
    614276: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          BaseConnectionEvent: function () {
            return i;
          },
        }),
        ((r = i || (i = {})).Destroy = "destroy"),
        (r.LocalVideoDisabled = "local-video-disabled"),
        (r.ActiveSinksChange = "active-sinks-change"),
        (r.ExperimentFlag = "experiment-flag"),
        (r.ConnectionStateChange = "connectionstatechange"),
        (r.Error = "error"),
        (r.Connected = "connected"),
        (r.VideoHookStart = "videohook-start"),
        (r.VideoHookStop = "videohook-stop"),
        (r.VideoHookInitialize = "videohook-initialize"),
        (r.ScreenshareFinish = "screenshare-finish"),
        (r.VideoState = "video-state"),
        (r.SoundshareTrace = "soundsharetrace"),
        (r.SoundshareSpeaking = "soundsharespeaking"),
        (r.SoundshareAttached = "soundshareattached"),
        (r.SoundshareFailed = "soundsharefailed"),
        (r.Speaking = "speaking"),
        (r.SpeakingWhileMuted = "speakingwhilemuted"),
        (r.Mute = "mute"),
        (r.LocalMute = "local-mute"),
        (r.NoiseLevel = "noiselevel"),
        (r.Video = "video"),
        (r.Ping = "ping"),
        (r.PingTimeout = "pingtimeout"),
        (r.Silence = "silence"),
        (r.DesktopSourceEnd = "desktopsourceend"),
        (r.OutboundLossRate = "outboundlossrate"),
        (r.NoiseCancellationError = "noisecancellererror"),
        (r.VoiceActivityDetectorError = "voiceactivitydetectorerror"),
        (r.InteractionRequired = "interactionrequired"),
        (r.AudioPermission = "audio-permission"),
        (r.VideoPermission = "video-permission"),
        (r.Stats = "stats"),
        (r.FirstFrame = "first-frame"),
        (r.VideoEncoderFallback = "video-encoder-fallback"),
        (r.RemoteStreamsReady = "remote-streams-ready");
    },
    571877: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          BaseSpeedTesterEvent: function () {
            return s.BaseSpeedTesterEvent;
          },
          default: function () {
            return i;
          },
        });
      var i,
        r = n("595275"),
        s = n("372534"),
        a = n("353927");
      let o = 0;
      i = class extends r.default {
        destroy() {
          (this.destroyed = !0),
            this.setConnectionState(a.ConnectionStates.DISCONNECTED),
            this.emit(s.BaseSpeedTesterEvent.Destroy, this),
            this.removeAllListeners();
        }
        setConnectionState(e) {
          (this.connectionState = e),
            this.emit(
              s.BaseSpeedTesterEvent.ConnectionStateChange,
              this.connectionState
            );
        }
        initializeStreamParameters(e) {
          this.videoStreamParameters = e
            .filter(e => e.type === a.MediaTypes.TEST)
            .map(e => {
              var t;
              return {
                type: e.type,
                active: e.active,
                rid: null !== (t = e.rid) && void 0 !== t ? t : "",
                ssrc: e.ssrc,
              };
            });
        }
        constructor(e) {
          super(),
            (this.mediaEngineConnectionId = "WebRTC-".concat(o++)),
            (this.destroyed = !1),
            (this.audioSSRC = 0),
            (this.videoStreamParameters = []),
            (this.connectionState = a.ConnectionStates.CONNECTING),
            (this.ids = e);
        }
      };
    },
    372534: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          BaseSpeedTesterEvent: function () {
            return i;
          },
        }),
        ((r = i || (i = {})).Destroy = "destroy"),
        (r.ConnectionStateChange = "connectionstatechange"),
        (r.Error = "error"),
        (r.Connected = "connected"),
        (r.Ping = "ping"),
        (r.PingTimeout = "pingtimeout");
    },
    920363: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        });
      var i,
        r = n("811022"),
        s = n("773364"),
        a = n("353927");
      let o = new r.default("ConnectionEventFramerateReducer");
      i = class {
        initialize() {
          this.userSpeakingChange(!0);
        }
        userSpeakingChange(e) {
          if (!this.connection.hasDesktopSource()) {
            if ((this.destroyFramerateScaleFactorTimers(), !e)) {
              this.sinkWants.isMuted &&
                ((this.sinkWants.isMuted = !1),
                this.updateRemoteWantsFramerate());
              return;
            }
            this.framerateReductionTimeout = setTimeout(() => {
              !this.connection.destroyed &&
                (o.info(
                  "BaseConnection.userSpeakingChange: Reduced framerate after ".concat(
                    a.VIDEO_QUALITY_FRAMRATE_NOT_SPEAKING_TIMEOUT,
                    " ms."
                  )
                ),
                (this.framerateReductionTimeout = void 0),
                (this.sinkWants.isMuted = !0),
                this.updateRemoteWantsFramerate());
            }, a.VIDEO_QUALITY_FRAMRATE_NOT_SPEAKING_TIMEOUT);
          }
        }
        destroyFramerateScaleFactorTimers() {
          "number" == typeof this.framerateReductionTimeout &&
            (clearTimeout(this.framerateReductionTimeout),
            (this.framerateReductionTimeout = void 0));
        }
        updateRemoteWantsFramerate() {
          this.connection.updateVideoQuality(["remoteSinkWantsMaxFramerate"]);
        }
        destroy() {
          this.destroyFramerateScaleFactorTimers();
        }
        constructor(e, t) {
          (this.connection = e),
            (this.sinkWants = t),
            (this.handleSpeaking = (e, t) => {
              e === this.connection.ids.userId &&
                this.userSpeakingChange(t === a.SpeakingFlags.NONE);
            }),
            (this.handleSelfMute = e => {
              !this.connection.hasDesktopSource() &&
                (this.destroyFramerateScaleFactorTimers(),
                (this.sinkWants.isMuted = e),
                this.updateRemoteWantsFramerate());
            }),
            e.on(s.BaseConnectionEvent.Speaking, this.handleSpeaking),
            e.on(s.BaseConnectionEvent.Mute, this.handleSelfMute),
            this.initialize();
        }
      };
    },
    353927: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          DesktopSources: function () {
            return k.DesktopSources;
          },
          MediaEngineContextTypes: function () {
            return g;
          },
          DeviceTypes: function () {
            return I;
          },
          InputModes: function () {
            return C;
          },
          ConnectionStates: function () {
            return v;
          },
          StatsFilter: function () {
            return A;
          },
          VideoToggleReason: function () {
            return R;
          },
          DEFAULT_VOLUME: function () {
            return x;
          },
          DEFAULT_STREAM_VOLUME: function () {
            return F;
          },
          DEFAULT_VOICE_BITRATE: function () {
            return V;
          },
          DEFAULT_SOUNDSHARE_VOICE_BITRATE: function () {
            return B;
          },
          DEFAULT_DEVICE_ID: function () {
            return H;
          },
          DISABLED_DEVICE_ID: function () {
            return j;
          },
          DEFAULT_PRIORITY_SPEAKER_DUCKING: function () {
            return Y;
          },
          DEFAULT_CALL_BITRATE: function () {
            return W;
          },
          DEFAULT_CALL_MIN_BITRATE: function () {
            return K;
          },
          DEFAULT_CALL_MAX_BITRATE: function () {
            return z;
          },
          PING_INTERVAL: function () {
            return q;
          },
          VIDEO_QUALITY_FRAMRATE_NOT_SPEAKING_TIMEOUT: function () {
            return X;
          },
          VIDEO_QUALITY_FRAMERATE: function () {
            return Q;
          },
          VIDEO_QUALITY_FRAMERATE_MUTED: function () {
            return Z;
          },
          VIDEO_QUALITY_FRAMERATE_MUTED_2: function () {
            return J;
          },
          DESKTOP_BITRATE: function () {
            return $;
          },
          DESKTOP_BITRATE_ENHANCED: function () {
            return ee;
          },
          MEDIA_SINK_WANTS_PROPERTIES: function () {
            return et;
          },
          defaultVideoQualityOptions: function () {
            return en;
          },
          VIEWERSIDE_CLIP_KFI_MS: function () {
            return ei;
          },
          Features: function () {
            return N;
          },
          MediaEngineImplementations: function () {
            return O;
          },
          AudioSubsystems: function () {
            return D;
          },
          Codecs: function () {
            return y;
          },
          SpeakingFlags: function () {
            return P;
          },
          MediaTypes: function () {
            return L;
          },
          ResolutionTypes: function () {
            return M;
          },
          ExperimentFlags: function () {
            return U;
          },
          VideoQualityMode: function () {
            return G;
          },
          NoiseCancellerError: function () {
            return w;
          },
        });
      var i,
        r,
        s,
        a,
        o,
        l,
        u,
        c,
        d,
        f,
        E,
        p,
        h,
        _,
        S,
        m,
        T,
        g,
        I,
        C,
        v,
        A,
        R,
        N,
        O,
        D,
        y,
        P,
        L,
        b,
        M,
        U,
        G,
        w,
        k = n("771281");
      ((i = g || (g = {})).DEFAULT = "default"),
        (i.STREAM = "stream"),
        ((r = I || (I = {})).AUDIO_INPUT = "audioinput"),
        (r.AUDIO_OUTPUT = "audiooutput"),
        (r.VIDEO_INPUT = "videoinput"),
        ((s = C || (C = {})).PUSH_TO_TALK = "PUSH_TO_TALK"),
        (s.VOICE_ACTIVITY = "VOICE_ACTIVITY"),
        ((a = v || (v = {})).DISCONNECTED = "DISCONNECTED"),
        (a.CONNECTING = "CONNECTING"),
        (a.CONNECTED = "CONNECTED"),
        (a.NO_ROUTE = "NO_ROUTE"),
        (a.ICE_CHECKING = "ICE_CHECKING"),
        (a.DTLS_CONNECTING = "DTLS_CONNECTING"),
        ((o = A || (A = {}))[(o.TRANSPORT = 1)] = "TRANSPORT"),
        (o[(o.OUTBOUND = 2)] = "OUTBOUND"),
        (o[(o.INBOUND = 4)] = "INBOUND"),
        (o[(o.ALL = 7)] = "ALL"),
        ((l = R || (R = {})).MANUAL_DISABLE = "video_manual_disable"),
        (l.MANUAL_ENABLE = "video_manual_enable"),
        (l.MANUAL_REENABLE = "video_manual_reenable"),
        (l.AUTO_DISABLE = "video_auto_disable"),
        (l.AUTO_ENABLE = "video_auto_enable"),
        (l.AUTO_DOWNGRADE = "video_auto_downgrade"),
        (l.AUTO_UPGRADE = "video_auto_upgrade,");
      let x = 100,
        F = 18,
        V = 64e3,
        B = 128e3,
        H = "default",
        j = "disabled",
        Y = 0.1,
        W = 6e5,
        K = 15e4,
        z = 1e7,
        q = 5e3,
        X = 15e3,
        Q = 30,
        Z = 20,
        J = 12,
        $ = 4e6,
        ee = 8e6,
        et = [
          "remoteSinkWantsPixelCount",
          "remoteSinkWantsMaxFramerate",
          "encodingVideoMinBitRate",
          "encodingVideoMaxBitRate",
          "encodingVideoBitRate",
          "streamParameters",
        ],
        en = {
          videoBudget: { width: 1280, height: 720, framerate: Q },
          videoCapture: { width: 1280, height: 720, framerate: Q },
          videoBitrate: { min: 15e4, max: 25e5 },
          desktopBitrate: { min: 5e5, max: $, target: 6e5 },
          videoBitrateFloor: 15e4,
        },
        ei = 6e4;
      ((u = N || (N = {})).AUTO_ENABLE = "AUTO_ENABLE"),
        (u.ATTENUATION = "ATTENUATION"),
        (u.AUDIO_INPUT_DEVICE = "AUDIO_INPUT_DEVICE"),
        (u.AUDIO_OUTPUT_DEVICE = "AUDIO_OUTPUT_DEVICE"),
        (u.VOICE_PROCESSING = "VOICE_PROCESSING"),
        (u.QOS = "QOS"),
        (u.NATIVE_PING = "NATIVE_PING"),
        (u.LEGACY_AUDIO_SUBSYSTEM = "LEGACY_AUDIO_SUBSYSTEM"),
        (u.EXPERIMENTAL_AUDIO_SUBSYSTEM = "EXPERIMENTAL_AUDIO_SUBSYSTEM"),
        (u.DEBUG_LOGGING = "DEBUG_LOGGING"),
        (u.AUTOMATIC_VAD = "AUTOMATIC_VAD"),
        (u.VOICE_PANNING = "VOICE_PANNING"),
        (u.DIAGNOSTICS = "DIAGNOSTICS"),
        (u.VIDEO = "VIDEO"),
        (u.DESKTOP_CAPTURE = "DESKTOP_CAPTURE"),
        (u.DESKTOP_CAPTURE_FORMAT = "DESKTOP_CAPTURE_FORMAT"),
        (u.DESKTOP_CAPTURE_APPLICATIONS = "DESKTOP_CAPTURE_APPLICATIONS"),
        (u.SOUNDSHARE = "SOUNDSHARE"),
        (u.LOOPBACK = "LOOPBACK"),
        (u.VIDEO_HOOK = "VIDEO_HOOK"),
        (u.EXPERIMENTAL_SOUNDSHARE = "EXPERIMENTAL_SOUNDSHARE"),
        (u.WUMPUS_VIDEO = "WUMPUS_VIDEO"),
        (u.ELEVATED_HOOK = "ELEVATED_HOOK"),
        (u.HYBRID_VIDEO = "HYBRID_VIDEO"),
        (u.OPEN_H264 = "OPEN_H264"),
        (u.EXPERIMENTAL_ENCODERS = "EXPERIMENTAL_ENCODERS"),
        (u.REMOTE_LOCUS_NETWORK_CONTROL = "REMOTE_LOCUS_NETWORK_CONTROL"),
        (u.SCREEN_PREVIEWS = "SCREEN_PREVIEWS"),
        (u.WINDOW_PREVIEWS = "WINDOW_PREVIEWS"),
        (u.AUDIO_DEBUG_STATE = "AUDIO_DEBUG_STATE"),
        (u.AEC_DUMP = "AEC_DUMP"),
        (u.DISABLE_VIDEO = "DISABLE_VIDEO"),
        (u.CONNECTION_REPLAY = "CONNECTION_REPLAY"),
        (u.SIMULCAST = "SIMULCAST"),
        (u.RTC_REGION_RANKING = "RTC_REGION_RANKING"),
        (u.DIRECT_VIDEO = "DIRECT_VIDEO"),
        (u.ELECTRON_VIDEO = "ELECTRON_VIDEO"),
        (u.MEDIAPIPE = "MEDIAPIPE"),
        (u.FIXED_KEYFRAME_INTERVAL = "FIXED_KEYFRAME_INTERVAL"),
        (u.SAMPLE_PLAYBACK = "SAMPLE_PLAYBACK"),
        (u.FIRST_FRAME_CALLBACK = "FIRST_FRAME_CALLBACK"),
        (u.REMOTE_USER_MULTI_STREAM = "REMOTE_USER_MULTI_STREAM"),
        (u.NOISE_SUPPRESSION = "NOISE_SUPPRESSION"),
        (u.NOISE_CANCELLATION = "NOISE_CANCELLATION"),
        (u.AUTOMATIC_GAIN_CONTROL = "AUTOMATIC_GAIN_CONTROL"),
        (u.CLIPS = "CLIPS"),
        (u.SPEED_TEST = "SPEED_TEST"),
        (u.IMAGE_QUALITY_MEASUREMENT = "IMAGE_QUALITY_MEASUREMENT"),
        (u.AMD_EXPERIMENTAL_RATE_CONTROL = "AMD_EXPERIMENTAL_RATE_CONTROL"),
        (u.GO_LIVE_HARDWARE = "GO_LIVE_HARDWARE"),
        (u.SCREEN_CAPTURE_KIT = "SCREEN_CAPTURE_KIT"),
        (u.CAPTURE_TIMEOUT_EXPERIMENTS = "CAPTURE_TIMEOUT_EXPERIMENTS"),
        (u.SCREEN_SOUNDSHARE = "SCREEN_SOUNDSHARE"),
        ((c = O || (O = {})).NATIVE = "NATIVE"),
        (c.WEBRTC = "WEBRTC"),
        (c.DUMMY = "DUMMY"),
        ((d = D || (D = {})).LEGACY = "legacy"),
        (d.STANDARD = "standard"),
        (d.EXPERIMENTAL = "experimental"),
        ((f = y || (y = {})).OPUS = "opus"),
        (f.VP8 = "VP8"),
        (f.VP9 = "VP9"),
        (f.H264 = "H264"),
        (f.RTX = "rtx"),
        (f.TEST = "TEST"),
        ((E = P || (P = {}))[(E.NONE = 0)] = "NONE"),
        (E[(E.VOICE = 1)] = "VOICE"),
        (E[(E.SOUNDSHARE = 2)] = "SOUNDSHARE"),
        (E[(E.PRIORITY = 4)] = "PRIORITY"),
        ((p = L || (L = {})).AUDIO = "audio"),
        (p.VIDEO = "video"),
        (p.SCREEN = "screen"),
        (p.TEST = "test"),
        ((h = b || (b = {})).PLAYING = "playing"),
        (h.PAUSED = "paused"),
        ((_ = M || (M = {})).FIXED = "fixed"),
        (_.SOURCE = "source"),
        ((S = U || (U = {})).VIDEOTOOLBOX_RATE_CONTROL =
          "videotoolbox_rate_control"),
        (S.SIGNAL_H265_SUPPORT = "signal_h265_support"),
        (S.SIGNAL_H265_DECODE_SUPPORT = "signal_h265_decode_support"),
        (S.SIGNAL_AV1_SUPPORT = "signal_av1_support"),
        (S.STREAMER_CLIP = "streamer_clip"),
        (S.VIEWER_CLIP = "viewer_clip"),
        ((m = G || (G = {}))[(m.AUTO = 1)] = "AUTO"),
        (m[(m.FULL = 2)] = "FULL"),
        ((T = w || (w = {}))[(T.CPU_OVERUSE = 1)] = "CPU_OVERUSE"),
        (T[(T.FAILED = 2)] = "FAILED"),
        (T[(T.VAD_CPU_OVERUSE = 3)] = "VAD_CPU_OVERUSE"),
        (T[(T.INITIALIZED = 4)] = "INITIALIZED");
    },
    870630: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("70102"),
        n("222007");
      var i,
        r = n("595275"),
        s = n("773364"),
        a = n("353927");
      function o(e) {
        return null;
      }
      function l(e) {
        return null;
      }
      i = class extends r.default {
        destroy() {
          this.emit(s.MediaEngineEvent.Destroy), this.removeAllListeners();
        }
        interact() {}
        supported() {
          return __OVERLAY__;
        }
        supports(e) {
          if (e === a.Features.AUTO_ENABLE) return __OVERLAY__;
          return !1;
        }
        connect(e, t, n) {
          throw Error("NOT_IMPLEMENTED");
        }
        eachConnection() {}
        enable() {
          return Promise.resolve();
        }
        setInputVolume(e) {}
        setOutputVolume(e) {}
        getAudioInputDevices() {
          return Promise.resolve([]);
        }
        setAudioInputDevice(e) {}
        getAudioOutputDevices() {
          return Promise.resolve([]);
        }
        setAudioOutputDevice(e) {}
        getVideoInputDevices() {
          return Promise.resolve([]);
        }
        setVideoInputDevice(e) {}
        getSupportedVideoCodecs(e) {
          e([]);
        }
        getCodecCapabilities(e) {
          e("");
        }
        getCodecSurvey() {
          return Promise.reject(
            Error("getCodecSurvey is not implemented for MediaEngineDummy")
          );
        }
        getAudioSubsystem() {
          return a.AudioSubsystems.STANDARD;
        }
        getAudioLayer() {
          return "";
        }
        setGoLiveSource(e, t) {}
        setClipsSource(e) {}
        setClipsQualitySettings(e, t, n) {
          return !1;
        }
        setDesktopSource(e) {
          arguments.length > 1 && void 0 !== arguments[1]
            ? arguments[1]
            : a.MediaEngineContextTypes.DEFAULT;
        }
        setSoundshareSource(e, t, n) {}
        getDesktopSource() {
          return Promise.reject(Error("NO_STREAM"));
        }
        getDesktopSources() {
          return Promise.reject(Error("NO_STREAM"));
        }
        getScreenPreviews(e, t) {
          return Promise.reject(Error("UNSUPPORTED"));
        }
        getWindowPreviews(e, t) {
          return Promise.reject(Error("UNSUPPORTED"));
        }
        setClipBufferLength(e) {}
        saveClip(e, t) {
          return Promise.reject(Error("UNSUPPORTED"));
        }
        saveClipForUser(e, t, n) {
          return Promise.reject(Error("UNSUPPORTED"));
        }
        updateClipMetadata(e, t) {
          return Promise.reject(Error("UNSUPPORTED"));
        }
        exportClip(e, t) {
          return Promise.reject(Error("UNSUPPORTED"));
        }
        setAudioSubsystem(e) {}
        getDebugLogging() {
          return !1;
        }
        setDebugLogging(e) {}
        writeAudioDebugState() {
          return Promise.reject(Error("Audio debug state is not supported."));
        }
        setExperimentalAdm(e) {}
        setLoopback(e, t) {}
        getLoopback() {
          return !1;
        }
        setH264Enabled(e) {}
        setAv1Enabled(e) {}
        setH265Enabled(e) {}
        setExperimentFlag(e, t) {}
        startAecDump() {}
        stopAecDump() {}
        setAecDump(e) {}
        createReplayConnection(e, t) {
          throw Error("Connection replay is not supported.");
        }
        setUseDirectVideo(e) {}
        setMaxSyncDelayOverride(e) {}
        rankRtcRegions(e) {
          return Promise.reject(
            Error("RTC region latency test is not supported.")
          );
        }
        getSoundshareStatus() {
          return Promise.reject(Error("Soundshare is not supported."));
        }
        enableSoundshare() {
          return Promise.reject(Error("Soundshare is not supported."));
        }
        applyMediaFilterSettings(e) {
          return Promise.resolve();
        }
        startLocalAudioRecording() {
          return Promise.reject(
            Error("startLocalAudioRecording is not supported.")
          );
        }
        stopLocalAudioRecording(e) {}
        speedTester(e, t) {
          throw Error("NOT_IMPLEMENTED");
        }
        setHasFullbandPerformance(e) {}
        getSupportedSecureFramesProtocolVersion() {
          return 0;
        }
        getSupportedBandwidthEstimationExperiments(e) {
          e([]);
        }
        constructor(...e) {
          super(...e), (this.Video = o), (this.Camera = l);
        }
      };
    },
    775766: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          MediaEngineEvent: function () {
            return i;
          },
        }),
        ((r = i || (i = {})).Destroy = "destroy"),
        (r.Silence = "silence"),
        (r.Connection = "connection"),
        (r.DeviceChange = "devicechange"),
        (r.VolumeChange = "volumechange"),
        (r.VoiceActivity = "voiceactivity"),
        (r.WatchdogTimeout = "watchdogtimeout"),
        (r.AudioPermission = "audio-permission"),
        (r.VideoPermission = "video-permission"),
        (r.DesktopSourceEnd = "desktopsourceend"),
        (r.ConnectionStats = "connection-stats"),
        (r.VideoInputInitialized = "video-input-initialized"),
        (r.ClipsRecordingRestartNeeded = "clips-recording-restart-needed"),
        (r.ClipsInitFailure = "clips-init-failure"),
        (r.ClipsRecordingEnded = "clips-recording-ended");
    },
    582663: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          MediaSinkWantsLadder: function () {
            return r;
          },
        }),
        n("70102"),
        n("222007"),
        n("424973");
      var i = n("353927");
      class r {
        getMaxSinkValue(e) {
          if (e < 0) throw Error("getMaxSinkValue: Requested " + e);
          let t = this.orderedLadder[0].wantValue;
          for (let { pixelCount: n, wantValue: i } of this.orderedLadder) {
            if (n * e > this.pixelBudget) break;
            t = i;
          }
          return t;
        }
        getResolution(e) {
          let t = null;
          for (let n of this.orderedLadder)
            if (e >= n.wantValue) t = n;
            else break;
          return {
            width: (t = null != t ? t : this.orderedLadder[0]).width,
            height: t.height,
            budgetPortion: t.budgetPortion,
            mutedFramerate: t.mutedFramerate,
            framerate: t.framerate,
          };
        }
        static calculateLadder(e) {
          let t = new Set([0, 4, 8, 10]),
            n = [];
          for (let i = 1; i < 4096; ++i) {
            let r = (16 * i) / 9;
            if (t.has(r % 16) && t.has(i % 16)) {
              let t = r * i;
              n.push({
                pixelCount: t,
                width: r,
                height: i,
                budgetPortion: t / e,
                wantValue: 0,
              });
            }
          }
          let s = {},
            a = 0,
            o = 100;
          for (let t = 1; t <= 25; ++t) {
            let l = 0,
              u = 0,
              c = 0;
            for (let i of n) {
              if (i.pixelCount * t > e) break;
              (l = i.width), (u = i.height), (c = i.budgetPortion);
            }
            if (a !== l) {
              let e = r.getMutedFramerate(o);
              (s[o] = {
                width: l,
                height: u,
                budgetPortion: c,
                mutedFramerate: e,
                framerate: i.VIDEO_QUALITY_FRAMERATE,
              }),
                (o -= 10),
                (a = l);
            }
          }
          return s;
        }
        static getMutedFramerate(e) {
          return e <= 20
            ? i.VIDEO_QUALITY_FRAMERATE_MUTED_2
            : i.VIDEO_QUALITY_FRAMERATE_MUTED;
        }
        static calculateOrderedLadder(e) {
          let t = [],
            n = Object.keys(e)
              .map(e => Number(e))
              .sort((e, t) => e - t);
          for (let i of n) {
            if (0 === i) continue;
            let n = e[i];
            t.push({ pixelCount: n.width * n.height, wantValue: i, ...n });
          }
          return t;
        }
        constructor(e = i.defaultVideoQualityOptions) {
          let { width: t, height: n } = e.videoBudget;
          if (t <= 0 || n <= 0) throw Error("Invalid argument");
          (this.pixelBudget = t * n),
            (this.ladder = r.calculateLadder(this.pixelBudget)),
            (this.orderedLadder = r.calculateOrderedLadder(this.ladder));
        }
      }
    },
    22546: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          STATS_INTERVAL: function () {
            return i;
          },
        });
      let i = 1e3;
    },
    685961: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          VIDEO_QUALITY_MODES_TO_OVERWRITES: function () {
            return s;
          },
          VideoQuality: function () {
            return o;
          },
          VideoQualityManager: function () {
            return l;
          },
        }),
        n("70102");
      var i = n("582663"),
        r = n("353927");
      let s = Object.freeze({
        [r.VideoQualityMode.AUTO]: {},
        [r.VideoQualityMode.FULL]: { encode: { width: 1280, height: 720 } },
      });
      class a {
        constructor(e) {
          if (null == e.capture && null == e.encode)
            throw Error("Invalid arguments.");
          (this.capture = null == e.capture ? void 0 : new o(e.capture)),
            (this.encode = null == e.encode ? void 0 : new o(e.encode)),
            (this.bitrateMin = e.bitrateMin),
            (this.bitrateMax = e.bitrateMax),
            (this.bitrateTarget = e.bitrateTarget),
            (this.localWant = e.localWant);
        }
      }
      class o {
        static equals(e, t) {
          return (
            (null == e && null == t) ||
            (null != e &&
              null != t &&
              e.width === t.width &&
              e.height === t.height &&
              e.framerate === t.framerate)
          );
        }
        static extend(e, t) {
          var n, i, r;
          return null == e
            ? t
            : null == t
              ? e
              : {
                  width:
                    null !== (n = null == t ? void 0 : t.width) && void 0 !== n
                      ? n
                      : null == e
                        ? void 0
                        : e.width,
                  height:
                    null !== (i = null == t ? void 0 : t.height) && void 0 !== i
                      ? i
                      : null == e
                        ? void 0
                        : e.height,
                  framerate:
                    null !== (r = null == t ? void 0 : t.framerate) &&
                    void 0 !== r
                      ? r
                      : null == e
                        ? void 0
                        : e.framerate,
                };
        }
        constructor(e) {
          (this.width = e.width),
            (this.height = e.height),
            (this.framerate = e.framerate),
            (this.pixelCount = e.width * e.height);
        }
      }
      class l {
        getQuality(e) {
          var t, n, i;
          let r = this.isStreamContext
            ? this.getDesktopQuality()
            : this.getVideoQuality(this.connection.getLocalWant(e));
          return new a({
            encode: o.extend(r.encode, this.qualityOverwrite.encode),
            capture: o.extend(r.capture, this.qualityOverwrite.capture),
            bitrateMin:
              null !== (t = this.qualityOverwrite.bitrateMin) && void 0 !== t
                ? t
                : r.bitrateMin,
            bitrateMax:
              null !== (n = this.qualityOverwrite.bitrateMax) && void 0 !== n
                ? n
                : r.bitrateMax,
            bitrateTarget:
              null !== (i = this.qualityOverwrite.bitrateTarget) && void 0 !== i
                ? i
                : r.bitrateTarget,
            localWant: r.localWant,
          });
        }
        applyQualityConstraints(e, t) {
          let n = this.getQuality(t);
          return (
            null != n.capture &&
              ((e.encodingVideoWidth = n.capture.width),
              (e.encodingVideoHeight = n.capture.height),
              (e.encodingVideoFrameRate = n.capture.framerate)),
            null != n.encode &&
              ((e.remoteSinkWantsMaxFramerate = n.encode.framerate),
              (e.remoteSinkWantsPixelCount = n.encode.pixelCount)),
            null != n.bitrateTarget
              ? (e.encodingVideoBitRate = n.bitrateTarget)
              : (e.encodingVideoBitRate = n.bitrateMax),
            (e.encodingVideoMinBitRate = n.bitrateMin),
            (e.encodingVideoMaxBitRate = n.bitrateMax),
            null != e.encodingVideoBitRate &&
              null != e.encodingVideoMaxBitRate &&
              (e.encodingVideoBitRate = Math.min(
                e.encodingVideoBitRate,
                e.encodingVideoMaxBitRate
              )),
            { quality: n, constraints: e }
          );
        }
        setQuality(e) {
          (this.qualityOverwrite.capture = e.capture),
            (this.qualityOverwrite.encode = e.encode),
            (this.qualityOverwrite.bitrateMin = e.bitrateMin),
            (this.qualityOverwrite.bitrateMax = e.bitrateMax),
            (this.qualityOverwrite.bitrateTarget = e.bitrateTarget);
        }
        getVideoQuality(e) {
          let t = this.ladder.getResolution(e),
            n = this.options.videoBitrate.min * t.budgetPortion,
            i = this.options.videoBitrate.max * t.budgetPortion,
            r = this.isMuted ? t.mutedFramerate : t.framerate;
          return new a({
            encode: { ...t, framerate: r },
            capture: {
              width: this.options.videoCapture.width,
              height: this.options.videoCapture.height,
              framerate: this.options.videoCapture.framerate,
            },
            bitrateMin: n,
            bitrateMax: Math.max(i, this.options.videoBitrateFloor),
            localWant: e,
          });
        }
        getDesktopQuality() {
          return new a({
            capture: {
              width: 1280,
              height: 720,
              framerate: r.VIDEO_QUALITY_FRAMERATE,
            },
            bitrateMin: this.options.desktopBitrate.min,
            bitrateMax: this.options.desktopBitrate.max,
            bitrateTarget: this.options.desktopBitrate.target,
          });
        }
        constructor(e, t, n = r.defaultVideoQualityOptions) {
          (this.contextType = e),
            (this.connection = t),
            (this.options = n),
            (this.isMuted = !1),
            (this.qualityOverwrite = {}),
            (this.isStreamContext =
              this.contextType === r.MediaEngineContextTypes.STREAM),
            (this.ladder = new i.MediaSinkWantsLadder(n));
        }
      }
    },
    773364: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          BaseConnectionEvent: function () {
            return u.BaseConnectionEvent;
          },
          BaseSpeedTesterEvent: function () {
            return c.BaseSpeedTesterEvent;
          },
          MediaEngineEvent: function () {
            return d.MediaEngineEvent;
          },
          MediaEngineContextTypes: function () {
            return f.MediaEngineContextTypes;
          },
          FilterTargetType: function () {
            return a;
          },
          FilterSettingsGraph: function () {
            return o;
          },
          FilterSettingsKey: function () {
            return l;
          },
          determineMediaEngine: function () {
            return p;
          },
          initializeMediaEngine: function () {
            return h;
          },
        });
      var i,
        r,
        s,
        a,
        o,
        l,
        u = n("947279"),
        c = n("571877"),
        d = n("775766"),
        f = n("353927");
      function E(e) {
        switch (e) {
          case f.MediaEngineImplementations.NATIVE:
            return n("741397").default;
          case f.MediaEngineImplementations.WEBRTC:
            return n("551079").default;
          case f.MediaEngineImplementations.DUMMY:
          default:
            return n("870630").default;
        }
      }
      function p() {
        var e;
        return null !==
          (e = [
            f.MediaEngineImplementations.NATIVE,
            f.MediaEngineImplementations.WEBRTC,
          ].find(e => E(e).supported())) && void 0 !== e
          ? e
          : f.MediaEngineImplementations.DUMMY;
      }
      function h(e) {
        let t = E(e);
        return new t();
      }
      ((i = a || (a = {})).INPUT_DEVICE = "input_device"),
        (i.STREAM = "stream"),
        ((r = o || (o = {})).NONE = ""),
        (r.BACKGROUND_BLUR = "background_blur"),
        (r.BACKGROUND_REPLACEMENT = "background_replacement"),
        ((s = l || (l = {})).CAMERA_BACKGROUND_PREVIEW =
          "cameraBackgroundPreview"),
        (s.CAMERA_BACKGROUND_LIVE = "cameraBackgroundLive");
    },
    784343: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("854508"),
        n("222007"),
        n("70102"),
        n("424973"),
        n("808653");
      var i,
        r = n("773179"),
        s = n.n(r),
        a = n("53379"),
        o = n("811022"),
        l = n("947279"),
        u = n("22546"),
        c = n("685961"),
        d = n("773364"),
        f = n("668906"),
        E = n("573015"),
        p = n("784063"),
        h = n("539578"),
        _ = n("595432"),
        S = n("353927"),
        m = n("149416");
      let T = 0;
      function g(e) {
        return null != e && 0 !== e ? e + 1 : 0;
      }
      i = class e extends l.default {
        static create(t, n, i) {
          let r = new e(t, n, !0);
          return r.initialize(i), r;
        }
        static createReplay(t, n) {
          let i = new e(t, { userId: "0", channelId: "0", guildId: "0" }, !0),
            r = (0, p.getVoiceEngine)();
          i.initializeStreamParameters([
            {
              type: S.MediaTypes.VIDEO,
              rid: "100",
              ssrc: 0,
              rtxSsrc: 0,
              quality: 100,
              active: !1,
            },
          ]);
          let s = r.createReplayConnection(
            "default",
            (e, n) => {
              let s =
                null != r.getCodecCapabilities
                  ? r.getCodecCapabilities
                  : r.getSupportedVideoCodecs;
              i.on(d.BaseConnectionEvent.Stats, i.handleStats),
                i.conn.setOnVideoCallback(i.handleVideo),
                s(e => {
                  let n = (0, f.getExperimentCodecs)(
                    i.experimentFlags,
                    m.MediaEngineContextTypes.DEFAULT
                  );
                  (i.codecs = [
                    {
                      type: "audio",
                      name: m.Codecs.OPUS,
                      priority: 1,
                      payloadType: 120,
                    },
                    ...(0, f.filterVideoCodecs)(e, n).map((e, t) => {
                      let n = 101 + 2 * t;
                      return {
                        type: "video",
                        name: e.name,
                        priority: t + 1,
                        payloadType: n,
                        rtxPayloadType: n + 1,
                        encode: e.encode,
                        decode: e.decode,
                      };
                    }),
                  ]),
                    i.setCodecs(m.Codecs.OPUS, m.Codecs.H264, t),
                    i.conn.startReplay();
                });
            },
            n
          );
          return null == s ? null : ((i.conn = s), i);
        }
        initialize(e) {
          let t;
          this.logger.info(
            "Creating connection to "
              .concat(e.address, ":")
              .concat(e.port, " with audio ssrc: ")
              .concat(e.ssrc)
          ),
            (this.audioSSRC = e.ssrc),
            (this.streamUserId = e.streamUserId),
            this.initializeStreamParameters(e.streamParameters),
            (e.streamParameters = this.videoStreamParameters);
          let n = (0, p.getVoiceEngine)(),
            i =
              null != n.getCodecCapabilities
                ? n.getCodecCapabilities
                : n.getSupportedVideoCodecs;
          if (null != n.createOwnStreamConnectionWithOptions) {
            let e =
              this.context === m.MediaEngineContextTypes.STREAM &&
              this.streamUserId === this.ids.userId;
            s = e
              ? n.createOwnStreamConnectionWithOptions
              : n.createVoiceConnectionWithOptions;
          } else if (null != n.createOwnStreamConnection) {
            let e =
              this.context === m.MediaEngineContextTypes.STREAM &&
              this.streamUserId === this.ids.userId;
            var r,
              s,
              a = e ? n.createOwnStreamConnection : n.createVoiceConnection;
            s = (e, t, n) =>
              a(
                t.ssrc,
                this.ids.userId,
                t.address,
                t.port,
                n,
                t.experiments,
                t.streamParameters
              );
          } else
            s = (e, t, i) =>
              new n.VoiceConnection(
                t.ssrc,
                e,
                t.address,
                t.port,
                i,
                t.experiments,
                t.streamParameters
              );
          null ===
            (r = (t = this.conn =
              s(this.ids.userId, e, (r, s) => {
                if (this.destroyed) return;
                if (null != r && "" !== r) {
                  this.setConnectionState(m.ConnectionStates.NO_ROUTE),
                    this.emit(d.BaseConnectionEvent.Error, r);
                  return;
                }
                if (null == s) throw Error("Invalid transport info");
                let { protocol: a, address: o, port: l } = s;
                this.logger.info(
                  "Connected with local address "
                    .concat(o, ":")
                    .concat(l, " and protocol: ")
                    .concat(a)
                ),
                  i(i => {
                    let r = (0, f.getExperimentCodecs)(
                      this.experimentFlags,
                      this.context
                    );
                    (this.codecs = [
                      {
                        type: "audio",
                        name: m.Codecs.OPUS,
                        priority: 1,
                        payloadType: 120,
                      },
                      ...(0, f.filterVideoCodecs)(i, r).map((e, t) => {
                        let n = 101 + 2 * t;
                        return {
                          type: "video",
                          name: e.name,
                          priority: t + 1,
                          payloadType: n,
                          rtxPayloadType: n + 1,
                          encode: e.encode,
                          decode: e.decode,
                        };
                      }),
                    ]),
                      this.logger.info(
                        "Video codecs: ".concat(this.codecs.map(e => e.name))
                      ),
                      t.getEncryptionModes(i => {
                        var r, s, u, c, f, E, p, h, _;
                        this.logger.info("Encryption modes: ".concat(i)),
                          t.setTransportOptions(
                            this.getConnectionTransportOptions()
                          ),
                          t.setSelfMute(
                            this.selfMute ||
                              this.context === m.MediaEngineContextTypes.STREAM
                          ),
                          t.setSelfDeafen(this.selfDeaf),
                          t.setOnSpeakingCallback(this.handleSpeakingNative),
                          null === (r = t.setOnSpeakingWhileMutedCallback) ||
                            void 0 === r ||
                            r.call(t, this.handleSpeakingWhileMuted),
                          null === (s = t.setPingInterval) ||
                            void 0 === s ||
                            s.call(t, m.PING_INTERVAL),
                          t.setPingCallback(this.handlePing),
                          null === (u = t.setPingTimeoutCallback) ||
                            void 0 === u ||
                            u.call(t, this.handlePingTimeout),
                          null === (c = t.setOnVideoEncoderFallbackCallback) ||
                            void 0 === c ||
                            c.call(t, this.handleVideoEncoderFallback),
                          n.setTransportOptions({
                            builtInEchoCancellation: !0,
                            echoCancellation: this.echoCancellation,
                            noiseSuppression: this.noiseSuppression,
                            automaticGainControl: this.automaticGainControl,
                            noiseCancellation: this.noiseCancellation,
                          }),
                          n.setNoInputThreshold(-100),
                          n.setNoInputCallback(this.handleNoInput),
                          this.videoSupported &&
                            (t.setOnVideoCallback(this.handleVideo),
                            null === (f = t.setOnFirstFrameCallback) ||
                              void 0 === f ||
                              f.call(t, this.handleFirstFrame),
                            null === (E = t.setOnDesktopSourceEnded) ||
                              void 0 === E ||
                              E.call(t, this.handleDesktopSourceEnded),
                            null === (p = t.setOnSoundshare) ||
                              void 0 === p ||
                              p.call(t, this.handleSoundshare),
                            null === (h = t.setOnSoundshareEnded) ||
                              void 0 === h ||
                              h.call(t, this.handleSoundshareEnded),
                            null === (_ = t.setOnSoundshareFailed) ||
                              void 0 === _ ||
                              _.call(t, this.handleSoundshareFailed)),
                          this.setConnectionState(m.ConnectionStates.CONNECTED),
                          this.emit(d.BaseConnectionEvent.Connected, a, {
                            address: o,
                            port: l,
                            mode: this.chooseEncryptionMode(e.modes, i),
                            codecs: this.codecs,
                          }),
                          this.on(
                            d.BaseConnectionEvent.Stats,
                            this.handleStats
                          );
                        let S = this.getUserOptions();
                        for (let e of (S.forEach(e => {
                          var t, n;
                          return this.logger.info(
                            "Creating user: "
                              .concat(e.id, " with audio SSRC: ")
                              .concat(e.ssrc, " and video SSRCs: ")
                              .concat(
                                null !==
                                  (n =
                                    null === (t = e.videoSsrcs) || void 0 === t
                                      ? void 0
                                      : t.join(",")) && void 0 !== n
                                  ? n
                                  : 0
                              )
                          );
                        }),
                        t.mergeUsers(S),
                        this.emit(
                          d.BaseConnectionEvent.RemoteStreamsReady,
                          S.length
                        ),
                        Object.keys(this.localSpeakingFlags)))
                          e !== this.ids.userId &&
                            this.setSpeakingFlags(
                              e,
                              this.localSpeakingFlags[e]
                            );
                      });
                  });
              })).setDesktopSourceStatusCallback) ||
            void 0 === r ||
            r.call(t, e => {
              if ("videohook_start" === e.type)
                this.emit(d.BaseConnectionEvent.VideoHookStart);
              else if ("videohook_stop" === e.type)
                this.emit(d.BaseConnectionEvent.VideoHookStop);
              else if ("videohook_initialize" === e.type)
                this.emit(
                  d.BaseConnectionEvent.VideoHookInitialize,
                  e.backend,
                  e.format,
                  e.framebufferFormat,
                  e.sampleCount,
                  e.success,
                  e.reinitialization
                );
              else if ("screenshare_finish" === e.type) {
                var t;
                this.emit(
                  d.BaseConnectionEvent.ScreenshareFinish,
                  e.screenshareFrames,
                  e.videohookFrames,
                  e.hybridDxgiFrames,
                  e.hybridGdiFrames,
                  e.hybridVideohookFrames,
                  e.hybridGraphicsCaptureFrames,
                  e.hybridCaptureMethodSwitches,
                  e.quartzFrames,
                  null !== (t = e.desktopCapturerType) && void 0 !== t
                    ? t
                    : e.desktop_capturer_type,
                  e.screens,
                  e.windows,
                  e.activity,
                  e.goLiveCameraFrames,
                  e.screenCaptureKitFrames
                );
              } else
                "video_state" === e.type
                  ? this.emit(d.BaseConnectionEvent.VideoState, e.state)
                  : e.type.startsWith("soundshare_") &&
                    this.emit(d.BaseConnectionEvent.SoundshareTrace, e);
            }),
            this.on("newListener", this.handleNewListenerNative);
        }
        destroy() {
          this.conn.destroy(),
            s(this.localSpeakingFlags)
              .keys()
              .reject(e => e === this.ids.userId)
              .forEach(e =>
                this.emit(
                  d.BaseConnectionEvent.Speaking,
                  e,
                  m.SpeakingFlags.NONE,
                  this.remoteAudioSSRCs[e]
                )
              ),
            this.setConnectionState(m.ConnectionStates.DISCONNECTED),
            super.destroy();
        }
        setCodecs(e, t, n) {
          this.conn.setTransportOptions(this.getCodecOptions(e, t, n)),
            this.videoEncoderFallbackPending &&
              (this.videoEncoderFallbackPending = !1);
        }
        getStats() {
          return this.connectionState === m.ConnectionStates.DISCONNECTED
            ? Promise.resolve(null)
            : (0, a.timeout)(
                new Promise(e => {
                  if (null != this.conn.getFilteredStats)
                    this.conn.getFilteredStats(S.StatsFilter.ALL, t =>
                      e(
                        (0, h.default)(
                          this.mediaEngineConnectionId,
                          t,
                          this.remoteVideoSinkWants,
                          this.localVideoSinkWants
                        )
                      )
                    );
                  else if (null != this.conn.getStats)
                    this.conn.getStats(t =>
                      e(
                        (0, h.default)(
                          this.mediaEngineConnectionId,
                          t,
                          this.remoteVideoSinkWants,
                          this.localVideoSinkWants
                        )
                      )
                    );
                  else {
                    let t = (0, p.getVoiceEngine)();
                    t.getStats(t =>
                      e(
                        (0, h.default)(
                          this.mediaEngineConnectionId,
                          t,
                          this.remoteVideoSinkWants,
                          this.localVideoSinkWants
                        )
                      )
                    );
                  }
                }),
                u.STATS_INTERVAL
              ).catch(e => {
                if (!(e instanceof a.TimeoutError)) throw e;
              });
        }
        createUser(e, t, n) {
          if (0 === t) {
            this.logger.warn(
              "Attempting to create user ".concat(e, " with 0 audio SSRC")
            );
            return;
          }
          let i = this.remoteAudioSSRCs[e],
            r = this.remoteVideoSSRCs[e];
          (r = void 0 !== r ? [...r].sort() : []),
            (n = void 0 === n ? (null != r ? r : []) : [...n].sort());
          let a = i !== t,
            o = !s.isEqual(r, n);
          if (
            ((this.remoteAudioSSRCs[e] = t),
            (this.remoteVideoSSRCs[e] = null != n ? n : []),
            this.ids.userId !== e && (a || o))
          ) {
            let i = void 0 !== n && n.length > 0 ? n[0] : 0,
              r = {
                id: e,
                ssrc: t,
                videoSsrc: i,
                videoSsrcs: n,
                rtxSsrc: g(i),
                mute: this.getLocalMute(e),
                volume: this.getLocalVolume(e),
              };
            if (this.connectionState === m.ConnectionStates.CONNECTED) {
              var l;
              this.logger.info(
                "Creating user: "
                  .concat(e, " with audio SSRC: ")
                  .concat(t, " and video SSRCs: ")
                  .concat(
                    null !== (l = null == n ? void 0 : n.join(",")) &&
                      void 0 !== l
                      ? l
                      : 0
                  )
              ),
                this.conn.mergeUsers([r]);
            }
            let s = this.localPans[e];
            null != s && this.setLocalPan(e, s.left, s.right);
            let a = this.localSpeakingFlags[e];
            null != a &&
              a !== m.SpeakingFlags.NONE &&
              this.setSpeakingFlags(e, a);
          }
        }
        destroyUser(e) {
          null != this.remoteAudioSSRCs[e] &&
            (this.conn.destroyUser(e),
            delete this.remoteAudioSSRCs[e],
            delete this.remoteVideoSSRCs[e]);
        }
        setSelfMute(e) {
          (this.selfMute = e),
            this.conn.setSelfMute(e),
            this.emit(d.BaseConnectionEvent.Mute, e);
        }
        setSelfDeaf(e) {
          (this.selfDeaf = e), this.conn.setSelfDeafen(e);
        }
        setSoundshareSource(e, t) {
          if (
            (this.soundshareId === e && this.soundshareSentSpeakingEvent) ||
            this.context !== m.MediaEngineContextTypes.STREAM
          )
            return;
          (this.soundshareId = e), (this.soundshareSentSpeakingEvent = !1);
          let n = e;
          null === n && (n = 0),
            this.conn.setTransportOptions({
              soundsharePid: n,
              soundshareEventDriven: !0,
              soundshareLoopback: t,
            });
        }
        setLocalMute(e, t) {
          (this.localMutes[e] = t),
            this.conn.setLocalMute(e, t),
            this.emit(d.BaseConnectionEvent.LocalMute, e, t);
        }
        fastUdpReconnect() {
          null != this.conn.fastUdpReconnect &&
            ((this.numFastUdpReconnects += 1), this.conn.fastUdpReconnect());
        }
        getNumFastUdpReconnects() {
          return null != this.conn.fastUdpReconnect
            ? this.numFastUdpReconnects
            : null;
        }
        setLocalVideoDisabled(e, t) {
          (this.disabledLocalVideos[e] = t),
            this.emit(d.BaseConnectionEvent.LocalVideoDisabled, e, t);
        }
        setMinimumJitterBufferLevel(e) {
          this.minimumJitterBufferLevel = e;
        }
        setPostponeDecodeLevel(e) {
          this.postponeDecodeLevel = e;
        }
        setClipRecordUser(e, t, n) {
          !this.destroyed &&
            this.conn.setClipRecordUser(
              e,
              (this.context === m.MediaEngineContextTypes.STREAM
                ? "application"
                : "user"
              ).concat("audio" === t ? "Audio" : "Video"),
              n
            );
        }
        setClipsKeyFrameInterval(e) {
          this.context === m.MediaEngineContextTypes.STREAM &&
            ((this.clipsKeyFrameInterval = e),
            this.conn.setTransportOptions({
              keyframeInterval: this.getKeyFrameInterval(),
              alwaysSendVideo: this.keyframeInterval > 0,
            }));
        }
        setViewerSideClip(e) {
          this.context === m.MediaEngineContextTypes.STREAM &&
            this.conn.setTransportOptions({ enableViewerSideClip: e });
        }
        setQualityDecoupling(e) {
          this.context === m.MediaEngineContextTypes.STREAM &&
            this.conn.setTransportOptions({ enableQualityDecoupling: e });
        }
        getLocalVolume(e) {
          var t;
          let n = this.localVolumes[e];
          return (
            null == n &&
              (n =
                this.context === m.MediaEngineContextTypes.DEFAULT
                  ? m.DEFAULT_VOLUME
                  : m.DEFAULT_STREAM_VOLUME),
            (null != (t = n) ? t : m.DEFAULT_VOLUME) / m.DEFAULT_VOLUME
          );
        }
        setLocalVolume(e, t) {
          this.localVolumes[e] = t;
          try {
            this.conn.setLocalVolume(e, this.getLocalVolume(e));
          } catch {
            this.logger.warn(
              "Failed to set volume for user: ".concat(e, ": ").concat(t)
            );
          }
        }
        setLocalPan(e, t, n) {
          (this.localPans[e] = { left: t, right: n }),
            this.conn.setLocalPan(e, t, n);
        }
        isAttenuating() {
          return this.attenuationFactor < 1;
        }
        setAttenuation(e, t, n) {
          (this.attenuationFactor = (100 - e) / 100),
            (this.attenuateWhileSpeakingSelf = t),
            (this.attenuateWhileSpeakingOthers = n),
            this.conn.setTransportOptions(this.getAttenuationOptions());
        }
        setCanHavePriority(e, t) {
          var n, i;
          null === (n = (i = this.conn).setRemoteUserCanHavePriority) ||
            void 0 === n ||
            n.call(i, e, t);
        }
        setBitRate(e) {
          this.setVoiceBitRate(e);
        }
        setVoiceBitRate(e) {
          if (this.voiceBitrate === e) return;
          this.voiceBitrate = e;
          let t = this.voiceBitrate;
          this.soundshareActive &&
            (t = Math.max(m.DEFAULT_SOUNDSHARE_VOICE_BITRATE, t)),
            this.conn.setTransportOptions({ encodingVoiceBitRate: t });
        }
        setCameraBitRate(e, t, n) {
          null != n || null != t
            ? this.videoQualityManager.setQuality({
                bitrateMin: null != n && n > 0 ? n : t,
                bitrateMax: t,
              })
            : this.videoQualityManager.setQuality({}),
            !this.hasDesktopSource() &&
              this.conn.setTransportOptions({
                encodingVideoBitRate: e,
                encodingVideoMinBitRate: n,
                encodingVideoMaxBitRate: t,
              });
        }
        setEchoCancellation(e) {
          (this.echoCancellation = e),
            (0, p.getVoiceEngine)().setTransportOptions({
              echoCancellation: this.echoCancellation,
            });
        }
        setNoiseSuppression(e) {
          (this.noiseSuppression = e),
            (0, p.getVoiceEngine)().setTransportOptions({
              noiseSuppression: this.noiseSuppression,
            });
        }
        setAutomaticGainControl(e) {
          (this.automaticGainControl = e),
            (0, p.getVoiceEngine)().setTransportOptions({
              automaticGainControl: this.automaticGainControl,
            });
        }
        setNoiseCancellation(e) {
          (this.noiseCancellation = e),
            (0, p.getVoiceEngine)().setTransportOptions({
              noiseCancellation: this.noiseCancellation,
            });
        }
        setExperimentalEncoders(e) {
          (this.experimentalEncoders = e),
            this.conn.setTransportOptions({
              experimentalEncoders: this.experimentalEncoders,
            });
        }
        setHardwareH264(e) {
          (this.hardwareH264 = e),
            this.conn.setTransportOptions({ hardwareH264: this.hardwareH264 });
        }
        setQoS(e) {
          (this.qos = e), this.conn.setTransportOptions({ qos: this.qos });
        }
        setInputMode(e, t) {
          switch (((this.inputMode = e), e)) {
            case m.InputModes.PUSH_TO_TALK:
              this.pttReleaseDelay = t.pttReleaseDelay;
              break;
            case m.InputModes.VOICE_ACTIVITY:
              (this.vadThreshold = t.vadThreshold),
                (this.vadAutoThreshold = t.vadAutoThreshold),
                (this.vadUseKrisp = t.vadUseKrisp),
                (this.vadLeading = t.vadLeading),
                (this.vadTrailing = t.vadTrailing);
              break;
            default:
              throw Error("Unknown Input Mode: ".concat(e));
          }
          this.conn.setTransportOptions({
            inputMode: m.NATIVE_MODE_VALUES[this.inputMode],
            inputModeOptions: this.createInputModeOptions(),
          });
        }
        setSilenceThreshold(e) {
          (0, p.getVoiceEngine)().setNoInputThreshold(e);
        }
        setForceAudioInput(e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          t ? (this.forceAudioPriority = e) : (this.forceAudioNormal = e),
            this.conn.setPTTActive(
              this.forceAudioPriority || this.forceAudioNormal,
              this.forceAudioPriority
            );
        }
        setSpeakingFlags(e, t) {
          null != this.conn.setRemoteUserSpeakingStatus
            ? this.conn.setRemoteUserSpeakingStatus(e, t)
            : null != this.conn.setRemoteUserSpeaking &&
              this.conn.setRemoteUserSpeaking(
                e,
                (t & m.SpeakingFlags.VOICE) === m.SpeakingFlags.VOICE
              ),
            this.handleSpeakingFlags(e, t);
        }
        clearAllSpeaking() {}
        setEncryption(e, t) {
          this.logger.info("Selected encryption mode: ".concat(e)),
            this.conn.setTransportOptions({
              encryptionSettings: { mode: e, secretKey: t },
            });
        }
        setReconnectInterval(e) {
          (this.reconnectInterval = e),
            this.conn.setTransportOptions({
              reconnectInterval: this.reconnectInterval,
            });
        }
        setKeyframeInterval(e) {
          (this.keyframeInterval = e),
            this.conn.setTransportOptions({
              keyframeInterval: this.getKeyFrameInterval(),
              alwaysSendVideo: this.keyframeInterval > 0,
            });
        }
        setVideoQualityMeasurement(e) {
          (this.videoQualityMeasurement = e),
            this.conn.setTransportOptions({
              videoQualityMeasurement: this.videoQualityMeasurement,
            });
        }
        setVideoEncoderExperiments(e) {
          (this.videoEncoderExperiments = e),
            this.conn.setTransportOptions({
              videoEncoderExperiments: this.videoEncoderExperiments,
            });
        }
        setVideoBroadcast(e) {
          this.selfVideo !== e &&
            ((this.selfVideo = e), this.applyVideoTransportOptions());
        }
        setGoLiveSource(e) {
          let { resolution: t, frameRate: n } = e.quality,
            i = t <= 480 ? (t / 3) * 4 : (t / 9) * 16,
            r = null;
          if (
            (null != e.desktopDescription
              ? (r = e.desktopDescription.id)
              : null != e.cameraDescription &&
                (r = ""
                  .concat(e.cameraDescription.videoDeviceGuid, ":")
                  .concat(e.cameraDescription.audioDeviceGuid)),
            this.goLiveSourceIdentifier === r)
          ) {
            this.setDesktopEncodingOptions(i, t, n);
            return;
          }
          if (
            ((this.goLiveSourceIdentifier = r),
            null != this.conn.setDesktopSource)
          ) {
            if (null != e.desktopDescription) {
              let {
                id: t,
                soundshareId: n,
                useLoopback: i,
                useVideoHook: r,
                useGraphicsCapture: s,
                useQuartzCapturer: a,
                allowScreenCaptureKit: o,
                videoHookStaleFrameTimeoutMs: l,
                graphicsCaptureStaleFrameTimeoutMs: u,
                hdrCaptureMode: c,
              } = e.desktopDescription;
              this.setSoundshareSource(n, i);
              let [d, f] = null != t ? t.split(":") : ["", ""];
              null != t
                ? this.logger.info(
                    "capturing desktop (type: "
                      .concat(d, ", handle: ")
                      .concat(f, ", use-video-hook: ")
                      .concat(r.toString(), ", use-graphics-capture: ")
                      .concat(null == s ? void 0 : s.toString(), ").")
                  )
                : this.logger.info("capturing desktop (type: <stop>)."),
                null != this.conn.setDesktopSourceWithOptions
                  ? null != t
                    ? this.conn.setDesktopSourceWithOptions({
                        type: d,
                        sourceId: f,
                        useVideoHook: r,
                        useGraphicsCapture: s,
                        useQuartzCapturer: a,
                        allowScreenCaptureKit: o,
                        videoHookStaleFrameTimeoutMs: l,
                        graphicsCaptureStaleFrameTimeoutMs: u,
                        hdrCaptureMode: c,
                      })
                    : this.conn.clearDesktopSource()
                  : this.conn.setDesktopSource("wumpus-".concat(f), r, d);
            } else if (null != e.cameraDescription) {
              let { videoDeviceGuid: t, audioDeviceGuid: n } =
                e.cameraDescription;
              this.conn.setGoLiveDevices({
                videoInputDeviceId: t,
                audioInputDeviceId: n,
              });
            }
            this.setDesktopEncodingOptions(i, t, n);
          }
        }
        clearGoLiveDevices() {
          null != this.goLiveSourceIdentifier &&
            this.setDesktopEncodingOptions(1280, 720, 30),
            null != this.conn.clearGoLiveDevices &&
              this.conn.clearGoLiveDevices();
        }
        clearDesktopSource() {
          null != this.goLiveSourceIdentifier &&
            this.setDesktopEncodingOptions(1280, 720, 30),
            (this.goLiveSourceIdentifier = null),
            null != this.conn.clearDesktopSource
              ? this.conn.clearDesktopSource()
              : this.conn.setDesktopSource("", !1, "");
        }
        setDesktopSourceStatusCallback(e) {
          var t, n;
          null === (t = (n = this.conn).setDesktopSourceStatusCallback) ||
            void 0 === t ||
            t.call(n, e);
        }
        hasDesktopSource() {
          return null != this.goLiveSourceIdentifier;
        }
        setDesktopEncodingOptions(e, t, n) {
          if (this.destroyed) return;
          let i =
              (0 === t && n >= 10) || t > 720 || n > 30
                ? S.DESKTOP_BITRATE_ENHANCED
                : S.DESKTOP_BITRATE,
            r = { width: e, height: t, framerate: n },
            s = this.videoQualityManager.getQuality();
          (!c.VideoQuality.equals(r, s.capture) || s.bitrateMax !== i) &&
            (this.videoQualityManager.setQuality({ capture: r, bitrateMax: i }),
            this.videoStreamParameters.length > 0 &&
              ((this.videoStreamParameters[0].maxResolution = {
                type:
                  0 === e && 0 === t
                    ? m.ResolutionTypes.SOURCE
                    : m.ResolutionTypes.FIXED,
                width: e,
                height: t,
              }),
              (this.videoStreamParameters[0].maxFrameRate = n),
              (this.videoStreamParameters[0].maxBitrate = i)),
            this.emit(
              d.BaseConnectionEvent.Video,
              this.ids.userId,
              null,
              this.audioSSRC,
              this.videoStreamParameters[0].ssrc,
              g(this.videoStreamParameters[0].ssrc),
              this.videoStreamParameters
            ),
            this.conn.setTransportOptions(
              this.applyQualityConstraints().constraints
            ));
        }
        setSDP(e) {}
        setRemoteVideoSinkWants(e) {
          (this.remoteVideoSinkWants = e),
            this.updateVideoQuality(S.MEDIA_SINK_WANTS_PROPERTIES);
        }
        setLocalVideoSinkWants(e) {
          let t = this.localVideoSinkWants;
          for (let [a, o] of Object.entries(this.remoteVideoSSRCs)) {
            var n, i, r, s;
            let l = 0,
              u = 0;
            for (let n of o)
              (l += null == t ? void 0 : t[n]),
                (u += null == e ? void 0 : e[n]);
            0 === l &&
              0 !== u &&
              (null === (n = (i = this.conn).setDisableLocalVideo) ||
                void 0 === n ||
                n.call(i, a, !1)),
              0 !== l &&
                0 === u &&
                (null === (r = (s = this.conn).setDisableLocalVideo) ||
                  void 0 === r ||
                  r.call(s, a, !0));
          }
          this.localVideoSinkWants = e;
        }
        startSamplesPlayback(e, t, n) {
          if (e.numberOfChannels > 2) {
            n(1, "Too many channels");
            return;
          }
          for (var i = [], r = 0; r < e.numberOfChannels; r++) {
            var s = e.getChannelData(r);
            i.push(s);
          }
          try {
            this.conn.startSamplesPlayback(
              { sampleRate: e.sampleRate, volume: t },
              i,
              n
            );
          } catch (t) {
            this.conn.startSamplesPlayback(e.sampleRate, i, n);
          }
        }
        stopSamplesPlayback() {
          this.conn.stopSamplesPlayback();
        }
        startSamplesLocalPlayback(e, t, n, i) {
          if (t.numberOfChannels > 2) {
            i(1, "Too many channels");
            return;
          }
          for (var r = [], s = 0; s < t.numberOfChannels; s++) {
            var a = t.getChannelData(s);
            r.push(a);
          }
          this.conn.startSamplesLocalPlayback(
            e,
            { sampleRate: t.sampleRate, volume: n },
            r,
            i
          );
        }
        stopAllSamplesLocalPlayback() {
          this.conn.stopAllSamplesLocalPlayback();
        }
        stopSamplesLocalPlayback(e) {
          this.conn.stopSamplesLocalPlayback(e);
        }
        setBandwidthEstimationExperiments(e) {
          this.conn.setTransportOptions({ bandwidthEstimationExperiments: e });
        }
        updateVideoQualityCore(e, t) {
          this.videoSupported &&
            !this.destroyed &&
            this.conn.setTransportOptions(e);
        }
        setStreamParameters(e) {
          return new Promise((t, n) => {
            for (let t of this.videoStreamParameters) {
              let i = e.findIndex(e => e.rid === t.rid);
              if (-1 === i) {
                n(Error("Invalid rid"));
                return;
              }
              let r = [];
              !s.isEqual(this.videoStreamParameters[i], e[i]) &&
                ((this.videoStreamParameters[i] = { ...e[i] }),
                r.push({ ...e[i] })),
                this.conn.setTransportOptions({ streamParameters: r });
            }
            t();
          });
        }
        applyVideoTransportOptions() {
          if (!this.videoSupported) return;
          let e = !1;
          if (
            this.hasDesktopSource() &&
            this.videoStreamParameters.length > 0
          ) {
            var t;
            e =
              (null === (t = this.videoStreamParameters[0].maxResolution) ||
              void 0 === t
                ? void 0
                : t.type) === m.ResolutionTypes.SOURCE;
          }
          this.conn.setTransportOptions(
            this.applyQualityConstraints({
              encodingVideoDegradationPreference: this.hasDesktopSource()
                ? e
                  ? this.sourceDesktopDegradationPreference
                  : this.desktopDegradationPreference
                : this.videoDegradationPreference,
            }).constraints
          ),
            this.conn.setVideoBroadcast(this.selfVideo);
        }
        chooseEncryptionMode(e, t) {
          for (let n of t) for (let t of e) if (n === t) return n;
          return "xsalsa20_poly1305";
        }
        getUserOptions() {
          return Object.keys(this.remoteAudioSSRCs).map(e => {
            let t =
              void 0 !== this.remoteVideoSSRCs[e] &&
              this.remoteVideoSSRCs[e].length > 0
                ? this.remoteVideoSSRCs[e][0]
                : 0;
            return {
              id: e,
              ssrc: this.remoteAudioSSRCs[e],
              videoSsrc: t,
              videoSsrcs: this.remoteVideoSSRCs[e],
              rtxSsrc: g(t),
              mute: this.getLocalMute(e),
              volume: this.getLocalVolume(e),
            };
          });
        }
        createInputModeOptions() {
          switch (this.inputMode) {
            case m.InputModes.VOICE_ACTIVITY:
              return {
                vadThreshold: this.vadThreshold,
                vadAutoThreshold: this.vadAutoThreshold
                  ? E.VADAggressiveness.VERY_AGGRESSIVE
                  : E.VADAggressiveness.DISABLED,
                vadUseKrisp: this.vadUseKrisp,
                vadLeading: this.vadLeading,
                vadTrailing: this.vadTrailing,
              };
            case m.InputModes.PUSH_TO_TALK:
              return { pttReleaseDelay: this.pttReleaseDelay };
            default:
              throw Error("Unknown Input Mode: ".concat(this.inputMode));
          }
        }
        getAttenuationOptions() {
          return {
            attenuation: this.isAttenuating(),
            attenuationFactor: this.attenuationFactor,
            attenuateWhileSpeakingSelf: this.attenuateWhileSpeakingSelf,
            attenuateWhileSpeakingOthers: this.attenuateWhileSpeakingOthers,
          };
        }
        getCodecParams(e, t) {
          if (e !== m.Codecs.H264) return {};
          if (t)
            return {
              "level-asymmetry-allowed": "1",
              "packetization-mode": "1",
              "profile-level-id": "42e034",
              "hardware-h264":
                this.hardwareH264 &&
                this.useElectronVideo &&
                _.default.useDirectVideo
                  ? "1"
                  : "0",
            };
          {
            let e =
              "android" === (0, p.getVoiceEngine)().platform
                ? "42e01f"
                : "4d0033";
            return {
              "level-asymmetry-allowed": "1",
              "packetization-mode": "1",
              "profile-level-id": e,
              "hardware-h264":
                this.hardwareH264 &&
                this.useElectronVideo &&
                _.default.useDirectVideo
                  ? "1"
                  : "0",
            };
          }
        }
        getCodecOptions(e, t, n) {
          var i, r, s, a;
          let o;
          o = this.codecs.find(t => t.name === e);
          let l = {
              type:
                null !== (i = null == o ? void 0 : o.payloadType) &&
                void 0 !== i
                  ? i
                  : 0,
              name: e,
              freq: 48e3,
              pacsize: 960,
              channels: 1,
              rate: 64e3,
            },
            u = [
              {
                type:
                  null !== (r = null == o ? void 0 : o.payloadType) &&
                  void 0 !== r
                    ? r
                    : 0,
                name: e,
                freq: 48e3,
                channels: 2,
                params: { stereo: "1" },
              },
            ];
          n === m.MediaEngineContextTypes.STREAM && (l.channels = 2);
          let c = [],
            d = { name: "", type: 0, rtxType: 0, params: {} };
          for (o of this.codecs) {
            if (o.name === e) continue;
            let n = {
              name: (0, f.codecNameToPayloadName)(o.name),
              type:
                null !== (s = null == o ? void 0 : o.payloadType) &&
                void 0 !== s
                  ? s
                  : 0,
              rtxType:
                null !== (a = null == o ? void 0 : o.rtxPayloadType) &&
                void 0 !== a
                  ? a
                  : 0,
              params: this.getCodecParams(o.name, !0),
            };
            c.push(n),
              o.name === t &&
                ((d = { ...n, params: this.getCodecParams(o.name, !1) }),
                this.experimentFlags.has(
                  S.ExperimentFlags.VIDEOTOOLBOX_RATE_CONTROL
                ) && (d.params["fixed-rate-presentation-timestamps"] = "1"));
          }
          return {
            videoEncoder: d,
            videoDecoders: c,
            audioEncoder: l,
            audioDecoders: u,
          };
        }
        getKeyFrameInterval() {
          return this.keyframeInterval > 0 && this.clipsKeyFrameInterval > 0
            ? Math.min(this.keyframeInterval, this.clipsKeyFrameInterval)
            : Math.max(this.keyframeInterval, this.clipsKeyFrameInterval);
        }
        getConnectionTransportOptions() {
          let e = {
            selfMute: this.selfMute,
            inputMode: m.NATIVE_MODE_VALUES[this.inputMode],
            inputModeOptions: this.createInputModeOptions(),
            minimumJitterBufferLevel: this.minimumJitterBufferLevel,
            postponeDecodeLevel: this.postponeDecodeLevel,
            ...this.getAttenuationOptions(),
            fec: !0,
            packetLossRate: 0.3,
            qos: this.qos,
            prioritySpeakerDucking: m.DEFAULT_PRIORITY_SPEAKER_DUCKING,
            encodingVoiceBitRate: this.voiceBitrate,
            callBitRate: m.DEFAULT_CALL_BITRATE,
            callMinBitRate: m.DEFAULT_CALL_MIN_BITRATE,
            callMaxBitRate: m.DEFAULT_CALL_MAX_BITRATE,
            encodingVideoDegradationPreference: this.videoDegradationPreference,
            experimentalEncoders: this.experimentalEncoders,
            hardwareH264: this.hardwareH264,
            reconnectInterval: this.reconnectInterval,
            userChannelIds: this.ids,
          };
          return (
            (0, p.supportsFeature)(m.NativeFeatures.VIDEO_EFFECTS) &&
              this.context === m.MediaEngineContextTypes.STREAM &&
              (e.enableVideoEffects = !0),
            e
          );
        }
        setStream(e) {
          throw Error("Method not implemented.");
        }
        getUserIdBySsrc(e) {}
        setRtcLogEphemeralKey(e) {
          this.conn.setTransportOptions({
            userChannelIds: this.ids,
            rtcLogEphemeralKey: e,
          });
        }
        setRtcLogMarker(e) {
          null != this.conn.setRtcLogMarker && this.conn.setRtcLogMarker(e);
        }
        prepareSecureFramesTransition(e, t, n) {
          var i, r;
          null === (i = (r = this.conn).prepareSecureFramesTransition) ||
            void 0 === i ||
            i.call(r, e, t, n);
        }
        prepareSecureFramesEpoch(e, t, n) {
          var i, r;
          null === (i = (r = this.conn).prepareSecureFramesEpoch) ||
            void 0 === i ||
            i.call(r, e, t, n);
        }
        executeSecureFramesTransition(e) {
          var t, n;
          null === (t = (n = this.conn).executeSecureFramesTransition) ||
            void 0 === t ||
            t.call(n, e);
        }
        getMLSKeyPackage(e) {
          var t, n;
          null === (t = (n = this.conn).getMLSKeyPackage) ||
            void 0 === t ||
            t.call(n, e);
        }
        updateMLSExternalSender(e) {
          var t, n;
          null === (t = (n = this.conn).updateMLSExternalSender) ||
            void 0 === t ||
            t.call(n, e);
        }
        processMLSProposals(e, t) {
          var n, i;
          null === (n = (i = this.conn).processMLSProposals) ||
            void 0 === n ||
            n.call(i, e, t);
        }
        prepareMLSCommitTransition(e, t, n) {
          var i, r;
          null === (i = (r = this.conn).prepareMLSCommitTransition) ||
            void 0 === i ||
            i.call(r, e, t, n);
        }
        processMLSWelcome(e, t, n) {
          var i, r;
          null === (i = (r = this.conn).processMLSWelcome) ||
            void 0 === i ||
            i.call(r, e, t, n);
        }
        constructor(e, t, n) {
          super(e, t),
            (this.mediaEngineConnectionId = "Native-".concat(T++)),
            (this.selfMute = !1),
            (this.selfVideo = !1),
            (this.forceAudioNormal = !1),
            (this.forceAudioPriority = !1),
            (this.codecs = []),
            (this.videoEncoderFallbackPending = !1),
            (this.desktopDegradationPreference = (0,
            p.getVoiceEngine)().DegradationPreference.MAINTAIN_FRAMERATE),
            (this.sourceDesktopDegradationPreference = (0,
            p.getVoiceEngine)().DegradationPreference.DISABLED),
            (this.videoDegradationPreference = (0,
            p.getVoiceEngine)().DegradationPreference.BALANCED),
            (this.localPans = {}),
            (this.remoteAudioSSRCs = {}),
            (this.remoteVideoSSRCs = {}),
            (this.inputMode = m.InputModes.VOICE_ACTIVITY),
            (this.vadThreshold = -40),
            (this.vadAutoThreshold = !0),
            (this.vadUseKrisp = !0),
            (this.vadLeading = 5),
            (this.vadTrailing = 25),
            (this.pttReleaseDelay = 20),
            (this.soundshareActive = !1),
            (this.soundshareId = null),
            (this.soundshareSentSpeakingEvent = !1),
            (this.echoCancellation = !0),
            (this.noiseSuppression = !0),
            (this.automaticGainControl = !0),
            (this.noiseCancellation = !1),
            (this.experimentalEncoders = !1),
            (this.hardwareH264 = !0),
            (this.attenuationFactor = 0.5),
            (this.attenuateWhileSpeakingSelf = !1),
            (this.attenuateWhileSpeakingOthers = !0),
            (this.qos = !0),
            (this.minimumJitterBufferLevel = 0),
            (this.postponeDecodeLevel = 100),
            (this.reconnectInterval = 6e4),
            (this.keyframeInterval = 0),
            (this.clipsKeyFrameInterval = 0),
            (this.videoQualityMeasurement = ""),
            (this.videoEncoderExperiments = ""),
            (this.numFastUdpReconnects = 0),
            (this.handleSpeakingNative = (e, t) => {
              let n = m.SpeakingFlags.NONE;
              (n =
                "boolean" == typeof t
                  ? t
                    ? m.SpeakingFlags.VOICE
                    : m.SpeakingFlags.NONE
                  : t),
                this.handleSpeakingFlags(e, n);
            }),
            (this.handleSpeakingFlags = (e, t) => {
              this.localSpeakingFlags[e] = t;
              let n =
                e === this.ids.userId
                  ? this.audioSSRC
                  : this.remoteAudioSSRCs[e];
              this.emit(d.BaseConnectionEvent.Speaking, e, t, n),
                (t & m.SpeakingFlags.SOUNDSHARE) != 0 &&
                  !1 === this.soundshareSentSpeakingEvent &&
                  (this.emit(d.BaseConnectionEvent.SoundshareSpeaking),
                  (this.soundshareSentSpeakingEvent = !0));
            }),
            (this.handleSpeakingWhileMuted = () => {
              this.emit(d.BaseConnectionEvent.SpeakingWhileMuted);
            }),
            (this.handlePing = (e, t, n) => {
              this.emit(d.BaseConnectionEvent.Ping, e);
            }),
            (this.handlePingTimeout = (e, t, n, i) => {
              this.emit(d.BaseConnectionEvent.PingTimeout, n, i > 0 ? i : 4e3);
            }),
            (this.handleVideoEncoderFallback = e => {
              !this.videoEncoderFallbackPending &&
                (this.logger.info(
                  "Falling back from current video encoder:" + e
                ),
                (this.codecs = this.codecs
                  .map(
                    t => (
                      (e === t.name || ("AV1" === t.name && "AV1X" === e)) &&
                        (t.encode = !1),
                      t
                    )
                  )
                  .filter(
                    e =>
                      !(
                        "video" === e.type &&
                        !1 === e.encode &&
                        !1 === e.decode
                      )
                  )),
                this.emit(
                  d.BaseConnectionEvent.VideoEncoderFallback,
                  this.codecs
                ),
                (this.videoEncoderFallbackPending = !0));
            }),
            (this.handleVideo = (e, t, n, i) => {
              let r = s.cloneDeep(this.videoStreamParameters);
              e === this.ids.userId
                ? null != i && Array.isArray(i) && i.length > 0
                  ? i.forEach(e => {
                      r.forEach((t, n) => {
                        t.rid === e.rid &&
                          (r[n] = {
                            ...t,
                            ssrc: e.ssrc,
                            rtxSsrc: e.rtxSsrc,
                            active: e.active,
                          });
                      });
                    })
                  : t > 0
                    ? ((r[0].active = !0),
                      (r[0].ssrc = t),
                      (r[0].rtxSsrc = g(t)))
                    : (r[0].active = !1)
                : t > 0 &&
                  (void 0 !== this.remoteVideoSSRCs[e]
                    ? !this.remoteVideoSSRCs[e].includes(t) &&
                      (this.remoteVideoSSRCs[e] = [
                        ...this.remoteVideoSSRCs[e],
                        t,
                      ])
                    : (this.remoteVideoSSRCs[e] = [t])),
                (this.videoStreamParameters = r),
                this.emit(
                  d.BaseConnectionEvent.Video,
                  e,
                  null != n && "" !== n ? n : null,
                  e === this.ids.userId
                    ? this.audioSSRC
                    : this.remoteAudioSSRCs[e],
                  t,
                  g(t),
                  this.videoStreamParameters
                );
            }),
            (this.handleFirstFrame = (e, t, n) => {
              this.emit(d.BaseConnectionEvent.FirstFrame, e, t, n);
            }),
            (this.handleNoInput = e => {
              this.emit(d.BaseConnectionEvent.Silence, !e);
            }),
            (this.handleDesktopSourceEnded = () => {
              this.emit(d.BaseConnectionEvent.DesktopSourceEnd);
            }),
            (this.handleSoundshare = e => {
              e &&
                ((this.soundshareActive = !0),
                this.conn.setTransportOptions({
                  encodingVoiceBitRate: Math.max(
                    m.DEFAULT_SOUNDSHARE_VOICE_BITRATE,
                    this.voiceBitrate
                  ),
                }),
                this.emit(d.BaseConnectionEvent.SoundshareAttached));
            }),
            (this.handleSoundshareFailed = (e, t, n) => {
              this.emit(d.BaseConnectionEvent.SoundshareFailed, {
                failureCode: e,
                failureReason: t,
                willRetry: n,
              });
            }),
            (this.handleSoundshareEnded = () => {
              (this.soundshareActive = !1),
                !this.destroyed &&
                  this.conn.setTransportOptions({
                    encodingVoiceBitRate: this.voiceBitrate,
                  });
            }),
            (this.handleNewListenerNative = e => {
              if (e === d.BaseConnectionEvent.ConnectionStateChange)
                this.emit(e, this.connectionState);
            }),
            (this.handleStats = e => {
              if (this.connectionState === m.ConnectionStates.DISCONNECTED) {
                this.off(d.BaseConnectionEvent.Stats, this.handleStats);
                return;
              }
              if (null != e) {
                if (null != this.stats) {
                  let t = s.reduce(
                      e.rtp.outbound,
                      (e, t) => {
                        var n, i;
                        return (
                          (e.lost +=
                            null !== (n = t.packetsLost) && void 0 !== n
                              ? n
                              : 0),
                          (e.sent +=
                            null !== (i = t.packetsSent) && void 0 !== i
                              ? i
                              : 0),
                          e
                        );
                      },
                      { lost: 0, sent: 0 }
                    ),
                    n = s.reduce(
                      this.stats.rtp.outbound,
                      (e, t) => {
                        var n, i;
                        return (
                          (e.lost +=
                            null !== (n = t.packetsLost) && void 0 !== n
                              ? n
                              : 0),
                          (e.sent +=
                            null !== (i = t.packetsSent) && void 0 !== i
                              ? i
                              : 0),
                          e
                        );
                      },
                      { lost: 0, sent: 0 }
                    ),
                    i = t.sent - n.sent,
                    r = t.lost - n.lost;
                  if (0 === i)
                    this.emit(d.BaseConnectionEvent.OutboundLossRate, 0);
                  else if (i > 0 && r >= 0) {
                    let e = s.clamp(r / (i + r), 0, 1);
                    this.emit(d.BaseConnectionEvent.OutboundLossRate, 100 * e);
                  }
                  let a = e.rtp.outbound.filter(e => "audio" === e.type)[0],
                    o = this.stats.rtp.outbound.filter(
                      e => "audio" === e.type
                    )[0];
                  if (
                    null != a &&
                    null != o &&
                    null != a.framesCaptured &&
                    null != o.framesCaptured
                  ) {
                    let e = a.framesCaptured - o.framesCaptured;
                    if (
                      this.noiseCancellation &&
                      e > 50 &&
                      null != a.noiseCancellerProcessTime &&
                      null != o.noiseCancellerProcessTime
                    ) {
                      let t =
                        a.noiseCancellerProcessTime -
                        o.noiseCancellerProcessTime;
                      t / e > 8
                        ? this.emit(
                            d.BaseConnectionEvent.NoiseCancellationError,
                            m.NoiseCancellerError.CPU_OVERUSE
                          )
                        : 0 === t &&
                          this.emit(
                            d.BaseConnectionEvent.NoiseCancellationError,
                            m.NoiseCancellerError.FAILED
                          );
                    }
                    if (
                      this.inputMode === m.InputModes.VOICE_ACTIVITY &&
                      this.vadAutoThreshold &&
                      this.vadUseKrisp &&
                      e > 50 &&
                      null != a.voiceActivityDetectorProcessTime &&
                      null != o.voiceActivityDetectorProcessTime
                    ) {
                      let t =
                        a.voiceActivityDetectorProcessTime -
                        o.voiceActivityDetectorProcessTime;
                      t / e > 4 &&
                        this.emit(
                          d.BaseConnectionEvent.VoiceActivityDetectorError,
                          m.NoiseCancellerError.VAD_CPU_OVERUSE
                        );
                    }
                  }
                }
                this.stats = e;
              }
            }),
            (this.logger = new o.default("Connection(".concat(e, ")"))),
            (this.videoSupported = n);
        }
      };
    },
    149416: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          AudioSubsystems: function () {
            return u.AudioSubsystems;
          },
          DeviceTypes: function () {
            return u.DeviceTypes;
          },
          InputModes: function () {
            return u.InputModes;
          },
          ConnectionStates: function () {
            return u.ConnectionStates;
          },
          SpeakingFlags: function () {
            return u.SpeakingFlags;
          },
          DEFAULT_VOLUME: function () {
            return u.DEFAULT_VOLUME;
          },
          DEFAULT_STREAM_VOLUME: function () {
            return u.DEFAULT_STREAM_VOLUME;
          },
          DEFAULT_SOUNDSHARE_VOICE_BITRATE: function () {
            return u.DEFAULT_SOUNDSHARE_VOICE_BITRATE;
          },
          DEFAULT_CALL_BITRATE: function () {
            return u.DEFAULT_CALL_BITRATE;
          },
          DEFAULT_CALL_MIN_BITRATE: function () {
            return u.DEFAULT_CALL_MIN_BITRATE;
          },
          DEFAULT_CALL_MAX_BITRATE: function () {
            return u.DEFAULT_CALL_MAX_BITRATE;
          },
          DEFAULT_DEVICE_ID: function () {
            return u.DEFAULT_DEVICE_ID;
          },
          DISABLED_DEVICE_ID: function () {
            return u.DISABLED_DEVICE_ID;
          },
          DEFAULT_PRIORITY_SPEAKER_DUCKING: function () {
            return u.DEFAULT_PRIORITY_SPEAKER_DUCKING;
          },
          MediaEngineContextTypes: function () {
            return u.MediaEngineContextTypes;
          },
          Codecs: function () {
            return u.Codecs;
          },
          Features: function () {
            return u.Features;
          },
          NoiseCancellerError: function () {
            return u.NoiseCancellerError;
          },
          ResolutionTypes: function () {
            return u.ResolutionTypes;
          },
          PING_INTERVAL: function () {
            return u.PING_INTERVAL;
          },
          WATCHDOG_TIMEOUT_MS: function () {
            return c;
          },
          NATIVE_MODE_VALUES: function () {
            return d;
          },
          NativeFeatures: function () {
            return a;
          },
          ProcessPriority: function () {
            return o;
          },
          ClipsRecordingEvent: function () {
            return l;
          },
        });
      var i,
        r,
        s,
        a,
        o,
        l,
        u = n("353927");
      let c = 3e4,
        d = {
          [u.InputModes.VOICE_ACTIVITY]: 1,
          [u.InputModes.PUSH_TO_TALK]: 2,
        };
      ((i = a || (a = {})).VOICE_SOUND_STOP_LOOP = "voice_sound_stop_loop"),
        (i.VOICE_RELATIVE_SOUNDS = "voice_relative_sounds"),
        (i.VOICE_LEGACY_SUBSYSTEM = "voice_legacy_subsystem"),
        (i.VOICE_EXPERIMENTAL_SUBSYSTEM = "voice_experimental_subsystem"),
        (i.ELEVATED_HOOK = "elevated_hook"),
        (i.DEBUG_LOGGING = "debug_logging"),
        (i.SOUNDSHARE = "soundshare"),
        (i.SOUNDSHARE_LOOPBACK = "soundshare_loopback"),
        (i.SET_AUDIO_DEVICE_BY_ID = "set_audio_device_by_id"),
        (i.SET_VIDEO_DEVICE_BY_ID = "set_video_device_by_id"),
        (i.LOOPBACK = "loopback"),
        (i.WUMPUS_VIDEO = "wumpus_video"),
        (i.HYBRID_VIDEO = "hybrid_video"),
        (i.EXPERIMENTAL_ENCODERS = "experimental_encoders"),
        (i.EXPERIMENT_CONFIG = "experiment_config"),
        (i.REMOTE_LOCUS_NETWORK_CONTROL = "remote_locus_network_control"),
        (i.SCREEN_PREVIEWS = "screen_previews"),
        (i.WINDOW_PREVIEWS = "window_previews"),
        (i.AUDIO_DEBUG_STATE = "audio_debug_state"),
        (i.CONNECTION_REPLAY = "connection_replay"),
        (i.SIMULCAST = "simulcast"),
        (i.SIMULCAST_BUGFIX = "simulcast_bugfix"),
        (i.RTC_REGION_RANKING = "RTC_REGION_RANKING"),
        (i.VIDEO_EFFECTS = "video_effects"),
        (i.DIRECT_VIDEO = "direct_video"),
        (i.ELECTRON_VIDEO = "electron_video"),
        (i.MEDIAPIPE = "mediapipe"),
        (i.FIXED_KEYFRAME_INTERVAL = "fixed_keyframe_interval"),
        (i.FIRST_FRAME_CALLBACK = "first_frame_callback"),
        (i.REMOTE_USER_MULTI_STREAM = "remote_user_multi_stream"),
        (i.CLIPS = "clips"),
        (i.SPEED_TEST = "speed_test"),
        (i.GO_LIVE_HARDWARE = "go_live_hardware"),
        (i.IMAGE_QUALITY_MEASUREMENT = "image_quality_measurement"),
        (i.AMD_EXPERIMENTAL_RATE_CONTROL = "amd_experimental_rate_control"),
        (i.SCREEN_CAPTURE_KIT = "screen_capture_kit"),
        (i.CAPTURE_TIMEOUT_EXPERIMENTS = "capture_timeout_experiments"),
        (i.SCREEN_SOUNDSHARE = "screen_soundshare"),
        ((r = o || (o = {}))[(r.LOW = 2)] = "LOW"),
        (r[(r.BELOW_NORMAL = 1)] = "BELOW_NORMAL"),
        (r[(r.NORMAL = 0)] = "NORMAL"),
        (r[(r.ABOVE_NORMAL = -1)] = "ABOVE_NORMAL"),
        (r[(r.HIGH = -2)] = "HIGH"),
        ((s = l || (l = {}))[(s.Started = 0)] = "Started"),
        (s[(s.Ended = 1)] = "Ended"),
        (s[(s.Error = 2)] = "Error"),
        (s[(s.TransferredToVoiceCall = 3)] = "TransferredToVoiceCall"),
        (s[(s.TransferredToGoLive = 4)] = "TransferredToGoLive"),
        (s[(s.StoppedByGoLive = 5)] = "StoppedByGoLive"),
        (s[(s.BlockedByGoLive = 6)] = "BlockedByGoLive"),
        (s[(s.GoLiveEnded = 7)] = "GoLiveEnded");
    },
    446497: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          sanitizeDevices: function () {
            return o;
          },
          getAudioInputDevices: function () {
            return l;
          },
          getAudioOutputDevices: function () {
            return u;
          },
          getVideoInputDevices: function () {
            return c;
          },
        }),
        n("781738"),
        n("843762");
      var i = n("383536"),
        r = n.n(i),
        s = n("784063"),
        a = n("149416");
      function o(e, t) {
        var n;
        let i = !1,
          s = t.map((t, n) => {
            let { guid: r, guid: s, name: o, name: l, index: u } = t;
            return (
              /^default/.test(o)
                ? ((i = !0),
                  (r = a.DEFAULT_DEVICE_ID),
                  (o = o.replace("default", "Default")))
                : (r = null != r && "" !== r ? r : o),
              null != u && (n = u),
              {
                id: r,
                type: e,
                index: n,
                name: o,
                originalName: l,
                originalId: s,
              }
            );
          });
        return (
          e !== a.DeviceTypes.VIDEO_INPUT &&
            !i &&
            (null == r
              ? void 0
              : null === (n = r.os) || void 0 === n
                ? void 0
                : n.family) != null &&
            /^win/i.test(r.os.family) &&
            s.unshift({
              id: a.DEFAULT_DEVICE_ID,
              type: e,
              index: -1,
              name: "Default",
            }),
          s
        );
      }
      function l() {
        return new Promise(e => {
          (0, s.getVoiceEngine)().getInputDevices(t =>
            e(o(a.DeviceTypes.AUDIO_INPUT, t))
          );
        });
      }
      function u() {
        return new Promise(e => {
          (0, s.getVoiceEngine)().getOutputDevices(t =>
            e(o(a.DeviceTypes.AUDIO_OUTPUT, t))
          );
        });
      }
      function c() {
        return new Promise(e => {
          (0, s.getVoiceEngine)().getVideoInputDevices(t =>
            e(o(a.DeviceTypes.VIDEO_INPUT, t))
          );
        });
      }
    },
    785347: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("854508"),
        n("70102"),
        n("222007");
      var i,
        r = n("811022"),
        s = n("571877"),
        a = n("773364"),
        o = n("784063"),
        l = n("149416");
      let u = new r.default("SpeedTester"),
        c = 0;
      i = class e extends s.default {
        static create(t, n) {
          let i = new e(t);
          return (
            u.info(
              "Creating connection to "
                .concat(n.address, ":")
                .concat(n.port, " with audio ssrc: ")
                .concat(n.ssrc)
            ),
            i.initialize(n),
            i
          );
        }
        initialize(e) {
          let t;
          (this.audioSSRC = e.ssrc),
            (this.streamUserId = e.streamUserId),
            (this.pingInterval = l.PING_INTERVAL),
            this.initializeStreamParameters(e.streamParameters),
            (e.streamParameters = this.videoStreamParameters);
          let n = (0, o.getVoiceEngine)();
          (t = this.conn =
            n.createSpeedTestConnectionWithOptions(
              this.ids.userId,
              e,
              (n, i) => {
                if (this.destroyed) return;
                if (null != n && "" !== n) {
                  this.setConnectionState(l.ConnectionStates.NO_ROUTE),
                    this.emit(a.BaseSpeedTesterEvent.Error, n);
                  return;
                }
                if (null == i) throw Error("Invalid transport info");
                let { protocol: r, address: s, port: o } = i;
                u.info(
                  "Connected with local address "
                    .concat(s, ":")
                    .concat(o, " and protocol: ")
                    .concat(r)
                ),
                  (this.codecs = [
                    {
                      type: "audio",
                      name: l.Codecs.OPUS,
                      priority: 1,
                      payloadType: 120,
                    },
                    {
                      type: "test",
                      name: l.Codecs.TEST,
                      priority: 1,
                      payloadType: 127,
                    },
                  ]),
                  t.getEncryptionModes(n => {
                    var i, c;
                    u.info("Encryption modes: ".concat(n)),
                      t.setTransportOptions(
                        this.getConnectionTransportOptions()
                      ),
                      null === (i = t.setPingInterval) ||
                        void 0 === i ||
                        i.call(t, this.pingInterval),
                      t.setPingCallback(this.handlePing),
                      null === (c = t.setPingTimeoutCallback) ||
                        void 0 === c ||
                        c.call(t, this.handlePingTimeout),
                      this.setConnectionState(l.ConnectionStates.CONNECTED),
                      this.emit(a.BaseSpeedTesterEvent.Connected, r, {
                        address: s,
                        port: o,
                        mode: this.chooseEncryptionMode(e.modes, n),
                        codecs: this.codecs,
                      });
                  });
              }
            )),
            this.on("newListener", this.handleNewListenerNative);
        }
        destroy() {
          this.conn.destroy(),
            this.setConnectionState(l.ConnectionStates.DISCONNECTED),
            super.destroy();
        }
        setCodecs(e, t) {
          this.conn.setTransportOptions(this.getCodecOptions(e, t));
        }
        setEncryption(e, t) {
          this.conn.setTransportOptions({
            encryptionSettings: { mode: e, secretKey: t },
          });
        }
        setSDP(e) {}
        getNetworkOverhead(e) {
          this.conn.getNetworkOverhead(e);
        }
        setPingInterval(e) {
          var t, n;
          (this.pingInterval = e),
            null === (t = (n = this.conn).setPingInterval) ||
              void 0 === t ||
              t.call(n, this.pingInterval);
        }
        startSpeedTestSender(e, t, n, i) {
          null != this.conn.startSpeedTestSender
            ? this.conn.startSpeedTestSender(
                { clusterSize: t, clusterIntervalMs: n, numClusters: i },
                e
              )
            : this.conn.startClientToServerSpeedTest({
                doneCb: e,
                clusterSize: t,
                clusterIntervalMs: n,
                numClusters: i,
              });
        }
        stopSpeedTestSender() {
          null != this.conn.stopSpeedTestSender
            ? this.conn.stopSpeedTestSender()
            : this.conn.endClientToServerSpeedTest({});
        }
        startSpeedTestReceiver(e, t) {
          null != this.conn.startSpeedTestReceiver
            ? this.conn.startSpeedTestReceiver({ packetLimit: t }, e)
            : this.conn.startServerToClientSpeedTest({
                readyCb: e,
                packetLimit: t,
              });
        }
        stopSpeedTestReceiver(e) {
          null != this.conn.stopSpeedTestReceiver
            ? this.conn.stopSpeedTestReceiver(e)
            : this.conn.endServerToClientSpeedTest({ doneCb: e });
        }
        chooseEncryptionMode(e, t) {
          for (let n of t) for (let t of e) if (n === t) return n;
          return "xsalsa20_poly1305";
        }
        getConnectionTransportOptions() {
          let e = {
            qos: this.qos,
            reconnectInterval: this.reconnectInterval,
            userChannelIds: this.ids,
          };
          return e;
        }
        getCodecOptions(e, t) {
          var n, i, r, s;
          let a;
          a = this.codecs.find(t => t.name === e);
          let o = {
              type:
                null !== (n = null == a ? void 0 : a.payloadType) &&
                void 0 !== n
                  ? n
                  : 0,
              name: e,
              freq: 48e3,
              pacsize: 960,
              channels: 1,
              rate: 64e3,
            },
            l = [
              {
                type:
                  null !== (i = null == a ? void 0 : a.payloadType) &&
                  void 0 !== i
                    ? i
                    : 0,
                name: e,
                freq: 48e3,
                channels: 2,
                params: { stereo: "1" },
              },
            ];
          a = this.codecs.find(e => e.name === t);
          let u = {
              type:
                null !== (r = null == a ? void 0 : a.payloadType) &&
                void 0 !== r
                  ? r
                  : 0,
            },
            c = {
              type:
                null !== (s = null == a ? void 0 : a.payloadType) &&
                void 0 !== s
                  ? s
                  : 0,
            };
          return {
            audioEncoder: o,
            audioDecoders: l,
            testEncoder: u,
            testDecoder: c,
          };
        }
        getUserIdBySsrc(e) {}
        constructor(e) {
          super(e),
            (this.mediaEngineConnectionId = "Native-".concat(c++)),
            (this.codecs = []),
            (this.qos = !0),
            (this.reconnectInterval = 6e4),
            (this.pingInterval = l.PING_INTERVAL),
            (this.handlePing = (e, t, n) => {
              this.emit(a.BaseSpeedTesterEvent.Ping, e);
            }),
            (this.handlePingTimeout = (e, t, n, i) => {
              this.emit(a.BaseSpeedTesterEvent.PingTimeout, n, i > 0 ? i : 4e3);
            }),
            (this.handleNewListenerNative = e => {
              if (e === a.BaseSpeedTesterEvent.ConnectionStateChange)
                this.emit(e, this.connectionState);
            });
        }
      };
    },
    573015: function (e, t, n) {
      "use strict";
      var i, r, s, a;
      n.r(t),
        n.d(t, {
          VADAggressiveness: function () {
            return i;
          },
        }),
        ((s = i || (i = {}))[(s.DISABLED = -1)] = "DISABLED"),
        (s[(s.NORMAL = 0)] = "NORMAL"),
        (s[(s.LOW_BIRTATE = 1)] = "LOW_BIRTATE"),
        (s[(s.AGGRESSIVE = 2)] = "AGGRESSIVE"),
        (s[(s.VERY_AGGRESSIVE = 3)] = "VERY_AGGRESSIVE"),
        ((a = r || (r = {}))[(a.NONE = 0)] = "NONE"),
        (a[(a.TIMEOUT = 1)] = "TIMEOUT");
    },
    741397: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        }),
        n("222007"),
        n("70102");
      var i,
        r,
        s = n("383536"),
        a = n.n(s),
        o = n("811022"),
        l = n("595275"),
        u = n("773364"),
        c = n("953161"),
        d = n("784343"),
        f = n("446497"),
        E = n("785347"),
        p = n("784063"),
        h = n("710584"),
        _ = n("595432"),
        S = n("149416");
      function m(e) {
        return (null != e ? e : S.DEFAULT_VOLUME) / S.DEFAULT_VOLUME;
      }
      ((i = class e extends l.default {
        destroy() {
          this.eachConnection(e => e.destroy()),
            this.emit(u.MediaEngineEvent.Destroy),
            this.removeAllListeners();
        }
        interact() {}
        static supported() {
          return (0, p.supported)();
        }
        supported() {
          return !0;
        }
        supports(e) {
          var t, n;
          switch (e) {
            case S.Features.LEGACY_AUDIO_SUBSYSTEM:
              return (0, p.supportsFeature)(
                S.NativeFeatures.VOICE_LEGACY_SUBSYSTEM
              );
            case S.Features.EXPERIMENTAL_AUDIO_SUBSYSTEM:
              return (0, p.supportsFeature)(
                S.NativeFeatures.VOICE_EXPERIMENTAL_SUBSYSTEM
              );
            case S.Features.DEBUG_LOGGING:
              return (0, p.supportsFeature)(S.NativeFeatures.DEBUG_LOGGING);
            case S.Features.SOUNDSHARE:
              return (0, p.supportsFeature)(S.NativeFeatures.SOUNDSHARE);
            case S.Features.SCREEN_SOUNDSHARE:
              return (0, p.supportsFeature)(S.NativeFeatures.SCREEN_SOUNDSHARE);
            case S.Features.ELEVATED_HOOK:
              return (0, p.supportsFeature)(S.NativeFeatures.ELEVATED_HOOK);
            case S.Features.LOOPBACK:
              return (0, p.supportsFeature)(S.NativeFeatures.LOOPBACK);
            case S.Features.WUMPUS_VIDEO:
              return (0, p.supportsFeature)(S.NativeFeatures.WUMPUS_VIDEO);
            case S.Features.HYBRID_VIDEO:
              return (0, p.supportsFeature)(S.NativeFeatures.HYBRID_VIDEO);
            case S.Features.ATTENUATION:
            case S.Features.VIDEO_HOOK:
              return (
                (null == a
                  ? void 0
                  : null === (t = a.os) || void 0 === t
                    ? void 0
                    : t.family) != null && /^win/i.test(a.os.family)
              );
            case S.Features.EXPERIMENTAL_SOUNDSHARE:
              return (0, p.supportsFeature)(
                S.NativeFeatures.SOUNDSHARE_LOOPBACK
              );
            case S.Features.OPEN_H264:
              return (
                (null == a
                  ? void 0
                  : null === (n = a.os) || void 0 === n
                    ? void 0
                    : n.family) != null && /^win|linux|OS X/i.test(a.os.family)
              );
            case S.Features.EXPERIMENTAL_ENCODERS:
              return (0, p.supportsFeature)(
                S.NativeFeatures.EXPERIMENTAL_ENCODERS
              );
            case S.Features.REMOTE_LOCUS_NETWORK_CONTROL:
              return (0, p.supportsFeature)(
                S.NativeFeatures.REMOTE_LOCUS_NETWORK_CONTROL
              );
            case S.Features.SCREEN_PREVIEWS:
              return (0, p.supportsFeature)(S.NativeFeatures.SCREEN_PREVIEWS);
            case S.Features.CLIPS:
              return (0, p.supportsFeature)(S.NativeFeatures.CLIPS);
            case S.Features.WINDOW_PREVIEWS:
              return (0, p.supportsFeature)(S.NativeFeatures.WINDOW_PREVIEWS);
            case S.Features.AUDIO_DEBUG_STATE:
              return (0, p.supportsFeature)(S.NativeFeatures.AUDIO_DEBUG_STATE);
            case S.Features.CONNECTION_REPLAY:
              return (0, p.supportsFeature)(S.NativeFeatures.CONNECTION_REPLAY);
            case S.Features.SIMULCAST:
              return (
                (0, p.supportsFeature)(S.NativeFeatures.SIMULCAST) &&
                (0, p.supportsFeature)(S.NativeFeatures.SIMULCAST_BUGFIX)
              );
            case S.Features.RTC_REGION_RANKING:
              return (0, p.supportsFeature)(
                S.NativeFeatures.RTC_REGION_RANKING
              );
            case S.Features.DIRECT_VIDEO:
              return (
                (0, p.supportsFeature)(S.NativeFeatures.DIRECT_VIDEO) &&
                null != window.createDiscordStream
              );
            case S.Features.ELECTRON_VIDEO:
              return (0, p.supportsFeature)(S.NativeFeatures.ELECTRON_VIDEO);
            case S.Features.MEDIAPIPE:
              return (0, p.supportsFeature)(S.NativeFeatures.MEDIAPIPE);
            case S.Features.FIXED_KEYFRAME_INTERVAL:
              return (0, p.supportsFeature)(
                S.NativeFeatures.FIXED_KEYFRAME_INTERVAL
              );
            case S.Features.FIRST_FRAME_CALLBACK:
              return (0, p.supportsFeature)(
                S.NativeFeatures.FIRST_FRAME_CALLBACK
              );
            case S.Features.REMOTE_USER_MULTI_STREAM:
              return (0, p.supportsFeature)(
                S.NativeFeatures.REMOTE_USER_MULTI_STREAM
              );
            case S.Features.SPEED_TEST:
              return (0, p.supportsFeature)(S.NativeFeatures.SPEED_TEST);
            case S.Features.IMAGE_QUALITY_MEASUREMENT:
              return (0, p.supportsFeature)(
                S.NativeFeatures.IMAGE_QUALITY_MEASUREMENT
              );
            case S.Features.AMD_EXPERIMENTAL_RATE_CONTROL:
              return (0, p.supportsFeature)(
                S.NativeFeatures.AMD_EXPERIMENTAL_RATE_CONTROL
              );
            case S.Features.GO_LIVE_HARDWARE:
              return (0, p.supportsFeature)(S.NativeFeatures.GO_LIVE_HARDWARE);
            case S.Features.SCREEN_CAPTURE_KIT:
              return (0, p.supportsFeature)(
                S.NativeFeatures.SCREEN_CAPTURE_KIT
              );
            case S.Features.CAPTURE_TIMEOUT_EXPERIMENTS:
              return (0, p.supportsFeature)(
                S.NativeFeatures.CAPTURE_TIMEOUT_EXPERIMENTS
              );
            case S.Features.DIAGNOSTICS:
            case S.Features.NATIVE_PING:
            case S.Features.AUTOMATIC_VAD:
            case S.Features.AUDIO_INPUT_DEVICE:
            case S.Features.AUDIO_OUTPUT_DEVICE:
            case S.Features.QOS:
            case S.Features.VOICE_PROCESSING:
            case S.Features.AUTO_ENABLE:
            case S.Features.VIDEO:
            case S.Features.DESKTOP_CAPTURE:
            case S.Features.DESKTOP_CAPTURE_FORMAT:
            case S.Features.DESKTOP_CAPTURE_APPLICATIONS:
            case S.Features.VOICE_PANNING:
            case S.Features.AEC_DUMP:
            case S.Features.DISABLE_VIDEO:
            case S.Features.SAMPLE_PLAYBACK:
            case S.Features.NOISE_SUPPRESSION:
            case S.Features.AUTOMATIC_GAIN_CONTROL:
              return !0;
            default:
              return !1;
          }
        }
        connect(e, t, n) {
          let i = (0, p.supportsFeature)(S.NativeFeatures.EXPERIMENT_CONFIG);
          !i && (n.experiments = void 0);
          let r = d.default.create(e, t, n);
          return (
            r.on(u.BaseConnectionEvent.Destroy, e => {
              this.connections.delete(e),
                this.connectionsEmpty() &&
                  (0, p.setProcessPriority)(S.ProcessPriority.NORMAL);
            }),
            r.on(u.BaseConnectionEvent.Connected, () => {
              r.setVideoBroadcast(this.shouldConnectionBroadcastVideo(r));
            }),
            r.on(u.BaseConnectionEvent.Silence, e => {
              this.emit(u.MediaEngineEvent.Silence, e);
            }),
            this.connections.add(r),
            (0, p.setProcessPriority)(S.ProcessPriority.HIGH),
            this.emit(u.MediaEngineEvent.Connection, r),
            r
          );
        }
        shouldConnectionBroadcastVideo(e) {
          return (
            (e.context === S.MediaEngineContextTypes.DEFAULT &&
              this.videoInputDeviceId !== S.DISABLED_DEVICE_ID) ||
            e.hasDesktopSource()
          );
        }
        eachConnection(e, t) {
          this.connections.forEach(n => {
            (null == t || n.context === t) && e(n);
          });
        }
        enable() {
          return Promise.resolve();
        }
        setInputVolume(e) {
          (0, p.getVoiceEngine)().setInputVolume(m(e));
        }
        setOutputVolume(e) {
          (0, p.getVoiceEngine)().setOutputVolume(m(e));
        }
        getAudioInputDevices() {
          return (0, f.getAudioInputDevices)();
        }
        setAudioInputDevice(e) {
          (0, p.supportsFeature)(S.NativeFeatures.SET_AUDIO_DEVICE_BY_ID)
            ? (0, p.getVoiceEngine)().setInputDevice(e)
            : (0, f.getAudioInputDevices)().then(t => {
                var n;
                let i =
                  null !== (n = t.find(t => t.id === e)) && void 0 !== n
                    ? n
                    : t[0];
                null != i && (0, p.getVoiceEngine)().setInputDevice(i.index);
              });
        }
        getAudioOutputDevices() {
          return (0, f.getAudioOutputDevices)();
        }
        setAudioOutputDevice(e) {
          (0, p.supportsFeature)(S.NativeFeatures.SET_AUDIO_DEVICE_BY_ID)
            ? (0, p.getVoiceEngine)().setOutputDevice(e)
            : (0, f.getAudioOutputDevices)().then(t => {
                var n;
                let i =
                  null !== (n = t.find(t => t.id === e)) && void 0 !== n
                    ? n
                    : t[0];
                null != i && (0, p.getVoiceEngine)().setOutputDevice(i.index);
              });
        }
        getVideoInputDevices() {
          return (0, f.getVideoInputDevices)();
        }
        async setVideoInputDevice(e) {
          let t = await this.getVideoInputDevices(),
            n = t.find(t => t.id === e),
            i = null != n ? n.id : S.DISABLED_DEVICE_ID;
          if (i !== this.videoInputDeviceId) {
            if (
              ((this.videoInputDeviceId = i),
              (0, p.supportsFeature)(S.NativeFeatures.SET_VIDEO_DEVICE_BY_ID))
            ) {
              let e =
                null != n
                  ? null != n.originalId && "" !== n.originalId
                    ? n.originalId
                    : n.id
                  : S.DISABLED_DEVICE_ID;
              (0, p.getVoiceEngine)().setVideoInputDevice(e);
            } else
              (0, p.getVoiceEngine)().setVideoInputDevice(
                null != n ? n.index : -1
              );
            this.connections.forEach(e =>
              e.setVideoBroadcast(this.shouldConnectionBroadcastVideo(e))
            );
          }
        }
        getSupportedVideoCodecs(e) {
          (0, p.getVoiceEngine)().getSupportedVideoCodecs(e);
        }
        getCodecCapabilities(e) {
          (0, p.getVoiceEngine)().getCodecCapabilities(e);
        }
        setGoLiveSource(e, t) {
          if (null == e) {
            this.eachConnection(e => {
              e.clearDesktopSource(),
                e.clearGoLiveDevices(),
                e.setSoundshareSource(0, !1),
                e.setVideoBroadcast(this.shouldConnectionBroadcastVideo(e));
            }, t);
            return;
          }
          this.eachConnection(n => {
            (t !== S.MediaEngineContextTypes.STREAM ||
              n.streamUserId === n.ids.userId) &&
              (n.setGoLiveSource(e),
              n.setVideoBroadcast(this.shouldConnectionBroadcastVideo(n)));
          }, t);
        }
        setClipsSource(e) {
          if (
            null == (0, p.getVoiceEngine)().setClipsSource ||
            null == (0, p.getVoiceEngine)().setOnClipsRecordingEvent ||
            null == (0, p.getVoiceEngine)().applyClipsSettings
          )
            return;
          if (null == e) {
            (0, p.getVoiceEngine)().setClipsSource({ id: "", soundshareId: 0 });
            return;
          }
          let { frameRate: t, resolution: n } = e.quality,
            {
              id: i,
              soundshareId: r,
              useLoopback: s,
              useVideoHook: a,
              useGraphicsCapture: o,
              useQuartzCapturer: l,
              allowScreenCaptureKit: c,
              hdrCaptureMode: d,
            } = e.desktopDescription;
          (0, p.getVoiceEngine)().setOnClipsRecordingEvent(t => {
            this.logger.info(
              "Clips recording event: "
                .concat(S.ClipsRecordingEvent[t], " received for stream ")
                .concat(i, " and sound ")
                .concat(r, ".")
            ),
              t === S.ClipsRecordingEvent.GoLiveEnded
                ? this.emit(u.MediaEngineEvent.ClipsRecordingRestartNeeded)
                : t === S.ClipsRecordingEvent.Error
                  ? this.emit(
                      u.MediaEngineEvent.ClipsInitFailure,
                      "Failed to set clips source in media engine",
                      e.applicationName
                    )
                  : (t === S.ClipsRecordingEvent.Ended ||
                      t === S.ClipsRecordingEvent.StoppedByGoLive) &&
                    this.emit(u.MediaEngineEvent.ClipsRecordingEnded, i, r);
          }),
            (0, p.getVoiceEngine)().applyClipsSettings({
              useVideoHook: a,
              useGraphicsCapture: o,
              useQuartzCapturer: l,
              allowScreenCaptureKit: c,
              hdrCaptureMode: d,
              soundshareLoopback: s,
              frameRate: t,
              width: n <= 480 ? (n / 3) * 4 : (n / 9) * 16,
              height: n,
            });
          let [f, E] = null != i ? i.split(":") : ["", ""];
          (0, p.getVoiceEngine)().setClipsSource({
            id: E,
            soundshareId: null != r ? r : 0,
          });
        }
        setClipsQualitySettings(e, t, n) {
          let i = (0, p.getVoiceEngine)();
          return (
            null != i.applyClipsQualitySettings &&
            (i.applyClipsQualitySettings(e, t, n), !0)
          );
        }
        setSoundshareSource(e, t, n) {
          this.eachConnection(i => {
            (n !== S.MediaEngineContextTypes.STREAM ||
              i.streamUserId === i.ids.userId) &&
              i.setSoundshareSource(e, t);
          }, n);
        }
        getDesktopSource() {
          return Promise.reject(Error("NO_STREAM"));
        }
        getDesktopSources() {
          return new Promise(e => {
            null != (0, p.getVoiceEngine)().getDesktopSources
              ? (0, p.getVoiceEngine)().getDesktopSources(t => e(t))
              : e([]);
          });
        }
        getScreenPreviews(e, t) {
          return new Promise(n => {
            null != (0, p.getVoiceEngine)().getScreenPreviews
              ? (0, p.getVoiceEngine)().getScreenPreviews(e, t, e => {
                  n(e.map((e, t) => ({ ...e, name: "Screen " + (t + 1) })));
                })
              : n([]);
          });
        }
        setClipBufferLength(e) {
          var t, n;
          null === (t = (n = (0, p.getVoiceEngine)()).setClipBufferLength) ||
            void 0 === t ||
            t.call(n, e);
        }
        saveClip(e, t) {
          let n = (0, p.getVoiceEngine)();
          return null == n.setClipBufferLength || null == n.saveClip
            ? Promise.reject("unsupported")
            : new Promise((i, r) => {
                n.saveClip(
                  e,
                  t,
                  (e, t, n) => {
                    let r = JSON.parse(n);
                    return i({ duration: e, thumbnail: t, clipStats: r });
                  },
                  e => {
                    let t = JSON.parse(e);
                    return r(t);
                  }
                );
              });
        }
        saveClipForUser(e, t, n) {
          let i = (0, p.getVoiceEngine)();
          return null == i.saveClipForUser
            ? Promise.reject("unsupported")
            : new Promise((r, s) => {
                i.saveClipForUser(
                  e,
                  t,
                  n,
                  (e, t, n) => {
                    let i = JSON.parse(n);
                    return r({ duration: e, thumbnail: t, clipStats: i });
                  },
                  e => {
                    let t = JSON.parse(e);
                    return s(t);
                  }
                );
              });
        }
        updateClipMetadata(e, t) {
          let n = (0, p.getVoiceEngine)();
          return null == n.updateClipMetadata
            ? Promise.reject("unsupported")
            : new Promise((i, r) => {
                n.updateClipMetadata(e, t, i, r);
              });
        }
        exportClip(e, t) {
          let n = (0, p.getVoiceEngine)();
          return null == n.exportClip
            ? Promise.reject("unsupported")
            : new Promise((i, r) => {
                n.exportClip(e, t, e => i(new Blob([e])), r);
              });
        }
        getWindowPreviews(e, t) {
          return new Promise(n => {
            null != (0, p.getVoiceEngine)().getWindowPreviews
              ? (0, p.getVoiceEngine)().getWindowPreviews(e, t, e => {
                  n(e);
                })
              : n([]);
          });
        }
        setAudioSubsystem(e) {
          null != (0, p.getVoiceEngine)().setAudioSubsystem
            ? (0, p.getVoiceEngine)().setAudioSubsystem(e)
            : (0, p.getVoiceEngine)().setUseLegacyAudioDevice(
                e === S.AudioSubsystems.LEGACY
              );
        }
        getAudioSubsystem() {
          return this.audioSubsystem;
        }
        getAudioLayer() {
          return this.audioLayer;
        }
        getDebugLogging() {
          return (
            !!this.supports(S.Features.DEBUG_LOGGING) &&
            (0, p.getVoiceEngine)().getDebugLogging()
          );
        }
        setDebugLogging(e) {
          this.supports(S.Features.DEBUG_LOGGING) &&
            (0, p.getVoiceEngine)().setDebugLogging(e);
        }
        setExperimentalAdm(e) {
          let { setExperimentalAdm: t, getAudioSubsystem: n } = (0,
          p.getVoiceEngine)();
          null == t || t(e),
            null == n ||
              n(e => {
                this.audioSubsystem = e;
              });
        }
        setLoopback(e, t) {
          null != (0, p.getVoiceEngine)().setLoopback &&
            (0, p.getVoiceEngine)().setLoopback(e, {
              echoCancellation: t.echoCancellation,
              noiseSuppression: t.noiseSuppression,
              automaticGainControl: t.automaticGainControl,
              noiseCancellation: t.noiseCancellation,
            }),
            null != (0, p.getVoiceEngine)().setEmitVADLevel2
              ? (0, p.getVoiceEngine)().setEmitVADLevel2(
                  e || this.listenerCount(u.MediaEngineEvent.VoiceActivity) > 0
                )
              : (0, p.getVoiceEngine)().setEmitVADLevel(
                  e || this.listenerCount(u.MediaEngineEvent.VoiceActivity) > 0,
                  e,
                  {
                    echoCancellation: t.echoCancellation,
                    noiseSuppression: t.noiseSuppression,
                    automaticGainControl: t.automaticGainControl,
                    noiseCancellation: t.noiseCancellation,
                  }
                );
        }
        getLoopback() {
          return !1;
        }
        setH264Enabled(e) {
          let t = (0, p.getVoiceEngine)();
          t.setTransportOptions({ h264Enabled: e });
        }
        setAv1Enabled(e) {
          let t = (0, p.getVoiceEngine)();
          t.setTransportOptions({ av1Enabled: e });
        }
        setH265Enabled(e) {
          let t = (0, p.getVoiceEngine)();
          t.setTransportOptions({ h265Enabled: e });
        }
        getCodecSurvey() {
          return null != this.codecSurvey
            ? Promise.resolve(this.codecSurvey)
            : new Promise((e, t) => {
                let n = (0, p.getVoiceEngine)();
                null != n.getCodecSurvey
                  ? n.getCodecSurvey(t => {
                      (this.codecSurvey = t), e(t);
                    })
                  : t(Error("getCodecSurvey is not implemented."));
              });
        }
        writeAudioDebugState() {
          return new Promise((e, t) => {
            let { writeAudioDebugState: n } = (0, p.getVoiceEngine)();
            null != n
              ? (n(), e())
              : t(Error("Audio debug state is not supported."));
          });
        }
        startAecDump() {}
        stopAecDump() {}
        setAecDump(e) {
          var t, n;
          null === (t = (n = (0, p.getVoiceEngine)()).setAecDump) ||
            void 0 === t ||
            t.call(n, e);
        }
        rankRtcRegions(e) {
          return new Promise((t, n) => {
            let { rankRtcRegions: i } = (0, p.getVoiceEngine)();
            null != i
              ? i(e, e => t(e))
              : n(Error("RTC region latency test is not supported."));
          });
        }
        getSoundshareStatus() {
          return new Promise((e, t) => {
            let { getSoundshareStatus: n } = (0, p.getVoiceEngine)();
            null != n
              ? n(t => e(t))
              : t(Error("getSoundshareStatus is not supported."));
          });
        }
        enableSoundshare() {
          return new Promise((e, t) => {
            let { enableSoundshare: n } = (0, p.getVoiceEngine)();
            null != n
              ? n((t, n) => e({ code: t, message: n, willRetry: !1 }))
              : t(Error("enableSoundshare is not supported."));
          });
        }
        createReplayConnection(e, t) {
          let n = d.default.createReplay(e, t);
          return null == n
            ? null
            : (n.on(u.BaseConnectionEvent.Destroy, e => {
                this.connections.delete(e),
                  this.connectionsEmpty() &&
                    (0, p.setProcessPriority)(S.ProcessPriority.NORMAL);
              }),
              this.connections.add(n),
              (0, p.setProcessPriority)(S.ProcessPriority.HIGH),
              this.emit(u.MediaEngineEvent.Connection, n),
              n);
        }
        setUseDirectVideo(e) {
          _.default.useDirectVideo = e;
        }
        setMaxSyncDelayOverride(e) {
          let { setMaxSyncDelayOverride: t } = (0, p.getVoiceEngine)();
          null != t && t(e);
        }
        applyMediaFilterSettings(e) {
          let {
            applyMediaFilterSettings: t,
            applyMediaFilterSettingsWithCallback: n,
          } = (0, p.getVoiceEngine)();
          return null != n
            ? new Promise((t, i) => {
                n(e, t);
              })
            : (null != t && t(e), Promise.resolve());
        }
        startLocalAudioRecording(e) {
          return new Promise((t, n) => {
            let { startLocalAudioRecording: i } = (0, p.getVoiceEngine)();
            null != i
              ? i(e, e => {
                  e ? t() : n(Error("Failed to start local audio recording."));
                })
              : n(Error("startLocalAudioRecording is not supported."));
          });
        }
        stopLocalAudioRecording(e) {
          var t, n;
          null ===
            (t = (n = (0, p.getVoiceEngine)()).stopLocalAudioRecording) ||
            void 0 === t ||
            t.call(n, (t, n) => {
              e(t, n);
            }),
            this.listenerCount(u.MediaEngineEvent.VoiceActivity) > 0 &&
              null != (0, p.getVoiceEngine)().setEmitVADLevel2 &&
              (0, p.getVoiceEngine)().setEmitVADLevel2(!0);
        }
        speedTester(e, t) {
          if (!this.supports(S.Features.SPEED_TEST))
            throw Error("speedTester is not supported.");
          let n = E.default.create(e, t);
          return (
            n.on(u.BaseSpeedTesterEvent.Destroy, e => {
              this.speedTesters.delete(e),
                this.connectionsEmpty() &&
                  (0, p.setProcessPriority)(S.ProcessPriority.NORMAL);
            }),
            this.speedTesters.add(n),
            (0, p.setProcessPriority)(S.ProcessPriority.HIGH),
            n
          );
        }
        setHasFullbandPerformance(e) {
          null != (0, p.getVoiceEngine)().setHasFullbandPerformance &&
            (0, p.getVoiceEngine)().setHasFullbandPerformance(e);
        }
        getSupportedSecureFramesProtocolVersion() {
          var e;
          return null !==
            (e = (0, p.getVoiceEngine)()
              .SupportedSecureFramesProtocolVersion) && void 0 !== e
            ? e
            : 0;
        }
        getSupportedBandwidthEstimationExperiments(e) {
          null !=
            (0, p.getVoiceEngine)()
              .getSupportedBandwidthEstimationExperiments &&
            (0, p.getVoiceEngine)().getSupportedBandwidthEstimationExperiments(
              e
            );
        }
        watchdogTick() {
          let e = !1;
          (0, p.getVoiceEngine)().pingVoiceThread(() => {
            (e = !0), (this.consecutiveWatchdogFailures = 0);
          }),
            setTimeout(() => {
              !e && ++this.consecutiveWatchdogFailures > 1
                ? this.emit(u.MediaEngineEvent.WatchdogTimeout)
                : this.watchdogTick();
            }, S.WATCHDOG_TIMEOUT_MS);
        }
        connectionsEmpty() {
          return 0 === this.connections.size && 0 === this.speedTesters.size;
        }
        constructor() {
          var t, n;
          super(),
            (t = this),
            (this.Video = _.default),
            (this.Camera = h.default),
            (this.videoInputDeviceId = S.DISABLED_DEVICE_ID),
            (this.connections = new Set()),
            (this.speedTesters = new Set()),
            (this.lastVoiceActivity = -1),
            (this.audioSubsystem = "standard"),
            (this.audioLayer = ""),
            (this.deviceChangeGeneration = 0),
            (this.consecutiveWatchdogFailures = 0),
            (this.codecSurvey = null),
            (this.logger = new o.default("MediaEngineNative")),
            (this.handleDeviceChange = function () {
              let e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : [],
                n =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : [],
                i =
                  arguments.length > 2 && void 0 !== arguments[2]
                    ? arguments[2]
                    : [];
              t.deviceChangeGeneration++,
                t.emit(
                  u.MediaEngineEvent.DeviceChange,
                  (0, f.sanitizeDevices)(S.DeviceTypes.AUDIO_INPUT, e),
                  (0, f.sanitizeDevices)(S.DeviceTypes.AUDIO_OUTPUT, n),
                  (0, f.sanitizeDevices)(S.DeviceTypes.VIDEO_INPUT, i)
                );
            }),
            (this.handleVolumeChange = (e, t) => {
              this.emit(
                u.MediaEngineEvent.VolumeChange,
                e * S.DEFAULT_VOLUME,
                t * S.DEFAULT_VOLUME
              );
            }),
            (this.handleVoiceActivity = (e, t) => {
              let n = Date.now();
              this.listenerCount(u.MediaEngineEvent.VoiceActivity) > 0 &&
                (-1 === this.lastVoiceActivity ||
                  Date.now() - this.lastVoiceActivity > 20) &&
                ((this.lastVoiceActivity = n),
                this.emit(u.MediaEngineEvent.VoiceActivity, e, t));
            }),
            (this.handleActiveSinksChange = (e, t) => {
              this.connections.forEach(n =>
                n.setHasActiveVideoOutputSink(e, t)
              );
            }),
            (this.handleNewListener = e => {
              switch (e) {
                case u.MediaEngineEvent.VoiceActivity:
                  null != (0, p.getVoiceEngine)().setEmitVADLevel2
                    ? (0, p.getVoiceEngine)().setEmitVADLevel2(!0)
                    : (0, p.getVoiceEngine)().setEmitVADLevel(!0, !1, {});
                  break;
                case u.MediaEngineEvent.DeviceChange:
                  let t = this.deviceChangeGeneration;
                  Promise.all([
                    this.getAudioInputDevices(),
                    this.getAudioOutputDevices(),
                    this.getVideoInputDevices(),
                  ]).then(e => {
                    let [n, i, r] = e;
                    t === this.deviceChangeGeneration &&
                      this.emit(u.MediaEngineEvent.DeviceChange, n, i, r);
                  });
              }
            }),
            (this.handleRemoveListener = e => {
              e === u.MediaEngineEvent.VoiceActivity &&
                (null != (0, p.getVoiceEngine)().setEmitVADLevel2
                  ? (0, p.getVoiceEngine)().setEmitVADLevel2(
                      this.listenerCount(u.MediaEngineEvent.VoiceActivity) > 0
                    )
                  : (0, p.getVoiceEngine)().setEmitVADLevel(
                      this.listenerCount(u.MediaEngineEvent.VoiceActivity) > 0,
                      !1,
                      {}
                    ));
            }),
            (this.handleVideoInputInitialization = e => {
              this.emit(u.MediaEngineEvent.VideoInputInitialized, e);
            });
          let i = (0, p.getVoiceEngine)();
          if (
            (i.setDeviceChangeCallback(this.handleDeviceChange),
            i.setVolumeChangeCallback(this.handleVolumeChange),
            i.setOnVoiceCallback(this.handleVoiceActivity),
            null === (n = i.setVideoInputInitializationCallback) ||
              void 0 === n ||
              n.call(i, this.handleVideoInputInitialization),
            i.setTransportOptions({ idleJitterBufferFlush: !0, ducking: !1 }),
            this.on("removeListener", this.handleRemoveListener),
            this.on("newListener", this.handleNewListener),
            null != (0, p.getVoiceEngine)().getAudioSubsystem
              ? (0, p.getVoiceEngine)().getAudioSubsystem((e, t) => {
                  (this.audioSubsystem = e), (this.audioLayer = t);
                })
              : null != (0, p.getVoiceEngine)().getUseLegacyAudioDevice &&
                (this.audioSubsystem = (0,
                p.getVoiceEngine)().getUseLegacyAudioDevice()
                  ? S.AudioSubsystems.LEGACY
                  : S.AudioSubsystems.STANDARD),
            null != i.pingVoiceThread &&
              "undefined" != typeof window &&
              "canary" === window.GLOBAL_ENV.RELEASE_CHANNEL &&
              this.watchdogTick(),
            this.getDebugLogging() && !e.installedLogHooks)
          )
            for (let t of ((e.installedLogHooks = !0),
            ["trace", "debug", "info", "warn", "error", "log"])) {
              let e = console,
                n = e[t];
              null != n &&
                (e[t] = function () {
                  n.apply(this, arguments);
                  try {
                    let e = Array.from(arguments)
                      .map(e => (null != e ? e.toString() : e))
                      .filter(
                        e =>
                          "string" != typeof e ||
                          "\nfont-weight: bold;\ncolor: purple;\n" !== e
                      );
                    (0, p.getVoiceEngine)().consoleLog(t, JSON.stringify(e));
                  } catch (e) {}
                });
            }
          null != i.setActiveSinksChangeCallback &&
            i.setActiveSinksChangeCallback(this.handleActiveSinksChange),
            (0, c.default)(this);
        }
      }).installedLogHooks = !1),
        (r = i);
    },
    784063: function (e, t, n) {
      "use strict";
      let i, r;
      function s() {
        if (null == i)
          throw Error("Native dependencies have not been injected.");
      }
      function a(e) {
        i = e;
      }
      function o() {
        return s(), i.supported();
      }
      function l(e) {
        return s(), i.supportsFeature(e);
      }
      function u(e) {
        s(), i.setProcessPriority(e);
      }
      function c() {
        return s(), null != r ? r : (r = i.getVoiceEngine());
      }
      n.r(t),
        n.d(t, {
          inject: function () {
            return a;
          },
          supported: function () {
            return o;
          },
          supportsFeature: function () {
            return l;
          },
          setProcessPriority: function () {
            return u;
          },
          getVoiceEngine: function () {
            return c;
          },
        }),
        n("70102");
    },
    104240: function (e, t, n) {
      "use strict";
      function i(e) {
        let t = e.getContext("2d");
        return null == t
          ? null
          : {
              render: e => {
                t.putImageData(e, 0, 0);
              },
            };
      }
      n.r(t),
        n.d(t, {
          initRenderingContext2D: function () {
            return i;
          },
        });
    },
    340346: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          initRenderingContextWebGL: function () {
            return a;
          },
        }),
        n("370692"),
        n("477657"),
        n("811875"),
        n("90301"),
        n("652153"),
        n("28797"),
        n("817884"),
        n("597349"),
        n("667536"),
        n("690341");
      var i = n("811022");
      let r = new i.default("RenderingContextWebGL");
      class s {
        static create(e) {
          if (null == e) return null;
          let t = this.createShader(
              e,
              e.VERTEX_SHADER,
              "\nattribute vec4 position;\nattribute vec2 texcoord;\nuniform mat4 transform;\nvarying vec2 out_texcoord;\n\nvoid main() {\n   gl_Position = transform * position;\n   out_texcoord = texcoord;\n}\n"
            ),
            n = this.createShader(
              e,
              e.FRAGMENT_SHADER,
              "\nprecision mediump float;\n\nvarying vec2 out_texcoord;\nuniform sampler2D texture;\n\nvoid main() {\n   gl_FragColor = texture2D(texture, out_texcoord);\n}\n"
            );
          if (null == t || null == n) return null;
          let i = this.createProgram(e, t, n);
          if (null == i) return null;
          let r = e.getAttribLocation(i, "position"),
            a = e.getAttribLocation(i, "texcoord");
          if (-1 === r || -1 === a) return null;
          let o = e.getUniformLocation(i, "transform"),
            l = e.getUniformLocation(i, "texture");
          if (null == o || null == l) return null;
          let u = e.createBuffer();
          if (null == u) return null;
          e.bindBuffer(e.ARRAY_BUFFER, u),
            e.bufferData(
              e.ARRAY_BUFFER,
              new Float32Array([0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1]),
              e.STATIC_DRAW
            );
          let c = e.createTexture();
          return null == c
            ? null
            : new s({
                gl: e,
                program: i,
                positionLoc: r,
                texcoordLoc: a,
                transformLoc: o,
                textureLoc: l,
                vertexBuffer: u,
                texture: c,
              });
        }
        static createShader(e, t, n) {
          let i = e.createShader(t);
          if (null == i) return null;
          if (
            (e.shaderSource(i, n),
            e.compileShader(i),
            !e.getShaderParameter(i, e.COMPILE_STATUS))
          ) {
            r.warn("Failed to compile shader!");
            let t = e.getShaderInfoLog(i);
            return null != t && r.log(t), e.deleteShader(i), null;
          }
          return i;
        }
        static createProgram(e, t, n) {
          if (null == t || null == n) return null;
          let i = e.createProgram();
          if (null == i) return null;
          if (
            (e.attachShader(i, t),
            e.attachShader(i, n),
            e.linkProgram(i),
            !e.getProgramParameter(i, e.LINK_STATUS))
          ) {
            r.warn("Failed to link program!");
            let t = e.getProgramInfoLog(i);
            return null != t && r.log(t), e.deleteProgram(i), null;
          }
          return i;
        }
        render(e) {
          if (null == e) return;
          let t = e.width,
            n = e.height,
            i = this.gl;
          i.bindTexture(i.TEXTURE_2D, this.texture),
            i.texImage2D(
              i.TEXTURE_2D,
              0,
              i.RGBA,
              t,
              n,
              0,
              i.RGBA,
              i.UNSIGNED_BYTE,
              e.data
            ),
            i.texParameteri(i.TEXTURE_2D, i.TEXTURE_WRAP_S, i.CLAMP_TO_EDGE),
            i.texParameteri(i.TEXTURE_2D, i.TEXTURE_WRAP_T, i.CLAMP_TO_EDGE),
            i.texParameteri(i.TEXTURE_2D, i.TEXTURE_MIN_FILTER, i.LINEAR),
            i.viewport(0, 0, t, n),
            i.clearColor(0, 0, 0, 1),
            i.clear(i.COLOR_BUFFER_BIT),
            i.useProgram(this.program),
            i.bindBuffer(i.ARRAY_BUFFER, this.vertexBuffer),
            i.enableVertexAttribArray(this.positionLoc),
            i.vertexAttribPointer(this.positionLoc, 2, i.FLOAT, !1, 0, 0),
            i.enableVertexAttribArray(this.texcoordLoc),
            i.vertexAttribPointer(this.texcoordLoc, 2, i.FLOAT, !1, 0, 0),
            i.uniformMatrix4fv(this.transformLoc, !1, this.transform),
            i.uniform1i(this.textureLoc, 0),
            i.drawArrays(i.TRIANGLES, 0, 6);
        }
        constructor({
          gl: e,
          program: t,
          positionLoc: n,
          texcoordLoc: i,
          transformLoc: r,
          textureLoc: s,
          vertexBuffer: a,
          texture: o,
        }) {
          (this.transform = new Float32Array([
            2, 0, 0, 0, 0, -2, 0, 0, 0, 0, 1, 0, -1, 1, 0, 1,
          ])),
            (this.gl = e),
            (this.program = t),
            (this.positionLoc = n),
            (this.texcoordLoc = i),
            (this.transformLoc = r),
            (this.textureLoc = s),
            (this.vertexBuffer = a),
            (this.texture = o);
        }
      }
      function a(e) {
        let t = e.getContext("webgl2");
        return null == t ? null : s.create(t);
      }
    },
    539578: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return c;
          },
        }),
        n("808653"),
        n("424973");
      var i = n("823302");
      function r(e) {
        return e / 32768;
      }
      function s(e) {
        var t, n, i, r, s, a, o, l, u, c, d, f, E, p, h, _, S, m, T, g, I;
        let C =
            (null !== (c = null == e ? void 0 : e.headerBytes) && void 0 !== c
              ? c
              : 0) +
            (null !== (d = null == e ? void 0 : e.payloadBytes) && void 0 !== d
              ? d
              : 0) +
            (null !== (f = null == e ? void 0 : e.paddingBytes) && void 0 !== f
              ? f
              : 0),
          v =
            (null !==
              (E =
                null == e
                  ? void 0
                  : null === (t = e.fec) || void 0 === t
                    ? void 0
                    : t.headerBytes) && void 0 !== E
              ? E
              : 0) +
            (null !==
              (p =
                null == e
                  ? void 0
                  : null === (n = e.fec) || void 0 === n
                    ? void 0
                    : n.payloadBytes) && void 0 !== p
              ? p
              : 0) +
            (null !==
              (h =
                null == e
                  ? void 0
                  : null === (i = e.fec) || void 0 === i
                    ? void 0
                    : i.paddingBytes) && void 0 !== h
              ? h
              : 0) +
            (null !==
              (_ =
                null == e
                  ? void 0
                  : null === (r = e.retransmitted) || void 0 === r
                    ? void 0
                    : r.headerBytes) && void 0 !== _
              ? _
              : 0) +
            (null !==
              (S =
                null == e
                  ? void 0
                  : null === (s = e.retransmitted) || void 0 === s
                    ? void 0
                    : s.payloadBytes) && void 0 !== S
              ? S
              : 0) +
            (null !==
              (m =
                null == e
                  ? void 0
                  : null === (a = e.retransmitted) || void 0 === a
                    ? void 0
                    : a.paddingBytes) && void 0 !== m
              ? m
              : 0) +
            (null !==
              (T =
                null == e
                  ? void 0
                  : null === (o = e.transmitted) || void 0 === o
                    ? void 0
                    : o.headerBytes) && void 0 !== T
              ? T
              : 0) +
            (null !==
              (g =
                null == e
                  ? void 0
                  : null === (l = e.transmitted) || void 0 === l
                    ? void 0
                    : l.payloadBytes) && void 0 !== g
              ? g
              : 0) +
            (null !==
              (I =
                null == e
                  ? void 0
                  : null === (u = e.transmitted) || void 0 === u
                    ? void 0
                    : u.paddingBytes) && void 0 !== I
              ? I
              : 0);
        return v + C;
      }
      function a(e) {
        var t, n, i, r, s, a, o;
        let l =
            null !== (r = null == e ? void 0 : e.packets) && void 0 !== r
              ? r
              : 0,
          u =
            (null !==
              (s =
                null == e
                  ? void 0
                  : null === (t = e.fec) || void 0 === t
                    ? void 0
                    : t.packets) && void 0 !== s
              ? s
              : 0) +
            (null !==
              (a =
                null == e
                  ? void 0
                  : null === (n = e.retransmitted) || void 0 === n
                    ? void 0
                    : n.packets) && void 0 !== a
              ? a
              : 0) +
            (null !==
              (o =
                null == e
                  ? void 0
                  : null === (i = e.transmitted) || void 0 === i
                    ? void 0
                    : i.packets) && void 0 !== o
              ? o
              : 0);
        return u + l;
      }
      function o(e) {
        let t = {};
        for (let i in e) {
          var n;
          t[i] =
            null != (n = e[i])
              ? {
                  last: Math.round(1e3 * n.last),
                  mean: Math.round(1e3 * n.mean),
                  p75: Math.round(1e3 * n.p75),
                  p95: Math.round(1e3 * n.p95),
                  p99: Math.round(1e3 * n.p99),
                  max: Math.round(1e3 * n.max),
                }
              : null;
        }
        return t;
      }
      function l(e, t) {
        var n, r, o, l, u, c, d, f, E, p, h, _, S, m;
        let T = e.substreams.find(e => !e.isRTX && !e.isFlexFEC);
        if (null == T) return;
        let g = e.substreams.reduce((e, t) => e + s(t.rtpStats), 0),
          I = e.substreams.reduce((e, t) => e + a(t.rtpStats), 0);
        return {
          type: "video",
          ssrc: T.ssrc,
          sinkWant: (0, i.formatSinkWantStat)(t, T.ssrc, !0),
          sinkWantAsInt: (0, i.formatSinkWantAsInt)(t, T.ssrc),
          codec: { id: e.codecPayloadType, name: e.codecName },
          keyFrameInterval: e.keyFrameInterval,
          bytesSent: g,
          packetsSent: I,
          packetsLost:
            null !==
              (f =
                null === (n = T.rtcpStats) || void 0 === n
                  ? void 0
                  : n.packetsLost) && void 0 !== f
              ? f
              : 0,
          fractionLost:
            null !==
              (E =
                null === (r = T.rtcpStats) || void 0 === r
                  ? void 0
                  : r.fractionLost) && void 0 !== E
              ? E
              : 0,
          bitrate: e.mediaBitrate,
          bitrateTarget: e.targetMediaBitrate,
          encoderImplementationName: e.encoderImplementationName,
          encodeUsage: e.encodeUsage,
          averageEncodeTime: e.avgEncodeTime,
          resolution: { height: T.height, width: T.width },
          framesSent: T.frameCounts.keyFrames + T.frameCounts.deltaFrames,
          keyFramesEncoded: T.frameCounts.keyFrames,
          framesEncoded: e.framesEncoded,
          frameRateInput: e.inputFrameRate,
          frameRateEncode: e.encodeFrameRate,
          firCount:
            null !==
              (p =
                null === (o = T.rtcpStats) || void 0 === o
                  ? void 0
                  : o.firPackets) && void 0 !== p
              ? p
              : 0,
          nackCount:
            null !==
              (h =
                null === (l = T.rtcpStats) || void 0 === l
                  ? void 0
                  : l.nackPackets) && void 0 !== h
              ? h
              : 0,
          pliCount:
            null !==
              (_ =
                null === (u = T.rtcpStats) || void 0 === u
                  ? void 0
                  : u.pliPackets) && void 0 !== _
              ? _
              : 0,
          qpSum: e.qpSum,
          bandwidthLimitedResolution: e.bwLimitedResolution,
          framesDroppedRateLimiter: e.framesDroppedRateLimiter,
          framesDroppedEncoderQueue: e.framesDroppedEncoderQueue,
          framesDroppedCongestionWindow: e.framesDroppedCongestionWindow,
          cpuLimitedResolution: e.cpuLimitedResolution,
          encoderQualityVmaf:
            null !==
              (S =
                null === (c = T.encoderQualityStats) || void 0 === c
                  ? void 0
                  : c.imageQualityVmaf_v061) && void 0 !== S
              ? S
              : void 0,
          encoderQualityPsnr:
            null !==
              (m =
                null === (d = T.encoderQualityStats) || void 0 === d
                  ? void 0
                  : d.imageQualityWebrtcPsnrDb) && void 0 !== m
              ? m
              : void 0,
          filter: e.filter,
          passthroughCount: e.passthroughCount,
          encryptSuccessCount: e.encryptSuccessCount,
          encryptFailureCount: e.encryptFailureCount,
          encryptDuration: e.encryptDuration,
          encryptAttempts: e.encryptAttempts,
          encryptMaxAttempts: e.encryptMaxAttempts,
        };
      }
      function u(e, t, n, r) {
        var l, u;
        let c = s(e.rtpStats),
          d = a(e.rtpStats);
        return {
          type: "video",
          ssrc: e.ssrc,
          sinkWant: (0, i.formatSinkWantStat)(t, e.ssrc, !0),
          sinkWantAsInt: (0, i.formatSinkWantAsInt)(t, e.ssrc),
          sinkWantLocal: (0, i.formatSinkWantStat)(n, e.ssrc, !0),
          codec: { id: e.codecPayloadType, name: e.codecName },
          bytesReceived: c,
          packetsReceived: d,
          packetsLost:
            null !== (l = e.rtpStats.packetsLost) && void 0 !== l
              ? l
              : e.rtcpStats.packetsLost,
          fractionLost: e.rtcpStats.fractionLost,
          bitrate: e.totalBitrate,
          jitterBuffer: e.jitterBuffer,
          currentDelay: e.currentDelay,
          targetDelay: e.targetDelay,
          minPlayoutDelay: e.minPlayoutDelay,
          renderDelay: e.renderDelay,
          averageDecodeTime: e.decode,
          resolution: { height: e.height, width: e.width },
          decoderImplementationName: e.decoderImplementationName,
          framesDecoded: e.framesDecoded,
          framesDropped: e.framesDropped,
          framesDecodeErrors: e.framesDecodeErrors,
          framesReceived: e.frameCounts.keyFrames + e.frameCounts.deltaFrames,
          networkFramesDropped:
            null !== (u = e.networkFramesDropped) && void 0 !== u ? u : 0,
          keyFramesDecoded: e.frameCounts.keyFrames,
          frameRateDecode: e.decodeFrameRate,
          frameRateNetwork: e.networkFrameRate,
          frameRateRender: e.renderFrameRate,
          firCount: e.rtcpStats.firPackets,
          nackCount: e.rtcpStats.nackPackets,
          pliCount: e.rtcpStats.pliPackets,
          qpSum: e.qpSum,
          freezeCount: e.freezeCount,
          pauseCount: e.pauseCount,
          totalFreezesDuration: e.totalFreezesDuration,
          totalPausesDuration: e.totalPausesDuration,
          totalFramesDuration: e.totalFramesDuration,
          sumOfSquaredFramesDurations: e.sumOfSquaredFramesDurations,
          passthroughCount: e.passthroughCount,
          decryptSuccessCount: e.decryptSuccessCount,
          decryptFailureCount: e.decryptFailureCount,
          decryptDuration: e.decryptDuration,
          decryptAttempts: e.decryptAttempts,
          ...(null != r
            ? o({
                videoJitterBuffer: r.videoJitterBuffer,
                videoJitterDelay: r.videoJitterDelay,
                videoJitterTarget: r.videoJitterTarget,
              })
            : {}),
        };
      }
      function c(e, t, n, r) {
        var a, c, d, f, E;
        let p = null,
          h = null,
          _ = "string" == typeof t ? JSON.parse(t) : t,
          S = [];
        if (null != _.outbound) {
          let { audio: e, video: t, videos: r } = _.outbound;
          if (null != e)
            (h = (null != h ? h : 0) + e.bytesSent),
              S.push({
                type: "audio",
                ssrc: e.ssrc,
                sinkWant: (0, i.formatSinkWantStat)(n, e.ssrc, !1),
                sinkWantAsInt: (0, i.formatSinkWantAsInt)(n, e.ssrc),
                codec: { id: e.codecPayloadType, name: e.codecName },
                bytesSent: e.bytesSent,
                packetsSent: e.packetsSent,
                packetsLost: Math.max(0, e.packetsLost),
                fractionLost: 100 * e.fractionLost,
                audioLevel: e.audioLevel / 32768,
                audioDetected: e.speaking,
                framesCaptured: e.framesCaptured,
                framesRendered: e.framesRendered,
                noiseCancellerProcessTime: e.noiseCancellerProcessTime,
                voiceActivityDetectorProcessTime:
                  e.voiceActivityDetectorProcessTime,
                passthroughCount: e.passthroughCount,
                encryptSuccessCount: e.encryptSuccessCount,
                encryptFailureCount: e.encryptFailureCount,
                encryptDuration: e.encryptDuration,
                encryptAttempts: e.encryptAttempts,
                encryptMaxAttempts: e.encryptMaxAttempts,
              });
          if (null != r)
            r.forEach(e => {
              let t = l(e, n);
              null != t && ((h = (null != h ? h : 0) + t.bytesSent), S.push(t));
            });
          else if (null != t) {
            let e = l(t, n);
            null != e && ((h = (null != h ? h : 0) + e.bytesSent), S.push(e));
          }
        }
        let m = {};
        null != _.inbound &&
          _.inbound.forEach(e => {
            let { id: t, audio: a, video: l, videos: c, playout: d } = e;
            if (((m[t] = []), null != a))
              (p = (null != p ? p : 0) + a.bytesReceived),
                m[t].push({
                  type: "audio",
                  ssrc: a.ssrc,
                  sinkWant: (0, i.formatSinkWantStat)(n, a.ssrc, !1),
                  sinkWantAsInt: (0, i.formatSinkWantAsInt)(n, a.ssrc),
                  codec: { id: a.codecPayloadType, name: a.codecName },
                  bytesReceived: a.bytesReceived,
                  packetsReceived: a.packetsReceived,
                  packetsLost: a.packetsLost,
                  fractionLost: 100 * a.fractionLost,
                  fecPacketsReceived: a.fecPacketsReceived,
                  fecPacketsDiscarded: a.fecPacketsDiscarded,
                  audioLevel: a.audioLevel / 32768,
                  audioDetected: a.speaking,
                  jitter: a.jitter,
                  jitterBuffer: a.jitterBuffer,
                  jitterBufferPreferred: a.jitterBufferPreferred,
                  decodingCNG: a.decodingCNG,
                  decodingMutedOutput: a.decodingMutedOutput,
                  decodingNormal: a.decodingNormal,
                  decodingPLC: a.decodingPLC,
                  decodingPLCCNG: a.decodingPLCCNG,
                  accelerateRate: 100 * a.accelerateRate,
                  expandRate: 100 * a.expandRate,
                  preemptiveExpandRate: 100 * a.preemptiveExpandRate,
                  speechExpandRate: 100 * a.speechExpandRate,
                  secondaryDecodedRate: 100 * a.secondaryDecodedRate,
                  opSilence: a.opSilence,
                  opNormal: a.opNormal,
                  opMerge: a.opMerge,
                  opExpand: a.opExpand,
                  opAccelerate: a.opAccelerate,
                  opPreemptiveExpand: a.opPreemptiveExpand,
                  opCNG: a.opCNG,
                  delayEstimate: a.delayEstimate,
                  passthroughCount: a.passthroughCount,
                  decryptSuccessCount: a.decryptSuccessCount,
                  decryptFailureCount: a.decryptFailureCount,
                  decryptDuration: a.decryptDuration,
                  decryptAttempts: a.decryptAttempts,
                  ...(null != d
                    ? o({
                        audioJitterBuffer: d.audioJitterBuffer,
                        audioJitterDelay: d.audioJitterDelay,
                        audioJitterTarget: d.audioJitterTarget,
                        audioPlayoutUnderruns: d.audioPlayoutUnderruns,
                        relativeReceptionDelay: d.relativeReceptionDelay,
                        relativePlayoutDelay: d.relativePlayoutDelay,
                      })
                    : {}),
                });
            if (null != c)
              c.forEach(e => {
                let i = u(e, n, r, d);
                if (null != i) {
                  let n = s(e.rtpStats);
                  (p = (null != p ? p : 0) + n), m[t].push(i);
                }
              });
            else if (null != l) {
              let e = u(l, n, r, d);
              if (null != e) {
                let n = s(l.rtpStats);
                (p = (null != p ? p : 0) + n), m[t].push(e);
              }
            }
          });
        let { transport: T, clips: g } = _,
          I = {};
        null != T &&
          ((I.availableOutgoingBitrate = T.sendBandwidth),
          (I.ping = T.rtt),
          (I.decryptionFailures = T.decryptionFailures),
          null != T.routingFailures && (I.routingFailures = T.routingFailures),
          (I.localAddress = T.localAddress),
          (I.pacerDelay = T.pacerDelay),
          null != T.receiverReports && (I.receiverReports = T.receiverReports),
          (I.receiverBitrateEstimate = T.receiverBitrateEstimate),
          (I.outboundBitrateEstimate = T.outboundBitrateEstimate),
          (I.inboundBitrateEstimate =
            null !== (a = T.inboundBitrateEstimate) && void 0 !== a ? a : 0),
          (I.packetsReceived = T.packetsReceived),
          (I.packetsSent = T.packetsSent),
          null != T.secureFramesProtocolVersion &&
            (I.secureFramesProtocolVersion = T.secureFramesProtocolVersion)),
          ((null == T ? void 0 : T.bytesReceived) != null ||
            (null != p && !Number.isNaN(p))) &&
            (I.bytesReceived =
              null !==
                (d =
                  null !== (c = null == T ? void 0 : T.bytesReceived) &&
                  void 0 !== c
                    ? c
                    : p) && void 0 !== d
                ? d
                : void 0),
          ((null == T ? void 0 : T.bytesSent) != null ||
            (null != h && !Number.isNaN(h))) &&
            (I.bytesSent =
              null !==
                (E =
                  null !== (f = null == T ? void 0 : T.bytesSent) &&
                  void 0 !== f
                    ? f
                    : h) && void 0 !== E
                ? E
                : void 0);
        let { screenshare: C, camera: v } = _,
          A =
            null != v
              ? {
                  capturedFramesDropped: v.capturedFramesDropped,
                  capturedFramesCount: v.capturedFramesCount,
                  capturedFramesMean: v.capturedFramesMean,
                  capturedFramesStdev: v.capturedFramesStdev,
                }
              : null;
        return {
          mediaEngineConnectionId: e,
          transport: I,
          screenshare: C,
          camera: A,
          clips: g,
          rtp: { inbound: m, outbound: S },
        };
      }
    },
    710584: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("37983");
      n("884691");
      var r = n("595432");
      function s(e) {
        let { disabled: t, deviceId: n, width: s, height: a } = e;
        return t
          ? (0, i.jsx)("div", {
              className: "media-engine-video",
              style: { width: s, height: a },
            })
          : (0, i.jsx)(r.default, {
              streamId: n,
              style: { width: s, height: a },
            });
      }
      s.defaultProps = { disabled: !1, width: 320, height: 180 };
    },
    40217: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return E;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("677935"),
        a = n.n(s),
        o = n("773179"),
        l = n.n(o),
        u = n("784063"),
        c = n("104240"),
        d = n("340346"),
        f = n("625454");
      function E(e) {
        let {
            streamId: t,
            paused: n,
            onReady: s,
            onResize: o,
            className: E,
            ...p
          } = e,
          h = r.useRef(null),
          { current: _ } = r.useRef(l.uniqueId("media-engine-video-"));
        return (
          r.useEffect(() => {
            let e = h.current;
            if (!n && null != e) {
              let n = !1,
                i = (t, i) => {
                  !n && (null == s || s(), (n = !0)),
                    (e.width !== t || e.height !== i) &&
                      ((e.width = t),
                      (e.height = i),
                      null == o || o({ width: t, height: i }));
                },
                r = (0, u.getVoiceEngine)();
              if (null != r.addVideoOutputSink)
                return (
                  r.addVideoOutputSink(_, t, i),
                  () => {
                    r.removeVideoOutputSink(_, t);
                  }
                );
              {
                let n = (function (e) {
                  var t, n, i, r;
                  let s =
                    null === (r = window) || void 0 === r
                      ? void 0
                      : null === (i = r.DiscordNative) || void 0 === i
                        ? void 0
                        : null === (n = i.app) || void 0 === n
                          ? void 0
                          : null === (t = n.getReleaseChannel) || void 0 === t
                            ? void 0
                            : t.call(n);
                  return "canary" === s || "development" === s
                    ? (0, d.initRenderingContextWebGL)(e)
                    : (0, c.initRenderingContext2D)(e);
                })(e);
                if (null == n) return;
                return (
                  f.default.addSink(t, h, e => {
                    i(e.width, e.height), n.render(e);
                  }),
                  () => {
                    f.default.removeSink(t, h);
                  }
                );
              }
            }
          }, [t, n, o, s, _]),
          (0, i.jsx)("canvas", {
            id: _,
            className: a("media-engine-video", E),
            ref: h,
            ...p,
          })
        );
      }
      E.defaultProps = { paused: !1 };
    },
    832359: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return E;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("677935"),
        a = n.n(s),
        o = n("811022"),
        l = n("784063");
      let u = new o.default("DirectVideo");
      class c {
        addref() {
          this.refcount++;
        }
        release() {
          return this.refcount--, 0 === this.refcount;
        }
        constructor(e) {
          (this.refcount = 1), (this.stream = window.createDiscordStream(e));
        }
      }
      let d = new Map();
      function f(e) {
        let t = d.get(e);
        null != t &&
          t.release() &&
          ((0, l.getVoiceEngine)().removeDirectVideoOutputSink(e), d.delete(e));
      }
      function E(e) {
        let {
            streamId: t,
            paused: n,
            onReady: s,
            onResize: o,
            className: E,
            ...p
          } = e,
          h = r.useRef(null),
          _ = r.useRef(null),
          S = r.useRef({ width: 0, height: 0 }),
          m = r.useRef({ streamId: t, paused: n, onReady: s, onResize: o });
        return (
          r.useLayoutEffect(() => {
            let { current: e } = h;
            if (null != e) {
              let t = document.createElement("video");
              (t.style.display = "block"),
                (t.style.width = "100%"),
                (t.style.height = "100%"),
                (t.autoplay = !0),
                (t.muted = !0),
                t.addEventListener("pause", function () {
                  if (!m.current.paused) {
                    var e;
                    null === (e = _.current) || void 0 === e || e.play();
                  }
                }),
                t.addEventListener("resize", function () {
                  var e, t, n, i, r, s;
                  let { width: a, height: o } = S.current,
                    l =
                      null !==
                        (n =
                          null === (e = _.current) || void 0 === e
                            ? void 0
                            : e.videoWidth) && void 0 !== n
                        ? n
                        : 0,
                    u =
                      null !==
                        (i =
                          null === (t = _.current) || void 0 === t
                            ? void 0
                            : t.videoHeight) && void 0 !== i
                        ? i
                        : 0;
                  if (a !== l || o !== u) {
                    let e = { width: l, height: u };
                    null === (r = (s = m.current).onResize) ||
                      void 0 === r ||
                      r.call(s, e),
                      (S.current = e);
                  }
                }),
                t.addEventListener("canplaythrough", function () {
                  var e, t;
                  u.info(
                    "handleReady for "
                      .concat(m.current.streamId, ", have onReady callback = ")
                      .concat(null != m.current.onReady)
                  ),
                    null === (e = (t = m.current).onReady) ||
                      void 0 === e ||
                      e.call(t);
                }),
                u.info(
                  "create video element for "
                    .concat(m.current.streamId, ", readyState=")
                    .concat(t.readyState)
                ),
                t.readyState > 3 &&
                  u.error(
                    "video element for ".concat(
                      m.current.streamId,
                      " was ready before attached"
                    )
                  ),
                e.appendChild(t),
                (_.current = t);
            }
          }, []),
          r.useEffect(() => {
            (m.current.streamId = t),
              (m.current.paused = n),
              (m.current.onReady = s),
              (m.current.onResize = o);
          }),
          r.useEffect(() => {
            let e = _.current;
            if (null != e) {
              if (n) null != e.srcObject && ((e.srcObject = null), f(t));
              else {
                var i;
                let n;
                u.info("attaching srcObject for ".concat(t));
                return (
                  (e.srcObject =
                    ((i = t),
                    null == (n = d.get(i))
                      ? ((n = new c(i)),
                        (0, l.getVoiceEngine)().addDirectVideoOutputSink(i),
                        d.set(i, n))
                      : n.addref(),
                    n.stream)),
                  () => {
                    f(t), (e.srcObject = null);
                  }
                );
              }
            }
          }, [n, t]),
          (0, i.jsx)("div", {
            className: a("media-engine-video", E),
            ref: h,
            ...p,
          })
        );
      }
      E.defaultProps = { paused: !1 };
    },
    595432: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        });
      var i = n("40217"),
        r = n("832359");
      function s(e) {
        return s.useDirectVideo ? (0, r.default)(e) : (0, i.default)(e);
      }
      (s.defaultProps = i.default.defaultProps), (s.useDirectVideo = !1);
    },
    625454: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        }),
        n("222007");
      var i = n("784063"),
        r = new (class e {
          addSink(e, t, n) {
            let r = this.streams,
              s = r[e];
            if ((null == s && (s = r[e] = new Map()), 0 === s.size)) {
              let t = (0, i.getVoiceEngine)();
              t.setVideoOutputSink(
                e,
                this.handleImageData.bind(
                  this,
                  t.signalVideoOutputSinkReady.bind(t, e),
                  s
                ),
                !0
              );
            }
            s.set(t, n);
          }
          removeSink(e, t) {
            let n = this.streams,
              r = n[e];
            if (null != r && (r.delete(t), 0 === r.size)) {
              delete n[e];
              let t = (0, i.getVoiceEngine)();
              t.setVideoOutputSink(e);
            }
          }
          handleImageData(e, t, n) {
            for (let e of t.values()) e(n);
            e();
          }
          constructor() {
            this.streams = {};
          }
        })();
    },
    953161: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        }),
        n("424973"),
        n("222007");
      var i = n("773364"),
        r = n("22546");
      function s(e) {
        let t = !1;
        e.on(i.MediaEngineEvent.Destroy, () => (t = !0));
        let n = async () => {
          if (t) return;
          let s = [];
          e.eachConnection(e =>
            s.push({ connection: e, stats: e.emitStats() })
          );
          let a = [];
          for (let e of s) {
            let t = await e.stats;
            null != t && a.push({ connection: e.connection, stats: t });
          }
          e.emit(i.MediaEngineEvent.ConnectionStats, a),
            setTimeout(n, r.STATS_INTERVAL);
        };
        setTimeout(n, r.STATS_INTERVAL);
      }
    },
    668906: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getExperimentCodecs: function () {
            return a;
          },
          filterVideoCodecs: function () {
            return o;
          },
          codecNameToPayloadName: function () {
            return u;
          },
        }),
        n("424973"),
        n("843762");
      var i = n("353927");
      let r = [
        { name: "H264", encode: !0, decode: !0 },
        { name: "VP8", encode: !0, decode: !0 },
        { name: "VP9", encode: !0, decode: !0 },
      ];
      function s(e, t) {
        let n = t.concat(r),
          i = [];
        return (
          n.forEach(t => {
            let n = e.find(e => t.name === e.codec);
            null != n &&
              i.push({
                name: n.codec,
                encode: n.encode && t.encode,
                decode: n.decode && t.decode,
              });
          }),
          i
        );
      }
      function a(e, t) {
        let n = [];
        return (
          e.has(i.ExperimentFlags.SIGNAL_H265_SUPPORT)
            ? t === i.MediaEngineContextTypes.STREAM &&
              n.unshift({ name: "H265", encode: !0, decode: !0 })
            : e.has(i.ExperimentFlags.SIGNAL_H265_DECODE_SUPPORT) &&
              t === i.MediaEngineContextTypes.STREAM &&
              n.unshift({ name: "H265", encode: !1, decode: !0 }),
          e.has(i.ExperimentFlags.SIGNAL_AV1_SUPPORT) &&
            n.unshift({ name: "AV1", encode: !0, decode: !0 }),
          n
        );
      }
      function o(e, t) {
        if ("string" == typeof e) {
          let n = JSON.parse(e).map(e => ({
            codec: l(e.codec),
            encode: e.encode,
            decode: e.decode,
          }));
          return s(n, t);
        }
        {
          let n = e.map(e => ({ codec: l(e), encode: !0, decode: !0 }));
          return s(n, t);
        }
      }
      function l(e) {
        return "AV1X" === e ? "AV1" : e;
      }
      function u(e) {
        return "AV1" === e ? "AV1X" : e;
      }
    },
    67021: function (e, t, n) {
      "use strict";
      function i() {
        var e, t;
        return "undefined" == typeof platform
          ? 0
          : parseInt(
              null !==
                (t =
                  null === (e = platform) || void 0 === e
                    ? void 0
                    : e.version) && void 0 !== t
                ? t
                : "0",
              10
            );
      }
      n.r(t),
        n.d(t, {
          platformVersion: function () {
            return i;
          },
        });
    },
    823302: function (e, t, n) {
      "use strict";
      function i(e, t, n) {
        let i = e[t];
        return null == i
          ? n
            ? "".concat(e.any, " (any)")
            : "100"
          : i.toString();
      }
      function r(e, t) {
        let n = e[t];
        return null == n ? e.any : n;
      }
      n.r(t),
        n.d(t, {
          formatSinkWantStat: function () {
            return i;
          },
          formatSinkWantAsInt: function () {
            return r;
          },
        });
    },
    793722: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          registerActiveSink: function () {
            return s;
          },
          unregisterActiveSink: function () {
            return a;
          },
          setActiveSinksChangeCallback: function () {
            return o;
          },
        });
      let i = {},
        r = null;
      function s(e) {
        var t;
        let n = null !== (t = i[e]) && void 0 !== t ? t : 0;
        0 === n && (null == r || r(e, !0)), (i[e] = n + 1);
      }
      function a(e) {
        i[e]--, 0 === i[e] && (null == r || r(e, !1));
      }
      function o(e) {
        r = null != e ? e : null;
      }
    },
    657869: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("70102");
      var i,
        r = n("44170"),
        s = n("811022"),
        a = n("861001"),
        o = n("201617"),
        l = n("581785"),
        u = n("111000"),
        c = n("353927"),
        d = n("843455");
      let f = new s.default("Output"),
        E = new o.default();
      i = class extends r.EventEmitter {
        destroy() {
          var e, t;
          this.removeAllListeners(),
            null === (e = this.cleanup) || void 0 === e || e.call(this),
            this.reset(),
            null != this.stream &&
              (E.release(this.stream), (this.stream = void 0)),
            null === (t = this._audioFilter) || void 0 === t || t.dispose(),
            (this._audioFilter = void 0),
            (this.destroyed = !0);
        }
        reset() {
          this.setSpeaking(!1);
        }
        resume() {
          this.context.resume();
        }
        get state() {
          return this.context.state;
        }
        getDelayedStream() {
          let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : 0.2,
            t = this.context;
          if (null == this.stream) throw Error("AudioInput: No MediaStream");
          let n = t.createDelay(e);
          n.delayTime.value = e;
          let i = t.createMediaStreamSource(this.stream);
          i.connect(n);
          let r = t.createMediaStreamDestination();
          return n.connect(r), r.stream;
        }
        get mute() {
          return this._mute;
        }
        set mute(e) {
          (this._mute = e), this.updateAudioTracks(), this.setSpeaking(!1);
        }
        get echoCancellation() {
          return this._echoCancellation;
        }
        set echoCancellation(e) {
          this._echoCancellation !== e &&
            ((this._echoCancellation = e),
            null != this.stream && this.enable());
        }
        get noiseSuppression() {
          return this._noiseSuppression;
        }
        set noiseSuppression(e) {
          this._noiseSuppression !== e &&
            ((this._noiseSuppression = e),
            null != this.stream && this.enable());
        }
        get noiseCancellation() {
          return this._noiseCancellation;
        }
        set noiseCancellation(e) {
          this._noiseCancellation !== e &&
            ((this._noiseCancellation = e),
            null != this.stream && this.enable());
        }
        get automaticGainControl() {
          return this._automaticGainControl;
        }
        set automaticGainControl(e) {
          this._automaticGainControl !== e &&
            ((this._automaticGainControl = e),
            null != this.stream && this.enable());
        }
        async enable() {
          null != this.cleanup && (this.cleanup(), (this.cleanup = void 0)),
            null != this.stream &&
              (E.release(this.stream), (this.stream = void 0));
          let e = await (0, a.getAudioInputDevices)(),
            t = {
              echoCancellation: this.echoCancellation,
              noiseSuppression: this.noiseSuppression,
              autoGainControl: this.automaticGainControl,
            };
          e.some(e => e.id === this.sourceId) && (t.deviceId = this.sourceId);
          try {
            let e = await E.acquire({ audio: t });
            if (this.destroyed)
              throw (E.release(e), Error("AudioInput: Already destroyed"));
            if (this._noiseCancellation)
              try {
                let t = await (0, l.getKrispSDK)();
                (this._audioFilter = await t.createNoiseFilter(this.context)),
                  this._audioFilter.addEventListener("ready", e => {
                    var t;
                    null === (t = this._audioFilter) ||
                      void 0 === t ||
                      t.enable();
                  }),
                  this._audioFilter.addEventListener("dispose", t => {
                    E.release(e);
                  });
                let n = this.context.createMediaStreamSource(e),
                  i = this.context.createMediaStreamDestination();
                n.connect(this._audioFilter),
                  this._audioFilter.connect(i),
                  (this.stream = i.stream);
              } catch (t) {
                f.error("failure creating krisp node"),
                  f.error(t),
                  (this.stream = e);
              }
            else this.stream = e;
            return (
              this.updateMode(),
              this.updateAudioTracks(),
              this.emit("permission", !0),
              this.emit("stream", this.stream),
              e
            );
          } catch (e) {
            if ("string" != typeof e)
              switch (e.name) {
                case "PermissionDeniedError":
                case "NotAllowedError":
                  throw (
                    (this.emit("permission", !1),
                    d.UserMediaErrors.PERMISSION_DENIED)
                  );
                case "PermissionDismissedError":
                  throw (
                    (this.emit("permission", !1),
                    d.UserMediaErrors.PERMISSION_DISMISSED)
                  );
                case "DevicesNotFoundError":
                case "NotFoundError":
                  throw d.UserMediaErrors.NO_DEVICES_FOUND;
                default:
                  throw e.name || "UNKNOWN";
              }
            throw e;
          }
        }
        setSource(e) {
          this.sourceId !== e &&
            ((this.sourceId = e), null != this.stream && this.enable());
        }
        setPTTActive(e) {
          if (!this.mute)
            this.speaking !== e &&
              (null != this.pttReleaseDelayTimeout &&
                (window.clearTimeout(this.pttReleaseDelayTimeout),
                (this.pttReleaseDelayTimeout = void 0)),
              e
                ? this.setSpeaking(e)
                : (this.pttReleaseDelayTimeout = window.setTimeout(() => {
                    this.setSpeaking(!1),
                      (this.pttReleaseDelayTimeout = void 0);
                  }, this.modeOptions.delay)));
        }
        setMode(e, t) {
          (this.mode = e),
            (this.modeOptions = t),
            null != this.stream && this.enable();
        }
        updateMode() {
          null != this.cleanup && (this.cleanup(), (this.cleanup = void 0)),
            null != this.stream &&
              this.mode === c.InputModes.VOICE_ACTIVITY &&
              (this.cleanup = this.setupVoiceActivity(this.modeOptions));
        }
        setupVoiceActivity(e) {
          let { threshold: t } = e;
          if (null == this.stream) throw Error("stream cannot be null");
          null == t && (t = -40);
          let n = new u.default(this.context, this.stream, t);
          return (
            (n.onProcess = (e, t) => {
              !this.mute && this.setSpeaking(e), this.emit("voiceactivity", t);
            }),
            () => {
              null != n && (n.stop(), (n = null), this.setSpeaking(!1));
            }
          );
        }
        setSpeaking(e) {
          this.speaking !== e &&
            ((this.speaking = e), this.emit("speaking", e));
        }
        updateAudioTracks() {
          if (null != this.stream) {
            let e = this.stream.getAudioTracks();
            for (let t = 0, n = e.length; t < n; t++)
              e[t].enabled = !this._mute;
          }
        }
        constructor(e) {
          super(),
            (this._mute = !1),
            (this._echoCancellation = !0),
            (this._noiseSuppression = !0),
            (this._automaticGainControl = !0),
            (this._noiseCancellation = !1),
            (this._audioFilter = void 0),
            (this.speaking = !1),
            (this.mode = c.InputModes.VOICE_ACTIVITY),
            (this.modeOptions = { delay: 20, threshold: -40 }),
            (this.destroyed = !1),
            (this.context = e);
        }
      };
    },
    566106: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          EncoderParameter: function () {
            return i;
          },
          default: function () {
            return r;
          },
        }),
        n("222007"),
        n("70102"),
        n("860677");
      var i,
        r,
        s,
        a = n("773179"),
        o = n.n(a),
        l = n("947279"),
        u = n("773364"),
        c = n("62684"),
        d = n("324304"),
        f = n("849074"),
        E = n("948961"),
        p = n("353927"),
        h = n("53452");
      ((s = i || (i = {}))[(s.AUDIO_BITRATE = 0)] = "AUDIO_BITRATE"),
        (s[(s.VIDEO_RESOLUTION_SCALE = 1)] = "VIDEO_RESOLUTION_SCALE"),
        (s[(s.VIDEO_BITRATE = 2)] = "VIDEO_BITRATE"),
        (s[(s.VIDEO_FRAMERATE = 3)] = "VIDEO_FRAMERATE"),
        (r = class extends l.default {
          interact() {
            for (let e of ((this.interacted = !0), Object.keys(this.outputs)))
              this.outputs[e].play();
            this.input.resumeAudio();
          }
          destroy() {
            for (let e of (super.destroy(), Object.keys(this.outputs)))
              this.destroyOutput(e);
            this.input.destroy();
          }
          async getStats() {
            if (!h.BROWSER_SUPPORTS_DIAGNOSTICS) return null;
            let e = await this.getRawStats();
            return (0, E.default)(
              e,
              this.getUserIdBySsrc,
              this.remoteVideoSinkWants,
              this.localVideoSinkWants
            );
          }
          setInputMode(e, t) {
            this.input.setAudioMode(e, {
              delay: t.pttReleaseDelay,
              threshold: t.vadThreshold,
            });
          }
          setSelfDeaf(e) {
            for (let t of ((this.selfDeaf = e), Object.keys(this.outputs)))
              this.outputs[t].mute = e || this.localMutes[t];
          }
          setLocalMute(e, t) {
            (this.localMutes[e] = t),
              null != this.outputs[e] &&
                (this.outputs[e].mute = this.selfDeaf || t),
              this.emit(u.BaseConnectionEvent.LocalMute, e, t);
          }
          fastUdpReconnect() {}
          getNumFastUdpReconnects() {
            return null;
          }
          setRemoteVideoSinkWants(e) {
            (this.remoteVideoSinkWants = e),
              this.updateVideoQuality(p.MEDIA_SINK_WANTS_PROPERTIES);
          }
          setLocalVideoSinkWants(e) {
            this.localVideoSinkWants = e;
          }
          updateVideoQualityCore(e, t) {
            let n;
            if (!this.videoSupported) return;
            let i = this.input.getVideoStream();
            if (null == i) return;
            if (
              null != t.capture &&
              null != t.capture.width &&
              null != t.capture.height &&
              null != e.remoteSinkWantsPixelCount &&
              0 !== e.remoteSinkWantsPixelCount &&
              0 !== t.capture.height
            ) {
              let i = t.capture.width / t.capture.height,
                r = Math.sqrt(e.remoteSinkWantsPixelCount * i),
                s = t.capture.width / r;
              n = s < 1 ? void 0 : s;
            }
            this.logger.info(
              "BaseWebRTCConnection.updateVideoQuality: resolutionScaleFactor: ".concat(
                n,
                ", "
              ) +
                "encodingVideoWidth: "
                  .concat(
                    e.encodingVideoWidth,
                    ", remoteSinkWantsMaxFramerate: "
                  )
                  .concat(e.remoteSinkWantsMaxFramerate, ", ") +
                "encodingVideoMaxBitRate: "
                  .concat(e.encodingVideoMaxBitRate, ", localWant: ")
                  .concat(this.getLocalWant())
            ),
              this.setVideoEncoderParameters([
                { parameter: 1, value: n },
                { parameter: 2, value: e.encodingVideoMaxBitRate },
                { parameter: 3, value: e.remoteSinkWantsMaxFramerate },
              ]);
            let r = e.encodingVideoWidth,
              s = e.encodingVideoHeight;
            for (let e of i.getTracks()) {
              var a, o;
              let t = e.getConstraints(),
                n = null === (a = t.width) || void 0 === a ? void 0 : a.max,
                i = null === (o = t.height) || void 0 === o ? void 0 : o.max;
              (n !== r || i !== s) &&
                (this.logger.info(
                  "BaseWebRTCConnection.updateVideoQuality: old: "
                    .concat(n, " x ")
                    .concat(i, ", new: ")
                    .concat(r, " x ")
                    .concat(s)
                ),
                (t.width = { max: r }),
                (t.height = { max: s }),
                e.applyConstraints(t));
            }
          }
          setCanHavePriority(e, t) {
            let n = this.canHavePriority.size;
            t ? this.canHavePriority.add(e) : this.canHavePriority.delete(e),
              this.canHavePriority.size !== n &&
                this.recalculatePrioritySpeakers();
          }
          setSpeakingFlags(e, t) {
            null != t && t !== p.SpeakingFlags.NONE
              ? (this.localSpeakingFlags[e] = t)
              : delete this.localSpeakingFlags[e];
            let n = this.outputs[e];
            null != n && n.setSpeakingFlags(t);
            let i = this.wantsPriority.size,
              r = p.SpeakingFlags.VOICE | p.SpeakingFlags.PRIORITY;
            (t & r) === r
              ? this.wantsPriority.add(e)
              : this.wantsPriority.delete(e),
              this.wantsPriority.size !== i &&
                this.recalculatePrioritySpeakers();
          }
          clearAllSpeaking() {
            for (let e in this.localSpeakingFlags)
              delete this.localSpeakingFlags[e],
                null != this.outputs[e] &&
                  this.outputs[e].setSpeakingFlags(p.SpeakingFlags.NONE);
          }
          setOutputVolume(e) {
            for (let t of ((this.outputVolume = e), Object.keys(this.outputs)))
              this.outputs[t].volume = this.computeLocalVolume(t);
          }
          setSinkId(e) {
            for (let t of ((this.sinkId = e), Object.keys(this.outputs)))
              this.outputs[t].setSinkId(e);
          }
          setStreamParameters(e) {
            return new Promise((t, n) => {
              for (let t of this.videoStreamParameters) {
                let i = e.findIndex(e => e.rid === t.rid);
                if (-1 === i) {
                  n(Error("Invalid rid"));
                  return;
                }
                !o.isEqual(this.videoStreamParameters[i], e[i]) &&
                  (this.videoStreamParameters[i] = { ...e[i] });
              }
              t();
            });
          }
          recalculatePrioritySpeakers() {
            (this.prioritySpeakers = new Set(
              Array.from(this.wantsPriority).filter(e =>
                this.canHavePriority.has(e)
              )
            )),
              o.forEach(this.outputs, (e, t) => {
                e.volume = this.computeLocalVolume(t);
              });
          }
          setBitRate(e) {
            this.voiceBitrate = e;
          }
          setLocalVolume(e, t) {
            (this.localVolumes[e] = t),
              null != this.outputs[e] &&
                (this.outputs[e].volume = this.computeLocalVolume(e));
          }
          getLocalVolume(e) {
            let t = this.localVolumes[e];
            return (
              null == t &&
                (t =
                  this.context === p.MediaEngineContextTypes.DEFAULT
                    ? p.DEFAULT_VOLUME
                    : p.DEFAULT_STREAM_VOLUME),
              null != t ? t : p.DEFAULT_VOLUME
            );
          }
          computeLocalVolume(e) {
            let t =
              (this.outputVolume * this.getLocalVolume(e)) / p.DEFAULT_VOLUME;
            return this.prioritySpeakers.size > 0 &&
              !this.prioritySpeakers.has(e)
              ? t * p.DEFAULT_PRIORITY_SPEAKER_DUCKING
              : t;
          }
          hasDesktopSource() {
            var e;
            return null === (e = this.input) || void 0 === e
              ? void 0
              : e.hasDesktopSource();
          }
          createOutput(e, t) {
            if (t.discordIsTearingDown) {
              this.logger.info(
                "BaseWebRTCConnection.createOutput: ignoring track being torn down: ".concat(
                  t.id
                )
              );
              return;
            }
            let n = this.outputs[e];
            if (null == n) {
              var i;
              ((n = new d.default(e, this.audioContext)).mute =
                this.selfDeaf || this.localMutes[e]),
                (n.volume = this.computeLocalVolume(e)),
                n.on(d.OutputEvent.Speaking, t =>
                  this.emit(
                    u.BaseConnectionEvent.Speaking,
                    e,
                    t,
                    this.audioSSRC
                  )
                ),
                n.on(d.OutputEvent.Video, t => {
                  var n;
                  return this.emitUnsafe(
                    u.BaseConnectionEvent.Video,
                    e,
                    t,
                    this.audioSSRC,
                    this.videoStreamParameters[0].ssrc,
                    null !== (n = this.videoStreamParameters[0].rtxSsrc) &&
                      void 0 !== n
                      ? n
                      : 0,
                    this.videoStreamParameters
                  );
                }),
                n.on(d.OutputEvent.InteractionRequired, e =>
                  this.emit(u.BaseConnectionEvent.InteractionRequired, e)
                ),
                n.setSpeakingFlags(
                  null !== (i = this.localSpeakingFlags[e]) && void 0 !== i
                    ? i
                    : p.SpeakingFlags.NONE
                ),
                n.setSinkId(this.sinkId),
                (this.outputs[e] = n);
            }
            n.addTrack(t);
          }
          destroyOutput(e, t) {
            let n = this.outputs[e];
            null != n &&
              (null == t || 0 === n.removeTrack(t)) &&
              (n.destroy(), delete this.outputs[e]);
          }
          setSilenceThreshold(e) {
            this.silenceThreshold = e;
          }
          setLocalPan(e, t, n) {}
          setExperimentalEncoders(e) {}
          setHardwareH264(e) {}
          setQoS(e) {}
          isAttenuating() {
            return !1;
          }
          setAttenuation(e, t, n) {}
          setEncryption(e, t) {}
          setMinimumJitterBufferLevel(e) {}
          setPostponeDecodeLevel(e) {}
          setReconnectInterval(e) {}
          setKeyframeInterval(e) {}
          startSamplesPlayback(e, t, n) {}
          stopSamplesPlayback() {}
          startSamplesLocalPlayback(e, t, n, i) {}
          stopSamplesLocalPlayback(e) {}
          stopAllSamplesLocalPlayback() {}
          setRtcLogEphemeralKey(e) {}
          setRtcLogMarker(e) {}
          setVideoQualityMeasurement(e) {}
          setVideoEncoderExperiments(e) {}
          setBandwidthEstimationExperiments(e) {}
          prepareSecureFramesTransition(e, t, n) {}
          prepareSecureFramesEpoch(e, t, n) {}
          executeSecureFramesTransition(e) {}
          getMLSKeyPackage(e) {}
          updateMLSExternalSender(e) {}
          processMLSProposals(e, t) {}
          prepareMLSCommitTransition(e, t, n) {}
          processMLSWelcome(e, t, n) {}
          constructor(e, t, n, i) {
            var r;
            super(e, t),
              (r = this),
              (this.silenced = !1),
              (this.interacted = !1),
              (this.outputVolume = p.DEFAULT_VOLUME),
              (this.sinkId = p.DEFAULT_DEVICE_ID),
              (this.lastPingTime = 0),
              (this.outputs = {}),
              (this.webrtcStats = new f.WebRTCStatsCalculator()),
              (this.silenceThreshold = -100),
              (this.canHavePriority = new Set()),
              (this.prioritySpeakers = new Set()),
              (this.setEchoCancellation = e =>
                this.input.setEchoCancellation(e)),
              (this.setNoiseSuppression = e =>
                this.input.setNoiseSuppression(e)),
              (this.setNoiseCancellation = e =>
                this.input.setNoiseCancellation(e)),
              (this.setAutomaticGainControl = e =>
                this.input.setAutomaticGainControl(e)),
              (this.setAudioSource = e => this.input.setAudioSource(e)),
              (this.setVideoSource = e => this.input.setVideoSource(e)),
              (this.setDesktopInput = e => this.input.setDesktop(e)),
              (this.setForceAudioInput = function (e) {
                return (
                  arguments.length > 1 &&
                    void 0 !== arguments[1] &&
                    arguments[1],
                  r.input.setPTTActive(e)
                );
              }),
              (this.setSelfMute = e => {
                this.input.setMute(e), this.emit(u.BaseConnectionEvent.Mute, e);
              }),
              (this.handleAddVideoTrack = () => {
                this.updateVideoQuality();
              }),
              (this.handleAudioPermission = e =>
                this.emit(u.BaseConnectionEvent.AudioPermission, e)),
              (this.handleVideoPermission = e =>
                this.emit(u.BaseConnectionEvent.VideoPermission, e)),
              (this.handleVideo = e => {
                var t;
                return this.emit(
                  u.BaseConnectionEvent.Video,
                  this.ids.userId,
                  e,
                  this.audioSSRC,
                  this.videoStreamParameters[0].ssrc,
                  null !== (t = this.videoStreamParameters[0].rtxSsrc) &&
                    void 0 !== t
                    ? t
                    : 0,
                  this.videoStreamParameters
                );
              }),
              (this.handleDesktopSourceEnd = () =>
                this.emit(u.BaseConnectionEvent.DesktopSourceEnd)),
              (this.handleStream = e => this.setStream(e)),
              (this.handleVoiceActivity = e => {
                let t = e <= this.silenceThreshold;
                this.silenced !== t &&
                  !this.input.mute() &&
                  ((this.silenced = t),
                  this.emit(u.BaseConnectionEvent.Silence, t));
              }),
              (this.handleNewListener = e => {
                switch (e) {
                  case u.BaseConnectionEvent.Video:
                    this.videoReady &&
                      setImmediate(() =>
                        this.handleVideo(this.input.getVideoStreamId())
                      );
                    break;
                  case u.BaseConnectionEvent.ConnectionStateChange:
                    this.emit(e, this.connectionState);
                    break;
                  case u.BaseConnectionEvent.InteractionRequired:
                    !this.interacted &&
                      "suspended" === this.input.getAudioState() &&
                      setImmediate(() => this.emit(e, !0));
                }
              }),
              (this.handleInputSpeaking = e => {
                this.emit(
                  u.BaseConnectionEvent.Speaking,
                  this.ids.userId,
                  e ? p.SpeakingFlags.VOICE : p.SpeakingFlags.NONE,
                  this.audioSSRC
                );
              }),
              (this.handleAudioContextStateChange = () => {
                !this.interacted &&
                  "running" === this.input.getAudioState() &&
                  (this.interact(),
                  this.emit(u.BaseConnectionEvent.InteractionRequired, !1));
              }),
              (this.handleStats = e => {
                if (this.connectionState === p.ConnectionStates.DISCONNECTED) {
                  this.off(u.BaseConnectionEvent.Stats, this.handleStats);
                  return;
                }
                null != e &&
                  (this.webrtcStats.update(e),
                  (this.stats = e),
                  Date.now() - this.lastPingTime >= p.PING_INTERVAL &&
                    (this.emit(u.BaseConnectionEvent.Ping, e.transport.ping),
                    (this.lastPingTime = Date.now())));
              }),
              (this.input = new c.default(n)),
              n.addEventListener(
                "statechange",
                this.handleAudioContextStateChange
              ),
              (this.audioContext = n),
              this.input.on(
                c.InputEvent.AudioPermission,
                this.handleAudioPermission
              ),
              this.input.on(
                c.InputEvent.VideoPermission,
                this.handleVideoPermission
              ),
              this.input.on(c.InputEvent.Video, this.handleVideo),
              this.input.on(c.InputEvent.Mute, e =>
                this.emit(u.BaseConnectionEvent.Mute, e)
              ),
              this.input.on(c.InputEvent.Stream, this.handleStream),
              this.input.on(
                c.InputEvent.DesktopSourceEnd,
                this.handleDesktopSourceEnd
              ),
              this.input.on(c.InputEvent.Speaking, this.handleInputSpeaking),
              this.input.on(
                c.InputEvent.AddVideoTrack,
                this.handleAddVideoTrack
              ),
              this.input.on(c.InputEvent.Video, this.handleAddVideoTrack),
              this.on("newListener", this.handleNewListener),
              this.initializeStreamParameters(i);
          }
        });
    },
    560550: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          makeConnection: function () {
            return S;
          },
        });
      var i,
        r = n("383536"),
        s = n.n(r),
        a = n("811022"),
        o = n("773364"),
        l = n("566106"),
        u = n("8479"),
        c = n("62684"),
        d = n("760014"),
        f = n("588446"),
        E = n("779791"),
        p = n("353927"),
        h = n("53452");
      function _(e) {
        return e.split("-")[0];
      }
      function S(e, t, n, r) {
        let o = ""
            .concat(null != s.name && "" !== s.name ? s.name : "unknown", " ")
            .concat(
              null != s.version && "" !== s.version ? s.version : "unknown"
            ),
          l = new a.default("Connection(".concat(e, ")"));
        return h.BROWSER_SUPPORTS_UNIFIED_PLAN
          ? (l.info("Using Unified Plan (".concat(o, ")")),
            new E.default(e, t, n, r))
          : (l.info("Using Plan B (".concat(o, ")")), new i(e, t, n, r));
      }
      i = class extends l.default {
        destroy() {
          super.destroy(), this.pc.close();
        }
        setCodecs(e, t, n) {
          var i, r, s;
          let a;
          (this.fpc.audioCodec !== e || this.fpc.videoCodec !== t) &&
            ((a = this.codecs.find(t => t.name === e)),
            (this.fpc.audioCodec = e),
            (this.fpc.audioPayloadType =
              null !== (i = null == a ? void 0 : a.payloadType) && void 0 !== i
                ? i
                : 0),
            (a = this.codecs.find(e => e.name === t)),
            (this.fpc.videoCodec = t),
            (this.fpc.videoPayloadType =
              null !== (r = null == a ? void 0 : a.payloadType) && void 0 !== r
                ? r
                : 0),
            (this.fpc.rtxPayloadType =
              null !== (s = null == a ? void 0 : a.rtxPayloadType) &&
              void 0 !== s
                ? s
                : 0),
            this.pc.negotiationNeeded());
        }
        setStream(e) {
          (this.fpc.direction =
            null != e ? f.Directions.SENDRECV : f.Directions.SENDONLY),
            this.pc.setStream(null != e ? e : null);
        }
        createUser(e, t, n) {
          var i;
          if (0 === t) {
            this.logger.warn(
              "Attempting to create user ".concat(e, " with 0 audio SSRC")
            );
            return;
          }
          this.logger.info(
            "Creating user: "
              .concat(e, " with audio SSRC: ")
              .concat(t, " and video SSRCs: ")
              .concat(
                null !== (i = null == n ? void 0 : n.join(",")) && void 0 !== i
                  ? i
                  : 0
              )
          );
          let r = null != n && n.length > 0 ? n[0] : 0;
          this.fpc.addStream(e, t, r);
        }
        destroyUser(e) {
          this.fpc.removeStream(e);
        }
        setBitRate(e) {
          this.voiceBitrate !== e &&
            (super.setBitRate(e), this.pc.setBitRate(e));
        }
        setSDP(e) {
          this.pc.on("offer", () => this.fpc.createAnswer()),
            (this.fpc.sdp = e);
        }
        getUserIdBySsrc(e) {}
        getRawStats() {
          return this.pc.getStats();
        }
        setVideoEncoderParameters(e) {}
        constructor(e, t, n, i) {
          super(e, t, n, i),
            (this.codecs = []),
            (this.logger = new a.default("Connection(".concat(e, ")")));
          let r = new u.default();
          r.on("answer", e =>
            this.pc
              .setRemoteDescription(e)
              .catch(e =>
                this.logger.error(
                  "Failed to set remote description (answer): ".concat(e)
                )
              )
          ),
            r.on("offer", e => {
              this.pc
                .setRemoteDescription(e)
                .then(() => this.pc.createAnswer())
                .then(e => this.fpc.setRemoteDescription(e))
                .catch(e =>
                  this.logger.error(
                    "Failed to set remote description (offer): ".concat(e)
                  )
                );
            }),
            (r.direction =
              null != this.input.stream
                ? f.Directions.SENDRECV
                : f.Directions.SENDONLY),
            (this.fpc = r);
          let s = new d.default(this.voiceBitrate);
          s.on("addtrack", (e, t) => this.createOutput(_(e), t)),
            s.on("removetrack", (e, t) => this.destroyOutput(_(e), t)),
            s.once("connected", () => {
              this.input.reset(),
                this.setConnectionState(p.ConnectionStates.CONNECTED),
                this.on(o.BaseConnectionEvent.Stats, this.handleStats),
                this.input.on(
                  c.InputEvent.VoiceActivity,
                  this.handleVoiceActivity
                );
            }),
            s.on("connecting", () =>
              this.setConnectionState(p.ConnectionStates.DTLS_CONNECTING)
            ),
            s.on("checking", () =>
              this.setConnectionState(p.ConnectionStates.ICE_CHECKING)
            ),
            s.on("failed", () =>
              this.setConnectionState(p.ConnectionStates.NO_ROUTE)
            ),
            s.on("disconnected", () =>
              this.setConnectionState(p.ConnectionStates.DISCONNECTED)
            ),
            s.on("closed", () =>
              this.setConnectionState(p.ConnectionStates.DISCONNECTED)
            ),
            s.on("offer", e => {
              let { sdp: t } = e,
                {
                  outboundStreams: n,
                  codecs: i,
                  audioSSRC: s,
                  videoSSRC: a,
                  rtxSSRC: l,
                } = (0, f.extractSDP)(t);
              this.codecs = i;
              let u = (0, f.getExtensions)(t);
              (r.outboundStreams = n),
                (this.audioSSRC = s),
                (r.extensions = u),
                (this.videoStreamParameters[0].ssrc !== a ||
                  this.videoStreamParameters[0].rtxSsrc !== l ||
                  !this.videoReady) &&
                  ((this.videoStreamParameters[0].ssrc = a),
                  (this.videoStreamParameters[0].rtxSsrc = l),
                  this.emit(
                    o.BaseConnectionEvent.Video,
                    this.ids.userId,
                    this.input.getVideoStreamId(),
                    this.audioSSRC,
                    this.videoStreamParameters[0].ssrc,
                    this.videoStreamParameters[0].rtxSsrc,
                    this.videoStreamParameters
                  ),
                  (this.videoReady = !0));
            }),
            s.once("offer", e => {
              let { sdp: t } = e;
              this.emit(
                o.BaseConnectionEvent.Connected,
                "webrtc",
                (0, f.truncateSDP)(t)
              );
            }),
            null != this.input.stream
              ? s.setStream(this.input.stream)
              : s.negotiationNeeded(),
            (this.pc = s);
        }
      };
    },
    820127: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("70102");
      var i,
        r = n("44170"),
        s = n("441822");
      i = class e extends r.EventEmitter {
        static async get(t, n) {
          var i;
          let r = { ...t, frameRate: 30 };
          if (
            (null === (i = navigator.mediaDevices) || void 0 === i
              ? void 0
              : i.getDisplayMedia) != null
          )
            return new e(
              await navigator.mediaDevices.getDisplayMedia({
                audio: n,
                video: r,
              })
            );
          throw Error("UNKNOWN");
        }
        destroy() {
          this.removeAllListeners(),
            (0, s.unregisterVideoStream)(this.streamId),
            this.stream.getTracks().forEach(e => e.stop());
        }
        reset() {
          this.refreshSpeaking();
        }
        getStreamId() {
          return this.streamId;
        }
        refreshSpeaking() {
          this.emit(
            "speaking",
            this.stream.getAudioTracks().some(e => e.enabled)
          );
        }
        constructor(e) {
          super(),
            e.getVideoTracks().forEach(e => {
              e.onended = () => {
                this.emit("desktopsourceend");
              };
            }),
            (this.id = e.getVideoTracks()[0].label),
            (this.stream = e),
            (this.streamId = (0, s.registerVideoStream)(e));
        }
      };
    },
    861001: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          CAN_SET_DEVICES: function () {
            return r;
          },
          CAN_SET_OUTPUT_DEVICES: function () {
            return s;
          },
          getAudioInputDevices: function () {
            return c;
          },
          getAudioOutputDevices: function () {
            return d;
          },
          getVideoInputDevices: function () {
            return f;
          },
          getDevices: function () {
            return E;
          },
        }),
        n("860677"),
        n("424973");
      var i = n("353927");
      let r =
          null != navigator.mediaDevices &&
          null != navigator.mediaDevices.enumerateDevices,
        s = r && "setSinkId" in HTMLAudioElement.prototype;
      function a(e) {
        return { id: i.DEFAULT_DEVICE_ID, type: e, index: 0, name: "Default" };
      }
      function o() {
        return [
          a(i.DeviceTypes.AUDIO_INPUT),
          a(i.DeviceTypes.AUDIO_OUTPUT),
          a(i.DeviceTypes.VIDEO_INPUT),
        ];
      }
      function l(e, t) {
        return e.filter(e => e.type === t);
      }
      function u() {
        return r
          ? navigator.mediaDevices
              .enumerateDevices()
              .then(e => {
                let t = 0,
                  n = 0,
                  r = 0;
                return e
                  .filter(e => {
                    switch (e.kind) {
                      case i.DeviceTypes.AUDIO_INPUT:
                      case i.DeviceTypes.AUDIO_OUTPUT:
                      case i.DeviceTypes.VIDEO_INPUT:
                        return !0;
                      default:
                        return !1;
                    }
                  })
                  .map(e => {
                    let s;
                    switch (e.kind) {
                      case i.DeviceTypes.AUDIO_INPUT:
                        s = t++;
                        break;
                      case i.DeviceTypes.AUDIO_OUTPUT:
                        s = n++;
                        break;
                      case i.DeviceTypes.VIDEO_INPUT:
                      default:
                        s = r++;
                    }
                    return {
                      id: e.deviceId,
                      type: e.kind,
                      index: s,
                      name:
                        null != e.label && "" !== e.label
                          ? e.label
                          : 0 === s
                            ? "Default"
                            : "Device ".concat(s),
                    };
                  });
              })
              .then(
                e => (
                  !s &&
                    (e = e.filter(
                      e => e.type !== i.DeviceTypes.AUDIO_OUTPUT
                    )).push(a(i.DeviceTypes.AUDIO_OUTPUT)),
                  e
                )
              )
              .catch(o)
          : new Promise(e => {
              setImmediate(() => e(o()));
            });
      }
      async function c() {
        let e = await u();
        return l(e, i.DeviceTypes.AUDIO_INPUT);
      }
      async function d() {
        let e = await u();
        return l(e, i.DeviceTypes.AUDIO_OUTPUT);
      }
      async function f() {
        let e = await u();
        return l(e, i.DeviceTypes.VIDEO_INPUT);
      }
      async function E() {
        let e = await u();
        return [
          l(e, i.DeviceTypes.AUDIO_INPUT),
          l(e, i.DeviceTypes.AUDIO_OUTPUT),
          l(e, i.DeviceTypes.VIDEO_INPUT),
        ];
      }
    },
    8479: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("424973"),
        n("70102"),
        n("222007");
      var i,
        r = n("44170"),
        s = n("383536"),
        a = n.n(s),
        o = n("588446");
      i = class extends r.EventEmitter {
        addStream(e, t, n) {
          let i = !1;
          !this.streams.some(e => e.ssrc === t) &&
            this.streams.push({ ssrc: t, cname: e, type: "audio" }),
            this.activeAudioSSRCs[e] !== t &&
              ((this.activeAudioSSRCs = { ...this.activeAudioSSRCs, [e]: t }),
              (i = !0)),
            null != n &&
              (n > 0
                ? (!this.streams.some(e => e.ssrc === n) &&
                    this.streams.push({ ssrc: n, cname: e, type: "video" }),
                  this.activeVideoSSRCs[e] !== n &&
                    ((this.activeVideoSSRCs = {
                      ...this.activeVideoSSRCs,
                      [e]: n,
                    }),
                    (i = !0)))
                : null != this.activeVideoSSRCs[e] &&
                  ((i = !0),
                  (this.activeVideoSSRCs = { ...this.activeVideoSSRCs }),
                  delete this.activeVideoSSRCs[e])),
            i && this.negotiationNeeded();
        }
        removeStream(e) {
          let t = !1;
          null != this.activeAudioSSRCs[e] &&
            ((t = !0),
            (this.activeAudioSSRCs = { ...this.activeAudioSSRCs }),
            delete this.activeAudioSSRCs[e]),
            null != this.activeVideoSSRCs[e] &&
              ((t = !0),
              (this.activeVideoSSRCs = { ...this.activeVideoSSRCs }),
              delete this.activeVideoSSRCs[e]),
            t && this.negotiationNeeded();
        }
        get sdp() {
          if (null == this._sdp) throw Error("sdp is not set");
          return this._sdp;
        }
        set sdp(e) {
          if (!(0, o.validateSdp)(e))
            throw Error("Incorrect SDP received from rtc-worker: ".concat(e));
          (this._sdp = e),
            this.createAnswer(),
            (this.connected = !0),
            this._negotiationNeeded && this.negotiationNeeded();
        }
        negotiationNeeded() {
          if (this.negotiating) {
            this._negotiationNeeded = !0;
            return;
          }
          null != this._sdp
            ? ((this.negotiating = !0),
              (this._negotiationNeeded = !1),
              this.generateSessionDescription("offer"))
            : (this._negotiationNeeded = !0);
        }
        setRemoteDescription(e) {
          return (
            (this.negotiating = !1),
            this._negotiationNeeded && this.negotiationNeeded(),
            Promise.resolve()
          );
        }
        createAnswer() {
          return this.generateSessionDescription("answer");
        }
        getSSRCs(e) {
          let t = this.streams.map((e, t) => {
            let { cname: n, ssrc: i, type: r } = e,
              s = this.activeAudioSSRCs[n],
              a = this.activeVideoSSRCs[n],
              l = "".concat(r, "_inbound_").concat(t);
            return [
              i,
              n,
              r,
              s === i || a === i ? this.direction : o.Directions.INACTIVE,
              l,
            ];
          });
          if ("Firefox" !== a.name) return this.connected ? t : [];
          let n = this.outboundStreams.map((e, t) => [
            0,
            "outbound",
            e.type,
            (0, o.getDirection)(e.direction),
            "".concat(e.type, "_outbound_").concat(t),
          ]);
          if ("answer" !== e) return n.concat(t);
          {
            let e = n.length - t.length,
              i = n.slice(0, e).concat(t).slice(0, n.length);
            return i.map((e, t) => {
              let [n, i, r, s, a] = e;
              return [
                n,
                i,
                r,
                (0, o.getDirection)(this.outboundStreams[t].direction),
                this.outboundStreams[t].mid,
              ];
            });
          }
        }
        generateSessionDescription(e) {
          let t = this.audioCodec,
            n = this.audioPayloadType,
            i = this.videoCodec,
            r = this.videoPayloadType,
            s = this.rtxPayloadType,
            a = this.sdp;
          if (
            null == t ||
            null == n ||
            null == i ||
            null == r ||
            null == s ||
            null == a ||
            null == this.direction
          )
            throw Error(
              "Invalid payload: audioCodec: "
                .concat(t, ", audioPayloadType: ")
                .concat(null == n ? "null" : n, ", videoCodec: ")
                .concat(i, ", videoCodecPayloadType: ")
                .concat(null == r ? "null" : r, ", rtxPayloadType: ")
                .concat(null == s ? "null" : s, ", sdp: ")
                .concat(a)
            );
          let l = (0, o.generateSessionDescription)({
            type: e,
            baseSDP: a,
            direction: this.direction,
            audioCodec: t,
            audioPayloadType: n,
            audioBitRate: 40,
            videoCodec: i,
            videoPayloadType: r,
            videoBitRate: 2500,
            rtxPayloadType: s,
            ssrcs: this.getSSRCs(e),
            extensions: this.extensions,
          });
          return this.emit(e, l), Promise.resolve(l);
        }
        constructor(...e) {
          super(...e),
            (this.audioCodec = null),
            (this.audioPayloadType = null),
            (this.videoCodec = null),
            (this.videoPayloadType = null),
            (this.rtxPayloadType = null),
            (this.direction = null),
            (this.outboundStreams = []),
            (this.extensions = []),
            (this.streams = []),
            (this.activeAudioSSRCs = {}),
            (this.activeVideoSSRCs = {}),
            (this._sdp = null),
            (this.connected = !1),
            (this.negotiating = !1),
            (this._negotiationNeeded = !1);
        }
      };
    },
    201617: function (e, t, n) {
      "use strict";
      var i;
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        (i = class {
          acquire(e) {
            return navigator.mediaDevices.getUserMedia(e);
          }
          release(e) {
            e.getTracks().forEach(e => {
              (e.onended = function () {}), e.stop();
            });
          }
        });
    },
    62684: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          InputEvent: function () {
            return InputEvent;
          },
          default: function () {
            return i;
          },
        });
      var InputEvent,
        InputEvent,
        i,
        r = n("595275"),
        s = n("657869"),
        a = n("555013");
      ((InputEvent = InputEvent || (InputEvent = {})).Stream = "stream"),
        (InputEvent.Video = "video"),
        (InputEvent.Mute = "mute"),
        (InputEvent.VoiceActivity = "voiceactivity"),
        (InputEvent.DesktopSourceEnd = "desktopsourceend"),
        (InputEvent.Speaking = "speaking"),
        (InputEvent.AudioPermission = "audio-permission"),
        (InputEvent.VideoPermission = "video-permission"),
        (InputEvent.AddVideoTrack = "add-video-track"),
        (i = class extends r.default {
          destroy() {
            this.removeAllListeners(), this.destroyStreams();
          }
          destroyStreams() {
            var e;
            this.audio.destroy(),
              this.video.destroy(),
              null === (e = this.desktop) || void 0 === e || e.destroy();
          }
          setDesktop(e) {
            this.destroyStreams(),
              null == e ||
                e.addListener("desktopsourceend", this.handleDesktopSourceEnd),
              null == e || e.addListener("speaking", this.handleSpeaking),
              (this.desktop = e),
              this.mergeStreams();
          }
          reset() {
            var e;
            this.audio.reset(),
              null === (e = this.desktop) || void 0 === e || e.reset();
          }
          getVideoStream() {
            return null != this.desktop
              ? this.desktop.stream
              : this.video.stream;
          }
          getVideoStreamId() {
            return null != this.desktop
              ? this.desktop.getStreamId()
              : this.video.getStreamId();
          }
          enableAudioInput() {
            this.audio.enable();
          }
          setAudioMode(e, t) {
            this.audio.setMode(e, t);
          }
          setMute(e) {
            (this.audio.mute = e), this.emit("mute", e);
          }
          setEchoCancellation(e) {
            this.audio.echoCancellation = e;
          }
          setNoiseSuppression(e) {
            this.audio.noiseSuppression = e;
          }
          setNoiseCancellation(e) {
            this.audio.noiseCancellation = e;
          }
          setAutomaticGainControl(e) {
            this.audio.automaticGainControl = e;
          }
          setPTTActive(e) {
            this.audio.setPTTActive(e);
          }
          setAudioSource(e) {
            this.audio.setSource(e);
          }
          setVideoSource(e) {
            this.video.setSource(e);
          }
          mute() {
            return this.audio.mute;
          }
          resumeAudio() {
            this.audio.resume();
          }
          getAudioState() {
            return this.audio.state;
          }
          hasDesktopSource() {
            return null != this.desktop;
          }
          constructor(e) {
            super(),
              (this.video = new a.default()),
              (this.desktop = null),
              (this.mergeStreams = () => {
                var e, t, n;
                let i = new MediaStream();
                return (
                  null != this.desktop
                    ? (null === (e = this.desktop.stream) ||
                        void 0 === e ||
                        e.getTracks().forEach(e => i.addTrack(e)),
                      this.desktop.refreshSpeaking())
                    : (null === (t = this.audio.stream) ||
                        void 0 === t ||
                        t.getAudioTracks().forEach(e => i.addTrack(e)),
                      null === (n = this.video.stream) ||
                        void 0 === n ||
                        n.getVideoTracks().forEach(e => i.addTrack(e))),
                  (this.stream = i),
                  this.emit("stream", i),
                  this.emit("video", this.getVideoStreamId()),
                  i
                );
              }),
              (this.handleVoiceActivity = e => {
                this.emit("voiceactivity", e);
              }),
              (this.handleDesktopSourceEnd = () => {
                this.emit("desktopsourceend");
              }),
              (this.handleSpeaking = e => {
                this.emit("speaking", e);
              }),
              (this.handleAudioPermission = e => {
                this.emit("audio-permission", e);
              }),
              (this.handleVideoPermission = e => {
                this.emit("video-permission", e);
              }),
              (this.audio = new s.default(e)),
              this.audio.addListener("voiceactivity", this.handleVoiceActivity),
              this.audio.addListener("speaking", this.handleSpeaking),
              this.audio.addListener("stream", this.mergeStreams),
              this.audio.addListener("permission", this.handleAudioPermission),
              this.video.addListener("stream", this.mergeStreams),
              this.video.addListener("permission", this.handleVideoPermission),
              this.video.addListener("add-video-track", e =>
                this.emit("add-video-track", e)
              );
          }
        });
    },
    581785: function (e, t, n) {
      "use strict";
      let i;
      function r() {
        return null != i
          ? i
          : (i = (async () => {
              let { default: e } = await n
                  .el("702084")
                  .then(n.t.bind(n, "702084", 23)),
                t = new e({
                  params: {
                    logProcessStats: !1,
                    useSharedArrayBuffer: !1,
                    debugLogs: !1,
                    bufferOverflowMS: 200,
                    models: {
                      model8:
                        "https://cdn.discordapp.com/assets/krisp_browser_models/v1.0.11_1/model_8.kw",
                      model16:
                        "https://cdn.discordapp.com/assets/krisp_browser_models/v1.0.11_1/model_16.kw",
                      model32:
                        "https://cdn.discordapp.com/assets/krisp_browser_models/v1.0.11_1/model_32.kw",
                    },
                  },
                });
              return await t.init(), t;
            })());
      }
      n.r(t),
        n.d(t, {
          getKrispSDK: function () {
            return r;
          },
        });
    },
    13379: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("222007");
      var i,
        r = n("44170"),
        s = n("657869"),
        a = n("324304"),
        o = n("353927");
      let l = {
        voiceActivityDetection: !0,
        offerToReceiveAudio: !0,
        offerToReceiveVideo: !1,
        iceRestart: !1,
      };
      i = class extends r.EventEmitter {
        stop() {
          for (let e of (this.pc1.close(),
          this.pc2.close(),
          this.input.destroy(),
          Object.keys(this.outputs)))
            this.destroyOutput(e);
        }
        setAudioSource(e) {
          this.input.setSource(e);
        }
        setAudioSink(e) {
          for (let t of ((this.sinkId = e), Object.keys(this.outputs)))
            this.outputs[t].setSinkId(e);
        }
        setNoiseCancellation(e) {
          this.input.noiseCancellation = e;
        }
        createOutput(e, t) {
          let n = this.outputs[e];
          null == n &&
            (((n = new a.default(this.userId, this.audioContext)).mute = !1),
            (n.volume = 100),
            n.setSpeakingFlags(o.SpeakingFlags.VOICE),
            n.setSinkId(this.sinkId),
            (this.outputs[e] = n)),
            n.addTrack(t),
            n.play();
        }
        destroyOutput(e, t) {
          let n = this.outputs[e];
          null != n &&
            (null == t || 0 === n.removeTrack(t)) &&
            (n.destroy(), delete this.outputs[e]);
        }
        handshake() {
          let e = e => {
            let t = e.sdp.split("\n");
            for (let e = 0; e < t.length; e++) {
              let n = t[e];
              if (/^a=mid:/.test(n)) break;
            }
            return (e.sdp = t.join("\n")), e;
          };
          this.pc1.createOffer(l).then(t => {
            this.pc1.setLocalDescription(e(t)).then(() => {
              this.pc2.setRemoteDescription(t).then(() => {
                this.pc2.createAnswer().then(e => {
                  this.pc2.setLocalDescription(e).then(() => {
                    this.pc1.setRemoteDescription(e);
                  });
                });
              });
            });
          });
        }
        constructor(e, t, n, i = "") {
          super(),
            (this.senders = []),
            (this.outputs = {}),
            (this.handleStream = () => {
              let e = this.input.getDelayedStream();
              this.senders.forEach(e => this.pc1.removeTrack(e)),
                (this.senders = [
                  ...e.getAudioTracks().map(t => this.pc1.addTrack(t, e)),
                ]),
                this.handshake();
            }),
            (this.handleTrack = e => {
              e.streams[0].getTracks().forEach(e => {
                this.createOutput(e.id, e),
                  (e.onmute = () => {
                    this.destroyOutput(e.id, e);
                  });
              });
            }),
            (this.userId = i),
            (this.sinkId = n),
            (this.pc1 = new RTCPeerConnection()),
            (this.pc1.onicecandidate = e => {
              null != e.candidate && this.pc2.addIceCandidate(e.candidate);
            }),
            (this.pc2 = new RTCPeerConnection()),
            (this.pc2.onicecandidate = e => {
              null != e.candidate && this.pc1.addIceCandidate(e.candidate);
            }),
            (this.pc2.ontrack = this.handleTrack),
            (this.input = new s.default(e)),
            this.input.setSource(t),
            this.input.on("stream", this.handleStream),
            this.input.enable(),
            (this.audioContext = e);
        }
      };
    },
    324304: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          OutputEvent: function () {
            return r;
          },
          default: function () {
            return s;
          },
        });
      var i,
        r,
        s,
        a = n("811022"),
        o = n("595275"),
        l = n("861001"),
        u = n("441822"),
        c = n("353927");
      let d = new a.default("Output");
      ((i = r || (r = {})).InteractionRequired = "interactionrequired"),
        (i.Speaking = "speaking"),
        (i.Video = "video"),
        (s = class extends o.default {
          play() {
            var e;
            null === (e = this.audioElement) || void 0 === e || e.play();
          }
          destroy() {
            var e;
            null === (e = this.audioElement) || void 0 === e || e.pause(),
              null != this.videoStreamId &&
                (0, u.unregisterVideoStream)(this.videoStreamId),
              null != this.streamSourceNode &&
                (this.streamSourceNode.disconnect(),
                (this.streamSourceNode = null)),
              null != this.levelNode &&
                (this.levelNode.disconnect(),
                this.levelNode.port.postMessage("close"),
                (this.levelNode = null)),
              this.setSpeakingFlags(c.SpeakingFlags.NONE),
              this.removeAllListeners();
          }
          addTrack(e) {
            if (this.stream.getTracks().includes(e))
              return this.stream.getTracks().length;
            if ((this.stream.addTrack(e), null == this.audioElement)) {
              let e = document.createElement("audio");
              e.srcObject = this.stream;
              let t = e.play();
              null != t && t.catch(() => this.emit("interactionrequired", !0)),
                (this.audioElement = e),
                this.updateAudioElement();
            }
            if (
              null == this.levelNode &&
              this.stream.getAudioTracks().length > 0
            ) {
              this.streamSourceNode = this.audioContext.createMediaStreamSource(
                this.stream
              );
              try {
                (this.levelNode = new AudioWorkletNode(
                  this.audioContext,
                  "level-processor"
                )),
                  (this.levelNode.port.onmessage = e => {
                    this.emit("speaking", e.data);
                  }),
                  null != this.streamSourceNode &&
                    this.streamSourceNode.connect(this.levelNode);
              } catch (e) {
                d.warn("Output#Failed to setup speaking indicator: ".concat(e));
              }
            }
            if ("video" === e.kind) {
              null != this.videoStreamId &&
                (0, u.unregisterVideoStream)(this.videoStreamId);
              let t = this.stream.getVideoTracks();
              t.forEach(t => {
                e !== t &&
                  ((t.discordIsTearingDown = !0), this.stream.removeTrack(t));
              }),
                (this.videoStreamId = (0, u.registerVideoStream)(this.stream)),
                this.emit("video", this.videoStreamId);
            }
            if ("audio" === e.kind) {
              let t = this.stream.getAudioTracks();
              t.forEach(t => {
                e !== t &&
                  ((t.discordIsTearingDown = !0), this.stream.removeTrack(t));
              });
            }
            return this.stream.getTracks().length;
          }
          removeTrack(e) {
            return (
              this.stream.removeTrack(e),
              "video" === e.kind &&
                (null != this.videoStreamId &&
                  (0, u.unregisterVideoStream)(this.videoStreamId),
                this.emit("video", null)),
              this.stream.getTracks().length
            );
          }
          setSinkId(e) {
            (this.sinkId = e), this.updateAudioElement();
          }
          get mute() {
            return this._mute;
          }
          set mute(e) {
            (this._mute = e || !1), this.updateAudioElement();
          }
          get priority() {
            return (
              (this._speakingFlags & c.SpeakingFlags.PRIORITY) ===
              c.SpeakingFlags.PRIORITY
            );
          }
          get volume() {
            return this._volume;
          }
          set volume(e) {
            (this._volume = Math.max(
              0,
              Math.min(Math.round(e), c.DEFAULT_VOLUME)
            )),
              this.updateAudioElement();
          }
          get speakingFlags() {
            return this._speakingFlags;
          }
          setSpeakingFlags(e) {
            this._speakingFlags !== e &&
              ((this._speakingFlags = e), this.updateAudioElement());
          }
          updateAudioElement() {
            let e = this.audioElement;
            if (null != e) {
              (e.muted = this._mute), (e.volume = this._volume / 100);
              let t = this.sinkId;
              null != t && l.CAN_SET_OUTPUT_DEVICES && e.setSinkId(t);
            }
          }
          constructor(e, t) {
            super(),
              (this._speakingFlags = c.SpeakingFlags.NONE),
              (this._mute = !1),
              (this._volume = c.DEFAULT_VOLUME),
              (this.sinkId = null),
              (this.audioElement = null),
              (this.stream = new MediaStream()),
              (this.videoStreamId = null),
              (this.levelNode = null),
              (this.streamSourceNode = null),
              (this.id = e),
              (this.audioContext = t);
          }
        });
    },
    760014: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("222007"),
        n("70102");
      var i,
        r = n("44170"),
        s = n("811022"),
        a = n("53452");
      let o = new s.default("PeerConnection");
      i = class extends r.EventEmitter {
        setBitRate(e) {
          this.bitrate !== e && ((this.bitrate = e), this.negotiationNeeded());
        }
        close() {
          o.info("Close RTCPeerConnection"),
            "closed" !== this.signalingState && this.pc.close(),
            this.removeAllListeners();
        }
        get peerConnectionState() {
          return this.pc.connectionState;
        }
        get iceGatheringState() {
          return this.pc.iceGatheringState;
        }
        get iceConnectionState() {
          return this.pc.iceConnectionState;
        }
        get signalingState() {
          return this.pc.signalingState;
        }
        get connected() {
          return (
            null != this.pc &&
            /connected|completed/.test(this.pc.iceConnectionState)
          );
        }
        setStream(e) {
          let t =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            n = this.pc,
            i = "closed" === this.iceConnectionState,
            r = !1;
          null != this.stream &&
            !i &&
            (this.senders.forEach(e => n.removeTrack(e)), (r = !0)),
            (this.stream = e),
            (this.senders = []),
            null != e &&
              !i &&
              ((this.senders = [
                ...e.getAudioTracks().map(t => n.addTrack(t, e)),
                ...e.getVideoTracks().map(t => n.addTrack(t, e)),
              ]),
              (r = !0)),
            r && !t && this.negotiationNeeded();
        }
        createOffer() {
          let e = this.pc;
          return e
            .createOffer(this.makeOfferAnswerOptions())
            .then(t => e.setLocalDescription(this.mungeLocalDescription(t)))
            .then(() => {
              let t = e.localDescription;
              if (null == t) throw Error("localDescription is null");
              return this.emit("offer", t), t;
            })
            .catch(t => {
              if ("have-remote-offer" === e.signalingState)
                return o.error(t), this.createOffer();
              throw t;
            });
        }
        createAnswer() {
          let e = this.pc;
          return e
            .createAnswer(this.makeOfferAnswerOptions())
            .then(t => e.setLocalDescription(this.mungeLocalDescription(t)))
            .then(() => {
              let t = e.localDescription;
              if (null == t) throw Error("localDescription is null");
              return this.emit("answer", t), t;
            })
            .catch(t => {
              throw (
                (o.warn(
                  "PeerConnection#createAnswer: Attempted to set local description in state: ".concat(
                    e.signalingState
                  )
                ),
                t)
              );
            });
        }
        negotiationNeeded() {
          if (this.negotiating) {
            this._negotiationNeeded = !0;
            return;
          }
          (this.negotiating = !0),
            (this._negotiationNeeded = !1),
            this.createOffer();
        }
        setRemoteDescription(e) {
          return this.pc.setRemoteDescription(e);
        }
        getStats() {
          return this.pc.getStats();
        }
        makeOfferAnswerOptions() {
          return {
            offerToReceiveAudio: !0,
            offerToReceiveVideo: a.BROWSER_SUPPORTS_VIDEO,
            iceRestart: !1,
          };
        }
        mungeLocalDescription(e) {
          let t = e.sdp.split("\n");
          for (let e = 0; e < t.length; e++) {
            let n = t[e];
            if (/^a=mid:/.test(n)) {
              null != this.bitrate &&
                t.splice(
                  e + 1,
                  0,
                  "b=AS:".concat(Math.floor(this.bitrate / 1e3))
                );
              break;
            }
          }
          return (e.sdp = t.join("\n")), e;
        }
        emitTrack(e, t) {
          !/^default/.test(t.id) &&
            ((t.onended = () => {
              this.emit("removetrack", e, t);
            }),
            this.emit("addtrack", e, t));
        }
        constructor(e) {
          super(),
            (this.stream = null),
            (this.senders = []),
            (this.negotiating = !1),
            (this._negotiationNeeded = !1),
            (this.handlePeerConnectionStateChange = () => {
              let e = this.peerConnectionState;
              o.info("peerConnectionState =>", e),
                "connecting" === e
                  ? "connected" === this.iceConnectionState
                    ? this.emit(e)
                    : this.emit(this.iceConnectionState)
                  : this.emit(e);
            }),
            (this.handleIceConnectionStateChange = () => {
              let e = this.iceConnectionState;
              o.info("iceConnectionState =>", e),
                "completed" === e && (e = "connected"),
                this.emit(e);
            }),
            (this.handleSignalingStateChange = () => {
              o.info(
                "signalingState => "
                  .concat(this.signalingState, ", negotiation needed: ")
                  .concat(this._negotiationNeeded.toString())
              ),
                "stable" === this.signalingState &&
                  ((this.negotiating = !1),
                  this._negotiationNeeded && this.negotiationNeeded());
            }),
            (this.handleIceGatheringStateChange = () => {
              o.info("iceGatheringState =>", this.iceGatheringState);
            }),
            (this.handleTrack = e => {
              this.emitTrack(e.streams[0].id, e.track);
            }),
            (this.bitrate = e);
          let t = (this.pc = new RTCPeerConnection({ sdpSemantics: "plan-b" }));
          a.BROWSER_SUPPORTS_CONNECTION_STATE
            ? ((t.onconnectionstatechange =
                this.handlePeerConnectionStateChange),
              (t.oniceconnectionstatechange =
                this.handlePeerConnectionStateChange))
            : (t.oniceconnectionstatechange =
                this.handleIceConnectionStateChange),
            (t.onsignalingstatechange = this.handleSignalingStateChange),
            (t.onicegatheringstatechange = this.handleIceGatheringStateChange),
            (t.ontrack = this.handleTrack.bind(this)),
            o.info("Constructed RTCPeerConnection");
        }
      };
    },
    588446: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Directions: function () {
            return r;
          },
          getDirection: function () {
            return S;
          },
          generateSessionDescription: function () {
            return I;
          },
          generateUnifiedSessionDescription: function () {
            return C;
          },
          extractSDP: function () {
            return A;
          },
          truncateSDP: function () {
            return R;
          },
          validateSdp: function () {
            return N;
          },
          getExtensions: function () {
            return O;
          },
        }),
        n("222007"),
        n("70102"),
        n("424973"),
        n("808653"),
        n("700225");
      var i,
        r,
        s,
        a,
        o = n("773179"),
        l = n.n(o),
        u = n("383536"),
        c = n.n(u),
        d = n("21794"),
        f = n("811022"),
        E = n("353927"),
        p = n("53452");
      let h = new f.default("SDP");
      ((s = i || (i = {})).AUDIO = "a"),
        (s.VIDEO = "v"),
        ((a = r || (r = {})).SENDRECV = "sendrecv"),
        (a.SENDONLY = "sendonly"),
        (a.RECVONLY = "recvonly"),
        (a.INACTIVE = "inactive");
      let _ = "UDP/TLS/RTP/SAVPF";
      function S(e) {
        switch (e) {
          case "recvonly":
            return "sendonly";
          case "sendonly":
            return "recvonly";
          case "sendrecv":
            return "sendrecv";
          default:
            return "inactive";
        }
      }
      function m(e, t, n) {
        let i = "".concat(e, "-").concat(t),
          r = "".concat(n).concat(i);
        return [
          { attribute: "cname", id: t, value: i },
          { attribute: "msid", id: t, value: "".concat(i, " ").concat(r) },
          { attribute: "mslabel", id: t, value: i },
          { attribute: "label", id: t, value: r },
        ];
      }
      function T(e) {
        return d.write({
          version: 0,
          timing: { start: 0, stop: 0 },
          origin: {
            address: "127.0.0.1",
            ipVer: 4,
            netType: "IN",
            sessionId: "1420070400000",
            sessionVersion: 0,
            username: "-",
          },
          name: "-",
          msidSemantic: { semantic: "WMS", token: "*" },
          groups: [
            {
              type: "BUNDLE",
              mids: e
                .filter(e => null != e.mid)
                .map(e => e.mid)
                .join(" "),
            },
          ],
          media: e,
        });
      }
      function g(e) {
        let {
          mid: t,
          type: n,
          setup: i,
          direction: r,
          baseSDP: s,
          codec: a,
          payload: o,
          bitrate: u,
          ssrcs: f,
          extensions: h,
          rtxPayload: S,
          sendingVideo: m,
        } = e;
        if ("inactive" === r && !p.BROWSER_SUPPORTS_UNIFIED_PLAN)
          return {
            connection: { ip: "0.0.0.0", version: 4 },
            direction: "inactive",
            fmtp: [],
            payloads: o,
            port: 0,
            protocol: _,
            rtp: [{ codec: "NULL", payload: o, rate: 0 }],
            mid: void 0,
            type: n,
          };
        let {
          media: [T],
        } = d.parse(s);
        if (
          ((T.type = n),
          (T.protocol = _),
          (T.payloads = o),
          (T.setup = i),
          (T.mid = t),
          (T.rtcpMux = "rtcp-mux"),
          (T.direction = r),
          (T.ssrcs = f),
          f.length > 0 &&
            (null != S &&
              ((T.ssrcGroups = l(f)
                .chunk(4)
                .map(e => {
                  let t = e[0].id;
                  return {
                    semantics: "FID",
                    ssrcs: "".concat(t, " ").concat(t + 1),
                  };
                })
                .value()),
              (T.ssrcs = l(f)
                .chunk(4)
                .map(e => {
                  let t = e.map(e => ((e = { ...e }), (e.id += 1), e));
                  return [...e, ...t];
                })
                .flatten()
                .value())),
            p.BROWSER_SUPPORTS_UNIFIED_PLAN || "Firefox" === c.name))
        ) {
          let e = f.find(e => "msid" === e.attribute);
          if (null == e) throw Error("msid missing");
          (T.msid = e.value),
            (T.ssrcs = T.ssrcs.filter(e => "cname" === e.attribute));
        }
        switch (n) {
          case "audio":
            "Firefox" === c.name
              ? (T.ext = h.filter(
                  e => "urn:ietf:params:rtp-hdrext:ssrc-audio-level" === e.uri
                ))
              : ((T.ext = h.filter(
                  e =>
                    "urn:ietf:params:rtp-hdrext:ssrc-audio-level" === e.uri ||
                    "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" ===
                      e.uri
                )),
                (T.rtcpFb = [{ type: "transport-cc", payload: o }])),
              T.rtp.push({ codec: a, encoding: 2, payload: o, rate: 48e3 }),
              a === E.Codecs.OPUS &&
                T.fmtp.push({
                  config: "minptime=10;useinbandfec=1;usedtx=".concat(
                    m ? "0" : "1"
                  ),
                  payload: o,
                }),
              (T.maxptime = 60);
            break;
          case "video":
            (T.ext = h.filter(
              e =>
                "urn:ietf:params:rtp-hdrext:toffset" === e.uri ||
                "http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time" ===
                  e.uri ||
                "urn:3gpp:video-orientation" === e.uri ||
                "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01" ===
                  e.uri ||
                "http://www.webrtc.org/experiments/rtp-hdrext/playout-delay" ===
                  e.uri
            )),
              T.rtp.push({ codec: a, payload: o, rate: 9e4 });
            let g = "x-google-max-bitrate=".concat(u);
            a === E.Codecs.H264 &&
              (g +=
                ";level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f"),
              T.fmtp.push({ config: g, payload: o }),
              (T.rtcpFb = [
                { type: "ccm", subtype: "fir", payload: o },
                { type: "nack", payload: o },
                { type: "nack", subtype: "pli", payload: o },
                { type: "goog-remb", payload: o },
                { type: "transport-cc", payload: o },
              ]),
              null != S &&
                (T.rtp.push({ codec: "rtx", payload: S, rate: 9e4 }),
                T.fmtp.push({ config: "apt=".concat(o), payload: S }),
                (T.payloads = "".concat(T.payloads, " ").concat(S)));
        }
        return T;
      }
      function I(e) {
        let {
            type: t,
            baseSDP: n,
            direction: i,
            audioCodec: r,
            audioPayloadType: s,
            audioBitRate: a,
            videoCodec: o,
            videoPayloadType: u,
            videoBitRate: d,
            rtxPayloadType: f,
            ssrcs: E,
            extensions: p,
          } = e,
          _ = [];
        if (
          (h.info("generateSessionDescription: ".concat(JSON.stringify(E))),
          "Firefox" === c.name)
        ) {
          let e = "answer" === t ? "passive" : "active";
          E.forEach(t => {
            let [i, l, c, E, h] = t;
            if ("video" !== c || (0 !== u && 0 !== f))
              _.push(
                g({
                  mid: h,
                  type: c,
                  setup: e,
                  direction: E,
                  baseSDP: n,
                  codec: "audio" === c ? r : o,
                  payload: "audio" === c ? s : u,
                  bitrate: "audio" === c ? a : d,
                  ssrcs: m(l, i, "audio" === c ? "a" : "v"),
                  extensions: p,
                })
              );
          });
        } else {
          let e = "answer" === t ? "passive" : "actpass",
            c = l(E)
              .filter(e => {
                let [t, n, i, r, s] = e;
                return "inactive" !== r && "audio" === i;
              })
              .map(e => {
                let [t, n] = e;
                return m(n, t, "a");
              })
              .value();
          if (
            (_.push(
              g({
                mid: "audio",
                type: "audio",
                setup: e,
                direction: i,
                baseSDP: n,
                codec: r,
                payload: s,
                bitrate: a,
                ssrcs: l.flatten(c),
                extensions: p,
              })
            ),
            u > 0)
          ) {
            let t = l(E)
              .filter(e => {
                let [t, n, i, r, s] = e;
                return "inactive" !== r && "video" === i;
              })
              .map(e => {
                let [t, n] = e;
                return m(n, t, "v");
              })
              .value();
            _.push(
              g({
                mid: "video",
                type: "video",
                setup: e,
                direction: i,
                baseSDP: n,
                codec: o,
                payload: u,
                bitrate: d,
                ssrcs: l.flatten(t),
                extensions: p,
                rtxPayload: f,
              })
            );
          }
        }
        let S = T(_);
        return new RTCSessionDescription({ type: t, sdp: S });
      }
      function C(e) {
        let {
            type: t,
            baseSDP: n,
            audioCodec: i,
            audioPayloadType: r,
            audioBitRate: s,
            videoCodec: a,
            videoPayloadType: o,
            videoBitRate: l,
            sendingVideo: u,
            rtxPayloadType: c,
            ssrcs: d,
            extensions: f,
          } = e,
          E = [],
          p = "answer" === t ? "passive" : "actpass";
        d.forEach(e => {
          let t,
            { ssrc: d, cname: h, type: _, direction: S, mid: T } = e;
          "" !== h
            ? (t = m(h, d, "audio" === _ ? "a" : "v"))
            : ((t = []),
              "sendonly" === S
                ? (S = "inactive")
                : "sendrecv" === S && (S = "recvonly"));
          E.push(
            g({
              mid: T,
              type: _,
              setup: p,
              direction: S,
              baseSDP: n,
              codec: "audio" === _ ? i : a,
              payload: "audio" === _ ? r : o,
              bitrate: "audio" === _ ? s : l,
              ssrcs: t,
              extensions: f,
              rtxPayload: "audio" === _ ? null : c,
              sendingVideo: u,
            })
          );
        });
        let h = T(E);
        return new RTCSessionDescription({ type: t, sdp: h });
      }
      function v(e, t, n, i, r) {
        let s = l.find(e, { codec: i });
        if (null == s) return null;
        let a = l.find(t, e =>
            RegExp("^apt=".concat(s.payload)).test(e.config)
          ),
          o = null;
        if (null != a) {
          let t = l.find(e, { codec: E.Codecs.RTX, payload: a.payload });
          null != t && (o = t.payload);
        }
        return {
          type: n,
          name: i,
          priority: r + 1,
          payloadType: s.payload,
          rtxPayloadType: o,
        };
      }
      function A(e) {
        let t = d.parse(e).media.reduce(
          (e, t) => {
            let n,
              { type: i, rtp: r, ssrcs: s, fmtp: a, direction: o, mid: u } = t;
            switch (
              (e.outboundStreams.push({ type: i, direction: o, mid: u }), i)
            ) {
              case "audio":
                [E.Codecs.OPUS].forEach((t, n) => {
                  let s = v(r, a, i, t, n);
                  null != s && e.codecs.push(s);
                }),
                  "sendrecv" === o &&
                    null != (n = l.find(s, { attribute: "cname" })) &&
                    (e.audioSSRC = n.id);
                break;
              case "video":
                [E.Codecs.H264, E.Codecs.VP8, E.Codecs.VP9].forEach((t, n) => {
                  let s = v(r, a, i, t, n);
                  null != s && e.codecs.push(s);
                }),
                  "sendrecv" === o &&
                    (null != (n = l.find(s, { attribute: "cname" })) &&
                      (e.videoSSRC = n.id),
                    null != (n = l.findLast(s, { attribute: "cname" })) &&
                      (n.id === e.videoSSRC &&
                        h.warn("Unable to find a unique rtx SSRC!"),
                      (e.rtxSSRC = n.id)));
            }
            return e;
          },
          {
            outboundStreams: [],
            codecs: [],
            audioSSRC: 0,
            videoSSRC: 0,
            rtxSSRC: 0,
          }
        );
        return (t.codecs = l.uniqWith(t.codecs, l.isEqual)), t;
      }
      function R(e) {
        var t;
        let { codecs: n } = A(e),
          i = n.find(e => e.name === E.Codecs.VP8),
          r = RegExp(
            "^a=ice|a=extmap|a=fingerprint|opus|VP8|".concat(
              null !== (t = null == i ? void 0 : i.rtxPayloadType) &&
                void 0 !== t
                ? t
                : 0,
              " rtx"
            ),
            "i"
          );
        return {
          sdp: l(e)
            .split(/\r\n/)
            .filter(e => r.test(e))
            .uniq()
            .join("\n"),
          codecs: n,
        };
      }
      function N(e) {
        if (!e.includes("a=fingerprint"))
          return h.error("Remote SDP does not include fingerprint!"), !1;
        if (!e.includes("a=ice-ufrag"))
          return h.error("Remote SDP does not include ICE user name!"), !1;
        if (!e.includes("a=ice-pwd"))
          return h.error("Remote SDP does not include ICE password!"), !1;
        if (!e.includes("a=candidate"))
          return h.error("Remote SDP does not include ICE candidate!"), !1;
        if (!e.includes("c="))
          return h.error("Remote SDP does not include c-line!"), !1;
        let t = e
          .split("\n")
          .filter(e => e.startsWith("c="))
          .join()
          .trim();
        return (
          !(t.split(" ").length < 3) ||
          (h.error("Incorrect c-line: ".concat(t)), !1)
        );
      }
      function O(e) {
        return l(e)
          .split(/\r\n/)
          .filter(e => e.startsWith("a=extmap:"))
          .uniq()
          .map(e => {
            let t = e.split(" "),
              n = t[0].split("/");
            return { value: parseInt(n[0].substr(9), 10), uri: t[1] };
          })
          .value();
      }
    },
    779791: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        }),
        n("424973"),
        n("70102"),
        n("222007");
      var i,
        r,
        s = n("383536"),
        a = n.n(s),
        o = n("811022"),
        l = n("773364"),
        u = n("566106"),
        c = n("62684"),
        d = n("588446"),
        f = n("353927"),
        E = n("53452");
      let p =
        null === (i = a.name) || void 0 === i
          ? void 0
          : i.toLowerCase().includes("firefox");
      function h(e, t) {
        e.sender.replaceTrack(t),
          (e.direction = null != t ? "sendrecv" : "recvonly");
      }
      r = class extends u.default {
        destroy() {
          super.destroy(), "closed" !== this.signalingState && this.pc.close();
        }
        setCodecs(e, t, n) {
          var i, r, s;
          let a;
          (this.audioCodec !== e || this.videoCodec !== t) &&
            ((a = this.codecs.find(t => t.name === e)),
            (this.audioCodec = e),
            (this.audioPayloadType =
              null !== (i = null == a ? void 0 : a.payloadType) && void 0 !== i
                ? i
                : 0),
            (a = this.codecs.find(e => e.name === t)),
            (this.videoCodec = t),
            (this.videoPayloadType =
              null !== (r = null == a ? void 0 : a.payloadType) && void 0 !== r
                ? r
                : 0),
            (this.rtxPayloadType =
              null !== (s = null == a ? void 0 : a.rtxPayloadType) &&
              void 0 !== s
                ? s
                : 0),
            this.logger.info("Renegotiating: Codecs changed"),
            this.handleNegotiationNeeded());
        }
        setStream(e) {
          let t = "closed" === this.iceConnectionState;
          null != e &&
            !t &&
            (h(this.audioTransceiver, e.getAudioTracks()[0]),
            this.videoSupported &&
              h(this.videoTransceiver, e.getVideoTracks()[0])),
            this.logger.info("Renegotiating: Streams changed"),
            this.handleNegotiationNeeded();
        }
        createUser(e, t, n) {
          var i;
          if (0 === t) {
            this.logger.warn(
              "Attempting to create user ".concat(e, " with 0 audio SSRC")
            );
            return;
          }
          this.logger.info(
            "Creating user: "
              .concat(e, " with audio SSRC: ")
              .concat(t, " and video SSRCs: ")
              .concat(
                null !== (i = null == n ? void 0 : n.join(",")) && void 0 !== i
                  ? i
                  : 0
              )
          );
          let r = !1,
            s = this.users.get(e);
          if ((null == s && (s = {}), s.audioSSRC !== t)) {
            (s.audioSSRC = t),
              (r = !0),
              this.unassignedStreams.audio.push({ cname: e, ssrc: t });
            let n = this.inactiveTransceivers.audio.length,
              i = this.unassignedStreams.audio.length;
            this.addTransceivers("audio", "recvonly", 10 + i - n);
          }
          if (
            this.videoSupported &&
            void 0 !== n &&
            (!p || void 0 === s.videoSSRC)
          ) {
            let t = null != n && n.length > 0 ? n[0] : 0;
            if (t > 0) {
              if (s.videoSSRC !== t) {
                (s.videoSSRC = t),
                  (r = !0),
                  this.unassignedStreams.video.push({ cname: e, ssrc: t });
                let n = this.inactiveTransceivers.video.length,
                  i = this.unassignedStreams.video.length;
                this.addTransceivers("video", "recvonly", 10 + i - n);
              }
            } else null != s.videoSSRC && ((s.videoSSRC = void 0), (r = !0));
          }
          if (r) {
            this.users.set(e, s), t > 0 && this.userIdsBySsrc.set(t, e);
            let i = null != n && n.length > 0 ? n[0] : 0;
            i > 0 && this.userIdsBySsrc.set(i, e),
              this.logger.info("Renegotiating: User joined"),
              this.handleNegotiationNeeded();
          }
        }
        destroyUser(e) {
          let t = this.users.get(e);
          if (null != t) {
            let { audioSSRC: n, videoSSRC: i } = t;
            this.users.delete(e),
              null != n && this.userIdsBySsrc.delete(n),
              null != i && this.userIdsBySsrc.delete(i),
              this.logger.info("Renegotiating: User left"),
              this.handleNegotiationNeeded();
          }
        }
        setBitRate(e) {
          this.voiceBitrate !== e &&
            (super.setBitRate(e),
            this.setAudioEncoderParameters([
              { parameter: u.EncoderParameter.AUDIO_BITRATE, value: e },
            ]));
        }
        setSDP(e) {
          if (!(0, d.validateSdp)(e))
            throw Error("Incorrect SDP received from rtc-worker: ".concat(e));
          (this.sdp = e), this.setRemoteAnswer();
        }
        get peerConnectionState() {
          return this.pc.connectionState;
        }
        get iceGatheringState() {
          return this.pc.iceGatheringState;
        }
        get iceConnectionState() {
          return this.pc.iceConnectionState;
        }
        get signalingState() {
          return this.pc.signalingState;
        }
        get connected() {
          return "connected" === this.pc.iceConnectionState;
        }
        setTransceiverEncodingParameters(e, t) {
          if (null == e || 0 === t.length) return;
          let n = e.sender,
            i = n.getParameters();
          if (null == i.encodings) return;
          let r = !1;
          for (let e of i.encodings)
            for (let { propertyName: n, value: i } of t)
              e[n] !== i &&
                (this.logger.info(
                  "UnifiedConnection.setTransceiverEncodingParameters: "
                    .concat(n, ": from '")
                    .concat(e[n], "' to '")
                    .concat(i, "'")
                ),
                (r = !0),
                (e[n] = i));
          if (!r) return;
          let s = e => {
            this.logger.error(
              'UnifiedConnection.setTransceiverEncodingProperty: setParameters failed: "'
                .concat(e, '" (')
                .concat(JSON.stringify(t), ')"')
            );
          };
          n.setParameters(i)
            .then(
              () => {},
              e => s(e)
            )
            .catch(e => s(e));
        }
        setAudioEncoderParameters(e) {
          let t = { [u.EncoderParameter.AUDIO_BITRATE]: "maxBitrate" },
            n = [];
          for (let { parameter: i, value: r } of e) {
            let e = t[i];
            if (null == e) {
              this.logger.info(
                'UnifiedConnection.setEncoderParameter: Unable to set parameter "'.concat(
                  i,
                  '"'
                )
              );
              return;
            }
            n.push({ propertyName: e, value: r });
          }
          this.setTransceiverEncodingParameters(this.audioTransceiver, n);
        }
        setVideoEncoderParameters(e) {
          let t = {
              [u.EncoderParameter.VIDEO_BITRATE]: "maxBitrate",
              [u.EncoderParameter.VIDEO_RESOLUTION_SCALE]:
                "scaleResolutionDownBy",
              [u.EncoderParameter.VIDEO_FRAMERATE]: "maxFramerate",
            },
            n = [];
          for (let { parameter: i, value: r } of e) {
            let e = t[i];
            if (null == e) {
              this.logger.info(
                'UnifiedConnection.setEncoderParameter: Unable to set parameter "'.concat(
                  i,
                  '"'
                )
              );
              return;
            }
            n.push({ propertyName: e, value: r });
          }
          this.setTransceiverEncodingParameters(this.videoTransceiver, n);
        }
        getRawStats() {
          return this.pc.getStats();
        }
        makeOfferAnswerOptions() {
          return { iceRestart: !1 };
        }
        parseLocalDescription() {
          let e = this.pc.localDescription;
          if (null == e) throw Error("localDescription is null");
          let t = e.sdp,
            {
              outboundStreams: n,
              codecs: i,
              audioSSRC: r,
              videoSSRC: s,
              rtxSSRC: a,
            } = (0, d.extractSDP)(t);
          return (
            (this.outboundStreams = n),
            (this.codecs = i),
            (this.extensions = (0, d.getExtensions)(t)),
            (this.audioSSRC = r),
            (this.videoReady = s > 0 && a > 0),
            (this.videoStreamParameters[0].ssrc !== s ||
              this.videoStreamParameters[0].rtxSsrc !== a ||
              this.videoReady) &&
              ((this.videoStreamParameters[0].ssrc =
                0 === s ? this.videoStreamParameters[0].ssrc : s),
              (this.videoStreamParameters[0].rtxSsrc =
                0 === a ? this.videoStreamParameters[0].rtxSsrc : a),
              (this.videoStreamParameters[0].active = this.videoReady),
              this.emit(
                l.BaseConnectionEvent.Video,
                this.ids.userId,
                this.input.getVideoStreamId(),
                this.audioSSRC,
                s,
                a,
                this.videoStreamParameters
              )),
            t
          );
        }
        addTransceivers(e, t, n, i) {
          let r = this.pc,
            s = r.getTransceivers().length;
          for (let a = s; a < s + n; a++)
            "video" === e && null != i
              ? r.addTransceiver(e, { direction: t, streams: [i] })
              : r.addTransceiver(e, { direction: t }),
              this.inactiveTransceivers[e].push(a.toString());
        }
        buildSSRCsFromOutboundStreams() {
          let e = this.outboundStreams.map(e => {
            let { mid: t, type: n, direction: i } = e;
            t = String(t);
            let r = this.assignedStreams.get(t);
            if (null != r) {
              let e = this.users.get(r.cname),
                i =
                  "audio" === n
                    ? null == e
                      ? void 0
                      : e.audioSSRC
                    : null == e
                      ? void 0
                      : e.videoSSRC;
              r.ssrc !== i && ((r = void 0), this.assignedStreams.delete(t));
            }
            let s = this.unassignedStreams[n],
              a = this.inactiveTransceivers[n],
              o = a.indexOf(t);
            return (
              null == r &&
                s.length > 0 &&
                -1 !== o &&
                ((r = s.pop()), a.splice(o, 1), this.assignedStreams.set(t, r)),
              null == r && (r = { ssrc: -1, cname: "" }),
              {
                ssrc: r.ssrc,
                cname: r.cname,
                type: n,
                direction: (0, d.getDirection)(i),
                mid: t,
              }
            );
          });
          return e;
        }
        generateSDPAnswer() {
          var e, t;
          let n = this.audioCodec,
            i = this.audioPayloadType,
            r = this.videoCodec,
            s = this.videoPayloadType,
            a =
              this.videoSupported &&
              (null === (t = this.videoTransceiver) || void 0 === t
                ? void 0
                : null === (e = t.sender) || void 0 === e
                  ? void 0
                  : e.track) != null,
            o = this.rtxPayloadType,
            l = this.sdp;
          if (
            null == n ||
            null == i ||
            null == r ||
            null == s ||
            null == o ||
            null == l
          )
            throw Error(
              "Invalid payload: audioCodec: "
                .concat(n, ", audioPayloadType: ")
                .concat(null == i ? "null" : i, ", videoCodec: ")
                .concat(r, ", videoCodecPayloadType: ")
                .concat(null == s ? "null" : s, ", rtxPayloadType: ")
                .concat(null == o ? "null" : o, ", sdp: ")
                .concat(null == l ? "null" : l)
            );
          let u = this.buildSSRCsFromOutboundStreams();
          return (0, d.generateUnifiedSessionDescription)({
            type: "answer",
            baseSDP: l,
            audioCodec: n,
            audioPayloadType: i,
            audioBitRate: this.voiceBitrate,
            videoCodec: r,
            videoPayloadType: s,
            videoBitRate: 2500,
            sendingVideo: a,
            rtxPayloadType: o,
            ssrcs: u,
            extensions: this.extensions,
          });
        }
        async setRemoteAnswer() {
          let e = this.pc,
            t = this.generateSDPAnswer();
          await e.setRemoteDescription(t),
            (this.unassignedStreams.audio.length > 0 ||
              this.unassignedStreams.video.length > 0) &&
              ((this.negotiationNeeded = !0),
              this.logger.info(
                "Renegotiating: Streams left unassigned after negotiation - renegotiate"
              )),
            (this.negotiating = !1),
            this.negotiationNeeded && this.handleNegotiationNeeded();
        }
        setConnected() {
          this.input.reset(),
            this.setConnectionState(f.ConnectionStates.CONNECTED),
            this.on(l.BaseConnectionEvent.Stats, this.handleStats),
            this.input.on(c.InputEvent.VoiceActivity, this.handleVoiceActivity);
        }
        async handleNegotiationNeeded() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
          if (!e && (this.negotiating || null == this.sdp)) {
            this.negotiationNeeded = !0;
            return;
          }
          (this.negotiating = !0), (this.negotiationNeeded = !1);
          let t = this.pc,
            n = await t.createOffer(this.makeOfferAnswerOptions());
          await t.setLocalDescription(n);
          let i = this.parseLocalDescription();
          null == this.sdp
            ? this.emit(
                l.BaseConnectionEvent.Connected,
                "webrtc",
                (0, d.truncateSDP)(i)
              )
            : this.setRemoteAnswer();
        }
        constructor(e, t, n, i) {
          super(e, t, n, i),
            (this.sdp = null),
            (this.negotiating = !1),
            (this.negotiationNeeded = !1),
            (this.users = new Map()),
            (this.userIdsBySsrc = new Map()),
            (this.assignedStreams = new Map()),
            (this.unassignedStreams = { audio: [], video: [] }),
            (this.inactiveTransceivers = { audio: [], video: [] }),
            (this.outboundStreams = []),
            (this.trackUserIds = {}),
            (this.audioCodec = null),
            (this.audioPayloadType = null),
            (this.videoCodec = null),
            (this.videoPayloadType = null),
            (this.rtxPayloadType = null),
            (this.extensions = []),
            (this.codecs = []),
            (this.getUserIdBySsrc = e => this.userIdsBySsrc.get(e)),
            (this.handlePeerConnectionStateChange = () => {
              let e = this.peerConnectionState;
              switch ((this.logger.info("peerConnectionState =>", e), e)) {
                case "connected":
                  this.setConnected();
                  break;
                case "connecting":
                  "connected" === this.iceConnectionState
                    ? this.setConnectionState(
                        f.ConnectionStates.DTLS_CONNECTING
                      )
                    : this.setConnectionState(f.ConnectionStates.ICE_CHECKING);
                  break;
                case "failed":
                  this.setConnectionState(f.ConnectionStates.NO_ROUTE);
                  break;
                case "disconnected":
                case "closed":
                  this.setConnectionState(f.ConnectionStates.DISCONNECTED);
              }
            }),
            (this.handleIceConnectionStateChange = () => {
              let e = this.iceConnectionState;
              switch ((this.logger.info("iceConnectionState =>", e), e)) {
                case "connected":
                  this.setConnected();
                  break;
                case "checking":
                  this.setConnectionState(f.ConnectionStates.ICE_CHECKING);
                  break;
                case "failed":
                  this.setConnectionState(f.ConnectionStates.NO_ROUTE);
                  break;
                case "disconnected":
                case "closed":
                  this.setConnectionState(f.ConnectionStates.DISCONNECTED);
              }
            }),
            (this.handleSignalingStateChange = () => {
              let e = this.signalingState;
              this.logger.info("signalingState => ".concat(e));
            }),
            (this.handleIceGatheringStateChange = () => {
              this.logger.info("iceGatheringState =>", this.iceGatheringState);
            }),
            (this.handleTrack = e => {
              let t = e.streams[0].id,
                n = e.track;
              if (!/^default/.test(n.id)) {
                var i, r, s, a;
                let [e, o] = t.split("-");
                this.trackUserIds[n.id] = e;
                let l = this.users.get(e);
                if (
                  (null == l
                    ? void 0
                    : null === (r = l.videoSSRC) || void 0 === r
                      ? void 0
                      : null === (i = r.toString) || void 0 === i
                        ? void 0
                        : i.call(r)) !== o &&
                  (null == l
                    ? void 0
                    : null === (a = l.audioSSRC) || void 0 === a
                      ? void 0
                      : null === (s = a.toString) || void 0 === s
                        ? void 0
                        : s.call(a)) !== o
                ) {
                  this.logger.info(
                    "Got stale ssrc "
                      .concat(o, " for ")
                      .concat(n.kind, " track, user ID ")
                      .concat(e)
                  );
                  return;
                }
                this.createOutput(e, n),
                  (n.onunmute = () => this.createOutput(e, n)),
                  (n.onmute = () => {
                    var t;
                    (null === (t = this.users.get(e)) || void 0 === t
                      ? void 0
                      : t.videoSSRC) == null && this.destroyOutput(e, n);
                  });
              }
            }),
            (this.logger = new o.default("UnifiedConnection(".concat(e, ")"))),
            (this.videoSupported = E.BROWSER_SUPPORTS_VIDEO);
          let r = (this.pc = new RTCPeerConnection({
            bundlePolicy: "max-bundle",
            sdpSemantics: "unified-plan",
          }));
          E.BROWSER_SUPPORTS_CONNECTION_STATE
            ? ((r.onconnectionstatechange =
                this.handlePeerConnectionStateChange),
              (r.oniceconnectionstatechange =
                this.handlePeerConnectionStateChange))
            : (r.oniceconnectionstatechange =
                this.handleIceConnectionStateChange),
            (r.onsignalingstatechange = this.handleSignalingStateChange),
            (r.onicegatheringstatechange = this.handleIceGatheringStateChange),
            (r.ontrack = this.handleTrack),
            r.addTransceiver("audio", {
              direction: "recvonly",
              sendEncodings: [{ maxBitrate: this.voiceBitrate }],
            }),
            (this.audioTransceiver = r.getTransceivers()[0]),
            this.videoSupported &&
              (this.addTransceivers(
                "video",
                "recvonly",
                1,
                this.input.getVideoStream()
              ),
              (this.videoTransceiver = r.getTransceivers()[1])),
            this.addTransceivers("audio", "recvonly", 10),
            this.videoSupported &&
              this.addTransceivers("video", "recvonly", 10),
            this.setStream(this.input.stream),
            this.logger.info("Renegotiating: Initial negotiation"),
            this.handleNegotiationNeeded(!0);
        }
      };
    },
    111e3: function (e, t, n) {
      "use strict";
      var i;
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("424973"),
        n("370692"),
        n("477657"),
        n("811875"),
        n("90301"),
        n("652153"),
        n("28797"),
        n("817884"),
        n("597349"),
        n("667536"),
        n("690341");
      i = class {
        stop() {
          this.source.disconnect(),
            clearInterval(this.interval),
            (this.speakingCounter = 0);
        }
        get speaking() {
          return (
            this.speakingCounter > 0 ||
            this.silentFrames < this.silenceThreshold
          );
        }
        update() {
          (this.currentVolume = (function (e, t) {
            let n = -1 / 0;
            e.getFloatFrequencyData(t);
            for (let e = 4; e < t.length; e++)
              t[e] > n && t[e] < 0 && (n = t[e]);
            return n;
          })(this.analyser, this.fftBins)),
            this.speakingHistory[this.speakingHistoryIndex] &&
              this.speakingCounter--;
          let e = this.currentVolume > this.threshold;
          (this.speakingHistory[this.speakingHistoryIndex] = e),
            e && this.speakingCounter++,
            ++this.speakingHistoryIndex === this.speakingHistory.length &&
              (this.speakingHistoryIndex = 0),
            this.speakingCounter > 0
              ? (this.silentFrames = 0)
              : this.silentFrames++;
        }
        constructor(e, t, n, i = 0.1, r = 10) {
          (this.currentVolume = 0),
            (this.speakingHistoryIndex = 0),
            (this.speakingCounter = 0),
            (this.onProcess = null);
          let s = e.createAnalyser();
          (s.fftSize = 512), (s.smoothingTimeConstant = i);
          let a = e.createMediaStreamSource(t);
          a.connect(s);
          let o = [];
          for (let e = 0; e < r; e++) o.push(!1);
          let l = window.setInterval(() => {
            var e;
            this.update(),
              null === (e = this.onProcess) ||
                void 0 === e ||
                e.call(this, this.speaking, this.currentVolume);
          }, 20);
          (this.threshold = n),
            (this.analyser = s),
            (this.interval = l),
            (this.fftBins = new Float32Array(s.fftSize)),
            (this.source = a),
            (this.speakingHistory = o),
            (this.silenceThreshold = this.speakingHistory.length),
            (this.silentFrames = this.silenceThreshold);
        }
      };
    },
    555013: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("70102"),
        n("222007");
      var i,
        r = n("44170"),
        s = n("861001"),
        a = n("201617"),
        o = n("441822"),
        l = n("353927"),
        u = n("843455");
      let c = new a.default();
      i = class extends r.EventEmitter {
        destroy() {
          null != this.stream && (c.release(this.stream), (this.stream = null)),
            null != this.streamId &&
              (0, o.unregisterVideoStream)(this.streamId),
            (this.destroyed = !0);
        }
        getStreamId() {
          return this.streamId;
        }
        async setSource(e) {
          if (this.sourceId === e) return this.stream;
          (this.sourceId = e),
            null != this.stream &&
              (c.release(this.stream), (this.stream = null));
          let t = await (0, s.getVideoInputDevices)();
          if (this.sourceId === l.DISABLED_DEVICE_ID)
            return this.setStream(new MediaStream());
          let n = { width: 1280 };
          t.some(e => e.id === this.sourceId) && (n.deviceId = this.sourceId);
          try {
            let e = await c.acquire({ audio: !1, video: n });
            if (this.destroyed)
              throw (c.release(e), Error("VideoInput: Already destroyed"));
            return this.emit("permission", !0), this.setStream(e);
          } catch (e) {
            if ("string" != typeof e)
              switch (e.name) {
                case "PermissionDeniedError":
                case "NotAllowedError":
                  throw (
                    (this.emit("permission", !1),
                    u.UserMediaErrors.PERMISSION_DENIED)
                  );
                case "PermissionDismissedError":
                  throw (
                    (this.emit("permission", !1),
                    u.UserMediaErrors.PERMISSION_DISMISSED)
                  );
                case "DevicesNotFoundError":
                case "NotFoundError":
                  throw u.UserMediaErrors.NO_DEVICES_FOUND;
                default:
                  throw e.name || "UNKNOWN";
              }
            throw e;
          }
        }
        setStream(e) {
          return (
            null != this.streamId &&
              ((0, o.unregisterVideoStream)(this.streamId),
              (this.streamId = null)),
            (this.stream = e),
            (e.onaddtrack = e => this.emit("add-video-track", e)),
            e.getVideoTracks().length > 0 &&
              (this.streamId = (0, o.registerVideoStream)(e)),
            this.emit("stream", e),
            this.emit("video", this.getStreamId()),
            e
          );
        }
        constructor(...e) {
          super(...e),
            (this.stream = new MediaStream()),
            (this.sourceId = l.DISABLED_DEVICE_ID),
            (this.streamId = null),
            (this.destroyed = !1);
        }
      };
    },
    441822: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          registerVideoStream: function () {
            return a;
          },
          unregisterVideoStream: function () {
            return o;
          },
          getVideoStream: function () {
            return l;
          },
        });
      var i = n("773179"),
        r = n.n(i);
      let s = {};
      function a(e) {
        let t = r.uniqueId("VideoStream");
        return (s[t] = e), t;
      }
      function o(e) {
        delete s[e];
      }
      function l(e) {
        return s[e];
      }
    },
    849074: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          WebRTCStatsCalculator: function () {
            return s;
          },
        }),
        n("222007");
      class s {
        update(e) {
          for (let t in e.rtp.inbound) {
            let n = e.rtp.inbound[t];
            for (let e of n)
              if ("video" === e.type) {
                let t = this.getInboundBytesRecevierCalculator(e),
                  n = this.getInboundFrameDecodeRateCalculator(e);
                (e.bitrate = t.calculate(e)),
                  (e.frameRateDecode = n.calculate(e));
              }
          }
          for (let t of e.rtp.outbound)
            if ("video" === t.type) {
              let e = this.getOutboundBytesSentCalculator(t),
                n = this.getOutboundEncodeRateCalculator(t);
              (t.bitrate = e.calculate(t)),
                (t.frameRateEncode = n.calculate(t));
            }
        }
        static getCalculatorOrCreate(e, t, n, i) {
          let r =
              arguments.length > 4 && void 0 !== arguments[4]
                ? arguments[4]
                : 0,
            s = e[t.ssrc];
          return null == s && ((s = new o(n, i, r)), (e[t.ssrc] = s)), s;
        }
        getInboundBytesRecevierCalculator(e) {
          return s.getCalculatorOrCreate(
            this.inboundVideoBitrate,
            e,
            "bytesReceived",
            "timestamp",
            3
          );
        }
        getInboundFrameDecodeRateCalculator(e) {
          return s.getCalculatorOrCreate(
            this.inboundDecodeFps,
            e,
            "framesDecoded",
            "timestamp",
            5
          );
        }
        getOutboundBytesSentCalculator(e) {
          return s.getCalculatorOrCreate(
            this.outboundVideoBitrate,
            e,
            "bytesSent",
            "timestamp",
            3
          );
        }
        getOutboundEncodeRateCalculator(e) {
          return s.getCalculatorOrCreate(
            this.outboundEncodeFps,
            e,
            "framesEncoded",
            "timestamp",
            5
          );
        }
        constructor() {
          (this.inboundVideoBitrate = {}),
            (this.inboundDecodeFps = {}),
            (this.outboundVideoBitrate = {}),
            (this.outboundEncodeFps = {});
        }
      }
      ((r = i || (i = {}))[(r.NONE = 0)] = "NONE"),
        (r[(r.MILLISECONDS_FROM_SECONDS = 1)] = "MILLISECONDS_FROM_SECONDS"),
        (r[(r.BYTES_TO_BITS = 2)] = "BYTES_TO_BITS"),
        (r[(r.ROUND = 4)] = "ROUND");
      let a = {
        0: { multiplier: 1 },
        1: { postfix: "_in_ms", multiplier: 1e3 },
        2: { bitrate: !0, postfix: "", multiplier: 8 },
      };
      class o {
        calculate(e) {
          let t = this.previous;
          if (((this.previous = e), null == t)) return;
          let n = e.timestamp - t.timestamp;
          if (n <= 0 || "number" != typeof n) return;
          let i = t[this.accumulativeMetricKey],
            r = e[this.accumulativeMetricKey];
          if ("number" != typeof i || "number" != typeof r) return;
          let s = t[this.samplesMetricKey],
            a = e[this.samplesMetricKey];
          if ("number" != typeof s || "number" != typeof a) return;
          let o = ((r - i) / (a - s)) * this.multiplier;
          return this.round ? Math.round(o) : o;
        }
        constructor(e, t, n = 0) {
          for (let o in ((this.accumulativeMetricKey = e),
          (this.samplesMetricKey = t),
          (this.multiplier = 1),
          (this.round = !1),
          i)) {
            var r, s;
            let e = Number(o);
            !isNaN(e) &&
              (n & e) != 0 &&
              o in a &&
              (this.multiplier *=
                null !==
                  (s =
                    null === (r = a[o]) || void 0 === r
                      ? void 0
                      : r.multiplier) && void 0 !== s
                  ? s
                  : 1);
          }
          this.round = (4 & n) != 0;
        }
      }
    },
    551079: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("506083"),
        n("70102"),
        n("222007"),
        n("369198");
      var i,
        r = n("383536"),
        s = n.n(r),
        a = n("811022"),
        o = n("595275"),
        l = n("662697"),
        u = n.n(l),
        c = n("947279"),
        d = n("773364"),
        f = n("953161"),
        E = n("793722"),
        p = n("657869"),
        h = n("560550"),
        _ = n("820127"),
        S = n("861001"),
        m = n("899676"),
        T = n("13379"),
        g = n("238372"),
        I = n("232125"),
        C = n("353927"),
        v = n("53452");
      let A = new a.default("MediaEngineWebRTC");
      i = class extends o.default {
        destroy() {
          null != this.voiceActivityInput &&
            (this.voiceActivityInput.destroy(),
            (this.voiceActivityInput = null)),
            this.eachConnection(e => e.destroy()),
            this.emit(d.MediaEngineEvent.Destroy),
            this.removeAllListeners();
        }
        interact() {
          !this.interacted &&
            (document.createElement("audio").play(), (this.interacted = !0)),
            this.eachConnection(e => e.interact());
        }
        static supported() {
          return (
            !__OVERLAY__ &&
            (v.BROWSER_SUPPORTS_VOICE &&
            null != window.AudioContext &&
            null != window.RTCPeerConnection
              ? (n("231638"), !0)
              : (A.info("WebRTC is not supported on", s.name, s.version), !1))
          );
        }
        supported() {
          return !0;
        }
        supports(e) {
          switch (e) {
            case C.Features.AUDIO_INPUT_DEVICE:
              return S.CAN_SET_DEVICES;
            case C.Features.AUDIO_OUTPUT_DEVICE:
              return S.CAN_SET_OUTPUT_DEVICES;
            case C.Features.VIDEO:
              return v.BROWSER_SUPPORTS_VIDEO;
            case C.Features.DESKTOP_CAPTURE:
              var t;
              return (
                (null === (t = navigator.mediaDevices) || void 0 === t
                  ? void 0
                  : t.getDisplayMedia) != null
              );
            case C.Features.VOICE_PROCESSING:
              return "Chrome" === s.name;
            case C.Features.NATIVE_PING:
            case C.Features.DIAGNOSTICS:
              return v.BROWSER_SUPPORTS_DIAGNOSTICS;
            case C.Features.DESKTOP_CAPTURE_APPLICATIONS:
            case C.Features.LOOPBACK:
            case C.Features.NOISE_SUPPRESSION:
            case C.Features.AUTOMATIC_GAIN_CONTROL:
              return "Safari" !== s.name;
            case C.Features.NOISE_CANCELLATION:
              return u();
            case C.Features.QOS:
            case C.Features.ATTENUATION:
            case C.Features.AUTOMATIC_VAD:
            case C.Features.LEGACY_AUDIO_SUBSYSTEM:
            case C.Features.EXPERIMENTAL_AUDIO_SUBSYSTEM:
            case C.Features.DEBUG_LOGGING:
            case C.Features.VOICE_PANNING:
            case C.Features.AUTO_ENABLE:
            case C.Features.DESKTOP_CAPTURE_FORMAT:
            case C.Features.VIDEO_HOOK:
            case C.Features.OPEN_H264:
            case C.Features.AEC_DUMP:
            case C.Features.DISABLE_VIDEO:
            case C.Features.CONNECTION_REPLAY:
            case C.Features.SIMULCAST:
            case C.Features.SCREEN_CAPTURE_KIT:
            default:
              return !1;
          }
        }
        getAudioContext() {
          return (
            null == this._audioContext &&
              (this._audioContext = new AudioContext()),
            this._audioContext
          );
        }
        connect(e, t, n) {
          let {
              ssrc: i,
              address: r,
              port: s,
              modes: a,
              streamUserId: o,
              streamParameters: l,
            } = n,
            u = (0, h.makeConnection)(e, t, this.getAudioContext(), l);
          return (
            (u.streamUserId = o),
            u.setOutputVolume(this.outputVolume),
            u.setSinkId(this.sinkId),
            u.once(c.BaseConnectionEvent.Destroy, e =>
              this.connections.delete(e)
            ),
            u.on(c.BaseConnectionEvent.Silence, e =>
              this.emit(d.MediaEngineEvent.Silence, e)
            ),
            u.on(
              c.BaseConnectionEvent.DesktopSourceEnd,
              this.handleDesktopSourceEnd
            ),
            u.on(
              c.BaseConnectionEvent.AudioPermission,
              this.handleAudioPermission
            ),
            u.on(
              c.BaseConnectionEvent.VideoPermission,
              this.handleVideoPermission
            ),
            this.interacted && u.interact(),
            e === C.MediaEngineContextTypes.DEFAULT &&
              (u.setAudioSource(this.sourceId),
              this.enabled && u.input.enableAudioInput()),
            this.connections.add(u),
            this.emit(d.MediaEngineEvent.Connection, u),
            u
          );
        }
        findConnection(e) {
          return Array.from(this.connections).find(
            t => null == e || t.context === e
          );
        }
        eachConnection(e, t) {
          this.connections.forEach(n => {
            (null == t || n.context === t) && e(n);
          });
        }
        enable() {
          return (
            null == this.enablePromise &&
              (this.enablePromise = this._enable().finally(() => {
                this.enablePromise = null;
              })),
            this.enablePromise
          );
        }
        async _enable() {
          if (this.enabled) return;
          await this.getAudioContext().audioWorklet.addModule(m);
          let e = new p.default(this.getAudioContext());
          e.on("permission", this.handleAudioPermission);
          try {
            var t;
            await e.enable(),
              "Firefox" === s.name && (await this.handleDeviceChange()),
              (this.enabled = !0),
              this.eachConnection(
                e => e.input.enableAudioInput(),
                C.MediaEngineContextTypes.DEFAULT
              ),
              null === (t = this.voiceActivityInput) ||
                void 0 === t ||
                t.enable();
          } finally {
            e.destroy();
          }
        }
        setInputVolume(e) {}
        setOutputVolume(e) {
          (this.outputVolume = e),
            this.connections.forEach(t => t.setOutputVolume(e));
        }
        getAudioInputDevices() {
          return (0, S.getAudioInputDevices)();
        }
        setAudioInputDevice(e) {
          var t, n;
          (this.sourceId = e),
            this.eachConnection(
              t => t.setAudioSource(e),
              C.MediaEngineContextTypes.DEFAULT
            ),
            null === (t = this.voiceActivityInput) ||
              void 0 === t ||
              t.setSource(e),
            null === (n = this.loopback) || void 0 === n || n.setAudioSource(e);
        }
        getAudioOutputDevices() {
          return (0, S.getAudioOutputDevices)();
        }
        setAudioOutputDevice(e) {
          var t;
          (this.sinkId = e),
            this.connections.forEach(t => t.setSinkId(e)),
            null === (t = this.loopback) || void 0 === t || t.setAudioSink(e);
        }
        getVideoInputDevices() {
          return (0, S.getVideoInputDevices)();
        }
        setVideoInputDevice(e) {
          this.eachConnection(
            t => t.setVideoSource(e),
            C.MediaEngineContextTypes.DEFAULT
          );
        }
        getSupportedVideoCodecs(e) {
          e([]);
        }
        getCodecCapabilities(e) {
          e("");
        }
        async getDesktopSource(e) {
          let t =
              arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
            n = await _.default.get(e, t);
          return (this.pendingDesktopInputs[n.id] = n), n.id;
        }
        getDesktopSources() {
          return Promise.reject(Error("NO_STREAM"));
        }
        getScreenPreviews(e, t) {
          return Promise.reject(Error("UNSUPPORTED"));
        }
        getWindowPreviews(e, t) {
          return Promise.reject(Error("UNSUPPORTED"));
        }
        setClipBufferLength(e) {}
        saveClip(e, t) {
          return Promise.reject(Error("UNSUPPORTED"));
        }
        saveClipForUser(e, t, n) {
          return Promise.reject(Error("UNSUPPORTED"));
        }
        updateClipMetadata(e, t) {
          return Promise.reject(Error("UNSUPPORTED"));
        }
        exportClip(e, t) {
          return Promise.reject(Error("UNSUPPORTED"));
        }
        setGoLiveSource(e, t) {
          if (null == e) this.eachConnection(e => e.setDesktopInput(null), t);
          else if (
            null != e.desktopDescription &&
            null != this.findConnection(t)
          ) {
            let n = this.pendingDesktopInputs[e.desktopDescription.id];
            delete this.pendingDesktopInputs[e.desktopDescription.id],
              null != n && this.eachConnection(e => e.setDesktopInput(n), t);
          }
        }
        setClipsSource(e) {}
        setClipsQualitySettings(e, t, n) {
          return !1;
        }
        setSoundshareSource(e, t, n) {}
        setAudioSubsystem(e) {}
        getAudioSubsystem() {
          return C.AudioSubsystems.STANDARD;
        }
        getAudioLayer() {
          return "";
        }
        getDebugLogging() {
          return !1;
        }
        setDebugLogging(e) {}
        writeAudioDebugState() {
          return Promise.reject(Error("Audio debug state is not supported."));
        }
        setExperimentalAdm(e) {}
        setLoopback(e, t) {
          e && null == this.loopback
            ? (this.enable(),
              (this.loopback = new T.default(
                this.getAudioContext(),
                this.sourceId,
                this.sinkId
              )),
              this.loopback.setNoiseCancellation(t.noiseCancellation))
            : !e &&
              null != this.loopback &&
              (this.loopback.stop(), (this.loopback = null));
        }
        getLoopback() {
          return null != this.loopback;
        }
        setH264Enabled(e) {}
        setAv1Enabled(e) {}
        setH265Enabled(e) {}
        getCodecSurvey() {
          return Promise.reject(
            Error(
              "getCodecSurvey is not implemented on MediaEngine of browsers."
            )
          );
        }
        startAecDump() {}
        stopAecDump() {}
        setAecDump(e) {}
        createReplayConnection(e, t) {
          throw Error("Connection replay is not supported.");
        }
        setUseDirectVideo(e) {}
        setMaxSyncDelayOverride(e) {}
        rankRtcRegions(e) {
          return Promise.reject(
            Error("RTC region latency test is not supported.")
          );
        }
        getSoundshareStatus() {
          return Promise.reject(Error("getSoundshareStatus is not supported."));
        }
        enableSoundshare() {
          return Promise.reject(Error("enableSoundshare is not supported."));
        }
        applyMediaFilterSettings(e) {
          return Promise.resolve();
        }
        startLocalAudioRecording() {
          return Promise.reject(
            Error("startLocalAudioRecording is not supported.")
          );
        }
        stopLocalAudioRecording(e) {}
        speedTester(e, t) {
          throw Error("speedTester is not supported.");
        }
        setHasFullbandPerformance(e) {}
        getSupportedSecureFramesProtocolVersion() {
          return 0;
        }
        getSupportedBandwidthEstimationExperiments(e) {
          e([]);
        }
        constructor() {
          super(),
            (this.Video = I.default),
            (this.Camera = g.default),
            (this._audioContext = null),
            (this.outputVolume = C.DEFAULT_VOLUME),
            (this.sourceId = C.DEFAULT_DEVICE_ID),
            (this.sinkId = C.DEFAULT_DEVICE_ID),
            (this.enabled = !1),
            (this.connections = new Set()),
            (this.interacted = !1),
            (this.loopback = null),
            (this.voiceActivityInput = null),
            (this.pendingDesktopInputs = {}),
            (this.enablePromise = null),
            (this.handleActiveSinksChange = (e, t) => {
              this.connections.forEach(n =>
                n.setHasActiveVideoOutputSink(e, t)
              );
            }),
            (this.handleNewListener = e => {
              switch (e) {
                case d.MediaEngineEvent.DeviceChange:
                  null != navigator.mediaDevices &&
                    null == navigator.mediaDevices.ondevicechange &&
                    ((navigator.mediaDevices.ondevicechange = () => {
                      this.handleDeviceChange();
                    }),
                    this.handleDeviceChange());
                  break;
                case d.MediaEngineEvent.VoiceActivity:
                  null == this.voiceActivityInput &&
                    ((this.voiceActivityInput = new p.default(
                      this.getAudioContext()
                    )),
                    this.voiceActivityInput.setSource(this.sourceId),
                    this.voiceActivityInput.on(
                      "voiceactivity",
                      this.handleVoiceActivity
                    ),
                    this.enabled && this.voiceActivityInput.enable());
              }
            }),
            (this.handleRemoveListener = e => {
              switch (e) {
                case d.MediaEngineEvent.DeviceChange:
                  var t;
                  (null === (t = navigator.mediaDevices) || void 0 === t
                    ? void 0
                    : t.ondevicechange) != null &&
                    0 === this.listenerCount(d.MediaEngineEvent.DeviceChange) &&
                    (navigator.mediaDevices.ondevicechange = null);
                  break;
                case d.MediaEngineEvent.VoiceActivity:
                  null != this.voiceActivityInput &&
                    0 ===
                      this.listenerCount(d.MediaEngineEvent.VoiceActivity) &&
                    (this.voiceActivityInput.destroy(),
                    (this.voiceActivityInput = null));
              }
            }),
            (this.handleDeviceChange = () =>
              (0, S.getDevices)().then(e => {
                let [t, n, i] = e;
                return this.emit(d.MediaEngineEvent.DeviceChange, t, n, i);
              })),
            (this.handleVoiceActivity = e => {
              this.emit(d.MediaEngineEvent.VoiceActivity, e, 0);
            }),
            (this.handleDesktopSourceEnd = () => {
              this.emit(d.MediaEngineEvent.DesktopSourceEnd);
            }),
            (this.handleAudioPermission = e => {
              this.emit(d.MediaEngineEvent.AudioPermission, e);
            }),
            (this.handleVideoPermission = e => {
              this.emit(d.MediaEngineEvent.VideoPermission, e);
            }),
            this.on("newListener", this.handleNewListener),
            this.on("removeListener", this.handleRemoveListener),
            (0, E.setActiveSinksChangeCallback)(this.handleActiveSinksChange),
            (0, f.default)(this);
        }
      };
    },
    369198: function (e, t, n) {
      "use strict";
      n.r(t);
      var i,
        r = n("383536"),
        s = n.n(r),
        a = n("67021");
      (window.AudioContext =
        null !== (i = window.AudioContext) && void 0 !== i
          ? i
          : window.webkitAudioContext),
        null != window.RTCPeerConnection &&
          "Chrome" === s.name &&
          52 > (0, a.platformVersion)() &&
          ["createOffer", "createAnswer"].forEach(e => {
            let t = RTCPeerConnection.prototype[e];
            RTCPeerConnection.prototype[e] = function () {
              for (var e = arguments.length, n = Array(e), i = 0; i < e; i++)
                n[i] = arguments[i];
              let r = this;
              if (n.length < 1 || (1 === n.length && "object" == typeof n[0])) {
                let e = 1 === n.length ? n[0] : void 0;
                return (
                  null != e &&
                    (e = {
                      mandatory: {
                        OfferToReceiveAudio: e.offerToReceiveAudio || !1,
                        OfferToReceiveVideo: e.offerToReceiveVideo || !1,
                      },
                      optional: [
                        {
                          VoiceActivityDetection:
                            e.voiceActivityDetection || !1,
                        },
                        { IceRestart: e.iceRestart || !1 },
                      ],
                    }),
                  new Promise((n, i) => t.apply(r, [n, i, e]))
                );
              }
              return t.apply(this, n);
            };
          });
    },
    948961: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return s;
          },
        }),
        n("222007"),
        n("424973");
      var i = n("823302");
      function r(e) {
        return { id: e.payloadType, name: e.mimeType.split("/").slice(1)[0] };
      }
      function s(e, t, n, s) {
        var a, o, l;
        let u = {},
          c = {},
          d = [],
          f = [];
        for (let t of e.values())
          switch (t.type) {
            case "candidate-pair":
              u[t.id] = t;
              break;
            case "codec":
              c[t.id] = t;
              break;
            case "inbound-rtp":
              d.push(t);
              break;
            case "outbound-rtp":
              f.push(t);
          }
        let E = Object.values(u).find(e => "succeeded" === e.state);
        if (void 0 === E) return null;
        let p = [];
        for (let e of f) {
          let t = c[e.codecId];
          if (null == t) continue;
          let s = {
            type: e.kind,
            ssrc: e.ssrc,
            timestamp: e.timestamp,
            sinkWant: (0, i.formatSinkWantStat)(n, e.ssrc, "video" === e.kind),
            sinkWantAsInt: (0, i.formatSinkWantAsInt)(n, e.ssrc),
            codec: r(t),
            bytesSent: e.bytesSent,
            packetsSent: e.packetsSent,
          };
          if ("audio" === e.kind) p.push({ ...s, type: "audio" });
          else if ("video" === e.kind) {
            let t =
              null !== e.frameWidth
                ? { width: e.frameWidth, height: e.frameHeight }
                : void 0;
            p.push({
              ...s,
              framesEncoded: e.framesEncoded,
              keyFramesEncoded: e.keyFramesEncoded,
              firCount: e.firCount,
              nackCount: e.nackCount,
              pliCount: e.pliCount,
              bitrateTarget: e.targetBitrate,
              qpSum: e.qpSum,
              averageEncodeTime:
                null == e.framesEncoded ||
                null === (l = e.totalEncodeTime) ||
                0 === l
                  ? void 0
                  : ((1e3 * e.totalEncodeTime) / e.framesEncoded).toFixed(1),
              resolution: t,
              framesSent: e.framesSent,
              frameRateInput: e.framesPerSecond,
              type: "video",
            });
          }
        }
        let h = {};
        for (let e of d) {
          let a = c[e.codecId];
          if (null == a) continue;
          let o = t(e.ssrc);
          if (null == o) continue;
          let l = {
            type: e.kind,
            ssrc: e.ssrc,
            timestamp: e.timestamp,
            sinkWant: (0, i.formatSinkWantStat)(n, e.ssrc, "video" === e.kind),
            sinkWantAsInt: (0, i.formatSinkWantAsInt)(n, e.ssrc),
            sinkWantLocal: (0, i.formatSinkWantStat)(
              s,
              e.ssrc,
              "video" === e.kind
            ),
            codec: r(a),
            bytesReceived: e.bytesReceived,
            packetsReceived: e.packetsReceived,
            packetsLost: e.packetsLost,
          };
          if ("audio" === e.kind) {
            let t =
              void 0 !== e.jitterBufferDelay &&
              void 0 !== e.jitterBufferEmittedCount
                ? Math.round(
                    (1e3 * e.jitterBufferDelay) / e.jitterBufferEmittedCount
                  )
                : 0;
            null == h[o] && (h[o] = []),
              h[o].push({
                ...l,
                audioLevel: e.audioLevel,
                jitter: 1e3 * e.jitter,
                jitterBuffer: t,
              });
          } else if ("video" === e.kind) {
            null == h[o] && (h[o] = []);
            let t =
              null !== e.frameWidth
                ? { width: e.frameWidth, height: e.frameHeight }
                : void 0;
            h[o].push({
              ...l,
              resolution: t,
              framesDecoded: e.framesDecoded,
              keyFramesDecoded: e.keyFramesDecoded,
              framesDropped: e.framesDropped,
              framesReceived: e.framesReceived,
              frameRateDecode: e.framesPerSecond,
              averageDecodeTime:
                null == e.framesDecoded || null == e.totalDecodeTime
                  ? void 0
                  : ((1e3 * e.totalDecodeTime) / e.framesDecoded).toFixed(1),
              firCount: e.firCount,
              nackCount: e.nackCount,
              pliCount: e.pliCount,
              qpSum: e.qpSum,
              decoderImplementationName: "WebRTC",
            });
          }
        }
        let _ =
          (null !== (a = E.currentRoundTripTime) && void 0 !== a ? a : 0) * 1e3;
        return {
          transport: {
            availableOutgoingBitrate:
              null !== (o = E.availableOutgoingBitrate) && void 0 !== o ? o : 0,
            bytesReceived: E.bytesReceived,
            bytesSent: E.bytesSent,
            ping: _,
          },
          rtp: { inbound: h, outbound: p },
        };
      }
    },
    238372: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return l;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691"),
        s = n("441822"),
        a = n("232125");
      async function o(e) {
        let { deviceId: t, width: n, height: i, disabled: r } = e;
        if (r) return null;
        try {
          let e = await navigator.mediaDevices.getUserMedia({
            audio: !1,
            video: {
              width: n * window.devicePixelRatio,
              height: i * window.devicePixelRatio,
              frameRate: 30,
              deviceId: t,
            },
          });
          return e;
        } catch (e) {
          return null;
        }
      }
      function l(e) {
        let { deviceId: t, width: n, height: l, disabled: u } = e,
          [c, d] = r.useState();
        return (
          r.useEffect(() => {
            let e = o({ deviceId: t, width: n, height: l, disabled: u }).then(
              e => {
                let t = null != e ? (0, s.registerVideoStream)(e) : null;
                return d(t), { stream: e, streamId: t };
              }
            );
            return () => {
              e.then(e => {
                var t;
                let { stream: n, streamId: i } = e;
                null != (t = n) && t.getTracks().forEach(e => e.stop()),
                  null != i && (0, s.unregisterVideoStream)(i);
              });
            };
          }, [t, n, l, u]),
          null == c
            ? (0, i.jsx)("div", {
                className: "media-engine-video",
                style: { width: n, height: l },
              })
            : (0, i.jsx)(a.default, {
                streamId: c,
                style: { width: n, height: l },
              })
        );
      }
      l.defaultProps = { disabled: !1, width: 320, height: 180 };
    },
    232125: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return u;
          },
        });
      var i = n("37983"),
        r = n("884691"),
        s = n("677935"),
        a = n.n(s),
        o = n("793722"),
        l = n("441822");
      function u(e) {
        let {
            streamId: t,
            paused: n,
            onReady: s,
            onResize: u,
            className: c,
            ...d
          } = e,
          f = r.useRef(null),
          E = r.useRef({ width: 0, height: 0 });
        r.useLayoutEffect(() => {
          let e = f.current;
          if (null != e)
            return (
              (0, o.registerActiveSink)(t),
              (e.srcObject = (0, l.getVideoStream)(t)),
              () => {
                (0, o.unregisterActiveSink)(t), (e.srcObject = null), e.load();
              }
            );
        }, [t]),
          r.useEffect(() => {
            var e, i;
            return (
              n
                ? (null === (e = f.current) || void 0 === e || e.pause(),
                  (0, o.unregisterActiveSink)(t))
                : null === (i = f.current) ||
                  void 0 === i ||
                  i.play().catch(() => {}),
              () => {
                n && (0, o.registerActiveSink)(t);
              }
            );
          }, [n]);
        let p = r.useCallback(() => {
          var e, t, n, i;
          let { width: r, height: s } = E.current,
            a =
              null !==
                (n =
                  null === (e = f.current) || void 0 === e
                    ? void 0
                    : e.videoWidth) && void 0 !== n
                ? n
                : 0,
            o =
              null !==
                (i =
                  null === (t = f.current) || void 0 === t
                    ? void 0
                    : t.videoHeight) && void 0 !== i
                ? i
                : 0;
          if (r !== a || s !== o) {
            let e = { width: a, height: o };
            null == u || u(e), (E.current = e);
          }
        }, [u]);
        r.useLayoutEffect(() => {
          let e = f.current;
          if (null != e)
            return (
              e.addEventListener("resize", p),
              () => e.removeEventListener("resize", p)
            );
        }, [p]);
        let h = r.useCallback(() => {
            null == s || s();
          }, [s]),
          _ = r.useCallback(
            e => {
              !n && e.currentTarget.play();
            },
            [n]
          );
        return (0, i.jsx)("video", {
          className: a("media-engine-video", c),
          ref: f,
          autoPlay: !0,
          onPause: _,
          onCanPlayThrough: h,
          muted: !0,
          ...d,
        });
      }
      u.defaultProps = { paused: !1 };
    },
    407846: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("222007");
      var i,
        r = n("773179"),
        s = n.n(r);
      function a(e, t, n, i) {
        null != t && e.splice(s.sortedIndexBy(e, t, i), 1),
          null != n && e.splice(s.sortedIndexBy(e, n, i), 0, n);
      }
      let o = [];
      i = class {
        get version() {
          return this._version;
        }
        indexes() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
          if (!e && this.dirty) {
            let e = {};
            for (let [t, n] of Object.entries(this.valueIndexes)) e[t] = [...n];
            (this.valueIndexes = e), (this.dirty = !1);
          }
          return this.valueIndexes;
        }
        keys() {
          return this.valueMap.keys();
        }
        values(e) {
          var t;
          let n =
            arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          return null == e
            ? this.valueArray
            : null !== (t = this.indexes(n)[e]) && void 0 !== t
              ? t
              : o;
        }
        size(e) {
          var t, n;
          return null == e
            ? this.valueArray.length
            : null !==
                  (n =
                    null === (t = this.valueIndexes[e]) || void 0 === t
                      ? void 0
                      : t.length) && void 0 !== n
              ? n
              : 0;
        }
        clear() {
          this.valueMap.clear(),
            (this.valueArray = []),
            (this.valueIndexes = {});
        }
        has(e) {
          return this.valueMap.has(e);
        }
        get(e) {
          return this.valueMap.get(e);
        }
        set(e, t) {
          let n = this.get(e);
          return (
            !(
              (null == n && null == t) ||
              (null != n && null != t && this.isEqual(n, t))
            ) &&
            (null != t ? this.valueMap.set(e, t) : this.valueMap.delete(e),
            a(this.valueArray, n, t, this.sortBy),
            null != n &&
              this.indexBy(n).forEach(e =>
                a(this.getIndex(e), n, null, this.sortBy)
              ),
            null != t &&
              this.indexBy(t).forEach(e =>
                a(this.getIndex(e), null, t, this.sortBy)
              ),
            (this.dirty = !0),
            this._version++,
            !0)
          );
        }
        delete(e) {
          return this.set(e, null);
        }
        getIndex(e) {
          let t = this.valueIndexes[e];
          return null == t && ((t = []), (this.valueIndexes[e] = t)), t;
        }
        constructor(e, t, n = (e, t) => e === t) {
          (this.valueMap = new Map()),
            (this.valueArray = []),
            (this.valueIndexes = {}),
            (this.dirty = !1),
            (this._version = 0),
            (this.indexBy = e),
            (this.sortBy = t),
            (this.isEqual = n);
        }
      };
    },
    398183: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          now: function () {
            return r;
          },
          TimeStampProducer: function () {
            return s;
          },
          StopWatch: function () {
            return o;
          },
          sleep: function () {
            return l;
          },
        }),
        n("70102"),
        n("129334");
      var i = n("279295");
      let r = () => Math.floor(i.timeOrigin + i.performance.now()),
        s = new (class {
          now() {
            return r();
          }
        })();
      class a {
        isGreaterThan(e) {
          return this.milliseconds > e.milliseconds;
        }
        isGreaterOrEqualTo(e) {
          return this.milliseconds >= e.milliseconds;
        }
        constructor(e, t, n, i) {
          (this.milliseconds = 0),
            (this.asMilliseconds = () => this.milliseconds),
            (this.asSeconds = () => this.milliseconds / 1e3),
            (this.asMinutes = () => this.milliseconds / 1e3 / 60),
            (this.asHours = () => this.milliseconds / 1e3 / 60 / 60),
            (this.add = e =>
              a.fromMilliseconds(this.milliseconds + e.milliseconds)),
            (this.subtract = e =>
              a.fromMilliseconds(this.milliseconds - e.milliseconds)),
            (this.subtractOrZero = e =>
              a.fromMilliseconds(
                Math.max(this.milliseconds - e.milliseconds, 0)
              )),
            (this.milliseconds += i || 0),
            (this.milliseconds += 1e3 * (n || 0)),
            (this.milliseconds += 6e4 * (t || 0)),
            (this.milliseconds += 36e5 * (e || 0));
        }
      }
      (a.fromMilliseconds = e => new a(0, 0, 0, e)),
        (a.fromSeconds = e => new a(0, 0, e)),
        (a.fromMinutes = e => new a(0, e)),
        (a.fromHours = e => new a(e));
      class o {
        start() {
          null == this.startTime &&
            (this.startTime = this.timestampProducer.now());
        }
        restart() {
          this.startTime = this.timestampProducer.now();
        }
        reset() {
          (this.startTime = void 0), (this.timePassed = 0);
        }
        stop() {
          null != this.startTime &&
            ((this.timePassed += this.timestampProducer.now() - this.startTime),
            (this.startTime = void 0));
        }
        toggle(e) {
          e !== this.isRunning() && (e ? this.start() : this.stop());
        }
        elapsed() {
          if (null == this.startTime)
            return a.fromMilliseconds(this.timePassed);
          let e = this.timestampProducer.now() - this.startTime;
          return a.fromMilliseconds(this.timePassed + e);
        }
        isRunning() {
          return null != this.startTime;
        }
        static startNew() {
          let e = new o();
          return e.start(), e;
        }
        constructor(e = s) {
          (this.timestampProducer = e),
            (this.startTime = void 0),
            (this.timePassed = 0);
        }
      }
      function l(e) {
        let t = "number" == typeof e ? e : e.asMilliseconds();
        return new Promise(e => {
          setTimeout(() => e(), t);
        });
      }
    },
    862337: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          Timeout: function () {
            return i;
          },
          DelayedCall: function () {
            return r;
          },
          Interval: function () {
            return s;
          },
          timeoutPromise: function () {
            return a;
          },
        });
      class i {
        start(e, t) {
          let n =
            !(arguments.length > 2) || void 0 === arguments[2] || arguments[2];
          (!this.isStarted() || n) &&
            (this.stop(),
            (this._ref = window.setTimeout(() => {
              (this._ref = null), t();
            }, e)));
        }
        stop() {
          null != this._ref && (clearTimeout(this._ref), (this._ref = null));
        }
        isStarted() {
          return null != this._ref;
        }
      }
      class r {
        set(e) {
          return (this._delay = e), this;
        }
        delay() {
          let e =
            !(arguments.length > 0) || void 0 === arguments[0] || arguments[0];
          this._timeout.start(this._delay, this._handler, e);
        }
        cancel() {
          this._timeout.stop();
        }
        isDelayed() {
          return this._timeout.isStarted();
        }
        constructor(e, t) {
          (this._delay = e), (this._handler = t), (this._timeout = new i());
        }
      }
      class s {
        start(e, t) {
          this.stop(), (this._ref = window.setInterval(t, e));
        }
        stop() {
          null != this._ref && (clearInterval(this._ref), (this._ref = null));
        }
      }
      function a(e) {
        return new Promise(t => {
          setTimeout(() => t(), e);
        });
      }
    },
    697930: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          _private: function () {
            return i;
          },
        });
      let i = { Modules: { chat: { RESIZE_HANDLE_WIDTH: 8 } } };
    },
    669491: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return R;
          },
        }),
        n("781738");
      var i = n("10371"),
        r = n.n(i),
        s = n("773179"),
        a = n.n(s),
        o = n("58539"),
        l = n("891600"),
        u = n("790217"),
        c = n("593251"),
        d = n("130285"),
        f = n("697930");
      let { Themes: E } = d._private,
        { SemanticColors: p, RawColors: h } = o._private,
        { Shadows: _ } = u._private,
        { Spacing: S } = c._private,
        { Modules: m } = f._private,
        T = a.mapValues(h, e => r(e)),
        g = {
          themes: E,
          modules: m,
          colors: a.mapValues(p, (e, t) => ({
            css: A(t),
            resolve(t) {
              let n = e[t.theme],
                i = n.raw,
                r = n.opacity;
              if (1 === r) return g.unsafe_rawColors[i].resolve(t);
              {
                let e = T[i];
                return (
                  0 !== e.alpha() && 1 !== r && (e = e.alpha(r)),
                  I(e, t.saturation)
                );
              }
            },
          })),
          unsafe_rawColors: a.mapValues(h, (e, t) => {
            let n = T[t];
            return { css: A(t), resolve: e => I(n, e.saturation) };
          }),
          shadows: a.mapValues(_, (e, t) => ({
            css: A(t),
            resolve: t => ({
              boxShadow: e[t.theme].boxShadow,
              filter: e[t.theme].filter,
              nativeStyles: e[t.theme].nativeStyles,
            }),
          })),
          radii: l.Radius,
          spacing: a.mapValues(S, e => "".concat(e, "px")),
        };
      function I(e, t) {
        return {
          spring() {
            let n =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : {};
            return C(e, t, n).hex("rgba");
          },
          hsl() {
            let n =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : {};
            return C(e, t, n).css("hsl");
          },
          hex() {
            let n =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : {};
            return C(e, t, n).hex();
          },
          int() {
            let n =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : {},
              i = C(e, t, n),
              r = i.num();
            return 1 !== i.alpha() ? (r << 8) | Math.round(255 * i.alpha()) : r;
          },
        };
      }
      function C(e, t, n) {
        var i;
        let r = a.clamp(null !== (i = n.opacity) && void 0 !== i ? i : 1, 0, 1),
          s = e;
        return (
          1 !== t && (s = s.set("hsl.s", s.get("hsl.s") * t)),
          1 !== r && (s = s.alpha(s.alpha() * r)),
          s
        );
      }
      function v(e) {
        return e.toLowerCase().replace(/_/g, "-");
      }
      function A(e, t) {
        let n = null != t ? v(t) : null,
          i = v(e);
        return "var(--".concat([n, i].filter(Boolean).join("-"), ")");
      }
      var R = g;
    },
    665317: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          getChildMapping: function () {
            return r;
          },
          mergeChildMappings: function () {
            return s;
          },
        }),
        n("424973");
      var i = n("884691");
      function r(e) {
        let t = {};
        if (e) {
          var n;
          null === (n = i.Children.map(e, e => e)) ||
            void 0 === n ||
            n.forEach(e => {
              let n = e.key;
              null != n && (t[n] = e);
            });
        }
        return t;
      }
      function s() {
        let e,
          t =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {},
          n =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        function i(e) {
          return n.hasOwnProperty(e) ? n[e] : t[e];
        }
        let r = {},
          s = [];
        for (let e in t)
          n.hasOwnProperty(e) ? s.length && ((r[e] = s), (s = [])) : s.push(e);
        let a = {};
        for (let t in n) {
          if (r.hasOwnProperty(t))
            for (e = 0; e < r[t].length; e++) {
              let n = r[t][e];
              a[r[t][e]] = i(n);
            }
          a[t] = i(t);
        }
        for (e = 0; e < s.length; e++) a[s[e]] = i(s[e]);
        return a;
      }
    },
    266491: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return r;
          },
        }),
        n("424973"),
        n("222007");
      var i,
        r,
        s = n("884691"),
        a = n("665317");
      ((i = class e extends s.Component {
        static getDerivedStateFromProps(e, t) {
          let { children: n, firstRender: i } = t,
            r = (0, a.getChildMapping)(e.children);
          return {
            children: i ? r : (0, a.mergeChildMappings)(n, r),
            firstRender: !1,
          };
        }
        componentDidMount() {
          this._isMounted = !0;
          let { children: e } = this.state;
          if (this.props.transitionAppear)
            for (let t in e) e[t] && this.performAppear(t);
        }
        componentWillUnmount() {
          (this._isMounted = !1),
            (this._keyChildMapping = {}),
            (this.state.children = {});
        }
        componentDidUpdate(e, t) {
          if (e !== this.props) {
            let e = (0, a.getChildMapping)(this.props.children),
              n = t.children;
            if (
              (this.props.transitionEnter
                ? this._enqueueTransitions(e, n, this._keysToEnter)
                : this._keysToEnter.length && (this._keysToEnter = []),
              this.props.transitionLeave)
            )
              this._enqueueTransitions(n, e, this._keysToLeave);
            else {
              let t = [];
              this._enqueueTransitions(n, e, t);
              let i = (0, a.mergeChildMappings)(n, e);
              for (let e = 0, n = t.length; e < n; e++) delete i[t[e]];
              this._isMounted && this.setState({ children: i }),
                this._keysToLeave.length && (this._keysToLeave = []);
            }
          }
          if (this._keysToEnter.length) {
            let e = this._keysToEnter;
            (this._keysToEnter = []), e.forEach(this.performEnter, this);
          }
          if (this._keysToLeave.length) {
            let e = this._keysToLeave;
            (this._keysToLeave = []), e.forEach(this.performLeave, this);
          }
        }
        _enqueueTransitions(e, t, n) {
          for (let i in e) {
            let r = t && t.hasOwnProperty(i);
            e[i] && !r && !this._currentlyTransitioningKeys.has(i) && n.push(i);
          }
        }
        _perform(e, t, n) {
          let i =
            arguments.length > 3 && void 0 !== arguments[3] && arguments[3];
          this._currentlyTransitioningKeys.add(e);
          let r = () => this._handleDonePerform(e, n, i),
            s = this._keyChildMapping[e];
          null != s && null != s[t] ? s[t](r) : r();
        }
        _handleDonePerform(e, t) {
          let n =
              arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
            i = this._keyChildMapping[e];
          null != i && null != i[t] && i[t](),
            this._currentlyTransitioningKeys.delete(e);
          let r = (0, a.getChildMapping)(this.props.children);
          n
            ? null != r && r.hasOwnProperty(e)
              ? this.performEnter(e)
              : this.setState(t => {
                  let { children: n } = t,
                    { [e]: i, ...r } = n;
                  return { children: r };
                })
            : (null == r || !r.hasOwnProperty(e)) && this.performLeave(e);
        }
        performAppear(e) {
          this._perform(e, "componentWillAppear", "componentDidAppear");
        }
        performEnter(e) {
          this._perform(e, "componentWillEnter", "componentDidEnter");
        }
        performLeave(e) {
          this._perform(e, "componentWillLeave", "componentDidLeave", !0);
        }
        render() {
          let { childFactory: t, component: n } = this.props,
            { children: i } = this.state,
            r = [];
          for (let e in i) {
            let n = i[e];
            null != n &&
              s.isValidElement(n) &&
              r.push(
                s.cloneElement(null == t ? n : t(n), {
                  ref: t => this.addChildRef(e, t),
                  key: e,
                })
              );
          }
          let a = { ...this.props };
          return (
            Object.keys(e.defaultProps).forEach(e => delete a[e]),
            s.createElement(n, a, r)
          );
        }
        constructor(e) {
          super(e),
            (this._keyChildMapping = {}),
            (this.addChildRef = (e, t) => {
              this._keyChildMapping[e] = t;
            }),
            (this.state = {
              children: (0, a.getChildMapping)(e.children),
              firstRender: !0,
            }),
            (this._currentlyTransitioningKeys = new Set()),
            (this._keysToEnter = []),
            (this._keysToLeave = []),
            (this._isMounted = !1);
        }
      }).defaultProps = {
        component: "span",
        transitionAppear: !0,
        transitionLeave: !0,
        transitionEnter: !0,
        childFactory: null,
      }),
        (r = i);
    },
    627929: function (e, t, n) {
      "use strict";
      function i(e) {
        return e;
      }
      function r(e, t) {
        return e.hasOwnProperty(t);
      }
      function s(e, t) {
        return Object.setPrototypeOf(e, t.prototype);
      }
      n.r(t),
        n.d(t, {
          exact: function () {
            return i;
          },
          hasOwnProperty: function () {
            return r;
          },
          dangerouslyCast: function () {
            return s;
          },
        });
    },
    997921: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return l;
          },
        }),
        n("222007");
      var i = n("37983"),
        r = n("884691");
      let s = "file-input",
        a = e => ({
          position: "absolute",
          top: 0,
          left: 0,
          width: "100%",
          height: "100%",
          opacity: 0,
          cursor: e ? "not-allowed" : "pointer",
          fontSize: 0,
        });
      class o extends r.Component {
        render() {
          let {
            disabled: e,
            tabIndex: t,
            className: n,
            name: r,
            "aria-label": o,
            "aria-hidden": l,
          } = this.props;
          if (this.props.embedded)
            return (0, i.jsx)("div", {
              role: "button",
              style: a(e),
              className: n || s,
              tabIndex: t,
              onKeyDown: e ? void 0 : this.handleNativeKeyDown,
              onClick: e ? void 0 : this.handleNativeClick,
              "aria-disabled": e,
              "aria-label": o,
              "aria-hidden": l || void 0,
            });
          {
            let u = "";
            return (
              this.props.filters &&
                (u = this.props.filters
                  .map(e => e.extensions.map(e => ".".concat(e)).join(","))
                  .join(",")),
              (0, i.jsx)("input", {
                style: a(e),
                className: n || s,
                disabled: e,
                type: "file",
                tabIndex: t,
                onMouseDown: this.handleBrowserInputMouseDown,
                onChange: this.props.onChange,
                multiple: this.props.multiple,
                accept: u,
                name: r,
                "aria-label": o,
                "aria-hidden": l || void 0,
                ref: e => (this._input = e),
              })
            );
          }
        }
        constructor(...e) {
          super(...e),
            (this._input = null),
            (this.activateUploadDialogue = () => {
              this.props.embedded
                ? this.handleNativeClick()
                : this._input && this._input.click();
            }),
            (this.handleNativeClick = () => {
              this.props.handleNativeClick &&
                this.props.handleNativeClick(this.props);
            }),
            (this.handleNativeKeyDown = e => {
              (" " === e.key || "Enter" === e.key) && this.handleNativeClick();
            }),
            (this.handleBrowserInputMouseDown = e => {
              e.currentTarget.value = null;
            });
        }
      }
      o.defaultProps = { multiple: !1, disabled: !1, tabIndex: 0 };
      var l = o;
    },
    394846: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          isTablet: function () {
            return m;
          },
          isMobile: function () {
            return T;
          },
          isIOSWeb: function () {
            return g;
          },
        }),
        n("222007");
      var i,
        r,
        s,
        a,
        o,
        l,
        u,
        c,
        d,
        f,
        E = n("383536"),
        p = n.n(E);
      let h = new Set(["iPad", "Kindle", "Kindle Fire", "Nook", "PlayBook"]),
        _ = new Set(["Android", "iOS", "Windows Phone"]),
        S =
          (null === (r = window) || void 0 === r
            ? void 0
            : null === (i = r.navigator) || void 0 === i
              ? void 0
              : i.platform) === "MacIntel" &&
          void 0 !==
            (null === (a = window) || void 0 === a
              ? void 0
              : null === (s = a.navigator) || void 0 === s
                ? void 0
                : s.standalone) &&
          (null === (l = window) || void 0 === l
            ? void 0
            : null === (o = l.navigator) || void 0 === o
              ? void 0
              : o.maxTouchPoints) > 1,
        m = h.has(null !== (d = p.product) && void 0 !== d ? d : "") || S,
        T =
          !m &&
          _.has(
            null !==
              (f =
                null == p
                  ? void 0
                  : null === (u = p.os) || void 0 === u
                    ? void 0
                    : u.family) && void 0 !== f
              ? f
              : ""
          ),
        g =
          (null == p
            ? void 0
            : null === (c = p.os) || void 0 === c
              ? void 0
              : c.family) === "iOS";
    },
    631734: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("70102");
      var i = class e extends Error {
        constructor(e, t) {
          super(t),
            "closeCode" in e
              ? ((this.code = e.closeCode), (this.closeCode = e.closeCode))
              : ((this.code = e.errorCode), (this.errorCode = e.errorCode)),
            (this.message = t),
            (this.name = "RPCError");
        }
      };
    },
    171718: function (e, t, n) {
      "use strict";
      let i, r;
      n.r(t),
        n.d(t, {
          default: function () {
            return T;
          },
        }),
        n("222007"),
        n("808653");
      var s = n("95410"),
        a = n("843455");
      let o = "dQw4w9WgXcQ:";
      function l(e) {
        return [...e].reduce((e, t) => {
          let [n, i] = t;
          return (e[n] = i), e;
        }, {});
      }
      let u = null,
        c = window.DiscordNative;
      null != c && (u = c.safeStorage);
      let d = !1,
        f = {},
        E = {},
        p = !1,
        h = !1;
      function _() {
        if (p) {
          s.default.remove(a.TOKEN_KEY), s.default.remove(a.TOKENS_KEY);
          return;
        }
        null != r
          ? s.default.set(a.TOKEN_KEY, r)
          : s.default.remove(a.TOKEN_KEY),
          s.default.set(a.TOKENS_KEY, E);
      }
      function S(e) {
        return null == e || 0 === e.length
          ? { decryptedToken: null, wasEncrypted: !1 }
          : (null == u ? void 0 : u.isEncryptionAvailable()) && e.startsWith(o)
            ? {
                decryptedToken: u.decryptString(e.substring(o.length)),
                wasEncrypted: !0,
              }
            : { decryptedToken: e, wasEncrypted: !1 };
      }
      function m(e) {
        return (null == u ? void 0 : u.isEncryptionAvailable()) &&
          !e.startsWith(o)
          ? "".concat(o).concat(u.encryptString(e))
          : e;
      }
      var T = {
        init() {
          if (h) return;
          (r = s.default.get(a.TOKEN_KEY)),
            (E = s.default.get(a.TOKENS_KEY) || {});
          let { decryptedToken: e, wasEncrypted: t } = S(r);
          (d = t),
            (i = e),
            (f = l(
              Object.entries(E)
                .map(e => {
                  let [t, n] = e,
                    { decryptedToken: i, wasEncrypted: r } = S(n);
                  return (d = r || d), [t, i];
                })
                .filter(e => {
                  let [t, n] = e;
                  return null != n;
                })
            )),
            (h = !0);
        },
        getToken(e) {
          return (this.init(), null != e) ? f[e] : i;
        },
        setToken(e, t) {
          if (null == e) {
            this.removeToken(t);
            return;
          }
          (i = e),
            null != t && (f[t] = e),
            d ? this.encryptAndStoreTokens() : ((r = i), (E = f), _());
        },
        hideToken() {
          !p && ((p = !0), _());
        },
        showToken() {
          p && ((p = !1), _());
        },
        removeToken(e) {
          let t = i;
          null != e && ((t = f[e]), delete f[e], delete E[e]),
            t === i && ((i = null), (r = null)),
            _();
        },
        encryptAndStoreTokens() {
          (null == u ? void 0 : u.isEncryptionAvailable())
            ? (null != i && (r = m(i)),
              (E = l(
                Object.entries(f).map(e => {
                  let [t, n] = e;
                  return [t, m(n)];
                })
              )),
              (d = !0))
            : ((r = i), (E = f)),
            _();
        },
      };
    },
    266088: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          ApplicationOverlayMethodFlags: function () {
            return i;
          },
        }),
        ((r = i || (i = {}))[(r.DEFAULT = 0)] = "DEFAULT"),
        (r[(r.OUT_OF_PROCESS = 1)] = "OUT_OF_PROCESS");
    },
    411916: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          DesignIds: function () {
            return i;
          },
        }),
        ((r = i || (i = {}))[(r.CLASSIC_IA = 0)] = "CLASSIC_IA"),
        (r[(r.DESIGN_IA = 1)] = "DESIGN_IA"),
        (r[(r.DESIGN_TABS_IA = 2)] = "DESIGN_TABS_IA");
    },
    482402: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          ForumLayout: function () {
            return i;
          },
        }),
        n("222007"),
        ((r = i || (i = {}))[(r.DEFAULT = 0)] = "DEFAULT"),
        (r[(r.LIST = 1)] = "LIST"),
        (r[(r.GRID = 2)] = "GRID");
    },
    611221: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          GuildFeedItemTypes: function () {
            return i;
          },
        }),
        n("222007"),
        ((r = i || (i = {})).MESSAGE = "message"),
        (r.FORUM_POST = "forum_post"),
        (r.MESSAGE_BUNDLE = "message_bundle"),
        (r.CONVERSATION = "conversation");
    },
    561467: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          Notifications: function () {
            return i;
          },
        }),
        ((r = i || (i = {}))[(r.StreamNotificationsGuildMaxSize = 50)] =
          "StreamNotificationsGuildMaxSize");
    },
    335710: function (e, t, n) {
      "use strict";
      var i, r;
      n.r(t),
        n.d(t, {
          ThreadSortOrder: function () {
            return i;
          },
        }),
        n("222007"),
        ((r = i || (i = {}))[(r.LATEST_ACTIVITY = 0)] = "LATEST_ACTIVITY"),
        (r[(r.CREATION_DATE = 1)] = "CREATION_DATE");
    },
    111749: function (e, t, n) {
      "use strict";
      function i() {
        for (var e = arguments.length, t = Array(e), n = 0; n < e; n++)
          t[n] = arguments[n];
        for (let e of t) if (null != e && e) return e;
      }
      n.r(t),
        n.d(t, {
          getFirstTruthyValue: function () {
            return i;
          },
        }),
        n("222007");
    },
    53452: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          IS_APP_COMPATIBLE_BROWSER: function () {
            return l;
          },
          BROWSER_SUPPORTS_VOICE: function () {
            return u;
          },
          BROWSER_SUPPORTS_VIDEO: function () {
            return c;
          },
          BROWSER_SUPPORTS_UNIFIED_PLAN: function () {
            return d;
          },
          BROWSER_SUPPORTS_DIAGNOSTICS: function () {
            return f;
          },
          BROWSER_SUPPORTS_CONNECTION_STATE: function () {
            return E;
          },
        });
      var i,
        r = n("383536"),
        s = n.n(r);
      let a = parseInt(null !== (i = s.version) && void 0 !== i ? i : "0", 10),
        o = void 0 !== s.ua && s.ua.indexOf("OculusBrowser") > -1,
        l = (() => {
          if (null == window.WebSocket) return !1;
          switch (s.name) {
            case "IE":
            case "Microsoft Edge":
              return a >= 15;
            default:
              return !0;
          }
        })(),
        u =
          o ||
          ("Firefox" === s.name && a >= 80) ||
          ("Chrome" === s.name && a >= 37) ||
          ("Opera" === s.name && a >= 66) ||
          ("Node.js" === s.name && a >= 6) ||
          ("Electron" === s.name && a >= 1) ||
          ("Safari" === s.name && a >= 13) ||
          ("Microsoft Edge" === s.name && a >= 37),
        c =
          "Chrome" === s.name ||
          "Safari" === s.name ||
          ("Firefox" === s.name && a >= 80) ||
          "Opera" === s.name ||
          "Microsoft Edge" === s.name,
        d =
          o ||
          ("Firefox" === s.name && a >= 73) ||
          ("Safari" === s.name && a >= 13) ||
          ("Chrome" === s.name && a >= 80) ||
          ("Microsoft Edge" === s.name && a >= 80),
        f =
          ("Chrome" === s.name && a >= 58) ||
          ("Safari" === s.name && a >= 15) ||
          ("Firefox" === s.name && a >= 108),
        E =
          ("Chrome" === s.name && a >= 72) ||
          ("Safari" === s.name && a >= 11) ||
          ("Opera" === s.name && a >= 60) ||
          ("Microsoft Edge" === s.name && a >= 79);
    },
    988025: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          formatPrice: function () {
            return a;
          },
        }),
        n("70102");
      var i = n("472331"),
        r = n.n(i),
        s = n("843455");
      let a = function (e, t, n) {
          let i =
              arguments.length > 3 && void 0 !== arguments[3]
                ? arguments[3]
                : {},
            { convertToMajorUnits: r = !0, ...s } = i,
            a = Intl.NumberFormat(n, { style: "currency", currency: t, ...s });
          return a.format(r ? l(e, t) : e);
        },
        o = {
          [s.CurrencyCodes.AED]: 2,
          [s.CurrencyCodes.AFN]: 2,
          [s.CurrencyCodes.ALL]: 2,
          [s.CurrencyCodes.AMD]: 2,
          [s.CurrencyCodes.ANG]: 2,
          [s.CurrencyCodes.AOA]: 2,
          [s.CurrencyCodes.ARS]: 2,
          [s.CurrencyCodes.AUD]: 2,
          [s.CurrencyCodes.AWG]: 2,
          [s.CurrencyCodes.AZN]: 2,
          [s.CurrencyCodes.BAM]: 2,
          [s.CurrencyCodes.BBD]: 2,
          [s.CurrencyCodes.BDT]: 2,
          [s.CurrencyCodes.BGN]: 2,
          [s.CurrencyCodes.BHD]: 3,
          [s.CurrencyCodes.BIF]: 0,
          [s.CurrencyCodes.BMD]: 2,
          [s.CurrencyCodes.BND]: 2,
          [s.CurrencyCodes.BOB]: 2,
          [s.CurrencyCodes.BOV]: 2,
          [s.CurrencyCodes.BRL]: 2,
          [s.CurrencyCodes.BSD]: 2,
          [s.CurrencyCodes.BTN]: 2,
          [s.CurrencyCodes.BWP]: 2,
          [s.CurrencyCodes.BYR]: 0,
          [s.CurrencyCodes.BYN]: 2,
          [s.CurrencyCodes.BZD]: 2,
          [s.CurrencyCodes.CAD]: 2,
          [s.CurrencyCodes.CDF]: 2,
          [s.CurrencyCodes.CHE]: 2,
          [s.CurrencyCodes.CHF]: 2,
          [s.CurrencyCodes.CHW]: 2,
          [s.CurrencyCodes.CLF]: 0,
          [s.CurrencyCodes.CLP]: 0,
          [s.CurrencyCodes.CNY]: 2,
          [s.CurrencyCodes.COP]: 2,
          [s.CurrencyCodes.COU]: 2,
          [s.CurrencyCodes.CRC]: 2,
          [s.CurrencyCodes.CUC]: 2,
          [s.CurrencyCodes.CUP]: 2,
          [s.CurrencyCodes.CVE]: 2,
          [s.CurrencyCodes.CZK]: 2,
          [s.CurrencyCodes.DJF]: 0,
          [s.CurrencyCodes.DKK]: 2,
          [s.CurrencyCodes.DOP]: 2,
          [s.CurrencyCodes.DZD]: 2,
          [s.CurrencyCodes.EGP]: 2,
          [s.CurrencyCodes.ERN]: 2,
          [s.CurrencyCodes.ETB]: 2,
          [s.CurrencyCodes.EUR]: 2,
          [s.CurrencyCodes.FJD]: 2,
          [s.CurrencyCodes.FKP]: 2,
          [s.CurrencyCodes.GBP]: 2,
          [s.CurrencyCodes.GEL]: 2,
          [s.CurrencyCodes.GHS]: 2,
          [s.CurrencyCodes.GIP]: 2,
          [s.CurrencyCodes.GMD]: 2,
          [s.CurrencyCodes.GNF]: 0,
          [s.CurrencyCodes.GTQ]: 2,
          [s.CurrencyCodes.GYD]: 2,
          [s.CurrencyCodes.HKD]: 2,
          [s.CurrencyCodes.HNL]: 2,
          [s.CurrencyCodes.HRK]: 2,
          [s.CurrencyCodes.HTG]: 2,
          [s.CurrencyCodes.HUF]: 2,
          [s.CurrencyCodes.IDR]: 2,
          [s.CurrencyCodes.ILS]: 2,
          [s.CurrencyCodes.INR]: 2,
          [s.CurrencyCodes.IQD]: 3,
          [s.CurrencyCodes.IRR]: 2,
          [s.CurrencyCodes.ISK]: 0,
          [s.CurrencyCodes.JMD]: 2,
          [s.CurrencyCodes.JOD]: 3,
          [s.CurrencyCodes.JPY]: 0,
          [s.CurrencyCodes.KES]: 2,
          [s.CurrencyCodes.KGS]: 2,
          [s.CurrencyCodes.KHR]: 2,
          [s.CurrencyCodes.KMF]: 0,
          [s.CurrencyCodes.KPW]: 2,
          [s.CurrencyCodes.KRW]: 0,
          [s.CurrencyCodes.KWD]: 3,
          [s.CurrencyCodes.KYD]: 2,
          [s.CurrencyCodes.KZT]: 2,
          [s.CurrencyCodes.LAK]: 2,
          [s.CurrencyCodes.LBP]: 2,
          [s.CurrencyCodes.LKR]: 2,
          [s.CurrencyCodes.LRD]: 2,
          [s.CurrencyCodes.LSL]: 2,
          [s.CurrencyCodes.LTL]: 2,
          [s.CurrencyCodes.LVL]: 2,
          [s.CurrencyCodes.LYD]: 3,
          [s.CurrencyCodes.MAD]: 2,
          [s.CurrencyCodes.MDL]: 2,
          [s.CurrencyCodes.MGA]: 2,
          [s.CurrencyCodes.MKD]: 2,
          [s.CurrencyCodes.MMK]: 2,
          [s.CurrencyCodes.MNT]: 2,
          [s.CurrencyCodes.MOP]: 2,
          [s.CurrencyCodes.MRO]: 2,
          [s.CurrencyCodes.MUR]: 2,
          [s.CurrencyCodes.MVR]: 2,
          [s.CurrencyCodes.MWK]: 2,
          [s.CurrencyCodes.MXN]: 2,
          [s.CurrencyCodes.MXV]: 2,
          [s.CurrencyCodes.MYR]: 2,
          [s.CurrencyCodes.MZN]: 2,
          [s.CurrencyCodes.NAD]: 2,
          [s.CurrencyCodes.NGN]: 2,
          [s.CurrencyCodes.NIO]: 2,
          [s.CurrencyCodes.NOK]: 2,
          [s.CurrencyCodes.NPR]: 2,
          [s.CurrencyCodes.NZD]: 2,
          [s.CurrencyCodes.OMR]: 3,
          [s.CurrencyCodes.PAB]: 2,
          [s.CurrencyCodes.PEN]: 2,
          [s.CurrencyCodes.PGK]: 2,
          [s.CurrencyCodes.PHP]: 2,
          [s.CurrencyCodes.PKR]: 2,
          [s.CurrencyCodes.PLN]: 2,
          [s.CurrencyCodes.PYG]: 0,
          [s.CurrencyCodes.QAR]: 2,
          [s.CurrencyCodes.RON]: 2,
          [s.CurrencyCodes.RSD]: 2,
          [s.CurrencyCodes.RUB]: 2,
          [s.CurrencyCodes.RWF]: 0,
          [s.CurrencyCodes.SAR]: 2,
          [s.CurrencyCodes.SBD]: 2,
          [s.CurrencyCodes.SCR]: 2,
          [s.CurrencyCodes.SDG]: 2,
          [s.CurrencyCodes.SEK]: 2,
          [s.CurrencyCodes.SGD]: 2,
          [s.CurrencyCodes.SHP]: 2,
          [s.CurrencyCodes.SLL]: 2,
          [s.CurrencyCodes.SOS]: 2,
          [s.CurrencyCodes.SRD]: 2,
          [s.CurrencyCodes.SSP]: 2,
          [s.CurrencyCodes.STD]: 2,
          [s.CurrencyCodes.SVC]: 2,
          [s.CurrencyCodes.SYP]: 2,
          [s.CurrencyCodes.SZL]: 2,
          [s.CurrencyCodes.THB]: 2,
          [s.CurrencyCodes.TJS]: 2,
          [s.CurrencyCodes.TMT]: 2,
          [s.CurrencyCodes.TND]: 3,
          [s.CurrencyCodes.TOP]: 2,
          [s.CurrencyCodes.TRY]: 2,
          [s.CurrencyCodes.TTD]: 2,
          [s.CurrencyCodes.TWD]: 2,
          [s.CurrencyCodes.TZS]: 2,
          [s.CurrencyCodes.UAH]: 2,
          [s.CurrencyCodes.UGX]: 0,
          [s.CurrencyCodes.USD]: 2,
          [s.CurrencyCodes.USN]: 2,
          [s.CurrencyCodes.USS]: 2,
          [s.CurrencyCodes.UYI]: 0,
          [s.CurrencyCodes.UYU]: 2,
          [s.CurrencyCodes.UZS]: 2,
          [s.CurrencyCodes.VEF]: 2,
          [s.CurrencyCodes.VND]: 0,
          [s.CurrencyCodes.VUV]: 0,
          [s.CurrencyCodes.WST]: 2,
          [s.CurrencyCodes.XAF]: 0,
          [s.CurrencyCodes.XAG]: 0,
          [s.CurrencyCodes.XAU]: 0,
          [s.CurrencyCodes.XBA]: 0,
          [s.CurrencyCodes.XBB]: 0,
          [s.CurrencyCodes.XBC]: 0,
          [s.CurrencyCodes.XBD]: 0,
          [s.CurrencyCodes.XCD]: 2,
          [s.CurrencyCodes.XDR]: 0,
          [s.CurrencyCodes.XFU]: 0,
          [s.CurrencyCodes.XOF]: 0,
          [s.CurrencyCodes.XPD]: 0,
          [s.CurrencyCodes.XPF]: 0,
          [s.CurrencyCodes.XPT]: 0,
          [s.CurrencyCodes.XSU]: 0,
          [s.CurrencyCodes.XTS]: 0,
          [s.CurrencyCodes.XUA]: 0,
          [s.CurrencyCodes.YER]: 2,
          [s.CurrencyCodes.ZAR]: 2,
          [s.CurrencyCodes.ZMW]: 2,
          [s.CurrencyCodes.ZWL]: 2,
        },
        l = (e, t) => {
          let n = o[t];
          if (null == n) throw Error("Unexpected currency ".concat(t));
          let i = new r(e);
          return i.dividedBy(10 ** n).toNumber();
        };
    },
    249654: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          DISCORD_EPOCH: function () {
            return s;
          },
          default: function () {
            return l;
          },
        });
      var i = n("552442"),
        r = n.n(i);
      let s = 14200704e5;
      function a(e) {
        return Math.floor(Number(e) / 4194304) + s;
      }
      function o(e) {
        let t = e - s;
        return t <= 0 ? "0" : r(t).shiftLeft(22).toString();
      }
      var l = {
        age: function (e) {
          return Date.now() - a(e);
        },
        extractTimestamp: a,
        fromTimestamp: o,
        atPreviousMillisecond: function (e) {
          return o(a(e) - 1);
        },
        compare: function (e, t) {
          return e === t
            ? 0
            : null == t
              ? 1
              : null == e
                ? -1
                : e.length > t.length
                  ? 1
                  : e.length < t.length
                    ? -1
                    : e > t
                      ? 1
                      : -1;
        },
      };
    },
    595275: function (e, t, n) {
      "use strict";
      n.r(t),
        n.d(t, {
          default: function () {
            return i;
          },
        }),
        n("222007");
      var i,
        r = n("44170");
      i = class {
        on(e, t) {
          this.emitter.on(e, t);
        }
        off(e, t) {
          this.emitter.off(e, t);
        }
        once(e, t) {
          this.emitter.once(e, t);
        }
        addListener(e, t) {
          this.emitter.addListener(e, t);
        }
        removeListener(e, t) {
          this.emitter.removeListener(e, t);
        }
        removeAllListeners() {
          this.emitter.removeAllListeners();
        }
        emit(e) {
          for (
            var t = arguments.length, n = Array(t > 1 ? t - 1 : 0), i = 1;
            i < t;
            i++
          )
            n[i - 1] = arguments[i];
          this.emitter.emit(e, ...n);
        }
        emitUnsafe(e) {
          for (
            var t = arguments.length, n = Array(t > 1 ? t - 1 : 0), i = 1;
            i < t;
            i++
          )
            n[i - 1] = arguments[i];
          this.emitter.emit(e, ...n);
        }
        listenerCount(e) {
          return this.emitter.listenerCount(e);
        }
        constructor() {
          this.emitter = new r.EventEmitter();
        }
      };
    },
  },
]);
//# sourceMappingURL=41039.b90001a3b568e2889c0e.js.map
