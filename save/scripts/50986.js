(this.webpackChunkdiscord_app = this.webpackChunkdiscord_app || []).push([
  ["50986"],
  {
    661486: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return d;
          },
        });
      var a = s("193809");
      s("222007");
      var l = s("458960");
      class n {
        start() {
          return new Promise(e => {
            this.animation.start(() => {
              e();
            });
          });
        }
        stop() {
          this.animation.stop();
        }
        constructor(e) {
          (0, a._)(this, "animation", void 0), (this.animation = e);
        }
      }
      class i {
        _map(e) {
          return this.animations.map(e);
        }
        start() {
          return new Promise(e =>
            Promise.all(this._map(e => e.start())).then(() => e())
          );
        }
        stop() {
          this._map(e => e.stop());
        }
        constructor(e) {
          (0, a._)(this, "animations", void 0), (this.animations = e);
        }
      }
      class r {
        async start() {
          for (let e of ((this.stopped = !1), this.animations)) {
            if (this.stopped) return;
            await e.start();
          }
        }
        stop() {
          (this.stopped = !0), this.animations.map(e => e.stop());
        }
        constructor(e) {
          (0, a._)(this, "animations", void 0),
            (0, a._)(this, "stopped", !1),
            (this.animations = e);
        }
      }
      function o(e, t, s) {
        let a = s(e, { ...t });
        return new n(a);
      }
      var d = {
        ...l.default,
        timing: function (e, t) {
          return o(e, t, l.default.timing);
        },
        spring: function (e, t) {
          return o(e, t, l.default.spring);
        },
        parallel: function (e) {
          return new i(e);
        },
        sequence: function (e) {
          return new r(e);
        },
      };
    },
    816078: function (e, t, s) {
      "use strict";
      e.exports = s.p + "245acbd5bc5cdf8efda3.svg";
    },
    487663: function (e, t, s) {
      "use strict";
      e.exports = s.p + "860c39d4003b98a5ee9d.svg";
    },
    624563: function (e, t, s) {
      "use strict";
      e.exports = s.p + "9c746f60afcb24a0dad2.svg";
    },
    822460: function (e, t, s) {
      "use strict";
      e.exports = s.p + "f254c6193cace68df492.png";
    },
    517226: function (e, t, s) {
      "use strict";
      e.exports = s.p + "976cdf3f99d87f836402.svg";
    },
    325911: function (e, t, s) {
      "use strict";
      e.exports = s.p + "cdc3f4f6fbf3a0f0766f.svg";
    },
    138147: function (e, t, s) {
      "use strict";
      e.exports = s.p + "c65431f185feb7b00749.svg";
    },
    404807: function (e, t, s) {
      "use strict";
      e.exports = s.p + "295da3fc92e2adb1b852.svg";
    },
    124495: function (e, t, s) {
      "use strict";
      e.exports = s.p + "c8be48745cf680093019.svg";
    },
    250719: function (e, t, s) {
      "use strict";
      e.exports = s.p + "882143336a13f77e3a08.svg";
    },
    120019: function (e, t, s) {
      "use strict";
      e.exports = s.p + "295c032bd70434bda5d8.svg";
    },
    817616: function (e, t, s) {
      "use strict";
      e.exports = s.p + "b3ea1433f1f68fd7809c.png";
    },
    731106: function (e, t, s) {
      "use strict";
      e.exports = s.p + "fce1c7b9c71d41252145.png";
    },
    271696: function (e, t, s) {
      "use strict";
      e.exports = s.p + "52b40aa6df2dd0a3dfdd.png";
    },
    694947: function (e, t, s) {
      "use strict";
      e.exports = s.p + "8883c093e36f67e6a59a.png";
    },
    94944: function (e, t, s) {
      "use strict";
      e.exports = s.p + "14ec46803da2a8bdcb2c.svg";
    },
    73152: function (e, t, s) {
      "use strict";
      e.exports = s.p + "b2ea07d616b569c2021e.svg";
    },
    614403: function (e, t, s) {
      "use strict";
      e.exports = s.p + "daa9fd6ab647aa60c68d.svg";
    },
    545204: function (e, t, s) {
      "use strict";
      e.exports = s.p + "11a5a766e03a4f87415d.svg";
    },
    196318: function (e, t, s) {
      "use strict";
      e.exports = s.p + "fa9e6a5432869821de83.svg";
    },
    243704: function (e, t, s) {
      "use strict";
      e.exports = s.p + "6418419524dd1e583beb.svg";
    },
    89734: function (e, t, s) {
      "use strict";
      e.exports = s.p + "c906f91bb11baf15eac8.svg";
    },
    170456: function (e, t, s) {
      "use strict";
      e.exports = s.p + "cf8f9096a9322f2ae0d7.svg";
    },
    90578: function (e, t, s) {
      "use strict";
      e.exports = s.p + "5e3480eff150b1cb323e.svg";
    },
    283246: function (e, t, s) {
      "use strict";
      e.exports = s.p + "31618a30874bb5d09f95.svg";
    },
    419625: function (e, t, s) {
      "use strict";
      e.exports = s.p + "2036e43d9798d9a60f96.svg";
    },
    117869: function (e, t, s) {
      "use strict";
      e.exports = s.p + "b092d87a49e2b1432f17.svg";
    },
    452593: function (e, t, s) {
      "use strict";
      e.exports = s.p + "1280b2198e0ad7511fd5.svg";
    },
    572701: function (e, t, s) {
      "use strict";
      e.exports = s.p + "371acbfb1b609a1bf9b8.svg";
    },
    79189: function (e, t, s) {
      "use strict";
      e.exports = s.p + "b83041758680631a384f.png";
    },
    282725: function (e, t, s) {
      "use strict";
      e.exports = s.p + "a077cd5eaa129a095b3a.png";
    },
    411147: function (e, t, s) {
      "use strict";
      e.exports = s.p + "98e018ece3aa164cef4d.svg";
    },
    46521: function (e, t, s) {
      "use strict";
      e.exports = s.p + "e2b1c69e79fb59b29481.png";
    },
    128789: function (e, t, s) {
      "use strict";
      e.exports = s.p + "62c0c18dac163bc76cd0.png";
    },
    201894: function (e, t, s) {
      "use strict";
      e.exports = s.p + "8a5c207539865fc39865.svg";
    },
    722838: function (e, t, s) {
      "use strict";
      e.exports = s.p + "cbd97789cdd41a220177.svg";
    },
    497002: function (e, t, s) {
      "use strict";
      e.exports = s.p + "4a2ab7afd3c7f673762f.svg";
    },
    437250: function (e, t, s) {
      "use strict";
      e.exports = s.p + "f27cfb29c21d31f284e6.svg";
    },
    382531: function (e, t, s) {
      "use strict";
      e.exports = s.p + "3e8b8afbebd865b10b96.svg";
    },
    865332: function (e, t, s) {
      "use strict";
      e.exports = s.p + "835db338c684645fddf3.svg";
    },
    627150: function (e, t, s) {
      "use strict";
      e.exports = s.p + "191c35bd94f2e1c162d5.svg";
    },
    370730: function (e, t, s) {
      "use strict";
      e.exports = s.p + "158e3f0d5ad031e7efb5.svg";
    },
    350233: function (e, t, s) {
      "use strict";
      e.exports = s.p + "6569543dccda2dddd838.svg";
    },
    439044: function (e, t, s) {
      "use strict";
      e.exports = s.p + "129f0ecf496bf91e8ef2.svg";
    },
    912839: function (e, t, s) {
      "use strict";
      e.exports = s.p + "03b3a109f3d4403d05fa.svg";
    },
    600719: function (e, t, s) {
      "use strict";
      e.exports = s.p + "a9120971f0d017714fd9.svg";
    },
    419143: function (e, t, s) {
      "use strict";
      e.exports = s.p + "63ddc57ed01c730ef68f.svg";
    },
    935855: function (e, t, s) {
      "use strict";
      e.exports = s.p + "cf8f9096a9322f2ae0d7.svg";
    },
    847598: function (e, t, s) {
      "use strict";
      e.exports = s.p + "5e3480eff150b1cb323e.svg";
    },
    330808: function (e, t, s) {
      "use strict";
      e.exports = s.p + "36c741c811b044d2a95d.svg";
    },
    424596: function (e, t, s) {
      "use strict";
      e.exports = s.p + "ae7e6485583bcfc6a9d2.svg";
    },
    284776: function (e, t, s) {
      "use strict";
      e.exports = s.p + "81712e27207ad5534d32.svg";
    },
    101332: function (e, t, s) {
      "use strict";
      e.exports = s.p + "52061d3272fc0ea492b2.svg";
    },
    831153: function (e, t, s) {
      "use strict";
      e.exports = s.p + "37150460409f3e18c3c4.svg";
    },
    353773: function (e, t, s) {
      "use strict";
      e.exports = s.p + "ffef8985f5eba31d79e6.svg";
    },
    432392: function (e, t, s) {
      "use strict";
      e.exports = s.p + "2deaf53c0cab56c466c6.svg";
    },
    933861: function (e, t, s) {
      "use strict";
      e.exports = s.p + "673295e1c0b41d2bf857.svg";
    },
    877026: function (e, t, s) {
      "use strict";
      e.exports = s.p + "1b6b9fb57639d9c4959e.svg";
    },
    775113: function (e, t, s) {
      "use strict";
      e.exports = s.p + "0733573b7fc6d421086c.svg";
    },
    896122: function (e, t, s) {
      "use strict";
      e.exports = s.p + "33c4908a99fe0a73e9f0.svg";
    },
    352683: function (e, t, s) {
      "use strict";
      e.exports = s.p + "f1b802e72e04293e5734.svg";
    },
    380476: function (e, t, s) {
      "use strict";
      e.exports = s.p + "cb34f73199ef5f4eb1b7.svg";
    },
    611327: function (e, t, s) {
      "use strict";
      e.exports = s.p + "990fb9b22cdb83e2e316.svg";
    },
    508023: function (e, t, s) {
      "use strict";
      e.exports = s.p + "2258b71d681f69091f18.svg";
    },
    117520: function (e, t, s) {
      "use strict";
      e.exports = s.p + "82e2e9449762efa594ba.svg";
    },
    457737: function (e, t, s) {
      "use strict";
      e.exports = s.p + "f64b5d3135eef2e67d1a.svg";
    },
    799036: function (e, t, s) {
      "use strict";
      e.exports = s.p + "ba7f9552758881a24749.svg";
    },
    195238: function (e, t, s) {
      "use strict";
      e.exports = s.p + "f7be6b1bb0860438add8.svg";
    },
    444964: function (e, t, s) {
      "use strict";
      e.exports = s.p + "a4d92443ebc546785bc8.svg";
    },
    373558: function (e, t, s) {
      "use strict";
      e.exports = s.p + "5b2a993ac58bc8384645.svg";
    },
    119134: function (e, t, s) {
      "use strict";
      e.exports = s.p + "4f6d8a2c4ded92506d76.svg";
    },
    869917: function (e, t, s) {
      "use strict";
      e.exports = s.p + "564e2f9bcaf2e2001625.svg";
    },
    936815: function (e, t, s) {
      "use strict";
      e.exports = s.p + "aad2fcfc8dd4da98bd37.svg";
    },
    319765: function (e, t, s) {
      "use strict";
      e.exports = s.p + "d763245961e240231735.svg";
    },
    133765: function (e, t, s) {
      "use strict";
      e.exports = s.p + "e23c132f39fd58143062.png";
    },
    138131: function (e, t, s) {
      "use strict";
      e.exports = s.p + "cf7ca4c20619518f1851.png";
    },
    52846: function (e, t, s) {
      "use strict";
      e.exports = s.p + "89eb36909a16d4522525.svg";
    },
    656011: function (e, t, s) {
      "use strict";
      e.exports = s.p + "770c18c3faeeac2bb20f.png";
    },
    845929: function (e, t, s) {
      "use strict";
      e.exports = s.p + "bc89bb1eb86b914e03de.png";
    },
    144582: function (e, t, s) {
      "use strict";
      e.exports = s.p + "1b50730377ea28af600f.png";
    },
    655772: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return u;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("669491"),
        n = s("77078"),
        i = s("68238"),
        r = s("69080"),
        o = s("782340"),
        d = s("332432"),
        u = e => {
          let {
              title: t,
              subtext: s = o.default.Messages.NOT_AVAILABLE,
              localizedNumber: u,
              isTrendingUp: c,
              isTrendingDown: E,
              tooltipText: _,
            } = e,
            I = "string" == typeof _ ? _ : t,
            T =
              null != _
                ? (0, a.jsx)(n.Tooltip, {
                    text: _,
                    position: "top",
                    "aria-label": I,
                    children: e =>
                      (0, a.jsx)(i.default, {
                        ...e,
                        className: d.infoIcon,
                        height: 16,
                        width: 16,
                      }),
                  })
                : null;
          return (0, a.jsxs)("div", {
            className: d.analyticsCard,
            children: [
              (0, a.jsxs)(n.FormTitle, {
                className: d.analyticsCardTitle,
                children: [t, T],
              }),
              (0, a.jsx)("div", {
                className: d.analyticsCardContent,
                children: (0, a.jsx)(n.Heading, {
                  className:
                    null != u
                      ? d.analyticsCardNumber
                      : d.analyticsCardNumberNotAvailable,
                  variant: "heading-xl/semibold",
                  children: null != u ? u : o.default.Messages.NOT_AVAILABLE,
                }),
              }),
              (0, a.jsxs)("div", {
                className: d.analyticsCardArrowSubText,
                children: [
                  c
                    ? (0, a.jsx)(r.default, {
                        className: d.trendingArrow,
                        color: l.default.unsafe_rawColors.GREEN_360.css,
                        "aria-label": o.default.Messages.TRENDING_ARROW_UP,
                        width: 14,
                        height: 12,
                      })
                    : null,
                  E
                    ? (0, a.jsx)(r.default, {
                        className: d.trendingArrowIconDown,
                        color: l.default.unsafe_rawColors.RED_400.css,
                        "aria-label": o.default.Messages.TRENDING_ARROW_DOWN,
                        width: 14,
                        height: 12,
                      })
                    : null,
                  (0, a.jsx)(n.Text, {
                    variant: "text-xs/normal",
                    children: s,
                  }),
                ],
              }),
            ],
          });
        };
    },
    465395: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return u;
          },
        }),
        s("222007"),
        s("808653"),
        s("424973");
      var a = s("37983"),
        l = s("884691"),
        n = s("448105"),
        i = s.n(n),
        r = s("77078"),
        o = s("6466");
      class d extends l.PureComponent {
        render() {
          let {
            label: e,
            value: t,
            popoutProps: s,
            renderValue: l,
            className: n,
          } = this.props;
          return (0, a.jsx)(r.Popout, {
            ...s,
            renderPopout: this.renderPopout,
            children: s =>
              (0, a.jsx)(r.Clickable, {
                ...s,
                className: n,
                children: (0, a.jsx)(o.default, {
                  label: e,
                  value: t,
                  renderValue: l,
                }),
              }),
          });
        }
        constructor(...e) {
          super(...e),
            (this.renderItems = e => {
              let { items: t, renderItem: s } = this.props;
              return t.reduce(
                (t, a, l) => (
                  i(e.toLowerCase(), a.label.toLowerCase()) && t.push(s(a, l)),
                  t
                ),
                []
              );
            }),
            (this.renderPopout = e => {
              let { closePopout: t } = e,
                {
                  placeholder: s,
                  popoutClassName: l,
                  onChange: n,
                  value: i,
                } = this.props;
              return (0, a.jsx)(r.ComboboxPopout, {
                className: l,
                placeholder: s,
                value: new Set([i.value]),
                onChange: n,
                onClose: t,
                children: e => this.renderItems(e),
              });
            });
        }
      }
      var u = d;
    },
    828116: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("77078"),
        o = s("945330"),
        d = s("49111"),
        u = s("737614"),
        c = e => {
          let {
              className: t,
              tags: s,
              value: n,
              onRemoveTag: c,
              onAddTag: E,
              maxTaxLength: _,
              maxTags: I,
              disabled: T,
              placeholder: f,
              ...S
            } = e,
            [m, N] = l.useState(null != n ? n : ""),
            g = s.map((e, t) =>
              (0, a.jsxs)(
                "span",
                {
                  className: i(u.tag, { [u.disabledTag]: T }),
                  children: [
                    e,
                    !T &&
                      (0, a.jsx)(r.Clickable, {
                        className: u.closeWrapper,
                        onClick: () => c(t),
                        children: (0, a.jsx)(o.default, {
                          width: 16,
                          height: 16,
                          className: u.close,
                        }),
                      }),
                  ],
                },
                t
              )
            ),
            h = l.useCallback(() => {
              let e = m.trim();
              if (0 !== e.length)
                (null == I || !(s.length >= I)) && (E(e), N(""));
            }, [m, I, E, s.length]),
            C = l.useCallback(
              e => {
                switch (e.keyCode) {
                  case d.KeyboardKeys.BACKSPACE:
                    0 === m.length &&
                      s.length > 0 &&
                      (e.preventDefault(),
                      e.stopPropagation(),
                      c(s.length - 1));
                    break;
                  case d.KeyboardKeys.ENTER:
                  case d.KeyboardKeys.TAB:
                  case d.KeyboardKeys.COMMA:
                    e.preventDefault(), e.stopPropagation(), h();
                }
              },
              [h, m.length, c, s.length]
            );
          return (0, a.jsxs)("div", {
            className: i(t, u.inputWrapper, { [u.disabled]: T }),
            children: [
              g,
              (0, a.jsx)(r.TextInput, {
                className: u.inputOuter,
                inputClassName: u.inputInner,
                ...S,
                value: m,
                onKeyDown: C,
                onChange: N,
                maxLength: _,
                disabled: T,
                onBlur: h,
                placeholder: f,
              }),
            ],
          });
        };
    },
    349389: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("160864"),
        n = s("527382"),
        i = s("782340"),
        r = function (e) {
          let { className: t, style: s, onDrop: r } = e;
          return (0, a.jsx)(l.default, {
            className: t,
            style: s,
            title: i.default.Messages.UPLOAD_EMOJI,
            description: i.default.Messages.UPLOAD_EMOJI_INSTRUCTIONS,
            icons: n.EMOJI_FILE_UPLOAD_ICONS,
            onDrop: r,
          });
        };
    },
    472612: function (e, t, s) {
      "use strict";
      s.r(t);
      var a = s("701509");
      s.es(a, t);
    },
    859670: function (e, t, s) {
      "use strict";
      s.r(t);
      var a = s("29244");
      s.es(a, t);
    },
    372167: function (e, t, s) {
      "use strict";
      s.r(t);
      var a = s("525387");
      s.es(a, t);
    },
    860942: function (e, t, s) {
      "use strict";
      s.r(t);
      var a = s("270465");
      s.es(a, t);
    },
    396680: function (e, t, s) {
      "use strict";
      s.r(t);
      var a = s("567298");
      s.es(a, t);
    },
    862099: function (e, t, s) {
      "use strict";
      s.r(t);
      var a = s("203817");
      s.es(a, t);
    },
    454882: function (e, t, s) {
      "use strict";
      s.r(t);
      var a = s("356294");
      s.es(a, t);
    },
    704822: function (e, t, s) {
      "use strict";
      s.r(t);
      var a = s("611013");
      s.es(a, t);
    },
    141495: function (e, t, s) {
      "use strict";
      s.r(t);
      var a = s("33968");
      s.es(a, t);
    },
    836155: function (e, t, s) {
      "use strict";
      s.r(t);
      var a = s("281101");
      s.es(a, t);
    },
    872036: function (e, t, s) {
      "use strict";
      s.r(t);
      var a = s("71198");
      s.es(a, t);
    },
    625990: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return i;
          },
        }),
        s("222007");
      var a = s("884691"),
        l = s("448993"),
        n = s("651057");
      function i() {
        let [e, t] = a.useState(!1),
          [s, i] = a.useState(),
          r = a.useRef(),
          o = async (e, s, a, o) => {
            i(void 0);
            try {
              if ((t(!0), null == r.current)) {
                let t = await n.default.createApplication({
                  name: o,
                  guildId: e.id,
                  type: a,
                  teamId: s,
                });
                r.current = t;
              }
              return (
                await n.default.getApplicationsForGuild(e.id, {
                  type: a,
                  includeTeam: !0,
                }),
                !0
              );
            } catch (e) {
              return i(new l.APIError(e)), !1;
            } finally {
              t(!1);
            }
          };
        return { createGuildApplication: o, submitting: e, error: s };
      }
    },
    986399: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return o;
          },
        }),
        s("222007");
      var a = s("884691"),
        l = s("446674"),
        n = s("448993"),
        i = s("651057"),
        r = s("299285");
      function o(e, t) {
        let s = (0, l.useStateFromStores)([r.default], () =>
            r.default.getGuildApplication(e, t)
          ),
          [o, d] = a.useState(null == s),
          [u, c] = a.useState(),
          [E, _] = a.useState(!1),
          I = a.useCallback(async () => {
            if (null == s && null != e) {
              _(!0), d(!0);
              try {
                await i.default.getApplicationsForGuild(e, {
                  type: t,
                  includeTeam: !0,
                });
              } catch (e) {
                c(new n.APIError(e));
              } finally {
                d(!1);
              }
            }
          }, [s, t, e]);
        return (
          a.useEffect(() => {
            !E && I();
          }, [E, I]),
          { application: s, error: u, loading: o }
        );
      }
    },
    165426: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("644583"),
        n = s("398410"),
        i = s("571067");
      function r(e) {
        let {
            guildId: t,
            selectedChannelIds: s,
            selectedRoleIds: r,
            onChange: o,
            placeholder: d,
            disableEveryoneRole: u,
            includeRoleRestrictedPrivateChannels: c = !1,
            includeStageVoiceChannels: E = !1,
            helperText: _,
            className: I,
          } = e,
          T = (0, n.useChannelRows)(t, s, c, E),
          f = (0, i.useRoleRows)(t, r, u);
        return (0, a.jsx)(l.default, {
          channelRows: T,
          roleRows: f,
          guildId: t,
          selectedChannelIds: s,
          selectedRoleIds: r,
          onChange: o,
          placeholder: d,
          helperText: _,
          className: I,
        });
      }
    },
    398410: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useChannelRows: function () {
            return d;
          },
          default: function () {
            return u;
          },
        }),
        s("222007"),
        s("424973"),
        s("808653");
      var a = s("37983");
      s("884691");
      var l = s("446674"),
        n = s("656038"),
        i = s("923959"),
        r = s("644583"),
        o = s("49111");
      function d(e, t) {
        let s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2],
          a = arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
          d = (0, l.useStateFromStoresArray)(
            [i.default],
            () => {
              let l = i.default.getChannels(e)[o.ChannelTypes.GUILD_CATEGORY],
                d = [
                  ...i.default.getChannels(e)[i.GUILD_SELECTABLE_CHANNELS_KEY],
                  ...i.default.getChannels(e)[i.GUILD_VOCAL_CHANNELS_KEY],
                ],
                u = [],
                c = {};
              l.forEach(e => {
                let { channel: t, comparator: s } = e;
                "null" !== t.id &&
                  ((c[t.id] = []), u.push({ channel: t, comparator: s }));
              }),
                d.forEach(e => {
                  let { channel: l, comparator: i } = e;
                  if (
                    !(
                      l.isThread() ||
                      t.has(l.id) ||
                      (l.isGuildStageVoice() && !a)
                    )
                  )
                    !(!s && (0, n.default)(l)) &&
                      (null == l.parent_id
                        ? u.push({ channel: l, comparator: i })
                        : (null == c[l.parent_id] && (c[l.parent_id] = []),
                          c[l.parent_id].push({ channel: l, comparator: i })));
                });
              let E = u
                .sort((e, t) => {
                  let { comparator: s, channel: a } = e,
                    { comparator: l, channel: n } = t;
                  return a.isCategory() && !n.isCategory()
                    ? 1
                    : !a.isCategory() && n.isCategory()
                      ? -1
                      : l - s;
                })
                .reduce((e, s) => {
                  let { channel: a } = s;
                  if (a.isGuildStageVoice() || a.isThread() || t.has(a.id))
                    return e;
                  e.push((0, r.channelToPendingAddition)(a).row);
                  let l = c[a.id];
                  return (
                    null != l &&
                      l.length > 0 &&
                      l.forEach(t => {
                        let { channel: s } = t;
                        e.push((0, r.channelToPendingAddition)(s).row);
                      }),
                    e
                  );
                }, []);
              return E;
            },
            [e, s, a, t]
          );
        return d;
      }
      function u(e) {
        let {
            guildId: t,
            selectedChannelIds: s,
            onChange: l,
            placeholder: n,
            includeRoleRestrictedPrivateChannels: i = !1,
            includeStageVoiceChannels: o = !1,
            helperText: u,
            className: c,
          } = e,
          E = d(t, s, i, o);
        return (0, a.jsx)(r.default, {
          channelRows: E,
          guildId: t,
          selectedChannelIds: s,
          onChange: (e, t) => l(e),
          placeholder: n,
          helperText: u,
          className: c,
        });
      }
    },
    382981: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return o;
          },
        }),
        s("222007");
      var a = s("446674"),
        l = s("913144"),
        n = s("305961");
      let i = new Map();
      class r extends a.default.Store {
        initialize() {
          this.waitFor(n.default);
        }
        getGuildRoleConnectionsConfiguration(e) {
          return i.get(e);
        }
      }
      r.displayName = "GuildRoleConnectionsConfigurationStore";
      var o = new r(l.default, {
        GUILD_ROLE_CONNECTIONS_CONFIGURATIONS_FETCH_SUCCESS: e => {
          let { roleId: t, roleConnectionConfigurations: s } = e;
          i.set(t, s);
        },
      });
    },
    218567: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useCreatorMonetizationSettingsDisabled: function () {
            return r;
          },
          CreatorMonetizationSettingsDisabledContextProvider: function () {
            return o;
          },
        }),
        s("70102");
      var a = s("37983"),
        l = s("884691"),
        n = s("465869");
      let i = l.createContext(void 0);
      function r() {
        let e = l.useContext(i);
        if (null == e)
          throw Error(
            "useCreatorMonetizationSettingsDisabled must be used within a CreatorMonetizationSettingsDisabledContext"
          );
        return e;
      }
      function o(e) {
        let { guildId: t, children: s } = e,
          { shouldRestrictUpdatingCreatorMonetizationSettings: l } = (0,
          n.useShouldRestrictUpdatingCreatorMonetizationSettings)(t);
        return (0, a.jsx)(i.Provider, { value: l, children: s });
      }
    },
    717559: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          getStatusForPeriod: function () {
            return l;
          },
          splitCurrentPeriod: function () {
            return n;
          },
          calculateMetrics: function () {
            return i;
          },
        }),
        s("222007");
      var a = s("397056");
      let l = e => {
        var t, s;
        let a = Object.values(
            null !== (s = null == e ? void 0 : e.ppgs) && void 0 !== s ? s : {}
          )[0],
          l = null == a ? void 0 : a.status,
          n =
            null == a
              ? void 0
              : null === (t = a.payout) || void 0 === t
                ? void 0
                : t.status,
          i = null == a ? void 0 : a.deferral_reasons,
          r = null == a ? void 0 : a.period_ending_at;
        return {
          ppgStatus: l,
          payoutStatus: n,
          ppgDeferralReasons: i,
          periodEndDate: r,
        };
      };
      function n(e) {
        let t, s;
        let { ppgStatus: n } = l(e[0]);
        return (
          n === a.PaymentPayoutGroupStatuses.OPEN ? ([t, ...s] = e) : (s = e),
          { currentPeriod: t, previousPeriods: s }
        );
      }
      function i(e, t) {
        let s, a, l, n;
        return (
          null != e &&
            ((s = e.amount),
            (l = e.paymentsCount),
            null != t &&
              ((a = e.amount / t.amount - 1),
              (n = e.paymentsCount - t.paymentsCount))),
          {
            revenue: s,
            revenuePctChange: a,
            paymentsCount: l,
            paymentsCountChange: n,
          }
        );
      }
    },
    180243: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("414456"),
        n = s.n(l),
        i = s("446674"),
        r = s("206230"),
        o = s("181114"),
        d = s("802810"),
        u = s("123651");
      function c(e) {
        let { className: t, shouldShine: s = !0, size: l = 14 } = e,
          c = (0, i.useStateFromStores)(
            [r.default],
            () => r.default.useReducedMotion
          );
        return (0, a.jsxs)("div", {
          className: n([u.guildProductRoleIcon, t]),
          children: [
            (0, a.jsx)(d.default, { height: l, width: l }),
            (0, a.jsx)(o.Shine, {
              className: u.shine,
              shinePaused: c || !s,
              shineSize: o.default.ShineSizes.SMALL,
            }),
          ],
        });
      }
    },
    763838: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return m;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("414456"),
        n = s.n(l),
        i = s("77078"),
        r = s("716241"),
        o = s("183137"),
        d = s("592407"),
        u = s("181114"),
        c = s("538137"),
        E = s("599110"),
        _ = s("500307"),
        I = s("49111"),
        T = s("782340"),
        f = s("301794");
      function S(e) {
        let { pills: t } = e;
        return (0, a.jsx)("div", {
          className: f.row,
          children: t.map(e =>
            (0, a.jsx)(
              "div",
              {
                className: f.pill,
                children: (0, a.jsx)(i.Text, {
                  variant: "text-sm/normal",
                  children: e,
                }),
              },
              e
            )
          ),
        });
      }
      function m(e) {
        let { guildId: t, showCTA: s, responsive: l = !0 } = e,
          m = [
            [
              T.default.Messages.GUILD_STORE_PREVIEW_CHIP_ROLE_ACCESS,
              T.default.Messages.GUILD_STORE_PREVIEW_CHIP_GAME_TUTORIALS,
            ],
            [
              T.default.Messages.GUILD_STORE_PREVIEW_CHIP_DOPE_WALLPAPERS,
              T.default.Messages.GUILD_STORE_PREVIEW_CHIP_PFP_ART,
            ],
            [
              T.default.Messages.GUILD_STORE_PREVIEW_CHIP_FILTER_PRESETS,
              T.default.Messages.GUILD_STORE_PREVIEW_CHIP_SONG_DROPS,
            ],
            [
              T.default.Messages.GUILD_STORE_PREVIEW_CHIP_COSPLAY_PICS,
              T.default.Messages.GUILD_STORE_PREVIEW_CHIP_3D_MODELS,
            ],
          ];
        return (0, a.jsx)("div", {
          className: n({ [f.responsive]: l }),
          children: (0, a.jsxs)("div", {
            className: f.container,
            children: [
              (0, a.jsxs)("div", {
                className: f.content,
                children: [
                  (0, a.jsx)("div", {
                    className: f.pillContainer,
                    children: m.map((e, t) =>
                      (0, a.jsx)(S, { pills: e }, "pill-row-".concat(t))
                    ),
                  }),
                  (0, a.jsxs)("div", {
                    className: f.ctaContent,
                    children: [
                      (0, a.jsx)(i.Text, {
                        variant: "text-lg/medium",
                        color: "header-primary",
                        children:
                          T.default.Messages.GUILD_STORE_PREVIEW_MURAL_TITLE,
                      }),
                      s &&
                        (0, a.jsxs)(u.default, {
                          size: i.Button.Sizes.MEDIUM,
                          className: f.getStartedButton,
                          innerClassName: f.getStartedButtonContents,
                          shineSize: u.default.ShineSizes.SMALL,
                          onClick: () => {
                            E.default.track(
                              I.AnalyticEvents.GUILD_SHOP_PREVIEW_CLICK,
                              {
                                ...(0, r.collectGuildAnalyticsMetadata)(t),
                                action_taken:
                                  _.GuildShopPreviewClickActions
                                    .GET_STARTED_CLICK,
                              }
                            ),
                              d.default.open(
                                t,
                                I.GuildSettingsSections.GUILD_PRODUCTS
                              );
                          },
                          children: [
                            T.default.Messages.GUILD_SHOP_PREVIEW_CTA_BUTTON,
                            (0, a.jsx)(c.default, {
                              className: f.getStartedArrow,
                            }),
                          ],
                        }),
                    ],
                  }),
                ],
              }),
              (0, a.jsxs)("div", {
                className: f.muralImageContainer,
                children: [
                  (0, a.jsx)("img", {
                    src: (0, o.getAssetCDNUrl)(
                      "server_products/storefront/preview-mural.png"
                    ),
                    alt: "",
                    className: f.muralImage,
                  }),
                  (0, a.jsx)("img", {
                    src: (0, o.getAssetCDNUrl)(
                      "server_products/storefront/preview-mural-reduced.png"
                    ),
                    alt: "",
                    className: f.muralImageReducedWidth,
                  }),
                ],
              }),
            ],
          }),
        });
      }
    },
    802810: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("75196");
      function n(e) {
        let {
          width: t = 24,
          height: s = 24,
          color: n = "currentColor",
          ...i
        } = e;
        return (0, a.jsx)("svg", {
          ...(0, l.default)(i),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: s,
          viewBox: "0 0 21 20",
          fill: "none",
          children: (0, a.jsx)("path", {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M14.571 6.66585H17.166C18.086 6.66585 18.8327 7.41335 18.8327 8.33251V9.99918H2.16602V8.33251C2.16602 7.41335 2.91352 6.66585 3.83268 6.66585H6.42768C6.05185 6.47001 5.69602 6.23085 5.39852 5.93418C4.42352 4.95918 4.42352 3.37335 5.39852 2.39918C6.34268 1.45501 7.98768 1.45501 8.93352 2.39751C10.2977 3.76168 10.4818 6.32918 10.4977 6.61751C10.4986 6.62709 10.4965 6.63567 10.4944 6.64421C10.4927 6.65127 10.491 6.6583 10.491 6.66585H10.5077C10.5077 6.65822 10.5059 6.65112 10.5042 6.64407C10.5022 6.6357 10.5001 6.62739 10.501 6.61835C10.5177 6.33001 10.701 3.76251 12.0652 2.39835C13.011 1.45418 14.6543 1.45501 15.6002 2.39751C16.5744 3.37418 16.5744 4.96001 15.6002 5.93418C15.3027 6.23085 14.9468 6.47001 14.571 6.66585ZM6.57685 4.75585C6.25185 4.43001 6.25185 3.90168 6.57685 3.57668C6.73352 3.41918 6.94268 3.33335 7.16602 3.33335C7.38935 3.33335 7.59852 3.41918 7.75518 3.57668C8.24685 4.06835 8.53352 4.95001 8.68685 5.68501C7.95352 5.53251 7.06518 5.24418 6.57685 4.75585ZM12.311 5.68668C12.4652 4.95085 12.751 4.06918 13.2435 3.57751C13.4002 3.41918 13.6093 3.33335 13.8327 3.33335C14.056 3.33335 14.2652 3.41918 14.421 3.57585C14.746 3.90168 14.7469 4.43001 14.4219 4.75585C13.9293 5.24835 13.0468 5.53501 12.311 5.68668ZM2.99935 11.6658V16.6658C2.99935 17.585 3.74685 18.3325 4.66602 18.3325H9.66602V11.6658H2.99935ZM11.3327 11.6658V18.3325H16.3327C17.2527 18.3325 17.9993 17.585 17.9993 16.6658V11.6658H11.3327Z",
            fill: n,
          }),
        });
      }
    },
    38904: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return o;
          },
        }),
        s("222007");
      var a = s("884691"),
        l = s("917351"),
        n = s.n(l),
        i = s("167627");
      let r = e => {
        let t = {};
        for (let s of e) {
          let e = "".concat(s.period_starting_at, ",").concat(s.status);
          null == t[e] &&
            (t[e] = {
              key: e,
              periodStartingAt: s.period_starting_at,
              ppgs: {},
              paymentsCount: 0,
              amount: 0,
            });
          let a = t[e];
          (a.amount += s.amount),
            (a.paymentsCount += s.payments_count),
            (a.ppgs[s.grouping_id] = s);
        }
        return n.orderBy(Object.values(t), ["periodStartingAt"], ["desc"]);
      };
      var o = (e, t) => {
        let { groupType: s, teamId: l } = t,
          [n, o] = a.useState(!0),
          [d, u] = a.useState([]),
          c = a.useCallback(async () => {
            if ((u([]), null == e)) {
              o(!1);
              return;
            }
            try {
              o(!0);
              let t = await i.getPaymentPayoutGroups(e, { grouping_type: s });
              u(t);
            } catch {
            } finally {
              o(!1);
            }
          }, [e, s]);
        a.useEffect(() => {
          c();
        }, [c]);
        let E = a.useMemo(() => {
          let e = null != l ? d.filter(e => e.user_id === l) : d;
          return r(e);
        }, [d, l]);
        return { payoutsByPeriod: E, loading: n };
      };
    },
    750482: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return d;
          },
          MonetizationListingImageAspectStable: function () {
            return u;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("617258"),
        n = s("769846"),
        i = s("801765"),
        r = s("955735");
      let o = (0, l.cssValueToNumber)(
        n.default.ASPECT_STABLE_IMAGE_CONTAINER_PADDING
      );
      function d(e) {
        let { listing: t, imageSize: s, alt: l, ...n } = e,
          r = (0, i.useListingThumbnailUrl)(t, s);
        return (0, a.jsx)("img", { src: r, alt: l, ...n });
      }
      function u(e) {
        let { listing: t, aspectRatio: s = 16 / 9, height: l, ...n } = e,
          d = (l - 2 * o) * s,
          u = (0, i.useListingThumbnailUrl)(t, d),
          c = (0, i.useListingThumbnailUrl)(t, d, { shouldAnimate: !1 });
        return (0, a.jsx)(r.default, {
          src: u,
          backgroundSrc: c,
          aspectRatio: s,
          ...n,
        });
      }
    },
    835706: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("423487"),
        i = s("981527");
      function r(e) {
        let { children: t } = e;
        return (0, a.jsx)("div", {
          className: i.container,
          children: (0, a.jsx)(l.Text, {
            variant: "text-sm/normal",
            color: "text-normal",
            className: i.text,
            children: (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsx)(n.default, {
                  className: i.noticeIcon,
                  "aria-hidden": !0,
                }),
                t,
              ],
            }),
          }),
        });
      }
    },
    97031: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("638035");
      function i(e) {
        let { children: t, disabled: s, disabledTooltip: i, id: r, ...o } = e;
        return (0, a.jsx)(l.TooltipContainer, {
          text: s ? i : null,
          children: (0, a.jsx)(l.TabBar.Item, {
            className: n.tabBarItem,
            id: r,
            disabled: s,
            ...o,
            children: t,
          }),
        });
      }
    },
    970500: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("68238"),
        i = s("402159");
      function r(e) {
        let {
          label: t,
          sublabel: s,
          value: r,
          additionalContent: o,
          tooltip: d,
        } = e;
        return (0, a.jsxs)("div", {
          className: i.metricCard,
          "aria-label": t,
          children: [
            (0, a.jsxs)("div", {
              className: i.metricCardLabelContainer,
              children: [
                (0, a.jsx)(l.Text, {
                  className: i.metricCardLabel,
                  variant: "text-xs/medium",
                  color: "interactive-normal",
                  "aria-hidden": !0,
                  children: t,
                }),
                null != d &&
                  (0, a.jsx)(l.Tooltip, {
                    text: d,
                    children: e =>
                      (0, a.jsx)(n.default, {
                        className: i.labelTooltipIcon,
                        ...e,
                      }),
                  }),
                null != s
                  ? (0, a.jsx)(l.Text, {
                      variant: "text-xs/normal",
                      color: "text-muted",
                      children: s,
                    })
                  : null,
              ],
            }),
            (0, a.jsx)(l.Text, {
              tag: "span",
              variant: "heading-xl/medium",
              color: "header-primary",
              children: r,
            }),
            o,
          ],
        });
      }
    },
    276253: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          MetricsContainer: function () {
            return n;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("402159");
      function n(e) {
        let { children: t } = e;
        return (0, a.jsx)("div", {
          className: l.metricsContainer,
          children: t,
        });
      }
    },
    207353: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          getDefaultSorter: function () {
            return T;
          },
          createColumn: function () {
            return f;
          },
          createListingNameColumn: function () {
            return m;
          },
          createCurrencyAmountColumn: function () {
            return N;
          },
          createPersonCountColumn: function () {
            return g;
          },
          createTableColumns: function () {
            return h;
          },
          HeaderCell: function () {
            return C;
          },
          Cell: function () {
            return R;
          },
          default: function () {
            return O;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n);
      s("866227");
      var r = s("77078"),
        o = s("158352"),
        d = s("781896"),
        u = s("153160"),
        c = s("750482"),
        E = s("49111"),
        _ = s("782340"),
        I = s("748762");
      function T(e) {
        return (t, s, a) => {
          let l = e(t),
            n = e(s);
          return null != l && null != n ? (l === n ? 0 : l < n ? -1 : 1) : 0;
        };
      }
      function f(e) {
        let {
          key: t,
          cellClassName: s,
          renderHeader: a,
          renderContent: l,
          ...n
        } = e;
        return {
          key: t,
          bodyCellClassName: I.cell,
          cellClassName: s,
          renderHeader: a,
          render: l,
          ...n,
        };
      }
      function S() {
        return (0, a.jsx)(r.Text, {
          variant: "text-xs/medium",
          className: I.unpublishedBadge,
          children: _.default.Messages.GUILD_PRODUCT_UNPUBLISHED_TITLE,
        });
      }
      function m(e) {
        let { cellClassName: t, key: s, renderHeader: l, ...n } = e;
        return f({
          cellClassName: t,
          key: s,
          renderHeader: l,
          renderContent(e) {
            let { listing: t } = e,
              s = null;
            return (
              null != t &&
                (s = (0, a.jsxs)(a.Fragment, {
                  children: [
                    (0, a.jsx)(c.default, {
                      listing: t,
                      imageSize: 128,
                      alt: "",
                      className: I.listingImage,
                    }),
                    (0, a.jsxs)(r.Text, {
                      variant: "text-md/medium",
                      color: "header-primary",
                      className: I.listingNameLabel,
                      children: [t.name, !t.published && (0, a.jsx)(S, {})],
                    }),
                  ],
                })),
              (0, a.jsx)(R, { className: I.listingNameCell, children: s })
            );
          },
          ...n,
        });
      }
      function N(e) {
        let {
          cellClassName: t,
          getAmount: s,
          key: l,
          renderHeader: n,
          ...i
        } = e;
        return f({
          key: l,
          cellClassName: t,
          renderHeader: n,
          renderContent(e) {
            let t = s(e);
            return (0, a.jsx)(x, { children: t });
          },
          ...i,
        });
      }
      function g(e) {
        let {
          cellClassName: t,
          getCount: s,
          key: l,
          renderHeader: n,
          ...i
        } = e;
        return f({
          key: l,
          cellClassName: t,
          renderHeader: n,
          renderContent(e) {
            let t = s(e);
            return (0, a.jsx)(L, { children: t });
          },
          ...i,
        });
      }
      function h(e) {
        let t = [...e];
        for (let s = 1; s < e.length; ++s) {
          let a = e[s];
          t[s] = { ...a, cellClassName: i(a.cellClassName, I.cellAlignRight) };
        }
        return t;
      }
      let C = e => {
          let { children: t } = e;
          return (0, a.jsx)(r.Text, {
            className: I.headerCell,
            variant: "text-xs/medium",
            color: "interactive-normal",
            "aria-hidden": !0,
            children: t,
          });
        },
        R = e => {
          let { children: t, className: s } = e;
          return (0, a.jsx)(r.Text, {
            className: s,
            variant: "text-md/normal",
            color: "interactive-normal",
            children: t,
          });
        },
        x = e => {
          let { children: t } = e;
          return (0, a.jsx)(R, {
            children: (0, u.formatPrice)(
              null != t ? t : 0,
              E.CurrencyCodes.USD
            ),
          });
        },
        L = e => {
          let { children: t } = e;
          return (0, a.jsxs)(R, {
            className: I.personCountCell,
            children: [
              null != t ? t : "-",
              " ",
              (0, a.jsx)(d.default, {
                className: I.personCountIcon,
                "aria-hidden": !0,
              }),
            ],
          });
        };
      function O(e) {
        let {
            className: t,
            headerClassName: s,
            rowClassName: n,
            enableRowSeparators: r = !1,
            initialSortKey: d,
            initialSortDirection: u = E.TableSortDirections.ASCENDING,
            ...c
          } = e,
          [_, T] = l.useState(d),
          [f, S] = l.useState(u);
        return (0, a.jsx)("div", {
          className: i(I.tableContainer, t),
          children: (0, a.jsx)(o.default, {
            className: i({ [I.tableWithoutSeparators]: !r }, I.table),
            rowClassName: i({ [I.rowWithSeparators]: r }, n),
            headerClassName: i(
              I.header,
              { [I.headerWithoutSeparators]: !r },
              s
            ),
            sortKey: _,
            sortDirection: f,
            onSort: (e, t) => {
              T(e), S(t);
            },
            ...c,
          }),
        });
      }
    },
    215393: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          createExpandableTableColumns: function () {
            return _;
          },
          createExpandableColumn: function () {
            return I;
          },
          useExpandableRows: function () {
            return T;
          },
        }),
        s("222007"),
        s("424973");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("627445"),
        o = s.n(r),
        d = s("77078"),
        u = s("772280"),
        c = s("207353"),
        E = s("109816");
      function _(e, t) {
        let { expandableToggleColumnKey: s } = t,
          l = (0, c.createTableColumns)(
            e.map(e => ({
              ...e,
              sort: !1,
              renderHeader() {
                var t;
                return null === (t = e.renderHeader) || void 0 === t
                  ? void 0
                  : t.call(e, e, []);
              },
              render(t, s, a) {
                var l, n;
                if (t.isExpandedItem)
                  return "renderExpandedContent" in e
                    ? e.renderExpandedContent(t.item, s)
                    : null;
                return null !==
                  (n =
                    null === (l = e.render) || void 0 === l
                      ? void 0
                      : l.call(e, t.item, s, a)) && void 0 !== n
                  ? n
                  : null;
              },
            }))
          );
        return [
          (function (e) {
            let { key: t } = e;
            return {
              key: t,
              cellClassName: E.toggleExpandColumn,
              renderHeader: () => null,
              render(e, t) {
                if (
                  (o(null != t, "Cell props missing; did you use the hook?"),
                  e.isExpandedItem)
                )
                  return null;
                let { expandedRows: s, onToggleExpandRow: l } = t,
                  n = s.has(e.key);
                return (0, a.jsx)(d.Clickable, {
                  className: E.toggleExpandCell,
                  onClick: () => l(e.key),
                  children: (0, a.jsx)(c.Cell, {
                    children: (0, a.jsx)(u.default, {
                      className: i(E.caretIcon, { [E.caretDownIcon]: n }),
                    }),
                  }),
                });
              },
            };
          })({ key: s }),
          ...l,
        ];
      }
      function I(e) {
        let { renderExpandedContent: t, ...s } = e;
        return { ...(0, c.createColumn)(s), renderExpandedContent: t };
      }
      function T(e, t) {
        let { generateExpandedRows: s } = t,
          a = (function () {
            let [e, t] = l.useState(new Set()),
              s = l.useCallback(
                e => {
                  t(t => {
                    let s = new Set(t);
                    return s.has(e) ? s.delete(e) : s.add(e), s;
                  });
                },
                [t]
              );
            return { expandedRows: e, onToggleExpandRow: s };
          })(),
          n = l.useMemo(() => {
            let t = [];
            for (let l of e)
              if (
                (t.push({ isExpandedItem: !1, key: l.key, item: l }),
                a.expandedRows.has(l.key))
              )
                for (let e of s(l))
                  t.push({ isExpandedItem: !0, key: e.key, item: e });
            return t;
          }, [a.expandedRows, e, s]);
        return { data: n, cellProps: a };
      }
    },
    898411: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return u;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("757715"),
        i = s("191814"),
        r = s("420857"),
        o = s("49111"),
        d = s("782340");
      function u(e) {
        let { team: t, ...s } = e,
          u = (0, n.useRoleSubscriptionSettingsDisabled)(),
          c =
            u || null == t
              ? null
              : d.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_EDIT_PAYMENT_METHOD_LINK.format(
                  {
                    url: o.MarketingURLs.DEVELOPER_PORTAL_PAYOUT_SETTINGS(t.id),
                  }
                );
        return 0 === s.payoutsByPeriod.length
          ? (0, a.jsxs)(l.FormText, {
              type: l.FormText.Types.DESCRIPTION,
              children: [
                d.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_EARNINGS_EARNINGS_HISTORY_EMPTY,
                " ",
                c,
              ],
            })
          : (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsxs)(l.FormText, {
                  type: l.FormText.Types.DESCRIPTION,
                  children: [
                    d.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_EARNINGS_EARNINGS_HISTORY_DESCRIPTION,
                    " ",
                    c,
                  ],
                }),
                (0, a.jsx)(i.default, { size: 16 }),
                (0, a.jsx)(r.default, { ...s }),
              ],
            });
      }
    },
    420857: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return M;
          },
        });
      var a,
        l,
        n = s("37983"),
        i = s("884691"),
        r = s("627445"),
        o = s.n(r),
        d = s("866227"),
        u = s.n(d),
        c = s("77078"),
        E = s("434014"),
        _ = s("488499"),
        I = s("860598"),
        T = s("445940"),
        f = s("578706"),
        S = s("381546"),
        m = s("68238"),
        N = s("717559"),
        g = s("207353"),
        h = s("215393"),
        C = s("397056"),
        R = s("782340"),
        x = s("189723");
      ((a = l || (l = {})).DROPDOWN = "DROPDOWN"),
        (a.PERIOD = "PERIOD"),
        (a.AMOUNT = "AMOUNT "),
        (a.STATUS = "STATUS ");
      let L = e => {
        let { dateUtc: t } = e;
        return (0, n.jsx)(c.Text, {
          variant: "text-md/medium",
          color: "interactive-active",
          children: u(t).utc().format("MMMM YYYY"),
        });
      };
      function O(e) {
        let { item: t } = e,
          {
            ppgStatus: s,
            payoutStatus: a,
            ppgDeferralReasons: l,
            periodEndDate: i,
          } = (0, N.getStatusForPeriod)(t),
          r = null != i ? u(i).add(15, "days").toISOString() : void 0,
          o = (0, E.formatNextPaymentDate)(r, "MMM D");
        switch (s) {
          case C.PaymentPayoutGroupStatuses.OPEN:
            return (0, n.jsxs)(n.Fragment, {
              children: [
                null != o
                  ? R.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PENDING_OR_SCHEDULED_WITH_DATE.format(
                      { payoutDate: o }
                    )
                  : R.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PENDING,
                (0, n.jsx)(I.default, { className: x.statusScheduledIcon }),
              ],
            });
          case C.PaymentPayoutGroupStatuses.CANCELED:
            return (0, n.jsxs)(n.Fragment, {
              children: [
                R.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_CANCELLED,
                (0, n.jsx)(S.default, { className: x.statusErrorIcon }),
              ],
            });
          case C.PaymentPayoutGroupStatuses.PAYOUT_DEFERRED:
            if (
              (null == l
                ? void 0
                : l.includes(
                    C.PaymentPayoutGroupDeferralReasons.PAYOUT_SEIZED
                  )) === !0
            )
              return (0, n.jsxs)(n.Fragment, {
                children: [
                  R.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_CANCELLED,
                  (0, n.jsx)(S.default, { className: x.statusErrorIcon }),
                ],
              });
            return (0, n.jsxs)(n.Fragment, {
              children: [
                R.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_DEFERRED,
                (0, n.jsx)(T.default, { className: x.statusDeferredIcon }),
              ],
            });
        }
        switch (a) {
          case C.PayoutStatuses.MANUAL:
          case C.PayoutStatuses.OPEN:
          case C.PayoutStatuses.PENDING:
          case C.PayoutStatuses.PROCESSING:
          case C.PayoutStatuses.SUBMITTED:
          case C.PayoutStatuses.PENDING_FUNDS:
          case C.PayoutStatuses.CANCELED:
          case C.PayoutStatuses.ERROR:
            return (0, n.jsxs)(n.Fragment, {
              children: [
                null != o
                  ? R.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PENDING_OR_SCHEDULED_WITH_DATE.format(
                      { payoutDate: o }
                    )
                  : R.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_SCHEDULED,
                (0, n.jsx)(I.default, { className: x.statusScheduledIcon }),
              ],
            });
          case C.PayoutStatuses.PAID:
            return (0, n.jsxs)(n.Fragment, {
              children: [
                R.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PAID,
                (0, n.jsx)(f.default, { className: x.statusPaidIcon }),
              ],
            });
          case C.PayoutStatuses.DEFERRED:
          case C.PayoutStatuses.DEFERRED_INTERNAL:
          case C.PayoutStatuses.REJECTED:
          case C.PayoutStatuses.RISK_REVIEW:
            return (0, n.jsxs)(n.Fragment, {
              children: [
                _.default.getStatusErrorText(a),
                (0, n.jsx)(S.default, { className: x.statusErrorIcon }),
              ],
            });
        }
        return null;
      }
      let p = (0, g.createCurrencyAmountColumn)({
          key: "AMOUNT ",
          cellClassName: x.amountColumn,
          renderHeader() {
            let e = (0, n.jsx)(c.Tooltip, {
              text: R.default.Messages
                .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_AMOUNT_DISCLAIMER,
              children: e =>
                (0, n.jsx)(m.default, { className: x.amountDisclaimer, ...e }),
            });
            return (0, n.jsxs)(g.HeaderCell, {
              children: [
                R.default.Messages
                  .GUILD_PRODUCT_EARNINGS_TABLE_PRICE_COLUMN_TITLE,
                e,
              ],
            });
          },
          getAmount: e => e.amount,
        }),
        A = (0, h.createExpandableTableColumns)(
          [
            (0, h.createExpandableColumn)({
              key: "PERIOD",
              cellClassName: x.periodColumn,
              renderHeader: () =>
                (0, n.jsx)(g.HeaderCell, {
                  children:
                    R.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_PERIOD,
                }),
              renderContent: e =>
                (0, n.jsx)(L, { dateUtc: e.periodStartingAt }),
              renderExpandedContent(e, t) {
                o(null != t, "CellProps should always be provided");
                let { ListingIdLabel: s } = t;
                return (0, n.jsx)(s, { listingId: e.listingId });
              },
            }),
            (0, h.createExpandableColumn)({
              ...p,
              renderContent: p.render,
              renderExpandedContent: (e, t) => p.render(e, t),
            }),
            (0, g.createColumn)({
              key: "STATUS ",
              cellClassName: x.statusColumn,
              renderHeader() {
                let e = (0, n.jsx)(c.Tooltip, {
                  text: R.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_NEXT_PAYMENT_DISCLAIMER,
                  children: e =>
                    (0, n.jsx)(m.default, {
                      className: x.statusDisclaimer,
                      ...e,
                    }),
                });
                return (0, n.jsxs)(g.HeaderCell, {
                  children: [
                    R.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS,
                    e,
                  ],
                });
              },
              renderContent: e =>
                (0, n.jsx)(g.Cell, {
                  className: x.statusCell,
                  children: (0, n.jsx)(O, { item: e }),
                }),
            }),
          ],
          { expandableToggleColumnKey: "DROPDOWN" }
        );
      function M(e) {
        let { ListingIdLabel: t, payoutsByPeriod: s } = e,
          { cellProps: a, data: l } = (0, h.useExpandableRows)(s, {
            generateExpandedRows: e =>
              Object.keys(e.ppgs).map(t => {
                var s;
                return {
                  key: e.key + t,
                  listingId: t,
                  amount:
                    null === (s = e.ppgs[t]) || void 0 === s
                      ? void 0
                      : s.amount,
                };
              }),
          }),
          r = i.useMemo(() => ({ ListingIdLabel: t, ...a }), [a, t]);
        return (0, n.jsx)(g.default, { columns: A, data: l, cellProps: r });
      }
    },
    887229: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return E;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("940958"),
        i = s("153160"),
        r = s("970500"),
        o = s("276253"),
        d = s("49111"),
        u = s("782340"),
        c = s("402159");
      function E(e) {
        let {
          children: t,
          revenue: s,
          revenueTrend: E,
          summaryMetricLabel: _,
          summaryMetricValue: I,
          summaryMetricTrend: T,
          summaryMetricTrendIsPercent: f,
        } = e;
        return (0, a.jsx)(l.FormSection, {
          title: u.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_HEADER,
          children: (0, a.jsxs)("div", {
            className: c.paymentInfoGroup,
            children: [
              (0, a.jsxs)(o.MetricsContainer, {
                children: [
                  (0, a.jsx)(r.default, {
                    label:
                      u.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_REVENUE,
                    value: (0, i.formatPrice)(
                      null != s ? s : 0,
                      d.CurrencyCodes.USD
                    ),
                    additionalContent: (0, a.jsx)(n.MetricTrend, {
                      value: E,
                      isPercent: !0,
                    }),
                  }),
                  (0, a.jsx)(r.default, {
                    label: _,
                    value: I,
                    additionalContent: (0, a.jsx)(n.MetricTrend, {
                      value: T,
                      isPercent: f,
                    }),
                  }),
                ],
              }),
              t,
            ],
          }),
        });
      }
    },
    313584: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("274880");
      function n(e) {
        let { children: t } = e;
        return (0, a.jsx)("div", { className: l.paymentSections, children: t });
      }
    },
    283962: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useNewOwnerOnboardingRequired: function () {
            return d;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("446674"),
        i = s("77078"),
        r = s("697218"),
        o = s("49111");
      function d(e) {
        let t =
            (null == e
              ? void 0
              : e.hasFeature(
                  o.GuildFeatures
                    .CREATOR_MONETIZABLE_PENDING_NEW_OWNER_ONBOARDING
                )) === !0,
          d =
            (null == e
              ? void 0
              : e.hasFeature(o.GuildFeatures.ROLE_SUBSCRIPTIONS_ENABLED)) ===
            !0,
          u = (0, n.useStateFromStores)([r.default], () =>
            r.default.getCurrentUser()
          ),
          c = (null == e ? void 0 : e.isOwner(u)) === !0;
        l.useEffect(() => {
          null != e &&
            t &&
            c &&
            (0, i.openModalLazy)(async () => {
              let { default: t } = await s
                .el("795262")
                .then(s.bind(s, "795262"));
              return s =>
                (0, a.jsx)(t, { ...s, guildId: e.id, requireTeamSetup: d });
            });
        }, [t, d, e, c]);
      }
    },
    396076: function (e, t, s) {
      "use strict";
      var a, l, n, i;
      s.r(t),
        s.d(t, {
          CreatorMonetizationApplicationState: function () {
            return a;
          },
          CreatorMonetizationOnboardingMarketingSection: function () {
            return l;
          },
        }),
        ((n = a || (a = {})).OPEN = "OPEN"),
        (n.REJECTED = "REJECTED"),
        (n.APPROVED = "APPROVED"),
        (n.ACTION_REQUIRED = "ACTION_REQUIRED"),
        ((i = l || (l = {})).HOW_IT_WORKS = "HOW_IT_WORKS"),
        (i.BENEFITS = "BENEFITS"),
        (i.OTHER_CREATORS = "OTHER_CREATORS");
    },
    782914: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          getCreatorMonetizationAcceptTermsCheckboxText: function () {
            return i;
          },
        });
      var a = s("701909"),
        l = s("49111"),
        n = s("782340");
      function i() {
        return n.default.Messages.GUILD_ROLE_SUBSCRIPTION_WELCOME_V2_ACCEPT_TERMS_CHECKBOX.format(
          {
            fullTermsUrl: a.default.getArticleURL(
              l.HelpdeskArticles.CREATOR_TERMS
            ),
            creatorRevenuePolicyUrl: a.default.getArticleURL(
              l.HelpdeskArticles.CREATOR_POLICY
            ),
          }
        );
      }
    },
    357412: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        }),
        s("424973");
      var a = s("884691"),
        l = s("545158"),
        n = s("238498"),
        i = s("701909"),
        r = s("799357"),
        o = s("323877"),
        d = s("49111"),
        u = s("782340");
      function c(e) {
        let {
            onEligibilityBecameStale: t,
            actions: s,
            sortedByIneligible: c,
          } = arguments.length > 1 && void 0 !== arguments[1]
            ? arguments[1]
            : {},
          { isUserMFAEnabled: E, isModerationMFAEnabled: _ } = (0,
          o.useIsMFAEnabled)(),
          I = a.useCallback(async () => {
            var e, a;
            E
              ? !_ &&
                (await (null == s
                  ? void 0
                  : null === (a = s.onRequireModeratorMFAClick) || void 0 === a
                    ? void 0
                    : a.call(s)))
              : await (null == s
                  ? void 0
                  : null === (e = s.onEnableMFAClick) || void 0 === e
                    ? void 0
                    : e.call(s)),
              null == t || t();
          }, [E, _, t, s]),
          T = (0, r.useEnableMFAHook)({ onEnableMFAClick: I });
        return a.useMemo(() => {
          if (null == e) return null;
          let { minimumOwnerAgeInYears: t, minimumSize: a } = e,
            r = !e.noRecentViolations,
            o = async () =>
              (0, l.default)(
                await i.default.getSubmitRequestURLAuthenticated()
              ),
            f = [
              {
                key: "no_violations_requirement",
                checkedLabel:
                  u.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_VIOLATIONS_ELIGIBLE,
                uncheckedLabel:
                  u.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_VIOLATIONS_NOT_ELIGIBLE,
                description:
                  u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_VIOLATIONS_DESCRIPTION.format(
                    {
                      communityGuidelinesUrl: i.default.getArticleURL(
                        d.HelpdeskArticles.PUBLIC_GUILD_GUILDLINES
                      ),
                    }
                  ),
                checked: e.noRecentViolations,
                actionLabel: r
                  ? u.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETTINGS_RECENT_VIOLATION_ELIGIBILITY_CTA
                  : void 0,
                actionHandler: r ? o : void 0,
              },
            ];
          if (
            (null != t &&
              null != e.meetsOwnerAgeRequirement &&
              f.push({
                key: "owner_age_requirement",
                checkedLabel:
                  u.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_OWNER_AGE_ELIGIBLE,
                uncheckedLabel:
                  u.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_OWNER_AGE_NOT_ELIGIBLE,
                description:
                  u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_OWNER_AGE_DESCRIPTION.format(
                    { minimumOwnerAgeInYears: t }
                  ),
                checked: e.meetsOwnerAgeRequirement,
              }),
            null != a &&
              null != e.hasSufficientMembers &&
              f.push({
                key: "member_count_requirement",
                checkedLabel:
                  u.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_MEMBERS_ELIGIBLE,
                uncheckedLabel:
                  u.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_MEMBERS_NOT_ELIGIBLE,
                description:
                  u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_MEMBERS_DESCRIPTION.format(
                    { minimumSize: a }
                  ),
                checked: e.hasSufficientMembers,
              }),
            null != e.minimumAgeInDays &&
              null != e.meetsServerAgeRequirement &&
              f.push({
                key: "server_age_requirement",
                checkedLabel:
                  u.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_AGE_ELIGIBLE,
                uncheckedLabel:
                  u.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_AGE_NOT_ELIGIBLE,
                description:
                  u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_AGE_DESCRIPTION.format(
                    { minimumAge: (0, n.default)(e.minimumAgeInDays) }
                  ),
                checked: e.meetsServerAgeRequirement,
              }),
            null != e.weeklyCommunicators &&
              f.push({
                key: "weekly_communicator_count_requirement",
                checkedLabel:
                  u.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_COMMUNICATORS_ELIGIBLE,
                uncheckedLabel:
                  u.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_COMMUNICATORS_NOT_ELIGIBLE,
                description:
                  u.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_COMMUNICATORS_DESCRIPTION,
                checked: e.weeklyCommunicators,
              }),
            null != e.hasMemberRetention &&
              f.push({
                key: "member_retention_requirement",
                checkedLabel:
                  u.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_RETENTION_ELIGIBLE,
                uncheckedLabel:
                  u.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_RETENTION_NOT_ELIGIBLE,
                description:
                  u.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_RETENTION_DESCRIPTION,
                checked: e.hasMemberRetention,
              }),
            f.push({
              key: "nsfw_requirement",
              checkedLabel:
                u.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_NSFW_CONTENT_ELIGIBLE,
              uncheckedLabel:
                u.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_NSFW_CONTENT_NOT_ELIGIBLE,
              description:
                u.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_NSFW_CONTENT_DESCRIPTION,
              checked: e.notNSFW,
            }),
            null != e.hasEnabled2FA)
          ) {
            let t =
                !e.hasEnabled2FA &&
                !E &&
                (null == s ? void 0 : s.onEnableMFAClick) != null,
              a =
                !e.hasEnabled2FA &&
                !_ &&
                (null == s ? void 0 : s.onRequireModeratorMFAClick) != null,
              l = t || a;
            f.push({
              key: "2fa_requirement",
              checkedLabel:
                u.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_2FA_ELIGIBLE,
              uncheckedLabel:
                u.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_2FA_NOT_ELIGIBLE,
              description:
                u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_2FA_DESCRIPTION.format(
                  { enableMFAHook: T }
                ),
              checked: e.hasEnabled2FA,
              actionLabel: l
                ? u.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_2MFA_ELIGIBILITY_CTA
                : void 0,
              actionHandler: l ? I : void 0,
            });
          }
          return !0 === c && f.sort(e => (e.checked ? 0 : -1)), f;
        }, [e, c, E, s, _, T, I]);
      }
    },
    205881: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useCreatorMonetizationIneligibleReasons: function () {
            return l;
          },
        }),
        s("881410");
      var a = s("357412");
      function l(e) {
        let t = (0, a.default)(e),
          s = null == t ? void 0 : t.flatMap(e => (e.checked ? [] : [e.key]));
        return null != s ? s : null;
      }
    },
    724334: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return i;
          },
        }),
        s("222007");
      var a = s("884691"),
        l = s("448993"),
        n = s("197509");
      function i(e) {
        let [t, s] = a.useState(!0),
          [i, r] = a.useState(),
          [o, d] = a.useState(),
          u = a.useCallback(async e => {
            s(!0), r(void 0);
            try {
              let t = await n.getCreatorMonetizationOnboardingMarketing(e);
              d(t);
            } catch (e) {
              r(new l.APIError(e));
            } finally {
              s(!1);
            }
          }, []);
        return (
          a.useEffect(() => {
            u(e);
          }, [e, u]),
          { isLoading: t, error: i, creatorMonetizationOnboardingMarketing: o }
        );
      }
    },
    799357: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useEnableMFAHook: function () {
            return o;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("37785"),
        i = s("323877");
      function r(e) {
        return e;
      }
      function o(e) {
        let { onEnableMFAClick: t, onMFAEnabled: s } = e,
          { isUserMFAEnabled: o, isModerationMFAEnabled: d } = (0,
          i.useIsMFAEnabled)(),
          u = l.useCallback(async () => {
            await t(), null == s || s();
          }, [t, s]),
          c = l.useCallback(
            e => (0, a.jsx)(n.default, { onClick: u, children: e }),
            [u]
          );
        return o && d ? r : c;
      }
    },
    323877: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useIsMFAEnabled: function () {
            return r;
          },
        });
      var a = s("65597"),
        l = s("900938"),
        n = s("697218"),
        i = s("49111");
      function r() {
        let e = (0, a.default)([n.default], () => n.default.getCurrentUser()),
          t = (0, a.default)([l.default], () => l.default.getProps().mfaLevel),
          s = (null == e ? void 0 : e.mfaEnabled) === !0,
          r = t === i.MFALevels.ELEVATED;
        return { isUserMFAEnabled: s, isModerationMFAEnabled: r };
      }
    },
    756717: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return T;
          },
        });
      var a = s("884691"),
        l = s("65597"),
        n = s("465869"),
        i = s("697218"),
        r = s("701909"),
        o = s("7331"),
        d = s("616622"),
        u = s("299732"),
        c = s("365721"),
        E = s("782914"),
        _ = s("49111"),
        I = s("782340");
      function T(e) {
        let t;
        let s = (0, o.useIsExpeditedOnboardingGuild)(e),
          T =
            null == e
              ? void 0
              : e.hasFeature(_.GuildFeatures.CREATOR_MONETIZABLE_PROVISIONAL),
          f =
            null == e
              ? void 0
              : e.hasFeature(_.GuildFeatures.CREATOR_MONETIZABLE),
          S = (0, l.default)([i.default], () => {
            let t = i.default.getCurrentUser();
            return (null == e ? void 0 : e.isOwner(t)) === !0;
          }),
          {
            error: m,
            loading: N,
            createEnableRequest: g,
            submittedRequest: h,
          } = (0, d.default)(null == e ? void 0 : e.id),
          {
            loading: C,
            error: R,
            refresh: x,
            eligibility: L,
          } = (0, u.default)(null == e ? void 0 : e.id),
          { isApplicationRejected: O, requestCooldownDuration: p } = (0,
          c.default)(L),
          A =
            (null == e
              ? void 0
              : e.hasFeature(
                  _.GuildFeatures.CREATOR_MONETIZABLE_RESTRICTED
                )) === !0 ||
            (null == e
              ? void 0
              : e.hasFeature(_.GuildFeatures.CREATOR_MONETIZABLE_DISABLED)) ===
              !0,
          { isMonetizationReapplicationDisabled: M } = (0,
          n.useIsMonetizationReapplicationDisabled)(null == e ? void 0 : e.id),
          D = h || (null == L ? void 0 : L.isApplicationPending) === !0,
          v = (null == L ? void 0 : L.canApply) === !0,
          G =
            I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUIREMENTS_DESCRIPTION.format(
              {
                faqUrl: r.default.getArticleURL(_.HelpdeskArticles.CREATOR_FAQ),
              }
            );
        O && M
          ? (t =
              !0 === T
                ? I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_REJECTED_HIGH_HARM.format(
                    { communityGuidelineUrl: _.MarketingURLs.GUIDELINES }
                  )
                : I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_REJECTED_HIGH_HARM_ALT.format(
                    { communityGuidelineUrl: _.MarketingURLs.GUIDELINES }
                  ))
          : O &&
            null != p &&
            (t =
              I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_REJECTED_V2.format(
                {
                  requestCooldownDuration: p,
                  creatorRevenuePolicyUrl: r.default.getArticleURL(
                    _.HelpdeskArticles.CREATOR_POLICY
                  ),
                }
              ));
        let j = s && S && !1 === f,
          U = s && !1 === T,
          P = (0, E.getCreatorMonetizationAcceptTermsCheckboxText)(),
          b =
            O && v && S
              ? I.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_RESUBMIT_V2.format()
              : void 0;
        return (
          a.useEffect(() => {
            j && x();
          }, [x, j]),
          {
            resubmittingEnableRequest: N,
            resubmissionError: m,
            isGuildOwner: S,
            createEnableRequest: g,
            resubmittedRequest: h,
            eligibilityLoading: C,
            eligibilityError: R,
            refreshEligibility: x,
            eligibility: L,
            eligibleForMonetization: v,
            isApplicationPending: D,
            hasPreviousApplicationRejection: O,
            requestRejectedNoticeText: t,
            reapplyNoticeText: b,
            showAcceptTermsFlow: U,
            wasRejectedInV1: U && (A || O),
            requirementsFinePrintText: G,
            acceptTermsCheckboxText: P,
          }
        );
      }
    },
    147314: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          showNewTerms: function () {
            return n;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("551042");
      function n(e) {
        let { demonetized: t = !1 } =
          arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        (0, l.openModalLazy)(
          async () => {
            let { default: l } = await s.el("476141").then(s.bind(s, "476141"));
            return s => (0, a.jsx)(l, { guildId: e, demonetized: t, ...s });
          },
          { onCloseRequest: () => {} }
        );
      }
    },
    616622: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return i;
          },
        }),
        s("222007");
      var a = s("884691"),
        l = s("599417"),
        n = s("197509");
      function i(e) {
        let [t, s] = a.useState(),
          [i, r] = a.useState(!1),
          [o, d] = a.useState(!1),
          u = a.useCallback(async () => {
            if (null != e) {
              r(!0), s(void 0), d(!1);
              try {
                await n.createCreatorMonetizationEnableRequest(e), d(!0);
              } catch (e) {
                s(new l.default(e));
              } finally {
                r(!1);
              }
            }
          }, [e]);
        return {
          error: t,
          loading: i,
          createEnableRequest: u,
          submittedRequest: o,
        };
      }
    },
    670618: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return u;
          },
        }),
        s("222007");
      var a = s("884691"),
        l = s("446674"),
        n = s("599417"),
        i = s("305961"),
        r = s("697218"),
        o = s("197509"),
        d = s("7331");
      function u(e, t) {
        let s = (0, l.useStateFromStores)([i.default], () =>
            i.default.getGuild(e)
          ),
          [u, c] = a.useState(),
          [E, _] = a.useState(!1),
          I = (0, d.useIsExpeditedOnboardingGuild)(s),
          T = (0, l.useStateFromStores)(
            [r.default],
            () => {
              let e = r.default.getCurrentUser();
              return (null == s ? void 0 : s.isOwner(e)) === !0;
            },
            [s]
          ),
          f = a.useCallback(async () => {
            if (null != e && (I || null != t)) {
              _(!0), c(void 0);
              try {
                null != t
                  ? await o.acceptCreatorMonetizationTerms(e, t)
                  : await o.acceptCreatorMonetizationTermsV2(e);
              } catch (e) {
                c(new n.default(e));
              } finally {
                _(!1);
              }
            }
          }, [e, t, I]);
        return {
          canSubmitAcceptance: T,
          error: u,
          loading: E,
          submitAcceptTermsRequest: f,
        };
      }
    },
    299732: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        }),
        s("222007");
      var a = s("884691"),
        l = s("599417"),
        n = s("197509"),
        i = s("396076");
      function r(e) {
        let [t, s] = a.useState(null != e),
          [r, o] = a.useState(),
          [d, u] = a.useState(),
          c = a.useCallback(async e => {
            s(!0), o(void 0);
            try {
              var t, a, r, d, c;
              let s = await n.getCreatorMonetizationEligibility(e);
              u({
                isEligibleForMonetization: s.sufficient,
                hasSufficientMembers: s.size,
                hasEnabled2FA: s.mfa,
                meetsServerAgeRequirement: s.age,
                meetsOwnerAgeRequirement: s.owner_age,
                noRecentViolations: s.safe_environment,
                weeklyCommunicators: s.engagement_healthy,
                hasMemberRetention: s.retention_healthy,
                notNSFW: 0 === Object.keys(s.nsfw_properties).length,
                canApply: s.can_apply,
                isApplicationPending:
                  (null === (t = s.latest_request) || void 0 === t
                    ? void 0
                    : t.state) === i.CreatorMonetizationApplicationState.OPEN,
                actionRequired:
                  (null === (a = s.latest_request) || void 0 === a
                    ? void 0
                    : a.state) ===
                  i.CreatorMonetizationApplicationState.ACTION_REQUIRED,
                minimumAgeInDays: s.minimum_age_in_days,
                minimumOwnerAgeInYears: s.minimum_owner_age_in_years,
                minimumSize: s.minimum_size,
                latestRequest: s.latest_request,
                rejection: s.rejection,
                guildMemberCount:
                  null === (r = s.health_score) || void 0 === r
                    ? void 0
                    : r.guild_size,
                communicatorCount:
                  null === (d = s.health_score) || void 0 === d
                    ? void 0
                    : d.communicators,
                retentionScore:
                  null === (c = s.health_score) || void 0 === c
                    ? void 0
                    : c.perc_ret_w1,
              });
            } catch (e) {
              o(new l.default(e));
            } finally {
              s(!1);
            }
          }, []),
          E = a.useCallback(() => {
            null != e && c(e);
          }, [e, c]);
        return { error: r, loading: t, eligibility: d, refresh: E };
      }
    },
    365721: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("396076"),
        l = s("782340");
      function n(e) {
        var t, s;
        let n =
            (null == e
              ? void 0
              : null === (t = e.latestRequest) || void 0 === t
                ? void 0
                : t.state) === a.CreatorMonetizationApplicationState.REJECTED,
          i = (function (e) {
            let t;
            if (null == e) return;
            let s = Date.parse(e),
              a = Date.now();
            if (isNaN(s) || s < a) return;
            let n = 1440,
              i = 7 * n,
              r = 30 * n,
              o = Math.round((s - a) / 6e4),
              d = e => Math.round(o / e);
            return (t =
              o >= r
                ? l.default.Messages.DURATION_MONTHS.format({ months: d(r) })
                : o >= i
                  ? l.default.Messages.DURATION_WEEKS.format({ weeks: d(i) })
                  : o >= n
                    ? l.default.Messages.DURATION_DAYS.format({ days: d(n) })
                    : o >= 60
                      ? l.default.Messages.DURATION_HOURS.format({
                          hours: d(60),
                        })
                      : l.default.Messages.DURATION_MINUTES.format({
                          minutes: o,
                        }));
          })(
            null == e
              ? void 0
              : null === (s = e.rejection) || void 0 === s
                ? void 0
                : s.can_reapply_at
          );
        return { isApplicationRejected: n, requestCooldownDuration: i };
      }
    },
    804578: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          trackGuildSettingsDiscoveryViewed: function () {
            return o;
          },
        }),
        s("424973");
      var a,
        l,
        n = s("599110"),
        i = s("75766"),
        r = s("49111");
      function o(e) {
        let t = i.default.getDiscoveryChecklist(e),
          s = [];
        if (!(null == t ? void 0 : t.sufficient)) {
          var a;
          !(null == t ? void 0 : t.safeEnvironment) && s.push("TNS"),
            (!(null == t ? void 0 : t.healthy) ||
              (null == t ? void 0 : t.healthScorePending)) &&
              s.push("HEALTH"),
            !(null == t ? void 0 : t.size) && s.push("MEMBER_COUNT"),
            Object.keys(
              null !== (a = null == t ? void 0 : t.nsfwProperties) &&
                void 0 !== a
                ? a
                : {}
            ).length > 0 && s.push("BAD_WORDS"),
            !(null == t ? void 0 : t.protected) && s.push("2FA");
        }
        n.default.track(r.AnalyticEvents.GUILD_SETTINGS_DISCOVERY_VIEWED, {
          guild_id: e,
          failed_reasons: s,
        });
      }
      ((l = a || (a = {})).SAFE_ENVIRONMENT = "TNS"),
        (l.HEALTHY = "HEALTH"),
        (l.SIZE = "MEMBER_COUNT"),
        (l.NSFW = "BAD_WORDS"),
        (l.PROTECTED = "2FA");
    },
    271889: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          fetchDiscoveryChecklist: function () {
            return i;
          },
        });
      var a = s("872717"),
        l = s("913144"),
        n = s("49111");
      async function i(e) {
        l.default.dispatch({
          type: "DISCOVER_CHECKLIST_FETCH_START",
          guildId: e,
        });
        try {
          let t = await a.default.get({
            url: n.Endpoints.GUILD_DISCOVERY_REQUIREMENTS(e),
            oldFormErrors: !0,
          });
          l.default.dispatch({
            type: "DISCOVER_CHECKLIST_FETCH_SUCCESS",
            guildId: e,
            checklist: t.body,
          });
        } catch (t) {
          l.default.dispatch({
            type: "DISCOVER_CHECKLIST_FETCH_FAILURE",
            guildId: e,
          });
        }
      }
    },
    758276: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          DiscoverySettingsViews: function () {
            return l;
          },
          getSettingsView: function () {
            return u;
          },
          trackDiscoverySettingsChange: function () {
            return c;
          },
          getSuggestedTags: function () {
            return E;
          },
        }),
        s("222007"),
        s("884691"),
        s("446674"),
        s("305961");
      var a,
        l,
        n,
        i,
        r = s("599110");
      s("271889"), s("75766");
      var o = s("447621"),
        d = s("49111");
      function u(e, t) {
        let s = e.hasFeature(d.GuildFeatures.VERIFIED),
          a = e.hasFeature(d.GuildFeatures.DISCOVERABLE),
          l = e.hasFeature(d.GuildFeatures.ENABLED_DISCOVERABLE_BEFORE);
        if (s) return "settings";
        if (!a && !l) return "intro";
        if (null == t) return "settings";
        let n =
          t.sufficientWithoutGracePeriod &&
          null != t.gracePeriodEndDate &&
          t.gracePeriodEndDate > new Date();
        return t.sufficient || n || !a
          ? t.sufficient || n
            ? "settings"
            : "intro"
          : "disqualified";
      }
      function c(e, t) {
        let s = !1,
          a = { guild_id: e.id, automatic: !1 };
        (null == t || e.discoverySplash !== t.discoverySplash) &&
          ((a.discovery_splash_edit_type =
            null == e.discoverySplash ? "removed" : "uploaded"),
          (s = !0)),
          (null == t ||
            e.features.has(d.GuildFeatures.DISCOVERABLE) !==
              t.features.has(d.GuildFeatures.DISCOVERABLE)) &&
            ((a.is_discoverable = e.features.has(d.GuildFeatures.DISCOVERABLE)),
            (s = !0)),
          (null == t || e.rulesChannelId !== t.rulesChannelId) &&
            ((a.rules_channel_id = e.rulesChannelId), (s = !0)),
          s &&
            r.default.track(
              d.AnalyticEvents.GUILD_SETTINGS_DISCOVERY_UPDATED,
              a
            );
      }
      function E(e) {
        var t, s;
        return null !==
          (s =
            null === (t = o.SUGGESTED_TAGS_FOR_CATEGORIES[e]) || void 0 === t
              ? void 0
              : t.map(e => e())) && void 0 !== s
          ? s
          : [];
      }
      ((n = a || (a = {})).UPLOADED = "uploaded"),
        (n.REMOVED = "removed"),
        ((i = l || (l = {})).INTRO = "intro"),
        (i.DISQUALIFIED = "disqualified"),
        (i.SETTINGS = "settings");
    },
    501208: function (e, t, s) {
      "use strict";
      function a(e) {
        return {
          id: e.id,
          name: e.name,
          description: e.description,
          splash: e.splash,
          banner: e.banner,
          icon: e.icon,
          features: new Set(e.features),
          presenceCount: e.approximate_presence_count,
          memberCount: e.approximate_member_count,
          premiumSubscriptionCount: e.premium_subscription_count,
          preferredLocale: e.preferred_locale,
          discoverySplash: e.discovery_splash,
          emojis: e.emojis,
        };
      }
      s.r(t),
        s.d(t, {
          default: function () {
            return a;
          },
        }),
        s("222007");
    },
    132664: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          fetchDiscoverableGuilds: function () {
            return r;
          },
        });
      var a = s("522632"),
        l = s("872717"),
        n = s("913144");
      s("794818"), s("804578");
      var i = s("49111");
      async function r(e) {
        n.default.dispatch({
          type: "DISCOVER_GUILDS_FETCH_START",
          guildIds: e,
        });
        try {
          let t = await l.default.get({
              url: i.Endpoints.GUILD_DISCOVERY,
              query: a.stringify({ guild_ids: e }),
              oldFormErrors: !0,
            }),
            { guilds: s } = t.body;
          n.default.dispatch({
            type: "DISCOVER_GUILDS_FETCH_SUCCESS",
            guilds: s,
          });
        } catch (e) {
          n.default.dispatch({ type: "DISCOVER_GUILDS_FETCH_FAILURE" });
        }
      }
    },
    213307: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return _;
          },
        });
      var a = s("917351"),
        l = s.n(a),
        n = s("446674"),
        i = s("913144"),
        r = s("271938"),
        o = s("449008"),
        d = s("501208");
      let u = {},
        c = 0;
      class E extends n.default.Store {
        initialize() {
          this.waitFor(r.default);
        }
        isFetching() {
          return c > 0;
        }
        getGuild(e) {
          return u[e];
        }
        getGuilds(e) {
          return e.map(e => u[e]).filter(o.isNotNullish);
        }
      }
      E.displayName = "DiscoverGuildsStore";
      var _ = new E(i.default, {
        DISCOVER_GUILDS_FETCH_START: function (e) {
          c += 1;
        },
        DISCOVER_GUILDS_FETCH_SUCCESS: function (e) {
          let { guilds: t } = e;
          c -= 1;
          let s = l.map(t, d.default);
          s.forEach(e => (u[e.id] = e));
        },
        DISCOVER_GUILDS_FETCH_FAILURE: function (e) {
          c -= 1;
        },
      });
    },
    324105: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return g;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("819855"),
        o = s("77078"),
        d = s("841098"),
        u = s("407063"),
        c = s("580357"),
        E = s("587974"),
        _ = s("315102"),
        I = s("159885"),
        T = s("782340"),
        f = s("534045"),
        S = s("68422"),
        m = s("578817");
      let N = [16, 16, 14, 14, 12, 10, 8];
      var g = function (e) {
        var t, s;
        let {
            guild: n,
            disabled: g,
            small: h,
            loading: C = !1,
            description: R,
            memberCount: x,
            presenceCount: L,
            className: O,
          } = e,
          p = (0, d.default)(),
          [A, M] = l.useState(!1);
        if (null == n || C)
          return (0, a.jsx)("div", {
            className: i(O, f.card, f.cardPlaceholder, {
              [f.cardSmall]: h,
              [f.cardDisabled]: g,
            }),
          });
        let { name: D } = n,
          v =
            null != n.discoverySplash && /^data:/.test(n.discoverySplash)
              ? n.discoverySplash
              : _.default.getGuildDiscoverySplashURL({
                  id: n.id,
                  splash: n.discoverySplash,
                  size: 240 * (0, u.getDevicePixelRatio)(),
                }),
          G = (0, r.isThemeDark)(p) ? S : m,
          j =
            null !==
              (t = _.default.getGuildIconURL({
                id: n.id,
                icon: n.icon,
                size: 40,
              })) && void 0 !== t
              ? t
              : void 0,
          U = null != n.description ? n.description : R,
          P = null != x ? x : null == n ? void 0 : n.memberCount,
          b = null != L ? L : null == n ? void 0 : n.presenceCount,
          B = null;
        if (null != j)
          B = (0, a.jsx)("img", { src: j, alt: "", className: f.avatar });
        else {
          let e = (0, I.getAcronym)(n.name);
          B = (0, a.jsx)("div", {
            className: f.defaultIcon,
            children: (0, a.jsx)(o.Text, {
              className: f.acronym,
              style: {
                fontSize:
                  null !== (s = N[e.length]) && void 0 !== s
                    ? s
                    : N[N.length - 1],
              },
              variant: "text-sm/normal",
              children: e,
            }),
          });
        }
        return (0, a.jsxs)("div", {
          className: i(O, f.card, {
            [f.cardSmall]: h,
            [f.cardDisabled]: g,
            [f.splashLoaded]: A,
          }),
          children: [
            (0, a.jsxs)("div", {
              className: f.cardHeader,
              children: [
                (0, a.jsx)("div", {
                  className: f.splash,
                  children: (0, a.jsx)("img", {
                    src: null != v ? v : G,
                    alt: "",
                    className: f.splashImage,
                    onLoad: () => M(!0),
                  }),
                }),
                (0, a.jsx)("div", {
                  className: f.guildIcon,
                  children: (0, a.jsx)(E.default, {
                    mask: E.default.Masks.SQUIRCLE,
                    width: 48,
                    height: 48,
                    children: (0, a.jsx)("div", {
                      className: f.iconMask,
                      children: (0, a.jsx)(E.default, {
                        mask: E.default.Masks.SQUIRCLE,
                        width: 40,
                        height: 40,
                        children: null != B ? B : null,
                      }),
                    }),
                  }),
                }),
              ],
            }),
            (0, a.jsxs)("div", {
              className: f.guildInfo,
              children: [
                (0, a.jsxs)("div", {
                  className: f.title,
                  children: [
                    (0, a.jsx)(c.default, {
                      className: f.verifiedIcon,
                      guild: n,
                      tooltipColor: o.Tooltip.Colors.PRIMARY,
                    }),
                    (0, a.jsx)(o.Text, {
                      className: f.guildName,
                      variant: "text-md/normal",
                      children: (0, a.jsx)("span", { children: D }),
                    }),
                  ],
                }),
                (0, a.jsx)(o.Text, {
                  className: f.description,
                  variant: "text-sm/normal",
                  children: (0, a.jsx)("span", { children: U }),
                }),
                (0, a.jsxs)("div", {
                  className: f.memberInfo,
                  children: [
                    null != b &&
                      (0, a.jsxs)("div", {
                        className: f.memberCount,
                        children: [
                          (0, a.jsx)("div", { className: f.dotOnline }),
                          (0, a.jsx)(o.Text, {
                            variant: "text-xs/normal",
                            children: h
                              ? T.default.Messages.NUMBERS_ONLY.format({
                                  count: b,
                                })
                              : T.default.Messages.INSTANT_INVITE_GUILD_MEMBERS_ONLINE.format(
                                  { membersOnline: b }
                                ),
                          }),
                        ],
                      }),
                    null != P &&
                      (0, a.jsxs)("div", {
                        className: f.memberCount,
                        children: [
                          (0, a.jsx)("div", { className: f.dotOffline }),
                          (0, a.jsx)(o.Text, {
                            variant: "text-xs/normal",
                            children: h
                              ? T.default.Messages.NUMBERS_ONLY.format({
                                  count: P,
                                })
                              : T.default.Messages.INSTANT_INVITE_GUILD_MEMBERS_TOTAL.format(
                                  { count: P }
                                ),
                          }),
                        ],
                      }),
                  ],
                }),
              ],
            }),
          ],
        });
      };
    },
    149632: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          DiscoverySetupModalSteps: function () {
            return l;
          },
          trackFlowAnalytics: function () {
            return d;
          },
          navigateToAndTrackHelpCenterClick: function () {
            return u;
          },
        });
      var a,
        l,
        n = s("716241"),
        i = s("599110"),
        r = s("701909"),
        o = s("49111");
      ((a = l || (l = {})).DESCRIPTION = "description"),
        (a.CATEGORIES = "categories"),
        (a.TAGS = "tags"),
        (a.AGREE_TO_RULES = "agree_to_rules");
      let d = (e, t, s) => {
          i.default.track(o.AnalyticEvents.USER_FLOW_TRANSITION, {
            flow_type: o.AnalyticsSections.DISCOVERY_SETUP_MODAL,
            from_step: e,
            to_step: t,
            ...(0, n.collectGuildAnalyticsMetadata)(s),
          });
        },
        u = e => {
          let {
            articleId: t,
            guildId: s,
            modalStep: a = null,
            pageView: l = null,
          } = e;
          open(r.default.getArticleURL(t)),
            i.default.track(o.AnalyticEvents.DISCOVERY_SETUP_CTA_CLICKED, {
              cta_name: o.HELP_CENTER_CTA_ANALYTICS_NAME,
              discovery_settings_view: l,
              help_center_article_id: t,
              modal_step: a,
              ...(0, n.collectGuildAnalyticsMetadata)(s),
            });
        };
    },
    341595: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          uploadEmojiFile: function () {
            return f;
          },
        });
      var a = s("404118"),
        l = s("150021"),
        n = s("8731"),
        i = s("166382"),
        r = s("599110"),
        o = s("402671"),
        d = s("103603"),
        u = s("958706"),
        c = s("49111"),
        E = s("782340"),
        _ = s("446825").Buffer;
      let I = (e, t, s, a) => (
          r.default.track(
            c.AnalyticEvents.EMOJI_UPLOAD_FILE_SIZE_LIMIT_EXCEEDED,
            { guild_id: s, file_size: t, upload_id: a }
          ),
          i.ImageInputUploadErrors.TOO_BIG
        ),
        T = (e, t, s) => {
          r.default.track(c.AnalyticEvents.EMOJI_FILE_RESIZED, {
            is_animated: !1,
            file_type: e.type.split("/").pop(),
            original_file_size_bytes: e.size,
            resized_file_size_bytes: (0, d.dataUriFileSize)(t),
            resized_file_too_big: s,
          });
        },
        f = async e => {
          let {
              data: t,
              file: s,
              guildId: d,
              uploadId: f,
              roles: S,
              image: m,
              hideErrorModal: N,
            } = e,
            g = o.default.sanitizeEmojiName(s.name.split(".")[0]),
            h = o.default.isFileTooBig(s);
          if (h) {
            if ("image/gif" === s.type) return I(s.name, s.size, d, f);
            if (null != m) {
              let e;
              t = (0, n.downsizeImage)(m, 128, 128);
              try {
                e = o.default.isDataTooBig(t);
              } catch (e) {
                return I(s.name, s.size, d, f);
              }
              if ((T(s, t, e), e)) return I(s.name, s.size, d, f);
            }
          }
          try {
            await (0, l.uploadEmoji)({
              guildId: d,
              image: t,
              name: g,
              roles: S,
            }),
              r.default.track(c.AnalyticEvents.EMOJI_UPLOAD_COMPLETED, {
                guild_id: d,
                upload_id: f,
              });
          } catch (o) {
            let e,
              s,
              { body: l, status: n } = o;
            return (
              null != l &&
                (l.code === c.AbortCodes.TOO_MANY_EMOJI
                  ? ((e = E.default.Messages.TOO_MANY_EMOJI),
                    (s = i.ImageInputUploadErrors.TOO_MANY_EMOJI))
                  : l.code === c.AbortCodes.TOO_MANY_ANIMATED_EMOJI
                    ? ((e = E.default.Messages.TOO_MANY_ANIMATED_EMOJI),
                      (s = i.ImageInputUploadErrors.TOO_MANY_ANIMATED_EMOJI))
                    : null != l.image ||
                        l.code === c.AbortCodes.INVALID_FILE_ASSET_SIZE
                      ? (r.default.track(
                          c.AnalyticEvents
                            .EMOJI_UPLOAD_FILE_SIZE_LIMIT_EXCEEDED,
                          {
                            guild_id: d,
                            file_size: _.byteLength(t),
                            upload_id: f,
                          }
                        ),
                        (e = E.default.Messages.EMOJI_TOO_BIG.format({
                          maxSize: u.EMOJI_MAX_FILESIZE_KB,
                        })),
                        (s = i.ImageInputUploadErrors.TOO_BIG))
                      : (null != l.image ||
                          l.code ===
                            c.AbortCodes.INVALID_FILE_ASSET_SIZE_RESIZE_GIF) &&
                        (s = i.ImageInputUploadErrors.RESIZE_GIF)),
              429 === n &&
                ((e = E.default.Messages.RATE_LIMITED),
                (s = i.ImageInputUploadErrors.RATE_LIMIT)),
              null != e &&
                !N &&
                a.default.show({
                  title: E.default.Messages.GENERIC_ERROR_TITLE,
                  body: e,
                }),
              s
            );
          }
        };
    },
    311340: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          trackReportRaidViewed: function () {
            return E;
          },
          setGuildRaidAlerts: function () {
            return _;
          },
          setGuildIncidentActions: function () {
            return I;
          },
          handleResolveRaid: function () {
            return T;
          },
          handleReportRaid: function () {
            return f;
          },
        }),
        s("222007");
      var a = s("866227"),
        l = s.n(a),
        n = s("872717"),
        i = s("716241"),
        r = s("592407"),
        o = s("305961"),
        d = s("599110"),
        u = s("610174"),
        c = s("49111");
      function E(e) {
        let t =
          arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [];
        0 !== t.length &&
          d.default.track(c.AnalyticEvents.GUILD_RAID_REPORTED, {
            ...(0, i.collectGuildAnalyticsMetadata)(e),
            guild_id: e,
            raid_types: t,
          });
      }
      async function _(e, t) {
        let s = new Set(e.features);
        s.has(c.GuildFeatures.COMMUNITY)
          ? t
            ? s.delete(c.GuildFeatures.RAID_ALERTS_DISABLED)
            : s.add(c.GuildFeatures.RAID_ALERTS_DISABLED)
          : t
            ? s.add(c.GuildFeatures.NON_COMMUNITY_RAID_ALERTS)
            : s.delete(c.GuildFeatures.NON_COMMUNITY_RAID_ALERTS),
          await r.default.saveGuild(e.id, { features: s }, { throwErr: !0 });
      }
      async function I(e, t, s, a) {
        let i = l().add(a, "hours").toISOString(),
          r = await n.default.put({
            url: c.Endpoints.GUILD_INCIDENT_ACTIONS(e),
            body: {
              invites_disabled_until: t ? i : null,
              dms_disabled_until: s ? i : null,
            },
          });
        return r;
      }
      async function T(e, t, s) {
        let { showAlertMode: a } = (0, u.getGuildAlertModeEnabled)(e),
          l = o.default.getGuild(e),
          i = null == l ? void 0 : l.getSafetyAlertsChannelId();
        if (!a || null == i) return null;
        let r = await n.default.post({
          url: c.Endpoints.GUILD_INCIDENT_REPORT_FALSE_ALARM(e),
          body: { alert_message_id: t, reason: s },
        });
        return r;
      }
      async function f(e) {
        let { showAlertMode: t } = (0, u.getGuildAlertModeEnabled)(e),
          s = o.default.getGuild(e),
          a = null == s ? void 0 : s.getSafetyAlertsChannelId();
        if (!t || null == a) return null;
        let l = await n.default.post({
          url: c.Endpoints.GUILD_INCIDENT_REPORT_RAID(e),
        });
        return l;
      }
    },
    413266: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          openReportRaidModal: function () {
            return n;
          },
          openSafetyChannelSetupModal: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078");
      function n(e) {
        (0, l.openModalLazy)(async () => {
          let { default: t } = await s.el("423588").then(s.bind(s, "423588"));
          return s => (0, a.jsx)(t, { ...s, guildId: e });
        });
      }
      function i(e) {
        (0, l.openModalLazy)(async () => {
          let { default: t } = await s.el("982537").then(s.bind(s, "982537"));
          return s => (0, a.jsx)(t, { ...s, guildId: e });
        });
      }
    },
    701203: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useCanReportRaid: function () {
            return c;
          },
          useCanEnableRaidAlerts: function () {
            return E;
          },
        });
      var a = s("884691"),
        l = s("446674");
      s("926809");
      var n = s("957255"),
        i = s("610174"),
        r = s("413476"),
        o = s("311161"),
        d = s("54346"),
        u = s("49111");
      function c(e) {
        var t;
        let s =
            null !== (t = null == e ? void 0 : e.id) && void 0 !== t
              ? t
              : u.EMPTY_STRING_SNOWFLAKE_ID,
          { enableRaidReporting: i } = r.ReportRaidExperiment.useExperiment(
            { guildId: s, location: "4467c7_1" },
            { autoTrackExposure: !1 }
          ),
          c = (0, l.useStateFromStores)(
            [n.default],
            () =>
              (function (e) {
                let t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : n.default;
                return (
                  t.can(u.Permissions.BAN_MEMBERS, e) ||
                  t.can(u.Permissions.KICK_MEMBERS, e) ||
                  t.can(u.Permissions.MANAGE_GUILD, e)
                );
              })(e, n.default),
            [e]
          ),
          E = (0, l.useStateFromStores)(
            [d.default],
            () => (null != e ? d.default.getGuildIncident(e.id) : null),
            [e]
          ),
          _ = null != E && (0, o.hasDetectedActivity)(E);
        return (
          a.useEffect(() => {
            !_ &&
              c &&
              r.ReportRaidExperiment.trackExposure({
                guildId: s,
                location: "4467c7_2",
              });
          }, [_, c, s]),
          !_ && c && i
        );
      }
      function E(e) {
        var t;
        let s =
            null !== (t = null == e ? void 0 : e.id) && void 0 !== t
              ? t
              : u.EMPTY_STRING_SNOWFLAKE_ID,
          a = (0, l.useStateFromStores)(
            [n.default],
            () =>
              (function (e) {
                let t =
                  arguments.length > 1 && void 0 !== arguments[1]
                    ? arguments[1]
                    : n.default;
                return t.can(u.Permissions.MANAGE_GUILD, e);
              })(e, n.default),
            [e]
          ),
          { enableRaidAlerts: o } = r.RaidAlertExperiment.useExperiment(
            { guildId: s, location: "4467c7_3" },
            { autoTrackExposure: a }
          ),
          { showAlertMode: d } = (0, i.useGuildAlertModeEnabled)(s);
        return a && (o || d);
      }
    },
    184890: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useGuildAuditLogV2Enabled: function () {
            return r;
          },
        });
      var a = s("862205"),
        l = s("49111");
      let n = (0, a.createExperiment)({
          kind: "user",
          id: "2022-02_guild_audit_log_user",
          label: "Guild Audit Log - User Feature Flag",
          defaultConfig: { enableForUser: !1 },
          treatments: [
            {
              id: 1,
              label: "Show Guild Audit Log 2.0 for user",
              config: { enableForUser: !0 },
            },
          ],
        }),
        i = (0, a.createExperiment)({
          kind: "guild",
          id: "2022-02_guild_audit_log_guild",
          label: "Guild Audit Log - Guild Feature Flag",
          defaultConfig: { enableForGuild: !1 },
          treatments: [
            {
              id: 1,
              label: "Show Guild Audit Log 2.0 for guild",
              config: { enableForGuild: !0 },
            },
          ],
        });
      function r(e) {
        let { enableForGuild: t } = i.useExperiment({
            guildId: null != e ? e : l.EMPTY_STRING_SNOWFLAKE_ID,
            location: "da2d90_1",
          }),
          { enableForUser: s } = n.useExperiment(
            { location: "da2d90_2" },
            { autoTrackExposure: !1 }
          );
        return s && t;
      }
    },
    203114: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("272030"),
        n = s("42203"),
        i = s("305961"),
        r = s("697218"),
        o = s("156557"),
        d = s("49111"),
        u = s("782340");
      function c(e) {
        let {
          guildId: t,
          log: c,
          onHeaderClick: E,
          className: _,
          expanded: I,
          onContentClick: T,
        } = e;
        return null == t
          ? null
          : (0, a.jsx)(o.default, {
              guildId: t,
              log: c,
              className: _,
              expanded: I,
              onContentClick: T,
              onHeaderClick: () => {
                null == E || E(c);
              },
              onUserContextMenu: e => {
                let { user: n } = c;
                null != n &&
                  null != t &&
                  (0, l.openContextMenuLazy)(e, async () => {
                    let { default: e } = await s
                      .el("471085")
                      .then(s.bind(s, "471085"));
                    return s => (0, a.jsx)(e, { ...s, guildId: t, user: n });
                  });
              },
              onChannelContextMenu: e => {
                let n = i.default.getGuild(t);
                null != c.options.channel &&
                  null != n &&
                  (0, l.openContextMenuLazy)(e, async () => {
                    let { default: e } = await s
                      .el("887127")
                      .then(s.bind(s, "887127"));
                    return t =>
                      (0, a.jsx)(e, { ...t, channel: c.options.channel });
                  });
              },
              onTargetContextMenu: e => {
                switch (c.targetType) {
                  case d.AuditLogTargetTypes.CHANNEL:
                  case d.AuditLogTargetTypes.CHANNEL_OVERWRITE:
                    let o = n.default.getChannel(c.targetId),
                      E = i.default.getGuild(t);
                    if (null != o && null != E)
                      return (0, l.openContextMenuLazy)(e, async () => {
                        let { default: e } = await s
                          .el("887127")
                          .then(s.bind(s, "887127"));
                        return t => (0, a.jsx)(e, { ...t, channel: o });
                      });
                    return (0, l.openContextMenuLazy)(e, async () => {
                      let { default: e } = await s
                        .el("443070")
                        .then(s.bind(s, "443070"));
                      return t =>
                        (0, a.jsx)(e, {
                          ...t,
                          id: c.targetId,
                          label: u.default.Messages.COPY_ID_UNKNOWN,
                        });
                    });
                  case d.AuditLogTargetTypes.USER:
                    let _ = r.default.getUser(c.targetId);
                    if (null != _ && null != t)
                      return (0, l.openContextMenuLazy)(e, async () => {
                        let { default: e } = await s
                          .el("471085")
                          .then(s.bind(s, "471085"));
                        return s =>
                          (0, a.jsx)(e, { ...s, guildId: t, user: _ });
                      });
                }
                return null;
              },
            });
      }
    },
    423290: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          GuildAuditLogSearch: function () {
            return f;
          },
        }),
        s("222007"),
        s("781738");
      var a = s("37983"),
        l = s("884691"),
        n = s("98159"),
        i = s("77078"),
        r = s("137223"),
        o = s("76385"),
        d = s("955513"),
        u = s("172483"),
        c = s("891152"),
        E = s("202752"),
        _ = s("751520"),
        I = s("782340"),
        T = s("556229");
      s("590976");
      function f(e) {
        let { className: t } = e;
        l.useEffect(() => {
          _.clearTokenCache();
        }, []);
        let [s, f] = l.useState({ editorState: E.createEmptyEditorState([]) }),
          { editorState: S } = s,
          [m, N] = l.useState(!0),
          g = null,
          h = e => {
            f(t => ({ ...t, editorState: e }));
          },
          C = e => {
            let t = _.tokenizeQuery(E.getFirstTextBlock(e)).filter(
              e => e.type !== o.default.NON_TOKEN_TYPE
            );
            return E.applyTokensAsEntities(t, e, d.default);
          },
          R = () => {},
          x = () => {
            null != g &&
              Promise.resolve().then(() => (null == g ? void 0 : g.focus()));
          },
          L = () => {
            null == g || g.blur();
          },
          O = e => {
            g = e;
          },
          p = () => {
            N(!0);
          },
          A = () => {
            N(!1), null != S && E.isEmpty(S) && R();
          },
          M = e => {
            if (null == S) return;
            let t = E.getFirstTextBlock(S);
            if (t.length >= 512) return !0;
            let s = S;
            return (
              (s = E.updateContent(e, s)),
              h((s = C((s = E.truncateContent(s, 512))))),
              !m && N(!0),
              !0
            );
          },
          D = e => (e.preventDefault(), !0),
          v = e => {
            if (((e = null != e ? e.replace(/\n/g, "") : ""), null == S))
              return;
            let t = S;
            return (
              (t = E.updateContent(e, t)),
              (t = C((t = E.truncateContent(t, 512)))),
              !m && N(!0),
              h(t),
              !0
            );
          },
          G = null != S && E.getFirstTextBlock(S).length > 0;
        return (0, a.jsx)("div", {
          className: t,
          children: (0, a.jsxs)("div", {
            className: T.search,
            children: [
              (0, a.jsxs)("div", {
                className: T.searchBar,
                children: [
                  (0, a.jsx)(n.Editor, {
                    ref: O,
                    onBlur: A,
                    onFocus: p,
                    handleReturn: D,
                    handleBeforeInput: M,
                    handlePastedText: v,
                    placeholder: I.default.Messages.SEARCH,
                    editorState: S,
                    onChange: h,
                    role: "combobox",
                    ariaLabel: I.default.Messages.SEARCH,
                  }),
                  (0, a.jsx)(r.SearchBarIcon, {
                    onClear: e => {
                      if (null == S) return;
                      e.preventDefault(), e.stopPropagation();
                      let t = E.getFirstTextBlock(S);
                      if ("" === t) {
                        x();
                        return;
                      }
                      let s = S;
                      h((s = E.truncateContent(s, 0))),
                        !m && Promise.resolve().then(() => L());
                    },
                    hasContent: G,
                    className: T.searchIcon,
                  }),
                  (0, a.jsxs)(i.Button, {
                    look: i.Button.Looks.BLANK,
                    className: T.filter,
                    innerClassName: T.filterButton,
                    onClick: () => {},
                    children: [
                      I.default.Messages.GUILD_SETTINGS_AUDIT_LOG_V2_FILTER,
                      (0, a.jsx)(u.default, {
                        className: T.filterIcon,
                        width: 16,
                        height: 16,
                      }),
                    ],
                  }),
                ],
              }),
              (0, a.jsxs)(i.Button, {
                color: i.Button.Colors.PRIMARY,
                className: T.sort,
                innerClassName: T.sortButton,
                size: i.Button.Sizes.SMALL,
                onClick: () => {},
                children: [
                  I.default.Messages.GUILD_SETTINGS_AUDIT_LOG_V2_SORT,
                  (0, a.jsx)(c.default, {
                    className: T.sortIcon,
                    width: 16,
                    height: 16,
                  }),
                ],
              }),
            ],
          }),
        });
      }
    },
    773372: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return G;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("817736"),
        o = s.n(r),
        d = s("974667"),
        u = s("118810"),
        c = s("446674"),
        E = s("77078"),
        _ = s("642950"),
        I = s("206625"),
        T = s("84339"),
        f = s("510889"),
        S = s("287103"),
        m = s("900938"),
        N = s("161778"),
        g = s("305961"),
        h = s("102985"),
        C = s("941886"),
        R = s("309021"),
        x = s("203114"),
        L = s("423290"),
        O = s("782340"),
        p = s("140311"),
        A = s("7691");
      let M = s("170456"),
        D = s("90578");
      function v(e) {
        let {
            logs: t,
            guildId: s,
            expandedId: n,
            lastExpandedId: i,
            scroller: r,
            setExpandedRef: o,
            setLastExpandedRef: u,
            onHeaderClick: c,
            onContentClick: E,
          } = e,
          _ = l.useRef(r);
        l.useEffect(() => {
          _.current = r;
        }, [r]);
        let I = (0, f.default)("audit-log", _);
        return (0, a.jsx)(d.ListNavigatorProvider, {
          navigator: I,
          children: (0, a.jsx)(d.ListNavigatorContainer, {
            children: e => {
              let { ref: l, ...r } = e;
              return (0, a.jsx)("div", {
                ref: l,
                ...r,
                className: p.listContainer,
                children:
                  null == t
                    ? void 0
                    : t.map(e => {
                        let t = n === e.id,
                          l = i === e.id;
                        return (0, a.jsx)(
                          x.default,
                          {
                            guildId: s,
                            ref: t ? o : l ? u : null,
                            className: p.row,
                            onHeaderClick: c,
                            onContentClick: E,
                            log: e,
                            expanded: t,
                          },
                          e.id
                        );
                      }),
              });
            },
          }),
        });
      }
      function G() {
        let e, t;
        let {
            guildId: s,
            guild: n,
            isInitialLoading: r,
            isLoading: d,
            isLoadingNextPage: f,
            showLoadMore: x,
            hasError: G,
            hasOlderLogs: j,
            rawLogs: U,
            theme: P,
            hide: b,
          } = (0, c.useStateFromStoresObject)(
            [m.default, g.default, S.default, h.default, N.default],
            () => {
              let e = m.default.getGuildId(),
                t = g.default.getGuild(e),
                s = S.default.logs;
              return {
                guildId: e,
                guild: t,
                isInitialLoading: S.default.isInitialLoading,
                isLoading: S.default.isLoading,
                isLoadingNextPage: S.default.isLoadingNextPage,
                showLoadMore: S.default.groupedFetchCount > 2,
                hasError: S.default.hasError,
                hasOlderLogs: S.default.hasOlderLogs,
                rawLogs: null != s && null != t ? s : [],
                theme: N.default.theme,
                hide: h.default.enabled,
              };
            }
          ),
          [B, y] = l.useState({
            expandedId: null,
            lastExpandedId: null,
            actionFilterQuery: "",
          }),
          F = R.transformLogs(U, n),
          H = !1,
          k = l.useRef(null),
          w = (0, T.default)(B),
          V = (0, T.default)(F),
          Y = () => {
            var e;
            return (
              (null === (e = k.current) || void 0 === e
                ? void 0
                : e.isScrolledToBottom()) || !1
            );
          };
        x ||
          (null == F ? void 0 : F.length) === (null == V ? void 0 : V.length) ||
          null == k ||
          Y();
        let W = () => {
            let s = { expanded: null, lastExpanded: null };
            if (null != t) {
              let e = o.findDOMNode(t);
              null != e &&
                (0, u.isElement)(e) &&
                (s.lastExpanded = e.getBoundingClientRect());
            }
            if (null != e) {
              let t = o.findDOMNode(e);
              null != t &&
                (0, u.isElement)(t) &&
                (s.expanded = t.getBoundingClientRect());
            }
            return s;
          },
          z = W(),
          K = (0, I.default)(null, () => {
            let { expandedId: s } = B;
            null == s || H
              ? null != s && (H = !1)
              : ((e = null),
                (t = null),
                y(e => ({ ...e, expandedId: null, lastExpandedId: null })),
                (z = W()));
          });
        l.useEffect(() => {
          B.expandedId !== (null == w ? void 0 : w.expandedId) && Z();
        }, []);
        let Z = () => {
            let e = k.current;
            if (null == e) return;
            let t = W(),
              s = z;
            if (
              null == t.expanded ||
              null == t.lastExpanded ||
              null == s.expanded ||
              t.expanded.top < t.lastExpanded.top
            )
              return;
            let a = s.expanded.height - t.lastExpanded.height,
              l = e.getScrollerState(),
              n = l.scrollTop - a;
            e.scrollTo({ to: n });
          },
          X = s => {
            let { expandedId: a } = B;
            a !== s.id
              ? ((H = !0),
                y(e => ({
                  ...e,
                  expandedId: null == s ? void 0 : s.id,
                  lastExpandedId: a,
                })),
                (z = W()))
              : ((e = null),
                (t = null),
                null != a && (z = W()),
                y(e => ({ ...e, expandedId: null, lastExpandedId: null })));
          },
          Q = e => {
            (H = !0), e.stopPropagation();
          },
          J = () => {},
          q = t => {
            e = t;
          },
          $ = e => {
            t = e;
          },
          ee = () =>
            (0, a.jsx)(E.Spinner, {
              type: E.Spinner.Type.SPINNING_CIRCLE,
              className: p.spinner,
            });
        return (0, a.jsx)("div", {
          ref: K,
          className: A.customColumn,
          children: (0, a.jsx)("div", {
            className: A.customContainer,
            children: (0, a.jsx)(E.AdvancedScrollerAuto, {
              className: i(A.customScroller, p.scroller),
              onScroll: () => {
                Y() && J();
              },
              ref: k,
              children: (0, a.jsxs)("div", {
                className: p.content,
                children: [
                  (0, a.jsxs)(a.Fragment, {
                    children: [
                      (0, a.jsx)("div", {
                        className: p.customHeader,
                        children: (0, a.jsx)(E.FormTitle, {
                          tag: E.FormTitleTags.H1,
                          className: p.formTitle,
                          children:
                            O.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG,
                        }),
                      }),
                      (0, a.jsx)(E.FormDivider, { className: p.divider }),
                    ],
                  }),
                  (0, a.jsx)(L.GuildAuditLogSearch, { className: p.search }),
                  (() => {
                    if (b) return (0, a.jsx)(_.default, {});
                    if (d || r) return ee();
                    if ((null == F ? void 0 : F.length) === 0) {
                      let e = G
                          ? O.default.Messages
                              .GUILD_SETTINGS_LABEL_AUDIT_LOG_ERROR_BODY
                          : O.default.Messages
                              .GUILD_SETTINGS_LABEL_AUDIT_LOG_EMPTY_BODY,
                        t = G
                          ? O.default.Messages
                              .GUILD_SETTINGS_LABEL_AUDIT_LOG_ERROR_TITLE
                          : O.default.Messages
                              .GUILD_SETTINGS_LABEL_AUDIT_LOG_EMPTY_TITLE;
                      return (0, a.jsxs)(C.default, {
                        theme: P,
                        className: p.empty,
                        children: [
                          (0, a.jsx)(C.EmptyStateImage, {
                            darkSrc: M,
                            lightSrc: D,
                            width: 272,
                            height: 130,
                          }),
                          (0, a.jsx)(C.EmptyStateText, {
                            note: e,
                            style: { maxWidth: 300 },
                            children: t,
                          }),
                        ],
                      });
                    }
                    let { expandedId: e, lastExpandedId: t } = B;
                    return (0, a.jsx)(v, {
                      logs: F,
                      guildId: s,
                      expandedId: e,
                      lastExpandedId: t,
                      setExpandedRef: q,
                      setLastExpandedRef: $,
                      onHeaderClick: X,
                      onContentClick: Q,
                      scroller: k.current,
                    });
                  })(),
                  (() => {
                    if (x && j && !b)
                      return (0, a.jsx)(E.Button, {
                        color: E.Button.Colors.PRIMARY,
                        className: p.loadMore,
                        onClick: J,
                        children:
                          O.default.Messages.GUILD_SETTINGS_AUDIT_LOG_LOAD_MORE,
                      });
                  })(),
                  !f || b || d ? null : ee(),
                ],
              }),
            }),
          }),
        });
      }
    },
    156557: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return p;
          },
        }),
        s("686130"),
        s("781738");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("866227"),
        o = s.n(r),
        d = s("974667"),
        u = s("77078"),
        c = s("679653"),
        E = s("506885"),
        _ = s("981601"),
        I = s("242020"),
        T = s("27618"),
        f = s("697218"),
        S = s("461380"),
        m = s("258078"),
        N = s("404008"),
        g = s("158998"),
        h = s("309021"),
        C = s("49111"),
        R = s("319849");
      function x(e, t) {
        let s = h.NotRenderedChanges[e.targetType];
        return null != s && !0 === s[t.key];
      }
      class L extends l.PureComponent {
        render() {
          let {
            user: e,
            hideDiscriminator: t,
            onContextMenu: s,
            guildId: l,
          } = this.props;
          return (0, a.jsx)(u.Popout, {
            preload: () =>
              (0, E.default)(e.id, e.getAvatarURL(l, 80), { guildId: l }),
            renderPopout: t =>
              (0, a.jsx)(_.default, { ...t, userId: e.id, guildId: l }),
            children: l =>
              (0, a.jsx)(u.Clickable, {
                ...l,
                onClick: e => {
                  e.stopPropagation(), l.onClick(e);
                },
                onContextMenu: s,
                className: R.userHook,
                children: (0, a.jsxs)("div", {
                  className: R.username,
                  children: [
                    (0, a.jsx)(u.Text, {
                      variant: "text-sm/normal",
                      children: g.default.getUserTag(e, {
                        mode: "username",
                        identifiable: t ? "never" : "always",
                      }),
                    }),
                    !t &&
                      !e.isPomelo() &&
                      (0, a.jsxs)(u.Text, {
                        variant: "text-sm/normal",
                        children: ["#", e.discriminator],
                      }),
                  ],
                }),
              }),
          });
        }
      }
      class O extends l.PureComponent {
        hasChangesToRender() {
          let { log: e } = this.props,
            { changes: t } = e;
          return (
            (e.actionType !== C.AuditLogActionTypes.DELETE ||
              e.action === C.AuditLogActions.MEMBER_BAN_ADD ||
              e.action === C.AuditLogActions.MEMBER_KICK ||
              e.action === C.AuditLogActions.MEMBER_PRUNE) &&
            null != t &&
            t.some(t => !x(e, t))
          );
        }
        getActionTypeColor(e) {
          switch (e) {
            case C.AuditLogActionTypes.CREATE:
              return m.default.Colors.STATUS_GREEN;
            case C.AuditLogActionTypes.DELETE:
              return m.default.Colors.STATUS_RED;
            default:
              return m.default.Colors.STATUS_YELLOW;
          }
        }
        getRowAccentColor() {
          let { log: e } = this.props;
          if (e.action === C.AuditLogActions.MEMBER_BAN_ADD) return R.accentRed;
        }
        renderTitle() {
          let {
              log: e,
              guildId: t,
              onUserContextMenu: s,
              onTargetContextMenu: l,
              onChannelContextMenu: n,
            } = this.props,
            { user: i, target: r, options: o } = e,
            d = h.getChangeTitle(e),
            E = h.getStringForBanReason(e);
          return null != d
            ? (0, a.jsx)(u.Text, {
                className: R.overflowEllipsis,
                variant: "text-sm/normal",
                children: d.format({
                  user: i,
                  target: r,
                  reason: E,
                  userHook: (l, n) =>
                    (0, a.jsx)(
                      L,
                      {
                        guildId: t,
                        user: e.user,
                        onContextMenu: s,
                        hideDiscriminator: !0,
                      },
                      n
                    ),
                  targetHook: (s, n) =>
                    e.targetType === C.AuditLogTargetTypes.USER
                      ? (0, a.jsx)(
                          L,
                          {
                            guildId: t,
                            user: e.target,
                            onContextMenu: l,
                            hideDiscriminator: !1,
                          },
                          n
                        )
                      : (0, a.jsx)(
                          "span",
                          { onContextMenu: l, children: s },
                          n
                        ),
                  count: o.count,
                  channel: o.channel
                    ? "string" == typeof o.channel
                      ? o.channel
                      : (0, c.computeChannelName)(
                          o.channel,
                          f.default,
                          T.default,
                          !0
                        )
                    : null,
                  channelHook: (e, t) =>
                    (0, a.jsx)("span", { onContextMenu: n, children: e }, t),
                }),
              })
            : null;
        }
        renderRoleUpdate(e) {
          let { newValue: t } = e;
          return Array.isArray(t)
            ? t.map(e =>
                (0, a.jsxs)(
                  "div",
                  {
                    className: R.subListItem,
                    children: [
                      (0, a.jsx)(u.Text, {
                        className: R.bullet,
                        color: "text-muted",
                        variant: "text-sm/normal",
                        children: "•",
                      }),
                      (0, a.jsx)(u.Text, {
                        variant: "text-xs/normal",
                        color: "text-normal",
                        children: e.name,
                      }),
                    ],
                  },
                  e.id
                )
              )
            : null;
        }
        renderPermissionUpdate(e) {
          let { newValue: t } = e;
          return Array.isArray(t)
            ? t.map(e => {
                if (null != h.getStringForPermission(e, this.props.log))
                  return (0, a.jsxs)(
                    "div",
                    {
                      className: R.subListItem,
                      children: [
                        (0, a.jsx)(u.Text, {
                          className: R.bullet,
                          color: "text-muted",
                          variant: "text-sm/normal",
                          children: "•",
                        }),
                        (0, a.jsx)(u.Text, {
                          variant: "text-xs/normal",
                          color: "text-normal",
                          children: h.getStringForPermission(e, this.props.log),
                        }),
                      ],
                    },
                    e
                  );
              })
            : null;
        }
        renderChangeDetails(e) {
          let { log: t, onContentClick: s } = this.props;
          if (null == t.changes) return null;
          let l = 0,
            n = t.changes.map((s, n) => {
              let { oldValue: i, newValue: r } = s,
                d = null;
              if (
                (t.action === C.AuditLogActions.MEMBER_ROLE_UPDATE
                  ? (d = this.renderRoleUpdate(s))
                  : (t.targetType === C.AuditLogTargetTypes.ROLE ||
                      t.action === C.AuditLogActions.CHANNEL_OVERWRITE_CREATE ||
                      t.action ===
                        C.AuditLogActions.CHANNEL_OVERWRITE_UPDATE) &&
                    (d = this.renderPermissionUpdate(s)),
                (t.action === C.AuditLogActions.CHANNEL_UPDATE ||
                  t.action === C.AuditLogActions.CHANNEL_CREATE) &&
                  s.key === C.AuditLogChangeKeys.TYPE &&
                  (null != i && (i = (0, N.channelTypeString)({ type: i })),
                  null != r && (r = (0, N.channelTypeString)({ type: r }))),
                t.action === C.AuditLogActions.MEMBER_UPDATE &&
                  s.key === C.AuditLogChangeKeys.COMMUNICATION_DISABLED_UNTIL)
              ) {
                if (null == (r = o(r)) || !r.isValid()) return null;
                r = r.calendar();
              }
              let c = e[s.key];
              if (x(t, s)) return null;
              if (
                ("function" == typeof c && (c = c(s)),
                null != c && "object" == typeof c)
              ) {
                if (null == c.format) {
                  let e = c[s.newValue];
                  null == e && null != c[h.DEFAULT_FOR_STRINGS_KEY]
                    ? (c = c[h.DEFAULT_FOR_STRINGS_KEY])
                    : null != e && (c = e);
                }
                if (null != c && null != c.format) {
                  var E, _;
                  c = c.format({
                    user: t.user,
                    target: t.target,
                    oldValue: i,
                    newValue: r,
                    count: Array.isArray(r) ? r.length : null,
                    subtarget:
                      null !==
                        (_ =
                          null !== (E = t.options.subtarget) && void 0 !== E
                            ? E
                            : s.subtarget) && void 0 !== _
                        ? _
                        : null,
                    newColorHook: (e, t) =>
                      (0, a.jsx)(
                        "div",
                        {
                          className: R.colorHook,
                          style: { backgroundColor: s.newValue },
                        },
                        t
                      ),
                    oldColorHook: (e, t) =>
                      (0, a.jsx)(
                        "div",
                        {
                          className: R.colorHook,
                          style: { backgroundColor: s.oldValue },
                        },
                        t
                      ),
                  });
                }
              }
              return null == c
                ? (console.warn("No change string for", s), null)
                : "" === c
                  ? null
                  : (l++,
                    (0, a.jsxs)(
                      "div",
                      {
                        className: R.detail,
                        children: [
                          (0, a.jsxs)("div", {
                            className: R.prefix,
                            children: [
                              (0, a.jsx)(u.Text, {
                                variant: "text-xs/semibold",
                                color: "text-muted",
                                children: l < 10 ? "0".concat(l) : l,
                              }),
                              (0, a.jsx)(u.Text, {
                                variant: "text-xs/semibold",
                                color: "text-muted",
                                className: R.dash,
                                children: "—",
                              }),
                            ],
                          }),
                          (0, a.jsxs)("div", {
                            className: R.change,
                            children: [
                              null != d
                                ? (0, a.jsx)(u.Text, {
                                    className: R.changeStr,
                                    variant: "text-xs/normal",
                                    children: c.concat(":"),
                                  })
                                : (0, a.jsx)(u.Text, {
                                    className: R.changeStr,
                                    variant: "text-xs/normal",
                                    children: c,
                                  }),
                              null != d
                                ? (0, a.jsx)(u.Text, {
                                    variant: "text-xs/normal",
                                    children: d,
                                  })
                                : null,
                            ],
                          }),
                        ],
                      },
                      n
                    ));
            });
          return (0, a.jsx)(u.Clickable, {
            onClick: s,
            className: R.changeDetails,
            children: n,
          });
        }
        renderChangeSummary() {
          let { expanded: e, log: t } = this.props;
          if (e)
            switch (t.targetType) {
              case C.AuditLogTargetTypes.GUILD:
                return this.renderChangeDetails(h.GuildChangeStrings());
              case C.AuditLogTargetTypes.CHANNEL:
              case C.AuditLogTargetTypes.CHANNEL_OVERWRITE:
                return this.renderChangeDetails(h.ChannelChangeStrings());
              case C.AuditLogTargetTypes.USER:
                return this.renderChangeDetails(h.UserChangeStrings());
              case C.AuditLogTargetTypes.ROLE:
                return this.renderChangeDetails(h.RoleChangeStrings());
              case C.AuditLogTargetTypes.INVITE:
                return this.renderChangeDetails(h.InviteChangeStrings());
              case C.AuditLogTargetTypes.WEBHOOK:
                return this.renderChangeDetails(h.WebhookChangeStrings());
              case C.AuditLogTargetTypes.EMOJI:
                return this.renderChangeDetails(h.EmojiChangeStrings());
              case C.AuditLogTargetTypes.STICKER:
                return this.renderChangeDetails(h.StickerChangeStrings());
              case C.AuditLogTargetTypes.INTEGRATION:
                return this.renderChangeDetails(h.IntegrationChangeStrings());
              case C.AuditLogTargetTypes.STAGE_INSTANCE:
                return this.renderChangeDetails(h.StageInstanceChangeStrings());
              case C.AuditLogTargetTypes.GUILD_SCHEDULED_EVENT:
                return this.renderChangeDetails(
                  h.GuildScheduledEventChangeStrings()
                );
              case C.AuditLogTargetTypes.THREAD:
                return this.renderChangeDetails(h.ThreadChangeStrings());
              case C.AuditLogTargetTypes.APPLICATION_COMMAND:
                return this.renderChangeDetails(
                  h.CommandPermissionChangeStrings(t.changes)
                );
            }
          return null;
        }
        formatActionTagName(e) {
          return e.replaceAll("_", " ").toLocaleLowerCase();
        }
        renderActionTag() {
          let { log: e } = this.props,
            t = (0, I.getTargetType)(e.action);
          if (null != t)
            return (0, a.jsx)("div", {
              className: R.tag,
              children: (0, a.jsx)(u.Text, {
                variant: "text-xs/normal",
                className: R.tagString,
                children: this.formatActionTagName(t),
              }),
            });
        }
        render() {
          let e;
          let {
              log: t,
              className: s,
              expanded: l,
              onHeaderClick: n,
              guildId: r,
            } = this.props,
            o = t.user;
          if (null == o) return null;
          let c = this.hasChangesToRender(),
            I = R.headerDefault;
          l ? (I = R.headerExpanded) : c && (I = R.headerClickable);
          let T = t.timestampStart.calendar(),
            f = t.timestampEnd.calendar();
          e =
            T === f
              ? (0, a.jsx)(u.Text, {
                  className: R.timestamp,
                  variant: "text-xs/normal",
                  children: "• ".concat(T),
                })
              : (0, a.jsx)(u.Text, {
                  className: R.timestamp,
                  variant: "text-xs/normal",
                  children: "• ".concat(T, "—").concat(f),
                });
          let m = c ? n : C.NOOP;
          return (0, a.jsx)(d.ListNavigatorItem, {
            id: t.id,
            children: n =>
              (0, a.jsxs)("div", {
                className: i(this.getRowAccentColor(), R.auditLog, s),
                children: [
                  (0, a.jsxs)(u.Clickable, {
                    className: I,
                    "aria-expanded": l,
                    onClick: m,
                    ...n,
                    children: [
                      (0, a.jsx)(u.Popout, {
                        preload: () =>
                          (0, E.default)(t.userId, o.getAvatarURL(r, 80), {
                            guildId: r,
                          }),
                        renderPopout: e =>
                          (0, a.jsx)(_.default, {
                            ...e,
                            userId: t.userId,
                            guildId: r,
                          }),
                        children: e =>
                          (0, a.jsx)(u.Avatar, {
                            ...e,
                            onClick: t => {
                              t.stopPropagation(), e.onClick(t);
                            },
                            src: o.getAvatarURL(r, 40),
                            "aria-hidden": !0,
                            size: u.AvatarSizes.SIZE_40,
                          }),
                      }),
                      (0, a.jsxs)("div", {
                        className: R.timeWrap,
                        children: [
                          (0, a.jsx)("div", {
                            className: R.title,
                            children: this.renderTitle(),
                          }),
                          (0, a.jsxs)("div", {
                            className: R.meta,
                            children: [this.renderActionTag(), e],
                          }),
                        ],
                      }),
                      c
                        ? (0, a.jsx)(S.default, {
                            className: R.expand,
                            foreground: R.expandForeground,
                            expanded: l,
                            "aria-hidden": !0,
                          })
                        : null,
                    ],
                  }),
                  this.renderChangeSummary(),
                ],
              }),
          });
        }
      }
      var p = O;
    },
    4443: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("836996");
      function i() {
        return (0, a.jsx)("div", {
          className: n.centerContainer,
          children: (0, a.jsx)(l.Spinner, {
            type: l.Spinner.Type.SPINNING_CIRCLE,
          }),
        });
      }
    },
    329606: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return O;
          },
        }),
        s("222007"),
        s("834022");
      var a = s("37983"),
        l = s("884691"),
        n = s("446674"),
        i = s("669491"),
        r = s("77078"),
        o = s("900938"),
        d = s("817674"),
        u = s("944441"),
        c = s("956089"),
        E = s("449008"),
        _ = s("701909"),
        I = s("523096"),
        T = s("353575"),
        f = s("296839"),
        S = s("4443"),
        m = s("151866"),
        N = s("646834"),
        g = s("124188"),
        h = s("155158"),
        C = s("143460"),
        R = s("49111"),
        x = s("782340"),
        L = s("412883");
      function O(e) {
        var t, s;
        let { guildId: O, setPreventNavigation: p = () => {} } = e,
          { editingRule: A, setEditingRule: M } = (0,
          m.useAutomodEditingRuleState)(),
          { guild: D, subsection: v } = (0, n.useStateFromStoresObject)(
            [o.default],
            () => o.default.getProps()
          ),
          G =
            null !==
              (s =
                null !== (t = null == D ? void 0 : D.id) && void 0 !== t
                  ? t
                  : O) && void 0 !== s
              ? s
              : R.EMPTY_STRING_SNOWFLAKE_ID,
          j = null != A,
          [U] = (0, T.useSyncAutomodRulesEffect)(G),
          { rulesByTriggerType: P } = (0, T.useAutomodRulesList)(G),
          b = {
            [f.AutomodTriggerCategory.MEMBERS]:
              x.default.Messages.GUILD_SETTINGS_AUTOMOD_MEMBER_CATEGORY_TITLE,
            [f.AutomodTriggerCategory.CONTENT]:
              x.default.Messages.GUILD_SETTINGS_AUTOMOD_CONTENT_CATEGORY_TITLE,
          },
          B = l.useMemo(
            () =>
              Object.values(null != P ? P : {})
                .flat()
                .filter(E.isNotNullish),
            [P]
          );
        l.useEffect(() => {
          j && M(null);
        }, [G]);
        let y = l.useCallback(
            (e, t) => {
              if (null != e) {
                var s, a;
                return null !==
                  (a =
                    null ===
                      (s = B.find(t => {
                        let { id: s } = t;
                        return s === e;
                      })) || void 0 === s
                      ? void 0
                      : s.name) && void 0 !== a
                  ? a
                  : null;
              }
              return null != t
                ? (0, f.triggerConfigs)[t].getDefaultRuleName()
                : null;
            },
            [B]
          ),
          F = l.useMemo(() => {
            var e, t;
            return y(
              null !== (e = null == A ? void 0 : A.id) && void 0 !== e
                ? e
                : null,
              null !== (t = null == A ? void 0 : A.triggerType) && void 0 !== t
                ? t
                : null
            );
          }, [y, A]);
        l.useEffect(() => {
          p(j, (0, h.createOnPreventNavigation)(F));
        }, [p, j, F]);
        let H = (0, f.useAvailableTriggerTypes)(G),
          k = e =>
            (0, a.jsx)(a.Fragment, {
              children: e.map(e => {
                var t;
                return (0, a.jsx)(
                  g.default,
                  {
                    guildId: G,
                    triggerType: e,
                    rules: null !== (t = P[e]) && void 0 !== t ? t : [],
                    initWithEdit:
                      v === R.GuildSettingsSubsections.AUTOMOD_MENTION_SPAM &&
                      e === C.AutomodTriggerType.MENTION_SPAM,
                  },
                  e
                );
              }),
            });
        return (0, a.jsxs)(r.FormSection, {
          title: x.default.Messages.GUILD_SETTINGS_AUTOMOD_TITLE,
          tag: "h1",
          children: [
            (0, a.jsxs)("div", {
              className: L.descriptionContainer,
              children: [
                (0, a.jsxs)(r.FormSection, {
                  tag: "h3",
                  className: L.description,
                  titleClassName: L.descriptionHeader,
                  children: [
                    (0, a.jsx)(r.Text, {
                      variant: "text-md/medium",
                      color: "header-secondary",
                      children:
                        x.default.Messages
                          .GUILD_SETTINGS_AUTOMOD_MESSAGE_FILTER_DESCRIPTION,
                    }),
                    (0, a.jsx)(r.Text, {
                      variant: "text-sm/medium",
                      className: L.helpUrl,
                      children:
                        x.default.Messages.GUILD_AUTOMOD_LEARN_MORE_LINK.format(
                          {
                            helpUrl: _.default.getArticleURL(
                              R.HelpdeskArticles.GUILD_AUTOMOD_BLOCKED_MESSAGE
                            ),
                          }
                        ),
                    }),
                  ],
                }),
                (0, a.jsxs)("div", {
                  className: L.descriptionAvatarContainer,
                  children: [
                    (0, a.jsx)(r.Avatar, {
                      src: (0, I.getAutomodAvatarURL)(),
                      size: r.AvatarSizes.SIZE_80,
                      "aria-label": x.default.Messages.GUILD_AUTOMOD_USERNAME,
                    }),
                    (0, a.jsx)(c.TextBadge, {
                      text: (0, a.jsxs)("div", {
                        className: L.automodBadgeText,
                        children: [
                          (0, a.jsx)(u.default, {
                            width: 12,
                            height: 12,
                            className: L.checkmarkIcon,
                          }),
                          (0, a.jsx)(r.Text, {
                            variant: "text-xs/bold",
                            className: L.automodText,
                            children: x.default.Messages.GUILD_AUTOMOD_USERNAME,
                          }),
                        ],
                      }),
                      color: i.default.unsafe_rawColors.BRAND_500.css,
                      className: L.textBadge,
                    }),
                  ],
                }),
              ],
            }),
            U
              ? (0, a.jsx)(S.default, {})
              : Object.entries(H).map(e => {
                  let [t, s] = e;
                  if (0 === s.length) return (0, a.jsx)(l.Fragment, {}, t);
                  let n =
                    null != b[t]
                      ? (0, a.jsx)(r.FormSection, {
                          tag: "h3",
                          className: L.categoryHeader,
                          children: (0, a.jsx)(r.Text, {
                            variant: "text-lg/normal",
                            color: "header-primary",
                            children: b[t],
                          }),
                        })
                      : null;
                  return (0, a.jsxs)(
                    "div",
                    { className: L.categoryContainer, children: [n, k(s)] },
                    t
                  );
                }),
            null != D &&
              (0, a.jsx)(d.GuildExplicitContentFilter, {
                guild: D,
                withDivider: !1,
                className: L.explicitContentFilterSection,
              }),
            (0, a.jsx)(N.default, { guildId: G, existingRules: B }),
            j && (0, a.jsx)("div", { className: L.endSpacer }),
          ],
        });
      }
    },
    646834: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return _;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("266491"),
        n = s("77078"),
        i = s("45299"),
        r = s("965397"),
        o = s("454686"),
        d = s("353575"),
        u = s("151866"),
        c = s("782340"),
        E = s("869451");
      function _(e) {
        let { guildId: t, existingRules: s } = e,
          {
            cancelEditingRule: _,
            isLoading: I,
            hasChanges: T,
            editingRule: f,
            errorMessage: S,
            saveEditingRule: m,
          } = (0, u.useAutomodEditingRuleActions)(),
          { updateRule: N } = (0, d.useAutomodRulesList)(t),
          g = null != f,
          h = g && !(0, o.isBackendPersistedRule)(f),
          C = g || T || h,
          R = async () => {
            if (!T && !h) return _();
            null != f && !h && N(f);
            let e = s.find(e => {
              let { id: t } = e;
              return t === (null == f ? void 0 : f.id);
            });
            try {
              let e = await m(s);
              null != e && N(e);
            } catch (t) {
              null != e && N(e);
            }
          },
          x = c.default.Messages.CANCEL,
          L =
            !T && g
              ? c.default.Messages.GUILD_AUTOMOD_EDIT_NO_CHANGES.format({
                  ruleName: null == f ? void 0 : f.name,
                })
              : void 0;
        return (
          null != S &&
            (L = (0, a.jsx)(n.Text, {
              variant: "text-md/normal",
              color: "text-danger",
              className: E.message,
              children: S,
            })),
          (0, a.jsx)(l.TransitionGroup, {
            component: "div",
            className: E.saveNoticeContainer,
            children:
              C &&
              (0, a.jsx)(r.default, {
                children: (0, a.jsx)(i.default, {
                  submitting: I,
                  disabled: I,
                  onSave: R,
                  onReset: _,
                  onResetText: x,
                  message: L,
                }),
              }),
          })
        );
      }
    },
    914559: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return E;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("462392"),
        i = s("613375"),
        r = s("426016"),
        o = s("450546"),
        d = s("143460"),
        u = s("439418");
      function c(e) {
        let { action: t, triggerType: s, toggled: i, onToggleAction: r } = e,
          o = (0, n.getActionInfo)(t.type, t, s);
        if (null == o) return null;
        let { headerText: d, descriptionText: c, icon: E } = o;
        return (0, a.jsxs)("div", {
          className: u.actionContainer,
          children: [
            (0, a.jsx)("div", {
              className: u.actionIconContainer,
              children: (0, a.jsx)(E, {
                width: 24,
                height: 24,
                className: u.actionIcon,
              }),
            }),
            (0, a.jsxs)("div", {
              className: u.actionTextContainer,
              children: [
                (0, a.jsx)(l.Heading, {
                  variant: "heading-sm/semibold",
                  children: d,
                }),
                (0, a.jsx)(l.Text, {
                  color: "interactive-normal",
                  variant: "text-xs/medium",
                  children: c,
                }),
              ],
            }),
            (0, a.jsx)("div", {
              children: (0, a.jsx)(l.Checkbox, {
                disabled: !o.isEditable,
                type: l.Checkbox.Types.INVERTED,
                value: i,
                onChange: () => r(!1),
                className: u.actionCheckbox,
              }),
            }),
          ],
        });
      }
      function E(e) {
        let {
          action: t,
          guildId: s,
          triggerType: l,
          toggled: n,
          onToggleAction: u,
        } = e;
        switch (t.type) {
          case d.AutomodActionType.FLAG_TO_CHANNEL:
            return (0, a.jsx)(o.default, {
              action: t,
              triggerType: l,
              toggled: n,
              onToggleAction: u,
            });
          case d.AutomodActionType.USER_COMMUNICATION_DISABLED:
            return (0, a.jsx)(r.default, {
              action: t,
              guildId: s,
              triggerType: l,
              toggled: n,
              onToggleAction: u,
            });
          case d.AutomodActionType.BLOCK_MESSAGE:
            return (0, a.jsx)(i.default, {
              action: t,
              triggerType: l,
              toggled: n,
              onToggleAction: u,
            });
          default:
            return (0, a.jsx)(c, {
              action: t,
              guildId: s,
              toggled: n,
              triggerType: l,
              onToggleAction: u,
            });
        }
      }
    },
    88063: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return S;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("146606"),
        i = s("733724"),
        r = s("446674"),
        o = s("77078"),
        d = s("206230"),
        u = s("351825"),
        c = s("454686"),
        E = s("296839"),
        _ = s("151866"),
        I = s("842357"),
        T = s("782340"),
        f = s("672703");
      function S(e) {
        let { guildId: t, triggerType: s } = e,
          S = l.useMemo(() => () => (0, c.createDefaultRule)(t, s), [t, s]),
          [m] = l.useState(S),
          [N, g] = l.useState(!1),
          { editingRule: h, createNewEditingRule: C } = (0,
          _.useAutomodEditingRuleState)(),
          { getDefaultRuleName: R } = E.triggerConfigs[s],
          x = (0, r.useStateFromStores)(
            [d.default],
            () => d.default.useReducedMotion
          ),
          L =
            !(0, c.isBackendPersistedRule)(h) &&
            (null == h ? void 0 : h.triggerType) === s,
          [O, p] = l.useState(L ? h : m),
          A = (0, n.useSpring)({
            opacity: L ? 0 : 1,
            pointerEvents: L ? "none" : "all",
            config: { ...n.config.stiff, clamp: !0 },
            immediate: x,
          }),
          M = (0, n.useSpring)({
            opacity: L ? 1 : 0,
            pointerEvents: L ? "all" : "none",
            config: { ...n.config.stiff, clamp: !0 },
            immediate: x,
            onStart: () => {
              p(L ? h : m);
            },
            onRest: () => {
              p(L ? h : m), g(L);
            },
          });
        return null == h || L
          ? (0, a.jsxs)("div", {
              className: f.mainRuleContainer,
              style: { height: L ? "auto" : "60px" },
              children: [
                (0, a.jsx)(n.animated.div, {
                  className: f.animatedRuleCardContainer,
                  style: M,
                  children: (0, a.jsx)(I.default, { rule: O, persistEdit: N }),
                }),
                (0, a.jsx)(n.animated.div, {
                  className: f.animatedNewRuleContainer,
                  style: A,
                  children: (0, a.jsxs)(o.Clickable, {
                    className: f.addAnotherRuleCardContainer,
                    onClick: () => {
                      C(t, s);
                    },
                    children: [
                      (0, a.jsx)(u.default, {
                        width: 20,
                        height: 20,
                        color: i.default.BLUE_345,
                        className: f.plusIcon,
                      }),
                      (0, a.jsx)(o.Text, {
                        variant: "text-md/semibold",
                        color: "text-link",
                        children:
                          T.default.Messages.GUILD_AUTOMOD_ADD_ADDITIONAL_RULE.format(
                            { ruleName: R() }
                          ),
                      }),
                    ],
                  }),
                }),
              ],
            })
          : null;
      }
    },
    320493: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("454686"),
        i = s("842357");
      function r(e) {
        let { guildId: t, triggerType: s } = e,
          r = l.useMemo(() => () => (0, n.createDefaultRule)(t, s), [t, s]),
          [o] = l.useState(r);
        return (0, a.jsx)(i.default, { rule: o });
      }
    },
    169456: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("77078"),
        i = s("837899"),
        r = s("425190"),
        o = s("301341"),
        d = s("782340"),
        u = s("123402");
      function c(e) {
        let {
            onChange: t,
            initialValue: s,
            maxWordCount: c,
            collapsed: E = !1,
          } = e,
          [_, I] = l.useState(!E);
        return (0, a.jsx)(n.Collapsible, {
          isExpanded: _,
          collapsibleContent: (0, a.jsx)(o.default, {
            onChangeText: t,
            maxWordCount: c,
            className: u.keywordTextAreaContainer,
            textAreaClassName: u.keywordTextArea,
            subtitleText: d.default.Messages.GUILD_AUTOMOD_ALLOW_LIST_SUBTITLE,
            initialValue: s,
          }),
          className: u.collapseable,
          children: e => {
            let { onClick: t } = e;
            return (0, a.jsx)(n.Clickable, {
              onClick: e => {
                I(!_), t(e);
              },
              children: (0, a.jsxs)("div", {
                className: u.header,
                children: [
                  (0, a.jsx)(n.Heading, {
                    variant: "text-sm/medium",
                    children: d.default.Messages.GUILD_AUTOMOD_ALLOW_LIST_TITLE,
                  }),
                  _
                    ? (0, a.jsx)(r.default, { className: u.arrow })
                    : (0, a.jsx)(i.default, { className: u.arrow }),
                ],
              }),
            });
          },
        });
      }
    },
    219555: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return T;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("446674"),
        o = s("77078"),
        d = s("731898"),
        u = s("206230"),
        c = s("945330"),
        E = s("673122"),
        _ = s("484635");
      let I = l.forwardRef(function (e, t) {
        var s, n;
        let {
            value: r,
            isSelected: d,
            isEditing: u,
            forceShowErrorTooltip: c = !1,
            error: E,
          } = e,
          [I, T, f] = l.useMemo(() => {
            if (null == E) return [];
            let {
                erroringCharacterOffset: e = 0,
                erroringCharacterLength: t = r.length,
              } = null != E ? E : {},
              s = r.slice(0, e),
              a = r.slice(e, e + t),
              l = r.slice(e + t);
            return [s, a, l];
          }, [r, E]);
        if (null == E)
          return (0, a.jsx)("div", {
            className: i(_.chipletValue, {
              [_.isEditing]: u,
              [_.isSelected]: d,
            }),
            ref: t,
            children: r,
          });
        let S =
          (null !== (s = null == I ? void 0 : I.length) && void 0 !== s
            ? s
            : 0) +
            (null !== (n = null == T ? void 0 : T.length) && void 0 !== n
              ? n
              : 0) >
          70;
        return S
          ? (0, a.jsx)(o.Tooltip, {
              "aria-label": E.message,
              text: () =>
                (0, a.jsxs)("div", {
                  "aria-label": E.message,
                  children: [
                    E.message,
                    " ",
                    (0, a.jsx)("span", {
                      className: _.errorOverflowValue,
                      children: T,
                    }),
                  ],
                }),
              tooltipClassName: _.errorTooltip,
              color: o.Tooltip.Colors.RED,
              position: "left",
              forceOpen: c || void 0,
              children: e =>
                (0, a.jsxs)("div", {
                  ref: t,
                  className: i(_.chipletValue, {
                    [_.isEditing]: u,
                    [_.isError]: null != E && !u,
                    [_.isOverflowing]: null != E && !u,
                  }),
                  ...e,
                  children: [
                    (0, a.jsx)("span", { children: I }),
                    (0, a.jsx)("span", {
                      className: _.errorValue,
                      children: T,
                    }),
                    (0, a.jsx)("span", { children: f }),
                  ],
                }),
            })
          : (0, a.jsxs)("div", {
              ref: t,
              className: i(_.chipletValue, {
                [_.isEditing]: u,
                [_.isError]: null != E && !u,
              }),
              children: [
                (0, a.jsx)("span", { children: I }),
                (0, a.jsx)(o.Tooltip, {
                  text: E.message,
                  color: o.Tooltip.Colors.RED,
                  position: "top",
                  forceOpen: c || void 0,
                  children: e =>
                    (0, a.jsx)("span", {
                      ...e,
                      className: _.errorValue,
                      children: T,
                    }),
                }),
                (0, a.jsx)("span", { children: f }),
              ],
            });
      });
      function T(e) {
        let {
            value: t,
            onChange: s,
            onBlur: n,
            onFocus: T,
            onRemove: f,
            isSelected: S,
            isSelecting: m,
            error: N,
            forceShowErrorTooltip: g,
          } = e,
          h = l.useRef(null),
          C = l.useRef(null),
          [R, x] = l.useState(!1),
          { ref: L, width: O = 0 } = (0, d.default)(R),
          { ref: p, width: A = 0 } = (0, d.default)(R),
          M = (0, r.useStateFromStores)(
            [u.default],
            () => u.default.useReducedMotion
          ),
          [D, v] = l.useState(g),
          G = l.useRef(null),
          j = O > A ? O : A;
        l.useEffect(() => {
          g
            ? (v(!0),
              (G.current = setTimeout(() => {
                v(!1), (G.current = null);
              }, E.CHIPLET_ERROR_FORCE_SHOW_TOOLTIP_TIMER_MS)))
            : v(!1);
        }, [g]),
          l.useEffect(
            () => () => {
              clearTimeout(G.current);
            },
            []
          );
        let U = l.useCallback(
            e => {
              s(e.target.value);
            },
            [s]
          ),
          P = l.useCallback(
            function () {
              let e =
                  arguments.length > 0 &&
                  void 0 !== arguments[0] &&
                  arguments[0],
                s = t.trim().length <= 0;
              if (
                (s && f(),
                null != h.current && null != L.current && null != C.current)
              ) {
                var a;
                h.current.scrollTo(0, 0),
                  h.current.setSelectionRange(0, 0),
                  (h.current.scrollLeft = 0),
                  (L.current.scrollLeft = 0),
                  (null === (a = C.current) || void 0 === a ? void 0 : a.ref) !=
                    null && (C.current.ref.scrollLeft = 0);
              }
              x(!1), n(e);
            },
            [t, L, n, f]
          ),
          b = l.useCallback(
            e => {
              let s = t.trim().length <= 0;
              E.NEXT_CHIP_INPUT_KEY.has(e.key)
                ? (e.preventDefault(), e.stopPropagation(), P(!0))
                : "Backspace" === e.key &&
                  s &&
                  (e.preventDefault(), e.stopPropagation(), P(!0));
            },
            [P, t]
          ),
          B = l.useCallback(
            e => {
              let t = e.metaKey || e.ctrlKey;
              T(t), t ? e.preventDefault() : x(!0), e.stopPropagation();
            },
            [T]
          ),
          y = l.useCallback(
            e => {
              f();
            },
            [f]
          );
        return (0, a.jsx)("div", {
          className: _.chipletFlexContainer,
          children: (0, a.jsxs)("div", {
            ref: p,
            className: i(_.chipletContainer, {
              [_.isEditing]: R,
              [_.smallBlink]: !R && !M,
              [_.isSelected]: S,
              [_.isSelecting]: m,
              [_.isError]: null != N && !R,
            }),
            children: [
              (0, a.jsxs)(o.Clickable, {
                tag: "div",
                onBlur: () => P(!1),
                onClick: B,
                ignoreKeyPress: !0,
                onMouseEnter: () => v(!0),
                onMouseLeave: () => v(!1),
                className: i(_.chipletContainerInner, {
                  [_.isSelecting]: m,
                  [_.isEditing]: R,
                }),
                ref: C,
                children: [
                  (0, a.jsx)("input", {
                    className: i(_.chipletInput, {
                      [_.isEditing]: R,
                      [_.isSelecting]: m,
                    }),
                    ref: h,
                    onChange: U,
                    onKeyDownCapture: b,
                    value: t,
                    style: {
                      width: j > 0 ? j : "calc(".concat(t.length, "ch + 10px)"),
                    },
                  }),
                  (0, a.jsx)(I, {
                    ref: L,
                    value: t,
                    isEditing: R,
                    isSelected: S,
                    error: N,
                    forceShowErrorTooltip: D || R,
                  }),
                ],
              }),
              !R &&
                (0, a.jsx)(o.Clickable, {
                  className: _.closeIconContainer,
                  onClick: y,
                  children: (0, a.jsx)(c.default, {
                    className: _.closeIcon,
                    width: 12,
                    height: 12,
                  }),
                }),
            ],
          }),
        });
      }
    },
    995482: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return T;
          },
        }),
        s("222007"),
        s("860677");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("77078"),
        o = s("594203"),
        d = s("219555"),
        u = s("673122"),
        c = s("955198"),
        E = s("646435");
      function _(e) {
        let { resizableNode: t, onResize: s, onResizeEnd: l } = e,
          n = (0, o.default)({
            minDimension: u.CHIPLET_TEXT_AREA_MIN_HEIGHT,
            resizableDomNodeRef: t,
            onElementResize: s,
            onElementResizeEnd: l,
            orientation: o.ResizeOrientation.VERTICAL_BOTTOM,
            throttleDuration: 16,
          });
        return (0, a.jsx)("div", { onMouseDown: n, className: E.resizeHandle });
      }
      let I = l.forwardRef(function (e, t) {
        let { children: s, onFocus: n, onBlur: i, onClick: o } = e,
          d = l.useRef(null),
          [c, I] = l.useState(u.CHIPLET_TEXT_AREA_MIN_HEIGHT);
        return (0, a.jsxs)(r.Clickable, {
          className: E.textArea,
          onFocus: n,
          onBlur: i,
          onClick: o,
          innerRef: d,
          ignoreKeyPress: !0,
          style: { minHeight: c },
          children: [
            (0, a.jsx)(r.AdvancedScroller, {
              className: E.innerScroller,
              style: { minHeight: c - 2 },
              ref: t,
              children: s,
            }),
            (0, a.jsx)(_, {
              resizableNode: d,
              onResize: I,
              onResizeEnd: e => {
                I(e), null == n || n();
              },
            }),
          ],
        });
      });
      function T(e) {
        var t;
        let {
            initialValue: s,
            onChangeTags: n,
            onChangeNewTagValue: o,
            tagErrors: u = {},
            placeholder: _,
            className: T,
            maxTags: f,
          } = e,
          S = l.useRef(null),
          m = l.useRef(null),
          N = l.useRef(null),
          g = (0, c.useChipletState)(s),
          {
            handlePasteEvent: h,
            handleInputChange: C,
            handleKeyDown: R,
            handleContainerKeyUp: x,
            handleRemoveTag: L,
            handleTagChangeEvent: O,
            handleSelectTag: p,
            handleUnselectTag: A,
            handleResetTagSelections: M,
            handleInputBlurEvent: D,
          } = (0, c.useChipletStateHandlers)(g, {
            scrollerRef: N,
            mainInputRef: S,
            mainContainerRef: m,
          }),
          {
            state: { value: v, tags: G, selections: j, isSelecting: U },
          } = g,
          [P, b] = l.useState(!1),
          B = l.useCallback(() => {
            var e;
            b(!1),
              M(),
              null === (e = S.current) ||
                void 0 === e ||
                e.focus({ preventScroll: !0 });
          }, [M]);
        l.useEffect(() => {
          !P && n(G);
        }, [n, G, P]),
          l.useEffect(() => {
            !P && o(v);
          }, [o, v, P]);
        let y = l.useCallback(
            function () {
              let e =
                arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
              e && B(), b(!1);
            },
            [B]
          ),
          F = l.useCallback(
            e => t => {
              if (t) {
                var s;
                let t = j.includes(G[e]);
                null === (s = S.current) || void 0 === s || s.focus(),
                  t
                    ? A(e)
                    : (p(e),
                      setImmediate(() => {
                        var e;
                        null === (e = S.current) || void 0 === e || e.blur(),
                          setTimeout(() => {
                            var e;
                            return null === (e = m.current) || void 0 === e
                              ? void 0
                              : e.focus();
                          }, 16);
                      }));
              } else A(e, !0), b(!0);
            },
            [p, A, j, G]
          );
        return (0, a.jsxs)("div", {
          className: i(E.mainContainer, T),
          ref: m,
          tabIndex: 0,
          onKeyUp: x,
          children: [
            (0, a.jsxs)(I, {
              ref: N,
              onClick: B,
              children: [
                G.map((e, t) =>
                  (0, a.jsx)(
                    d.default,
                    {
                      value: e,
                      onChange: O(t),
                      onBlur: y,
                      onFocus: F(t),
                      onRemove: () => L(t),
                      isSelected: j.includes(e),
                      isSelecting: U,
                      error: u[e],
                      forceShowErrorTooltip: !P && t === G.length - 1,
                    },
                    t
                  )
                ),
                (0, a.jsx)("input", {
                  className: i(E.mainTextInput, { [E.isEditingOtherNodes]: P }),
                  ref: S,
                  onChange: C,
                  onKeyDownCapture: R,
                  onPaste: h,
                  onBlur: D,
                  placeholder: 0 === G.length ? _ : void 0,
                  value: v,
                }),
              ],
            }),
            null != f &&
              (0, a.jsxs)(r.Text, {
                variant: "text-xs/normal",
                color: "text-muted",
                className: E.maxTags,
                children: [
                  null !== (t = null == G ? void 0 : G.length) && void 0 !== t
                    ? t
                    : 0,
                  "/",
                  f,
                ],
              }),
          ],
        });
      }
    },
    673122: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          NEXT_CHIP_INPUT_KEY: function () {
            return a;
          },
          CHIPLET_STATE_HISTORY_KEYS: function () {
            return l;
          },
          CHIPLET_ERROR_FORCE_SHOW_TOOLTIP_TIMER_MS: function () {
            return n;
          },
          CHIPLET_TEXT_AREA_MIN_HEIGHT: function () {
            return i;
          },
          CHIPLET_PASTE_SEPERATOR: function () {
            return r;
          },
        }),
        s("222007");
      let a = new Set(["Enter", "Tab"]),
        l = new Set(["z", "y"]),
        n = 5e3,
        i = 100,
        r = /[\n\t\r\f\v\x10]/;
    },
    484811: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return u;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("77078"),
        i = s("143460"),
        r = s("782340"),
        o = s("321125");
      function d(e) {
        let { preset: t, toggled: s, onToggle: l } = e,
          { headerText: d, subtitleText: u } = (function (e) {
            let t = null,
              s = null;
            switch (e) {
              case i.KeywordPreset.PROFANITY:
                (t =
                  r.default.Messages
                    .GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_PROFANITY_HEADER),
                  (s = (0, a.jsx)(a.Fragment, {
                    children:
                      r.default.Messages
                        .GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_PROFANITY_SUBTITLE,
                  }));
                break;
              case i.KeywordPreset.SEXUAL_CONTENT:
                (t =
                  r.default.Messages
                    .GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_SEXUAL_CONTENT_HEADER),
                  (s = (0, a.jsx)(a.Fragment, {
                    children:
                      r.default.Messages
                        .GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_SEXUAL_CONTENT_SUBTITLE,
                  }));
                break;
              case i.KeywordPreset.SLURS:
                (t =
                  r.default.Messages
                    .GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_SLURS_HEADER),
                  (s = (0, a.jsx)(a.Fragment, {
                    children:
                      r.default.Messages
                        .GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_SLURS_SUBTITLE,
                  }));
                break;
              default:
                (t = "Error"), (s = "Unrecognized list");
            }
            return { headerText: t, subtitleText: s };
          })(t);
        return (0, a.jsxs)("div", {
          className: o.keywordListContainer,
          children: [
            (0, a.jsxs)("div", {
              className: o.keywordListTextContainer,
              children: [
                (0, a.jsx)(n.Heading, {
                  variant: "heading-sm/semibold",
                  children: d,
                }),
                (0, a.jsx)(n.Text, {
                  color: "interactive-normal",
                  variant: "text-xs/medium",
                  children: u,
                }),
              ],
            }),
            (0, a.jsx)(n.Checkbox, {
              className: o.toggle,
              type: n.Checkbox.Types.INVERTED,
              value: s,
              onChange: () => l(t),
            }),
          ],
        });
      }
      function u(e) {
        var t;
        let { rule: s, onChangeRule: n } = e,
          [r, o] = l.useState(
            new Set(
              null == s
                ? void 0
                : null === (t = s.triggerMetadata) || void 0 === t
                  ? void 0
                  : t.presets
            )
          ),
          u = l.useMemo(
            () => e => {
              n({
                ...s,
                triggerMetadata: { ...s.triggerMetadata, presets: e },
              });
            },
            [n, s]
          ),
          c = e => {
            let t = new Set(r);
            t.has(e) ? t.delete(e) : t.add(e), o(t), u(Array.from(t));
          };
        return (0, a.jsxs)("div", {
          children: [
            (0, a.jsx)(d, {
              preset: i.KeywordPreset.PROFANITY,
              toggled: r.has(i.KeywordPreset.PROFANITY),
              onToggle: c,
            }),
            (0, a.jsx)(d, {
              preset: i.KeywordPreset.SLURS,
              toggled: r.has(i.KeywordPreset.SLURS),
              onToggle: c,
            }),
            (0, a.jsx)(d, {
              preset: i.KeywordPreset.SEXUAL_CONTENT,
              toggled: r.has(i.KeywordPreset.SEXUAL_CONTENT),
              onToggle: c,
            }),
          ],
        });
      }
    },
    839670: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return I;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("169456"),
        i = s("484811"),
        r = s("185709"),
        o = s("260928"),
        d = s("67310"),
        u = s("296416"),
        c = s("143460"),
        E = s("782340"),
        _ = s("334568");
      function I(e) {
        var t, s, I;
        let { rule: T, onChangeRule: f } = e,
          S = l.useCallback(
            e => {
              f({
                ...T,
                triggerMetadata: { ...T.triggerMetadata, allowList: e },
              });
            },
            [f, T]
          );
        return (0, a.jsx)(a.Fragment, {
          children: (0, a.jsxs)("div", {
            className: _.cardContentsContainer,
            children: [
              (0, a.jsxs)(d.default, {
                step: 1,
                header:
                  E.default.Messages
                    .GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_TRIGGER_DESCRIPTION,
                children: [
                  (0, a.jsx)(i.default, { rule: T, onChangeRule: f }),
                  (0, a.jsx)(n.default, {
                    onChange: S,
                    initialValue:
                      null === (t = T.triggerMetadata) || void 0 === t
                        ? void 0
                        : t.allowList,
                    maxWordCount:
                      c.MAX_KEYWORDS_PER_ALLOWLIST_DEFAULT_KEYWORD_RULE,
                    collapsed:
                      (null === (s = T.triggerMetadata) || void 0 === s
                        ? void 0
                        : s.allowList) == null ||
                      (null === (I = T.triggerMetadata) || void 0 === I
                        ? void 0
                        : I.allowList.length) === 0,
                  }),
                ],
              }),
              (0, a.jsx)(u.default, { type: u.default.Type.ARROW_DOWN }),
              (0, a.jsx)(d.default, {
                step: 2,
                header: E.default.Messages.GUILD_AUTOMOD_ACTIONS_HEADER,
                children: (0, a.jsx)(r.default, { rule: T, onChangeRule: f }),
              }),
              (0, a.jsx)(u.default, { type: u.default.Type.CROSS }),
              (0, a.jsx)(d.default, {
                step: 3,
                header: E.default.Messages.GUILD_AUTOMOD_EXEMPTION_HEADER,
                children: (0, a.jsx)(o.default, { rule: T, onChangeRule: f }),
              }),
            ],
          }),
        });
      }
    },
    316841: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("462392"),
        i = s("974020");
      function r(e) {
        var t;
        let { action: s, actionType: r, triggerType: o } = e,
          d = (0, n.getActionInfo)(
            null !== (t = null == s ? void 0 : s.type) && void 0 !== t ? t : r,
            s,
            o
          );
        if (null == d) return null;
        let { headerText: u, helperText: c, icon: E } = d;
        return (0, a.jsxs)("div", {
          className: i.actionContainer,
          children: [
            (0, a.jsx)("div", {
              className: i.actionIconContainer,
              children: (0, a.jsx)(E, {
                width: 14,
                height: 14,
                className: i.actionIcon,
              }),
            }),
            (0, a.jsx)("div", {
              className: i.actionTextContainer,
              children: (0, a.jsxs)(l.Text, {
                className: i.actionTextHeader,
                variant: "text-xs/medium",
                color: "interactive-normal",
                children: [
                  u,
                  null != c &&
                    (0, a.jsx)(l.Text, {
                      className: i.actionTextHelper,
                      variant: "text-xs/medium",
                      color: "text-muted",
                      tag: "span",
                      children: c,
                    }),
                ],
              }),
            }),
          ],
        });
      }
    },
    613375: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return o;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("462392"),
        i = s("782340"),
        r = s("439418");
      function o(e) {
        let { action: t, triggerType: s, toggled: o, onToggleAction: d } = e,
          u = e => () => d(e),
          c = (0, n.getActionInfo)(t.type, t, s);
        if (null == c) return null;
        let { headerText: E, descriptionText: _, icon: I } = c;
        return (0, a.jsxs)("div", {
          className: r.actionContainer,
          children: [
            (0, a.jsx)("div", {
              className: r.actionIconContainer,
              children: (0, a.jsx)(I, {
                width: 24,
                height: 24,
                className: r.actionIcon,
              }),
            }),
            (0, a.jsxs)("div", {
              className: r.actionTextContainer,
              children: [
                (0, a.jsx)(l.Heading, {
                  variant: "heading-sm/semibold",
                  children: E,
                }),
                (0, a.jsx)(l.Text, {
                  color: "interactive-normal",
                  variant: "text-xs/medium",
                  children: _,
                }),
                o
                  ? (0, a.jsxs)(l.Text, {
                      color: "text-muted",
                      variant: "text-xs/medium",
                      children: [
                        i.default.Messages
                          .GUILD_AUTOMOD_ACTIONS_BLOCK_MESSAGE_CUSTOM_MESSAGE_HELPER,
                        (0, a.jsx)(l.Clickable, {
                          onClick: u(!0),
                          className: r.editChannel,
                          tag: "span",
                          role: "link",
                          children:
                            i.default.Messages
                              .GUILD_AUTOMOD_ACTIONS_BLOCK_MESSAGE_CUSTOM_MESSAGE_CTA,
                        }),
                      ],
                    })
                  : null,
              ],
            }),
            (0, a.jsx)("div", {
              children: (0, a.jsx)(l.Checkbox, {
                type: l.Checkbox.Types.INVERTED,
                value: o,
                onChange: u(!1),
                className: r.actionCheckbox,
              }),
            }),
          ],
        });
      }
    },
    426016: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return I;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("446674"),
        n = s("77078"),
        i = s("305961"),
        r = s("957255"),
        o = s("462392"),
        d = s("143460"),
        u = s("49111"),
        c = s("903639"),
        E = s("782340"),
        _ = s("439418");
      function I(e) {
        var t;
        let {
            action: s,
            triggerType: I,
            guildId: T,
            toggled: f,
            onToggleAction: S,
          } = e,
          m = e => () => S(e),
          N = (0, o.getActionInfo)(s.type, s, I),
          g =
            null === (t = s.metadata) || void 0 === t
              ? void 0
              : t.durationSeconds,
          h = null != g ? (0, c.getFriendlyDurationString)(g) : null,
          C = (0, l.useStateFromStores)(
            [r.default, i.default],
            () =>
              r.default.can(
                u.Permissions.MODERATE_MEMBERS,
                i.default.getGuild(T)
              ),
            [T]
          );
        if (null == N) return null;
        let { headerText: R, descriptionText: x, icon: L } = N;
        return (0, a.jsxs)("div", {
          className: _.actionContainer,
          children: [
            (0, a.jsx)("div", {
              className: _.actionIconContainer,
              children: (0, a.jsx)(L, {
                width: 24,
                height: 24,
                className: _.actionIcon,
              }),
            }),
            (0, a.jsxs)("div", {
              className: _.actionTextContainer,
              children: [
                (0, a.jsx)(n.Heading, {
                  variant: "heading-sm/semibold",
                  children: R,
                }),
                (0, a.jsx)(n.Text, {
                  color: "interactive-normal",
                  variant: "text-xs/medium",
                  children: x,
                }),
                f &&
                  (0, a.jsxs)(n.Text, {
                    color: "interactive-normal",
                    variant: "text-xs/medium",
                    children: [
                      (function (e, t) {
                        if (null === t) return null;
                        if (e === d.AutomodTriggerType.MENTION_SPAM)
                          return E.default.Messages.GUILD_AUTOMOD_ACTIONS_TIMEOUT_EDIT_HELPER_MENTION_SPAM.format(
                            { friendlyDurationString: t }
                          );
                        return E.default.Messages.GUILD_AUTOMOD_ACTIONS_TIMEOUT_EDIT_HELPER.format(
                          { friendlyDurationString: t }
                        );
                      })(I, h),
                      C &&
                        (0, a.jsx)(n.Clickable, {
                          onClick: m(!0),
                          className: _.editChannel,
                          tag: "span",
                          role: "link",
                          children:
                            E.default.Messages
                              .GUILD_AUTOMOD_ACTIONS_TIMEOUT_UPDATE_DURATION,
                        }),
                    ],
                  }),
              ],
            }),
            (0, a.jsx)(n.Tooltip, {
              text: E.default.Messages.GUILD_AUTOMOD_MISSING_TIMEOUT_PERMISSIONS.format(),
              "aria-label":
                E.default.Messages.GUILD_AUTOMOD_MISSING_TIMEOUT_PERMISSIONS.plainFormat(),
              shouldShow: !C,
              children: e =>
                (0, a.jsx)("div", {
                  ...e,
                  children: (0, a.jsx)(n.Checkbox, {
                    type: n.Checkbox.Types.INVERTED,
                    value: f,
                    onChange: m(!1),
                    disabled: !C,
                    className: _.actionCheckbox,
                  }),
                }),
            }),
          ],
        });
      }
    },
    450546: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return _;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("446674"),
        n = s("77078"),
        i = s("679653"),
        r = s("42203"),
        o = s("27618"),
        d = s("697218"),
        u = s("462392"),
        c = s("782340"),
        E = s("439418");
      function _(e) {
        var t;
        let { action: s, triggerType: _, toggled: I, onToggleAction: T } = e,
          f = e => () => T(e),
          S = (0, u.getActionInfo)(s.type, s, _),
          m = null === (t = s.metadata) || void 0 === t ? void 0 : t.channelId,
          N = (0, l.useStateFromStores)(
            [d.default, o.default, r.default],
            () => {
              let e = r.default.getChannel(m);
              if (null == e) return null;
              let t = (0, i.computeChannelName)(e, d.default, o.default);
              return t;
            },
            [m]
          );
        if (null == S) return null;
        let { headerText: g, descriptionText: h, icon: C } = S;
        return (0, a.jsxs)("div", {
          className: E.actionContainer,
          children: [
            (0, a.jsx)("div", {
              className: E.actionIconContainer,
              children: (0, a.jsx)(C, {
                width: 24,
                height: 24,
                className: E.actionIcon,
              }),
            }),
            (0, a.jsxs)("div", {
              className: E.actionTextContainer,
              children: [
                (0, a.jsx)(n.Heading, {
                  variant: "heading-sm/semibold",
                  children: g,
                }),
                (0, a.jsx)(n.Text, {
                  color: "interactive-normal",
                  variant: "text-xs/medium",
                  children: h,
                }),
                I &&
                  (0, a.jsxs)(n.Text, {
                    color: "text-muted",
                    variant: "text-xs/medium",
                    children: [
                      null != N &&
                        c.default.Messages.GUILD_AUTOMOD_ACTIONS_FLAG_TO_CHANNEL_EDIT_HELPER.format(
                          { channelName: N }
                        ),
                      (0, a.jsx)(n.Clickable, {
                        onClick: f(!0),
                        className: E.editChannel,
                        tag: "span",
                        role: "link",
                        children: c.default.Messages.EDIT_CHANNEL,
                      }),
                    ],
                  }),
              ],
            }),
            (0, a.jsx)("div", {
              children: (0, a.jsx)(n.Checkbox, {
                type: n.Checkbox.Types.INVERTED,
                value: I,
                onChange: f(!1),
                className: E.actionCheckbox,
              }),
            }),
          ],
        });
      }
    },
    185709: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return d;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("369035"),
        i = s("296839"),
        r = s("928098"),
        o = s("914559");
      function d(e) {
        let { rule: t, onChangeRule: s } = e,
          d = l.useMemo(
            () => (0, i.getAvailableActionTypes)(t.triggerType),
            [t.triggerType]
          ),
          u = r.getPromiseableActionHandlers(t.guildId),
          c = l.useMemo(() => (0, n.getDefaultActions)(), []),
          E = (e, a) => {
            if (null == a) return;
            let l = t.actions.some(e => e.type === a.type),
              n = [...t.actions, a];
            if (l) {
              let s = t.actions.filter(e => e.type !== a.type);
              n = e ? [...s, a] : s;
            }
            s({ ...t, actions: n });
          },
          _ = e => async s => {
            let a = t.actions.find(t => t.type === e),
              l = null != a,
              n = c[e],
              i = s ? a : n;
            if (null != i && (!l || s)) {
              let s = u[e];
              if (null != s) {
                let e = await s(t, i);
                E(!0, e);
              } else E(!0, i);
            } else E(!1, l ? a : n);
          };
        return (0, a.jsx)(a.Fragment, {
          children: d.map(e => {
            let s = t.actions.find(t => t.type === e);
            return (0, a.jsx)(
              o.default,
              {
                guildId: t.guildId,
                triggerType: t.triggerType,
                action: null != s ? s : c[e],
                toggled: null != s,
                onToggleAction: _(e),
              },
              e
            );
          }),
        });
      }
    },
    872708: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return u;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("454686"),
        n = s("839670"),
        i = s("279843"),
        r = s("447820"),
        o = s("154639"),
        d = s("309175");
      function u(e) {
        let { rule: t, isLoading: s, onChangeRule: u } = e;
        return null == t
          ? null
          : (0, l.isRuleKeywordFilter)(t)
            ? (0, a.jsx)(i.default, { rule: t, isLoading: s, onChangeRule: u })
            : (0, l.isRuleMLSpamFilter)(t)
              ? (0, a.jsx)(r.default, {
                  rule: t,
                  isLoading: s,
                  onChangeRule: u,
                })
              : (0, l.isRuleDefaultKeywordListFilter)(t)
                ? (0, a.jsx)(n.default, {
                    rule: t,
                    isLoading: s,
                    onChangeRule: u,
                  })
                : (0, l.isRuleMentionSpamFilter)(t)
                  ? (0, a.jsx)(o.default, {
                      rule: t,
                      isLoading: s,
                      onChangeRule: u,
                    })
                  : (0, l.isRuleUserProfileFilter)(t)
                    ? (0, a.jsx)(d.default, {
                        rule: t,
                        isLoading: s,
                        onChangeRule: u,
                      })
                    : null;
      }
    },
    279843: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return T;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("169456"),
        i = s("185709"),
        r = s("432107"),
        o = s("301341"),
        d = s("260928"),
        u = s("67310"),
        c = s("296416"),
        E = s("143460"),
        _ = s("782340"),
        I = s("334568");
      function T(e) {
        var t, s, T, f, S, m;
        let { rule: N, onChangeRule: g } = e,
          h = l.useCallback(
            e => {
              g({
                ...N,
                triggerMetadata: { ...N.triggerMetadata, keywordFilter: e },
              });
            },
            [g, N]
          ),
          C = l.useCallback(
            e => {
              g({
                ...N,
                triggerMetadata: { ...N.triggerMetadata, allowList: e },
              });
            },
            [g, N]
          );
        return (0, a.jsx)(a.Fragment, {
          children: (0, a.jsxs)("div", {
            className: I.cardContentsContainer,
            children: [
              (0, a.jsxs)(u.default, {
                step: 1,
                header:
                  _.default.Messages
                    .GUILD_AUTOMOD_KEYWORD_FILTER_TRIGGER_HEADER,
                children: [
                  (0, a.jsx)(o.default, {
                    onChangeText: h,
                    maxWordCount: E.MAX_KEYWORDS_PER_KEYWORD_FILTER,
                    initialValue:
                      null === (t = N.triggerMetadata) || void 0 === t
                        ? void 0
                        : t.keywordFilter,
                  }),
                  (0, a.jsx)(r.default, {
                    rule: N,
                    onChangeRule: g,
                    collapsed:
                      (null == N
                        ? void 0
                        : null === (s = N.triggerMetadata) || void 0 === s
                          ? void 0
                          : s.regexPatterns) == null ||
                      (null == N
                        ? void 0
                        : null === (T = N.triggerMetadata) || void 0 === T
                          ? void 0
                          : T.regexPatterns.length) === 0,
                  }),
                  (0, a.jsx)(n.default, {
                    onChange: C,
                    initialValue:
                      null === (f = N.triggerMetadata) || void 0 === f
                        ? void 0
                        : f.allowList,
                    maxWordCount:
                      E.MAX_KEYWORDS_PER_ALLOWLIST_KEYWORD_FILTER_RULE,
                    collapsed:
                      (null === (S = N.triggerMetadata) || void 0 === S
                        ? void 0
                        : S.allowList) == null ||
                      (null === (m = N.triggerMetadata) || void 0 === m
                        ? void 0
                        : m.allowList.length) === 0,
                  }),
                ],
              }),
              (0, a.jsx)(c.default, { type: c.default.Type.ARROW_DOWN }),
              (0, a.jsx)(u.default, {
                step: 2,
                header: _.default.Messages.GUILD_AUTOMOD_ACTIONS_HEADER,
                children: (0, a.jsx)(i.default, { rule: N, onChangeRule: g }),
              }),
              (0, a.jsx)(c.default, { type: c.default.Type.CROSS }),
              (0, a.jsx)(u.default, {
                step: 3,
                header: _.default.Messages.GUILD_AUTOMOD_EXEMPTION_HEADER,
                children: (0, a.jsx)(d.default, { rule: N, onChangeRule: g }),
              }),
            ],
          }),
        });
      }
    },
    432107: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return E;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("77078"),
        i = s("837899"),
        r = s("425190"),
        o = s("183866"),
        d = s("464847"),
        u = s("782340"),
        c = s("958268");
      function E(e) {
        var t;
        let { rule: s, onChangeRule: E, collapsed: _ = !1 } = e,
          [I, T] = l.useState(!_),
          f = l.useCallback(() => {
            T(!I);
          }, [I, T]),
          S = l.useCallback(
            e => {
              E({
                ...s,
                triggerMetadata: { ...s.triggerMetadata, regexPatterns: e },
              });
            },
            [E, s]
          );
        return (0, o.isRegexSupported)(s.triggerType)
          ? (0, a.jsx)(n.Collapsible, {
              isExpanded: I,
              collapsibleContent: (0, a.jsx)(d.default, {
                rule: s,
                onChangeText: S,
                className: c.textAreaContainer,
                initialValue:
                  null === (t = s.triggerMetadata) || void 0 === t
                    ? void 0
                    : t.regexPatterns,
              }),
              className: c.collapseable,
              children: e => {
                let { onClick: t } = e;
                return (0, a.jsx)(n.Clickable, {
                  onClick: e => {
                    f(), t(e);
                  },
                  children: (0, a.jsxs)("div", {
                    className: c.header,
                    children: [
                      (0, a.jsx)(n.Heading, {
                        variant: "text-sm/medium",
                        children:
                          u.default.Messages.GUILD_AUTOMOD_REGEX_TEXTAREA_TITLE,
                      }),
                      I
                        ? (0, a.jsx)(r.default, { className: c.arrow })
                        : (0, a.jsx)(i.default, { className: c.arrow }),
                    ],
                  }),
                });
              },
            })
          : null;
      }
    },
    464847: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return S;
          },
        }),
        s("222007"),
        s("808653");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("77078"),
        o = s("701909"),
        d = s("995482"),
        u = s("16207"),
        c = s("143460"),
        E = s("49111"),
        _ = s("782340"),
        I = s("772806");
      let T = o.default.getArticleURL(E.HelpdeskArticles.GUILD_AUTOMOD_REGEX);
      function f(e) {
        let { hasErrors: t, text: s, errorText: l } = e;
        return t
          ? (0, a.jsx)("div", {
              className: i(I.subtext),
              children: (0, a.jsx)(r.Text, {
                className: i(I.errorSpan),
                variant: "text-xs/medium",
                color: "text-danger",
                children:
                  null != l
                    ? l
                    : _.default.Messages.GUILD_AUTOMOD_REGEX_ERROR_HELP.format({
                        helpArticle: T,
                      }),
              }),
            })
          : (0, a.jsx)(r.Text, {
              className: I.subtext,
              variant: "text-xs/medium",
              color: "text-muted",
              children: s,
            });
      }
      function S(e) {
        var t, s;
        let { rule: n, onChangeText: r, className: o } = e,
          {
            patterns: E,
            valueError: S,
            errors: m,
            validatePatternsChanged: N,
            validateEditingValueChanged: g,
          } = (0, u.default)(n, r),
          [h] = l.useState(() => ({
            tags: E,
            value: "",
            selections: [],
            isSelecting: !1,
          })),
          C = l.useMemo(
            () =>
              m.reduce((e, t) => {
                let {
                    pattern: s,
                    message: a,
                    description: l,
                    erroringCharacterLength: n = s.length,
                    erroringCharacterOffset: i = 0,
                  } = t,
                  r = E.find(e => e === s);
                return null == r
                  ? e
                  : ((e[s] = {
                      value: s,
                      message: null != l ? l : a,
                      erroringCharacterLength: n,
                      erroringCharacterOffset: i,
                    }),
                    e);
              }, {}),
            [m, E]
          ),
          R = l.useCallback(
            e => {
              N(e, E);
            },
            [N, E]
          ),
          x = l.useCallback(
            e => {
              g(e);
            },
            [g]
          );
        return (0, a.jsxs)("div", {
          className: i(I.keywordsContainer, o),
          children: [
            (0, a.jsx)(d.default, {
              placeholder: "^b(a|@)d$\nw(o|0)rd(s|$)",
              initialValue: h,
              onChangeTags: R,
              onChangeNewTagValue: x,
              tagErrors: C,
              maxTags: c.MAX_REGEX_PATTERNS_PER_KEYWORD_FILTER,
            }),
            (0, a.jsx)(f, {
              text: _.default.Messages.GUILD_AUTOMOD_REGEX_SUBTEXT.format({
                helpArticle: T,
              }),
              hasErrors: m.length > 0 || null != S,
              errorText:
                null !==
                  (s =
                    null ===
                      (t = m.find(e => {
                        let { pattern: t } = e;
                        return t === u.SCHEMA_ERROR_KEY;
                      })) || void 0 === t
                      ? void 0
                      : t.message) && void 0 !== s
                  ? s
                  : null == S
                    ? void 0
                    : S.message,
            }),
          ],
        });
      }
    },
    301341: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("77078"),
        o = s("201074"),
        d = s("782340"),
        u = s("589197");
      function c(e) {
        let {
            onChangeText: t,
            maxWordCount: s,
            className: n,
            textAreaClassName: c,
            subtitleText: E,
            initialValue: _,
          } = e,
          I = l.useMemo(() => (null != _ ? _ : []), [_]),
          { value: T, onChange: f, errorMessage: S } = (0, o.default)(t, _, s);
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsxs)("div", {
              className: i(u.keywordsContainer, n),
              children: [
                (0, a.jsx)(r.TextAreaAutosize, {
                  className: i(u.keywordsTextArea, c),
                  value: T,
                  onChange: f,
                  placeholder:
                    d.default.Messages.GUILD_AUTOMOD_KEYWORDS_PLACEHOLDER,
                }),
                (0, a.jsx)(r.Text, {
                  className: u.keywordsCounter,
                  variant: "text-xs/normal",
                  color: "text-muted",
                  children: "".concat(I.length, " / ").concat(s),
                }),
              ],
            }),
            null != S
              ? (0, a.jsx)(r.Text, {
                  className: i(u.paddingTop, u.errorText),
                  variant: "text-xs/medium",
                  color: "text-danger",
                  children: S,
                })
              : (0, a.jsx)(r.Text, {
                  className: u.paddingTop,
                  variant: "text-xs/normal",
                  color: "header-secondary",
                  children:
                    null != E
                      ? E
                      : d.default.Messages.GUILD_AUTOMOD_KEYWORD_ENTRY_HINT,
                }),
          ],
        });
      }
    },
    447820: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return u;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("185709"),
        n = s("260928"),
        i = s("67310"),
        r = s("296416"),
        o = s("782340"),
        d = s("334568");
      function u(e) {
        let { rule: t, onChangeRule: s } = e;
        return (0, a.jsx)(a.Fragment, {
          children: (0, a.jsxs)("div", {
            className: d.cardContentsContainer,
            children: [
              (0, a.jsx)(i.default, {
                step: 1,
                header:
                  o.default.Messages
                    .GUILD_AUTOMOD_ML_SPAM_FILTER_TRIGGER_HEADER,
              }),
              (0, a.jsx)(r.default, { type: r.default.Type.ARROW_DOWN }),
              (0, a.jsx)(i.default, {
                step: 2,
                header: o.default.Messages.GUILD_AUTOMOD_ACTIONS_HEADER,
                children: (0, a.jsx)(l.default, { rule: t, onChangeRule: s }),
              }),
              (0, a.jsx)(r.default, { type: r.default.Type.CROSS }),
              (0, a.jsx)(i.default, {
                step: 3,
                header: o.default.Messages.GUILD_AUTOMOD_EXEMPTION_HEADER,
                children: (0, a.jsx)(n.default, { rule: t, onChangeRule: s }),
              }),
            ],
          }),
        });
      }
    },
    154639: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return S;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("77078"),
        i = s("751433"),
        r = s("116320"),
        o = s("412131"),
        d = s("926809"),
        u = s("185709"),
        c = s("260928"),
        E = s("67310"),
        _ = s("296416"),
        I = s("143460"),
        T = s("782340"),
        f = s("747623");
      function S(e) {
        var t, s;
        let { rule: S, onChangeRule: m } = e,
          [N, g] = l.useState(
            null === (t = S.triggerMetadata) || void 0 === t
              ? void 0
              : t.mentionTotalLimit
          ),
          h = (0, d.useIsMentionRaidExperimentEnabled)(S.guildId, !1);
        return (0, a.jsx)(a.Fragment, {
          children: (0, a.jsxs)("div", {
            className: f.cardContentsContainer,
            children: [
              (0, a.jsxs)(E.default, {
                step: 1,
                header:
                  T.default.Messages
                    .GUILD_AUTOMOD_MENTION_SPAM_FILTER_TRIGGER_HEADER,
                children: [
                  (0, a.jsxs)("div", {
                    className: f.mentionLimitContainer,
                    children: [
                      (0, a.jsx)("div", {
                        className: f.mentionLimitIconContainer,
                        children: (0, a.jsx)(r.default, {
                          width: 24,
                          height: 24,
                          className: f.mentionLimitIcon,
                        }),
                      }),
                      (0, a.jsxs)("div", {
                        className: f.mentionLimitTextContainer,
                        children: [
                          (0, a.jsx)(n.Heading, {
                            variant: "heading-sm/semibold",
                            children:
                              T.default.Messages
                                .GUILD_AUTOMOD_MENTION_SPAM_FILTER_TRIGGER_DESCRIPTION,
                          }),
                          (0, a.jsx)(n.Text, {
                            color: "interactive-normal",
                            variant: "text-xs/medium",
                            className: f.descriptionHint,
                            children:
                              T.default.Messages
                                .GUILD_AUTOMOD_MENTION_SPAM_FILTER_TRIGGER_DESCRIPTION_HINT,
                          }),
                        ],
                      }),
                      (0, a.jsx)("div", {
                        className: f.stepperContainer,
                        children: (0, a.jsx)(i.default, {
                          value: N,
                          onChange: e => {
                            g(e),
                              m({
                                ...S,
                                triggerMetadata: {
                                  ...S.triggerMetadata,
                                  mentionTotalLimit: e,
                                },
                              });
                          },
                          minValue: I.MIN_MENTION_SPAM_LIMIT,
                          maxValue: I.MAX_MENTION_SPAM_LIMIT,
                          className: f.stepper,
                        }),
                      }),
                    ],
                  }),
                  h
                    ? (0, a.jsxs)("div", {
                        className: f.mentionLimitContainer,
                        children: [
                          (0, a.jsx)("div", {
                            className: f.mentionLimitIconContainer,
                            children: (0, a.jsx)(o.default, {
                              width: 24,
                              height: 24,
                              className: f.mentionLimitIcon,
                            }),
                          }),
                          (0, a.jsxs)("div", {
                            className: f.mentionLimitTextContainer,
                            children: [
                              (0, a.jsx)(n.Heading, {
                                variant: "heading-sm/semibold",
                                children:
                                  T.default.Messages
                                    .GUILD_AUTOMOD_MENTION_SPAM_FILTER_RAID_DESCRIPTION,
                              }),
                              (0, a.jsx)(n.Text, {
                                color: "interactive-normal",
                                variant: "text-xs/medium",
                                className: f.descriptionHint,
                                children:
                                  T.default.Messages
                                    .GUILD_AUTOMOD_MENTION_SPAM_FILTER_RAID_DESCRIPTION_HINT,
                              }),
                            ],
                          }),
                          (0, a.jsx)("div", {
                            children: (0, a.jsx)(n.Checkbox, {
                              type: n.Checkbox.Types.INVERTED,
                              value:
                                null === (s = S.triggerMetadata) || void 0 === s
                                  ? void 0
                                  : s.mentionRaidProtectionEnabled,
                              onChange: (e, t) => {
                                m({
                                  ...S,
                                  triggerMetadata: {
                                    ...S.triggerMetadata,
                                    mentionRaidProtectionEnabled: t,
                                  },
                                });
                              },
                              className: f.actionCheckbox,
                            }),
                          }),
                        ],
                      })
                    : null,
                ],
              }),
              (0, a.jsx)(_.default, { type: _.default.Type.ARROW_DOWN }),
              (0, a.jsx)(E.default, {
                step: 2,
                header: T.default.Messages.GUILD_AUTOMOD_ACTIONS_HEADER,
                children: (0, a.jsx)(u.default, { rule: S, onChangeRule: m }),
              }),
              (0, a.jsx)(_.default, { type: _.default.Type.CROSS }),
              (0, a.jsx)(E.default, {
                step: 3,
                header: T.default.Messages.GUILD_AUTOMOD_EXEMPTION_HEADER,
                children: (0, a.jsx)(c.default, { rule: S, onChangeRule: m }),
              }),
            ],
          }),
        });
      }
    },
    842357: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return E;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("454686"),
        i = s("254365"),
        r = s("151866"),
        o = s("155158"),
        d = s("872708"),
        u = s("567062"),
        c = s("736523"),
        E = l.memo(function (e) {
          let { rule: t, persistEdit: s = !1, initWithEdit: E = !1 } = e,
            {
              hasChanges: _,
              editingRule: I,
              createNewEditingRule: T,
              setEditingRule: f,
            } = (0, r.useAutomodEditingRuleState)(),
            { isLoading: S } = (0, r.useAutomodEditingRuleActions)(),
            [m] = l.useState(() => !(0, n.isBackendPersistedRule)(t)),
            N = (null == I ? void 0 : I.id) === t.id || s,
            g = (0, i.isDefaultRuleId)(null == t ? void 0 : t.id),
            h = N && null != I ? I : t,
            C = l.useMemo(
              () => (0, o.createOnPreventNavigation)(t.name),
              [null == t ? void 0 : t.name]
            ),
            R = l.useCallback(() => {
              T(t.guildId, t.triggerType);
            }, [t.guildId, t.triggerType, T]),
            x = l.useCallback(
              e => {
                !S && f(e, !0);
              },
              [S, f]
            );
          l.useEffect(() => {
            E && f(t, !0);
          }, [E, t, f]);
          let L = l.useCallback(() => {
            N
              ? !_ && f(null)
              : _
                ? C(() => {
                    f(t);
                  })
                : f(t);
          }, [N, _, C, t, f]);
          return (0, a.jsx)(u.default, {
            renderHeader: (0, a.jsx)(c.default, {
              rule: h,
              forceSetup: m && !N && !g,
              triggerType: t.triggerType,
              isEditMode: N,
              isDefaultRule: g,
              onChangeRule: x,
              onSetupRule: R,
            }),
            isStuck: N && _,
            isExpanded: N,
            onExpand: L,
            children:
              N &&
              (0, a.jsx)(d.default, { rule: h, isLoading: S, onChangeRule: x }),
          });
        });
    },
    260928: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return u;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("77078"),
        i = s("165426"),
        r = s("571067"),
        o = s("782340"),
        d = s("847353"),
        u = l.memo(function (e) {
          let { rule: t, onlyRoles: s = !1, onChangeRule: l } = e,
            u = (0, a.jsx)(i.default, {
              guildId: t.guildId,
              selectedChannelIds: t.exemptChannels,
              selectedRoleIds: t.exemptRoles,
              onChange: (e, s) =>
                l({ ...t, exemptChannels: e, exemptRoles: s }),
              disableEveryoneRole: !0,
              includeRoleRestrictedPrivateChannels: !0,
            });
          return (
            s &&
              (u = (0, a.jsx)(r.default, {
                guildId: t.guildId,
                selectedRoleIds: t.exemptRoles,
                onChange: e => l({ ...t, exemptRoles: e }),
                placeholder:
                  o.default.Messages
                    .GUILD_AUTOMOD_EXEMPTION_SEARCH_ROLE_PLACEHOLDER,
                disableEveryoneRole: !0,
              })),
            (0, a.jsxs)(n.FormItem, {
              children: [
                u,
                (0, a.jsx)(n.Text, {
                  color: "header-secondary",
                  variant: "text-xs/normal",
                  className: d.exemptionHint,
                  children: o.default.Messages.GUILD_AUTOMOD_EXEMPTION_HINT,
                }),
              ],
            })
          );
        });
    },
    736523: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return M;
          },
        }),
        s("808653"),
        s("424973"),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("917351"),
        i = s("77078"),
        r = s("272030"),
        o = s("740822"),
        d = s("298878"),
        u = s("663745"),
        c = s("454686"),
        E = s("353575"),
        _ = s("296839"),
        I = s("151866"),
        T = s("183866"),
        f = s("316841"),
        S = s("788112"),
        m = s("143460"),
        N = s("782340"),
        g = s("201498");
      function h(e) {
        let { rule: t, triggerType: s } = e,
          n = l.useMemo(
            () =>
              null == t
                ? (0, _.getAvailableActionTypes)(s).map(e =>
                    (0, a.jsx)(f.default, { actionType: e, triggerType: s }, e)
                  )
                : (0, _.getAvailableActionTypes)(s).reduce((e, l) => {
                    var n;
                    let i = t.actions.find(e => {
                      let { type: t } = e;
                      return l === t;
                    });
                    return null == i
                      ? e
                      : (e.push(
                          (0, a.jsx)(
                            f.default,
                            {
                              actionType: l,
                              action: i,
                              triggerType:
                                null !==
                                  (n = null == t ? void 0 : t.triggerType) &&
                                void 0 !== n
                                  ? n
                                  : s,
                            },
                            l
                          )
                        ),
                        e);
                  }, []),
            [t, s]
          );
        return 0 === n.length
          ? null
          : (0, a.jsx)("div", {
              className: g.actionRuleListContainer,
              children: n,
            });
      }
      let C = (e, t) => () => t({ ...e, enabled: !e.enabled }),
        R = e => {
          e.stopPropagation(), e.preventDefault();
        },
        x = e => {
          let { className: t, children: s, ...l } = e;
          return (0, a.jsx)(i.Clickable, {
            className: t,
            onClick: R,
            onMouseDown: R,
            onMouseUp: R,
            ...l,
            children: s,
          });
        };
      function L(e) {
        var t;
        let { rule: s, onChangeRule: l, onContextMenu: n } = e,
          r = C(s, l),
          o = e => {
            R(e), n(e);
          };
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)("div", {
              className: g.ruleTextContainer,
              children: (0, a.jsx)(S.default, { rule: s, onChangeRule: l }),
            }),
            (0, a.jsxs)(x, {
              className: g.actionContainer,
              children: [
                (0, a.jsx)(i.Switch, {
                  className: g.toggle,
                  onChange: r,
                  checked:
                    null !== (t = null == s ? void 0 : s.enabled) &&
                    void 0 !== t &&
                    t,
                }),
                (0, a.jsx)(i.Tooltip, {
                  text: N.default.Messages.MORE,
                  position: "top",
                  "aria-label": N.default.Messages.MORE_OPTIONS,
                  children: e =>
                    (0, a.jsx)(i.Clickable, {
                      ...e,
                      onClick: o,
                      className: g.menuIconButton,
                      children: (0, a.jsx)(u.default, {
                        width: 24,
                        height: 24,
                        className: g.menuIcon,
                      }),
                    }),
                }),
              ],
            }),
          ],
        });
      }
      function O(e) {
        return (0, _.checkTriggerTypeForFlag)(
          e,
          _.AutomodTriggerConfigFlags.ALPHA
        )
          ? (0, a.jsx)(o.default, { className: g.alphaBetaTag })
          : (0, _.checkTriggerTypeForFlag)(e, _.AutomodTriggerConfigFlags.BETA)
            ? (0, a.jsx)(d.default, { className: g.alphaBetaTag })
            : null;
      }
      function p(e) {
        let { rule: t, isDefaultRule: s, onContextMenu: r } = e,
          o = (0, T.getRuleInfo)(t.triggerType, t),
          { isLoading: d, saveRule: _ } = (0, I.useAutomodEditingRuleActions)(),
          { updateRule: f } = (0, E.useAutomodRulesList)(t.guildId),
          [S, m] = l.useState(t.enabled),
          C = (0, n.throttle)(async (e, s) => {
            if ((s.preventDefault(), s.stopPropagation(), !d)) {
              let e = { ...t, enabled: !S };
              m(!S);
              let s = await _(e, []);
              if (null != s) f(s), m(s.enabled);
            }
          }, 300),
          L = e => {
            R(e), r(e);
          };
        if (null == o) return null;
        let {
            headerText: p,
            headerSubtext: A,
            descriptionText: M,
            icon: D,
          } = o,
          v = !(0, c.isBackendPersistedRule)(t);
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)("div", {
              className: g.ruleIconContainer,
              children: (0, a.jsx)(D, {
                width: 24,
                height: 24,
                className: g.ruleIcon,
              }),
            }),
            (0, a.jsxs)("div", {
              className: g.ruleTextContainer,
              children: [
                (0, a.jsxs)(i.Heading, {
                  variant: "text-md/semibold",
                  color: "header-primary",
                  className: g.ruleTextHeaderContainer,
                  children: [
                    (0, a.jsxs)("div", {
                      className: g.ruleTextHeader,
                      children: [p, O(t.triggerType)],
                    }),
                    (0, a.jsx)(i.Text, {
                      className: g.ruleSubtextHeader,
                      variant: "text-sm/normal",
                      children: A,
                    }),
                  ],
                }),
                v &&
                  (0, a.jsx)(i.Text, {
                    className: g.ruleTextDescription,
                    variant: "text-sm/normal",
                    children: M,
                  }),
                (0, a.jsx)(h, { rule: t, triggerType: t.triggerType }),
              ],
            }),
            (0, a.jsxs)(x, {
              className: g.actionContainer,
              children: [
                (0, a.jsx)(i.Switch, {
                  className: g.toggle,
                  onChange: C,
                  checked: null != S && S,
                }),
                !s &&
                  (0, a.jsx)(i.Tooltip, {
                    text: N.default.Messages.MORE,
                    position: "top",
                    "aria-label": N.default.Messages.MORE_OPTIONS,
                    children: e =>
                      (0, a.jsx)(i.Clickable, {
                        ...e,
                        onClick: L,
                        className: g.menuIconButton,
                        children: (0, a.jsx)(u.default, {
                          width: 24,
                          height: 24,
                          className: g.menuIcon,
                        }),
                      }),
                  }),
              ],
            }),
          ],
        });
      }
      function A(e) {
        let { triggerType: t, onSetupRule: s } = e,
          n = l.useMemo(() => (0, T.getRuleInfo)(t), [t]);
        if (null == n) return null;
        let { headerText: r, descriptionText: o, icon: d } = n;
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)("div", {
              className: g.ruleIconContainer,
              children: (0, a.jsx)(d, {
                width: 24,
                height: 24,
                className: g.ruleIcon,
              }),
            }),
            (0, a.jsxs)("div", {
              className: g.ruleTextContainer,
              children: [
                (0, a.jsx)(i.Heading, {
                  className: g.ruleTextHeader,
                  variant: "text-md/semibold",
                  color: "header-primary",
                  children: (0, a.jsxs)("div", {
                    className: g.ruleTextHeader,
                    children: [r, O(t)],
                  }),
                }),
                (0, a.jsx)(i.Text, {
                  className: g.ruleTextDescription,
                  variant: "text-sm/normal",
                  children: o,
                }),
                (0, a.jsx)(h, { triggerType: t }),
              ],
            }),
            (0, a.jsx)(x, {
              className: g.actionContainer,
              children: (0, a.jsx)(i.Button, {
                size: i.Button.Sizes.SMALL,
                onClick: s,
                children:
                  t === m.AutomodTriggerType.KEYWORD
                    ? N.default.Messages.CREATE
                    : N.default.Messages.GUILD_AUTOMOD_RULE_SETUP_BUTTON,
              }),
            }),
          ],
        });
      }
      function M(e) {
        let {
            rule: t,
            triggerType: l,
            isEditMode: n,
            isDefaultRule: o,
            forceSetup: d,
            onSetupRule: u,
            onChangeRule: c,
          } = e,
          E = e => {
            null != t &&
              (e.preventDefault(),
              e.stopPropagation(),
              (0, r.openContextMenuLazy)(e, async () => {
                let { default: e } = await s
                  .el("730153")
                  .then(s.bind(s, "730153"));
                return s => (0, a.jsx)(e, { rule: t, ...s });
              }));
          },
          _ = (0, a.jsx)(A, { triggerType: l, onSetupRule: u });
        return (
          null != t &&
            !d &&
            (_ = n
              ? (0, a.jsx)(L, { rule: t, onChangeRule: c, onContextMenu: E })
              : (0, a.jsx)(p, { rule: t, isDefaultRule: o, onContextMenu: E })),
          (0, a.jsx)(i.Clickable, {
            className: g.mainContainer,
            onContextMenu: E,
            children: _,
          })
        );
      }
    },
    788112: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("77078"),
        i = s("143460"),
        r = s("49111"),
        o = s("782340"),
        d = s("146108"),
        u = s("517621");
      function c(e) {
        let { rule: t, onChangeRule: s } = e,
          [c, E] = l.useState(t.name);
        return (0, a.jsxs)(n.FormItem, {
          children: [
            (0, a.jsx)(n.Text, {
              className: u.triggerHeader,
              variant: "text-sm/semibold",
              children: o.default.Messages.GUILD_AUTOMOD_INPUT_FILTER_NAME,
            }),
            (0, a.jsx)(n.TextInput, {
              className: d.ruleNameInput,
              onChange: e => {
                E(e), s({ ...t, name: e });
              },
              onClick: e => e.stopPropagation(),
              onKeyPress: e => {
                e.which === r.KeyboardKeys.SPACE && e.stopPropagation();
              },
              placeholder:
                o.default.Messages.GUILD_AUTOMOD_INPUT_FILTER_NAME_PLACEHOLDER,
              maxLength: i.MAX_RULE_NAME_LENGTH,
              value: c,
            }),
          ],
        });
      }
    },
    124188: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return o;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("296839"),
        n = s("88063"),
        i = s("320493"),
        r = s("842357");
      function o(e) {
        let { guildId: t, rules: s, triggerType: o, initWithEdit: d } = e,
          { perGuildMaxCount: u } = l.triggerConfigs[o],
          c = 0 === s.length,
          E = u > s.length && !c;
        return (0, a.jsxs)(a.Fragment, {
          children: [
            c && (0, a.jsx)(i.default, { guildId: t, triggerType: o }),
            s.map(e =>
              (0, a.jsx)(r.default, { rule: e, initWithEdit: d }, e.id)
            ),
            E && (0, a.jsx)(n.default, { guildId: t, triggerType: o }),
          ],
        });
      }
    },
    67310: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("517621");
      function i(e) {
        let { step: t, header: s, children: i } = e;
        return (0, a.jsxs)("div", {
          className: n.triggerContainer,
          children: [
            (0, a.jsx)("div", {
              className: n.triggerCounterContainer,
              children: (0, a.jsx)("div", {
                className: n.stepCountIcon,
                children: (0, a.jsx)(l.Text, {
                  className: n.stepCount,
                  variant: "text-sm/bold",
                  children: t,
                }),
              }),
            }),
            (0, a.jsxs)("div", {
              className: n.triggerMainContainer,
              children: [
                (0, a.jsx)("div", {
                  className: n.triggerHeaderContainer,
                  children: (0, a.jsx)(l.Text, {
                    className: n.triggerHeader,
                    variant: "text-sm/normal",
                    children: s,
                  }),
                }),
                null != i &&
                  (0, a.jsx)("div", {
                    className: n.triggerSettingsContainer,
                    children: i,
                  }),
              ],
            }),
          ],
        });
      }
    },
    296416: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return d;
          },
        });
      var a,
        l,
        n = s("37983");
      s("884691");
      var i = s("695197"),
        r = s("945330"),
        o = s("993321");
      ((a = l || (l = {})).ARROW_DOWN = "arrow_down"), (a.CROSS = "cross");
      function d(e) {
        let { type: t } = e;
        return (0, n.jsx)("div", {
          className: o.dividerContainer,
          children: (0, n.jsx)("div", {
            className: o.dividerIconContainer,
            children: (function (e) {
              switch (e) {
                case "arrow_down":
                  return (0, n.jsx)(i.default, {
                    width: 24,
                    height: 24,
                    className: o.dividierIcon,
                  });
                case "cross":
                  return (0, n.jsx)(r.default, {
                    width: 24,
                    height: 24,
                    className: o.dividierIcon,
                  });
                default:
                  return null;
              }
            })(t),
          }),
        });
      }
      d.Type = l;
    },
    309175: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return T;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("169456"),
        i = s("185709"),
        r = s("432107"),
        o = s("301341"),
        d = s("260928"),
        u = s("67310"),
        c = s("296416"),
        E = s("143460"),
        _ = s("782340"),
        I = s("334568");
      function T(e) {
        var t, s, T, f, S, m;
        let { rule: N, onChangeRule: g } = e,
          h = l.useCallback(
            e => {
              g({
                ...N,
                triggerMetadata: { ...N.triggerMetadata, keywordFilter: e },
              });
            },
            [g, N]
          ),
          C = l.useCallback(
            e => {
              g({
                ...N,
                triggerMetadata: { ...N.triggerMetadata, allowList: e },
              });
            },
            [g, N]
          );
        return (0, a.jsx)(a.Fragment, {
          children: (0, a.jsxs)("div", {
            className: I.cardContentsContainer,
            children: [
              (0, a.jsxs)(u.default, {
                step: 1,
                header:
                  _.default.Messages
                    .GUILD_AUTOMOD_KEYWORD_FILTER_TRIGGER_HEADER,
                children: [
                  (0, a.jsx)(o.default, {
                    onChangeText: h,
                    maxWordCount: E.MAX_KEYWORDS_PER_KEYWORD_FILTER,
                    initialValue:
                      null === (t = N.triggerMetadata) || void 0 === t
                        ? void 0
                        : t.keywordFilter,
                  }),
                  (0, a.jsx)(r.default, {
                    rule: N,
                    onChangeRule: g,
                    collapsed:
                      (null == N
                        ? void 0
                        : null === (s = N.triggerMetadata) || void 0 === s
                          ? void 0
                          : s.regexPatterns) == null ||
                      (null == N
                        ? void 0
                        : null === (T = N.triggerMetadata) || void 0 === T
                          ? void 0
                          : T.regexPatterns.length) === 0,
                  }),
                  (0, a.jsx)(n.default, {
                    onChange: C,
                    initialValue:
                      null === (f = N.triggerMetadata) || void 0 === f
                        ? void 0
                        : f.allowList,
                    maxWordCount:
                      E.MAX_KEYWORDS_PER_ALLOWLIST_KEYWORD_FILTER_RULE,
                    collapsed:
                      (null === (S = N.triggerMetadata) || void 0 === S
                        ? void 0
                        : S.allowList) == null ||
                      (null === (m = N.triggerMetadata) || void 0 === m
                        ? void 0
                        : m.allowList.length) === 0,
                  }),
                ],
              }),
              (0, a.jsx)(c.default, { type: c.default.Type.ARROW_DOWN }),
              (0, a.jsx)(u.default, {
                step: 2,
                header: _.default.Messages.GUILD_AUTOMOD_ACTIONS_HEADER,
                children: (0, a.jsx)(i.default, { rule: N, onChangeRule: g }),
              }),
              (0, a.jsx)(c.default, { type: c.default.Type.CROSS }),
              (0, a.jsx)(u.default, {
                step: 3,
                header: _.default.Messages.GUILD_AUTOMOD_ROLES_EXEMPTION_HEADER,
                children: (0, a.jsx)(d.default, {
                  rule: N,
                  onChangeRule: g,
                  onlyRoles: !0,
                }),
              }),
            ],
          }),
        });
      }
    },
    955198: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useChipletState: function () {
            return o;
          },
          useChipletStateHandlers: function () {
            return d;
          },
        }),
        s("222007"),
        s("424973"),
        s("860677");
      var a = s("884691"),
        l = s("714617"),
        n = s.n(l),
        i = s("817736"),
        r = s("673122");
      function o(e) {
        let [t, s] = a.useState([e]),
          [l, i] = a.useState(0),
          r = a.useMemo(() => t[l], [t, l]),
          o = a.useCallback(
            e => {
              let a = e(r);
              if (n(r, a)) return;
              let o = t.slice(0, l + 1);
              o.push(a), s(o), i(o.length - 1);
            },
            [l, r, t]
          ),
          d = a.useCallback(
            function () {
              let e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : 1,
                s = Math.max(0, l - e);
              return i(s), t[s];
            },
            [l, t]
          ),
          u = a.useCallback(
            function () {
              let e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : 1,
                s = Math.min(t.length - 1, l + e);
              return i(s), t[s];
            },
            [l, t]
          );
        return { state: r, setState: o, goBack: d, goForward: u };
      }
      function d(e, t) {
        let { scrollerRef: s, mainInputRef: l, mainContainerRef: n } = t,
          {
            state: { value: o, tags: d, selections: u },
            setState: c,
            goBack: E,
            goForward: _,
          } = e;
        a.useLayoutEffect(() => {
          let e = e => t => {
              let s = "Meta" === t.key || "Control" === t.key;
              s && c(t => ({ ...t, isSelecting: e }));
            },
            t = e(!0),
            s = e(!1);
          return (
            document.addEventListener("keydown", t),
            document.addEventListener("keyup", s),
            () => {
              document.removeEventListener("keydown", t),
                document.removeEventListener("keyup", s);
            }
          );
        }, [c]);
        let I = a.useCallback(
            e => {
              var t, a;
              let l =
                  null !== (a = e.clipboardData.getData("text")) && void 0 !== a
                    ? a
                    : "",
                n = l
                  .split(r.CHIPLET_PASTE_SEPERATOR)
                  .map(e => e.trim())
                  .filter(e => e.length > 0);
              !(n.length <= 1) &&
                ((0, i.flushSync)(() => {
                  c(e => {
                    let { tags: t, value: s } = e;
                    return {
                      value: s,
                      tags: [...t, ...n],
                      selections: [],
                      isSelecting: !1,
                    };
                  });
                }),
                e.preventDefault(),
                e.stopPropagation(),
                null === (t = s.current) || void 0 === t || t.scrollToBottom());
            },
            [c, s]
          ),
          T = a.useCallback(
            e => {
              c(t => {
                let { tags: s, value: a } = t;
                return {
                  value: a,
                  tags: [...s.filter((t, s) => s !== e)],
                  selections: [],
                  isSelecting: !1,
                };
              });
            },
            [c]
          ),
          f = a.useCallback(
            e => t => {
              c(s => {
                let { tags: a, value: l } = s,
                  n = [...a];
                return (
                  (n[e] = t),
                  { value: l, tags: n, selections: [], isSelecting: !1 }
                );
              });
            },
            [c]
          ),
          S = a.useCallback(
            e => {
              c(t => {
                let { tags: s, value: a, selections: l, isSelecting: n } = t;
                return {
                  value: a,
                  tags: s,
                  selections: [...l, s[e]],
                  isSelecting: n,
                };
              });
            },
            [c]
          ),
          m = a.useCallback(
            function (e) {
              let t =
                arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
              c(s => {
                let { tags: a, value: l, selections: n, isSelecting: i } = s;
                return {
                  value: l,
                  tags: a,
                  selections: t ? [] : n.filter(t => t !== a[e]),
                  isSelecting: i,
                };
              });
            },
            [c]
          ),
          N = a.useCallback(
            e => {
              var t;
              c(e => {
                let { tags: t, value: s } = e;
                return { value: s, tags: t, selections: [], isSelecting: !1 };
              }),
                null != e && (e.preventDefault(), e.stopPropagation()),
                null === (t = l.current) || void 0 === t || t.focus();
            },
            [l, c]
          ),
          g = a.useCallback(
            e => {
              c(t => {
                let { tags: s } = t;
                return {
                  value: e.target.value,
                  tags: s,
                  selections: [],
                  isSelecting: !1,
                };
              });
            },
            [c]
          ),
          h = a.useCallback(
            function (e) {
              let t =
                  !(arguments.length > 1) ||
                  void 0 === arguments[1] ||
                  arguments[1],
                a =
                  !(arguments.length > 2) ||
                  void 0 === arguments[2] ||
                  arguments[2],
                l = o.trim().length <= 0;
              !l &&
                ((0, i.flushSync)(() => {
                  c(e => {
                    let { tags: t } = e;
                    return {
                      value: "",
                      tags: [...t, o],
                      selections: [],
                      isSelecting: !1,
                    };
                  });
                }),
                a && null != s.current && s.current.scrollToBottom(),
                t && (e.preventDefault(), e.stopPropagation()));
            },
            [s, c, o]
          ),
          C = a.useCallback(
            e => {
              let t = o.trim().length <= 0;
              if (u.length > 0) {
                var s;
                (0, i.flushSync)(() => {
                  c(e => {
                    let { tags: t, value: s, selections: a } = e;
                    return {
                      value: s,
                      tags: t.filter(e => !a.includes(e)),
                      selections: [],
                      isSelecting: !1,
                    };
                  });
                }),
                  null === (s = l.current) || void 0 === s || s.focus(),
                  e.preventDefault(),
                  e.stopPropagation();
              } else
                t &&
                  ((0, i.flushSync)(() => {
                    c(e => {
                      let { tags: t } = e,
                        s = [...t],
                        a = s.pop();
                      return {
                        value: null != a ? a : "",
                        tags: [...s],
                        selections: [],
                        isSelecting: !1,
                      };
                    });
                  }),
                  e.preventDefault(),
                  e.stopPropagation());
            },
            [l, u.length, c, o]
          ),
          R = a.useCallback(
            e => {
              var t, s, a, n;
              let i = e.metaKey || e.ctrlKey;
              if ("z" === e.key && i) {
                let a = E();
                a.selections.length > 0
                  ? null === (t = l.current) || void 0 === t || t.blur()
                  : null === (s = l.current) || void 0 === s || s.focus(),
                  e.preventDefault(),
                  e.stopPropagation();
              } else if ("y" === e.key && i) {
                let t = _();
                t.selections.length > 0
                  ? null === (a = l.current) || void 0 === a || a.blur()
                  : null === (n = l.current) || void 0 === n || n.focus(),
                  e.preventDefault(),
                  e.stopPropagation();
              }
            },
            [E, _, l]
          ),
          x = a.useCallback(
            e => {
              var t;
              let s = o.trim().length > 0,
                { selectionStart: a = 0, selectionEnd: r = 0 } =
                  null !== (t = l.current) && void 0 !== t ? t : {};
              0 !== d.length &&
                (!s || a !== r) &&
                ((0, i.flushSync)(() => {
                  c(e => {
                    let { tags: t, value: s } = e;
                    return {
                      value: s,
                      tags: t,
                      selections: [...t],
                      isSelecting: !1,
                    };
                  });
                }),
                setImmediate(() => {
                  var e;
                  null === (e = l.current) || void 0 === e || e.blur(),
                    setTimeout(() => {
                      var e;
                      null === (e = n.current) || void 0 === e || e.focus();
                    }, 16);
                }),
                e.preventDefault(),
                e.stopPropagation());
            },
            [n, l, c, d.length, o]
          ),
          L = a.useCallback(
            e => {
              e.relatedTarget !== e.currentTarget && h(e, !1, !1);
            },
            [h]
          ),
          O = a.useCallback(
            e => {
              let t = e.metaKey || e.ctrlKey;
              "Meta" !== e.key &&
                (r.NEXT_CHIP_INPUT_KEY.has(e.key)
                  ? h(e)
                  : "Backspace" === e.key
                    ? C(e)
                    : "Escape" === e.key
                      ? N(e)
                      : "a" === e.key && t
                        ? x(e)
                        : r.CHIPLET_STATE_HISTORY_KEYS.has(e.key) && t && R(e));
            },
            [h, C, N, x, R]
          ),
          p = a.useCallback(
            e => {
              if (document.activeElement !== n.current) return;
              let t = e.metaKey || e.ctrlKey;
              "Backspace" === e.key
                ? C(e)
                : "a" === e.key && t
                  ? x(e)
                  : "Escape" === e.key
                    ? N(e)
                    : r.CHIPLET_STATE_HISTORY_KEYS.has(e.key) && t
                      ? R(e)
                      : "Meta" !== e.key && N(e);
            },
            [R, C, x, N, n]
          );
        return {
          handlePasteEvent: I,
          handleInputChange: g,
          handleKeyDown: O,
          handleContainerKeyUp: p,
          handleRemoveTag: T,
          handleTagChangeEvent: f,
          handleSelectTag: S,
          handleUnselectTag: m,
          handleResetTagSelections: N,
          handleInputBlurEvent: L,
        };
      }
    },
    201074: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        }),
        s("222007");
      var a = s("884691"),
        l = s("917351"),
        n = s("454686"),
        i = s("314865");
      function r(e) {
        let t =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : [],
          s = arguments.length > 2 ? arguments[2] : void 0,
          [r, o] = a.useState((0, i.getKeywordStringFromKeywordFilter)(t)),
          { errorMessage: d, handleValidateKeywords: u } = (function (e) {
            let [t, s] = a.useState(null),
              i = a.useRef(null),
              r = a.useCallback(
                () =>
                  (0, l.debounce)(
                    t => {
                      clearTimeout(i.current),
                        (i.current = setTimeout(() => {
                          try {
                            (0, n.validateKeywordsOrThrow)(t, e), s(null);
                          } catch (e) {
                            s(e.message);
                          }
                          clearTimeout(i.current);
                        }, 500));
                    },
                    300,
                    { leading: !0, trailing: !0 }
                  ),
                [e]
              );
            return { errorMessage: t, handleValidateKeywords: r };
          })(s),
          c = a.useCallback(
            e =>
              0 !== e.length && (0, i.isKeywordParseableString)(e)
                ? (0, i.getKeywordStringFromKeywordFilter)(
                    (0, i.getKeywordsFromString)(e)
                  )
                : e,
            []
          ),
          E = a.useCallback(
            t => {
              let s = t.currentTarget.value,
                a = "insertFromPaste" === t.nativeEvent.inputType;
              a && (s = c(s));
              let l = (0, i.getKeywordsFromString)(s);
              o(s), e(l), u()(l);
            },
            [u, c, e]
          );
        return { value: r, errorMessage: d, onChange: E };
      }
    },
    16207: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          SCHEMA_ERROR_KEY: function () {
            return o;
          },
          default: function () {
            return E;
          },
        }),
        s("222007"),
        s("424973");
      var a = s("884691"),
        l = s("917351"),
        n = s("448993"),
        i = s("702873"),
        r = s("782340");
      let o = "_errors",
        d = "GENERIC_REGEX_ERROR";
      async function u(e, t) {
        if (
          null == e.triggerMetadata.regexPatterns ||
          0 === e.triggerMetadata.regexPatterns.length
        ) {
          t([]);
          return;
        }
        try {
          await (0, i.validateAutomodRule)(e), t([]);
        } catch (u) {
          var s, a;
          let e = new n.APIError(u),
            l = e.errors;
          if (
            !(
              "object" == typeof (s = l) &&
              (null == s
                ? void 0
                : null === (a = s.trigger_metadata) || void 0 === a
                  ? void 0
                  : a.regex_patterns) != null
            )
          )
            return;
          let i = (function (e) {
            var t;
            let s =
              null == e
                ? void 0
                : null === (t = e.trigger_metadata) || void 0 === t
                  ? void 0
                  : t.regex_patterns;
            return null == s
              ? []
              : (function (e) {
                  let { [o]: t = [], ...s } = e,
                    a = Object.entries(s).map(e => {
                      var t;
                      let [s, a] = e,
                        l = a[o],
                        { code: n, message: i } =
                          null !== (t = null == l ? void 0 : l[0]) &&
                          void 0 !== t
                            ? t
                            : {
                                code: d,
                                message:
                                  r.default.Messages
                                    .GUILD_AUTOMOD_REGEX_GENERIC_SAVE_ERROR,
                              };
                      return {
                        pattern: s,
                        message: i,
                        code: n,
                        description: null == a ? void 0 : a.description,
                        erroringCharacterLength:
                          null == a ? void 0 : a.erroring_character_length,
                        erroringCharacterOffset:
                          null == a ? void 0 : a.erroring_character_offset,
                        regexErrorCode: null == a ? void 0 : a.regex_error_code,
                      };
                    });
                  if (t.length > 0) {
                    var l, n, i, u;
                    a.push({
                      pattern: o,
                      message:
                        null !==
                          (i =
                            null === (l = t[0]) || void 0 === l
                              ? void 0
                              : l.message) && void 0 !== i
                          ? i
                          : r.default.Messages
                              .GUILD_AUTOMOD_REGEX_GENERIC_SAVE_ERROR,
                      code:
                        null !==
                          (u =
                            null === (n = t[0]) || void 0 === n
                              ? void 0
                              : n.code) && void 0 !== u
                          ? u
                          : d,
                    });
                  }
                  return a;
                })(s);
          })(l);
          i.length > 0 && t(i);
        }
      }
      let c = (0, l.throttle)(u, 1e3, { leading: !1 });
      function E(e, t) {
        var s, n;
        let [i, r] = a.useState([]),
          [o, d] = a.useState(null),
          [E, _] = a.useState(
            null !==
              (n =
                null == e
                  ? void 0
                  : null === (s = e.triggerMetadata) || void 0 === s
                    ? void 0
                    : s.regexPatterns) && void 0 !== n
              ? n
              : []
          ),
          I = a.useCallback(
            t => {
              !(t.length < 3) &&
                c(
                  {
                    ...e,
                    triggerMetadata: {
                      ...e.triggerMetadata,
                      regexPatterns: [t],
                    },
                  },
                  e => {
                    var t;
                    return d(null !== (t = e[0]) && void 0 !== t ? t : null);
                  }
                );
            },
            [e]
          ),
          T = a.useCallback(
            (s, a) => {
              !(0, l.isEqual)(s, a) &&
                (c.cancel(),
                u(
                  {
                    ...e,
                    triggerMetadata: { ...e.triggerMetadata, regexPatterns: s },
                  },
                  e => {
                    r(e), 0 === e.length && d(null);
                  }
                ),
                _(s),
                null == t || t(s));
            },
            [e, t]
          );
        return {
          patterns: E,
          errors: i,
          valueError: o,
          validatePatternsChanged: T,
          validateEditingValueChanged: I,
        };
      }
    },
    183866: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          isRegexSupported: function () {
            return E;
          },
          getRuleInfo: function () {
            return N;
          },
        });
      var a = s("116320"),
        l = s("117300"),
        n = s("83900"),
        i = s("350932"),
        r = s("160237"),
        o = s("454686"),
        d = s("296839"),
        u = s("143460"),
        c = s("782340");
      let E = e => {
          switch (e) {
            case u.AutomodTriggerType.KEYWORD:
            case u.AutomodTriggerType.USER_PROFILE:
              return !0;
            default:
              return !1;
          }
        },
        _ = e => {
          switch (e) {
            case u.AutomodTriggerType.KEYWORD:
            case u.AutomodTriggerType.ML_SPAM:
            case u.AutomodTriggerType.DEFAULT_KEYWORD_LIST:
            case u.AutomodTriggerType.MENTION_SPAM:
            case u.AutomodTriggerType.SERVER_POLICY:
            case u.AutomodTriggerType.USER_PROFILE:
              return !0;
            default:
              return !1;
          }
        },
        I = (e, t) => {
          var s;
          return null !== (s = null == t ? void 0 : t.name) && void 0 !== s
            ? s
            : (0, d.triggerConfigs)[e].getDefaultRuleName();
        },
        T = (e, t) => {
          if ((0, o.isBackendPersistedRule)(t) && (0, o.isRuleKeywordFilter)(t))
            return t.triggerMetadata.regexPatterns.length > 0
              ? c.default.Messages.GUILD_AUTOMOD_KEYWORD_FILTER_HEADER_WORD_AND_REGEX_COUNT.format(
                  {
                    keywordCount: t.triggerMetadata.keywordFilter.length,
                    regexPatternCount: t.triggerMetadata.regexPatterns.length,
                  }
                )
              : c.default.Messages.GUILD_AUTOMOD_KEYWORD_FILTER_HEADER_WORD_COUNT.format(
                  { keywordCount: t.triggerMetadata.keywordFilter.length }
                );
        },
        f = e => {
          switch (e) {
            case u.AutomodTriggerType.KEYWORD:
              return c.default.Messages
                .GUILD_AUTOMOD_KEYWORD_FILTER_DESCRIPTION;
            case u.AutomodTriggerType.ML_SPAM:
              return c.default.Messages
                .GUILD_AUTOMOD_ML_SPAM_FILTER_DESCRIPTION;
            case u.AutomodTriggerType.DEFAULT_KEYWORD_LIST:
              return c.default.Messages
                .GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_DESCRIPTION_TEXT;
            case u.AutomodTriggerType.MENTION_SPAM:
              return c.default.Messages
                .GUILD_AUTOMOD_MENTION_SPAM_FILTER_DESCRIPTION;
            case u.AutomodTriggerType.USER_PROFILE:
              return c.default.Messages
                .GUILD_AUTOMOD_USER_PROFILE_FILTER_DESCRIPTION;
            default:
              return null;
          }
        },
        S = e => {
          if (e === u.AutomodTriggerType.KEYWORD)
            return c.default.Messages.GUILD_AUTOMOD_LINK_FILTER_MATCHING_STRATEGY_DESCRIPTION.format();
        },
        m = e => {
          switch (e) {
            case u.AutomodTriggerType.MENTION_SPAM:
              return a.default;
            case u.AutomodTriggerType.KEYWORD:
              return i.default;
            case u.AutomodTriggerType.ML_SPAM:
            case u.AutomodTriggerType.USER_PROFILE:
              return l.default;
            case u.AutomodTriggerType.DEFAULT_KEYWORD_LIST:
              return r.default;
          }
        };
      function N(e, t) {
        var s, a, l, i, r;
        return null != e && _(e)
          ? {
              headerText: null !== (s = I(e, t)) && void 0 !== s ? s : "",
              headerSubtext: null !== (a = T(e, t)) && void 0 !== a ? a : "",
              descriptionText: null !== (l = f(e)) && void 0 !== l ? l : "",
              descriptionSubtext: null !== (i = S(e)) && void 0 !== i ? i : "",
              icon: null !== (r = m(e)) && void 0 !== r ? r : n.default,
            }
          : null;
      }
    },
    983065: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          getPerkIcon: function () {
            return N;
          },
        }),
        s("70102");
      var a = s("414456"),
        l = s.n(a),
        n = s("36694"),
        i = s("46829"),
        r = s("272339"),
        o = s("110006"),
        d = s("682344"),
        u = s("238521"),
        c = s("754576"),
        E = s("228427"),
        _ = s("290581"),
        I = s("595086"),
        T = s("619911"),
        f = s("698015"),
        S = s("427459"),
        m = s("532749");
      function N(e, t) {
        if (t) return { icon: n.default, className: m.unlocked };
        switch (e) {
          case S.PerkIcons.EMOJI:
            return { icon: i.default, className: l(m.icon, m.emoji) };
          case S.PerkIcons.AUDIO:
            return { icon: r.default, className: l(m.icon, m.audio) };
          case S.PerkIcons.ANIMATED:
            return { icon: o.default, className: l(m.icon, m.animated) };
          case S.PerkIcons.CUSTOMIZATION:
            return { icon: u.default, className: l(m.icon, m.customization) };
          case S.PerkIcons.UPLOAD:
            return { icon: f.default, className: l(m.icon, m.upload) };
          case S.PerkIcons.VANITY:
            return { icon: _.default, className: l(m.icon, m.vanity) };
          case S.PerkIcons.STREAM:
            return { icon: T.default, className: l(m.icon, m.stream) };
          case S.PerkIcons.STICKER:
            return { icon: I.default, className: l(m.icon, m.sticker) };
          case S.PerkIcons.CUSTOM_ROLE_ICON:
            return { icon: d.default, className: l(m.icon, m.customRoleIcon) };
          case S.PerkIcons.STAGE_VIDEO:
            return { icon: E.default, className: l(m.icon, m.stage) };
          case S.PerkIcons.SOUNDBOARD:
            return { icon: c.default, className: l(m.icon, m.soundboard) };
        }
        throw Error("Unexpected perk icon ".concat(e));
      }
    },
    345988: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return _;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("414456"),
        n = s.n(l),
        i = s("77078"),
        r = s("812204"),
        o = s("685665"),
        d = s("617917"),
        u = s("782340"),
        c = s("482307");
      let E = e => {
        let {
            guild: t,
            analyticsLocation: s,
            className: l,
            buttonProps: n = {
              color: void 0,
              look: i.ButtonLooks.INVERTED,
              text: u.default.Messages
                .PREMIUM_GUILD_SUBSCRIPTION_UPSELL_BANNER_BUTTON,
            },
          } = e,
          { color: r, look: o, text: c } = n,
          E = t.premiumTier + 1;
        return (0, a.jsx)(d.default, {
          color: r,
          look: o,
          analyticsLocation: s,
          guild: t,
          buttonText: c,
          targetBoostedGuildTier: E,
          className: l,
        });
      };
      function _(e) {
        let {
            header: t,
            text: l,
            analyticsLocation: d,
            guild: u,
            className: _,
            textColor: I,
            headerColor: T,
            buttonProps: f,
          } = e,
          { AnalyticsLocationProvider: S } = (0, o.default)(
            r.default.GUILD_BOOSTING_UPSELL_BANNER
          );
        return (0, a.jsx)(S, {
          children: (0, a.jsxs)("div", {
            className: n(c.banner, _),
            children: [
              (0, a.jsx)("img", {
                className: c.headerGraphic,
                alt: "",
                src: s("250719"),
              }),
              (0, a.jsxs)("div", {
                className: c.content,
                children: [
                  (0, a.jsx)(i.Text, {
                    variant: "text-lg/semibold",
                    color: null != T ? T : "always-white",
                    className: c.header,
                    children: t,
                  }),
                  (0, a.jsx)(i.Text, {
                    variant: "text-sm/normal",
                    color: null != I ? I : "always-white",
                    children: l,
                  }),
                ],
              }),
              (0, a.jsx)("div", {
                className: c.ctaContainer,
                children: (0, a.jsx)(E, {
                  guild: u,
                  analyticsLocation: d,
                  className: c.button,
                  buttonProps: f,
                }),
              }),
            ],
          }),
        });
      }
    },
    866561: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return I;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("446674"),
        n = s("77078"),
        i = s("626301"),
        r = s("400307"),
        o = s("697218"),
        d = s("719923"),
        u = s("646718"),
        c = s("782340"),
        E = s("703278");
      let _ = e => {
        let { onOpenPremiumClick: t } = e,
          s = (0, a.jsx)(n.Button, {
            className: E.tier0Button,
            color: n.Button.Colors.BRAND,
            look: n.Button.Looks.INVERTED,
            onClick: () => {
              (0, i.navigateToPremiumMarketingPage)(), null != t && t();
            },
            children: c.default.Messages.LEARN_MORE,
          });
        return (0, a.jsxs)("div", {
          className: E.tier0Container,
          children: [
            (0, a.jsx)(n.Heading, {
              className: E.tier0Heading,
              variant: "heading-xxl/extrabold",
              children:
                c.default.Messages
                  .GUILD_SETTINGS_PREMIUM_UPSELL_HEADING_SECONDARY,
            }),
            (0, a.jsx)(r.Tier2Card, {
              className: E.tier0Card,
              ctaButton: s,
              featureSet: r.Tier2FeatureSet.BOOSTING,
              showWumpus: !0,
              showYearlyPrice: !0,
            }),
          ],
        });
      };
      var I = e => {
        let { onOpenPremiumClick: t } = e,
          s = (0, l.useStateFromStores)([o.default], () =>
            o.default.getCurrentUser()
          );
        return d.default.isPremium(s, u.PremiumTypes.TIER_2)
          ? null
          : (0, a.jsx)(_, { onOpenPremiumClick: t });
      };
    },
    656142: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return m;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("414456"),
        n = s.n(l),
        i = s("446674"),
        r = s("77078"),
        o = s("915639"),
        d = s("697218"),
        u = s("10514"),
        c = s("521012"),
        E = s("240481"),
        _ = s("719923"),
        I = s("153160"),
        T = s("646718"),
        f = s("782340"),
        S = s("595714"),
        m = e => {
          var t;
          let { className: s } = e,
            l = (0, i.useStateFromStores)([d.default], () =>
              d.default.getCurrentUser()
            ),
            m = (0, i.useStateFromStores)([o.default], () => o.default.locale),
            N = (0, i.useStateFromStores)([c.default], () =>
              c.default.getPremiumTypeSubscription()
            ),
            g = (0, i.useStateFromStores)([u.default], () =>
              null != N ? u.default.get(N.planId) : void 0
            ),
            h =
              null !==
                (t = (0, i.useStateFromStores)([u.default], () =>
                  null != g
                    ? u.default.getForSkuAndInterval(
                        (0, _.castPremiumSubscriptionAsSkuId)(
                          T.PremiumSubscriptionSKUs.GUILD
                        ),
                        g.interval,
                        g.intervalCount
                      )
                    : void 0
                )) && void 0 !== t
                ? t
                : T.SubscriptionPlanInfo[
                    T.SubscriptionPlans.PREMIUM_MONTH_GUILD
                  ];
          return (0, a.jsxs)("div", {
            className: n(S.wrapper, s),
            children: [
              (0, a.jsx)(r.Heading, {
                className: S.heading,
                variant: "heading-xl/semibold",
                children:
                  f.default.Messages
                    .GUILD_SETTINGS_PREMIUM_UPSELL_HEADING_PRIMARY,
              }),
              (0, a.jsx)(r.Text, {
                variant: "text-md/normal",
                children: (function (e) {
                  let {
                      currentUser: t,
                      locale: s,
                      guildBoostingPlanId: l,
                      interval: n,
                      intervalCount: i,
                    } = e,
                    r = _.default.getDefaultPrice(l, _.default.isPremium(t)),
                    o = _.default.getDefaultPrice(l, !1),
                    d = (0, I.formatRate)(
                      (0, I.formatPrice)(r.amount, r.currency),
                      n,
                      i
                    ),
                    u = (0, I.formatRate)(
                      (0, I.formatPrice)(o.amount, o.currency),
                      n,
                      i
                    );
                  return _.default.isPremium(t, T.PremiumTypes.TIER_2)
                    ? f.default.Messages.GUILD_SETTINGS_PREMIUM_UPSELL_SUBHEADING_TIER_2.format(
                        {
                          price: d,
                          originalPrice: u,
                          originalPriceHook: (e, t) =>
                            (0, a.jsx)(
                              "span",
                              { className: S.originalPrice, children: e },
                              t
                            ),
                          freeSubscriptionCount:
                            T.NUM_FREE_GUILD_BOOSTS_WITH_PREMIUM,
                          discountPercent: (0, E.formatPercent)(
                            s,
                            T.GUILD_BOOST_COST_FOR_PREMIUM_USER_DISCOUNT_PERCENT /
                              100
                          ),
                        }
                      )
                    : _.default.isPremium(t, T.PremiumTypes.TIER_1)
                      ? f.default.Messages.GUILD_SETTINGS_PREMIUM_UPSELL_SUBHEADING_TIER_1.format(
                          {
                            price: d,
                            originalPrice: u,
                            originalPriceHook: (e, t) =>
                              (0, a.jsx)(
                                "span",
                                { className: S.originalPrice, children: e },
                                t
                              ),
                            discountPercent: (0, E.formatPercent)(
                              s,
                              T.GUILD_BOOST_COST_FOR_PREMIUM_USER_DISCOUNT_PERCENT /
                                100
                            ),
                          }
                        )
                      : f.default.Messages.GUILD_SETTINGS_PREMIUM_UPSELL_SUBHEADING.format(
                          { price: d }
                        );
                })({
                  currentUser: l,
                  locale: m,
                  guildBoostingPlanId: h.id,
                  interval: h.interval,
                  intervalCount: h.intervalCount,
                }),
              }),
            ],
          });
        };
    },
    634544: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("414456"),
        n = s.n(l),
        i = s("77078"),
        r = s("118503"),
        o = s("427459"),
        d = s("782340"),
        u = s("355635"),
        c = e => {
          let t,
            s,
            l,
            {
              guildFeature: c,
              guild: E,
              className: _,
              hideTooltip: I = !1,
              tooltipPosition: T = "left",
              onClick: f,
            } = e,
            S = E.hasFeature(c),
            m = (0, o.minimumRequiredTierForGuildFeature)(c);
          return (S
            ? (null != m && (l = d.default.Messages.PREMIUM_GUILD_INCLUDED),
              (t = (0, a.jsxs)(a.Fragment, {
                children: [
                  (0, a.jsx)(r.default, { className: u.unlockedIcon }),
                  (0, a.jsx)(i.Heading, {
                    variant: "eyebrow",
                    className: u.description,
                    children: d.default.Messages.PREMIUM_GUILD_TIER_UNLOCKED,
                  }),
                ],
              })))
            : (null != m && (l = d.default.Messages.CLICK_TO_LEARN_MORE),
              (t = (0, a.jsxs)(a.Fragment, {
                children: [
                  (0, a.jsx)(r.default, { className: u.icon }),
                  (0, a.jsx)(i.Heading, {
                    variant: "eyebrow",
                    className: u.description,
                    children: null != m && (0, o.getShortenedTierName)(m),
                  }),
                ],
              }))),
          (s =
            I || null == l
              ? (0, a.jsx)("div", {
                  className: n(u.availabilityIndicator, _),
                  children: t,
                })
              : (0, a.jsx)(i.Tooltip, {
                  position: T,
                  text: l,
                  children: e =>
                    (0, a.jsx)("div", {
                      ...e,
                      className: n(u.availabilityIndicator, _),
                      children: t,
                    }),
                })),
          null == f || S)
            ? s
            : (0, a.jsx)(i.Clickable, {
                onClick: f,
                className: u.clickable,
                children: s,
              });
        };
    },
    836275: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          openGuildBannerUpsellModal: function () {
            return I;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("366634"),
        i = s("974755"),
        r = s("427459"),
        o = s("379532"),
        d = s("944305"),
        u = s("49111"),
        c = s("782340"),
        E = s("538977");
      function _(e) {
        let { guild: t, banner: s } = e;
        return (0, a.jsx)("div", {
          className: E.guildBanner,
          style: { backgroundImage: "url(".concat(s) },
          children: (0, a.jsxs)("div", {
            className: E.guildHeader,
            children: [
              (0, a.jsx)(i.default, { guild: t, isBannerVisible: !0 }),
              (0, a.jsx)(l.Heading, {
                className: E.guildName,
                variant: "heading-md/semibold",
                children: t.toString(),
              }),
              (0, a.jsx)(n.default, { className: E.dropdown, open: !1 }),
            ],
          }),
        });
      }
      function I(e) {
        let {
            analyticsLocations: t,
            analyticsLocation: s,
            guild: l,
            isGIF: n,
            banner: i,
          } = e,
          E = n
            ? (0, r.minimumRequiredTierForGuildFeature)(
                u.GuildFeatures.ANIMATED_BANNER
              )
            : (0, r.minimumRequiredTierForGuildFeature)(u.GuildFeatures.BANNER);
        null != E &&
          (0, o.default)({
            analyticsLocations: t,
            analyticsSourceLocation: s,
            guild: l,
            headerProps: {
              title: c.default.Messages.GUILD_BANNER_UPSELL_MODAL_TITLE,
              subtitle: (function (e, t) {
                let s = (0, r.getTierName)(e);
                return t
                  ? c.default.Messages.GUILD_BANNER_UPSELL_MODAL_SUBTITLE_ANIMATED.format(
                      { targetLevelOrPlan: s }
                    )
                  : c.default.Messages.GUILD_BANNER_UPSELL_MODAL_SUBTITLE_STATIC.format(
                      { targetLevelOrPlan: s }
                    );
              })(E, n),
              image: (0, a.jsx)(_, { guild: l, banner: i }),
            },
            perkIntro: c.default.Messages.GUILD_BANNER_UPSELL_MODAL_PERK_INTRO,
            perks: n
              ? (0, d.animatedGuildBannerUpsellPerks)()
              : (0, d.guildBannerUpsellPerks)(),
          });
      }
    },
    146005: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          GuildHomeHeaderRedesignExperiment: function () {
            return l;
          },
        });
      var a = s("862205");
      let l = (0, a.createExperiment)({
        kind: "guild",
        id: "2022-12_home_header_redesign",
        label: "Home New Header",
        defaultConfig: { hasNewHeader: !1 },
        treatments: [
          { id: 1, label: "New Header", config: { hasNewHeader: !0 } },
        ],
      });
    },
    284234: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return p;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("65597"),
        o = s("77078"),
        d = s("812204"),
        u = s("685665"),
        c = s("592407"),
        E = s("401642"),
        _ = s("305961"),
        I = s("178406"),
        T = s("645266"),
        f = s("914985"),
        S = s("308073"),
        m = s("565556"),
        N = s("553275"),
        g = s("691307"),
        h = s("314143"),
        C = s("721302"),
        R = s("948512"),
        x = s("49111"),
        L = s("782340"),
        O = s("348943");
      function p(e) {
        let { guildId: t } = e,
          s = (0, r.default)([_.default], () => _.default.getGuild(t)),
          { AnalyticsLocationProvider: n } = (0, u.default)(
            d.default.GUILD_SETTINGS_MEMBERS_PAGE
          ),
          p =
            !1 ==
            !!(null == s
              ? void 0
              : s.hasFeature(
                  x.GuildFeatures
                    .ENABLED_MODERATION_EXPERIENCE_FOR_NON_COMMUNITY
                )),
          A = (0, r.default)(
            [I.default],
            () => I.default.getEstimatedMemberSearchCountByGuildId(t),
            [t]
          ),
          M = l.useCallback(e => {
            null != e &&
              (0, E.openUserProfileModal)({
                userId: e.userId,
                guildId: e.guildId,
                analyticsLocation: {
                  section: x.AnalyticsSections.GUILD_SETTINGS_MEMBERS,
                },
              });
          }, []),
          D = l.useRef(null),
          v = l.useCallback(() => {
            var e;
            null === (e = D.current) || void 0 === e || e.resetSearchText();
          }, []);
        if (null == s) return null;
        let G = (0, N.getSearchState)(!1, !1, A);
        return (0, a.jsx)(n, {
          children: (0, a.jsx)("div", {
            className: O.settingsColumn,
            children: (0, a.jsx)("div", {
              className: O.settingsContainer,
              children: (0, a.jsx)(o.ScrollerAuto, {
                className: O.settingsScroller,
                orientation: "auto",
                children: (0, a.jsxs)("main", {
                  className: O.settingsContent,
                  children: [
                    (0, a.jsx)(
                      o.FormSection,
                      {
                        className: i(O.header),
                        children: (0, a.jsx)(o.FormTitle, {
                          tag: o.FormTitleTags.H1,
                          children:
                            L.default.Messages
                              .GUILD_SETTINGS_MEMBERS_SERVER_MEMBERS,
                        }),
                      },
                      "header"
                    ),
                    (0, a.jsx)(
                      o.FormSection,
                      {
                        children: (0, a.jsxs)("div", {
                          className: i(O.tableContainer),
                          children: [
                            (0, a.jsx)(S.default, { guild: s }),
                            (0, a.jsx)(f.default, { guild: s }),
                            p
                              ? (0, a.jsxs)("div", {
                                  className: i(O.mainTableContainer),
                                  children: [
                                    (0, a.jsx)(C.default, { guild: s, ref: D }),
                                    (0, a.jsx)(g.default, {
                                      guild: s,
                                      searchState: G,
                                      compact: !0,
                                      onSelectRow: M,
                                      onResetForNewMembers: v,
                                    }),
                                    G !==
                                      N.SearchState.SUCCESS_STILL_INDEXING &&
                                      (0, a.jsx)(h.default, { guildId: s.id }),
                                  ],
                                })
                              : (0, a.jsx)("div", {
                                  className: i(O.movedTable),
                                  children: (0, a.jsxs)("div", {
                                    className: i(O.noResultsContainer),
                                    children: [
                                      (0, a.jsx)("div", {
                                        className: i(O.noResultsIconContainer),
                                        children: (0, a.jsx)(R.default, {}),
                                      }),
                                      (0, a.jsx)(o.Text, {
                                        variant: "text-md/normal",
                                        color: "text-muted",
                                        children:
                                          L.default.Messages.GUILD_SETTINGS_SAFETY_MODERATION_EXPERIENCE_ENABLED.format(
                                            {
                                              onClick: e => {
                                                null != s &&
                                                  (e.preventDefault(),
                                                  c.default.close(),
                                                  (0,
                                                  T.goToMemberSafetyDashboard)(
                                                    s.id
                                                  ));
                                              },
                                            }
                                          ),
                                      }),
                                    ],
                                  }),
                                }),
                          ],
                        }),
                      },
                      "body"
                    ),
                    (0, a.jsx)(m.default, { guildId: s.id }),
                  ],
                }),
              }),
            }),
          }),
        });
      }
    },
    308073: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return _;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("65597"),
        i = s("77078"),
        r = s("817674"),
        o = s("957255"),
        d = s("841803"),
        u = s("49111"),
        c = s("782340"),
        E = s("413631");
      function _(e) {
        let { guild: t } = e,
          s = l.useId(),
          _ = (0, n.default)(
            [o.default],
            () => null != t && o.default.can(u.Permissions.MANAGE_GUILD, t),
            [t]
          ),
          I = t.hasFeature(u.GuildFeatures.COMMUNITY),
          [T, f] = l.useState(
            t.hasFeature(
              u.GuildFeatures.ENABLED_MODERATION_EXPERIENCE_FOR_NON_COMMUNITY
            )
          ),
          S = l.useCallback(
            async e => {
              f(e), await (0, r.toggleModerationExperienceGuildFeature)(t, e);
            },
            [t]
          );
        return I
          ? null
          : (0, a.jsxs)("div", {
              className: E.bannerContainer,
              children: [
                (0, a.jsx)(d.default, { width: 64, height: 64 }),
                (0, a.jsxs)("div", {
                  className: E.headingContainer,
                  children: [
                    (0, a.jsx)(i.Heading, {
                      variant: "heading-lg/semibold",
                      children:
                        c.default.Messages
                          .GUILD_SETTINGS_SAFETY_ENABLE_MODERATION_EXPERIENCE,
                    }),
                    (0, a.jsx)(i.Text, {
                      variant: "text-sm/medium",
                      children:
                        c.default.Messages
                          .GUILD_SETTINGS_SAFETY_ENABLE_MODERATION_EXPERIENCE_DESCRIPTION,
                    }),
                  ],
                }),
                (0, a.jsx)("div", {
                  className: E.buttonContainer,
                  children: (0, a.jsx)(i.Switch, {
                    id: s,
                    checked: T,
                    onChange: S,
                    disabled: !_,
                  }),
                }),
              ],
            });
      }
    },
    841803: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return l;
          },
        });
      var a = s("37983");
      function l(e) {
        let { width: t = 69, height: s = 62 } = e;
        return (0, a.jsxs)("svg", {
          width: t,
          height: s,
          xmlns: "http://www.w3.org/2000/svg",
          viewBox: "0 0 69 62",
          fill: "none",
          children: [
            (0, a.jsxs)("g", {
              "clip-path": "url(#clip0_2732_42516)",
              children: [
                (0, a.jsx)("path", {
                  d: "M64.8828 23.5441L26.6128 26.5941L26.1843 29.4645L26.1333 29.8034L24.178 42.9828L22.5661 53.5595C22.5202 53.8649 22.5439 54.1766 22.6356 54.4716C22.7273 54.7665 22.8846 55.0371 23.0957 55.2631C23.3068 55.4891 23.5663 55.6648 23.855 55.777C24.1436 55.8893 24.4539 55.9352 24.7629 55.9114L30.6493 55.4539C30.6493 55.4539 29.017 60.0425 28.7313 60.8185C28.7115 60.9106 28.7157 61.0061 28.7434 61.0961C28.771 61.1861 28.8213 61.2675 28.8895 61.3327C28.9576 61.3979 29.0413 61.4446 29.1327 61.4685C29.224 61.4924 29.32 61.4926 29.4114 61.4692C29.4523 61.4692 31.36 60.256 33.788 58.7208L34.8966 58.0193L35.0938 57.8939L34.9102 54.4644L55.7829 52.6343L56.2488 53.4375L59.7582 53.1359C60.6838 53.0634 61.5576 52.6806 62.2369 52.0497C62.9162 51.4189 63.361 50.5774 63.4988 49.6623L67.0694 25.8757C67.1157 25.5721 67.0923 25.262 67.0011 24.9687C66.9099 24.6753 66.7533 24.4064 66.5429 24.1821C66.3325 23.9577 66.0738 23.7838 65.7863 23.6733C65.4988 23.5628 65.1899 23.5186 64.8828 23.5441Z",
                  fill: "url(#paint0_linear_2732_42516)",
                }),
                (0, a.jsx)("path", {
                  d: "M60.2106 44.2164C59.6869 42.522 58.5103 41.8679 57.7656 40.8276C57.2827 39.6889 56.7454 37.9741 55.6708 35.8662C54.2188 33.0602 53.0864 30.6846 52.9504 30.3017C52.5899 29.1766 52.9674 26.3875 51.3793 24.9066C50.2265 23.8255 47.9957 23.551 46.6185 23.1172L46.0302 23.1884L45.8092 22.8156V22.7682C46.5981 20.5112 47.7543 17.8339 48.0706 14.5298C48.4684 10.3987 48.0706 6.05755 45.0951 3.80394C42.1196 1.55033 38.4911 0.14055 34.7879 0.584494C31.0847 1.02844 27.4563 2.74322 25.4431 5.79999C24.423 7.35888 23.345 12.6828 24.763 17.1324C26.2593 21.8769 28.0854 26.2011 28.0854 26.2011C28.0854 26.2011 22.6683 28.0413 21.3318 30.0373C19.7574 32.3892 19.3833 34.2158 18.795 35.1817C16.6969 38.6248 13.014 43.3794 13.014 43.3794L13.2861 58.7683C16.4078 59.1716 18.7984 56.3792 21.24 52.9157C21.9712 51.8787 22.8111 50.5909 23.6204 49.2998L23.685 49.1981C23.9197 48.8355 24.8276 45.7482 24.8276 45.7482L25.7356 31.0303L40.4669 29.3053L48.8357 49.9776L46.6117 54.0442C48.7983 55.9793 50.9236 57.0502 52.7872 56.6469C54.7935 56.2131 56.1027 54.2137 57.4119 51.6889C58.7212 49.1642 60.6697 45.7109 60.2106 44.2164Z",
                  fill: "#3343D8",
                }),
                (0, a.jsx)("path", {
                  d: "M53.5318 53.6822L40.1267 54.7226L34.9103 58.0267C34.4376 56.6441 33.6589 54.7327 33.6589 54.7327C28.6702 54.2956 26.7693 53.4992 25.3648 51.432C24.5487 50.2357 24.1134 47.1721 24.178 42.9902C24.178 42.3125 24.2019 41.5997 24.2495 40.8519C24.5147 35.5889 25.1404 29.8719 25.1404 29.8719L26.1334 29.8109H26.1844L49.5837 28.3672L53.5318 53.6822Z",
                  fill: "url(#paint1_linear_2732_42516)",
                }),
                (0, a.jsx)("path", {
                  d: "M40.1879 16.0889C39.535 13.6048 39.3888 11.3817 40.4498 9.11453C38.6373 8.67397 35.8556 7.89453 34.5974 5.16309C33.2711 7.24047 30.8975 8.42997 28.8572 8.93831C29.6427 10.6328 29.5577 13.0389 28.5511 15.1739C30.5915 15.8008 31.7001 17.2241 33.5806 18.966C35.3319 17.1055 37.6953 16.5667 40.1879 16.0889Z",
                  fill: "url(#paint2_linear_2732_42516)",
                }),
                (0, a.jsx)("path", {
                  d: "M55.9803 42.1834C55.9157 42.1854 55.8515 42.1727 55.7926 42.1462C55.7336 42.1198 55.6815 42.0804 55.6402 42.0309C53.8107 39.8484 51.0664 39.0215 48.1827 38.3031C48.1285 38.2895 48.0774 38.2654 48.0325 38.2322C47.9876 38.1989 47.9497 38.1572 47.921 38.1094C47.8922 38.0616 47.8732 38.0086 47.8651 37.9534C47.8569 37.8983 47.8597 37.842 47.8733 37.788C47.8869 37.7339 47.9111 37.683 47.9444 37.6383C47.9778 37.5935 48.0196 37.5557 48.0676 37.5271C48.1156 37.4984 48.1688 37.4795 48.2242 37.4714C48.2795 37.4632 48.3359 37.466 48.3902 37.4796C51.4167 38.2319 54.297 39.1062 56.2931 41.4886C56.3418 41.5512 56.3718 41.6262 56.3796 41.7051C56.3874 41.7839 56.3727 41.8633 56.3371 41.9342C56.3016 42.005 56.2467 42.0644 56.1787 42.1055C56.1108 42.1466 56.0325 42.1677 55.9531 42.1664L55.9803 42.1834Z",
                  fill: "black",
                }),
                (0, a.jsx)("path", {
                  d: "M32.3462 14.0553C32.8534 13.3913 33.5107 12.8561 34.2648 12.4934C35.0188 12.1306 35.8482 11.9505 36.6854 11.9677C36.8843 11.9681 37.083 11.9806 37.2805 12.005C37.2822 11.9836 37.2822 11.9621 37.2805 11.9406C37.2328 10.4055 35.9712 10.4258 34.4274 10.4258C32.8835 10.4258 31.5675 10.4055 31.5675 12.0355C31.5614 12.7621 31.8241 13.4655 32.3054 14.0112L32.3462 14.0553Z",
                  fill: "black",
                }),
                (0, a.jsx)("path", {
                  d: "M37.2805 12.0227C37.2941 12.7918 37.001 13.535 36.4655 14.089C35.93 14.643 35.1957 14.9627 34.424 14.9778C34.0219 14.9783 33.6244 14.8923 33.2588 14.7256C32.8931 14.5589 32.5679 14.3155 32.3054 14.012C32.7971 13.3394 33.4449 12.7954 34.1934 12.4266C34.9419 12.0577 35.7689 11.875 36.6037 11.8939C36.8311 11.8932 37.0582 11.9068 37.2839 11.9346C37.2842 11.964 37.2831 11.9934 37.2805 12.0227Z",
                  fill: "#D01582",
                }),
                (0, a.jsx)("path", {
                  d: "M18.6657 46.636C17.4279 40.4547 16.003 35.1477 14.3334 34.1344C12.9493 33.2973 10.4465 34.5004 6.78749 35.761C3.40051 36.9302 1.90086 37.2962 1.29556 39.8108C0.771871 41.9898 1.5642 43.9045 4.18265 46.7851C6.80109 49.6657 8.54898 52.0684 8.77682 52.9664C9.00466 53.8645 10.1745 58.3683 13.2928 58.775C15.2413 59.0258 16.9042 58.0328 18.4753 56.4028C19.4172 55.42 19.7505 52.0379 18.6657 46.636Z",
                  fill: "url(#paint3_linear_2732_42516)",
                }),
                (0, a.jsx)("path", {
                  d: "M2.76464 38.2352C2.25115 36.795 1.57444 34.1957 2.35997 33.0333C3.19991 31.8031 10.3411 30.0612 11.6163 31.183C12.6773 32.1183 12.9766 34.1313 13.048 35.3039C13.1364 36.5645 11.2389 37.6456 8.84486 38.32C6.86913 38.8859 3.25092 39.5976 2.76464 38.2352Z",
                  fill: "#8089FF",
                }),
                (0, a.jsx)("path", {
                  d: "M2.83957 32.6534C2.97559 33.4193 3.33605 34.0936 5.18936 33.7344C7.04268 33.3752 9.31086 32.7178 9.97737 32.04C10.5419 31.4401 11.375 30.3218 11.8511 29.7288C12.3272 29.1357 13.8914 24.1032 13.8914 24.1032L5.17236 18.376C5.17236 18.376 2.94498 22.2495 2.67294 25.3537C2.48362 27.7864 2.53944 30.2318 2.83957 32.6534Z",
                  fill: "#FFC518",
                }),
                (0, a.jsx)("path", {
                  d: "M8.43338 26.8522C8.36729 26.8527 8.30202 26.8376 8.24291 26.8082C8.1838 26.7787 8.13254 26.7358 8.09332 26.6827C8.02655 26.5926 7.99805 26.4798 8.01395 26.3689C8.02986 26.2579 8.0889 26.1576 8.17833 26.0897C10.1711 24.602 11.7999 23.7785 13.8029 23.2464C13.9092 23.2241 14.02 23.2432 14.1127 23.2997C14.2053 23.3563 14.2727 23.4461 14.3009 23.5506C14.3292 23.6551 14.3163 23.7665 14.2648 23.8618C14.2133 23.9571 14.1271 24.0292 14.0239 24.0631C12.1332 24.5681 10.5893 25.3509 8.68842 26.7742C8.614 26.8268 8.52458 26.8542 8.43338 26.8522Z",
                  fill: "#EC5F00",
                }),
                (0, a.jsx)("path", {
                  d: "M25.222 20.8031L21.801 14.5879L5.62109 20.4303C5.62109 20.4303 12.0822 24.7342 12.7997 25.1375C13.4963 25.578 14.2924 25.8378 15.1155 25.8932C15.7079 25.9118 16.2967 25.7954 16.8371 25.5529C17.3775 25.3103 17.8552 24.948 18.2338 24.4936C18.2501 24.4732 18.2707 24.4566 18.2943 24.4453C18.3178 24.4339 18.3437 24.428 18.3698 24.428C18.396 24.428 18.4219 24.4339 18.4454 24.4453C18.469 24.4566 18.4896 24.4732 18.5059 24.4936C18.8717 24.9327 19.3301 25.2861 19.8485 25.5286C20.3669 25.7711 20.9325 25.8967 21.5052 25.8966C22.4641 25.8966 25.5859 25.8119 25.5859 25.8119C25.5859 25.8119 25.4975 23.0432 25.4124 21.7452C25.39 21.4243 25.326 21.1076 25.222 20.8031Z",
                  fill: "#D01582",
                }),
                (0, a.jsx)("path", {
                  d: "M18.2305 12.1379C17.2141 12.0188 16.1868 12.2381 15.3084 12.7616C14.4301 13.285 13.7502 14.0833 13.3745 15.032C13.3522 15.0998 13.3089 15.1588 13.2509 15.2007C13.1929 15.2425 13.1231 15.2651 13.0515 15.2651C12.9798 15.2651 12.9101 15.2425 12.852 15.2007C12.794 15.1588 12.7508 15.0998 12.7284 15.032C12.3325 14.0296 11.5979 13.1964 10.6514 12.6761C9.70495 12.1557 8.60592 11.9809 7.54393 12.1817C6.48193 12.3825 5.52356 12.9464 4.83414 13.7761C4.14471 14.6057 3.76746 15.6492 3.76746 16.7264C3.76746 17.8037 4.14471 18.8471 4.83414 19.6768C5.52356 20.5065 6.48193 21.0704 7.54393 21.2712C8.60592 21.472 9.70495 21.2971 10.6514 20.7768C11.5979 20.2564 12.3325 19.4232 12.7284 18.4209C12.7499 18.3518 12.7931 18.2914 12.8515 18.2485C12.9099 18.2056 12.9806 18.1825 13.0532 18.1825C13.1257 18.1825 13.1964 18.2056 13.2548 18.2485C13.3133 18.2914 13.3564 18.3518 13.3779 18.4209C13.6777 19.1834 14.1753 19.853 14.8198 20.3611C15.4643 20.8693 16.2326 21.1978 17.0462 21.3131C17.8598 21.4284 18.6896 21.3264 19.4507 21.0175C20.2118 20.7086 20.8769 20.2038 21.3782 19.5548C21.8794 18.9058 22.1988 18.1358 22.3037 17.3236C22.4085 16.5113 22.2951 15.6858 21.975 14.9315C21.6549 14.1772 21.1395 13.5211 20.4817 13.0303C19.8238 12.5395 19.047 12.2315 18.2305 12.1379Z",
                  fill: "#FF78B8",
                }),
                (0, a.jsx)("path", {
                  d: "M6.37945 18.9592L10.6268 14.6824C10.3506 14.38 10.0156 14.1367 9.64209 13.9675C9.26858 13.7982 8.8644 13.7065 8.45419 13.6979C8.04397 13.6894 7.63629 13.7641 7.25599 13.9176C6.87568 14.0711 6.53071 14.3001 6.24209 14.5907C5.95346 14.8814 5.72722 15.2275 5.57715 15.6081C5.42707 15.9886 5.35631 16.3957 5.36916 16.8044C5.38201 17.213 5.47821 17.6149 5.6519 17.9853C5.82559 18.3558 6.07313 18.6871 6.37945 18.9592Z",
                  fill: "#423D80",
                }),
                (0, a.jsx)("path", {
                  d: "M10.5418 18.8648C11.1087 18.2992 11.4271 17.5326 11.4271 16.7332C11.4271 15.9338 11.1087 15.1671 10.5418 14.6016L6.27405 18.8648C6.84112 19.4266 7.60826 19.742 8.40791 19.742C9.20755 19.742 9.9747 19.4266 10.5418 18.8648Z",
                  fill: "black",
                }),
                (0, a.jsx)("path", {
                  d: "M15.7277 19.0232L19.9648 14.7532C19.6927 14.4372 19.3579 14.1808 18.9813 14.0002C18.6048 13.8196 18.1948 13.7188 17.7772 13.704C17.3597 13.6893 16.9435 13.761 16.5552 13.9146C16.1668 14.0682 15.8146 14.3004 15.5208 14.5965C15.2269 14.8926 14.9979 15.2462 14.8481 15.6349C14.6983 16.0236 14.631 16.4391 14.6505 16.8551C14.6699 17.271 14.7757 17.6784 14.9611 18.0516C15.1465 18.4248 15.4075 18.7556 15.7277 19.0232Z",
                  fill: "#423D80",
                }),
                (0, a.jsx)("path", {
                  d: "M19.8254 18.8648C20.1069 18.5852 20.3303 18.253 20.4827 17.8872C20.6351 17.5214 20.7136 17.1292 20.7136 16.7332C20.7136 16.3371 20.6351 15.9449 20.4827 15.5791C20.3303 15.2133 20.1069 14.8811 19.8254 14.6016L15.5475 18.8648C16.115 19.4297 16.8843 19.7471 17.6864 19.7471C18.4886 19.7471 19.2579 19.4297 19.8254 18.8648Z",
                  fill: "black",
                }),
                (0, a.jsx)("path", {
                  d: "M26.3783 24.4662C25.3618 24.1105 24.2961 23.9139 23.2192 23.8833C21.274 23.7952 20.1586 24.5137 19.9206 25.3236C19.7302 26.0014 20.0566 27.2146 22.1344 27.2587C24.2121 27.3027 27.3101 28.8311 27.8847 29.3259L26.3783 24.4662Z",
                  fill: "#FFC518",
                }),
                (0, a.jsx)("path", {
                  d: "M35.5871 29.0518L31.0235 34.3893C31.0235 34.3893 26.3307 30.1295 25.875 29.594C24.1373 27.5607 25.4466 22.596 25.0623 21.4912C24.7222 20.4745 23.243 17.3805 22.8281 16.6519L21.5155 14.1C21.5155 14.1 23.0526 13.5476 23.9571 14.1339C24.6372 14.5711 25.1099 14.8117 25.1099 14.8117L25.1643 14.7676L25.7356 14.6185L25.9362 14.2288C26.1506 14.1087 26.3791 14.0153 26.6164 13.9509C27.7964 13.6459 33.3087 15.6454 34.4037 17.394C35.1586 18.5734 33.0332 23.5449 32.4007 26.256L35.5871 29.0518Z",
                  fill: "#FFE65C",
                }),
                (0, a.jsx)("path", {
                  d: "M6.7467 29.2578C6.7467 29.2578 9.28693 25.2725 13.5002 24.31C15.3944 23.883 16.6322 24.1643 17.0538 24.8997C17.3939 25.5165 17.3939 26.767 15.3876 27.3194C13.9658 27.6973 12.7173 28.5503 11.851 29.7357L6.7467 29.2578Z",
                  fill: "#FFC518",
                }),
                (0, a.jsx)("path", {
                  d: "M30.2344 18.9221C30.1859 18.942 30.1339 18.9524 30.0814 18.9526C29.9959 18.9522 29.9126 18.9261 29.8422 18.8777C29.7718 18.8294 29.7177 18.761 29.6869 18.6815C29.0306 16.9871 26.9665 15.7637 25.1642 14.7673C25.3991 14.5578 25.6582 14.3769 25.9361 14.2285C27.7588 15.2452 29.7652 16.5397 30.4793 18.3765C30.4995 18.4283 30.5092 18.4836 30.5078 18.5392C30.5064 18.5948 30.4939 18.6495 30.4712 18.7003C30.4484 18.751 30.4158 18.7968 30.3751 18.8348C30.3345 18.8729 30.2867 18.9026 30.2344 18.9221Z",
                  fill: "#FF8B18",
                }),
                (0, a.jsx)("path", {
                  d: "M31.2205 36.7916C31.2205 36.7916 28.4661 34.4499 28.4661 32.7249C28.4661 31.2372 32.9718 26.8046 34.6551 27.0519C36.7771 27.3671 38.0557 29.4242 38.0557 29.4242L31.2205 36.7916Z",
                  fill: "#8089FF",
                }),
                (0, a.jsx)("path", {
                  d: "M30.1698 38.2355C30.7581 43.817 38.7392 46.1993 42.7519 50.2592C47.6759 55.2578 49.213 56.6981 52.1477 56.1559C54.6879 55.6882 56.6841 50.0017 55.3816 46.5857C54.1778 43.4306 51.1717 38.8658 48.7165 35.4735C46.9237 32.9963 44.6703 30.8852 42.0786 29.2549C40.1131 28.0518 37.1546 27.9265 33.7676 31.3458C30.5404 34.5958 29.9249 35.8124 30.1698 38.2355Z",
                  fill: "url(#paint4_linear_2732_42516)",
                }),
                (0, a.jsx)("path", {
                  d: "M24.4128 48.066C24.405 48.0825 24.3959 48.0984 24.3856 48.1134C24.1578 48.4727 23.9333 48.8353 23.7055 49.1979C23.1828 45.1485 23.1726 41.0498 23.6749 36.9979C23.6907 36.8864 23.7502 36.7858 23.8405 36.7181C23.8851 36.6846 23.936 36.6602 23.9902 36.6463C24.0443 36.6323 24.1007 36.6292 24.1561 36.637C24.2114 36.6448 24.2647 36.6633 24.3129 36.6917C24.3611 36.72 24.4032 36.7575 24.4368 36.802C24.4704 36.8465 24.4949 36.8972 24.5089 36.9512C24.5229 37.0051 24.526 37.0613 24.5182 37.1165C24.0779 40.7513 24.0425 44.4235 24.4128 48.066Z",
                  fill: "black",
                }),
                (0, a.jsx)("path", {
                  d: "M46.6389 23.1042C46.0098 24.1208 44.6461 25.6391 41.8781 26.0017H41.827C41.7143 26.0089 41.6033 25.9711 41.5185 25.8968C41.4337 25.8224 41.382 25.7175 41.3748 25.6052C41.3676 25.4928 41.4054 25.3822 41.48 25.2977C41.5547 25.2132 41.6599 25.1616 41.7726 25.1544C44.0884 24.8494 45.231 23.6871 45.8159 22.7822C46.0834 22.9061 46.3583 23.0136 46.6389 23.1042Z",
                  fill: "black",
                }),
                (0, a.jsx)("path", {
                  d: "M3.99563 5.96274C3.69447 5.77014 3.43799 5.51576 3.24331 5.21655C3.04862 4.91735 2.92021 4.58021 2.86664 4.22763L2.6796 2.99746C2.67652 2.96723 2.66192 2.93933 2.6388 2.91951C2.61963 2.89447 2.59171 2.87753 2.56058 2.87207C2.53052 2.8747 2.50201 2.88654 2.47897 2.90596C2.45787 2.92687 2.44465 2.9544 2.44156 2.9839L2.25113 4.22763C2.19948 4.5826 2.07191 4.92238 1.87707 5.22396C1.68033 5.52036 1.42309 5.77209 1.12214 5.96274L0.962313 6.0644C0.945336 6.07558 0.931334 6.0907 0.921506 6.10846C0.908 6.14569 0.908 6.18645 0.921506 6.22368C0.931334 6.24144 0.945336 6.25656 0.962313 6.26774L1.12214 6.3694C1.42449 6.56397 1.68183 6.82043 1.87707 7.12174C2.07191 7.42332 2.19948 7.7631 2.25113 8.11807L2.44156 9.33468C2.44547 9.3637 2.46 9.39026 2.48237 9.40924C2.50449 9.42705 2.53214 9.43664 2.56058 9.43635C2.58893 9.43611 2.61642 9.42658 2.6388 9.40924C2.66117 9.39026 2.6757 9.3637 2.6796 9.33468L2.86664 8.11807C2.91838 7.76309 3.04593 7.42329 3.2407 7.12163C3.43546 6.81997 3.69289 6.56345 3.99563 6.3694L4.15885 6.26774C4.17583 6.25656 4.18983 6.24144 4.19966 6.22368C4.21317 6.18645 4.21317 6.14569 4.19966 6.10846C4.18983 6.0907 4.17583 6.07558 4.15885 6.0644L3.99563 5.96274Z",
                  fill: "#66BBFF",
                }),
                (0, a.jsx)("path", {
                  d: "M55.5551 15.8179C55.2508 15.6264 54.9921 15.371 54.7971 15.0695C54.6021 14.7681 54.4755 14.4279 54.4261 14.0726L54.2357 12.856C54.2326 12.8265 54.2194 12.7989 54.1983 12.778C54.1752 12.7586 54.1467 12.7468 54.1166 12.7441C54.0876 12.7468 54.0602 12.7587 54.0384 12.778C54.0153 12.7978 54.0007 12.8257 53.9976 12.856L53.8106 14.0726C53.7575 14.4267 53.6294 14.7655 53.4347 15.0664C53.2401 15.3674 52.9833 15.6235 52.6816 15.8179L52.5184 15.9229C52.5009 15.9326 52.4876 15.9482 52.481 15.967C52.4759 15.9858 52.4759 16.0057 52.481 16.0246C52.4762 16.0435 52.4762 16.0633 52.481 16.0822C52.4885 16.1004 52.5016 16.1158 52.5184 16.1263L52.6816 16.2279C52.9837 16.4216 53.2401 16.6783 53.4331 16.9803C53.6284 17.2807 53.7571 17.6192 53.8106 17.9732L53.9976 19.1932C54.0029 19.2218 54.0172 19.2479 54.0384 19.2678C54.0608 19.2851 54.0883 19.2946 54.1166 19.2949C54.146 19.2946 54.1746 19.2851 54.1983 19.2678C54.2185 19.2476 54.2316 19.2214 54.2357 19.1932L54.4261 17.9732C54.4771 17.6186 54.6035 17.2789 54.7967 16.9769C54.9943 16.6772 55.2526 16.4221 55.5551 16.2279L55.7183 16.1263C55.7376 16.1173 55.755 16.1047 55.7693 16.089C55.7741 16.0701 55.7741 16.0503 55.7693 16.0314C55.7744 16.0125 55.7744 15.9926 55.7693 15.9738C55.7606 15.9563 55.7477 15.9412 55.7319 15.9297L55.5551 15.8179Z",
                  fill: "#59F186",
                }),
                (0, a.jsx)("path", {
                  d: "M63.5909 7.14595C63.1489 6.86363 62.7729 6.49 62.4883 6.05033C62.2038 5.61066 62.0173 5.11521 61.9416 4.59751L61.6695 2.81834C61.6631 2.77402 61.6415 2.7333 61.6083 2.70312C61.5932 2.68795 61.5751 2.67592 61.5553 2.66771C61.5355 2.6595 61.5142 2.65527 61.4927 2.65527C61.4712 2.65527 61.4499 2.6595 61.4301 2.66771C61.4103 2.67592 61.3922 2.68795 61.3771 2.70312C61.3449 2.73363 61.3245 2.77439 61.3193 2.81834L61.0438 4.59751C60.9653 5.11387 60.7788 5.60803 60.4963 6.04795C60.2124 6.48847 59.8366 6.86295 59.3945 7.14595L59.1565 7.29506C59.1322 7.31192 59.1133 7.33547 59.1021 7.36284C59.0882 7.38888 59.0811 7.41805 59.0817 7.44756C59.0816 7.47595 59.0886 7.50392 59.1021 7.5289C59.1133 7.55626 59.1322 7.57981 59.1565 7.59667L59.3945 7.74578C59.8359 8.02969 60.2114 8.40399 60.4963 8.84378C60.7788 9.28371 60.9653 9.77786 61.0438 10.2942L61.3193 12.0734C61.3252 12.1152 61.3456 12.1536 61.3771 12.1818C61.4095 12.2092 61.4503 12.2247 61.4927 12.2259C61.5354 12.2259 61.5765 12.2102 61.6083 12.1818C61.6421 12.155 61.664 12.1161 61.6695 12.0734L61.9416 10.2942C62.0173 9.77653 62.2038 9.28108 62.4883 8.84141C62.7729 8.40174 63.1489 8.0281 63.5909 7.74578L63.8289 7.59667C63.8534 7.57906 63.8732 7.55581 63.8867 7.5289C63.8935 7.5022 63.8935 7.47425 63.8867 7.44756C63.8938 7.41976 63.8938 7.39064 63.8867 7.36284C63.8732 7.33593 63.8534 7.31267 63.8289 7.29506L63.5909 7.14595Z",
                  fill: "#FFC518",
                }),
              ],
            }),
            (0, a.jsxs)("defs", {
              children: [
                (0, a.jsxs)("linearGradient", {
                  id: "paint0_linear_2732_42516",
                  x1: "44.816",
                  y1: "54.749",
                  x2: "44.816",
                  y2: "-25.4118",
                  gradientUnits: "userSpaceOnUse",
                  children: [
                    (0, a.jsx)("stop", { "stop-color": "#FF78B8" }),
                    (0, a.jsx)("stop", {
                      offset: "0.99",
                      "stop-color": "#EA459E",
                    }),
                  ],
                }),
                (0, a.jsxs)("linearGradient", {
                  id: "paint1_linear_2732_42516",
                  x1: "38.8447",
                  y1: "73.9003",
                  x2: "38.8447",
                  y2: "33.176",
                  gradientUnits: "userSpaceOnUse",
                  children: [
                    (0, a.jsx)("stop", {
                      offset: "0.01",
                      "stop-color": "#0A1BAC",
                    }),
                    (0, a.jsx)("stop", {
                      offset: "0.31",
                      "stop-color": "#1D2DC0",
                    }),
                    (0, a.jsx)("stop", {
                      offset: "0.68",
                      "stop-color": "#2D3DD2",
                    }),
                    (0, a.jsx)("stop", {
                      offset: "0.95",
                      "stop-color": "#3343D8",
                    }),
                  ],
                }),
                (0, a.jsxs)("linearGradient", {
                  id: "paint2_linear_2732_42516",
                  x1: "34.4545",
                  y1: "7.83692",
                  x2: "34.6977",
                  y2: "31.0068",
                  gradientUnits: "userSpaceOnUse",
                  children: [
                    (0, a.jsx)("stop", { "stop-color": "#FFC518" }),
                    (0, a.jsx)("stop", {
                      offset: "1",
                      "stop-color": "#FF8B18",
                    }),
                  ],
                }),
                (0, a.jsxs)("linearGradient", {
                  id: "paint3_linear_2732_42516",
                  x1: "7.54241",
                  y1: "37.3538",
                  x2: "18.2698",
                  y2: "58.8588",
                  gradientUnits: "userSpaceOnUse",
                  children: [
                    (0, a.jsx)("stop", {
                      offset: "0.05",
                      "stop-color": "#5765F1",
                    }),
                    (0, a.jsx)("stop", {
                      offset: "0.65",
                      "stop-color": "#3645DA",
                    }),
                    (0, a.jsx)("stop", {
                      offset: "0.69",
                      "stop-color": "#3343D8",
                    }),
                  ],
                }),
                (0, a.jsxs)("linearGradient", {
                  id: "paint4_linear_2732_42516",
                  x1: "33.0263",
                  y1: "32.5997",
                  x2: "54.2705",
                  y2: "49.568",
                  gradientUnits: "userSpaceOnUse",
                  children: [
                    (0, a.jsx)("stop", {
                      offset: "0.05",
                      "stop-color": "#5765F1",
                    }),
                    (0, a.jsx)("stop", {
                      offset: "0.47",
                      "stop-color": "#4857E7",
                    }),
                    (0, a.jsx)("stop", {
                      offset: "0.91",
                      "stop-color": "#3343D8",
                    }),
                  ],
                }),
                (0, a.jsx)("clipPath", {
                  id: "clip0_2732_42516",
                  children: (0, a.jsx)("rect", {
                    width: "68.0115",
                    height: "61",
                    fill: "white",
                    transform: "translate(0 0.5)",
                  }),
                }),
              ],
            }),
          ],
        });
      }
      s("884691");
    },
    615303: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return l;
          },
        });
      var a = s("625990");
      function l() {
        let {
          createGuildApplication: e,
          submitting: t,
          error: s,
        } = (0, a.default)();
        return {
          enableGuildMonetizationForTeam: (t, s, a) =>
            e(t, s, a, "guildcr".concat(t.id)),
          submitting: t,
          error: s,
        };
      }
    },
    850364: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useAdvancedModeExperiment: function () {
            return n;
          },
        });
      var a = s("862205");
      let l = (0, a.createExperiment)({
        kind: "guild",
        id: "2023-02_onboarding_advanced_mode",
        label: "Enables setting up onboarding with advanced mode",
        defaultConfig: { advancedModeAllowed: !1 },
        treatments: [
          { id: 1, label: "On", config: { advancedModeAllowed: !0 } },
        ],
      });
      function n(e) {
        return l.useExperiment(
          { guildId: e, location: "ed5d33_1" },
          { autoTrackExposure: !1 }
        );
      }
    },
    559821: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return d;
          },
        });
      var a = s("884691"),
        l = s("986399"),
        n = s("717559"),
        i = s("38904"),
        r = s("988268"),
        o = s("397056");
      function d(e) {
        var t;
        let { application: s, loading: d } = (0, l.default)(
            e,
            r.ApplicationTypes.GUILD_ROLE_SUBSCRIPTIONS
          ),
          { payoutsByPeriod: u, loading: c } = (0, i.default)(
            null == s ? void 0 : s.id,
            {
              groupType: o.PaymentPayoutGroupTypes.GUILD_PRODUCT,
              teamId:
                null == s
                  ? void 0
                  : null === (t = s.team) || void 0 === t
                    ? void 0
                    : t.id,
            }
          ),
          {
            currentPeriod: E,
            previousPeriods: _,
            metrics: I,
          } = a.useMemo(() => {
            let { currentPeriod: e, previousPeriods: t } = (0,
              n.splitCurrentPeriod)(u),
              s = (0, n.calculateMetrics)(e, t[0]);
            return { currentPeriod: e, previousPeriods: t, metrics: s };
          }, [u]);
        return {
          loading: d || c,
          payoutsByPeriod: u,
          currentPeriod: E,
          previousPeriods: _,
          metrics: I,
          application: s,
        };
      }
    },
    533161: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return _;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("627445"),
        n = s.n(l),
        i = s("446674"),
        r = s("218567"),
        o = s("835706"),
        d = s("412939"),
        u = s("305961"),
        c = s("191814"),
        E = s("782340");
      function _(e) {
        let { guildId: t } = e,
          s = (0, i.useStateFromStores)([u.default], () =>
            u.default.getGuild(t)
          );
        return (
          n(null != s, "Guild not found"),
          (0, a.jsxs)(r.CreatorMonetizationSettingsDisabledContextProvider, {
            guildId: t,
            children: [
              (0, a.jsx)(o.default, {
                children:
                  E.default.Messages.GUILD_PRODUCTS_BASIC_INFO_SYNC_DISCLAIMER,
              }),
              (0, a.jsx)(c.default, { size: 32 }),
              (0, a.jsx)(d.default, { guild: s, isGuildProducts: !0 }),
            ],
          })
        );
      }
    },
    166364: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return g;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("281071"),
        n = s("77078"),
        i = s("763838"),
        r = s("465869"),
        o = s("191814"),
        d = s("151185"),
        u = s("359366"),
        c = s("442379"),
        E = s("757515"),
        _ = s("727411"),
        I = s("35018"),
        T = s("739726"),
        f = s("782340"),
        S = s("464583");
      let m = "guild-product-listings-header";
      function N(e) {
        let { guildId: t, handleCreateOrEditProduct: o } = e,
          d = (0, c.useGuildProductsForGuild)(t, { publishedOnly: !1 }),
          { shouldRestrictUpdatingCreatorMonetizationSettings: _ } = (0,
          r.useShouldRestrictUpdatingCreatorMonetizationSettings)(t),
          N = e => {
            (0, u.updateGuildProductListing)(t, e, { published: !1 });
          },
          g = (e, l) => {
            (0, n.openModalLazy)(async () => {
              let { default: n } = await s
                .el("757949")
                .then(s.bind(s, "757949"));
              return s =>
                (0, a.jsx)(n, {
                  guildId: t,
                  productId: e,
                  productName: l,
                  ...s,
                });
            });
          },
          h = (e, t) => {
            (0, l.copy)((0, E.getGuildProductListingUrl)(e, t));
          },
          C = d.length > 0;
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(n.FormTitle, {
              className: S.productListingsHeader,
              id: m,
              children: C
                ? f.default.Messages.GUILD_PRODUCTS_YOUR_PRODUCTS_HEADER
                : f.default.Messages.GUILD_PRODUCTS_NO_PRODUCTS_HEADER,
            }),
            C
              ? (0, a.jsx)("ul", {
                  className: S.productListings,
                  "aria-labelledby": m,
                  children: d.map(e =>
                    (0, a.jsx)(
                      "li",
                      {
                        children: (0, a.jsx)(T.default, {
                          guildId: t,
                          product: e,
                          onEditProduct: () => o(e.id),
                          onUnpublishProduct: () => N(e.id),
                          onDeleteProduct: () => g(e.id, e.name),
                          onCopyProductLink: () => h(t, e.id),
                          onTestDownload: () =>
                            I.default.open({ guildId: t, productId: e.id }),
                          onReportProduct: () => {},
                          disabled: _,
                        }),
                      },
                      e.id
                    )
                  ),
                })
              : (0, a.jsx)(i.default, {
                  guildId: t,
                  showCTA: !1,
                  responsive: !1,
                }),
          ],
        });
      }
      function g(e) {
        let { guildId: t } = e,
          { shouldRestrictUpdatingCreatorMonetizationSettings: s } = (0,
          r.useShouldRestrictUpdatingCreatorMonetizationSettings)(t),
          l = e => {
            _.openModal(t, e);
          };
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsxs)(n.Button, {
              className: S.addButton,
              innerClassName: S.addButtonInner,
              onClick: () => l(null),
              disabled: s,
              children: [
                (0, a.jsx)(d.default, {
                  width: 20,
                  height: 20,
                  "aria-hidden": !0,
                }),
                (0, a.jsx)(o.default, { size: 6, horizontal: !0 }),
                f.default.Messages.GUILD_PRODUCTS_CREATE_PRODUCT_BUTTON,
              ],
            }),
            (0, a.jsx)(o.default, { size: 24 }),
            (0, a.jsx)(N, { guildId: t, handleCreateOrEditProduct: l }),
          ],
        });
      }
    },
    691659: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return g;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("65597"),
        n = s("77078"),
        i = s("218567"),
        r = s("207353"),
        o = s("898411"),
        d = s("887229"),
        u = s("313584"),
        c = s("657960"),
        E = s("657650"),
        _ = s("441901"),
        I = s("900938"),
        T = s("442379"),
        f = s("559821"),
        S = s("762051"),
        m = s("782340");
      function N(e) {
        let { listingId: t } = e,
          s = (0, T.useGuildProductListingById)(t);
        return null == s ? null : (0, a.jsx)(r.Cell, { children: s.name });
      }
      function g(e) {
        var t, s, r;
        let { guildId: T } = e,
          g = (0, f.default)(T),
          h = (0, i.useCreatorMonetizationSettingsDisabled)(),
          C = (0, l.default)([I.default], () => I.default.getGuild());
        return g.loading || null == C
          ? (0, a.jsx)(n.Spinner, {})
          : null == g.application
            ? (0, a.jsx)(c.default, { guild: C })
            : (0, a.jsxs)(u.default, {
                children: [
                  (0, a.jsx)(d.default, {
                    revenue: g.metrics.revenue,
                    revenueTrend: g.metrics.revenuePctChange,
                    summaryMetricLabel:
                      m.default.Messages.GUILD_PRODUCT_PURCHASES_TITLE,
                    summaryMetricValue:
                      null !== (s = g.metrics.paymentsCount) && void 0 !== s
                        ? s
                        : "-",
                    summaryMetricTrend:
                      null !== (r = g.metrics.paymentsCountChange) &&
                      void 0 !== r
                        ? r
                        : 0,
                    summaryMetricTrendIsPercent: !1,
                    children: (0, a.jsx)(S.default, {
                      guildId: T,
                      earningsData: g,
                    }),
                  }),
                  (0, a.jsx)(n.FormSection, {
                    title:
                      m.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_EARNINGS_EARNINGS_HISTORY_HEADER,
                    children: (0, a.jsx)(o.default, {
                      ListingIdLabel: N,
                      payoutsByPeriod: g.payoutsByPeriod,
                      team:
                        null === (t = g.application) || void 0 === t
                          ? void 0
                          : t.team,
                    }),
                  }),
                  (0, a.jsx)(n.FormSection, {
                    title:
                      m.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_TITLE,
                    disabled: h,
                    children: (0, a.jsx)(E.default, {
                      guildId: T,
                      application: g.application,
                    }),
                  }),
                  (0, a.jsx)(n.FormSection, {
                    title:
                      m.default.Messages
                        .CREATOR_MONETIZATION_SETTINGS_DISABLE_MONETIZATION_SECTION_TITLE,
                    children: (0, a.jsx)(_.default, {
                      guildId: T,
                      allPeriods: g.payoutsByPeriod,
                    }),
                  }),
                ],
              });
      }
    },
    310266: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          GuildProductsSettingsOverview: function () {
            return D;
          },
        }),
        s("222007"),
        s("794252");
      var a,
        l,
        n = s("37983"),
        i = s("884691"),
        r = s("506838"),
        o = s("65597"),
        d = s("77078"),
        u = s("741515"),
        c = s("218567"),
        E = s("97031"),
        _ = s("283962"),
        I = s("258984"),
        T = s("592407"),
        f = s("479756"),
        S = s("507950"),
        m = s("393414"),
        N = s("305961"),
        g = s("697218"),
        h = s("701909"),
        C = s("442379"),
        R = s("533161"),
        x = s("166364"),
        L = s("691659"),
        O = s("49111"),
        p = s("724210"),
        A = s("782340"),
        M = s("384600");
      function D(e) {
        let { guildId: t, hasValidApplication: s } = e,
          { listingsLoaded: a } = (0, C.useFetchGuildProductListingsForGuild)(
            t
          ),
          l = (0, o.default)([N.default], () => N.default.getGuild(t)),
          D = (0, o.default)([g.default], () => g.default.getCurrentUser()),
          v = (null == l ? void 0 : l.isOwner(D)) === !0,
          { loading: G } = (0, u.useMonetizationSettings)(t),
          [j, U] = i.useState(s ? "manage_listings" : "payment");
        (0, _.useNewOwnerOnboardingRequired)(l);
        let P = i.useCallback(() => {
          if (null == l) return;
          let e = N.default.getRole(l.id, l.getEveryoneRoleId());
          if (null == e) return;
          T.default.close();
          let t = { [e.id]: e };
          (0, f.startImpersonating)(l.id, {
            type: S.ImpersonateType.SERVER_SHOP,
            roles: t,
            initialTab: "guild_products",
            returnToSection: O.GuildSettingsSections.GUILD_PRODUCTS,
          }),
            (0, m.transitionTo)(
              O.Routes.CHANNEL(l.id, p.StaticChannelRoute.GUILD_SHOP)
            );
        }, [l]);
        if (!a || G) return (0, n.jsx)(d.Spinner, {});
        if (null == l) return null;
        let b = (0, n.jsxs)(n.Fragment, {
            children: [
              (0, n.jsx)(d.FormTitle, {
                tag: d.FormTitleTags.H1,
                children: A.default.Messages.GUILD_PRODUCTS_TITLE,
              }),
              (0, n.jsx)(d.FormText, {
                type: d.FormText.Types.DESCRIPTION,
                children:
                  A.default.Messages.GUILD_PRODUCTS_SETTINGS_DESCRIPTION.format(
                    {
                      monetizationPolicyLink: h.default.getArticleURL(
                        O.HelpdeskArticles.CREATOR_POLICY
                      ),
                      serverProductsSupportLink:
                        h.default.getCreatorSupportArticleURL(
                          O.HelpdeskArticles.SERVER_PRODUCTS
                        ),
                    }
                  ),
              }),
            ],
          }),
          B = (0, n.jsxs)(d.TabBar, {
            type: "top",
            look: "brand",
            className: M.tabBar,
            "aria-label": A.default.Messages.GUILD_PRODUCTS_TITLE,
            selectedItem: j,
            onItemSelect: U,
            children: [
              (0, n.jsx)(E.default, {
                id: "basic_info",
                disabledTooltip:
                  A.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_BASIC_INFO_NEEDS_APPLICATION,
                disabled: !s,
                children: A.default.Messages.GUILD_PRODUCTS_BASIC_INFO_SECTION,
              }),
              (0, n.jsx)(E.default, {
                id: "manage_listings",
                disabledTooltip:
                  A.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_BASIC_INFO_NEEDS_APPLICATION,
                disabled: !s,
                children: A.default.Messages.GUILD_PRODUCTS_LISTINGS_SECTION,
              }),
              v
                ? (0, n.jsx)(d.TabBar.Item, {
                    id: "payment",
                    className: M.tabBarItem,
                    children: A.default.Messages.GUILD_PRODUCTS_PAYMENT_SECTION,
                  })
                : null,
              s
                ? (0, n.jsx)("div", {
                    className: M.previewButton,
                    children: (0, n.jsx)(d.Button, {
                      onClick: P,
                      color: d.Button.Colors.PRIMARY,
                      size: d.Button.Sizes.SMALL,
                      look: d.Button.Looks.OUTLINED,
                      children:
                        A.default.Messages
                          .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_PREVIEW,
                    }),
                  })
                : null,
            ],
          }),
          y = (0, r.match)(j)
            .with("basic_info", () => (0, n.jsx)(R.default, { guildId: t }))
            .with("manage_listings", () =>
              (0, n.jsx)(x.default, { guildId: t })
            )
            .with("payment", () => (0, n.jsx)(L.default, { guildId: t }))
            .exhaustive(),
          F = a
            ? (0, n.jsx)(d.TabBar.Panel, { id: j, children: y })
            : (0, n.jsx)(d.Spinner, {});
        return (0, n.jsxs)(
          c.CreatorMonetizationSettingsDisabledContextProvider,
          {
            guildId: t,
            children: [
              b,
              (0, n.jsx)(I.default, { guild: l }),
              (0, n.jsx)("div", { className: M.tabBarContainer, children: B }),
              F,
            ],
          }
        );
      }
      ((l = a || (a = {})).MANAGE_LISTINGS = "manage_listings"),
        (l.PAYMENT = "payment"),
        (l.BASIC_INFO = "basic_info");
    },
    883206: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return E;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("65597"),
        n = s("77078"),
        i = s("986399"),
        r = s("900938"),
        o = s("287883"),
        d = s("310266"),
        u = s("49111"),
        c = s("988268");
      function E() {
        let e = (0, l.default)([r.default], () => r.default.getGuild()),
          t = (0, o.useGuildEligibleForGuildProducts)(
            null == e ? void 0 : e.id,
            "guild_product_settings"
          ),
          { application: s, loading: E } = (0, i.default)(
            null == e ? void 0 : e.id,
            c.ApplicationTypes.GUILD_ROLE_SUBSCRIPTIONS
          ),
          _ =
            null != s &&
            (null == e
              ? void 0
              : e.hasFeature(u.GuildFeatures.ROLE_SUBSCRIPTIONS_ENABLED)) ===
              !0;
        return (0, a.jsx)("main", {
          children:
            null == e || !t || E
              ? (0, a.jsx)(n.Spinner, {})
              : (0, a.jsx)(d.GuildProductsSettingsOverview, {
                  guildId: e.id,
                  hasValidApplication: _,
                }),
        });
      }
    },
    762051: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return E;
          },
        });
      var a,
        l,
        n = s("37983"),
        i = s("884691"),
        r = s("207353"),
        o = s("442379"),
        d = s("782340"),
        u = s("652692");
      ((a = l || (l = {})).LISTING_NAME = "LISTING_NAME"),
        (a.PAYMENTS_COUNT = "PAYMENTS_COUNT"),
        (a.PRICE = "PRICE");
      let c = (0, r.createTableColumns)([
        (0, r.createListingNameColumn)({
          key: "LISTING_NAME",
          cellClassName: u.listingNameColumn,
          renderHeader: () =>
            (0, n.jsx)(r.HeaderCell, {
              children:
                d.default.Messages
                  .GUILD_PRODUCT_EARNINGS_TABLE_LISTING_COLUMN_TITLE,
            }),
          sort: (0, r.getDefaultSorter)(e => e.listing.name.toLowerCase()),
        }),
        (0, r.createPersonCountColumn)({
          key: "PAYMENTS_COUNT",
          cellClassName: u.paymentsCountColumn,
          renderHeader: () =>
            (0, n.jsx)(r.HeaderCell, {
              children:
                d.default.Messages
                  .GUILD_PRODUCT_EARNINGS_TABLE_PURCHASES_COLUMN_TITLE,
            }),
          getCount: e => e.paymentsCount,
          sort: (0, r.getDefaultSorter)(e => {
            var t;
            return null !== (t = e.paymentsCount) && void 0 !== t ? t : 0;
          }),
        }),
        (0, r.createCurrencyAmountColumn)({
          key: "PRICE",
          cellClassName: u.priceColumn,
          renderHeader: () =>
            (0, n.jsx)(r.HeaderCell, {
              children:
                d.default.Messages
                  .GUILD_PRODUCT_EARNINGS_TABLE_PRICE_COLUMN_TITLE,
            }),
          getAmount(e) {
            let { listing: t } = e;
            return t.price_tier;
          },
          sort: (0, r.getDefaultSorter)(e => {
            var t;
            return null !== (t = e.listing.price_tier) && void 0 !== t ? t : 0;
          }),
        }),
      ]);
      function E(e) {
        let { earningsData: t, guildId: s } = e,
          a = (0, o.useGuildProductsForGuild)(s, { publishedOnly: !1 }),
          l = t.currentPeriod,
          d = i.useMemo(
            () =>
              a
                .map(e => {
                  var t;
                  let s = null == l ? void 0 : l.ppgs[e.id];
                  return {
                    ...(null != s ? s : {}),
                    key: e.id,
                    listing: e,
                    paymentsCount:
                      null !== (t = null == s ? void 0 : s.purchase_count) &&
                      void 0 !== t
                        ? t
                        : 0,
                  };
                })
                .filter(e => e.listing.published || e.paymentsCount > 0),
            [a, null == l ? void 0 : l.ppgs]
          );
        return null == a || 0 === a.length
          ? null
          : (0, n.jsx)(r.default, {
              columns: c,
              data: d,
              initialSortKey: "LISTING_NAME",
            });
      }
    },
    434014: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          formatMetricTrend: function () {
            return n;
          },
          formatNextPaymentDate: function () {
            return i;
          },
        });
      var a = s("866227"),
        l = s.n(a);
      function n(e, t) {
        let s = "",
          a = e >= 0;
        return (
          a && (s += "+"),
          t ? (s += "".concat(Math.floor(100 * e), "%")) : (s += e),
          { formattedValue: s, isPositive: a }
        );
      }
      function i(e, t) {
        return null != e ? l(e).format(t) : "-";
      }
    },
    488499: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("397056"),
        l = s("782340"),
        n = {
          getStatusErrorText: function (e) {
            switch (e) {
              case a.PayoutStatuses.CANCELED:
              case a.PayoutStatuses.DEFERRED:
                return l.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_CANCELLED;
              case a.PayoutStatuses.DEFERRED_INTERNAL:
                return l.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_DEFERRED;
              case a.PayoutStatuses.ERROR:
                return l.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_ERROR;
              case a.PayoutStatuses.REJECTED:
                return l.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_REJECTED;
              case a.PayoutStatuses.RISK_REVIEW:
                return l.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_RISK_REVIEW;
            }
          },
        };
    },
    757715: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useRoleSubscriptionSettingsDisabled: function () {
            return a.useCreatorMonetizationSettingsDisabled;
          },
          RoleSubscriptionSettingsDisabledContextProvider: function () {
            return a.CreatorMonetizationSettingsDisabledContextProvider;
          },
        });
      var a = s("218567");
    },
    880993: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return i;
          },
        });
      var a = s("316693"),
        l = s("991170"),
        n = s("49111");
      function i(e, t) {
        let s = { [t.id]: t };
        return e.filter(e => {
          let t = l.default.computePermissionsForRoles({
              forceRoles: s,
              context: e,
            }),
            i = n.Permissions.VIEW_CHANNEL;
          return (
            e.isGuildVocal() && (i = a.default.add(i, n.Permissions.CONNECT)),
            a.default.has(t, i) && !l.default.canEveryoneRole(i, e)
          );
        });
      }
    },
    406876: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useEditStateContext: function () {
            return i;
          },
          EditStateContextProvider: function () {
            return r;
          },
        }),
        s("70102");
      var a = s("37983"),
        l = s("884691");
      let n = l.createContext(void 0);
      function i() {
        let e = l.useContext(n);
        if (null == e)
          throw Error(
            "No edit state; are you missing an <EditStateContextProvider />?"
          );
        return e;
      }
      function r(e) {
        let { children: t, ...s } = e;
        return (0, a.jsx)(n.Provider, { value: s, children: t });
      }
    },
    490683: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return u;
          },
        });
      var a = s("627445"),
        l = s.n(a),
        n = s("545158"),
        i = s("592407"),
        r = s("65722"),
        o = s("49111"),
        d = s("782340");
      function u(e) {
        let t = (0, r.useGuildRoleSubscriptionSettingsVisibility)(e);
        switch (t) {
          case r.GuildRoleSubscriptionSettingsVisibility.NEEDS_COMMUNITY:
            return {
              visibility: t,
              noticeText:
                d.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_COMMUNITY_REQUIREMENT_NOTICE,
              ctaLabel:
                d.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_COMMUNITY_REQUIREMENT_CTA_LABEL,
              ctaClickable: null != e,
              onCtaClicked() {
                var t;
                l(null != e, "Guild must be not null open COMMUNITY settings"),
                  i.default.open(
                    null !== (t = null == e ? void 0 : e.id) && void 0 !== t
                      ? t
                      : "",
                    o.GuildSettingsSections.COMMUNITY
                  );
              },
            };
          case r.GuildRoleSubscriptionSettingsVisibility.WAITLIST_ONLY:
            return {
              visibility: t,
              noticeText:
                d.default.Messages.GUILD_ROLE_SUBSCRIPTION_WAITLIST_NOTICE,
              ctaLabel:
                d.default.Messages.GUILD_ROLE_SUBSCRIPTION_WAITLIST_CTA_LABEL,
              ctaClickable: !0,
              onCtaClicked() {
                (0, n.default)("https://dis.gd/creators-waitlist");
              },
            };
          default:
            return;
        }
      }
    },
    238498: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return l;
          },
        });
      var a = s("782340");
      function l(e) {
        return e > 0 && e % 7 == 0
          ? a.default.Messages.DURATION_WEEKS.format({ weeks: e / 7 })
          : a.default.Messages.DURATION_DAYS.format({ days: e });
      }
    },
    195367: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return l;
          },
        }),
        s("222007"),
        s("881410");
      var a = s("971150");
      function l(e) {
        let t = (0, a.useEditStateStore)(t => t.editStateIdsForGroup[e]),
          s = (0, a.useEditStateStore)(e => e.listings);
        if (null == t) return !1;
        let l = Object.keys(s),
          n = t.every(e => l.includes(e)),
          i = Object.entries(s).filter(e => {
            let [s] = e;
            return null == t ? void 0 : t.includes(s);
          }),
          r = i.flatMap(
            e =>
              null == e[1] ||
              Object.values(e[1]).every(e => null == e || "" === e)
          );
        return !n || r.includes(!0);
      }
    },
    619389: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return d;
          },
        });
      var a = s("884691"),
        l = s("717559"),
        n = s("38904"),
        i = s("257869"),
        r = s("452111"),
        o = s("397056");
      function d(e, t) {
        let s = null == t ? void 0 : t.team,
          { payoutsByPeriod: d, loading: u } = (0, n.default)(
            null == t ? void 0 : t.id,
            {
              groupType: o.PaymentPayoutGroupTypes.SERVER_ROLE_SUBSCRIPTION,
              teamId: null == s ? void 0 : s.id,
            }
          ),
          c = (0, i.useGroupListingsFetchContext)("useEarningMetrics"),
          E = (0, r.default)(e),
          {
            currentPeriod: _,
            previousPeriods: I,
            metrics: T,
          } = a.useMemo(() => {
            let { currentPeriod: e, previousPeriods: t } = (0,
              l.splitCurrentPeriod)(d),
              s = (0, l.calculateMetrics)(e, t[0]),
              a = {
                ...s,
                subscribers: E,
                subscriberChange: s.paymentsCountChange,
              };
            return { currentPeriod: e, previousPeriods: t, metrics: a };
          }, [d, E]);
        return {
          loading: u || !c,
          team: s,
          currentPeriod: _,
          previousPeriods: I,
          allPeriods: d,
          metrics: T,
        };
      }
    },
    458961: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        }),
        s("222007");
      var a = s("884691"),
        l = s("719726");
      function n(e) {
        let [t, s] = a.useState(!0),
          [n, i] = a.useState(),
          [r, o] = a.useState(),
          d = a.useCallback(async e => {
            s(!0), i(void 0);
            try {
              let t = await l.fetchHighlightedCreatorGuildDetails(e);
              o(t);
            } catch (e) {
              i(e);
            } finally {
              s(!1);
            }
          }, []);
        return (
          a.useEffect(() => {
            d(e);
          }, [e, d]),
          { isLoading: t, error: n, highlightedCreatorDetails: r }
        );
      }
    },
    608775: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return u;
          },
        });
      var a = s("884691"),
        l = s("446674"),
        n = s("150021"),
        i = s("84339"),
        r = s("466227"),
        o = s("153043");
      let d = [];
      function u(e) {
        let { revision: t, emojis: s } = (0, l.useStateFromStoresObject)(
            [r.default],
            () => ({
              revision: r.default.getEmojiRevision(e),
              emojis: r.default.getEmojis(e),
            })
          ),
          u = (0, i.default)(t);
        return (
          a.useEffect(() => {
            (0, n.fetchEmoji)(e);
          }, [e]),
          a.useEffect(() => {
            null != u && u < t && (0, n.fetchEmoji)(e);
          }, [t, u, e]),
          a.useMemo(
            () =>
              null == s
                ? d
                : s.filter(t => (0, o.isRoleSubscriptionEmoji)(t, e)),
            [s, e]
          )
        );
      }
    },
    111462: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        }),
        s("222007");
      var a = s("884691"),
        l = s("315102"),
        n = s("458961"),
        i = s("49111");
      function r(e, t, s) {
        var r, o;
        let {
            isLoading: d,
            error: u,
            highlightedCreatorDetails: c,
          } = (0, n.default)(e),
          E = null == c ? void 0 : c.store_page,
          _ = a.useMemo(() => {
            var e, t;
            let s = (function (e) {
                let t = new Set();
                return (
                  null == e ||
                    e.forEach(e => {
                      var s;
                      null === (s = e.subscription_listings) ||
                        void 0 === s ||
                        s.forEach(e => {
                          t.add(e.role_id);
                        });
                    }),
                  t
                );
              })(
                null == E
                  ? void 0
                  : null === (e = E.role_subscription) || void 0 === e
                    ? void 0
                    : e.group_listings
              ),
              a =
                null == E
                  ? void 0
                  : null === (t = E.role_subscription) || void 0 === t
                    ? void 0
                    : t.benefit_emojis;
            return null == a
              ? void 0
              : a.filter(e => e.roles.some(e => s.has(e)));
          }, [null == E ? void 0 : E.role_subscription]),
          I = null == E ? void 0 : E.guild.icon_hash,
          T = l.default.getGuildIconURL({ id: e, icon: I, size: s }),
          f = a.useMemo(
            () => (null != _ && _.length > t ? _.slice(0, t) : _),
            [_, t]
          ),
          S = null != _ && _.length > t ? _.length - t : null,
          m = null == c ? void 0 : c.slug,
          N =
            null != m
              ? i.MarketingURLs.ROLE_SUBSCRIPTION_STORE_PAGE(m)
              : void 0,
          g =
            null == E
              ? void 0
              : null === (r = E.guild) || void 0 === r
                ? void 0
                : r.name,
          h =
            null == E
              ? void 0
              : null === (o = E.role_subscription) || void 0 === o
                ? void 0
                : o.subscriber_count,
          C = !d && null != g && null != I && null != T;
        return C
          ? {
              hasAllImperativeDetails: C,
              isLoading: d,
              details: {
                guildName: g,
                guildIcon: I,
                guildAvatarUrl: T,
                storePageUrl: N,
                subscriberCount: h,
                emojisToShow: f,
                notShownEmojiCount: S,
              },
            }
          : { hasAllImperativeDetails: C, isLoading: d, error: u };
      }
    },
    620199: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        }),
        s("222007");
      var a = s("884691"),
        l = s("782340");
      function n(e) {
        let [t, s] = a.useState(
            l.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_IMAGE_CTA_DEFAULT_FILENAME
          ),
          n =
            null == e
              ? l.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_CTA_UPLOAD
              : l.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_CTA_EDIT,
          i =
            null == e
              ? l.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_CTA_UPLOAD
              : l.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_CTA_EDIT_A11Y.format(
                  { filename: t }
                );
        return { imageCTA: n, imageAriaLabel: i, setFilename: s };
      }
    },
    165169: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return i;
          },
        });
      var a = s("884691"),
        l = s("837008"),
        n = s("795228");
      function i(e, t) {
        let s = (0, l.useSubscriptionListingsForGuild)(e),
          i = (0, n.default)(e);
        return a.useMemo(
          () =>
            s.map(e => {
              var s;
              let a = null == e ? void 0 : e.role_id;
              return {
                ...(null !== (s = null == t ? void 0 : t.ppgs[e.id]) &&
                void 0 !== s
                  ? s
                  : {}),
                key: e.id,
                subscriptionListing: e,
                roleMemberCount: null == a ? void 0 : null == i ? void 0 : i[a],
              };
            }),
          [s, null == t ? void 0 : t.ppgs, i]
        );
      }
    },
    7370: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return u;
          },
        });
      var a = s("884691"),
        l = s("316693"),
        n = s("446674"),
        i = s("305961"),
        r = s("677795"),
        o = s("49111");
      let d = o.Permissions.VIEW_CHANNEL;
      function u(e) {
        let t = (0, n.useStateFromStores)([i.default], () => {
            let t = i.default.getGuild(e);
            return null != t
              ? i.default.getRole(t.id, t.getEveryoneRoleId())
              : void 0;
          }),
          s = a.useMemo(() => {
            if (null == t) return r.GuildRoleSubscriptionFormat.SOME_CHANNELS;
            let e = l.default.has(t.permissions, d);
            return e
              ? r.GuildRoleSubscriptionFormat.SOME_CHANNELS
              : r.GuildRoleSubscriptionFormat.ALL_CHANNELS;
          }, [t]),
          o = s === r.GuildRoleSubscriptionFormat.ALL_CHANNELS;
        return { format: s, isFullServerGating: o };
      }
    },
    44737: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useRoleSubscriptionInsightsAccess: function () {
            return o;
          },
        });
      var a = s("316693"),
        l = s("446674"),
        n = s("305961"),
        i = s("957255"),
        r = s("49111");
      function o(e) {
        let t = (0, l.useStateFromStores)([n.default, i.default], () => {
          let t = n.default.getGuild(e);
          if (null == t) return !1;
          let s = i.default.getGuildPermissions(t);
          return (
            null != s &&
            a.default.has(s, r.Permissions.VIEW_CREATOR_MONETIZATION_ANALYTICS)
          );
        });
        return t;
      }
    },
    452111: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return i;
          },
        }),
        s("222007");
      var a = s("884691"),
        l = s("837008"),
        n = s("795228");
      function i(e) {
        let t = (0, l.useSubscriptionListingsForGuild)(e),
          s = (0, n.default)(e);
        return a.useMemo(() => {
          let e = 0;
          for (let a of t) {
            let t = null == a ? void 0 : a.role_id;
            if (null != t) {
              let a = null == s ? void 0 : s[t];
              null != a && (e += a);
            }
          }
          return e;
        }, [t, s]);
      }
    },
    979778: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("884691"),
        l = s("782340");
      function n() {
        return a.useMemo(
          () => [
            {
              value: null,
              label:
                l.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ACTIVE_TRIAL_USER_LIMIT_NONE_OPTION,
            },
            { value: 10, label: "10" },
            { value: 25, label: "25" },
            { value: 50, label: "50" },
            { value: 100, label: "100" },
          ],
          []
        );
      }
    },
    561205: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return _;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("77078"),
        o = s("476765"),
        d = s("461380"),
        u = s("306073"),
        c = s("782340"),
        E = s("544362");
      function _(e) {
        let {
            intiallyExpanded: t = !1,
            title: s,
            description: n,
            children: _,
          } = e,
          [I, T] = l.useState(t),
          f = () => T(e => !e),
          S = (0, o.useUID)();
        return (0, a.jsxs)("div", {
          className: E.container,
          children: [
            (0, a.jsx)(u.default, {
              className: i(E.header, {
                [E.headerWithDescription]: I && null != n,
              }),
              onClick: f,
              children: e => {
                let { areaRef: t, handleStopPropagation: l } = e;
                return (0, a.jsxs)(a.Fragment, {
                  children: [
                    (0, a.jsx)(r.Heading, {
                      variant: "heading-md/semibold",
                      children: s,
                    }),
                    (0, a.jsx)(r.Clickable, {
                      onClick: l(f),
                      "aria-label":
                        c.default.Messages
                          .GUILD_ROLE_SUBSCRIPTIONS_TOGGLE_SECTION_LABEL,
                      "aria-controls": S,
                      "aria-expanded": I,
                      focusProps: { ringTarget: t },
                      children: (0, a.jsx)(d.default, {
                        className: E.caret,
                        direction: I
                          ? d.default.Directions.UP
                          : d.default.Directions.DOWN,
                      }),
                    }),
                  ],
                });
              },
            }),
            I &&
              (0, a.jsxs)("div", {
                id: S,
                children: [
                  null != n &&
                    (0, a.jsx)(r.FormText, {
                      type: r.FormText.Types.DESCRIPTION,
                      className: E.description,
                      children: n,
                    }),
                  (0, a.jsx)("div", { className: E.divider }),
                  (0, a.jsx)("div", { className: E.content, children: _ }),
                ],
              }),
          ],
        });
      }
    },
    395905: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("381546"),
        n = s("223984");
      function i(e) {
        return (0, a.jsx)(n.default, {
          color: n.MessageBlockColors.RED,
          icon: l.default,
          ...e,
        });
      }
    },
    258984: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return u;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("756717"),
        n = s("395905"),
        i = s("264742"),
        r = s("49111"),
        o = s("782340"),
        d = s("367551");
      function u(e) {
        let t,
          { guild: s } = e,
          {
            resubmittingEnableRequest: u,
            resubmissionError: c,
            createEnableRequest: E,
            resubmittedRequest: _,
            requestRejectedNoticeText: I,
            reapplyNoticeText: T,
          } = (0, l.default)(s),
          f = s.hasFeature(r.GuildFeatures.CREATOR_MONETIZABLE_RESTRICTED),
          S = s.hasFeature(
            r.GuildFeatures.CREATOR_MONETIZABLE_PENDING_NEW_OWNER_ONBOARDING
          );
        if (null != c)
          return (0, a.jsx)(n.default, {
            className: d.noticeContainer,
            children: c.getAnyErrorMessage(),
          });
        let m = null;
        return (
          null != I
            ? (m = I)
            : _
              ? (m =
                  o.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_PENDING)
              : null != T
                ? ((m = T),
                  (t =
                    o.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SUBMIT_APPEAL_CTA))
                : S
                  ? (m =
                      o.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_SETTINGS_READ_ONLY_FOR_PENDING_NEW_OWNER_PENDING_NOTICE)
                  : f &&
                    (m =
                      o.default.Messages
                        .CREATOR_MONETIZATION_SETTINGS_RESTRICTED_NOTICE),
          null != m
            ? (0, a.jsx)(i.default, {
                className: d.noticeContainer,
                notice: m,
                ctaLabel: t,
                ctaLoading: u,
                onClick: E,
              })
            : null
        );
      }
    },
    120856: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return _;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("862337"),
        o = s("77078"),
        d = s("461380"),
        u = s("926633"),
        c = s("782340"),
        E = s("314424"),
        _ = function (e) {
          let {
              items: t,
              carouselClassName: s,
              paginationCaretClassName: n,
              intervalBetweenAutomaticItemRotations: _,
              renderItem: I,
            } = e,
            T = l.useMemo(() => new r.Interval(), []),
            [f, S] = l.useState(u.SlideDirection.LEFT),
            [m, N] = l.useState(0),
            [g, h] = l.useState(!1),
            [C, R] = l.useState(!1),
            x = l.useCallback(
              (e, t) => {
                N(s => {
                  let a = s + t;
                  return (
                    a < 0 ? (a = e.length - 1) : a > e.length - 1 && (a = 0), a
                  );
                });
              },
              [N]
            ),
            L = l.useCallback(() => {
              !C && x(t, 1);
            }, [x, t, C]),
            O = l.useCallback(() => {
              !C && x(t, -1);
            }, [x, t, C]);
          return (
            l.useEffect(() => {
              null != _ && (g ? g && T.stop() : T.start(_, L));
            }, [g, T, _, L]),
            (0, a.jsxs)("div", {
              className: E.root,
              onMouseEnter: () => h(!0),
              onMouseLeave: () => h(!1),
              children: [
                (0, a.jsx)(o.Clickable, {
                  className: i(E.carouselCaret, n),
                  onClick: O,
                  onMouseEnter: () => S(u.SlideDirection.RIGHT),
                  ignoreKeyPress: C,
                  children: (0, a.jsx)(d.default, {
                    direction: d.default.Directions.LEFT,
                    height: 48,
                    width: 48,
                    "aria-label":
                      c.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_PREVIOUS_CARD_ARIA_LABEL,
                  }),
                }),
                (0, a.jsx)(u.default, {
                  step: m,
                  direction: f,
                  onAnimationStart: () => R(!0),
                  onAnimationEnd: () => R(!1),
                  className: i(E.carousel, s),
                  children: I(t[m]),
                }),
                (0, a.jsx)(o.Clickable, {
                  className: i(E.carouselCaret, n),
                  onClick: L,
                  onMouseEnter: () => S(u.SlideDirection.LEFT),
                  ignoreKeyPress: C,
                  children: (0, a.jsx)(d.default, {
                    direction: d.default.Directions.RIGHT,
                    height: 48,
                    width: 48,
                    "aria-label":
                      c.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_NEXT_CARD_ARIA_LABEL,
                  }),
                }),
              ],
            })
          );
        };
    },
    926633: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          SlideDirection: function () {
            return l;
          },
          default: function () {
            return I;
          },
        });
      var a,
        l,
        n = s("37983"),
        i = s("884691"),
        r = s("414456"),
        o = s.n(r),
        d = s("458960"),
        u = s("266491"),
        c = s("16723");
      ((a = l || (l = {}))[(a.RIGHT = -1)] = "RIGHT"),
        (a[(a.LEFT = 1)] = "LEFT");
      let E = { friction: 10, tension: 40, overshootClamping: !0 };
      class _ extends i.PureComponent {
        componentWillEnter(e) {
          var t, s;
          null === (t = (s = this.props).onAnimationStart) ||
            void 0 === t ||
            t.call(s),
            this._animated.setValue(-this.props.direction),
            d.default.spring(this._animated, { toValue: 0, ...E }).start(() => {
              var t, s;
              e(),
                null === (t = (s = this.props).onAnimationEnd) ||
                  void 0 === t ||
                  t.call(s);
            });
        }
        componentDidAppear() {
          this._animated.setValue(0);
        }
        componentWillLeave(e) {
          d.default
            .spring(this._animated, { toValue: this.props.direction, ...E })
            .start(e);
        }
        getStyle() {
          return d.default.accelerate({
            transform: [
              {
                translateX: this._animated.interpolate({
                  inputRange: [0, 1],
                  outputRange: ["0%", "-100%"],
                }),
              },
            ],
          });
        }
        render() {
          return (0, n.jsx)(d.default.div, {
            style: this.getStyle(),
            className: c.item,
            children: this.props.children,
          });
        }
        constructor(e) {
          super(e), (this._animated = new d.default.Value(-1 * e.direction));
        }
      }
      var I = e => {
        let {
          children: t,
          step: s,
          direction: a,
          className: l,
          onAnimationStart: i,
          onAnimationEnd: r,
        } = e;
        return (0, n.jsx)(u.TransitionGroup, {
          component: "div",
          className: o(c.animator, l),
          children: (0, n.jsx)(
            _,
            {
              direction: a,
              onAnimationStart: i,
              onAnimationEnd: r,
              children: t,
            },
            s
          ),
        });
      };
    },
    752520: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        });
      var a = s("139375"),
        l = s("679653"),
        n = s("42203"),
        i = s("27618"),
        r = s("697218"),
        o = s("677795"),
        d = s("49111"),
        u = s("782340");
      function c(e) {
        switch (e.ref_type) {
          case o.GuildRoleSubscriptionBenefitTypes.CHANNEL: {
            let t = n.default.getChannel(e.ref_id);
            return null != t
              ? (function (e) {
                  let t = (0, l.computeChannelName)(e, r.default, i.default);
                  switch (e.type) {
                    case d.ChannelTypes.GUILD_VOICE:
                      return u.default.Messages.GUILD_SIDEBAR_VOICE_CHANNEL_A11Y_LABEL.format(
                        { channelName: t }
                      );
                    case d.ChannelTypes.GUILD_STAGE_VOICE:
                      return u.default.Messages.GUILD_SIDEBAR_STAGE_CHANNEL_A11Y_LABEL.format(
                        { channelName: t }
                      );
                    default:
                      return (0, a.default)({ channel: e });
                  }
                })(t)
              : "";
          }
          case o.GuildRoleSubscriptionBenefitTypes.INTANGIBLE:
            var t;
            return null !== (t = e.name) && void 0 !== t ? t : "";
        }
      }
    },
    973956: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return L;
          },
        }),
        s("424973"),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("446674"),
        o = s("77078"),
        d = s("679653"),
        u = s("419830"),
        c = s("233069"),
        E = s("245997"),
        _ = s("27618"),
        I = s("697218"),
        T = s("151185"),
        f = s("432153"),
        S = s("49111"),
        m = s("782340"),
        N = s("521180");
      function g(e) {
        return String(e);
      }
      function h(e) {
        let { icon: t, title: s, subtitle: l, className: n } = e;
        return (0, a.jsxs)("div", {
          className: i(N.label, n),
          children: [
            t,
            (0, a.jsxs)("div", {
              className: N.labelText,
              children: [
                (0, a.jsx)(o.Text, {
                  variant: "text-md/normal",
                  color: "none",
                  className: N.labelTitle,
                  children: s,
                }),
                null != l && "" !== l
                  ? (0, a.jsx)(o.Text, {
                      variant: "text-xs/semibold",
                      color: "text-muted",
                      className: N.labelSubtitle,
                      children: l,
                    })
                  : null,
              ],
            }),
          ],
        });
      }
      function C() {
        return (0, a.jsx)(h, {
          icon: (0, a.jsx)(T.default, { className: N.labelIcon }),
          title:
            m.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_BENEFIT_CHANNEL_SELECT_CREATE_LABEL,
          className: N.createLabel,
        });
      }
      function R(e) {
        var t;
        let { channelId: s } = e,
          l = (0, f.useChannelWithTemplateFallback)(s),
          n = (0, f.useChannelWithTemplateFallback)(
            null !== (t = null == l ? void 0 : l.parent_id) && void 0 !== t
              ? t
              : S.EMPTY_STRING_SNOWFLAKE_ID
          );
        if (null == l) return null;
        let i = (0, u.getChannelIconComponent)(l),
          r = (0, d.computeChannelName)(l, I.default, _.default),
          o =
            null != n
              ? (0, d.computeChannelName)(n, I.default, _.default)
              : void 0;
        return (0, a.jsx)(h, {
          icon: null != i && (0, a.jsx)(i, { className: N.labelIcon }),
          title: r,
          subtitle: o,
        });
      }
      function x(e) {
        let { value: t } = e;
        return null != t ? (0, a.jsx)(R, { channelId: t }) : (0, a.jsx)(C, {});
      }
      function L(e) {
        let {
            guildId: t,
            value: n,
            initialChannelId: i,
            omitChannelIds: u,
            "aria-labelledby": T,
            onChange: N,
          } = e,
          h =
            m.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_BENEFIT_CHANNEL_SELECT_CREATE_LABEL,
          C = (0, r.useStateFromStores)(
            [E.default],
            () => E.default.getCategories(t),
            [t]
          ),
          R = (0, f.useChannelWithTemplateFallback)(
            null != n ? n : S.EMPTY_STRING_SNOWFLAKE_ID
          ),
          L = l.useMemo(() => {
            let e = [{ value: null, label: h }],
              t = !1;
            for (let s of C._categories)
              for (let { channel: a } of C[s.channel.id]) {
                if (
                  !!(0, c.isGuildSelectableChannelType)(a.type) ||
                  !!(0, c.isGuildVocalChannelType)(a.type)
                )
                  (!(a.id !== n && (null == u ? void 0 : u.has(a.id))) ||
                    (a.id === i && n !== i)) &&
                    (n === a.id && (t = !0),
                    e.push({
                      value: a.id,
                      label: (0, d.computeChannelName)(a, I.default, _.default),
                    }));
              }
            return (
              null != n &&
                !t &&
                null != R &&
                e.push({ value: n, label: R.name }),
              e
            );
          }, [h, n, R, C, u, i]);
        return (0, a.jsx)(o.Select, {
          placeholder: m.default.Messages.CHANNEL_SELECT,
          options: L,
          select: function (e) {
            null == e
              ? (0, o.openModalLazy)(async () => {
                  let { default: e } = await s
                    .el("341072")
                    .then(s.bind(s, "341072"));
                  return s => (0, a.jsx)(e, { ...s, guildId: t, onSubmit: N });
                })
              : N(e);
          },
          isSelected: e => null != n && g(e) === g(n),
          serialize: g,
          renderOptionLabel: x,
          renderOptionValue: e => {
            let [t] = e;
            return x(t);
          },
          "aria-labelledby": T,
        });
      }
    },
    989210: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          EditChannelBenefitModal: function () {
            return O;
          },
          EditIntangibleBenefitModal: function () {
            return p;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("627445"),
        i = s.n(n),
        r = s("446674"),
        o = s("77078"),
        d = s("430568"),
        u = s("86678"),
        c = s("385976"),
        E = s("867805"),
        _ = s("923959"),
        I = s("882641"),
        T = s("145131"),
        f = s("555158"),
        S = s("191814"),
        m = s("476765"),
        N = s("228220"),
        g = s("973956"),
        h = s("958706"),
        C = s("782340"),
        R = s("655362");
      function x(e) {
        let {
            guildId: t,
            emojiData: s,
            "aria-labelledby": n,
            onSelectEmoji: i,
          } = e,
          T = (0, r.useStateFromStores)([c.default], () =>
            null != s.id ? c.default.getCustomEmojiById(s.id) : void 0
          ),
          f = (0, r.useStateFromStores)([_.default], () =>
            _.default.getDefaultChannel(t)
          ),
          S = l.useCallback(
            e => {
              let { closePopout: t } = e;
              return (0, a.jsx)(u.default, {
                pickerIntention: h.EmojiIntention.GUILD_ROLE_BENEFIT_EMOJI,
                channel: f,
                closePopout: t,
                onNavigateAway: t,
                onSelectEmoji: (e, s) => {
                  null != e &&
                    i(
                      null != e.id
                        ? { id: e.id, name: void 0 }
                        : { id: void 0, name: e.optionallyDiverseSequence }
                    ),
                    s && t();
                },
              });
            },
            [i, f]
          ),
          m = l.useMemo(
            () =>
              null == T && null == s.name
                ? null
                : function () {
                    return (0, a.jsx)(d.default, {
                      className: R.emoji,
                      emojiId: s.id,
                      emojiName: s.name,
                      animated: null == T ? void 0 : T.animated,
                    });
                  },
            [s, T]
          ),
          N = "";
        return (
          null != T
            ? (N = ":".concat(T.name, ":"))
            : null != s.name && (N = E.default.convertSurrogateToName(s.name)),
          (0, a.jsx)(o.Popout, {
            animation: o.Popout.Animation.NONE,
            position: "top",
            renderPopout: S,
            children: (e, t) => {
              let { isShown: s } = t;
              return (0, a.jsxs)("div", {
                className: R.emojiInputContainer,
                ...e,
                children: [
                  (0, a.jsx)(I.default, {
                    className: R.emojiButton,
                    active: s,
                    tabIndex: 0,
                    renderButtonContents: m,
                  }),
                  (0, a.jsx)(o.TextInput, {
                    inputClassName: R.emojiText,
                    placeholder:
                      C.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_BENEFIT_EMOJI_PLACEHOLDER,
                    value: N,
                    "aria-labelledby": n,
                    readOnly: !0,
                  }),
                ],
              });
            },
          })
        );
      }
      function L(e) {
        var t;
        let {
            guildId: s,
            initialData: n,
            benefitTypeInput: i,
            descriptionPlaceholder: r,
            canSubmit: d,
            onSave: u,
            onDelete: c,
            transitionState: E,
            onClose: _,
          } = e,
          I = (0, m.useUID)(),
          f = (0, m.useUID)(),
          g = (0, m.useUID)(),
          [h, L] = l.useState(
            null !== (t = null == n ? void 0 : n.description) && void 0 !== t
              ? t
              : ""
          ),
          [O, p] = l.useState(() => ({
            id: null == n ? void 0 : n.emoji_id,
            name: null == n ? void 0 : n.emoji_name,
          })),
          A = d && "" !== h && (null != O.id || null != O.name);
        return (0, a.jsx)("form", {
          onSubmit: function (e) {
            e.preventDefault(),
              A &&
                (u({ description: h, emojiId: O.id, emojiName: O.name }), _());
          },
          children: (0, a.jsxs)(o.ModalRoot, {
            transitionState: E,
            "aria-labelledby": I,
            children: [
              (0, a.jsxs)(o.ModalHeader, {
                children: [
                  (0, a.jsx)(o.Heading, {
                    id: I,
                    variant: "heading-md/semibold",
                    children:
                      C.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_BENEFIT_INTANGIBLE_MODAL_TITLE,
                  }),
                  (0, a.jsx)(o.ModalCloseButton, {
                    className: R.closeButton,
                    onClick: _,
                  }),
                ],
              }),
              (0, a.jsxs)(o.ModalContent, {
                className: R.modalContent,
                children: [
                  i,
                  (0, a.jsx)(S.default, { size: 24 }),
                  (0, a.jsx)(o.FormSection, {
                    title: C.default.Messages.DESCRIPTION,
                    titleId: f,
                    children: (0, a.jsx)(o.TextArea, {
                      placeholder: r,
                      value: h,
                      rows: 1,
                      autosize: !0,
                      onChange: L,
                      "aria-labelledby": f,
                    }),
                  }),
                  (0, a.jsx)(S.default, { size: 24 }),
                  (0, a.jsx)(o.FormSection, {
                    title: C.default.Messages.EMOJI,
                    titleId: g,
                    children: (0, a.jsx)(x, {
                      guildId: s,
                      emojiData: O,
                      onSelectEmoji: p,
                      "aria-labelledby": g,
                    }),
                  }),
                ],
              }),
              (0, a.jsxs)(o.ModalFooter, {
                justify: T.default.Justify.BETWEEN,
                children: [
                  (0, a.jsxs)("div", {
                    className: R.primaryButtons,
                    children: [
                      (0, a.jsx)(o.Button, {
                        type: "submit",
                        disabled: !A,
                        children:
                          null == n
                            ? C.default.Messages.ADD
                            : C.default.Messages.SAVE,
                      }),
                      null != c &&
                        (0, a.jsx)(o.Button, {
                          look: o.Button.Looks.BLANK,
                          size: o.Button.Sizes.ICON,
                          className: R.deleteButton,
                          onClick: () => {
                            c(), _();
                          },
                          children: (0, a.jsx)(N.default, {
                            "aria-label": C.default.Messages.DELETE,
                          }),
                        }),
                    ],
                  }),
                  (0, a.jsx)(o.Button, {
                    look: o.Button.Looks.LINK,
                    color: o.Button.Colors.PRIMARY,
                    className: R.cancelButton,
                    onClick: _,
                    children: C.default.Messages.CANCEL,
                  }),
                ],
              }),
            ],
          }),
        });
      }
      function O(e) {
        let {
            guildId: t,
            omitChannelIds: s,
            initialData: n,
            onSave: r,
            onDelete: d,
            transitionState: u,
            onClose: c,
          } = e,
          [E, _] = l.useState(null == n ? void 0 : n.ref_id),
          I = (0, m.useUID)(),
          T = (0, a.jsxs)(a.Fragment, {
            children: [
              (0, a.jsx)(f.default, {
                messageType: f.HelpMessageTypes.WARNING,
                children:
                  C.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_BENEFIT_CHANNEL_MODAL_WARNING,
              }),
              (0, a.jsx)(S.default, { size: 24 }),
              (0, a.jsx)(o.FormSection, {
                title: C.default.Messages.CHANNEL,
                titleId: I,
                children: (0, a.jsx)(g.default, {
                  guildId: t,
                  value: E,
                  initialChannelId: null == n ? void 0 : n.ref_id,
                  omitChannelIds: s,
                  onChange: function (e) {
                    _(e);
                  },
                  "aria-labelledby": I,
                }),
              }),
            ],
          });
        return (0, a.jsx)(L, {
          guildId: t,
          initialData: n,
          benefitTypeInput: T,
          descriptionPlaceholder:
            C.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_BENEFIT_CHANNEL_DESCRIPTION_PLACEHOLDER,
          canSubmit: null != E,
          onSave: function (e) {
            i(null != E, "Cannot submit null channel"),
              r({ ...e, channelId: E });
          },
          transitionState: u,
          onClose: c,
          onDelete: d,
        });
      }
      function p(e) {
        var t;
        let {
            initialData: s,
            onSave: n,
            transitionState: r,
            onClose: d,
            onDelete: u,
            guildId: c,
          } = e,
          [E, _] = l.useState(
            null !== (t = null == s ? void 0 : s.name) && void 0 !== t ? t : ""
          ),
          I = (0, m.useUID)(),
          T = (0, a.jsx)(o.FormSection, {
            title:
              C.default.Messages
                .GUILD_ROLE_SUBSCRIPTION_BENEFIT_INTANGIBLE_NAME_TITLE,
            titleId: I,
            children: (0, a.jsx)(o.TextArea, {
              placeholder:
                C.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_BENEFIT_INTANGIBLE_NAME_TITLE,
              value: E,
              rows: 1,
              onChange: function (e) {
                _(e);
              },
              "aria-labelledby": I,
            }),
          });
        return (0, a.jsx)(L, {
          guildId: c,
          initialData: s,
          benefitTypeInput: T,
          descriptionPlaceholder:
            C.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_BENEFIT_INTANGIBLE_DESCRIPTION_PLACEHOLDER,
          canSubmit: "" !== E,
          onSave: function (e) {
            i("" !== E, "Cannot submit empty name"), n({ ...e, name: E });
          },
          transitionState: r,
          onClose: d,
          onDelete: u,
        });
      }
    },
    363966: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          EditableBenefitsList: function () {
            return C;
          },
          AddBenefitCard: function () {
            return R;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("476042"),
        o = s("77078"),
        d = s("476765"),
        u = s("673220"),
        c = s("987772"),
        E = s("351825"),
        _ = s("577357"),
        I = s("757715"),
        T = s("484456"),
        f = s("559979"),
        S = s("752520"),
        m = s("498030"),
        N = s("782340"),
        g = s("154848");
      function h(e) {
        let {
            guildId: t,
            emojiId: s,
            emojiName: n,
            title: r,
            description: d,
            targetType: E,
            index: _,
            dndName: I,
            onEdit: f,
            onMove: S,
            disabled: h = !1,
          } = e,
          C = l.useRef(null),
          R = l.useRef(null),
          {
            drag: x,
            dragPreview: L,
            drop: O,
            isDragging: p,
          } = (0, m.default)(C, E, _, S);
        return (
          x(R),
          L(O(C)),
          (0, a.jsxs)("div", {
            ref: C,
            className: i(g.card, { [g.cardDragging]: p, [g.disabled]: h }),
            children: [
              (0, a.jsxs)("div", {
                className: g.emojiWrapper,
                children: [
                  (0, a.jsx)(T.default, {
                    guildId: t,
                    emojiId: s,
                    emojiName: n,
                    className: g.emoji,
                  }),
                  !h &&
                    (0, a.jsx)("div", {
                      ref: R,
                      className: g.dragIconWrapper,
                      "data-dnd-name": I,
                      children: (0, a.jsx)(u.default, {
                        className: g.dragIcon,
                      }),
                    }),
                ],
              }),
              (0, a.jsxs)("div", {
                className: g.cardText,
                children: [
                  (0, a.jsx)(o.Text, {
                    color: "header-primary",
                    variant: "text-md/semibold",
                    children: r,
                  }),
                  (0, a.jsx)(o.Text, {
                    color: "interactive-normal",
                    variant: "text-sm/normal",
                    children: d,
                  }),
                ],
              }),
              (0, a.jsx)("div", {
                className: g.cardActions,
                children:
                  !h &&
                  (0, a.jsx)(o.Clickable, {
                    className: g.cardActionButton,
                    onClick: h ? void 0 : f,
                    "aria-label":
                      N.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_BENEFIT_EDIT_ARIA_LABEL,
                    "aria-disabled": h,
                    children: (0, a.jsx)(c.default, {
                      className: g.cardActionButtonIcon,
                    }),
                  }),
              }),
            ],
          })
        );
      }
      function C(e) {
        let { benefits: t, onEdit: s, onMove: n, guildId: o } = e,
          u = (0, d.useUID)(),
          { isDragging: c } = (0, r.useDragLayer)(e => ({
            isDragging: e.getItemType() === u,
          })),
          E = (0, I.useRoleSubscriptionSettingsDisabled)();
        return 0 === t.length
          ? null
          : (0, a.jsx)("div", {
              className: i(g.container, { [g.isDragging]: c }),
              children: t.map((e, t) =>
                (0, a.jsxs)(
                  l.Fragment,
                  {
                    children: [
                      t > 0
                        ? (0, a.jsx)("div", { className: g.divider })
                        : null,
                      (0, a.jsx)(h, {
                        guildId: o,
                        emojiId: e.emoji_id,
                        emojiName: e.emoji_name,
                        title: (0, f.default)(e),
                        description: e.description,
                        targetType: u,
                        index: t,
                        dndName: (0, S.default)(e),
                        onEdit: () => s(t),
                        onMove: n,
                        disabled: E,
                      }),
                    ],
                  },
                  (0, _.getBenefitKey)(e)
                )
              ),
            });
      }
      function R(e) {
        let { onClick: t, children: s, disabled: l = !1 } = e;
        return (0, a.jsx)(o.Clickable, {
          className: g.container,
          onClick: l ? void 0 : t,
          "aria-disabled": l,
          children: (0, a.jsxs)("div", {
            className: i(g.card, g.addBenefit, { [g.disabled]: l }),
            children: [
              (0, a.jsx)("div", {
                className: g.emojiWrapper,
                children: (0, a.jsx)(E.default, {
                  className: g.addBenefitIcon,
                }),
              }),
              (0, a.jsx)("div", {
                className: g.cardText,
                children: (0, a.jsx)(o.Text, {
                  color: "header-primary",
                  variant: "text-md/normal",
                  children: s,
                }),
              }),
            ],
          }),
        });
      }
    },
    851015: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          EmojiList: function () {
            return I;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("414456"),
        n = s.n(l),
        i = s("77078"),
        r = s("228220"),
        o = s("315102"),
        d = s("757715"),
        u = s("41391"),
        c = s("782340"),
        E = s("367134");
      function _(e) {
        let { emoji: t, onRemoveEmoji: s, disabled: l = !1 } = e,
          d = o.default.getEmojiURL({
            id: t.id,
            animated: t.animated,
            size: 32,
          });
        return (0, a.jsxs)("div", {
          className: n(E.emojiRow, { [E.disabled]: l }),
          children: [
            (0, a.jsx)("img", { className: E.emojiImage, src: d, alt: t.name }),
            (0, a.jsx)(i.Text, {
              color: "header-primary",
              variant: "text-md/medium",
              className: E.emojiAlias,
              children: t.name,
            }),
            (0, a.jsx)(i.Button, {
              look: i.Button.Looks.BLANK,
              size: i.Button.Sizes.ICON,
              className: E.deleteButton,
              onClick: () => s(t),
              "aria-label":
                c.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_EMOJI_REMOVE_BUTTON_ARIA_LABEL,
              disabled: l,
              children: (0, a.jsx)(r.default, { className: E.trashIcon }),
            }),
          ],
        });
      }
      function I(e) {
        let { tierEmojiIds: t, guildId: s, onRemoveEmoji: l } = e,
          n = (0, u.default)(s),
          i = null != t ? n.filter(e => t.has(e.id)) : [],
          r = (0, d.useRoleSubscriptionSettingsDisabled)();
        return (0, a.jsx)("div", {
          className: E.container,
          children: i.map(e =>
            (0, a.jsx)(
              _,
              { emoji: e, onRemoveEmoji: () => l(e), disabled: r },
              e.id
            )
          ),
        });
      }
    },
    922835: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return N;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("446674"),
        i = s("151426"),
        r = s("77078"),
        o = s("986399"),
        d = s("10641"),
        u = s("900938"),
        c = s("490683"),
        E = s("432153"),
        _ = s("505705"),
        I = s("179234"),
        T = s("459662"),
        f = s("49111"),
        S = s("988268"),
        m = s("105680");
      function N() {
        let e;
        let t = (0, n.useStateFromStores)([u.default], () =>
            u.default.getGuild()
          ),
          { application: s, loading: N } = (0, o.default)(
            null == t ? void 0 : t.id,
            S.ApplicationTypes.GUILD_ROLE_SUBSCRIPTIONS
          ),
          g = l.useRef(null),
          h = (0, c.default)(null != t ? t : void 0);
        l.useEffect(() => {
          null != t &&
            (0, E.isEligibleForNewBadge)(t) &&
            (0, d.markDismissibleContentAsDismissed)(
              i.DismissibleContent
                .SERVER_SUBSCRIPTION_SETTINGS_NEW_BADGE_TIER_TEMPLATE
            );
        }, [t]);
        let C =
          (null == t
            ? void 0
            : t.hasFeature(f.GuildFeatures.CREATOR_MONETIZABLE)) === !1 &&
          (null == t
            ? void 0
            : t.hasFeature(f.GuildFeatures.CREATOR_MONETIZABLE_PROVISIONAL)) ===
            !1;
        return (
          (e =
            null == t || N
              ? (0, a.jsx)(r.Spinner, {})
              : null != h
                ? (0, a.jsx)(I.default, { guild: t, config: h })
                : C
                  ? (0, a.jsx)(T.default, { guild: t })
                  : (0, a.jsx)(_.default, { guild: t, application: s })),
          (0, a.jsx)("div", {
            className: m.settingsColumn,
            children: (0, a.jsx)("div", {
              className: m.settingsContainer,
              children: (0, a.jsx)(r.ScrollerAuto, {
                className: m.settingsScroller,
                children: (0, a.jsx)("main", {
                  ref: g,
                  className: m.settingsContent,
                  children: (0, a.jsx)(r.FocusRingScope, {
                    containerRef: g,
                    children: e,
                  }),
                }),
              }),
            }),
          })
        );
      }
    },
    412939: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return y;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("627445"),
        o = s.n(r),
        d = s("917351"),
        u = s.n(d),
        c = s("775560"),
        E = s("266491"),
        _ = s("769846"),
        I = s("77078"),
        T = s("45299"),
        f = s("731898"),
        S = s("608684"),
        m = s("965397"),
        N = s("191814"),
        g = s("476765"),
        h = s("950603"),
        C = s("593195"),
        R = s("178837"),
        x = s("271560"),
        L = s("159885"),
        O = s("837008"),
        p = s("757715"),
        A = s("620199"),
        M = s("7370"),
        D = s("395905"),
        v = s("677795"),
        G = s("874146"),
        j = s("782340"),
        U = s("518891");
      let P = (0, L.cssValueToNumber)(
        _.default.GUILD_SETTINGS_ROLE_SUBSCRIPTIONS_OVERVIEW_SETTINGS_MAX_WIDTH
      );
      function b() {
        return [
          {
            name: j.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_FORMAT_SOME_CHANNELS_NAME,
            desc: j.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_FORMAT_SOME_CHANNELS_DESCRIPTION,
            value: v.GuildRoleSubscriptionFormat.SOME_CHANNELS,
            icon: C.default,
          },
          {
            name: j.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_FORMAT_ALL_CHANNELS_NAME,
            desc: j.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_FORMAT_ALL_CHANNELS_DESCRIPTION,
            value: v.GuildRoleSubscriptionFormat.ALL_CHANNELS,
            icon: R.default,
          },
        ];
      }
      function B(e) {
        let {
            value: t,
            "aria-labelledby": s,
            onChange: n,
            disabled: r = !1,
          } = e,
          { ref: o, width: d } = (0, f.default)(),
          u = (0, c.useLazyValue)(b),
          E = l.useMemo(
            () =>
              u.map(e => ({
                ...e,
                icon: function () {
                  let { icon: t } = e;
                  return (0, a.jsx)("div", {
                    className: U.formatRadioIconWrapper,
                    children: (0, a.jsx)(t, { className: U.formatRadioIcon }),
                  });
                },
                radioBarClassName: U.formatOptionRadioBar,
                radioItemIconClassName: U.formatOptionRadioItemIcon,
              })),
            [u]
          ),
          _ = null != d && d >= 400;
        return (0, a.jsx)("div", {
          ref: o,
          children: (0, a.jsx)(I.RadioGroup, {
            options: E,
            value: t,
            orientation: _ ? "horizontal" : "vertical",
            size: I.RadioGroup.Sizes.NONE,
            className: i({ [U.radioGroupHorizontal]: _ }),
            radioItemClassName: U.formatOptionRadioItem,
            onChange: e => {
              let { value: t } = e;
              return n(t);
            },
            "aria-labelledby": s,
            disabled: r,
          }),
        });
      }
      function y(e) {
        var t;
        let { guild: s, isGuildProducts: n = !1 } = e,
          { format: i } = (0, M.default)(s.id),
          r = (0, O.useSubscriptionsSettings)(s.id),
          d = l.useCallback(() => {
            var e;
            return (null == r
              ? void 0
              : null === (e = r.cover_image_asset) || void 0 === e
                ? void 0
                : e.application_id) == null
              ? null
              : (0, x.getAssetURL)(
                  r.cover_image_asset.application_id,
                  r.cover_image_asset,
                  P
                );
          }, [r]),
          [c, _] = l.useState(i),
          [f, C] = l.useState(
            null !== (t = null == r ? void 0 : r.description) && void 0 !== t
              ? t
              : ""
          ),
          [R, L] = l.useState(d),
          [b, y] = l.useState(
            null == r ? void 0 : r.store_page_guild_products_default_sort
          ),
          [F, H] = l.useState(null == r ? void 0 : r.server_shop_tab_order),
          {
            loading: k,
            error: w,
            updateSubscriptionsSettings: V,
          } = (0, O.useUpdateSubscriptionsSettings)(),
          {
            imageCTA: Y,
            imageAriaLabel: W,
            setFilename: z,
          } = (0, A.default)(null == r ? void 0 : r.cover_image_asset),
          K = (0, g.useUID)(),
          Z = (0, g.useUID)(),
          X = (0, g.useUID)();
        function Q(e, t) {
          o(null != e, "Null value not allowed"), null != t && z(t.name), L(e);
        }
        let J = l.useMemo(() => {
            var e;
            return (
              (null != f &&
                f !==
                  (null !== (e = null == r ? void 0 : r.description) &&
                  void 0 !== e
                    ? e
                    : "")) ||
              (null == R ? void 0 : R.startsWith("data:")) === !0 ||
              c !== i ||
              (null == r
                ? void 0
                : r.store_page_guild_products_default_sort) !== b ||
              (null == r ? void 0 : r.server_shop_tab_order) !== F
            );
          }, [R, i, f, r, c, b, F]),
          q = null != f && "" !== f && null != R;
        l.useEffect(() => {
          var e;
          if (
            (null == r
              ? void 0
              : null === (e = r.cover_image_asset) || void 0 === e
                ? void 0
                : e.application_id) != null
          ) {
            let e = (0, x.getAssetURL)(
              r.cover_image_asset.application_id,
              r.cover_image_asset,
              P
            );
            L(e);
          }
        }, [null == r ? void 0 : r.cover_image_asset]);
        let $ = (0, p.useRoleSubscriptionSettingsDisabled)(),
          ee = l.useMemo(
            () =>
              G.DISPLAYED_SORT_OPTIONS.map(e => ({
                label: (0, G.getGuildProductSortOptionLabel)(e),
                value: e,
              })),
            []
          ),
          et = l.useMemo(
            () => [
              {
                label: j.default.Messages.GUILD_PRODUCTS_TITLE,
                value: G.ServerShopTabOrder.PRODUCTS_FIRST,
              },
              {
                label: j.default.Messages.GUILD_ROLE_SUBSCRIPTIONS_TITLE,
                value: G.ServerShopTabOrder.SUBS_FIRST,
              },
            ],
            []
          );
        return (0, a.jsxs)("div", {
          className: U.container,
          children: [
            null != w &&
              (0, a.jsxs)(a.Fragment, {
                children: [
                  (0, a.jsx)(D.default, { children: w.getAnyErrorMessage() }),
                  (0, a.jsx)(N.default, { size: 16 }),
                ],
              }),
            n
              ? null
              : (0, a.jsxs)(a.Fragment, {
                  children: [
                    (0, a.jsxs)(I.FormSection, {
                      title:
                        j.default.Messages.GUILD_ROLE_SUBSCRIPTION_FORMAT_TITLE,
                      titleId: K,
                      disabled: $,
                      children: [
                        (0, a.jsx)(I.FormText, {
                          type: I.FormText.Types.DESCRIPTION,
                          className: U.formDescription,
                          disabled: $,
                          children:
                            j.default.Messages
                              .GUILD_ROLE_SUBSCRIPTION_FORMAT_DESCRIPTION,
                        }),
                        (0, a.jsx)(B, {
                          value: c,
                          onChange: e => {
                            i !== e &&
                              e ===
                                v.GuildRoleSubscriptionFormat.ALL_CHANNELS &&
                              (0, I.openModal)(e =>
                                (0, a.jsx)(I.ConfirmModal, {
                                  ...e,
                                  header:
                                    j.default.Messages
                                      .GUILD_ROLE_SUBSCRIPTION_FORMAT_ALL_CHANNELS_DIALOG_TITLE,
                                  confirmText: j.default.Messages.GOT_IT,
                                  confirmButtonColor: I.Button.Colors.BRAND,
                                  children: (0, a.jsx)(I.Text, {
                                    variant: "text-md/normal",
                                    children:
                                      j.default.Messages
                                        .GUILD_ROLE_SUBSCRIPTION_FORMAT_ALL_CHANNELS_DIALOG_TEXT,
                                  }),
                                })
                              ),
                              _(e);
                          },
                          "aria-labelledby": K,
                          disabled: $,
                        }),
                      ],
                    }),
                    (0, a.jsx)(I.FormDivider, { className: U.divider }),
                  ],
                }),
            (0, a.jsx)(I.FormSection, {
              title:
                j.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_DESCRIPTION_TITLE,
              titleId: Z,
              disabled: $,
              children: (0, a.jsx)(I.TextArea, {
                placeholder: n
                  ? j.default.Messages
                      .GUILD_PRODUCT_SETUP_INFO_DESCRIPTION_PLACEHOLDER
                  : j.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_DESCRIPTION_PLACEHOLDER,
                maxLength: 1500,
                value: f,
                rows: 2,
                autosize: !0,
                onChange: C,
                "aria-labelledby": Z,
                disabled: $,
              }),
            }),
            (0, a.jsx)(I.FormDivider, { className: U.divider }),
            (0, a.jsxs)(I.FormSection, {
              title:
                j.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_TITLE,
              disabled: $,
              children: [
                (0, a.jsx)(I.FormText, {
                  type: I.FormText.Types.DESCRIPTION,
                  className: U.formDescription,
                  disabled: $,
                  children:
                    j.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_DESCRIPTION,
                }),
                (0, a.jsx)(S.default, {
                  image: R,
                  hint: Y,
                  showIcon: !0,
                  showRemoveButton: !1,
                  hideSize: !0,
                  className: U.coverImageUploader,
                  iconWrapperClassName: U.coverImageUploaderIconWrapper,
                  imageClassName: U.coverImageUploaderInner,
                  iconClassName: U.coverImageUploaderIcon,
                  onChange: Q,
                  "aria-label": W,
                  disabled: $,
                }),
                (0, a.jsx)(N.default, { size: 16 }),
                (0, a.jsx)(h.default, {
                  onChange: Q,
                  buttonCTA: Y,
                  "aria-label": W,
                  disabled: $,
                  look: I.Button.Looks.OUTLINED,
                  color: I.Button.Colors.PRIMARY,
                }),
              ],
            }),
            n
              ? (0, a.jsxs)(a.Fragment, {
                  children: [
                    (0, a.jsx)(I.FormDivider, { className: U.divider }),
                    (0, a.jsxs)(I.FormSection, {
                      title:
                        j.default.Messages
                          .CREATOR_MONETIZATION_SETTINGS_GUILD_PRODUCT_SORT_OPTION_TITLE,
                      titleId: X,
                      disabled: $,
                      children: [
                        (0, a.jsx)(I.FormText, {
                          type: I.FormText.Types.DESCRIPTION,
                          className: U.formDescription,
                          disabled: $,
                          children:
                            j.default.Messages
                              .CREATOR_MONETIZATION_SETTINGS_GUILD_PRODUCT_SORT_OPTION_DESCRIPTION,
                        }),
                        (0, a.jsx)(I.SingleSelect, {
                          value: b,
                          placeholder: j.default.Messages.SELECT,
                          options: ee,
                          onChange: e => y(e),
                        }),
                      ],
                    }),
                  ],
                })
              : null,
            et.length > 0 &&
              (0, a.jsxs)(a.Fragment, {
                children: [
                  (0, a.jsx)(I.FormDivider, { className: U.divider }),
                  (0, a.jsxs)(I.FormSection, {
                    title:
                      j.default.Messages
                        .CREATOR_MONETIZATION_SETTINGS_SERVER_SHOP_DEFAULT_TAB_OPTION_TITLE,
                    titleId: X,
                    disabled: $,
                    children: [
                      (0, a.jsx)(I.FormText, {
                        type: I.FormText.Types.DESCRIPTION,
                        className: U.formDescription,
                        disabled: $,
                        children:
                          j.default.Messages
                            .CREATOR_MONETIZATION_SETTINGS_SERVER_SHOP_DEFAULT_TAB_OPTION_DESCRIPTION,
                      }),
                      (0, a.jsx)(I.SingleSelect, {
                        value: F,
                        placeholder: j.default.Messages.SELECT,
                        options: et,
                        onChange: e => H(e),
                      }),
                    ],
                  }),
                ],
              }),
            (0, a.jsx)(E.TransitionGroup, {
              component: "div",
              className: U.contentRegion,
              children:
                J &&
                (0, a.jsx)(m.default, {
                  children: (0, a.jsx)(T.default, {
                    submitting: k,
                    disabled: !q,
                    onReset: () => {
                      var e;
                      _(i),
                        C(
                          null !== (e = null == r ? void 0 : r.description) &&
                            void 0 !== e
                            ? e
                            : ""
                        ),
                        L(d),
                        y(
                          null == r
                            ? void 0
                            : r.store_page_guild_products_default_sort
                        ),
                        H(null == r ? void 0 : r.server_shop_tab_order);
                    },
                    onSave: () => {
                      o(null != r, "Settings must be defined");
                      let e = {};
                      f !== r.description && (e.description = f),
                        null != R &&
                          R.startsWith("data:") &&
                          (e.cover_image = R),
                        c !== i &&
                          (e.full_server_gate =
                            c === v.GuildRoleSubscriptionFormat.ALL_CHANNELS),
                        b !== r.store_page_guild_products_default_sort &&
                          (e.store_page_guild_products_default_sort = b),
                        F !== r.server_shop_tab_order &&
                          (e.server_shop_tab_order = F),
                        !u.isEmpty(e) && V(s.id, e);
                    },
                    saveButtonTooltip: q
                      ? void 0
                      : j.default.Messages
                          .GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_FULL_OUT_ALL_INFO,
                  }),
                }),
            }),
          ],
        });
      }
    },
    451419: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return m;
          },
        }),
        s("222007"),
        s("881410");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("146606"),
        o = s("446674"),
        d = s("669491"),
        u = s("77078"),
        c = s("206230"),
        E = s("461380"),
        _ = s("578706"),
        I = s("677795"),
        T = s("782340"),
        f = s("602502");
      function S(e) {
        let { checked: t, children: s } = e;
        return (0, a.jsxs)("div", {
          className: f.row,
          children: [
            (0, a.jsx)(u.Text, {
              variant: "text-md/normal",
              color: "interactive-active",
              className: f.rowText,
              children: s,
            }),
            t
              ? (0, a.jsx)(_.default, {
                  backgroundColor: d.default.unsafe_rawColors.WHITE_500.css,
                  className: i(f.rowIcon, f.rowIconChecked),
                })
              : (0, a.jsx)("div", { className: i(f.rowIcon, f.rowIconEmpty) }),
          ],
        });
      }
      function m(e) {
        let { children: t } = e,
          [s, n] = l.useState(!1),
          i = (0, o.useStateFromStores)(
            [c.default],
            () => c.default.useReducedMotion
          ),
          d = t.flatMap(e => e.items.map(e => e.completed)),
          _ = d.filter(e => e).length / d.length,
          m = 1 === _,
          N = (0, r.useSpring)({
            width: "".concat(100 * _, "%"),
            immediate: i,
          }),
          g = [
            T.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_LINK_PROMO_PAGE.format(
              {
                promoPageGuideUrl:
                  I.SERVER_SUBSCRIPTIONS_PREMIUM_CHECKLIST_EDUCATIONAL_URLS
                    .PROMO_PAGE_GUIDE,
              }
            ),
            T.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_LINK_CASE_STUDIES.format(
              {
                caseStudiesUrl:
                  I.SERVER_SUBSCRIPTIONS_PREMIUM_CHECKLIST_EDUCATIONAL_URLS
                    .CASE_STUDIES,
              }
            ),
            T.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_LINK_SUBSCRIPTION_OFFERING.format(
              {
                subscriptionOfferingGuideUrl:
                  I.SERVER_SUBSCRIPTIONS_PREMIUM_CHECKLIST_EDUCATIONAL_URLS
                    .SUBSCRIPTION_OFFERING_GUIDE,
              }
            ),
            T.default.Messages.GUILD_ROLE_SUBSCRIPTION_CHECKLIST_LINK_TIER_STRUCTURE.format(
              {
                tierStructureGuideUrl:
                  I.SERVER_SUBSCRIPTIONS_PREMIUM_CHECKLIST_EDUCATIONAL_URLS
                    .TIER_STRUCTURE_GUIDE,
              }
            ),
          ],
          h = s
            ? null
            : (0, a.jsxs)(a.Fragment, {
                children: [
                  !m &&
                    t.map((e, t) => {
                      let { title: s, items: n } = e;
                      return (0, a.jsxs)(
                        l.Fragment,
                        {
                          children: [
                            t > 0 &&
                              (0, a.jsx)(u.FormDivider, {
                                className: f.divider,
                              }),
                            (0, a.jsx)(u.FormTitle, {
                              className: f.categoryTitle,
                              children: s,
                            }),
                            n.map((e, t) =>
                              (0, a.jsx)(
                                S,
                                {
                                  children: e.description,
                                  checked: e.completed,
                                },
                                t
                              )
                            ),
                          ],
                        },
                        t
                      );
                    }),
                  (0, a.jsx)(u.FormDivider, { className: f.divider }),
                  (0, a.jsx)(u.FormTitle, {
                    className: f.categoryTitle,
                    children:
                      T.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_CHECKLIST_LEARN_MORE_SECTION_TITLE,
                  }),
                  g.map((e, t) =>
                    (0, a.jsx)(
                      "div",
                      {
                        className: f.row,
                        children: (0, a.jsx)(u.Text, {
                          variant: "text-md/normal",
                          children: e,
                        }),
                      },
                      t
                    )
                  ),
                ],
              });
        return (0, a.jsx)("div", {
          className: f.checklist,
          children: (0, a.jsxs)("div", {
            className: f.container,
            children: [
              (0, a.jsxs)(u.Clickable, {
                className: f.headerBar,
                onClick: () => n(e => !e),
                children: [
                  (0, a.jsx)(u.Heading, {
                    variant: "heading-md/semibold",
                    className: f.headerText,
                    children:
                      T.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_CHECKLIST_HEADER,
                  }),
                  (0, a.jsx)(E.default, {
                    direction: s
                      ? E.default.Directions.DOWN
                      : E.default.Directions.UP,
                    className: f.headerCaret,
                  }),
                ],
              }),
              !m &&
                (0, a.jsx)("div", {
                  className: f.progressBarOuter,
                  children: (0, a.jsx)(r.animated.div, {
                    className: f.progressBarInner,
                    style: N,
                  }),
                }),
              h,
            ],
          }),
        });
      }
    },
    505705: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return y;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("446674"),
        n = s("77078"),
        i = s("97031"),
        r = s("283962"),
        o = s("592407"),
        d = s("900938"),
        u = s("479756"),
        c = s("507950"),
        E = s("393414"),
        _ = s("719887"),
        I = s("305961"),
        T = s("697218"),
        f = s("191814"),
        S = s("449008"),
        m = s("257869"),
        N = s("837008"),
        g = s("757715"),
        h = s("432153"),
        C = s("195367"),
        R = s("258984"),
        x = s("417186"),
        L = s("751886"),
        O = s("412939"),
        p = s("451419"),
        A = s("326127"),
        M = s("988449"),
        D = s("514377"),
        v = s("49111"),
        G = s("724210"),
        j = s("810367"),
        U = s("782340"),
        P = s("211426");
      function b(e) {
        let { application: t, guild: s } = e,
          n = (0, N.useSubscriptionsSettings)(s.id),
          i = (0, N.useSubscriptionListingsForGuild)(s.id),
          r = i.some(
            e =>
              null != e.name &&
              null != e.subscription_plans[0] &&
              null != e.description &&
              null != e.image_asset
          ),
          o = (0, l.useStateFromStores)([I.default], () =>
            I.default.getRoles(s.id)
          ),
          d = i.map(e => o[e.role_id]),
          u = d.some(e => null != e && 0 !== e.color),
          c = i.some(e => e.role_benefits.benefits.length > 0),
          E =
            null != t &&
            s.hasFeature(v.GuildFeatures.ROLE_SUBSCRIPTIONS_ENABLED),
          _ = [
            {
              title:
                U.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_PAYMENT,
              items: [
                {
                  description:
                    U.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_CHECKLIST_PAYMENT_ENABLE,
                  completed: E,
                },
              ],
            },
            {
              title:
                U.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_BASIC_INFO,
              items: [
                {
                  description:
                    U.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_CHECKLIST_INFO_FORMAT,
                  completed: !0,
                },
                {
                  description:
                    U.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_CHECKLIST_INFO_DESCRIPTION,
                  completed:
                    (null == n ? void 0 : n.description) != null &&
                    "" !== n.description,
                },
                {
                  description:
                    U.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_CHECKLIST_INFO_COVER_IMAGE,
                  completed: (null == n ? void 0 : n.cover_image_asset) != null,
                },
              ],
            },
            {
              title:
                U.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_TIERS,
              items: [
                {
                  description:
                    U.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_CHECKLIST_TIER_BASICS,
                  completed: r,
                },
                {
                  description:
                    U.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_CHECKLIST_TIER_FLAIR,
                  completed: u,
                },
                {
                  description:
                    U.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_CHECKLIST_TIER_PERKS,
                  completed: c,
                },
              ],
            },
          ];
        return (0, a.jsx)(p.default, { children: _ });
      }
      function B(e) {
        let { application: t } = e,
          { teams: s } = (0, _.default)({ refreshOnDepChange: !1 }),
          l = s.find(e => {
            var s;
            return (
              e.id ===
              (null == t
                ? void 0
                : null === (s = t.team) || void 0 === s
                  ? void 0
                  : s.id)
            );
          }),
          n = [
            j.PayoutAccountStatuses.ACTION_REQUIRED,
            j.PayoutAccountStatuses.BLOCKED,
            j.PayoutAccountStatuses.SUSPENDED,
          ];
        return (null == l ? void 0 : l.payout_account_status) != null &&
          n.includes(null == l ? void 0 : l.payout_account_status)
          ? (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsx)(f.default, { size: 16 }),
                (0, a.jsx)(x.default, {
                  children:
                    U.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYOUTS_PROBLEM_WARNING.format(
                      {
                        url: v.MarketingURLs.DEVELOPER_PORTAL_PAYOUT_SETTINGS(
                          l.id
                        ),
                      }
                    ),
                }),
                (0, a.jsx)(f.default, { size: 16 }),
              ],
            })
          : null;
      }
      function y(e) {
        let t,
          { guild: s, application: n } = e,
          i = (0, l.useStateFromStores)(
            [d.default],
            () => d.default.getProps().subsection
          ),
          o =
            null != n &&
            s.hasFeature(v.GuildFeatures.ROLE_SUBSCRIPTIONS_ENABLED);
        return (
          (0, r.useNewOwnerOnboardingRequired)(s),
          (t = o
            ? (function (e) {
                if (e === v.GuildSettingsSubsections.ROLE_SUBSCRIPTION_EMOJI)
                  return M.TabBarSection.EMOJIS;
                return M.TabBarSection.TIERS;
              })(i)
            : M.TabBarSection.PAYMENT),
          (0, a.jsx)(m.GroupListingsFetchContextProvider, {
            guildId: s.id,
            refetchOnMount: !0,
            children: (0, a.jsx)(
              g.RoleSubscriptionSettingsDisabledContextProvider,
              {
                guildId: s.id,
                children: (0, a.jsx)(M.TabBarContextProvider, {
                  initialTab: t,
                  children: (0, a.jsx)(F, { guild: s, application: n }),
                }),
              }
            ),
          })
        );
      }
      function F(e) {
        let t,
          { guild: s, application: r } = e,
          d =
            null != r &&
            s.hasFeature(v.GuildFeatures.ROLE_SUBSCRIPTIONS_ENABLED),
          { currentTab: _, setCurrentTab: f } = (0, M.useTabBarState)(),
          N = (0, m.useGroupListingsFetchContext)(),
          g = (0, l.useStateFromStores)([T.default], () =>
            T.default.getCurrentUser()
          ),
          x = (0, C.default)(s.id),
          p = s.isOwner(g),
          j = () => {
            let e = I.default.getRole(s.id, s.getEveryoneRoleId());
            if (null == e) return;
            o.default.close();
            let t = { [e.id]: e };
            (0, u.startImpersonating)(s.id, {
              type: c.ImpersonateType.SERVER_SHOP,
              roles: t,
              initialTab: "role_subscriptions",
              returnToSection: v.GuildSettingsSections.ROLE_SUBSCRIPTIONS,
            }),
              (0, h.announceCreateTemplateChannels)(s.id),
              (0, E.transitionTo)(
                v.Routes.CHANNEL(s.id, G.StaticChannelRoute.ROLE_SUBSCRIPTIONS)
              );
          };
        if (!N) return (0, a.jsx)(n.Spinner, {});
        switch (_) {
          case M.TabBarSection.BASIC_INFO:
            t = (0, a.jsx)(O.default, { guild: s });
            break;
          case M.TabBarSection.TIERS:
            t = (0, a.jsx)(A.default, { guildId: s.id });
            break;
          case M.TabBarSection.PAYMENT:
            t = (0, a.jsx)(L.default, { guild: s });
            break;
          case M.TabBarSection.EMOJIS:
            t = (0, a.jsx)(D.default, { guild: s });
            break;
          default:
            (0, S.assertNever)(_);
        }
        return (0, a.jsxs)("div", {
          className: P.container,
          children: [
            (0, a.jsxs)("div", {
              className: P.mainContent,
              children: [
                (0, a.jsx)(n.FormTitle, {
                  tag: "h1",
                  children: U.default.Messages.GUILD_ROLE_SUBSCRIPTIONS_TITLE,
                }),
                (0, a.jsx)(n.FormText, {
                  type: n.FormText.Types.DESCRIPTION,
                  children:
                    U.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETTINGS_DESCRIPTION,
                }),
                (0, a.jsx)(R.default, { guild: s }),
                d && (0, a.jsx)(B, { application: r }),
                (0, a.jsxs)("div", {
                  className: P.tabBarContainer,
                  children: [
                    (0, a.jsxs)(n.TabBar, {
                      className: P.tabBar,
                      "aria-label": U.default.Messages.OPTIONS,
                      selectedItem: _,
                      type: "top",
                      look: "brand",
                      onItemSelect: f,
                      children: [
                        (0, a.jsx)(i.default, {
                          id: M.TabBarSection.BASIC_INFO,
                          disabledTooltip:
                            U.default.Messages
                              .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_BASIC_INFO_NEEDS_APPLICATION,
                          disabled: !d,
                          children:
                            U.default.Messages
                              .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_BASIC_INFO,
                        }),
                        (0, a.jsx)(i.default, {
                          id: M.TabBarSection.TIERS,
                          disabledTooltip:
                            U.default.Messages
                              .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_BASIC_INFO_NEEDS_APPLICATION,
                          disabled: !d,
                          children:
                            U.default.Messages
                              .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_TIERS,
                        }),
                        (0, a.jsx)(i.default, {
                          id: M.TabBarSection.EMOJIS,
                          disabledTooltip:
                            U.default.Messages
                              .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_BASIC_INFO_NEEDS_APPLICATION,
                          disabled: !d,
                          children:
                            U.default.Messages
                              .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_EMOJI,
                        }),
                        p
                          ? (0, a.jsx)(n.TabBar.Item, {
                              className: P.tabBarItem,
                              id: M.TabBarSection.PAYMENT,
                              children:
                                U.default.Messages
                                  .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_PAYMENT,
                            })
                          : null,
                      ],
                    }),
                    d &&
                      (0, a.jsx)("div", {
                        className: P.previewButton,
                        children: (0, a.jsx)(n.Tooltip, {
                          text: U.default.Messages
                            .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_PREVIEW_DISABLED,
                          children: e => {
                            let { onMouseEnter: t, onMouseLeave: s } = e;
                            return (0, a.jsx)(n.Button, {
                              disabled: x,
                              onMouseEnter: x ? t : void 0,
                              onMouseLeave: x ? s : void 0,
                              onClick: j,
                              color: n.Button.Colors.PRIMARY,
                              size: n.Button.Sizes.SMALL,
                              grow: !x,
                              look: n.Button.Looks.OUTLINED,
                              className: P.previewButton,
                              children:
                                U.default.Messages
                                  .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_PREVIEW,
                            });
                          },
                        }),
                      }),
                  ],
                }),
                t,
              ],
            }),
            (0, a.jsx)(b, { application: r, guild: s }),
          ],
        });
      }
    },
    326127: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return M;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("917351"),
        o = s("65597"),
        d = s("266491"),
        u = s("77078"),
        c = s("45299"),
        E = s("900938"),
        _ = s("965397"),
        I = s("191814"),
        T = s("351825"),
        f = s("858560"),
        S = s("808388"),
        m = s("837008"),
        N = s("719726"),
        g = s("757715"),
        h = s("167109"),
        C = s("172589"),
        R = s("49111"),
        x = s("782340"),
        L = s("549360");
      let O = "guild-role-subscription-tier-template-selector",
        p = e => {
          let [t, s] = l.useState(!0),
            [a, n] = l.useState();
          return (
            l.useEffect(() => {
              s(!0),
                (0, N.getPriceTiers)(e).then(e => {
                  n(e), s(!1);
                });
            }, [e]),
            { loading: t, priceTiers: a }
          );
        };
      function A(e) {
        let { guildId: t, priceTiers: n, groupListingId: I } = e,
          N = (0, m.useSubscriptionListingsForGroup)(I),
          {
            editStateIds: p,
            addNewEditStateId: A,
            addNewEditStateFromTemplate: M,
            removeEditStateId: D,
          } = h.useEditStateIds(I, t, { includeSoftDeleted: !0 }),
          [v, G] = l.useState({}),
          j = l.useMemo(() => {
            let e = p.map(e => {
              var t;
              return null !== (t = v[e]) && void 0 !== t ? t : e;
            });
            return (0, r.uniq)(e);
          }, [p, v]),
          U = (e, t) => {
            G(s => ({ ...s, [e]: t }));
          },
          P = (0, S.useGuildEligibleForTierTemplates)(t),
          b = (0, S.useUserEligibleForTierTemplates)(),
          B = l.useCallback(() => {
            b &&
              f.GuildRoleSubscriptionsTierTemplatesExperiment.trackExposure({
                guildId: t,
                location: "b2d9de_1",
              }),
              b && P
                ? (0, u.openModalLazy)(
                    async () => {
                      let { default: e } = await s
                        .el("183424")
                        .then(s.bind(s, "183424"));
                      return s =>
                        (0, a.jsx)(e, {
                          ...s,
                          guildId: t,
                          addNewEditStateFromTemplate: M,
                          addNewEditStateFromScratch: A,
                          priceTiers: n,
                        });
                    },
                    { modalKey: O }
                  )
                : A();
          }, [t, M, A, n, b, P]),
          y = h.useHasChangesForEditStateIds(j),
          F = l.useCallback(() => j.forEach(h.clearEditState), [j]),
          H = (0, g.useRoleSubscriptionSettingsDisabled)(),
          k = (0, o.default)(
            [E.default],
            () => E.default.getProps().subsection
          );
        return (
          l.useEffect(
            () => (
              k ===
                R.GuildSettingsSubsections.ROLE_SUBSCRIPTION_TIER_TEMPLATE &&
                B(),
              () => {
                (0, u.closeModal)(O);
              }
            ),
            [k, B]
          ),
          (0, a.jsxs)(a.Fragment, {
            children: [
              (0, a.jsxs)("div", {
                className: L.groupListings,
                children: [
                  j.map(e =>
                    (0, a.jsx)(
                      C.default,
                      {
                        guildId: t,
                        initialEditStateId: e,
                        allSubscriptionListings: N,
                        priceTiers: n,
                        groupListingId: I,
                        onDeleteEditState: () => D(e),
                        onBeforeDispatchNewListing: t => U(t.id, e),
                        onAfterDispatchNewListing: () => D(e),
                      },
                      e
                    )
                  ),
                  (0, a.jsxs)(u.Clickable, {
                    onClick: H ? void 0 : B,
                    className: i(L.createTierButton, { [L.disabled]: H }),
                    "aria-disabled": H,
                    children: [
                      (0, a.jsx)(T.default, { className: L.createTierIcon }),
                      (0, a.jsx)(u.Text, {
                        variant: "text-md/normal",
                        color: "interactive-active",
                        children:
                          x.default.Messages
                            .GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIER_CARD_CREATE,
                      }),
                    ],
                  }),
                ],
              }),
              (0, a.jsx)(d.TransitionGroup, {
                component: "div",
                className: L.contentRegion,
                children:
                  y &&
                  (0, a.jsx)(_.default, {
                    children: (0, a.jsx)(c.default, { onReset: F }),
                  }),
              }),
            ],
          })
        );
      }
      function M(e) {
        let { guildId: t } = e,
          { priceTiers: s } = p(t),
          l = (0, m.useGroupListingsForGuild)(t),
          { maxTiers: n } = (0, S.useRoleSubscriptionMaxTiersExperiment)(t),
          i = l.map(e => e.id);
        return (0, a.jsxs)(u.FormSection, {
          title:
            x.default.Messages.GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIERS_TAB_TITLE,
          className: L.container,
          children: [
            (0, a.jsx)(u.FormText, {
              type: u.FormText.Types.DESCRIPTION,
              children:
                x.default.Messages.GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIERS_TAB_DESCRIPTION.format(
                  { maxTiers: n }
                ),
            }),
            (0, a.jsx)(I.default, { size: 16 }),
            (0, a.jsx)(A, { priceTiers: s, guildId: t, groupListingId: i[0] }),
          ],
        });
      }
    },
    46166: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return b;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("627445"),
        o = s.n(r),
        d = s("917351"),
        u = s.n(d),
        c = s("446674"),
        E = s("669491"),
        _ = s("266491"),
        I = s("77078"),
        T = s("913801"),
        f = s("45299"),
        S = s("545158"),
        m = s("716241"),
        N = s("465869"),
        g = s("900938"),
        h = s("973262"),
        C = s("965397"),
        R = s("578706"),
        x = s("781896"),
        L = s("599110"),
        O = s("257869"),
        p = s("837008"),
        A = s("49111"),
        M = s("782340"),
        D = s("64522");
      let v = [
          14361481, 12200937, 8804082, 6576370, 5335282, 2652110, 2128781,
          2196594, 4752414, 13064760, 13058360, 12401e3, 12933021, 5659039,
          4092591, 5868359, 6586142, 8876063, 8484432, 9979976, 5269106,
          3421236,
        ],
        G =
          /^(https?:\/\/)?(?:m\.|www\.)?(youtu\.be|youtube\.com)\/(embed\/|v\/|watch\?v=|watch\?.+&v=)?((\w|-){11})(?:\S+)?$/,
        j = v[4],
        U = e => {
          var t, s;
          let { guild: n, canEnable: r } = e,
            d = (0, p.useSubscriptionsSettings)(n.id),
            { loading: c, updateSubscriptionsSettings: g } = (0,
            p.useUpdateSubscriptionsSettings)(),
            [O, U] = l.useState(
              n.hasFeature(A.GuildFeatures.CREATOR_STORE_PAGE)
            ),
            [P, b] = l.useState(
              null !== (t = null == d ? void 0 : d.store_page_primary_color) &&
                void 0 !== t
                ? t
                : j
            ),
            [B, y] = l.useState(null == d ? void 0 : d.store_page_trailer_url),
            F = null == B || null != B.match(G),
            [H, k] = l.useState(
              null !==
                (s = null == d ? void 0 : d.store_page_show_subscriber_count) &&
                void 0 !== s &&
                s
            ),
            w = l.useRef(null == d ? void 0 : d.store_page_slug).current,
            V =
              O !== n.hasFeature(A.GuildFeatures.CREATOR_STORE_PAGE) ||
              ((null == d ? void 0 : d.store_page_primary_color) == null &&
                P !== j) ||
              ((null == d ? void 0 : d.store_page_primary_color) != null &&
                P !== (null == d ? void 0 : d.store_page_primary_color)) ||
              B !== (null == d ? void 0 : d.store_page_trailer_url) ||
              (null != H &&
                H !==
                  (null == d ? void 0 : d.store_page_show_subscriber_count)),
            Y = async () => {
              o(null != d, "Settings must be defined");
              let e = {};
              O !== n.hasFeature(A.GuildFeatures.CREATOR_STORE_PAGE) &&
                (e.store_page_enabled = O),
                (((null == d ? void 0 : d.store_page_primary_color) == null &&
                  P !== j) ||
                  ((null == d ? void 0 : d.store_page_primary_color) != null &&
                    P !== (null == d ? void 0 : d.store_page_primary_color))) &&
                  (e.store_page_primary_color = P),
                B !== (null == d ? void 0 : d.store_page_trailer_url) &&
                  (e.store_page_trailer_url = B),
                H !==
                  (null == d ? void 0 : d.store_page_show_subscriber_count) &&
                  (e.store_page_show_subscriber_count = H),
                !u.isEmpty(e) &&
                  (await g(n.id, e),
                  "store_page_enabled" in e &&
                    L.default.track(
                      A.AnalyticEvents
                        .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_TOGGLED,
                      {
                        enabled: O,
                        ...(0, m.collectGuildAnalyticsMetadata)(n.id),
                      }
                    ));
            },
            W = A.MarketingURLs.ROLE_SUBSCRIPTION_STORE_PAGE(w),
            z =
              null != B &&
              B === (null == d ? void 0 : d.store_page_trailer_url),
            { shouldRestrictUpdatingCreatorMonetizationSettings: K } = (0,
            N.useShouldRestrictUpdatingCreatorMonetizationSettings)(n.id),
            Z = K || !F;
          return (0, a.jsxs)("div", {
            children: [
              (0, a.jsx)(I.FormTitle, {
                tag: "h1",
                children:
                  M.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_TITLE,
              }),
              (0, a.jsx)(I.FormText, {
                type: I.FormText.Types.DESCRIPTION,
                children:
                  M.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_DESCRIPTION,
              }),
              (0, a.jsx)(I.FormSwitch, {
                className: D.enableSwitch,
                value: O,
                disabled: K || (!O && !r),
                tooltipNote:
                  O || r
                    ? void 0
                    : M.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_PRIMARY_TOGGLE_DISABLED_TOOLTIP,
                hideBorder: !0,
                onChange: e => U(e),
                children: (0, a.jsx)(I.Text, {
                  variant: "text-md/semibold",
                  color: "header-primary",
                  children:
                    M.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_ENABLE,
                }),
              }),
              (0, a.jsxs)(I.FormItem, {
                title:
                  M.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_PROMO_URL,
                disabled: K,
                children: [
                  (0, a.jsx)(T.default, {
                    value: W,
                    className: i({ [D.disabled]: K }),
                  }),
                  (0, a.jsx)(I.Button, {
                    onClick: () => (0, S.default)(W),
                    className: D.openPageButton,
                    disabled: K,
                    children:
                      M.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_GO_TO_PAGE,
                  }),
                ],
              }),
              (0, a.jsx)(I.FormDivider, { className: D.divider }),
              (0, a.jsxs)(I.FormItem, {
                title:
                  M.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_ACCENT_COLOR_TITLE,
                disabled: K,
                children: [
                  (0, a.jsx)(I.FormText, {
                    disabled: K,
                    children:
                      M.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_ACCENT_COLOR_DESCRIPTION,
                  }),
                  (0, a.jsxs)("div", {
                    className: D.accentColorContainer,
                    children: [
                      (0, a.jsx)(I.Button, {
                        onClick: () => null,
                        color: I.Button.Colors.CUSTOM,
                        style: {
                          backgroundColor: "#".concat(
                            P.toString(16).padStart(6, "0")
                          ),
                        },
                        className: D.buttonPreview,
                        disabled: K,
                        children:
                          M.default.Messages
                            .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_ACCENT_COLOR_BUTTON_PREVIEW,
                      }),
                      (0, a.jsx)(h.default, {
                        colors: v,
                        customColor: null,
                        defaultColor: j,
                        value: P,
                        onChange: e => b(e),
                        renderDefaultButton: () => null,
                        renderCustomButton: () => null,
                        colorContainerClassName: D.hideColorButtons,
                        disabled: K,
                      }),
                    ],
                  }),
                ],
              }),
              (0, a.jsx)(I.FormDivider, { className: D.divider }),
              (0, a.jsxs)(I.FormItem, {
                title:
                  M.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_TRAILER_TITLE,
                disabled: K,
                children: [
                  (0, a.jsx)(I.FormText, {
                    disabled: K,
                    children:
                      M.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_TRAILER_DESCRIPTION,
                  }),
                  (0, a.jsx)(I.TextInput, {
                    value: null != B ? B : void 0,
                    onChange: e => y("" === e ? null : e),
                    error: F
                      ? null
                      : M.default.Messages
                          .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_TRAILER_BAD_LINK,
                    placeholder:
                      M.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_TRAILER_PLACEHOLDER,
                    className: D.trailerInputWrapper,
                    inputClassName: i(D.trailerInput, {
                      [D.error]: !F,
                      [D.trailerInputWithCheckmark]: z || !F,
                    }),
                    prefixElement:
                      F &&
                      z &&
                      (0, a.jsx)(R.default, {
                        color: E.default.unsafe_rawColors.BRAND_500.css,
                        backgroundColor:
                          E.default.unsafe_rawColors.WHITE_500.css,
                        className: D.inputCheckmark,
                      }),
                    disabled: K,
                  }),
                ],
              }),
              (0, a.jsx)(I.FormDivider, { className: D.divider }),
              (0, a.jsxs)(I.FormItem, {
                title:
                  M.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_DISPLAY_OPTIONS_TITLE,
                disabled: K,
                children: [
                  (0, a.jsx)(I.FormText, {
                    disabled: K,
                    children:
                      M.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_DISPLAY_OPTIONS_DESCRIPTION,
                  }),
                  (0, a.jsx)(I.FormSwitch, {
                    className: D.premiumMemberCountSwitchContainer,
                    value: H,
                    hideBorder: !0,
                    onChange: e => k(e),
                    disabled: K,
                    children: (0, a.jsxs)("div", {
                      className: D.iconSwitchLabel,
                      children: [
                        (0, a.jsx)("div", {
                          className: D.iconContainer,
                          children: (0, a.jsx)(x.default, {
                            width: 28,
                            height: 28,
                            className: D.premiumMemberCountIcon,
                          }),
                        }),
                        (0, a.jsxs)("div", {
                          children: [
                            (0, a.jsx)(I.Text, {
                              variant: "text-md/medium",
                              color: "header-primary",
                              children:
                                M.default.Messages
                                  .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_DISPLAY_OPTIONS_PREMIUM_MEMBER_COUNT,
                            }),
                            (0, a.jsx)(I.Text, {
                              variant: "text-sm/normal",
                              color: "header-secondary",
                              children:
                                M.default.Messages
                                  .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_DISPLAY_OPTIONS_PREMIUM_MEMBER_COUNT_DESCRIPTION,
                            }),
                          ],
                        }),
                      ],
                    }),
                  }),
                ],
              }),
              (0, a.jsx)(_.TransitionGroup, {
                component: "div",
                className: D.contentRegion,
                children:
                  V &&
                  (0, a.jsx)(C.default, {
                    children: (0, a.jsx)(f.default, {
                      submitting: c,
                      onReset: () => {
                        var e, t;
                        U(n.hasFeature(A.GuildFeatures.CREATOR_STORE_PAGE)),
                          b(
                            null !==
                              (e =
                                null == d
                                  ? void 0
                                  : d.store_page_primary_color) && void 0 !== e
                              ? e
                              : j
                          ),
                          y(null == d ? void 0 : d.store_page_trailer_url),
                          k(
                            null !==
                              (t =
                                null == d
                                  ? void 0
                                  : d.store_page_show_subscriber_count) &&
                              void 0 !== t &&
                              t
                          );
                      },
                      onSave: Y,
                      disabled: Z,
                    }),
                  }),
              }),
            ],
          });
        };
      function P() {
        let e = (0, c.useStateFromStores)([g.default], () =>
            g.default.getGuild()
          ),
          t = (0, O.useGroupListingsFetchContext)(),
          s = (0, p.useSubscriptionListingsForGuild)(null == e ? void 0 : e.id),
          l = s.some(e => e.published);
        return null != e && t
          ? (0, a.jsx)(U, { guild: e, canEnable: l })
          : (0, a.jsx)(I.Spinner, {});
      }
      function b() {
        let e = (0, c.useStateFromStores)([g.default], () =>
          g.default.getGuild()
        );
        return (0, a.jsxs)(O.GroupListingsFetchContextProvider, {
          guildId: null == e ? void 0 : e.id,
          refetchOnMount: !0,
          children: [(0, a.jsx)(P, {}), ";"],
        });
      }
    },
    701973: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          ImportBenefitsFromSubscriptionListingModal: function () {
            return W;
          },
          ImportBenefitsFromRoleModal: function () {
            return Q;
          },
        }),
        s("222007"),
        s("881410");
      var a,
        l,
        n = s("37983"),
        i = s("884691"),
        r = s("414456"),
        o = s.n(r),
        d = s("775560"),
        u = s("316693"),
        c = s("509043"),
        E = s("446674"),
        _ = s("233736"),
        I = s("769846"),
        T = s("77078"),
        f = s("430568"),
        S = s("419830"),
        m = s("454273"),
        N = s("385976"),
        g = s("405645"),
        h = s("233069"),
        C = s("245997"),
        R = s("305961"),
        x = s("476765"),
        L = s("461380"),
        O = s("593195"),
        p = s("36694"),
        A = s("375352"),
        M = s("682344"),
        D = s("483093"),
        v = s("159885"),
        G = s("577357"),
        j = s("880993"),
        U = s("833531"),
        P = s("559979"),
        b = s("49111"),
        B = s("782340"),
        y = s("803161");
      let F = (0, x.uid)(),
        H = (0, x.uid)(),
        k = (0, v.cssValueToNumber)(
          I.default.IMPORT_BENEFITS_MODAL_ROLE_ICON_SIZE
        );
      function w(e) {
        var t;
        let { emojiId: s, emojiName: a, className: l } = e,
          i = (0, E.useStateFromStores)([N.default], () =>
            null != s ? N.default.getCustomEmojiById(s) : void 0
          );
        return (0, n.jsx)(f.default, {
          emojiId: s,
          emojiName: a,
          animated:
            null !== (t = null == i ? void 0 : i.animated) && void 0 !== t && t,
          className: l,
        });
      }
      function V(e) {
        let {
            icon: t,
            children: s,
            checked: a,
            disabled: l = !1,
            onChange: i,
          } = e,
          r = a || l;
        return (0, n.jsxs)("label", {
          className: o(y.row, { [y.checked]: r, [y.disabled]: l }),
          children: [
            (0, n.jsx)("div", { className: y.rowIconWrapper, children: t }),
            (0, n.jsx)("div", { className: y.rowText, children: s }),
            (0, n.jsxs)("div", {
              className: y.rowCheckbox,
              children: [
                (0, n.jsx)(T.FocusRing, {
                  children: (0, n.jsx)("input", {
                    type: "checkbox",
                    checked: r,
                    disabled: l,
                    className: y.checkboxInput,
                    onChange: function (e) {
                      i(e.target.checked);
                    },
                  }),
                }),
                (0, n.jsx)("div", {
                  className: y.checkboxDisplay,
                  children: (0, n.jsx)(p.default, {
                    className: y.checkboxIcon,
                    "aria-hidden": !0,
                  }),
                }),
              ],
            }),
          ],
        });
      }
      function Y(e) {
        let {
            title: t,
            selectAllText: s,
            benefits: a,
            dupeBenefits: l,
            selectedBenefits: i,
            onToggleBenefit: r,
          } = e,
          o = a.every(e => i.has(e));
        return a.length > 0
          ? (0, n.jsxs)(T.FormSection, {
              title: t,
              className: y.section,
              children: [
                a.length - l.size > 1 &&
                  (0, n.jsx)("div", {
                    className: y.list,
                    children: (0, n.jsx)(V, {
                      icon: (0, n.jsx)(A.default, { className: y.rowIcon }),
                      checked: o,
                      onChange: function (e) {
                        for (let t of a) !l.has(t) && r(t, e);
                      },
                      children: (0, n.jsx)(T.Text, {
                        color: "header-primary",
                        variant: "text-md/normal",
                        children: s,
                      }),
                    }),
                  }),
                (0, n.jsx)("div", {
                  className: y.list,
                  children: a.map(e =>
                    (0, n.jsxs)(
                      V,
                      {
                        icon: (0, n.jsx)(w, {
                          emojiId: e.emoji_id,
                          emojiName: e.emoji_name,
                          className: y.rowIcon,
                        }),
                        checked: i.has(e),
                        disabled: l.has(e),
                        onChange: t => r(e, t),
                        children: [
                          (0, n.jsx)(T.Text, {
                            color: "header-primary",
                            variant: "text-md/semibold",
                            children: (0, P.default)(e),
                          }),
                          (0, n.jsx)(T.Text, {
                            color: "interactive-normal",
                            variant: "text-sm/normal",
                            children: e.description,
                          }),
                        ],
                      },
                      (0, G.getBenefitKey)(e)
                    )
                  ),
                }),
              ],
            })
          : null;
      }
      function W(e) {
        let {
            transitionState: t,
            fromSubscriptionListing: s,
            existingChannelBenefits: a,
            existingIntangibleBenefits: l,
            onSubmit: r,
            onClose: o,
          } = e,
          d = s.role_benefits.benefits,
          [u, c] = i.useState(() => new Set(d)),
          E = i.useMemo(() => d.filter(G.isChannelBenefit), [d]),
          I = (0, U.default)(E),
          f = i.useMemo(() => d.filter(G.isIntangibleBenefit), [d]),
          S = i.useMemo(
            () => new Set(I.filter(e => a.some(t => t.ref_id === e.ref_id))),
            [I, a]
          ),
          m = i.useMemo(
            () => new Set(f.filter(e => l.some(t => (0, _.default)(e, t)))),
            [l, f]
          ),
          N = (0, x.useUID)();
        function g(e, t) {
          c(s => {
            let a = new Set(s);
            return t ? a.add(e) : a.delete(e), a;
          });
        }
        return (0, n.jsx)("form", {
          onSubmit: function (e) {
            e.preventDefault();
            let t = d.filter(e => u.has(e)),
              s = t.filter(G.isChannelBenefit).filter(e => !S.has(e)),
              a = t.filter(G.isIntangibleBenefit).filter(e => !m.has(e));
            r(s, a), o();
          },
          children: (0, n.jsxs)(T.ModalRoot, {
            transitionState: t,
            "aria-labelledby": N,
            children: [
              (0, n.jsxs)(T.ModalHeader, {
                children: [
                  (0, n.jsx)(T.Heading, {
                    id: N,
                    variant: "heading-md/semibold",
                    children:
                      B.default.Messages.GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_MODAL_HEADER.format(
                        { tierName: s.name }
                      ),
                  }),
                  (0, n.jsx)(T.ModalCloseButton, {
                    className: y.modalCloseButton,
                    onClick: o,
                  }),
                ],
              }),
              (0, n.jsxs)(T.ModalContent, {
                className: y.modalContent,
                children: [
                  (0, n.jsx)(Y, {
                    title:
                      B.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_SETUP_CHANNEL_BENEFITS_CHANNELS_TITLE,
                    selectAllText:
                      B.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_SELECT_ALL_CHANNEL_BENEFITS,
                    benefits: I,
                    dupeBenefits: S,
                    selectedBenefits: u,
                    onToggleBenefit: g,
                  }),
                  (0, n.jsx)(Y, {
                    title:
                      B.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_SETUP_INTANGIBLE_BENEFITS_TITLE,
                    selectAllText:
                      B.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_SELECT_ALL_INTANGIBLE_BENEFITS,
                    benefits: f,
                    dupeBenefits: m,
                    selectedBenefits: u,
                    onToggleBenefit: g,
                  }),
                ],
              }),
              (0, n.jsxs)(T.ModalFooter, {
                children: [
                  (0, n.jsx)(T.Button, {
                    type: "submit",
                    children:
                      B.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_CONFIRM_BUTTON,
                  }),
                  (0, n.jsx)(T.Button, {
                    look: T.Button.Looks.LINK,
                    color: T.Button.Colors.PRIMARY,
                    onClick: o,
                    children: B.default.Messages.CANCEL,
                  }),
                ],
              }),
            ],
          }),
        });
      }
      function z(e) {
        var t;
        let { guildId: s, role: a, channelCount: l, onSelect: i } = e,
          r = (0, g.useRoleIcon)({ guildId: s, roleId: a.id, size: k });
        return (0, n.jsxs)(T.Clickable, {
          className: y.roleRow,
          onClick: i,
          children: [
            (0, n.jsx)("div", {
              className: y.rowIconWrapper,
              children:
                null != r
                  ? (0, n.jsx)(D.default, { ...r })
                  : (0, n.jsx)(M.default, {
                      color:
                        null !== (t = a.colorString) && void 0 !== t
                          ? t
                          : (0, c.int2hex)(b.DEFAULT_ROLE_COLOR),
                      className: y.roleRowIconDefault,
                    }),
            }),
            (0, n.jsxs)("div", {
              className: y.rowText,
              children: [
                (0, n.jsx)(T.Text, {
                  color: "header-primary",
                  variant: "text-md/normal",
                  className: y.benefitTitle,
                  children: a.name,
                }),
                (0, n.jsx)(T.Text, {
                  color: "header-secondary",
                  variant: "text-sm/normal",
                  children: B.default.Messages.NUM_CHANNELS.format({ num: l }),
                }),
              ],
            }),
            (0, n.jsx)("div", {
              className: y.rowCheckbox,
              children: (0, n.jsx)(L.default, {
                direction: L.default.Directions.RIGHT,
              }),
            }),
          ],
        });
      }
      function K(e) {
        let { guild: t, onSelect: s } = e,
          a = (0, E.useStateFromStores)([R.default], () =>
            R.default.getRoles(t.id)
          ),
          l = (0, E.useStateFromStores)([C.default], () =>
            C.default.getCategories(t.id)
          ),
          r = i.useMemo(
            () =>
              l._categories.flatMap(e =>
                l[e.channel.id]
                  .filter(e => {
                    let { channel: t } = e;
                    return h.GUILD_NON_CATEGORY_CHANNEL_TYPES.has(t.type);
                  })
                  .map(e => {
                    let { channel: t } = e;
                    return t;
                  })
              ),
            [l]
          ),
          o = i.useMemo(
            () =>
              Object.values(a).flatMap(e => {
                var s;
                if (
                  (0, m.isEveryoneRoleId)(t.id, e.id) ||
                  (null === (s = e.tags) || void 0 === s
                    ? void 0
                    : s.subscription_listing_id) != null ||
                  u.default.hasAny(e.permissions, b.ElevatedPermissions)
                )
                  return [];
                let a = (0, j.default)(r, e).length;
                return a > 0 ? { role: e, channelCount: a } : [];
              }),
            [t, a, r]
          );
        return o.length > 0
          ? (0, n.jsx)("div", {
              className: y.list,
              children: o.map(e =>
                (0, n.jsx)(
                  z,
                  {
                    guildId: t.id,
                    role: e.role,
                    channelCount: e.channelCount,
                    onSelect: () => s(e.role),
                  },
                  e.role.id
                )
              ),
            })
          : (0, n.jsx)(T.Text, {
              variant: "text-md/normal",
              children:
                B.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_SELECT_ROLE_EMPTY,
            });
      }
      function Z(e) {
        let { onClose: t, guildId: s, onSelect: a } = e,
          l = (0, E.useStateFromStores)([R.default], () =>
            R.default.getGuild(s)
          );
        return null == l
          ? null
          : (0, n.jsxs)(n.Fragment, {
              children: [
                (0, n.jsxs)(T.ModalHeader, {
                  children: [
                    (0, n.jsx)(T.Heading, {
                      id: F,
                      variant: "heading-md/semibold",
                      children:
                        B.default.Messages
                          .GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_FROM_ROLE_MODAL_HEADER_1,
                    }),
                    (0, n.jsx)(T.ModalCloseButton, {
                      className: y.modalCloseButton,
                      onClick: t,
                    }),
                  ],
                }),
                (0, n.jsx)(T.ModalContent, {
                  className: y.modalContent,
                  children: (0, n.jsx)(K, { guild: l, onSelect: a }),
                }),
              ],
            });
      }
      function X(e) {
        let { onClose: t, guildId: s, role: a, onCancel: l, onImport: r } = e,
          o = i.useRef(a);
        null != a && (o.current = a);
        let u = null != a ? a : o.current,
          c = (0, d.useLazyValue)(() => {
            let e = C.default.getCategories(s);
            return e._categories.flatMap(t =>
              e[t.channel.id]
                .filter(e => {
                  let { channel: t } = e;
                  return h.GUILD_NON_CATEGORY_CHANNEL_TYPES.has(t.type);
                })
                .map(e => {
                  let { channel: t } = e;
                  return t;
                })
            );
          }),
          E = i.useMemo(() => (0, j.default)(c, u), [c, u]),
          [_, I] = i.useState(() => new Set(E.map(e => e.id)));
        function f(e, t) {
          I(s => {
            let a = new Set(s);
            return t ? a.add(e) : a.delete(e), a;
          });
        }
        return (0, n.jsxs)("form", {
          onSubmit: function (e) {
            e.preventDefault(), r(E.map(e => e.id).filter(e => _.has(e))), t();
          },
          className: y.slideForm,
          children: [
            (0, n.jsxs)(T.ModalHeader, {
              children: [
                (0, n.jsx)(T.Heading, {
                  id: H,
                  variant: "heading-md/semibold",
                  children:
                    B.default.Messages.GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_FROM_ROLE_MODAL_HEADER_2.format(
                      { roleName: u.name }
                    ),
                }),
                (0, n.jsx)(T.ModalCloseButton, {
                  className: y.modalCloseButton,
                  onClick: t,
                }),
              ],
            }),
            (0, n.jsxs)(T.ModalContent, {
              className: y.modalContent,
              children: [
                E.length > 1 &&
                  (0, n.jsx)("div", {
                    className: y.list,
                    children: (0, n.jsx)(V, {
                      icon: (0, n.jsx)(A.default, {}),
                      checked: _.size === E.length,
                      onChange: function (e) {
                        for (let t of E) f(t.id, e);
                      },
                      children: (0, n.jsx)(T.Text, {
                        color: "header-primary",
                        variant: "text-md/normal",
                        children:
                          B.default.Messages
                            .GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_SELECT_ALL_CHANNEL_BENEFITS,
                      }),
                    }),
                  }),
                (0, n.jsx)("div", {
                  className: y.list,
                  children: E.map(e => {
                    var t;
                    let s =
                      null !==
                        (t = (0, S.getSimpleChannelIconComponent)(e.type)) &&
                      void 0 !== t
                        ? t
                        : O.default;
                    return (0, n.jsx)(
                      V,
                      {
                        icon: (0, n.jsx)("div", {
                          className: y.rowIcon,
                          children: (0, n.jsx)(s, {
                            width: "100%",
                            height: "100%",
                          }),
                        }),
                        checked: _.has(e.id),
                        onChange: t => f(e.id, t),
                        children: (0, n.jsx)(T.Text, {
                          color: "header-primary",
                          variant: "text-md/normal",
                          className: y.benefitTitle,
                          children: e.name,
                        }),
                      },
                      e.id
                    );
                  }),
                }),
              ],
            }),
            (0, n.jsxs)(T.ModalFooter, {
              children: [
                (0, n.jsx)(T.Button, {
                  type: "submit",
                  children:
                    B.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_FROM_ROLE_CONFIRM_BUTTON,
                }),
                (0, n.jsx)(T.Button, {
                  look: T.Button.Looks.LINK,
                  color: T.Button.Colors.PRIMARY,
                  onClick: l,
                  children: B.default.Messages.CANCEL,
                }),
              ],
            }),
          ],
        });
      }
      function Q(e) {
        let { transitionState: t, guildId: s, onClose: a, onImport: l } = e,
          [r, o] = i.useState();
        return (0, n.jsx)(T.ModalRoot, {
          transitionState: t,
          "aria-labelledby": null == r ? F : H,
          children: (0, n.jsxs)(T.Slides, {
            contentDisplay: "flex",
            activeSlide: null == r ? 0 : 1,
            width: 440,
            children: [
              (0, n.jsx)(T.Slide, {
                id: 0,
                children: (0, n.jsx)(Z, {
                  onClose: a,
                  guildId: s,
                  onSelect: o,
                }),
              }),
              (0, n.jsx)(T.Slide, {
                id: 1,
                children: (0, n.jsx)(X, {
                  onClose: a,
                  guildId: s,
                  role: r,
                  onCancel: () => o(void 0),
                  onImport: l,
                }),
              }),
            ],
          }),
        });
      }
      ((l = a || (a = {}))[(l.SELECT_ROLE = 0)] = "SELECT_ROLE"),
        (l[(l.SELECT_CHANNELS = 1)] = "SELECT_CHANNELS");
    },
    958671: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return T;
          },
          ImportRoleCard: function () {
            return f;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("414456"),
        n = s.n(l),
        i = s("77078"),
        r = s("461380"),
        o = s("682344"),
        d = s("271560"),
        u = s("577357"),
        c = s("757715"),
        E = s("701973"),
        _ = s("782340"),
        I = s("936168");
      function T(e) {
        let {
            channelBenefits: t,
            intangibleBenefits: s,
            subscriptionListings: l,
            onImport: r,
          } = e,
          o = (0, c.useRoleSubscriptionSettingsDisabled)();
        return (0, a.jsx)("div", {
          className: I.container,
          children: l.map(e =>
            (0, a.jsxs)(
              "div",
              {
                className: I.row,
                children: [
                  (0, a.jsx)("img", {
                    alt: "",
                    src:
                      null == e.image_asset
                        ? void 0
                        : (0, d.getAssetURL)(
                            e.application_id,
                            e.image_asset,
                            512
                          ),
                    className: n(I.rowIcon, I.listingImage),
                  }),
                  (0, a.jsxs)("div", {
                    className: I.rowBody,
                    children: [
                      (0, a.jsx)(i.Text, {
                        variant: "text-md/normal",
                        color: "header-primary",
                        className: n(I.rowText, I.listingName),
                        children: e.name,
                      }),
                      (0, a.jsx)(i.Text, {
                        color: "header-secondary",
                        variant: "text-sm/normal",
                        children:
                          _.default.Messages.GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_NUM_BENEFITS.format(
                            {
                              channels: e.role_benefits.benefits.filter(
                                u.isChannelBenefit
                              ).length,
                              benefits: e.role_benefits.benefits.filter(
                                u.isIntangibleBenefit
                              ).length,
                            }
                          ),
                      }),
                    ],
                  }),
                  (0, a.jsx)(i.Button, {
                    look: i.Button.Looks.OUTLINED,
                    color: i.Button.Colors.PRIMARY,
                    onClick: () => {
                      var l;
                      return (
                        (l = e),
                        void (0, i.openModal)(e =>
                          (0, a.jsx)(
                            E.ImportBenefitsFromSubscriptionListingModal,
                            {
                              ...e,
                              fromSubscriptionListing: l,
                              existingChannelBenefits: t,
                              existingIntangibleBenefits: s,
                              onSubmit: r,
                            }
                          )
                        )
                      );
                    },
                    disabled: o,
                    children:
                      _.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_BUTTON,
                  }),
                ],
              },
              e.id
            )
          ),
        });
      }
      function f(e) {
        let { guildId: t, onImport: s, disabled: l = !1 } = e;
        return (0, a.jsxs)(i.Clickable, {
          className: n(I.importRoleCard, { [I.disabled]: l }),
          onClick: l
            ? void 0
            : function () {
                (0, i.openModal)(e =>
                  (0, a.jsx)(E.ImportBenefitsFromRoleModal, {
                    ...e,
                    guildId: t,
                    onImport: s,
                  })
                );
              },
          "aria-disabled": l,
          children: [
            (0, a.jsx)(o.default, { className: I.rowIcon }),
            (0, a.jsx)(i.Text, {
              variant: "text-md/normal",
              color: "header-primary",
              className: I.rowText,
              children:
                _.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_SELECT_ROLE,
            }),
            (0, a.jsx)(r.default, {
              direction: r.default.Directions.RIGHT,
              className: I.caret,
            }),
          ],
        });
      }
    },
    301289: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return h;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("509043"),
        o = s("77078"),
        d = s("731898"),
        u = s("449918"),
        c = s("269936"),
        E = s("973262"),
        _ = s("36694"),
        I = s("422403"),
        T = s("49111"),
        f = s("782340"),
        S = s("347452");
      let m = (0, c.makeLazy)({
        createPromise: () => s.el("282585").then(s.bind(s, "282585")),
        webpackId: "282585",
      });
      function N(e) {
        let t = (0, r.getDarkness)(e) > 0.25;
        return (0, u.getColor)(t ? T.Color.WHITE_500 : T.Color.PRIMARY_530);
      }
      function g(e) {
        let { value: t, onChange: s, disabled: n = !1 } = e,
          [d, u] = l.useState(t);
        function c() {
          s(d);
        }
        function m(e) {
          s(e), u(e);
        }
        let g = t === T.DEFAULT_ROLE_COLOR,
          h = g ? d : t,
          C = (0, a.jsx)(_.default, { width: 32, height: 24, color: N(t) }),
          R = (0, o.useRadioGroup)({
            orientation: "horizontal",
            isDisabled: n,
          }),
          x = (0, o.useRadioItem)({
            isSelected: g,
            label:
              f.default.Messages.USER_SETTINGS_PROFILE_COLOR_DEFAULT_BUTTON.format(
                { colorHex: (0, r.int2hex)(T.DEFAULT_ROLE_COLOR) }
              ),
          }),
          L = (0, o.useRadioItem)({
            isSelected: !g,
            label:
              f.default.Messages.USER_SETTINGS_PROFILE_COLOR_CUSTOM_BUTTON.format(
                { colorHex: (0, r.int2hex)(t) }
              ),
          });
        return (0, a.jsxs)("div", {
          className: S.buttonsContainer,
          "aria-label": f.default.Messages.USER_SETTINGS_PROFILE_COLOR,
          ...R,
          children: [
            (0, a.jsx)("div", {
              className: i(S.colorSwatch, { [S.disabled]: n }),
              children: (0, a.jsxs)(o.Clickable, {
                onClick: n
                  ? void 0
                  : function () {
                      s(T.DEFAULT_ROLE_COLOR);
                    },
                "aria-disabled": n,
                ...x,
                children: [
                  (0, a.jsx)("div", {
                    className: S.swatch,
                    style: {
                      backgroundColor: (0, r.int2hex)(T.DEFAULT_ROLE_COLOR),
                    },
                    children: g ? C : null,
                  }),
                  (0, a.jsx)(o.Text, {
                    className: S.swatchDescription,
                    color: "header-secondary",
                    variant: "text-xs/normal",
                    "aria-hidden": !0,
                    children:
                      f.default.Messages.USER_SETTINGS_PROFILE_COLOR_DEFAULT,
                  }),
                ],
              }),
            }),
            (0, a.jsxs)("div", {
              className: i(S.colorSwatch, { [S.disabled]: n }),
              children: [
                (0, a.jsxs)(o.Clickable, {
                  onClick: n ? void 0 : c,
                  "aria-disabled": n,
                  ...L,
                  children: [
                    (0, a.jsx)("div", {
                      className: i(S.customSwatch, {
                        [S.defaultSwatch]: h === T.DEFAULT_ROLE_COLOR,
                      }),
                      style: { "--custom-color": (0, r.int2hex)(h) },
                      children: g ? null : C,
                    }),
                    (0, a.jsx)(o.Text, {
                      className: S.swatchDescription,
                      color: "header-secondary",
                      variant: "text-xs/normal",
                      "aria-hidden": !0,
                      children:
                        f.default.Messages.USER_SETTINGS_PROFILE_COLOR_CUSTOM,
                    }),
                  ],
                }),
                !n &&
                  (0, a.jsx)(o.Popout, {
                    onRequestOpen: c,
                    renderPopout: e =>
                      (0, a.jsx)(E.CustomColorPicker, {
                        ...e,
                        value: t,
                        onChange: m,
                      }),
                    children: e =>
                      (0, a.jsx)(o.Clickable, {
                        ...e,
                        className: S.dropperIconButton,
                        "aria-label":
                          f.default.Messages
                            .USER_SETTINGS_PROFILE_COLOR_SELECT_COLOR,
                        children: (0, a.jsx)(I.default, {
                          className: S.dropperIcon,
                          width: 14,
                          height: 14,
                          color: N(h),
                        }),
                      }),
                  }),
              ],
            }),
          ],
        });
      }
      function h(e) {
        let t,
          { value: s, onChange: l, disabled: n = !1 } = e,
          { ref: i, width: r } = (0, d.default)();
        return (
          (t =
            null == r || r < 440
              ? (0, a.jsx)(g, { value: s, onChange: l, disabled: n })
              : (0, a.jsx)(m, {
                  defaultColor: T.DEFAULT_ROLE_COLOR,
                  colors: T.ROLE_COLORS,
                  value: s,
                  onChange: l,
                  disabled: n,
                })),
          (0, a.jsx)("div", { ref: i, children: t })
        );
      }
    },
    341778: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return S;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("769846"),
        o = s("77078"),
        d = s("405645"),
        u = s("608684"),
        c = s("818643"),
        E = s("483093"),
        _ = s("159885"),
        I = s("782340"),
        T = s("93090");
      let f = (0, _.cssValueToNumber)(r.default.ROLE_ICON_UPLOADER_ICON_SIZE);
      function S(e) {
        let {
            role: t,
            "aria-label": s = I.default.Messages.UPLOAD_IMAGE,
            className: n,
            onClick: r,
            disabled: _ = !1,
          } = e,
          S = l.useRef(null),
          m = l.useMemo(
            () => (null != t ? (0, d.getRoleIconProps)(t, f) : null),
            [t]
          ),
          N =
            null != m
              ? (0, a.jsx)(E.default, {
                  enableTooltip: !1,
                  className: T.icon,
                  ...m,
                })
              : (0, a.jsx)(c.default, { className: T.icon });
        return (0, a.jsx)(o.FocusRing, {
          ringTarget: S,
          children: (0, a.jsxs)(o.Clickable, {
            "aria-label": s,
            className: i(T.container, n, { [T.disabled]: _ }),
            onClick: _ ? void 0 : r,
            "aria-disabled": _,
            children: [
              (0, a.jsx)("div", { ref: S, className: T.preview, children: N }),
              null != m
                ? (0, a.jsx)(u.ImageUploaderIcon, { className: T.uploaderIcon })
                : null,
            ],
          }),
        });
      }
    },
    988449: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          TabBarSection: function () {
            return a;
          },
          useTabBarState: function () {
            return o;
          },
          TabBarContextProvider: function () {
            return d;
          },
        }),
        s("70102"),
        s("222007");
      var a,
        l,
        n = s("37983"),
        i = s("884691");
      ((l = a || (a = {}))[(l.BASIC_INFO = 0)] = "BASIC_INFO"),
        (l[(l.TIERS = 1)] = "TIERS"),
        (l[(l.PAYMENT = 2)] = "PAYMENT"),
        (l[(l.EMOJIS = 3)] = "EMOJIS");
      let r = i.createContext({
        currentTab: 0,
        setCurrentTab: () => {
          throw Error(
            "useTabBarState must be used within TabBarContextProvider"
          );
        },
      });
      function o() {
        return i.useContext(r);
      }
      function d(e) {
        let { initialTab: t, children: s } = e,
          [a, l] = i.useState(t);
        return (0, n.jsx)(r.Provider, {
          value: { currentTab: a, setCurrentTab: l },
          children: s,
        });
      }
    },
    172589: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return p;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("627445"),
        o = s.n(r),
        d = s("446674"),
        u = s("77078"),
        c = s("449918"),
        E = s("191814"),
        _ = s("987772"),
        I = s("956089"),
        T = s("153160"),
        f = s("577357"),
        S = s("837008"),
        m = s("648825"),
        N = s("757715"),
        g = s("406876"),
        h = s("167109"),
        C = s("110498"),
        R = s("21501"),
        x = s("49111"),
        L = s("782340"),
        O = s("325224");
      function p(e) {
        var t, s;
        let {
            guildId: n,
            initialEditStateId: r,
            allSubscriptionListings: p,
            priceTiers: A,
            onDeleteEditState: M,
            groupListingId: D,
            onBeforeDispatchNewListing: v,
            onAfterDispatchNewListing: G,
          } = e,
          [j, U] = l.useState(r),
          P = (0, d.useStateFromStores)([m.default], () =>
            m.default.getSubscriptionListing(j)
          ),
          b = null == P,
          [B, y] = l.useState(b),
          F = null == P ? void 0 : P.subscription_plans[0],
          H =
            null !== (t = null == P ? void 0 : P.published) &&
            void 0 !== t &&
            t,
          k =
            null !== (s = null == P ? void 0 : P.archived) && void 0 !== s && s,
          w = (0, N.useRoleSubscriptionSettingsDisabled)(),
          [V] = h.useName(j),
          [Y] = h.usePriceTier(j),
          [W] = h.useDescription(j),
          [z] = h.useImage(j, 1024),
          K =
            "" !== V
              ? V
              : L.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_INITIAL_TIER_NAME,
          Z = "" !== V && null != z && "" !== W && null != Y && !w,
          X = h.useHasChanges(j),
          {
            loading: Q,
            error: J,
            handleCreateOrUpdateFromEditState: q,
          } = h.useCreateOrUpdateListingFromEditState(),
          {
            submitting: $,
            error: ee,
            publishSubscriptionListing: et,
          } = (0, S.usePublishSubscriptionListing)(),
          es = Q || $;
        return (0, a.jsxs)("div", {
          className: O.container,
          children: [
            (0, a.jsxs)("div", {
              className: i(O.header, { [O.headerExpanded]: B }),
              children: [
                (0, a.jsx)("div", {
                  className: O.headerImageContainer,
                  children:
                    null == z
                      ? (0, a.jsx)(C.default, {
                          className: O.starIcon,
                          "aria-hidden": !0,
                        })
                      : (0, a.jsx)("img", {
                          className: O.headerImage,
                          src: z,
                          alt: K,
                        }),
                }),
                (0, a.jsxs)("div", {
                  className: O.headerListingInfo,
                  children: [
                    (0, a.jsx)(u.Text, {
                      variant: "text-md/medium",
                      color: "interactive-active",
                      children: K,
                    }),
                    (0, a.jsx)(E.default, { size: 2 }),
                    (0, a.jsxs)("div", {
                      className: O.headerDescriptionContainer,
                      children: [
                        !k &&
                          !H &&
                          void 0 !== P &&
                          (0, a.jsx)(I.TextBadge, {
                            color: (0, c.getColor)(x.Color.YELLOW_300),
                            text: L.default.Messages
                              .GUILD_ROLE_SUBSCRIPTION_TIER_MANAGEMENT_DRAFT_LABEL,
                            className: O.draftBadge,
                          }),
                        k &&
                          (0, a.jsx)(I.TextBadge, {
                            color: (0, c.getColor)(x.Color.PRIMARY_500),
                            text: L.default.Messages
                              .GUILD_ROLE_SUBSCRIPTION_TIER_MANAGEMENT_ARCHIVED_LABEL,
                            className: O.archivedBadge,
                          }),
                        void 0 === P &&
                          (0, a.jsx)(I.TextBadge, {
                            color: (0, c.getColor)(x.Color.PRIMARY_500),
                            text: L.default.Messages
                              .GUILD_ROLE_SUBSCRIPTION_TIER_MANAGEMENT_UNSAVED_LABEL,
                            className: O.unsavedBadge,
                          }),
                        null != F &&
                          (0, a.jsxs)(u.Text, {
                            color: "interactive-normal",
                            variant: "text-sm/normal",
                            children: [
                              (0, T.formatPrice)(F.price, F.currency),
                              "/",
                              (0, f.formatPlanInterval)(F),
                            ],
                          }),
                      ],
                    }),
                  ],
                }),
                B
                  ? (0, a.jsxs)(a.Fragment, {
                      children: [
                        (0, a.jsx)(u.Button, {
                          look: u.Button.Looks.BLANK,
                          className: O.cancel,
                          onClick: () => {
                            h.clearEditState(j), b ? null == M || M() : y(!1);
                          },
                          children: L.default.Messages.CANCEL,
                        }),
                        (0, a.jsx)(u.Button, {
                          onClick: () =>
                            q({
                              guildId: n,
                              editStateId: j,
                              groupListingId: D,
                              onBeforeDispatchNewListing: v,
                              onAfterDispatchNewListing: e => {
                                U(e.id), null == G || G(e);
                              },
                            }),
                          disabled: !Z || !X,
                          className: O.autoWidth,
                          submitting: es,
                          children: L.default.Messages.SAVE,
                        }),
                      ],
                    })
                  : (0, a.jsx)(u.Clickable, {
                      onClick: () => y(!0),
                      "aria-label":
                        L.default.Messages
                          .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_EDIT_LABEL,
                      children: (0, a.jsx)(_.default, {
                        className: O.pencilIcon,
                      }),
                    }),
              ],
            }),
            B &&
              (0, a.jsx)(g.EditStateContextProvider, {
                editStateId: j,
                guildId: n,
                groupListingId: D,
                children: (0, a.jsx)(R.default, {
                  allSubscriptionListings: p,
                  priceTiers: A,
                  loading: es,
                  error: null != J ? J : ee,
                  handlePublishTier: () => {
                    o(null != D, "group listing doesnt exist"),
                      o(null != P, "subscription listing doesnt exist"),
                      et({ guildId: n, groupListingId: D, listingId: P.id });
                  },
                  onDeleteEditState: M,
                }),
              }),
          ],
        });
      }
    },
    21501: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return h;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("446674"),
        o = s("77078"),
        d = s("648825"),
        u = s("757715"),
        c = s("406876"),
        E = s("395905"),
        _ = s("700495"),
        I = s("903152"),
        T = s("851088"),
        f = s("385881"),
        S = s("253414"),
        m = s("782340"),
        N = s("325224"),
        g = s("246102");
      function h(e) {
        var t, s;
        let {
            allSubscriptionListings: n,
            priceTiers: h,
            loading: C,
            error: R,
            handlePublishTier: x,
            onDeleteEditState: L,
          } = e,
          { editStateId: O } = (0, c.useEditStateContext)(),
          p = (0, r.useStateFromStores)([d.default], () =>
            d.default.getSubscriptionListing(O)
          ),
          A = (0, u.useRoleSubscriptionSettingsDisabled)(),
          M = l.useMemo(() => {
            let e = n
              .filter(e => e.id !== O)
              .map(e => {
                var t;
                return null === (t = e.subscription_plans[0]) || void 0 === t
                  ? void 0
                  : t.price;
              });
            return null == h ? void 0 : h.filter(t => !e.includes(t));
          }, [n, O, h]),
          D = null == p,
          v =
            null !== (t = null == p ? void 0 : p.published) &&
            void 0 !== t &&
            t,
          G =
            null !== (s = null == p ? void 0 : p.archived) && void 0 !== s && s;
        return (0, a.jsxs)("div", {
          className: g.body,
          children: [
            null != R &&
              (0, a.jsx)(E.default, { children: R.getAnyErrorMessage() }),
            !v &&
              !A &&
              !G &&
              (0, a.jsxs)("div", {
                className: g.publishListing,
                children: [
                  (0, a.jsxs)("div", {
                    children: [
                      (0, a.jsx)(o.Heading, {
                        variant: "heading-md/semibold",
                        className: g.publishListingInfoHeader,
                        children:
                          m.default.Messages
                            .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DRAFT_BANNER_TITLE,
                      }),
                      (0, a.jsx)(o.FormText, {
                        type: o.FormText.Types.DESCRIPTION,
                        children:
                          m.default.Messages
                            .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DRAFT_BANNER_DESCRIPTION,
                      }),
                    ],
                  }),
                  (0, a.jsx)(o.Tooltip, {
                    shouldShow: D,
                    tooltipClassName: N.autoWidth,
                    text: m.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_SAVE_BEFORE_PUBLISH_TOOLTIP,
                    children: e =>
                      (0, a.jsx)(o.Button, {
                        ...e,
                        disabled: D,
                        color: o.Button.Colors.CUSTOM,
                        wrapperClassName: N.autoWidth,
                        className: i(g.publishButton, N.autoWidth),
                        onClick: x,
                        submitting: C,
                        children:
                          m.default.Messages
                            .GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIER_EDIT_PUBLISH_DRAFT_CTA,
                      }),
                  }),
                ],
              }),
            (0, a.jsx)(I.default, { priceTiers: M }),
            (0, a.jsx)(T.default, { allSubscriptionListings: n }),
            (0, a.jsx)(f.default, {}),
            (0, a.jsx)(S.default, {}),
            (0, a.jsx)(_.default, { onDeleteEditState: L }),
          ],
        });
      }
    },
    700495: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return m;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("627445"),
        i = s.n(n),
        r = s("446674"),
        o = s("77078"),
        d = s("465869"),
        u = s("837008"),
        c = s("648825"),
        E = s("406876"),
        _ = s("795228"),
        I = s("561205"),
        T = s("782340"),
        f = s("325224"),
        S = s("103639");
      function m(e) {
        var t;
        let { onDeleteEditState: n } = e,
          {
            editStateId: m,
            guildId: N,
            groupListingId: g,
          } = (0, E.useEditStateContext)(),
          h = (0, r.useStateFromStores)([c.default], () =>
            c.default.getSubscriptionListing(m)
          ),
          C = null == h ? void 0 : h.id,
          R = (0, _.default)(N),
          x = l.useMemo(() => {
            var e;
            return (
              null != R &&
              null != h &&
              (null !== (e = R[h.role_id]) && void 0 !== e ? e : 0)
            );
          }, [R, h]),
          L = 0 === x,
          O = null == C,
          p =
            null !== (t = null == h ? void 0 : h.archived) && void 0 !== t && t,
          { deleteSubscriptionListing: A, submitting: M } = (0,
          u.useDeleteSubscriptionListing)(),
          { archiveSubscriptionListing: D, submitting: v } = (0,
          u.useArchiveSubscriptionListing)(),
          G = () => {
            let e = async () => {
              if (!O) {
                i(null != g, "group listing doesnt exist"),
                  i(null != C, "subscription listing doesnt exist");
                let e = await A(N, g, C);
                if (!e) return;
              }
              null == n || n();
            };
            (0, o.openModalLazy)(async () => {
              let { ConfirmModal: t } = await s
                .el("77078")
                .then(s.bind(s, "77078"));
              return s =>
                (0, a.jsx)(t, {
                  header: T.default.Messages.DEFAULT_CONFIRMATION_MODAL_HEADER,
                  confirmText:
                    T.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_BUTTON,
                  cancelText: T.default.Messages.CANCEL,
                  onConfirm: () => {
                    e();
                  },
                  confirmButtonColor: o.Button.Colors.RED,
                  ...s,
                  children: (0, a.jsx)(o.Text, {
                    variant: "text-md/normal",
                    children:
                      T.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_DESCRIPTION,
                  }),
                });
            });
          },
          { allowSelfRemoveMonetization: j } = (0,
          d.useShouldRestrictUpdatingCreatorMonetizationSettings)(N);
        return null == h
          ? null
          : (0, a.jsx)(I.default, {
              title:
                T.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ADVANCE_SECTION_TITLE,
              children: p
                ? (0, a.jsxs)(o.FormSection, {
                    title:
                      T.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_LABEL,
                    disabled: !j,
                    children: [
                      (0, a.jsx)(o.FormText, {
                        type: o.FormText.Types.DESCRIPTION,
                        className: f.formDescription,
                        disabled: !j,
                        children:
                          T.default.Messages
                            .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_DESCRIPTION,
                      }),
                      (0, a.jsx)(o.Tooltip, {
                        shouldShow: !L,
                        text: T.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_TOOLTIP.format(
                          { listingMemberCount: x }
                        ),
                        children: e =>
                          (0, a.jsx)(o.Button, {
                            ...e,
                            wrapperClassName: S.deleteListingButton,
                            color: o.Button.Colors.RED,
                            onClick: G,
                            submitting: M,
                            disabled: !j || !L,
                            children:
                              T.default.Messages
                                .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_BUTTON,
                          }),
                      }),
                    ],
                  })
                : (0, a.jsxs)(o.FormSection, {
                    title:
                      T.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ARCHIVE_LABEL,
                    disabled: !j,
                    children: [
                      (0, a.jsx)(o.FormText, {
                        type: o.FormText.Types.DESCRIPTION,
                        className: f.formDescription,
                        disabled: !j,
                        children:
                          T.default.Messages
                            .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ARCHIVE_DESCRIPTION,
                      }),
                      (0, a.jsx)(o.Button, {
                        wrapperClassName: S.deleteListingButton,
                        color: o.Button.Colors.RED,
                        onClick: () => {
                          i(null != g, "group listing doesnt exist"),
                            i(null != C, "subscription listing doesnt exist"),
                            (0, o.openModalLazy)(async () => {
                              let { ConfirmModal: e } = await s
                                .el("77078")
                                .then(s.bind(s, "77078"));
                              return t =>
                                (0, a.jsx)(e, {
                                  header:
                                    T.default.Messages
                                      .DEFAULT_CONFIRMATION_MODAL_HEADER,
                                  confirmText:
                                    T.default.Messages
                                      .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ARCHIVE_BUTTON,
                                  cancelText: T.default.Messages.CANCEL,
                                  onConfirm: () => {
                                    D(N, g, C);
                                  },
                                  confirmButtonColor: o.Button.Colors.RED,
                                  ...t,
                                  children: (0, a.jsx)(o.Text, {
                                    variant: "text-md/normal",
                                    children:
                                      T.default.Messages
                                        .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ARCHIVE_DESCRIPTION,
                                  }),
                                });
                            });
                        },
                        submitting: v,
                        disabled: !j,
                        children:
                          T.default.Messages
                            .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ARCHIVE_BUTTON,
                      }),
                    ],
                  }),
            });
      }
    },
    903152: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return C;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("446674"),
        i = s("77078"),
        r = s("608684"),
        o = s("191814"),
        d = s("476765"),
        u = s("950603"),
        c = s("153160"),
        E = s("648825"),
        _ = s("757715"),
        I = s("406876"),
        T = s("167109"),
        f = s("620199"),
        S = s("561205"),
        m = s("49111"),
        N = s("782340"),
        g = s("325224"),
        h = s("570625");
      function C(e) {
        let { priceTiers: t } = e,
          { editStateId: s } = (0, I.useEditStateContext)(),
          C = (0, n.useStateFromStores)([E.default], () => {
            var e;
            return null === (e = E.default.getSubscriptionListing(s)) ||
              void 0 === e
              ? void 0
              : e.image_asset;
          }),
          [R, x] = T.useName(s),
          [L, O] = T.usePriceTier(s),
          [p, A] = T.useDescription(s),
          [M, D] = T.useImage(s, 1024),
          {
            imageCTA: v,
            imageAriaLabel: G,
            setFilename: j,
          } = (0, f.default)(C),
          U = l.useMemo(() => {
            var e;
            return null !==
              (e =
                null == t
                  ? void 0
                  : t.map(e => ({
                      value: e,
                      label: (0, c.formatPrice)(e, m.CurrencyCodes.USD),
                    }))) && void 0 !== e
              ? e
              : [];
          }, [t]);
        function P(e, t) {
          null != t && j(t.name), D(e);
        }
        let b = (0, _.useRoleSubscriptionSettingsDisabled)(),
          B = (0, d.useUID)(),
          y = (0, d.useUID)(),
          F = (0, d.useUID)();
        return (0, a.jsxs)(S.default, {
          title:
            N.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_BASIC_INFO_SECTION_TITLE,
          intiallyExpanded: !0,
          children: [
            (0, a.jsxs)("div", {
              className: h.formSplit,
              children: [
                (0, a.jsx)("div", {
                  className: h.formSplitHalf,
                  children: (0, a.jsx)(i.FormSection, {
                    title:
                      N.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_NAME_TITLE,
                    titleId: B,
                    disabled: b,
                    children: (0, a.jsx)(i.TextInput, {
                      placeholder:
                        N.default.Messages
                          .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_NAME_PLACEHOLDER,
                      value: R,
                      inputClassName: g.formInput,
                      onChange: x,
                      "aria-labelledby": B,
                      disabled: b,
                    }),
                  }),
                }),
                (0, a.jsx)("div", {
                  className: h.formSplitHalf,
                  children: (0, a.jsx)(i.FormSection, {
                    title:
                      N.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_PRICE_TITLE,
                    titleId: y,
                    disabled: b,
                    children: (0, a.jsx)(i.SingleSelect, {
                      options: U,
                      className: g.formInput,
                      isDisabled: b || null == t,
                      placeholder:
                        N.default.Messages
                          .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_PRICE_PLACEHOLDER,
                      value: L,
                      onChange: O,
                      maxVisibleItems: 5,
                      look: i.SelectLooks.CUSTOM,
                      "aria-labelledby": y,
                    }),
                  }),
                }),
              ],
            }),
            (0, a.jsx)(o.default, { size: 24 }),
            (0, a.jsx)(i.FormSection, {
              title:
                N.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DESCRIPTION_TITLE,
              titleId: F,
              disabled: b,
              children: (0, a.jsx)(i.TextArea, {
                placeholder:
                  N.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DESCRIPTION_PLACEHOLDER,
                value: p,
                rows: 2,
                autosize: !0,
                className: g.formInput,
                onChange: A,
                "aria-labelledby": F,
                disabled: b,
              }),
            }),
            (0, a.jsx)(o.default, { size: 24 }),
            (0, a.jsxs)("div", {
              className: h.iconSection,
              children: [
                (0, a.jsxs)(i.FormSection, {
                  title:
                    N.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_SYMBOL_TITLE,
                  className: h.iconSectionDescription,
                  disabled: b,
                  children: [
                    (0, a.jsx)(i.FormText, {
                      type: i.FormText.Types.DESCRIPTION,
                      className: g.formDescription,
                      disabled: b,
                      children:
                        N.default.Messages
                          .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_SYMBOL_DESCRIPTION,
                    }),
                    (0, a.jsx)(u.default, {
                      onChange: P,
                      buttonCTA: v,
                      "aria-label": G,
                      disabled: b,
                      look: i.Button.Looks.OUTLINED,
                      color: i.Button.Colors.PRIMARY,
                    }),
                  ],
                }),
                (0, a.jsx)(r.default, {
                  image: M,
                  hint: v,
                  showIcon: !0,
                  showRemoveButton: !1,
                  hideSize: !0,
                  className: h.iconUploader,
                  imageClassName: h.tierSymbolUploaderInner,
                  onChange: P,
                  "aria-label": G,
                  disabled: b,
                }),
              ],
            }),
          ],
        });
      }
    },
    104967: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return E;
          },
        }),
        s("222007");
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("406876"),
        i = s("971150"),
        r = s("167109"),
        o = s("894429"),
        d = s("981737"),
        u = s("782340"),
        c = s("325224");
      function E(e) {
        let { "aria-labelledby": t, disabled: s = !1 } = e,
          { editStateId: E, guildId: _ } = (0, n.useEditStateContext)(),
          [I, T] = r.useChannelAccessFormat(E, _);
        return (0, a.jsx)(l.RadioGroup, {
          className: c.channelAccessSelect,
          radioItemClassName: c.channelAccessSelectRadioButton,
          withTransparentBackground: !0,
          size: l.RadioGroup.Sizes.NOT_SET,
          onChange: e => {
            let { value: t } = e;
            return T(t);
          },
          options: [
            {
              name: u.default.Messages
                .GUILD_ROLE_SUBSCRIPTION_TIER_BENEFITS_SELECT_CHANNELS_MANUALLY_LABEL,
              value: i.AllChannelAccessOptions.SOME_CHANNELS_ACCESS,
              icon: d.default,
              radioBarClassName: c.channelAccessSelectRadioBar,
            },
            {
              name: u.default.Messages
                .GUILD_ROLE_SUBSCRIPTION_TIER_BENEFITS_INCLUDE_ALL_CHANNELS_LABEL,
              value: i.AllChannelAccessOptions.ALL_CHANNELS_ACCESS,
              icon: o.default,
              radioBarClassName: c.channelAccessSelectRadioBar,
            },
          ],
          value: I,
          "aria-labelledby": t,
          disabled: s,
        });
      }
    },
    677847: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return I;
          },
        }),
        s("222007"),
        s("424973");
      var a = s("37983"),
        l = s("884691"),
        n = s("77078");
      s("465869");
      var i = s("191814"),
        r = s("757715"),
        o = s("406876"),
        d = s("167109"),
        u = s("989210"),
        c = s("363966"),
        E = s("677795"),
        _ = s("782340");
      function I() {
        let { editStateId: e, guildId: t } = (0, o.useEditStateContext)(),
          [s, I] = d.useChannelBenefits(e),
          T = l.useMemo(() => new Set(s.map(e => e.ref_id)), [s]);
        function f(e, t) {
          let { channelId: a, description: l, emojiId: n, emojiName: i } = e,
            r = [...s],
            o = {
              name: "",
              description: l,
              emoji_id: n,
              emoji_name: i,
              ref_type: E.GuildRoleSubscriptionBenefitTypes.CHANNEL,
              ref_id: a,
            };
          null != t ? (r[t] = o) : r.push(o), I(r);
        }
        let S = (0, r.useRoleSubscriptionSettingsDisabled)();
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(c.EditableBenefitsList, {
              benefits: s,
              onEdit: function (e) {
                (0, n.openModal)(l =>
                  (0, a.jsx)(u.EditChannelBenefitModal, {
                    ...l,
                    guildId: t,
                    omitChannelIds: T,
                    initialData: s[e],
                    onSave: t => f(t, e),
                    onDelete: () =>
                      (function (e) {
                        let t = [...s];
                        t.splice(e, 1), I(t);
                      })(e),
                  })
                );
              },
              onMove: function (e, t) {
                let a = [...s],
                  [l] = a.splice(e, 1);
                a.splice(t, 0, l), I(a);
              },
              guildId: t,
            }),
            s.length > 0 && (0, a.jsx)(i.default, { size: 8 }),
            (0, a.jsx)(c.AddBenefitCard, {
              onClick: function () {
                (0, n.openModal)(e =>
                  (0, a.jsx)(u.EditChannelBenefitModal, {
                    ...e,
                    guildId: t,
                    omitChannelIds: T,
                    onSave: e => f(e),
                  })
                );
              },
              disabled: S,
              children:
                _.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_CHANNEL_BENEFITS_ADD_BUTTON_TEXT,
            }),
          ],
        });
      }
    },
    851088: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return h;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("77078"),
        i = s("191814"),
        r = s("476765"),
        o = s("757715"),
        d = s("406876"),
        u = s("167109"),
        c = s("7370"),
        E = s("561205"),
        _ = s("958671"),
        I = s("104967"),
        T = s("677847"),
        f = s("88681"),
        S = s("798204"),
        m = s("677795"),
        N = s("782340"),
        g = s("325224");
      function h(e) {
        let { allSubscriptionListings: t } = e,
          { editStateId: s, guildId: h } = (0, d.useEditStateContext)(),
          [C, R] = u.useChannelBenefits(s),
          [x, L] = u.useIntangibleBenefits(s),
          O = l.useMemo(() => t.filter(e => e.id !== s), [t, s]),
          { isFullServerGating: p } = (0, c.default)(h),
          A = (0, r.useUID)(),
          M = (0, o.useRoleSubscriptionSettingsDisabled)();
        return (0, a.jsxs)(E.default, {
          title:
            N.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_BENEFITS_HEADER_TITLE,
          description:
            N.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_BENEFITS_HEADER_SUBTITLE,
          children: [
            (0, a.jsxs)(n.FormSection, {
              title:
                N.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_HEADER_TITLE,
              disabled: M,
              children: [
                (0, a.jsx)(n.FormText, {
                  type: n.FormText.Types.DESCRIPTION,
                  className: g.formDescription,
                  disabled: M,
                  children:
                    N.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_HEADER_SUBTITLE,
                }),
                (0, a.jsx)(_.default, {
                  channelBenefits: C,
                  intangibleBenefits: x,
                  subscriptionListings: O,
                  onImport: function (e, t) {
                    R(t => t.concat(e)), L(e => e.concat(t));
                  },
                }),
                (0, a.jsx)(i.default, { size: 8 }),
                (0, a.jsx)(_.ImportRoleCard, {
                  guildId: h,
                  onImport: function (e) {
                    R(t => {
                      let s = new Set(
                          t.map(e => {
                            let { ref_id: t } = e;
                            return t;
                          })
                        ),
                        a = e
                          .filter(e => !s.has(e))
                          .map(e => ({
                            ref_id: e,
                            ref_type:
                              m.GuildRoleSubscriptionBenefitTypes.CHANNEL,
                          }));
                      return [...t, ...a];
                    });
                  },
                  disabled: M,
                }),
              ],
            }),
            (0, a.jsx)(i.default, { size: 24 }),
            (0, a.jsxs)(n.FormSection, {
              title:
                N.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_CHANNEL_BENEFITS_CHANNELS_TITLE,
              titleId: A,
              disabled: M,
              children: [
                (0, a.jsx)(n.FormText, {
                  type: n.FormText.Types.DESCRIPTION,
                  className: g.formDescription,
                  disabled: M,
                  children:
                    N.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETUP_CHANNEL_BENEFITS_CHANNELS_DESCRIPTION,
                }),
                p &&
                  (0, a.jsxs)(a.Fragment, {
                    children: [
                      (0, a.jsx)(I.default, {
                        "aria-labelledby": A,
                        disabled: M,
                      }),
                      (0, a.jsx)(i.default, { size: 8 }),
                    ],
                  }),
                (0, a.jsx)(T.default, {}),
              ],
            }),
            (0, a.jsx)(i.default, { size: 24 }),
            (0, a.jsxs)(n.FormSection, {
              title:
                N.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_INTANGIBLE_BENEFITS_TITLE,
              disabled: M,
              children: [
                (0, a.jsx)(n.FormText, {
                  type: n.FormText.Types.DESCRIPTION,
                  className: g.formDescription,
                  disabled: M,
                  children:
                    N.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETUP_INTANGIBLE_BENEFITS_DESCRIPTION,
                }),
                (0, a.jsx)(S.default, {}),
              ],
            }),
            (0, a.jsx)(i.default, { size: 24 }),
            (0, a.jsx)(f.default, {}),
          ],
        });
      }
    },
    88681: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return S;
          },
        }),
        s("222007");
      var a = s("37983");
      s("884691");
      var l = s("446674"),
        n = s("77078"),
        i = s("305961"),
        r = s("191814"),
        o = s("757715"),
        d = s("406876"),
        u = s("167109"),
        c = s("549590"),
        E = s("363966"),
        _ = s("851015"),
        I = s("988449"),
        T = s("782340"),
        f = s("325224");
      function S() {
        let { editStateId: e, guildId: t } = (0, d.useEditStateContext)(),
          [S, m] = u.useTierEmojiIds(e, t),
          N = (0, c.default)(t, e),
          { setCurrentTab: g } = (0, I.useTabBarState)(),
          h = () => g(I.TabBarSection.EMOJIS),
          C = (0, l.useStateFromStores)([i.default], () =>
            i.default.getGuild(t)
          ),
          R = null == C ? void 0 : C.getMaxRoleSubscriptionEmojiSlots();
        function x(e) {
          null == S ? m(new Set(e)) : m(new Set([...S, ...e]));
        }
        function L(e) {
          let t = new Set(S);
          t.delete(e), m(t);
        }
        let O = (0, o.useRoleSubscriptionSettingsDisabled)();
        return (0, a.jsxs)(n.FormSection, {
          title: T.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_EMOJI_TITLE,
          disabled: O,
          children: [
            (0, a.jsxs)(n.FormText, {
              type: n.FormText.Types.DESCRIPTION,
              className: f.formDescription,
              disabled: O,
              children: [
                T.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_EMOJI_DESCRIPTION.format(
                  { premiumEmojiMaximum: R }
                ),
                (0, a.jsx)("br", {}),
                T.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_EMOJI_MANAGE_LINK.format(
                  { handleTransitionToManageEmoji: h }
                ),
              ],
            }),
            (0, a.jsx)(_.EmojiList, {
              tierEmojiIds: S,
              guildId: t,
              onRemoveEmoji: function (e) {
                let t = e.roles.filter(e => e !== (null == N ? void 0 : N.id));
                t.length > 0
                  ? L(e.id)
                  : (0, n.openModalLazy)(async () => {
                      let { default: t } = await s
                        .el("140092")
                        .then(s.bind(s, "140092"));
                      return s =>
                        (0, a.jsx)(t, {
                          ...s,
                          onConfirmDelete: () => {
                            L(e.id), s.onClose();
                          },
                        });
                    });
              },
            }),
            null != S && S.size > 0 ? (0, a.jsx)(r.default, { size: 8 }) : null,
            (0, a.jsx)(E.AddBenefitCard, {
              onClick: function () {
                (0, n.openModalLazy)(async () => {
                  let { EmojiAddModal: e } = await s
                    .el("500716")
                    .then(s.bind(s, "500716"));
                  return s =>
                    (0, a.jsx)(e, {
                      ...s,
                      guildId: t,
                      initialTierEmojiIds: S,
                      onSubmit: x,
                      transitionToManageEmoji: () => {
                        h(), s.onClose();
                      },
                    });
                });
              },
              disabled: O,
              children:
                T.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_EMOJI_ADD_BUTTON_TEXT,
            }),
          ],
        });
      }
    },
    798204: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return _;
          },
        }),
        s("222007"),
        s("424973");
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("191814"),
        i = s("757715"),
        r = s("406876"),
        o = s("167109"),
        d = s("989210"),
        u = s("363966"),
        c = s("677795"),
        E = s("782340");
      function _() {
        let { editStateId: e, guildId: t } = (0, r.useEditStateContext)(),
          [s, _] = o.useIntangibleBenefits(e);
        function I(e, t) {
          let { name: a, description: l, emojiId: n, emojiName: i } = e,
            r = [...s],
            o = {
              name: a,
              description: l,
              emoji_id: n,
              emoji_name: i,
              ref_type: c.GuildRoleSubscriptionBenefitTypes.INTANGIBLE,
              ref_id: void 0,
            };
          null != t ? (r[t] = o) : r.push(o), _(r);
        }
        let T = (0, i.useRoleSubscriptionSettingsDisabled)();
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(u.EditableBenefitsList, {
              benefits: s,
              onEdit: function (e) {
                (0, l.openModal)(l =>
                  (0, a.jsx)(d.EditIntangibleBenefitModal, {
                    ...l,
                    guildId: t,
                    initialData: s[e],
                    onSave: t => I(t, e),
                    onDelete: () =>
                      (function (e) {
                        let t = [...s];
                        t.splice(e, 1), _(t);
                      })(e),
                  })
                );
              },
              onMove: function (e, t) {
                let a = [...s],
                  [l] = a.splice(e, 1);
                a.splice(t, 0, l), _(a);
              },
              guildId: t,
            }),
            s.length > 0 ? (0, a.jsx)(n.default, { size: 8 }) : null,
            (0, a.jsx)(u.AddBenefitCard, {
              onClick: function () {
                (0, l.openModal)(e =>
                  (0, a.jsx)(d.EditIntangibleBenefitModal, {
                    ...e,
                    guildId: t,
                    onSave: e => I(e),
                  })
                );
              },
              disabled: T,
              children:
                E.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_INTANGIBLE_BENEFITS_ADD_BUTTON_TEXT,
            }),
          ],
        });
      }
    },
    385881: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return N;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("627445"),
        i = s.n(n),
        r = s("77078"),
        o = s("191814"),
        d = s("476765"),
        u = s("837008"),
        c = s("757715"),
        E = s("406876"),
        _ = s("167109"),
        I = s("979778"),
        T = s("59767"),
        f = s("561205"),
        S = s("782340"),
        m = s("325224");
      function N() {
        var e;
        let { editStateId: t } = (0, E.useEditStateContext)(),
          [s, n] = _.useTrialInterval(t),
          [N, g] = _.useTrialLimit(t),
          h = (0, u.useSubscriptionTrial)(t),
          { options: C } = (0, T.default)(
            null !== (e = null == h ? void 0 : h.active_trial) && void 0 !== e
              ? e
              : null
          ),
          R = (0, I.default)(),
          x = null != s,
          L = l.useCallback(
            e => {
              let t = C.find(e => e.isDefault);
              i(null != t, "Missing default trial duartion option"),
                n(e ? t.value : null);
            },
            [n, C]
          ),
          O = (0, c.useRoleSubscriptionSettingsDisabled)(),
          p = (0, d.useUID)(),
          A = (0, d.useUID)();
        return (0, a.jsxs)(f.default, {
          title:
            S.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETUP_FREE_TRIAL_TITLE,
          description:
            S.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_SETUP_FREE_TRIAL_DESCRIPTION,
          children: [
            (0, a.jsx)(r.FormSwitch, {
              onChange: (e, t) => L(e),
              value: x,
              disabled: O,
              hideBorder: !0,
              children:
                S.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_ENABLE_FREE_TRIAL_CTA,
            }),
            (0, a.jsxs)(r.FormSection, {
              title:
                S.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_FREE_TRIAL_TIME_LIMIT_TITLE,
              titleId: p,
              disabled: !x || O,
              children: [
                (0, a.jsx)(r.FormText, {
                  type: r.FormText.Types.DESCRIPTION,
                  className: m.formDescription,
                  disabled: !x || O,
                  children:
                    S.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETUP_FREE_TRIAL_TIME_LIMIT_DESCRIPTION,
                }),
                (0, a.jsx)(o.default, { size: 8 }),
                (0, a.jsx)(r.SingleSelect, {
                  "aria-labelledby": p,
                  options: C,
                  className: m.formInput,
                  placeholder:
                    S.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETUP_FREE_TRIAL_DISABLED,
                  value: s,
                  onChange: n,
                  maxVisibleItems: 5,
                  isDisabled: !x || O,
                  look: r.SelectLooks.CUSTOM,
                }),
              ],
            }),
            (0, a.jsx)(o.default, { size: 24 }),
            (0, a.jsxs)(r.FormSection, {
              title:
                S.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ACTIVE_TRIAL_USER_LIMIT_TITLE,
              titleId: A,
              disabled: !x || O,
              children: [
                (0, a.jsx)(r.FormText, {
                  type: r.FormText.Types.DESCRIPTION,
                  className: m.formDescription,
                  disabled: !x || O,
                  children:
                    S.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ACTIVE_TRIAL_USER_LIMIT_DESCRIPTION,
                }),
                (0, a.jsx)(r.SingleSelect, {
                  "aria-labelledby": A,
                  options: R,
                  className: m.formInput,
                  value: N,
                  onChange: g,
                  maxVisibleItems: 5,
                  isDisabled: !x || O,
                  look: r.SelectLooks.CUSTOM,
                }),
              ],
            }),
          ],
        });
      }
    },
    253414: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return f;
          },
        }),
        s("222007");
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("191814"),
        i = s("757715"),
        r = s("406876"),
        o = s("167109"),
        d = s("561205"),
        u = s("246506"),
        c = s("301289"),
        E = s("341778"),
        _ = s("782340"),
        I = s("325224"),
        T = s("951397");
      function f() {
        let { editStateId: e, guildId: t } = (0, r.useEditStateContext)(),
          [, f] = o.useRoleIcon(e, t),
          [S, m] = o.useRoleColor(e, t),
          N = o.useRole(e, t);
        function g() {
          (0, l.openModalLazy)(async () => {
            let { default: e } = await s.el("64567").then(s.bind(s, "64567"));
            return s =>
              (0, a.jsx)(e, {
                ...s,
                guildId: t,
                onUploadIcon: e => f({ icon: e, unicodeEmoji: null }),
                onSelectUnicodeEmoji: e => f({ icon: null, unicodeEmoji: e }),
              });
          });
        }
        let h = (0, i.useRoleSubscriptionSettingsDisabled)();
        return (0, a.jsxs)(d.default, {
          title:
            _.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_FLAIR_HEADER_TITLE,
          description:
            _.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_FLAIR_HEADER_SUBTITLE,
          children: [
            (0, a.jsx)(l.FormSection, {
              title:
                _.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETUP_FLAIR_COLOR_TITLE,
              disabled: h,
              children: (0, a.jsx)(c.default, {
                value: S,
                onChange: m,
                disabled: h,
              }),
            }),
            (0, a.jsx)(n.default, { size: 24 }),
            (0, a.jsx)("div", {
              className: I.iconSection,
              children: (0, a.jsxs)(l.FormSection, {
                title:
                  _.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETUP_FLAIR_BADGE_TITLE,
                disabled: h,
                children: [
                  (0, a.jsx)(l.FormText, {
                    type: l.FormText.Types.DESCRIPTION,
                    className: I.formDescription,
                    disabled: h,
                    children:
                      _.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_SETUP_FLAIR_BADGE_DESCRIPTION,
                  }),
                  (0, a.jsxs)("div", {
                    className: T.iconUploaderContainer,
                    children: [
                      (0, a.jsx)(E.default, {
                        role: N,
                        "aria-label": _.default.Messages.ROLE_ICON_CHOOSE_IMAGE,
                        onClick: g,
                        disabled: h,
                      }),
                      (0, a.jsx)(l.Button, {
                        look: l.Button.Looks.OUTLINED,
                        color: l.Button.Colors.PRIMARY,
                        className: I.imageUploadButtonCTA,
                        onClick: g,
                        disabled: h,
                        children: _.default.Messages.ROLE_ICON_CHOOSE_IMAGE,
                      }),
                    ],
                  }),
                ],
              }),
            }),
            (0, a.jsx)(n.default, { size: 24 }),
            (0, a.jsx)(l.FocusBlock, {
              children: (0, a.jsxs)("div", {
                className: T.previewContainer,
                "aria-hidden": !0,
                children: [
                  (0, a.jsx)(u.default, {
                    guildId: t,
                    role: N,
                    className: T.messageContainer,
                    theme: "light",
                  }),
                  (0, a.jsx)(u.default, {
                    guildId: t,
                    role: N,
                    className: T.messageContainer,
                    theme: "dark",
                  }),
                ],
              }),
            }),
          ],
        });
      }
    },
    514377: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return _;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("446674"),
        n = s("77078"),
        i = s("466227"),
        r = s("527042"),
        o = s("191814"),
        d = s("950603"),
        u = s("757715"),
        c = s("608775"),
        E = s("782340");
      function _(e) {
        let { guild: t } = e,
          _ = (0, l.useStateFromStores)([i.default], () =>
            i.default.isUploadingEmoji()
          ),
          I = (0, c.default)(t.id),
          T = t.getMaxRoleSubscriptionEmojiSlots() - I.length,
          f = (0, u.useRoleSubscriptionSettingsDisabled)();
        return (0, a.jsx)(a.Fragment, {
          children: (0, a.jsxs)(n.FormSection, {
            title:
              E.default.Messages
                .GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_UPLOAD_TITLE,
            disabled: f,
            children: [
              (0, a.jsx)(n.FormText, {
                type: n.FormText.Types.DESCRIPTION,
                disabled: f,
                children:
                  E.default.Messages.GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_UPLOAD_DESCRIPTION.format(
                    { maxSlots: t.getMaxRoleSubscriptionEmojiSlots() }
                  ),
              }),
              (0, a.jsx)(o.default, { size: 16 }),
              (0, a.jsx)(d.default, {
                onChange: (e, l) => {
                  null != e &&
                    null != l &&
                    (0, n.openModalLazy)(async () => {
                      let { CreateEmojiWithRolesModal: n } = await s
                        .el("777924")
                        .then(s.bind(s, "777924"));
                      return s =>
                        (0, a.jsx)(n, {
                          ...s,
                          data: e,
                          file: l,
                          guildId: t.id,
                        });
                    });
                },
                buttonCTA:
                  E.default.Messages
                    .GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_UPLOAD_CTA,
                submitting: _,
                disabled: f || _ || 0 === T,
              }),
              (0, a.jsx)(o.default, { size: 24 }),
              (0, a.jsx)(r.EmojiTableTitle, {
                title:
                  E.default.Messages
                    .GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_EMOJI_SECTION_TITLE,
                maxSlots: t.getMaxRoleSubscriptionEmojiSlots(),
                emojiCount: I.length,
              }),
              (0, a.jsx)(r.EmojiTable, {
                guild: t,
                emojis: I,
                onEdit: (e, t) => {
                  (0, n.openModalLazy)(async () => {
                    let { UpdateEmojiRolesModal: l } = await s
                      .el("777924")
                      .then(s.bind(s, "777924"));
                    return s => (0, a.jsx)(l, { ...s, emoji: e, guildId: t });
                  });
                },
                editingDisabled: f,
              }),
            ],
          }),
        });
      }
    },
    498030: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return l;
          },
        }),
        s("222007");
      var a = s("476042");
      function l(e, t, s, l) {
        let [{ isDragging: n }, i, r] = (0, a.useDrag)({
            type: t,
            item: () => ({ index: s }),
            collect: e => ({ isDragging: e.isDragging() }),
          }),
          [, o] = (0, a.useDrop)({
            accept: t,
            hover(t, a) {
              if (null == e.current) return;
              let n = t.index;
              if (n === s) return;
              let i = e.current.getBoundingClientRect(),
                r = (i.bottom - i.top) / 2,
                o = a.getClientOffset(),
                d = o.y - i.top;
              if (!(n < s) || !(d < r))
                (!(n > s) || !(d > r)) && (l(n, s), (t.index = s));
            },
          });
        return { drag: i, dragPreview: r, drop: o, isDragging: n };
      }
    },
    179234: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return f;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("759843"),
        n = s("77078"),
        i = s("428958"),
        r = s("724334"),
        o = s("191814"),
        d = s("223984"),
        u = s("264742"),
        c = s("459662"),
        E = s("782340"),
        _ = s("267152"),
        I = s("419143");
      function T(e) {
        let { config: t } = e,
          { noticeText: s, ctaLabel: l, ctaClickable: i, onCtaClicked: r } = t;
        return (0, a.jsxs)("div", {
          className: _.ctaContainer,
          children: [
            (0, a.jsx)("img", {
              className: _.heroBanner,
              src: I,
              alt: E.default.Messages
                .GUILD_ROLE_SUBSCRIPTION_WELCOME_HERO_BANNER_ALT,
            }),
            (0, a.jsxs)("div", {
              className: _.ctaContent,
              children: [
                (0, a.jsx)(n.Heading, {
                  variant: "heading-xl/semibold",
                  color: "header-primary",
                  children:
                    E.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_WELCOME_DESKTOP_V2_TITLE,
                }),
                (0, a.jsx)(o.default, { size: 12 }),
                (0, a.jsx)(n.Text, {
                  variant: "text-md/normal",
                  color: "header-secondary",
                  children:
                    E.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_WELCOME_V2_SUBTITLE,
                }),
                (0, a.jsx)(o.default, { size: 24 }),
                (0, a.jsx)(u.default, {
                  className: _.waitlist,
                  color: d.MessageBlockColors.BROWN,
                  buttonPosition: u.WarningBlockButtonPosition.RIGHT,
                  notice: s,
                  ctaLabel: l,
                  ctaDisabled: !i,
                  ctaClassName: _.waitlistCtaButton,
                  onClick: r,
                }),
              ],
            }),
          ],
        });
      }
      function f(e) {
        let { guild: t, config: s } = e,
          {
            isLoading: o,
            error: d,
            creatorMonetizationOnboardingMarketing: u,
          } = (0, r.default)(t.id);
        return ((0, i.default)({
          type: l.ImpressionTypes.PANE,
          name: l.ImpressionNames.ENABLE_CREATOR_MONETIZATION_WAITLIST_LANDING,
          properties: { guild_id: t.id },
        }),
        o)
          ? (0, a.jsx)(n.Spinner, {})
          : (0, a.jsxs)("div", {
              className: _.container,
              children: [
                (0, a.jsx)(T, { config: s }),
                (0, a.jsx)(c.MarketingSections, {
                  onboardingMarketing: u,
                  onboardingMarketingError: d,
                }),
              ],
            });
      }
    },
    600471: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("395905"),
        n = s("264742"),
        i = s("782340");
      function r(e) {
        let t,
          {
            resubmittingEnableRequest: s,
            resubmissionError: r,
            createEnableRequest: o,
            requestRejectedNoticeText: d,
            reapplyNoticeText: u,
            isApplicationPending: c,
          } = e;
        if (null != r)
          return (0, a.jsx)(l.default, { children: r.getAnyErrorMessage() });
        let E = null;
        return (
          c
            ? (E =
                i.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_RECEIVED_AND_PENDING)
            : null != d
              ? (E = d)
              : null != u &&
                ((E = u),
                (t =
                  i.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SUBMIT_APPEAL_CTA)),
          null != E
            ? (0, a.jsx)(n.default, {
                notice: E,
                ctaLabel: t,
                ctaLoading: s,
                onClick: o,
              })
            : null
        );
      }
    },
    219772: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          ELIGIBILITY_MODAL_KEY: function () {
            return I;
          },
          default: function () {
            return m;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("77078"),
        i = s("670618"),
        r = s("191814"),
        o = s("423487"),
        d = s("395905"),
        u = s("600471"),
        c = s("782340"),
        E = s("285126"),
        _ = s("419143");
      let I = "role_subscriptions_eligibility_modal";
      function T(e) {
        let {
          guild: t,
          eligibility: l,
          eligibilityLoading: i,
          eligibilityError: r,
          refreshEligibility: d,
        } = e;
        return (0, a.jsxs)(n.Button, {
          color: n.ButtonColors.CUSTOM,
          className: E.ineligibleButton,
          innerClassName: E.ineligibleButtonContent,
          grow: !0,
          onClick: function () {
            (0, n.openModalLazy)(
              async () => {
                let { default: e } = await s
                  .el("702053")
                  .then(s.bind(s, "702053"));
                return s =>
                  (0, a.jsx)(e, {
                    ...s,
                    eligibility: l,
                    eligibilityLoading: i,
                    eligibilityError: r,
                    refreshEligibility: d,
                    guildId: t.id,
                  });
              },
              { modalKey: I }
            );
          },
          size: n.Button.Sizes.LARGE,
          children: [
            (0, a.jsx)(o.default, { height: 16, width: 16 }),
            c.default.Messages.GUILD_ROLE_SUBSCRIPTION_START_EARNING_CTA,
          ],
        });
      }
      function f(e) {
        let { guild: t, checkboxText: s } = e,
          {
            canSubmitAcceptance: o,
            error: u,
            loading: _,
            submitAcceptTermsRequest: I,
          } = (0, i.default)(t.id),
          [T, f] = l.useState(!1);
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(n.Checkbox, {
              onChange: function () {
                f(e => !e);
              },
              size: 20,
              type: n.Checkbox.Types.INVERTED,
              value: T,
              children: (0, a.jsx)(n.Text, {
                variant: "text-sm/normal",
                color: "header-secondary",
                children: s,
              }),
            }),
            (0, a.jsx)(r.default, { size: 24 }),
            (0, a.jsx)(n.Button, {
              className: E.ctaButton,
              disabled: !T || !o,
              grow: !0,
              onClick: I,
              size: n.Button.Sizes.LARGE,
              submitting: _,
              children:
                c.default.Messages.GUILD_ROLE_SUBSCRIPTION_START_EARNING_CTA,
            }),
            null != u &&
              (0, a.jsxs)(a.Fragment, {
                children: [
                  (0, a.jsx)(r.default, { size: 24 }),
                  (0, a.jsx)(d.default, { children: u.getAnyErrorMessage() }),
                ],
              }),
          ],
        });
      }
      function S(e) {
        let { guild: t, monetizationEligibility: s } = e,
          {
            eligibilityLoading: l,
            eligibilityError: n,
            refreshEligibility: i,
            eligibility: r,
            eligibleForMonetization: o,
            acceptTermsCheckboxText: d,
            wasRejectedInV1: c,
          } = s;
        return o
          ? c
            ? (0, a.jsx)(u.default, { ...s })
            : (0, a.jsx)(f, { guild: t, checkboxText: d })
          : (0, a.jsx)(T, {
              guild: t,
              eligibility: r,
              eligibilityLoading: l,
              eligibilityError: n,
              refreshEligibility: i,
            });
      }
      function m(e) {
        let { guild: t, monetizationEligibility: s } = e;
        return (0, a.jsxs)("div", {
          className: E.ctaContainer,
          children: [
            (0, a.jsx)("img", {
              className: E.heroBanner,
              src: _,
              alt: c.default.Messages
                .GUILD_ROLE_SUBSCRIPTION_WELCOME_HERO_BANNER_ALT,
            }),
            (0, a.jsxs)("div", {
              className: E.ctaContent,
              children: [
                (0, a.jsx)(n.Heading, {
                  variant: "heading-xl/semibold",
                  color: "header-primary",
                  children:
                    c.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_WELCOME_DESKTOP_V2_TITLE,
                }),
                (0, a.jsx)(r.default, { size: 12 }),
                (0, a.jsx)(n.Text, {
                  variant: "text-md/normal",
                  color: "header-secondary",
                  children:
                    c.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_WELCOME_V2_SUBTITLE,
                }),
                (0, a.jsx)(r.default, { size: 24 }),
                (0, a.jsx)(S, { guild: t, monetizationEligibility: s }),
              ],
            }),
          ],
        });
      }
    },
    222934: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return O;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("819855"),
        n = s("77078"),
        i = s("841098"),
        r = s("191814"),
        o = s("677795"),
        d = s("782340"),
        u = s("519419"),
        c = s("201894"),
        E = s("722838"),
        _ = s("497002"),
        I = s("437250"),
        T = s("382531"),
        f = s("865332"),
        S = s("439044"),
        m = s("912839"),
        N = s("600719");
      function g(e) {
        return (0, l.isThemeDark)(e)
          ? u.revenueSharePercentageDark
          : u.revenueSharePercentageLight;
      }
      function h() {
        let e = (0, i.default)(),
          t = {
            backgroundColor: (0, l.isThemeDark)(e)
              ? "#2e3638"
              : "var(--background-primary)",
          };
        return (0, a.jsxs)("div", {
          className: u.earningsPreviewContainer,
          style: t,
          children: [
            (0, a.jsxs)("div", {
              children: [
                (0, a.jsx)(n.Text, {
                  variant: "text-sm/normal",
                  color: "header-secondary",
                  children:
                    d.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_NEW_SUBS,
                }),
                (0, a.jsx)(r.default, { size: 8 }),
                (0, a.jsx)(n.Heading, {
                  variant: "heading-md/bold",
                  className: g(e),
                  children:
                    d.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_REVENUE_INCREASE,
                }),
              ],
            }),
            (0, a.jsx)("img", {
              className: u.roundAvatar,
              src: f,
              alt: d.default.Messages
                .GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_1_PREVIEW_IMG_ALT,
            }),
          ],
        });
      }
      function C() {
        let e = (0, i.default)();
        function t(e) {
          let { length: t, horizontal: s } = e;
          return (0, a.jsx)("div", {
            className: s ? u.horizontalConnector : u.verticalConnector,
            style: {
              ...(s ? { width: t } : { height: t }),
              border: "1px solid #49494933",
            },
          });
        }
        return (0, a.jsxs)("div", {
          className: u.avatarGridContainer,
          "aria-label":
            d.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_1_GRID_ARIA_LABEL,
          children: [
            (0, a.jsxs)("div", {
              className: u.avatarCard,
              children: [
                (0, a.jsx)(t, { length: 24 }),
                (0, a.jsx)("img", {
                  className: u.roundAvatar,
                  src: (0, l.isThemeDark)(e) ? c : E,
                  alt: "",
                }),
                (0, a.jsx)(t, { horizontal: !0, length: 12 }),
              ],
            }),
            (0, a.jsxs)("div", {
              className: u.avatarCard,
              children: [
                (0, a.jsx)(t, { length: 24 }),
                (0, a.jsx)("img", {
                  className: u.roundAvatar,
                  src: _,
                  alt: "",
                }),
              ],
            }),
            (0, a.jsxs)("div", {
              className: u.avatarCard,
              children: [
                (0, a.jsx)(t, { length: 12 }),
                (0, a.jsx)("img", {
                  className: u.roundAvatar,
                  src: I,
                  alt: "",
                }),
                (0, a.jsx)(t, { horizontal: !0, length: 12 }),
              ],
            }),
            (0, a.jsxs)("div", {
              className: u.avatarCard,
              children: [
                (0, a.jsx)(t, { length: 12 }),
                (0, a.jsx)("img", {
                  className: u.roundAvatar,
                  src: T,
                  alt: "",
                }),
              ],
            }),
          ],
        });
      }
      function R() {
        return (0, a.jsxs)("div", {
          className: u.earningBenefitCard,
          children: [
            (0, a.jsx)(n.Text, {
              variant: "text-md/normal",
              color: "header-secondary",
              children:
                d.default.Messages.GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_1,
            }),
            (0, a.jsx)(r.default, { size: 32 }),
            (0, a.jsx)(h, {}),
            (0, a.jsx)(r.default, { size: 24 }),
            (0, a.jsx)(C, {}),
          ],
        });
      }
      function x() {
        return (0, a.jsxs)("div", {
          className: u.followerBenefitCard,
          children: [
            (0, a.jsx)(n.Text, {
              className: u.followerBenefitText,
              variant: "text-md/normal",
              color: "header-secondary",
              children:
                d.default.Messages.GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_2,
            }),
            (0, a.jsx)("img", {
              className: u.roleSubscriptionSocial,
              src: N,
              alt: d.default.Messages
                .GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_2_IMG_1_ALT,
            }),
            (0, a.jsx)("img", {
              className: u.roleSubscriptionLanyardIllo,
              src: m,
              alt: d.default.Messages
                .GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_2_IMG_2_ALT,
            }),
          ],
        });
      }
      function L() {
        let e = (0, i.default)();
        return (0, a.jsxs)("div", {
          className: u.revenueShareBenefitCard,
          children: [
            (0, a.jsxs)("div", {
              children: [
                (0, a.jsxs)(n.Heading, {
                  className: g(e),
                  style: { fontSize: "50px", lineHeight: "52px" },
                  variant: "heading-xxl/extrabold",
                  children: [o.CREATOR_REVENUE_SHARE_PERCENTAGE, "%"],
                }),
                (0, a.jsx)(n.Text, {
                  variant: "text-md/normal",
                  color: "header-secondary",
                  children:
                    d.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_3,
                }),
              ],
            }),
            (0, a.jsx)("img", {
              className: u.roleSubscriptionEarningIllo,
              src: S,
              alt: d.default.Messages
                .GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_3_IMG_ALT,
            }),
          ],
        });
      }
      function O() {
        return (0, a.jsxs)("div", {
          children: [
            (0, a.jsx)(n.Heading, {
              variant: "heading-lg/semibold",
              color: "header-primary",
              children:
                d.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_BENEFITS_FOR_CREATORS_TITLE,
            }),
            (0, a.jsx)(r.default, { size: 24 }),
            (0, a.jsxs)("div", {
              className: u.creatorBenefitsContainer,
              children: [
                (0, a.jsx)(R, {}),
                (0, a.jsx)(x, {}),
                (0, a.jsx)(L, {}),
              ],
            }),
          ],
        });
      }
    },
    830388: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return R;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("414456"),
        n = s.n(l),
        i = s("77078"),
        r = s("430568"),
        o = s("545158"),
        d = s("20606"),
        u = s("813006"),
        c = s("476263"),
        E = s("191814"),
        _ = s("111462"),
        I = s("120856"),
        T = s("915675"),
        f = s("782340"),
        S = s("100629");
      function m(e) {
        let { subscribers: t } = e;
        return (0, a.jsxs)("div", {
          className: S.guildSubscriberCount,
          children: [
            (0, a.jsx)("div", {
              className: S.subscriberCountValue,
              children: (0, a.jsx)(i.Text, {
                variant: "text-md/normal",
                color: "always-white",
                children: t,
              }),
            }),
            (0, a.jsxs)("div", {
              className: S.subscriberCountText,
              children: [
                (0, a.jsx)(T.default, { color: d.default.WHITE }),
                (0, a.jsx)(i.Text, {
                  variant: "text-md/normal",
                  color: "always-white",
                  children:
                    f.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETTINGS_SUBSCRIBERS_LABEL,
                }),
              ],
            }),
          ],
        });
      }
      function N(e) {
        let {
            guildName: t,
            guildIcon: s,
            guildAvatarUrl: l,
            subscriberCount: n,
          } = e,
          r = new u.default({ name: t, icon: s });
        return (0, a.jsxs)("div", {
          className: S.guildCardHeader,
          children: [
            (0, a.jsx)(c.default, {
              className: S.guildCardHeaderAvatar,
              iconSrc: l,
              guild: r,
              size: c.default.Sizes.LARGE,
            }),
            (0, a.jsxs)("div", {
              className: S.guildCardHeaderTitle,
              children: [
                (0, a.jsx)(i.Heading, {
                  variant: "heading-lg/semibold",
                  color: "header-primary",
                  children: t,
                }),
                null != n && (0, a.jsx)(m, { subscribers: n }),
              ],
            }),
          ],
        });
      }
      function g(e) {
        let { quote: t, quoteAttribution: s, quoteAttributionTitle: l } = e;
        return (0, a.jsxs)("div", {
          className: S.guildCardQuote,
          children: [
            (0, a.jsx)(i.Text, {
              variant: "text-lg/normal",
              color: "interactive-active",
              children: t,
            }),
            (0, a.jsx)(i.Text, {
              variant: "text-md/normal",
              color: "interactive-active",
              children:
                f.default.Messages.GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_QUOTE_ATTRIBUTION.format(
                  {
                    attributionName: s,
                    attributionTitle:
                      null != l ? l : f.default.Messages.GUILD_OWNER,
                  }
                ),
            }),
          ],
        });
      }
      function h(e) {
        let { emojisToShow: t, notShownEmojiCount: s, storePageUrl: l } = e,
          d = null != t && t.length > 0,
          u = () => {
            null != l && (0, o.default)(l);
          };
        return (0, a.jsx)("div", {
          className: S.guildPremiumEmojis,
          children: d
            ? (0, a.jsxs)(a.Fragment, {
                children: [
                  (0, a.jsx)(i.Text, {
                    variant: "text-xs/semibold",
                    color: "header-primary",
                    className: S.premiumEmojisTitle,
                    children:
                      f.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_CARD_PREMIUM_EMOJI_TITLE,
                  }),
                  (0, a.jsxs)("div", {
                    className: S.premiumEmojisRow,
                    children: [
                      (0, a.jsxs)("div", {
                        className: n(
                          S.emojisContainer,
                          null != s && S.fullEmojisContainer
                        ),
                        children: [
                          t.map(e =>
                            (0, a.jsx)(
                              r.default,
                              {
                                className: S.emoji,
                                emojiId: e.id,
                                emojiName: e.name,
                                animated: e.animated,
                              },
                              e.id
                            )
                          ),
                          null != s &&
                            (0, a.jsx)("div", {
                              className: S.extraEmojiCount,
                              children: (0, a.jsxs)(i.Text, {
                                variant: "text-md/semibold",
                                color: "text-normal",
                                children: ["+", s],
                              }),
                            }),
                        ],
                      }),
                      (0, a.jsx)("div", {
                        children: (0, a.jsx)(i.Button, {
                          className: S.viewServerButton,
                          innerClassName: S.viewServerButtonText,
                          color: i.Button.Colors.CUSTOM,
                          disabled: null == l,
                          onClick: u,
                          children:
                            f.default.Messages
                              .GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_VIEW_SERVER_CTA,
                        }),
                      }),
                    ],
                  }),
                ],
              })
            : (0, a.jsx)(i.Button, {
                className: n(S.viewServerButton, S.roundedEdges),
                innerClassName: S.viewServerButtonText,
                color: i.Button.Colors.CUSTOM,
                disabled: null == l,
                onClick: u,
                children:
                  f.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_VIEW_SERVER_CTA,
              }),
        });
      }
      function C(e) {
        let { highlightedCreatorGuild: t } = e,
          {
            guild_id: s,
            quote: l,
            quote_attribution: n,
            quote_attribution_title: r,
          } = t,
          o = (0, _.default)(s, 4, 60),
          { isLoading: d, hasAllImperativeDetails: u } = o;
        if (d)
          return (0, a.jsx)("div", {
            className: S.guildCard,
            children: (0, a.jsx)(i.Spinner, {}),
          });
        if (!u) return null;
        let {
          guildIcon: c,
          guildName: E,
          guildAvatarUrl: I,
          subscriberCount: T,
          emojisToShow: f,
          notShownEmojiCount: m,
          storePageUrl: C,
        } = o.details;
        return (0, a.jsxs)("div", {
          className: S.guildCard,
          children: [
            (0, a.jsx)(N, {
              guildIcon: c,
              guildName: E,
              guildAvatarUrl: I,
              subscriberCount: T,
            }),
            (0, a.jsx)(g, {
              quote: l,
              quoteAttribution: n,
              quoteAttributionTitle: r,
            }),
            (0, a.jsx)(h, {
              emojisToShow: f,
              notShownEmojiCount: m,
              storePageUrl: C,
            }),
          ],
        });
      }
      function R(e) {
        let { highlightedCreators: t } = e;
        return (0, a.jsxs)("div", {
          children: [
            (0, a.jsx)(i.Heading, {
              variant: "heading-lg/semibold",
              color: "header-primary",
              children:
                f.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_GUILD_SECTION_TITLE,
            }),
            (0, a.jsx)(E.default, { size: 24 }),
            (0, a.jsx)(I.default, {
              carouselClassName: S.creatorGuildCarousel,
              items: t,
              renderItem: e => (0, a.jsx)(C, { highlightedCreatorGuild: e }),
              intervalBetweenAutomaticItemRotations: 7e3,
            }),
          ],
        });
      }
    },
    459662: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          MarketingSections: function () {
            return m;
          },
          default: function () {
            return N;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("759843"),
        n = s("77078"),
        i = s("428958"),
        r = s("205881"),
        o = s("724334"),
        d = s("756717"),
        u = s("395905"),
        c = s("219772"),
        E = s("222934"),
        _ = s("830388"),
        I = s("561496"),
        T = s("100072"),
        f = s("396076"),
        S = s("491942");
      function m(e) {
        let { onboardingMarketing: t, onboardingMarketingError: s } = e,
          l = e => {
            let { children: t } = e;
            return (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsx)(n.FormDivider, { className: S.sectionDivider }),
                t,
              ],
            });
          },
          i = (0, a.jsx)(
            l,
            { children: (0, a.jsx)(I.default, {}) },
            f.CreatorMonetizationOnboardingMarketingSection.HOW_IT_WORKS
          ),
          r = (0, a.jsx)(
            l,
            { children: (0, a.jsx)(E.default, {}) },
            f.CreatorMonetizationOnboardingMarketingSection.BENEFITS
          );
        return null != s || (null == t ? void 0 : t.sections) == null
          ? (0, a.jsxs)(a.Fragment, { children: [i, r] })
          : (0, a.jsx)(a.Fragment, {
              children: t.sections.map(e => {
                switch (e.type) {
                  case f.CreatorMonetizationOnboardingMarketingSection
                    .HOW_IT_WORKS:
                    return i;
                  case f.CreatorMonetizationOnboardingMarketingSection.BENEFITS:
                    return r;
                  case f.CreatorMonetizationOnboardingMarketingSection
                    .OTHER_CREATORS:
                    return (0, a.jsx)(
                      l,
                      {
                        children: (0, a.jsx)(_.default, {
                          highlightedCreators: e.creators,
                        }),
                      },
                      f.CreatorMonetizationOnboardingMarketingSection
                        .OTHER_CREATORS
                    );
                }
              }),
            });
      }
      function N(e) {
        let { guild: t } = e,
          s = (0, d.default)(t),
          { eligibilityLoading: E, eligibilityError: _, eligibility: I } = s,
          f = (0, r.useCreatorMonetizationIneligibleReasons)(I),
          {
            isLoading: N,
            error: g,
            creatorMonetizationOnboardingMarketing: h,
          } = (0, o.default)(t.id);
        return ((0, i.default)(
          {
            type: l.ImpressionTypes.PANE,
            name: l.ImpressionNames
              .ENABLE_CREATOR_MONETIZATION_ACCEPT_TERMS_LANDING,
            properties: {
              guild_id: t.id,
              is_owner: s.isGuildOwner,
              is_eligible: s.eligibleForMonetization,
              ineligible_reasons: f,
            },
          },
          { disableTrack: null == t.id || null == I }
        ),
        E || null == I || N)
          ? (0, a.jsx)(n.Spinner, {})
          : I.actionRequired
            ? (0, a.jsx)(T.default, { guild: t })
            : null != _
              ? (0, a.jsx)(u.default, { children: _.message })
              : (0, a.jsxs)("div", {
                  className: S.container,
                  children: [
                    (0, a.jsx)(c.default, {
                      guild: t,
                      monetizationEligibility: s,
                    }),
                    (0, a.jsx)(m, {
                      onboardingMarketing: h,
                      onboardingMarketingError: g,
                    }),
                  ],
                });
      }
    },
    561496: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return _;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("191814"),
        i = s("677795"),
        r = s("782340"),
        o = s("828127"),
        d = s("627150"),
        u = s("370730"),
        c = s("350233");
      function E(e) {
        let { imageSrc: t, description: s } = e;
        return (0, a.jsxs)("div", {
          className: o.howItWorksCard,
          children: [
            (0, a.jsx)("div", {
              className: o.howItWorksImageContainer,
              children: (0, a.jsx)("img", {
                className: o.howItWorksImage,
                src: t,
                alt: "",
              }),
            }),
            (0, a.jsx)("div", {
              className: o.howItWorksDescription,
              children: (0, a.jsx)(l.Text, {
                variant: "text-sm/normal",
                color: "header-primary",
                children: s,
              }),
            }),
          ],
        });
      }
      function _() {
        let e = [
          {
            imageSrc: c,
            description:
              r.default.Messages.GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_STEP_1,
          },
          {
            imageSrc: d,
            description:
              r.default.Messages.GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_STEP_2,
          },
          {
            imageSrc: u,
            description:
              r.default.Messages.GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_STEP_3,
          },
        ];
        return (0, a.jsxs)("div", {
          children: [
            (0, a.jsx)(l.Heading, {
              variant: "heading-lg/semibold",
              color: "header-primary",
              children:
                r.default.Messages.GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_TITLE,
            }),
            (0, a.jsx)(n.default, { size: 24 }),
            (0, a.jsx)("div", {
              className: o.howItWorksContainer,
              children: e.map(e =>
                (0, a.jsx)(
                  E,
                  { imageSrc: e.imageSrc, description: e.description },
                  e.imageSrc
                )
              ),
            }),
            (0, a.jsx)(n.default, { size: 24 }),
            (0, a.jsx)(l.Text, {
              variant: "text-sm/normal",
              color: "header-secondary",
              children:
                r.default.Messages.GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_FOOTER.format(
                  { creatorPortalUrl: i.CREATOR_REVENUE_PORTAL_URL }
                ),
            }),
          ],
        });
      }
    },
    100072: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return u;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("446674"),
        n = s("77078"),
        i = s("147314"),
        r = s("697218"),
        o = s("191814"),
        d = s("775559");
      function u(e) {
        let { guild: t } = e,
          s = (0, l.useStateFromStores)([r.default], () => {
            let e = r.default.getCurrentUser();
            return null != e && (null == t ? void 0 : t.isOwner(e)) === !0;
          }),
          u = () => {
            (0, i.showNewTerms)(t.id, { demonetized: !0 });
          };
        return (0, a.jsxs)("div", {
          className: d.container,
          children: [
            (0, a.jsx)(n.Heading, {
              variant: "heading-lg/semibold",
              color: "header-primary",
              children: "Monetization Temporarily Disabled",
            }),
            (0, a.jsx)(o.default, { size: 24 }),
            (0, a.jsx)(n.Text, {
              variant: "text-md/normal",
              color: "header-secondary",
              children:
                "This server is overdue for accepting our new terms of service so we've had to temporarily suspend monetization. Don't worry, existing subscribers can still access their benefits and renew their subscription. However, new subscriptions cannot be made until the owner accepts our new terms of service.",
            }),
            (0, a.jsx)(o.default, { size: 24 }),
            (0, a.jsx)(n.Tooltip, {
              text: "Only the server owner can accept new terms",
              shouldShow: !s,
              children: e =>
                (0, a.jsx)(n.Button, {
                  disabled: !s,
                  ...e,
                  onClick: u,
                  children: "Accept New Terms",
                }),
            }),
          ],
        });
      }
    },
    894429: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("75196");
      function n(e) {
        let {
          width: t = 24,
          height: s = 24,
          color: n = "currentColor",
          ...i
        } = e;
        return (0, a.jsx)("svg", {
          ...(0, l.default)(i),
          width: t,
          height: s,
          viewBox: "0 0 24 24",
          children: (0, a.jsx)("path", {
            d: "M22 9H10V7H22V9ZM22 12H2V14H22V12ZM22 17H2V19H22V17ZM9 5.41L7.59 4L4 7.59L2.41 6L1 7.41L4 10.41L9 5.41Z",
            fill: n,
          }),
        });
      }
    },
    110498: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("75196");
      function n(e) {
        let {
          width: t = 24,
          height: s = 24,
          color: n = "currentColor",
          ...i
        } = e;
        return (0, a.jsx)("svg", {
          ...(0, l.default)(i),
          width: t,
          height: s,
          viewBox: "0 0 18 18",
          children: (0, a.jsx)("path", {
            d: "M7.33366 17.3333C6.95866 17.3333 6.62533 17.0833 6.53366 16.7166L5.78366 13.975C5.55033 13.125 4.88366 12.45 4.02533 12.225L1.28366 11.475C0.916992 11.375 0.666992 11.0416 0.666992 10.6666C0.666992 10.2916 0.916992 9.95829 1.28366 9.86663L4.02533 9.11663C4.87533 8.88329 5.55033 8.21663 5.77533 7.35829L6.52533 4.61663C6.62533 4.24996 6.95866 3.99996 7.33366 3.99996C7.70866 3.99996 8.04199 4.24996 8.13366 4.61663L8.88366 7.35829C9.11699 8.20829 9.78366 8.88329 10.642 9.10829L13.3837 9.85829C13.7503 9.95829 14.0003 10.2916 14.0003 10.6666C14.0003 11.0416 13.7503 11.375 13.3837 11.4666L10.642 12.2166C9.79199 12.45 9.11699 13.1166 8.89199 13.975L8.14199 16.7166C8.04199 17.0833 7.70866 17.3333 7.33366 17.3333ZM14.0003 7.33329C13.8087 7.33329 13.6503 7.20829 13.6003 7.02496L13.2253 5.64996C13.1087 5.22496 12.7753 4.89163 12.3503 4.77496L10.9753 4.39996C10.792 4.34996 10.667 4.19163 10.667 3.99996C10.667 3.80829 10.792 3.64996 10.9753 3.59996L12.3503 3.22496C12.7753 3.10829 13.1087 2.77496 13.2253 2.34996L13.6003 0.974959C13.6503 0.791626 13.8087 0.666626 14.0003 0.666626C14.192 0.666626 14.3503 0.791626 14.4003 0.974959L14.7753 2.34996C14.892 2.77496 15.2253 3.10829 15.6503 3.22496L17.0253 3.59996C17.2087 3.64996 17.3337 3.80829 17.3337 3.99996C17.3337 4.19163 17.2087 4.34996 17.0253 4.39996L15.6503 4.77496C15.2253 4.89163 14.892 5.22496 14.7753 5.64996L14.4003 7.02496C14.3503 7.20829 14.192 7.33329 14.0003 7.33329Z",
            fill: n,
          }),
        });
      }
    },
    981737: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("75196");
      function n(e) {
        let {
          width: t = 24,
          height: s = 24,
          color: n = "currentColor",
          ...i
        } = e;
        return (0, a.jsx)("svg", {
          ...(0, l.default)(i),
          width: t,
          height: s,
          viewBox: "0 0 24 24",
          children: (0, a.jsx)("path", {
            d: "M12 4.5C12 3.67 11.33 3 10.5 3C9.67 3 9 3.67 9 4.5V11V14L5.4 11.3C5.15 11.11 4.84 11 4.5 11C3.67 11 3 11.67 3 12.5C3 12.88 3.14 13.23 3.37 13.49L8.8 19.64C9.57 20.51 10.66 21 11.8 21H15.5C18.54 21 21 18.54 21 15.5C21 12.84 19.11 10.62 16.61 10.11L12 9V4.5Z",
            fill: n,
          }),
        });
      }
    },
    53264: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return f;
          },
        });
      var a,
        l,
        n = s("37983");
      s("884691");
      var i = s("414456"),
        r = s.n(i),
        o = s("158352"),
        d = s("271560"),
        u = s("165169"),
        c = s("130437"),
        E = s("782340"),
        _ = s("168863"),
        I = s("74556");
      ((a = l || (l = {})).TIER_NAME = "tier_name"),
        (a.SUBSCRIBERS = "subscribers"),
        (a.AMOUNT = "amount"),
        (a.PRICE = "price");
      let T = [
        {
          key: "tier_name",
          cellClassName: _.tierNameColumn,
          renderHeader: () =>
            E.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_TIERS,
          render(e) {
            let t,
              { subscriptionListing: s } = e;
            if (null != s) {
              let e =
                (null == s ? void 0 : s.image_asset) == null
                  ? void 0
                  : (0, d.getAssetURL)(s.application_id, s.image_asset, 128);
              t = (0, n.jsxs)(n.Fragment, {
                children: [
                  (0, n.jsx)("img", {
                    src: e,
                    alt: "",
                    className: _.tierImage,
                  }),
                  s.name,
                ],
              });
            }
            return (0, n.jsx)(c.Cell, {
              className: _.tierNameCell,
              children: t,
            });
          },
        },
        {
          key: "subscribers",
          cellClassName: r(_.subscribersColumn, I.cellAlignRight),
          renderHeader: () =>
            E.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_MEMBERS,
          render: e =>
            (0, n.jsx)(c.SubscribersCell, { children: e.roleMemberCount }),
        },
        {
          key: "price",
          cellClassName: r(_.priceColumn, I.cellAlignRight),
          renderHeader: () =>
            E.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_PRICE,
          render(e) {
            let { subscriptionListing: t } = e,
              s = null == t ? void 0 : t.subscription_plans[0],
              a = null == s ? void 0 : s.price;
            return (0, n.jsx)(c.CurrencyAmountCell, { children: a });
          },
        },
      ];
      var f = e => {
        let { totalPayoutsForPeriod: t, guildId: s, className: a } = e,
          l = (0, u.default)(s, t);
        return (0, n.jsx)("div", {
          className: r(I.tableContainer, a),
          children: (0, n.jsx)(o.default, {
            columns: T,
            data: l,
            className: r(I.table, _.table),
            rowClassName: _.row,
            headerClassName: r(I.header, _.header),
          }),
        });
      };
    },
    966082: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return L;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("835706"),
        i = s("191814"),
        r = s("781896"),
        o = s("153160"),
        d = s("257869"),
        u = s("837008"),
        c = s("757715"),
        E = s("619389"),
        _ = s("44737"),
        I = s("53264"),
        T = s("130437"),
        f = s("940958"),
        S = s("657650"),
        m = s("441901"),
        N = s("49111"),
        g = s("782340"),
        h = s("60624");
      function C(e) {
        let { payoutsByPeriod: t, team: s } = e,
          n = (0, c.useRoleSubscriptionSettingsDisabled)(),
          r = n
            ? null
            : g.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_EDIT_PAYMENT_METHOD_LINK.format(
                {
                  url:
                    null != s
                      ? N.MarketingURLs.DEVELOPER_PORTAL_PAYOUT_SETTINGS(s.id)
                      : null,
                }
              );
        return 0 === t.length
          ? (0, a.jsxs)(l.FormText, {
              type: l.FormText.Types.DESCRIPTION,
              children: [
                g.default.Messages
                  .GUILD_ROLE_SUBSCRIPTION_EARNINGS_EARNINGS_HISTORY_EMPTY,
                " ",
                r,
              ],
            })
          : (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsxs)(l.FormText, {
                  type: l.FormText.Types.DESCRIPTION,
                  children: [
                    g.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_EARNINGS_EARNINGS_HISTORY_DESCRIPTION,
                    " ",
                    r,
                  ],
                }),
                (0, a.jsx)(i.default, { size: 16 }),
                (0, a.jsx)(T.default, { payoutsByPeriod: t }),
              ],
            });
      }
      function R(e) {
        let { guildId: t, totalPayoutsForPeriod: s } = e,
          l = (0, u.useSubscriptionListingsForGuild)(t, {
            includeSoftDeleted: !0,
          });
        return null == s && 0 === l.length
          ? null
          : (0, a.jsx)(I.default, {
              totalPayoutsForPeriod: s,
              guildId: t,
              className: h.currentMonthEarningsTable,
            });
      }
      let x = e => {
        var t, s;
        let { guildId: d, application: u } = e,
          {
            loading: I,
            team: T,
            currentPeriod: x,
            allPeriods: L,
            metrics: O,
          } = (0, E.default)(d, u),
          p = (0, _.useRoleSubscriptionInsightsAccess)(d),
          A = (0, c.useRoleSubscriptionSettingsDisabled)();
        return I
          ? (0, a.jsx)(l.Spinner, {})
          : (0, a.jsxs)(a.Fragment, {
              children: [
                p &&
                  (0, a.jsxs)(a.Fragment, {
                    children: [
                      (0, a.jsx)(n.default, {
                        children:
                          g.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_INSIGHTS_NOTICE_TEXT.format(
                            {
                              insightsURL:
                                N.MarketingURLs.DEVELOPER_PORTAL_GUILD_ANALYTICS_ROLE_SUBSCRIPTION(
                                  d
                                ),
                            }
                          ),
                      }),
                      (0, a.jsx)(i.default, { size: 32 }),
                    ],
                  }),
                (0, a.jsxs)(l.FormSection, {
                  title:
                    g.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_HEADER,
                  className: h.formSection,
                  children: [
                    (0, a.jsx)(i.default, { size: 8 }),
                    (0, a.jsxs)("div", {
                      className: h.metricsContainer,
                      children: [
                        (0, a.jsx)(f.default, {
                          label:
                            g.default.Messages
                              .GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_REVENUE,
                          value: (0, o.formatPrice)(
                            null !== (t = O.revenue) && void 0 !== t ? t : 0,
                            N.CurrencyCodes.USD
                          ),
                          additionalContent: (0, a.jsx)(f.MetricTrend, {
                            value: O.revenuePctChange,
                            isPercent: !0,
                          }),
                        }),
                        (0, a.jsx)(f.default, {
                          label:
                            g.default.Messages
                              .GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_SUBSCRIBERS,
                          value: (0, a.jsxs)(a.Fragment, {
                            children: [
                              null !== (s = O.subscribers) && void 0 !== s
                                ? s
                                : "-",
                              " ",
                              (0, a.jsx)(r.default, {
                                className: h.totalMembersIcon,
                                "aria-hidden": !0,
                              }),
                            ],
                          }),
                          additionalContent: (0, a.jsx)(f.MetricTrend, {
                            value: O.subscriberChange,
                          }),
                        }),
                      ],
                    }),
                    (0, a.jsx)(R, { guildId: d, totalPayoutsForPeriod: x }),
                  ],
                }),
                (0, a.jsx)(l.FormSection, {
                  title:
                    g.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_EARNINGS_EARNINGS_HISTORY_HEADER,
                  className: h.formSection,
                  children: (0, a.jsx)(C, { payoutsByPeriod: L, team: T }),
                }),
                (0, a.jsx)(l.FormSection, {
                  title:
                    g.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_TITLE,
                  disabled: A,
                  className: h.formSection,
                  children: (0, a.jsx)(S.default, {
                    guildId: d,
                    application: u,
                  }),
                }),
                (0, a.jsx)(l.FormSection, {
                  title:
                    g.default.Messages
                      .CREATOR_MONETIZATION_SETTINGS_DISABLE_MONETIZATION_SECTION_TITLE,
                  className: h.formSection,
                  children: (0, a.jsx)(m.default, {
                    guildId: d,
                    allPeriods: L,
                  }),
                }),
              ],
            });
      };
      function L(e) {
        return (0, a.jsx)(d.GroupListingsFetchContextProvider, {
          guildId: e.guildId,
          children: (0, a.jsx)(x, { ...e }),
        });
      }
    },
    657960: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return D;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("446674"),
        i = s("77078"),
        r = s("545158"),
        o = s("7331"),
        d = s("615303"),
        u = s("827159"),
        c = s("963393"),
        E = s("719887"),
        _ = s("697218"),
        I = s("471671"),
        T = s("37785"),
        f = s("599110"),
        S = s("837008"),
        m = s("757715"),
        N = s("352807"),
        g = s("417186"),
        h = s("441901"),
        C = s("341020"),
        R = s("49111"),
        x = s("988268"),
        L = s("810367"),
        O = s("782340"),
        p = s("775261");
      function A(e) {
        let { onCreateTeamClick: t, isGuildOwner: s } = e;
        return (0, a.jsx)("div", {
          className: p.selectTeamContainer,
          children: (0, a.jsx)(i.Button, {
            disabled: !s,
            onClick: t,
            className: p.enableTicketingButton,
            fullWidth: !0,
            children: O.default.Messages.GUILD_MONETIZATION_ENABLE_CREATE_TEAM,
          }),
        });
      }
      function M(e) {
        let { guild: t, eligibleTeams: s, isGuildOwner: n } = e,
          [r, o] = l.useState(),
          {
            enableGuildMonetizationForTeam: u,
            submitting: c,
            error: E,
          } = (0, d.default)(),
          { fetchSubscriptionsSettings: _ } = (0,
          S.useFetchSubscriptionsSettings)(),
          I = (0, m.useRoleSubscriptionSettingsDisabled)(),
          T = l.useMemo(
            () => s.map(e => ({ label: e.name, value: e.id })),
            [s]
          ),
          f = async () => {
            let e = await u(t, r, x.ApplicationTypes.GUILD_ROLE_SUBSCRIPTIONS);
            e &&
              (_(t.id),
              (0, N.openActionCompleteSuccessModal)({
                Icon: C.default,
                title:
                  O.default.Messages
                    .GUILD_MONETIZATION_ENABLE_CONFIRMATION_TITLE,
                body: O.default.Messages
                  .GUILD_MONETIZATION_ENABLE_CONFIRMATION_SUBTITLE,
              }));
          };
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsxs)("div", {
              className: p.selectTeamContainer,
              children: [
                (0, a.jsx)(i.SingleSelect, {
                  className: p.teamSelect,
                  options: T,
                  placeholder:
                    O.default.Messages
                      .GUILD_MONETIZATION_ENABLE_SELECT_PLACEHOLDER,
                  value: r,
                  isDisabled: 0 === T.length || I || !n,
                  onChange: e => o(e),
                  "aria-label":
                    O.default.Messages
                      .GUILD_MONETIZATION_ENABLE_SELECT_PLACEHOLDER,
                }),
                (0, a.jsx)(i.Button, {
                  onClick: f,
                  className: p.enableTicketingButton,
                  submitting: c,
                  disabled: null == r || I || !n,
                  children: O.default.Messages.GUILD_MONETIZATION_ENABLE_CTA,
                }),
              ],
            }),
            null != E &&
              (0, a.jsx)(i.Text, {
                className: p.error,
                variant: "text-sm/normal",
                children: E.getAnyErrorMessage(),
              }),
          ],
        });
      }
      var D = e => {
        let { guild: t } = e,
          s = (0, n.useStateFromStores)([_.default], () =>
            _.default.getCurrentUser()
          ),
          d = t.isOwner(s),
          S = (0, o.useIsExpeditedOnboardingGuild)(t),
          m = (0, n.useStateFromStores)([I.default], () =>
            I.default.isFocused()
          ),
          { teams: N, loading: C } = (0, E.default)({ refreshOnDepChange: m }),
          x = l.useMemo(
            () =>
              N.filter(e => {
                var t;
                return (
                  e.payout_account_status !== L.PayoutAccountStatuses.BLOCKED &&
                  (0, c.isUserTeamAdministrator)(
                    null !== (t = null == s ? void 0 : s.id) && void 0 !== t
                      ? t
                      : R.EMPTY_STRING_SNOWFLAKE_ID,
                    e
                  )
                );
              }),
            [N, s]
          ),
          D = x.length > 0,
          v = l.useCallback(async () => {
            f.default.track(
              R.AnalyticEvents.GUILD_ROLE_SUBSCRIPTION_TEAM_SETUP_CLICKED,
              {
                is_onboarding_v2: S,
                has_eligible_team: D,
                guild_id: t.id,
                is_owner: d,
              }
            );
            let e = await (0, u.generateDeveloperPortalLink)(
              R.RelativeMarketingURLs.DEVELOPER_PORTAL_TEAMS
            );
            (0, r.default)(e);
          }, [t, d, S, D]),
          G = l.useCallback(
            e => (d ? (0, a.jsx)(T.default, { onClick: v, children: e }) : e),
            [v, d]
          );
        return C
          ? (0, a.jsx)(i.Spinner, {})
          : (0, a.jsxs)(a.Fragment, {
              children: [
                !d &&
                  (0, a.jsx)(g.default, {
                    className: p.nonOwnerNotice,
                    children:
                      O.default.Messages
                        .GUILD_MONETIZATION_ENABLE_NON_OWNER_WARNING,
                  }),
                (0, a.jsxs)(i.FormSection, {
                  title: O.default.Messages.GUILD_MONETIZATION_ENABLE_HEADER,
                  disabled: !d,
                  children: [
                    (0, a.jsx)(i.FormText, {
                      type: i.FormText.Types.DESCRIPTION,
                      className: p.description,
                      disabled: !d,
                      children:
                        O.default.Messages.GUILD_MONETIZATION_ENABLE_DESCRIPTION.format(
                          { onCreateTeamHook: G }
                        ),
                    }),
                    D
                      ? (0, a.jsx)(M, {
                          guild: t,
                          eligibleTeams: x,
                          isGuildOwner: d,
                        })
                      : (0, a.jsx)(A, {
                          onCreateTeamClick: v,
                          isGuildOwner: d,
                        }),
                  ],
                }),
                (0, a.jsx)(i.FormSection, {
                  title:
                    O.default.Messages
                      .CREATOR_MONETIZATION_SETTINGS_DISABLE_MONETIZATION_SECTION_TITLE,
                  className: p.selfDemonetization,
                  children: (0, a.jsx)(h.default, {
                    guildId: t.id,
                    allPeriods: [],
                  }),
                }),
              ],
            });
      };
    },
    751886: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return d;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("986399"),
        i = s("966082"),
        r = s("657960"),
        o = s("988268"),
        d = e => {
          let { guild: t } = e,
            { application: s, loading: d } = (0, n.default)(
              t.id,
              o.ApplicationTypes.GUILD_ROLE_SUBSCRIPTIONS
            );
          return d
            ? (0, a.jsx)(l.Spinner, {})
            : null != s
              ? (0, a.jsx)(i.default, { guildId: t.id, application: s })
              : (0, a.jsx)(r.default, { guild: t });
        };
    },
    130437: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          Cell: function () {
            return v;
          },
          CurrencyAmountCell: function () {
            return G;
          },
          SubscribersCell: function () {
            return b;
          },
          default: function () {
            return H;
          },
        }),
        s("424973"),
        s("222007");
      var a,
        l,
        n = s("37983"),
        i = s("884691"),
        r = s("414456"),
        o = s.n(r),
        d = s("866227"),
        u = s.n(d),
        c = s("446674"),
        E = s("77078"),
        _ = s("717559"),
        I = s("158352"),
        T = s("578706"),
        f = s("381546"),
        S = s("68238"),
        m = s("781896"),
        N = s("772280"),
        g = s("153160"),
        h = s("648825"),
        C = s("434014"),
        R = s("488499"),
        x = s("860598"),
        L = s("445940"),
        O = s("49111"),
        p = s("397056"),
        A = s("782340"),
        M = s("74556");
      ((l = a || (a = {})).DROPDOWN = "dropdown"),
        (l.PERIOD = "period"),
        (l.SUBSCRIBERS = "subscribers"),
        (l.AMOUNT = "amount"),
        (l.STATUS = "status");
      let D = (e, t, s, a) => {
          let l = null != a ? u(a).add(15, "days").toISOString() : void 0,
            i = (0, C.formatNextPaymentDate)(l, "MMM D");
          switch (e) {
            case p.PaymentPayoutGroupStatuses.OPEN:
              return (0, n.jsxs)(n.Fragment, {
                children: [
                  null != i
                    ? A.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PENDING_OR_SCHEDULED_WITH_DATE.format(
                        { payoutDate: i }
                      )
                    : A.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PENDING,
                  (0, n.jsx)(x.default, { className: M.statusScheduledIcon }),
                ],
              });
            case p.PaymentPayoutGroupStatuses.CANCELED:
              return (0, n.jsxs)(n.Fragment, {
                children: [
                  A.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_CANCELLED,
                  (0, n.jsx)(f.default, { className: M.statusErrorIcon }),
                ],
              });
            case p.PaymentPayoutGroupStatuses.PAYOUT_DEFERRED:
              if (
                (null == s
                  ? void 0
                  : s.includes(
                      p.PaymentPayoutGroupDeferralReasons.PAYOUT_SEIZED
                    )) === !0
              )
                return (0, n.jsxs)(n.Fragment, {
                  children: [
                    A.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_CANCELLED,
                    (0, n.jsx)(f.default, { className: M.statusErrorIcon }),
                  ],
                });
              return (0, n.jsxs)(n.Fragment, {
                children: [
                  A.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_DEFERRED,
                  (0, n.jsx)(L.default, { className: M.statusDeferredIcon }),
                ],
              });
          }
          switch (t) {
            case p.PayoutStatuses.MANUAL:
            case p.PayoutStatuses.OPEN:
            case p.PayoutStatuses.PENDING:
            case p.PayoutStatuses.PROCESSING:
            case p.PayoutStatuses.SUBMITTED:
            case p.PayoutStatuses.PENDING_FUNDS:
            case p.PayoutStatuses.CANCELED:
            case p.PayoutStatuses.ERROR:
              return (0, n.jsxs)(n.Fragment, {
                children: [
                  null != i
                    ? A.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PENDING_OR_SCHEDULED_WITH_DATE.format(
                        { payoutDate: i }
                      )
                    : A.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_SCHEDULED,
                  (0, n.jsx)(x.default, { className: M.statusScheduledIcon }),
                ],
              });
            case p.PayoutStatuses.PAID:
              return (0, n.jsxs)(n.Fragment, {
                children: [
                  A.default.Messages
                    .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PAID,
                  (0, n.jsx)(T.default, { className: M.statusPaidIcon }),
                ],
              });
            case p.PayoutStatuses.DEFERRED:
            case p.PayoutStatuses.DEFERRED_INTERNAL:
            case p.PayoutStatuses.REJECTED:
            case p.PayoutStatuses.RISK_REVIEW:
              return (0, n.jsxs)(n.Fragment, {
                children: [
                  R.default.getStatusErrorText(t),
                  (0, n.jsx)(f.default, { className: M.statusErrorIcon }),
                ],
              });
          }
          return null;
        },
        v = e => {
          let { children: t, className: s } = e;
          return (0, n.jsx)("div", { className: o(M.cell, s), children: t });
        },
        G = e => {
          let { children: t } = e;
          return (0, n.jsx)("div", {
            className: M.cell,
            children: (0, g.formatPrice)(
              null != t ? t : 0,
              O.CurrencyCodes.USD
            ),
          });
        },
        j = e => {
          let { children: t } = e;
          return (0, n.jsx)(v, {
            className: M.statusCell,
            children: null != t ? t : "-",
          });
        },
        U = e => {
          let { children: t } = e;
          return (0, n.jsx)(v, {
            className: M.periodCell,
            children: u(t).utc().format("MMMM YYYY"),
          });
        },
        P = e => {
          var t;
          let { listingId: s } = e,
            a = (0, c.useStateFromStores)([h.default], () =>
              h.default.getSubscriptionListing(s)
            ),
            l =
              null !== (t = null == a ? void 0 : a.name) && void 0 !== t
                ? t
                : "[".concat(
                    A.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_TIER_DELETED,
                    "]"
                  );
          return (0, n.jsx)(v, { children: l });
        },
        b = e => {
          let { children: t } = e;
          return (0, n.jsxs)(v, {
            className: M.subscribersCell,
            children: [
              null != t ? t : "-",
              " ",
              (0, n.jsx)(m.default, {
                className: M.subscribersIcon,
                "aria-hidden": !0,
              }),
            ],
          });
        },
        B = () => {
          let e = (0, n.jsx)(E.Tooltip, {
            text: A.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_AMOUNT_DISCLAIMER,
            children: e =>
              (0, n.jsx)(S.default, { className: M.amountDisclaimer, ...e }),
          });
          return (0, n.jsxs)(n.Fragment, {
            children: [
              A.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_AMOUNT,
              " ",
              e,
            ],
          });
        },
        y = () => {
          let e = (0, n.jsx)(E.Tooltip, {
            text: A.default.Messages
              .GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_NEXT_PAYMENT_DISCLAIMER,
            children: e =>
              (0, n.jsx)(S.default, { className: M.statusDisclaimer, ...e }),
          });
          return (0, n.jsxs)(n.Fragment, {
            children: [
              A.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS,
              " ",
              e,
            ],
          });
        },
        F = [
          {
            key: "dropdown",
            cellClassName: M.toggleExpandColumn,
            renderHeader: () => null,
            render(e, t) {
              let { expandedRows: s, onToggleExpandRow: a } = t,
                l = s.has(e.key);
              return (0, n.jsx)(E.Clickable, {
                className: o(M.cell, M.toggleExpandCell),
                onClick: () => a(e.key),
                children: (0, n.jsx)(N.default, {
                  className: o(M.caretIcon, { [M.caretDownIcon]: l }),
                }),
              });
            },
          },
          {
            key: "period",
            cellClassName: M.periodColumn,
            renderHeader: () =>
              A.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_PERIOD,
            render(e, t) {
              let { expandedRows: s } = t,
                a = [(0, n.jsx)(U, { children: e.periodStartingAt }, e.key)],
                l = s.has(e.key);
              if (l)
                for (let t in e.ppgs)
                  a.push((0, n.jsx)(P, { listingId: t }, t));
              return a;
            },
          },
          {
            key: "amount",
            cellClassName: o(M.amountColumn, M.cellAlignRight),
            renderHeader: () => (0, n.jsx)(B, {}),
            render(e, t) {
              let { expandedRows: s } = t,
                a = [(0, n.jsx)(G, { children: e.amount }, e.key)],
                l = s.has(e.key);
              if (l)
                for (let t in e.ppgs) {
                  let s = e.ppgs[t];
                  a.push(
                    (0, n.jsx)(
                      G,
                      { children: null == s ? void 0 : s.amount },
                      t
                    )
                  );
                }
              return a;
            },
          },
          {
            key: "status",
            cellClassName: o(M.statusColumn, M.cellAlignRight),
            renderHeader: () => (0, n.jsx)(y, {}),
            render(e) {
              let {
                ppgStatus: t,
                payoutStatus: s,
                ppgDeferralReasons: a,
                periodEndDate: l,
              } = (0, _.getStatusForPeriod)(e);
              return (0, n.jsx)(j, { children: D(t, s, a, l) });
            },
          },
        ];
      var H = e => {
        let { payoutsByPeriod: t } = e,
          [s, a] = i.useState(new Set());
        return (0, n.jsx)("div", {
          className: M.tableContainer,
          children: (0, n.jsx)(I.default, {
            columns: F,
            data: t,
            className: M.table,
            rowClassName: M.row,
            headerClassName: M.header,
            cellProps: {
              onToggleExpandRow: e => {
                a(t => {
                  let s = new Set(t);
                  return s.has(e) ? s.delete(e) : s.add(e), s;
                });
              },
              expandedRows: s,
            },
          }),
        });
      };
    },
    940958: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          MetricTrend: function () {
            return E;
          },
          default: function () {
            return _;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("414456"),
        n = s.n(l),
        i = s("77078"),
        r = s("68238"),
        o = s("434014"),
        d = s("223968"),
        u = s("782340"),
        c = s("447403");
      let E = e => {
        let { value: t, isPercent: s } = e;
        if (null == t) return null;
        let { formattedValue: l, isPositive: r } = (0, o.formatMetricTrend)(
          t,
          s
        );
        return (0, a.jsxs)("div", {
          className: c.trendContainer,
          children: [
            (0, a.jsx)(d.default, {
              className: n(c.chartLineIcon, { [c.chartLineIconNegative]: !r }),
            }),
            (0, a.jsx)(i.Text, {
              variant: "text-md/normal",
              className: c.trendDescription,
              children:
                u.default.Messages.GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_TREND_DESCRIPTION.format(
                  { value: l }
                ),
            }),
          ],
        });
      };
      var _ = e => {
        let {
          label: t,
          sublabel: s,
          value: l,
          additionalContent: n,
          tooltip: o,
        } = e;
        return (0, a.jsxs)("div", {
          className: c.container,
          children: [
            (0, a.jsxs)("div", {
              children: [
                (0, a.jsxs)("div", {
                  className: c.labelContainer,
                  children: [
                    (0, a.jsx)(i.Text, {
                      variant: "text-xs/medium",
                      className: c.label,
                      children: t,
                    }),
                    null != o &&
                      (0, a.jsx)(i.Tooltip, {
                        text: o,
                        children: e =>
                          (0, a.jsx)(r.default, {
                            className: c.labelTooltipIcon,
                            ...e,
                          }),
                      }),
                    null != s
                      ? (0, a.jsx)(i.Text, {
                          variant: "text-xs/normal",
                          className: c.sublabel,
                          children: s,
                        })
                      : null,
                  ],
                }),
                (0, a.jsx)(i.Text, {
                  className: c.value,
                  variant: "text-sm/normal",
                  children: l,
                }),
              ],
            }),
            n,
          ],
        });
      };
    },
    657650: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("65597"),
        n = s("77078"),
        i = s("305961"),
        r = s("697218"),
        o = s("191814"),
        d = s("757715"),
        u = s("782340");
      function c(e) {
        let { guildId: t, application: c } = e,
          E = (0, l.default)([i.default], () => i.default.getGuild(t)),
          _ = (0, l.default)([r.default], () => r.default.getCurrentUser()),
          I = (0, d.useRoleSubscriptionSettingsDisabled)();
        if (null == E) return null;
        let T = E.isOwner(_);
        if (!T) return null;
        let f = c.team;
        return (0, a.jsxs)("div", {
          children: [
            (0, a.jsx)(n.FormText, {
              type: n.FormText.Types.DESCRIPTION,
              disabled: I,
              children:
                null != f
                  ? u.default.Messages.GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_DESCRIPTION.format(
                      { teamName: f.name }
                    )
                  : u.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_NO_TEAM_DESCRIPTION,
            }),
            (0, a.jsx)(o.default, { size: 16 }),
            (0, a.jsx)(n.Button, {
              look: n.Button.Looks.FILLED,
              color:
                null != f ? n.Button.Colors.PRIMARY : n.Button.Colors.BRAND_NEW,
              onClick: () => {
                var e;
                return (
                  (e = c),
                  void (0, n.openModalLazy)(async () => {
                    let { default: t } = await s
                      .el("996220")
                      .then(s.bind(s, "996220"));
                    return s => (0, a.jsx)(t, { ...s, application: e });
                  })
                );
              },
              disabled: I,
              children:
                null != f
                  ? u.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_CHANGE_TEAM_CTA
                  : u.default.Messages
                      .GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_SELECT_TEAM_CTA,
            }),
          ],
        });
      }
    },
    441901: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return _;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("65597"),
        n = s("77078"),
        i = s("465869"),
        r = s("442379"),
        o = s("305961"),
        d = s("191814"),
        u = s("837008"),
        c = s("397056"),
        E = s("782340");
      function _(e) {
        let { guildId: t, allPeriods: _ } = e,
          I = (0, l.default)([o.default], () => o.default.getGuild(t)),
          T = (0, u.useSubscriptionListingsForGuild)(t, {
            includeSoftDeleted: !0,
          }),
          f = (0, r.useGuildProductsForGuild)(t, { publishedOnly: !1 }),
          { allowSelfRemoveMonetization: S } = (0,
          i.useShouldRestrictUpdatingCreatorMonetizationSettings)(t),
          m = _.filter(e => {
            var t;
            let s = Object.values(
              null !== (t = e.ppgs) && void 0 !== t ? t : {}
            )[0];
            return (
              (null == s ? void 0 : s.status) ===
                c.PaymentPayoutGroupStatuses.OPEN ||
              (null == s ? void 0 : s.status) ===
                c.PaymentPayoutGroupStatuses.PAYOUT_DEFERRED
            );
          }),
          N = T.length > 0,
          g = f.length > 0,
          h = m.length > 0;
        return null == I
          ? null
          : (0, a.jsxs)("div", {
              children: [
                (0, a.jsx)(n.FormText, {
                  type: n.FormText.Types.DESCRIPTION,
                  children:
                    E.default.Messages.CREATOR_MONETIZATION_SETTINGS_DISABLE_MONETIZATION_SECTION_DESCRIPTION.format(
                      { guildName: I.toString() }
                    ),
                }),
                (0, a.jsx)(d.default, { size: 16 }),
                (0, a.jsx)(n.Button, {
                  disabled: !S || N || g || h,
                  look: n.Button.Looks.FILLED,
                  color: n.Button.Colors.RED,
                  onClick: () => {
                    var e;
                    return (
                      (e = I),
                      void (0, n.openModalLazy)(async () => {
                        let { default: t } = await s
                          .el("264514")
                          .then(s.bind(s, "264514"));
                        return s => (0, a.jsx)(t, { ...s, guild: e });
                      })
                    );
                  },
                  children:
                    E.default.Messages
                      .CREATOR_MONETIZATION_SETTINGS_DISABLE_MONETIZATION_CTA,
                }),
              ],
            });
      }
    },
    223968: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("75196");
      function n(e) {
        let {
          width: t = 24,
          height: s = 24,
          color: n = "currentColor",
          ...i
        } = e;
        return (0, a.jsx)("svg", {
          ...(0, l.default)(i),
          width: t,
          height: s,
          viewBox: "0 0 20 20",
          children: (0, a.jsx)("path", {
            d: "M12.5 3.33334V5H17.1583L11.6667 10.4917L8.33333 7.15834L0 15.4917L1.175 16.6667L8.33333 9.50834L11.6667 12.8417L18.3333 6.175V10.8333H20V3.33334H12.5Z",
            fill: n,
          }),
        });
      }
    },
    860598: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("75196");
      function n(e) {
        let {
          width: t = 24,
          height: s = 24,
          color: n = "currentColor",
          ...i
        } = e;
        return (0, a.jsx)("svg", {
          ...(0, l.default)(i),
          width: t,
          height: s,
          viewBox: "0 0 20 20",
          children: (0, a.jsx)("path", {
            fillRule: "evenodd",
            clipRule: "evenodd",
            fill: n,
            d: "M10 20C15.5228 20 20 15.5228 20 10C20 4.47715 15.5228 0 10 0C4.47715 0 0 4.47715 0 10C0 15.5228 4.47715 20 10 20ZM7.5 5.5V6.17157C7.5 6.30418 7.55268 6.43136 7.64645 6.52513L10 8.87868L12.3536 6.52513C12.4473 6.43136 12.5 6.30418 12.5 6.17157V5.5H7.5ZM6.58579 7.58579L9 10L6.58579 12.4142C6.21071 12.7893 6 13.298 6 13.8284V15C6 15.5523 6.44772 16 7 16L13 16C13.5523 16 14 15.5523 14 15V13.8284C14 13.298 13.7893 12.7893 13.4142 12.4142L11 10L13.4142 7.58579C13.7893 7.21071 14 6.70201 14 6.17157V5C14 4.44772 13.5523 4 13 4H7C6.44772 4 6 4.44772 6 5V6.17157C6 6.70201 6.21071 7.21071 6.58579 7.58579Z",
          }),
        });
      }
    },
    445940: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("75196");
      function n(e) {
        let {
          width: t = 24,
          height: s = 24,
          color: n = "currentColor",
          foreground: i,
          ...r
        } = e;
        return (0, a.jsx)("svg", {
          ...(0, l.default)(r),
          width: t,
          height: s,
          viewBox: "0 0 24 24",
          children: (0, a.jsx)("path", {
            className: i,
            fill: n,
            d: "M13.5605 11L11.2646 8.706L12.6842 7.294L17.4023 12.009L12.6822 16.708L11.2656 15.292L13.5685 13H2C2.50429 18.045 6.7842 22 11.9744 22C17.5025 22 22 17.513 22 12C22 6.487 17.5025 2 11.9744 2C6.7842 2 2.50429 5.954 2 11H13.5605Z",
          }),
        });
      }
    },
    341020: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("75196");
      function n(e) {
        let {
          width: t = 24,
          height: s = 24,
          color: n = "currentColor",
          ...i
        } = e;
        return (0, a.jsx)("svg", {
          ...(0, l.default)(i),
          width: t,
          height: s,
          viewBox: "0 0 24 24",
          children: (0, a.jsx)("path", {
            d: "M23 9V19C23 20.1 22.1 21 21 21H3C1.9 21 1 20.1 1 19V6C1 4.34 2.34 3 4 3H19C20.1 3 21 3.9 21 5H4C3.45 5 3 5.45 3 6C3 6.55 3.45 7 4 7H21C22.1 7 23 7.9 23 9ZM21 12H17C15.9 12 15 12.9 15 14C15 15.1 15.9 16 17 16H21V12Z",
            fill: n,
          }),
        });
      }
    },
    827159: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          generateDeveloperPortalLink: function () {
            return n;
          },
        });
      var a = s("672630"),
        l = s("49111");
      async function n(e) {
        let t = a.default.generateNonce();
        try {
          let s = await a.default.createHandoffToken(t);
          return l.MarketingURLs.DEVELOPER_PORTAL_LOGIN_HANDOFF(t, s, e);
        } catch {
          return "//"
            .concat(window.GLOBAL_ENV.DEVELOPERS_ENDPOINT, "/")
            .concat(e);
        }
      }
    },
    199938: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          staffOnlyGuildSettingsAccess: function () {
            return o;
          },
          useGuildAccessRateInsightExperiment: function () {
            return d;
          },
        });
      var a = s("884691"),
        l = s("862205"),
        n = s("697218"),
        i = s("49111");
      let r = (0, l.createExperiment)({
        kind: "guild",
        id: "2022-03_guild_access_rate_insight_experiment",
        label: "Guild Access Rate Insight Experiment",
        defaultConfig: { showAccessRate: !1 },
        treatments: [
          {
            id: 1,
            label: "Show guild access rate in insights",
            config: { showAccessRate: !0 },
          },
        ],
      });
      function o(e) {
        var t;
        let s =
          null === (t = n.default.getCurrentUser()) || void 0 === t
            ? void 0
            : t.isStaff();
        return (
          s &&
          r.getCurrentConfig({ guildId: e, location: "77b4b2_1" })
            .showAccessRate
        );
      }
      function d(e) {
        let t = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        return (
          a.useEffect(() => {
            !t &&
              null != e &&
              r.trackExposure({ guildId: e, location: "77b4b2_2" });
          }, [e, t]),
          r.useExperiment(
            {
              guildId: null != e ? e : i.EMPTY_STRING_SNOWFLAKE_ID,
              location: "77b4b2_3",
            },
            { autoTrackExposure: !1, disable: t || null == e }
          )
        );
      }
    },
    961394: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("862205");
      let l = (0, a.createExperiment)({
        kind: "user",
        id: "2020-12_guild_delete_feedback",
        label: "Guild Delete Feedback experiment",
        defaultConfig: { showFeedback: !1 },
        treatments: [
          {
            id: 1,
            label: "Show guild delete feedback",
            config: { showFeedback: !0 },
          },
        ],
      });
      var n = l;
    },
    738216: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          fetchEngagementOverview: function () {
            return o;
          },
          fetchGrowthActivationOverview: function () {
            return d;
          },
          fetchGrowthActivationRetention: function () {
            return u;
          },
          fetchMemberInsights: function () {
            return c;
          },
        });
      var a = s("872717"),
        l = s("913144"),
        n = s("49111");
      let i = 36288e5;
      function r(e, t) {
        let s = new Date(),
          l = new Date(s.getTime() - (s.getDay() + 1) * 864e5 - i);
        return a.default.get({
          url: t(e),
          query: { start: l.toISOString(), end: s.toISOString(), interval: 2 },
          oldFormErrors: !0,
        });
      }
      function o(e) {
        return r(e, n.Endpoints.GUILD_ANALYTICS_ENGAGEMENT_OVERVIEW).then(
          t => {
            let { body: s } = t;
            l.default.dispatch({
              type: "GUILD_ANALYTICS_ENGAGEMENT_OVERVIEW_FETCH_SUCCESS",
              guildId: e,
              stats: s.slice(0, 2),
            });
          },
          e => {
            l.default.dispatch({
              type: "GUILD_ANALYTICS_ENGAGEMENT_OVERVIEW_FETCH_FAILURE",
              error: e.body,
            });
          }
        );
      }
      function d(e) {
        return r(
          e,
          n.Endpoints.GUILD_ANALYTICS_GROWTH_ACTIVATION_OVERVIEW
        ).then(
          t => {
            let { body: s } = t;
            l.default.dispatch({
              type: "GUILD_ANALYTICS_GROWTH_ACTIVATION_OVERVIEW_FETCH_SUCCESS",
              guildId: e,
              stats: s.slice(0, 2),
            });
          },
          e => {
            l.default.dispatch({
              type: "GUILD_ANALYTICS_GROWTH_ACTIVATION_OVERVIEW_FETCH_FAILURE",
              error: e.body,
            });
          }
        );
      }
      function u(e) {
        return r(
          e,
          n.Endpoints.GUILD_ANALYTICS_GROWTH_ACTIVATION_RETENTION
        ).then(
          t => {
            let { body: s } = t,
              a = s
                .filter(e => e.hasOwnProperty("pct_retained"))
                .map(e => {
                  let {
                    interval_start_timestamp: t,
                    pct_retained: s,
                    ...a
                  } = e;
                  return { interval_start_timestamp: t, pct_retained: s };
                });
            l.default.dispatch({
              type: "GUILD_ANALYTICS_GROWTH_ACTIVATION_RETENTION_FETCH_SUCCESS",
              guildId: e,
              stats: a.slice(0, 2),
            });
          },
          e => {
            l.default.dispatch({
              type: "GUILD_ANALYTICS_GROWTH_ACTIVATION_RETENTION_FETCH_FAILURE",
              error: e.body,
            });
          }
        );
      }
      function c(e) {
        return a.default
          .get({ url: n.Endpoints.GUILD_ANALYTICS_MEMBER_INSIGHTS(e) })
          .then(
            t => {
              l.default.dispatch({
                type: "GUILD_ANALYTICS_MEMBER_INSIGHTS_FETCH_SUCCESS",
                guildId: e,
                hasAccessRate: t.body.has_access_rate,
                accessRate: t.body.access_rate,
              });
            },
            () => {}
          );
      }
    },
    692541: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return I;
          },
        });
      var a = s("208302"),
        l = s.n(a),
        n = s("446674"),
        i = s("913144");
      let r = ["pct_retained", "new_members", "visitors", "communicators"],
        o = {},
        d = {},
        u = null;
      function c(e) {
        let { guildId: t, stats: s } = e;
        u = null;
        let a = {},
          n = {},
          i = s[0],
          d = s[1];
        null != i &&
          r.forEach(e => {
            if (null != i[e]) {
              let t = l(e);
              null != d &&
                0 !== d[e] &&
                (a["".concat(t, "Change")] = ((i[e] - d[e]) * 100) / d[e]),
                (n[t] = i[e]);
            }
          }),
          (o[t] = { ...n, ...a, ...o[t] });
      }
      function E(e) {
        let { error: t } = e;
        u = t.code;
      }
      class _ extends n.default.Store {
        getOverviewAnalytics(e) {
          return o[e];
        }
        getMemberInsights(e) {
          var t;
          return null !== (t = d[e]) && void 0 !== t ? t : {};
        }
        shouldFetchMemberInsights(e) {
          var t;
          let s = null === (t = d[e]) || void 0 === t ? void 0 : t.fetchedAt;
          return null == s || Date.now() - s > 432e5;
        }
        getError() {
          return u;
        }
      }
      _.displayName = "GuildSettingsAnalyticsStore";
      var I = new _(i.default, {
        GUILD_ANALYTICS_ENGAGEMENT_OVERVIEW_FETCH_SUCCESS: c,
        GUILD_ANALYTICS_GROWTH_ACTIVATION_OVERVIEW_FETCH_SUCCESS: c,
        GUILD_ANALYTICS_GROWTH_ACTIVATION_RETENTION_FETCH_SUCCESS: c,
        GUILD_ANALYTICS_ENGAGEMENT_OVERVIEW_FETCH_FAILURE: E,
        GUILD_ANALYTICS_GROWTH_ACTIVATION_OVERVIEW_FETCH_FAILURE: E,
        GUILD_ANALYTICS_GROWTH_ACTIVATION_RETENTION_FETCH_FAILURE: E,
        GUILD_ANALYTICS_MEMBER_INSIGHTS_FETCH_SUCCESS: function (e) {
          let { guildId: t, ...s } = e;
          d[t] = { ...s, fetchedAt: Date.now() };
        },
      });
    },
    53948: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          MAX_SUBCATEGORIES: function () {
            return i;
          },
          MAX_KEYWORDS: function () {
            return r;
          },
          MAX_KEYWORD_LENGTH: function () {
            return o;
          },
          GuildSettingsRoleEditSections: function () {
            return l;
          },
          getSettingsErrorMessage: function () {
            return u;
          },
        });
      var a,
        l,
        n = s("782340");
      let i = 5,
        r = 10,
        o = 30;
      ((a = l || (l = {}))[(a.DISPLAY = 0)] = "DISPLAY"),
        (a[(a.PERMISSIONS = 1)] = "PERMISSIONS"),
        (a[(a.MEMBERS = 2)] = "MEMBERS"),
        (a[(a.VERIFICATIONS = 3)] = "VERIFICATIONS");
      let d = {
        afk_channel_id: () => n.default.Messages.FORM_LABEL_AFK_CHANNEL,
        public_updates_channel_id: () =>
          n.default.Messages.GUILD_SETTINGS_COMMUNITY_MOD_CHANNEL_TITLE,
        safety_alerts_channel_id: () =>
          n.default.Messages.GUILD_ANTIRAID_SAFETY_CHANNEL_TITLE,
        system_channel_id: () => n.default.Messages.FORM_LABEL_SYSTEM_CHANNEL,
      };
      function u(e) {
        var t;
        if (0 === Object.keys(e).length) return null;
        let s = Object.keys(e)[0],
          a = null === (t = d[s]) || void 0 === t ? void 0 : t.call(d);
        return null != a ? "(".concat(a, ") ").concat(e[s]) : e[s];
      }
    },
    466227: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        });
      var a = s("446674"),
        l = s("913144"),
        n = s("277277"),
        i = s("162771");
      let r = {},
        o = {},
        d = 0;
      class u extends a.default.Store {
        initialize() {
          this.waitFor(i.default);
        }
        isUploadingEmoji() {
          return d > 0;
        }
        getEmojiRevision(e) {
          var t;
          return null !== (t = r[e]) && void 0 !== t ? t : 0;
        }
        getEmojis(e) {
          return o[e];
        }
      }
      u.displayName = "GuildSettingsEmojiStore";
      var c = new u(l.default, {
        EMOJI_DELETE: function (e) {
          let { guildId: t, emojiId: s } = e;
          o[t] = o[t].filter(e => e.id !== s);
        },
        EMOJI_FETCH_SUCCESS: function (e) {
          let { guildId: t, emojis: s } = e;
          o[t] = s.map(e => new n.default(e));
        },
        EMOJI_FETCH_FAILURE: function (e) {
          let { guildId: t } = e;
          o[t] = [];
        },
        EMOJI_UPLOAD_START: function () {
          d++;
        },
        EMOJI_UPLOAD_STOP: function () {
          d--;
        },
        GUILD_EMOJIS_UPDATE: function (e) {
          var t;
          let { guildId: s } = e;
          r[s] = (null !== (t = r[s]) && void 0 !== t ? t : 0) + 1;
        },
      });
    },
    766419: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          updateRoleSort: function () {
            return i;
          },
          init: function () {
            return r;
          },
          updateRolePermissions: function () {
            return o;
          },
          clearRolePermissions: function () {
            return d;
          },
          updateRoleName: function () {
            return u;
          },
          updateRoleColor: function () {
            return c;
          },
          toggleRoleSettings: function () {
            return E;
          },
          updateRoleIcon: function () {
            return _;
          },
          updateRoleConnectionConfigurations: function () {
            return I;
          },
          saveRoleSettings: function () {
            return T;
          },
        }),
        s("222007");
      var a = s("913144"),
        l = s("851387"),
        n = s("70919");
      function i(e) {
        a.default.dispatch({
          type: "GUILD_SETTINGS_ROLES_SORT_UPDATE",
          roles: e,
        });
      }
      function r() {
        a.default.dispatch({ type: "GUILD_SETTINGS_ROLES_INIT" });
      }
      function o(e, t, s) {
        a.default.dispatch({
          type: "GUILD_SETTINGS_ROLES_UPDATE_PERMISSIONS",
          id: e,
          flag: t,
          allow: s,
        });
      }
      function d(e) {
        a.default.dispatch({
          type: "GUILD_SETTINGS_ROLES_CLEAR_PERMISSIONS",
          id: e,
        });
      }
      function u(e, t) {
        a.default.dispatch({
          type: "GUILD_SETTINGS_ROLES_UPDATE_NAME",
          id: e,
          name: t,
        });
      }
      function c(e, t) {
        a.default.dispatch({
          type: "GUILD_SETTINGS_ROLES_UPDATE_COLOR",
          id: e,
          color: t,
        });
      }
      function E(e, t, s) {
        a.default.dispatch({
          type: "GUILD_SETTINGS_ROLES_UPDATE_SETTINGS",
          id: e,
          hoist: t,
          mentionable: s,
        });
      }
      function _(e, t, s) {
        a.default.dispatch({
          type: "GUILD_SETTINGS_ROLES_UPDATE_ROLE_ICON",
          id: e,
          icon: t,
          unicodeEmoji: s,
        });
      }
      function I(e, t) {
        a.default.dispatch({
          type: "GUILD_SETTINGS_ROLES_UPDATE_ROLE_CONNECTION_CONFIGURATIONS",
          roleId: e,
          roleConnectionConfigurations: t,
        });
      }
      async function T(e, t, s, i, r) {
        a.default.dispatch({ type: "GUILD_SETTINGS_ROLES_SUBMITTING" });
        try {
          let a = async () => {
            if (null == t || 0 === t.length) return;
            let s = t.pop();
            if (null == s || "" === s.name) return a();
            await l.default
              .updateRole(e, s.id, {
                name: s.name,
                description: s.description,
                permissions: s.permissions,
                color: s.color,
                hoist: s.hoist,
                mentionable: s.mentionable,
                icon: s.icon,
                unicodeEmoji: s.unicodeEmoji,
              })
              .then(a, a);
          };
          if (
            (null != s && s.length > 0
              ? await l.default.batchRoleUpdate(e, s).then(a, a)
              : await a(),
            null != r && null != i)
          )
            for await (let t of i) {
              let s = r.get(t);
              await (0, n.putRoleConnectionsConfigurations)(
                e,
                t,
                null != s ? s : []
              );
            }
        } catch (e) {
          var o, d;
          a.default.dispatch({
            type: "GUILD_SETTINGS_ROLES_SAVE_FAIL",
            message:
              null !==
                (d =
                  null === (o = e.body) || void 0 === o ? void 0 : o.message) &&
              void 0 !== d
                ? d
                : Object.values(e.body)[0],
          });
          return;
        }
        a.default.dispatch({ type: "GUILD_SETTINGS_ROLES_SAVE_SUCCESS" });
      }
    },
    531493: function (e, t, s) {
      "use strict";
      let a, l, n;
      s.r(t),
        s.d(t, {
          default: function () {
            return H;
          },
        }),
        s("222007");
      var i = s("917351"),
        r = s.n(i),
        o = s("316693"),
        d = s("509043"),
        u = s("446674"),
        c = s("913144"),
        E = s("382981"),
        _ = s("305961"),
        I = s("746574"),
        T = s("449008"),
        f = s("991170"),
        S = s("900938"),
        m = s("53948"),
        N = s("49111");
      let g = new Set(),
        h = N.FormStates.CLOSED,
        C = !1,
        R = !1,
        x = [],
        L = [],
        O = m.GuildSettingsRoleEditSections.DISPLAY,
        p = !1,
        A = new Set(),
        M = new Map(),
        D = new Map();
      function v() {
        if (null == a || null == x) return [];
        let e = r(_.default.getRoles(a.id))
          .values()
          .sortBy(e => {
            let { position: t } = e;
            return t;
          })
          .reverse()
          .value();
        return I.default.calculatePositionDeltas({
          oldOrdering: e,
          newOrdering: x,
          idGetter: e => {
            let { id: t } = e;
            return t;
          },
          existingPositionGetter: e => {
            let { originalPosition: t } = e;
            return null != t ? t : 1 / 0;
          },
          ascending: !1,
        });
      }
      function G(e) {
        let { section: t } = e;
        if (null != a || t !== N.GuildSettingsSections.ROLES) return !1;
        j();
      }
      function j() {
        let e =
          !(arguments.length > 0) || void 0 === arguments[0] || arguments[0];
        (a = S.default.getProps().guild),
          (C = !1),
          (R = !1),
          (n = void 0),
          g.clear(),
          (h = N.FormStates.OPEN),
          (L = [
            ...(x =
              null != a
                ? r(_.default.getRoles(a.id))
                    .values()
                    .sortBy(e => {
                      let { position: t } = e;
                      return t;
                    })
                    .reverse()
                    .value()
                : []),
          ]),
          (p = !1),
          e &&
            (D.clear(),
            M.forEach((e, t) => {
              D.set(t, [...e]);
            }));
      }
      let U = r.debounce(() => {
        let e = !1;
        R && !(R = v().length > 0) && (e = !0),
          [...g].forEach(t => {
            r.isEqual(
              b(t),
              (function (e) {
                return L.find(t => {
                  let { id: s } = t;
                  return s === e;
                });
              })(t)
            ) && (g.delete(t), (e = !0));
          }),
          0 === g.size && (C = !1),
          p && r.isEqual(M, D) && ((e = !0), (p = !1)),
          e && F.emitChange();
      }, 500);
      function P(e, t) {
        let s = x.indexOf(e);
        if (s < 0) return !1;
        let a = { ...e, ...t };
        (x[s] = a), (x = [...x]), (C = !0), g.add(a.id), U();
      }
      function b(e) {
        return x.find(t => {
          let { id: s } = t;
          return s === e;
        });
      }
      function B(e) {
        let { guildId: t } = e;
        if (null == a || t !== a.id || h === N.FormStates.SUBMITTING) return !1;
        a = S.default.getProps().guild;
        let s = [];
        null != a &&
          (s = r(_.default.getRoles(a.id))
            .values()
            .sortBy(e => {
              let { position: t } = e;
              return t;
            })
            .reverse()
            .value()),
          g.forEach(e => {
            let t = b(e),
              a = -1,
              l = s.find((t, s) => {
                let { id: l } = t;
                if (l === e) return (a = s), !0;
              });
            null == l || null == t ? g.delete(e) : (s[a] = t);
          }),
          0 === g.size && (C = !1),
          (R = !1),
          (x = [...s]);
      }
      class y extends u.default.Store {
        initialize() {
          this.waitFor(S.default, E.default, _.default);
        }
        hasChanges() {
          return C || R || p;
        }
        get errorMessage() {
          return n;
        }
        get hasSortChanges() {
          return R;
        }
        get hasRoleConfigurationChanges() {
          return p;
        }
        get guild() {
          return a;
        }
        get editedRoleIds() {
          return Array.from(g);
        }
        get editedRoleIdsForConfigurations() {
          return A;
        }
        get roles() {
          return x;
        }
        get formState() {
          return h;
        }
        get lastRoleEditSection() {
          return O;
        }
        getSortDeltas() {
          return v();
        }
        showNotice() {
          return this.hasChanges();
        }
        getRole(e) {
          return b(e);
        }
        getPermissionSearchQuery() {
          return l;
        }
        getEditedRoleConnectionConfigurationsMap() {
          return D;
        }
      }
      y.displayName = "GuildSettingsRolesStore";
      let F = new y(
        c.default,
        __OVERLAY__
          ? {}
          : {
              GUILD_SETTINGS_ROLES_INIT: () => j(),
              GUILD_SETTINGS_INIT: G,
              GUILD_SETTINGS_SET_SECTION: G,
              GUILD_SETTINGS_ROLES_SORT_UPDATE: function (e) {
                let { roles: t } = e;
                if (null != x && t.length !== x.length) return !1;
                (x = t.map(e => b(e)).filter(T.isNotNullish)), (R = !0), U();
              },
              GUILD_SETTINGS_ROLES_UPDATE_PERMISSIONS: function (e) {
                let { id: t, flag: s, allow: a } = e,
                  l = b(t);
                if (null == l) return !1;
                let { permissions: n } = l;
                return P(l, {
                  permissions: (n = a
                    ? o.default.add(n, s)
                    : o.default.remove(n, s)),
                });
              },
              GUILD_SETTINGS_ROLES_UPDATE_PERMISSION_SET: function (e) {
                let { id: t, permissions: s } = e,
                  a = b(t);
                return null != a && P(a, { permissions: s });
              },
              GUILD_SETTINGS_ROLES_CLEAR_PERMISSIONS: function (e) {
                let { id: t } = e,
                  s = b(t);
                return null != s && P(s, { permissions: f.default.NONE });
              },
              GUILD_SETTINGS_ROLES_UPDATE_NAME: function (e) {
                let { id: t, name: s } = e,
                  a = b(t);
                return null != a && P(a, { name: s });
              },
              GUILD_SETTINGS_ROLES_UPDATE_DESCRIPTION: function (e) {
                let { id: t, description: s } = e,
                  a = b(t);
                return null != a && P(a, { description: s });
              },
              GUILD_SETTINGS_ROLES_UPDATE_COLOR: function (e) {
                let { id: t, color: s } = e,
                  a = 0 === s ? null : (0, d.int2hex)(s),
                  l = b(t);
                return null != l && P(l, { color: s, colorString: a });
              },
              GUILD_SETTINGS_ROLES_UPDATE_SETTINGS: function (e) {
                let { id: t, hoist: s, mentionable: a } = e,
                  l = b(t);
                return null != l && P(l, { hoist: s, mentionable: a });
              },
              GUILD_SETTINGS_ROLES_UPDATE_ROLE_ICON: function (e) {
                let { id: t, icon: s, unicodeEmoji: a } = e,
                  l = b(t);
                return null != l && P(l, { icon: s, unicodeEmoji: a });
              },
              GUILD_SETTINGS_ROLE_SELECT: function (e) {
                let { role: t, searchQuery: s } = e;
                if (((l = s), null != t)) {
                  if (null != b(t.id)) {
                    P(t, t);
                    return;
                  }
                  (x = [...x, t]), U();
                }
              },
              GUILD_ROLE_CONNECTIONS_CONFIGURATIONS_FETCH_SUCCESS: function (
                e
              ) {
                let { roleId: t, roleConnectionConfigurations: s } = e,
                  a = b(t);
                if (null == a) return !1;
                let l = M.get(a.id);
                if (r.isEqual(l, s)) return !1;
                D.set(a.id, s), M.set(a.id, s), U();
              },
              GUILD_SETTINGS_ROLES_UPDATE_ROLE_CONNECTION_CONFIGURATIONS:
                function (e) {
                  let { roleId: t, roleConnectionConfigurations: s } = e,
                    a = b(t);
                  if (null == a) return !1;
                  (p = !0), A.add(a.id), D.set(a.id, s), U();
                },
              GUILD_SETTINGS_CLOSE: function () {
                (a = null),
                  (L = x = []),
                  M.clear(),
                  g.clear(),
                  D.clear(),
                  (A = new Set()),
                  (C = !1),
                  (R = !1),
                  (p = !1),
                  (h = N.FormStates.CLOSED);
              },
              GUILD_ROLE_CREATE: B,
              GUILD_ROLE_UPDATE: B,
              GUILD_ROLE_DELETE: function (e) {
                return (
                  A.has(e.roleId) &&
                    (A.delete(e.roleId),
                    M.delete(e.roleId),
                    D.delete(e.roleId),
                    (p = !1)),
                  B(e)
                );
              },
              GUILD_SETTINGS_ROLES_SUBMITTING: function () {
                h = N.FormStates.SUBMITTING;
              },
              GUILD_SETTINGS_ROLES_SAVE_FAIL: function (e) {
                let { message: t } = e;
                (h = N.FormStates.OPEN), (n = t);
              },
              GUILD_SETTINGS_ROLES_SAVE_SUCCESS: function () {
                j(!1);
              },
              GUILD_SETTINGS_ROLES_EDIT_SECTION_UPDATE: function (e) {
                let { section: t } = e;
                O = t;
              },
            }
      );
      var H = F;
    },
    385334: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          isRolePowerful: function () {
            return i;
          },
          getPowerfulPermissionTitles: function () {
            return r;
          },
        }),
        s("424973"),
        s("222007");
      var a = s("316693"),
        l = s("465305"),
        n = s("49111");
      function i(e) {
        return a.default.hasAny(e.permissions, n.ElevatedPermissions);
      }
      function r(e, t) {
        let s = [],
          i = l.default.getGuildPermissionSpecMap(e);
        for (let e of n.ElevatedPermissionsList)
          a.default.has(t.permissions, e) && s.push(i[e.toString()].title);
        return s;
      }
    },
    610494: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          close: function () {
            return i;
          },
          resetCode: function () {
            return r;
          },
          setCode: function () {
            return o;
          },
          saveCode: function () {
            return d;
          },
        });
      var a = s("872717"),
        l = s("913144"),
        n = s("49111");
      function i() {
        l.default.dispatch({ type: "GUILD_SETTINGS_VANITY_URL_CLOSE" });
      }
      function r() {
        l.default.dispatch({ type: "GUILD_SETTINGS_VANITY_URL_RESET" });
      }
      function o(e) {
        l.default.dispatch({ type: "GUILD_SETTINGS_VANITY_URL_SET", code: e });
      }
      function d(e, t) {
        return a.default
          .patch({
            url: n.Endpoints.GUILD_VANITY_URL(e),
            body: { code: t },
            oldFormErrors: !0,
          })
          .then(
            e => {
              let {
                body: { code: t, uses: s },
              } = e;
              l.default.dispatch({
                type: "GUILD_SETTINGS_SET_VANITY_URL",
                code: t,
                uses: s,
              });
            },
            e => (
              l.default.dispatch({
                type: "GUILD_SETTINGS_VANITY_URL_ERROR",
                error: e.body,
              }),
              e
            )
          );
      }
    },
    914581: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return u;
          },
        });
      var a = s("446674"),
        l = s("913144");
      let n = null,
        i = 0,
        r = null,
        o = null;
      class d extends a.default.Store {
        showNotice() {
          return n !== r;
        }
        get vanityURLCode() {
          return n;
        }
        get originalVanityURLCode() {
          return r;
        }
        get vanityURLUses() {
          return i;
        }
        hasError() {
          return null != o;
        }
        get errorDetails() {
          return o;
        }
      }
      d.displayName = "GuildSettingsVanityURLStore";
      var u = new d(l.default, {
        GUILD_SETTINGS_SET_VANITY_URL: function (e) {
          var t, s;
          (r = n = null !== (t = e.code) && void 0 !== t ? t : ""),
            (i = e.uses),
            (o = null !== (s = e.error) && void 0 !== s ? s : null);
        },
        GUILD_SETTINGS_VANITY_URL_CLOSE: function () {
          (r = n = null), (i = 0), (o = null);
        },
        GUILD_SETTINGS_VANITY_URL_RESET: function () {
          (n = r), (i = 0);
        },
        GUILD_SETTINGS_VANITY_URL_SET: function (e) {
          (n = e.code), (i = 0);
        },
        GUILD_SETTINGS_VANITY_URL_ERROR: function (e) {
          o = e.error;
        },
      });
    },
    11893: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          getErrorMessageFromErrorCode: function () {
            return n;
          },
          canSeeVanityUrlSettings: function () {
            return i;
          },
        });
      var a = s("49111"),
        l = s("782340");
      function n(e) {
        switch (e) {
          case a.AbortCodes.UNKNOWN_CHANNEL:
            return l.default.Messages
              .SET_VANITY_URL_ERROR_MESSAGE_UNKNOWN_CHANNEL;
          case a.AbortCodes.INVALID_PERMISSIONS:
            return l.default.Messages
              .SET_VANITY_URL_ERROR_MESSAGE_INVALID_PERMISSIONS;
          case a.AbortCodes.INVALID_ACCESS:
            return l.default.Messages
              .SET_VANITY_URL_ERROR_MESSAGE_INVALID_ACCESS;
          case a.AbortCodes.VANITY_URL_REQUIRED_FOR_PUBLISHED_GUILDS:
            return l.default.Messages
              .SET_VANITY_URL_ERROR_MESSAGE_REQUIRED_FOR_PUBLISHED_GUILDS;
          case a.AbortCodes.VANITY_URL_EMPLOYEE_ONLY_GUILD_DISABLED:
            return l.default.Messages.VANITY_URL_EMPLOYEE_ONLY_GUILD_DISABLED;
          case a.AbortCodes.VANITY_URL_REQUIREMENTS_NOT_MET:
            return l.default.Messages
              .SET_VANITY_URL_ERROR_MESSAGE_REQUIREMENTS_NOT_MET;
          default:
            return l.default.Messages.CHANGE_VANITY_URL_ERROR;
        }
      }
      function i(e) {
        return (
          e.hasFeature(a.GuildFeatures.VANITY_URL) ||
          (e.hasFeature(a.GuildFeatures.GUILD_WEB_PAGE_VANITY_URL) &&
            null != e.vanityURLCode)
        );
      }
    },
    137933: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return w;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("817736"),
        o = s.n(r),
        d = s("974667"),
        u = s("118810"),
        c = s("446674"),
        E = s("77078"),
        _ = s("252073"),
        I = s("272030"),
        T = s("642950"),
        f = s("465395"),
        S = s("510889"),
        m = s("161778"),
        N = s("242020"),
        g = s("766274"),
        h = s("42203"),
        C = s("305961"),
        R = s("102985"),
        x = s("697218"),
        L = s("941886"),
        O = s("155207"),
        p = s("987663"),
        A = s("449008"),
        M = s("158998"),
        D = s("287103"),
        v = s("900938"),
        G = s("817343"),
        j = s("347584"),
        U = s("49111"),
        P = s("782340"),
        b = s("605611"),
        B = s("7691"),
        y = s("678016");
      class F extends l.PureComponent {
        render() {
          let { onHeaderClick: e, guildId: t, guild: s, ...l } = this.props;
          return null == t
            ? null
            : (0, a.jsx)(j.default, {
                ...l,
                guildId: t,
                guild: s,
                onHeaderClick: this.handleHeaderClick,
                onUserContextMenu: this.handleUserContextMenu,
                onChannelContextMenu: this.handleChannelContextMenu,
                onTargetContextMenu: this.handleTargetContextMenu,
              });
        }
        constructor(...e) {
          super(...e),
            (this.handleHeaderClick = () => {
              let { onHeaderClick: e, log: t } = this.props;
              null == e || e(t);
            }),
            (this.handleUserContextMenu = e => {
              let { log: t, guildId: l } = this.props,
                { user: n } = t;
              null != n &&
                null != l &&
                (0, I.openContextMenuLazy)(e, async () => {
                  let { default: e } = await s
                    .el("471085")
                    .then(s.bind(s, "471085"));
                  return t => (0, a.jsx)(e, { ...t, guildId: l, user: n });
                });
            }),
            (this.handleChannelContextMenu = e => {
              let { log: t, guildId: l } = this.props,
                n = C.default.getGuild(l);
              null != t.options.channel &&
                null != n &&
                (0, I.openContextMenuLazy)(e, async () => {
                  let { default: e } = await s
                    .el("887127")
                    .then(s.bind(s, "887127"));
                  return s =>
                    (0, a.jsx)(e, { ...s, channel: t.options.channel });
                });
            }),
            (this.handleTargetContextMenu = e => {
              let { log: t, guildId: l } = this.props;
              switch (t.targetType) {
                case U.AuditLogTargetTypes.CHANNEL:
                case U.AuditLogTargetTypes.CHANNEL_OVERWRITE:
                  let n = h.default.getChannel(t.targetId),
                    i = C.default.getGuild(l);
                  if (null != n && null != i)
                    return (0, I.openContextMenuLazy)(e, async () => {
                      let { default: e } = await s
                        .el("887127")
                        .then(s.bind(s, "887127"));
                      return t => (0, a.jsx)(e, { ...t, channel: n });
                    });
                  return (0, I.openContextMenuLazy)(e, async () => {
                    let { default: e } = await s
                      .el("443070")
                      .then(s.bind(s, "443070"));
                    return s =>
                      (0, a.jsx)(e, {
                        ...s,
                        id: t.targetId,
                        label: P.default.Messages.COPY_ID_UNKNOWN,
                      });
                  });
                case U.AuditLogTargetTypes.USER:
                  let r = x.default.getUser(t.targetId);
                  if (null != r && null != l)
                    return (0, I.openContextMenuLazy)(e, async () => {
                      let { default: e } = await s
                        .el("471085")
                        .then(s.bind(s, "471085"));
                      return t => (0, a.jsx)(e, { ...t, guildId: l, user: r });
                    });
              }
              return null;
            });
        }
      }
      function H(e) {
        let {
            logs: t,
            guildId: s,
            guild: n,
            expandedId: i,
            lastExpandedId: r,
            scroller: o,
            setExpandedRef: u,
            setLastExpandedRef: c,
            onHeaderClick: E,
            onContentClick: _,
          } = e,
          I = l.useRef(o);
        l.useEffect(() => {
          I.current = o;
        }, [o]);
        let T = (0, S.default)("audit-log", I);
        return (0, a.jsx)(d.ListNavigatorProvider, {
          navigator: T,
          children: (0, a.jsx)(d.ListNavigatorContainer, {
            children: e => {
              let { ref: l, ...o } = e;
              return (0, a.jsx)("div", {
                ref: l,
                ...o,
                children: t.map(e => {
                  let t = i === e.id,
                    l = r === e.id;
                  return (0, a.jsx)(
                    F,
                    {
                      guildId: s,
                      guild: n,
                      ref: t ? u : l ? c : null,
                      className: b.row,
                      onHeaderClick: E,
                      onContentClick: _,
                      log: e,
                      expanded: t,
                    },
                    e.id
                  );
                }),
              });
            },
          }),
        });
      }
      class k extends l.PureComponent {
        componentDidMount() {
          (0, _.fetchLogs)(this.props.guildId),
            document.addEventListener("click", this.handleOutsideClick);
        }
        componentWillUnmount() {
          document.removeEventListener("click", this.handleOutsideClick);
        }
        componentDidUpdate(e, t) {
          this.state.expandedId !== t.expandedId && this.fixScroll(),
            !this.props.showLoadMore &&
              this.props.logs.length !== e.logs.length &&
              null != this._scrollerRef &&
              this.isScrollerAtBottom() &&
              (0, _.fetchNextLogPage)(this.props.guildId, !0);
        }
        isScrollerAtBottom() {
          var e;
          return (
            (null === (e = this._scrollerRef) || void 0 === e
              ? void 0
              : e.isScrolledToBottom()) || !1
          );
        }
        fixScroll() {
          let e = this._scrollerRef;
          if (null == e) return;
          let t = this.getRects(),
            s = this._prevRects;
          if (
            null == t.expanded ||
            null == t.lastExpanded ||
            null == s.expanded ||
            t.expanded.top < t.lastExpanded.top
          )
            return;
          let a = s.expanded.height - t.lastExpanded.height,
            l = e.getScrollerState(),
            n = l.scrollTop - a;
          e.scrollTo({ to: n });
        }
        getRects() {
          let e = { lastExpanded: null, expanded: null };
          if (null != this._lastExpandedRef) {
            let t = o.findDOMNode(this._lastExpandedRef);
            (0, u.isElement)(t) && (e.lastExpanded = t.getBoundingClientRect());
          }
          if (null != this._expandedRef) {
            let t = o.findDOMNode(this._expandedRef);
            (0, u.isElement)(t) && (e.expanded = t.getBoundingClientRect());
          }
          return e;
        }
        renderUserQuickSelectValue(e) {
          var t;
          return null !== (t = e.valueLabel) && void 0 !== t ? t : e.label;
        }
        renderActionQuickSelectValue(e) {
          var t;
          return null !== (t = e.valueLabel) && void 0 !== t ? t : e.label;
        }
        renderHeader() {
          return (0, a.jsxs)(a.Fragment, {
            children: [
              (0, a.jsxs)("div", {
                className: b.customHeader,
                children: [
                  (0, a.jsx)(E.FormTitle, {
                    tag: E.FormTitleTags.H1,
                    className: b.formTitle,
                    children: P.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG,
                  }),
                  this.renderHeaderDropdowns(),
                ],
              }),
              (0, a.jsx)(E.FormDivider, { className: b.divider }),
            ],
          });
        }
        renderSpinner() {
          return (0, a.jsx)(E.Spinner, {
            type: E.Spinner.Type.SPINNING_CIRCLE,
          });
        }
        renderContent() {
          let { expandedId: e, lastExpandedId: t } = this.state,
            {
              logs: l,
              theme: n,
              hide: i,
              isInitialLoading: r,
              isLoading: o,
              hasError: d,
              guildId: u,
              guild: c,
            } = this.props;
          if (i) return (0, a.jsx)(T.default, {});
          if (o || r) return this.renderSpinner();
          if (0 === l.length) {
            let e = d
                ? P.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG_ERROR_BODY
                : P.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG_EMPTY_BODY,
              t = d
                ? P.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG_ERROR_TITLE
                : P.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG_EMPTY_TITLE;
            return (0, a.jsxs)(L.default, {
              theme: n,
              className: b.empty,
              children: [
                (0, a.jsx)(L.EmptyStateImage, {
                  darkSrc: s("935855"),
                  lightSrc: s("847598"),
                  width: 272,
                  height: 130,
                }),
                (0, a.jsx)(L.EmptyStateText, {
                  note: e,
                  style: { maxWidth: 300 },
                  children: t,
                }),
              ],
            });
          }
          return (0, a.jsx)(H, {
            logs: l,
            guildId: u,
            guild: c,
            expandedId: e,
            lastExpandedId: t,
            setExpandedRef: this.handleSetExpandedRef,
            setLastExpandedRef: this.handleSetLastExpandedRef,
            onHeaderClick: this.handleHeaderClick,
            onContentClick: this.handleContentClick,
            scroller: this._scrollerRef,
          });
        }
        render() {
          let { isLoadingNextPage: e, hide: t, isLoading: s } = this.props;
          return (0, a.jsx)("div", {
            className: B.customColumn,
            children: (0, a.jsx)("div", {
              className: B.customContainer,
              children: (0, a.jsx)(E.AdvancedScrollerAuto, {
                className: i(B.customScroller, b.scroller),
                onScroll: this.handleOnScroll,
                ref: this.handleSetScrollerRef,
                children: (0, a.jsx)("div", {
                  className: b.content,
                  ref: this._contentRef,
                  children: (0, a.jsxs)(E.FocusRingScope, {
                    containerRef: this._contentRef,
                    children: [
                      this.renderHeader(),
                      this.renderContent(),
                      this.renderLoadMore(),
                      !e || t || s ? null : this.renderSpinner(),
                    ],
                  }),
                }),
              }),
            }),
          });
        }
        constructor(...e) {
          super(...e),
            (this._clickedInside = !1),
            (this._scrollerRef = null),
            (this._prevRects = this.getRects()),
            (this._contentRef = l.createRef()),
            (this.state = {
              expandedId: null,
              lastExpandedId: null,
              actionFilterQuery: "",
            }),
            (this.renderActionQuickSelectItem = (e, t) => {
              var s;
              let { actionFilter: l } = this.props,
                n = (0, N.getActionType)(e.value),
                i = (0, N.getTargetType)(e.value),
                r = e.value === l;
              return (0, a.jsxs)(
                E.ComboboxItem,
                {
                  value: e.value,
                  selectedColor: E.ComboboxItem.Colors.BRAND,
                  children: [
                    (0, a.jsx)(E.ComboboxItem.Icon, {
                      children: (0, a.jsx)(G.AuditLogIcon, {
                        themeOverride: r ? U.ThemeTypes.DARK : null,
                        actionType: n,
                        targetType: i,
                        action: e.value,
                      }),
                    }),
                    (0, a.jsx)(E.ComboboxItem.Label, { children: e.label }),
                    (0, a.jsx)(E.ComboboxItem.Checkmark, {}),
                  ],
                },
                null !== (s = e.key) && void 0 !== s ? s : t
              );
            }),
            (this.renderUserQuickSelectItem = (e, t) => {
              var s;
              if (e.user instanceof g.default) {
                let t = e.user;
                return (0, a.jsxs)(
                  E.ComboboxItem,
                  {
                    value: t.id,
                    selectedColor: E.ComboboxItem.Colors.BRAND,
                    children: [
                      (0, a.jsx)(E.ComboboxItem.Icon, {
                        children: (0, a.jsx)(E.Avatar, {
                          size: E.AvatarSizes.SIZE_32,
                          src: t.getAvatarURL(this.props.guildId, 32),
                          "aria-label": t.username,
                          className: b.avatar,
                        }),
                      }),
                      (0, a.jsxs)(E.ComboboxItem.Label, {
                        children: [
                          (0, a.jsx)(E.Text, {
                            variant: "text-sm/normal",
                            children: M.default.getUserTag(t, {
                              mode: "username",
                            }),
                          }),
                          !t.isPomelo() &&
                            (0, a.jsxs)(E.Text, {
                              variant: "text-xs/normal",
                              className: b.discriminator,
                              children: ["#", t.discriminator],
                            }),
                        ],
                      }),
                      (0, a.jsx)(E.ComboboxItem.Checkmark, {}),
                    ],
                  },
                  t.id
                );
              }
              return (0, a.jsxs)(
                E.ComboboxItem,
                {
                  value: e.value,
                  selectedColor: E.ComboboxItem.Colors.BRAND,
                  children: [
                    (0, a.jsx)(E.ComboboxItem.Icon, {
                      children: (0, a.jsx)(O.default, {
                        width: 30,
                        height: 30,
                      }),
                    }),
                    (0, a.jsx)(E.ComboboxItem.Label, { children: e.label }),
                    (0, a.jsx)(E.ComboboxItem.Checkmark, {}),
                  ],
                },
                null !== (s = e.key) && void 0 !== s ? s : t
              );
            }),
            (this.renderHeaderDropdowns = () => {
              var e, t;
              let {
                actionFilter: s,
                hide: l,
                userIdFilter: n,
                moderators: r,
              } = this.props;
              if (l) return null;
              let o = p.ACTION_FILTER_ITEMS(),
                d =
                  null !==
                    (e = o.find(e => {
                      let { value: t } = e;
                      return s === t;
                    })) && void 0 !== e
                    ? e
                    : o[0],
                u = {
                  label: P.default.Messages.GUILD_SETTINGS_FILTER_ALL_USERS,
                  valueLabel: P.default.Messages.GUILD_SETTINGS_FILTER_ALL,
                  value: null,
                },
                c = [u, ...r].map(e => {
                  var t;
                  if (!(e instanceof g.default)) return e;
                  return { label: (t = e).username, value: t.id, user: t };
                }),
                E =
                  null !==
                    (t = c.find(e => {
                      let { value: t } = e;
                      return t === n;
                    })) && void 0 !== t
                    ? t
                    : u;
              return (0, a.jsxs)("div", {
                className: b.quickSelect,
                children: [
                  (0, a.jsx)(f.default, {
                    popoutClassName: i(
                      b.selectFilterPopout,
                      y.elevationBorderHigh
                    ),
                    items: c,
                    renderItem: this.renderUserQuickSelectItem,
                    renderValue: this.renderUserQuickSelectValue,
                    value: E,
                    onChange: this.handleFilterUserChange,
                    label: P.default.Messages.GUILD_SETTINGS_FILTER_USER,
                    placeholder: P.default.Messages.SEARCH_MEMBERS,
                    popoutProps: { autoInvert: !1, position: "bottom" },
                  }),
                  (0, a.jsx)(f.default, {
                    placeholder: P.default.Messages.SEARCH_ACTIONS,
                    label: P.default.Messages.GUILD_SETTINGS_FILTER_ACTION,
                    popoutClassName: i(
                      b.selectFilterPopout,
                      y.elevationBorderLow
                    ),
                    items: o,
                    renderItem: this.renderActionQuickSelectItem,
                    renderValue: this.renderActionQuickSelectValue,
                    value: d,
                    onChange: this.handleFilterActionChange,
                    popoutProps: { autoInvert: !1, position: "bottom" },
                  }),
                ],
              });
            }),
            (this.renderLoadMore = () => {
              let { showLoadMore: e, hasOlderLogs: t, hide: s } = this.props;
              if (e && t && !s)
                return (0, a.jsx)(E.Button, {
                  color: E.Button.Colors.PRIMARY,
                  className: b.loadMore,
                  onClick: this.handleFetchNextPage,
                  children:
                    P.default.Messages.GUILD_SETTINGS_AUDIT_LOG_LOAD_MORE,
                });
            }),
            (this.handleFilterActionChange = e => {
              (0, _.filterByAction)(e, this.props.guildId);
            }),
            (this.handleFilterUserChange = e => {
              (0, _.filterByUserId)(e, this.props.guildId);
            }),
            (this.handleHeaderClick = e => {
              let { expandedId: t } = this.state;
              t !== e.id
                ? ((this._clickedInside = !0),
                  this.setState({ expandedId: e.id, lastExpandedId: t }),
                  (this._prevRects = this.getRects()))
                : ((this._expandedRef = null),
                  (this._lastExpandedRef = null),
                  null != t && (this._prevRects = this.getRects()),
                  this.setState({ expandedId: null, lastExpandedId: null }));
            }),
            (this.handleOutsideClick = () => {
              null == this.state.expandedId || this._clickedInside
                ? null != this.state.expandedId && (this._clickedInside = !1)
                : ((this._expandedRef = null),
                  (this._lastExpandedRef = null),
                  this.setState({ expandedId: null, lastExpandedId: null }),
                  (this._prevRects = this.getRects()));
            }),
            (this.handleContentClick = e => {
              (this._clickedInside = !0), e.stopPropagation();
            }),
            (this.handleSetScrollerRef = e => {
              this._scrollerRef = e;
            }),
            (this.handleOnScroll = () => {
              this.isScrollerAtBottom() && this.handleFetchNextPage();
            }),
            (this.handleFetchNextPage = () => {
              (0, _.fetchNextLogPage)(this.props.guildId);
            }),
            (this.handleActionFilterQueryChange = e => {
              this.setState({ actionFilterQuery: e });
            }),
            (this.handleActionFilterQueryClear = () => {
              this.setState({ actionFilterQuery: "" });
            }),
            (this.handleSetExpandedRef = e => {
              this._expandedRef = e;
            }),
            (this.handleSetLastExpandedRef = e => {
              this._lastExpandedRef = e;
            });
        }
      }
      var w = c.default.connectStores(
        [D.default, v.default, C.default, m.default, R.default, x.default],
        () => {
          let e = v.default.getGuildId(),
            t = C.default.getGuild(e),
            s = D.default.logs,
            a = D.default.userIds
              .map(e => x.default.getUser(e))
              .filter(A.isNotNullish);
          return {
            guildId: e,
            guild: t,
            moderators: a,
            isInitialLoading: D.default.isInitialLoading,
            isLoading: D.default.isLoading,
            isLoadingNextPage: D.default.isLoadingNextPage,
            showLoadMore: D.default.groupedFetchCount > 2,
            hasError: D.default.hasError,
            hasOlderLogs: D.default.hasOlderLogs,
            logs: null != s && null != t ? p.transformLogs(s, t) : [],
            actionFilter: D.default.actionFilter,
            userIdFilter: D.default.userIdFilter,
            theme: m.default.theme,
            hide: R.default.enabled,
          };
        }
      )(k);
    },
    347584: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return A;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("974667"),
        o = s("35092"),
        d = s("819855"),
        u = s("77078"),
        c = s("376556"),
        E = s("679653"),
        _ = s("506885"),
        I = s("981601"),
        T = s("161778"),
        f = s("27618"),
        S = s("697218"),
        m = s("461380"),
        N = s("987663"),
        g = s("158998"),
        h = s("523096"),
        C = s("817343"),
        R = s("49111"),
        x = s("782340"),
        L = s("15994");
      class O extends l.PureComponent {
        render() {
          let { user: e, onContextMenu: t } = this.props;
          return (0, a.jsxs)("span", {
            onContextMenu: t,
            className: L.userHook,
            children: [
              (0, a.jsx)(u.Text, {
                variant: "text-md/normal",
                children: g.default.getUserTag(e, { mode: "username" }),
              }),
              "0" !== e.discriminator &&
                (0, a.jsxs)(u.Text, {
                  variant: "text-xs/normal",
                  className: L.discrim,
                  children: ["#", e.discriminator],
                }),
            ],
          });
        }
      }
      class p extends l.PureComponent {
        hasChangesToRender() {
          let { log: e } = this.props,
            { changes: t } = e;
          return (
            (e.actionType !== R.AuditLogActionTypes.DELETE ||
              e.action === R.AuditLogActions.MEMBER_BAN_ADD ||
              e.action === R.AuditLogActions.MEMBER_KICK ||
              e.action === R.AuditLogActions.MEMBER_PRUNE) &&
            null != t &&
            t.some(t => !(0, C.shouldNotRenderChangeDetail)(e, t))
          );
        }
        renderTitle() {
          let {
              log: e,
              onUserContextMenu: t,
              onTargetContextMenu: s,
              onChannelContextMenu: l,
            } = this.props,
            { user: n, target: i, options: r } = e,
            o = N.getChangeTitle(e);
          return null != o
            ? (0, a.jsx)("div", {
                className: L.overflowEllipsis,
                children: o.format({
                  user: n,
                  target: i,
                  userHook: (s, l) => {
                    if (null != e.user)
                      return (0, a.jsx)(
                        O,
                        { user: e.user, onContextMenu: t },
                        l
                      );
                    if (null != e.options.integration_type) {
                      var n;
                      let t = c.default.get(e.options.integration_type);
                      return null !== (n = null == t ? void 0 : t.name) &&
                        void 0 !== n
                        ? n
                        : x.default.Messages.UNKNOWN_INTEGRATION;
                    }
                    return x.default.Messages.UNKNOWN_USER;
                  },
                  targetHook: (t, l) =>
                    e.targetType === R.AuditLogTargetTypes.USER
                      ? (0, a.jsx)(O, { user: e.target, onContextMenu: s }, l)
                      : (0, a.jsx)(
                          "span",
                          { onContextMenu: s, children: t },
                          l
                        ),
                  count: r.count,
                  channel: r.channel
                    ? "string" == typeof r.channel
                      ? r.channel
                      : (0, E.computeChannelName)(
                          r.channel,
                          S.default,
                          f.default,
                          !0
                        )
                    : null,
                  channelHook: (e, t) =>
                    (0, a.jsx)("span", { onContextMenu: l, children: e }, t),
                  subtarget: r.subtarget,
                }),
              })
            : null;
        }
        renderChangeSummary() {
          let { expanded: e, log: t, guild: s, onContentClick: l } = this.props;
          return e && null != s
            ? (0, a.jsx)(C.AuditLogExpandedChangeDetails, {
                log: t,
                guild: s,
                onContentClick: l,
              })
            : null;
        }
        renderEntryAvatar() {
          let {
              props: { log: e, guildId: t, theme: s },
            } = this,
            {
              user: l,
              userId: n,
              options: { integration_type: i },
            } = e;
          if (null != l && null != n)
            return (0, a.jsx)(u.Popout, {
              preload: () =>
                (0, _.default)(n, l.getAvatarURL(t, 80), { guildId: t }),
              renderPopout: e =>
                (0, a.jsx)(I.default, { ...e, userId: n, guildId: t }),
              children: s => {
                var l, n, i;
                return (0, a.jsx)(u.Avatar, {
                  ...s,
                  onClick: e => {
                    e.stopPropagation(), s.onClick(e);
                  },
                  className: L.avatar,
                  src:
                    ((l = e),
                    (n = t),
                    l.action ===
                      R.AuditLogActions.AUTO_MODERATION_BLOCK_MESSAGE ||
                    l.action ===
                      R.AuditLogActions.AUTO_MODERATION_FLAG_TO_CHANNEL ||
                    l.action ===
                      R.AuditLogActions
                        .AUTO_MODERATION_USER_COMMUNICATION_DISABLED ||
                    l.action ===
                      R.AuditLogActions.AUTO_MODERATION_QUARANTINE_USER
                      ? (0, h.getAutomodAvatarURL)()
                      : null === (i = l.user) || void 0 === i
                        ? void 0
                        : i.getAvatarURL(n, 40)),
                  "aria-hidden": !0,
                  size: u.AvatarSizes.SIZE_40,
                });
              },
            });
          if (null != i) {
            let e = c.default.get(i);
            if (null != e) {
              let t = (0, d.isThemeDark)(s) ? e.icon.darkSVG : e.icon.lightSVG;
              return (0, a.jsx)(u.Avatar, {
                className: L.avatar,
                src: t,
                "aria-hidden": !0,
                size: u.AvatarSizes.SIZE_40,
              });
            }
          }
          return null;
        }
        render() {
          let e;
          let {
              log: t,
              className: s,
              expanded: l,
              onHeaderClick: n,
            } = this.props,
            o = this.hasChangesToRender(),
            d = L.headerDefault;
          l ? (d = L.headerExpanded) : o && (d = L.headerClickable);
          let c = t.timestampStart.calendar(),
            E = t.timestampEnd.calendar();
          e =
            c === E
              ? (0, a.jsx)(u.Text, {
                  className: L.timestamp,
                  variant: "text-sm/normal",
                  children: c,
                })
              : (0, a.jsxs)(u.Text, {
                  className: L.timestamp,
                  variant: "text-sm/normal",
                  children: [c, "—", E],
                });
          let _ = o ? n : R.NOOP;
          return (0, a.jsx)(r.ListNavigatorItem, {
            id: t.id,
            children: n =>
              (0, a.jsxs)("div", {
                className: i(L.auditLog, s),
                children: [
                  (0, a.jsxs)(u.Clickable, {
                    className: d,
                    "aria-expanded": l,
                    onClick: _,
                    ...n,
                    children: [
                      (0, a.jsx)(C.AuditLogIcon, {
                        action: t.action,
                        actionType: t.actionType,
                        targetType: t.targetType,
                      }),
                      this.renderEntryAvatar(),
                      (0, a.jsxs)("div", {
                        className: L.timeWrap,
                        children: [
                          (0, a.jsx)("div", {
                            className: L.title,
                            children: this.renderTitle(),
                          }),
                          e,
                        ],
                      }),
                      o
                        ? (0, a.jsx)(m.default, {
                            className: L.expand,
                            foreground: L.expandForeground,
                            expanded: l,
                            "aria-hidden": !0,
                          })
                        : null,
                    ],
                  }),
                  l ? (0, a.jsx)("div", { className: L.divider }) : null,
                  this.renderChangeSummary(),
                ],
              }),
          });
        }
      }
      var A = o.default.connectStores([T.default], () => ({
        theme: T.default.theme,
      }))(p);
    },
    851490: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          resetDefaultChannels: function () {
            return T;
          },
          toggleDefaultChannel: function () {
            return f;
          },
          saveDefaultChannels: function () {
            return S;
          },
        }),
        s("222007");
      var a = s("913144"),
        l = s("404118"),
        n = s("448993"),
        i = s("863636"),
        r = s("380710"),
        o = s("42203"),
        d = s("449008"),
        u = s("653274"),
        c = s("330724"),
        E = s("136278"),
        _ = s("653138"),
        I = s("782340");
      function T() {
        a.default.dispatch({ type: "GUILD_SETTINGS_DEFAULT_CHANNELS_RESET" });
      }
      function f(e) {
        a.default.dispatch({
          type: "GUILD_SETTINGS_DEFAULT_CHANNELS_TOGGLE",
          channelId: e,
        });
      }
      async function S(e) {
        let t = Array.from(u.default.editedDefaultChannelIds).filter(
            e => null != o.default.getChannel(e)
          ),
          s = E.default.advancedMode,
          [T, f] = (0, r.getChattableDefaultChannels)(e.id, [...t]),
          S = (0, r.getMinimumSetOfDefaultChannelIds)(
            e.id,
            t,
            E.default.editedOnboardingPrompts
          ),
          m = (0, r.getMinimumSetOfDefaultChannelIds)(
            e.id,
            t,
            E.default.editedOnboardingPrompts,
            r.isChattableChannelId
          );
        if (
          i.default.getEnabled(e.id) &&
          ((!s &&
            (f.length < _.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING ||
              T.length < _.NUM_DEFAULT_CHATTABLE_CHANNELS_MIN)) ||
            (s &&
              (S.length < _.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING ||
                m.length < _.NUM_DEFAULT_CHATTABLE_CHANNELS_MIN)))
        ) {
          l.default.show({
            title: I.default.Messages.ONBOARDING_PROMPT_SAVE_FAILED,
            body: I.default.Messages
              .DEFAULT_CHANNELS_SAVE_INVALID_DEFAULT_CHANNELS,
          });
          return;
        }
        if (u.default.hasChanges()) {
          a.default.dispatch({
            type: "GUILD_SETTINGS_DEFAULT_CHANNELS_SUBMIT",
          });
          try {
            await (0, c.editOnboarding)(e.id, { default_channel_ids: t }),
              a.default.dispatch({
                type: "GUILD_SETTINGS_DEFAULT_CHANNELS_SAVE_SUCCESS",
                guildId: e.id,
                channelIds: t,
              });
          } catch (s) {
            var N;
            let { fieldName: e, error: t } =
              null !==
                (N = new (0, n.APIError)(s).getAnyErrorMessageAndField()) &&
              void 0 !== N
                ? N
                : {};
            l.default.show({
              title: I.default.Messages.ONBOARDING_PROMPT_SAVE_FAILED,
              body: [e, t].filter(d.isNotNullish).join(": "),
            }),
              a.default.dispatch({
                type: "GUILD_SETTINGS_DEFAULT_CHANNELS_SAVE_FAILED",
              });
          }
        }
      }
    },
    904383: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useIsChecked: function () {
            return u;
          },
          useIsDisabled: function () {
            return c;
          },
          useDisabledTooltip: function () {
            return E;
          },
          useTooltip: function () {
            return _;
          },
        });
      var a = s("446674"),
        l = s("42203"),
        n = s("305961"),
        i = s("991170"),
        r = s("653274"),
        o = s("49111"),
        d = s("782340");
      function u(e, t) {
        return (0, a.useStateFromStores)(
          [r.default],
          () =>
            r.default.editedDefaultChannelIds.has(e) ||
            (null != t && r.default.editedDefaultChannelIds.has(t))
        );
      }
      function c(e, t) {
        return (0, a.useStateFromStores)(
          [r.default],
          () =>
            e === t || (null != t && r.default.editedDefaultChannelIds.has(t))
        );
      }
      function E(e, t) {
        return (0, a.useStateFromStores)([r.default, l.default], () =>
          null != t && r.default.editedDefaultChannelIds.has(t)
            ? d.default.Messages.CHANNEL_BROWSER_DISABLED_BY_CATEGORY
            : i.default.canEveryoneRole(
                  o.Permissions.VIEW_CHANNEL,
                  l.default.getChannel(e)
                )
              ? void 0
              : d.default.Messages.DEFAULT_CHANNELS_DISABLED_PRIVATE
        );
      }
      function _(e, t) {
        let s = (0, a.useStateFromStores)([n.default], () => {
            var s;
            return (
              (null === (s = n.default.getGuild(e)) || void 0 === s
                ? void 0
                : s.rulesChannelId) === t
            );
          }),
          i = (0, a.useStateFromStores)([l.default], () => {
            var e;
            return null === (e = l.default.getChannel(t)) || void 0 === e
              ? void 0
              : e.isGuildVocal();
          });
        return s
          ? d.default.Messages
              .GUILD_ONBOARDING_DEFAULT_CHANNELS_RULES_DISCOURAGED
          : i
            ? d.default.Messages.GUILD_ONBOARDING_DEFAULT_CHANNELS_VOICE_TOOLTIP
            : void 0;
      }
    },
    435076: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          updateWelcomeMessage: function () {
            return T;
          },
          addNewMemberAction: function () {
            return f;
          },
          updateNewMemberAction: function () {
            return S;
          },
          deleteNewMemberAction: function () {
            return m;
          },
          reorderNewMemberActions: function () {
            return N;
          },
          updateNewMemberActionIconData: function () {
            return g;
          },
          updateNewMemberActionIcon: function () {
            return h;
          },
          addResourceChannel: function () {
            return C;
          },
          updateResourceChannel: function () {
            return R;
          },
          deleteResourceChannel: function () {
            return x;
          },
          reorderResourceChannels: function () {
            return L;
          },
          updateResourceChannelIcon: function () {
            return O;
          },
          saveHomeSettings: function () {
            return p;
          },
          enableHomeSettings: function () {
            return A;
          },
          dismissSuggestedChannels: function () {
            return D;
          },
          resetHomeSettings: function () {
            return v;
          },
        }),
        s("881410");
      var a = s("917351"),
        l = s.n(a),
        n = s("872717"),
        i = s("913144"),
        r = s("404118"),
        o = s("698882"),
        d = s("129092"),
        u = s("233706"),
        c = s("599110"),
        E = s("642807"),
        _ = s("49111"),
        I = s("782340");
      function T(e) {
        i.default.dispatch({
          type: "GUILD_SETTINGS_ONBOARDING_UPDATE_WELCOME_MESSAGE",
          welcomeMessage: e,
        });
      }
      function f(e) {
        i.default.dispatch({
          type: "GUILD_SETTINGS_ONBOARDING_ADD_NEW_MEMBER_ACTION",
          action: e,
        });
      }
      function S(e, t) {
        i.default.dispatch({
          type: "GUILD_SETTINGS_ONBOARDING_UPDATE_NEW_MEMBER_ACTION",
          channelId: e,
          action: t,
        });
      }
      function m(e) {
        i.default.dispatch({
          type: "GUILD_SETTINGS_ONBOARDING_DELETE_NEW_MEMBER_ACTION",
          channelId: e,
        });
      }
      function N(e) {
        i.default.dispatch({
          type: "GUILD_SETTINGS_ONBOARDING_REORDER_NEW_MEMBER_ACTION",
          actions: e,
        });
      }
      function g(e, t) {
        i.default.dispatch({
          type: "GUILD_SETTINGS_ONBOARDING_UPDATE_NEW_MEMBER_ACTION_ICON_DATA",
          channelId: e,
          iconData: t,
        });
      }
      async function h(e, t, s, a) {
        if (!a) return Promise.resolve();
        try {
          let a = await n.default.patch({
              url: _.Endpoints.NEW_MEMBER_ACTION(e, t),
              body: { icon: s },
              oldFormErrors: !0,
            }),
            l = (0, d.newMemberActionFromServer)(a.body);
          return (
            i.default.dispatch({
              type: "GUILD_NEW_MEMBER_ACTION_UPDATE_SUCCESS",
              guildId: e,
              action: l,
            }),
            Promise.resolve(a.body)
          );
        } catch (t) {
          var o;
          let e = l.flatMap(
            null !== (o = t.body) && void 0 !== o ? o : {},
            e => e
          );
          return (
            r.default.show({
              title:
                I.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED,
              body: I.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED_INVALID_WITH_DETAILS.format(
                { errorMessage: e.join(", ") }
              ),
            }),
            Promise.reject()
          );
        }
      }
      function C(e) {
        i.default.dispatch({
          type: "GUILD_SETTINGS_ONBOARDING_ADD_RESOURCE_CHANNEL",
          resourceChannel: e,
        });
      }
      function R(e, t) {
        i.default.dispatch({
          type: "GUILD_SETTINGS_ONBOARDING_UPDATE_RESOURCE_CHANNEL",
          channelId: e,
          resourceChannel: t,
        });
      }
      function x(e) {
        i.default.dispatch({
          type: "GUILD_SETTINGS_ONBOARDING_DELETE_RESOURCE_CHANNEL",
          resourceChannelId: e,
        });
      }
      function L(e) {
        i.default.dispatch({
          type: "GUILD_SETTINGS_ONBOARDING_REORDER_RESOURCE_CHANNEL",
          resourceChannels: e,
        });
      }
      async function O(e, t, s) {
        try {
          let a = await n.default.put({
              url: _.Endpoints.RESOURCE_CHANNEL(e, t),
              body: { icon: s },
              oldFormErrors: !0,
            }),
            l = (0, d.resourceChannelFromServer)(a.body);
          return (
            i.default.dispatch({
              type: "GUILD_RESOURCE_CHANNEL_UPDATE_SUCCESS",
              guildId: e,
              resourceChannel: l,
            }),
            a.body
          );
        } catch (t) {
          var a;
          let e = l.flatMap(
            null !== (a = t.body) && void 0 !== a ? a : {},
            e => e
          );
          r.default.show({
            title:
              I.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED,
            body: I.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED_INVALID_WITH_DETAILS.format(
              { errorMessage: e.join(", ") }
            ),
          });
        }
      }
      function p(e, t) {
        let s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
        if (!s && !E.default.hasChanges()) return Promise.resolve();
        let { serverGuideOptional: a } = (0,
          u.getOptionalOnboardingHomeAdminExperiment)(e),
          l = !a || o.default.getEnabled(e);
        return l && !(0, d.isSettingsValid)(t)
          ? (r.default.show({
              title:
                I.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED,
              body: I.default.Messages
                .GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED_REASON,
            }),
            Promise.reject())
          : (!a && null != t && (t.enabled = !0), M(e, t));
      }
      function A(e, t) {
        let s = o.default.getSettings(e);
        if (t && !(0, d.isSettingsValid)(s)) {
          r.default.show({
            title:
              I.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED,
            body: I.default.Messages
              .GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED_REASON,
          });
          return;
        }
        return (
          i.default.dispatch({
            type: "GUILD_HOME_SETTINGS_TOGGLE_ENABLED",
            guildId: e,
            enabled: t,
          }),
          M(e, { ...s, enabled: t })
        );
      }
      async function M(e, t) {
        var s, a, o, u, E, T, f, S, m;
        i.default.dispatch({ type: "GUILD_HOME_SETTINGS_UPDATE_START" });
        try {
          let l = await n.default.put({
              url: _.Endpoints.GUILD_HOME_SETTINGS(e),
              body: (0, d.settingsToServer)(e, t),
              oldFormErrors: !0,
            }),
            r = (0, d.settingsFromServer)(l.body);
          return (
            i.default.dispatch({
              type: "GUILD_HOME_SETTINGS_UPDATE_SUCCESS",
              guildId: e,
              homeSettings: r,
            }),
            c.default.track(_.AnalyticEvents.GUILD_SETTINGS_GUIDE_UPDATED, {
              guild_id: e,
              welcome_message_author_id: (null !==
                (u =
                  null == r
                    ? void 0
                    : null === (s = r.welcomeMessage) || void 0 === s
                      ? void 0
                      : s.authorIds) && void 0 !== u
                ? u
                : [])[0],
              welcome_message_length:
                null !==
                  (E =
                    null == r
                      ? void 0
                      : null === (o = r.welcomeMessage) || void 0 === o
                        ? void 0
                        : null === (a = o.message) || void 0 === a
                          ? void 0
                          : a.length) && void 0 !== E
                  ? E
                  : 0,
              member_action_channel_ids: (null !==
                (T = null == r ? void 0 : r.newMemberActions) && void 0 !== T
                ? T
                : []
              ).map(e => e.channelId),
              member_action_channel_actions: (null !==
                (f = null == r ? void 0 : r.newMemberActions) && void 0 !== f
                ? f
                : []
              ).map(e => e.actionType),
              resource_channel_ids: (null !==
                (S = null == r ? void 0 : r.resourceChannels) && void 0 !== S
                ? S
                : []
              ).map(e => e.channelId),
              enabled: null == r ? void 0 : r.enabled,
            }),
            l.body
          );
        } catch (t) {
          let e = l.flatMap(
            null !== (m = t.body) && void 0 !== m ? m : {},
            e => e
          );
          i.default.dispatch({ type: "GUILD_HOME_SETTINGS_UPDATE_FAIL" }),
            r.default.show({
              title:
                I.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED,
              body: I.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED_INVALID_WITH_DETAILS.format(
                { errorMessage: e.join(", ") }
              ),
            });
        }
      }
      function D(e, t) {
        null != e &&
          i.default.dispatch({
            type: "GUILD_SETTINGS_ONBOARDING_DISMISS_RESOURCE_CHANNEL_SUGGESTION",
            guildId: e,
            channelIds: t,
          });
      }
      function v() {
        i.default.dispatch({
          type: "GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESET",
        });
      }
    },
    642807: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return g;
          },
        }),
        s("222007");
      var a = s("917351"),
        l = s.n(a),
        n = s("446674"),
        i = s("913144"),
        r = s("698882"),
        o = s("900938");
      let d = { enabled: !1 },
        u = null,
        c = Object.assign({}, d),
        E = !1,
        _ = {},
        I = {};
      function T() {
        (function () {
          (u = null), (c = Object.assign({}, d)), (E = !1), (I = {});
        })(),
          (u = o.default.getGuildId()),
          (c = l.cloneDeep(Object.assign({}, r.default.getSettings(u)))),
          (I = {});
      }
      function f(e, t) {
        if (null == c.newMemberActions) return !1;
        let s = c.newMemberActions.findIndex(t => t.channelId === e);
        if (s < 0) return !1;
        (c.newMemberActions[s] = { ...t }),
          (c.newMemberActions = [...c.newMemberActions]),
          delete I[e];
      }
      function S(e, t) {
        if (null == c.resourceChannels) return !1;
        let s = c.resourceChannels.findIndex(t => t.channelId === e);
        if (s < 0) return !1;
        (c.resourceChannels[s] = { ...t }),
          (c.resourceChannels = [...c.resourceChannels]);
      }
      function m() {
        (E = !1),
          (c = l.cloneDeep(Object.assign({}, r.default.getSettings(u))));
      }
      class N extends n.default.PersistedStore {
        initialize(e) {
          null != e && (_ = e.dismissedSuggestedChannelIdsByGuildId),
            this.waitFor(o.default, r.default);
        }
        getState() {
          return { dismissedSuggestedChannelIdsByGuildId: _ };
        }
        getSettings() {
          return null != c ? c : d;
        }
        hasChanges() {
          return (
            null != u &&
            !l.isEqual(
              l.omit(c, "newMemberActions"),
              l.omit(r.default.getSettings(u), "newMemberActions")
            )
          );
        }
        getSubmitting() {
          return E;
        }
        getDismissedSuggestedChannelIds(e) {
          var t;
          return null == e ? [] : null !== (t = _[e]) && void 0 !== t ? t : [];
        }
        getResourceChannel(e) {
          var t;
          if (null == e) return null;
          let s =
            null === (t = c.resourceChannels) || void 0 === t
              ? void 0
              : t.find(t => t.channelId === e);
          return null == s ? null : s;
        }
        getNewMemberAction(e) {
          var t;
          if (null == e) return null;
          let s =
            null === (t = c.newMemberActions) || void 0 === t
              ? void 0
              : t.find(t => t.channelId === e);
          return null == s ? null : s;
        }
        getNewMemberActionIconData(e) {
          var t;
          return null == e
            ? null
            : null !== (t = I[e]) && void 0 !== t
              ? t
              : null;
        }
        hasActionIconChanged(e) {
          if (null == e) return !1;
          let t = r.default.getNewMemberAction(u, e);
          if (null == t) return !1;
          let s = I[e];
          return void 0 !== s && (null != s || (null != t.icon && null == s));
        }
      }
      (N.displayName = "GuildSettingsOnboardingHomeSettingsStore"),
        (N.persistKey = "GuildSettingsOnboardingHomeSettingsStore");
      var g = new N(i.default, {
        GUILD_SETTINGS_INIT: T,
        GUILD_SETTINGS_SET_SECTION: T,
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESET: T,
        GUILD_HOME_SETTINGS_FETCH_SUCCESS: function () {
          (c = l.cloneDeep(Object.assign({}, r.default.getSettings(u)))),
            (I = {});
        },
        GUILD_HOME_SETTINGS_UPDATE_START: function () {
          E = !0;
        },
        GUILD_HOME_SETTINGS_UPDATE_SUCCESS: m,
        GUILD_HOME_SETTINGS_UPDATE_FAIL: m,
        GUILD_NEW_MEMBER_ACTION_UPDATE_SUCCESS: function (e) {
          let { action: t } = e;
          return f(t.channelId, t);
        },
        GUILD_RESOURCE_CHANNEL_UPDATE_SUCCESS: function (e) {
          let { resourceChannel: t } = e;
          S(t.channelId, t);
        },
        GUILD_SETTINGS_ONBOARDING_UPDATE_WELCOME_MESSAGE: function (e) {
          let { welcomeMessage: t } = e;
          if (null == t) c.welcomeMessage = void 0;
          else {
            var s, a, l, n, i, r;
            c.welcomeMessage = {
              authorIds:
                null !==
                  (n =
                    null !== (l = t.authorIds) && void 0 !== l
                      ? l
                      : null === (s = c.welcomeMessage) || void 0 === s
                        ? void 0
                        : s.authorIds) && void 0 !== n
                  ? n
                  : [],
              message:
                null !==
                  (r =
                    null !== (i = t.message) && void 0 !== i
                      ? i
                      : null === (a = c.welcomeMessage) || void 0 === a
                        ? void 0
                        : a.message) && void 0 !== r
                  ? r
                  : "",
            };
          }
        },
        GUILD_SETTINGS_ONBOARDING_UPDATE_NEW_MEMBER_ACTION: function (e) {
          let { channelId: t, action: s } = e;
          return f(t, s);
        },
        GUILD_SETTINGS_ONBOARDING_ADD_NEW_MEMBER_ACTION: function (e) {
          var t;
          let { action: s } = e;
          (c.newMemberActions =
            null !== (t = c.newMemberActions) && void 0 !== t ? t : []),
            (c.newMemberActions = [...c.newMemberActions, s]);
        },
        GUILD_SETTINGS_ONBOARDING_DELETE_NEW_MEMBER_ACTION: function (e) {
          let { channelId: t } = e;
          if (null == c.newMemberActions) return !1;
          c.newMemberActions = [
            ...c.newMemberActions.filter(e => e.channelId !== t),
          ];
        },
        GUILD_SETTINGS_ONBOARDING_REORDER_NEW_MEMBER_ACTION: function (e) {
          let { actions: t } = e;
          c.newMemberActions = t;
        },
        GUILD_SETTINGS_ONBOARDING_UPDATE_RESOURCE_CHANNEL: function (e) {
          let { channelId: t, resourceChannel: s } = e;
          S(t, s);
        },
        GUILD_SETTINGS_ONBOARDING_ADD_RESOURCE_CHANNEL: function (e) {
          var t;
          let { resourceChannel: s } = e;
          (c.resourceChannels = (
            null !== (t = c.resourceChannels) && void 0 !== t ? t : []
          ).filter(e => e.channelId !== s.channelId)),
            (c.resourceChannels = [...c.resourceChannels, s]);
        },
        GUILD_SETTINGS_ONBOARDING_DELETE_RESOURCE_CHANNEL: function (e) {
          let { resourceChannelId: t } = e;
          if (null == c.resourceChannels) return !1;
          c.resourceChannels = [
            ...c.resourceChannels.filter(e => e.channelId !== t),
          ];
        },
        GUILD_SETTINGS_ONBOARDING_REORDER_RESOURCE_CHANNEL: function (e) {
          let { resourceChannels: t } = e;
          c.resourceChannels = t;
        },
        GUILD_SETTINGS_ONBOARDING_DISMISS_RESOURCE_CHANNEL_SUGGESTION:
          function (e) {
            var t;
            let { guildId: s, channelIds: a } = e;
            _[s] = [...(null !== (t = _[s]) && void 0 !== t ? t : []), ...a];
          },
        GUILD_SETTINGS_ONBOARDING_UPDATE_NEW_MEMBER_ACTION_ICON_DATA: function (
          e
        ) {
          var t;
          let { channelId: s, iconData: a } = e,
            l =
              null === (t = c.newMemberActions) || void 0 === t
                ? void 0
                : t.find(e => e.channelId === s);
          if (null == l) return !1;
          (I[s] = a), (l.icon = null);
        },
      });
    },
    397947: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return h;
          },
        }),
        s("222007");
      var a = s("446674"),
        l = s("913144"),
        n = s("863636"),
        i = s("129092"),
        r = s("900938"),
        o = s("353830"),
        d = s("772871"),
        u = s("653274"),
        c = s("642807"),
        E = s("136278"),
        _ = s("259483"),
        I = s("867928"),
        T = s("49111");
      let f = new Set(),
        S = _.GuildSettingsOnboardingPage.LANDING,
        m = null;
      function N(e) {
        let { subsection: t } = e;
        if (r.default.getGuildId() === m) return !1;
        (S =
          t === T.GuildSettingsSubsections.SERVER_GUIDE
            ? _.GuildSettingsOnboardingPage.HOME_SETTINGS
            : _.GuildSettingsOnboardingPage.LANDING),
          (m = r.default.getGuildId());
      }
      class g extends a.default.Store {
        initialize() {
          this.waitFor(n.default, u.default, E.default, c.default, o.default),
            this.syncWith(
              [n.default, u.default, E.default, c.default, o.default],
              () => !0
            );
        }
        isEducationUpsellDismissed(e) {
          return f.has(e);
        }
        getCurrentPage() {
          return S;
        }
        hasChanges() {
          if (null == m) return !1;
          let e = n.default.isAdvancedMode(m);
          if (S === _.GuildSettingsOnboardingPage.DEFAULT_CHANNELS)
            return e
              ? u.default.hasChanges() || E.default.hasChanges()
              : u.default.hasChanges();
          if (S === _.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS)
            return E.default.hasChanges();
          if (S === _.GuildSettingsOnboardingPage.HOME_SETTINGS)
            return c.default.hasChanges();
          return !1;
        }
        hasConfiguredAnythingForCurrentStep() {
          if (null == m) return !1;
          if (S === _.GuildSettingsOnboardingPage.SAFETY_CHECK) return !0;
          if (S === _.GuildSettingsOnboardingPage.DEFAULT_CHANNELS)
            return u.default.editedDefaultChannelIds.size > 0;
          if (S === _.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS)
            return E.default.editedOnboardingPrompts.length > 0;
          else if (S === _.GuildSettingsOnboardingPage.HOME_SETTINGS)
            return !(0, i.isSettingsEmpty)(c.default.getSettings());
          return !1;
        }
        hasErrors() {
          return (
            S === _.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS &&
            null != E.default.errors.find(e => null != e)
          );
        }
        showNotice() {
          if (null == m) return !1;
          if ((0, I.isOnboardingWizardCompleted)(m)) return this.hasChanges();
          let e = o.default.getCurrentPage();
          return (
            (S !== _.GuildSettingsOnboardingPage.SAFETY_CHECK ||
              e === d.GuildSettingsSafetyPage.OVERVIEW) &&
            null != S &&
            S !== _.GuildSettingsOnboardingPage.LANDING
          );
        }
        canCloseEarly() {
          return (
            null == m ||
            (!this.hasErrors() &&
              (!(0, I.isOnboardingWizardCompleted)(m) || !this.hasChanges()))
          );
        }
      }
      g.displayName = "GuildSettingsOnboardingStore";
      var h = new g(l.default, {
        GUILD_SETTINGS_INIT: N,
        GUILD_SETTINGS_SET_SECTION: N,
        GUILD_SETTINGS_ONBOARDING_STEP: function (e) {
          let { step: t } = e;
          S = t;
        },
        GUILD_SETTINGS_ONBOARDING_EDUCATION_UPSELL_DISMISSED: function (e) {
          let { upsellType: t } = e;
          f.add(t);
        },
      });
    },
    223729: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return o;
          },
        }),
        s("424973");
      var a = s("446674"),
        l = s("648747"),
        n = s("161188"),
        i = s("42203"),
        r = s("49111");
      function o(e) {
        return (0, a.useStateFromStoresArray)([n.default, i.default], () => {
          var t;
          let s = (
              null !== (t = n.default.getTopChannelIds(e.id)) && void 0 !== t
                ? t
                : []
            )
              .map(e => i.default.getChannel(e))
              .filter(t => null == t || t.id !== e.rulesChannelId),
            a = [],
            o = 0;
          return (
            s.forEach(e => {
              if (e.type === r.ChannelTypes.GUILD_ANNOUNCEMENT) {
                if (o >= 2) return;
                o++;
              }
              a.length < 5 && !a.includes(e) && a.push(e);
            }),
            a.sort(
              (t, s) =>
                ((0, l.canChannelBeDefault)(e.id, s.id) ? 1 : 0) -
                ((0, l.canChannelBeDefault)(e.id, t.id) ? 1 : 0)
            ),
            a
          );
        });
      }
    },
    867928: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return i;
          },
          isOnboardingWizardCompleted: function () {
            return r;
          },
        });
      var a = s("446674"),
        l = s("305961"),
        n = s("49111");
      function i(e) {
        return (0, a.useStateFromStores)([l.default], () => {
          let t = l.default.getGuild(e);
          return (
            null != t &&
            t.hasFeature(n.GuildFeatures.GUILD_ONBOARDING_EVER_ENABLED)
          );
        });
      }
      function r(e) {
        let t = l.default.getGuild(e);
        return (
          null != t &&
          t.hasFeature(n.GuildFeatures.GUILD_ONBOARDING_EVER_ENABLED)
        );
      }
    },
    682327: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useEditedChattableDefaultChannelsWithQuestions: function () {
            return I;
          },
          useAdvancedModeReady: function () {
            return T;
          },
          AdvancedModeToggle: function () {
            return f;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("65597"),
        i = s("77078"),
        r = s("850364"),
        o = s("863636"),
        d = s("380710"),
        u = s("131835"),
        c = s("136278"),
        E = s("653138"),
        _ = s("782340");
      function I(e, t) {
        let s = (0, n.useStateFromStoresArray)([c.default], () =>
            (0, d.getMinimumSetOfDefaultChannelIds)(
              e,
              t,
              c.default.editedOnboardingPrompts
            )
          ),
          a = (0, n.useStateFromStoresArray)([c.default], () =>
            (0, d.getMinimumSetOfDefaultChannelIds)(
              e,
              t,
              c.default.editedOnboardingPrompts,
              d.isChattableChannelId
            )
          );
        return [a, s];
      }
      function T(e) {
        let t = (0, n.default)([o.default], () => o.default.isAdvancedMode(e)),
          [s, a] = (function (e) {
            let t = (0, n.useStateFromStoresArray)([o.default], () =>
                (0, d.getMinimumSetOfDefaultChannelIds)(
                  e,
                  o.default.getDefaultChannelIds(e),
                  o.default.getOnboardingPrompts(e)
                )
              ),
              s = (0, n.useStateFromStoresArray)([o.default], () =>
                (0, d.getMinimumSetOfDefaultChannelIds)(
                  e,
                  o.default.getDefaultChannelIds(e),
                  o.default.getOnboardingPrompts(e),
                  d.isChattableChannelId
                )
              );
            return [s, t];
          })(e);
        return (
          !!t &&
          a.length >= E.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING &&
          s.length >= E.NUM_DEFAULT_CHATTABLE_CHANNELS_MIN
        );
      }
      function f(e) {
        let { guildId: t, className: s } = e,
          d = (0, r.useAdvancedModeExperiment)(t).advancedModeAllowed,
          c = (0, n.default)([o.default], () => o.default.isAdvancedMode(t)),
          I = l.useCallback(() => {
            let e = c
              ? E.GuildOnboardingMode.ONBOARDING_DEFAULT
              : E.GuildOnboardingMode.ONBOARDING_ADVANCED;
            c
              ? (0, i.openModal)(s =>
                  (0, a.jsx)(i.ConfirmModal, {
                    header: _.default.Messages.ONBOARDING_DEFAULT_MODE_HEADER,
                    confirmText: _.default.Messages.DISABLE,
                    cancelText: _.default.Messages.CANCEL,
                    confirmButtonColor: i.Button.Colors.BRAND,
                    onConfirm: () => (0, u.toggleAdvancedSettings)(t, e),
                    ...s,
                    children: (0, a.jsx)(i.Text, {
                      variant: "text-md/normal",
                      children:
                        _.default.Messages.ONBOARDING_DEFAULT_MODE_DESCRIPTION,
                    }),
                  })
                )
              : (0, i.openModal)(s =>
                  (0, a.jsx)(i.ConfirmModal, {
                    header: _.default.Messages.ONBOARDING_ADVANCED_MODE_HEADER,
                    confirmText:
                      _.default.Messages.ONBOARDING_ADVANCED_MODE_ENABLE,
                    cancelText: _.default.Messages.CANCEL,
                    confirmButtonColor: i.Button.Colors.BRAND,
                    onConfirm: () => (0, u.toggleAdvancedSettings)(t, e),
                    ...s,
                    children: (0, a.jsx)(i.Text, {
                      variant: "text-md/normal",
                      children:
                        _.default.Messages.ONBOARDING_ADVANCED_MODE_DESCRIPTION,
                    }),
                  })
                );
          }, [t, c]);
        return d
          ? (0, a.jsx)("div", {
              className: s,
              children: (0, a.jsx)(i.Anchor, {
                onClick: I,
                children: (0, a.jsx)(i.Text, {
                  variant: "text-sm/medium",
                  color: "text-link",
                  children: c
                    ? _.default.Messages.ONBOARDING_DEFAULT_MODE_TOGGLE
                    : _.default.Messages.ONBOARDING_ADVANCED_MODE_TOGGLE,
                }),
              }),
            })
          : null;
      }
    },
    925649: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return O;
          },
        }),
        s("424973");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("669491"),
        o = s("77078"),
        d = s("272030"),
        u = s("648747"),
        c = s("380710"),
        E = s("41594"),
        _ = s("676143"),
        I = s("98292"),
        T = s("45029"),
        f = s("851490"),
        S = s("904383"),
        m = s("223729"),
        N = s("49111"),
        g = s("782340"),
        h = s("865027");
      function C(e) {
        let { guild: t, channel: l } = e,
          n = (0, S.useIsChecked)(l.id);
        return "null" === l.id
          ? (0, a.jsx)("div", {
              className: i(h.categoryRow, h.uncategorized),
              children: (0, a.jsx)(o.Text, {
                className: h.categoryText,
                color: "text-muted",
                variant: "text-xs/semibold",
                lineClamp: 1,
                children: l.name,
              }),
            })
          : (0, a.jsxs)(o.Clickable, {
              className: i(h.categoryRow, {
                [h.uncategorized]: "null" === l.id,
              }),
              onContextMenu: e => {
                (0, d.openContextMenuLazy)(e, async () => {
                  let { default: e } = await s
                    .el("142047")
                    .then(s.bind(s, "142047"));
                  return s => (0, a.jsx)(e, { ...s, channel: l, guild: t });
                });
              },
              onClick: e => {
                e.stopPropagation();
                let n = (0, u.canChannelBeDefault)(t.id, l.id);
                return (
                  n
                    ? (0, f.toggleDefaultChannel)(l.id)
                    : (0, o.openModalLazy)(async () => {
                        let { default: e } = await s
                          .el("10035")
                          .then(s.bind(s, "10035"));
                        return s =>
                          (0, a.jsx)(e, {
                            ...s,
                            guildId: t.id,
                            startingChannelId: l.id,
                          });
                      }),
                  !0
                );
              },
              children: [
                (0, a.jsx)(o.Text, {
                  className: h.categoryText,
                  color: "text-muted",
                  variant: "text-xs/semibold",
                  lineClamp: 1,
                  children: l.name,
                }),
                (0, a.jsx)(o.Checkbox, {
                  "aria-checked": n,
                  value: n,
                  type: o.Checkbox.Types.INVERTED,
                  className: h.checkbox,
                  displayOnly: !0,
                }),
              ],
            });
      }
      let R = l.memo(function () {
          return (0, a.jsx)("div", { className: h.separator });
        }),
        x = l.memo(function (e) {
          let { index: t } = e;
          return (0, a.jsx)(
            o.Text,
            {
              variant: "text-xs/normal",
              className: h.subtitleSeparator,
              children: "\xb7",
            },
            "separator-".concat(t)
          );
        }),
        L = l.memo(function (e) {
          let {
              channel: t,
              category: l,
              guild: n,
              isFirstChannel: _,
              isLastChannel: C,
              tooltipDirection: L = "right",
            } = e,
            O = (0, S.useIsChecked)(t.id, l.id),
            p = (0, S.useIsDisabled)(t.id, l.id),
            A = (0, S.useDisabledTooltip)(t.id, l.id),
            M = (0, S.useTooltip)(n.id, l.id),
            D = (0, m.default)(n),
            v = null != D.find(e => e.id === t.id),
            G = (0, c.useIsChattableChannel)(t.id),
            j = e => {
              if (p) return;
              e.stopPropagation();
              let l = (0, u.canChannelBeDefault)(n.id, t.id);
              return (
                l
                  ? (0, f.toggleDefaultChannel)(t.id)
                  : (0, o.openModalLazy)(async () => {
                      let { default: e } = await s
                        .el("10035")
                        .then(s.bind(s, "10035"));
                      return s =>
                        (0, a.jsx)(e, {
                          ...s,
                          guildId: n.id,
                          startingChannelId: t.id,
                        });
                    }),
                !0
              );
            },
            U = e => {
              t.isGuildVocal()
                ? (0, d.openContextMenuLazy)(e, async () => {
                    let { default: e } = await s
                      .el("168003")
                      .then(s.bind(s, "168003"));
                    return s => (0, a.jsx)(e, { ...s, channel: t, guild: n });
                  })
                : (0, d.openContextMenuLazy)(e, async () => {
                    let { default: e } = await s
                      .el("327241")
                      .then(s.bind(s, "327241"));
                    return s => (0, a.jsx)(e, { ...s, channel: t, guild: n });
                  });
            };
          return (0, a.jsxs)(a.Fragment, {
            children: [
              (0, a.jsx)(o.Tooltip, {
                text: null != A ? A : M,
                delay: 500,
                position: L,
                children: e =>
                  (0, a.jsxs)(o.Clickable, {
                    className: i(h.channelRow, {
                      [h.firstChannel]: _,
                      [h.lastChannel]: C,
                      [h.disabled]: p,
                    }),
                    ...e,
                    onClick: j,
                    onContextMenu: U,
                    children: [
                      (0, a.jsx)("div", {
                        className: h.channelInfo,
                        children: (0, a.jsxs)("div", {
                          className: h.channelName,
                          children: [
                            (0, a.jsx)(E.ChannelItemIcon, {
                              channel: t,
                              guild: n,
                            }),
                            (0, a.jsx)(I.default, {
                              className: h.name,
                              children: (0, a.jsx)(o.Text, {
                                className: h.channelText,
                                variant: "text-md/medium",
                                lineClamp: 1,
                                color: p ? "text-muted" : "text-normal",
                                children: t.name,
                              }),
                            }),
                            v
                              ? (0, a.jsxs)(a.Fragment, {
                                  children: [
                                    (0, a.jsx)(x, { index: 0 }),
                                    (0, a.jsx)(o.Text, {
                                      variant: "text-xs/medium",
                                      className: h.channelSubtitle,
                                      color: "text-brand",
                                      children:
                                        g.default.Messages.CHANNEL_POPULAR,
                                    }),
                                  ],
                                })
                              : null,
                          ],
                        }),
                      }),
                      (0, a.jsx)("div", {
                        className: h.channelActions,
                        children: (0, u.canChannelBeDefault)(t.guild_id, t.id)
                          ? (0, a.jsx)(o.Checkbox, {
                              "aria-checked": O,
                              value: O,
                              type: o.Checkbox.Types.INVERTED,
                              disabled: p,
                              color: G
                                ? r.default.colors.TEXT_BRAND.css
                                : r.default.colors.BUTTON_SECONDARY_BACKGROUND
                                    .css,
                              innerClassName: h.checkboxInner,
                              displayOnly: !0,
                            })
                          : (0, a.jsxs)(o.Button, {
                              look: o.Button.Looks.OUTLINED,
                              color: o.Button.Colors.PRIMARY,
                              className: h.lockedPill,
                              innerClassName: h.lockedPillInner,
                              onClick: N.NOOP,
                              children: [
                                (0, a.jsx)(T.default, {
                                  width: 16,
                                  height: 16,
                                }),
                                (0, a.jsx)(o.Text, {
                                  variant: "text-sm/medium",
                                  color: "none",
                                  children: g.default.Messages.UNLOCK,
                                }),
                              ],
                            }),
                      }),
                    ],
                  }),
              }),
              !C && (0, a.jsx)(R, {}),
            ],
          });
        });
      function O(e) {
        let { categories: t, guild: s, className: n, hasSidebar: i } = e,
          r = l.useCallback(
            e => {
              let l = t._categories[e];
              return (0, a.jsx)(
                C,
                { channel: l.channel, guild: s },
                l.channel.id
              );
            },
            [t, s]
          ),
          o = l.useCallback(
            (e, l) => {
              let n = t._categories[e],
                r = t[n.channel.id][l];
              return null == r
                ? null
                : (0, a.jsx)(
                    L,
                    {
                      category: n.channel,
                      channel: r.channel,
                      guild: s,
                      isFirstChannel: 0 === l,
                      isLastChannel: t[n.channel.id].length - 1 === l,
                      tooltipDirection: i ? "right" : "top",
                    },
                    r.channel.id
                  );
            },
            [t, s, i]
          ),
          d = (0, _.useChannelBrowserSections)(s.id, t, 64);
        return (0, a.jsx)("div", {
          className: n,
          children: d.map((e, t) => {
            let s = r(t),
              l = [],
              n = e.rowCount;
            if (0 === n) return null;
            for (let e = 0; e < n; e++) l.push(o(t, e));
            return (0, a.jsxs)(a.Fragment, { children: [s, l] });
          }),
        });
      }
    },
    795126: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return m;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("414456"),
        n = s.n(l),
        i = s("446674"),
        r = s("77078"),
        o = s("419830"),
        d = s("648747"),
        u = s("380710"),
        c = s("843323"),
        E = s("461380"),
        _ = s("593195"),
        I = s("653274"),
        T = s("34654"),
        f = s("782340"),
        S = s("402013");
      function m(e) {
        let { guild: t, scrollToQuestions: s } = e,
          l = (0, i.useStateFromStores)(
            [I.default],
            () => I.default.editedDefaultChannelIds
          ),
          n = (0, c.useFlattenedChannels)(t.id, l),
          r = n.filter(
            e => e.isCategory() || (0, d.canChannelBeDefault)(e.guild_id, e.id)
          );
        return (0, a.jsxs)("div", {
          className: S.container,
          children: [
            (0, a.jsx)("div", {
              className: S.header,
              children: (0, a.jsx)(T.default, {
                guildId: t.id,
                scrollToQuestions: s,
              }),
            }),
            (0, a.jsxs)("div", {
              className: S.channelList,
              children: [
                (0, a.jsx)(h, {}),
                0 === r.length && (0, a.jsx)(N, {}),
                (0, a.jsx)(g, { channels: r }),
              ],
            }),
          ],
        });
      }
      function N() {
        return (0, a.jsxs)("div", {
          className: S.emptyState,
          children: [
            (0, a.jsx)("div", {
              className: S.emptyStateIcon,
              children: (0, a.jsx)(_.default, { width: 24, height: 24 }),
            }),
            (0, a.jsx)(r.Text, {
              className: S.channelName,
              variant: "text-md/normal",
              color: "text-muted",
              children: f.default.Messages.DEFAULT_CHANNELS_PREVIEW_EMPTY_STATE,
            }),
          ],
        });
      }
      function g(e) {
        let { channels: t } = e;
        return (0, a.jsx)(a.Fragment, {
          children: t.map(e =>
            e.isCategory()
              ? (0, a.jsx)(C, { label: e.name }, e.id)
              : (0, a.jsx)(R, { channel: e }, e.id)
          ),
        });
      }
      function h() {
        return (0, a.jsx)("div", { className: S.divider });
      }
      function C(e) {
        let { label: t } = e;
        return (0, a.jsxs)("div", {
          className: S.category,
          children: [
            (0, a.jsx)(E.default, {
              className: S.caret,
              width: 12,
              height: 12,
              direction: E.default.Directions.DOWN,
            }),
            (0, a.jsx)(r.Text, {
              variant: "text-xs/semibold",
              color: "text-muted",
              lineClamp: 1,
              children: t,
            }),
          ],
        });
      }
      function R(e) {
        var t;
        let { channel: s } = e,
          l = (0, u.isChattableChannel)(s),
          i =
            null !== (t = (0, o.getChannelIconComponent)(s)) && void 0 !== t
              ? t
              : _.default;
        return (0, a.jsxs)("div", {
          className: S.channel,
          children: [
            (0, a.jsx)(i, { className: S.channelIcon, width: 16, height: 16 }),
            (0, a.jsx)(r.Text, {
              className: S.channelName,
              variant: "text-md/normal",
              color: "text-muted",
              lineClamp: 1,
              children: s.name,
            }),
            (0, a.jsx)("div", { className: n({ [S.chattableIndicator]: l }) }),
          ],
        });
      }
    },
    34654: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return S;
          },
        }),
        s("222007");
      var a = s("37983");
      s("884691");
      var l = s("446674"),
        n = s("669491"),
        i = s("77078"),
        r = s("863636"),
        o = s("380710"),
        d = s("578706"),
        u = s("381546"),
        c = s("266926"),
        E = s("653274"),
        _ = s("682327"),
        I = s("653138"),
        T = s("782340"),
        f = s("376557");
      function S(e) {
        let { guildId: t, scrollToQuestions: s } = e,
          S = (0, l.useStateFromStores)([r.default], () =>
            r.default.isAdvancedMode(t)
          ),
          m = (0, l.useStateFromStores)(
            [E.default],
            () => E.default.editedDefaultChannelIds
          ),
          [N, g] = (0, o.useChattableDefaultChannels)(t, [...m]),
          [h, C] = (0, _.useEditedChattableDefaultChannelsWithQuestions)(t, [
            ...m,
          ]),
          R = S ? C.length : g.length,
          x = S ? h.length : N.length,
          L = R < I.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING,
          O = x >= I.NUM_DEFAULT_CHATTABLE_CHANNELS_MIN,
          p = C.length - g.length,
          A = (0, a.jsx)(d.default, {
            color: n.default.unsafe_rawColors.BRAND_500.css,
            backgroundColor: n.default.unsafe_rawColors.WHITE_100.css,
            className: f.icon,
            width: 18,
            height: 18,
          }),
          M = (0, a.jsx)(u.default, {
            className: f.icon,
            color: "var(--background-accent)",
            backgroundColor: n.default.colors.WHITE.css,
            width: 18,
            height: 18,
          }),
          D = [
            (Math.min(I.NUM_DEFAULT_CHATTABLE_CHANNELS_MIN, x) /
              I.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING) *
              100,
            (Math.min(I.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING, R) /
              I.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING) *
              100,
          ],
          v =
            !L && O
              ? [
                  n.default.colors.TEXT_POSITIVE.css,
                  n.default.colors.TEXT_POSITIVE.css,
                ]
              : [
                  n.default.colors.TEXT_BRAND.css,
                  n.default.colors.TEXT_MUTED.css,
                ];
        return (0, a.jsxs)("div", {
          className: f.container,
          children: [
            (0, a.jsxs)("div", {
              className: f.header,
              children: [
                (0, a.jsx)(i.Text, {
                  variant: "text-xs/bold",
                  color: "text-brand",
                  children:
                    T.default.Messages.DEFAULT_CHANNELS_CHATTABLE_COUNT.format({
                      count: x,
                    }),
                }),
                (0, a.jsx)(i.Text, {
                  variant: "text-xs/bold",
                  color: "text-muted",
                  children:
                    T.default.Messages.DEFAULT_CHANNELS_TOTAL_COUNT.format({
                      count: R,
                    }),
                }),
              ],
            }),
            (0, a.jsx)(i.StackedProgress, {
              foregroundColors: v,
              percents: D,
              size: i.StackedProgress.Sizes.XSMALL,
            }),
            (0, a.jsxs)("div", {
              className: f.requiredItem,
              children: [
                L ? M : A,
                (0, a.jsx)(i.Text, {
                  variant: "text-xs/normal",
                  color: "text-muted",
                  children:
                    T.default.Messages.GUILD_ONBOARDING_DEFAULT_CHANNELS_MIN_CHANNELS.format(
                      { count: I.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING }
                    ),
                }),
              ],
            }),
            (0, a.jsxs)("div", {
              className: f.requiredItem,
              children: [
                O ? A : M,
                (0, a.jsx)(i.Text, {
                  variant: "text-xs/normal",
                  color: "text-muted",
                  children:
                    T.default.Messages.GUILD_ONBOARDING_DEFAULT_CHANNELS_MIN_CHATTABLE_CHANNELS.format(
                      { count: I.NUM_DEFAULT_CHATTABLE_CHANNELS_MIN }
                    ),
                }),
              ],
            }),
            S &&
              (0, a.jsxs)(a.Fragment, {
                children: [
                  (0, a.jsxs)("div", {
                    className: f.requiredItem,
                    children: [
                      (0, a.jsx)(c.default, {
                        color: "var(--background-accent)",
                        backgroundColor: n.default.colors.WHITE.css,
                        className: f.icon,
                        width: 18,
                        height: 18,
                      }),
                      (0, a.jsx)(i.Text, {
                        variant: "text-xs/normal",
                        color: "text-muted",
                        children:
                          T.default.Messages
                            .DEFAULT_CHANNELS_ADVANCED_EXPLAINER,
                      }),
                    ],
                  }),
                  (0, a.jsxs)("div", {
                    className: f.requiredItem,
                    children: [
                      (0, a.jsx)(c.default, {
                        color: "var(--background-accent)",
                        backgroundColor: n.default.colors.WHITE.css,
                        className: f.icon,
                        width: 18,
                        height: 18,
                      }),
                      (0, a.jsx)(i.Text, {
                        variant: "text-xs/normal",
                        color: "text-muted",
                        children:
                          T.default.Messages.DEFAULT_CHANNELS_PREVIEW_ADDITIONAL.format(
                            {
                              count: p,
                              prejoinHook: e =>
                                (0, a.jsx)(i.Anchor, {
                                  onClick: s,
                                  children: (0, a.jsx)(i.Text, {
                                    tag: "span",
                                    variant: "text-xs/normal",
                                    color: "text-link",
                                    children: e,
                                  }),
                                }),
                            }
                          ),
                      }),
                    ],
                  }),
                ],
              }),
          ],
        });
      }
    },
    545901: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          SafetyCheckUpsell: function () {
            return o;
          },
          DefaultChannelsUpsell: function () {
            return d;
          },
          CustomizationQuestionsUpsell: function () {
            return u;
          },
          HomeSettingsUpsell: function () {
            return c;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078");
      s("593195"), s("564875");
      var n = s("131835"),
        i = s("782340"),
        r = s("724096");
      function o() {
        return (0, a.jsxs)("div", {
          className: r.container,
          children: [
            (0, a.jsx)(l.Text, {
              variant: "text-xs/semibold",
              color: "header-secondary",
              className: r.stepHeader,
              children: i.default.Messages.STEP_NUMBER.format({ number: 1 }),
            }),
            (0, a.jsx)(l.Heading, {
              variant: "heading-lg/semibold",
              color: "header-primary",
              className: r.header,
              children: i.default.Messages.GUILD_ONBOARDING_UPSELL_SAFETY_TITLE,
            }),
            (0, a.jsx)(l.Text, {
              variant: "text-sm/normal",
              color: "header-secondary",
              children:
                i.default.Messages.GUILD_ONBOARDING_UPSELL_SAFETY_TITLE_TOOLTIP,
            }),
            (0, a.jsx)(l.Button, {
              className: r.button,
              onClick: () => (0, n.dismissEducationUpsell)("Safety Check"),
              children:
                i.default.Messages
                  .GUILD_ONBOARDING_SETUP_EDUCATION_OVERVIEW_CTA,
            }),
          ],
        });
      }
      function d() {
        return (0, a.jsxs)("div", {
          className: r.container,
          children: [
            (0, a.jsx)(l.Text, {
              variant: "text-xs/semibold",
              color: "header-secondary",
              className: r.stepHeader,
              children: i.default.Messages.STEP_NUMBER.format({ number: 2 }),
            }),
            (0, a.jsx)(l.Heading, {
              variant: "heading-lg/semibold",
              color: "header-primary",
              className: r.header,
              children:
                i.default.Messages
                  .GUILD_ONBOARDING_SETUP_EDUCATION_DEFAULT_CHANNELS_TITLE,
            }),
            (0, a.jsx)(l.Text, {
              variant: "text-sm/normal",
              color: "header-secondary",
              children:
                i.default.Messages
                  .GUILD_ONBOARDING_SETUP_EDUCATION_DEFAULT_CHANNELS_SUBTITLE,
            }),
            (0, a.jsx)(l.Button, {
              className: r.button,
              onClick: () => (0, n.dismissEducationUpsell)("Default Channels"),
              children:
                i.default.Messages
                  .GUILD_ONBOARDING_SETUP_EDUCATION_OVERVIEW_CTA,
            }),
          ],
        });
      }
      function u() {
        return (0, a.jsxs)("div", {
          className: r.container,
          children: [
            (0, a.jsx)(l.Text, {
              variant: "text-xs/semibold",
              color: "header-secondary",
              className: r.stepHeader,
              children: i.default.Messages.STEP_NUMBER.format({ number: 3 }),
            }),
            (0, a.jsx)(l.Heading, {
              variant: "heading-lg/semibold",
              color: "header-primary",
              className: r.header,
              children:
                i.default.Messages
                  .GUILD_ONBOARDING_SETUP_EDUCATION_CUSTOMIZATION_QUESTIONS_TITLE,
            }),
            (0, a.jsx)(l.Text, {
              variant: "text-sm/normal",
              color: "header-secondary",
              children:
                i.default.Messages
                  .GUILD_ONBOARDING_SETUP_EDUCATION_CUSTOMIZATION_QUESTIONS_SUBTITLE,
            }),
            (0, a.jsx)(l.Button, {
              className: r.button,
              onClick: () =>
                (0, n.dismissEducationUpsell)("Customization Questions"),
              children:
                i.default.Messages
                  .GUILD_ONBOARDING_SETUP_EDUCATION_OVERVIEW_CTA,
            }),
          ],
        });
      }
      function c() {
        return (0, a.jsxs)("div", {
          className: r.container,
          children: [
            (0, a.jsx)(l.Text, {
              variant: "text-xs/semibold",
              color: "header-secondary",
              className: r.stepHeader,
              children: i.default.Messages.STEP_NUMBER.format({ number: 4 }),
            }),
            (0, a.jsx)(l.Heading, {
              variant: "heading-lg/semibold",
              color: "header-primary",
              className: r.header,
              children:
                i.default.Messages.GUILD_ONBOARDING_SETUP_EDUCATION_HOME_TITLE,
            }),
            (0, a.jsx)(l.Text, {
              variant: "text-sm/normal",
              color: "header-secondary",
              children:
                i.default.Messages
                  .GUILD_ONBOARDING_SETUP_EDUCATION_HOME_SUBTITLE,
            }),
            (0, a.jsx)(l.Button, {
              className: r.button,
              onClick: () => (0, n.dismissEducationUpsell)("Home Settings"),
              children:
                i.default.Messages
                  .GUILD_ONBOARDING_SETUP_EDUCATION_OVERVIEW_CTA,
            }),
          ],
        });
      }
    },
    706866: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return P;
          },
          GuildSettingsDefaultChannelsNotice: function () {
            return b;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("446674"),
        o = s("77078"),
        d = s("45299"),
        u = s("648747"),
        c = s("863636"),
        E = s("41594"),
        _ = s("367376"),
        I = s("988724"),
        T = s("161188"),
        f = s("245997"),
        S = s("923959"),
        m = s("98292"),
        N = s("461380"),
        g = s("36694"),
        h = s("45029"),
        C = s("900938"),
        R = s("851490"),
        x = s("653274"),
        L = s("330724"),
        O = s("136278"),
        p = s("223729"),
        A = s("682327"),
        M = s("925649"),
        D = s("795126"),
        v = s("457461"),
        G = s("782340"),
        j = s("207960");
      function U(e) {
        let { guild: t } = e,
          n = (0, r.useStateFromStores)([c.default], () =>
            c.default.getEnabled(t.id)
          ),
          i = (0, r.useStateFromStores)([T.default], () =>
            T.default.hasFetched(t.id)
          ),
          d = (0, p.default)(t),
          f = (0, r.useStateFromStores)(
            [x.default],
            () => x.default.editedDefaultChannelIds
          ),
          S = d.filter(e => !f.has(e.id)),
          [N, C] = l.useState(!1);
        l.useEffect(() => {
          !i && !n && (0, I.fetchTopReadChannels)(t.id);
        }, [t.id, i, n]);
        let L = e => {
          (0, o.openModalLazy)(async () => {
            let { default: l } = await s.el("10035").then(s.bind(s, "10035"));
            return s =>
              (0, a.jsx)(l, { ...s, guildId: t.id, startingChannelId: e });
          });
        };
        return N || 0 === S.length
          ? null
          : (0, a.jsxs)("div", {
              className: j.recommendations,
              children: [
                (0, a.jsx)(o.Text, {
                  variant: "text-md/medium",
                  color: "header-primary",
                  children: G.default.Messages.CHANNEL_RECOMMENDED,
                }),
                (0, a.jsxs)("div", {
                  className: j.recsSubheader,
                  children: [
                    (0, a.jsx)(o.Text, {
                      variant: "text-xs/normal",
                      color: "text-muted",
                      children:
                        G.default.Messages
                          .GUILD_ONBOARDING_DEFAULT_CHANNELS_RECOMMENDED_DESCRIPTION,
                    }),
                    (0, a.jsxs)(o.Clickable, {
                      className: j.dismissAll,
                      onClick: () => C(!0),
                      children: [
                        (0, a.jsx)(g.default, {
                          width: 12,
                          height: 12,
                          className: j.checkmark,
                        }),
                        (0, a.jsx)(o.Text, {
                          className: j.dismissAllText,
                          variant: "text-xs/medium",
                          color: "text-brand",
                          children:
                            G.default.Messages
                              .GUILD_ONBOARDING_DEFAULT_CHANNELS_RECOMMENDED_DISMISS_ALL,
                        }),
                      ],
                    }),
                  ],
                }),
                (0, a.jsx)("div", {
                  className: j.recommendedChannels,
                  children: S.map((e, s) =>
                    (0, a.jsxs)(a.Fragment, {
                      children: [
                        (0, a.jsxs)("div", {
                          className: j.channelRow,
                          children: [
                            (0, a.jsxs)("div", {
                              className: j.channelInfo,
                              children: [
                                (0, a.jsxs)("div", {
                                  className: j.channelName,
                                  children: [
                                    (0, a.jsx)(E.ChannelItemIcon, {
                                      channel: e,
                                      guild: t,
                                    }),
                                    (0, a.jsx)(m.default, {
                                      className: j.name,
                                      children: (0, a.jsx)(o.Text, {
                                        className: j.channelText,
                                        variant: "text-md/medium",
                                        lineClamp: 1,
                                        color: "text-normal",
                                        children: e.name,
                                      }),
                                    }),
                                  ],
                                }),
                                null != e.topic && e.topic.length > 0
                                  ? (0, a.jsx)(
                                      m.default,
                                      {
                                        children: (0, a.jsx)(o.Text, {
                                          className: j.topic,
                                          variant: "text-xs/normal",
                                          children: _.default.parseTopic(
                                            e.topic,
                                            !0,
                                            { channelId: e.id }
                                          ),
                                        }),
                                      },
                                      "topic"
                                    )
                                  : null,
                              ],
                            }),
                            (0, u.canChannelBeDefault)(t.id, e.id)
                              ? (0, a.jsx)(o.Button, {
                                  color: o.Button.Colors.BRAND,
                                  size: o.Button.Sizes.SMALL,
                                  className: j.addChannelCTA,
                                  onClick: () =>
                                    (0, R.toggleDefaultChannel)(e.id),
                                  children: G.default.Messages.ADD,
                                })
                              : (0, a.jsxs)(o.Button, {
                                  look: o.Button.Looks.OUTLINED,
                                  color: o.Button.Colors.PRIMARY,
                                  className: j.lockedPill,
                                  innerClassName: j.lockedPillInner,
                                  onClick: () => L(e.id),
                                  children: [
                                    (0, a.jsx)(h.default, {
                                      width: 16,
                                      height: 16,
                                    }),
                                    (0, a.jsx)(o.Text, {
                                      variant: "text-sm/medium",
                                      children: G.default.Messages.UNLOCK,
                                    }),
                                  ],
                                }),
                          ],
                        }),
                        s < S.length - 1
                          ? (0, a.jsx)("div", { className: j.separator })
                          : null,
                      ],
                    })
                  ),
                }),
                (0, a.jsx)("div", { className: j.largeSeparator }),
              ],
            });
      }
      function P(e) {
        let { saveOnClose: t = !1 } = e,
          s = (0, r.useStateFromStores)([C.default], () =>
            C.default.getGuild()
          ),
          n = (0, r.useStateFromStores)([c.default], () =>
            c.default.isLoading()
          ),
          d = (0, r.useStateFromStores)([S.default], () =>
            S.default.getChannels(null == s ? void 0 : s.id)
          ),
          u = (0, r.useStateFromStores)([f.default], () =>
            f.default.getCategories(null == s ? void 0 : s.id)
          ),
          E = (0, r.useStateFromStores)(
            [O.default],
            () => O.default.advancedMode
          ),
          _ = l.useRef(null),
          [I, T] = l.useState(!1);
        return (l.useEffect(() => {
          if (t)
            return () => {
              null != s &&
                (0, R.saveDefaultChannels)(s)
                  .then(() => {
                    E &&
                      (0, L.saveGuildOnboardingPrompts)(s, {
                        ignoreDefaultPrompt: !0,
                      }).catch(() => {});
                  })
                  .catch(() => {});
            };
        }, [t, E]),
        null == s)
          ? null
          : n
            ? (0, a.jsx)(o.Spinner, {})
            : (0, a.jsxs)("div", {
                className: j.columns,
                children: [
                  (0, a.jsxs)("div", {
                    className: j.channelBrowser,
                    children: [
                      (0, a.jsx)(o.Clickable, {
                        className: j.collapseButton,
                        onClick: () => T(e => !e),
                        children: (0, a.jsx)(N.default, {
                          direction: I
                            ? N.default.Directions.DOWN
                            : N.default.Directions.UP,
                          height: 16,
                          width: 16,
                        }),
                      }),
                      (0, a.jsx)(o.Heading, {
                        className: j.header,
                        variant: "heading-lg/extrabold",
                        children:
                          G.default.Messages.GUILD_SETTINGS_DEFAULT_CHANNELS,
                      }),
                      (0, a.jsx)(o.Text, {
                        variant: "text-sm/normal",
                        color: "header-secondary",
                        children:
                          G.default.Messages
                            .GUILD_SETTINGS_DEFAULT_CHANNELS_SUBHEADER,
                      }),
                      (0, a.jsx)(A.AdvancedModeToggle, {
                        className: j.advancedModeToggle,
                        guildId: s.id,
                      }),
                      I
                        ? null
                        : (0, a.jsxs)(a.Fragment, {
                            children: [
                              (0, a.jsx)(U, { guild: s }),
                              (0, a.jsx)(M.default, {
                                className: i(j.channelBrowserOuter),
                                guild: s,
                                categories: u,
                                channels: d,
                                hasSidebar: !1,
                              }),
                            ],
                          }),
                      E &&
                        (0, a.jsxs)(a.Fragment, {
                          children: [
                            (0, a.jsx)("div", { className: j.largeSeparator }),
                            (0, a.jsx)(o.Heading, {
                              className: j.prejoinHeader,
                              variant: "heading-lg/extrabold",
                              children:
                                G.default.Messages
                                  .GUILD_SETTINGS_PRE_JOIN_QUESTIONS_HEADER,
                            }),
                            (0, a.jsx)(o.Text, {
                              className: j.prejoinSubHeader,
                              variant: "text-sm/normal",
                              color: "header-secondary",
                              children:
                                G.default.Messages
                                  .GUILD_SETTINGS_PRE_JOIN_QUESTIONS_SUBHEADER,
                            }),
                            (0, a.jsx)("div", {
                              ref: _,
                              className: j.advancedModeQuestions,
                              children: (0, a.jsx)(v.default, {
                                guildId: s.id,
                                prejoinOnly: !0,
                                includeCount: !0,
                                singleColumn: !0,
                              }),
                            }),
                          ],
                        }),
                    ],
                  }),
                  (0, a.jsx)(D.default, {
                    guild: s,
                    scrollToQuestions: () => {
                      null != _.current &&
                        _.current.scrollIntoView({ behavior: "smooth" });
                    },
                  }),
                ],
              });
      }
      function b() {
        let e = (0, r.useStateFromStores)(
            [C.default],
            () => C.default.getProps().guild
          ),
          t = (0, r.useStateFromStores)(
            [x.default],
            () => x.default.submitting
          ),
          s = (0, r.useStateFromStores)(
            [O.default],
            () => O.default.advancedMode
          );
        return null == e
          ? null
          : (0, a.jsx)(d.default, {
              onSave: () => {
                (0, R.saveDefaultChannels)(e)
                  .then(() => {
                    s &&
                      (0, L.saveGuildOnboardingPrompts)(e, {
                        ignoreDefaultPrompt: !0,
                      }).catch(() => {});
                  })
                  .catch(() => {});
              },
              onReset: R.resetDefaultChannels,
              submitting: t,
              onSaveText: G.default.Messages.SAVE,
            });
      }
    },
    764151: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return eu;
          },
          GuildSettingsHomeSettingsNotice: function () {
            return eE;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("65597"),
        o = s("819855"),
        d = s("77078"),
        u = s("45299"),
        c = s("716241"),
        E = s("419830"),
        _ = s("69678"),
        I = s("372283"),
        T = s("634544"),
        f = s("379532"),
        S = s("569912"),
        m = s("129092"),
        N = s("205454"),
        g = s("768596"),
        h = s("656913"),
        C = s("694187"),
        R = s("161778"),
        x = s("271938"),
        L = s("42203"),
        O = s("923959"),
        p = s("305961"),
        A = s("181114"),
        M = s("593195"),
        D = s("36694"),
        v = s("945330"),
        G = s("673220"),
        j = s("832132"),
        U = s("118503"),
        P = s("351825"),
        b = s("641892"),
        B = s("315102"),
        y = s("991170"),
        F = s("592407"),
        H = s("900938"),
        k = s("435076"),
        w = s("642807"),
        V = s("49111"),
        Y = s("944305"),
        W = s("75015"),
        z = s("453252"),
        K = s("782340"),
        Z = s("474356"),
        X = s("817616"),
        Q = s("731106"),
        J = s("271696"),
        q = s("694947");
      function $(e) {
        let { guildId: t, welcomeMessage: n } = e,
          o = l.useCallback(() => {
            if (null != t)
              return (0, d.openModalLazy)(async () => {
                let { default: e } = await s
                  .el("153774")
                  .then(s.bind(s, "153774"));
                return s =>
                  (0, a.jsx)(e, {
                    ...s,
                    guildId: t,
                    welcomeMessage: n,
                    onSave: e => (0, k.updateWelcomeMessage)(e),
                  });
              });
          }, [t, n]),
          u = (0, r.default)([x.default], () => x.default.getId());
        return (0, m.isWelcomeMessageEmpty)(n)
          ? (0, a.jsx)(d.Button, {
              size: d.Button.Sizes.SMALL,
              onClick: o,
              children: (0, a.jsx)(d.Text, {
                variant: "text-sm/medium",
                children:
                  K.default.Messages
                    .GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_SETUP_WELCOME,
              }),
            })
          : (0, a.jsxs)(d.Clickable, {
              className: Z.editWelcomeSection,
              onClick: o,
              children: [
                (0, a.jsx)(g.default, {
                  guildId: t,
                  welcomeMessage: {
                    authorIds: n.authorIds.length > 0 ? n.authorIds : [u],
                    message: n.message,
                  },
                }),
                (0, a.jsx)(d.Tooltip, {
                  text: K.default.Messages.EDIT,
                  children: e =>
                    (0, a.jsxs)("div", {
                      ...e,
                      className: i(Z.actionItemEditButton, Z.editWelcomeButton),
                      children: [
                        (0, a.jsx)(j.default, { className: Z.editIcon }),
                        (0, a.jsx)(d.HiddenVisually, {
                          children: K.default.Messages.EDIT,
                        }),
                      ],
                    }),
                }),
              ],
            });
      }
      function ee(e) {
        var t, n, o, u, c;
        let {
            guildId: I,
            action: T,
            actionIndex: f,
            onChange: g,
            onDelete: h,
            onDragStart: C,
            onDragComplete: R,
            onDragReset: x,
          } = e,
          O = (0, r.default)([L.default], () =>
            L.default.getChannel(T.channelId)
          ),
          A = (0, r.default)([p.default], () => p.default.getGuild(I)),
          { customEmoji: D, unicodeEmoji: v } = (0, S.default)(
            null === (t = T.emoji) || void 0 === t ? void 0 : t.id,
            null === (n = T.emoji) || void 0 === n ? void 0 : n.name
          ),
          U = null == T.emoji || null != D || null != v,
          P = B.default.getNewMemberActionIconURL({
            channelId: T.channelId,
            icon: T.icon,
          }),
          b = null;
        null != O && (0, m.isChannelValidForNewMemberAction)(O)
          ? !U &&
            (b =
              K.default.Messages
                .GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_INVALID_ACTION_CHANNEL_EMOJI)
          : (b =
              K.default.Messages
                .GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_INVALID_ACTION_CHANNEL);
        let {
            drag: y,
            dragSourcePosition: F,
            drop: H,
            setIsDraggable: w,
          } = (0, _.default)({
            type: "NEW_MEMBER_ACTION",
            index: f,
            optionId: T.channelId,
            onDragStart: C,
            onDragComplete: R,
            onDragReset: x,
          }),
          V = l.useCallback((e, t) => {
            (0, k.updateNewMemberActionIconData)(e.channelId, t);
          }, []),
          Y = l.useCallback(() => {
            if (null != I)
              return (0, d.openModalLazy)(async () => {
                let { default: e } = await s
                  .el("466564")
                  .then(s.bind(s, "466564"));
                return t =>
                  (0, a.jsx)(e, {
                    ...t,
                    guildId: I,
                    action: T,
                    onSave: (e, t) => g(f, e, t),
                    onDelete: () => h(f),
                    onIconUpload: V,
                  });
              });
          }, [I, T, f, g, h, V]);
        if (null == O || null == A) return null;
        let W =
          null !== (c = (0, E.getChannelIconComponent)(O)) && void 0 !== c
            ? c
            : M.default;
        return (0, a.jsxs)("div", {
          className: i(Z.actionItemContainer),
          children: [
            (0, a.jsxs)("div", {
              className: i(Z.actionItem, {
                [Z.dropIndicatorBefore]: null != F && f < F,
                [Z.dropIndicatorAfter]: null != F && f > F,
                [Z.actionItemError]: null != b,
              }),
              ref: e => y(H(e)),
              children: [
                (0, a.jsx)("div", {
                  className: Z.dragContainer,
                  onMouseEnter: () => w(!0),
                  onMouseLeave: () => w(!1),
                  children: (0, a.jsx)(G.default, { className: Z.dragIcon }),
                }),
                null != P
                  ? (0, a.jsx)("div", {
                      className: Z.iconWrapper,
                      children: (0, a.jsx)("img", {
                        src: P,
                        className: Z.icon,
                        width: 48,
                        height: 48,
                        alt: "",
                        "aria-hidden": !0,
                      }),
                    })
                  : (0, a.jsx)("div", {
                      className: Z.actionItemEmojiWrapper,
                      children: (0, a.jsx)(N.default, {
                        emojiId:
                          null === (o = T.emoji) || void 0 === o
                            ? void 0
                            : o.id,
                        emojiName:
                          null === (u = T.emoji) || void 0 === u
                            ? void 0
                            : u.name,
                        size: N.CTAEmojiSize.MEDIUM,
                        defaultComponent: (0, a.jsx)(W, {}),
                      }),
                    }),
                (0, a.jsxs)("div", {
                  className: Z.actionItemText,
                  children: [
                    (0, a.jsx)(d.Text, {
                      variant: "text-md/semibold",
                      color: "header-primary",
                      children: T.title,
                    }),
                    (0, a.jsx)(d.Text, {
                      variant: "text-xs/medium",
                      color: "header-secondary",
                      children:
                        K.default.Messages.NEW_MEMBER_ACTION_CHANNEL.format({
                          channelName: O.name,
                        }),
                    }),
                  ],
                }),
                (0, a.jsx)(d.Tooltip, {
                  text: K.default.Messages.EDIT,
                  children: e =>
                    (0, a.jsxs)(d.Button, {
                      ...e,
                      className: Z.actionItemEditButton,
                      innerClassName: Z.actionItemEditButtonInner,
                      size: d.Button.Sizes.MIN,
                      onClick: Y,
                      children: [
                        (0, a.jsx)(j.default, { className: Z.editIcon }),
                        (0, a.jsx)(d.HiddenVisually, {
                          children: K.default.Messages.EDIT,
                        }),
                      ],
                    }),
                }),
              ],
            }),
            null != b &&
              (0, a.jsx)(d.Text, {
                variant: "text-xs/medium",
                color: "text-danger",
                children: b,
              }),
          ],
        });
      }
      function et(e) {
        let { guildId: t } = e,
          s = (0, r.useStateFromStoresArray)([w.default], () => {
            var e;
            let t = w.default.getSettings();
            return null !== (e = t.newMemberActions) && void 0 !== e ? e : [];
          }),
          n = l.useCallback(
            (e, s) => {
              if (null == t) return;
              (0, k.addNewMemberAction)(e);
              let a = w.default.getSettings();
              if (null == a) return;
              let { channelId: l } = e;
              (0, k.saveHomeSettings)(t, a, !0).then(() => {
                null != s && (0, k.updateNewMemberActionIcon)(t, l, s, !0);
              });
            },
            [t]
          ),
          i = l.useCallback(
            (e, a, l) => {
              var n;
              if (null == t) return;
              let i =
                null === (n = s[e]) || void 0 === n ? void 0 : n.channelId;
              if (null == i) return;
              let r = w.default.getSettings();
              if (null == r) return;
              let o = w.default.hasActionIconChanged(i);
              (0, k.updateNewMemberAction)(i, a),
                (0, k.saveHomeSettings)(t, r, !0).then(() => {
                  (0, k.updateNewMemberActionIcon)(t, i, l, o);
                });
            },
            [s, t]
          ),
          o = l.useCallback(
            e => {
              var t;
              let a =
                null === (t = s[e]) || void 0 === t ? void 0 : t.channelId;
              null != a && (0, k.deleteNewMemberAction)(a);
            },
            [s]
          ),
          d = s.map(e => ({ ...e, id: e.channelId })),
          {
            handleDragStart: u,
            handleDragReset: c,
            handleDragComplete: E,
          } = (0, I.default)(d, k.reorderNewMemberActions);
        return null == t
          ? null
          : (0, a.jsxs)("div", {
              className: Z.section,
              children: [
                s.map((e, s) =>
                  (0, a.jsx)(
                    ee,
                    {
                      guildId: t,
                      action: e,
                      actionIndex: s,
                      onChange: i,
                      onDelete: o,
                      onDragStart: u,
                      onDragReset: c,
                      onDragComplete: E,
                    },
                    e.channelId
                  )
                ),
                (0, a.jsx)(es, {}),
                s.length < m.NEW_MEMBER_ACTION_MAX &&
                  (0, a.jsx)(ea, { guildId: t, onAddAction: n }),
              ],
            });
      }
      function es() {
        return (0, a.jsx)("div", {
          className: Z.actionItemContainer,
          children: (0, a.jsxs)("div", {
            className: Z.actionItem,
            children: [
              (0, a.jsx)("div", {
                className: Z.actionItemEmojiWrapper,
                children: (0, a.jsx)(b.default, { height: 20, width: 22 }),
              }),
              (0, a.jsx)("div", {
                className: Z.actionItemText,
                children: (0, a.jsx)(d.Text, {
                  variant: "text-md/semibold",
                  color: "header-primary",
                  children:
                    K.default.Messages.GUILD_SETTINGS_ONBOARDING_RULES_ACTION,
                }),
              }),
            ],
          }),
        });
      }
      function ea(e) {
        let { guildId: t, onAddAction: n } = e,
          i = l.useCallback(() => {
            if (null != t)
              return (0, d.openModalLazy)(async () => {
                let { default: e } = await s
                  .el("466564")
                  .then(s.bind(s, "466564"));
                return s => (0, a.jsx)(e, { ...s, guildId: t, onSave: n });
              });
          }, [t, n]);
        return (0, a.jsxs)(d.Clickable, {
          className: Z.addActionItem,
          onClick: i,
          children: [
            (0, a.jsx)(P.default, {}),
            (0, a.jsx)(d.Text, {
              variant: "text-md/normal",
              color: "none",
              children: K.default.Messages.GUILD_SETTINGS_ONBOARDING_ADD_A_TASK,
            }),
          ],
        });
      }
      function el() {
        return (0, a.jsxs)("div", {
          className: Z.badExample,
          children: [
            (0, a.jsx)(d.Text, {
              variant: "eyebrow",
              color: "header-secondary",
              children:
                K.default.Messages
                  .GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_TODOS_BAD_EXAMPLE_REASON,
            }),
            (0, a.jsxs)("div", {
              className: Z.example,
              children: [
                (0, a.jsx)("div", {
                  className: Z.badExampleIcon,
                  children: (0, a.jsx)(v.default, {}),
                }),
                (0, a.jsxs)("div", {
                  className: Z.exampleText,
                  children: [
                    (0, a.jsx)(d.Text, {
                      variant: "text-md/semibold",
                      color: "header-primary",
                      children:
                        K.default.Messages
                          .GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_TODOS_BAD_EXAMPLE_TITLE,
                    }),
                    (0, a.jsx)(d.Text, {
                      variant: "text-xs/medium",
                      color: "text-muted",
                      children:
                        K.default.Messages
                          .GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_TODOS_BAD_EXAMPLE_CHANNEL,
                    }),
                  ],
                }),
              ],
            }),
          ],
        });
      }
      function en(e) {
        var t;
        let { guildId: n } = e,
          i = (0, r.default)([p.default], () => p.default.getGuild(n)),
          o =
            null !==
              (t = null == i ? void 0 : i.hasFeature(V.GuildFeatures.BANNER)) &&
            void 0 !== t &&
            t,
          u = l.useCallback(
            (e, t) => {
              if (null != n) {
                if (null == e || void 0 === t) {
                  F.default.updateGuild({ homeHeader: null });
                  return;
                }
                (0, d.openModalLazy)(async () => {
                  let { default: l } = await s
                    .el("57015")
                    .then(s.bind(s, "57015"));
                  return s =>
                    (0, a.jsx)(l, {
                      imgURI: e,
                      file: t,
                      onCrop: e => F.default.saveGuild(n, { homeHeader: e }),
                      uploadType: W.UploadTypes.HOME_HEADER,
                      ...s,
                    });
                });
              }
            },
            [n]
          ),
          E = l.useCallback(
            e => {
              e.preventDefault(),
                e.stopPropagation(),
                null != i &&
                  ((0, c.trackWithMetadata)(
                    V.AnalyticEvents.PREMIUM_GUILD_PROMOTION_OPENED,
                    {
                      location: {
                        section: V.AnalyticsSections.GUILD_SETTINGS_ONBOARDING,
                        object: V.AnalyticsObjects.LEARN_MORE,
                      },
                      guild_id: null == i ? void 0 : i.id,
                      location_stack: [],
                    }
                  ),
                  (0, f.default)({
                    analyticsLocations: [],
                    analyticsSourceLocation: {
                      section: V.AnalyticsSections.GUILD_SETTINGS_ONBOARDING,
                      object: V.AnalyticsObjects.ONBOARDING_EDIT,
                      page: V.AnalyticsPages.GUILD_SETTINGS,
                    },
                    guild: i,
                    perks: (0, Y.guildBannerUpsellPerks)(),
                  }));
            },
            [i]
          );
        if (null == i) return null;
        let _ = (0, a.jsx)(h.default, {
          image: i.homeHeader,
          makeURL: e =>
            null != e
              ? B.default.getGuildHomeHeaderURL({ id: i.id, homeHeader: e })
              : null,
          disabled: !o,
          onChange: u,
          hint: K.default.Messages.CHANGE_HOME_HEADER,
          enabled: o,
          maxFileSizeBytes: z.MAX_IMAGE_UPLOAD_FILESIZE_BYTES,
        });
        return o
          ? (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsxs)("div", {
                  className: Z.sectionHeader,
                  children: [
                    (0, a.jsx)(d.Heading, {
                      className: Z.header,
                      variant: "heading-lg/extrabold",
                      children:
                        K.default.Messages
                          .GUILD_SETTINGS_ONBOARDING_HOME_BANNER,
                    }),
                    (0, a.jsx)(T.default, {
                      className: Z.boostIndicator,
                      guild: i,
                      guildFeature: V.GuildFeatures.BANNER,
                      onClick: E,
                    }),
                  ],
                }),
                (0, a.jsxs)("div", {
                  className: Z.section,
                  children: [
                    (0, a.jsxs)("div", {
                      className: Z.homeBannerExplainer,
                      children: [
                        (0, a.jsx)(d.Text, {
                          variant: "text-sm/normal",
                          color: "header-secondary",
                          children:
                            K.default.Messages
                              .GUILD_SETTINGS_HOME_HEADER_RECOMMEND,
                        }),
                        (0, a.jsxs)(d.Button, {
                          color: d.ButtonColors.BRAND_NEW,
                          className: Z.uploadButton,
                          children: [
                            K.default.Messages.UPLOAD_BACKGROUND,
                            (0, a.jsx)(C.default, {
                              onChange: u,
                              maxFileSizeBytes:
                                z.MAX_IMAGE_UPLOAD_FILESIZE_BYTES,
                            }),
                          ],
                        }),
                      ],
                    }),
                    (0, a.jsx)("div", {
                      className: Z.homeBannerImage,
                      children: _,
                    }),
                  ],
                }),
              ],
            })
          : (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsxs)("div", {
                  className: Z.sectionHeader,
                  children: [
                    (0, a.jsx)(d.Heading, {
                      className: Z.header,
                      variant: "heading-lg/extrabold",
                      children:
                        K.default.Messages
                          .GUILD_SETTINGS_ONBOARDING_HOME_BANNER,
                    }),
                    (0, a.jsx)(T.default, {
                      className: Z.boostIndicator,
                      guild: i,
                      guildFeature: V.GuildFeatures.BANNER,
                      onClick: E,
                    }),
                  ],
                }),
                (0, a.jsxs)("div", {
                  className: Z.section,
                  children: [
                    (0, a.jsxs)("div", {
                      className: Z.homeBannerExplainer,
                      children: [
                        (0, a.jsx)(d.Text, {
                          variant: "text-sm/normal",
                          color: "header-secondary",
                          children:
                            K.default.Messages
                              .GUILD_SETTINGS_HOME_HEADER_RECOMMEND,
                        }),
                        (0, a.jsxs)(A.default, {
                          className: Z.upsellButton,
                          innerClassName: Z.upsellButtonInner,
                          color: d.Button.Colors.GREEN,
                          onClick: E,
                          children: [
                            (0, a.jsx)(U.default, {
                              height: 16,
                              width: 16,
                              className: Z.premiumUpsellBadge,
                            }),
                            (0, a.jsx)(d.Text, {
                              variant: "text-sm/medium",
                              color: "text-normal",
                              children:
                                K.default.Messages
                                  .PREMIUM_GUILD_UNLOCK_WTH_BOOSTING_CTA,
                            }),
                          ],
                        }),
                      ],
                    }),
                    (0, a.jsx)("div", {
                      className: Z.homeBannerImage,
                      children: (0, a.jsx)(d.Clickable, {
                        "aria-hidden": !0,
                        tabIndex: -1,
                        className: Z.upsell,
                        onClick: E,
                        children: _,
                      }),
                    }),
                  ],
                }),
              ],
            });
      }
      function ei(e) {
        let {
            guildId: t,
            resourceChannel: n,
            index: o,
            onDragComplete: u,
            onDragStart: c,
            onDragReset: E,
          } = e,
          I = (0, r.default)([p.default], () => p.default.getGuild(t)),
          { title: T, channelId: f, description: S } = n,
          N = L.default.getChannel(f),
          g = null;
        (null == N || !(0, m.isChannelValidForResourceChannel)(N)) &&
          (g =
            K.default.Messages
              .GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_INVALID_RESOURCE_CHANNEL);
        let h = null == S || 0 === S.length,
          C = B.default.getResourceChannelIconURL({
            channelId: n.channelId,
            icon: n.icon,
          }),
          {
            drag: R,
            dragSourcePosition: x,
            drop: O,
            setIsDraggable: A,
          } = (0, _.default)({
            type: "RESOURCE_CHANNEL",
            optionId: n.channelId,
            index: o,
            onDragStart: c,
            onDragComplete: u,
            onDragReset: E,
          }),
          M = l.useCallback(
            e => {
              (0, k.updateResourceChannel)(n.channelId, e);
            },
            [n.channelId]
          ),
          D = l.useCallback(
            (e, s) => {
              if (null == t) return;
              let a = w.default.getSettings();
              null != a &&
                ((0, k.updateResourceChannel)(n.channelId, e),
                (0, k.saveHomeSettings)(t, a).then(() => {
                  (0, k.updateResourceChannelIcon)(t, e.channelId, s);
                }));
            },
            [t, n]
          ),
          v = l.useCallback(() => {
            if (null != t)
              return (0, d.openModalLazy)(async () => {
                let { default: e } = await s
                  .el("398296")
                  .then(s.bind(s, "398296"));
                return s =>
                  (0, a.jsx)(e, {
                    ...s,
                    guildId: t,
                    resourceChannel: n,
                    onSave: M,
                    onDelete: () => (0, k.deleteResourceChannel)(n.channelId),
                    onIconUpload: D,
                  });
              });
          }, [t, n, M, D]);
        return null == I || null == N
          ? null
          : (0, a.jsxs)("div", {
              className: i(Z.resourceChannelContainer),
              children: [
                (0, a.jsxs)("div", {
                  className: i(Z.resourceChannel, {
                    [Z.dropIndicatorBefore]: null != x && o < x,
                    [Z.dropIndicatorAfter]: null != x && o > x,
                    [Z.resourceChannelError]: null != g,
                  }),
                  ref: e => R(O(e)),
                  children: [
                    (0, a.jsx)("div", {
                      className: Z.dragContainer,
                      onMouseEnter: () => A(!0),
                      onMouseLeave: () => A(!1),
                      children: (0, a.jsx)(G.default, {
                        className: Z.dragIcon,
                      }),
                    }),
                    null != C &&
                      (0, a.jsx)("div", {
                        className: Z.iconWrapper,
                        children: (0, a.jsx)("img", {
                          src: C,
                          className: Z.icon,
                          width: 32,
                          height: 32,
                          alt: "",
                          "aria-hidden": !0,
                        }),
                      }),
                    (0, a.jsxs)("div", {
                      className: Z.resourceChannelContent,
                      children: [
                        (0, a.jsx)(d.Text, {
                          className: Z.resourceChannelTitle,
                          variant: "text-md/semibold",
                          color: "header-primary",
                          children: T,
                        }),
                        !h &&
                          (0, a.jsx)(d.Text, {
                            className: Z.resourceChannelDescription,
                            variant: "text-xs/medium",
                            color: "text-muted",
                            lineClamp: 1,
                            children: S,
                          }),
                      ],
                    }),
                    (0, a.jsx)(d.Tooltip, {
                      text: K.default.Messages.EDIT,
                      children: e =>
                        (0, a.jsxs)(d.Button, {
                          ...e,
                          className: Z.resourceChannelEditButton,
                          innerClassName: Z.resourceChannelEditButtonInner,
                          size: d.Button.Sizes.MIN,
                          onClick: v,
                          children: [
                            (0, a.jsx)(j.default, {}),
                            (0, a.jsx)(d.HiddenVisually, {
                              children: K.default.Messages.EDIT,
                            }),
                          ],
                        }),
                    }),
                  ],
                }),
                null != g &&
                  (0, a.jsx)(d.Text, {
                    variant: "text-xs/medium",
                    color: "text-danger",
                    children: g,
                  }),
              ],
            });
      }
      function er(e) {
        var t;
        let { channel: s, isLast: n } = e,
          i = l.useCallback(() => {
            (0, k.addResourceChannel)({
              channelId: s.id,
              title: s.name,
              description: "",
              emoji: null,
              icon: null,
            });
          }, [s]),
          r =
            null !== (t = (0, E.getChannelIconComponent)(s)) && void 0 !== t
              ? t
              : M.default;
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsxs)("div", {
              className: Z.suggestedChannel,
              children: [
                (0, a.jsx)(r, { className: Z.suggestedChannelIcon }),
                (0, a.jsx)(d.Text, {
                  className: Z.suggestedChannelText,
                  variant: "text-sm/normal",
                  children: s.name,
                }),
                (0, a.jsx)(d.Button, {
                  className: Z.suggestedChannelButton,
                  size: d.Button.Sizes.MIN,
                  onClick: i,
                  children: (0, a.jsx)(d.Text, {
                    variant: "text-sm/semibold",
                    color: "always-white",
                    children: K.default.Messages.ADD,
                  }),
                }),
              ],
            }),
            n && (0, a.jsx)("div", { className: Z.suggestedSeparator }),
          ],
        });
      }
      function eo(e) {
        let { guildId: t } = e,
          s = (0, r.default)([p.default], () => p.default.getGuild(t)),
          n = (0, r.useStateFromStoresArray)([w.default], () => {
            var e, t;
            let s = w.default.getSettings();
            return null !==
              (t =
                null === (e = s.resourceChannels) || void 0 === e
                  ? void 0
                  : e.map(e => e.channelId)) && void 0 !== t
              ? t
              : [];
          }),
          i = (0, r.useStateFromStoresArray)([w.default], () =>
            w.default.getDismissedSuggestedChannelIds(t)
          ),
          o = (0, r.default)([O.default], () =>
            null == t ? [] : O.default.getSelectableChannels(t)
          ),
          u = o
            .filter(
              e =>
                !i.includes(e.channel.id) &&
                !n.includes(e.channel.id) &&
                e.channel.type === V.ChannelTypes.GUILD_TEXT &&
                y.default.canEveryoneRole(
                  V.Permissions.VIEW_CHANNEL,
                  e.channel
                ) &&
                !y.default.canEveryoneRole(
                  V.Permissions.SEND_MESSAGES,
                  e.channel
                ) &&
                e.channel.id !== (null == s ? void 0 : s.rulesChannelId)
            )
            .slice(0, 5),
          c = l.useCallback(() => {
            let e = u.map(e => e.channel.id);
            (0, k.dismissSuggestedChannels)(t, e);
          }, [t, u]);
        return u.length <= 0 || n.length >= m.RESOURCE_CHANNEL_MAX
          ? null
          : (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsxs)("div", {
                  className: Z.suggestedChannelsSection,
                  children: [
                    (0, a.jsx)(d.Text, {
                      variant: "text-md/semibold",
                      children: K.default.Messages.RECOMMENDED,
                    }),
                    (0, a.jsxs)("div", {
                      className: Z.suggestedChannelsHeader,
                      children: [
                        (0, a.jsx)(d.Text, {
                          variant: "text-xs/medium",
                          color: "text-muted",
                          children:
                            K.default.Messages
                              .GUILD_SETTINGS_ONBOARDING_SUGGESTED_RESOURCES_EXPLAINER,
                        }),
                        (0, a.jsxs)(d.Clickable, {
                          className: Z.suggestedChannelsDismiss,
                          onClick: c,
                          children: [
                            (0, a.jsx)(D.default, {
                              className: Z.suggestedChannelsDismissCheck,
                            }),
                            (0, a.jsx)(d.Text, {
                              variant: "text-xs/semibold",
                              color: "text-brand",
                              children:
                                K.default.Messages
                                  .GUILD_SETTINGS_ONBOARDING_SUGGESTED_RESOURCES_DISMISS,
                            }),
                          ],
                        }),
                      ],
                    }),
                    (0, a.jsx)("div", {
                      className: Z.suggestedChannels,
                      children: u.map((e, t) =>
                        (0, a.jsx)(
                          er,
                          { channel: e.channel, isLast: t < u.length - 1 },
                          e.channel.id
                        )
                      ),
                    }),
                  ],
                }),
                (0, a.jsx)("div", { className: Z.sectionSeparator }),
              ],
            });
      }
      function ed(e) {
        let { guildId: t } = e,
          n = (0, r.useStateFromStoresArray)([w.default], () => {
            var e;
            let t = w.default.getSettings();
            return null !== (e = t.resourceChannels) && void 0 !== e ? e : [];
          }),
          i = n.map(e => ({ ...e, id: e.channelId })),
          {
            handleDragStart: o,
            handleDragReset: u,
            handleDragComplete: c,
          } = (0, I.default)(i, k.reorderResourceChannels),
          E = l.useCallback(
            (e, s) => {
              if (null == t) return;
              let a = w.default.getSettings();
              null != a &&
                ((0, k.addResourceChannel)(e),
                (0, k.saveHomeSettings)(t, a).then(() => {
                  (0, k.updateResourceChannelIcon)(t, e.channelId, s);
                }));
            },
            [t]
          ),
          _ = l.useCallback(() => {
            if (null != t)
              return (0, d.openModalLazy)(async () => {
                let { default: e } = await s
                  .el("398296")
                  .then(s.bind(s, "398296"));
                return s =>
                  (0, a.jsx)(e, {
                    ...s,
                    guildId: t,
                    onSave: k.addResourceChannel,
                    onIconUpload: E,
                  });
              });
          }, [t, E]);
        return (0, a.jsxs)("div", {
          className: Z.editResources,
          children: [
            n.map((e, s) =>
              (0, a.jsx)(
                ei,
                {
                  guildId: t,
                  resourceChannel: e,
                  index: s,
                  onDragStart: o,
                  onDragReset: u,
                  onDragComplete: c,
                },
                e.channelId
              )
            ),
            n.length < m.RESOURCE_CHANNEL_MAX &&
              (0, a.jsxs)(d.Clickable, {
                className: Z.addActionItem,
                onClick: _,
                children: [
                  (0, a.jsx)(P.default, {}),
                  (0, a.jsx)(d.Text, {
                    variant: "text-md/normal",
                    color: "none",
                    children:
                      K.default.Messages
                        .GUILD_SETTINGS_ONBOARDING_ADD_A_RESOURCE,
                  }),
                ],
              }),
          ],
        });
      }
      function eu(e) {
        let { saveOnClose: t } = e,
          s = (0, r.default)([H.default], () => H.default.getGuildId());
        return null == s
          ? null
          : (0, a.jsx)(ec, { guildId: s, saveOnClose: t });
      }
      function ec(e) {
        let { saveOnClose: t, guildId: s } = e,
          n = (0, r.useStateFromStoresObject)([w.default], () => {
            var e;
            let t = w.default.getSettings();
            return null !== (e = t.welcomeMessage) && void 0 !== e
              ? e
              : { authorIds: [], message: "" };
          }),
          [i, u] = l.useState("new"),
          c = [
            {
              value: "new",
              name: K.default.Messages
                .GUILD_SETTINGS_ONBOARDING_HOME_NEW_MEMBER_EXAMPLE,
            },
            {
              value: "existing",
              name: K.default.Messages
                .GUILD_SETTINGS_ONBOARDING_HOME_EXISTING_MEMBER_EXAMPLE,
            },
          ],
          E = (0, r.default)([R.default], () => R.default.theme);
        return (
          l.useEffect(
            () => () => {
              if (null == s) return;
              let e = w.default.getSettings();
              (0, k.saveHomeSettings)(s, e);
            },
            [t, s]
          ),
          (0, a.jsxs)("div", {
            className: Z.page,
            children: [
              (0, a.jsxs)("div", {
                className: Z.leftColumn,
                children: [
                  (0, a.jsx)(d.Heading, {
                    className: Z.header,
                    variant: "heading-lg/extrabold",
                    children:
                      K.default.Messages
                        .GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_WELCOME_TITLE,
                  }),
                  (0, a.jsx)("div", {
                    className: Z.descriptionSection,
                    children: (0, a.jsx)(d.Text, {
                      variant: "text-sm/medium",
                      color: "header-secondary",
                      children:
                        K.default.Messages
                          .GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_WELCOME_DESCRIPTION,
                    }),
                  }),
                  (0, a.jsx)("div", {
                    className: Z.section,
                    children: (0, a.jsx)($, { guildId: s, welcomeMessage: n }),
                  }),
                  (0, a.jsx)("div", { className: Z.sectionSeparator }),
                  (0, a.jsx)(d.Heading, {
                    className: Z.header,
                    variant: "heading-lg/extrabold",
                    children:
                      K.default.Messages
                        .GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_TODOS_TITLE,
                  }),
                  (0, a.jsx)("div", {
                    className: Z.descriptionSection,
                    children: (0, a.jsx)(d.Text, {
                      variant: "text-sm/medium",
                      color: "header-secondary",
                      children:
                        K.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_TODOS_DESCRIPTION.format(),
                    }),
                  }),
                  (0, a.jsx)("div", {
                    className: Z.section,
                    children: (0, a.jsx)(el, {}),
                  }),
                  (0, a.jsx)(et, { guildId: s }),
                  (0, a.jsx)("div", { className: Z.sectionSeparator }),
                  (0, a.jsx)(d.Heading, {
                    className: Z.header,
                    variant: "heading-lg/extrabold",
                    children:
                      K.default.Messages
                        .GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCES_TITLE,
                  }),
                  (0, a.jsxs)("div", {
                    className: Z.descriptionSection,
                    children: [
                      (0, a.jsx)(d.Text, {
                        variant: "text-sm/medium",
                        color: "header-secondary",
                        children:
                          K.default.Messages
                            .GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCES_DESCRIPTION,
                      }),
                      (0, a.jsxs)("ul", {
                        className: Z.bulletList,
                        children: [
                          (0, a.jsx)("li", {
                            children: (0, a.jsx)(d.Text, {
                              tag: "span",
                              variant: "text-sm/medium",
                              color: "header-secondary",
                              children:
                                K.default.Messages
                                  .GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCE_BULLET_1,
                            }),
                          }),
                          (0, a.jsx)("li", {
                            children: (0, a.jsx)(d.Text, {
                              tag: "span",
                              variant: "text-sm/medium",
                              color: "header-secondary",
                              children:
                                K.default.Messages
                                  .GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCE_BULLET_2,
                            }),
                          }),
                          (0, a.jsx)("li", {
                            children: (0, a.jsx)(d.Text, {
                              tag: "span",
                              variant: "text-sm/medium",
                              color: "header-secondary",
                              children:
                                K.default.Messages
                                  .GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCE_BULLET_3,
                            }),
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, a.jsxs)("div", {
                    className: Z.section,
                    children: [
                      (0, a.jsx)(eo, { guildId: s }),
                      (0, a.jsx)(ed, { guildId: s }),
                    ],
                  }),
                  (0, a.jsx)("div", { className: Z.sectionSeparator }),
                  (0, a.jsx)(en, { guildId: s }),
                ],
              }),
              (0, a.jsxs)("div", {
                className: Z.rightColumn,
                children: [
                  (0, a.jsx)("div", {
                    className: Z.centeredSection,
                    children: (0, a.jsx)(d.Text, {
                      variant: "text-sm/medium",
                      color: "header-secondary",
                      children: K.default.Messages.EXAMPLE,
                    }),
                  }),
                  (0, a.jsx)("img", {
                    className: Z.previewImage,
                    src: (0, o.isThemeLight)(E)
                      ? "existing" === i
                        ? Q
                        : q
                      : "existing" === i
                        ? X
                        : J,
                    alt: K.default.Messages
                      .GUILD_SETTINGS_ONBOARDING_HOME_GUIDE_EXAMPLE_ALT,
                  }),
                  (0, a.jsx)(d.SegmentedControl, {
                    options: c,
                    value: i,
                    onChange: e => {
                      let { value: t } = e;
                      return u(String(t));
                    },
                    look: "pill",
                  }),
                ],
              }),
            ],
          })
        );
      }
      function eE() {
        let e = (0, r.default)([H.default], () => H.default.getGuild()),
          t = (0, r.default)([w.default], () => w.default.getSettings()),
          s = (0, r.default)([w.default], () => w.default.getSubmitting());
        return null == e
          ? null
          : (0, a.jsx)(u.default, {
              onSave: () => {
                try {
                  (0, k.saveHomeSettings)(e.id, t);
                } catch {}
              },
              onReset: k.resetHomeSettings,
              submitting: s,
              onSaveText: K.default.Messages.SAVE,
            });
      }
    },
    887313: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return L;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("446674"),
        n = s("77078"),
        i = s("997289"),
        r = s("716241"),
        o = s("863636"),
        d = s("129092"),
        u = s("233706"),
        c = s("305961"),
        E = s("423487"),
        _ = s("898260"),
        I = s("599110"),
        T = s("131835"),
        f = s("435076"),
        S = s("642807"),
        m = s("330724"),
        N = s("259483"),
        g = s("682327"),
        h = s("671932"),
        C = s("49111"),
        R = s("782340"),
        x = s("877180");
      function L(e) {
        let { guildId: t, completed: s } = e,
          { homeSettingsEnabled: n } = (0, u.useOnboardingHomeAdminExperiment)(
            t
          ),
          d = (0, l.useStateFromStores)([o.default], () =>
            o.default.getEnabled(t)
          ),
          { location: c } = (0, i.useAnalyticsContext)();
        c.object = s
          ? C.AnalyticsObjects.ONBOARDING_EDIT
          : C.AnalyticsObjects.ONBOARDING_REVIEW;
        let E = async function () {
            let e =
              arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            d
              ? (await (0, m.enableGuildOnboarding)(t, !1),
                I.default.track(
                  C.AnalyticEvents.GUILD_SETTINGS_ONBOARDING_EDIT_PAGE_CLICKED,
                  {
                    ...(0, r.collectGuildAnalyticsMetadata)(t),
                    action_taken:
                      N.GuildSettingsCTAs[N.GuildSettingsCTAs.TOGGLE_DISABLED],
                    location: c,
                  }
                ))
              : (await (0, m.enableGuildOnboarding)(t, !0),
                e && (0, f.enableHomeSettings)(t, !0),
                s
                  ? I.default.track(
                      C.AnalyticEvents
                        .GUILD_SETTINGS_ONBOARDING_EDIT_PAGE_CLICKED,
                      {
                        ...(0, r.collectGuildAnalyticsMetadata)(t),
                        action_taken:
                          N.GuildSettingsCTAs[
                            N.GuildSettingsCTAs.TOGGLE_ENABLED
                          ],
                        location: c,
                      }
                    )
                  : I.default.track(
                      C.AnalyticEvents
                        .GUILD_SETTINGS_ONBOARDING_WIZARD_PROGRESS_CTA_CLICKED,
                      {
                        ...(0, r.collectGuildAnalyticsMetadata)(t),
                        step: N.GuildSettingsOnboardingPage[
                          N.GuildSettingsOnboardingPage.REVIEW
                        ],
                        back: !1,
                        skip: !1,
                        completed: !0,
                      }
                    ));
          },
          S = () => {
            I.default.track(
              C.AnalyticEvents.GUILD_SETTINGS_ONBOARDING_EDIT_PAGE_CLICKED,
              {
                ...(0, r.collectGuildAnalyticsMetadata)(t),
                action_taken: N.GuildSettingsCTAs[N.GuildSettingsCTAs.PREVIEW],
                location: c,
              }
            ),
              (0, T.startPreview)(t);
          },
          g = (0, a.jsxs)(a.Fragment, {
            children: [
              (0, a.jsx)(h.DefaultChannelsOverviewItem, {
                guildId: t,
                onEdit: () => {
                  I.default.track(
                    C.AnalyticEvents
                      .GUILD_SETTINGS_ONBOARDING_EDIT_PAGE_CLICKED,
                    {
                      ...(0, r.collectGuildAnalyticsMetadata)(t),
                      action_taken:
                        N.GuildSettingsCTAs[
                          N.GuildSettingsCTAs.EDIT_DEFAULT_CHANNELS
                        ],
                      location: c,
                    }
                  ),
                    (0, T.setOnboardingStep)(
                      N.GuildSettingsOnboardingPage.DEFAULT_CHANNELS
                    );
                },
                disableGoodStatus: s,
              }),
              (0, a.jsx)(_.default, { className: x.divider }),
              (0, a.jsx)(h.CustomizationQuestionsOverviewItem, {
                guildId: t,
                onEdit: () => {
                  I.default.track(
                    C.AnalyticEvents
                      .GUILD_SETTINGS_ONBOARDING_EDIT_PAGE_CLICKED,
                    {
                      ...(0, r.collectGuildAnalyticsMetadata)(t),
                      action_taken:
                        N.GuildSettingsCTAs[
                          N.GuildSettingsCTAs.EDIT_CUSTOMIZATION_QUESTIONS
                        ],
                      location: c,
                    }
                  ),
                    (0, T.setOnboardingStep)(
                      N.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS
                    );
                },
                disableGoodStatus: s,
              }),
              n &&
                (0, a.jsxs)(a.Fragment, {
                  children: [
                    (0, a.jsx)(_.default, { className: x.divider }),
                    (0, a.jsx)(h.HomeSettingsOverviewItem, {
                      guildId: t,
                      onEdit: () => {
                        I.default.track(
                          C.AnalyticEvents
                            .GUILD_SETTINGS_ONBOARDING_EDIT_PAGE_CLICKED,
                          {
                            ...(0, r.collectGuildAnalyticsMetadata)(t),
                            action_taken:
                              N.GuildSettingsCTAs[
                                N.GuildSettingsCTAs.EDIT_HOME_SETTINGS
                              ],
                            location: c,
                          }
                        ),
                          (0, T.setOnboardingStep)(
                            N.GuildSettingsOnboardingPage.HOME_SETTINGS
                          );
                      },
                      disableGoodStatus: s,
                    }),
                  ],
                }),
            ],
          });
        return s
          ? (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsx)(O, { guildId: t, handlePreview: S }),
                (0, a.jsx)(p, {}),
                (0, a.jsxs)("div", {
                  className: x.content,
                  children: [
                    (0, a.jsx)(A, { guildId: t, handleOnboardingToggle: E }),
                    g,
                  ],
                }),
              ],
            })
          : (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsxs)("div", {
                  className: x.content,
                  children: [
                    (0, a.jsx)(M, {
                      guildId: t,
                      handleOnboardingToggle: E,
                      handlePreview: S,
                    }),
                    g,
                  ],
                }),
                (0, a.jsx)(D, { guildId: t }),
              ],
            });
      }
      function O(e) {
        let { guildId: t, handlePreview: s } = e;
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(n.Heading, {
              variant: "heading-lg/semibold",
              color: "header-primary",
              className: x.header,
              children: R.default.Messages.GUILD_SETTINGS_ONBOARDING,
            }),
            (0, a.jsx)(n.Text, {
              variant: "text-md/normal",
              color: "header-secondary",
              className: x.subheader,
              children: R.default.Messages.GUILD_ONBOARDING_OVERVIEW_SUBTITLE,
            }),
            (0, a.jsxs)("div", {
              className: x.help,
              children: [
                (0, a.jsx)(n.Anchor, {
                  target: "_blank",
                  href: C.MarketingURLs.GUILD_ONBOARDING_EXAMPLES,
                  children: (0, a.jsx)(n.Text, {
                    variant: "text-sm/medium",
                    color: "text-link",
                    children:
                      R.default.Messages.GUILD_ONBOARDING_OVERVIEW_SEE_EXAMPLES,
                  }),
                }),
                (0, a.jsx)("div", { className: x.helpSeparator }),
                (0, a.jsx)(n.Anchor, {
                  onClick: s,
                  children: (0, a.jsx)(n.Text, {
                    variant: "text-sm/medium",
                    color: "text-link",
                    children: R.default.Messages.GUILD_ONBOARDING_SETUP_PREVIEW,
                  }),
                }),
                (0, a.jsx)("div", { className: x.helpSeparator }),
                (0, a.jsx)(g.AdvancedModeToggle, { guildId: t }),
              ],
            }),
          ],
        });
      }
      function p() {
        let e = "• ";
        return (0, a.jsxs)("div", {
          className: x.notice,
          children: [
            (0, a.jsx)("img", {
              className: x.wumpus,
              src: s("353773"),
              alt: "wumpus",
            }),
            (0, a.jsxs)("div", {
              children: [
                (0, a.jsx)(n.Heading, {
                  variant: "heading-md/semibold",
                  color: "header-primary",
                  className: x.header,
                  children:
                    R.default.Messages.GUILD_ONBOARDING_OVERVIEW_UPDATES_HEADER,
                }),
                (0, a.jsxs)(n.Text, {
                  variant: "text-sm/medium",
                  color: "header-secondary",
                  children: [
                    e,
                    R.default.Messages.GUILD_ONBOARDING_OVERVIEW_UPDATES_2,
                  ],
                }),
                (0, a.jsxs)(n.Text, {
                  variant: "text-sm/medium",
                  color: "header-secondary",
                  children: [
                    e,
                    R.default.Messages.GUILD_ONBOARDING_OVERVIEW_UPDATES_3,
                  ],
                }),
              ],
            }),
          ],
        });
      }
      function A(e) {
        let { guildId: t, handleOnboardingToggle: s } = e,
          i = (0, h.useOnboardingCanBeEnabled)(t),
          r = (0, l.useStateFromStores)([o.default], () =>
            o.default.getEnabled(t)
          );
        return (0, a.jsxs)("div", {
          className: x.review,
          children: [
            (0, a.jsxs)("div", {
              className: x.reviewHeaderText,
              children: [
                (0, a.jsx)(n.Heading, {
                  variant: "heading-md/semibold",
                  children: r
                    ? R.default.Messages.GUILD_ONBOARDING_OVERVIEW_TITLE_ENABLED
                    : R.default.Messages
                        .GUILD_ONBOARDING_OVERVIEW_TITLE_DISABLED,
                }),
                (0, a.jsx)(n.Text, {
                  variant: "text-xs/normal",
                  color: "text-muted",
                  children: r
                    ? R.default.Messages
                        .GUILD_ONBOARDING_OVERVIEW_SUBTITLE_ENABLED
                    : R.default.Messages
                        .GUILD_ONBOARDING_OVERVIEW_SUBTITLE_DISABLED,
                }),
              ],
            }),
            (0, a.jsx)(n.Switch, {
              checked: r,
              onChange: () => s(!1),
              disabled: !r && !i,
            }),
          ],
        });
      }
      function M(e) {
        let { guildId: t, handleOnboardingToggle: s, handlePreview: i } = e,
          r = (0, h.useOnboardingCanBeEnabled)(t),
          o = (0, l.useStateFromStores)([S.default], () =>
            S.default.getSettings()
          ),
          u = (0, d.isSettingsValid)(o);
        return (0, a.jsxs)("div", {
          className: x.reviewHeader,
          children: [
            (0, a.jsxs)("div", {
              className: x.reviewHeaderText,
              children: [
                (0, a.jsx)(n.Heading, {
                  variant: "heading-md/semibold",
                  children: r
                    ? R.default.Messages.GUILD_ONBOARDING_SETUP_REVIEW_TITLE
                    : R.default.Messages
                        .GUILD_ONBOARDING_SETUP_REVIEW_TITLE_INCOMPLETE,
                }),
                (0, a.jsx)(n.Text, {
                  variant: "text-xs/normal",
                  children: r
                    ? R.default.Messages
                        .GUILD_ONBOARDING_SETUP_REVIEW_DESCRIPTION
                    : R.default.Messages
                        .GUILD_ONBOARDING_SETUP_REVIEW_DESCRIPTION_INCOMPLETE,
                }),
              ],
            }),
            (0, a.jsxs)("div", {
              className: x.reviewActions,
              children: [
                (0, a.jsx)(n.Button, {
                  size: n.Button.Sizes.SMALL,
                  color: n.Button.Colors.PRIMARY,
                  look: n.Button.Looks.OUTLINED,
                  onClick: i,
                  children: R.default.Messages.GUILD_ONBOARDING_SETUP_PREVIEW,
                }),
                (0, a.jsx)(n.Button, {
                  size: n.Button.Sizes.SMALL,
                  color: n.Button.Colors.BRAND,
                  onClick: () => s(u),
                  disabled: !r,
                  children:
                    R.default.Messages
                      .GUILD_ONBOARDING_SETUP_REVIEW_ENABLE_ONBOARDING,
                }),
              ],
            }),
          ],
        });
      }
      function D(e) {
        let { guildId: t } = e,
          s = (0, l.useStateFromStores)([c.default], () =>
            c.default.getGuild(t)
          );
        return null == s || s.verificationLevel < C.VerificationLevels.VERY_HIGH
          ? null
          : (0, a.jsxs)("div", {
              className: x.rolesWarning,
              children: [
                (0, a.jsx)(E.default, {
                  width: 16,
                  height: 16,
                  className: x.warningIcon,
                }),
                (0, a.jsx)(n.Text, {
                  variant: "text-sm/medium",
                  color: "text-muted",
                  children:
                    R.default.Messages
                      .GUILD_ONBOARDING_SETUP_PREVIEW_ROLES_WARNING,
                }),
              ],
            });
      }
    },
    648704: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return B;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("146606"),
        o = s("446674"),
        d = s("669491"),
        u = s("266491"),
        c = s("819855"),
        E = s("77078"),
        _ = s("841098"),
        I = s("206230"),
        T = s("716241"),
        f = s("137215"),
        S = s("965397"),
        m = s("599110"),
        N = s("659500"),
        g = s("900938"),
        h = s("851490"),
        C = s("131835"),
        R = s("435076"),
        x = s("642807"),
        L = s("330724"),
        O = s("136278"),
        p = s("397947"),
        A = s("259483"),
        M = s("867928"),
        D = s("545901"),
        v = s("706866"),
        G = s("764151"),
        j = s("832931"),
        U = s("49111"),
        P = s("782340"),
        b = s("182574");
      function B() {
        let e = (0, o.useStateFromStores)([g.default], () =>
          g.default.getGuild()
        );
        return null == e ? null : (0, a.jsx)(y, { guild: e });
      }
      function y(e) {
        let { guild: t } = e,
          n = t.id,
          g = (0, o.useStateFromStores)([p.default], () =>
            p.default.getCurrentPage()
          ),
          B = (0, M.default)(n),
          {
            hasChanges: y,
            hasConfiguredAnythingForCurrentStep: F,
            hasErrors: H,
          } = (0, o.useStateFromStoresObject)([p.default], () => ({
            hasChanges: p.default.hasChanges(),
            hasConfiguredAnythingForCurrentStep:
              p.default.hasConfiguredAnythingForCurrentStep(),
            hasErrors: p.default.hasErrors(),
          })),
          k = (0, o.useStateFromStores)([p.default], () => {
            let e = (0, A.pageToEducationUpsellType)(g);
            return null != e && !p.default.isEducationUpsellDismissed(e);
          }),
          w = (0, o.useStateFromStores)(
            [I.default],
            () => I.default.useReducedMotion
          ),
          V = (0, _.default)(),
          Y = l.useRef(null),
          [{ spring: W }, z] = (0, r.useSpring)(() => ({ spring: 0 }));
        l.useEffect(() => {
          function e() {
            z({ spring: 1, config: r.config.gentle }),
              z({ spring: 0, config: r.config.gentle, delay: 1e3 });
          }
          return (
            N.ComponentDispatch.subscribe(
              U.ComponentActions.EMPHASIZE_NOTICE,
              e
            ),
            () => {
              N.ComponentDispatch.unsubscribe(
                U.ComponentActions.EMPHASIZE_NOTICE,
                e
              );
            }
          );
        }, [z]);
        let K = (0, E.useToken)(d.default.colors.BACKGROUND_FLOATING).hex(),
          Z = (0, E.useToken)(d.default.unsafe_rawColors.PRIMARY_160).hex(),
          X = (0, c.isThemeDark)(V) ? K : Z,
          Q = W.to({
            range: [0, 1],
            output: [
              (0, E.useToken)(d.default.unsafe_rawColors.WHITE_500).hex(),
              (0, E.useToken)(d.default.colors.TEXT_NORMAL).hex(),
            ],
          }),
          J = W.to({
            range: [0, 1],
            output: [X, (0, E.useToken)(d.default.colors.STATUS_DANGER).hex()],
          });
        if (B) {
          if (g === A.GuildSettingsOnboardingPage.DEFAULT_CHANNELS)
            return (0, a.jsx)(v.GuildSettingsDefaultChannelsNotice, {});
          if (g === A.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS)
            return (0, a.jsx)(j.GuildSettingsOnboardingPromptsNotice, {});
          else if (g === A.GuildSettingsOnboardingPage.HOME_SETTINGS)
            return (0, a.jsx)(G.GuildSettingsHomeSettingsNotice, {});
        }
        let q = g === A.ONBOARDING_STEPS[A.ONBOARDING_STEPS.length - 1],
          $ = async () => {
            let e = O.default.advancedMode;
            if (y)
              try {
                if (g === A.GuildSettingsOnboardingPage.DEFAULT_CHANNELS)
                  await (0, h.saveDefaultChannels)(t).then(() =>
                    e
                      ? (0, L.saveGuildOnboardingPrompts)(t, {
                          ignoreDefaultPrompt: !0,
                        })
                      : Promise.resolve()
                  );
                else if (
                  g === A.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS
                )
                  await (0, L.saveGuildOnboardingPrompts)(t, {
                    ignoreDefaultPrompt: !0,
                  });
                else if (g === A.GuildSettingsOnboardingPage.HOME_SETTINGS) {
                  let e = x.default.getSettings();
                  await (0, R.saveHomeSettings)(t.id, e);
                }
              } catch {
                return !1;
              }
            return !0;
          },
          ee = async () => {
            m.default.track(
              U.AnalyticEvents
                .GUILD_SETTINGS_ONBOARDING_WIZARD_PROGRESS_CTA_CLICKED,
              {
                ...(0, T.collectGuildAnalyticsMetadata)(n),
                step: A.GuildSettingsOnboardingPage[g],
                back: !1,
                skip: !y,
              }
            ),
              (0, C.dismissEducationUpsell)(
                (0, A.pageToEducationUpsellType)(g)
              ),
              (await $()) && (0, C.goToNextOnboardingStep)(n, g);
          },
          et = async () => {
            m.default.track(
              U.AnalyticEvents
                .GUILD_SETTINGS_ONBOARDING_WIZARD_PROGRESS_CTA_CLICKED,
              {
                ...(0, T.collectGuildAnalyticsMetadata)(n),
                step: A.GuildSettingsOnboardingPage[g],
                back: !0,
                skip: !1,
              }
            ),
              (await $()) && (0, C.goToPrevOnboardingStep)(n, g);
          },
          es = null;
        k &&
          (g === A.GuildSettingsOnboardingPage.SAFETY_CHECK
            ? (es = (0, a.jsx)(D.SafetyCheckUpsell, {}))
            : g === A.GuildSettingsOnboardingPage.DEFAULT_CHANNELS
              ? (es = (0, a.jsx)(D.DefaultChannelsUpsell, {}))
              : g === A.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS
                ? (es = (0, a.jsx)(D.CustomizationQuestionsUpsell, {}))
                : g === A.GuildSettingsOnboardingPage.HOME_SETTINGS &&
                  (es = (0, a.jsx)(D.HomeSettingsUpsell, {})));
        let ea = (0, a.jsx)(E.Button, {
            className: i(b.button, { [b.hidden]: k }),
            color: E.Button.Colors.PRIMARY,
            look: E.Button.Looks.OUTLINED,
            size: E.Button.Sizes.SMALL,
            onClick: et,
            disabled: k || H,
            children: (0, a.jsxs)("span", {
              className: b.button,
              children: [
                (0, a.jsx)(f.default, {
                  className: b.arrow,
                  direction: f.default.Directions.LEFT,
                }),
                P.default.Messages.BACK,
              ],
            }),
          }),
          el = (0, a.jsx)(E.Button, {
            className: b.button,
            color: F ? E.Button.Colors.BRAND : E.Button.Colors.PRIMARY,
            look: E.Button.Looks.FILLED,
            size: E.Button.Sizes.SMALL,
            onClick: ee,
            disabled: k || H,
            children: (0, a.jsxs)(r.animated.span, {
              className: b.button,
              style: { color: Q },
              children: [
                F ? P.default.Messages.NEXT : P.default.Messages.SKIP,
                (0, a.jsx)(f.default, {
                  className: b.arrow,
                  direction: f.default.Directions.RIGHT,
                }),
              ],
            }),
          });
        return (0, a.jsx)(u.TransitionGroup, {
          component: "div",
          children: (0, a.jsx)(S.default, {
            className: i(b.noticeRegion),
            children: (0, a.jsx)(r.animated.div, {
              className: b.container,
              style: { backgroundColor: J },
              children: (0, a.jsxs)("div", {
                className: b.flexContainer,
                ref: Y,
                children: [
                  k
                    ? (0, a.jsxs)("div", {
                        className: b.educationUpsellRoot,
                        children: [
                          (0, a.jsx)("img", {
                            className: i(b.wumpus, { [b.animated]: !w }),
                            src: s("353773"),
                            alt: "wumpus",
                          }),
                          (0, a.jsxs)("div", {
                            className: b.educationUpsell,
                            children: [
                              es,
                              (0, a.jsx)("div", {
                                className: b.educationUpsellArrow,
                              }),
                            ],
                          }),
                        ],
                      })
                    : null,
                  (0, a.jsx)(E.FocusRingScope, {
                    containerRef: Y,
                    children: (0, a.jsxs)("div", {
                      className: b.actions,
                      children: [
                        ea,
                        (0, a.jsxs)("div", {
                          className: b.next,
                          children: [
                            H
                              ? (0, a.jsx)(E.Text, {
                                  variant: "text-sm/normal",
                                  color: "status-warning",
                                  children:
                                    P.default.Messages
                                      .ONBOARDING_PROMPTS_INCOMPLETE,
                                })
                              : null,
                            q ? null : el,
                          ],
                        }),
                      ],
                    }),
                  }),
                ],
              }),
            }),
          }),
        });
      }
    },
    832931: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return O;
          },
          GuildSettingsOnboardingPromptsNotice: function () {
            return A;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("446674"),
        i = s("77078"),
        r = s("45299"),
        o = s("419830"),
        d = s("863636"),
        u = s("380710"),
        c = s("593195"),
        E = s("256170"),
        _ = s("423487"),
        I = s("900938"),
        T = s("653274"),
        f = s("131835"),
        S = s("330724"),
        m = s("136278"),
        N = s("682327"),
        g = s("457461"),
        h = s("49111"),
        C = s("653138"),
        R = s("782340"),
        x = s("675264");
      function L(e) {
        let { guildId: t, prompts: s } = e,
          r = (0, n.useStateFromStores)(
            [T.default],
            () => T.default.editedDefaultChannelIds
          ),
          [d, I] = (0, u.useChannelCoverageForOnboarding)(t, s, [...r]),
          f = d.length,
          S = d.length + I.length,
          m = (f / S) * 100,
          N = Math.max(Math.ceil((85 * S) / 100) - f, 0),
          [g, h] = l.useState(!1);
        return (0, a.jsxs)("div", {
          className: x.channelCoverage,
          children: [
            (0, a.jsxs)(i.Clickable, {
              className: x.coverageHeader,
              onClick: () => h(!g),
              children: [
                (0, a.jsxs)("div", {
                  className: x.warningTextContainer,
                  children: [
                    m <= 85 &&
                      (0, a.jsx)(_.default, {
                        width: 16,
                        height: 16,
                        className: x.warning,
                      }),
                    (0, a.jsx)(i.Text, {
                      className: x.coverageTitle,
                      variant: "text-xs/medium",
                      color: "text-muted",
                      children:
                        R.default.Messages.ONBOARDING_PROMPT_CHANNEL_COVERAGE_MISSING_CHANNELS.format(
                          { numChannelsMissing: S - f }
                        ),
                    }),
                  ],
                }),
                (0, a.jsxs)("div", {
                  className: x.progressContainer,
                  children: [
                    (0, a.jsx)(i.Progress, {
                      className: x.coverageProgress,
                      foregroundColor:
                        m > 85
                          ? "var(--status-positive)"
                          : "var(--status-warning)",
                      percent: m,
                    }),
                    (0, a.jsx)(E.default, { className: x.caret, open: g }),
                  ],
                }),
              ],
            }),
            g
              ? (0, a.jsxs)("div", {
                  className: x.channelCoverageDetails,
                  children: [
                    (0, a.jsx)(i.Text, {
                      variant: "text-xs/semibold",
                      color: "text-muted",
                      children:
                        R.default.Messages
                          .ONBOARDING_PROMPT_CHANNEL_COVERAGE_CHANNELS,
                    }),
                    (0, a.jsx)("div", {
                      className: x.channels,
                      children: I.map(e => {
                        var t;
                        let s =
                          null !== (t = (0, o.getChannelIconComponent)(e)) &&
                          void 0 !== t
                            ? t
                            : c.default;
                        return (0, a.jsx)(
                          "div",
                          {
                            className: x.channelPill,
                            children: (0, a.jsxs)(i.Text, {
                              className: x.channel,
                              variant: "text-xs/normal",
                              color: "interactive-active",
                              children: [
                                (0, a.jsx)(s, { width: 12, height: 12 }),
                                e.name,
                              ],
                            }),
                          },
                          e.id
                        );
                      }),
                    }),
                    (0, a.jsx)("div", {
                      className: x.channelCoverageHint,
                      children:
                        N > 0
                          ? (0, a.jsxs)(a.Fragment, {
                              children: [
                                (0, a.jsx)(_.default, {
                                  width: 16,
                                  height: 16,
                                }),
                                (0, a.jsx)(i.Text, {
                                  variant: "text-xs/normal",
                                  color: "text-muted",
                                  children:
                                    R.default.Messages.ONBOARDING_PROMPT_CHANNEL_COVERAGE_ADD_HELP.format(
                                      { numChannels: N }
                                    ),
                                }),
                              ],
                            })
                          : (0, a.jsx)(i.Text, {
                              variant: "text-xs/normal",
                              color: "text-muted",
                              children:
                                R.default.Messages.GUILD_NO_CHANNELS_HEADER,
                            }),
                    }),
                  ],
                })
              : null,
          ],
        });
      }
      function O(e) {
        let { saveOnClose: t } = e,
          s = (0, n.useStateFromStores)([I.default], () =>
            I.default.getGuild()
          );
        return null == s ? null : (0, a.jsx)(p, { guild: s, saveOnClose: t });
      }
      function p(e) {
        let { guild: t, saveOnClose: s } = e,
          r = (0, n.useStateFromStores)([d.default], () =>
            d.default.isLoading()
          ),
          o = (0, n.useStateFromStores)(
            [m.default],
            () => m.default.editedOnboardingPrompts
          ),
          u = (0, n.useStateFromStores)(
            [m.default],
            () => m.default.advancedMode
          ),
          c = l.useRef(!1);
        if (
          (l.useEffect(() => {
            !r &&
              !c.current &&
              0 === o.length &&
              ((c.current = !0),
              !u &&
                (0, S.editGuildOnboardingPrompts)(
                  t,
                  [(0, C.getDefaultPrompt)()],
                  !1
                ));
          }),
          l.useEffect(() => {
            if (s)
              return () => {
                (0, S.saveGuildOnboardingPrompts)(t, {
                  ignoreDefaultPrompt: !0,
                }).catch(() => {});
              };
          }, [s]),
          null == t)
        )
          return null;
        let E = async () => {
          try {
            await (0, S.saveGuildOnboardingPrompts)(t),
              await (0, f.startPreview)(t.id);
          } catch {}
        };
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(i.Heading, {
              className: x.header,
              variant: "heading-lg/extrabold",
              children: u
                ? R.default.Messages.ONBOARDING_PROMPT_SETTINGS_HEADER_ADVANCED
                : R.default.Messages.ONBOARDING_PROMPT_SETTINGS_HEADER,
            }),
            (0, a.jsx)(i.Text, {
              variant: "text-sm/normal",
              color: "header-secondary",
              children: R.default.Messages.ONBOARDING_PROMPT_SETTINGS_SUBHEADER,
            }),
            (0, a.jsxs)("div", {
              className: x.links,
              children: [
                (0, a.jsx)(i.Anchor, {
                  target: "_blank",
                  href: h.MarketingURLs.GUILD_ONBOARDING_EXAMPLES,
                  children: (0, a.jsx)(i.Text, {
                    variant: "text-sm/medium",
                    color: "text-link",
                    children:
                      R.default.Messages.GUILD_ONBOARDING_OVERVIEW_SEE_EXAMPLES,
                  }),
                }),
                (0, a.jsx)("div", { className: x.dot }),
                (0, a.jsx)(i.Anchor, {
                  onClick: E,
                  children: (0, a.jsx)(i.Text, {
                    variant: "text-sm/medium",
                    color: "text-link",
                    children: R.default.Messages.GUILD_ONBOARDING_SETUP_PREVIEW,
                  }),
                }),
                (0, a.jsx)("div", { className: x.dot }),
                (0, a.jsx)(N.AdvancedModeToggle, { guildId: t.id }),
              ],
            }),
            (0, a.jsx)(L, { guildId: t.id, prompts: o }),
            (0, a.jsx)("div", {
              className: x.prompts,
              children: r
                ? (0, a.jsx)(i.Spinner, {})
                : (0, a.jsx)(g.default, { postjoinOnly: u, guildId: t.id }),
            }),
          ],
        });
      }
      function A() {
        let e = (0, n.useStateFromStores)([I.default], () =>
            I.default.getGuild()
          ),
          t = (0, n.useStateFromStores)(
            [m.default],
            () => m.default.submitting
          );
        return null == e
          ? null
          : (0, a.jsx)(r.default, {
              onSave: () => {
                try {
                  (0, S.saveGuildOnboardingPrompts)(e);
                } catch {}
              },
              onReset: S.resetGuildOnboardingPrompts,
              submitting: t,
              onSaveText: R.default.Messages.SAVE,
            });
      }
    },
    253308: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return L;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("446674"),
        o = s("77078"),
        d = s("69678"),
        u = s("372283"),
        c = s("380710"),
        E = s("837648"),
        _ = s("461380"),
        I = s("673220"),
        T = s("228220"),
        f = s("449008"),
        S = s("653274"),
        m = s("330724"),
        N = s("136278"),
        g = s("594523"),
        h = s("653138"),
        C = s("782340"),
        R = s("218308");
      let x = { optionErrors: [] };
      function L(e) {
        var t;
        let {
            guild: s,
            prompt: n,
            disableAutofocus: u,
            promptIndex: g,
            dragIndex: L,
            includeCount: A,
            singleColumn: M,
            onPromptDragComplete: D,
            onPromptDragStart: v,
            onPromptDragReset: G,
          } = e,
          { dropdownsAllowed: j } = (0, E.useOnboardingDropdownExperiment)(
            s.id
          ),
          U = (0, r.useStateFromStores)(
            [S.default],
            () => S.default.editedDefaultChannelIds
          ),
          P = j
            ? h.DROPDOWN_MAX_NUM_OPTIONS
            : h.MULTIPLE_CHOICE_MAX_NUM_OPTIONS,
          {
            drag: b,
            dragSourcePosition: B,
            drop: y,
            setIsDraggable: F,
          } = (0, d.default)({
            type: "ONBOARDING_PROMPT_CARD",
            index: L,
            optionId: n.id,
            onDragStart: v,
            onDragComplete: D,
            onDragReset: G,
          }),
          H = (0, r.useStateFromStoresObject)([N.default], () => {
            var e;
            return null !== (e = N.default.errors[g]) && void 0 !== e ? e : x;
          }),
          [k, w] = l.useState(!1),
          [V, Y] = l.useState(!1),
          W =
            null !== (t = H.options) && void 0 !== t
              ? t
              : H.optionErrors.filter(f.isNotNullish)[0],
          z = H.config,
          K =
            j && n.options.length >= h.ONBOARDING_PROMPT_TYPE_SWITCH_THRESHOLD,
          Z =
            (0, c.getMinimumSetOfDefaultChannelIds)(s.id, Array.from(U), [n])
              .length - U.size,
          X = l.useRef(null);
        return (l.useLayoutEffect(() => {
          setTimeout(() => {
            if (0 === g && !u) {
              var e;
              null === (e = X.current) || void 0 === e || e.focus();
            }
          }, 0);
        }, [u]),
        k)
          ? (0, a.jsx)(o.FocusRing, {
              children: (0, a.jsxs)("div", {
                tabIndex: 0,
                onFocus: () => Y(!0),
                onBlur: () => Y(!1),
                onMouseLeave: () => Y(!1),
                className: i(R.container, {
                  [R.dropIndicatorBefore]: null != B && g < B,
                  [R.dropIndicatorAfter]: null != B && g > B,
                  [R.containerFocused]: V,
                }),
                ref: e => b(y(e)),
                children: [
                  (0, a.jsx)("div", {
                    className: R.dragContainer,
                    onMouseEnter: () => F(!0),
                    onMouseLeave: () => F(!1),
                    children: (0, a.jsx)(I.default, { className: R.dragIcon }),
                  }),
                  (0, a.jsx)(o.Text, {
                    className: R.questionNumber,
                    variant: "text-xs/semibold",
                    color: "text-muted",
                    children:
                      C.default.Messages.ONBOARDING_PROMPT_OPTION_QUESTION_NUMBER.format(
                        { index: g + 1 }
                      ),
                  }),
                  (0, a.jsx)(o.Text, {
                    variant: "text-lg/semibold",
                    color: "text-normal",
                    children: n.title,
                  }),
                  (0, a.jsx)(o.Clickable, {
                    className: R.collapseButton,
                    onClick: () => w(!1),
                    children: (0, a.jsx)(_.default, {
                      direction: _.default.Directions.DOWN,
                      height: 16,
                      width: 16,
                    }),
                  }),
                  (0, a.jsx)(o.TooltipContainer, {
                    text: C.default.Messages.ONBOARDING_PROMPT_DELETE,
                    className: R.removeButton,
                    children: (0, a.jsx)(o.Clickable, {
                      className: R.closeIcon,
                      onClick: () =>
                        (0, m.deleteGuildOnboardingPrompt)(s, n.id),
                      children: (0, a.jsx)(T.default, {
                        height: 16,
                        width: 16,
                      }),
                    }),
                  }),
                ],
              }),
            })
          : (0, a.jsx)(o.FocusRing, {
              children: (0, a.jsxs)("div", {
                tabIndex: 0,
                onFocus: () => Y(!0),
                onBlur: () => Y(!1),
                className: i(R.container, {
                  [R.dropIndicatorBefore]: null != B && g < B,
                  [R.dropIndicatorAfter]: null != B && g > B,
                  [R.containerFocused]: V,
                }),
                ref: e => b(y(e)),
                children: [
                  (0, a.jsx)("div", {
                    className: R.dragContainer,
                    onMouseEnter: () => F(!0),
                    onMouseLeave: () => F(!1),
                    children: (0, a.jsx)(I.default, { className: R.dragIcon }),
                  }),
                  (0, a.jsx)(o.Text, {
                    className: R.questionNumber,
                    variant: "text-xs/semibold",
                    color: "text-muted",
                    children:
                      C.default.Messages.ONBOARDING_PROMPT_OPTION_QUESTION_NUMBER.format(
                        { index: g + 1 }
                      ),
                  }),
                  (0, a.jsx)(o.TextInput, {
                    className: R.title,
                    inputClassName: R.titleInput,
                    inputRef: X,
                    value: n.title,
                    onChange: e =>
                      (0, m.editGuildOnboardingPrompt)(s, n.id, { title: e }),
                    placeholder:
                      C.default.Messages.ONBOARDING_PROMPT_TITLE_PLACEHOLDER,
                    maxLength: h.MAX_PROMPT_TITLE_LENGTH,
                    error: H.title,
                  }),
                  (0, a.jsx)(O, { prompt: n, guild: s }),
                  (0, a.jsx)(o.Text, {
                    className: R.optionsHeader,
                    variant: "text-xs/semibold",
                    color: "text-muted",
                    children: K
                      ? C.default.Messages.ONBOARDING_PROMPT_DROPDOWN_OPTIONS_HEADER.format(
                          { count: n.options.length, total: P }
                        )
                      : C.default.Messages.ONBOARDING_PROMPT_OPTIONS_HEADER.format(
                          { count: n.options.length, total: P }
                        ),
                  }),
                  (0, a.jsx)(p, {
                    guild: s,
                    prompt: n,
                    promptIndex: g,
                    errors: H,
                    singleColumn: M,
                  }),
                  null != W ? (0, a.jsx)(o.InputError, { error: W }) : null,
                  (0, a.jsxs)("div", {
                    className: R.buttons,
                    children: [
                      (0, a.jsxs)("div", {
                        className: R.checkboxes,
                        children: [
                          (0, a.jsx)(o.Checkbox, {
                            size: 20,
                            type: o.Checkbox.Types.INVERTED,
                            value: !n.singleSelect,
                            onChange: (e, t) =>
                              (0, m.editGuildOnboardingPrompt)(s, n.id, {
                                singleSelect: !t,
                              }),
                            children: (0, a.jsx)(o.Text, {
                              variant: "text-sm/normal",
                              color: "interactive-normal",
                              children:
                                C.default.Messages
                                  .ONBOARDING_PROMPT_ALLOW_MULTIPLE_LABEL,
                            }),
                          }),
                          n.inOnboarding
                            ? (0, a.jsx)(o.Checkbox, {
                                size: 20,
                                type: o.Checkbox.Types.INVERTED,
                                value: n.inOnboarding && n.required,
                                onChange: (e, t) =>
                                  (0, m.editGuildOnboardingPrompt)(s, n.id, {
                                    required: t,
                                  }),
                                disabled: !n.inOnboarding,
                                children: (0, a.jsx)(o.Text, {
                                  variant: "text-sm/normal",
                                  color: "interactive-normal",
                                  children: A
                                    ? C.default.Messages.ONBOARDING_PROMPT_REQUIRED_LABEL_WITH_COUNT.format(
                                        { count: Z }
                                      )
                                    : C.default.Messages
                                        .ONBOARDING_PROMPT_REQUIRED_LABEL,
                                }),
                              })
                            : null,
                        ],
                      }),
                      (0, a.jsx)(o.Clickable, {
                        className: R.collapseButton,
                        onClick: () => w(!0),
                        children: (0, a.jsx)(_.default, {
                          direction: _.default.Directions.UP,
                          height: 16,
                          width: 16,
                        }),
                      }),
                      (0, a.jsx)(o.TooltipContainer, {
                        text: C.default.Messages.ONBOARDING_PROMPT_DELETE,
                        className: R.removeButton,
                        children: (0, a.jsx)(o.Clickable, {
                          className: R.closeIcon,
                          onClick: () =>
                            (0, m.deleteGuildOnboardingPrompt)(s, n.id),
                          children: (0, a.jsx)(T.default, {
                            height: 16,
                            width: 16,
                          }),
                        }),
                      }),
                    ],
                  }),
                  null != z ? (0, a.jsx)(o.InputError, { error: z }) : null,
                ],
              }),
            });
      }
      function O(e) {
        let { prompt: t, guild: s } = e,
          [n, i] = l.useState(!1);
        if (
          (l.useEffect(() => {
            !n && t.title.length > 0 && i(!0);
          }, [n, t]),
          n)
        )
          return null;
        function r(e) {
          return (0, a.jsx)(o.Clickable, {
            className: R.example,
            onClick: () =>
              (0, m.editGuildOnboardingPrompt)(s, t.id, { title: e }),
            children: (0, a.jsx)(o.Text, {
              variant: "text-xs/normal",
              children: e,
            }),
          });
        }
        return (0, a.jsxs)("div", {
          className: R.examplesSection,
          children: [
            (0, a.jsx)(o.Text, {
              variant: "text-xs/normal",
              color: "text-muted",
              children: C.default.Messages.ONBOARDING_PROMPT_EXAMPLES_HEADER,
            }),
            (0, a.jsxs)("div", {
              className: R.examples,
              children: [
                r(C.default.Messages.ONBOARDING_PROMPT_EXAMPLES_1),
                r(C.default.Messages.ONBOARDING_PROMPT_EXAMPLES_2),
                r(C.default.Messages.ONBOARDING_PROMPT_EXAMPLES_3),
                r(C.default.Messages.ONBOARDING_PROMPT_EXAMPLES_4),
              ],
            }),
          ],
        });
      }
      function p(e) {
        let {
            guild: t,
            prompt: s,
            promptIndex: l,
            singleColumn: n,
            errors: i,
          } = e,
          { dropdownsAllowed: r } = (0, E.useOnboardingDropdownExperiment)(
            t.id
          ),
          o = r
            ? h.DROPDOWN_MAX_NUM_OPTIONS
            : h.MULTIPLE_CHOICE_MAX_NUM_OPTIONS,
          {
            handleDragStart: d,
            handleDragReset: c,
            handleDragComplete: _,
          } = (0, u.default)(s.options, e =>
            (0, m.editGuildOnboardingPrompt)(t, s.id, { options: e })
          );
        return (0, a.jsxs)("div", {
          className: R.options,
          children: [
            s.options.map((e, r) =>
              (0, a.jsx)(
                g.default,
                {
                  guild: t,
                  prompt: s,
                  promptIndex: l,
                  singleColumn: n,
                  option: e,
                  onDragStart: d,
                  onDragComplete: _,
                  onDragReset: c,
                  hasError: null != i.optionErrors[r],
                },
                e.id
              )
            ),
            s.options.length < o
              ? (0, a.jsx)(g.AddOptionCard, {
                  guild: t,
                  prompt: s,
                  promptIndex: l,
                  singleColumn: n,
                })
              : null,
          ],
        });
      }
    },
    594523: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return g;
          },
          AddOptionCard: function () {
            return h;
          },
        }),
        s("222007");
      var a = s("37983");
      s("884691");
      var l = s("414456"),
        n = s.n(l),
        i = s("917351"),
        r = s.n(i),
        o = s("77078"),
        d = s("404118"),
        u = s("69678"),
        c = s("837648"),
        E = s("569912"),
        _ = s("205454"),
        I = s("673220"),
        T = s("351825"),
        f = s("330724"),
        S = s("653138"),
        m = s("782340"),
        N = s("105439");
      function g(e) {
        var t, l, i, d;
        let {
            guild: c,
            prompt: T,
            singleColumn: g,
            promptIndex: h,
            option: C,
            hasError: R,
            onDragStart: x,
            onDragComplete: L,
            onDragReset: O,
          } = e,
          p = null,
          A = r.findIndex(T.options, e => e.id === C.id),
          {
            drag: M,
            dragSourcePosition: D,
            drop: v,
            setIsDraggable: G,
          } = (0, u.default)({
            type: "ONBOARDING_PROMPT_OPTION_CARD-".concat(T.id),
            index: A,
            optionId: C.id,
            onDragStart: x,
            onDragComplete: L,
            onDragReset: O,
          }),
          { customEmoji: j, unicodeEmoji: U } = (0, E.default)(
            null === (t = C.emoji) || void 0 === t ? void 0 : t.id,
            null === (l = C.emoji) || void 0 === l ? void 0 : l.name
          ),
          P = (0, S.isEmojiEmpty)(C.emoji) || null != j || null != U;
        return (
          !P &&
            (p =
              m.default.Messages
                .GUILD_SETTINGS_ONBOARDING_PROMPT_INVALID_EMOJI),
          (0, a.jsxs)(o.Clickable, {
            className: n(N.optionCard, {
              [N.hasError]: R || null != p,
              [N.dropIndicatorBefore]: null != D && A < D,
              [N.dropIndicatorAfter]: null != D && A > D,
              [N.singleColumn]: g,
            }),
            onClick: () =>
              (0, o.openModalLazy)(async () => {
                let { default: e } = await s
                  .el("679844")
                  .then(s.bind(s, "679844"));
                return t =>
                  (0, a.jsx)(e, {
                    ...t,
                    guild: c,
                    prompt: T,
                    option: C,
                    index: h,
                    onSave: e => {
                      (0, f.editGuildOnboardingPrompt)(c, T.id, {
                        options: T.options.map(t => (t.id === C.id ? e : t)),
                      });
                    },
                    onDelete: () => {
                      (0, f.editGuildOnboardingPrompt)(c, T.id, {
                        options: T.options.filter(e => e.id !== C.id),
                      });
                    },
                  });
              }),
            onMouseEnter: () => G(!0),
            onMouseLeave: () => G(!1),
            innerRef: e => M(v(e)),
            children: [
              (0, a.jsx)("div", {
                className: N.dragContainer,
                children: (0, a.jsx)(I.default, { className: N.dragIcon }),
              }),
              (0, a.jsxs)("div", {
                className: N.optionCardRow,
                children: [
                  (0, a.jsx)("div", {
                    className: N.emoji,
                    children: (0, a.jsx)(_.default, {
                      emojiId:
                        null === (i = C.emoji) || void 0 === i ? void 0 : i.id,
                      emojiName:
                        null === (d = C.emoji) || void 0 === d
                          ? void 0
                          : d.name,
                      defaultComponent: null,
                    }),
                  }),
                  (0, a.jsxs)("div", {
                    className: N.text,
                    children: [
                      (0, a.jsx)(o.Text, {
                        variant: "text-md/medium",
                        color: "header-primary",
                        lineClamp: 1,
                        children: C.title,
                      }),
                      "" !== C.description &&
                        (0, a.jsx)(o.Text, {
                          className: N.description,
                          variant: "text-xs/normal",
                          color: "header-secondary",
                          children: C.description,
                        }),
                    ],
                  }),
                ],
              }),
              null != p &&
                (0, a.jsx)(o.Text, {
                  variant: "text-xs/medium",
                  color: "text-danger",
                  children: p,
                }),
            ],
          })
        );
      }
      function h(e) {
        let { guild: t, prompt: l, promptIndex: i, singleColumn: r } = e,
          { dropdownsAllowed: u } = (0, c.useOnboardingDropdownExperiment)(
            t.id
          ),
          E = () => {
            (0, o.openModalLazy)(async () => {
              let { default: e } = await s
                .el("679844")
                .then(s.bind(s, "679844"));
              return s =>
                (0, a.jsx)(e, {
                  ...s,
                  guild: t,
                  prompt: l,
                  onSave: e =>
                    (0, f.editGuildOnboardingPrompt)(t, l.id, {
                      options: [...l.options, e],
                    }),
                  onDelete: () => {},
                  index: i,
                });
            });
          };
        return (0, a.jsx)(o.Clickable, {
          className: n(N.optionCard, N.addOptionCard, {
            [N.addFirstOptionCard]: 0 === l.options.length,
            [N.singleColumn]: r,
          }),
          onClick: () => {
            u &&
            l.options.length + 1 === S.ONBOARDING_PROMPT_TYPE_SWITCH_THRESHOLD
              ? d.default.show({
                  title:
                    m.default.Messages.ONBOARDING_PROMPT_THRESHOLD_ALERT_TITLE,
                  body: m.default.Messages.ONBOARDING_PROMPT_THRESHOLD_ALERT_DESCRIPTION.format(
                    {
                      thresholdCount: S.ONBOARDING_PROMPT_TYPE_SWITCH_THRESHOLD,
                    }
                  ),
                  confirmText: m.default.Messages.OKAY,
                  cancelText: m.default.Messages.CANCEL,
                  onConfirm: E,
                })
              : E();
          },
          children: (0, a.jsxs)("div", {
            className: N.optionCardRow,
            children: [
              (0, a.jsx)(T.default, {
                className: N.plusIcon,
                width: 24,
                height: 24,
              }),
              (0, a.jsx)(o.Text, {
                variant: "text-md/medium",
                color: "header-primary",
                children: m.default.Messages.ONBOARDING_PROMPT_ADD_OPTION,
              }),
            ],
          }),
        });
      }
    },
    457461: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return h;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("65597"),
        o = s("77078"),
        d = s("404118"),
        u = s("69678"),
        c = s("372283"),
        E = s("305961"),
        _ = s("351825"),
        I = s("330724"),
        T = s("136278"),
        f = s("253308"),
        S = s("653138"),
        m = s("782340"),
        N = s("675264");
      function g(e) {
        let { guild: t, prejoinOnly: s, postjoinOnly: n } = e,
          d = (0, r.default)(
            [T.default],
            () => T.default.editedOnboardingPrompts
          ),
          c = d.filter(e => e.inOnboarding),
          E = c.length,
          {
            drag: f,
            drop: g,
            dragSourcePosition: h,
            setIsDraggable: C,
          } = (0, u.default)({
            type: "ONBOARDING_PROMPT_CARD",
            index: E,
            optionId: "separator",
            onDragStart: () => {},
            onDragComplete: () => {},
            onDragReset: () => {},
          }),
          R = l.useRef(null);
        return (
          l.useEffect(() => {
            C(!1);
          }, [C]),
          l.useEffect(() => {
            f(g(R));
          }, [f, g, R]),
          (0, a.jsxs)("div", {
            ref: R,
            className: i(N.separatorSection, {
              [N.dropIndicatorBefore]: null != h && E < h,
              [N.dropIndicatorAfter]: null != h && E > h,
            }),
            children: [
              !n && c.length < S.MAX_NUMBER_OF_ONBOARDING_PROMPTS_IN_ONBOARDING
                ? (0, a.jsxs)(o.Clickable, {
                    className: N.addPrompt,
                    onClick: () =>
                      (0, I.editGuildOnboardingPrompts)(
                        t,
                        [...d, (0, S.getEmptyPrompt)(!0)],
                        !1
                      ),
                    children: [
                      (0, a.jsx)(_.default, {
                        className: N.plusIcon,
                        width: 20,
                        height: 20,
                      }),
                      (0, a.jsx)(o.Text, {
                        variant: "text-md/medium",
                        color: "text-brand",
                        children:
                          m.default.Messages.ONBOARDING_PROMPT_ADD_PROMPT,
                      }),
                    ],
                  })
                : null,
              s
                ? null
                : (0, a.jsxs)(a.Fragment, {
                    children: [
                      (0, a.jsx)("div", { className: N.divider }),
                      (0, a.jsx)(o.Heading, {
                        variant: "heading-md/bold",
                        children:
                          m.default.Messages
                            .ONBOARDING_QUESTIONS_POST_JOIN_HEADER,
                      }),
                      (0, a.jsx)(o.Text, {
                        variant: "text-sm/normal",
                        color: "header-secondary",
                        className: N.subtitle,
                        children:
                          m.default.Messages
                            .ONBOARDING_QUESTIONS_POST_JOIN_SUBHEADER,
                      }),
                    ],
                  }),
            ],
          })
        );
      }
      function h(e) {
        let {
            guildId: t,
            prejoinOnly: s,
            postjoinOnly: l,
            includeCount: n,
            singleColumn: i,
          } = e,
          u = (0, r.default)([E.default], () => E.default.getGuild(t)),
          h = (0, r.default)(
            [T.default],
            () => T.default.editedOnboardingPrompts
          ),
          C = h.filter(e => e.inOnboarding),
          R = h.filter(e => !0 !== e.inOnboarding),
          x = [
            ...C.map(e => ({ id: e.id, data: e })),
            { id: "separator", data: (0, S.getDefaultPrompt)() },
            ...R.map(e => ({ id: e.id, data: e })),
          ],
          {
            handleDragStart: L,
            handleDragReset: O,
            handleDragComplete: p,
          } = (0, c.default)(x, e => {
            let t = e.findIndex(e => "separator" === e.id),
              s = e.slice(0, t).map(e => ({ ...e.data, inOnboarding: !0 })),
              a = e
                .slice(t + 1)
                .map(e => ({ ...e.data, inOnboarding: !1, required: !1 }));
            if (s.length > S.MAX_NUMBER_OF_ONBOARDING_PROMPTS_IN_ONBOARDING) {
              d.default.show({
                title: m.default.Messages.ONBOARDING_QUESTIONS_CANNOT_MOVE,
                body: m.default.Messages.ONBOARDING_QUESTIONS_SAVE_TOO_MANY_PROMPTS_IN_ONBOARDING.format(
                  {
                    numQuestions:
                      S.MAX_NUMBER_OF_ONBOARDING_PROMPTS_IN_ONBOARDING,
                  }
                ),
              });
              return;
            }
            (0, I.editGuildOnboardingPrompts)(u, [...s, ...a]);
          });
        return null == u
          ? null
          : (0, a.jsxs)(a.Fragment, {
              children: [
                l
                  ? null
                  : (0, a.jsxs)(a.Fragment, {
                      children: [
                        s
                          ? null
                          : (0, a.jsxs)("div", {
                              children: [
                                (0, a.jsx)(o.Heading, {
                                  variant: "heading-md/bold",
                                  children:
                                    m.default.Messages
                                      .ONBOARDING_QUESTIONS_PRE_JOIN_HEADER,
                                }),
                                (0, a.jsx)(o.Text, {
                                  variant: "text-sm/normal",
                                  color: "header-secondary",
                                  className: N.subtitle,
                                  children:
                                    m.default.Messages
                                      .ONBOARDING_QUESTIONS_PRE_JOIN_SUBHEADER,
                                }),
                              ],
                            }),
                        C.map((e, t) =>
                          (0, a.jsx)(
                            f.default,
                            {
                              guild: u,
                              prompt: e,
                              disableAutofocus: s,
                              includeCount: n,
                              singleColumn: i,
                              promptIndex: t,
                              dragIndex: t,
                              onPromptDragStart: L,
                              onPromptDragReset: O,
                              onPromptDragComplete: p,
                            },
                            e.id
                          )
                        ),
                      ],
                    }),
                (0, a.jsx)(g, { guild: u, prejoinOnly: s, postjoinOnly: l }),
                s
                  ? null
                  : (0, a.jsxs)(a.Fragment, {
                      children: [
                        R.map((e, t) =>
                          (0, a.jsx)(
                            f.default,
                            {
                              guild: u,
                              prompt: e,
                              promptIndex: t + C.length,
                              dragIndex: t + C.length + 1,
                              onPromptDragStart: L,
                              onPromptDragReset: O,
                              onPromptDragComplete: p,
                            },
                            e.id
                          )
                        ),
                        h.length < S.MAX_NUM_PROMPTS
                          ? (0, a.jsxs)(o.Clickable, {
                              className: N.addPrompt,
                              onClick: () =>
                                (0, I.editGuildOnboardingPrompts)(
                                  u,
                                  [...h, (0, S.getEmptyPrompt)(!1)],
                                  !1
                                ),
                              children: [
                                (0, a.jsx)(_.default, {
                                  className: N.plusIcon,
                                  width: 20,
                                  height: 20,
                                }),
                                (0, a.jsx)(o.Text, {
                                  variant: "text-md/medium",
                                  color: "text-brand",
                                  children:
                                    m.default.Messages
                                      .ONBOARDING_PROMPT_ADD_PROMPT,
                                }),
                              ],
                            })
                          : null,
                      ],
                    }),
              ],
            });
      }
    },
    671932: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useOnboardingCanBeEnabled: function () {
            return L;
          },
          DefaultChannelsOverviewItem: function () {
            return O;
          },
          CustomizationQuestionsOverviewItem: function () {
            return p;
          },
          HomeSettingsOverviewItem: function () {
            return A;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("446674"),
        i = s("77078"),
        r = s("863636"),
        o = s("380710"),
        d = s("129092"),
        u = s("233706"),
        c = s("538137"),
        E = s("593195"),
        _ = s("36694"),
        I = s("564875"),
        T = s("620193"),
        f = s("423487"),
        S = s("435076"),
        m = s("642807"),
        N = s("682327"),
        g = s("653138"),
        h = s("782340"),
        C = s("749191");
      function R(e) {
        let t,
          {
            title: s,
            description: l,
            icon: n,
            hasStarted: r,
            status: o,
            onEdit: d,
            extra: u,
          } = e;
        switch (o) {
          case "good":
            t = (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsx)(_.default, {
                  width: 16,
                  height: 16,
                  className: C.checkmark,
                }),
                (0, a.jsx)(i.Text, {
                  variant: "text-xs/semibold",
                  color: "status-positive",
                  className: C.statusText,
                  children: h.default.Messages.DEFAULT_CHANNELS_GOOD,
                }),
              ],
            });
            break;
          case "warning":
            t = (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsx)(f.default, {
                  width: 16,
                  height: 16,
                  className: C.warning,
                }),
                (0, a.jsx)(i.Text, {
                  variant: "text-xs/semibold",
                  color: "status-warning",
                  className: C.statusText,
                  children: h.default.Messages.ONBOARDING_PROMPTS_WARNING,
                }),
              ],
            });
            break;
          case "required":
            t = (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsx)(f.default, {
                  width: 16,
                  height: 16,
                  className: C.danger,
                }),
                (0, a.jsx)(i.Text, {
                  variant: "text-xs/semibold",
                  color: "status-danger",
                  className: C.statusText,
                  children: h.default.Messages.REQUIRED,
                }),
              ],
            });
        }
        return (0, a.jsxs)("div", {
          className: C.onboardingStepContainer,
          children: [
            (0, a.jsxs)("div", {
              className: C.leftContainer,
              children: [
                (0, a.jsx)("div", { className: C.iconContainer, children: n }),
                (0, a.jsxs)("div", {
                  className: C.onboardingStepText,
                  children: [
                    (0, a.jsx)(i.Heading, {
                      variant: "heading-md/semibold",
                      children: s,
                    }),
                    (0, a.jsx)(i.Text, {
                      variant: "text-xs/normal",
                      color:
                        r && "required" === o ? "status-danger" : "text-normal",
                      children: l,
                    }),
                  ],
                }),
              ],
            }),
            (0, a.jsxs)("div", {
              className: C.rightContainer,
              children: [
                t,
                u,
                r
                  ? (0, a.jsx)(i.Button, {
                      className: C.cta,
                      size: i.Button.Sizes.SMALL,
                      color: i.Button.Colors.PRIMARY,
                      look: i.Button.Looks.OUTLINED,
                      borderColor: i.Button.BorderColors.PRIMARY,
                      onClick: d,
                      children: h.default.Messages.EDIT,
                    })
                  : (0, a.jsxs)(i.Button, {
                      className: C.cta,
                      innerClassName: C.ctaInner,
                      size: i.Button.Sizes.SMALL,
                      color: i.Button.Colors.PRIMARY,
                      onClick: d,
                      children: [
                        h.default.Messages.GUILD_ONBOARDING_SETUP_REVIEW_SET_UP,
                        (0, a.jsx)(c.default, { width: 12, height: 12 }),
                      ],
                    }),
              ],
            }),
          ],
        });
      }
      function x(e) {
        let t = (0, n.useStateFromStoresArray)([r.default], () =>
            r.default.getDefaultChannelIds(e)
          ),
          [s, a] = (0, o.useChattableDefaultChannels)(e, t);
        return (
          a.length >= g.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING &&
          s.length >= g.NUM_DEFAULT_CHATTABLE_CHANNELS_MIN
        );
      }
      function L(e) {
        let t = x(e),
          s = (0, N.useAdvancedModeReady)(e);
        return t || s;
      }
      function O(e) {
        var t, s, l, i;
        let { guildId: d, onEdit: u, disableGoodStatus: c } = e,
          _ = (0, n.useStateFromStoresArray)([r.default], () =>
            r.default.getDefaultChannelIds(d)
          ),
          I = (0, n.useStateFromStores)(
            [r.default],
            () =>
              (0, o.getMinimumSetOfDefaultChannelIds)(
                d,
                r.default.getDefaultChannelIds(d),
                r.default.getOnboardingPrompts(d)
              ).length
          ),
          [, T] = (0, o.useChattableDefaultChannels)(d, _),
          f = T.length,
          S = x(d),
          m = (0, N.useAdvancedModeReady)(d),
          L = (0, n.useStateFromStores)([r.default], () =>
            r.default.isAdvancedMode(d)
          );
        let O =
          ((t = S),
          (s = L),
          (l = f),
          (i = I),
          s
            ? h.default.Messages.GUILD_ONBOARDING_SETUP_REVIEW_NUM_DEFAULT_CHANNELS_ADVANCED.format(
                { numDefaultChannels: l, numFromQuestions: i - l }
              )
            : t
              ? h.default.Messages.GUILD_ONBOARDING_SETUP_REVIEW_NUM_DEFAULT_CHANNELS.format(
                  { numDefaultChannels: l }
                )
              : h.default.Messages.GUILD_ONBOARDING_SETUP_REVIEW_NOT_ENOUGH_DEFAULT_CHANNELS.format(
                  {
                    numDefaultChannels:
                      g.MIN_NUMBER_OF_DEFAULT_CHANNELS_FOR_ONBOARDING,
                    numChattableChannels: g.NUM_DEFAULT_CHATTABLE_CHANNELS_MIN,
                  }
                ));
        return (0, a.jsx)(R, {
          title: L
            ? h.default.Messages.GUILD_SETTINGS_DEFAULT_CHANNELS_ADVANCED
            : h.default.Messages.GUILD_SETTINGS_DEFAULT_CHANNELS,
          description: O,
          icon: (0, a.jsx)(E.default, {
            width: 24,
            height: 24,
            className: C.channelIcon,
          }),
          hasStarted: f > 0 || L,
          status: S || m ? (c ? "none" : "good") : "required",
          onEdit: u,
        });
      }
      function p(e) {
        let { guildId: t, onEdit: s, disableGoodStatus: l } = e,
          i = (0, n.useStateFromStoresArray)([r.default], () =>
            r.default.getDefaultChannelIds(t)
          ),
          d = (0, n.useStateFromStoresArray)([r.default], () =>
            r.default.getOnboardingPrompts(t)
          ),
          u = d.length,
          [c, E] = (0, o.useChannelCoverageForOnboarding)(t, d, i),
          _ = c.length,
          T = c.length + E.length,
          f = (_ / T) * 100,
          S = (0, n.useStateFromStores)([r.default], () =>
            r.default.isAdvancedMode(t)
          ),
          m = u > 0,
          N = "none";
        return (
          m && (f >= 85 && !l ? (N = "good") : f < 85 && (N = "warning")),
          (0, a.jsx)(R, {
            title: S
              ? h.default.Messages.ONBOARDING_PROMPT_SETTINGS_HEADER_ADVANCED
              : h.default.Messages.ONBOARDING_PROMPT_SETTINGS_HEADER,
            description:
              h.default.Messages.ONBOARDING_PROMPT_CHANNEL_COVERAGE.format({
                numChannels: _,
                numTotalChannels: T,
                channelsHook: (e, t) =>
                  (0, a.jsx)(
                    "span",
                    {
                      style: {
                        color:
                          f > 85
                            ? "var(--header-primary)"
                            : "var(--status-warning)",
                      },
                      children: e,
                    },
                    t
                  ),
              }),
            icon: (0, a.jsx)(I.default, {
              width: 24,
              height: 24,
              className: C.channelIcon,
            }),
            hasStarted: m,
            status: N,
            onEdit: s,
          })
        );
      }
      function A(e) {
        let { guildId: t, onEdit: s, disableGoodStatus: o } = e,
          c = (0, n.useStateFromStores)([m.default], () =>
            m.default.getSettings()
          ),
          E = (0, n.useStateFromStores)([r.default], () =>
            r.default.getEnabled(t)
          ),
          { serverGuideOptional: _ } = (0,
          u.useOptionalOnboardingHomeAdminExperiment)(t),
          I = (0, d.isSettingsValid)(c),
          f = c.enabled,
          N = l.useCallback(() => {
            (0, S.enableHomeSettings)(t, !f);
          }, [t, f]),
          g = !(0, d.isSettingsEmpty)(c),
          x = "none";
        g && (I && !o ? (x = "good") : !I && (x = "required"));
        let L =
          h.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_REVIEW_DESCRIPTION;
        I
          ? !g &&
            (L =
              h.default.Messages
                .GUILD_SETTINGS_ONBOARDING_HOME_REVIEW_NOT_STARTED_DESCRIPTION)
          : (L =
              h.default.Messages
                .GUILD_SETTINGS_ONBOARDING_HOME_REVIEW_INVALID_DESCRIPTION);
        let O = null;
        return (
          g &&
            _ &&
            E &&
            (O = (0, a.jsx)(i.Switch, {
              className: C.inlineSwitch,
              checked: f,
              onChange: N,
              disabled: !I,
            })),
          (0, a.jsx)(R, {
            title:
              h.default.Messages.GUILD_SETTINGS_ONBOARDING_HOME_REVIEW_TITLE,
            description: L,
            icon: (0, a.jsx)(T.default, {
              width: 24,
              height: 24,
              className: C.channelIcon,
            }),
            hasStarted: g,
            status: x,
            onEdit: s,
            extra: O,
          })
        );
      }
    },
    316497: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          DEFAULT_HEADER_HEIGHT_PX: function () {
            return u;
          },
        });
      var a,
        l,
        n = s("316693"),
        i = s("669491"),
        r = s("991170"),
        o = s("49111"),
        d = s("782340");
      let u = 371;
      ((a = l || (l = {}))[(a.COSMETIC = 0)] = "COSMETIC"),
        (a[(a.MEMBER = 1)] = "MEMBER"),
        (a[(a.MODERATOR = 2)] = "MODERATOR"),
        (a[(a.MANAGER = 3)] = "MANAGER");
      let c = r.default.DEFAULT;
      n.default.remove(c, o.Permissions.MENTION_EVERYONE);
      let E = n.default.combine(
          c,
          o.Permissions.VIEW_AUDIT_LOG,
          o.Permissions.MANAGE_NICKNAMES,
          o.Permissions.KICK_MEMBERS,
          o.Permissions.BAN_MEMBERS,
          o.Permissions.MANAGE_MESSAGES,
          o.Permissions.MUTE_MEMBERS,
          o.Permissions.DEAFEN_MEMBERS,
          o.Permissions.MOVE_MEMBERS,
          o.Permissions.PRIORITY_SPEAKER,
          o.Permissions.MODERATE_MEMBERS
        ),
        _ = n.default.combine(
          E,
          o.Permissions.MANAGE_CHANNELS,
          o.Permissions.MANAGE_THREADS,
          o.Permissions.MANAGE_ROLES,
          o.Permissions.MANAGE_GUILD_EXPRESSIONS,
          o.Permissions.MANAGE_GUILD,
          o.Permissions.MANAGE_WEBHOOKS,
          o.Permissions.SEND_TTS_MESSAGES
        );
      n.default.add(_, o.Permissions.VIEW_GUILD_ANALYTICS),
        i.default.unsafe_rawColors.BRAND_500.css,
        r.default.NONE,
        i.default.unsafe_rawColors.GREEN_360.css,
        i.default.unsafe_rawColors.YELLOW_300.css,
        i.default.unsafe_rawColors.RED_400.css,
        () =>
          d.default.Messages.ROLE_PERMISSION_TEMPLATE_MANAGER_CONTENT_PREFACE;
    },
    986654: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          ADD_MEMBER_QUERY_LIMIT: function () {
            return f;
          },
          MAX_PREFETCH_MEMBER_COUNT: function () {
            return S;
          },
          useGuildMembers: function () {
            return m;
          },
          useGuildRoleMembers: function () {
            return N;
          },
          useQueryGuildMembers: function () {
            return g;
          },
          filterFullMembersByQuery: function () {
            return h;
          },
          getSectionAnalyticsName: function () {
            return C;
          },
          filterRole: function () {
            return R;
          },
        }),
        s("808653"),
        s("424973"),
        s("222007");
      var a = s("884691"),
        l = s("448105"),
        n = s.n(l),
        i = s("446674"),
        r = s("26989"),
        o = s("697218"),
        d = s("599110"),
        u = s("449008"),
        c = s("651879"),
        E = s("158998"),
        _ = s("895026"),
        I = s("53948"),
        T = s("49111");
      let f = 50,
        S = 1e3;
      function m(e, t) {
        let s = (0, i.useStateFromStoresArray)(
            [r.default],
            () => {
              let s = r.default.getMembers(e);
              return null == t ? s : s.filter(t);
            },
            [e, t]
          ),
          l = (0, i.useStateFromStoresObject)(
            [o.default],
            () =>
              s.reduce((e, t) => {
                let s = o.default.getUser(t.userId);
                return null == s ? e : ((e[t.userId] = s), e);
              }, {}),
            [s]
          );
        return a.useMemo(() => {
          let t = [];
          for (let n of s) {
            var a;
            let s = l[n.userId];
            null != s &&
              t.push({
                name:
                  null !== (a = n.nick) && void 0 !== a
                    ? a
                    : E.default.getName(s),
                userTag: E.default.getUserTag(s),
                id: n.userId,
                avatarSource: s.getAvatarSource(e),
                avatarURL: s.getAvatarURL(e, 80),
                bot: s.bot,
                verifiedBot: s.isVerifiedBot(),
                roles: n.roles,
                key: n.userId,
                user: s,
              });
          }
          return t;
        }, [s, l, e]);
      }
      function N(e, t, s) {
        a.useEffect(() => {
          (0, _.requestMembersForRole)(e, t).catch(s);
        }, [e, t]);
        let l = a.useCallback(e => e.roles.includes(t), [t]);
        return m(e, l);
      }
      function g(e, t) {
        let s = a.useRef(!1);
        a.useEffect(() => {
          c.default.requestMembers(e, t, 200),
            "" !== t &&
              !s.current &&
              (d.default.track(T.AnalyticEvents.SEARCH_STARTED, {
                search_type: "Role Members",
              }),
              (s.current = !0));
        }, [e, t]);
      }
      function h(e, t) {
        let s = e.trim().toLowerCase();
        return (
          t.id === s ||
          n(s, t.name.toLowerCase()) ||
          n(s, t.userTag.toLowerCase())
        );
      }
      function C(e) {
        switch (e) {
          case I.GuildSettingsRoleEditSections.MEMBERS:
            return "Members";
          case I.GuildSettingsRoleEditSections.PERMISSIONS:
            return "Permissions";
          case I.GuildSettingsRoleEditSections.DISPLAY:
            return "Role Settings";
          case I.GuildSettingsRoleEditSections.VERIFICATIONS:
            return "Connections";
          default:
            (0, u.assertNever)(e);
        }
      }
      function R(e, t) {
        return "" === t || e.name.toLowerCase().includes(t.toLowerCase());
      }
    },
    482763: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return p;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("627445"),
        i = s.n(n),
        r = s("446674"),
        o = s("77078"),
        d = s("716241"),
        u = s("454273"),
        c = s("70919"),
        E = s("957255"),
        _ = s("599110"),
        I = s("449008"),
        T = s("36402"),
        f = s("531493"),
        S = s("900938"),
        m = s("986654"),
        N = s("462752"),
        g = s("505002"),
        h = s("893448"),
        C = s("376252"),
        R = s("728955"),
        x = s("53948"),
        L = s("49111"),
        O = s("786920");
      function p(e) {
        let t,
          {
            editRoleId: s,
            setEditRoleId: n,
            selectedSection: p,
            setSelectedSection: A,
          } = e,
          M = (0, r.useStateFromStores)([f.default], () => f.default.guild, []);
        i(null != M, "guildId cannot be null here");
        let { role: D, permissionSearchQuery: v } = (0,
        r.useStateFromStoresObject)(
          [f.default],
          () => ({
            role: f.default.getRole(s),
            permissionSearchQuery: f.default.getPermissionSearchQuery(),
          }),
          [s]
        );
        l.useEffect(() => {
          null == D && n(null);
        }, [D, n]);
        let G = (0, r.useStateFromStores)(
            [E.default],
            () => E.default.getHighestRole(M),
            [M]
          ),
          j = (0, r.useStateFromStores)(
            [E.default],
            () => !E.default.isRoleHigher(M, G, D)
          ),
          U = l.useRef(null),
          P = (0, r.useStateFromStores)(
            [S.default],
            () => S.default.getProps().integrations
          );
        if (
          (l.useEffect(() => {
            var e, t;
            let a = (0, m.getSectionAnalyticsName)(p),
              l =
                null !==
                  (t =
                    null === (e = T.default.getRoleMemberCount(M.id)) ||
                    void 0 === e
                      ? void 0
                      : e[s]) && void 0 !== t
                  ? t
                  : 0;
            _.default.track(L.AnalyticEvents.ROLE_PAGE_VIEWED, {
              tab_opened: a,
              is_everyone: (0, u.isEveryoneRoleId)(M.id, s),
              role_id: s,
              role_mentionable: null == D ? void 0 : D.mentionable,
              role_hoist: null == D ? void 0 : D.hoist,
              role_permissions: null == D ? void 0 : D.permissions.toString(),
              role_num_members: l,
              ...(0, d.collectGuildAnalyticsMetadata)(M.id),
            });
          }, [p, M.id, null == D ? void 0 : D.id]),
          l.useEffect(() => {
            (null == D ? void 0 : D.id) != null &&
              (0, c.fetchRoleConnectionsConfiguration)(M.id, D.id);
          }, [M.id, null == D ? void 0 : D.id]),
          null == D)
        )
          return null;
        switch (p) {
          case x.GuildSettingsRoleEditSections.DISPLAY:
            t = (0, a.jsx)(g.default, {
              guild: M,
              role: D,
              locked: j,
              highestRole: G,
              setSelectedSection: A,
            });
            break;
          case x.GuildSettingsRoleEditSections.PERMISSIONS:
            t = (0, a.jsx)(C.default, {
              guild: M,
              role: D,
              locked: j,
              setSelectedSection: A,
              initialSearchQuery: v,
            });
            break;
          case x.GuildSettingsRoleEditSections.VERIFICATIONS:
            t = (0, a.jsx)(N.default, {
              guild: M,
              role: D,
              locked: j,
              setSelectedSection: A,
              integrations: null != P ? P : void 0,
            });
            break;
          case x.GuildSettingsRoleEditSections.MEMBERS:
            t = (0, a.jsx)(h.default, {
              guild: M,
              role: D,
              locked: j,
              setSelectedSection: A,
            });
            break;
          default:
            (0, I.assertNever)(p);
        }
        return (0, a.jsxs)(o.FormSection, {
          className: O.page,
          children: [
            (0, a.jsx)(R.default, {
              guild: M,
              currentRoleId: s,
              setCurrentRoleId: n,
              setSelectedSection: A,
            }),
            (0, a.jsx)("div", {
              className: O.contentContainer,
              ref: U,
              children: (0, a.jsx)(o.FocusRingScope, {
                containerRef: U,
                children: t,
              }),
            }),
          ],
        });
      }
    },
    126383: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return d;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("461380"),
        i = s("155207"),
        r = s("782340"),
        o = s("553044");
      function d(e) {
        let { role: t, onClick: s } = e;
        return (0, a.jsxs)(l.Clickable, {
          className: o.container,
          onClick: s,
          children: [
            (0, a.jsx)("div", {
              className: o.icon,
              children: (0, a.jsx)(i.default, { width: 20, height: 20 }),
            }),
            (0, a.jsxs)("div", {
              className: o.description,
              children: [
                (0, a.jsx)(l.Text, {
                  className: o.label,
                  color: "none",
                  variant: "text-md/bold",
                  children: r.default.Messages.ROLE_EVERYONE_LABEL,
                }),
                (0, a.jsxs)(l.Text, {
                  color: "none",
                  variant: "text-xs/normal",
                  children: [
                    t.name,
                    " • ",
                    r.default.Messages.ROLE_EVERYONE_DESCRIPTION,
                  ],
                }),
              ],
            }),
            (0, a.jsx)(n.default, {
              className: o.arrow,
              direction: n.default.Directions.RIGHT,
            }),
          ],
        });
      }
    },
    620296: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return N;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("446674"),
        o = s("77078"),
        d = s("851387"),
        u = s("534291"),
        c = s("206230"),
        E = s("126383"),
        _ = s("49111"),
        I = s("782340"),
        T = s("232579");
      function f(e) {
        let { color: t, children: s } = e;
        return (0, a.jsxs)("div", {
          className: T.roleTag,
          children: [
            (0, a.jsx)(o.RoleCircle, { className: T.roleDot, color: t }),
            (0, a.jsx)("span", { className: T.roleText, children: s }),
          ],
        });
      }
      function S(e) {
        let { guild: t, display: s } = e;
        return (0, a.jsxs)("div", {
          className: i(T.banner, t.backgroundClass, { [T.bannerOut]: !s }),
          children: [
            (0, a.jsx)("div", {
              className: T.roles,
              children: t.roles.map((e, t) =>
                (0, a.jsx)(
                  "div",
                  {
                    className: T.rolesRow,
                    children: e.map(e =>
                      (0, a.jsx)(
                        f,
                        { color: e.color, children: e.name },
                        e.name
                      )
                    ),
                  },
                  t
                )
              ),
            }),
            (0, a.jsx)("div", {
              className: T.profileCard,
              children: (0, a.jsxs)("div", {
                className: T.avatarContainer,
                children: [
                  (0, a.jsx)(o.Avatar, {
                    size: o.AvatarSizes.SIZE_56,
                    "aria-hidden": !0,
                    status: _.StatusTypes.ONLINE,
                    src: t.avatar,
                  }),
                  (0, a.jsx)(o.Text, {
                    color: "header-primary",
                    variant: "text-md/bold",
                    className: T.avatarName,
                    children: t.username,
                  }),
                ],
              }),
            }),
          ],
        });
      }
      function m() {
        let e = (0, r.useStateFromStores)(
            [c.default],
            () => c.default.useReducedMotion
          ),
          t = l.useMemo(
            () => [
              {
                backgroundClass: T.bannerClubs,
                username: "Wumpus#0000",
                avatar: s("896122"),
                roles: [
                  [
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_CLUBS_ROLE_1,
                      color: "#7e00fc",
                    },
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_CLUBS_ROLE_2,
                      color: "#faa61a",
                    },
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_CLUBS_ROLE_3,
                      color: "#f06ea8",
                    },
                  ],
                  [
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_CLUBS_ROLE_4,
                      color: "#45ddc0",
                    },
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_CLUBS_ROLE_5,
                      color: "#00b0f4",
                    },
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_CLUBS_ROLE_6,
                      color: "#ba1616",
                    },
                  ],
                ],
              },
              {
                backgroundClass: T.bannerGaming,
                username: "Graggle#0000",
                avatar: s("352683"),
                roles: [
                  [
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_GAMING_ROLE_1,
                      color: "#4a76e6",
                    },
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_GAMING_ROLE_2,
                      color: "#ad87ff",
                    },
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_GAMING_ROLE_3,
                      color: "#6defcf",
                    },
                  ],
                  [
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_GAMING_ROLE_4,
                      color: "#ff73fa",
                    },
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_GAMING_ROLE_5,
                      color: "#3ba55c",
                    },
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_GAMING_ROLE_6,
                      color: "#ff1b66",
                    },
                  ],
                ],
              },
              {
                backgroundClass: T.bannerHobbies,
                username: "Mallow#0000",
                avatar: s("380476"),
                roles: [
                  [
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_HOBBIES_ROLE_1,
                      color: "#20d6b8",
                    },
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_HOBBIES_ROLE_2,
                      color: "#236136",
                    },
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_HOBBIES_ROLE_3,
                      color: "#ff9a15",
                    },
                  ],
                  [
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_HOBBIES_ROLE_4,
                      color: "#ff78b9",
                    },
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_HOBBIES_ROLE_5,
                      color: "#00b0f4",
                    },
                    {
                      name: I.default.Messages.ROLE_EMPTY_STATE_HOBBIES_ROLE_6,
                      color: "#6f52e4",
                    },
                  ],
                ],
              },
            ],
            []
          ),
          [n, i] = l.useState(0);
        return (
          l.useEffect(() => {
            if (e) return;
            let s = setTimeout(() => i((n + 1) % t.length), 6332);
            return () => clearTimeout(s);
          }, [n]),
          (0, a.jsx)("div", {
            className: T.bannerContainer,
            "aria-hidden": !0,
            children: t.map((e, t) =>
              (0, a.jsx)(S, { guild: e, display: t === n }, t)
            ),
          })
        );
      }
      function N(e) {
        let { guild: t, everyoneRole: s, setEditRoleId: n } = e,
          [i, r] = l.useState(!1),
          c = async () => {
            r(!0), await d.default.createRole(t.id), r(!1);
          },
          _ = l.useCallback(() => {
            n(s.id);
          }, [n, s.id]);
        return (0, a.jsx)(u.DefaultCustomContentScroller, {
          children: (0, a.jsxs)(o.FormSection, {
            className: T.section,
            title: I.default.Messages.ROLES,
            tag: o.FormTitleTags.H2,
            children: [
              (0, a.jsxs)("div", {
                className: T.container,
                children: [
                  (0, a.jsx)(m, {}),
                  (0, a.jsx)(o.Heading, {
                    variant: "heading-xl/semibold",
                    children: I.default.Messages.ROLE_OVERVIEW_EMPTY_SUBHEADER,
                  }),
                  (0, a.jsx)(o.Text, {
                    color: "header-secondary",
                    variant: "text-md/normal",
                    className: T.introBody,
                    children: I.default.Messages.ROLE_OVERVIEW_DESCRIPTION,
                  }),
                  (0, a.jsx)(o.Button, {
                    className: T.button,
                    size: o.Button.Sizes.MEDIUM,
                    onClick: c,
                    submitting: i,
                    children: I.default.Messages.ROLE_CREATE_CTA,
                  }),
                ],
              }),
              (0, a.jsx)(o.FormDivider, { className: T.divider }),
              (0, a.jsx)(E.default, { role: s, onClick: _ }),
            ],
          }),
        });
      }
    },
    542578: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return H;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("476042"),
        o = s("509043"),
        d = s("446674"),
        u = s("77078"),
        c = s("272030"),
        E = s("534291"),
        _ = s("339023"),
        I = s("180243"),
        T = s("726527"),
        f = s("405645"),
        S = s("915675"),
        m = s("957255"),
        N = s("211248"),
        g = s("673220"),
        h = s("462579"),
        C = s("433487"),
        R = s("987772"),
        x = s("155207"),
        L = s("781896"),
        O = s("682344"),
        p = s("483093"),
        A = s("599110"),
        M = s("895026"),
        D = s("36402"),
        v = s("986654"),
        G = s("476324"),
        j = s("983521"),
        U = s("53948"),
        P = s("49111"),
        b = s("782340"),
        B = s("693862"),
        y = s("519078");
      let F = "DRAGGABLE_ROLE";
      function H(e) {
        let {
            setEditRoleId: t,
            guild: s,
            everyoneRole: n,
            otherRoles: i,
            setSelectedSection: r,
            renderHeader: o,
            headerHeight: u,
            query: c,
          } = e,
          _ = (0, d.useStateFromStores)(
            [D.default],
            () => D.default.getRoleMemberCount(s.id),
            [s.id]
          ),
          I = (0, d.useStateFromStores)(
            [m.default],
            () => m.default.getHighestRole(s),
            [s]
          ),
          T = c.trim();
        l.useEffect(() => {
          (0, M.fetchMemberCounts)(s.id);
        }, [s.id]);
        let f = l.useRef(!1);
        l.useEffect(() => {
          !f.current &&
            "" !== c.trimStart() &&
            (A.default.track(P.AnalyticEvents.SEARCH_STARTED, {
              search_type: "Roles",
            }),
            (f.current = !0));
        }, [c]);
        let S = l.useMemo(() => i.filter(e => (0, v.filterRole)(e, T)), [i, T]),
          N = l.useMemo(() => [...i, n], [i, n]),
          {
            draggingId: g,
            handleDragStart: h,
            handleDragReset: C,
            handleDragComplete: R,
          } = (0, j.default)(N),
          x = l.useCallback(
            e => {
              var l;
              let { row: n } = e;
              if (0 === S.length) return (0, a.jsx)(k, {}, "empty-role");
              let o = S[n];
              return (0, a.jsx)(
                w,
                {
                  role: o,
                  guild: s,
                  highestRole: I,
                  currentPosition: n,
                  memberCount:
                    null !== (l = null == _ ? void 0 : _[o.id]) && void 0 !== l
                      ? l
                      : 0,
                  onDragStart: h,
                  onDragReset: C,
                  onDragComplete: R,
                  disableHover: null != g,
                  disableDrag: i.length !== S.length,
                  setEditRoleId: t,
                  setSelectedSection: r,
                },
                o.id
              );
            },
            [S, s, I, _, h, C, R, g, i, t, r]
          );
        return (0, a.jsx)(E.ListContentScroller, {
          sections: [Math.max(S.length, 1)],
          sectionHeight: u,
          renderSection: o,
          rowHeight: 61,
          renderRow: x,
        });
      }
      function k() {
        return (0, a.jsxs)("div", {
          className: B.emptyRoles,
          children: [
            (0, a.jsx)("div", { className: y.dragSpacing }),
            (0, a.jsx)(x.default, {}),
            (0, a.jsx)(u.Text, {
              className: B.emptyRolesText,
              variant: "text-md/semibold",
              color: "text-muted",
              children: b.default.Messages.ROLE_LIST_EMPTY,
            }),
          ],
        });
      }
      function w(e) {
        var t, n, o;
        let {
            role: d,
            guild: E,
            highestRole: f,
            currentPosition: m,
            memberCount: x,
            onDragStart: O,
            onDragReset: p,
            onDragComplete: A,
            disableHover: M,
            disableDrag: D,
            setEditRoleId: v,
            setSelectedSection: j,
          } = e,
          P = (0, G.useLockTooltip)(E, f, d),
          H = null != P,
          [k, w] = l.useState(!1),
          Y = l.useMemo(
            () => ({
              type: F,
              item: () => (O(d.id), { id: d.id, position: m }),
              canDrag: () => k && !H,
              collect: e => ({ isDragging: e.isDragging() }),
              end: (e, t) => {
                let s = t.getDropResult();
                if (null == s) {
                  p();
                  return;
                }
                A(s.roleId);
              },
            }),
            [d, O, p, A, H, k]
          ),
          [{ isDragging: W }, z] = (0, r.useDrag)(Y),
          K = l.useMemo(
            () => ({
              accept: F,
              canDrop: () => !H,
              collect: e => {
                let t = e.getItem();
                return null != t && e.isOver() && e.canDrop()
                  ? { dragSourcePosition: t.position }
                  : { dragSourcePosition: null };
              },
              drop: () => ({ roleId: d.id }),
            }),
            [H, d]
          ),
          [{ dragSourcePosition: Z }, X] = (0, r.useDrop)(K),
          Q = l.useCallback(
            e => {
              (0, c.openContextMenuLazy)(e, async () => {
                let { default: e } = await s
                  .el("726527")
                  .then(s.bind(s, "726527"));
                return t => (0, a.jsx)(e, { ...t, role: d, guild: E });
              });
            },
            [E, d]
          ),
          J = (0, T.useHasGuildRoleItems)(E, d);
        if (W)
          return (0, a.jsx)("div", {
            ref: z,
            className: i(B.roleRow, B.roleRowDragging),
          });
        function q() {
          v(d.id);
        }
        function $() {
          q(), j(U.GuildSettingsRoleEditSections.MEMBERS);
        }
        return (0, a.jsxs)(u.Clickable, {
          className: i(B.roleRow, {
            [B.roleRowDisableHover]: M,
            [B.containerDragBefore]: null != Z && m < Z,
            [B.containerDragAfter]: null != Z && m > Z,
          }),
          onClick: q,
          onContextMenu: Q,
          innerRef: e => z(X(e)),
          "data-dnd-name": d.name,
          "aria-label": b.default.Messages.ROLE_ROW_DESCRIPTION.format({
            name: d.name,
            count: "".concat(x),
          }),
          children: [
            (0, a.jsx)("div", {
              className: i(B.dragIcon, y.dragSpacing, {
                [B.dragIconHidden]: H || D,
              }),
              onMouseEnter: () => w(!0),
              onMouseLeave: () => w(!1),
              children: (0, a.jsx)(g.default, {}),
            }),
            (0, a.jsxs)("div", {
              className: i(B.roleNameContainer, y.roleNameSpacing),
              children: [
                (null === (t = d.tags) || void 0 === t
                  ? void 0
                  : t.guild_connections) === null
                  ? (0, a.jsx)(_.default, {
                      className: B.roleFlowerStar,
                      color: d.colorString,
                      size: 24,
                    })
                  : (0, a.jsx)(V, {
                      guildId: E.id,
                      role: d,
                      size: 24,
                      className: B.roleIcon,
                      defaultIconClassName: B.shield,
                    }),
                null != P
                  ? (0, a.jsx)(G.default, { className: B.lock, tooltipText: P })
                  : null,
                (0, a.jsx)(u.Text, {
                  className: B.roleName,
                  color: "header-primary",
                  variant: "text-md/medium",
                  children: d.name,
                }),
                (null === (n = d.tags) || void 0 === n
                  ? void 0
                  : n.subscription_listing_id) != null &&
                  (0, a.jsx)(S.default, {
                    className: B.subscriptionRoleIcon,
                    "aria-label":
                      b.default.Messages
                        .GUILD_ROLE_SUBSCRIPTION_PREMIUM_ROLE_ICON_LABEL,
                  }),
                (null === (o = d.tags) || void 0 === o
                  ? void 0
                  : o.is_guild_product_role) === !0 &&
                  (0, a.jsx)(I.default, {}),
              ],
            }),
            (0, a.jsx)(u.Tooltip, {
              text: b.default.Messages.ROLE_OVERVIEW_VIEW_MEMBERS,
              "aria-label": b.default.Messages.ROLE_ROW_VIEW_MEMBERS.format({
                count: "".concat(x),
              }),
              position: "right",
              children: e =>
                (0, a.jsxs)(u.Clickable, {
                  ...e,
                  className: i(B.memberCountContainer, y.memberSpacing),
                  onClick: $,
                  children: [
                    (0, a.jsx)(u.Text, {
                      variant: "text-md/normal",
                      color: "none",
                      children: x,
                    }),
                    (0, a.jsx)(L.default, {
                      className: B.person,
                      width: 20,
                      height: 20,
                    }),
                  ],
                }),
            }),
            (0, a.jsxs)("div", {
              className: i(B.buttonsContainer, y.buttonsSpacing),
              children: [
                (0, a.jsx)(N.default, {
                  className: i(B.circleButton, B.editButton),
                  tooltip: H
                    ? b.default.Messages.VIEW
                    : b.default.Messages.EDIT,
                  color: N.CircleIconButtonColors.SECONDARY,
                  size: N.CircleIconButtonSizes.SIZE_36,
                  icon: H
                    ? (0, a.jsx)(h.default, { width: 20, height: 20 })
                    : (0, a.jsx)(R.default, { width: 20, height: 20 }),
                  onClick: q,
                }),
                (0, a.jsx)(N.default, {
                  className: B.circleButton,
                  tooltip: b.default.Messages.MORE,
                  color: N.CircleIconButtonColors.SECONDARY,
                  size: N.CircleIconButtonSizes.SIZE_36,
                  icon: (0, a.jsx)(C.default, { width: 20, height: 20 }),
                  onClick: Q,
                  disabled: !J,
                }),
              ],
            }),
          ],
        });
      }
      function V(e) {
        var t;
        let {
            guildId: s,
            role: l,
            size: n,
            enableTooltip: r,
            className: d,
            defaultIconClassName: u,
          } = e,
          c = (0, f.useRoleIcon)({ guildId: s, roleId: l.id, size: n });
        return null != c
          ? (0, a.jsx)(p.default, { ...c, className: d, enableTooltip: r })
          : (0, a.jsx)(O.default, {
              className: i(d, u),
              color:
                null !== (t = l.colorString) && void 0 !== t
                  ? t
                  : (0, o.int2hex)(P.DEFAULT_ROLE_COLOR),
              width: n,
              height: n,
            });
      }
    },
    887754: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          GuildSettingsRolesNotice: function () {
            return x;
          },
          default: function () {
            return L;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("627445"),
        i = s.n(n),
        r = s("446674"),
        o = s("851387"),
        d = s("45299"),
        u = s("454273"),
        c = s("525065"),
        E = s("449008"),
        _ = s("592407"),
        I = s("766419"),
        T = s("531493"),
        f = s("900938"),
        S = s("986654"),
        m = s("482763"),
        N = s("620296"),
        g = s("500053"),
        h = s("53948"),
        C = s("49111");
      function R(e) {
        _.default.selectRole(e);
      }
      let x = () => {
        let { guild: e } = (0, r.useStateFromStoresObject)([f.default], () =>
            f.default.getProps()
          ),
          t = (0, r.useStateFromStores)([T.default], () => T.default.formState),
          s = (0, r.useStateFromStores)(
            [T.default],
            () => T.default.errorMessage
          );
        return (0, a.jsx)(d.default, {
          errorMessage: s,
          onSave: () => {
            if (null == e) return;
            let { id: t } = e,
              s = T.default.editedRoleIds
                .map(e => T.default.getRole(e))
                .filter(E.isNotNullish),
              a = T.default.getSortDeltas(),
              l = null,
              n = null;
            T.default.hasRoleConfigurationChanges &&
              ((n = T.default.editedRoleIdsForConfigurations),
              (l = T.default.getEditedRoleConnectionConfigurationsMap())),
              (0, I.saveRoleSettings)(t, s, a, n, l);
          },
          submitting: t === C.FormStates.SUBMITTING,
          onReset: I.init,
        });
      };
      function L(e) {
        let { refToScroller: t } = e,
          { guild: s, roles: n } = (0, r.useStateFromStoresObject)(
            [T.default],
            () => ({ guild: T.default.guild, roles: T.default.roles }),
            []
          );
        i(null != s, "Guild cannot be null here");
        let d = l.useMemo(
          () => n.find(e => (0, u.isEveryoneRoleId)(s.id, e.id)),
          [n, s]
        );
        i(null != d, "Guild must have an everyone role");
        let E = l.useMemo(
            () => n.filter(e => !(0, u.isEveryoneRoleId)(s.id, e.id)),
            [n, s]
          ),
          _ = (0, r.useStateFromStores)([f.default], () =>
            f.default.getSelectedRoleId()
          ),
          [I, C] = l.useState(E.length > 0);
        l.useEffect(() => {
          C(I || E.length > 0);
        }, [I, E.length]),
          l.useEffect(() => {
            let e = c.default.getMemberCount(s.id);
            null != e &&
              e <= S.MAX_PREFETCH_MEMBER_COUNT &&
              o.default.requestMembers(s.id, "", 0, !1);
          }, []);
        let [x, L] = l.useState(h.GuildSettingsRoleEditSections.DISPLAY);
        return (l.useEffect(() => {
          null == _ && L(h.GuildSettingsRoleEditSections.DISPLAY);
        }, [_]),
        null != _)
          ? (0, a.jsx)(m.default, {
              editRoleId: _,
              setEditRoleId: R,
              selectedSection: x,
              setSelectedSection: L,
            })
          : I
            ? (0, a.jsx)(g.default, {
                setEditRoleId: R,
                guild: s,
                everyoneRole: d,
                otherRoles: E,
                setSelectedSection: L,
                refToScroller: t,
              })
            : (0, a.jsx)(N.default, {
                guild: s,
                everyoneRole: d,
                setEditRoleId: R,
              });
      }
    },
    500053: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return d;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("986654"),
        i = s("542578"),
        r = s("918947"),
        o = s("316497");
      function d(e) {
        let {
            setEditRoleId: t,
            guild: s,
            everyoneRole: d,
            otherRoles: u,
            setSelectedSection: c,
          } = e,
          [E, _] = l.useState(""),
          [I, T] = l.useState(o.DEFAULT_HEADER_HEIGHT_PX),
          f = E.trim(),
          S = l.useMemo(() => u.filter(e => (0, n.filterRole)(e, f)), [u, f]),
          m = l.useCallback(
            () =>
              (0, a.jsx)(
                r.default,
                {
                  guild: s,
                  everyoneRole: d,
                  filteredRoles: S,
                  setEditRoleId: t,
                  query: E,
                  setQuery: _,
                  setHeaderHeight: T,
                },
                "header"
              ),
            [s, d, S, t, E]
          );
        return (0, a.jsx)(i.default, {
          setEditRoleId: t,
          guild: s,
          everyoneRole: d,
          otherRoles: u,
          setSelectedSection: c,
          renderHeader: m,
          headerHeight: I,
          query: E,
        });
      }
    },
    918947: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return f;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("77078"),
        o = s("851387"),
        d = s("810567"),
        u = s("701909"),
        c = s("126383"),
        E = s("316497"),
        _ = s("49111"),
        I = s("782340"),
        T = s("519078");
      function f(e) {
        let {
            guild: t,
            everyoneRole: s,
            filteredRoles: n,
            setEditRoleId: i,
            query: o,
            setQuery: d,
            setHeaderHeight: u,
          } = e,
          c = l.useRef(null);
        l.useEffect(() => {
          var e, t;
          u(
            null !==
              (t =
                null === (e = c.current) || void 0 === e
                  ? void 0
                  : e.offsetHeight) && void 0 !== t
              ? t
              : E.DEFAULT_HEADER_HEIGHT_PX
          );
        }, [u]);
        let _ = l.useCallback(() => {
          i(s.id);
        }, [i, s.id]);
        return (0, a.jsxs)("div", {
          ref: c,
          children: [
            (0, a.jsx)(r.FormTitle, {
              tag: r.FormTitleTags.H1,
              children: I.default.Messages.ROLES,
            }),
            (0, a.jsx)(r.Text, {
              className: T.description,
              color: "header-secondary",
              variant: "text-sm/normal",
              children: I.default.Messages.ROLE_OVERVIEW_DESCRIPTION,
            }),
            (0, a.jsx)(S, {
              guild: t,
              everyoneRole: s,
              filteredRoles: n,
              query: o,
              setQuery: d,
              onEveryoneRoleClick: _,
            }),
          ],
        });
      }
      function S(e) {
        let {
          guild: t,
          everyoneRole: s,
          filteredRoles: l,
          query: n,
          setQuery: o,
          onEveryoneRoleClick: d,
        } = e;
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(c.default, { role: s, onClick: d }),
            (0, a.jsx)(m, { guild: t, query: n, setQuery: o }),
            (0, a.jsx)(r.Text, {
              className: T.helpText,
              color: "header-secondary",
              variant: "text-sm/normal",
              children: I.default.Messages.ROLE_LIST_BODY_WITH_HELP.format({
                articleURL: u.default.getArticleURL(
                  _.HelpdeskArticles.PERMISSIONS_TUTORIAL
                ),
              }),
            }),
            (0, a.jsx)("div", {
              className: T.rolesTable,
              children: (0, a.jsxs)("div", {
                className: T.tableHeader,
                children: [
                  (0, a.jsx)("div", { className: T.dragSpacing }),
                  (0, a.jsx)(r.Text, {
                    className: i(T.tableTitle, T.roleNameSpacing),
                    variant: "text-sm/normal",
                    children: I.default.Messages.ROLE_LIST_HEADER.format({
                      numRoles: String(l.length),
                    }),
                  }),
                  (0, a.jsx)(r.Text, {
                    className: i(T.tableTitle, T.memberSpacing),
                    variant: "text-sm/normal",
                    children: I.default.Messages.MEMBERS,
                  }),
                  (0, a.jsx)("div", { className: T.buttonsSpacing }),
                ],
              }),
            }),
          ],
        });
      }
      function m(e) {
        let { guild: t, query: s, setQuery: n } = e,
          [i, u] = l.useState(!1),
          c = l.useCallback(
            e => {
              n(e);
            },
            [n]
          ),
          E = l.useCallback(() => {
            n("");
          }, [n]),
          _ = async () => {
            u(!0), await o.default.createRole(t.id), u(!1);
          };
        return (0, a.jsx)("div", {
          className: T.rolesList,
          children: (0, a.jsxs)("div", {
            className: T.searchContainer,
            children: [
              (0, a.jsx)(d.default, {
                size: d.default.Sizes.MEDIUM,
                query: s,
                onChange: c,
                onClear: E,
                placeholder: I.default.Messages.SEARCH_ROLES,
                "aria-label": I.default.Messages.SEARCH_ROLES,
              }),
              (0, a.jsx)(r.Button, {
                className: T.createButton,
                size: r.Button.Sizes.SMALL,
                onClick: _,
                submitting: i,
                children: I.default.Messages.ROLE_CREATE_CTA,
              }),
            ],
          }),
        });
      }
    },
    476324: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useLockTooltip: function () {
            return u;
          },
          default: function () {
            return c;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("446674"),
        i = s("77078"),
        r = s("957255"),
        o = s("45029"),
        d = s("782340");
      function u(e, t, s) {
        let a = (0, n.useStateFromStores)(
            [r.default],
            () => !r.default.isRoleHigher(e, t, s),
            [e, t, s]
          ),
          i = l.useMemo(
            () => a && s.id === (null == t ? void 0 : t.id),
            [a, s, t]
          );
        return i
          ? d.default.Messages.HELP_ROLE_LOCKED_MINE
          : a
            ? d.default.Messages.HELP_ROLE_LOCKED
            : null;
      }
      function c(e) {
        let { className: t, tooltipText: s, width: l = 16, height: n = 16 } = e;
        return (0, a.jsx)(i.Tooltip, {
          text: s,
          children: e =>
            (0, a.jsx)("div", {
              className: t,
              ...e,
              children: (0, a.jsx)(o.default, { width: l, height: n }),
            }),
        });
      }
    },
    243863: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return N;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("819855"),
        n = s("77078"),
        i = s("841098"),
        r = s("716241"),
        o = s("685665"),
        d = s("634544"),
        u = s("405645"),
        c = s("379532"),
        E = s("818643"),
        _ = s("483093"),
        I = s("766419"),
        T = s("49111"),
        f = s("944305"),
        S = s("782340"),
        m = s("672825"),
        N = function (e) {
          let { guild: t, disabled: N, role: g } = e,
            h = (0, i.default)(),
            C = (0, u.useRoleIconForPreview)(t.id, g),
            { analyticsLocations: R } = (0, o.default)(),
            x = () => {
              (0, n.openModalLazy)(async () => {
                let { default: e } = await s
                  .el("64567")
                  .then(s.bind(s, "64567"));
                return s =>
                  (0, a.jsx)(e, {
                    ...s,
                    guildId: t.id,
                    onUploadIcon: e => (0, I.updateRoleIcon)(g.id, e, null),
                    onSelectUnicodeEmoji: e =>
                      (0, I.updateRoleIcon)(g.id, null, e),
                  });
              });
            },
            L = t.features.has(T.GuildFeatures.ROLE_ICONS),
            O = e => {
              !L &&
                ((0, r.trackWithMetadata)(
                  T.AnalyticEvents.PREMIUM_GUILD_PROMOTION_OPENED,
                  {
                    location: {
                      ...e,
                      section: T.AnalyticsSections.CUSTOM_ROLE_ICONS_TOOLTIP,
                    },
                    guild_id: null == t ? void 0 : t.id,
                    location_stack: R,
                  }
                ),
                (0, c.default)({
                  analyticsLocations: R,
                  analyticsSourceLocation: {
                    page: T.AnalyticsPages.GUILD_SETTINGS,
                    section: T.AnalyticsSections.GUILD_ROLE_EDIT_UPSELL_MODAL,
                    object: T.AnalyticsObjects.BADGE,
                  },
                  guild: t,
                  perks: (0, f.customRoleIconUpsellPerks)(),
                }));
            },
            p = (0, a.jsx)(d.default, {
              className: m.availabilityIndicator,
              guild: t,
              guildFeature: T.GuildFeatures.ROLE_ICONS,
              tooltipPosition: "top",
              hideTooltip: L,
              onClick: () =>
                O({
                  object: T.AnalyticsObjects.LEARN_MORE,
                  objectType: T.AnalyticsObjectTypes.TIER_2,
                }),
            });
          return (0, a.jsxs)(n.FormItem, {
            className: m.container,
            children: [
              (0, a.jsxs)(n.FormTitle, {
                className: m.formTitle,
                children: [
                  (0, a.jsx)("div", {
                    children: S.default.Messages.FORM_LABEL_ROLE_ICON,
                  }),
                  p,
                ],
              }),
              (0, a.jsx)(n.FormText, {
                className: m.description,
                children: S.default.Messages.ROLE_ICON_HELP,
              }),
              (0, a.jsxs)("div", {
                className: m.rolePreviewArea,
                children: [
                  (0, a.jsx)("div", {
                    className: m.previewContainer,
                    children:
                      null != C
                        ? (0, a.jsx)(_.default, {
                            ...C,
                            className: m.roleIconPreview,
                            enableTooltip: !1,
                          })
                        : (0, a.jsx)(E.default, {
                            width: 24,
                            height: 24,
                            className: m.preview,
                          }),
                  }),
                  (0, a.jsx)(n.Button, {
                    className: m.button,
                    color: (0, l.isThemeLight)(h)
                      ? n.Button.Colors.PRIMARY
                      : n.Button.Colors.WHITE,
                    look: n.Button.Looks.OUTLINED,
                    onClick: () =>
                      t.hasFeature(T.GuildFeatures.ROLE_ICONS)
                        ? x()
                        : O({ object: T.AnalyticsObjects.UPLOAD_IMAGE }),
                    disabled: N,
                    children: S.default.Messages.ROLE_ICON_CHOOSE_IMAGE,
                  }),
                  null != C
                    ? (0, a.jsx)(n.Button, {
                        className: m.button,
                        color: (0, l.isThemeLight)(h)
                          ? n.Button.Colors.PRIMARY
                          : n.Button.Colors.TRANSPARENT,
                        look: n.Button.Looks.BLANK,
                        onClick: () => {
                          (0, I.updateRoleIcon)(g.id, null, null);
                        },
                        disabled: N,
                        children: S.default.Messages.REMOVE_ICON,
                      })
                    : null,
                ],
              }),
            ],
          });
        };
    },
    609542: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return D;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("627445"),
        o = s.n(r),
        d = s("819855"),
        u = s("77078"),
        c = s("308289"),
        E = s("841098"),
        _ = s("376556"),
        I = s("945330"),
        T = s("49111"),
        f = s("214509"),
        S = s("782340"),
        m = s("44002");
      function N(e) {
        var t, s;
        let l,
          { theme: n, platform: r, integration: E, onRemove: _, locked: T } = e;
        if ((null == E ? void 0 : E.application) != null)
          o(null != E.application.bot, "bot is null"),
            (l = (0, a.jsx)(c.default, {
              size: u.AvatarSizes.SIZE_24,
              user: E.application.bot,
              className: m.verifiedIcon,
            }));
        else if (null != r) {
          let e = (0, d.isThemeLight)(n) ? r.icon.lightSVG : r.icon.darkSVG;
          l = (0, a.jsx)("img", {
            className: m.verifiedIcon,
            src: e,
            alt: S.default.Messages.IMG_ALT_LOGO.format({ name: r.name }),
          });
        }
        return (0, a.jsxs)("div", {
          className: i(
            m.verifiedRow,
            (null == r ? void 0 : r.hasMetadata) === !0 ||
              ((null == E ? void 0 : E.role_connections_metadata) != null &&
                (null == E ? void 0 : E.role_connections_metadata.length) > 0)
              ? m.verifiedRowWithMetadata
              : null
          ),
          children: [
            l,
            (0, a.jsx)(u.Text, {
              variant: "text-md/medium",
              className: m.verifiedText,
              children:
                S.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_ACCOUNT.format(
                  {
                    platformName:
                      null !== (s = null == r ? void 0 : r.name) && void 0 !== s
                        ? s
                        : null == E
                          ? void 0
                          : null === (t = E.application) || void 0 === t
                            ? void 0
                            : t.name,
                  }
                ),
            }),
            (0, a.jsx)(u.Button, {
              "aria-label": S.default.Messages.REMOVE,
              size: u.Button.Sizes.TINY,
              look: u.Button.Looks.BLANK,
              onClick: _,
              disabled: T,
              className: m.closeButton,
              children: (0, a.jsx)(u.Tooltip, {
                text: S.default.Messages.REMOVE,
                children: e =>
                  (0, a.jsx)(I.default, { className: m.closeIcon, ...e }),
              }),
            }),
          ],
        });
      }
      function g(e) {
        var t, s, n;
        let {
            inputRef: i,
            existingPendingConfiguration: r,
            locked: o,
            onConfigurationChange: d,
            platform: c,
            applicationId: E,
            metadataField: _,
            operator: I,
          } = e,
          T =
            null !== (s = null == r ? void 0 : r.index) && void 0 !== s
              ? s
              : -1,
          S = null != I ? I : f.OperatorTypes.GREATER_THAN,
          N = Math.round(
            Number(
              null !==
                (n =
                  null == r
                    ? void 0
                    : null === (t = r.configuration) || void 0 === t
                      ? void 0
                      : t.value) && void 0 !== n
                ? n
                : 0
            )
          );
        S === f.OperatorTypes.GREATER_THAN
          ? (N = Math.max(1, N + 1))
          : S === f.OperatorTypes.LESS_THAN && (N = Math.max(0, N - 1));
        let [g, h] = l.useState(N.toString());
        return (
          l.useEffect(() => {
            h(g);
          }, [g]),
          (0, a.jsx)(
            u.TextInput,
            {
              inputRef: i,
              type: "number",
              className: m.numericalRuleInput,
              size: u.TextInput.Sizes.MINI,
              value: g,
              onChange: e => {
                if (null != r) {
                  if ("" !== e) {
                    var t;
                    let s = Math.round(Number(e));
                    S === f.OperatorTypes.GREATER_THAN
                      ? (s = Math.max(0, s - 1))
                      : S === f.OperatorTypes.LESS_THAN &&
                        (s = Math.max(1, s + 1)),
                      d(
                        {
                          connectionType:
                            null !== (t = null == c ? void 0 : c.type) &&
                            void 0 !== t
                              ? t
                              : f.GUILD_ROLE_CONNECTION_APPLICATION_CONNECTION_TYPE,
                          applicationId: E,
                          connectionMetadataField: _,
                          operator: S,
                          value: s.toString(),
                        },
                        T
                      );
                  }
                  h(e);
                }
              },
              disabled: o,
            },
            _
          )
        );
      }
      function h(e) {
        let {
          titleText: t,
          fieldText: s,
          metadataField: l,
          existingPendingConfiguration: n,
          platform: i,
          applicationId: r,
          onConfigurationChange: o,
          locked: d,
        } = e;
        return (0, a.jsxs)(
          "div",
          {
            className: m.ruleContainer,
            children: [
              (0, a.jsxs)("div", {
                children: [
                  (0, a.jsx)(u.Text, {
                    variant: "text-md/bold",
                    className: m.ruleItemHeader,
                    children: t,
                  }),
                  (0, a.jsx)("div", {
                    className: m.numericalRuleSubItemContainer,
                    children: (0, a.jsx)(u.Text, {
                      variant: "text-md/normal",
                      className: m.numericalRuleSubText,
                      children: s,
                    }),
                  }),
                ],
              }),
              (0, a.jsx)(u.Switch, {
                className: m.ruleItemSwitch,
                checked: (null == n ? void 0 : n.configuration.value) === "1",
                onChange: e => {
                  var t, s;
                  let a = null;
                  e &&
                    (a = {
                      connectionType:
                        null !== (t = null == i ? void 0 : i.type) &&
                        void 0 !== t
                          ? t
                          : f.GUILD_ROLE_CONNECTION_APPLICATION_CONNECTION_TYPE,
                      applicationId: r,
                      connectionMetadataField: l,
                      operator: f.OperatorTypes.EQUAL,
                      value: "1",
                    }),
                    o(
                      a,
                      null !== (s = null == n ? void 0 : n.index) &&
                        void 0 !== s
                        ? s
                        : -1
                    );
                },
                disabled: d,
              }),
            ],
          },
          l
        );
      }
      function C(e) {
        let {
            titleText: t,
            fieldText: s,
            fieldTextHook: n,
            metadataField: i,
            existingPendingConfiguration: r,
            platform: o,
            applicationId: d,
            onConfigurationChange: c,
            locked: E,
            operator: _,
          } = e,
          I = l.createRef(),
          T = (null == r ? void 0 : r.configuration) != null,
          S = (0, a.jsx)(
            g,
            {
              inputRef: I,
              metadataField: i,
              existingPendingConfiguration: r,
              locked: E || !T,
              onConfigurationChange: c,
              platform: o,
              operator: _,
              applicationId: d,
            },
            i
          ),
          N =
            null != n
              ? n.format({ metadataHook: () => S })
              : (0, a.jsxs)(a.Fragment, {
                  children: [
                    S,
                    (0, a.jsx)("span", { className: m.fieldText, children: s }),
                  ],
                });
        return (0, a.jsxs)(
          "div",
          {
            className: m.ruleContainer,
            children: [
              (0, a.jsxs)("div", {
                className: m.ruleContainerLabel,
                children: [
                  (0, a.jsx)(u.Text, {
                    variant: "text-md/bold",
                    className: m.ruleItemHeader,
                    children: t,
                  }),
                  (0, a.jsx)("div", {
                    className: m.numericalRuleSubItemContainer,
                    children: (0, a.jsx)(u.Text, {
                      variant: "text-md/normal",
                      className: m.numericalRuleSubText,
                      children: N,
                    }),
                  }),
                ],
              }),
              (0, a.jsx)(u.Switch, {
                className: m.ruleItemSwitch,
                checked: T,
                onChange: e => {
                  var t, s, a;
                  let l = null;
                  if (e) {
                    let e = null != _ ? _ : f.OperatorTypes.GREATER_THAN,
                      a = Math.round(
                        Number(
                          null === (t = I.current) || void 0 === t
                            ? void 0
                            : t.value
                        )
                      );
                    e === f.OperatorTypes.GREATER_THAN
                      ? (a = Math.max(0, a - 1))
                      : e === f.OperatorTypes.LESS_THAN &&
                        (a = Math.max(1, a + 1)),
                      (l = {
                        connectionType:
                          null !== (s = null == o ? void 0 : o.type) &&
                          void 0 !== s
                            ? s
                            : f.GUILD_ROLE_CONNECTION_APPLICATION_CONNECTION_TYPE,
                        applicationId: d,
                        connectionMetadataField: i,
                        operator: e,
                        value: a.toString(),
                      });
                  }
                  c(
                    l,
                    null !== (a = null == r ? void 0 : r.index) && void 0 !== a
                      ? a
                      : -1
                  );
                },
                disabled: E,
              }),
            ],
          },
          i
        );
      }
      function R(e) {
        let { configMetadataMap: t, onConfigurationChange: s, locked: l } = e,
          n = _.default.get(T.PlatformTypes.STEAM);
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(C, {
              titleText:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_ACCOUNT_AGE,
              fieldTextHook:
                S.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_AGE,
              metadataField: f.MetadataFields.CREATED_AT,
              existingPendingConfiguration: t.get(f.MetadataFields.CREATED_AT),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
            (0, a.jsx)(C, {
              titleText: S.default.Messages.CONNECTIONS_STEAM_GAMES,
              fieldTextHook:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_GAMES,
              metadataField: f.MetadataFields.STEAM_GAME_COUNT,
              existingPendingConfiguration: t.get(
                f.MetadataFields.STEAM_GAME_COUNT
              ),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
            (0, a.jsx)(C, {
              titleText:
                S.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_ITEMS.format(
                  { gameName: S.default.Messages.CONNECTIONS_STEAM_DOTA2 }
                ),
              fieldTextHook:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_DOTA2,
              metadataField: f.MetadataFields.STEAM_ITEM_COUNT_DOTA2,
              existingPendingConfiguration: t.get(
                f.MetadataFields.STEAM_ITEM_COUNT_DOTA2
              ),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
            (0, a.jsx)(C, {
              titleText:
                S.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_ITEMS.format(
                  { gameName: S.default.Messages.CONNECTIONS_STEAM_TF2 }
                ),
              fieldTextHook:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_TF2,
              metadataField: f.MetadataFields.STEAM_ITEM_COUNT_TF2,
              existingPendingConfiguration: t.get(
                f.MetadataFields.STEAM_ITEM_COUNT_TF2
              ),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
          ],
        });
      }
      function x(e) {
        let { configMetadataMap: t, onConfigurationChange: s, locked: l } = e,
          n = _.default.get(T.PlatformTypes.TWITTER);
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(C, {
              titleText:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_ACCOUNT_AGE,
              fieldTextHook:
                S.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_AGE,
              metadataField: f.MetadataFields.CREATED_AT,
              existingPendingConfiguration: t.get(f.MetadataFields.CREATED_AT),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
            (0, a.jsx)(C, {
              titleText: S.default.Messages.CONNECTIONS_TWITTER_FOLLOWERS,
              fieldTextHook:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_FOLLOWERS,
              metadataField: f.MetadataFields.TWITTER_FOLLOWERS_COUNT,
              existingPendingConfiguration: t.get(
                f.MetadataFields.TWITTER_FOLLOWERS_COUNT
              ),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
            (0, a.jsx)(C, {
              titleText: S.default.Messages.CONNECTIONS_TWITTER_STATUSES,
              fieldTextHook:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_TWEETS,
              metadataField: f.MetadataFields.TWITTER_STATUSES_COUNT,
              existingPendingConfiguration: t.get(
                f.MetadataFields.TWITTER_STATUSES_COUNT
              ),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
            (0, a.jsx)(h, {
              titleText:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_VERIFIED,
              fieldText:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_BE_VERIFIED,
              metadataField: f.MetadataFields.TWITTER_VERIFIED,
              existingPendingConfiguration: t.get(
                f.MetadataFields.TWITTER_VERIFIED
              ),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
          ],
        });
      }
      function L(e) {
        let { configMetadataMap: t, onConfigurationChange: s, locked: l } = e,
          n = _.default.get(T.PlatformTypes.REDDIT);
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(C, {
              titleText:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_ACCOUNT_AGE,
              fieldTextHook:
                S.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_AGE,
              metadataField: f.MetadataFields.CREATED_AT,
              existingPendingConfiguration: t.get(f.MetadataFields.CREATED_AT),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
            (0, a.jsx)(C, {
              titleText: S.default.Messages.CONNECTIONS_REDDIT_KARMA,
              fieldTextHook:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_KARMA,
              metadataField: f.MetadataFields.REDDIT_TOTAL_KARMA,
              existingPendingConfiguration: t.get(
                f.MetadataFields.REDDIT_TOTAL_KARMA
              ),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
            (0, a.jsx)(h, {
              titleText: S.default.Messages.CONNECTIONS_REDDIT_MOD,
              fieldText:
                S.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_BE_MOD,
              metadataField: f.MetadataFields.REDDIT_MOD,
              existingPendingConfiguration: t.get(f.MetadataFields.REDDIT_MOD),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
            (0, a.jsx)(h, {
              titleText: S.default.Messages.CONNECTIONS_REDDIT_GOLD,
              fieldText:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_GOLD,
              metadataField: f.MetadataFields.REDDIT_GOLD,
              existingPendingConfiguration: t.get(f.MetadataFields.REDDIT_GOLD),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
          ],
        });
      }
      function O(e) {
        let { configMetadataMap: t, onConfigurationChange: s, locked: l } = e,
          n = _.default.get(T.PlatformTypes.PAYPAL);
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(C, {
              titleText:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_ACCOUNT_AGE,
              fieldTextHook:
                S.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_AGE,
              metadataField: f.MetadataFields.CREATED_AT,
              existingPendingConfiguration: t.get(f.MetadataFields.CREATED_AT),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
            (0, a.jsx)(h, {
              titleText: S.default.Messages.CONNECTIONS_PAYPAL_VERIFIED,
              fieldText:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_PAYPAL_VERIFIED_BANK_ACCOUNT,
              metadataField: f.MetadataFields.PAYPAL_VERIFIED,
              existingPendingConfiguration: t.get(
                f.MetadataFields.PAYPAL_VERIFIED
              ),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
          ],
        });
      }
      function p(e) {
        let { configMetadataMap: t, onConfigurationChange: s, locked: l } = e,
          n = _.default.get(T.PlatformTypes.EBAY);
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(C, {
              titleText:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_ACCOUNT_AGE,
              fieldTextHook:
                S.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_AGE,
              metadataField: f.MetadataFields.CREATED_AT,
              existingPendingConfiguration: t.get(f.MetadataFields.CREATED_AT),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
            (0, a.jsx)(C, {
              titleText:
                S.default.Messages
                  .CONNECTIONS_EBAY_POSITIVE_FEEDBACK_PERCENTAGE,
              fieldTextHook:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_POSITIVE_FEEDBACK_PERCENTAGE,
              metadataField: f.MetadataFields.EBAY_POSITIVE_FEEDBACK_PERCENTAGE,
              existingPendingConfiguration: t.get(
                f.MetadataFields.EBAY_POSITIVE_FEEDBACK_PERCENTAGE
              ),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
            (0, a.jsx)(C, {
              titleText:
                S.default.Messages
                  .CONNECTIONS_EBAY_UNIQUE_POSITIVE_FEEDBACK_COUNT,
              fieldTextHook:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_UNIQUE_POSITIVE_FEEDBACK_COUNT,
              metadataField:
                f.MetadataFields.EBAY_UNIQUE_POSITIVE_FEEDBACK_COUNT,
              existingPendingConfiguration: t.get(
                f.MetadataFields.EBAY_UNIQUE_POSITIVE_FEEDBACK_COUNT
              ),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
            (0, a.jsx)(C, {
              titleText:
                S.default.Messages
                  .CONNECTIONS_EBAY_UNIQUE_NEGATIVE_FEEDBACK_COUNT,
              fieldTextHook:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_MOST_UNIQUE_NEGATIVE_FEEDBACK_COUNT,
              metadataField:
                f.MetadataFields.EBAY_UNIQUE_NEGATIVE_FEEDBACK_COUNT,
              existingPendingConfiguration: t.get(
                f.MetadataFields.EBAY_UNIQUE_NEGATIVE_FEEDBACK_COUNT
              ),
              platform: n,
              onConfigurationChange: s,
              locked: l,
              operator: f.OperatorTypes.LESS_THAN,
            }),
            (0, a.jsx)(h, {
              titleText: S.default.Messages.CONNECTIONS_EBAY_TOP_RATED_SELLER,
              fieldText:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_BE_TOP_RATED_SELLER,
              metadataField: f.MetadataFields.EBAY_TOP_RATED_SELLER,
              existingPendingConfiguration: t.get(
                f.MetadataFields.EBAY_TOP_RATED_SELLER
              ),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
          ],
        });
      }
      function A(e) {
        let { configMetadataMap: t, onConfigurationChange: s, locked: l } = e,
          n = _.default.get(T.PlatformTypes.TIKTOK);
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(h, {
              titleText: S.default.Messages.CONNECTIONS_TIKTOK_VERIFIED,
              fieldText:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_BE_VERIFIED,
              metadataField: f.MetadataFields.TIKTOK_VERIFIED,
              existingPendingConfiguration: t.get(
                f.MetadataFields.TIKTOK_VERIFIED
              ),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
            (0, a.jsx)(C, {
              titleText: S.default.Messages.CONNECTIONS_TIKTOK_FOLLOWERS,
              fieldTextHook:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_FOLLOWERS,
              metadataField: f.MetadataFields.TIKTOK_FOLLOWER_COUNT,
              existingPendingConfiguration: t.get(
                f.MetadataFields.TIKTOK_FOLLOWER_COUNT
              ),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
            (0, a.jsx)(C, {
              titleText: S.default.Messages.CONNECTIONS_TIKTOK_FOLLOWING,
              fieldTextHook:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_FOLLOWING,
              metadataField: f.MetadataFields.TIKTOK_FOLLOWING_COUNT,
              existingPendingConfiguration: t.get(
                f.MetadataFields.TIKTOK_FOLLOWING_COUNT
              ),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
            (0, a.jsx)(C, {
              titleText: S.default.Messages.CONNECTIONS_TIKTOK_LIKES,
              fieldTextHook:
                S.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_LIKES,
              metadataField: f.MetadataFields.TIKTOK_LIKES_COUNT,
              existingPendingConfiguration: t.get(
                f.MetadataFields.TIKTOK_LIKES_COUNT
              ),
              platform: n,
              onConfigurationChange: s,
              locked: l,
            }),
          ],
        });
      }
      function M(e) {
        let {
          configMetadataMap: t,
          onConfigurationChange: s,
          locked: l,
          integration: n,
        } = e;
        if (null == n || null == n.role_connections_metadata) return null;
        let i = n.role_connections_metadata.map(e => {
          var i, r;
          let o;
          switch (e.type) {
            case f.MetadataItemTypes.INTEGER_LESS_THAN_EQUAL:
            case f.MetadataItemTypes.DATETIME_LESS_THAN_EQUAL:
              o = f.OperatorTypes.LESS_THAN;
              break;
            case f.MetadataItemTypes.INTEGER_GREATER_THAN_EQUAL:
            case f.MetadataItemTypes.DATETIME_GREATER_THAN_EQUAL:
              o = f.OperatorTypes.GREATER_THAN;
              break;
            case f.MetadataItemTypes.INTEGER_EQUAL:
            case f.MetadataItemTypes.BOOLEAN_EQUAL:
              o = f.OperatorTypes.EQUAL;
              break;
            case f.MetadataItemTypes.INTEGER_NOT_EQUAL:
            case f.MetadataItemTypes.BOOLEAN_NOT_EQUAL:
              o = f.OperatorTypes.NOT_EQUAL;
              break;
            default:
              return null;
          }
          switch (e.type) {
            case f.MetadataItemTypes.INTEGER_LESS_THAN_EQUAL:
            case f.MetadataItemTypes.INTEGER_GREATER_THAN_EQUAL:
            case f.MetadataItemTypes.INTEGER_EQUAL:
            case f.MetadataItemTypes.INTEGER_NOT_EQUAL:
            case f.MetadataItemTypes.DATETIME_LESS_THAN_EQUAL:
            case f.MetadataItemTypes.DATETIME_GREATER_THAN_EQUAL:
              return (0, a.jsx)(
                C,
                {
                  titleText: e.name,
                  fieldText: e.description,
                  metadataField: e.key,
                  existingPendingConfiguration: t.get(e.key),
                  platform: null,
                  onConfigurationChange: s,
                  locked: l,
                  operator: o,
                  applicationId:
                    null === (i = n.application) || void 0 === i
                      ? void 0
                      : i.id,
                },
                e.key
              );
            case f.MetadataItemTypes.BOOLEAN_EQUAL:
            case f.MetadataItemTypes.BOOLEAN_NOT_EQUAL:
              return (0, a.jsx)(
                h,
                {
                  titleText: e.name,
                  fieldText: e.description,
                  metadataField: e.key,
                  existingPendingConfiguration: t.get(e.key),
                  platform: null,
                  onConfigurationChange: s,
                  locked: l,
                  operator: o,
                  applicationId:
                    null === (r = n.application) || void 0 === r
                      ? void 0
                      : r.id,
                },
                e.key
              );
          }
        });
        return (0, a.jsx)(a.Fragment, { children: i });
      }
      function D(e) {
        let t,
          {
            configurationItems: s,
            onConfigurationChange: l,
            locked: n,
            integrations: i,
          } = e,
          r = (0, E.default)();
        if (s.length < 1) return null;
        let o = s[0].configuration.applicationId,
          d =
            null != o
              ? null == i
                ? void 0
                : i.find(e => {
                    var t;
                    return (
                      (null === (t = e.application) || void 0 === t
                        ? void 0
                        : t.id) === o
                    );
                  })
              : void 0;
        if (null != o && null == d) return null;
        let u = null;
        try {
          u = _.default.get(s[0].configuration.connectionType);
        } catch (e) {}
        let c = new Map();
        s.forEach(e => {
          null != e.configuration.connectionMetadataField
            ? c.set(e.configuration.connectionMetadataField, e)
            : null == e.configuration.value &&
              null == e.configuration.operator &&
              null == e.configuration.connectionMetadataField &&
              (t = e);
        });
        let I = { configMetadataMap: c, onConfigurationChange: l, locked: n },
          f = null;
        switch (null == u ? void 0 : u.type) {
          case T.PlatformTypes.STEAM:
            f = (0, a.jsx)(R, { ...I });
            break;
          case T.PlatformTypes.TWITTER:
            f = (0, a.jsx)(x, { ...I });
            break;
          case T.PlatformTypes.REDDIT:
            f = (0, a.jsx)(L, { ...I });
            break;
          case T.PlatformTypes.PAYPAL:
            f = (0, a.jsx)(O, { ...I });
            break;
          case T.PlatformTypes.EBAY:
            f = (0, a.jsx)(p, { ...I });
            break;
          case T.PlatformTypes.TIKTOK:
            f = (0, a.jsx)(A, { ...I });
            break;
          default:
            f = (0, a.jsx)(M, { ...I, integration: d });
        }
        return (0, a.jsxs)("div", {
          className: m.container,
          children: [
            (0, a.jsx)(N, {
              theme: r,
              platform: u,
              integration: d,
              onRemove: () => l(null, t.index),
              locked: n,
            }),
            f,
          ],
        });
      }
    },
    462752: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return G;
          },
        }),
        s("222007"),
        s("424973"),
        s("834022");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("917351"),
        o = s.n(r),
        d = s("446674"),
        u = s("77078"),
        c = s("913144"),
        E = s("535013"),
        _ = s("476765"),
        I = s("351825"),
        T = s("423487"),
        f = s("701909"),
        S = s("36402"),
        m = s("766419"),
        N = s("531493"),
        g = s("50693"),
        h = s("609542"),
        C = s("91816"),
        R = s("53948"),
        x = s("49111"),
        L = s("214509"),
        O = s("782340"),
        p = s("383726"),
        A = s("445494");
      let M = (0, _.uid)();
      function D(e, t) {
        return t !== E.ConnectionConfigurationRuleOperator.AND
          ? Object.values(
              o.groupBy(e, e =>
                "".concat(e.connectionType, ":").concat(e.applicationId)
              )
            )
          : 0 === e.length
            ? []
            : [[...e]];
      }
      function v(e) {
        let { handleAddVerificationClicked: t, locked: s } = e;
        return (0, a.jsxs)("div", {
          className: p.headerNoConfigContainer,
          children: [
            (0, a.jsx)(u.Heading, {
              className: p.headerHeading,
              variant: "eyebrow",
              children:
                O.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER,
            }),
            (0, a.jsx)(u.Text, {
              variant: "text-sm/normal",
              color: "header-secondary",
              children:
                O.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_DESCRIPTION_LEARN_MORE.format(
                  {
                    helpdeskArticleUrl: f.default.getArticleURL(
                      x.HelpdeskArticles.CONNECTION_DETAILS_ADMIN
                    ),
                  }
                ),
            }),
            (0, a.jsx)(u.Button, {
              disabled: s,
              className: p.addVerificationButton,
              size: u.Button.Sizes.MEDIUM,
              look: u.Button.Looks.FILLED,
              color: u.Button.Colors.BRAND_NEW,
              onClick: t,
              children:
                O.default.Messages
                  .ROLE_EDIT_CONNECTIONS_CONTROLS_ADD_CONNECTION,
            }),
          ],
        });
      }
      function G(e) {
        let {
            guild: t,
            role: s,
            locked: n,
            setSelectedSection: r,
            integrations: o,
          } = e,
          { headerHeight: _, headerRef: G } = (0, g.default)(0),
          { scrolledToTop: j, handleScroll: U } = (0, C.useScrolledToTop)(),
          P = (0, d.useStateFromStores)(
            [S.default],
            () => {
              var e;
              return null === (e = S.default.getRoleMemberCount(t.id)) ||
                void 0 === e
                ? void 0
                : e[s.id];
            },
            [s.id, t.id]
          ),
          b = (0, d.useStateFromStoresArray)([N.default], () => {
            var e;
            return null !==
              (e = N.default
                .getEditedRoleConnectionConfigurationsMap()
                .get(s.id)) && void 0 !== e
              ? e
              : [];
          }),
          B =
            b.length > 1
              ? E.ConnectionConfigurationRuleOperator.OR
              : E.ConnectionConfigurationRuleOperator.AND,
          y = l.useMemo(
            () =>
              B === E.ConnectionConfigurationRuleOperator.OR
                ? b.flat()
                : null != b && b.length > 0
                  ? b[0]
                  : [],
            [B, b]
          ),
          F = l.useMemo(() => new Set(y.map(e => e.connectionType)), [y]);
        function H(e) {
          let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : void 0,
            a = [...y];
          a.push({
            connectionType: e,
            connectionMetadataField: void 0,
            applicationId: t,
            operator: void 0,
            value: void 0,
          }),
            (0, m.updateRoleConnectionConfigurations)(s.id, D(a, B));
        }
        function k() {
          c.default.dispatch({
            type: "CONNECTIONS_GRID_MODAL_SHOW",
            onComplete: e => H(e),
            excludedPlatformTypes: F,
            integrations: o,
            onCompleteApplication: e =>
              H(L.GUILD_ROLE_CONNECTION_APPLICATION_CONNECTION_TYPE, e),
          });
        }
        let w = null;
        if (0 === y.length)
          w = (0, a.jsx)(v, { handleAddVerificationClicked: k, locked: n });
        else if (y.length > 0) {
          var V, Y;
          let e = null;
          y.length < 10 &&
            (e = (0, a.jsx)(u.Button, {
              className: i(
                p.addVerificationButton,
                p.addVerificationButtonAppend
              ),
              size: u.Button.Sizes.LARGE,
              look: u.Button.Looks.BLANK,
              color: u.Button.Colors.LINK,
              onClick: k,
              disabled: n,
              children: (0, a.jsxs)("div", {
                className: p.addVerificationButtonAppendTextContainer,
                children: [
                  (0, a.jsx)(I.default, {}),
                  O.default.Messages
                    .ROLE_EDIT_CONNECTIONS_CONTROLS_ADD_CONNECTION,
                ],
              }),
            })),
            (w = (0, a.jsxs)(a.Fragment, {
              children: [
                ((V = () =>
                  (0, m.updateRoleConnectionConfigurations)(s.id, [])),
                (Y = n),
                (0, a.jsxs)(a.Fragment, {
                  children: [
                    (0, a.jsxs)("div", {
                      className: p.headerTitleContainer,
                      children: [
                        (0, a.jsx)("div", {
                          className: p.headerTitleTextContainer,
                          children: (0, a.jsx)(u.Heading, {
                            variant: "eyebrow",
                            children:
                              O.default.Messages
                                .ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER,
                          }),
                        }),
                        (0, a.jsx)(u.Button, {
                          className: p.headerTitleButton,
                          size: u.Button.Sizes.TINY,
                          look: u.Button.Looks.LINK,
                          color: u.Button.Colors.LINK,
                          onClick: V,
                          disabled: Y,
                          children:
                            O.default.Messages
                              .ROLE_EDIT_CONNECTIONS_CONTROLS_CLEAR_ALL,
                        }),
                      ],
                    }),
                    (0, a.jsx)(u.Text, {
                      variant: "text-sm/normal",
                      children:
                        O.default.Messages.ROLE_EDIT_CONNECTIONS_CONTROLS_DESCRIPTION_LEARN_MORE.format(
                          {
                            helpdeskArticleUrl: f.default.getArticleURL(
                              x.HelpdeskArticles.CONNECTION_DETAILS_ADMIN
                            ),
                          }
                        ),
                    }),
                  ],
                })),
                (function (e, t, s, l, n) {
                  let i = D(l, E.ConnectionConfigurationRuleOperator.OR);
                  return (0, a.jsx)(u.FormItem, {
                    className: p.operatorContainer,
                    title:
                      O.default.Messages
                        .ROLE_EDIT_CONNECTIONS_CONTROLS_REQUIREMENTS,
                    children: (0, a.jsx)(u.RadioGroup, {
                      options: [
                        {
                          name: O.default.Messages
                            .ROLE_EDIT_CONNECTIONS_CONTROLS_OR_DESCRIPTION,
                          value: E.ConnectionConfigurationRuleOperator.OR,
                        },
                        {
                          name: O.default.Messages
                            .ROLE_EDIT_CONNECTIONS_CONTROLS_AND_DESCRIPTION,
                          value: E.ConnectionConfigurationRuleOperator.AND,
                        },
                      ],
                      onChange: e => n(l, e.value),
                      value: s,
                      disabled: e || i.length < 2,
                      "aria-labelledby": M,
                    }),
                  });
                })(n, s.id, B, y, (e, t) =>
                  (0, m.updateRoleConnectionConfigurations)(s.id, D(e, t))
                ),
                (function (e, t, s, l, n) {
                  function i(s, a) {
                    let l = [];
                    for (let t of e) l.push({ ...t });
                    if (null == s) {
                      let t = e[a];
                      null !== t &&
                      null == t.connectionMetadataField &&
                      null == t.operator &&
                      null == t.value
                        ? (l = l.filter(e =>
                            null == t.applicationId
                              ? e.connectionType !== t.connectionType
                              : e.connectionType !== t.connectionType &&
                                e.applicationId !== t.applicationId
                          ))
                        : l.splice(a, 1);
                    } else -1 === a ? l.push(s) : a >= 0 && (l[a] = s);
                    t(l);
                  }
                  let r = new Map();
                  for (let t of (e.forEach((e, t) => {
                    let s = ""
                      .concat(e.connectionType, ":")
                      .concat(e.applicationId);
                    if (r.has(s)) {
                      let a = r.get(s);
                      null == a || a.push({ index: t, configuration: e });
                    } else r.set(s, [{ index: t, configuration: e }]);
                  }),
                  r.values())) {
                    if (
                      t.some(e => {
                        let { configuration: t } = e;
                        return (
                          null == t.connectionMetadataField &&
                          null == t.operator &&
                          null == t.value
                        );
                      })
                    )
                      continue;
                    let s = {
                        ...t[0].configuration,
                        connectionMetadataField: void 0,
                        operator: void 0,
                        value: void 0,
                      },
                      a = e.push(s);
                    t.push({ index: a - 1, configuration: s });
                  }
                  return (0, a.jsx)("div", {
                    className: p.configurationsContainer,
                    children: Array.from(r.values()).map(e =>
                      (0, a.jsx)(
                        h.default,
                        {
                          configurationItems: e,
                          onConfigurationChange: i,
                          locked: s,
                          integrations: n,
                        },
                        e[0].configuration.connectionType + ":" + e[0].index
                      )
                    ),
                  });
                })(
                  y,
                  e => (0, m.updateRoleConnectionConfigurations)(s.id, D(e, B)),
                  n,
                  s.id,
                  o
                ),
                e,
              ],
            }));
        }
        return (0, a.jsx)(u.AdvancedScrollerAuto, {
          className: p.scroller,
          style: { scrollPaddingTop: _ },
          onScroll: U,
          children: (0, a.jsxs)("div", {
            className: A.contentWidth,
            children: [
              (0, a.jsx)("div", {
                className: i(A.header, A.stickyHeader, {
                  [A.stickyHeaderElevated]: !j,
                }),
                ref: G,
                children: (0, a.jsx)(C.default, {
                  guild: t,
                  role: s,
                  selectedSection:
                    R.GuildSettingsRoleEditSections.VERIFICATIONS,
                  setSelectedSection: r,
                }),
              }),
              (null != P ? P : 0) > 0
                ? (0, a.jsxs)("div", {
                    className: p.warningContainer,
                    children: [
                      (0, a.jsx)(T.default, { className: p.warningIcon }),
                      (0, a.jsx)(u.Text, {
                        variant: "text-sm/normal",
                        color: "text-normal",
                        children:
                          O.default.Messages
                            .ROLE_EDIT_CONNECTIONS_CONTROLS_MEMBERS_WARNING,
                      }),
                    ],
                  })
                : null,
              w,
            ],
          }),
        });
      }
    },
    505002: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return F;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("917351"),
        o = s.n(r),
        d = s("446674"),
        u = s("77078"),
        c = s("454273"),
        E = s("269936"),
        _ = s("405645"),
        I = s("692038"),
        T = s("815297"),
        f = s("291655"),
        S = s("766274"),
        m = s("957255"),
        N = s("439932"),
        g = s("766419"),
        h = s("50693"),
        C = s("243863"),
        R = s("91816"),
        x = s("902750"),
        L = s("449804"),
        O = s("53948"),
        p = s("49111"),
        A = s("782340"),
        M = s("893494"),
        D = s("445494"),
        v = s("452593"),
        G = s("572701");
      let j = (0, E.makeLazy)({
          createPromise: () => s.el("282585").then(s.bind(s, "282585")),
          webpackId: "282585",
        }),
        U = o.debounce((e, t) => (0, g.updateRoleName)(e, t), 200);
      function P(e) {
        let { role: t, disabled: s } = e,
          [n, i] = l.useState(t.name);
        return (
          l.useEffect(() => {
            i(t.name);
          }, [t.name]),
          (0, a.jsx)(u.FormItem, {
            title: A.default.Messages.FORM_LABEL_ROLE_NAME,
            required: !0,
            children: (0, a.jsx)(u.TextInput, {
              type: "text",
              value: n,
              maxLength: p.ROLE_NAME_MAX_LENGTH,
              onChange: function (e) {
                i(e), U(t.id, e);
              },
              disabled: s,
            }),
          })
        );
      }
      function b(e) {
        let { role: t, disabled: s } = e;
        return (0, a.jsxs)(u.FormItem, {
          className: M.colorPicker,
          title: A.default.Messages.FORM_LABEL_ROLE_COLOR,
          required: !0,
          children: [
            (0, a.jsx)(u.FormText, {
              className: M.colorDescription,
              children: A.default.Messages.ROLE_COLOR_HELP,
            }),
            (0, a.jsx)(
              j,
              {
                defaultColor: p.DEFAULT_ROLE_COLOR,
                colors: p.ROLE_COLORS,
                value: t.color,
                disabled: s,
                onChange: e => {
                  var s, a;
                  return (
                    (s = t),
                    (a = e),
                    void (
                      s.color !== a &&
                      (a !== p.DEFAULT_ROLE_COLOR || 0 !== s.color) &&
                      (a === p.DEFAULT_ROLE_COLOR && (a = 0),
                      (0, g.updateRoleColor)(s.id, a))
                    )
                  );
                },
                customPickerPosition: "right",
              },
              t.id
            ),
          ],
        });
      }
      function B(e) {
        var t, n;
        let { role: i, guildId: r } = e;
        let o =
            ((n = A.default.Messages.ROLE_SAMPLE_MESSAGE),
            l.useMemo(() => {
              let e = (0, I.createMessageRecord)({
                ...(0, T.default)({ channelId: "1337", content: n }),
                state: p.MessageStates.SENT,
                id: "31337",
              });
              return (
                (e.author = new S.default({
                  id: "313337",
                  username: A.default.Messages.WUMPUS,
                  discriminator: "0000",
                  bot: !1,
                })),
                (e.author.getAvatarURL = () => s("457737")),
                e
              );
            }, [n])),
          d = {
            nick: o.author.username,
            colorString:
              null !== (t = i.colorString) && void 0 !== t ? t : void 0,
          },
          c = { src: v, name: i.name },
          E = { src: G, name: i.name },
          m = (0, _.useRoleIconForPreview)(r, i);
        return (0, a.jsx)(u.FocusBlock, {
          children: (0, a.jsxs)("div", {
            className: M.previewContainer,
            "aria-hidden": !0,
            children: [
              (0, a.jsx)("div", {
                className: (0, N.getThemeClass)(p.ThemeTypes.LIGHT),
                children: (0, a.jsx)("div", {
                  className: M.messageContainer,
                  children: (0, a.jsx)(f.default, {
                    author: d,
                    message: o,
                    roleIcon: null != m ? m : E,
                    isGroupStart: !0,
                  }),
                }),
              }),
              (0, a.jsx)("div", {
                className: (0, N.getThemeClass)(p.ThemeTypes.DARK),
                children: (0, a.jsx)("div", {
                  className: M.messageContainer,
                  children: (0, a.jsx)(f.default, {
                    author: d,
                    message: o,
                    roleIcon: null != m ? m : c,
                    isGroupStart: !0,
                  }),
                }),
              }),
            ],
          }),
        });
      }
      function y(e) {
        let { role: t, disabled: s } = e;
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(u.FormSwitch, {
              disabled: s,
              value: t.hoist,
              onChange: e => (0, g.toggleRoleSettings)(t.id, e, t.mentionable),
              hideBorder: !0,
              children: A.default.Messages.FORM_LABEL_HOIST_DESCRIPTION,
            }),
            (0, a.jsx)(u.FormDivider, { className: M.divider }),
            (0, a.jsx)(u.FormSwitch, {
              disabled: s,
              value: t.mentionable,
              onChange: e => (0, g.toggleRoleSettings)(t.id, t.hoist, e),
              note: A.default.Messages.FORM_LABEL_MENTIONABLE_DESCRIPTION,
              hideBorder: !0,
              children: A.default.Messages.FORM_LABEL_MENTIONABLE.format(),
            }),
          ],
        });
      }
      function F(e) {
        let { guild: t, role: s, locked: l, setSelectedSection: n } = e,
          r = (0, c.isEveryoneRoleId)(null == t ? void 0 : t.id, s.id),
          o = l || r,
          E = (0, d.useStateFromStores)([m.default], () =>
            m.default.canImpersonateRole(t, s)
          ),
          { headerHeight: _, headerRef: I } = (0, h.default)(0),
          { scrolledToTop: T, handleScroll: f } = (0, R.useScrolledToTop)();
        return (0, a.jsx)(u.AdvancedScrollerAuto, {
          className: M.scroller,
          style: { scrollPaddingTop: _ },
          onScroll: f,
          children: (0, a.jsxs)("div", {
            className: D.contentWidth,
            children: [
              (0, a.jsx)("div", {
                className: i(D.header, D.stickyHeader, {
                  [D.stickyHeaderElevated]: !T,
                }),
                ref: I,
                children: (0, a.jsx)(R.default, {
                  guild: t,
                  role: s,
                  selectedSection: O.GuildSettingsRoleEditSections.DISPLAY,
                  setSelectedSection: n,
                }),
              }),
              (0, a.jsx)(P, { role: s, disabled: o }),
              (0, a.jsx)("div", {
                className: M.noticeContainer,
                children: (0, a.jsx)(L.default, { role: s }),
              }),
              (0, a.jsx)(u.FormDivider, { className: M.divider }),
              (0, a.jsx)(b, { role: s, disabled: o }),
              (0, a.jsx)(C.default, { guild: t, disabled: o, role: s }),
              (0, a.jsx)(B, { role: s, guildId: t.id }),
              (0, a.jsx)(u.FormDivider, { className: M.divider }),
              (0, a.jsx)(y, { role: s, disabled: o }),
              E
                ? (0, a.jsxs)(a.Fragment, {
                    children: [
                      (0, a.jsx)(u.FormDivider, { className: M.divider }),
                      (0, a.jsx)(x.ImpersonateRoleDescription, {
                        guildId: t.id,
                        role: s,
                      }),
                    ],
                  })
                : null,
            ],
          }),
        });
      }
    },
    91816: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          useScrolledToTop: function () {
            return S;
          },
          default: function () {
            return m;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("446674"),
        i = s("77078"),
        r = s("272030"),
        o = s("454273"),
        d = s("726527"),
        u = s("555158"),
        c = s("433487"),
        E = s("36402"),
        _ = s("364222"),
        I = s("53948"),
        T = s("782340"),
        f = s("184963");
      function S() {
        let [e, t] = l.useState(!0);
        return {
          scrolledToTop: e,
          handleScroll: function (e) {
            t(0 === e.currentTarget.scrollTop);
          },
        };
      }
      function m(e) {
        let {
            guild: t,
            role: S,
            selectedSection: m,
            setSelectedSection: N,
          } = e,
          g = l.useCallback(
            e => {
              N(e);
            },
            [N]
          ),
          h = (0, n.useStateFromStores)(
            [E.default],
            () => {
              var e;
              return null === (e = E.default.getRoleMemberCount(t.id)) ||
                void 0 === e
                ? void 0
                : e[S.id];
            },
            [S.id, t.id]
          ),
          C = (0, o.isEveryoneRoleId)(t.id, S.id),
          R = (0, _.default)(S);
        l.useEffect(() => {
          C && N(I.GuildSettingsRoleEditSections.PERMISSIONS);
        }, [C, N]);
        let x = (0, d.useHasGuildRoleItems)(t, S);
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsxs)("div", {
              className: f.titleContainer,
              children: [
                (0, a.jsx)(i.Text, {
                  className: f.titleText,
                  color: "header-primary",
                  variant: "text-md/semibold",
                  children: T.default.Messages.ROLE_EDIT_TITLE_WITH_NAME.format(
                    { roleName: S.name }
                  ),
                }),
                x
                  ? (0, a.jsx)(i.Clickable, {
                      className: f.menu,
                      onClick: function (e) {
                        (0, r.openContextMenuLazy)(e, async () => {
                          let { default: e } = await s
                            .el("726527")
                            .then(s.bind(s, "726527"));
                          return s =>
                            (0, a.jsx)(e, { ...s, guild: t, role: S });
                        });
                      },
                      "aria-label": T.default.Messages.MORE_OPTIONS,
                      children: (0, a.jsx)(c.default, {}),
                    })
                  : null,
              ],
            }),
            null != R
              ? (0, a.jsx)(u.default, {
                  messageType: u.HelpMessageTypes.WARNING,
                  children: R,
                })
              : null,
            (0, a.jsxs)(i.TabBar, {
              className: f.tabBar,
              "aria-label": T.default.Messages.OPTIONS,
              selectedItem: m,
              type: "top",
              look: "brand",
              onItemSelect: g,
              children: [
                (0, a.jsx)(i.TabBar.Item, {
                  className: f.tabBarItem,
                  id: I.GuildSettingsRoleEditSections.DISPLAY,
                  disabled: C,
                  children: T.default.Messages.ROLE_EDIT_TAB_DISPLAY,
                }),
                (0, a.jsx)(i.TabBar.Item, {
                  className: f.tabBarItem,
                  id: I.GuildSettingsRoleEditSections.PERMISSIONS,
                  children: T.default.Messages.ROLE_EDIT_TAB_PERMISSIONS,
                }),
                (0, a.jsx)(i.TabBar.Item, {
                  className: f.tabBarItem,
                  id: I.GuildSettingsRoleEditSections.VERIFICATIONS,
                  disabled: C,
                  children: T.default.Messages.ROLE_EDIT_TAB_VERIFICATION,
                }),
                (0, a.jsx)(i.TabBar.Item, {
                  className: f.tabBarItem,
                  id: I.GuildSettingsRoleEditSections.MEMBERS,
                  disabled: C,
                  children: C
                    ? T.default.Messages.ROLE_EDIT_TAB_MANAGE_MEMBERS
                    : T.default.Messages.ROLE_EDIT_TAB_MEMBERS_WITH_LIST.format(
                        { numMembers: String(h) }
                      ),
                }),
              ],
            }),
          ],
        });
      }
    },
    893448: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return B;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("446674"),
        o = s("77078"),
        d = s("272030"),
        u = s("599417"),
        c = s("750560"),
        E = s("506885"),
        _ = s("981601"),
        I = s("697218"),
        T = s("555158"),
        f = s("810567"),
        S = s("381546"),
        m = s("155207"),
        N = s("599110"),
        g = s("36402"),
        h = s("592407"),
        C = s("531493"),
        R = s("986654"),
        x = s("50693"),
        L = s("91816"),
        O = s("120318"),
        p = s("53948"),
        A = s("49111"),
        M = s("782340"),
        D = s("688354"),
        v = s("445494");
      async function G(e, t, s) {
        let l = e.roles.filter(e => e !== s);
        try {
          await h.default.updateMemberRoles(t, e.id, l, [], [s]);
        } catch (t) {
          let e = new u.default(t);
          (0, o.openModal)(t =>
            (0, a.jsx)(o.ConfirmModal, {
              ...t,
              header: M.default.Messages.ERROR_GENERIC_TITLE,
              confirmText: M.default.Messages.OKAY,
              confirmButtonColor: o.Button.Colors.BRAND,
              children: (0, a.jsx)(o.Text, {
                color: "text-normal",
                variant: "text-md/normal",
                children: e.getAnyErrorMessage(),
              }),
            })
          );
        }
      }
      function j(e) {
        let { member: t, guildId: n, roleId: r, locked: u } = e,
          T = l.useMemo(() => ({ [n]: [t.id] }), [n, t.id]);
        function f(e) {
          if ((e.stopPropagation(), !u)) {
            if (e.shiftKey) {
              G(t, n, r);
              return;
            }
            !(function (e, t, s) {
              let l = C.default.getRole(s);
              (0, o.openModal)(n =>
                (0, a.jsxs)(o.ConfirmModal, {
                  ...n,
                  header: M.default.Messages.ROLE_REMOVE_MEMBER_CONFIRM_TITLE,
                  confirmText: M.default.Messages.REMOVE,
                  cancelText: M.default.Messages.CANCEL,
                  onConfirm: () => G(e, t, s),
                  children: [
                    (0, a.jsx)(o.Text, {
                      color: "text-normal",
                      variant: "text-md/normal",
                      children:
                        M.default.Messages.ROLE_REMOVE_MEMBER_CONFIRM_BODY.format(
                          {
                            username: e.name,
                            roleName: null == l ? void 0 : l.name,
                          }
                        ),
                    }),
                    (0, a.jsx)(o.Text, {
                      className: D.removeTip,
                      color: "text-muted",
                      variant: "text-md/normal",
                      children:
                        M.default.Messages.ROLE_REMOVE_MEMBER_CONFIRM_TIP,
                    }),
                  ],
                })
              );
            })(t, n, r);
          }
        }
        function m(e) {
          let l = I.default.getUser(t.id);
          null != l &&
            (0, d.openContextMenuLazy)(e, async () => {
              let { default: e } = await s
                .el("539593")
                .then(s.bind(s, "539593"));
              return t =>
                (0, a.jsx)(e, { ...t, user: l, guildId: n, showChatItems: !1 });
            });
        }
        return (
          (0, c.useSubscribeGuildMembers)(T),
          (0, a.jsx)("div", {
            className: v.contentWidth,
            children: (0, a.jsx)(o.Popout, {
              renderPopout: e =>
                (0, a.jsx)(_.default, { guildId: n, userId: t.id, ...e }),
              position: "left",
              preload: () => (0, E.default)(t.id, t.avatarURL, { guildId: n }),
              children: e =>
                (0, a.jsxs)(o.Clickable, {
                  ...e,
                  className: D.memberRow,
                  onContextMenu: m,
                  children: [
                    (0, a.jsx)(O.default, {
                      className: D.memberDetails,
                      avatarURL: t.avatarURL,
                      name: t.name,
                      bot: t.bot,
                      verifiedBot: t.verifiedBot,
                      userTag: t.userTag,
                    }),
                    (0, a.jsx)("div", {
                      className: D.removeButtonContainer,
                      children: (0, a.jsx)(o.Tooltip, {
                        text: u
                          ? M.default.Messages.ROLE_REMOVE_MEMBER_MANAGED
                          : M.default.Messages.ROLE_REMOVE_MEMBER_CONFIRM_TITLE,
                        position: "top",
                        children: e =>
                          (0, a.jsx)(o.Clickable, {
                            ...e,
                            className: i(D.removeButton, {
                              [D.removeButtonDisabled]: u,
                            }),
                            onClick: f,
                            children: (0, a.jsx)(S.default, {
                              width: 16,
                              height: 16,
                            }),
                          }),
                      }),
                    }),
                  ],
                }),
            }),
          })
        );
      }
      function U(e) {
        let { handleAddClick: t, locked: s } = e;
        return (0, a.jsx)("div", {
          className: v.contentWidth,
          children: (0, a.jsxs)("div", {
            className: i(D.memberRow, D.emptyRowContainer),
            children: [
              (0, a.jsx)(m.default, {}),
              (0, a.jsx)(o.Text, {
                className: D.emptyRowText,
                variant: "text-sm/semibold",
                color: "text-muted",
                children:
                  M.default.Messages.ROLE_EDIT_MEMBERS_NO_SEARCH_RESULTS.format(
                    {
                      addMembersHook: function (e, l) {
                        return s
                          ? null
                          : (0, a.jsx)(
                              o.Anchor,
                              { onClick: t, children: e },
                              l
                            );
                      },
                    }
                  ),
              }),
            ],
          }),
        });
      }
      function P(e) {
        let {
            guildId: t,
            roleId: s,
            query: n,
            headerHeight: i,
            locked: r,
            onScroll: d,
            roleMembers: u,
            handleAddClick: c,
          } = e,
          E = l.useMemo(() => n.trim().toLowerCase(), [n]);
        (0, R.useQueryGuildMembers)(t, E);
        let _ = l.useMemo(
            () => u.filter(e => (0, R.filterFullMembersByQuery)(E, e)),
            [u, E]
          ),
          I = l.useMemo(
            () => _.sort((e, t) => e.name.localeCompare(t.name)),
            [_]
          );
        return (0, a.jsx)(o.ListAuto, {
          className: D.list,
          sections: [Math.max(_.length, 1)],
          sectionHeight: i,
          renderSection: () =>
            (0, a.jsx)("div", { style: { height: i } }, "section"),
          style: { scrollPaddingTop: i },
          rowHeight: 40,
          renderRow: function (e) {
            let { row: l } = e;
            if (0 === I.length)
              return (0, a.jsx)(U, { handleAddClick: c, locked: r }, "empty");
            let n = I[l];
            return (0, a.jsx)(
              j,
              { member: n, guildId: t, roleId: s, locked: r },
              n.id
            );
          },
          onScroll: d,
        });
      }
      function b(e) {
        let { query: t, setQuery: s, locked: l, handleAddClick: n } = e;
        return (0, a.jsxs)("div", {
          className: D.searchContainer,
          children: [
            (0, a.jsx)(f.default, {
              size: f.default.Sizes.MEDIUM,
              query: t,
              onChange: s,
              onClear: () => s(""),
              placeholder: M.default.Messages.SEARCH_MEMBERS,
              "aria-label": M.default.Messages.SEARCH_MEMBERS,
            }),
            (0, a.jsx)(o.Button, {
              className: D.addButton,
              size: o.Button.Sizes.SMALL,
              onClick: n,
              disabled: l,
              children: M.default.Messages.ROLE_ADD_MEMBERS_BUTTON,
            }),
          ],
        });
      }
      function B(e) {
        let { guild: t, role: n, locked: d, setSelectedSection: u } = e,
          [c, E] = l.useState(""),
          { headerHeight: _, headerRef: I } = (0, x.default)(0),
          { scrolledToTop: f, handleScroll: S } = (0, L.useScrolledToTop)(),
          m = n.managed || d,
          h = (0, R.useGuildRoleMembers)(t.id, n.id),
          C = (0, r.useStateFromStores)([g.default], () => {
            var e, s;
            return null !==
              (s =
                null === (e = g.default.getRoleMemberCount(t.id)) ||
                void 0 === e
                  ? void 0
                  : e[n.id]) && void 0 !== s
              ? s
              : 0;
          }),
          O = C > h.length,
          G = () => {
            N.default.track(A.AnalyticEvents.OPEN_MODAL, {
              type: "Add Role Members",
              location_page: "Role Settings",
              location_section: "Members",
            }),
              (0, o.openModalLazy)(async () => {
                let { default: e } = await s
                  .el("744581")
                  .then(s.bind(s, "744581"));
                return s =>
                  (0, a.jsx)(e, { ...s, roleId: n.id, guildId: t.id });
              });
          };
        return (0, a.jsxs)("div", {
          className: D.container,
          children: [
            (0, a.jsx)("div", {
              className: D.headerContainer,
              ref: I,
              children: (0, a.jsx)("div", {
                className: v.contentWidth,
                children: (0, a.jsxs)("div", {
                  className: i(v.header, { [v.stickyHeaderElevated]: !f }),
                  children: [
                    (0, a.jsx)(L.default, {
                      guild: t,
                      role: n,
                      selectedSection: p.GuildSettingsRoleEditSections.MEMBERS,
                      setSelectedSection: u,
                    }),
                    (0, a.jsx)(b, {
                      query: c,
                      setQuery: E,
                      locked: m,
                      handleAddClick: G,
                    }),
                    O
                      ? (0, a.jsx)(T.default, {
                          className: D.searchWarning,
                          messageType: T.HelpMessageTypes.INFO,
                          children:
                            M.default.Messages.ROLE_EDIT_MEMBERS_MISSING,
                        })
                      : null,
                  ],
                }),
              }),
            }),
            (0, a.jsx)(P, {
              headerHeight: _ + 8,
              query: c,
              guildId: t.id,
              roleId: n.id,
              locked: m,
              onScroll: S,
              roleMembers: h,
              handleAddClick: G,
            }),
          ],
        });
      }
    },
    376252: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return M;
          },
        }),
        s("70102"),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("316693"),
        o = s("446674"),
        d = s("77078"),
        u = s("900676"),
        c = s("957255"),
        E = s("697218"),
        _ = s("810567"),
        I = s("599110"),
        T = s("465305"),
        f = s("991170"),
        S = s("766419"),
        m = s("507453"),
        N = s("50693"),
        g = s("91816"),
        h = s("449804"),
        C = s("53948"),
        R = s("49111"),
        x = s("782340"),
        L = s("652789"),
        O = s("445494");
      function p(e) {
        let { guild: t, role: s, locked: n } = e,
          i = (0, o.useStateFromStores)([E.default], () =>
            E.default.getCurrentUser()
          ),
          u = l.useMemo(
            () => f.default.computePermissions({ user: i, context: t }),
            [i, t]
          ),
          c = l.useMemo(
            () => ({ [s.id]: { ...s, permissions: f.default.NONE } }),
            [s]
          ),
          _ = l.useMemo(
            () =>
              f.default.computePermissions({ user: i, context: t, roles: c }),
            [i, t, c]
          ),
          I = !r.default.equals(u, _);
        return (0, a.jsx)("div", {
          className: L.clearButtonWrapper,
          children: (0, a.jsx)(d.Tooltip, {
            text: I ? x.default.Messages.HELP_CLEAR_PERMISSIONS : null,
            position: "top",
            color: d.Tooltip.Colors.RED,
            children: e => {
              let { onMouseEnter: t, onMouseLeave: l } = e;
              return (0, a.jsx)(d.Button, {
                className: L.clearButton,
                size: d.Button.Sizes.TINY,
                look: d.Button.Looks.LINK,
                color: d.Button.Colors.LINK,
                onClick: () => (0, S.clearRolePermissions)(s.id),
                onMouseEnter: t,
                onMouseLeave: l,
                disabled:
                  r.default.equals(s.permissions, f.default.NONE) || I || n,
                children: x.default.Messages.ROLE_PERMISSIONS_CLEAR_PERMISSIONS,
              });
            },
          }),
        });
      }
      function A(e) {
        let { guild: t, role: s, specs: l, locked: n } = e;
        if (0 === l.length)
          return (0, a.jsxs)("div", {
            className: L.noResultsContainer,
            children: [
              (0, a.jsx)(m.default, { className: L.noResults }),
              (0, a.jsx)(d.Text, {
                variant: "text-sm/normal",
                children: x.default.Messages.ROLE_PERMISSIONS_EMPTY_TEXT,
              }),
            ],
          });
        function i(e) {
          return c.default.can(e, t)
            ? !c.default.can(e, t, null, {
                [s.id]: {
                  ...s,
                  permissions: r.default.remove(s.permissions, e),
                },
              }) && x.default.Messages.HELP_SINGULAR_PERMISSION
            : x.default.Messages.HELP_MISSING_PERMISSION;
        }
        return (0, a.jsxs)("div", {
          className: L.permissionsWrapper,
          children: [
            (0, a.jsx)(p, { guild: t, role: s, locked: n }),
            l.map((e, t) =>
              (0, a.jsx)(
                u.default,
                {
                  className: L.permissionsForm,
                  spec: e,
                  permissions: s.permissions,
                  locked: n,
                  onChange: (e, t) => {
                    if ("string" == typeof t)
                      throw Error("Unexpected string `allow`");
                    (0, S.updateRolePermissions)(s.id, e, t);
                  },
                  permissionRender: i,
                },
                t
              )
            ),
          ],
        });
      }
      function M(e) {
        let {
            guild: t,
            role: s,
            locked: n,
            setSelectedSection: r,
            initialSearchQuery: o,
          } = e,
          [u, c] = l.useState(null != o ? o : ""),
          E = l.useMemo(() => T.default.generateGuildPermissionSpec(t), [t]),
          f = E.map(e => ({
            ...e,
            permissions: e.permissions.filter(e => {
              let t = u.trimStart().toLowerCase();
              return (
                e.title.toLowerCase().includes(t) ||
                (null != e.description &&
                  e.description.toString().toLowerCase().includes(t))
              );
            }),
          })).filter(e => e.permissions.length > 0),
          { headerHeight: S, headerRef: m } = (0, N.default)(0),
          { scrolledToTop: p, handleScroll: M } = (0, g.useScrolledToTop)(),
          D = l.useRef(!1);
        return (
          l.useEffect(() => {
            !D.current &&
              "" !== u.trimStart() &&
              (I.default.track(R.AnalyticEvents.SEARCH_STARTED, {
                search_type: "Permissions",
              }),
              (D.current = !0));
          }, [u]),
          (0, a.jsx)(d.AdvancedScrollerAuto, {
            className: L.scroller,
            style: { scrollPaddingTop: S },
            onScroll: M,
            children: (0, a.jsxs)("div", {
              className: O.contentWidth,
              children: [
                (0, a.jsxs)("div", {
                  className: i(O.header, O.stickyHeader, {
                    [O.stickyHeaderElevated]: !p,
                  }),
                  ref: m,
                  children: [
                    (0, a.jsx)(g.default, {
                      guild: t,
                      role: s,
                      selectedSection:
                        C.GuildSettingsRoleEditSections.PERMISSIONS,
                      setSelectedSection: r,
                    }),
                    (0, a.jsx)("div", {
                      className: L.noticeContainer,
                      children: (0, a.jsx)(h.default, { role: s }),
                    }),
                    (0, a.jsx)("div", {
                      className: L.searchContainer,
                      children: (0, a.jsx)(_.default, {
                        size: _.default.Sizes.MEDIUM,
                        query: u,
                        onChange: c,
                        onClear: () => c(""),
                        placeholder:
                          x.default.Messages
                            .ROLE_PERMISSIONS_SEARCH_PLACEHOLDER,
                        "aria-label":
                          x.default.Messages
                            .ROLE_PERMISSIONS_SEARCH_PLACEHOLDER,
                      }),
                    }),
                  ],
                }),
                (0, a.jsx)(A, { guild: t, role: s, specs: f, locked: n }),
              ],
            }),
          })
        );
      }
    },
    728955: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return D;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("476042"),
        o = s("509043"),
        d = s("446674"),
        u = s("77078"),
        c = s("272030"),
        E = s("851387"),
        _ = s("206230"),
        I = s("454273"),
        T = s("339023"),
        f = s("957255"),
        S = s("730988"),
        m = s("246053"),
        N = s("151185"),
        g = s("531493"),
        h = s("476324"),
        C = s("983521"),
        R = s("91816"),
        x = s("53948"),
        L = s("49111"),
        O = s("782340"),
        p = s("346431");
      let A = "DRAGGABLE_ROLE";
      function M(e) {
        var t, l;
        let n,
          {
            guild: d,
            role: E,
            highestRole: _,
            selectedItem: f,
            onClick: S,
            currentPosition: m,
            onDragStart: N,
            onDragReset: g,
            onDragComplete: C,
            roleStyle: R,
          } = e,
          x = (0, h.useLockTooltip)(d, _, E),
          O = (0, I.isEveryoneRoleId)(d.id, E.id),
          M = null == x && !O,
          D =
            (null === (t = E.tags) || void 0 === t
              ? void 0
              : t.guild_connections) !== void 0,
          [, v] = (0, r.useDrag)({
            type: A,
            item: () => (N(E.id), { id: E.id, position: m }),
            canDrag: () => M,
            end: (e, t) => {
              let s = t.getDropResult();
              if (null == s) {
                g();
                return;
              }
              C(s.roleId);
            },
          }),
          [{ dragSourcePosition: G }, j] = (0, r.useDrop)({
            accept: A,
            canDrop: () => M,
            collect: e => {
              let t = e.getItem();
              return null != t && e.isOver() && e.canDrop()
                ? { dragSourcePosition: t.position }
                : { dragSourcePosition: null };
            },
            drop: () => ({ roleId: E.id }),
          }),
          U =
            null !== (l = E.colorString) && void 0 !== l
              ? l
              : (0, o.int2hex)(L.DEFAULT_ROLE_COLOR);
        return (
          (n = D
            ? (0, a.jsx)(T.default, {
                size: 12,
                color: E.colorString,
                className: p.verifiedRoleIcon,
              })
            : "dot" === R
              ? (0, a.jsx)(u.RoleDot, { color: U, background: !1, tooltip: !1 })
              : (0, a.jsx)(u.RoleCircle, { color: U })),
          (0, a.jsxs)(u.TabBar.Item, {
            className: i(p.row, {
              [p.dragBefore]: null !== G && m < G,
              [p.dragAfter]: null !== G && m > G,
            }),
            id: E.id,
            selectedItem: f,
            itemType: "side",
            onClick: S,
            onContextMenu: function (e) {
              (0, c.openContextMenuLazy)(e, async () => {
                let { default: e } = await s
                  .el("726527")
                  .then(s.bind(s, "726527"));
                return t => (0, a.jsx)(e, { ...t, role: E, guild: d });
              });
            },
            "aria-label": E.name,
            clickableRef: e => {
              var t;
              return v(
                j(
                  null !== (t = null == e ? void 0 : e.ref) && void 0 !== t
                    ? t
                    : null
                )
              );
            },
            children: [
              n,
              null != x
                ? (0, a.jsx)(h.default, { className: p.lock, tooltipText: x })
                : null,
              (0, a.jsx)(u.Text, {
                variant: "text-sm/medium",
                color: O ? "header-primary" : "interactive-active",
                lineClamp: 1,
                children: E.name,
              }),
            ],
          })
        );
      }
      function D(e) {
        let {
            guild: t,
            currentRoleId: s,
            setCurrentRoleId: n,
            setSelectedSection: r,
          } = e,
          o = (0, d.useStateFromStores)([g.default], () => g.default.roles),
          c = (0, d.useStateFromStores)([f.default], () =>
            f.default.getHighestRole(t)
          ),
          I = (0, d.useStateFromStores)([_.default], () => _.default.roleStyle),
          [T, h] = l.useState(o.length),
          { scrolledToTop: L, handleScroll: A } = (0, R.useScrolledToTop)(),
          {
            handleDragStart: D,
            handleDragReset: v,
            handleDragComplete: G,
          } = (0, C.default)(o),
          j = l.useRef(null),
          U = l.useCallback(
            e => {
              var t, s;
              let a = o.findIndex(t => t.id === e);
              null === (s = j.current) ||
                void 0 === s ||
                null === (t = s.getScrollerNode()) ||
                void 0 === t ||
                t.scrollTo({ top: Math.max((a - 2) * 34, 0) });
            },
            [o]
          );
        l.useEffect(() => {
          U(s);
        }, []),
          l.useEffect(() => {
            o.length > T && U(s), o.length !== T && h(o.length);
          }, [o.length, T, h, U, s]);
        let P = () => {
          E.default.createRole(t.id),
            r(x.GuildSettingsRoleEditSections.DISPLAY);
        };
        return (0, a.jsx)(S.default.Sidebar, {
          className: p.sidebar,
          children: (0, a.jsxs)("div", {
            className: p.container,
            children: [
              (0, a.jsxs)("div", {
                className: i(p.titleContainer, { [p.titleElevated]: !L }),
                children: [
                  (0, a.jsxs)(u.Clickable, {
                    className: p.title,
                    onClick: () => n(null),
                    children: [
                      (0, a.jsx)(m.default, {
                        direction: m.default.Directions.LEFT,
                      }),
                      (0, a.jsx)(u.Text, {
                        className: p.titleText,
                        variant: "text-md/semibold",
                        color: "none",
                        children: O.default.Messages.BACK,
                      }),
                    ],
                  }),
                  (0, a.jsx)(u.Tooltip, {
                    position: "top",
                    "aria-label":
                      O.default.Messages
                        .GUILD_SETTINGS_ACTION_FILTER_ROLE_CREATE,
                    text: (0, a.jsx)(u.Text, {
                      className: p.tooltip,
                      variant: "text-sm/normal",
                      children:
                        O.default.Messages
                          .GUILD_SETTINGS_ACTION_FILTER_ROLE_CREATE,
                    }),
                    children: e =>
                      (0, a.jsx)(u.Clickable, {
                        className: p.addRole,
                        ...e,
                        onClick: P,
                        children: (0, a.jsx)(N.default, {
                          width: 20,
                          height: 20,
                        }),
                      }),
                  }),
                ],
              }),
              (0, a.jsx)(u.AdvancedScroller, {
                className: p.list,
                ref: j,
                onScroll: A,
                children: (0, a.jsx)(u.TabBar, {
                  selectedItem: s,
                  onItemSelect: e => n(e),
                  orientation: "vertical",
                  children: o.map((e, l) =>
                    (0, a.jsx)(
                      M,
                      {
                        guild: t,
                        role: e,
                        highestRole: c,
                        selectedItem: s,
                        onClick: () => n(e.id),
                        currentPosition: l,
                        onDragStart: D,
                        onDragReset: v,
                        onDragComplete: G,
                        roleStyle: I,
                      },
                      e.id
                    )
                  ),
                }),
              }),
            ],
          }),
        });
      }
    },
    902750: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          ImpersonateRoleDescription: function () {
            return E;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("479756"),
        i = s("507950"),
        r = s("246053"),
        o = s("592407"),
        d = s("49111"),
        u = s("782340"),
        c = s("717649");
      function E(e) {
        let { guildId: t, role: s } = e;
        return (0, a.jsx)(a.Fragment, {
          children: (0, a.jsxs)(l.FormItem, {
            title: u.default.Messages.VIEW_AS_ROLE,
            className: c.container,
            children: [
              (0, a.jsx)(l.Text, {
                variant: "text-sm/normal",
                children: u.default.Messages.VIEW_AS_ROLE_DESCRIPTION,
              }),
              (0, a.jsxs)(l.Button, {
                className: c.button,
                innerClassName: c.buttonInner,
                size: l.Button.Sizes.SMALL,
                color: l.Button.Colors.PRIMARY,
                onClick: () => {
                  o.default.close(),
                    (0, n.startImpersonating)(t, {
                      type: i.ImpersonateType.ROLES,
                      roles: { [s.id]: s },
                      returnToSection: d.GuildSettingsSections.ROLES,
                    });
                },
                children: [
                  u.default.Messages.VIEW_AS_ROLE,
                  (0, a.jsx)(r.default, {
                    width: 16,
                    height: 16,
                    direction: r.default.Directions.RIGHT,
                    className: c.arrowIcon,
                  }),
                ],
              }),
            ],
          }),
        });
      }
    },
    449804: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        }),
        s("702976");
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("423487"),
        i = s("568734"),
        r = s("385334"),
        o = s("49111"),
        d = s("782340"),
        u = s("855157"),
        c = e => {
          let { role: t } = e;
          return (0, i.hasFlag)(t.flags, o.RoleFlags.IN_PROMPT)
            ? (0, r.isRolePowerful)(t)
              ? (0, a.jsxs)("div", {
                  className: u.notice,
                  children: [
                    (0, a.jsx)(n.default, { className: u.noticeIconPowerful }),
                    (0, a.jsx)(l.Text, {
                      variant: "text-sm/normal",
                      children:
                        d.default.Messages.ROLE_IN_PROMPT_POWERFUL_NOTICE_TEXT,
                    }),
                  ],
                })
              : (0, a.jsxs)("div", {
                  className: u.notice,
                  children: [
                    (0, a.jsx)(n.default, { className: u.noticeIcon }),
                    (0, a.jsx)(l.Text, {
                      variant: "text-sm/normal",
                      children: d.default.Messages.ROLE_IN_PROMPT_NOTICE_TEXT,
                    }),
                  ],
                })
            : null;
        };
    },
    120318: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("414456"),
        n = s.n(l),
        i = s("65597"),
        r = s("77078"),
        o = s("102985"),
        d = s("79798"),
        u = s("470668");
      function c(e) {
        let {
            className: t,
            avatarURL: s,
            name: l,
            bot: c,
            verifiedBot: E,
            userTag: _,
          } = e,
          I = (0, i.default)(
            [o.default],
            () => o.default.hidePersonalInformation
          );
        return (0, a.jsxs)("div", {
          className: n(u.container, t),
          children: [
            (0, a.jsx)(r.Avatar, {
              className: u.avatar,
              src: s,
              size: r.AvatarSizes.SIZE_24,
              "aria-label": l,
            }),
            (0, a.jsxs)("div", {
              className: u.textContainer,
              children: [
                (0, a.jsx)(r.Text, {
                  tag: "span",
                  className: u.name,
                  color: "header-primary",
                  variant: "text-sm/semibold",
                  children: l,
                }),
                c
                  ? (0, a.jsx)(d.default, { className: u.botTag, verified: E })
                  : null,
                I
                  ? null
                  : (0, a.jsx)(r.Text, {
                      tag: "span",
                      color: "interactive-normal",
                      className: u.userTag,
                      variant: "text-sm/normal",
                      children: _,
                    }),
              ],
            }),
          ],
        });
      }
    },
    983521: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return i;
          },
        }),
        s("222007");
      var a = s("372283"),
        l = s("766419");
      function n(e) {
        (0, l.updateRoleSort)([...e.map(e => e.id)]);
      }
      function i(e) {
        return (0, a.default)(e, n);
      }
    },
    50693: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return l;
          },
        }),
        s("222007");
      var a = s("884691");
      function l(e) {
        let [t, s] = a.useState(e),
          l = a.useRef(null);
        return (
          a.useEffect(() => {
            var t, a;
            s(
              null !==
                (a =
                  null === (t = l.current) || void 0 === t
                    ? void 0
                    : t.offsetHeight) && void 0 !== a
                ? a
                : e
            );
          }),
          { headerHeight: t, headerRef: l }
        );
      }
    },
    364222: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return _;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("446674"),
        i = s("713841"),
        r = s("376556"),
        o = s("37785"),
        d = s("592407"),
        u = s("900938"),
        c = s("49111"),
        E = s("782340");
      function _(e) {
        let t = (0, n.useStateFromStores)(
          [u.default],
          () => u.default.getProps().integrations
        );
        return l.useMemo(
          () =>
            (function (e, t) {
              var s, l, n, u;
              let _;
              if (!e.managed) return null;
              let I = null === (s = e.tags) || void 0 === s ? void 0 : s.bot_id,
                T =
                  null === (l = e.tags) || void 0 === l
                    ? void 0
                    : l.integration_id,
                f =
                  (null === (n = e.tags) || void 0 === n
                    ? void 0
                    : n.premium_subscriber) !== void 0,
                S =
                  (null === (u = e.tags) || void 0 === u
                    ? void 0
                    : u.guild_connections) !== void 0;
              if (
                (null != I
                  ? (_ =
                      null == t
                        ? void 0
                        : t.find(e => {
                            var t;
                            let { application: s } = e;
                            return (
                              (null == s
                                ? void 0
                                : null === (t = s.bot) || void 0 === t
                                  ? void 0
                                  : t.id) === I
                            );
                          }))
                  : null != T &&
                    (_ =
                      null == t
                        ? void 0
                        : t.find(e => {
                            let { id: t } = e;
                            return t === T;
                          })),
                null != _ && null != _.application && null != _.name)
              ) {
                let e = _.application.id,
                  t = _.name;
                [c.PlatformTypes.TWITCH, c.PlatformTypes.YOUTUBE].includes(
                  _.type
                ) &&
                  (t = "".concat(r.default.get(_.type).name, " - ").concat(t));
                let s = () => {
                  d.default.setSection(c.GuildSettingsSections.INTEGRATIONS),
                    i.default.setSection(
                      c.IntegrationSettingsSections.APPLICATION,
                      e
                    );
                };
                return E.default.Messages.MANAGED_ROLE_INTEGRATION_LINKED_EXPLANATION.format(
                  {
                    name: t,
                    integrationNameHook: (e, t) =>
                      (0, a.jsx)(o.default, { onClick: s, children: e }, t),
                  }
                );
              }
              return f
                ? E.default.Messages.MANAGED_ROLE_PREMIUM_SUBSCRIBER_EXPLANATION
                : S
                  ? E.default.Messages
                      .MANAGED_ROLE_GUILD_CONNECTIONS_EXPLANATION
                  : E.default.Messages.MANAGED_ROLE_EXPLAINATION;
            })(e, t),
          [e, t]
        );
      }
    },
    431451: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          setSafetyPage: function () {
            return l;
          },
        });
      var a = s("913144");
      function l(e) {
        a.default.dispatch({ type: "GUILD_SETTINGS_SAFETY_PAGE", page: e });
      }
    },
    353830: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return E;
          },
        });
      var a = s("446674"),
        l = s("913144"),
        n = s("900938"),
        i = s("772871"),
        r = s("49111");
      let o = i.GuildSettingsSafetyPage.OVERVIEW,
        d = null;
      function u(e) {
        let { subsection: t } = e;
        switch (t) {
          case r.GuildSettingsSubsections.SAFETY_AUTOMOD:
            o = i.GuildSettingsSafetyPage.AUTOMOD;
            break;
          case r.GuildSettingsSubsections.SAFETY_DM_AND_SPAM_PROTECTION:
            o = i.GuildSettingsSafetyPage.DM_AND_SPAM_PROTECTION;
            break;
          case r.GuildSettingsSubsections.SAFETY_CAPTCHA_AND_RAID_PROTECTION:
            o = i.GuildSettingsSafetyPage.CAPTCHA_AND_RAID_PROTECTION;
            break;
          case r.GuildSettingsSubsections.SAFETY_PERMISSIONS:
            o = i.GuildSettingsSafetyPage.PERMISSIONS;
            break;
          case r.GuildSettingsSubsections.SAFETY_OVERVIEW:
          default:
            o = i.GuildSettingsSafetyPage.OVERVIEW;
        }
      }
      class c extends a.default.Store {
        getCurrentPage() {
          return o;
        }
      }
      c.displayName = "GuildSettingsSafetyStore";
      var E = new c(l.default, {
        GUILD_SETTINGS_INIT: function () {
          if (n.default.getGuildId() === d) return !1;
          d = n.default.getGuildId();
        },
        GUILD_SETTINGS_SET_SECTION: u,
        GUILD_SETTINGS_SAFETY_SET_SUBSECTION: u,
        GUILD_SETTINGS_SAFETY_PAGE: function (e) {
          let { page: t } = e;
          o = t;
        },
      });
    },
    772871: function (e, t, s) {
      "use strict";
      var a, l;
      s.r(t),
        s.d(t, {
          GuildSettingsSafetyPage: function () {
            return a;
          },
        }),
        ((l = a || (a = {}))[(l.OVERVIEW = 0)] = "OVERVIEW"),
        (l[(l.CAPTCHA_AND_RAID_PROTECTION = 1)] =
          "CAPTCHA_AND_RAID_PROTECTION"),
        (l[(l.DM_AND_SPAM_PROTECTION = 2)] = "DM_AND_SPAM_PROTECTION"),
        (l[(l.AUTOMOD = 3)] = "AUTOMOD"),
        (l[(l.PERMISSIONS = 4)] = "PERMISSIONS");
    },
    614840: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return C;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("446674"),
        i = s("151426"),
        r = s("77078"),
        o = s("10641"),
        d = s("329606"),
        u = s("305961"),
        c = s("137215"),
        E = s("900938"),
        _ = s("431451"),
        I = s("353830"),
        T = s("772871"),
        f = s("900084"),
        S = s("860170"),
        m = s("766829"),
        N = s("994428"),
        g = s("782340"),
        h = s("854743");
      function C(e) {
        let t,
          { hideChangelog: s } = e,
          C = (0, n.useStateFromStores)([E.default], () =>
            E.default.getGuildId()
          ),
          R = (0, n.useStateFromStores)([u.default], () =>
            u.default.getGuild(C)
          ),
          x = (0, n.useStateFromStores)([I.default], () =>
            I.default.getCurrentPage()
          );
        if (
          (l.useEffect(() => {
            (0, o.markDismissibleContentAsDismissed)(
              i.DismissibleContent.COMMUNITY_GUILD_SETTINGS_SAFETY,
              { dismissAction: N.ContentDismissActionType.AUTO }
            );
          }, []),
          null == R)
        )
          return null;
        let L = (0, m.getGuildSafetySettings)(R);
        switch (x) {
          case T.GuildSettingsSafetyPage.OVERVIEW:
            t = (0, a.jsx)(f.default, { guild: R, hideChangelog: s });
            break;
          case T.GuildSettingsSafetyPage.CAPTCHA_AND_RAID_PROTECTION:
            t = (0, a.jsx)(S.default, {
              title:
                g.default.Messages
                  .GUILD_SETTINGS_SAFETY_CAPTCHA_RAID_PROTECTION,
              settings:
                L[T.GuildSettingsSafetyPage.CAPTCHA_AND_RAID_PROTECTION],
            });
            break;
          case T.GuildSettingsSafetyPage.DM_AND_SPAM_PROTECTION:
            t = (0, a.jsx)(S.default, {
              title:
                g.default.Messages.GUILD_SETTINGS_SAFETY_DM_SPAM_PROTECTION,
              settings: L[T.GuildSettingsSafetyPage.DM_AND_SPAM_PROTECTION],
            });
            break;
          case T.GuildSettingsSafetyPage.AUTOMOD:
            t = (0, a.jsx)(d.default, { guildId: R.id });
            break;
          case T.GuildSettingsSafetyPage.PERMISSIONS:
            t = (0, a.jsx)(S.default, {
              title: g.default.Messages.GUILD_SETTINGS_SAFETY_PERMISSIONS_TITLE,
              settings: L[T.GuildSettingsSafetyPage.PERMISSIONS],
            });
        }
        return (0, a.jsxs)(a.Fragment, {
          children: [
            x !== T.GuildSettingsSafetyPage.OVERVIEW &&
              (0, a.jsxs)(r.Button, {
                className: h.back,
                innerClassName: h.backButton,
                look: r.Button.Looks.BLANK,
                size: r.Button.Sizes.MIN,
                onClick: () => {
                  (0, _.setSafetyPage)(T.GuildSettingsSafetyPage.OVERVIEW);
                },
                children: [
                  (0, a.jsx)(c.default, {
                    className: h.arrow,
                    direction: c.default.Directions.LEFT,
                  }),
                  (0, a.jsx)(r.Text, {
                    variant: "text-sm/semibold",
                    color: "interactive-normal",
                    children: g.default.Messages.BACK,
                  }),
                ],
              }),
            t,
          ],
        });
      }
    },
    900084: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return S;
          },
        }),
        s("834022");
      var a = s("37983"),
        l = s("884691"),
        n = s("77078"),
        i = s("353575"),
        r = s("296839"),
        o = s("348934"),
        d = s("449008"),
        u = s("431451"),
        c = s("772871"),
        E = s("766829"),
        _ = s("782340"),
        I = s("494454");
      function T() {
        let e = "• ";
        return (0, a.jsxs)("div", {
          className: I.changelog,
          children: [
            (0, a.jsx)("img", {
              className: I.changelogImage,
              src: s("195238"),
              alt: "changelog",
            }),
            (0, a.jsxs)("div", {
              children: [
                (0, a.jsx)(n.Heading, {
                  variant: "heading-md/semibold",
                  color: "header-primary",
                  className: I.updatesHeader,
                  children:
                    _.default.Messages.GUILD_SETTINGS_SAFETY_UPDATES_HEADER,
                }),
                (0, a.jsx)(n.Text, {
                  variant: "text-sm/medium",
                  color: "header-secondary",
                  className: I.updatesDescription,
                  children:
                    _.default.Messages.GUILD_SETTINGS_SAFETY_UPDATES_LINE_1,
                }),
                (0, a.jsx)(n.Text, {
                  variant: "text-sm/medium",
                  color: "header-secondary",
                  className: I.updatesDescription,
                  children:
                    _.default.Messages.GUILD_SETTINGS_SAFETY_UPDATES_LINE_2,
                }),
                (0, a.jsxs)(n.Text, {
                  variant: "text-sm/medium",
                  color: "header-secondary",
                  children: [
                    e,
                    _.default.Messages.GUILD_SETTINGS_SAFETY_UPDATES_ITEM_1,
                  ],
                }),
                (0, a.jsxs)(n.Text, {
                  variant: "text-sm/medium",
                  color: "header-secondary",
                  children: [
                    e,
                    _.default.Messages.GUILD_SETTINGS_SAFETY_UPDATES_ITEM_2,
                  ],
                }),
                (0, a.jsxs)(n.Text, {
                  variant: "text-sm/medium",
                  color: "header-secondary",
                  children: [
                    e,
                    _.default.Messages.GUILD_SETTINGS_SAFETY_UPDATES_ITEM_3,
                  ],
                }),
                (0, a.jsxs)(n.Text, {
                  variant: "text-sm/medium",
                  color: "header-secondary",
                  children: [
                    e,
                    _.default.Messages.GUILD_SETTINGS_SAFETY_UPDATES_ITEM_4,
                  ],
                }),
              ],
            }),
          ],
        });
      }
      function f(e) {
        let { title: t, subtitle: s, icon: l, page: i } = e;
        return (0, a.jsxs)("div", {
          className: I.safetyStepRow,
          children: [
            (0, a.jsxs)("div", {
              className: I.safetyStepContent,
              children: [
                (0, a.jsx)(n.Avatar, {
                  src: l,
                  size: n.AvatarSizes.SIZE_40,
                  "aria-label": t,
                }),
                (0, a.jsxs)("div", {
                  children: [
                    (0, a.jsx)(n.Heading, {
                      variant: "heading-md/semibold",
                      color: "header-primary",
                      children: t,
                    }),
                    (0, a.jsx)(n.Text, {
                      variant: "text-xs/medium",
                      color: "header-secondary",
                      children: s,
                    }),
                  ],
                }),
              ],
            }),
            (0, a.jsx)(n.Button, {
              className: I.editButton,
              size: n.Button.Sizes.SMALL,
              color: n.Button.Colors.PRIMARY,
              look: n.Button.Looks.OUTLINED,
              borderColor: n.Button.BorderColors.PRIMARY,
              onClick: () => (0, u.setSafetyPage)(i),
              children: _.default.Messages.EDIT,
            }),
          ],
        });
      }
      function S(e) {
        let { guild: t, hideChangelog: u } = e;
        (0, i.useSyncAutomodRulesEffect)(t.id);
        let S = (0, r.useAvailableTriggerTypes)(t.id),
          { rulesByTriggerType: m } = (0, i.useAutomodRulesList)(t.id),
          { numEnabledRules: N, numRules: g } = l.useMemo(() => {
            let e = 0,
              t = 0;
            if (null == m) return { numEnabledRules: e, numRules: t };
            let s = Object.values(S).flat();
            return (
              s.forEach(s => {
                var a;
                let l =
                  null === (a = m[s]) || void 0 === a
                    ? void 0
                    : a.filter(d.isNotNullish);
                if (null == l || 0 === l.length) {
                  t++;
                  return;
                }
                l.forEach(s => {
                  s.enabled && e++, t++;
                });
              }),
              { numEnabledRules: e, numRules: t }
            );
          }, [S, m]),
          h = (0, E.getGuildSafetySettings)(t),
          C = h[c.GuildSettingsSafetyPage.CAPTCHA_AND_RAID_PROTECTION],
          R = h[c.GuildSettingsSafetyPage.DM_AND_SPAM_PROTECTION],
          x = h[c.GuildSettingsSafetyPage.PERMISSIONS],
          L = (0, o.useCanCurrentUserManageAutomod)(t.id);
        return (0, a.jsxs)("div", {
          children: [
            (0, a.jsx)(n.Heading, {
              variant: "heading-lg/semibold",
              color: "header-primary",
              className: I.header,
              children: _.default.Messages.GUILD_SETTINGS_SAFETY_SETUP_HEADER,
            }),
            !u && (0, a.jsx)(T, {}),
            (0, a.jsxs)("div", {
              className: I.safetyChecklist,
              children: [
                (0, a.jsx)(f, {
                  icon: s("373558"),
                  title:
                    _.default.Messages
                      .GUILD_SETTINGS_SAFETY_CAPTCHA_RAID_PROTECTION,
                  subtitle:
                    _.default.Messages.GUILD_SETTINGS_SAFETY_OVERVIEW_NUM_ENABLED.format(
                      {
                        enabled: C.filter(e => e.enabled).length,
                        total: C.length,
                      }
                    ),
                  page: c.GuildSettingsSafetyPage.CAPTCHA_AND_RAID_PROTECTION,
                }),
                (0, a.jsx)("div", { className: I.divider }),
                (0, a.jsx)(f, {
                  icon: s("119134"),
                  title:
                    _.default.Messages.GUILD_SETTINGS_SAFETY_DM_SPAM_PROTECTION,
                  subtitle:
                    _.default.Messages.GUILD_SETTINGS_SAFETY_OVERVIEW_NUM_ENABLED.format(
                      {
                        enabled: R.filter(e => e.enabled).length,
                        total: R.length,
                      }
                    ),
                  page: c.GuildSettingsSafetyPage.DM_AND_SPAM_PROTECTION,
                }),
                (0, a.jsx)("div", { className: I.divider }),
                L &&
                  (0, a.jsxs)(a.Fragment, {
                    children: [
                      (0, a.jsx)(f, {
                        icon: s("799036"),
                        title: _.default.Messages.GUILD_SETTINGS_AUTOMOD_TITLE,
                        subtitle:
                          _.default.Messages.GUILD_SETTINGS_SAFETY_OVERVIEW_NUM_ENABLED.format(
                            { enabled: N, total: g }
                          ),
                        page: c.GuildSettingsSafetyPage.AUTOMOD,
                      }),
                      (0, a.jsx)("div", { className: I.divider }),
                    ],
                  }),
                (0, a.jsx)(f, {
                  icon: s("444964"),
                  title: _.default.Messages.PERMISSIONS,
                  subtitle:
                    _.default.Messages.GUILD_SETTINGS_SAFETY_OVERVIEW_NUM_ENABLED.format(
                      {
                        enabled: x.filter(e => e.enabled).length,
                        total: x.length,
                      }
                    ),
                  page: c.GuildSettingsSafetyPage.PERMISSIONS,
                }),
              ],
            }),
          ],
        });
      }
    },
    860170: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("854743");
      function i(e) {
        let { title: t, settings: s } = e;
        return (0, a.jsxs)("div", {
          children: [
            (0, a.jsx)(l.Heading, {
              variant: "heading-lg/semibold",
              color: "header-primary",
              className: n.header,
              children: t,
            }),
            s.map(e => e.renderComponent()),
          ],
        });
      }
    },
    974724: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return T;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("917351"),
        n = s("446674"),
        i = s("77078"),
        r = s("79112"),
        o = s("957255"),
        d = s("697218"),
        u = s("592407"),
        c = s("690343"),
        E = s("49111"),
        _ = s("782340"),
        I = s("854743");
      function T(e) {
        let t,
          { guild: s } = e,
          T = s.mfaLevel,
          f = (0, n.useStateFromStores)(
            [o.default],
            () => null != s && o.default.can(E.Permissions.MANAGE_GUILD, s),
            [s]
          ),
          S = (0, n.useStateFromStores)([d.default], () =>
            d.default.getCurrentUser()
          ),
          m = s.isOwner(S),
          N = null == S ? void 0 : S.mfaEnabled,
          g = T === E.MFALevels.ELEVATED,
          h = m && N,
          C = (0, l.throttle)(async e => {
            h &&
              (await u.default.updateMFALevel({
                guildId: s.id,
                level: e ? E.MFALevels.ELEVATED : E.MFALevels.NONE,
                isEnabled: !e,
              }));
          }, 1e3);
        if (!f) return null;
        !h &&
          (t = m
            ? _.default.Messages.GUILD_SETTINGS_SAFETY_MFA_OWNER_DETAIL.format({
                settingsHook: () =>
                  r.default.open(E.UserSettingsSections.ACCOUNT),
              })
            : _.default.Messages.GUILD_SETTINGS_SAFETY_MFA_NON_OWNER_DETAIL);
        let R = s.hasFeature(E.GuildFeatures.DISCOVERABLE);
        return (0, a.jsxs)("div", {
          className: I.simpleItemWrapper,
          children: [
            (0, a.jsxs)("div", {
              className: I.itemContent,
              children: [
                (0, a.jsx)(i.Heading, {
                  variant: "text-md/semibold",
                  color: "header-primary",
                  children: _.default.Messages.GUILD_SETTINGS_REQ_MFA_LABEL,
                }),
                (0, a.jsxs)(i.Text, {
                  variant: "text-sm/medium",
                  color: "header-secondary",
                  children: [
                    _.default.Messages.GUILD_SETTINGS_SAFETY_MFA_BODY,
                    " ",
                    t,
                  ],
                }),
              ],
            }),
            !h || (g && R)
              ? (0, a.jsx)(i.Tooltip, {
                  text: R
                    ? _.default.Messages
                        .GUILD_SETTINGS_SAFETY_MFA_DISCOVERABLE_DISABLED_TOOLTIP
                    : m
                      ? _.default.Messages
                          .GUILD_SETTINGS_SAFETY_MFA_OWNER_TOOLTIP
                      : _.default.Messages
                          .GUILD_SETTINGS_SAFETY_MFA_NON_OWNER_TOOLTIP,
                  children: e =>
                    (0, a.jsx)(c.default, {
                      checked: g,
                      disabled: !0,
                      onChange: C,
                      className: I.bringToFront,
                      tooltipProps: e,
                    }),
                })
              : (0, a.jsx)(c.default, {
                  checked: g,
                  onChange: C,
                  className: I.bringToFront,
                }),
          ],
        });
      }
    },
    495454: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          getRiskyPerms: function () {
            return m;
          },
          default: function () {
            return N;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("414456"),
        n = s.n(l),
        i = s("316693"),
        r = s("446674"),
        o = s("77078"),
        d = s("305961"),
        u = s("957255"),
        c = s("578706"),
        E = s("423487"),
        _ = s("991170"),
        I = s("695838"),
        T = s("69741"),
        f = s("782340"),
        S = s("854743");
      function m(e) {
        return T.MODERATOR_PERMISSIONS.filter(
          t =>
            (null == e ? void 0 : e.id) !== I.FAVORITES_RAW_GUILD_ID &&
            _.default.canEveryone(t, e)
        );
      }
      function N(e) {
        let { guild: t } = e,
          l = (0, r.useStateFromStores)([d.default], () =>
            d.default.getRole(t.id, t.getEveryoneRoleId())
          ),
          _ = m(t),
          I = _.length > 0,
          N = T.MODERATOR_PERMISSIONS.some(
            e =>
              !u.default.can(e, t, null, {
                [l.id]: {
                  ...l,
                  permissions: i.default.remove(l.permissions, e),
                },
              })
          ),
          g = (0, a.jsxs)(a.Fragment, {
            children: [
              (0, a.jsxs)("div", {
                className: S.itemContent,
                children: [
                  (0, a.jsx)(o.Heading, {
                    variant: "text-md/semibold",
                    color: "header-primary",
                    children:
                      f.default.Messages
                        .GUILD_SETTINGS_SAFETY_EVERYONE_RISKY_PERMISSIONS,
                  }),
                  (0, a.jsx)(o.Text, {
                    variant: "text-sm/medium",
                    color: "header-secondary",
                    children:
                      f.default.Messages.GUILD_SETTINGS_SAFETY_EVERYONE_RISKY_PERMISSIONS_DETAILS.format(
                        { numPerms: _.length }
                      ),
                  }),
                ],
              }),
              I
                ? (0, a.jsx)(E.default, {
                    height: 24,
                    width: 24,
                    className: S.warning,
                    "aria-label":
                      f.default.Messages.SAFETY_REMOVE_RISKY_PERMS_ARIA_LABEL,
                  })
                : (0, a.jsx)(c.default, {
                    height: 24,
                    width: 24,
                    className: S.check,
                    "aria-label":
                      f.default.Messages
                        .SAFETY_REMOVE_RISKY_PERMS_ARIA_LABEL_COMPLETE,
                  }),
            ],
          });
        return I
          ? N
            ? (0, a.jsx)(o.Tooltip, {
                text: f.default.Messages.SAFETY_REMOVE_RISKY_PERMS_WARNING,
                children: e =>
                  (0, a.jsx)("div", {
                    className: n(S.simpleItemWrapper, S.disabled),
                    ...e,
                    children: g,
                  }),
              })
            : (0, a.jsx)(o.Clickable, {
                onClick: () => {
                  (0, o.openModalLazy)(async () => {
                    let { default: e } = await s
                      .el("343600")
                      .then(s.bind(s, "343600"));
                    return s => (0, a.jsx)(e, { guild: t, ...s });
                  });
                },
                className: n(S.simpleItemWrapper, S.clickable),
                children: g,
              })
          : (0, a.jsx)("div", { className: S.simpleItemWrapper, children: g });
      }
    },
    380993: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return M;
          },
          RaidAlertsSection: function () {
            return D;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("298386"),
        o = s("446674"),
        d = s("77078"),
        u = s("716241"),
        c = s("679653"),
        E = s("311340"),
        _ = s("701203"),
        I = s("85448"),
        T = s("567062"),
        f = s("42203"),
        S = s("923959"),
        m = s("957255"),
        N = s("27618"),
        g = s("697218"),
        h = s("593195"),
        C = s("592407"),
        R = s("690343"),
        x = s("49111"),
        L = s("782340"),
        O = s("854743");
      function p(e) {
        let { guild: t, isExpanded: s, selectedChannelId: n, className: r } = e,
          T = (0, _.useCanEnableRaidAlerts)(t),
          S = t.canHaveRaidActivityAlerts(),
          [m, N] = l.useState(S),
          g = (0, o.useStateFromStores)(
            [f.default],
            () => f.default.getChannel(n),
            [n]
          ),
          C = (0, c.default)(g),
          p = async () => {
            N(!m);
            try {
              var e;
              await (0, E.setGuildRaidAlerts)(t, !S);
              let s =
                null !== (e = null != n ? n : t.safetyAlertsChannelId) &&
                void 0 !== e
                  ? e
                  : null;
              if (null != s) {
                let e = {
                  raid_alert_type: I.RaidAlertType.JOIN_RAID,
                  enabled: !S,
                  raid_alert_channel_id: s,
                  guild_id: t.id,
                  channel_id: s,
                };
                (0, u.trackWithMetadata)(
                  x.AnalyticEvents.GUILD_RAID_ALERTS_SETUP,
                  e
                );
              }
            } catch (e) {
              (0, d.showToast)(
                (0, d.createToast)(
                  L.default.Messages.GUILD_ANTIRAID_SAFETY_SETUP_ERROR,
                  d.ToastType.FAILURE
                )
              ),
                N(!S);
            }
          };
        return (0, a.jsxs)("div", {
          className: i(O.itemWrapper, r),
          children: [
            (0, a.jsxs)("div", {
              className: O.itemContent,
              children: [
                (0, a.jsx)(d.Heading, {
                  variant: "text-md/semibold",
                  color: "header-primary",
                  children:
                    L.default.Messages.GUILD_SETTINGS_SAFETY_RAID_ALERTS_TITLE,
                }),
                (0, a.jsx)(d.Text, {
                  variant: "text-sm/medium",
                  color: "header-secondary",
                  children:
                    L.default.Messages
                      .GUILD_SETTINGS_SAFETY_RAID_ALERTS_DESCRIPTION,
                }),
                s || null == n
                  ? null
                  : (0, a.jsxs)(d.Text, {
                      color: "interactive-normal",
                      variant: "text-xs/medium",
                      className: O.valuePill,
                      children: [
                        (0, a.jsx)(h.default, { width: 12, height: 12 }),
                        " ",
                        C,
                      ],
                    }),
              ],
            }),
            (0, a.jsx)(R.default, {
              checked: m,
              onChange: p,
              disabled: !T || null == n,
            }),
          ],
        });
      }
      function A(e) {
        var t;
        let {
            guild: s,
            selectedChannelId: l,
            setSelectedChannelId: n,
            className: E,
          } = e,
          _ = null !== (t = s.safetyAlertsChannelId) && void 0 !== t ? t : null,
          T = (0, o.useStateFromStoresArray)(
            [S.default, g.default, N.default, m.default],
            () => {
              let e = S.default.getChannels(s.id),
                t = e[(0, S.GUILD_SELECTABLE_CHANNELS_KEY)]
                  .filter(e => {
                    let { channel: t } = e;
                    return (
                      t.type === r.ChannelTypes.GUILD_TEXT &&
                      m.default.can(x.Permissions.SEND_MESSAGES, t)
                    );
                  })
                  .map(e => {
                    let { channel: t } = e;
                    return {
                      value: t.id,
                      label: (0, c.computeChannelName)(
                        t,
                        g.default,
                        N.default,
                        !0
                      ),
                    };
                  });
              return null != _ ? t : [...t];
            },
            [s.id, _]
          ),
          f = async e => {
            n(e);
            try {
              if (
                (e !== _ &&
                  (await C.default.saveGuild(
                    s.id,
                    { safetyAlertsChannelId: e },
                    { throwErr: !0 }
                  ),
                  C.default.updateGuild({ safetyAlertsChannelId: e })),
                null != e)
              ) {
                let t = {
                  raid_alert_type: I.RaidAlertType.JOIN_RAID,
                  enabled: s.canHaveRaidActivityAlerts(),
                  raid_alert_channel_id: e,
                  guild_id: s.id,
                  channel_id: e,
                };
                (0, u.trackWithMetadata)(
                  x.AnalyticEvents.GUILD_RAID_ALERTS_SETUP,
                  t
                );
              }
            } catch (e) {
              (0, d.showToast)(
                (0, d.createToast)(
                  L.default.Messages.GUILD_ANTIRAID_SAFETY_SETUP_ERROR,
                  d.ToastType.FAILURE
                )
              ),
                n(_);
            }
          };
        return (0, a.jsx)("div", {
          className: i(O.itemBodyContainer, E),
          children: (0, a.jsxs)("div", {
            className: O.itemBodyInner,
            children: [
              (0, a.jsx)(d.FormTitle, {
                children:
                  L.default.Messages.GUILD_ANTIRAID_SAFETY_CHANNEL_TITLE,
              }),
              (0, a.jsx)(d.SearchableSelect, {
                wrapperClassName: O.bringToFront,
                options: T,
                onChange: f,
                value: l,
                maxVisibleItems: 5,
              }),
              (0, a.jsx)(d.Text, {
                variant: "text-sm/medium",
                color: "interactive-normal",
                children:
                  L.default.Messages
                    .GUILD_SETTINGS_SAFETY_NOTIFICATIONS_CHANNEL_DESCRIPTION,
              }),
            ],
          }),
        });
      }
      function M(e) {
        var t, s;
        let { guild: n } = e,
          [i, r] = l.useState(!1),
          o = null !== (t = n.safetyAlertsChannelId) && void 0 !== t ? t : null,
          [d, u] = l.useState(
            null != o
              ? o
              : null !== (s = null == n ? void 0 : n.publicUpdatesChannelId) &&
                  void 0 !== s
                ? s
                : null
          );
        return (0, a.jsx)(T.default, {
          renderHeader: (0, a.jsx)(p, {
            isExpanded: i,
            guild: n,
            selectedChannelId: d,
          }),
          isExpanded: i,
          onExpand: () => r(!i),
          children: (0, a.jsx)(A, {
            guild: n,
            selectedChannelId: d,
            setSelectedChannelId: u,
          }),
        });
      }
      function D(e) {
        var t, s;
        let { guild: n } = e,
          i = null !== (t = n.safetyAlertsChannelId) && void 0 !== t ? t : null,
          [r, o] = l.useState(
            null != i
              ? i
              : null !== (s = null == n ? void 0 : n.publicUpdatesChannelId) &&
                  void 0 !== s
                ? s
                : null
          );
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(p, {
              isExpanded: !0,
              guild: n,
              selectedChannelId: r,
              className: O.noPadding,
            }),
            (0, a.jsx)(A, {
              guild: n,
              selectedChannelId: r,
              setSelectedChannelId: o,
              className: O.noPadding,
            }),
          ],
        });
      }
    },
    766829: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          getGuildSafetySettings: function () {
            return _;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("772871"),
        n = s("974724"),
        i = s("495454"),
        r = s("380993"),
        o = s("281239"),
        d = s("439979"),
        u = s("771075"),
        c = s("49111"),
        E = s("782340");
      let _ = e => ({
        [l.GuildSettingsSafetyPage.CAPTCHA_AND_RAID_PROTECTION]: [
          {
            renderComponent: () =>
              (0, a.jsx)(r.default, { guild: e }, "raid-alerts"),
            enabled: !e.hasFeature(c.GuildFeatures.RAID_ALERTS_DISABLED),
          },
          {
            renderComponent: () =>
              (0, a.jsx)(
                o.default,
                {
                  title: E.default.Messages.GUILD_SETTINGS_SAFETY_RAID_CAPTCHA,
                },
                "captcha-suspicious-joins"
              ),
            enabled: !0,
          },
          {
            renderComponent: () =>
              (0, a.jsx)(
                o.default,
                {
                  title:
                    E.default.Messages.GUILD_SETTINGS_SAFETY_RAID_CAPTCH_RAID,
                },
                "captcha-raid-joins"
              ),
            enabled: !0,
          },
        ],
        [l.GuildSettingsSafetyPage.DM_AND_SPAM_PROTECTION]: [
          {
            renderComponent: () =>
              (0, a.jsx)(u.default, { guild: e }, "verification-level"),
            enabled: !0,
          },
          {
            renderComponent: () =>
              (0, a.jsx)(d.default, { guild: e }, "member-verification"),
            enabled: e.hasVerificationGate(),
          },
          {
            renderComponent: () =>
              (0, a.jsx)(
                o.default,
                {
                  title:
                    E.default.Messages
                      .GUILD_SETTINGS_SAFETY_SPAM_SUSPICIOUS_DMS,
                  details:
                    E.default.Messages
                      .GUILD_SETTINGS_SAFETY_SPAM_SUSPICIOUS_DMS_DESCRIPTION,
                },
                "hide-suspicious-dms"
              ),
            enabled: !0,
          },
          {
            renderComponent: () =>
              (0, a.jsx)(
                o.default,
                {
                  title:
                    E.default.Messages
                      .GUILD_SETTINGS_SAFETY_SPAM_DM_NON_FRIENDS,
                  details:
                    E.default.Messages
                      .GUILD_SETTINGS_SAFETY_SPAM_DM_NON_FRIENDS_DESCRIPTION,
                },
                "filter-unknown-dms"
              ),
            enabled: !0,
          },
          {
            renderComponent: () =>
              (0, a.jsx)(
                o.default,
                {
                  title:
                    E.default.Messages
                      .GUILD_SETTINGS_SAFETY_SPAM_SUSPICIOUS_LINKS,
                },
                "outbound-links-warn"
              ),
            enabled: !0,
          },
          {
            renderComponent: () =>
              (0, a.jsx)(
                o.default,
                {
                  title:
                    E.default.Messages
                      .GUILD_SETTINGS_SAFETY_SPAM_DM_SUSPCIOUS_MESSAGES,
                },
                "delete-spam"
              ),
            enabled: !0,
          },
        ],
        [l.GuildSettingsSafetyPage.PERMISSIONS]: [
          {
            renderComponent: () =>
              (0, a.jsx)(n.default, { guild: e }, "guild-mfa"),
            enabled: e.mfaLevel === c.MFALevels.ELEVATED,
          },
          {
            renderComponent: () =>
              (0, a.jsx)(i.default, { guild: e }, "disable-risky-perms"),
            enabled: 0 === (0, i.getRiskyPerms)(e).length,
          },
        ],
      });
    },
    281239: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return d;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("690343"),
        i = s("843455"),
        r = s("782340"),
        o = s("854743");
      function d(e) {
        let { title: t, details: s } = e;
        return (0, a.jsxs)("div", {
          className: o.simpleItemWrapper,
          children: [
            (0, a.jsxs)("div", {
              className: o.itemContent,
              children: [
                (0, a.jsx)(l.Heading, {
                  variant: "text-md/semibold",
                  color: "header-primary",
                  children: t,
                }),
                "string" == typeof s
                  ? (0, a.jsx)(l.Text, {
                      variant: "text-sm/medium",
                      color: "header-secondary",
                      children: s,
                    })
                  : s,
              ],
            }),
            (0, a.jsx)(l.Tooltip, {
              tooltipContentClassName: o.tooltip,
              text: r.default.Messages.GUILD_SETTINGS_SAFETY_ON_BY_DEFAULT,
              children: e =>
                (0, a.jsx)(n.default, {
                  checked: !0,
                  disabled: !0,
                  onChange: i.NOOP,
                  className: o.bringToFront,
                  tooltipProps: e,
                }),
            }),
          ],
        });
      }
    },
    771075: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return T;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("77078"),
        o = s("925993"),
        d = s("461380"),
        u = s("556081"),
        c = s("216947"),
        E = s("49111"),
        _ = s("782340"),
        I = s("854743");
      function T(e) {
        let { guild: t } = e,
          n = t.verificationLevel,
          T = l.useMemo(() => (0, o.getVerificationLevelText)(n), [n]);
        return (0, a.jsxs)(r.Clickable, {
          onClick: () =>
            (0, r.openModalLazy)(async () => {
              let { default: e } = await s
                .el("161069")
                .then(s.bind(s, "161069"));
              return s => (0, a.jsx)(e, { ...s, guild: t, hideColors: !0 });
            }),
          className: i(I.simpleItemWrapper, I.clickable),
          children: [
            (0, a.jsxs)("div", {
              className: I.itemContent,
              children: [
                (0, a.jsx)(r.Heading, {
                  variant: "text-md/semibold",
                  color: "header-primary",
                  children: _.default.Messages.FORM_LABEL_VERIFICATION_LEVEL,
                }),
                (0, a.jsx)(r.Text, {
                  variant: "text-sm/medium",
                  color: "header-secondary",
                  children:
                    _.default.Messages
                      .GUILD_SETTINGS_SAFETY_VERIFICATION_DESCRIPTION,
                }),
                (0, a.jsx)("div", {
                  className: I.pillRow,
                  children: (0, a.jsxs)(r.Text, {
                    variant: "text-xs/medium",
                    color: "interactive-normal",
                    className: I.valuePill,
                    children: [
                      n === E.VerificationLevels.VERY_HIGH
                        ? (0, a.jsx)(c.default, { width: 16, height: 16 })
                        : (0, a.jsx)(u.default, { width: 16, height: 16 }),
                      T,
                    ],
                  }),
                }),
              ],
            }),
            (0, a.jsx)(d.default, {
              height: 24,
              width: 24,
              direction: d.default.Directions.RIGHT,
              className: I.caret,
            }),
          ],
        });
      }
    },
    369158: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("414456"),
        n = s.n(l),
        i = s("77078"),
        r = s("36694"),
        o = s("987772"),
        d = s("782340"),
        u = s("819581");
      function c(e) {
        let {
          className: t,
          enabled: s,
          previewCTA: l,
          onPreview: c,
          onToggle: E,
          animateStatus: _,
          firstLine: I,
          secondLine: T,
          disabled: f,
        } = e;
        return (0, a.jsxs)("div", {
          className: n(t, u.enableContainer),
          children: [
            s
              ? (0, a.jsx)(r.default, {
                  width: 24,
                  height: 24,
                  className: n(u.activeCircle, { [u.animate]: _ }),
                })
              : (0, a.jsx)(o.default, {
                  width: 24,
                  height: 24,
                  className: n(u.editCircle, { [u.animate]: _ }),
                }),
            (0, a.jsxs)("div", {
              className: u.enableDescription,
              children: [
                (0, a.jsx)(i.Text, { variant: "text-sm/normal", children: I }),
                (0, a.jsx)(i.Text, { variant: "text-sm/normal", children: T }),
              ],
            }),
            (0, a.jsxs)("div", {
              className: u.buttonContainer,
              children: [
                null == c
                  ? null
                  : (0, a.jsx)(i.Button, {
                      className: u.previewButton,
                      look: i.Button.Looks.LINK,
                      size: i.Button.Sizes.SMALL,
                      onClick: c,
                      disabled: f,
                      color: i.Button.Colors.PRIMARY,
                      children:
                        null != l
                          ? l
                          : d.default.Messages
                              .GUILD_SETTINGS_PUBLIC_WELCOME_PREVIEW,
                    }),
                (0, a.jsx)(i.Button, {
                  disabled: null == E || f,
                  size: i.Button.Sizes.SMALL,
                  color: s ? i.Button.Colors.RED : i.Button.Colors.BRAND,
                  onClick: E,
                  children: s
                    ? d.default.Messages.DISABLE
                    : d.default.Messages.ENABLE,
                }),
              ],
            }),
          ],
        });
      }
    },
    725621: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          getGuildSettingsSections: function () {
            return eV;
          },
          default: function () {
            return eK;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("759843"),
        i = s("446674"),
        r = s("151426"),
        o = s("77078"),
        d = s("54239"),
        u = s("800751"),
        c = s("534291"),
        E = s("812204"),
        _ = s("716241"),
        I = s("685665"),
        T = s("412707"),
        f = s("646186"),
        S = s("7331"),
        m = s("736271"),
        N = s("283167"),
        g = s("10641"),
        h = s("298878"),
        C = s("184890"),
        R = s("773372"),
        x = s("348934"),
        L = s("329606"),
        O = s("685829"),
        p = s("863636"),
        A = s("380710"),
        M = s("347895"),
        D = s("233706"),
        v = s("287883"),
        G = s("883206"),
        j = s("808388"),
        U = s("65722"),
        P = s("432153"),
        b = s("922835"),
        B = s("46166"),
        y = s("883069"),
        F = s("569808"),
        H = s("269596"),
        k = s("977169"),
        w = s("161778"),
        V = s("223170"),
        Y = s("478964"),
        W = s("59811"),
        z = s("628624"),
        K = s("923959"),
        Z = s("525065"),
        X = s("957255"),
        Q = s("697218"),
        J = s("228220"),
        q = s("659500"),
        $ = s("199938"),
        ee = s("961394"),
        et = s("592407"),
        es = s("738216"),
        ea = s("692541"),
        el = s("952943"),
        en = s("531493"),
        ei = s("900938"),
        er = s("914581"),
        eo = s("137933"),
        ed = s("397947"),
        eu = s("259483"),
        ec = s("867928"),
        eE = s("648704"),
        e_ = s("887754"),
        eI = s("614840"),
        eT = s("902273"),
        ef = s("721822"),
        eS = s("925538"),
        em = s("631011"),
        eN = s("191329"),
        eg = s("851545"),
        eh = s("527042"),
        eC = s("977887"),
        eR = s("912477"),
        ex = s("969741"),
        eL = s("849823"),
        eO = s("788831"),
        ep = s("201461"),
        eA = s("817674"),
        eM = s("187975"),
        eD = s("473126"),
        ev = s("582372"),
        eG = s("789123"),
        ej = s("78730"),
        eU = s("757120"),
        eP = s("310490"),
        eb = s("49111"),
        eB = s("533613"),
        ey = s("69741"),
        eF = s("782340"),
        eH = s("110206");
      function ek(e) {
        return "" !== e.toString()
          ? e.toString()
          : eF.default.Messages.SERVER_SETTINGS;
      }
      function ew(e) {
        let {
            guild: t,
            canManageGuild: l,
            canViewAuditLog: i,
            canViewAuditLogV2: u,
            canManageRoles: E,
            canManageGuildExpressions: _,
            canManageWebhooks: I,
            canManageBans: N,
            canAccessMembersPage: C,
            canViewGuildAnalytics: O,
            isOwner: M,
            isOwnerWithRequiredMfaLevel: y,
            showDirtyGuildTemplateIndicator: F,
            memberCount: k,
            isGuildAuditLogV2Enabled: w,
            showAccessRate: V,
            onboardingStep: W,
            onboardingEnabled: K,
            welcomeScreenEmpty: Z,
            guildMetadata: X,
            section: $,
          } = e,
          es = () =>
            (0, U.canSeeGuildRoleSubscriptionSettings)({
              guild: t,
              isOwner: M,
              canManageGuildRoleSubscriptions: (0,
              U.canManageGuildRoleSubscriptions)(t),
              isMonetizationWaitlistEnabledForGuild: (0,
              S.isMonetizationWaitlistEnabledForGuild)(t.id),
              isGuildEligibleForRoleSubscriptions: (0,
              j.isGuildEligibleForRoleSubscriptions)(t.id),
              isExpeditedMonetizationOnboardingGuild: (0,
              S.isExpeditedMonetizationOnboardingGuild)(t),
              isUserInCreatorMonetizationEligibleCountry: (0,
              S.isUserInCreatorMonetizationEligibleCountry)(),
              shouldRestrictUpdatingRoleSubscriptionSettings: (0,
              m.shouldRestrictUpdatingCreatorMonetizationSettings)(t.id),
            }),
          ea = (0, v.isGuildEligibleForGuildProducts)(t.id, "guild_settings"),
          ew =
            !1 === t.hasFeature(eb.GuildFeatures.CREATOR_MONETIZABLE) &&
            !1 ===
              t.hasFeature(eb.GuildFeatures.CREATOR_MONETIZABLE_PROVISIONAL),
          eV =
            ea && ew
              ? {
                  label: (0, a.jsx)("div", {
                    className: eH.roleSubLabel,
                    children:
                      eF.default.Messages
                        .GUILD_SETTINGS_ENABLE_MONETIZATION_TAB_TITLE,
                  }),
                  ariaLabel:
                    eF.default.Messages
                      .GUILD_SETTINGS_ENABLE_MONETIZATION_TAB_TITLE,
                }
              : {
                  label: (0, a.jsx)("div", {
                    className: eH.roleSubLabel,
                    children:
                      eF.default.Messages.GUILD_ROLE_SUBSCRIPTIONS_TITLE,
                  }),
                  ariaLabel: eF.default.Messages.GUILD_ROLE_SUBSCRIPTIONS_TITLE,
                };
        return [
          { section: c.SectionTypes.HEADER, label: ek(t) },
          {
            section: eb.GuildSettingsSections.OVERVIEW,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_OVERVIEW,
            label: eF.default.Messages.OVERVIEW,
            ariaLabel: eF.default.Messages.OVERVIEW,
            element: eO.default,
            notice: {
              stores: [ei.default],
              element: eO.GuildSettingsOverviewNotice,
            },
          },
          {
            section: eb.GuildSettingsSections.ROLES,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_ROLES,
            label: eF.default.Messages.ROLES,
            element: e_.default,
            type: c.ContentTypes.MINIMAL,
            ariaLabel:
              eF.default.Messages
                .GUILD_SETTINGS_ROLE_ICON_SIDEBAR_NEW_ARIA_LABEL,
            notice: {
              stores: [en.default],
              element: e_.GuildSettingsRolesNotice,
            },
            predicate: () => E,
          },
          {
            section: eb.GuildSettingsSections.EMOJI,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_EMOJI,
            label: eF.default.Messages.EMOJI,
            element: eh.default,
            predicate: () => _,
          },
          {
            section: eb.GuildSettingsSections.STICKERS,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_STICKERS,
            label: eF.default.Messages.GUILD_SETTINGS_STICKERS,
            ariaLabel: eF.default.Messages.GUILD_SETTINGS_STICKERS,
            element: ev.default,
            predicate: () => _,
          },
          {
            section: eb.GuildSettingsSections.SOUNDBOARD,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_SOUNDBOARD,
            label: eF.default.Messages.GUILD_SETTINGS_SOUNDBOARD,
            ariaLabel: eF.default.Messages.GUILD_SETTINGS_SOUNDBOARD,
            element: eD.default,
            predicate: () => _,
          },
          {
            section: eb.GuildSettingsSections.WIDGET,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_WIDGET,
            label: eF.default.Messages.WIDGET,
            element: eP.default,
            predicate: () => l,
          },
          {
            section: eb.GuildSettingsSections.GUILD_TEMPLATES,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_TEMPLATE,
            label: (0, a.jsx)(ej.default, { showDirtyIndicator: F }),
            ariaLabel: eF.default.Messages.GUILD_TEMPLATES,
            element: eG.default,
            notice: {
              stores: [eG.GuildSettingsTemplateMetadataStore],
              element: eG.GuildSettingsTemplateNotice,
            },
            predicate: () => l,
          },
          {
            section: eb.GuildSettingsSections.VANITY_URL,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_VANITY_URL,
            label: eF.default.Messages.VANITY_URL,
            element: eU.default,
            notice: {
              stores: [er.default],
              element: eU.GuildSettingsVanityURLNotice,
            },
            predicate: () => l,
          },
          { section: c.SectionTypes.DIVIDER, predicate: () => l || I },
          {
            section: c.SectionTypes.HEADER,
            label: eF.default.Messages.APPS,
            predicate: () => l || I,
          },
          {
            section: eb.GuildSettingsSections.INTEGRATIONS,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_INTEGRATION,
            label: eF.default.Messages.INTEGRATIONS,
            ariaLabel: eF.default.Messages.INTEGRATIONS,
            element: eC.default,
            notice: {
              stores: [el.default, ei.default],
              element: eC.GuildSettingsIntegrationsNotice,
            },
            predicate: () => l || I,
          },
          {
            section: eb.GuildSettingsSections.APP_DIRECTORY,
            label: eF.default.Messages.APP_DIRECTORY,
            ariaLabel: eF.default.Messages.APP_DIRECTORY,
            onClick() {
              (0, f.goToAppDirectory)({
                guildId: t.id,
                entrypoint: {
                  name: T.ApplicationDirectoryEntrypointNames.GUILD_SETTINGS,
                  guildSettingsSection: $,
                },
              }),
                (0, d.popLayer)();
            },
          },
          { section: c.SectionTypes.DIVIDER, predicate: () => l },
          {
            section: c.SectionTypes.HEADER,
            label: eF.default.Messages.MODERATION,
            predicate: () => l,
          },
          {
            section: eb.GuildSettingsSections.SAFETY,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_SAFETY,
            label: eF.default.Messages.SAFETY_SETUP,
            ariaLabel: eF.default.Messages.SAFETY_SETUP,
            element: eI.default,
            newIndicatorDismissibleContentTypes: [
              r.DismissibleContent.COMMUNITY_GUILD_SETTINGS_SAFETY,
            ],
            predicate: () => l && t.hasFeature(eb.GuildFeatures.COMMUNITY),
          },
          {
            section: eb.GuildSettingsSections.MODERATION,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_MODERATION,
            label: eF.default.Messages.SAFETY_SETUP,
            element: eA.default,
            predicate: () => l && !t.hasFeature(eb.GuildFeatures.COMMUNITY),
          },
          {
            section: eb.GuildSettingsSections.GUILD_AUTOMOD,
            label: (0, a.jsx)("div", {
              className: eH.landingPageTabLink,
              children: eF.default.Messages.GUILD_SETTINGS_AUTOMOD_TITLE,
            }),
            ariaLabel: eF.default.Messages.GUILD_SETTINGS_AUTOMOD_TITLE,
            element: L.default,
            newIndicatorDismissibleContentTypes: null,
            predicate: () =>
              !t.hasFeature(eb.GuildFeatures.COMMUNITY) &&
              ((0, x.canCurrentUserManageAutomod)(t.id) ||
                (0, x.canCurrentUserManageMessageFilters)(t.id)),
          },
          {
            section: eb.GuildSettingsSections.AUDIT_LOG,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_AUDIT_LOG,
            label: eF.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG,
            element: eo.default,
            type: c.ContentTypes.CUSTOM,
            predicate: () => i,
          },
          {
            section: eb.GuildSettingsSections.AUDIT_LOG_V2,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_AUDIT_LOG_V2,
            label: eF.default.Messages.GUILD_SETTINGS_LABEL_AUDIT_LOG,
            element: R.default,
            type: c.ContentTypes.CUSTOM,
            predicate: () => u && w,
          },
          {
            section: eb.GuildSettingsSections.BANS,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_BANS,
            label: eF.default.Messages.BANS,
            element: ef.default,
            predicate: () => N,
          },
          { section: c.SectionTypes.DIVIDER, predicate: () => l || O },
          {
            section: c.SectionTypes.HEADER,
            label: eF.default.Messages.COMMUNITY,
            predicate: () => l || O,
          },
          {
            section: eb.GuildSettingsSections.COMMUNITY,
            impressionName: t.hasFeature(eb.GuildFeatures.COMMUNITY)
              ? n.ImpressionNames.GUILD_SETTINGS_COMMUNITY_OVERVIEW
              : n.ImpressionNames.GUILD_SETTINGS_ENABLE_COMMUNITY,
            label: t.hasFeature(eb.GuildFeatures.COMMUNITY)
              ? eF.default.Messages.OVERVIEW
              : eF.default.Messages.GUILD_SETTINGS_COMMUNITY_ENABLE_COMMUNITY,
            element: eS.default,
            ariaLabel: t.hasFeature(eb.GuildFeatures.COMMUNITY)
              ? eF.default.Messages.OVERVIEW
              : eF.default.Messages.GUILD_SETTINGS_COMMUNITY_ENABLE_COMMUNITY,
            newIndicator:
              !t.hasFeature(eb.GuildFeatures.COMMUNITY) &&
              null != k &&
              k >= ey.COMMUNITY_UPSELL_MINIMUM_GUILD_SIZE &&
              H.default.hasHotspot(
                eB.HotspotLocations.GUILD_SETTINGS_COMMUNITY_GUILD_UPSELL
              ),
            notice: {
              stores: [ei.default],
              element: eS.GuildSettingsCommunityOverviewNotice,
            },
            predicate: () => l,
          },
          {
            section: eb.GuildSettingsSections.ONBOARDING,
            label: eF.default.Messages.ONBOARDING,
            element: eL.default,
            ariaLabel: eF.default.Messages.ONBOARDING,
            newIndicatorDismissibleContentTypes: K
              ? null
              : [r.DismissibleContent.COMMUNITY_ONBOARDING_NEW_BADGE],
            notice: { stores: [ed.default], element: eE.default },
            predicate: () => (0, A.isGuildOnboardingSettingsAvailable)(t.id),
            decoration: (function (e, t) {
              let { homeSettingsEnabled: s } = (0,
              D.getOnboardingHomeAdminExperiment)(e);
              if (p.default.getEnabled(e))
                return eF.default.Messages.GUILD_ONBOARDING_ON.toUpperCase();
              if ((0, ec.isOnboardingWizardCompleted)(e))
                return eF.default.Messages.GUILD_ONBOARDING_OFF.toUpperCase();
              let a = eu.COMPLETABLE_ONBOARDING_STEPS.filter(
                  e =>
                    !!s ||
                    e !== eu.GuildSettingsOnboardingPage.HOME_SETTINGS ||
                    !1
                ),
                l = a.findIndex(e => e === t);
              if (-1 !== l)
                return eF.default.Messages.GUILD_ONBOARDING_SETUP_STEP_COUNTER.format(
                  { count: l + 1, total: a.length }
                );
            })(t.id, W),
          },
          {
            section: eb.GuildSettingsSections.ANALYTICS,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_ANALYTICS,
            label: eF.default.Messages.SERVER_INSIGHTS,
            ariaLabel: eF.default.Messages.SERVER_INSIGHTS,
            element: eT.default,
            newIndicator: H.default.hasHotspot(
              eB.HotspotLocations.GUILD_ANALYTICS_GUILD_SETTINGS_MENU
            ),
            newIndicatorDismissibleContentTypes: V
              ? [r.DismissibleContent.GUILD_INSIGHTS_ACCESS_RATE_NEW]
              : null,
            predicate: () => O && t.hasFeature(eb.GuildFeatures.COMMUNITY),
          },
          {
            section: eb.GuildSettingsSections.DISCOVERY,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_DISCOVERY,
            label: eF.default.Messages.DISCOVERY,
            element: eN.default,
            notice: {
              stores: [ei.default],
              element: eN.GuildSettingsDiscoveryNotice,
            },
            predicate: () => l && t.hasFeature(eb.GuildFeatures.COMMUNITY),
            ariaLabel: t.hasFeature(eb.GuildFeatures.DISCOVERABLE)
              ? eF.default.Messages.DISCOVERY
              : eF.default.Messages.GUILD_SETTINGS_ENABLE_DISCOVERABLE,
          },
          {
            section: eb.GuildSettingsSections.DISCOVERY_LANDING_PAGE,
            impressionName:
              n.ImpressionNames.GUILD_SETTINGS_DISCOVERY_LANDING_PAGE,
            label: (0, a.jsxs)("div", {
              className: eH.landingPageTabLink,
              children: [
                eF.default.Messages.DISCOVERY_LANDING_PAGE,
                " ",
                (0, a.jsx)(h.default, {}),
              ],
            }),
            ariaLabel: eF.default.Messages.DISCOVERY_LANDING_PAGE,
            element: eg.default,
            notice: {
              stores: [ei.default],
              element: eg.GuildSettingsDiscoveryLandingPageNotice,
            },
            type: c.ContentTypes.CUSTOM,
            predicate: () =>
              l &&
              (t.hasFeature(eb.GuildFeatures.DISCOVERABLE) ||
                !!(null == X ? void 0 : X.isPublished)),
          },
          {
            section: eb.GuildSettingsSections.COMMUNITY_WELCOME,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_COMMUNITY_WELCOME,
            label: eF.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME,
            ariaLabel: eF.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME,
            element: em.default,
            notice: { stores: [Y.default], element: z.default },
            predicate: () =>
              l &&
              t.hasFeature(eb.GuildFeatures.COMMUNITY) &&
              !Z &&
              !t.hasFeature(eb.GuildFeatures.GUILD_SERVER_GUIDE),
          },
          { section: c.SectionTypes.DIVIDER, predicate: es },
          {
            section: c.SectionTypes.HEADER,
            label: eF.default.Messages.MONETIZATION,
            predicate: es,
          },
          {
            ...eV,
            section: eb.GuildSettingsSections.ROLE_SUBSCRIPTIONS,
            element: b.default,
            type: c.ContentTypes.CUSTOM,
            predicate: es,
            newIndicatorDismissibleContentTypes: (0, P.isEligibleForNewBadge)(t)
              ? [
                  r.DismissibleContent
                    .SERVER_SUBSCRIPTION_SETTINGS_NEW_BADGE_TIER_TEMPLATE,
                ]
              : null,
          },
          {
            section: eb.GuildSettingsSections.GUILD_PRODUCTS,
            label: eF.default.Messages.GUILD_PRODUCTS_TITLE,
            ariaLabel: eF.default.Messages.GUILD_PRODUCTS_TITLE,
            element: G.default,
            predicate: () =>
              es() &&
              (0, v.isGuildEligibleForGuildProducts)(
                t.id,
                "guild_product_settings_predicate"
              ) &&
              (0, j.hasEnabledMonetization)(t),
          },
          {
            section: eb.GuildSettingsSections.ROLE_SUBSCRIPTIONS_STORE_PAGE,
            impressionName:
              n.ImpressionNames
                .GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_GUILD_SETTINGS,
            newIndicator: 2022 === new Date().getFullYear(),
            label:
              eF.default.Messages.GUILD_SETTINGS_ROLE_SUBSCRIPTIONS_STORE_PAGE,
            ariaLabel:
              eF.default.Messages.GUILD_SETTINGS_ROLE_SUBSCRIPTIONS_STORE_PAGE,
            element: B.default,
            predicate: () => es() && (0, j.hasEnabledMonetization)(t),
          },
          { section: c.SectionTypes.DIVIDER },
          {
            section: eb.GuildSettingsSections.GUILD_PREMIUM,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_BOOST_STATUS,
            label: eF.default.Messages.GUILD_PREMIUM,
            ariaLabel: eF.default.Messages.GUILD_PREMIUM,
            element: ep.default,
            className: eH.serverBoostTabItem,
            icon: (0, a.jsx)(eM.default, { className: eH.icon }),
          },
          { section: c.SectionTypes.DIVIDER },
          {
            section: c.SectionTypes.HEADER,
            label: eF.default.Messages.USER_MANAGEMENT,
          },
          {
            section: eb.GuildSettingsSections.MEMBERS,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_MEMBERS,
            label: (0, a.jsx)(ex.GuildSettingsMembersRow, {}),
            ariaLabel: eF.default.Messages.MEMBERS,
            element: ex.default,
            type: c.ContentTypes.CUSTOM,
            predicate: () => C,
          },
          {
            section: eb.GuildSettingsSections.INSTANT_INVITES,
            impressionName: n.ImpressionNames.GUILD_SETTINGS_INVITES,
            label: eF.default.Messages.INVITES,
            element: eR.default,
            type: c.ContentTypes.CUSTOM,
            predicate: () => l,
          },
          { section: c.SectionTypes.DIVIDER, predicate: () => y },
          {
            section: eb.GuildSettingsSections.DELETE,
            onClick() {
              let e = Q.default.getCurrentUser();
              if (null == e) return;
              let l = t.toString(),
                n = {
                  header: eF.default.Messages.DELETE_SERVER_TITLE.format({
                    name: l,
                  }),
                  confirmText: eF.default.Messages.DELETE_SERVER,
                  cancelText: eF.default.Messages.CANCEL,
                  onConfirm: () => {
                    q.ComponentDispatch.subscribeOnce(
                      eb.ComponentActions.LAYER_POP_COMPLETE,
                      () => {
                        et.default.deleteGuild(t.id, l).then(() => {
                          if (
                            (0, g.isDismissibleContentDismissed)(
                              r.DismissibleContent.GUILD_DELETE_FEEDBACK
                            )
                          )
                            return;
                          ee.default.trackExposure({ location: "e4be39_1" });
                          let { showFeedback: e } = ee.default.getCurrentConfig(
                            { location: "e4be39_2" },
                            { autoTrackExposure: !1 }
                          );
                          e &&
                            (0, o.openModalLazy)(async () => {
                              let { default: e } = await s
                                .el("56814")
                                .then(s.bind(s, "56814"));
                              return s =>
                                (0, a.jsx)(e, { ...s, guildId: t.id });
                            });
                        });
                      }
                    ),
                      (0, d.popLayer)();
                  },
                };
              e.mfaEnabled
                ? (0, o.openModal)(e =>
                    (0, a.jsx)(o.ConfirmModal, {
                      ...e,
                      ...n,
                      children: (0, a.jsx)(o.Text, {
                        variant: "text-md/normal",
                        children: eF.default.Messages.DELETE_SERVER_BODY.format(
                          { name: l }
                        ),
                      }),
                    })
                  )
                : (0, o.openModalLazy)(async () => {
                    let { default: e } = await s
                      .el("494078")
                      .then(s.bind(s, "494078"));
                    return t =>
                      (0, a.jsx)(e, {
                        ...t,
                        ...n,
                        validationText: l,
                        instructionText:
                          eF.default.Messages.DELETE_SERVER_ENTER_NAME,
                        errorText:
                          eF.default.Messages.DELETE_SERVER_INCORRECT_NAME,
                        children: eF.default.Messages.DELETE_SERVER_BODY.format(
                          { name: l }
                        ),
                      });
                  });
            },
            label: eF.default.Messages.DELETE_SERVER,
            ariaLabel: eF.default.Messages.DELETE_SERVER,
            icon: (0, a.jsx)(J.default, { width: 16, height: 16 }),
            predicate: () => y,
          },
        ];
      }
      function eV(e, t) {
        return ew({
          channels: t,
          showDirtyGuildTemplateIndicator: !1,
          ...X.default.getGuildPermissionProps(e),
          isGuildAuditLogV2Enabled: !1,
          showAccessRate: !1,
        })
          .filter(e => {
            let { section: t } = e;
            return t !== c.SectionTypes.HEADER && t !== c.SectionTypes.DIVIDER;
          })
          .filter(e => null == e.predicate || e.predicate());
      }
      function eY(e) {
        let t =
            arguments.length > 1 && void 0 !== arguments[1]
              ? arguments[1]
              : null,
          s = arguments.length > 2 ? arguments[2] : void 0;
        _.default.trackWithMetadata(eb.AnalyticEvents.SETTINGS_PANE_VIEWED, {
          settings_type: "guild",
          origin_pane: t,
          destination_pane: e,
          location: s,
        });
      }
      let eW = {
        canManageGuild: !1,
        canManageChannels: !1,
        canManageRoles: !1,
        canManageBans: !1,
        canManageNicknames: !1,
        canManageGuildExpressions: !1,
        canViewAuditLog: !1,
        canViewAuditLogV2: !1,
        canManageWebhooks: !1,
        canAccessMembersPage: !1,
        canViewGuildAnalytics: !1,
        isOwner: !1,
        isOwnerWithRequiredMfaLevel: !1,
      };
      class ez extends l.PureComponent {
        componentDidMount() {
          eY(this.props.section, null, this.props.analyticsLocation);
        }
        componentWillUnmount() {
          et.default.close();
        }
        componentDidUpdate(e) {
          let { section: t } = e,
            {
              section: s,
              canManageGuild: a,
              canManageRoles: l,
              canManageBans: n,
              canManageNicknames: i,
              canManageGuildExpressions: r,
              canViewAuditLog: o,
              canViewAuditLogV2: u,
              canManageWebhooks: c,
              canAccessMembersPage: E,
              canViewGuildAnalytics: _,
            } = this.props;
          s !== t && eY(s, t),
            ((!a && !l && !n && !i && !r && !o && !u && !E && !c) ||
              (!o && s === eb.GuildSettingsSections.AUDIT_LOG) ||
              (!u && s === eb.GuildSettingsSections.AUDIT_LOG_V2) ||
              (!l && s === eb.GuildSettingsSections.ROLES) ||
              (!r && s === eb.GuildSettingsSections.EMOJI) ||
              (!r && s === eb.GuildSettingsSections.STICKERS) ||
              (!r && s === eb.GuildSettingsSections.SOUNDBOARD) ||
              (!n && s === eb.GuildSettingsSections.BANS) ||
              (!_ && s === eb.GuildSettingsSections.ANALYTICS) ||
              (!E && s === eb.GuildSettingsSections.MEMBERS)) &&
              (0, d.popLayer)();
        }
        render() {
          var e, t;
          let {
            theme: s,
            sidebarTheme: l,
            section: n,
            guild: i,
            channels: r,
            canManageGuild: o,
            canViewAuditLog: c,
            canViewAuditLogV2: E,
            canManageRoles: _,
            canManageGuildExpressions: I,
            canManageWebhooks: T,
            canManageBans: f,
            canAccessMembersPage: S,
            canViewGuildAnalytics: m,
            isOwner: N,
            isOwnerWithRequiredMfaLevel: g,
            showDirtyGuildTemplateIndicator: h,
            memberCount: C,
            isGuildAuditLogV2Enabled: R,
            showAccessRate: x,
            onboardingStep: L,
            onboardingEnabled: O,
            welcomeScreenEmpty: p,
            guildMetadata: A,
          } = this.props;
          if (null == i) return null;
          let M = ew({
              guild: i,
              channels: r,
              canManageGuild: o,
              canViewAuditLog: c,
              canViewAuditLogV2: E,
              canManageRoles: _,
              canManageGuildExpressions: I,
              canManageWebhooks: T,
              canManageBans: f,
              canAccessMembersPage: S,
              canViewGuildAnalytics: m,
              isOwner: N,
              isOwnerWithRequiredMfaLevel: g,
              showDirtyGuildTemplateIndicator: h,
              memberCount: C,
              isGuildAuditLogV2Enabled: R,
              showAccessRate: x,
              onboardingStep: L,
              onboardingEnabled: O,
              welcomeScreenEmpty: p,
              guildMetadata: A,
              section: n,
            }),
            D =
              (null === (t = M.find(e => e.section === n)) || void 0 === t
                ? void 0
                : null === (e = t.predicate) || void 0 === e
                  ? void 0
                  : e.call(t)) !== !1;
          return (0, a.jsxs)("div", {
            children: [
              (0, a.jsx)(u.default, {
                theme: s,
                sidebarTheme: l,
                section: D && null != n ? n : eb.GuildSettingsSections.OVERVIEW,
                onSetSection: et.default.setSection,
                onClose: d.popLayer,
                title: ek(i),
                sections: M,
              }),
              (0, a.jsx)(k.ViewingRolesSettingsNotice, { guildId: i.id }),
            ],
          });
        }
      }
      function eK() {
        var e, t;
        let {
            guild: s,
            section: n,
            analyticsLocation: r,
            guildMetadata: o,
            isGuildMetadataLoaded: d,
          } = (0, i.useStateFromStoresObject)([ei.default], () =>
            ei.default.getProps()
          ),
          { AnalyticsLocationProvider: u } = (0, I.default)(
            E.default.GUILD_SETTINGS
          ),
          c = (0, i.useStateFromStores)([w.default], () => w.default.theme),
          _ = (0, i.useStateFromStores)([w.default], () =>
            w.default.darkSidebar ? eb.ThemeTypes.DARK : void 0
          ),
          T = (0, i.useStateFromStores)(
            [K.default],
            () => (null != s ? K.default.getChannels(s.id).SELECTABLE : null),
            [s]
          ),
          f = (0, i.useStateFromStoresObject)([X.default], () =>
            null != s ? X.default.getGuildPermissionProps(s) : eW
          ),
          S = null == s ? void 0 : s.id,
          m = (0, i.useStateFromStores)(
            [X.default],
            () => null != s && X.default.canAccessGuildSettings(s)
          ),
          g = null != s && (0, $.staffOnlyGuildSettingsAccess)(s.id),
          h = g || m,
          R = g || f.canViewGuildAnalytics,
          { shouldFetchMemberInsights: x, hasAccessRate: L } = (0,
          i.useStateFromStoresObject)([ea.default], () => ({
            shouldFetchMemberInsights:
              null != s && ea.default.shouldFetchMemberInsights(s.id),
            hasAccessRate:
              null != s && ea.default.getMemberInsights(s.id).hasAccessRate,
          }));
        l.useEffect(() => {
          !d && null != S && (0, N.fetchMetadataForGuild)(S);
        }, [d, S]),
          l.useEffect(() => {
            h && R && x && null != S && (0, es.fetchMemberInsights)(S);
          }, [h, R, x, S]);
        let A =
          null !==
            (e =
              null == s ? void 0 : s.hasFeature(eb.GuildFeatures.COMMUNITY)) &&
          void 0 !== e &&
          e;
        l.useEffect(() => {
          null != S &&
            A &&
            ((0, O.fetchOnboardingPrompts)(S), (0, V.fetchWelcomeScreen)(S));
        }, [S, A]);
        let { homeSettingsEnabled: v } = (0,
        D.useOnboardingHomeAdminExperiment)(
          null != S ? S : eb.EMPTY_STRING_SNOWFLAKE_ID
        );
        l.useEffect(() => {
          null != S && v && (0, M.fetchGuildHomeSettings)(S);
        }, [v, S]);
        let { showAccessRate: G } = (0, $.useGuildAccessRateInsightExperiment)(
            null == s ? void 0 : s.id,
            !L || !R || !h
          ),
          j = (0, i.useStateFromStores)(
            [F.default],
            () => {
              var e;
              return (
                (null == s ? void 0 : s.id) != null &&
                (null === (e = F.default.getForGuild(s.id)) || void 0 === e
                  ? void 0
                  : e.isDirty) === !0
              );
            },
            [s]
          ),
          U = (0, i.useStateFromStores)(
            [Z.default],
            () => Z.default.getMemberCount(null == s ? void 0 : s.id),
            [s]
          ),
          P = (0, C.useGuildAuditLogV2Enabled)(
            null !== (t = null == s ? void 0 : s.id) && void 0 !== t
              ? t
              : eb.EMPTY_STRING_SNOWFLAKE_ID
          );
        l.useEffect(() => {
          null != S && f.canManageGuild && y.default.loadTemplatesForGuild(S);
        }, [S, f.canManageGuild]),
          l.useEffect(() => {
            !h && et.default.close();
          }, [h]);
        let b = (0, i.useStateFromStores)([ed.default], () =>
            ed.default.getCurrentPage()
          ),
          B = (0, i.useStateFromStores)(
            [p.default],
            () => null != S && p.default.getEnabled(S)
          ),
          H = (0, i.useStateFromStores)(
            [W.default],
            () => null != S && W.default.isEmpty(S)
          );
        return (0, a.jsx)(u, {
          children: (0, a.jsx)(ez, {
            guild: s,
            section: n,
            theme: c,
            sidebarTheme: _,
            channels: T,
            showDirtyGuildTemplateIndicator: j,
            analyticsLocation: r,
            memberCount: U,
            isGuildAuditLogV2Enabled: P,
            ...f,
            canViewGuildAnalytics: R,
            showAccessRate: G,
            onboardingStep: b,
            onboardingEnabled: B,
            welcomeScreenEmpty: H,
            guildMetadata: o,
          }),
        });
      }
    },
    902273: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return z;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("748820"),
        i = s("86758"),
        r = s("446674"),
        o = s("872717"),
        d = s("151426"),
        u = s("669491"),
        c = s("77078"),
        E = s("655772"),
        _ = s("10641"),
        I = s("597517"),
        T = s("915639"),
        f = s("525065"),
        S = s("305961"),
        m = s("37785"),
        N = s("68238"),
        g = s("956089"),
        h = s("599110"),
        C = s("199938"),
        R = s("592407"),
        x = s("738216"),
        L = s("692541"),
        O = s("900938"),
        p = s("49111"),
        A = s("994428"),
        M = s("533613"),
        D = s("782340"),
        v = s("641399"),
        G = s("330808"),
        j = s("424596"),
        U = s("284776"),
        P = s("101332"),
        b = s("831153"),
        B = s("432392"),
        y = s("933861"),
        F = s("877026"),
        H = s("775113");
      let k = function (e, t, s) {
          let a =
              arguments.length > 3 && void 0 !== arguments[3] && arguments[3],
            l = null;
          return (
            null == t || Number.isNaN(t)
              ? (null == t || Number.isNaN(t)) &&
                null != e &&
                (l = D.default.Messages.GUILD_ANALYTICS_METRICS_LAST_WEEK)
              : (l = D.default.Messages.PERCENTAGE_SINCE_LAST_WEEK.format({
                  percentage: (0, i.truncateAndLocalizeNumber)(Math.abs(t), s),
                })),
            {
              localizedNumber:
                null != e
                  ? ""
                      .concat((0, i.truncateAndLocalizeNumber)(e, s))
                      .concat(a ? "%" : "")
                  : D.default.Messages.NOT_AVAILABLE,
              subtext: l,
              isTrendingUp: t > 0,
              isTrendingDown: t < 0,
            }
          );
        },
        w = function (e) {
          let t =
            arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          return t || e === p.AbortCodes.NOT_ENOUGH_GUILD_MEMBERS
            ? (0, a.jsx)(c.FormErrorBlock, {
                icon: N.default,
                className: v.notEnoughMembersError,
                backgroundColor: c.FormErrorBlockColors.BACKGROUND_ACCENT,
                children: D.default.Messages.GUILD_ANALYTICS_ERROR_GUILD_SIZE,
              })
            : null == e
              ? null
              : (0, a.jsx)(c.FormErrorBlock, {
                  backgroundColor: c.FormErrorBlockColors.BACKGROUND_ACCENT,
                  children: D.default.Messages.GUILD_ANALYTICS_ERROR_MESSAGE,
                });
        };
      function V(e) {
        h.default.track(p.AnalyticEvents.GUILD_INSIGHTS_SETTINGS_CTA_CLICKED, {
          guild_id: e,
        });
        let t =
            null == e
              ? p.RelativeMarketingURLs.DEVELOPER_PORTAL
              : p.RelativeMarketingURLs.DEVELOPER_PORTAL_GUILD_ANALYTICS(e),
          s = (0, n.v4)();
        return o.default
          .post({
            url: p.Endpoints.HANDOFF,
            body: { key: s },
            oldFormErrors: !0,
          })
          .then(
            e => {
              let a = e.body.handoff_token;
              window.open(
                p.MarketingURLs.DEVELOPER_PORTAL_LOGIN_HANDOFF(s, a, t)
              );
            },
            () => {
              window.open(t);
            }
          );
      }
      let Y = () => {
        let [e, t] = l.useState(!1),
          s = (0, r.useStateFromStores)([O.default], () =>
            O.default.getGuildId()
          );
        return (0, a.jsx)(c.Button, {
          className: v.developerPortalCta,
          onClick: () => {
            t(!0),
              V(s).then(() => {
                t(!1);
              });
          },
          submitting: e,
          children: D.default.Messages.GUILD_ANALYICS_DEVELOPERS_BUTTON,
        });
      };
      function W(e) {
        let { guildId: t } = e,
          { hasAccessRate: s, accessRate: n } = (0, r.useStateFromStoresObject)(
            [L.default],
            () => L.default.getMemberInsights(t)
          ),
          i = (0, r.useStateFromStores)([f.default], () => {
            var e;
            return null !== (e = f.default.getMemberCount()) && void 0 !== e
              ? e
              : 0;
          }),
          { showAccessRate: o } = (0, C.useGuildAccessRateInsightExperiment)(
            t,
            !s
          );
        if (
          (l.useEffect(() => {
            o &&
              ((0, _.requestMarkDismissibleContentAsShown)(
                d.DismissibleContent.GUILD_INSIGHTS_ACCESS_RATE_NEW
              ),
              (0, _.markDismissibleContentAsDismissed)(
                d.DismissibleContent.GUILD_INSIGHTS_ACCESS_RATE_NEW,
                { dismissAction: A.ContentDismissActionType.AUTO }
              ));
          }, [o]),
          !o || !s || null == n)
        )
          return null;
        let E = 10 * Math.ceil((1 - n) * 10),
          I = H,
          T = null,
          S = null;
        return (
          n >= 0.9
            ? ((I = H),
              (T =
                D.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_VERY_GOOD.format(
                  {
                    ratingHook: (e, t) =>
                      (0, a.jsx)(
                        "span",
                        { className: v.ratingVeryGood, children: e },
                        t
                      ),
                  }
                )),
              (S = D.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_LESS.format(
                { accessRate: 10 }
              )))
            : n >= (i > 1e4 ? 0.7 : 0.8)
              ? ((I = y),
                (T =
                  D.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_GOOD.format({
                    ratingHook: (e, t) =>
                      (0, a.jsx)(
                        "span",
                        { className: v.ratingGood, children: e },
                        t
                      ),
                  })),
                (S =
                  D.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_APPROX.format(
                    { accessRate: E }
                  )))
              : n >= 0.5
                ? ((I = F),
                  (T =
                    D.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_NEUTRAL.format(
                      {
                        ratingHook: (e, t) =>
                          (0, a.jsx)(
                            "span",
                            { className: v.ratingNeutral, children: e },
                            t
                          ),
                      }
                    )),
                  (S =
                    D.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_APPROX.format(
                      { accessRate: E }
                    )))
                : ((I = B),
                  (T =
                    D.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_BAD.format(
                      {
                        ratingHook: (e, t) =>
                          (0, a.jsx)(
                            "span",
                            { className: v.ratingBad, children: e },
                            t
                          ),
                      }
                    )),
                  (S =
                    100 === E
                      ? D.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_APPROX.format(
                          { accessRate: E }
                        )
                      : D.default.Messages.MEMBER_INSIGHTS_ACCESS_RATING_MORE.format(
                          { accessRate: E }
                        ))),
          (0, a.jsxs)(a.Fragment, {
            children: [
              (0, a.jsxs)(c.Heading, {
                variant: "heading-md/semibold",
                className: v.insightsTitle,
                children: [
                  D.default.Messages.MEMBER_INSIGHTS_SERVER_ACCESS,
                  (0, a.jsx)(g.TextBadge, {
                    text: D.default.Messages.BETA,
                    color: u.default.unsafe_rawColors.BRAND_500.css,
                    className: v.betaTag,
                  }),
                ],
              }),
              (0, a.jsxs)("div", {
                className: v.memberInsightsContainer,
                children: [
                  (0, a.jsxs)("div", {
                    className: v.insightsHeader,
                    children: [
                      (0, a.jsx)("img", {
                        alt: "",
                        className: v.insightsIcon,
                        src: I,
                      }),
                      (0, a.jsxs)("div", {
                        children: [
                          (0, a.jsx)(c.Text, {
                            variant: "text-md/semibold",
                            className: v.title,
                            children: T,
                          }),
                          (0, a.jsxs)(c.Text, {
                            className: v.description,
                            variant: "text-sm/normal",
                            children: [
                              S,
                              (0, a.jsx)(c.TooltipContainer, {
                                text: D.default.Messages
                                  .MEMBER_INSIGHTS_ACCESS_RATE_TOOLTIP,
                                className: v.insightsTooltip,
                                children: (0, a.jsx)(N.default, {
                                  className: v.insightsTooltipIcon,
                                }),
                              }),
                            ],
                          }),
                        ],
                      }),
                    ],
                  }),
                  n < 0.9
                    ? (0, a.jsxs)(a.Fragment, {
                        children: [
                          (0, a.jsx)("div", { className: v.divider }),
                          (0, a.jsx)(c.Text, {
                            className: v.tips,
                            variant: "text-sm/semibold",
                            children:
                              D.default.Messages.MEMBER_INSIGHTS_TIPS.format(),
                          }),
                          (0, a.jsxs)("div", {
                            className: v.insightsActions,
                            children: [
                              (0, a.jsxs)("div", {
                                className: v.insightAction,
                                children: [
                                  (0, a.jsx)("img", {
                                    alt: "",
                                    className: v.actionIcon,
                                    src: U,
                                  }),
                                  (0, a.jsx)(c.Text, {
                                    className: v.actionText,
                                    variant: "text-sm/normal",
                                    children:
                                      D.default.Messages
                                        .ACCESS_RATE_ACTION_SIMPLIFY,
                                  }),
                                ],
                              }),
                              (0, a.jsx)("div", { className: v.dividerInline }),
                              (0, a.jsxs)("div", {
                                className: v.insightAction,
                                children: [
                                  (0, a.jsx)("img", {
                                    alt: "",
                                    className: v.actionIcon,
                                    src: P,
                                  }),
                                  (0, a.jsx)(c.Text, {
                                    className: v.actionText,
                                    variant: "text-sm/normal",
                                    children:
                                      D.default.Messages
                                        .ACCESS_RATE_ACTION_EXTRA_STEPS,
                                  }),
                                ],
                              }),
                              (0, a.jsx)("div", { className: v.dividerInline }),
                              (0, a.jsxs)("div", {
                                className: v.insightAction,
                                children: [
                                  (0, a.jsx)("img", {
                                    alt: "",
                                    className: v.actionIcon,
                                    src: j,
                                  }),
                                  (0, a.jsx)(c.Text, {
                                    className: v.actionText,
                                    variant: "text-sm/normal",
                                    children:
                                      D.default.Messages.ACCESS_RATE_ACTION_BOTS.format(
                                        {
                                          integrationsHook: (e, t) =>
                                            (0, a.jsx)(
                                              m.default,
                                              {
                                                onClick: () =>
                                                  R.default.setSection(
                                                    p.GuildSettingsSections
                                                      .INTEGRATIONS
                                                  ),
                                                className: v.link,
                                                children: e,
                                              },
                                              t
                                            ),
                                        }
                                      ),
                                  }),
                                ],
                              }),
                              (0, a.jsx)("div", { className: v.dividerInline }),
                              (0, a.jsxs)("div", {
                                className: v.insightAction,
                                children: [
                                  (0, a.jsx)("img", {
                                    alt: "",
                                    className: v.actionIcon,
                                    src: G,
                                  }),
                                  (0, a.jsx)(c.Text, {
                                    className: v.actionText,
                                    variant: "text-sm/normal",
                                    children:
                                      D.default.Messages
                                        .ACCESS_RATE_ACTION_AUDIT,
                                  }),
                                ],
                              }),
                            ],
                          }),
                        ],
                      })
                    : (0, a.jsx)("div", {
                        className: v.insightsActions,
                        children: (0, a.jsxs)("div", {
                          className: v.insightAction,
                          children: [
                            (0, a.jsx)("img", {
                              alt: "",
                              className: v.actionIcon,
                              src: b,
                            }),
                            (0, a.jsx)(c.Text, {
                              className: v.actionText,
                              variant: "text-sm/normal",
                              children:
                                D.default.Messages.ACCESS_RATE_ACTION_SUCCESS.format(
                                  {
                                    insightsHook: (e, s) =>
                                      (0, a.jsx)(
                                        m.default,
                                        {
                                          onClick: () => V(t),
                                          className: v.link,
                                          children: e,
                                        },
                                        s
                                      ),
                                  }
                                ),
                            }),
                          ],
                        }),
                      }),
                ],
              }),
              (0, a.jsx)("div", { className: v.divider }),
              (0, a.jsx)(c.Heading, {
                variant: "heading-md/semibold",
                className: v.insightsTitle,
                children: D.default.Messages.SERVER_INSIGHTS,
              }),
            ],
          })
        );
      }
      var z = () => {
        let e = (0, r.useStateFromStores)([O.default], () =>
            O.default.getGuildId()
          ),
          t = (0, r.useStateFromStores)([f.default], () =>
            f.default.getMemberCount(e)
          ),
          s = (0, r.useStateFromStores)([S.default], () =>
            S.default.getGuild(e)
          ),
          n = (0, r.useStateFromStores)([T.default], () => T.default.locale),
          { analytics: i, errorCode: o } = (0, r.useStateFromStoresObject)(
            [L.default],
            () => ({
              analytics: null != e ? L.default.getOverviewAnalytics(e) : null,
              errorCode: L.default.getError(),
            })
          ),
          d =
            null == t ||
            null == s ||
            (null != t &&
              t < 500 &&
              null != s &&
              !s.hasFeature(p.GuildFeatures.PARTNERED) &&
              !s.hasFeature(p.GuildFeatures.VERIFIED));
        l.useEffect(() => {
          null != e &&
            !d &&
            ((0, x.fetchEngagementOverview)(e),
            (0, x.fetchGrowthActivationOverview)(e),
            (0, x.fetchGrowthActivationRetention)(e));
        }, [e, d]),
          l.useEffect(() => {
            (0, I.hideHotspot)(
              M.HotspotLocations.GUILD_ANALYTICS_GUILD_SETTINGS_MENU
            );
          }, []);
        let u =
          null != i
            ? (0, a.jsx)("div", {
                className: v.guildAnalyticsOverviewWrapper,
                children: (0, a.jsxs)("div", {
                  className: v.overviewData,
                  children: [
                    (0, a.jsx)(E.default, {
                      title: D.default.Messages.WEEKLY_VISITORS,
                      tooltipText: D.default.Messages.VISITORS_INFO,
                      ...k(i.visitors, i.visitorsChange, n),
                    }),
                    (0, a.jsx)(E.default, {
                      title: D.default.Messages.WEEKLY_COMMUNICATORS,
                      tooltipText: D.default.Messages.COMMUNICATORS_INFO,
                      ...k(i.communicators, i.communicatorsChange, n),
                    }),
                    (0, a.jsx)(E.default, {
                      title: D.default.Messages.WEEKLY_NEW_MEMBERS,
                      ...k(i.newMembers, i.newMembersChange, n),
                    }),
                    (0, a.jsx)(E.default, {
                      title: D.default.Messages.WEEKLY_NEW_MEMBER_RETENTION,
                      tooltipText: D.default.Messages.NEW_MEMBER_RETENTION_INFO,
                      ...k(i.pctRetained, i.pctRetainedChange, n, !0),
                    }),
                  ],
                }),
              })
            : null;
        return (0, a.jsxs)(c.FormSection, {
          tag: c.FormTitleTags.H1,
          title: D.default.Messages.SERVER_INSIGHTS,
          children: [
            (0, a.jsx)(c.FormText, {
              type: c.FormTextTypes.DESCRIPTION,
              children: D.default.Messages.GUILD_ANALYTICS_DESCRIPTION.format(),
            }),
            w(o, d),
            null != e ? (0, a.jsx)(W, { guildId: e }) : null,
            (0, a.jsxs)("div", {
              className: v.developerPortalCtaWrapper,
              children: [
                (0, a.jsx)("div", { className: v.placeholderImage }),
                (0, a.jsx)(c.Text, {
                  className: v.developerPortalCtaText,
                  variant: "text-sm/normal",
                  children: D.default.Messages.GUILD_ANALYTICS_DEVELOPERS_CTA,
                }),
                (0, a.jsx)(Y, {}),
              ],
            }),
            u,
          ],
        });
      };
    },
    721822: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return B;
          },
        }),
        s("222007"),
        s("424973");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("917351"),
        o = s("446674"),
        d = s("77078"),
        u = s("272030"),
        c = s("851387"),
        E = s("534291"),
        _ = s("599417"),
        I = s("161778"),
        T = s("102985"),
        f = s("697218"),
        S = s("941886"),
        m = s("810567"),
        N = s("258078"),
        g = s("117362"),
        h = s("655518"),
        C = s("158998"),
        R = s("592407"),
        x = s("468349"),
        L = s("900938"),
        O = s("431451"),
        p = s("772871"),
        A = s("318496"),
        M = s("49111"),
        D = s("782340"),
        v = s("993027"),
        G = s("685691");
      function j(e) {
        let {
            transitionState: t,
            guild: s,
            user: n,
            ban: i,
            hideDiscriminator: r,
            onClose: o,
          } = e,
          [u, E] = l.useState(!1),
          [I, T] = l.useState(null);
        async function f() {
          if (null != s) {
            T(null), E(!0);
            try {
              await c.default.unbanUser(s.id, n.id), o();
            } catch (e) {
              T(new _.default(e)), E(!1);
            }
          }
        }
        return (0, a.jsxs)(d.ModalRoot, {
          className: v.bannedUserModal,
          transitionState: t,
          children: [
            (0, a.jsxs)(d.ModalHeader, {
              className: v.header,
              separator: !1,
              children: [
                (0, a.jsx)(N.default, {
                  size: N.default.Sizes.SIZE_24,
                  className: v.userUsername,
                  children: C.default.getUserTag(n, {
                    mode: "username",
                    identifiable: r ? "never" : "always",
                  }),
                }),
                r || n.isPomelo()
                  ? null
                  : (0, a.jsxs)(N.default, {
                      size: N.default.Sizes.SIZE_24,
                      className: v.userDiscrim,
                      children: ["#", n.discriminator],
                    }),
              ],
            }),
            (0, a.jsxs)(d.ModalContent, {
              className: v.content,
              children: [
                (0, a.jsx)(d.Text, {
                  className: v.reasonHeader,
                  variant: "text-xs/normal",
                  children: D.default.Messages.BAN_REASON,
                }),
                (0, a.jsx)(d.Text, {
                  variant: "text-sm/normal",
                  children:
                    null != i.reason && "" !== i.reason
                      ? i.reason
                      : D.default.Messages.NO_BAN_REASON,
                }),
                null != I
                  ? (0, a.jsx)(d.Text, {
                      className: v.error,
                      color: "text-danger",
                      variant: "text-sm/normal",
                      children: I.getAnyErrorMessage(),
                    })
                  : null,
              ],
            }),
            (0, a.jsxs)(d.ModalFooter, {
              className: v.footer,
              children: [
                (0, a.jsx)(d.Button, {
                  onClick: f,
                  look: d.Button.Looks.LINK,
                  color: d.Button.Colors.RED,
                  submitting: u,
                  children: D.default.Messages.REVOKE_BAN,
                }),
                (0, a.jsx)(d.Button, {
                  onClick: o,
                  children: D.default.Messages.DONE,
                }),
              ],
            }),
          ],
        });
      }
      class U extends l.PureComponent {
        render() {
          let { user: e, hideDiscriminator: t, guild: s } = this.props;
          return (0, a.jsxs)(d.Clickable, {
            className: i(v.bannedUser, G.card),
            onClick: this.handleShowModal,
            onContextMenu: this.handleContextMenu,
            children: [
              (0, a.jsx)(d.Avatar, {
                src: e.getAvatarURL(null == s ? void 0 : s.id, 40),
                "aria-label": e.username,
                size: d.AvatarSizes.SIZE_40,
                className: v.bannedUserAvatar,
              }),
              (0, a.jsxs)("div", {
                className: v.username,
                children: [
                  C.default.getUserTag(e, {
                    mode: "username",
                    identifiable: t ? "never" : "always",
                  }),
                  !t &&
                    !e.isPomelo() &&
                    (0, a.jsxs)("span", {
                      className: v.discrim,
                      children: ["#", e.discriminator],
                    }),
                ],
              }),
            ],
          });
        }
        constructor(...e) {
          super(...e),
            (this.handleShowModal = () => {
              let {
                guild: e,
                user: t,
                hideDiscriminator: s,
                ban: l,
              } = this.props;
              (0, d.openModal)(n =>
                (0, a.jsx)(j, {
                  ...n,
                  guild: e,
                  user: t,
                  ban: l,
                  hideDiscriminator: s,
                })
              );
            }),
            (this.handleContextMenu = e => {
              (0, u.openContextMenuLazy)(e, async () => {
                let { default: e } = await s
                  .el("590079")
                  .then(s.bind(s, "590079"));
                return t => (0, a.jsx)(e, { ...t, user: this.props.user });
              });
            });
        }
      }
      class P extends l.PureComponent {
        makeFilter(e) {
          if (null == e || 0 === e.length) return e => null != e;
          {
            let t = RegExp("^".concat(h.default.escape(e)), "i");
            return s => null != s && (s.id === e || t.test(s.username));
          }
        }
        render() {
          let { bans: e, guild: t, searchQuery: s } = this.props;
          if (null == t) return null;
          let l = this.getSortedBans(e, s);
          return (0, a.jsx)(E.ListContentScroller, {
            sections: [Math.max(1, l.length)],
            sectionHeight: this.getSectionHeight,
            renderSection: this.renderSection,
            rowHeight: this.getRowHeight,
            renderRow: this.renderRow,
          });
        }
        handleModerationClick() {
          R.default.setSection(M.GuildSettingsSections.SAFETY),
            (0, O.setSafetyPage)(
              p.GuildSettingsSafetyPage.DM_AND_SPAM_PROTECTION
            );
        }
        handleQueryChange(e) {
          R.default.setSearchQuery(e);
        }
        handleQueryClear() {
          R.default.setSearchQuery("");
        }
        constructor(...e) {
          super(...e),
            (this.getSortedBans = (0, g.cachedFunction)((e, t) => {
              if (null == e) return [];
              let s = this.makeFilter(t),
                a = [];
              for (let t of e.keys()) {
                let e = f.default.getUser(t);
                null != e && s(e) && a.push(e);
              }
              return a.sort((e, t) => e.username.localeCompare(t.username));
            })),
            (this.getRowHeight = (e, t) => {
              var s;
              if (e > 0) return 0;
              let { bans: a, searchQuery: l } = this.props,
                n = this.getSortedBans(a, l);
              if (0 === n.length && 1 === t) return 56;
              let i = n[t],
                r =
                  null == a
                    ? void 0
                    : a.get(
                        null !== (s = null == i ? void 0 : i.id) && void 0 !== s
                          ? s
                          : ""
                      );
              return null == i || null == r ? 0 : 56;
            }),
            (this.renderRow = e => {
              var t;
              let { section: s, row: l } = e,
                {
                  bans: n,
                  streamerMode: i,
                  guild: r,
                  searchQuery: o,
                } = this.props;
              if (s > 0) return null;
              if (null == n && 0 === l)
                return (0, a.jsx)(
                  d.Spinner,
                  {
                    className: v.spinner,
                    type: d.Spinner.Type.SPINNING_CIRCLE,
                  },
                  "spinner"
                );
              let u = this.getSortedBans(n, o),
                c = u[l],
                E =
                  null == n
                    ? void 0
                    : n.get(
                        null !== (t = null == c ? void 0 : c.id) && void 0 !== t
                          ? t
                          : ""
                      );
              if (null != c && null != E)
                return (0, a.jsx)(
                  U,
                  { user: c, ban: E, hideDiscriminator: i, guild: r },
                  c.id
                );
            }),
            (this.getSectionHeight = e => {
              if (e > 0) return 0;
              let { bans: t } = this.props;
              return null == t ? 462 : 120;
            }),
            (this.renderSection = () => {
              var e;
              let t;
              let { bans: l, theme: n, searchQuery: i } = this.props;
              null == l
                ? (t = null)
                : (null == l ? void 0 : l.size) === 0 &&
                  (t = (0, a.jsxs)(S.default, {
                    theme: n,
                    className: v.emptyState,
                    children: [
                      (0, a.jsx)(S.EmptyStateImage, {
                        darkSrc: s("325911"),
                        lightSrc: s("138147"),
                        width: 256,
                        height: 212,
                      }),
                      (0, a.jsx)(S.EmptyStateText, {
                        note: D.default.Messages.BANS_NO_USERS_BANNED,
                        style: { maxWidth: 300 },
                        children: D.default.Messages.NO_BANS,
                      }),
                    ],
                  }));
              let r =
                null !== (e = null == l ? void 0 : l.size) && void 0 !== e
                  ? e
                  : 0;
              return (0, a.jsxs)(
                d.FormSection,
                {
                  tag: d.FormTitleTags.H1,
                  title: D.default.Messages.BANS_HEADER.format({ bans: r }),
                  children: [
                    (0, a.jsxs)("div", {
                      className: v.settingsHeader,
                      children: [
                        (0, a.jsx)(d.FormText, {
                          type: d.FormTextTypes.DESCRIPTION,
                          className: v.description,
                          children: D.default.Messages.BANS_HINT.format({
                            onModerationClick: this.handleModerationClick,
                          }),
                        }),
                        null == t &&
                          (0, a.jsx)(m.default, {
                            className: v.searchBar,
                            query: null != i ? i : "",
                            placeholder:
                              D.default.Messages.BANS_SEARCH_PLACEHOLDER,
                            "aria-label":
                              D.default.Messages.BANS_SEARCH_PLACEHOLDER,
                            onChange: this.handleQueryChange,
                            onClear: this.handleQueryClear,
                          }),
                      ],
                    }),
                    (0, a.jsx)(d.FormDivider, { style: { marginBottom: -1 } }),
                    t,
                  ],
                },
                "bans-header"
              );
            });
        }
      }
      let b = o.default.connectStores([L.default, I.default, T.default], () => {
        let { bans: e, guild: t, searchQuery: s } = L.default.getProps();
        return {
          searchQuery: null != s ? s : "",
          bans: e,
          guild: t,
          theme: I.default.theme,
          streamerMode: T.default.hidePersonalInformation,
        };
      })(P);
      function B() {
        var e;
        let { guild: t } = (0, o.useStateFromStores)(
            [L.default],
            () => L.default.getProps(),
            [],
            r.isEqual
          ),
          { enabled: s } = x.GuildSettingsBansNewExperiment.useExperiment(
            {
              guildId:
                null !== (e = null == t ? void 0 : t.id) && void 0 !== e
                  ? e
                  : M.EMPTY_STRING_SNOWFLAKE_ID,
              location: "4d6318_1",
            },
            { autoTrackExposure: !0 }
          );
        return s ? (0, a.jsx)(A.default, {}) : (0, a.jsx)(b, {});
      }
    },
    318496: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return F;
          },
        }),
        s("222007"),
        s("424973");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("917351"),
        o = s.n(r),
        d = s("65597"),
        u = s("77078"),
        c = s("272030"),
        E = s("851387"),
        _ = s("599417"),
        I = s("84339"),
        T = s("841098"),
        f = s("716241"),
        S = s("685665"),
        m = s("770115"),
        N = s("102985"),
        g = s("697218"),
        h = s("941886"),
        C = s("810567"),
        R = s("124299"),
        x = s("258078"),
        L = s("599110"),
        O = s("334572"),
        p = s("158998"),
        A = s("592407"),
        M = s("900938"),
        D = s("431451"),
        v = s("772871"),
        G = s("49111"),
        j = s("782340"),
        U = s("529969");
      function P(e) {
        var t;
        let {
            transitionState: s,
            guild: n,
            user: i,
            ban: r,
            hideDiscriminator: o,
            onClose: d,
          } = e,
          [c, I] = l.useState(!1),
          [T, m] = l.useState(null),
          { analyticsLocations: N } = (0, S.default)(),
          g =
            null !== (t = null == N ? void 0 : N[0]) && void 0 !== t ? t : null;
        async function h() {
          if (null != n) {
            m(null), I(!0);
            try {
              await E.default.unbanUser(n.id, i.id),
                d(),
                L.default.track(G.AnalyticEvents.GUILD_BAN_REMOVED, {
                  ...(0, f.collectGuildAnalyticsMetadata)(n.id),
                  target_user_id: i.id,
                  reason: r.reason,
                  location: g,
                });
            } catch (e) {
              m(new _.default(e)), I(!1);
            }
          }
        }
        return (0, a.jsxs)(u.ModalRoot, {
          className: U.bannedUserModal,
          transitionState: s,
          children: [
            (0, a.jsxs)(u.ModalHeader, {
              className: U.header,
              separator: !1,
              children: [
                (0, a.jsx)(x.default, {
                  size: x.default.Sizes.SIZE_24,
                  className: U.userUsername,
                  children: p.default.getUserTag(i, {
                    mode: "username",
                    identifiable: o ? "never" : "always",
                  }),
                }),
                o || i.isPomelo()
                  ? null
                  : (0, a.jsxs)(x.default, {
                      size: x.default.Sizes.SIZE_24,
                      className: U.userDiscrim,
                      children: ["#", i.discriminator],
                    }),
              ],
            }),
            (0, a.jsxs)(u.ModalContent, {
              className: U.content,
              children: [
                (0, a.jsx)(u.Text, {
                  className: U.reasonHeader,
                  variant: "text-xs/normal",
                  children: j.default.Messages.BAN_REASON,
                }),
                (0, a.jsx)(u.Text, {
                  variant: "text-sm/normal",
                  children:
                    null != r.reason && "" !== r.reason
                      ? r.reason
                      : j.default.Messages.NO_BAN_REASON,
                }),
                null != T
                  ? (0, a.jsx)(u.Text, {
                      className: U.error,
                      color: "text-danger",
                      variant: "text-sm/normal",
                      children: T.getAnyErrorMessage(),
                    })
                  : null,
              ],
            }),
            (0, a.jsxs)(u.ModalFooter, {
              className: U.footer,
              children: [
                (0, a.jsx)(u.Button, {
                  onClick: h,
                  look: u.Button.Looks.LINK,
                  color: u.Button.Colors.RED,
                  submitting: c,
                  children: j.default.Messages.REVOKE_BAN,
                }),
                (0, a.jsx)(u.Button, {
                  onClick: d,
                  children: j.default.Messages.DONE,
                }),
              ],
            }),
          ],
        });
      }
      class b extends l.PureComponent {
        render() {
          let { user: e, hideDiscriminator: t, guild: s } = this.props,
            l = p.default.getGlobalName(e);
          return (0, a.jsxs)(u.Clickable, {
            className: i(U.bannedUser),
            onClick: this.handleShowModal,
            onContextMenu: this.handleContextMenu,
            children: [
              (0, a.jsx)(u.Avatar, {
                src: e.getAvatarURL(null == s ? void 0 : s.id, 40),
                "aria-label": e.username,
                size: u.AvatarSizes.SIZE_40,
                className: U.bannedUserAvatar,
              }),
              (0, a.jsxs)("div", {
                className: U.username,
                children: [
                  p.default.getUserTag(e, {
                    mode: "username",
                    identifiable: t ? "never" : "always",
                  }),
                  !t &&
                    !e.isPomelo() &&
                    (0, a.jsxs)("span", {
                      className: U.discrim,
                      children: ["#", e.discriminator],
                    }),
                  e.isPomelo() &&
                    (0, a.jsxs)("span", {
                      className: U.discrim,
                      children: ["(", l, ")"],
                    }),
                ],
              }),
            ],
          });
        }
        constructor(...e) {
          super(...e),
            (this.handleShowModal = () => {
              let {
                guild: e,
                user: t,
                hideDiscriminator: s,
                ban: l,
              } = this.props;
              (0, u.openModal)(n =>
                (0, a.jsx)(P, {
                  ...n,
                  guild: e,
                  user: t,
                  ban: l,
                  hideDiscriminator: s,
                })
              );
            }),
            (this.handleContextMenu = e => {
              (0, c.openContextMenuLazy)(e, async () => {
                let { default: e } = await s
                  .el("590079")
                  .then(s.bind(s, "590079"));
                return t => (0, a.jsx)(e, { ...t, user: this.props.user });
              });
            });
        }
      }
      let B = l.forwardRef(function (e, t) {
        let { guild: s, sortedBans: n, bans: i } = e,
          r = (0, d.default)(
            [N.default],
            () => N.default.hidePersonalInformation,
            []
          ),
          o = l.useCallback(
            e => {
              var t;
              if (null == i && 0 === e) return 60;
              let s = n[e],
                a =
                  null == i
                    ? void 0
                    : i.get(
                        null !== (t = null == s ? void 0 : s.id) && void 0 !== t
                          ? t
                          : ""
                      );
              return null == s || null == a ? 0 : 60;
            },
            [i, n]
          ),
          c = l.useCallback(
            e => {
              var t;
              if (null == i && 0 === e)
                return (0, a.jsx)(
                  u.Spinner,
                  {
                    className: U.spinner,
                    type: u.Spinner.Type.SPINNING_CIRCLE,
                  },
                  "spinner"
                );
              let l = n[e],
                o =
                  null == i
                    ? void 0
                    : i.get(
                        null !== (t = null == l ? void 0 : l.id) && void 0 !== t
                          ? t
                          : ""
                      );
              if (null != l && null != o)
                return (0, a.jsx)(
                  b,
                  { user: l, ban: o, hideDiscriminator: r, guild: s },
                  l.id
                );
            },
            [i, s, n, r]
          );
        return (0, a.jsx)(R.default, {
          role: "listbox",
          listPadding: [8, 8, 8, 8],
          rowCount: n.length,
          rowHeight: o,
          renderRow: c,
          ref: t,
        });
      });
      function y(e) {
        let { guildId: t, storedSearchQuery: s } = e,
          [n, i] = l.useState(null != s ? s : ""),
          [r, o] = l.useState(!1),
          d = l.useCallback(() => {
            A.default.setSection(G.GuildSettingsSections.SAFETY),
              (0, D.setSafetyPage)(
                v.GuildSettingsSafetyPage.DM_AND_SPAM_PROTECTION
              );
          }, []),
          c = l.useCallback(e => {
            i(e), 0 === e.trim().length && A.default.setSearchQuery(e);
          }, []),
          _ = l.useCallback(() => {
            i(""), A.default.setSearchQuery("");
          }, []),
          I = l.useCallback(async () => {
            if (0 === n.trim().length) {
              A.default.setSearchQuery(n), o(!1);
              return;
            }
            if (!r)
              try {
                o(!0);
                let [e, s] = (0, m.splitQuery)(n),
                  a = e[0];
                A.default.setSearchQuery(n),
                  await E.default.searchGuildBans(t, a, s),
                  o(!1);
              } catch (e) {
                o(!1);
              }
          }, [t, r, n]),
          T = l.useCallback(
            e => {
              "Enter" === e.key &&
                (e.preventDefault(), e.stopPropagation(), I());
            },
            [I]
          );
        return (0, a.jsxs)(
          u.FormSection,
          {
            tag: u.FormTitleTags.H1,
            title: j.default.Messages.BANS_HEADER_NEW,
            children: [
              (0, a.jsx)("div", {
                className: U.settingsHeader,
                children: (0, a.jsx)(u.FormText, {
                  type: u.FormTextTypes.DESCRIPTION,
                  className: U.description,
                  children: j.default.Messages.BANS_HINT.format({
                    onModerationClick: d,
                  }),
                }),
              }),
              (0, a.jsxs)("div", {
                className: U.bansSearchContainer,
                children: [
                  (0, a.jsx)(C.default, {
                    className: U.searchBar,
                    query: null != n ? n : "",
                    placeholder: j.default.Messages.BANS_SEARCH_PLACEHOLDER_NEW,
                    "aria-label":
                      j.default.Messages.BANS_SEARCH_PLACEHOLDER_NEW,
                    onChange: c,
                    onKeyDown: T,
                    onClear: _,
                    size: C.default.Sizes.MEDIUM,
                    isLoading: r,
                  }),
                  (0, a.jsx)(u.Button, {
                    color: u.Button.Colors.BRAND,
                    onClick: I,
                    size: u.Button.Sizes.SMALL,
                    disabled: r,
                    submitting: r,
                    className: U.searchButton,
                    children: j.default.Messages.SEARCH,
                  }),
                ],
              }),
            ],
          },
          "bans-header"
        );
      }
      function F() {
        var e, t;
        let { guild: n, searchQuery: c } = (0, d.default)(
            [M.default],
            () => M.default.getProps(),
            [],
            r.isEqual
          ),
          _ = null != c && c.trim().length > 0,
          f = (0, I.default)(_),
          S = _ !== f,
          [N] = (0, d.default)(
            [M.default],
            () => M.default.getBans(),
            [],
            O.isVersionEqual
          ),
          C =
            null !== (e = null == N ? void 0 : N.size) && void 0 !== e ? e : 0,
          R = (0, T.default)(),
          x =
            null !== (t = null == n ? void 0 : n.id) && void 0 !== t
              ? t
              : G.EMPTY_STRING_SNOWFLAKE_ID,
          L = l.useRef(null),
          p = l.useCallback(
            e =>
              null == e || 0 === e.length
                ? e => null != e
                : t => {
                    if (null == t || 0 === e.trim().length) return !1;
                    let [[s], a] = (0, m.splitQuery)(e);
                    return (
                      !!a.includes(t.id) ||
                      (null != s &&
                        (!!(
                          t.username.toLowerCase().includes(s.toLowerCase()) ||
                          (null != t.globalName &&
                            t.globalName
                              .toLowerCase()
                              .includes(s.toLowerCase()))
                        ) ||
                          !1))
                    );
                  },
            []
          ),
          A = l.useCallback(
            (e, t, s) => {
              if (null == e || 0 === s) return [];
              let a = [];
              for (let s of e.keys()) {
                let e = g.default.getUser(s);
                null != e && p(t)(e) && a.push(e);
              }
              return a;
            },
            [p]
          ),
          D = l.useMemo(() => A(N, c, C), [N, A, c, C]),
          v = null != N,
          P = D.length % 1e3 == 0 && D.length > 0 && v,
          b = 0 === D.length,
          [F, H] = l.useState({ currentPage: 1, pageSize: 100 });
        l.useEffect(() => {
          S && 1 !== F.currentPage && H(e => ({ ...e, currentPage: 1 }));
        }, [S, F.currentPage]);
        let k = l.useCallback(
            e => {
              E.default.fetchGuildBansBatch(x, 1e3, e);
            },
            [x]
          ),
          w = l.useMemo(() => o.chunk(D, F.pageSize), [F.pageSize, D]),
          V = l.useCallback(
            e => {
              var t, s, a;
              null === (t = L.current) ||
                void 0 === t ||
                t.scrollToSectionTop(0);
              let l = (e + 1) * F.pageSize,
                n = l > D.length;
              n &&
                P &&
                !_ &&
                ((Y.current =
                  null !==
                    (a =
                      null === (s = D[D.length - 1]) || void 0 === s
                        ? void 0
                        : s.id) && void 0 !== a
                    ? a
                    : null),
                k(Y.current)),
                (null != w[e - 1] || P) && H(t => ({ ...t, currentPage: e }));
            },
            [F.pageSize, D, P, w, k, _]
          ),
          Y = l.useRef(null);
        l.useEffect(() => {
          k(Y.current);
        }, [k]);
        let W = l.useMemo(() => {
          var e;
          return null !== (e = w[F.currentPage - 1]) && void 0 !== e ? e : [];
        }, [w, F.currentPage]);
        return null == n
          ? null
          : (0, a.jsxs)("div", {
              className: i(U.container),
              children: [
                (0, a.jsx)(y, { guildId: x, storedSearchQuery: c }),
                (0, a.jsxs)("div", {
                  className: i(U.scrollerContainer),
                  children: [
                    !b &&
                      (0, a.jsx)(B, {
                        guild: n,
                        bans: N,
                        sortedBans: W,
                        ref: L,
                      }),
                    !P &&
                      b &&
                      (0, a.jsxs)(h.default, {
                        theme: R,
                        className: U.emptyState,
                        children: [
                          (0, a.jsx)(h.EmptyStateImage, {
                            darkSrc: s("325911"),
                            lightSrc: s("138147"),
                            width: 256,
                            height: 212,
                          }),
                          (0, a.jsx)(h.EmptyStateText, {
                            note: j.default.Messages.BANS_NO_USERS_BANNED,
                            style: { maxWidth: 300 },
                            children: j.default.Messages.NO_BANS,
                          }),
                        ],
                      }),
                  ],
                }),
                (0, a.jsx)("div", {
                  className: i(U.paginationContainer),
                  children: (0, a.jsx)(u.Paginator, {
                    className: i(U.paginationInput),
                    totalCount: D.length + (P ? F.pageSize : 0),
                    pageSize: F.pageSize,
                    currentPage: F.currentPage,
                    onPageChange: V,
                    maxVisiblePages: 9,
                  }),
                }),
              ],
            });
      }
    },
    925538: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          GuildSettingsCommunityOverviewNotice: function () {
            return v;
          },
          default: function () {
            return U;
          },
        }),
        s("222007"),
        s("424973");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("446674"),
        o = s("872717"),
        d = s("95410"),
        u = s("77078"),
        c = s("45299"),
        E = s("679653"),
        _ = s("413476"),
        I = s("239380"),
        T = s("923959"),
        f = s("525065"),
        S = s("305961"),
        m = s("957255"),
        N = s("27618"),
        g = s("697218"),
        h = s("945330"),
        C = s("592407"),
        R = s("900938"),
        x = s("271407"),
        L = s("49111"),
        O = s("447621"),
        p = s("782340"),
        A = s("943186"),
        M = s("936815");
      let D = "dismissedCommunityFeaturesUpsell",
        v = () => {
          let e;
          let {
              guild: t,
              submitting: s,
              errors: l,
            } = (0, r.useStateFromStoresObject)([R.default], () => ({
              submitting: R.default.isSubmitting(),
              guild: R.default.getGuild(),
              errors: R.default.getErrors(),
            })),
            n = Object.keys(l),
            i = n.length > 0 ? n[0] : null;
          if ("rules_channel_id" === i)
            e = p.default.Messages.GUILD_RULES_INVALID_CHANNEL;
          else e = null != i ? l[i] : void 0;
          return (0, a.jsx)(c.default, {
            submitting: s,
            onReset: () => {
              null != t && C.default.init(t.id);
            },
            onSave: () => {
              null != t &&
                C.default.saveGuild(t.id, {
                  rulesChannelId: t.rulesChannelId,
                  preferredLocale: t.preferredLocale,
                  safetyAlertsChannelId: t.safetyAlertsChannelId,
                  publicUpdatesChannelId: t.publicUpdatesChannelId,
                  description: t.description,
                  features: t.features,
                });
            },
            errorMessage: e,
          });
        },
        G = e => {
          let { discoveryEnabled: t, onboardingEnabled: s, guild: n } = e,
            [i, c] = l.useState(!0 === d.default.get(D)),
            E = (0, r.useStateFromStores)([f.default], () => {
              var e;
              return null !== (e = f.default.getMemberCount(n.id)) &&
                void 0 !== e
                ? e
                : 0;
            }),
            [_, T] = l.useState(!1);
          l.useEffect(() => {
            o.default
              .get(L.Endpoints.GUILD_ADMIN_SERVER_ELIGIBILITY(n.id))
              .then(e => {
                T(e.body.eligible_for_admin_server);
              })
              .catch(() => T(!1));
          }, []);
          let m = (0, r.useStateFromStores)([S.default], () =>
              S.default.getGuild("942897714956472401")
            ),
            N = n.isCommunity() && E >= 1e3 && _ && !(null != m);
          if (t && s && !N) return null;
          let g = async () => {
            try {
              let e = await o.default.post({
                url: L.Endpoints.JOIN_ADMIN_SERVER(n.id),
                oldFormErrors: !0,
              });
              C.default.close(), (0, I.transitionToGuild)(e.body.id);
            } catch {}
          };
          return i && !N
            ? null
            : (0, a.jsxs)("div", {
                className: A.upsellContainer,
                children: [
                  (0, a.jsxs)("div", {
                    className: A.upsellContent,
                    children: [
                      (0, a.jsx)("img", {
                        src: M,
                        alt: "",
                        width: 60,
                        className: A.upsellImage,
                      }),
                      (0, a.jsxs)("div", {
                        children: [
                          (0, a.jsx)(u.Heading, {
                            variant: "heading-md/semibold",
                            className: A.upsellHeader,
                            children:
                              p.default.Messages
                                .GUILD_SETTINGS_COMMUNITY_UPSELL_HEADER,
                          }),
                          (0, a.jsx)(u.Text, {
                            variant: "text-sm/normal",
                            children:
                              p.default.Messages
                                .GUILD_SETTINGS_COMMUNITY_UPSELL_BODY,
                          }),
                        ],
                      }),
                    ],
                  }),
                  (0, a.jsx)(u.Button, {
                    "aria-label": p.default.Messages.CLOSE,
                    look: u.Button.Looks.BLANK,
                    size: u.Button.Sizes.NONE,
                    className: A.upsellClose,
                    onClick: () => {
                      d.default.set(D, !0), c(!0);
                    },
                    children: (0, a.jsx)(h.default, { width: 24, height: 24 }),
                  }),
                  (0, a.jsxs)("div", {
                    className: A.upsellFooter,
                    children: [
                      N &&
                        (0, a.jsx)(u.Button, {
                          size: u.Button.Sizes.SMALL,
                          onClick: g,
                          className: A.upsellButton,
                          children:
                            p.default.Messages
                              .GUILD_SETTINGS_COMMUNITY_UPSELL_BUTTON_ADMIN_SERVER,
                        }),
                      s
                        ? null
                        : (0, a.jsx)(u.Button, {
                            size: u.Button.Sizes.SMALL,
                            onClick: () => {
                              C.default.setSection(
                                L.GuildSettingsSections.ONBOARDING
                              );
                            },
                            className: A.upsellButton,
                            children:
                              p.default.Messages
                                .GUILD_SETTINGS_COMMUNITY_UPSELL_BUTTON_ONBOARDING,
                          }),
                      t
                        ? null
                        : (0, a.jsx)(u.Button, {
                            size: u.Button.Sizes.SMALL,
                            onClick: () => {
                              C.default.setSection(
                                L.GuildSettingsSections.DISCOVERY
                              );
                            },
                            className: A.upsellButton,
                            color: u.Button.Colors.PRIMARY,
                            children:
                              p.default.Messages
                                .GUILD_SETTINGS_COMMUNITY_UPSELL_BUTTON_DISCOVERY,
                          }),
                      (0, a.jsx)(u.Button, {
                        size: u.Button.Sizes.SMALL,
                        onClick: () => {
                          C.default.setSection(
                            L.GuildSettingsSections.ANALYTICS
                          );
                        },
                        className: A.upsellButton,
                        color: u.Button.Colors.PRIMARY,
                        children:
                          p.default.Messages
                            .GUILD_SETTINGS_COMMUNITY_UPSELL_BUTTON_ANALYTICS,
                      }),
                    ],
                  }),
                ],
              });
        },
        j = () => {
          var e;
          let t = (0, r.useStateFromStores)([R.default], () =>
              R.default.getGuild()
            ),
            { canManageGuild: s, isGuildAdmin: n } = (0,
            r.useStateFromStoresObject)([m.default], () => ({
              canManageGuild: m.default.can(L.Permissions.MANAGE_GUILD, t),
              isGuildAdmin: m.default.can(L.Permissions.ADMINISTRATOR, t),
            })),
            o = (0, r.useStateFromStores)([T.default], () =>
              null != t ? T.default.getChannels(t.id) : null
            ),
            c = l.useMemo(O.calculateLocaleOptions, []),
            I = !0 !== d.default.get(D),
            { enableRaidAlerts: f } = _.RaidAlertExperiment.useExperiment(
              {
                guildId:
                  null !== (e = null == t ? void 0 : t.id) && void 0 !== e
                    ? e
                    : L.EMPTY_STRING_SNOWFLAKE_ID,
                location: "c1af51_2",
              },
              { autoTrackExposure: s }
            );
          if (null == t) return null;
          let S = [];
          null != o &&
            o[(0, T.GUILD_SELECTABLE_CHANNELS_KEY)].forEach(e => {
              let { channel: t } = e;
              t.type === L.ChannelTypes.GUILD_TEXT &&
                S.push({
                  value: t.id,
                  label: (0, E.computeChannelName)(t, g.default, N.default, !0),
                });
            });
          let h = () => {
              C.default.init(t.id),
                C.default.open(
                  t.id,
                  L.GuildSettingsSections.MEMBER_VERIFICATION
                );
            },
            x = () => {
              if (null == t) return;
              let e = new Set(t.features);
              e.delete(L.GuildFeatures.COMMUNITY),
                e.delete(L.GuildFeatures.DISCOVERABLE),
                e.delete(L.GuildFeatures.MEMBER_VERIFICATION_GATE_ENABLED),
                e.delete(L.GuildFeatures.PREVIEW_ENABLED),
                C.default.updateGuild({
                  features: e,
                  rulesChannelId: null,
                  publicUpdatesChannelId: null,
                });
            },
            M = e => {
              C.default.updateGuild({ rulesChannelId: e });
            },
            v = e => {
              C.default.updateGuild({ safetyAlertsChannelId: e });
            },
            j = e => {
              C.default.updateGuild({ publicUpdatesChannelId: e });
            },
            U = e => {
              C.default.updateGuild({ preferredLocale: e });
            },
            P = e => {
              C.default.updateGuild({ description: e });
            },
            b = () => {
              t.features.has(L.GuildFeatures.DISCOVERABLE) &&
              t.features.has(L.GuildFeatures.PARTNERED)
                ? (0, u.openModal)(e =>
                    (0, a.jsx)(u.ConfirmModal, {
                      ...e,
                      header:
                        p.default.Messages
                          .GUILD_SETTINGS_COMMUNITY_DISABLE_PUBLIC_CONFIRM_DEFAULT_TITLE,
                      confirmText: p.default.Messages.CONFIRM,
                      cancelText: p.default.Messages.NEVERMIND,
                      onConfirm: x,
                      children: (0, a.jsx)(u.Text, {
                        variant: "text-sm/normal",
                        children:
                          p.default.Messages
                            .GUILD_SETTINGS_PARTNER_AND_DISCOVERY_DISABLE_PUBLIC_CONFIRM_TEXT,
                      }),
                    })
                  )
                : t.features.has(L.GuildFeatures.DISCOVERABLE)
                  ? (0, u.openModal)(e =>
                      (0, a.jsx)(u.ConfirmModal, {
                        ...e,
                        header:
                          p.default.Messages
                            .GUILD_SETTINGS_COMMUNITY_DISABLE_PUBLIC_CONFIRM_DEFAULT_TITLE,
                        confirmText: p.default.Messages.CONFIRM,
                        cancelText: p.default.Messages.NEVERMIND,
                        onConfirm: x,
                        children: (0, a.jsx)(u.Text, {
                          variant: "text-sm/normal",
                          children:
                            p.default.Messages
                              .GUILD_SETTINGS_DISCOVERY_DISABLE_PUBLIC_CONFIRM_TEXT,
                        }),
                      })
                    )
                  : t.features.has(L.GuildFeatures.PARTNERED)
                    ? (0, u.openModal)(e =>
                        (0, a.jsx)(u.ConfirmModal, {
                          ...e,
                          header:
                            p.default.Messages
                              .GUILD_SETTINGS_COMMUNITY_DISABLE_PUBLIC_CONFIRM_DEFAULT_TITLE,
                          confirmText: p.default.Messages.CONFIRM,
                          cancelText: p.default.Messages.NEVERMIND,
                          onConfirm: x,
                          children: (0, a.jsx)(u.Text, {
                            variant: "text-sm/normal",
                            children:
                              p.default.Messages
                                .GUILD_SETTINGS_PARTNER_DISABLE_PUBLIC_CONFIRM_TEXT,
                          }),
                        })
                      )
                    : t.features.has(
                          L.GuildFeatures.MEMBER_VERIFICATION_GATE_ENABLED
                        )
                      ? (0, u.openModal)(e =>
                          (0, a.jsx)(u.ConfirmModal, {
                            ...e,
                            header:
                              p.default.Messages
                                .GUILD_SETTINGS_COMMUNITY_DISABLE_PUBLIC_CONFIRM_DEFAULT_TITLE,
                            confirmButtonColor: u.Button.Colors.BRAND,
                            confirmText:
                              p.default.Messages
                                .GUILD_SETTINGS_COMMUNITY_DISABLE_MEMBER_VERIFICATION_CONFIRM,
                            cancelText: p.default.Messages.NEVERMIND,
                            onConfirm: h,
                            children: (0, a.jsx)(u.Text, {
                              variant: "text-sm/normal",
                              children:
                                p.default.Messages
                                  .GUILD_SETTINGS_COMMUNITY_DISABLE_MEMBER_VERIFICATION,
                            }),
                          })
                        )
                      : x();
            };
          return (0, a.jsxs)(u.FormSection, {
            title: p.default.Messages.GUILD_SETTINGS_COMMUNITY,
            tag: u.FormTitleTags.H1,
            children: [
              I
                ? (0, a.jsx)(G, {
                    discoveryEnabled: t.features.has(
                      L.GuildFeatures.DISCOVERABLE
                    ),
                    onboardingEnabled: t.features.has(
                      L.GuildFeatures.GUILD_ONBOARDING
                    ),
                    guild: t,
                  })
                : null,
              (0, a.jsxs)(u.FormSection, {
                className: i(A.twoColumnFormSection, A.firstSection),
                children: [
                  (0, a.jsxs)("div", {
                    className: A.descriptionColumn,
                    children: [
                      (0, a.jsx)(u.FormTitle, {
                        className: A.formTitle,
                        children:
                          p.default.Messages.FORM_LABEL_DISCOVERY_RULES_CHANNEL,
                      }),
                      (0, a.jsx)(u.FormText, {
                        type: u.FormTextTypes.DESCRIPTION,
                        className: A.formDescription,
                        children:
                          p.default.Messages
                            .GUILD_SETTINGS_COMMUNITY_RULES_CHANNEL_HELP,
                      }),
                    ],
                  }),
                  (0, a.jsx)("div", {
                    className: A.selectColumn,
                    children: (0, a.jsx)(u.SearchableSelect, {
                      value: t.rulesChannelId,
                      options: S,
                      onChange: M,
                      isDisabled: !s,
                    }),
                  }),
                ],
              }),
              (0, a.jsx)(u.FormDivider, { className: A.divider }),
              (0, a.jsxs)(u.FormSection, {
                className: i(A.twoColumnFormSection, A.firstSection),
                children: [
                  (0, a.jsxs)("div", {
                    className: A.descriptionColumn,
                    children: [
                      (0, a.jsx)(u.FormTitle, {
                        className: A.formTitle,
                        children:
                          p.default.Messages
                            .GUILD_SETTINGS_COMMUNITY_MOD_CHANNEL_TITLE,
                      }),
                      (0, a.jsx)(u.FormText, {
                        type: u.FormTextTypes.DESCRIPTION,
                        className: A.formDescription,
                        children:
                          p.default.Messages
                            .GUILD_SETTINGS_COMMUNITY_MOD_CHANNEL_HELP,
                      }),
                    ],
                  }),
                  (0, a.jsx)("div", {
                    className: A.selectColumn,
                    children: (0, a.jsx)(u.SearchableSelect, {
                      value: t.publicUpdatesChannelId,
                      options: S,
                      onChange: j,
                      isDisabled: !s,
                    }),
                  }),
                ],
              }),
              (0, a.jsx)(u.FormDivider, { className: A.divider }),
              f &&
                (0, a.jsxs)(a.Fragment, {
                  children: [
                    (0, a.jsxs)(u.FormSection, {
                      className: i(A.twoColumnFormSection, A.firstSection),
                      children: [
                        (0, a.jsxs)("div", {
                          className: A.descriptionColumn,
                          children: [
                            (0, a.jsx)(u.FormTitle, {
                              className: A.formTitle,
                              children:
                                p.default.Messages
                                  .GUILD_ANTIRAID_SAFETY_CHANNEL_TITLE,
                            }),
                            (0, a.jsx)(u.FormText, {
                              type: u.FormTextTypes.DESCRIPTION,
                              className: A.formDescription,
                              children:
                                p.default.Messages
                                  .GUILD_ANTIRAID_SAFETY_CHANNEL_DESCRIPTION,
                            }),
                          ],
                        }),
                        (0, a.jsx)("div", {
                          className: A.selectColumn,
                          children: (0, a.jsx)(u.SearchableSelect, {
                            value: t.safetyAlertsChannelId,
                            options: S,
                            onChange: v,
                            isDisabled: !s,
                          }),
                        }),
                      ],
                    }),
                    (0, a.jsx)(u.FormDivider, { className: A.divider }),
                  ],
                }),
              (0, a.jsxs)(u.FormSection, {
                className: A.twoColumnFormSection,
                children: [
                  (0, a.jsxs)("div", {
                    className: A.descriptionColumn,
                    children: [
                      (0, a.jsx)(u.FormTitle, {
                        className: A.formTitle,
                        children: p.default.Messages.FORM_LABEL_SERVER_LANGUAGE,
                      }),
                      (0, a.jsx)(u.FormText, {
                        type: u.FormTextTypes.DESCRIPTION,
                        className: A.formDescription,
                        children:
                          p.default.Messages
                            .GUILD_SETTINGS_COMMUNITY_LOCALE_HELP,
                      }),
                    ],
                  }),
                  (0, a.jsx)("div", {
                    className: A.selectColumn,
                    children: (0, a.jsx)(u.SearchableSelect, {
                      value: t.preferredLocale,
                      options: c,
                      onChange: U,
                      isDisabled: !s,
                    }),
                  }),
                ],
              }),
              (0, a.jsx)(u.FormDivider, { className: A.divider }),
              (() => {
                var e;
                if (null != t)
                  return (0, a.jsxs)(u.FormSection, {
                    children: [
                      (0, a.jsx)(u.FormTitle, {
                        className: A.formTitle,
                        children:
                          p.default.Messages.FORM_LABEL_SERVER_DESCRIPTION,
                      }),
                      (0, a.jsx)(u.FormText, {
                        className: A.description,
                        type: u.FormTextTypes.DESCRIPTION,
                        children:
                          p.default.Messages.FORM_HELP_SERVER_DESCRIPTION,
                      }),
                      (0, a.jsx)(u.TextArea, {
                        value:
                          null !== (e = t.description) && void 0 !== e ? e : "",
                        placeholder: p.default.Messages.SERVER_DESCIPTION_EMPTY,
                        onChange: P,
                        maxLength: 120,
                        disabled: !s,
                      }),
                    ],
                  });
              })(),
              (0, a.jsx)(u.FormDivider, { className: A.divider }),
              (0, a.jsxs)(u.FormSection, {
                className: A.twoColumnFormSection,
                children: [
                  (0, a.jsxs)("div", {
                    className: A.descriptionColumn,
                    children: [
                      (0, a.jsx)(u.FormTitle, {
                        className: A.formTitle,
                        children:
                          p.default.Messages
                            .GUILD_SETTINGS_COMMUNITY_DISABLE_COMMUNITY,
                      }),
                      (0, a.jsx)(u.FormText, {
                        type: u.FormTextTypes.DESCRIPTION,
                        className: A.formDescription,
                        children:
                          p.default.Messages
                            .GUILD_SETTINGS_COMMUNITY_DISABLE_COMMUNITY_DESCRIPTION,
                      }),
                    ],
                  }),
                  (0, a.jsx)(u.Tooltip, {
                    text: n
                      ? null
                      : p.default.Messages
                          .GUILD_SETTINGS_COMMUNITY_ADMINISTRATOR_ONLY,
                    "aria-label": n
                      ? void 0
                      : p.default.Messages
                          .GUILD_SETTINGS_COMMUNITY_ADMINISTRATOR_ONLY,
                    children: e =>
                      (0, a.jsx)(u.Button, {
                        size: u.Button.Sizes.SMALL,
                        onClick: b,
                        color: u.Button.Colors.RED,
                        disabled: !n,
                        ...e,
                        children:
                          p.default.Messages
                            .GUILD_SETTINGS_COMMUNITY_DISABLE_COMMUNITY,
                      }),
                  }),
                ],
              }),
            ],
          });
        };
      var U = () => {
        let e = (0, r.useStateFromStores)([R.default], () =>
          R.default.getGuild()
        );
        if (null == e) return null;
        let t = e.features.has(L.GuildFeatures.COMMUNITY);
        return t ? (0, a.jsx)(j, {}) : (0, a.jsx)(x.default, { guild: e });
      };
    },
    271407: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return j;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("446674"),
        o = s("669491"),
        d = s("77078"),
        u = s("597517"),
        c = s("45395"),
        E = s("957255"),
        _ = s("756609"),
        I = s("68238"),
        T = s("240292"),
        f = s("701909"),
        S = s("49111"),
        m = s("533613"),
        N = s("782340"),
        g = s("477204"),
        h = s("175717"),
        C = s("869917"),
        R = s("133765"),
        x = s("138131"),
        L = s("52846"),
        O = s("656011"),
        p = s("845929"),
        A = s("144582");
      let M = () => [
          {
            icon: T.default,
            color: o.default.unsafe_rawColors.GREEN_360.css,
            header:
              N.default.Messages
                .GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_DISCOVERY_HEADER,
            body: N.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_DISCOVERY_BODY.format(
              {
                featureHook: (e, t) =>
                  (0, a.jsx)(
                    "strong",
                    { className: g.featuredText, children: e },
                    t
                  ),
              }
            ),
          },
          {
            icon: _.default,
            color: o.default.unsafe_rawColors.PARTNER.css,
            header:
              N.default.Messages
                .GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_ANALYTICS_HEADER,
            body: N.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_ANALYTICS_BODY.format(
              {
                infoHook: () =>
                  (0, a.jsx)(d.Tooltip, {
                    text: N.default.Messages
                      .GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_ANALYTICS_TOOLTIP,
                    "aria-label":
                      N.default.Messages
                        .GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_ANALYTICS_TOOLTIP,
                    children: e =>
                      (0, a.jsx)(I.default, { className: g.infoIcon, ...e }),
                  }),
                featureHook: (e, t) =>
                  (0, a.jsx)(
                    "strong",
                    { className: g.featuredText, children: e },
                    t
                  ),
              }
            ),
          },
          {
            icon: I.default,
            color: o.default.unsafe_rawColors.RED_360.css,
            header:
              N.default.Messages
                .GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_STAY_INFORMED_HEADER,
            body: N.default.Messages
              .GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_STAY_INFORMED_BODY,
          },
        ],
        D = [
          { iconSrc: O, name: "Pokemon GO Paris", position: [-230, -100] },
          {
            iconSrc: p,
            name: "Python",
            position: [-180, -100],
            faded: !0,
            rightAlign: !0,
          },
          { iconSrc: x, name: "Learn Latin", position: [-280, -30], faded: !0 },
          {
            iconSrc: L,
            name: "r/leagueoflegends",
            position: [-320, -30],
            rightAlign: !0,
          },
          { iconSrc: A, name: "Sneaker Fans", position: [-250, 40] },
          {
            iconSrc: R,
            name: "Hogwarts School",
            position: [-270, 40],
            faded: !0,
            rightAlign: !0,
          },
        ],
        v = e => {
          let { icon: t, color: s, size: l = 24, header: n, body: i } = e;
          return (0, a.jsxs)("div", {
            className: g.featureCard,
            children: [
              (0, a.jsx)("div", {
                className: g.featureIcon,
                children: (0, a.jsx)(t, { color: s, width: l, height: l }),
              }),
              (0, a.jsx)(d.Heading, {
                variant: "heading-md/semibold",
                className: g.featureHeader,
                children: n,
              }),
              (0, a.jsx)(d.Text, {
                color: "header-secondary",
                variant: "text-sm/normal",
                children: i,
              }),
            ],
          });
        },
        G = e => {
          let {
              iconSrc: t,
              name: s,
              position: l,
              faded: n,
              rightAlign: r,
              imageCoordinates: o,
            } = e,
            u = { [r ? "right" : "left"]: o[0] + l[0], top: o[1] + l[1] };
          return (0, a.jsxs)("div", {
            className: i(g.guildDetails, { [g.faded]: n }),
            style: u,
            children: [
              (0, a.jsx)("div", {
                className: g.guildIcon,
                children: (0, a.jsx)("img", {
                  alt: "",
                  src: t,
                  width: 24,
                  height: 24,
                }),
              }),
              (0, a.jsx)(d.Heading, {
                variant: "heading-deprecated-12/semibold",
                children: s,
              }),
            ],
          });
        };
      var j = e => {
        let { guild: t } = e,
          [s, n] = l.useState(0),
          [i, o] = l.useState(0),
          [_, I] = l.useState(),
          T = (0, r.useStateFromStores)([E.default], () =>
            E.default.can(S.Permissions.ADMINISTRATOR, t)
          ),
          R = null == _ ? void 0 : _.offsetWidth,
          x = null == _ ? void 0 : _.offsetHeight;
        l.useEffect(() => {
          null != R && n(R / 2), null != x && o(x / 2);
        }, [R, x, n, o]),
          l.useEffect(() => {
            (0, u.hideHotspot)(
              m.HotspotLocations.GUILD_SETTINGS_COMMUNITY_GUILD_UPSELL
            );
          }, []);
        let L = () => {
          c.default.open();
        };
        return (0, a.jsxs)("div", {
          className: g.container,
          children: [
            (0, a.jsxs)("div", {
              className: g.banner,
              ref: e => I(e),
              children: [
                D.map(e =>
                  (0, a.jsx)(G, { ...e, imageCoordinates: [s, i] }, e.name)
                ),
                (0, a.jsx)("img", {
                  alt: "",
                  src: h,
                  className: g.image,
                  width: 256,
                }),
                (0, a.jsx)("img", { alt: "", src: C, className: g.sparkles }),
              ],
            }),
            (0, a.jsx)(d.Heading, {
              variant: "heading-xl/semibold",
              children:
                N.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_HEADER,
            }),
            (0, a.jsx)(d.Text, {
              color: "header-secondary",
              variant: "text-md/normal",
              className: g.body,
              children:
                N.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_BODY_WITH_HELP_ARTICLE.format(
                  {
                    helpdeskArticle: f.default.getArticleURL(
                      S.HelpdeskArticles
                        .FRIEND_COMMUNITY_DISCOVERABLE_GUILD_TYPES
                    ),
                  }
                ),
            }),
            (0, a.jsx)(d.Tooltip, {
              text: T
                ? null
                : N.default.Messages
                    .GUILD_SETTINGS_COMMUNITY_ADMINISTRATOR_ONLY,
              "aria-label": T
                ? void 0
                : N.default.Messages
                    .GUILD_SETTINGS_COMMUNITY_ADMINISTRATOR_ONLY,
              children: e =>
                (0, a.jsx)(d.Button, {
                  onClick: L,
                  className: g.button,
                  disabled: !T,
                  ...e,
                  children: N.default.Messages.GET_STARTED,
                }),
            }),
            (0, a.jsx)("hr", { className: g.separator }),
            (0, a.jsx)(d.Text, {
              color: "header-secondary",
              variant: "text-sm/normal",
              children:
                N.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_DETAILS,
            }),
            (0, a.jsx)(d.Text, {
              color: "header-secondary",
              className: g.body,
              variant: "text-sm/normal",
              children:
                N.default.Messages.GUILD_SETTINGS_COMMUNITY_INTRO_LEARN_MORE.format(
                  {
                    helpdeskArticle: f.default.getArticleURL(
                      S.HelpdeskArticles.GUILD_COMMUNITY_FEATURE
                    ),
                  }
                ),
            }),
            (0, a.jsx)("div", {
              className: g.features,
              children: M().map((e, t) => (0, a.jsx)(v, { ...e }, t)),
            }),
          ],
        });
      };
    },
    631011: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return N;
          },
        }),
        s("222007");
      var a,
        l,
        n = s("37983"),
        i = s("884691"),
        r = s("446674"),
        o = s("77078"),
        d = s("913144"),
        u = s("430568"),
        c = s("223170"),
        E = s("449008"),
        _ = s("900938"),
        I = s("999905"),
        T = s("782340"),
        f = s("924928"),
        S = s("750235");
      ((l = a || (a = {}))[(l.LOADING = 0)] = "LOADING"),
        (l[(l.INTRO = 1)] = "INTRO"),
        (l[(l.SETTINGS = 2)] = "SETTINGS");
      let m = e => {
        let { setWelcomeView: t, setShowCreateModal: a } = e,
          l = [
            {
              emoji: "\uD83D\uDCAC",
              description:
                T.default.Messages
                  .GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_DESCRIPTION_1,
              name: T.default.Messages
                .GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_NAME_1,
            },
            {
              emoji: "\uD83C\uDFF9",
              description:
                T.default.Messages
                  .GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_DESCRIPTION_2,
              name: T.default.Messages
                .GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_NAME_2,
            },
            {
              emoji: "\uD83D\uDDDE",
              description:
                T.default.Messages
                  .GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_DESCRIPTION_3,
              name: T.default.Messages
                .GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_NAME_3,
            },
          ];
        return (0, n.jsxs)(o.FormSection, {
          title: T.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME,
          tag: "h1",
          children: [
            (0, n.jsxs)("div", {
              className: f.welcomeDescription,
              children: [
                (0, n.jsx)(o.Text, {
                  variant: "text-sm/normal",
                  children:
                    T.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_INTRO_TEXT.format(),
                }),
                (0, n.jsx)(o.Button, {
                  onClick: () => {
                    a(!0), t(2);
                  },
                  children:
                    T.default.Messages
                      .GUILD_SETTINGS_PUBLIC_WELCOME_INTRO_BUTTON,
                }),
              ],
            }),
            (0, n.jsxs)("div", {
              className: f.exampleContainer,
              children: [
                (0, n.jsxs)("div", {
                  className: f.exampleWumpus,
                  children: [
                    (0, n.jsx)("img", {
                      className: f.wumpus,
                      alt: "",
                      src: s("517226"),
                    }),
                    (0, n.jsx)("div", { className: f.tooltipPointer }),
                    (0, n.jsx)("div", {
                      className: f.tooltip,
                      children:
                        T.default.Messages.GUILD_SETTINGS_EXAMPLE_TOOLTIP,
                    }),
                  ],
                }),
                (0, n.jsxs)("div", {
                  className: f.exampleModal,
                  children: [
                    (0, n.jsx)("img", {
                      alt: "",
                      className: S.guildIcon,
                      src: s("822460"),
                      width: 64,
                      height: 64,
                    }),
                    (0, n.jsx)(o.Heading, {
                      variant: "heading-xl/semibold",
                      className: f.header,
                      children:
                        T.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_TITLE.format(),
                    }),
                    (0, n.jsx)(o.Text, {
                      variant: "text-sm/normal",
                      color: "header-secondary",
                      className: S.guildDescription,
                      children:
                        T.default.Messages
                          .GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_DESCRIPTION,
                    }),
                    (0, n.jsx)(o.FormTitle, {
                      className: S.choiceHeader,
                      children: T.default.Messages.WELCOME_SCREEN_CHOICE_HEADER,
                    }),
                    (0, n.jsx)("div", {
                      className: S.options,
                      children: l.map(e =>
                        (0, n.jsxs)(
                          "div",
                          {
                            className: f.optionContainer,
                            children: [
                              (0, n.jsx)(u.default, {
                                emojiName: e.emoji,
                                className: S.optionEmoji,
                              }),
                              (0, n.jsxs)("div", {
                                className: S.optionTextContainer,
                                children: [
                                  (0, n.jsx)(o.Text, {
                                    variant: "text-md/semibold",
                                    className: S.channelDescription,
                                    children: e.description,
                                  }),
                                  (0, n.jsx)(o.Text, {
                                    variant: "text-xs/normal",
                                    color: "header-secondary",
                                    children: "#".concat(e.name),
                                  }),
                                ],
                              }),
                            ],
                          },
                          e.name
                        )
                      ),
                    }),
                  ],
                }),
              ],
            }),
          ],
        });
      };
      var N = () => {
        let { guild: e } = (0, r.useStateFromStores)([_.default], () =>
            _.default.getProps()
          ),
          [t, s] = i.useState(0),
          [a, l] = i.useState(!1);
        switch (
          (i.useEffect(() => {
            null != e &&
              d.default.wait(() => {
                (0, c.fetchWelcomeScreen)(e.id).then(e => {
                  s(null == e ? 1 : 2);
                });
              });
          }, [e]),
          t)
        ) {
          case 0:
            return (0, n.jsx)(o.Spinner, {
              type: o.Spinner.Type.SPINNING_CIRCLE,
            });
          case 1:
            return (0, n.jsx)(m, { setWelcomeView: s, setShowCreateModal: l });
          case 2:
            return (0, n.jsx)(I.default, { guild: e, showCreateModal: a });
          default:
            return (0, E.assertNever)(t);
        }
      };
    },
    999905: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return y;
          },
        }),
        s("222007"),
        s("424973");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("714617"),
        o = s.n(r),
        d = s("476042"),
        u = s("446674"),
        c = s("77078"),
        E = s("272030"),
        _ = s("430568"),
        I = s("206230"),
        T = s("679653"),
        f = s("419830"),
        S = s("385976"),
        m = s("233706"),
        N = s("223170"),
        g = s("478964"),
        h = s("310457"),
        C = s("42203"),
        R = s("580357"),
        x = s("476263"),
        L = s("37785"),
        O = s("593195"),
        p = s("315585"),
        A = s("599110"),
        M = s("991170"),
        D = s("592407"),
        v = s("369158"),
        G = s("49111"),
        j = s("843455"),
        U = s("782340"),
        P = s("477320");
      let b = "WELCOME_CHANNEL",
        B = e => {
          var t;
          let n,
            {
              guildId: r,
              welcomeChannel: o,
              onEdit: I,
              onChannelReorder: N,
              isDropHovered: g,
              index: R,
            } = e,
            [x, L] = l.useState(!1),
            A = l.useRef(null),
            D = (0, u.useStateFromStores)([C.default], () =>
              C.default.getChannel(o.channel_id)
            ),
            v = (0, u.useStateFromStores)([S.default], () =>
              null != o.emoji_id
                ? S.default.getUsableCustomEmojiById(o.emoji_id)
                : null
            ),
            B =
              null != D &&
              M.default.canEveryoneRole(G.Permissions.VIEW_CHANNEL, D),
            y =
              null !== (t = (0, f.getChannelIconComponent)(D)) && void 0 !== t
                ? t
                : O.default,
            F = (0, T.default)(D, !1),
            { homeSettingsEnabled: H } = (0,
            m.useOnboardingHomeAdminExperiment)(r),
            [, k] = (0, d.useDrag)({
              type: b,
              item: { channel: o, index: R },
              end: (e, t) => {
                null != e && !t.didDrop() && N(e.channel, null, !0);
              },
            }),
            [, w] = (0, d.useDrop)({
              accept: b,
              hover: e => {
                N(e.channel, R, !1);
              },
              drop: e => {
                N(e.channel, R, !0);
              },
            });
          return (
            l.useLayoutEffect(
              () => (
                k(w(A)),
                () => {
                  k(null), w(null);
                }
              ),
              [k, w]
            ),
            (n = B
              ? null != v || null != o.emoji_name
                ? (0, a.jsx)(_.default, {
                    emojiId: null == v ? void 0 : v.id,
                    emojiName: null != v ? v.name : o.emoji_name,
                    animated: !!(null == v ? void 0 : v.animated),
                  })
                : (0, a.jsx)(y, {
                    width: 24,
                    height: 24,
                    className: P.channelIcon,
                  })
              : (0, a.jsx)(p.default, {
                  width: 24,
                  height: 24,
                  className: P.warningIcon,
                })),
            (0, a.jsxs)("div", {
              className: i(P.welcomeChannel, { [P.dragging]: g }),
              ref: A,
              "data-dnd-name": o.description,
              onContextMenu: e => {
                (0, E.openContextMenuLazy)(e, async () => {
                  let { default: e } = await s
                    .el("824527")
                    .then(s.bind(s, "824527"));
                  return t =>
                    (0, a.jsx)(e, {
                      ...t,
                      guildId: r,
                      welcomeChannel: o,
                      onChannelReorder: N,
                      setShowConfirmModal: L,
                      onEdit: I,
                      index: R,
                    });
                });
              },
              children: [
                n,
                (0, a.jsxs)("div", {
                  className: P.channelDescriptionWrapper,
                  children: [
                    (0, a.jsx)(c.Text, {
                      variant: "text-md/semibold",
                      color: "header-primary",
                      children: o.description,
                    }),
                    (0, a.jsxs)(c.Text, {
                      className: B ? void 0 : P.channelWarning,
                      variant: "text-xs/normal",
                      color: "header-secondary",
                      children: [
                        (0, a.jsx)(y, {
                          className: P.channelTitleIcon,
                          width: 12,
                          height: 12,
                        }),
                        (0, a.jsx)("span", {
                          children: B
                            ? F
                            : U.default.Messages
                                .GUILD_SETTINGS_PUBLIC_WELCOME_INVALID_CHANNEL,
                        }),
                      ],
                    }),
                  ],
                }),
                (0, a.jsx)(c.Button, {
                  color: c.Button.Colors.PRIMARY,
                  size: c.Button.Sizes.SMALL,
                  disabled: H,
                  onClick: () =>
                    (0, c.openModalLazy)(
                      async () => {
                        let { default: e } = await s
                          .el("277432")
                          .then(s.bind(s, "277432"));
                        return t =>
                          (0, a.jsx)(e, {
                            ...t,
                            welcomeChannel: o,
                            guildId: r,
                            onSave: I,
                          });
                      },
                      { onCloseRequest: () => j.NOOP_NULL }
                    ),
                  children: U.default.Messages.EDIT,
                }),
                x &&
                  (0, a.jsx)(h.default, {
                    onConfirm: () => I(),
                    onCancel: () => L(!1),
                    channelId: o.channel_id,
                  }),
              ],
            })
          );
        };
      var y = e => {
        var t;
        let { guild: n, showCreateModal: i } = e,
          { welcomeSettings: r, originalWelcomeSettings: d } = (0,
          u.useStateFromStores)([g.default], () =>
            g.default.getSettingsProps()
          ),
          E = (0, u.useStateFromStores)(
            [I.default],
            () => I.default.useReducedMotion
          ),
          [_, T] = l.useState(null),
          [f, S] = l.useState(!1),
          [h, C] = l.useState(!1),
          { description: O, channels: M, enabled: b } = r,
          { homeSettingsEnabled: y } = (0, m.useOnboardingHomeAdminExperiment)(
            null !== (t = null == n ? void 0 : n.id) && void 0 !== t
              ? t
              : G.EMPTY_STRING_SNOWFLAKE_ID
          ),
          F = () => {
            if (null != n)
              O !== d.description &&
                ((0, N.saveWelcomeScreen)(n.id, {
                  description: null == O ? void 0 : O.trim(),
                }),
                S(!0));
          },
          H = e => {
            if (null != n)
              !o(e, d.channels) &&
                ((0, N.saveWelcomeScreen)(n.id, { channels: e }), S(!0));
          },
          k = e => {
            if (null != n)
              e !== d.enabled &&
                ((0, N.saveWelcomeScreen)(n.id, { enabled: e }), C(!E), S(!0));
          },
          w = e => {
            if (null == e) return;
            let t = [...(null != M ? M : []), e];
            (0, N.updateSettings)({ channels: t }), H(t);
          },
          V = e => t => {
            let s = [...(null != M ? M : [])];
            null == t ? s.splice(e, 1) : (s[e] = t),
              (0, N.updateSettings)({ channels: s }),
              H(s),
              0 === s.length &&
                b &&
                ((0, N.updateSettings)({ enabled: !1 }), k(!1));
          },
          Y = (e, t, s) => {
            if (null == M) return;
            let a = M.indexOf(e),
              l = [...M];
            null != t &&
              t !== a &&
              (l.splice(a, 1),
              l.splice(t, 0, e),
              (0, N.updateSettings)({ channels: l })),
              s ? (H(l), T(null)) : T(t);
          },
          W = l.useRef(!1);
        l.useEffect(
          () => (
            null != n &&
              i &&
              (0, c.openModalLazy)(
                async () => {
                  let { default: e } = await s
                    .el("277432")
                    .then(s.bind(s, "277432"));
                  return t => (0, a.jsx)(e, { ...t, guildId: n.id, onSave: w });
                },
                { onCloseRequest: () => j.NOOP_NULL }
              ),
            () => {
              W.current = !0;
            }
          ),
          []
        ),
          l.useEffect(
            () => () => {
              if (W.current && f) {
                let e = [],
                  t = [],
                  s = !1;
                null == M ||
                  M.forEach(a => {
                    e.push(a.description),
                      t.push(a.channel_id),
                      null != a.emoji_id && (s = !0);
                  }),
                  A.default.track(
                    G.AnalyticEvents.GUILD_WELCOME_SCREEN_SETTINGS_UPDATED,
                    {
                      guild_id: null == n ? void 0 : n.id,
                      options: e,
                      options_channel_ids: t,
                      guild_description: O,
                      has_custom_emojis: s,
                      is_enabled: b,
                    }
                  );
              }
            },
            [f, M, O, b, n, W]
          ),
          l.useEffect(() => () => (0, N.clearWelcomeScreenSettings)(), []);
        let z = l.useCallback(() => {
          null != n && D.default.open(n.id, G.GuildSettingsSections.ONBOARDING);
        }, [n]);
        return null == n
          ? null
          : (0, a.jsxs)(c.FormSection, {
              title: U.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME,
              tag: c.FormTitleTags.H1,
              children: [
                y &&
                  (0, a.jsx)("div", {
                    className: P.notice,
                    children: (0, a.jsxs)(c.Text, {
                      variant: "text-md/normal",
                      children: [
                        (0, a.jsx)(p.default, { className: P.noticeIcon }),
                        U.default.Messages.WELCOME_SCREEN_DEPRECATED.format({
                          onboardingLink: e =>
                            (0, a.jsx)(L.default, { onClick: z, children: e }),
                        }),
                      ],
                    }),
                  }),
                (0, a.jsx)(c.Text, {
                  className: P.description,
                  variant: "text-sm/normal",
                  children:
                    U.default.Messages
                      .GUILD_SETTINGS_PUBLIC_WELCOME_SETTINGS_TEXT,
                }),
                (0, a.jsx)(v.default, {
                  enabled: b,
                  onPreview:
                    (null == M ? void 0 : M.length) === 0
                      ? void 0
                      : () => {
                          null != n &&
                            (0, c.openModalLazy)(async () => {
                              let { default: e } = await s
                                .el("900257")
                                .then(s.bind(s, "900257"));
                              return t =>
                                (0, a.jsx)(e, {
                                  ...t,
                                  guildId: n.id,
                                  isPreview: !0,
                                });
                            });
                        },
                  onToggle:
                    b || (null == M ? void 0 : M.length) !== 0
                      ? () => {
                          k(!b);
                        }
                      : void 0,
                  animateStatus: h,
                  firstLine: b
                    ? U.default.Messages.GUILD_SETTINGS_PUBLIC_WELCOME_ENABLED
                    : U.default.Messages
                        .GUILD_SETTINGS_PUBLIC_WELCOME_PROGRESS_WILL_SAVE,
                  secondLine: b
                    ? U.default.Messages
                        .GUILD_SETTINGS_PUBLIC_WELCOME_ENABLED_SECOND_LINE
                    : U.default.Messages
                        .GUILD_SETTINGS_PUBLIC_WELCOME_ENABLE_REMINDER,
                }),
                (0, a.jsxs)("div", {
                  className: P.previewContainer,
                  children: [
                    (0, a.jsxs)("div", {
                      className: P.welcomeHeader,
                      children: [
                        (0, a.jsx)(x.default, {
                          size: x.default.Sizes.LARGER,
                          className: P.icon,
                          guild: n,
                          animate: !0,
                          tabIndex: -1,
                        }),
                        (0, a.jsx)(c.Heading, {
                          className: P.welcomeTitle,
                          variant: "heading-xl/semibold",
                          children:
                            U.default.Messages.WELCOME_SCREEN_TITLE.format({
                              guildName: n.name,
                              guildNameHook: (e, t) =>
                                (0, a.jsxs)(
                                  "span",
                                  {
                                    children: [
                                      (0, a.jsx)(R.default, {
                                        guild: n,
                                        className: P.headerGuildBadge,
                                        flowerStarClassName: P.flowerStar,
                                      }),
                                      (0, a.jsx)("strong", { children: e }),
                                    ],
                                  },
                                  t
                                ),
                            }),
                        }),
                        (0, a.jsx)("div", {
                          className: P.descriptionWrapper,
                          children: (0, a.jsx)(c.TextArea, {
                            className: P.descriptionInput,
                            placeholder:
                              U.default.Messages
                                .GUILD_SETTINGS_PUBLIC_WELCOME_DESCRIPTION_PLACEHOLDER,
                            onChange: e => {
                              (0, N.updateSettings)({ description: e });
                            },
                            onBlur: () => {
                              F();
                            },
                            onKeyDown: e => {
                              e.keyCode === G.KeyboardKeys.ENTER &&
                                e.preventDefault();
                            },
                            value: O,
                            maxLength: 140,
                            disabled: y,
                          }),
                        }),
                      ],
                    }),
                    (0, a.jsx)(c.FormDivider, { className: P.divider }),
                    (0, a.jsxs)("div", {
                      className: P.welcomeChannels,
                      children: [
                        (0, a.jsx)(c.FormTitle, {
                          children:
                            U.default.Messages
                              .GUILD_SETTINGS_PUBLIC_WELCOME_RECOMMENDED_CHANNELS_TITLE,
                        }),
                        (0, a.jsx)(c.Text, {
                          variant: "text-sm/normal",
                          className: P.addChannelSubtext,
                          children:
                            U.default.Messages
                              .GUILD_SETTINGS_PUBLIC_WELCOME_RECOMMENDED_CHANNELS_DESCRIPTION,
                        }),
                        null == M
                          ? void 0
                          : M.map((e, t) =>
                              (0, a.jsx)(
                                B,
                                {
                                  guildId: n.id,
                                  welcomeChannel: e,
                                  onEdit: V(t),
                                  onChannelReorder: Y,
                                  isDropHovered: t === _,
                                  index: t,
                                },
                                t
                              )
                            ),
                        (null == M || M.length < 5) &&
                          (0, a.jsx)(c.Button, {
                            onClick: () =>
                              (0, c.openModalLazy)(
                                async () => {
                                  let { default: e } = await s
                                    .el("277432")
                                    .then(s.bind(s, "277432"));
                                  return t =>
                                    (0, a.jsx)(e, {
                                      ...t,
                                      guildId: n.id,
                                      onSave: w,
                                    });
                                },
                                { onCloseRequest: () => j.NOOP_NULL }
                              ),
                            className: P.addChannelButton,
                            disabled: y,
                            color: c.Button.Colors.PRIMARY,
                            children:
                              U.default.Messages
                                .GUILD_SETTINGS_PUBLIC_WELCOME_ADD_RECOMMENDED_CHANNEL,
                          }),
                      ],
                    }),
                  ],
                }),
              ],
            });
      };
    },
    191329: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          GuildSettingsDiscoveryNotice: function () {
            return w;
          },
          default: function () {
            return Y;
          },
        }),
        s("222007"),
        s("424973");
      var a = s("37983"),
        l = s("884691"),
        n = s("748820"),
        i = s("446674"),
        r = s("77078"),
        o = s("45299"),
        d = s("828116"),
        u = s("679653"),
        c = s("804578"),
        E = s("271889"),
        _ = s("75766"),
        I = s("758276"),
        T = s("453910"),
        f = s("283167"),
        S = s("868246"),
        m = s("324105"),
        N = s("385976"),
        g = s("101263"),
        h = s("407063"),
        C = s("694187"),
        R = s("608684"),
        x = s("459698"),
        L = s("923959"),
        O = s("957255"),
        p = s("27618"),
        A = s("697218"),
        M = s("414943"),
        D = s("315102"),
        v = s("794818"),
        G = s("592407"),
        j = s("900938"),
        U = s("26991"),
        P = s("796178"),
        b = s("237938"),
        B = s("53948"),
        y = s("49111"),
        F = s("447621"),
        H = s("782340"),
        k = s("111681");
      let w = i.default.connectStores([j.default], () => {
        let {
          guild: e,
          originalGuild: t,
          submitting: s,
          guildMetadata: a,
        } = j.default.getProps();
        return {
          guild: e,
          submitting: s,
          onReset() {
            null != e && G.default.init(e.id);
          },
          onSave() {
            null != e &&
              ((0, I.trackDiscoverySettingsChange)(e, t),
              G.default.saveGuild(e.id, {
                features: e.features,
                discoverySplash: e.discoverySplash,
                description: e.description,
                safetyAlertsChannelId: e.safetyAlertsChannelId,
                rulesChannelId: e.rulesChannelId,
                preferredLocale: e.preferredLocale,
              }),
              f.saveGuildMetadata({
                guildId: e.id,
                primaryCategoryId: a.primaryCategoryId,
                keywords: a.keywords,
                emojiDiscoverabilityEnabled: a.emojiDiscoverabilityEnabled,
                partnerActionedTimestamp: a.partnerActionedTimestamp,
                partnerApplicationTimestamp: a.partnerApplicationTimestamp,
                isPublished: a.isPublished,
                reasonsToJoin: a.reasonsToJoin,
                socialLinks: a.socialLinks,
                about: a.about,
              }));
          },
        };
      })(o.default);
      class V extends l.PureComponent {
        async componentDidMount() {
          let { guild: e } = this.props;
          if (null != e) {
            (0, E.fetchDiscoveryChecklist)(e.id).then(() => {
              (0, c.trackGuildSettingsDiscoveryViewed)(e.id);
            }),
              f.maybeFetchGuildDiscoveryCategories(),
              f.fetchMetadataForGuild(e.id);
            let t = await (0, v.getDiscoverableGuild)(e.id);
            null != t && this.setState({ discoverableGuild: t });
            let s = this.checkForLowerMemberCountReqEnabled(e);
            s &&
              T.DiscoveryRequirementsM2Experiment.trackExposure({
                guildId: e.id,
                location: "006266_1",
              });
          }
        }
        renderDiscoverableSection() {
          let { guild: e, isGuildAdmin: t } = this.props;
          if (null == e) return;
          let s = e.hasFeature(y.GuildFeatures.DISCOVERABLE);
          return (0, a.jsxs)(r.FormSection, {
            className: k.twoColumnFormSection,
            children: [
              (0, a.jsxs)("div", {
                children: [
                  (0, a.jsx)(r.FormTitle, {
                    className: k.formTitle,
                    children:
                      H.default.Messages.GUILD_SETTINGS_ENABLE_DISCOVERABLE,
                  }),
                  (0, a.jsx)(r.FormText, {
                    type: r.FormTextTypes.DESCRIPTION,
                    className: k.formDescription,
                    children: H.default.Messages.FORM_HELP_ENABLE_DISCOVERABLE,
                  }),
                  (0, a.jsx)(r.FormText, {
                    type: r.FormTextTypes.DESCRIPTION,
                    className: k.formDescription,
                    children:
                      H.default.Messages.FORM_HELP_DISCOVERABLE_CHANGE_TIME,
                  }),
                  (0, a.jsx)(r.Tooltip, {
                    text: t
                      ? null
                      : H.default.Messages.GUILD_SETTINGS_DISCOVERY_ADMIN_ONLY,
                    children: e =>
                      (0, a.jsx)(r.Button, {
                        size: r.Button.Sizes.SMALL,
                        onClick: this.handleToggleDiscovery,
                        color: s
                          ? r.Button.Colors.PRIMARY
                          : r.Button.Colors.GREEN,
                        hover: s
                          ? r.Button.Colors.PRIMARY
                          : r.Button.Colors.GREEN,
                        disabled: !t,
                        ...e,
                        children: s
                          ? H.default.Messages
                              .GUILD_SETTINGS_DISABLE_DISCOVERABLE
                          : H.default.Messages
                              .GUILD_SETTINGS_ENABLE_DISCOVERABLE,
                      }),
                  }),
                ],
              }),
              (0, a.jsx)(m.default, {
                className: k.guildCard,
                loading: null == e,
                guild: e,
              }),
            ],
          });
        }
        renderCoverImageSection() {
          let { guild: e, errors: t, canManageGuild: s } = this.props;
          if (null != e)
            return (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsxs)(r.FormSection, {
                  className: k.twoColumnFormSection,
                  children: [
                    (0, a.jsxs)("div", {
                      children: [
                        (0, a.jsx)(r.FormTitle, {
                          className: k.formTitle,
                          children:
                            H.default.Messages.FORM_LABEL_DISCOVERY_COVER_IMAGE,
                        }),
                        (0, a.jsx)(r.FormText, {
                          type: r.FormTextTypes.DESCRIPTION,
                          className: k.formDescription,
                          children:
                            H.default.Messages.FORM_HELP_DISCOVERY_COVER_IMAGE,
                        }),
                        (0, a.jsxs)(r.Button, {
                          size: r.Button.Sizes.SMALL,
                          color: r.Button.Colors.PRIMARY,
                          hover: r.Button.Colors.PRIMARY,
                          children: [
                            H.default.Messages.UPLOAD_BACKGROUND,
                            (0, a.jsx)(C.default, {
                              disabled: !s,
                              onChange: this.handleSplashChange,
                            }),
                          ],
                        }),
                      ],
                    }),
                    (0, a.jsx)("div", {
                      className: k.imageUploaderWrapper,
                      children: (0, a.jsx)(R.default, {
                        image: e.discoverySplash,
                        makeURL: t =>
                          D.default.getGuildDiscoverySplashURL({
                            id: e.id,
                            splash: t,
                            size: 512 * (0, h.getDevicePixelRatio)(),
                          }),
                        disabled: !s,
                        onChange: this.handleSplashChange,
                        hint: H.default.Messages.CHANGE_SPLASH,
                        imageClassName: k.imageUploaderInnerSquare,
                        hideSize: !0,
                      }),
                    }),
                  ],
                }),
                (null == t ? void 0 : t.discovery_splash) != null
                  ? (0, a.jsx)(r.Text, {
                      color: "text-danger",
                      variant: "text-sm/normal",
                      children: t.discovery_splash,
                    })
                  : null,
              ],
            });
        }
        renderEmojiDiscoverabilitySection() {
          var e;
          let { canManageGuild: t, guildMetadata: s, guild: l } = this.props,
            { discoverableGuild: i } = this.state,
            { emojiDiscoverabilityEnabled: o } = s,
            d = i;
          if (null == d && null != l) {
            let e = N.default.getGuildEmoji(l.id);
            d = {
              ...l,
              premiumSubscriptionCount:
                null == l ? void 0 : l.premiumSubscriberCount,
              emojis: e,
              emojiCount: e.length,
              presenceCount: 1234,
              memberCount: 1234,
            };
          }
          let u = null != d ? g.default.createFromDiscoverableGuild(d) : null,
            c =
              null == d
                ? void 0
                : null === (e = d.emojis) || void 0 === e
                  ? void 0
                  : e[0],
            E =
              null != c
                ? {
                    name: c.require_colons ? ":".concat(c.name, ":") : c.name,
                    emojiId: c.id,
                    animated: c.animated,
                    jumboable: !0,
                  }
                : {};
          return (0, a.jsxs)(r.FormSection, {
            className: k.twoColumnFormSection,
            children: [
              (0, a.jsxs)("div", {
                className: k.formColumnLeft,
                children: [
                  (0, a.jsx)(r.FormTitle, {
                    className: k.formTitle,
                    children:
                      H.default.Messages
                        .GUILD_SETTINGS_DISCOVERY_EMOJI_DISCOVERABILITY_TITLE,
                  }),
                  (0, a.jsx)(r.FormText, {
                    className: k.description,
                    type: r.FormTextTypes.DESCRIPTION,
                    children:
                      H.default.Messages
                        .GUILD_SETTINGS_DISCOVERY_EMOJI_DISCOVERABILITY_DESCRIPTION,
                  }),
                  (0, a.jsx)(r.Button, {
                    size: r.Button.Sizes.SMALL,
                    color: o ? r.Button.Colors.PRIMARY : r.Button.Colors.GREEN,
                    hover: o ? r.Button.Colors.PRIMARY : r.Button.Colors.GREEN,
                    disabled: !t,
                    onClick: this.handleToggleEmojiDiscoverability,
                    children: o
                      ? H.default.Messages
                          .GUILD_SETTINGS_DISCOVERY_EMOJI_DISCOVERABILITY_DISABLE
                      : H.default.Messages
                          .GUILD_SETTINGS_DISCOVERY_EMOJI_DISCOVERABILITY_ENABLE,
                  }),
                ],
              }),
              null != u &&
                u.isDiscoverable() &&
                (0, a.jsx)(x.CustomGuildEmojiPopout, {
                  expressionSourceGuild: u,
                  node: E,
                  closePopout: y.NOOP,
                  nonce: (0, n.v4)(),
                  demoMode: !0,
                }),
            ],
          });
        }
        renderLocaleSelector() {
          let { guild: e, canManageGuild: t, localeOptions: s } = this.props;
          if (null != e)
            return (0, a.jsxs)(r.FormSection, {
              className: k.twoColumnFormSection,
              children: [
                (0, a.jsxs)("div", {
                  children: [
                    (0, a.jsx)(r.FormTitle, {
                      className: k.formTitle,
                      children: H.default.Messages.FORM_LABEL_SERVER_LANGUAGE,
                    }),
                    (0, a.jsx)(r.FormText, {
                      type: r.FormTextTypes.DESCRIPTION,
                      className: k.formDescription,
                      children:
                        H.default.Messages.GUILD_SETTINGS_DISCOVERY_LOCALE_HELP,
                    }),
                  ],
                }),
                (0, a.jsx)("div", {
                  className: k.formSelect,
                  children: (0, a.jsx)(r.SingleSelect, {
                    value: e.preferredLocale,
                    options: s,
                    onChange: this.handleLocaleChange,
                    isDisabled: !t,
                  }),
                }),
              ],
            });
        }
        renderCategoriesSection() {
          let {
            canManageGuild: e,
            guildMetadata: t,
            primaryCategoryOptions: s,
            errors: l,
            guild: n,
          } = this.props;
          if (null != n)
            return (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsxs)(r.FormSection, {
                  children: [
                    (0, a.jsx)(r.FormTitle, {
                      className: k.formTitle,
                      children:
                        H.default.Messages
                          .GUILD_SETTINGS_DISCOVERY_PRIMARY_CATEGORY_TITLE,
                    }),
                    (0, a.jsx)(r.FormText, {
                      type: r.FormTextTypes.DESCRIPTION,
                      className: k.description,
                      children:
                        H.default.Messages
                          .GUILD_SETTINGS_DISCOVERY_PRIMARY_CATEGORY_DESCRIPTION,
                    }),
                  ],
                }),
                (0, a.jsx)(M.default, {
                  value:
                    t.primaryCategoryId === F.DEFAULT_DISCOVERY_CATEGORY_ID
                      ? null
                      : t.primaryCategoryId,
                  placeholder: H.default.Messages.SELECT,
                  options: s,
                  onChange: this.handlePrimaryCategoryChange,
                  disabled: !e,
                  searchable: !0,
                  clearable: !0,
                }),
                (0, a.jsxs)(r.FormSection, {
                  className: k.noDividerFormSection,
                  children: [
                    (0, a.jsx)(r.FormTitle, {
                      className: k.formTitle,
                      children:
                        H.default.Messages
                          .GUILD_SETTINGS_DISCOVERY_SUBCATEGORY_TITLE,
                    }),
                    (0, a.jsx)(U.default, { guild: n, guildMetadata: t }),
                  ],
                }),
                (null == l ? void 0 : l.category) != null
                  ? (0, a.jsx)(r.Text, {
                      color: "text-danger",
                      className: k.error,
                      variant: "text-sm/normal",
                      children: l.category,
                    })
                  : null,
              ],
            });
        }
        renderKeywordsSection() {
          let { canManageGuild: e, guildMetadata: t, errors: s } = this.props;
          return (0, a.jsxs)(r.FormSection, {
            children: [
              (0, a.jsx)(r.FormTitle, {
                className: k.formTitle,
                children:
                  H.default.Messages
                    .GUILD_SETTINGS_DISCOVERY_SEARCH_KEYWORDS_TITLE,
              }),
              (0, a.jsx)(r.FormText, {
                className: k.description,
                type: r.FormTextTypes.DESCRIPTION,
                children:
                  H.default.Messages.GUILD_SETTINGS_DISCOVERY_SEARCH_KEYWORDS_DESCRIPTION.format(),
              }),
              (0, a.jsx)(d.default, {
                tags: t.keywords,
                onRemoveTag: this.handleRemoveKeyword,
                onAddTag: this.handleAddKeyword,
                maxTags: B.MAX_KEYWORDS,
                maxTaxLength: B.MAX_KEYWORD_LENGTH,
                disabled: !e,
              }),
              (null == s ? void 0 : s.keywords) != null
                ? (0, a.jsx)(r.Text, {
                    color: "text-danger",
                    className: k.error,
                    variant: "text-sm/normal",
                    children: s.keywords,
                  })
                : null,
            ],
          });
        }
        render() {
          let { guild: e, discoveryChecklist: t, isGuildAdmin: s } = this.props;
          if (null == e || null == t) return null;
          let l = (0, I.getSettingsView)(e, t);
          switch (l) {
            case I.DiscoverySettingsViews.INTRO:
              return (0, a.jsx)(b.default, {
                guild: e,
                onEnableDiscovery: this.handleEnableDiscovery,
                isGuildAdmin: s,
              });
            case I.DiscoverySettingsViews.DISQUALIFIED:
              return (0, a.jsx)(P.default, { guild: e });
            case I.DiscoverySettingsViews.SETTINGS:
              return (0, a.jsxs)(r.FormSection, {
                className: k.discoverySettings,
                title: H.default.Messages.DISCOVERY,
                tag: r.FormTitleTags.H1,
                children: [
                  this.renderDiscoverableSection(),
                  (0, a.jsx)(r.FormDivider, { className: k.divider }),
                  this.renderCoverImageSection(),
                  (0, a.jsx)(r.FormDivider, { className: k.divider }),
                  this.renderEmojiDiscoverabilitySection(),
                  (0, a.jsx)(r.FormDivider, { className: k.divider }),
                  this.renderCategoriesSection(),
                  (0, a.jsx)(r.FormDivider, { className: k.divider }),
                  this.renderKeywordsSection(),
                  (0, a.jsx)(r.FormDivider, { className: k.divider }),
                  this.renderLocaleSelector(),
                ],
              });
            default:
              return null;
          }
        }
        constructor(...e) {
          super(...e),
            (this.state = { discoverableGuild: null }),
            (this.checkForLowerMemberCountReqEnabled = e => {
              let { isGuildAdmin: t } = this.props,
                s = e.hasFeature(y.GuildFeatures.COMMUNITY),
                { enableLowerMemberCountReq: a } =
                  T.DiscoveryRequirementsM2Experiment.getCurrentConfig(
                    { guildId: e.id, location: "006266_2" },
                    { disable: !(t && s), autoTrackExposure: !1 }
                  );
              return a;
            }),
            (this.handleToggleDiscovery = () => {
              let { guild: e } = this.props;
              if (null == e) return;
              let t = new Set(e.features);
              e.hasFeature(y.GuildFeatures.DISCOVERABLE)
                ? t.delete(y.GuildFeatures.DISCOVERABLE)
                : t.add(y.GuildFeatures.DISCOVERABLE),
                G.default.updateGuild({ features: t });
            }),
            (this.handleEnableDiscovery = async () => {
              let e = await (0, r.openModalLazy)(
                async () => {
                  let { default: e } = await s
                    .el("941089")
                    .then(s.bind(s, "941089"));
                  return t => {
                    let { ...s } = t;
                    return (0, a.jsx)(e, { ...s });
                  };
                },
                {
                  onCloseRequest: () => {
                    null != e && (0, r.closeModal)(e);
                  },
                }
              );
            }),
            (this.handleSplashChange = e => {
              G.default.updateGuild({ discoverySplash: e });
            }),
            (this.handleLocaleChange = e => {
              G.default.updateGuild({ preferredLocale: e });
            }),
            (this.handlePrimaryCategoryChange = e => {
              var t;
              let { guild: s } = this.props;
              (null == s ? void 0 : s.id) != null &&
                f.updateGuildPrimaryCategory(
                  null == s ? void 0 : s.id,
                  null !== (t = null == e ? void 0 : e.value) && void 0 !== t
                    ? t
                    : F.DEFAULT_DISCOVERY_CATEGORY_ID
                );
            }),
            (this.handleRemoveKeyword = e => {
              let { guild: t, guildMetadata: s } = this.props;
              if ((null == t ? void 0 : t.id) == null) return;
              let a = [...s.keywords];
              a.splice(e, 1), f.updateGuildKeywords(t.id, a);
            }),
            (this.handleAddKeyword = e => {
              let { guild: t, guildMetadata: s } = this.props,
                { keywords: a } = s;
              if ((null == t ? void 0 : t.id) != null)
                !(a.length >= B.MAX_KEYWORDS) &&
                  f.updateGuildKeywords(t.id, [...a, e]);
            }),
            (this.handleToggleEmojiDiscoverability = () => {
              let { guild: e, guildMetadata: t } = this.props,
                { emojiDiscoverabilityEnabled: s } = t;
              (null == e ? void 0 : e.id) != null &&
                f.updateGuildEmojiDiscoverabilityEnabled(e.id, !s);
            });
        }
      }
      var Y = i.default.connectStores(
        [
          j.default,
          O.default,
          _.default,
          L.default,
          S.default,
          A.default,
          p.default,
        ],
        () => {
          let {
              guild: e,
              errors: t,
              submitting: s,
              guildMetadata: a,
            } = j.default.getProps(),
            l = O.default.can(y.Permissions.MANAGE_GUILD, e),
            n = O.default.can(y.Permissions.ADMINISTRATOR, e),
            i = null != e ? _.default.getDiscoveryChecklist(e.id) : null,
            r = null != e ? L.default.getChannels(e.id) : null,
            o = [];
          null != r &&
            r[(0, L.GUILD_SELECTABLE_CHANNELS_KEY)].forEach(e => {
              let { channel: t } = e;
              t.type === y.ChannelTypes.GUILD_TEXT &&
                o.push({
                  value: t.id,
                  label: (0, u.computeChannelName)(t, A.default, p.default, !0),
                });
            });
          let d = S.default.getPrimaryCategories().map(e => {
              let { categoryId: t, name: s } = e;
              return { value: t, label: s };
            }),
            c = (0, F.calculateLocaleOptions)();
          return {
            guild: e,
            errors: t,
            submitting: s,
            discoveryChecklist: i,
            selectableChannels: o,
            canManageGuild: l,
            isGuildAdmin: n,
            guildMetadata: a,
            primaryCategoryOptions: d,
            localeOptions: c,
          };
        }
      )(V);
    },
    851545: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          GuildSettingsDiscoveryLandingPageNotice: function () {
            return j;
          },
          default: function () {
            return P;
          },
        }),
        s("222007"),
        s("511434"),
        s("313619"),
        s("654714"),
        s("287168"),
        s("956660"),
        s("686130"),
        s("781738");
      var a = s("37983"),
        l = s("884691"),
        n = s("446674"),
        i = s("669491"),
        r = s("77078"),
        o = s("133403"),
        d = s("913801"),
        u = s("45299"),
        c = s("283167"),
        E = s("868246"),
        _ = s("298878"),
        I = s("407063"),
        T = s("694187"),
        f = s("608684"),
        S = s("957255"),
        m = s("93581"),
        N = s("414943"),
        g = s("578706"),
        h = s("381546"),
        C = s("315102"),
        R = s("701909"),
        x = s("592407"),
        L = s("900938"),
        O = s("26991"),
        p = s("744421"),
        A = s("49111"),
        M = s("447621"),
        D = s("782340"),
        v = s("629976");
      let G = "https:" + window.GLOBAL_ENV.MARKETING_ENDPOINT + "/servers/",
        j = () => {
          let {
            guild: e,
            guildMetadata: t,
            submitting: s,
          } = (0, n.useStateFromStoresObject)([L.default], () => ({
            submitting: L.default.isSubmitting(),
            guild: L.default.getGuild(),
            guildMetadata: L.default.getMetadata(),
          }));
          return (0, a.jsx)(u.default, {
            submitting: s,
            onReset: () => {
              null != e && x.default.init(e.id);
            },
            onSave: () => {
              null != e &&
                (x.default.saveGuild(e.id, {
                  discoverySplash: e.discoverySplash,
                  description: e.description,
                }),
                c.saveGuildMetadata({
                  guildId: e.id,
                  primaryCategoryId: t.primaryCategoryId,
                  keywords: t.keywords,
                  emojiDiscoverabilityEnabled: t.emojiDiscoverabilityEnabled,
                  partnerActionedTimestamp: t.partnerActionedTimestamp,
                  partnerApplicationTimestamp: t.partnerApplicationTimestamp,
                  isPublished: t.isPublished,
                  reasonsToJoin: t.reasonsToJoin,
                  socialLinks: t.socialLinks.filter(e => e),
                  about: t.about,
                }));
            },
          });
        },
        U = () => {
          var e;
          let t = l.useRef(null),
            s = (0, n.useStateFromStores)([L.default], () =>
              L.default.getGuild()
            ),
            [u, j] = l.useState(!1);
          l.useEffect(() => {
            !u &&
              null != s &&
              (c.maybeFetchGuildDiscoveryCategories(),
              c.fetchMetadataForGuild(s.id),
              c.fetchSlugForGuild(s.id),
              j(!0));
          }, [s, u]);
          let { canManageGuild: U } = (0, n.useStateFromStoresObject)(
              [S.default],
              () => ({
                canManageGuild: S.default.can(A.Permissions.MANAGE_GUILD, s),
              })
            ),
            P = (0, n.useStateFromStores)([L.default], () =>
              L.default.isGuildMetadataLoaded()
            ),
            b = (0, n.useStateFromStores)([L.default], () =>
              null != s ? L.default.getMetadata() : null
            ),
            B = (0, n.useStateFromStores)([L.default], () =>
              null != s && (null == b ? void 0 : b.isPublished)
                ? L.default.getSlug()
                : null
            ),
            [y, F] = l.useState([!0]),
            [H, k] = l.useState(!0),
            [w, V] = l.useState([!1]),
            [Y, W] = l.useState([""]),
            z = e => {
              let t = Object.entries(M.ALLOWED_SOCIAL_LINKS_DOMAINS)
                .filter(e => !Y.includes(e[1].presentation))
                .map(e => ({ label: e[1].presentation, value: e[0] }));
              return null == e || "" === e
                ? t
                : t.concat({ label: e, value: e });
            },
            K = e => {
              try {
                var t, s, a, l;
                let n = new URL(e).hostname.split(".");
                if (3 === n.length && "bandcamp" === n[1].toLowerCase())
                  return M.ALLOWED_SOCIAL_LINKS_DOMAINS.bandcamp.presentation;
                let i =
                  null !==
                    (s =
                      null === (t = n.shift()) || void 0 === t
                        ? void 0
                        : t.toLowerCase()) && void 0 !== s
                    ? s
                    : "";
                if (
                  ("www" === i &&
                    (i =
                      null !==
                        (l =
                          null === (a = n.shift()) || void 0 === a
                            ? void 0
                            : a.toLowerCase()) && void 0 !== l
                        ? l
                        : ""),
                  i in M.ALLOWED_SOCIAL_LINKS_DOMAINS)
                )
                  return M.ALLOWED_SOCIAL_LINKS_DOMAINS[i].presentation;
                return null;
              } catch {
                return null;
              }
            };
          l.useEffect(() => {
            if (null !== b) {
              let e = [],
                t = [];
              b.socialLinks.forEach((s, a) => {
                if ("" !== s) {
                  let l = K(s);
                  null !== l ? ((t[a] = l), (e[a] = !0)) : (e[a] = !1);
                } else e[a] = !0;
              }),
                W(t),
                F(e),
                k(e.every(e => !0 === e));
            }
          }, [b]);
          let Z = (0, n.useStateFromStores)([L.default], () =>
              null != s ? L.default.getErrors() : null
            ),
            X = (0, n.useStateFromStores)(
              [E.default],
              () => E.default.getPrimaryCategories(),
              [],
              E.areDiscoveryCategoriesEqual
            );
          if (null == s || null == b) return null;
          let Q = e => {
              x.default.updateGuild({ discoverySplash: e });
            },
            J = e => {
              var t;
              (null == s ? void 0 : s.id) != null &&
                c.updateGuildPrimaryCategory(
                  null == s ? void 0 : s.id,
                  null !== (t = null == e ? void 0 : e.value) && void 0 !== t
                    ? t
                    : M.DEFAULT_DISCOVERY_CATEGORY_ID
                );
            },
            q = e => {
              var t;
              x.default.updateGuild({
                description:
                  null !== (t = null == e ? void 0 : e.replaceAll("\n", "")) &&
                  void 0 !== t
                    ? t
                    : "",
              });
            },
            $ = e => {
              c.updateGuildDiscoveryMetadataAbout(s.id, e);
            },
            ee = e => {
              c.updateGuildDiscoveryMetadataIsPublished(s.id, e),
                e
                  ? c.saveGuildMetadata({
                      guildId: s.id,
                      primaryCategoryId: b.primaryCategoryId,
                      keywords: b.keywords,
                      emojiDiscoverabilityEnabled:
                        b.emojiDiscoverabilityEnabled,
                      partnerActionedTimestamp: b.partnerActionedTimestamp,
                      partnerApplicationTimestamp:
                        b.partnerApplicationTimestamp,
                      isPublished: !0,
                      reasonsToJoin: b.reasonsToJoin,
                      socialLinks: b.socialLinks,
                      about: b.about,
                    })
                  : c.saveGuildMetadata({
                      guildId: s.id,
                      primaryCategoryId: b.primaryCategoryId,
                      keywords: b.keywords,
                      emojiDiscoverabilityEnabled:
                        b.emojiDiscoverabilityEnabled,
                      partnerActionedTimestamp: b.partnerActionedTimestamp,
                      partnerApplicationTimestamp:
                        b.partnerApplicationTimestamp,
                      isPublished: !1,
                      reasonsToJoin: b.reasonsToJoin,
                      socialLinks: b.socialLinks,
                      about: b.about,
                    }),
                x.default.saveGuild(s.id, {
                  discoverySplash: s.discoverySplash,
                  description: s.description,
                });
            },
            et = () => {
              if (b.socialLinks.length < 9) {
                let e = [...b.socialLinks];
                c.updateGuildDiscoveryMetadataSocialLinks(s.id, e.concat("")),
                  W(Y.concat(""));
              }
            },
            es = (e, t) => {
              let a = [...b.socialLinks],
                l = [...Y],
                n = [...y];
              (l[t] = e),
                (a[t] = M.ALLOWED_SOCIAL_LINKS_DOMAINS[e].baseUrl),
                (n[t] = !0),
                F(n),
                W(l),
                k(n.every(e => !0 === e)),
                c.updateGuildDiscoveryMetadataSocialLinks(s.id, a);
            },
            ea = (e, t) => {
              let a = [...b.socialLinks],
                l = a[t],
                n = e;
              if (0 === l.length && n.length > 1) {
                let e = RegExp("^https?:");
                !1 === e.test(n) && (n = "https://" + n);
              }
              (a[t] = n), c.updateGuildDiscoveryMetadataSocialLinks(s.id, a);
            },
            el = e => {
              let t = [...w];
              t.splice(e, 1), V(t);
              let a = [...y];
              a.splice(e, 1), F(a);
              let l = [...Y];
              l.splice(e, 1), W(l);
              let n = [...b.socialLinks];
              n.splice(e, 1),
                c.updateGuildDiscoveryMetadataSocialLinks(s.id, n);
            },
            en = e => {
              let { reason: t = "", emoji_name: s = "" } = e;
              return (
                null !== t && t.length >= 10 && t.length <= 128 && null !== s
              );
            },
            ei = e => {
              let { reason: t = "", emoji_name: s = "" } = e;
              return (null === t || "" === t) && null === s;
            },
            er = [
              {
                title:
                  D.default.Messages
                    .DISCOVERY_LANDING_PAGE_CHECKLIST_REQUIREMENTS,
                items: [
                  {
                    description:
                      D.default.Messages
                        .DISCOVERY_LANDING_PAGE_CHECKLIST_UPLOAD_COVER_IMAGE,
                    completed:
                      null !== s.discoverySplash && "" !== s.discoverySplash,
                  },
                  {
                    description:
                      D.default.Messages
                        .DISCOVERY_LANDING_PAGE_CHECKLIST_SHORT_DESCRIPTION,
                    completed: null !== s.description && "" !== s.description,
                  },
                  {
                    description:
                      D.default.Messages.DISCOVERY_LANDING_PAGE_CHECKLIST_ABOUT,
                    completed:
                      null !== b.about &&
                      b.about.length >= 300 &&
                      b.about.length <= 2400,
                  },
                  {
                    description:
                      D.default.Messages
                        .DISCOVERY_LANDING_PAGE_CHECKLIST_REASONS,
                    completed:
                      null !== b.reasonsToJoin &&
                      b.reasonsToJoin.every(e => ei(e) || en(e)) &&
                      b.reasonsToJoin.filter(en).length >= 2,
                  },
                ],
              },
            ],
            eo = X.map(e => ({ label: e.name, value: e.categoryId })),
            ed = (e, t) => {
              let s = [...w];
              (s[e] = t), V(s);
            };
          return (0, a.jsx)("div", {
            className: v.settingsColumn,
            children: (0, a.jsx)("div", {
              className: v.settingsContainer,
              children: (0, a.jsx)(r.ScrollerAuto, {
                className: v.settingsScroller,
                children: (0, a.jsx)("main", {
                  ref: t,
                  className: v.settingsContent,
                  children: (0, a.jsx)(r.FocusRingScope, {
                    containerRef: t,
                    children: (0, a.jsxs)("div", {
                      className: v.container,
                      children: [
                        (0, a.jsxs)(r.FormSection, {
                          className: v.mainContent,
                          title: (0, a.jsxs)("div", {
                            children: [
                              D.default.Messages.DISCOVERY_LANDING_PAGE,
                              " ",
                              (0, a.jsx)(_.default, { className: v.betaTag }),
                            ],
                          }),
                          tag: r.FormTitleTags.H1,
                          children: [
                            (0, a.jsxs)(r.FormText, {
                              className: v.tabMainDescription,
                              type: r.FormTextTypes.DESCRIPTION,
                              children: [
                                D.default.Messages.DISCOVERY_LANDING_PAGE_DESCRIPTION.format(
                                  {
                                    discordURL:
                                      window.GLOBAL_ENV.MARKETING_ENDPOINT,
                                  }
                                ),
                                " ",
                                D.default.Messages.DISCOVERY_LANDING_PAGE_LEARN_MORE.format(
                                  {
                                    learnMoreURL: R.default.getArticleURL(
                                      A.HelpdeskArticles.SERVER_WEB_PAGES
                                    ),
                                  }
                                ),
                              ],
                            }),
                            (() => {
                              if (!b.isPublished || null == B) return;
                              let e = G + B;
                              return (0, a.jsx)(a.Fragment, {
                                children: (0, a.jsxs)(r.FormSection, {
                                  className: v.noDividerFormSection,
                                  children: [
                                    (0, a.jsx)(r.FormTitle, {
                                      className: v.formTitle,
                                      children:
                                        D.default.Messages
                                          .DISCOVERY_LANDING_PAGE_PUBLISHED_URL_TITLE,
                                    }),
                                    (0, a.jsx)(d.default, { value: e }),
                                    (0, a.jsx)(r.Button, {
                                      className: v.viewPageButton,
                                      size: r.Button.Sizes.SMALL,
                                      color: r.Button.Colors.BRAND,
                                      hover: r.Button.Colors.BRAND,
                                      onClick: () => window.open(e),
                                      children:
                                        D.default.Messages
                                          .DISCOVERY_LANDING_PAGE_PUBLISHED_URL_VIEW_PAGE_BUTTON,
                                    }),
                                  ],
                                }),
                              });
                            })(),
                            (0, a.jsx)(r.FormDivider, { className: v.divider }),
                            (() => {
                              if (null != s)
                                return (0, a.jsxs)(a.Fragment, {
                                  children: [
                                    (0, a.jsxs)(r.FormSection, {
                                      children: [
                                        (0, a.jsx)(r.FormTitle, {
                                          className: v.formTitle,
                                          children:
                                            D.default.Messages
                                              .DISCOVERY_LANDING_PAGE_CATEGORY_TITLE,
                                        }),
                                        (0, a.jsx)(r.FormText, {
                                          type: r.FormTextTypes.DESCRIPTION,
                                          className: v.description,
                                          children:
                                            D.default.Messages
                                              .DISCOVERY_LANDING_PAGE_CATEGORY_DESCRIPTION,
                                        }),
                                      ],
                                    }),
                                    (0, a.jsx)(N.default, {
                                      value:
                                        b.primaryCategoryId ===
                                        M.DEFAULT_DISCOVERY_CATEGORY_ID
                                          ? null
                                          : null == b
                                            ? void 0
                                            : b.primaryCategoryId,
                                      placeholder: D.default.Messages.SELECT,
                                      options: eo,
                                      onChange: J,
                                      disabled: !U,
                                      searchable: !0,
                                      clearable: !0,
                                    }),
                                    (0, a.jsxs)(r.FormSection, {
                                      className: v.noDividerFormSection,
                                      children: [
                                        (0, a.jsx)(r.FormTitle, {
                                          className: v.formTitle,
                                          children:
                                            D.default.Messages
                                              .GUILD_SETTINGS_DISCOVERY_SUBCATEGORY_TITLE,
                                        }),
                                        (0, a.jsx)(O.default, {
                                          guild: s,
                                          guildMetadata: b,
                                          disabled: !U,
                                        }),
                                      ],
                                    }),
                                    (null == Z ? void 0 : Z.category) != null
                                      ? (0, a.jsx)(r.Text, {
                                          color: "text-danger",
                                          className: v.error,
                                          variant: "text-sm/normal",
                                          children: Z.category,
                                        })
                                      : null,
                                  ],
                                });
                            })(),
                            (0, a.jsx)(r.FormDivider, { className: v.divider }),
                            (() => {
                              if (null != s)
                                return (0, a.jsxs)(a.Fragment, {
                                  children: [
                                    (0, a.jsxs)(r.FormSection, {
                                      className: v.twoColumnFormSection,
                                      children: [
                                        (0, a.jsxs)("div", {
                                          children: [
                                            (0, a.jsx)(r.FormTitle, {
                                              className: v.formTitle,
                                              children:
                                                D.default.Messages
                                                  .FORM_LABEL_DISCOVERY_COVER_IMAGE,
                                            }),
                                            (0, a.jsx)(r.FormText, {
                                              type: r.FormTextTypes.DESCRIPTION,
                                              className: v.formDescription,
                                              children:
                                                D.default.Messages
                                                  .DISCOVERY_LANDING_PAGE_COVER_IMAGE_DESCRIPTION,
                                            }),
                                            (0, a.jsxs)(r.Button, {
                                              size: r.Button.Sizes.SMALL,
                                              color: r.Button.Colors.PRIMARY,
                                              hover: r.Button.Colors.PRIMARY,
                                              children: [
                                                D.default.Messages
                                                  .UPLOAD_BACKGROUND,
                                                (0, a.jsx)(T.default, {
                                                  disabled: !U,
                                                  onChange: Q,
                                                }),
                                              ],
                                            }),
                                          ],
                                        }),
                                        (0, a.jsx)(f.default, {
                                          image: s.discoverySplash,
                                          makeURL: e =>
                                            C.default.getGuildDiscoverySplashURL(
                                              {
                                                id: s.id,
                                                splash: e,
                                                size:
                                                  512 *
                                                  (0, I.getDevicePixelRatio)(),
                                              }
                                            ),
                                          disabled: !U,
                                          onChange: Q,
                                          hint: D.default.Messages
                                            .CHANGE_SPLASH,
                                          imageClassName:
                                            v.imageUploaderInnerSquare,
                                          hideSize: !0,
                                        }),
                                      ],
                                    }),
                                    (null == Z ? void 0 : Z.discovery_splash) !=
                                    null
                                      ? (0, a.jsx)(r.Text, {
                                          color: "text-danger",
                                          variant: "text-sm/normal",
                                          children: Z.discovery_splash,
                                        })
                                      : null,
                                  ],
                                });
                            })(),
                            (0, a.jsx)(r.FormDivider, { className: v.divider }),
                            (0, a.jsxs)(r.FormSection, {
                              children: [
                                (0, a.jsx)(r.FormTitle, {
                                  className: v.formTitle,
                                  children:
                                    D.default.Messages
                                      .FORM_LABEL_SERVER_DESCRIPTION,
                                }),
                                (0, a.jsx)(r.FormText, {
                                  className: v.description,
                                  type: r.FormTextTypes.DESCRIPTION,
                                  children:
                                    D.default.Messages
                                      .DISCOVERY_LANDING_PAGE_SERVER_DESCRIPTION,
                                }),
                                (0, a.jsx)(r.TextArea, {
                                  value:
                                    null !== s.description ? s.description : "",
                                  placeholder:
                                    D.default.Messages
                                      .DISCOVERY_LANDING_PAGE_SERVER_DESCRIPTION_HINT,
                                  onChange: q,
                                  maxLength: 120,
                                  disabled: !U,
                                }),
                              ],
                            }),
                            (0, a.jsx)(r.FormDivider, { className: v.divider }),
                            (() => {
                              if (null == b) return null;
                              let e =
                                0 === b.reasonsToJoin.length
                                  ? [, , , ,].fill({
                                      reason: "",
                                      emoji_name: null,
                                    })
                                  : b.reasonsToJoin;
                              return (0, a.jsxs)(r.FormSection, {
                                children: [
                                  (0, a.jsx)(r.FormTitle, {
                                    className: v.formTitle,
                                    children:
                                      D.default.Messages
                                        .DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_TITLE,
                                  }),
                                  (0, a.jsx)(r.FormText, {
                                    type: r.FormTextTypes.DESCRIPTION,
                                    className: v.description,
                                    children:
                                      D.default.Messages
                                        .DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_DESCRIPTION,
                                  }),
                                  (0, a.jsx)("div", {
                                    className: v.reasonToJoin,
                                    children: (0, a.jsx)(p.default, {
                                      reasonMinLength: 10,
                                      reasonMaxLength: 128,
                                      guildId: s.id,
                                      reasons: e,
                                    }),
                                  }),
                                  (null == Z ? void 0 : Z.reasons_to_join) !=
                                  null
                                    ? (0, a.jsx)(r.Text, {
                                        color: "text-danger",
                                        variant: "text-sm/normal",
                                        children: Z.reasons_to_join,
                                      })
                                    : null,
                                ],
                              });
                            })(),
                            (0, a.jsx)(r.FormDivider, { className: v.divider }),
                            (0, a.jsxs)(a.Fragment, {
                              children: [
                                (0, a.jsxs)(r.FormSection, {
                                  children: [
                                    (0, a.jsx)(r.FormTitle, {
                                      className: v.formTitle,
                                      children:
                                        D.default.Messages
                                          .DISCOVERY_LANDING_PAGE_ABOUT_TITLE,
                                    }),
                                    (0, a.jsx)(r.FormText, {
                                      className: v.description,
                                      type: r.FormTextTypes.DESCRIPTION,
                                      children:
                                        D.default.Messages
                                          .DISCOVERY_LANDING_PAGE_ABOUT_DESCRIPTION,
                                    }),
                                    (0, a.jsx)(
                                      r.TextArea,
                                      {
                                        showCharacterCount: !0,
                                        className: v.textArea,
                                        value: b.about,
                                        placeholder:
                                          D.default.Messages
                                            .DISCOVERY_LANDING_PAGE_ABOUT_HINT,
                                        onChange: $,
                                        minLength: 300,
                                        maxLength: 2400,
                                        disabled: !U,
                                        defaultDirty:
                                          (null === (e = b.about) ||
                                          void 0 === e
                                            ? void 0
                                            : e.length) > 0,
                                      },
                                      "text-area-".concat(P)
                                    ),
                                  ],
                                }),
                                (null == Z ? void 0 : Z.about) != null
                                  ? (0, a.jsx)(r.Text, {
                                      color: "text-danger",
                                      variant: "text-sm/normal",
                                      children: Z.about,
                                    })
                                  : null,
                              ],
                            }),
                            (0, a.jsx)(r.FormDivider, { className: v.divider }),
                            (0, a.jsx)(a.Fragment, {
                              children: (0, a.jsxs)(r.FormSection, {
                                children: [
                                  (0, a.jsx)(r.FormTitle, {
                                    className: v.formTitle,
                                    children:
                                      D.default.Messages
                                        .DISCOVERY_LANDING_PAGE_SOCIAL_LINKS_TITLE,
                                  }),
                                  (0, a.jsx)(r.FormText, {
                                    className: v.description,
                                    type: r.FormTextTypes.DESCRIPTION,
                                    children:
                                      D.default.Messages
                                        .DISCOVERY_LANDING_PAGE_SOCIAL_LINKS_DESCRIPTION,
                                  }),
                                  b.socialLinks.map((e, t) =>
                                    (0, a.jsxs)(
                                      "div",
                                      {
                                        className: v.socialLinksContainer,
                                        onMouseOver: () => ed(t, !0),
                                        onFocus: () => ed(t, !0),
                                        onMouseOut: () => ed(t, !1),
                                        onBlur: () => ed(t, !1),
                                        children: [
                                          (0, a.jsx)(
                                            r.SingleSelect,
                                            {
                                              className: b.isPublished
                                                ? v.socialLinksDropdownMax
                                                : v.socialLinksDropdownMin,
                                              options: z(Y[t]),
                                              placeholder:
                                                D.default.Messages
                                                  .DISCOVERY_LANDING_PAGE_SOCIAL_LINKS_DROPDOWN_PLACEHOLDER,
                                              value: Y[t],
                                              onChange: e => es(e, t),
                                              isDisabled: !U,
                                            },
                                            "dropdown-" + t
                                          ),
                                          (0, a.jsx)(
                                            r.TextInput,
                                            {
                                              value: e,
                                              className: b.isPublished
                                                ? v.socialLinksMax
                                                : v.socialLinksMin,
                                              onChange: e => ea(e, t),
                                              placeholder:
                                                D.default.Messages
                                                  .DISCOVERY_LANDING_PAGE_SOCIAL_LINKS_HINT,
                                              maxLength: 150,
                                              disabled: !U,
                                            },
                                            "link-" + t
                                          ),
                                          y[t]
                                            ? (0, a.jsx)(
                                                g.default,
                                                {
                                                  className: b.isPublished
                                                    ? v.validationButtonMax
                                                    : v.validationButtonMin,
                                                  color:
                                                    i.default.unsafe_rawColors
                                                      .GREEN_230.css,
                                                  width: 20,
                                                  height: 20,
                                                },
                                                "validation-passed-" + t
                                              )
                                            : (0, a.jsx)(
                                                h.default,
                                                {
                                                  className: b.isPublished
                                                    ? v.validationButtonMax
                                                    : v.validationButtonMin,
                                                  color:
                                                    i.default.unsafe_rawColors
                                                      .RED_400.css,
                                                  width: 20,
                                                  height: 20,
                                                },
                                                "validation-failed-" + t
                                              ),
                                          U &&
                                            (0, a.jsx)(
                                              o.default,
                                              {
                                                className: w[t]
                                                  ? b.isPublished
                                                    ? v.deleteButtonMax
                                                    : v.deleteButtonMin
                                                  : b.isPublished
                                                    ? v.deleteButtonHiddenMax
                                                    : v.deleteButtonHiddenMin,
                                                onClick: () => el(t),
                                              },
                                              "delete-button-" + t
                                            ),
                                        ],
                                      },
                                      "social-container-" + t
                                    )
                                  ),
                                  (null == Z ? void 0 : Z.social_links) != null
                                    ? (0, a.jsx)(r.Text, {
                                        color: "text-danger",
                                        variant: "text-sm/normal",
                                        children: Z.social_links,
                                      })
                                    : null,
                                  (0, a.jsx)(r.Button, {
                                    size: r.Button.Sizes.SMALL,
                                    color: r.Button.Colors.PRIMARY,
                                    hover: r.Button.Colors.PRIMARY,
                                    onClick: et,
                                    disabled: !U || b.socialLinks.length >= 9,
                                    children:
                                      D.default.Messages
                                        .DISCOVERY_LANDING_PAGE_SOCIAL_LINKS_BUTTON_ADD_ANOTHER,
                                  }),
                                ],
                              }),
                            }),
                            b.isPublished &&
                              (0, a.jsxs)(a.Fragment, {
                                children: [
                                  (0, a.jsx)(r.FormDivider, {
                                    className: v.divider,
                                  }),
                                  (0, a.jsxs)(r.FormSection, {
                                    children: [
                                      (0, a.jsx)(r.FormTitle, {
                                        className: v.formTitle,
                                        children:
                                          D.default.Messages
                                            .DISCOVERY_LANDING_PAGE_DISABLE_TITLE,
                                      }),
                                      (0, a.jsx)(r.FormText, {
                                        className: v.description,
                                        type: r.FormTextTypes.DESCRIPTION,
                                        children:
                                          D.default.Messages
                                            .DISCOVERY_LANDING_PAGE_DISABLE_DESCRIPTION,
                                      }),
                                      (0, a.jsx)(r.Button, {
                                        size: r.Button.Sizes.SMALL,
                                        color: r.Button.Colors.RED,
                                        hover: r.Button.Colors.RED,
                                        onClick: () => ee(!1),
                                        disabled: !U,
                                        children:
                                          D.default.Messages
                                            .DISCOVERY_LANDING_PAGE_DISABLE_BUTTON,
                                      }),
                                    ],
                                  }),
                                ],
                              }),
                            (null == Z ? void 0 : Z.is_published) != null
                              ? (0, a.jsx)(r.Text, {
                                  color: "text-danger",
                                  variant: "text-sm/normal",
                                  children: Z.is_published,
                                })
                              : null,
                          ],
                        }),
                        !b.isPublished &&
                          (0, a.jsx)("div", {
                            className: v.checklist,
                            children: (0, a.jsx)(m.default, {
                              title:
                                D.default.Messages
                                  .DISCOVERY_LANDING_PAGE_CHECKLIST_TITLE,
                              children: er,
                              buttonLabel:
                                D.default.Messages
                                  .DISCOVERY_LANDING_PAGE_CHECKLIST_PUBLISH,
                              buttonCallback: () => ee(!0),
                              disabled: !U || !H,
                            }),
                          }),
                      ],
                    }),
                  }),
                }),
              }),
            }),
          });
        };
      var P = () => {
        let e = (0, n.useStateFromStores)([L.default], () =>
          L.default.getGuild()
        );
        return null == e ? null : (0, a.jsx)(U, {});
      };
    },
    527042: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          EmojiTableTitle: function () {
            return Y;
          },
          EmojiTable: function () {
            return W;
          },
          default: function () {
            return K;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("627445"),
        o = s.n(r),
        d = s("917351"),
        u = s.n(d),
        c = s("748820"),
        E = s("446674"),
        _ = s("77078"),
        I = s("404118"),
        T = s("150021"),
        f = s("133403"),
        S = s("349389"),
        m = s("84339"),
        N = s("250666"),
        g = s("341595"),
        h = s("345988"),
        C = s("153043"),
        R = s("426733"),
        x = s("817963"),
        L = s("161778"),
        O = s("941886"),
        p = s("987772"),
        A = s("599110"),
        M = s("315102"),
        D = s("402671"),
        v = s("427459"),
        G = s("592407"),
        j = s("466227"),
        U = s("900938"),
        P = s("49111"),
        b = s("958706"),
        B = s("782340"),
        y = s("114701"),
        F = s("685691");
      let H = u.throttle(T.fetchEmoji, 1e3),
        k = e => {
          let { currentTarget: t, which: s } = e;
          13 === s && t.blur();
        },
        w = e => {
          let { guildId: t, emoji: s, onEdit: n, editingDisabled: r = !1 } = e,
            [o, d] = l.useState(s.name),
            u = M.default.getEmojiURL({
              id: s.id,
              animated: s.animated,
              size: 32,
            });
          return (0, a.jsxs)("div", {
            className: i(y.emojiRow, F.card),
            children: [
              (0, a.jsx)("div", {
                className: y.emojiColumn,
                children: (0, a.jsx)(_.Tooltip, {
                  text: s.available
                    ? null
                    : B.default.Messages.EMOJI_DISABLED_PREMIUM_TIER_LOST,
                  children: e =>
                    (0, a.jsx)("div", {
                      ...e,
                      className: i(y.emojiImage, {
                        [y.emojiDisabled]: !s.available,
                      }),
                      style: { backgroundImage: "url(".concat(u, ")") },
                    }),
                }),
              }),
              (0, a.jsxs)("div", {
                className: y.column,
                children: [
                  (0, a.jsx)(_.TextInput, {
                    className: i(y.emojiAliasInput, {
                      [y.emojiAliasInputDisabled]: r,
                    }),
                    inputClassName: y.emojiInput,
                    placeholder:
                      B.default.Messages.GUILD_SETTINGS_EMOJI_ALIAS_PLACEHOLDER,
                    onKeyPress: k,
                    onChange: d,
                    onBlur: () => {
                      o !== s.name &&
                        (0, T.updateEmoji)({
                          guildId: t,
                          emojiId: s.id,
                          name: D.default.sanitizeEmojiName(o),
                        });
                    },
                    size: _.TextInput.Sizes.MINI,
                    value: o,
                    maxLength: b.EMOJI_MAX_LENGTH,
                    disabled: r,
                  }),
                  (0, a.jsx)("div", {
                    className: y.emojiAliasPlaceholder,
                    children: (0, a.jsx)("div", {
                      className: y.emojiAliasPlaceholderContent,
                      children:
                        o.length > 0
                          ? o
                          : B.default.Messages
                              .GUILD_SETTINGS_EMOJI_ALIAS_PLACEHOLDER,
                    }),
                  }),
                ],
              }),
              (0, a.jsxs)("div", {
                className: y.column,
                children: [
                  (0, a.jsx)(_.Avatar, {
                    src: s.user.getAvatarURL(t, 24),
                    "aria-label": s.user.username,
                    size: _.AvatarSizes.SIZE_24,
                    className: y.avatar,
                  }),
                  (0, a.jsx)(_.FormText, {
                    className: i(y.emojiRowText),
                    children: s.user.username,
                  }),
                ],
              }),
              null != n &&
                !r &&
                (0, a.jsx)(_.Clickable, {
                  "aria-label": B.default.Messages.EDIT,
                  className: y.editEmojiRolesButton,
                  onClick: () => n(s, t),
                  children: (0, a.jsx)(p.default, {
                    width: 24,
                    height: 24,
                    className: y.editEmojiRolesIcon,
                  }),
                }),
              !r &&
                (0, a.jsx)(f.default, {
                  className: y.emojiRemove,
                  onClick: () => {
                    (0, T.deleteEmoji)(t, s.id).catch(e => {
                      let { status: t } = e;
                      429 === t &&
                        I.default.show({
                          title: B.default.Messages.GENERIC_ERROR_TITLE,
                          body: B.default.Messages.RATE_LIMITED,
                        });
                    });
                  },
                }),
            ],
          });
        },
        V = e => {
          let {
            isLoading: t,
            staticEmojis: l,
            animatedEmojis: n,
            theme: i,
            guild: r,
          } = e;
          return t
            ? (0, a.jsx)(_.Spinner, {
                className: y.spinner,
                type: _.Spinner.Type.SPINNING_CIRCLE,
              })
            : 0 === l.length && 0 === n.length
              ? (0, a.jsxs)(O.default, {
                  theme: i,
                  className: y.empty,
                  children: [
                    (0, a.jsx)(O.EmptyStateImage, {
                      darkSrc: s("404807"),
                      lightSrc: s("124495"),
                      width: 272,
                      height: 212,
                    }),
                    (0, a.jsx)(O.EmptyStateText, {
                      note: B.default.Messages.NO_EMOJI,
                      children: B.default.Messages.NO_EMOJI_TITLE,
                    }),
                  ],
                })
              : (0, a.jsxs)("div", {
                  children: [
                    (0, a.jsx)(Y, {
                      title: B.default.Messages.EMOJI,
                      maxSlots: r.getMaxEmojiSlots(),
                      emojiCount: l.length,
                    }),
                    (0, a.jsx)(W, { emojis: l, guild: r }),
                    (0, a.jsx)(Y, {
                      title: B.default.Messages.ANIMATED_EMOJI,
                      maxSlots: r.getMaxEmojiSlots(),
                      emojiCount: n.length,
                    }),
                    (0, a.jsx)(W, { emojis: n, guild: r }),
                  ],
                });
        },
        Y = e => {
          let { title: t, maxSlots: s, emojiCount: l } = e;
          return (0, a.jsxs)(_.FormTitle, {
            tag: _.FormTitleTags.H2,
            className: y.title,
            children: [
              t,
              (0, a.jsxs)("span", {
                children: [
                  " — ",
                  B.default.Messages.EMOJI_SLOTS_AVAILABLE.format({
                    count: s - l,
                  }),
                ],
              }),
            ],
          });
        },
        W = e => {
          let { emojis: t, guild: s, onEdit: n, editingDisabled: i = !1 } = e,
            r = l.useMemo(() => [...t].reverse(), [t]),
            { canManageGuildExpression: o } = (0,
            x.getManageResourcePermissions)(s);
          return 0 === t.length
            ? (0, a.jsx)(_.FormText, {
                type: _.FormTextTypes.DESCRIPTION,
                className: y.content,
                children: B.default.Messages.NO_EMOJI_BODY,
              })
            : (0, a.jsxs)(_.FormSection, {
                className: y.content,
                children: [
                  (0, a.jsxs)("div", {
                    className: y.emojiTable,
                    children: [
                      (0, a.jsx)(_.FormText, {
                        type: _.FormTextTypes.DESCRIPTION,
                        className: y.emojiColumn,
                        children: B.default.Messages.GUILD_SETTINGS_EMOJI_IMAGE,
                      }),
                      (0, a.jsx)(_.FormText, {
                        type: _.FormTextTypes.DESCRIPTION,
                        className: y.columnLabel,
                        children: B.default.Messages.GUILD_SETTINGS_EMOJI_NAME,
                      }),
                      (0, a.jsx)(_.FormText, {
                        type: _.FormTextTypes.DESCRIPTION,
                        className: y.columnLabel,
                        children: B.default.Messages.UPLOADED_BY,
                      }),
                    ],
                  }),
                  r.map(e =>
                    (0, a.jsx)(
                      w,
                      {
                        guildId: s.id,
                        emoji: e,
                        onEdit: n,
                        editingDisabled: i || !o(e),
                      },
                      e.id
                    )
                  ),
                ],
              });
        },
        z = e => {
          let t,
            s,
            l,
            { staticEmojiCount: n, animatedEmojiCount: i, guild: r } = e,
            o = r.getMaxEmojiSlots(),
            d = Math.min(o - n, o - i),
            u = r.premiumTier,
            c = (0, v.getNextTier)(u, r.id);
          return null == c || u === P.BoostedGuildTiers.TIER_3 || d > 0
            ? null
            : (d > o
                ? ((t =
                    B.default.Messages.GUILD_SETTINGS_EMOJIS_UPSELL_BANNER_TOO_MANY_EMOJIS_HEADER.format(
                      { level: c }
                    )),
                  (s =
                    B.default.Messages.GUILD_SETTINGS_EMOJIS_UPSELL_BANNER_TOO_MANY_EMOJIS_TEXT.format(
                      { level: c }
                    )),
                  (l = P.AnalyticsObjects.BOOST_UPSELL_BANNER_LOST_LEVEL))
                : ((t =
                    B.default.Messages
                      .PREMIUM_GUILD_SUBSCRIPTION_UPSELL_BANNER_HEADER),
                  (s =
                    B.default.Messages.GUILD_SETTINGS_EMOJIS_UPSELL_BANNER_TEXT.format(
                      { level: c }
                    )),
                  (l = P.AnalyticsObjects.BOOST_UPSELL_BANNER_SLOTS_FULL)),
              (0, a.jsx)(h.default, {
                header: t,
                text: s,
                guild: r,
                analyticsLocation: {
                  page: P.AnalyticsPages.GUILD_SETTINGS,
                  section: P.AnalyticsSections.GUILD_SETTINGS_STICKERS,
                  object: l,
                  objectType: (0, v.boostedGuildTierToAnalyticsObjectType)(c),
                },
              }));
        };
      var K = () => {
        let e = (0, E.useStateFromStores)([U.default], () =>
            U.default.getGuild()
          ),
          [t, n] = l.useState("");
        o(
          null != e,
          "ConnectedGuildSettingsEmoji must be rendered within a guild context"
        );
        let i = (0, E.useStateFromStores)([L.default], () => L.default.theme),
          { canCreateExpressions: r } = (0, x.useManageResourcePermissions)(e),
          { revision: d, emojis: I } = (0, E.useStateFromStoresObject)(
            [j.default],
            () => ({
              revision: j.default.getEmojiRevision(e.id),
              emojis: j.default.getEmojis(e.id),
            })
          ),
          T = (0, m.default)(d),
          [f, h] = l.useState(!1),
          [O, p] = l.useState(!1),
          M = l.useRef(null);
        l.useEffect(() => {
          f && W();
        }, [f]),
          l.useEffect(() => {
            H(e.id);
          }, [e.id]),
          l.useEffect(() => {
            null != T && T < d && H(e.id);
          }, [d, T, e.id]);
        let [D, v] = l.useMemo(() => {
            let t =
                null == I
                  ? void 0
                  : I.filter(t => !(0, C.isRoleSubscriptionEmoji)(t, e.id)),
              [s, a] = u.partition(t, e => !e.animated);
            return [s, a];
          }, [I, e.id]),
          F = e.getMaxEmojiSlots(),
          k = Math.max(F - D.length, F - v.length),
          w = (s, a, l) =>
            (0, g.uploadEmojiFile)({
              data: s,
              file: a,
              image: l,
              guildId: e.id,
              uploadId: t,
              hideErrorModal: !0,
            }),
          Y = async s => {
            let a = (0, c.v4)();
            n(a),
              A.default.track(P.AnalyticEvents.EMOJI_UPLOAD_STARTED, {
                guild_id: e.id,
                upload_id: t,
              }),
              await (0, R.processImages)(s, w),
              h(!0);
          },
          W = () => {
            null !== M.current &&
              ((0, _.closeModal)(M.current), (M.current = null));
          },
          K = async e => {
            M.current = await (0, _.openModalLazy)(async () => {
              let { default: t } = await s.el("7476").then(s.bind(s, "7476"));
              return s => (0, a.jsx)(t, { processFiles: () => Y(e), ...s });
            });
          },
          Z = (0, N.isCreatorMonetizationEnabledGuild)(e);
        return (0, a.jsxs)("div", {
          className: y.emojiSettings,
          children: [
            0 === k
              ? null
              : (0, a.jsx)(S.default, {
                  className: y.emojiUploadContainer,
                  onDrop: K,
                }),
            (0, a.jsxs)(_.FormSection, {
              tag: _.FormTitleTags.H1,
              title: B.default.Messages.EMOJI,
              children: [
                (0, a.jsx)(z, {
                  guild: e,
                  staticEmojiCount: D.length,
                  animatedEmojiCount: v.length,
                }),
                (0, a.jsxs)(_.FormSection, {
                  className: y.uploader,
                  children: [
                    (0, a.jsx)(_.FormText, {
                      type: _.FormTextTypes.DESCRIPTION,
                      children:
                        B.default.Messages.GUILD_SETTINGS_EMOJI_UPLOAD_TO_SERVER_DESCRIPTION.format(
                          { count: F }
                        ),
                    }),
                    Z &&
                      (0, a.jsx)(_.FormText, {
                        type: _.FormTextTypes.DESCRIPTION,
                        children:
                          B.default.Messages.GUILD_ROLE_SUBSCRIPTION_EMOJI_SETTINGS_MANAGE_PREMIUM_TEXT.format(
                            {
                              onClick: () =>
                                G.default.open(
                                  e.id,
                                  P.GuildSettingsSections.ROLE_SUBSCRIPTIONS,
                                  void 0,
                                  P.GuildSettingsSubsections
                                    .ROLE_SUBSCRIPTION_EMOJI
                                ),
                            }
                          ),
                      }),
                    (0, a.jsxs)("div", {
                      children: [
                        (0, a.jsx)(_.FormTitle, {
                          tag: _.FormTitleTags.H2,
                          className: y.emojiUploadUploadRequirementsHeading,
                          children:
                            B.default.Messages
                              .GUILD_SETTINGS_EMOJI_UPLOAD_HEADING,
                        }),
                        (0, a.jsxs)("ul", {
                          className: y.emojiUploadUploadRequirementsList,
                          children: [
                            (0, a.jsx)("li", {
                              children: (0, a.jsx)(_.FormText, {
                                type: _.FormTextTypes.DESCRIPTION,
                                children:
                                  B.default.Messages
                                    .GUILD_SETTINGS_EMOJI_UPLOAD_REQUIREMENTS_1,
                              }),
                            }),
                            (0, a.jsx)("li", {
                              children: (0, a.jsx)(_.FormText, {
                                type: _.FormTextTypes.DESCRIPTION,
                                children:
                                  B.default.Messages.GUILD_SETTINGS_EMOJI_UPLOAD_REQUIREMENTS_2.format(
                                    { maxSize: b.EMOJI_MAX_FILESIZE_KB }
                                  ),
                              }),
                            }),
                            (0, a.jsx)("li", {
                              children: (0, a.jsx)(_.FormText, {
                                type: _.FormTextTypes.DESCRIPTION,
                                children:
                                  B.default.Messages
                                    .GUILD_SETTINGS_EMOJI_UPLOAD_REQUIREMENTS_3,
                              }),
                            }),
                            (0, a.jsx)("li", {
                              children: (0, a.jsx)(_.FormText, {
                                type: _.FormTextTypes.DESCRIPTION,
                                children:
                                  B.default.Messages
                                    .GUILD_SETTINGS_EMOJI_UPLOAD_REQUIREMENTS_4,
                              }),
                            }),
                          ],
                        }),
                      ],
                    }),
                    (0, a.jsxs)(_.Button, {
                      tabIndex: -1,
                      size: _.Button.Sizes.MEDIUM,
                      onClick: () => {
                        let t = (0, c.v4)();
                        n(t),
                          A.default.track(
                            P.AnalyticEvents.EMOJI_UPLOAD_STARTED,
                            { guild_id: e.id, upload_id: t }
                          );
                      },
                      disabled: O || 0 === k || !r,
                      submitting: O,
                      focusProps: { within: !0 },
                      children: [
                        B.default.Messages.UPLOAD_EMOJI,
                        k > 0
                          ? (0, a.jsx)(R.default, {
                              disabled: O || 0 === k || !r,
                              tabIndex: 0,
                              onChange: w,
                              setLoading: p,
                              multiple: !0,
                            })
                          : null,
                      ],
                    }),
                  ],
                }),
                (0, a.jsx)(V, {
                  isLoading: null == I,
                  staticEmojis: D,
                  animatedEmojis: v,
                  guild: e,
                  theme: i,
                }),
              ],
            }),
          ],
        });
      };
    },
    977887: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return _;
          },
          GuildSettingsIntegrationsNotice: function () {
            return I;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("446674"),
        n = s("713841"),
        i = s("45299"),
        r = s("467733"),
        o = s("592407"),
        d = s("952943"),
        u = s("900938"),
        c = s("482391"),
        E = s("683830");
      function _(e) {
        let { refToScroller: t } = e,
          s = (0, l.useStateFromStores)([u.default], () =>
            u.default.getGuild()
          ),
          {
            section: n,
            sectionId: i,
            integrations: o,
            editedIntegration: c,
            webhooks: E,
            editedWebhook: _,
            isFetching: I,
            errors: T,
          } = (0, l.useStateFromStoresObject)([d.default], () => ({
            editedIntegration: d.default.editedIntegration,
            editedWebhook: d.default.editedWebhook,
            errors: d.default.getErrors(),
            integrations: d.default.integrations,
            isFetching: d.default.isFetching(),
            section: d.default.getSection(),
            sectionId: d.default.getSectionId(),
            webhooks: d.default.webhooks,
          }));
        return null == s
          ? null
          : (0, a.jsx)(r.default, {
              guild: s,
              section: n,
              sectionId: i,
              integrations: o,
              webhooks: E,
              editedIntegration: c,
              editedWebhook: _,
              isFetching: I,
              hasChanges: d.default.hasChanges,
              errors: T,
              refToScroller: t,
            });
      }
      function I() {
        let { guild: e, submitting: t } = (0, l.useStateFromStoresObject)(
          [u.default],
          () => ({
            guild: u.default.getGuild(),
            submitting: u.default.isSubmitting(),
          })
        );
        return (0, a.jsx)(i.default, {
          submitting: t,
          onReset: () => {
            n.default.init(),
              c.resetPermissions(),
              null != e && o.default.init(e.id);
          },
          onSave: () => {
            if (null != e) {
              if (null != d.default.editedIntegration)
                n.default.saveIntegration(e.id, d.default.editedIntegration);
              else if (null != d.default.editedWebhook)
                n.default.saveWebhook(e.id, d.default.editedWebhook);
              else if (null != d.default.editedCommandId) {
                let t = d.default.getSectionId(),
                  s = E.default.getEditedApplication();
                if (null == t || null == s) return;
                n.default.saveApplicationPermissions(t, e.id, Object.values(s));
              }
              u.default.hasChanges() &&
                o.default.saveGuild(e.id, { features: e.features });
            }
          },
        });
      }
    },
    912477: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return o;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("446674"),
        n = s("102985"),
        i = s("900938"),
        r = s("758085");
      function o() {
        let e = (0, l.useStateFromStores)(
            [n.default],
            () => n.default.hideInstantInvites
          ),
          { invites: t, guild: s } = (0, l.useStateFromStoresObject)(
            [i.default],
            () => i.default.getProps(),
            []
          );
        return (0, a.jsx)(r.default, {
          invites: t,
          guild: s,
          showChannel: !0,
          hide: e,
        });
      }
    },
    969741: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          GuildSettingsMembersRow: function () {
            return f;
          },
          default: function () {
            return S;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("917351"),
        n = s("446674"),
        i = s("77078"),
        r = s("466818"),
        o = s("645266"),
        d = s("284234"),
        u = s("758710"),
        c = s("592407"),
        E = s("900938"),
        _ = s("49111"),
        I = s("782340"),
        T = s("682775");
      function f() {
        var e;
        let t = (0, n.useStateFromStores)(
            [E.default],
            () => E.default.getProps().guild,
            []
          ),
          s =
            null !== (e = null == t ? void 0 : t.isCommunity()) &&
            void 0 !== e &&
            e;
        return (0, a.jsxs)(i.Clickable, {
          onClick: e => {
            null != t &&
              (s
                ? (e.preventDefault(),
                  c.default.close(),
                  (0, o.goToMemberSafetyDashboard)(t.id))
                : c.default.open(t.id, _.GuildSettingsSections.MEMBERS));
          },
          className: T.rowContainer,
          children: [
            (0, a.jsx)("div", { children: I.default.Messages.MEMBERS }),
            s &&
              (0, a.jsx)(u.default, {
                className: T.linkIcon,
                width: 16,
                height: 16,
              }),
          ],
        });
      }
      function S() {
        var e;
        let { guild: t } = (0, n.useStateFromStores)(
            [E.default],
            () => E.default.getProps(),
            [],
            l.isEqual
          ),
          s =
            null !== (e = null == t ? void 0 : t.id) && void 0 !== e
              ? e
              : _.EMPTY_STRING_SNOWFLAKE_ID,
          i = (0, r.useCanAccessMemberSafetyPage)(s);
        return i ? (0, a.jsx)(d.default, { guildId: s }) : null;
      }
    },
    849823: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return M;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("446674"),
        o = s("151426"),
        d = s("77078"),
        u = s("10641"),
        c = s("233706"),
        E = s("137215"),
        _ = s("900938"),
        I = s("851490"),
        T = s("131835"),
        f = s("330724"),
        S = s("136278"),
        m = s("397947"),
        N = s("259483"),
        g = s("867928"),
        h = s("706866"),
        C = s("764151"),
        R = s("887313"),
        x = s("832931"),
        L = s("584027"),
        O = s("614840"),
        p = s("782340"),
        A = s("163182");
      function M() {
        let e = (0, r.useStateFromStores)([_.default], () =>
          _.default.getGuildId()
        );
        return null == e ? null : (0, a.jsx)(D, { guildId: e });
      }
      function D(e) {
        let t,
          { guildId: s } = e,
          n = (0, r.useStateFromStores)([m.default], () =>
            m.default.getCurrentPage()
          ),
          _ = (0, r.useStateFromStores)([m.default], () => {
            let e = (0, N.pageToEducationUpsellType)(n);
            return null != e && !m.default.isEducationUpsellDismissed(e);
          }),
          S = (0, g.default)(s),
          M = !S && _,
          { homeSettingsEnabled: D } = (0, c.useOnboardingHomeAdminExperiment)(
            s
          );
        switch (
          (l.useEffect(() => {
            (0, u.markDismissibleContentAsDismissed)(
              o.DismissibleContent.COMMUNITY_ONBOARDING_NEW_BADGE
            );
          }, []),
          n)
        ) {
          case N.GuildSettingsOnboardingPage.LANDING:
            t = S
              ? (0, a.jsx)(R.default, { completed: !0, guildId: s })
              : (0, a.jsx)(L.default, {});
            break;
          case N.GuildSettingsOnboardingPage.SAFETY_CHECK:
            t = (0, a.jsx)(O.default, { hideChangelog: !0 });
            break;
          case N.GuildSettingsOnboardingPage.DEFAULT_CHANNELS:
            t = (0, a.jsx)(h.default, { saveOnClose: !S });
            break;
          case N.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS:
            t = (0, a.jsx)(x.default, { saveOnClose: !S });
            break;
          case N.GuildSettingsOnboardingPage.HOME_SETTINGS:
            t = (0, a.jsx)(C.default, { saveOnClose: !S });
            break;
          case N.GuildSettingsOnboardingPage.REVIEW:
            t = (0, a.jsx)(R.default, { completed: S, guildId: s });
        }
        return (0, a.jsxs)("div", {
          className: i(A.onboardingContainer, { [A.upsellOnTop]: M }),
          children: [
            !S &&
              n !== N.GuildSettingsOnboardingPage.LANDING &&
              (0, a.jsx)(v, {
                setOnboardingStep: T.setOnboardingStep,
                page: n,
                homeSettingsEnabled: D,
              }),
            S &&
              n !== N.GuildSettingsOnboardingPage.LANDING &&
              (0, a.jsx)("div", {
                children: (0, a.jsxs)(d.Button, {
                  innerClassName: A.backButton,
                  look: d.Button.Looks.BLANK,
                  size: d.Button.Sizes.MIN,
                  onClick: () => {
                    (0, f.resetGuildOnboardingPrompts)(),
                      (0, I.resetDefaultChannels)(),
                      (0, T.setOnboardingStep)(
                        N.GuildSettingsOnboardingPage.LANDING
                      );
                  },
                  children: [
                    (0, a.jsx)(E.default, {
                      className: A.arrow,
                      direction: E.default.Directions.LEFT,
                    }),
                    (0, a.jsx)(d.Text, {
                      variant: "text-sm/semibold",
                      color: "interactive-normal",
                      children: p.default.Messages.BACK,
                    }),
                  ],
                }),
              }),
            (0, a.jsx)("div", { children: t }),
          ],
        });
      }
      function v(e) {
        let { page: t, setOnboardingStep: s, homeSettingsEnabled: l } = e,
          n = (0, r.useStateFromStores)([m.default], () =>
            m.default.hasErrors()
          ),
          o = e => {
            if (!n) return () => s(e);
          },
          u = (0, r.useStateFromStores)(
            [S.default],
            () => S.default.advancedMode
          );
        return (0, a.jsxs)("div", {
          className: A.progressContainer,
          children: [
            (0, a.jsxs)(d.Clickable, {
              className: i(A.progressBarContainer, A.clickableProgressBar),
              onClick: o(N.GuildSettingsOnboardingPage.SAFETY_CHECK),
              children: [
                (0, a.jsx)("div", {
                  className: i(A.progressBar, {
                    [A.progressBarCurrent]:
                      t === N.GuildSettingsOnboardingPage.SAFETY_CHECK,
                  }),
                }),
                (0, a.jsx)(d.Text, {
                  color:
                    t === N.GuildSettingsOnboardingPage.SAFETY_CHECK
                      ? "text-brand"
                      : "text-muted",
                  variant: "text-xs/medium",
                  children:
                    p.default.Messages.GUILD_ONBOARDING_SETUP_STEP_SAFETY.format(
                      { stepNumber: 1 }
                    ),
                }),
              ],
            }),
            (0, a.jsxs)(d.Clickable, {
              className: i(A.progressBarContainer, A.clickableProgressBar),
              onClick: o(N.GuildSettingsOnboardingPage.DEFAULT_CHANNELS),
              children: [
                (0, a.jsx)("div", {
                  className: i(A.progressBar, {
                    [A.progressBarCurrent]:
                      t === N.GuildSettingsOnboardingPage.DEFAULT_CHANNELS,
                  }),
                }),
                (0, a.jsx)(d.Text, {
                  color:
                    t === N.GuildSettingsOnboardingPage.DEFAULT_CHANNELS
                      ? "text-brand"
                      : "text-muted",
                  variant: "text-xs/medium",
                  children: u
                    ? p.default.Messages.GUILD_ONBOARDING_SETUP_STEP_CHANNELS_ADVANCED.format(
                        { stepNumber: 2 }
                      )
                    : p.default.Messages.GUILD_ONBOARDING_SETUP_STEP_CHANNELS.format(
                        { stepNumber: 2 }
                      ),
                }),
              ],
            }),
            (0, a.jsxs)(d.Clickable, {
              className: i(A.progressBarContainer, A.clickableProgressBar),
              onClick: o(N.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS),
              children: [
                (0, a.jsx)("div", {
                  className: i(A.progressBar, {
                    [A.progressBarCurrent]:
                      t ===
                      N.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS,
                  }),
                }),
                (0, a.jsx)(d.Text, {
                  color:
                    t === N.GuildSettingsOnboardingPage.CUSTOMIZATION_QUESTIONS
                      ? "text-brand"
                      : "text-muted",
                  variant: "text-xs/medium",
                  children: u
                    ? p.default.Messages.GUILD_ONBOARDING_SETUP_STEP_PROMPTS_ADVANCED.format(
                        { stepNumber: 3 }
                      )
                    : p.default.Messages.GUILD_ONBOARDING_SETUP_STEP_PROMPTS.format(
                        { stepNumber: 3 }
                      ),
                }),
              ],
            }),
            l &&
              (0, a.jsxs)(d.Clickable, {
                className: i(A.progressBarContainer, A.clickableProgressBar),
                onClick: o(N.GuildSettingsOnboardingPage.HOME_SETTINGS),
                children: [
                  (0, a.jsx)("div", {
                    className: i(A.progressBar, {
                      [A.progressBarCurrent]:
                        t === N.GuildSettingsOnboardingPage.HOME_SETTINGS,
                    }),
                  }),
                  (0, a.jsx)(d.Text, {
                    color:
                      t === N.GuildSettingsOnboardingPage.HOME_SETTINGS
                        ? "text-brand"
                        : "text-muted",
                    variant: "text-xs/medium",
                    children:
                      p.default.Messages.GUILD_ONBOARDING_SETUP_STEP_HOME.format(
                        { stepNumber: 4 }
                      ),
                  }),
                ],
              }),
            (0, a.jsxs)("div", {
              className: A.progressBarContainer,
              children: [
                (0, a.jsx)("div", {
                  className: i(A.progressBar, {
                    [A.progressBarCurrent]:
                      t === N.GuildSettingsOnboardingPage.REVIEW,
                  }),
                }),
                (0, a.jsx)(d.Text, {
                  color:
                    t === N.GuildSettingsOnboardingPage.REVIEW
                      ? "text-brand"
                      : "text-muted",
                  variant: "text-xs/medium",
                  children:
                    p.default.Messages.GUILD_ONBOARDING_SETUP_STEP_REVIEW.format(
                      { stepNumber: 3 + (l ? 1 : 0) + 1 }
                    ),
                }),
              ],
            }),
          ],
        });
      }
    },
    788831: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          GuildSettingsOverviewNotice: function () {
            return eg;
          },
          default: function () {
            return eC;
          },
        }),
        s("222007"),
        s("843762");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("627445"),
        o = s.n(r),
        d = s("917351"),
        u = s.n(d),
        c = s("446674"),
        E = s("669491"),
        _ = s("819855"),
        I = s("77078"),
        T = s("45299"),
        f = s("734575"),
        S = s("841098"),
        m = s("812204"),
        N = s("716241"),
        g = s("685665"),
        h = s("320954"),
        C = s("679653"),
        R = s("419830"),
        x = s("578899"),
        L = s("298878"),
        O = s("634544"),
        p = s("836275"),
        A = s("379532"),
        M = s("677315"),
        D = s("146005"),
        v = s("843257"),
        G = s("139321"),
        j = s("597517"),
        U = s("424960"),
        P = s("656913"),
        b = s("694187"),
        B = s("608684"),
        y = s("42203"),
        F = s("245997"),
        H = s("525065"),
        k = s("957255"),
        w = s("27618"),
        V = s("697218"),
        Y = s("145131"),
        W = s("181114"),
        z = s("612434"),
        K = s("118503"),
        Z = s("956089"),
        X = s("315102"),
        Q = s("568734"),
        J = s("449008"),
        q = s("701909"),
        $ = s("592407"),
        ee = s("900938"),
        et = s("53948"),
        es = s("49111"),
        ea = s("944305"),
        el = s("75015"),
        en = s("453252"),
        ei = s("782340"),
        er = s("874947"),
        eo = s("79189"),
        ed = s("282725");
      let eu = "NO_AFK_CHANNEL",
        ec = "NO_SYSTEM_CHANNEL",
        eE = "".concat(60),
        e_ = "".concat(300),
        eI = "".concat(900),
        eT = "".concat(1800),
        ef = "".concat(3600);
      function eS(e) {
        return em(e[0]);
      }
      function em(e) {
        if (null == e) return;
        let { label: t, channel: s, category: l } = e,
          n = (0, R.getChannelIconComponent)(s),
          i =
            null != l
              ? (0, C.computeChannelName)(l, V.default, w.default)
              : null;
        return (0, a.jsx)(z.default, { title: t, icon: n, subtitle: i });
      }
      function eN(e) {
        return {
          value: e.id,
          label: (0, C.computeChannelName)(e, V.default, w.default),
          channel: e,
          category: y.default.getChannel(e.parent_id),
        };
      }
      let eg = () => {
        let {
            guild: e,
            originalGuild: t,
            submitting: s,
            errors: n,
          } = (0, c.useStateFromStoresObject)([ee.default], () =>
            ee.default.getProps()
          ),
          i = l.useMemo(() => (0, et.getSettingsErrorMessage)(n), [n]),
          r = l.useCallback(() => {
            if (null == e) return;
            let s = {
                name: e.name,
                icon: e.icon,
                splash: e.splash,
                afkChannelId: e.afkChannelId,
                afkTimeout: e.afkTimeout,
                systemChannelId: e.systemChannelId,
                safetyAlertsChannelId: e.safetyAlertsChannelId,
                verificationLevel: e.verificationLevel,
                defaultMessageNotifications: e.defaultMessageNotifications,
                explicitContentFilter: e.explicitContentFilter,
                description: e.description,
                banner: e.banner,
                systemChannelFlags: e.systemChannelFlags,
                publicUpdatesChannelId: e.publicUpdatesChannelId,
                premiumProgressBarEnabled: e.premiumProgressBarEnabled,
                homeHeader: e.homeHeader,
              },
              a = (0, J.areSetsEqual)(new Set(e.features), new Set(t.features));
            !a && (s.features = e.features), $.default.saveGuild(e.id, s);
          }, [e, t]),
          o = l.useCallback(() => {
            null != e && $.default.init(e.id);
          }, [e]);
        return (0, a.jsx)(T.default, {
          submitting: s,
          errorMessage: i,
          onSave: r,
          onReset: o,
        });
      };
      class eh extends l.PureComponent {
        componentDidMount() {
          if (
            this.props.subsection === es.GuildSettingsSubsections.DISPLAY &&
            null != this._displaySectionRef.current
          ) {
            let e = this._displaySectionRef.current;
            setTimeout(() => e.scrollIntoView(), 0);
          } else if (
            this.props.subsection === es.GuildSettingsSubsections.INVITE &&
            null != this._inviteSectionRef.current
          ) {
            let e = this._inviteSectionRef.current;
            setTimeout(() => e.scrollIntoView(), 0);
          } else if (
            this.props.subsection ===
              es.GuildSettingsSubsections.DEFAULT_NOTIFICATIONS &&
            null != this._notificationSectionRef.current
          ) {
            let e = this._notificationSectionRef.current;
            setTimeout(() => e.scrollIntoView(), 0);
          }
        }
        handleNameChange(e) {
          $.default.updateGuild({ name: e });
        }
        handleAFKChannelChange(e) {
          e === eu && (e = null), $.default.updateGuild({ afkChannelId: e });
        }
        handleAFKTimeoutChange(e) {
          $.default.updateGuild({ afkTimeout: parseInt(e, 10) });
        }
        handleSystemChannelChange(e) {
          e === ec && (e = null), $.default.updateGuild({ systemChannelId: e });
        }
        handleDefaultMessageNotificationsChange(e) {
          let { value: t } = e;
          $.default.updateGuild({ defaultMessageNotifications: t });
        }
        handleSplashChange(e) {
          $.default.updateGuild({ splash: e });
        }
        handleSystemChannelFlagsChange(e, t) {
          let { guild: s } = this.props,
            a = (0, Q.setFlag)(s.systemChannelFlags, e, t);
          $.default.updateGuild({ systemChannelFlags: a });
        }
        handlePremiumProgressBarEnabledChange(e) {
          $.default.updateGuild({ premiumProgressBarEnabled: e });
        }
        handleChangeDescription(e) {
          $.default.updateGuild({ description: e });
        }
        renderBaseSettings() {
          let { guild: e, errors: t, canManageGuild: s } = this.props;
          return (0, a.jsxs)(Y.default, {
            className: i(er.baseSection),
            children: [
              (0, a.jsxs)(Y.default, {
                basis: "50%",
                justify: Y.default.Justify.BETWEEN,
                children: [
                  (0, a.jsxs)(Y.default.Child, {
                    wrap: !0,
                    children: [
                      (0, a.jsx)(B.default, {
                        showIcon: !0,
                        name: e.name,
                        image: e.icon,
                        onChange: this.handleIconChange,
                        disabled: !s,
                        hint: ei.default.Messages.CHANGE_ICON,
                        makeURL: t =>
                          X.default.getGuildIconURL({
                            id: e.id,
                            icon: t,
                            canAnimate: !0,
                            size: 100,
                          }),
                        className: i({
                          [er.avatarUploader]: s,
                          [er.avatarUploaderDisabled]: !s,
                        }),
                        imageClassName: i(er.avatarUploaderInner, {
                          [er.avatarUploaderInnerEmpty]: null == e.icon,
                        }),
                      }),
                      null != t.icon
                        ? (0, a.jsx)("div", {
                            className: er.iconError,
                            children: t.icon,
                          })
                        : null,
                    ],
                  }),
                  (0, a.jsxs)(Y.default, {
                    direction: Y.default.Direction.VERTICAL,
                    align: Y.default.Align.START,
                    style: { maxWidth: 180 },
                    children: [
                      (0, a.jsx)(I.FormText, {
                        type: I.FormTextTypes.DESCRIPTION,
                        className: er.marginBottom8,
                        children:
                          ei.default.Messages.GUILD_SETTINGS_ICON_RECOMMEND,
                      }),
                      (0, a.jsxs)(I.Button, {
                        look: I.ButtonLooks.OUTLINED,
                        color: I.ButtonColors.PRIMARY,
                        disabled: !s,
                        className: er.marginTop8,
                        onClick: this.handleUploadImage,
                        children: [
                          ei.default.Messages.UPLOAD_IMAGE,
                          (0, a.jsx)(b.default, {
                            ref: this._imageInputRef,
                            onChange: this.handleOpenImageCroppingModal,
                            disabled: !s,
                          }),
                        ],
                      }),
                    ],
                  }),
                ],
              }),
              (0, a.jsx)(Y.default.Child, {
                basis: "50%",
                children: (0, a.jsx)(I.FormItem, {
                  title: ei.default.Messages.FORM_LABEL_SERVER_NAME,
                  className: er.marginBottom20,
                  children: (0, a.jsx)(I.TextInput, {
                    type: "text",
                    disabled: !s,
                    value: e.name,
                    maxLength: 100,
                    onChange: this.handleNameChange,
                    error: t.name,
                  }),
                }),
              }),
            ],
          });
        }
        renderAFKSection() {
          var e;
          let { guild: t, canManageGuild: s, channels: l } = this.props,
            n = null != t.afkTimeout ? "".concat(t.afkTimeout) : null,
            i = null !== (e = t.afkChannelId) && void 0 !== e ? e : eu,
            r = [
              {
                value: eE,
                label: ei.default.Messages.DURATION_MINUTES.format({
                  minutes: 1,
                }),
              },
              {
                value: e_,
                label: ei.default.Messages.DURATION_MINUTES.format({
                  minutes: 5,
                }),
              },
              {
                value: eI,
                label: ei.default.Messages.DURATION_MINUTES.format({
                  minutes: 15,
                }),
              },
              {
                value: eT,
                label: ei.default.Messages.DURATION_MINUTES.format({
                  minutes: 30,
                }),
              },
              {
                value: ef,
                label: ei.default.Messages.DURATION_HOURS.format({ hours: 1 }),
              },
            ],
            o = u(l)
              .filter(e => {
                let { channel: t } = e;
                return t.type === es.ChannelTypes.GUILD_VOICE;
              })
              .map(e => {
                let { channel: t } = e;
                return eN(t);
              })
              .value();
          return (
            o.unshift({ value: eu, label: ei.default.Messages.NO_AFK_CHANNEL }),
            (0, a.jsxs)(I.FormSection, {
              className: er.divider,
              children: [
                (0, a.jsxs)(Y.default, {
                  children: [
                    (0, a.jsx)(Y.default.Child, {
                      basis: "50%",
                      children: (0, a.jsx)(I.FormItem, {
                        title: ei.default.Messages.FORM_LABEL_AFK_CHANNEL,
                        children: (0, a.jsx)(I.SingleSelect, {
                          value: i,
                          options: o,
                          onChange: this.handleAFKChannelChange,
                          isDisabled: !s,
                          renderOptionLabel: em,
                          renderOptionValue: eS,
                        }),
                      }),
                    }),
                    (0, a.jsx)(Y.default.Child, {
                      basis: "50%",
                      children: (0, a.jsx)(I.FormItem, {
                        title: ei.default.Messages.FORM_LABEL_AFK_TIMEOUT,
                        children: (0, a.jsx)(I.SingleSelect, {
                          value: n,
                          options: r,
                          isDisabled: i === eu || !s,
                          onChange: this.handleAFKTimeoutChange,
                        }),
                      }),
                    }),
                  ],
                }),
                (0, a.jsx)(I.FormText, {
                  className: er.marginTop8,
                  type: I.FormTextTypes.DESCRIPTION,
                  children: ei.default.Messages.FORM_HELP_AFK_CHANNEL,
                }),
              ],
            })
          );
        }
        renderJoinNotificationSection() {
          var e;
          let {
              guild: t,
              channels: s,
              canManageGuild: l,
              eligibleForDeadchatPrompt: n,
            } = this.props,
            r = null !== (e = t.systemChannelId) && void 0 !== e ? e : ec,
            o = u(s)
              .filter(e => {
                let { channel: t } = e;
                return t.type === es.ChannelTypes.GUILD_TEXT;
              })
              .map(e => {
                let { channel: t } = e;
                return eN(t);
              })
              .value();
          o.unshift({
            value: ec,
            label: ei.default.Messages.NO_SYSTEM_CHANNEL,
          });
          let d = (0,
            v.isEligibleForRoleSubscriptionPurchaseSystemMessageSettings)(t),
            c =
              d ||
              (0, Q.hasFlag)(
                t.systemChannelFlags,
                es.SystemChannelFlags
                  .SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATIONS
              ),
            E =
              d ||
              (0, Q.hasFlag)(
                t.systemChannelFlags,
                es.SystemChannelFlags
                  .SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATION_REPLIES
              );
          return (0, a.jsxs)(I.FormSection, {
            className: er.divider,
            children: [
              (0, a.jsx)(I.FormTitle, {
                children: ei.default.Messages.FORM_LABEL_SYSTEM_CHANNEL,
              }),
              (0, a.jsx)(I.SingleSelect, {
                value: r,
                options: o,
                isDisabled: !l,
                onChange: this.handleSystemChannelChange,
                renderOptionLabel: em,
                renderOptionValue: eS,
              }),
              (0, a.jsx)(I.FormText, {
                className: er.marginTop8,
                type: I.FormTextTypes.DESCRIPTION,
                children: ei.default.Messages.FORM_HELP_SYSTEM_CHANNEL,
              }),
              (0, a.jsx)(I.FormSwitch, {
                className: er.marginTop20,
                onChange: this.handleShowJoinsChange,
                value: !(0, Q.hasFlag)(
                  t.systemChannelFlags,
                  es.SystemChannelFlags.SUPPRESS_JOIN_NOTIFICATIONS
                ),
                hideBorder: !0,
                disabled: !l || r === ec,
                children:
                  ei.default.Messages.FORM_HELP_SYSTEM_CHANNEL_JOIN_MESSAGES,
              }),
              (0, a.jsx)(I.FormSwitch, {
                className: i(er.marginReset, er.marginTop20),
                onChange: this.handleShowJoinRepliesChange,
                value: !(0, Q.hasFlag)(
                  t.systemChannelFlags,
                  es.SystemChannelFlags.SUPPRESS_JOIN_NOTIFICATION_REPLIES
                ),
                hideBorder: !0,
                disabled: !l || r === ec,
                children:
                  ei.default.Messages
                    .FORM_HELP_SYSTEM_CHANNEL_JOIN_MESSAGE_REPLIES,
              }),
              (0, a.jsx)(I.FormSwitch, {
                className: i(er.marginReset, er.marginTop20),
                onChange: this.handleShowSubscriptionsChange,
                value: !(0, Q.hasFlag)(
                  t.systemChannelFlags,
                  es.SystemChannelFlags.SUPPRESS_PREMIUM_SUBSCRIPTIONS
                ),
                hideBorder: !0,
                disabled: !l || r === ec,
                children:
                  ei.default.Messages
                    .FORM_HELP_SYSTEM_CHANNEL_PREMIUM_SUBSCRIPTION_MESSAGES,
              }),
              (0, a.jsx)(I.FormSwitch, {
                className: i(er.marginReset, er.marginTop20),
                onChange: this.handleShowGuildRemindersChange,
                value: !(0, Q.hasFlag)(
                  t.systemChannelFlags,
                  es.SystemChannelFlags.SUPPRESS_GUILD_REMINDER_NOTIFICATIONS
                ),
                hideBorder: !0,
                disabled: !l || r === ec,
                children:
                  ei.default.Messages.FORM_HELP_SYSTEM_CHANNEL_GUILD_REMINDERS,
              }),
              c &&
                (0, a.jsx)(I.FormSwitch, {
                  className: i(er.marginReset, er.marginTop20),
                  onChange:
                    this.handleShowGuildRoleSubscriptionPurchaseMessages,
                  value: !(0, Q.hasFlag)(
                    t.systemChannelFlags,
                    es.SystemChannelFlags
                      .SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATIONS
                  ),
                  hideBorder: !0,
                  disabled: !l || r === ec,
                  children:
                    ei.default.Messages
                      .FORM_HELP_SYSTEM_CHANNEL_ROLE_SUBSCRIPTION_PURCHASE_MESSAGES,
                }),
              E &&
                (0, a.jsx)(I.FormSwitch, {
                  className: i(er.marginReset, er.marginTop20),
                  onChange:
                    this
                      .handleShowGuildRoleSubscriptionPurchaseMessageRepliesChange,
                  value: !(0, Q.hasFlag)(
                    t.systemChannelFlags,
                    es.SystemChannelFlags
                      .SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATION_REPLIES
                  ),
                  hideBorder: !0,
                  disabled: !l || r === ec,
                  children:
                    ei.default.Messages
                      .FORM_HELP_SYSTEM_CHANNEL_ROLE_SUBSCRIPTION_PURCHASE_MESSAGE_REPLIES,
                }),
              n &&
                (0, a.jsx)(I.FormSwitch, {
                  className: i(er.marginReset, er.marginTop20),
                  onChange: this.handleShowDeadchatPromptMessageChange,
                  value: !(0, Q.hasFlag)(
                    t.systemChannelFlags,
                    es.SystemChannelFlags.SUPPRESS_CHANNEL_PROMPT_DEADCHAT
                  ),
                  hideBorder: !0,
                  disabled: !l || r === ec,
                  children: (0, a.jsxs)("div", {
                    className: er.flexRow,
                    children: [
                      ei.default.Messages
                        .FORM_HELP_SYSTEM_CHANNEL_DEADCHAT_PROMPT_MESSAGE,
                      (0, a.jsx)(L.default, {}),
                    ],
                  }),
                }),
            ],
          });
        }
        renderNotificationSection() {
          let { guild: e, canManageGuild: t, guildMemberCount: s } = this.props,
            l = [
              {
                name: ei.default.Messages.FORM_LABEL_ALL_MESSAGES,
                value: es.UserNotificationSettings.ALL_MESSAGES,
                desc:
                  null != s && s >= es.MAX_MEMBERS_NOTIFY_ALL_MESSAGES
                    ? ei.default.Messages
                        .GUILD_SETTINGS_DEFAULT_NOTIFICATIONS_LARGE_GUILD_NOTIFY_ALL
                    : null,
              },
              {
                name: ei.default.Messages.FORM_LABEL_ONLY_MENTIONS.format(),
                value: es.UserNotificationSettings.ONLY_MENTIONS,
              },
            ];
          return (0, a.jsx)("div", {
            ref: this._notificationSectionRef,
            children: (0, a.jsxs)(I.FormSection, {
              className: er.divider,
              children: [
                (0, a.jsx)(I.FormTitle, {
                  children:
                    ei.default.Messages
                      .FORM_LABEL_DEFAULT_NOTIFICATION_SETTINGS,
                }),
                (0, a.jsx)(I.FormText, {
                  type: I.FormTextTypes.DESCRIPTION,
                  className: er.marginBottom20,
                  children:
                    ei.default.Messages
                      .GUILD_SETTINGS_DEFAULT_NOTIFICATION_SETTINGS_INTRO,
                }),
                (0, a.jsx)(I.FormText, {
                  type: I.FormTextTypes.DESCRIPTION,
                  className: er.marginBottom20,
                  children:
                    ei.default.Messages
                      .GUILD_SETTINGS_DEFAULT_NOTIFICATION_SETTINGS_TIP,
                }),
                (0, a.jsx)(I.RadioGroup, {
                  options: l,
                  value: e.defaultMessageNotifications,
                  disabled: !t,
                  onChange: this.handleDefaultMessageNotificationsChange,
                }),
              ],
            }),
          });
        }
        renderSummariesSection() {
          let { guild: e, canManageGuild: t } = this.props,
            s = (0, f.canGuildUseConversationSummaries)(e, !1);
          return s
            ? (0, a.jsx)("div", {
                children: (0, a.jsx)(I.FormSection, {
                  className: er.divider,
                  children: (0, a.jsx)(I.FormSwitch, {
                    className: i(er.marginTop8, er.marginBottom8),
                    onChange: this.handleConversationSummariesToggle,
                    value: e.hasFeature(
                      es.GuildFeatures.SUMMARIES_ENABLED_BY_USER
                    ),
                    hideBorder: !0,
                    note: ei.default.Messages.GUILD_SETTINGS_SUMMARIES_TOGGLE_DESCRIPTION.format(
                      {
                        helpdeskArticle: q.default.getArticleURL(
                          es.HelpdeskArticles.CONVERSATION_SUMMARIES
                        ),
                      }
                    ),
                    disabled: !t,
                    children: (0, a.jsxs)("div", {
                      className: er.badgedItem,
                      children: [
                        ei.default.Messages.GUILD_SETTINGS_SUMMARIES_TOGGLE,
                        (0, a.jsx)(Z.TextBadge, {
                          text: ei.default.Messages.BETA,
                          color: E.default.unsafe_rawColors.BRAND_500.css,
                          className: er.betaTag,
                        }),
                      ],
                    }),
                  }),
                }),
              })
            : null;
        }
        renderServerInviteBGSection() {
          let { guild: e, canManageGuild: t } = this.props,
            s = e.hasFeature(es.GuildFeatures.INVITE_SPLASH),
            l = t && s,
            n = (0, a.jsx)(P.default, {
              image: e.splash,
              makeURL: t =>
                null != t
                  ? X.default.getGuildSplashURL({ id: e.id, splash: t })
                  : null,
              disabled: !l,
              onChange: this.handleSplashChange,
              hint: ei.default.Messages.CHANGE_SPLASH,
              enabled: l,
              maxFileSizeBytes: en.MAX_IMAGE_UPLOAD_FILESIZE_BYTES,
              onFileSizeError: () =>
                (0, U.default)(en.MAX_IMAGE_UPLOAD_FILESIZE_BYTES),
            });
          return (0, a.jsx)("div", {
            ref: this._inviteSectionRef,
            children: (0, a.jsx)(I.FormSection, {
              className: er.divider,
              children: (0, a.jsxs)(Y.default, {
                basis: "50%",
                direction: Y.default.Direction.HORIZONTAL,
                align: Y.default.Justify.START,
                children: [
                  (0, a.jsxs)(Y.default.Child, {
                    wrap: !0,
                    basis: "50%",
                    children: [
                      (0, a.jsxs)(I.FormTitle, {
                        className: er.flexFormTitle,
                        children: [
                          (0, a.jsx)("div", {
                            children:
                              ei.default.Messages
                                .GUILD_SETTINGS_SERVER_INVITE_BACKGROUND,
                          }),
                          (0, a.jsx)(O.default, {
                            guild: e,
                            guildFeature: es.GuildFeatures.INVITE_SPLASH,
                            className: er.guildFeatureAvailabilityIndicator,
                            onClick: this.handleInviteSplashUpsellIndicator,
                          }),
                        ],
                      }),
                      (0, a.jsx)(I.FormText, {
                        type: I.FormTextTypes.DESCRIPTION,
                        className: er.marginBottom8,
                        children:
                          ei.default.Messages.GUILD_SETTINGS_SPLASH_DESCRIPTION,
                      }),
                      (0, a.jsx)(I.FormText, {
                        type: I.FormTextTypes.DESCRIPTION,
                        children:
                          ei.default.Messages.GUILD_SETTINGS_SPLASH_RECOMMEND.format(
                            {
                              articleURL: q.default.getArticleURL(
                                es.HelpdeskArticles.GUILD_INVITE_SPLASH
                              ),
                            }
                          ),
                      }),
                      s
                        ? (0, a.jsxs)(I.Button, {
                            disabled: !l,
                            color: I.ButtonColors.BRAND_NEW,
                            className: er.marginTop16,
                            children: [
                              ei.default.Messages.UPLOAD_BACKGROUND,
                              (0, a.jsx)(b.default, {
                                disabled: !l,
                                onChange: this.handleSplashChange,
                                maxFileSizeBytes:
                                  en.MAX_IMAGE_UPLOAD_FILESIZE_BYTES,
                                onFileSizeError: () =>
                                  (0, U.default)(
                                    en.MAX_IMAGE_UPLOAD_FILESIZE_BYTES
                                  ),
                              }),
                            ],
                          })
                        : this.uploadBGUpsellButton(
                            this.handleInviteSplashUpsellButton
                          ),
                    ],
                  }),
                  (0, a.jsx)(Y.default.Child, {
                    wrap: !0,
                    basis: "50%",
                    children: s
                      ? n
                      : (0, a.jsx)(I.Clickable, {
                          "aria-hidden": !0,
                          tabIndex: -1,
                          className: er.upsell,
                          onClick: this.handleInviteSplashUpsellUpload,
                          children: n,
                        }),
                  }),
                ],
              }),
            }),
          });
        }
        renderHomeHeaderSection() {
          let { guild: e, canManageGuild: t } = this.props,
            s = e.hasFeature(es.GuildFeatures.BANNER),
            l = (0, M.canSeeGuildHome)(e.id),
            n = t && l && s,
            { hasNewHeader: i } =
              D.GuildHomeHeaderRedesignExperiment.getCurrentConfig({
                guildId: e.id,
                location: "4b6c0f_1",
              });
          if (!l || !i) return null;
          let r = (0, a.jsx)(P.default, {
            image: e.homeHeader,
            makeURL: t =>
              null != t
                ? X.default.getGuildHomeHeaderURL({ id: e.id, homeHeader: t })
                : null,
            disabled: !n,
            onChange: this.handleHomeHeaderChange,
            hint: ei.default.Messages.CHANGE_HOME_HEADER,
            enabled: n,
            maxFileSizeBytes: en.MAX_IMAGE_UPLOAD_FILESIZE_BYTES,
            onFileSizeError: () =>
              (0, U.default)(en.MAX_IMAGE_UPLOAD_FILESIZE_BYTES),
          });
          return (0, a.jsx)(I.FormSection, {
            className: er.divider,
            children: (0, a.jsxs)(Y.default, {
              basis: "50%",
              direction: Y.default.Direction.HORIZONTAL,
              align: Y.default.Justify.START,
              children: [
                (0, a.jsxs)(Y.default.Child, {
                  wrap: !0,
                  basis: "50%",
                  children: [
                    (0, a.jsxs)(I.FormTitle, {
                      className: er.flexFormTitle,
                      children: [
                        (0, a.jsx)("div", {
                          children:
                            ei.default.Messages.GUILD_SETTINGS_HOME_HEADER,
                        }),
                        (0, a.jsx)(O.default, {
                          guild: e,
                          guildFeature: es.GuildFeatures.BANNER,
                          className: er.guildFeatureAvailabilityIndicator,
                          onClick: this.handleBannerUpsellIndicator,
                        }),
                      ],
                    }),
                    (0, a.jsx)(I.FormText, {
                      type: I.FormTextTypes.DESCRIPTION,
                      className: er.marginBottom8,
                      children:
                        ei.default.Messages
                          .GUILD_SETTINGS_HOME_HEADER_DESCRIPTION,
                    }),
                    (0, a.jsx)(I.FormText, {
                      type: I.FormTextTypes.DESCRIPTION,
                      children:
                        ei.default.Messages
                          .GUILD_SETTINGS_HOME_HEADER_RECOMMEND,
                    }),
                    s
                      ? (0, a.jsxs)(I.Button, {
                          disabled: !n,
                          color: I.ButtonColors.BRAND_NEW,
                          className: er.marginTop16,
                          children: [
                            ei.default.Messages.UPLOAD_BACKGROUND,
                            (0, a.jsx)(b.default, {
                              disabled: !n,
                              onChange: this.handleHomeHeaderChange,
                              maxFileSizeBytes:
                                en.MAX_IMAGE_UPLOAD_FILESIZE_BYTES,
                              onFileSizeError: () =>
                                (0, U.default)(
                                  en.MAX_IMAGE_UPLOAD_FILESIZE_BYTES
                                ),
                            }),
                          ],
                        })
                      : this.uploadBGUpsellButton(
                          this.handleBannerUpsellButton
                        ),
                  ],
                }),
                (0, a.jsx)(Y.default.Child, {
                  wrap: !0,
                  basis: "50%",
                  children: s
                    ? r
                    : (0, a.jsx)(I.Clickable, {
                        "aria-hidden": !0,
                        tabIndex: -1,
                        className: er.upsell,
                        onClick: this.handleBannerUpsellUpload,
                        children: r,
                      }),
                }),
              ],
            }),
          });
        }
        renderBanner() {
          let {
              guild: e,
              canManageGuild: t,
              analyticsLocations: s,
            } = this.props,
            l = e.hasFeature(es.GuildFeatures.BANNER),
            n = e.hasFeature(es.GuildFeatures.ANIMATED_BANNER),
            i = l && t,
            r = (0, a.jsx)(P.default, {
              image: e.banner,
              makeURL: t =>
                null != t
                  ? X.default.getGuildBannerURL({ id: e.id, banner: t }, n)
                  : null,
              disabled: !i,
              onChange: this.handleBannerChange,
              hint: ei.default.Messages.CHANGE_SPLASH,
              onOpenImageSelectModal: () =>
                eR(
                  el.UploadTypes.GUILD_BANNER,
                  en.MAX_IMAGE_UPLOAD_FILESIZE_BYTES,
                  this.handleBannerChange,
                  !0,
                  {
                    page: es.AnalyticsPages.GUILD_SETTINGS,
                    section: es.AnalyticsSections.GUILD_BANNER,
                  },
                  s
                ),
              enabled: i,
            }),
            o = (0, a.jsx)(I.Button, {
              disabled: !i,
              color: I.Button.Colors.BRAND_NEW,
              className: er.marginTop16,
              onClick: () =>
                eR(
                  el.UploadTypes.GUILD_BANNER,
                  en.MAX_IMAGE_UPLOAD_FILESIZE_BYTES,
                  this.handleBannerChange,
                  !0,
                  {
                    page: es.AnalyticsPages.GUILD_SETTINGS,
                    section: es.AnalyticsSections.GUILD_BANNER,
                  },
                  s
                ),
              children: ei.default.Messages.UPLOAD_BACKGROUND,
            });
          return (0, a.jsx)(I.FormSection, {
            className: er.divider,
            children: (0, a.jsxs)(Y.default, {
              basis: "50%",
              direction: Y.default.Direction.HORIZONTAL,
              align: Y.default.Justify.START,
              children: [
                (0, a.jsxs)(Y.default.Child, {
                  wrap: !0,
                  basis: "50%",
                  children: [
                    (0, a.jsxs)(I.FormTitle, {
                      className: er.flexFormTitle,
                      children: [
                        (0, a.jsx)("div", {
                          children:
                            ei.default.Messages.FORM_LABEL_SERVER_BANNER,
                        }),
                        (0, a.jsx)(O.default, {
                          guild: e,
                          guildFeature: es.GuildFeatures.BANNER,
                          className: er.guildFeatureAvailabilityIndicator,
                          onClick: this.handleBannerUpsellIndicator,
                        }),
                      ],
                    }),
                    (0, a.jsx)(I.FormText, {
                      type: I.FormTextTypes.DESCRIPTION,
                      className: er.marginBottom8,
                      children: ei.default.Messages.FORM_HELP_SERVER_BANNER,
                    }),
                    (0, a.jsx)(I.FormText, {
                      type: I.FormTextTypes.DESCRIPTION,
                      children:
                        ei.default.Messages.GUILD_SETTINGS_BANNER_RECOMMEND.format(
                          {
                            articleURL: q.default.getArticleURL(
                              es.HelpdeskArticles.GUILD_BANNER_SPLASH
                            ),
                          }
                        ),
                    }),
                    l
                      ? o
                      : this.uploadBGUpsellButton(
                          this.handleBannerUpsellButton
                        ),
                  ],
                }),
                (0, a.jsx)(Y.default.Child, {
                  wrap: !0,
                  basis: "50%",
                  children: l
                    ? r
                    : (0, a.jsx)(I.Clickable, {
                        "aria-hidden": !0,
                        tabIndex: -1,
                        className: er.upsell,
                        onClick: this.handleBannerUpsellUpload,
                        children: r,
                      }),
                }),
              ],
            }),
          });
        }
        renderProgressBar() {
          let { guild: e, canManageGuild: t, theme: s } = this.props;
          return (0, a.jsx)(I.FormSection, {
            children: (0, a.jsxs)(Y.default, {
              align: Y.default.Align.START,
              children: [
                (0, a.jsxs)(Y.default, {
                  basis: "50%",
                  direction: Y.default.Direction.VERTICAL,
                  align: Y.default.Align.STRETCH,
                  children: [
                    (0, a.jsx)(I.FormSwitch, {
                      className: i(er.marginTop8, er.marginBottom8),
                      onChange: this.handlePremiumProgressBarEnabledChange,
                      value: e.premiumProgressBarEnabled,
                      hideBorder: !0,
                      disabled: !t,
                      children:
                        ei.default.Messages
                          .GUILD_SETTINGS_PREMIUM_PROGRESS_BAR_TITLE,
                    }),
                    (0, a.jsx)(I.FormText, {
                      type: I.FormTextTypes.DESCRIPTION,
                      className: er.marginBottom8,
                      children:
                        ei.default.Messages
                          .GUILD_SETTINGS_PREMIUM_PROGRESS_BAR_DESCRIPTION,
                    }),
                  ],
                }),
                (0, a.jsx)(Y.default.Child, {
                  wrap: !0,
                  basis: "50%",
                  children: (0, a.jsx)("img", {
                    alt: ei.default.Messages
                      .GUILD_SETTINGS_PREMIUM_PROGRESS_BAR_IMG_ALT,
                    src: (0, _.isThemeLight)(s) ? ed : eo,
                    className: er.progressBarImage,
                  }),
                }),
              ],
            }),
          });
        }
        renderDisplaySection() {
          return (0, a.jsx)("div", {
            ref: this._displaySectionRef,
            children: (0, a.jsxs)(I.FormSection, {
              title: ei.default.Messages.DISPLAY,
              tag: I.FormTitleTags.H1,
              className: er.divider,
              children: [
                this.renderProgressBar(),
                this.renderBanner(),
                this.renderServerInviteBGSection(),
                this.renderHomeHeaderSection(),
              ],
            }),
          });
        }
        render() {
          return (0, a.jsxs)(I.FormSection, {
            title: ei.default.Messages.SERVER_OVERVIEW,
            tag: I.FormTitleTags.H1,
            children: [
              this.renderBaseSettings(),
              this.renderSummariesSection(),
              this.renderAFKSection(),
              this.renderJoinNotificationSection(),
              this.renderNotificationSection(),
              this.renderDisplaySection(),
            ],
          });
        }
        constructor(...e) {
          super(...e),
            (this._imageInputRef = l.createRef()),
            (this._displaySectionRef = l.createRef()),
            (this._inviteSectionRef = l.createRef()),
            (this._notificationSectionRef = l.createRef()),
            (this.handleIconChange = e => {
              $.default.updateGuild({ icon: e });
            }),
            (this.handleOpenImageCroppingModal = (e, t) => {
              (0, I.openModalLazy)(async () => {
                let { default: l } = await s
                  .el("57015")
                  .then(s.bind(s, "57015"));
                return s =>
                  (0, a.jsx)(l, {
                    onCrop: this.handleIconChange,
                    imgURI: e,
                    file: t,
                    ...s,
                  });
              });
            }),
            (this.handleUploadImage = e => {
              var t;
              e.target === e.currentTarget &&
                (null === (t = this._imageInputRef.current) ||
                  void 0 === t ||
                  t.activateUploadDialogue());
            }),
            (this.handleShowJoinsChange = e =>
              this.handleSystemChannelFlagsChange(
                es.SystemChannelFlags.SUPPRESS_JOIN_NOTIFICATIONS,
                !e
              )),
            (this.handleShowSubscriptionsChange = e =>
              this.handleSystemChannelFlagsChange(
                es.SystemChannelFlags.SUPPRESS_PREMIUM_SUBSCRIPTIONS,
                !e
              )),
            (this.handleShowGuildRemindersChange = e => {
              this.handleSystemChannelFlagsChange(
                es.SystemChannelFlags.SUPPRESS_GUILD_REMINDER_NOTIFICATIONS,
                !e
              );
            }),
            (this.handleShowJoinRepliesChange = e =>
              this.handleSystemChannelFlagsChange(
                es.SystemChannelFlags.SUPPRESS_JOIN_NOTIFICATION_REPLIES,
                !e
              )),
            (this.handleShowGuildRoleSubscriptionPurchaseMessages = e => {
              this.handleSystemChannelFlagsChange(
                es.SystemChannelFlags
                  .SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATIONS,
                !e
              );
            }),
            (this.handleShowDeadchatPromptMessageChange = e => {
              this.handleSystemChannelFlagsChange(
                es.SystemChannelFlags.SUPPRESS_CHANNEL_PROMPT_DEADCHAT,
                !e
              );
            }),
            (this.handleShowGuildRoleSubscriptionPurchaseMessageRepliesChange =
              e => {
                this.handleSystemChannelFlagsChange(
                  es.SystemChannelFlags
                    .SUPPRESS_ROLE_SUBSCRIPTION_PURCHASE_NOTIFICATION_REPLIES,
                  !e
                );
              }),
            (this.handleHomeHeaderChange = (e, t) => {
              if (null == e || void 0 === t) {
                $.default.updateGuild({ homeHeader: null });
                return;
              }
              (0, I.openModalLazy)(async () => {
                let { default: l } = await s
                  .el("57015")
                  .then(s.bind(s, "57015"));
                return s =>
                  (0, a.jsx)(l, {
                    imgURI: e,
                    file: t,
                    onCrop: e => $.default.updateGuild({ homeHeader: e }),
                    uploadType: el.UploadTypes.HOME_HEADER,
                    ...s,
                  });
              });
            }),
            (this.handleBannerChange = (e, t) => {
              let { guild: s, analyticsLocations: a } = this.props,
                l = null == t ? void 0 : t.type,
                n = {
                  page: es.AnalyticsPages.GUILD_SETTINGS,
                  section: es.AnalyticsSections.ANIMATED_GUILD_BANNER_UPSELL,
                  object: "temp",
                };
              if (null != l && null != e) {
                if (
                  "image/gif" !== l ||
                  s.hasFeature(es.GuildFeatures.ANIMATED_BANNER)
                ) {
                  if (!s.hasFeature(es.GuildFeatures.BANNER)) {
                    (n.object = es.AnalyticsObjects.IMAGE_CROPPING_MODAL),
                      (0, p.openGuildBannerUpsellModal)({
                        guild: s,
                        analyticsLocations: a,
                        analyticsLocation: n,
                        banner: e,
                        isGIF: !1,
                      });
                    return;
                  }
                } else {
                  (n.object = es.AnalyticsObjects.GIF_CROPPING_MODAL),
                    (0, p.openGuildBannerUpsellModal)({
                      guild: s,
                      analyticsLocations: a,
                      analyticsLocation: n,
                      banner: e,
                      isGIF: !0,
                    });
                  return;
                }
              }
              $.default.updateGuild({ banner: e });
            }),
            (this.handleShowModalUpsell = (e, t, s, a) => {
              e.preventDefault(), e.stopPropagation();
              let { guild: l, analyticsLocations: n } = this.props;
              (0, N.trackWithMetadata)(
                es.AnalyticEvents.PREMIUM_GUILD_PROMOTION_OPENED,
                {
                  location: {
                    section: t,
                    object: es.AnalyticsObjects.LEARN_MORE,
                  },
                  guild_id: null == l ? void 0 : l.id,
                  location_stack: n,
                }
              ),
                (0, A.default)({
                  analyticsLocations: n,
                  analyticsSourceLocation: {
                    section: t,
                    object: s,
                    page: es.AnalyticsPages.GUILD_SETTINGS,
                  },
                  guild: l,
                  perks: a,
                });
            }),
            (this.handleInviteSplashUpsellIndicator = e => {
              this.handleShowModalUpsell(
                e,
                es.AnalyticsSections.GUILD_INVITE_BACKGROUND,
                es.AnalyticsObjects.BADGE,
                (0, ea.guildInviteUpsellPerks)()
              );
            }),
            (this.handleInviteSplashUpsellButton = e => {
              this.handleShowModalUpsell(
                e,
                es.AnalyticsSections.GUILD_INVITE_BACKGROUND,
                es.AnalyticsObjects.BUTTON_CTA,
                (0, ea.guildInviteUpsellPerks)()
              );
            }),
            (this.handleInviteSplashUpsellUpload = e => {
              this.handleShowModalUpsell(
                e,
                es.AnalyticsSections.GUILD_INVITE_BACKGROUND,
                es.AnalyticsObjects.UPLOAD_IMAGE,
                (0, ea.guildInviteUpsellPerks)()
              );
            }),
            (this.handleBannerUpsellIndicator = e => {
              this.handleShowModalUpsell(
                e,
                es.AnalyticsSections.GUILD_BANNER,
                es.AnalyticsObjects.BADGE,
                (0, ea.guildBannerUpsellPerks)()
              );
            }),
            (this.handleBannerUpsellButton = e => {
              this.handleShowModalUpsell(
                e,
                es.AnalyticsSections.GUILD_BANNER,
                es.AnalyticsObjects.BUTTON_CTA,
                (0, ea.guildBannerUpsellPerks)()
              );
            }),
            (this.handleBannerUpsellUpload = e => {
              this.handleShowModalUpsell(
                e,
                es.AnalyticsSections.GUILD_BANNER,
                es.AnalyticsObjects.UPLOAD_IMAGE,
                (0, ea.guildBannerUpsellPerks)()
              );
            }),
            (this.handleConversationSummariesToggle = e => {
              let { guild: t } = this.props,
                s = new Set(t.features);
              e
                ? s.add(es.GuildFeatures.SUMMARIES_ENABLED_BY_USER)
                : s.delete(es.GuildFeatures.SUMMARIES_ENABLED_BY_USER),
                $.default.updateGuild({ features: s });
            }),
            (this.uploadBGUpsellButton = e =>
              (0, a.jsxs)(W.default, {
                color: I.Button.Colors.GREEN,
                className: i(er.marginTop16),
                innerClassName: er.upsellButton,
                onClick: e,
                children: [
                  (0, a.jsx)(K.default, {
                    height: 16,
                    width: 16,
                    className: er.premiumUpsellBadge,
                  }),
                  " ",
                  ei.default.Messages.PREMIUM_GUILD_UNLOCK_WTH_BOOSTING_CTA,
                ],
              }));
        }
      }
      function eC() {
        var e;
        let {
            guild: t,
            errors: s,
            submitting: n,
            subsection: i,
          } = (0, c.useStateFromStoresObject)([ee.default], () =>
            ee.default.getProps()
          ),
          r = (0, S.default)(),
          { AnalyticsLocationProvider: d, analyticsLocations: u } = (0,
          g.default)(m.default.OVERVIEW);
        l.useEffect(() => {
          (0, j.hideHotspot)(
            G.HotspotLocations.ANIMATED_GUILD_BANNER_SETTINGS_NEW_PILL
          );
        }, []);
        let E = (0, c.useStateFromStores)([F.default], () =>
            F.default.getCategories(null == t ? void 0 : t.id)
          ),
          _ = l.useMemo(() => (0, h.default)(E._categories, E), [E]),
          { canManageGuild: I, isGuildAdmin: T } = (0,
          c.useStateFromStoresObject)([k.default], () => ({
            canManageGuild: k.default.can(es.Permissions.MANAGE_GUILD, t),
            isGuildAdmin: k.default.can(es.Permissions.ADMINISTRATOR, t),
          })),
          f = (0, c.useStateFromStores)([H.default], () =>
            H.default.getMemberCount(null == t ? void 0 : t.id)
          ),
          N = (0, c.useStateFromStores)([V.default], () =>
            V.default.getCurrentUser()
          );
        o(null != N, "GuildSettingsOverview: currentUser cannot be undefined");
        let { enableDeadchat: C } =
          x.SimpleDeadchatPromptExperiment.useExperiment(
            {
              guildId:
                null !== (e = null == t ? void 0 : t.id) && void 0 !== e
                  ? e
                  : es.EMPTY_STRING_SNOWFLAKE_ID,
              location: "guild_settings",
            },
            { disable: null == t, autoTrackExposure: !0 }
          );
        return null == t
          ? null
          : (0, a.jsx)(d, {
              children: (0, a.jsx)(eh, {
                channels: _,
                canManageGuild: I,
                isGuildAdmin: T,
                subsection: i,
                guild: t,
                errors: s,
                submitting: n,
                currentUser: N,
                guildMemberCount: f,
                theme: r,
                analyticsLocations: u,
                eligibleForDeadchatPrompt: C,
              }),
            });
      }
      function eR(e, t, l) {
        let n =
            !(arguments.length > 3) || void 0 === arguments[3] || arguments[3],
          i = arguments.length > 4 ? arguments[4] : void 0,
          r = arguments.length > 5 ? arguments[5] : void 0;
        (0, I.openModalLazy)(async () => {
          let { default: o } = await s.el("420333").then(s.bind(s, "420333"));
          return s =>
            (0, a.jsx)(o, {
              maxFileSizeBytes: t,
              onComplete: l,
              uploadType: e,
              showUpsellHeader: n,
              analyticsLocation: i,
              analyticsLocations: r,
              ...s,
            });
        });
      }
    },
    201461: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return A;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("446674"),
        i = s("77078"),
        r = s("913144"),
        o = s("850068"),
        d = s("775433"),
        u = s("174727"),
        c = s("308592"),
        E = s("866561"),
        _ = s("656142"),
        I = s("566171"),
        T = s("417385"),
        f = s("735201"),
        S = s("555158"),
        m = s("599110"),
        N = s("427459"),
        g = s("701909"),
        h = s("900938"),
        C = s("49111"),
        R = s("782340"),
        x = s("410955");
      function L(e) {
        let { endsAt: t, appliedGuildBoostsToMaintain: s, tierName: l } = e,
          { days: n, hours: i } = (0, u.default)(t);
        return s <= 0
          ? null
          : (0, a.jsx)(a.Fragment, {
              children:
                0 === n && 0 === i
                  ? R.default.Messages.PREMIUM_GUILD_GRACE_PERIOD_COOLDOWN_SOON.format(
                      { tierName: l, numPremiumSubscriptions: s }
                    )
                  : R.default.Messages.PREMIUM_GUILD_GRACE_PERIOD_COOLDOWN.format(
                      {
                        days: n,
                        hours: i,
                        tierName: l,
                        numPremiumSubscriptions: s,
                      }
                    ),
            });
      }
      function O(e) {
        let { appliedGuildBoosts: t, guildId: s } = e,
          l = (0, N.getGracePeriodEndingDate)(t, s),
          n = (0, N.getTierName)(
            (0, N.getGuildTierFromAppliedBoostCount)(t.length, s)
          );
        if (null == l || null == n) return null;
        let i = (0, N.appliedGuildBoostsRequiredForPerks)(t, s);
        return (0, a.jsxs)(S.default, {
          messageType: S.HelpMessageTypes.WARNING,
          children: [
            (0, a.jsx)("div", {
              className: x.guildBoostingGracePeriodTitle,
              children:
                R.default.Messages.PREMIUM_GUILD_GRACE_PERIOD_TITLE.format(),
            }),
            (0, a.jsx)(L, {
              endsAt: l,
              appliedGuildBoostsToMaintain: i,
              tierName: n,
            }),
          ],
        });
      }
      let p = e => {
        let {
          isAnimatedTo: t,
          onSetRef: s,
          subscriptionCount: l,
          tier: n,
          tiers: i,
          tierIndex: r,
          guildId: o,
        } = e;
        return (0, a.jsx)(
          T.default,
          {
            subscriptionCount: l,
            tier: n,
            onSetRef: s,
            isAnimatedTo: t,
            hasBottomMargin: r !== i.length - 1,
            guildId: o,
          },
          n.tier
        );
      };
      function A() {
        l.useEffect(() => {
          r.default.wait(() => {
            (0, o.fetchPaymentSources)(),
              (0, d.fetchPremiumSubscriptionPlans)();
          });
        }, []);
        let e = (0, n.useStateFromStores)([h.default], () =>
            h.default.getGuild()
          ),
          t = (0, n.useStateFromStores)([f.default], () =>
            null != e ? f.default.getAppliedGuildBoostsForGuild(e.id) : null
          ),
          s = (0, c.useSubscriptionPlansLoaded)();
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsxs)(l.Fragment, {
              children: [
                (0, a.jsx)(i.FormTitle, {
                  tag: i.FormTitleTags.H1,
                  children:
                    R.default.Messages.GUILD_SETTINGS_PREMIUM_GUILD_TITLE,
                }),
                null != t && null != e
                  ? (0, a.jsx)(O, { appliedGuildBoosts: t, guildId: e.id })
                  : null,
                (0, a.jsx)(i.FormText, {
                  type: i.FormText.Types.DESCRIPTION,
                  className: x.titleBlurb,
                  children:
                    R.default.Messages.GUILD_SETTINGS_PREMIUM_GUILD_BLURB.format(
                      {
                        helpdeskArticle: g.default.getArticleURL(
                          C.HelpdeskArticles.GUILD_SUBSCRIPTIONS
                        ),
                      }
                    ),
                }),
              ],
            }),
            (0, a.jsx)(I.default, {
              tiers: (0, N.getTiers)(
                null != e &&
                  e.hasFeature(C.GuildFeatures.COMMUNITY) &&
                  e.maxStageVideoChannelUsers >=
                    C.MAX_STAGE_VIDEO_USER_LIMIT_TIER01
              ),
              renderTier: p,
            }),
            (0, a.jsx)("div", { className: x.divider }),
            s ? (0, a.jsx)(_.default, {}) : null,
            s
              ? (0, a.jsx)(E.default, {
                  onOpenPremiumClick: () =>
                    void m.default.track(
                      C.AnalyticEvents.PREMIUM_PROMOTION_OPENED,
                      {
                        location: {
                          page: C.AnalyticsPages.GUILD_SETTINGS,
                          section:
                            C.AnalyticsSections.NITRO_CROSS_PROMO_FROM_BOOSTING,
                          object: C.AnalyticsObjects.BUTTON_CTA,
                        },
                      }
                    ),
                })
              : null,
          ],
        });
      }
    },
    817674: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          GuildExplicitContentFilter: function () {
            return Y;
          },
          toggleModerationExperienceGuildFeature: function () {
            return W;
          },
          default: function () {
            return Z;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("917351"),
        o = s("446674"),
        d = s("77078"),
        u = s("79112"),
        c = s("642950"),
        E = s("716241"),
        _ = s("679653"),
        I = s("419830"),
        T = s("298878"),
        f = s("610174"),
        S = s("413476"),
        m = s("413266"),
        N = s("926809"),
        g = s("466818"),
        h = s("42203"),
        C = s("957255"),
        R = s("102985"),
        x = s("697218"),
        L = s("555158"),
        O = s("593195"),
        p = s("139011"),
        A = s("412131"),
        M = s("935351"),
        D = s("599110"),
        v = s("701909"),
        G = s("62418"),
        j = s("592407"),
        U = s("900938"),
        P = s("797944"),
        b = s("380993"),
        B = s("378826"),
        y = s("998728"),
        F = s("49111"),
        H = s("782340"),
        k = s("14441");
      function w(e) {
        let { guild: t } = e,
          s = t.canHaveRaidActivityAlerts(),
          n = (0, o.useStateFromStores)(
            [C.default],
            () => null != t && C.default.can(F.Permissions.MANAGE_GUILD, t),
            [t]
          ),
          { enableRaidAlerts: i } = S.RaidAlertExperiment.useExperiment(
            { guildId: t.id, location: "1a2662_1" },
            { autoTrackExposure: n }
          ),
          r = (0, N.useIsMentionRaidExperimentEnabled)(t.id),
          u = (0, o.useStateFromStores)(
            [h.default],
            () => h.default.getChannel(t.safetyAlertsChannelId),
            [t.safetyAlertsChannelId]
          ),
          c = (0, _.default)(u),
          f = null != u,
          g = l.useMemo(() => {
            let e =
              (null == u ? void 0 : u.type) != null
                ? (0, I.getSimpleChannelIconComponent)(u.type)
                : null;
            return null != e ? e : O.default;
          }, [u]);
        function R() {
          i && (0, m.openSafetyChannelSetupModal)(t.id);
        }
        return n
          ? (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsx)(d.FormDivider, { className: k.divider }),
                (0, a.jsxs)("div", {
                  className: k.setupContainer,
                  children: [
                    (0, a.jsxs)("div", {
                      className: k.switchItemTextContent,
                      children: [
                        (0, a.jsxs)(d.Text, {
                          color: "header-primary",
                          variant: "text-md/semibold",
                          children: [
                            H.default.Messages
                              .GUILD_ANTIRAID_SAFETY_SETUP_TITLE,
                            " ",
                            (0, a.jsx)(T.default, { className: k.betaTag }),
                          ],
                        }),
                        (0, a.jsx)(d.Text, {
                          color: "header-secondary",
                          variant: "text-sm/normal",
                          children:
                            H.default.Messages
                              .GUILD_ANTIRAID_SAFETY_SETUP_DESCRIPTION,
                        }),
                      ],
                    }),
                    (0, a.jsx)(y.default, {
                      title: (0, a.jsxs)("div", {
                        className: k.settingsRowHeader,
                        children: [
                          (0, a.jsx)(p.default, { width: 20, height: 20 }),
                          (0, a.jsx)(d.Text, {
                            color: "text-normal",
                            variant: "text-sm/medium",
                            children:
                              H.default.Messages
                                .GUILD_ANTIRAID_SAFETY_JOIN_RAIDS_TITLE,
                          }),
                        ],
                      }),
                      highlightColor: P.HighlightColors.GREEN,
                      action: i
                        ? (0, a.jsx)(d.Button, {
                            look: d.Button.Looks.LINK,
                            size: d.Button.Sizes.MIN,
                            color: d.Button.Colors.LINK,
                            children: s
                              ? H.default.Messages
                                  .GUILD_ANTIRAID_SAFETY_SETUP_CHANNEL_MANAGE_ACTION
                              : H.default.Messages
                                  .GUILD_ANTIRAID_SAFETY_SETUP_CHANNEL_SETUP_ACTION,
                          })
                        : (0, a.jsx)(d.Text, {
                            color: "text-muted",
                            variant: "text-sm/medium",
                            children:
                              H.default.Messages
                                .GUILD_ANTIRAID_SAFETY_SETUP_NO_EXPERIMENT_ACTION,
                          }),
                      onClick: i ? R : void 0,
                      subsection: i
                        ? (0, a.jsxs)("div", {
                            className: k.settingsRowSubsection,
                            children: [
                              (0, a.jsxs)("div", {
                                className: k.settingsRowSubsectionItem,
                                children: [
                                  (0, a.jsx)(d.Text, {
                                    color: "text-normal",
                                    variant: "text-xs/semibold",
                                    children:
                                      H.default.Messages
                                        .GUILD_ANTIRAID_SETTING_PROTECTION_LABEL,
                                  }),
                                  (0, a.jsx)(d.Text, {
                                    color: "text-muted",
                                    variant: "text-xs/medium",
                                    children:
                                      f && s
                                        ? H.default.Messages
                                            .GUILD_ANTIRAID_SETTING_ENABLED_ALERTS
                                        : H.default.Messages
                                            .GUILD_ANTIRAID_SETTING_ENABLED,
                                  }),
                                ],
                              }),
                              (0, a.jsx)("div", {
                                className: k.settingsRowSubsectionItem,
                                children:
                                  f && s
                                    ? (0, a.jsxs)(a.Fragment, {
                                        children: [
                                          (0, a.jsx)(d.Text, {
                                            color: "text-normal",
                                            variant: "text-xs/semibold",
                                            children:
                                              H.default.Messages
                                                .GUILD_ANTIRAID_SETTING_CHANNEL_LABEL,
                                          }),
                                          (0, a.jsxs)(d.Text, {
                                            color: "text-muted",
                                            variant: "text-xs/medium",
                                            className: k.channelContainer,
                                            children: [
                                              (0, a.jsx)(g, {
                                                className: k.channelIcon,
                                                width: 12,
                                                height: 12,
                                              }),
                                              " ",
                                              c,
                                            ],
                                          }),
                                        ],
                                      })
                                    : (0, a.jsxs)(a.Fragment, {
                                        children: [
                                          (0, a.jsx)(d.Text, {
                                            color: "text-normal",
                                            variant: "text-xs/semibold",
                                            children:
                                              H.default.Messages
                                                .GUILD_ANTIRAID_SETTING_CHANNEL_NONE_LABEL,
                                          }),
                                          (0, a.jsx)(d.Text, {
                                            color: "text-muted",
                                            variant: "text-xs/medium",
                                            children:
                                              H.default.Messages
                                                .GUILD_ANTIRAID_SETTING_CHANNEL_NONE,
                                          }),
                                        ],
                                      }),
                              }),
                            ],
                          })
                        : null,
                    }),
                    !f && i
                      ? (0, a.jsx)(L.default, {
                          messageType: L.HelpMessageTypes.INFO,
                          textVariant: "text-xs/normal",
                          children:
                            H.default.Messages.GUILD_ANTIRAID_SAFETY_SETUP_ENABLE_TIP.format(
                              { onClick: R }
                            ),
                        })
                      : null,
                    r
                      ? (0, a.jsx)(y.default, {
                          title: (0, a.jsxs)("div", {
                            className: k.settingsRowHeader,
                            children: [
                              (0, a.jsx)(A.default, { width: 20, height: 20 }),
                              (0, a.jsx)(d.Text, {
                                color: "text-normal",
                                variant: "text-sm/medium",
                                children:
                                  H.default.Messages
                                    .GUILD_ANTIRAID_SAFETY_MENTION_RAIDS_TITLE,
                              }),
                            ],
                          }),
                          highlightColor: P.HighlightColors.GREEN,
                          action: (0, a.jsx)(d.Button, {
                            look: d.Button.Looks.LINK,
                            size: d.Button.Sizes.MIN,
                            color: d.Button.Colors.LINK,
                            onClick: function () {
                              D.default.track(
                                F.AnalyticEvents
                                  .GUILD_SAFETY_MENTION_RAID_SETUP_CTA_CLICKED,
                                {
                                  ...(0, E.collectGuildAnalyticsMetadata)(t.id),
                                }
                              ),
                                j.default.setSection(
                                  F.GuildSettingsSections.GUILD_AUTOMOD,
                                  F.GuildSettingsSubsections
                                    .AUTOMOD_MENTION_SPAM
                                );
                            },
                            children: (0, a.jsxs)("div", {
                              className: k.setupAutomodButton,
                              children: [
                                H.default.Messages
                                  .GUILD_ANTIRAID_SAFETY_SETUP_IN_AUTOMOD_ACTION,
                                (0, a.jsx)(M.default, {
                                  className: k.setupAutomodIcon,
                                  width: 16,
                                  height: 16,
                                }),
                              ],
                            }),
                          }),
                        })
                      : null,
                  ],
                }),
              ],
            })
          : null;
      }
      function V(e) {
        let { guild: t } = e,
          s = (0, o.useStateFromStores)(
            [C.default],
            () => null != t && C.default.can(F.Permissions.MANAGE_GUILD, t),
            [t]
          ),
          n = l.useCallback(
            async e => {
              let { value: s } = e;
              try {
                await j.default.saveGuild(t.id, { verificationLevel: s }),
                  j.default.updateGuild({ verificationLevel: s });
              } catch (e) {
                (0, d.showToast)(
                  (0, d.createToast)(
                    H.default.Messages.GUILD_ANTIRAID_SAFETY_SETUP_ERROR,
                    d.ToastType.FAILURE
                  )
                );
              }
            },
            [t]
          ),
          i = l.useMemo(() => {
            let e = (0, G.generateVerificationLevelOptions)(
              null == t ? void 0 : t.hasFeature(F.GuildFeatures.COMMUNITY)
            ).map(e => ({ ...e, tooltipPosition: "left" }));
            return (0, G.mapOptionToHighlightedRowOptions)(e);
          }, [t]),
          r = l.useMemo(
            () =>
              i.find(
                e => e.value === (null == t ? void 0 : t.verificationLevel)
              ),
            [t, i]
          );
        return (0, a.jsxs)("div", {
          className: k.setupContainer,
          children: [
            (0, a.jsxs)("div", {
              className: k.switchItemTextContent,
              children: [
                (0, a.jsx)(d.Text, {
                  color: "header-primary",
                  variant: "text-md/semibold",
                  children: H.default.Messages.FORM_LABEL_VERIFICATION_LEVEL,
                }),
                (0, a.jsx)(d.Text, {
                  color: "header-secondary",
                  variant: "text-sm/normal",
                  children:
                    H.default.Messages.FORM_HELP_VERIFICATION_LEVEL.format(),
                }),
              ],
            }),
            (0, a.jsx)(B.default, {
              changeTitle:
                H.default.Messages.FORM_LABEL_VERIFICATION_LEVEL_CHANGE,
              value: null == r ? void 0 : r.value,
              options: i,
              disabled: !s,
              onChange: n,
            }),
          ],
        });
      }
      function Y(e) {
        let { guild: t, className: s, withDivider: n = !0 } = e,
          r = (0, o.useStateFromStores)(
            [C.default],
            () => null != t && C.default.can(F.Permissions.MANAGE_GUILD, t),
            [t]
          ),
          u = l.useCallback(
            async e => {
              let { value: s } = e;
              try {
                await j.default.saveGuild(t.id, { explicitContentFilter: s }),
                  j.default.updateGuild({ explicitContentFilter: s });
              } catch (e) {
                (0, d.showToast)(
                  (0, d.createToast)(
                    H.default.Messages.GUILD_ANTIRAID_SAFETY_SETUP_ERROR,
                    d.ToastType.FAILURE
                  )
                );
              }
            },
            [t.id]
          ),
          c = l.useMemo(() => {
            let e = (0, G.generateContentFilterHighlightedOptions)(
              null == t ? void 0 : t.hasFeature(F.GuildFeatures.COMMUNITY)
            ).map(e => ({ ...e, tooltipPosition: "left" }));
            return (0, G.mapOptionToHighlightedRowOptions)(e);
          }, [t]),
          E = l.useMemo(
            () =>
              c.find(
                e => e.value === (null == t ? void 0 : t.explicitContentFilter)
              ),
            [t, c]
          );
        return (0, a.jsxs)(a.Fragment, {
          children: [
            n && (0, a.jsx)(d.FormDivider, { className: k.divider }),
            (0, a.jsxs)("div", {
              className: i(k.setupContainer, s),
              children: [
                (0, a.jsxs)("div", {
                  className: k.switchItemTextContent,
                  children: [
                    (0, a.jsx)(d.Text, {
                      color: "header-primary",
                      variant: "text-md/semibold",
                      children:
                        H.default.Messages
                          .FORM_LABEL_EXPLICIT_CONTENT_FILTER_V2,
                    }),
                    (0, a.jsx)(d.Text, {
                      color: "header-secondary",
                      variant: "text-sm/normal",
                      children:
                        H.default.Messages.FORM_HELP_EXPLICIT_CONTENT_FILTER_V2.format(
                          {
                            helpdeskArticle: v.default.getArticleURL(
                              F.HelpdeskArticles.SAFE_DIRECT_MESSAGING
                            ),
                          }
                        ),
                    }),
                  ],
                }),
                (0, a.jsx)(B.default, {
                  changeTitle:
                    H.default.Messages
                      .FORM_LABEL_EXPLICIT_CONTENT_FILTER_CHANGE,
                  value: null == E ? void 0 : E.value,
                  options: c,
                  disabled: !r,
                  onChange: u,
                }),
              ],
            }),
          ],
        });
      }
      async function W(e, t) {
        let s = e.hasFeature(
          F.GuildFeatures.ENABLED_MODERATION_EXPERIENCE_FOR_NON_COMMUNITY
        );
        if (s === t) return;
        let a = e.features;
        return (
          t
            ? a.add(
                F.GuildFeatures.ENABLED_MODERATION_EXPERIENCE_FOR_NON_COMMUNITY
              )
            : a.delete(
                F.GuildFeatures.ENABLED_MODERATION_EXPERIENCE_FOR_NON_COMMUNITY
              ),
          await j.default.saveGuild(e.id, { features: a })
        );
      }
      function z(e) {
        let { guild: t } = e,
          s = (0, o.useStateFromStores)(
            [C.default],
            () => null != t && C.default.can(F.Permissions.MANAGE_GUILD, t),
            [t]
          ),
          n = t.hasFeature(F.GuildFeatures.COMMUNITY),
          i = (0, g.useCanAccessMemberSafetyPage)(t.id),
          [r, u] = l.useState(
            t.hasFeature(
              F.GuildFeatures.ENABLED_MODERATION_EXPERIENCE_FOR_NON_COMMUNITY
            )
          ),
          c = l.useCallback(
            async e => {
              u(e), await W(t, e);
            },
            [t]
          );
        return n || !i
          ? null
          : (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsxs)("div", {
                  className: k.setupContainer,
                  children: [
                    (0, a.jsx)(d.FormSwitch, {
                      value: r,
                      onChange: c,
                      className: k.switchItem,
                      disabled: !s,
                      hideBorder: !0,
                      children: (0, a.jsxs)("div", {
                        className: k.switchItemTextContent,
                        children: [
                          (0, a.jsxs)(d.Text, {
                            color: "header-primary",
                            variant: "text-md/semibold",
                            children: [
                              H.default.Messages
                                .GUILD_SETTINGS_SAFETY_ENABLE_MODERATION_EXPERIENCE,
                              (0, a.jsx)(T.default, { className: k.betaTag }),
                            ],
                          }),
                          (0, a.jsx)(d.Text, {
                            color: "header-secondary",
                            variant: "text-sm/normal",
                            children:
                              H.default.Messages
                                .GUILD_SETTINGS_SAFETY_ENABLE_MODERATION_EXPERIENCE_DESCRIPTION,
                          }),
                        ],
                      }),
                    }),
                    (0, a.jsx)(L.default, {
                      messageType: L.HelpMessageTypes.INFO,
                      textVariant: "text-xs/normal",
                      children:
                        H.default.Messages
                          .GUILD_SETTINGS_SAFETY_MODERATION_EXPERIENCE_IN_COMMUNITY,
                    }),
                  ],
                }),
                (0, a.jsx)(d.FormDivider, { className: k.divider }),
              ],
            });
      }
      function K(e) {
        let { guild: t, mfaLevel: s } = e,
          n = (0, o.useStateFromStores)(
            [C.default],
            () => null != t && C.default.can(F.Permissions.MANAGE_GUILD, t),
            [t]
          ),
          i = (0, o.useStateFromStores)([x.default], () =>
            x.default.getCurrentUser()
          ),
          { isGuildOwnerWithMFA: c, showMFAUserTooltip: E } = l.useMemo(() => {
            if (null == i)
              return { canChangeMFALevel: !1, showMFAUserTooltip: !1 };
            let e = t.isOwnerWithRequiredMfaLevel(i);
            return {
              isGuildOwnerWithMFA: e,
              showMFAUserTooltip: !i.mfaEnabled && t.isOwner(i),
            };
          }, [i, t]),
          _ = s === F.MFALevels.ELEVATED,
          I = (0, r.throttle)(async e => {
            if (!!c)
              !E &&
                (await j.default.updateMFALevel({
                  guildId: t.id,
                  level: e ? F.MFALevels.ELEVATED : F.MFALevels.NONE,
                  isEnabled: !e,
                }));
          }, 1e3);
        return n
          ? (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsx)(d.FormDivider, { className: k.divider }),
                (0, a.jsxs)("div", {
                  className: k.setupContainer,
                  children: [
                    (0, a.jsx)(d.FormSwitch, {
                      value: _,
                      onChange: I,
                      className: k.switchItem,
                      disabled: !c,
                      hideBorder: !0,
                      children: (0, a.jsxs)("div", {
                        className: k.switchItemTextContent,
                        children: [
                          (0, a.jsx)(d.Text, {
                            color: "header-primary",
                            variant: "text-md/semibold",
                            children:
                              H.default.Messages.GUILD_SETTINGS_REQ_MFA_LABEL,
                          }),
                          (0, a.jsx)(d.Text, {
                            color: "header-secondary",
                            variant: "text-sm/normal",
                            children:
                              H.default.Messages.GUILD_SETTINGS_REQ_MFA_BODY,
                          }),
                        ],
                      }),
                    }),
                    E &&
                      (0, a.jsx)(L.default, {
                        messageType: L.HelpMessageTypes.INFO,
                        textVariant: "text-xs/normal",
                        children:
                          H.default.Messages.GUILD_SETTINGS_REQ_MFA_TOOLTIP.format(
                            {
                              onClick: function () {
                                u.default.open(F.UserSettingsSections.ACCOUNT);
                              },
                            }
                          ),
                      }),
                  ],
                }),
              ],
            })
          : null;
      }
      function Z() {
        var e;
        let { guild: t, mfaLevel: s } = (0, o.useStateFromStoresObject)(
            [U.default],
            () => U.default.getProps(),
            []
          ),
          l = (0, o.useStateFromStores)(
            [R.default],
            () => R.default.enabled,
            []
          ),
          { showAlertMode: n } = (0, f.useGuildAlertModeEnabled)(
            null !== (e = null == t ? void 0 : t.id) && void 0 !== e
              ? e
              : F.EMPTY_STRING_SNOWFLAKE_ID
          );
        return null == t
          ? null
          : l
            ? (0, a.jsx)(c.default, {})
            : (0, a.jsxs)(d.FormSection, {
                title: H.default.Messages.SAFETY_SETUP,
                tag: d.FormTitleTags.H1,
                titleClassName: k.headerContainer,
                children: [
                  (0, a.jsx)(z, { guild: t }),
                  (0, a.jsx)(V, { guild: t }),
                  (0, a.jsx)(K, { guild: t, mfaLevel: s }),
                  (0, a.jsx)(Y, { guild: t }),
                  n
                    ? (0, a.jsxs)(a.Fragment, {
                        children: [
                          (0, a.jsx)(d.FormDivider, { className: k.divider }),
                          (0, a.jsx)("div", {
                            className: i(k.setupContainer),
                            children: (0, a.jsx)(b.RaidAlertsSection, {
                              guild: t,
                            }),
                          }),
                        ],
                      })
                    : (0, a.jsx)(w, { guild: t }),
                ],
              });
      }
    },
    187975: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return l;
          },
        });
      var a = s("37983");
      function l(e) {
        return (0, a.jsxs)("svg", {
          ...e,
          width: "10",
          height: "16",
          viewBox: "0 0 10 16",
          fill: "#FF73FA",
          xmlns: "http://www.w3.org/2000/svg",
          children: [
            (0, a.jsx)("path", {
              d: "M5 0.5L0 5.5V10.5L5 15.5L10 10.5V5.5L5 0.5ZM8.75 9.9875L5 13.7375L1.25 9.9875V6.0125L5 2.2625L8.75 6.0125V9.9875Z",
            }),
            (0, a.jsx)("path", {
              d: "M2.5 6.53751V9.46251L5 11.9625L7.5 9.46251V6.53751L5 4.03751L2.5 6.53751Z",
            }),
          ],
        });
      }
      s("884691");
    },
    473126: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return y;
          },
        }),
        s("222007"),
        s("808653");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("597755"),
        o = s.n(r),
        d = s("446674"),
        u = s("862337"),
        c = s("77078"),
        E = s("327037"),
        _ = s("430568"),
        I = s("841098"),
        T = s("95039"),
        f = s("817963"),
        S = s("305122"),
        m = s("235004"),
        N = s("520497"),
        g = s("812809"),
        h = s("697218"),
        C = s("941886"),
        R = s("245307"),
        x = s("945330"),
        L = s("95689"),
        O = s("987772"),
        p = s("368121"),
        A = s("315102"),
        M = s("427459"),
        D = s("773336"),
        v = s("900938"),
        G = s("826485"),
        j = s("49111"),
        U = s("846325"),
        P = s("782340"),
        b = s("6516");
      let B =
        D.isPlatformEmbedded || ("Safari" !== o.name && "Firefox" !== o.name);
      function y() {
        let e = (0, d.useStateFromStores)(
          [v.default],
          () => v.default.getProps().guild
        );
        return null == e
          ? null
          : (0, a.jsx)(c.FormSection, {
              tag: c.FormTitleTags.H1,
              title: P.default.Messages.GUILD_SETTINGS_SOUNDBOARD,
              children: (0, a.jsx)(V, { guild: e }),
            });
      }
      function F(e) {
        let { children: t } = e;
        return (0, a.jsx)(c.Heading, {
          className: b.tableHeader,
          variant: "heading-sm/semibold",
          color: "header-secondary",
          children: t,
        });
      }
      function H(e) {
        let { currentTier: t, availableSounds: s, guildId: l } = e,
          n = (0, M.getTotalSoundboardSoundCountForTier)(t);
        return 0 === t
          ? (0, a.jsx)(a.Fragment, {
              children:
                P.default.Messages.GUILD_SETTINGS_SOUND_LIST_SOUNDS_AVAILABLE.format(
                  { slots: s, totalSlots: n }
                ),
            })
          : (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsx)(c.Tooltip, {
                  text: P.default.Messages.GUILD_SETTINGS_SOUNDBOARD_BOOST_LEVEL.format(
                    { currentBoostLevel: t }
                  ),
                  children: e =>
                    (0, a.jsx)(c.Clickable, {
                      className: b.boostingIconWrapper,
                      onClick: () => {
                        var e;
                        return (
                          (e = l),
                          void (0, T.openGuildBoostingMarketingModal)({
                            guildId: e,
                            location: {
                              section:
                                j.AnalyticsSections.GUILD_SETTINGS_SOUNDBOARD,
                              object: j.AnalyticsObjects.BOOST_GEM_ICON,
                            },
                          })
                        );
                      },
                      tabIndex: -1,
                      children: (0, a.jsx)(R.default, { ...e }),
                    }),
                }),
                P.default.Messages.GUILD_SETTINGS_SOUND_LIST_SOUNDS_AVAILABLE_BOOST_LEVEL.format(
                  { slots: s, totalSlots: n, boostLevel: t }
                ),
              ],
            });
      }
      let k = e => {
          let { renderPopoutBody: t, renderPopoutChildren: s, ...n } = e,
            [i, r] = l.useState(!1),
            o = l.useMemo(() => new u.Timeout(), []),
            d = l.useCallback(() => {
              o.stop(), r(!0);
            }, [o]),
            E = l.useCallback(() => {
              o.start(200, () => r(!1));
            }, [o]);
          return (0, a.jsx)(c.Popout, {
            shouldShow: i,
            renderPopout: e =>
              (0, a.jsx)(c.Dialog, {
                className: b.browserUnsupportedDialog,
                onMouseEnter: d,
                onMouseLeave: E,
                children: t(e),
              }),
            ...n,
            children: e => s(e),
          });
        },
        w = () =>
          (0, a.jsx)(k, {
            renderPopoutBody: () =>
              (0, a.jsx)(c.Text, {
                variant: "text-sm/normal",
                color: "header-secondary",
                children:
                  P.default.Messages.GUILD_SETTINGS_SOUNDBOARD_UPLOAD_SOUND_NOT_SUPPORTED.format(),
              }),
            renderPopoutChildren: e =>
              (0, a.jsx)(c.Button, {
                ...e,
                disabled: !0,
                children:
                  P.default.Messages.GUILD_SETTINGS_SOUNDBOARD_UPLOAD_SOUND,
              }),
          });
      function V(e) {
        let { guild: t } = e,
          [n, i] = (0, d.useStateFromStoresArray)([m.default], () => {
            var e;
            return [
              null !== (e = m.default.getSoundsForGuild(t.id)) && void 0 !== e
                ? e
                : U.EMPTY_SOUND_LIST,
              m.default.isFetchingSounds() ||
                m.default.isFetchingDefaultSounds(),
            ];
          }),
          { canCreateExpressions: r } = (0, f.useManageResourcePermissions)(t),
          o = l.useRef(null),
          u = (0, I.default)(),
          E = t.premiumTier,
          _ = (0, M.getAvailableSoundboardSoundCount)(n, E);
        l.useEffect(() => {
          (0, S.maybeFetchSoundboardSounds)();
        }, []);
        let T = l.useMemo(
            () =>
              n.reduce(
                (e, t) => (
                  (e[t.soundId] = new Audio((0, N.default)(t.soundId))), e
                ),
                {}
              ),
            [n]
          ),
          h = 0 === n.length && !i;
        function R(e) {
          var t;
          null === (t = o.current) || void 0 === t || t.pause();
          let s = T[e.soundId];
          null != s &&
            ((o.current = s),
            (s.currentTime = 0),
            (s.volume = (0, g.default)(e.volume)),
            s.play());
        }
        l.useEffect(
          () => () => {
            var e;
            null === (e = o.current) || void 0 === e || e.pause();
          },
          []
        );
        if (i) return (0, a.jsx)(c.Spinner, {});
        let x = B
          ? (0, a.jsx)(c.Button, {
              onClick: function () {
                (0, c.openModalLazy)(async () => {
                  let { default: e } = await s
                    .el("823749")
                    .then(s.bind(s, "823749"));
                  return s => (0, a.jsx)(e, { ...s, guildId: t.id });
                });
              },
              disabled: _ <= 0 || !r,
              children:
                P.default.Messages.GUILD_SETTINGS_SOUNDBOARD_UPLOAD_SOUND,
            })
          : (0, a.jsx)(w, {});
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsxs)("div", {
              children: [
                (0, a.jsx)(c.Text, {
                  className: b.helpText,
                  variant: "text-sm/normal",
                  color: "header-secondary",
                  children:
                    P.default.Messages.GUILD_SETTINGS_SOUNDBOARD_DESCRIPTION,
                }),
                (0, a.jsx)("div", { className: b.buttons, children: !h && x }),
              ],
            }),
            h
              ? (0, a.jsxs)(C.default, {
                  theme: u,
                  className: b.empty,
                  children: [
                    (0, a.jsx)(C.EmptyStateImage, {
                      darkSrc: s("404807"),
                      lightSrc: s("124495"),
                      width: 272,
                      height: 212,
                    }),
                    (0, a.jsx)(C.EmptyStateText, {
                      note: P.default.Messages.NO_SOUNDS,
                      noteClassName: b.emptyText,
                      children: P.default.Messages.NO_SOUNDS_TITLE,
                    }),
                    x,
                  ],
                })
              : (0, a.jsxs)(a.Fragment, {
                  children: [
                    (0, a.jsx)(c.FormDivider, { className: b.divider }),
                    (0, a.jsx)(c.Heading, {
                      className: b.tableTitle,
                      variant: "heading-md/bold",
                      color: "header-primary",
                      children: (0, a.jsx)(H, {
                        guildId: t.id,
                        currentTier: E,
                        availableSounds: _,
                      }),
                    }),
                    (0, a.jsx)(G.default, {
                      guild: t,
                      numSounds: n.length,
                      isOutOfSlots: 0 === _,
                    }),
                    (0, a.jsxs)("div", {
                      className: b.soundTable,
                      children: [
                        (0, a.jsxs)("div", {
                          className: b.tableHeaders,
                          children: [
                            (0, a.jsx)(F, {
                              children: P.default.Messages.EMOJI,
                            }),
                            (0, a.jsx)(F, {
                              children:
                                P.default.Messages
                                  .GUILD_SETTINGS_SOUND_NAME_COLUMN,
                            }),
                            (0, a.jsx)(F, {
                              children:
                                P.default.Messages
                                  .GUILD_SETTINGS_SOUND_UPLOADER_COLUMN,
                            }),
                          ],
                        }),
                        n.map(e =>
                          (0, a.jsx)(
                            Y,
                            {
                              sound: e,
                              isPlaying: !1,
                              guild: t,
                              onPlaySound: R,
                            },
                            e.soundId
                          )
                        ),
                      ],
                    }),
                  ],
                }),
          ],
        });
      }
      function Y(e) {
        let { sound: t, isPlaying: n, onPlaySound: r, guild: o } = e,
          {
            soundId: u,
            name: I,
            user: T,
            userId: m,
            emojiId: N,
            emojiName: g,
          } = t,
          C = (0, d.useStateFromStores)(
            [h.default],
            () => (null != T ? T : h.default.getUser(m)),
            [m, T]
          ),
          { canManageGuildExpression: R } = (0, f.useManageResourcePermissions)(
            o
          ),
          M = l.useMemo(() => R(t), [t, R]),
          D = null != N || null != g,
          [v, G] = l.useState(!1);
        async function j() {
          if (!v) {
            G(!0);
            try {
              await (0, S.deleteSound)(o.id, u);
            } catch {
              G(!1);
            }
          }
        }
        return (
          l.useEffect(() => {
            null == C && e();
            async function e() {
              await (0, E.getUser)(m);
            }
          }, [C, m]),
          (0, a.jsxs)("div", {
            className: i(b.row, { [b.active]: n }),
            children: [
              D
                ? (0, a.jsx)(_.default, {
                    emojiId: N,
                    emojiName: g,
                    className: b.emoji,
                  })
                : (0, a.jsx)(L.default, { className: b.emoji }),
              (0, a.jsx)(c.Clickable, {
                onClick: () => {
                  !v && r(t);
                },
                className: b.soundName,
                children: (0, a.jsxs)(c.Text, {
                  variant: "text-sm/normal",
                  className: b.soundName,
                  children: [
                    I,
                    " ",
                    (0, a.jsx)(p.default, { className: b.soundPreviewIcon }),
                  ],
                }),
              }),
              null != C &&
                (0, a.jsxs)(c.Text, {
                  className: b.uploaderName,
                  variant: "text-sm/normal",
                  children: [
                    (0, a.jsx)(c.Avatar, {
                      "aria-label": null == C ? void 0 : C.username,
                      size: c.AvatarSizes.SIZE_24,
                      className: b.uploaderAvatar,
                      src: (0, A.getUserAvatarURL)(C, !1, 24),
                    }),
                    null == C ? void 0 : C.username,
                  ],
                }),
              M
                ? (0, a.jsxs)("div", {
                    className: b.soundEditContainer,
                    children: [
                      (0, a.jsx)(c.Clickable, {
                        className: b.soundUpdate,
                        onClick: function (e) {
                          e.stopPropagation(),
                            (0, c.openModalLazy)(async () => {
                              let { default: e } = await s
                                .el("823749")
                                .then(s.bind(s, "823749"));
                              return s =>
                                (0, a.jsx)(e, {
                                  ...s,
                                  guildId: o.id,
                                  existingSound: t,
                                });
                            });
                        },
                        "aria-label": P.default.Messages.EDIT,
                        children: (0, a.jsx)(O.default, {
                          className: b.soundEditIcon,
                        }),
                      }),
                      (0, a.jsx)(c.Clickable, {
                        className: b.soundRemove,
                        onClick: function (e) {
                          e.stopPropagation(),
                            (0, c.openModal)(e =>
                              (0, a.jsx)(c.ConfirmModal, {
                                header:
                                  P.default.Messages.GUILD_SETTINGS_SOUNDBOARD_DELETE_SOUND_TITLE.format(
                                    { soundName: I }
                                  ),
                                confirmText: P.default.Messages.DELETE,
                                cancelText: P.default.Messages.CANCEL,
                                onConfirm: j,
                                ...e,
                                children: (0, a.jsx)(c.Text, {
                                  variant: "text-md/normal",
                                  children:
                                    P.default.Messages.GUILD_SETTINGS_SOUNDBOARD_DELETE_SOUND_BODY.format(
                                      { soundName: I }
                                    ),
                                }),
                              })
                            );
                        },
                        "aria-label": P.default.Messages.REMOVE,
                        children: (0, a.jsx)(x.default, {
                          className: b.soundEditIcon,
                        }),
                      }),
                    ],
                  })
                : null,
            ],
          })
        );
      }
    },
    582372: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return L;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("446674"),
        n = s("77078"),
        i = s("812204"),
        r = s("685665"),
        o = s("95039"),
        d = s("345988"),
        u = s("163732"),
        c = s("364685"),
        E = s("657"),
        _ = s("993105"),
        I = s("427459"),
        T = s("701909"),
        f = s("900938"),
        S = s("49111"),
        m = s("560241"),
        N = s("782340"),
        g = s("986433");
      let h = {
          page: S.AnalyticsPages.GUILD_SETTINGS,
          section: S.AnalyticsSections.GUILD_SETTINGS_STICKERS,
          object: S.AnalyticsObjects.BOOSTING_BANNER,
        },
        C = e => {
          let { guild: t } = e,
            { analyticsLocations: s } = (0, r.default)(),
            l =
              (0, I.getAppliedGuildBoostsRequired)(t.id)[
                S.BoostedGuildTiers.TIER_1
              ] - t.premiumSubscriberCount;
          return (0, a.jsxs)("div", {
            className: g.upsellContainer,
            children: [
              (0, a.jsx)(n.Heading, {
                className: g.upsellHeader,
                variant: "heading-xl/semibold",
                children:
                  N.default.Messages.GUILD_SETTINGS_STICKERS_UPSELL_TITLE,
              }),
              (0, a.jsx)(n.Text, {
                className: g.upsellDescription,
                variant: "text-md/normal",
                children:
                  N.default.Messages
                    .GUILD_SETTINGS_STICKERS_UPSELL_DESCRIPTION_FREE_SLOTS,
              }),
              (0, a.jsxs)("div", {
                className: g.upsellButtons,
                children: [
                  (0, a.jsx)(n.Button, {
                    className: g.upsellButtonPrimary,
                    innerClassName: g.upsellButton,
                    color: n.Button.Colors.WHITE,
                    onClick: () =>
                      (0, u.default)({
                        analyticsLocations: s,
                        analyticsLocation: h,
                        guildId: t.id,
                        totalNumberOfSlotsToAssign: l,
                      }),
                    children:
                      N.default.Messages.GUILD_SETTINGS_STICKERS_BOOST_SERVER,
                  }),
                  (0, a.jsx)(n.Button, {
                    innerClassName: g.upsellButton,
                    color: n.Button.Colors.WHITE,
                    onClick: () =>
                      (0, o.openGuildBoostingMarketingModal)({
                        guildId: t.id,
                        location: {
                          section: S.AnalyticsSections.GUILD_SETTINGS_STICKERS,
                        },
                      }),
                    children: N.default.Messages.LEARN_MORE,
                  }),
                ],
              }),
            ],
          });
        },
        R = () =>
          (0, a.jsxs)(n.FormSection, {
            title:
              N.default.Messages
                .GUILD_SETTINGS_STICKERS_UPLOAD_AUTO_RESIZE_HEADING,
            children: [
              (0, a.jsx)(n.FormText, {
                type: n.FormTextTypes.DESCRIPTION,
                children:
                  N.default.Messages.GUILD_SETTINGS_STICKERS_UPLOAD_AUTO_RESIZE_INSTRUCTIONS.format(
                    {
                      fileSize: (0, _.formatKbSize)(m.MAX_STICKER_FILE_SIZE, {
                        useKibibytes: !0,
                      }),
                    }
                  ),
              }),
              (0, a.jsx)(n.FormText, {
                type: n.FormTextTypes.DESCRIPTION,
                children:
                  N.default.Messages.GUILD_SETTINGS_STICKERS_UPLOAD_AUTO_RESIZE_HELP.format(
                    {
                      articleUrl: T.default.getArticleURL(
                        S.HelpdeskArticles.STICKERS_UPLOAD
                      ),
                    }
                  ),
              }),
            ],
          }),
        x = e => {
          let t,
            s,
            l,
            { guild: n, guildStickers: i } = e,
            r = n.premiumTier,
            o = (0, I.getAvailableStickerSlotCount)(i, r),
            u = (0, I.getNextTier)(r, n.id),
            c = (0, I.getTotalStickerCountForTier)(r),
            E = i.length;
          return null == u || r === S.BoostedGuildTiers.TIER_3 || o > 0
            ? (0, a.jsx)(a.Fragment, {})
            : (E > c
                ? ((t =
                    N.default.Messages.GUILD_SETTINGS_STICKERS_UPSELL_BANNER_TOO_MANY_STICKERS_HEADER.format(
                      { level: u }
                    )),
                  (s =
                    N.default.Messages.GUILD_SETTINGS_STICKERS_UPSELL_BANNER_TOO_MANY_STICKERS_TEXT.format(
                      { level: u }
                    )),
                  (l = S.AnalyticsObjects.BOOST_UPSELL_BANNER_LOST_LEVEL))
                : ((t =
                    N.default.Messages
                      .PREMIUM_GUILD_SUBSCRIPTION_UPSELL_BANNER_HEADER),
                  (s =
                    N.default.Messages.GUILD_SETTINGS_STICKERS_UPSELL_BANNER_TEXT.format(
                      {
                        level: u,
                        numAdditional: (0, I.getIncrementalStickerCountForTier)(
                          u
                        ),
                      }
                    )),
                  (l = S.AnalyticsObjects.BOOST_UPSELL_BANNER_SLOTS_FULL)),
              (0, a.jsx)(d.default, {
                header: t,
                text: s,
                guild: n,
                analyticsLocation: {
                  page: S.AnalyticsPages.GUILD_SETTINGS,
                  section: S.AnalyticsSections.GUILD_SETTINGS_STICKERS,
                  object: l,
                  objectType: (0, I.boostedGuildTierToAnalyticsObjectType)(u),
                },
              }));
        };
      var L = () => {
        let e = (0, l.useStateFromStores)([f.default], () =>
            f.default.getGuild()
          ),
          t = (0, l.useStateFromStores)(
            [c.default],
            () => {
              var t;
              return null != e &&
                null !== (t = c.default.getStickersByGuildId(e.id)) &&
                void 0 !== t
                ? t
                : [];
            },
            [e]
          ),
          { AnalyticsLocationProvider: s } = (0, r.default)(i.default.STICKERS);
        if (null == e) return null;
        let o = e.premiumTier !== S.BoostedGuildTiers.NONE || t.length > 0;
        return (0, a.jsx)(s, {
          children: (0, a.jsxs)(n.FormSection, {
            title: N.default.Messages.GUILD_SETTINGS_STICKERS,
            tag: n.FormTitleTags.H1,
            children: [
              o
                ? (0, a.jsxs)("div", {
                    children: [
                      (0, a.jsx)(x, { guild: e, guildStickers: t }),
                      (0, a.jsx)(R, {}),
                    ],
                  })
                : (0, a.jsx)(C, { guild: e }),
              (0, a.jsx)(n.FormDivider, { className: g.divider }),
              (0, a.jsx)(E.default, { guild: e }),
            ],
          }),
        });
      };
    },
    789123: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          GuildSettingsTemplateMetadataStore: function () {
            return p;
          },
          GuildSettingsTemplateNotice: function () {
            return A;
          },
          default: function () {
            return M;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("627445"),
        o = s.n(r),
        d = s("446674"),
        u = s("669491"),
        c = s("77078"),
        E = s("913144"),
        _ = s("913801"),
        I = s("45299"),
        T = s("448993"),
        f = s("883069"),
        S = s("569808"),
        m = s("658329"),
        N = s("578706"),
        g = s("381546"),
        h = s("900938"),
        C = s("579033"),
        R = s("782340"),
        x = s("987107"),
        L = s("890957");
      class O extends d.default.Store {
        getTemplate() {
          let e = h.default.getProps().guild;
          if (null == e) return null;
          let t = S.default.getForGuild(e.id);
          return null != t && t.state !== C.GuildTemplateStates.RESOLVING
            ? t
            : null;
        }
        showNotice() {
          let e = this.getTemplate();
          return (
            null != e &&
            null != this.name &&
            "" !== this.name &&
            (this.name.trim() !== e.name ||
              this.description.trim() !== e.description)
          );
        }
        constructor(...e) {
          super(...e),
            (this.name = ""),
            (this.description = ""),
            (this.error = null),
            (this.reset = () => {
              let e = this.getTemplate();
              if (null != e) {
                var t, s;
                (this.name =
                  null !== (t = e.name) && void 0 !== t ? t : this.name),
                  (this.description =
                    null !== (s = e.description) && void 0 !== s
                      ? s
                      : this.description);
              } else (this.name = ""), (this.description = "");
              this.emitChange();
            }),
            (this.setName = e => {
              (this.name = e), this.emitChange();
            }),
            (this.setDescription = e => {
              (this.description = e), this.emitChange();
            }),
            (this.setError = e => {
              (this.error = e), this.emitChange();
            }),
            (this.save = async () => {
              await f.default.updateGuildTemplate(
                h.default.getProps().guild.id,
                this.getTemplate().code,
                this.name,
                this.description
              ),
                this.emitChange();
            });
        }
      }
      O.displayName = "GuildSettingsTemplateMetadataStore_";
      let p = new O(E.default);
      function A() {
        let [e, t] = l.useState(!1),
          s = async () => {
            t(!0), await p.save(), t(!1);
          };
        return (0, a.jsx)(I.default, {
          submitting: e,
          onReset: p.reset,
          onSave: s,
        });
      }
      function M() {
        return (0, a.jsx)(c.FormSection, {
          className: L.marginBottom4,
          children: (0, a.jsxs)(c.HeadingLevel, {
            component: (0, a.jsx)(c.FormTitle, {
              tag: c.FormTitleTags.H1,
              children: R.default.Messages.GUILD_TEMPLATES,
            }),
            children: [
              (0, a.jsx)(c.FormText, {
                className: L.marginBottom20,
                type: c.FormTextTypes.DESCRIPTION,
                children:
                  R.default.Messages.GUILD_TEMPLATE_SETTINGS_DESCRIPTION.format(),
              }),
              (0, a.jsx)(v, {}),
              (0, a.jsx)(c.FormDivider, { className: x.divider }),
              (0, a.jsx)(D, {}),
            ],
          }),
        });
      }
      function D() {
        let { guild: e } = h.default.getProps();
        o(null != e, "guild cannot be null");
        let t = (0, d.useStateFromStores)([p], () => p.error),
          [s, n] = l.useState(!0),
          { loading: i, guildTemplate: r } = (function (e) {
            let [t, s] = l.useState(!0);
            l.useEffect(() => {
              (async function t() {
                s(!0);
                try {
                  await f.default.loadTemplatesForGuild(e), s(!1);
                } catch (e) {
                  p.setError(new T.APIError(e));
                }
              })();
            }, [e]);
            let a = (0, d.useStateFromStores)(
              [S.default],
              () => S.default.getForGuild(e),
              [e]
            );
            return { loading: t, guildTemplate: a };
          })(e.id);
        if (
          (l.useEffect(() => {
            if (s && !i) {
              if (null != r) {
                var e, t;
                p.setName(null !== (e = r.name) && void 0 !== e ? e : ""),
                  p.setDescription(
                    null !== (t = r.description) && void 0 !== t ? t : ""
                  );
              }
              n(!1);
            }
          }, [s, r, i]),
          l.useEffect(
            () => () => {
              p.reset(), p.setError(null);
            },
            []
          ),
          s)
        )
          return null != t
            ? (0, a.jsx)(c.Text, {
                color: "text-danger",
                variant: "text-sm/normal",
                children: t.message,
              })
            : (0, a.jsx)(c.Spinner, { className: L.marginTop40 });
        let u =
          null != t &&
          null == t.getFirstFieldErrorMessage("name") &&
          null == t.getFirstFieldErrorMessage("description");
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(j, {}),
            (0, a.jsx)(U, { guild: e, guildTemplate: r }),
            u
              ? (0, a.jsx)(c.Text, {
                  className: L.marginTop8,
                  color: "text-danger",
                  variant: "text-sm/normal",
                  children: t.getAnyErrorMessage(),
                })
              : null,
          ],
        });
      }
      function v() {
        return (0, a.jsxs)("div", {
          className: x.descriptionBox,
          children: [
            (0, a.jsxs)("div", {
              className: x.descriptionSection,
              children: [
                (0, a.jsx)(c.Heading, {
                  variant: "eyebrow",
                  children:
                    R.default.Messages
                      .GUILD_TEMPLATES_FORM_DESCRIPTION_WILL_COPY,
                }),
                (0, a.jsxs)("div", {
                  className: x.descriptionRow,
                  children: [
                    (0, a.jsx)(N.default, {
                      className: x.descriptionIcon,
                      color: u.default.unsafe_rawColors.GREEN_360.css,
                      backgroundColor: u.default.unsafe_rawColors.WHITE_500.css,
                    }),
                    R.default.Messages
                      .GUILD_TEMPLATES_FORM_DESCRIPTION_CHANNELS,
                  ],
                }),
                (0, a.jsxs)("div", {
                  className: x.descriptionRow,
                  children: [
                    (0, a.jsx)(N.default, {
                      className: x.descriptionIcon,
                      color: u.default.unsafe_rawColors.GREEN_360.css,
                      backgroundColor: u.default.unsafe_rawColors.WHITE_500.css,
                    }),
                    R.default.Messages.GUILD_TEMPLATES_FORM_DESCRIPTION_ROLES,
                  ],
                }),
                (0, a.jsxs)("div", {
                  className: x.descriptionRow,
                  children: [
                    (0, a.jsx)(N.default, {
                      className: x.descriptionIcon,
                      color: u.default.unsafe_rawColors.GREEN_360.css,
                      backgroundColor: u.default.unsafe_rawColors.WHITE_500.css,
                    }),
                    R.default.Messages
                      .GUILD_TEMPLATES_FORM_DESCRIPTION_SETTINGS,
                  ],
                }),
              ],
            }),
            (0, a.jsxs)("div", {
              className: x.descriptionSection,
              children: [
                (0, a.jsx)(c.Heading, {
                  variant: "eyebrow",
                  children:
                    R.default.Messages
                      .GUILD_TEMPLATES_FORM_DESCRIPTION_WONT_COPY,
                }),
                (0, a.jsxs)("div", {
                  className: x.descriptionRow,
                  children: [
                    (0, a.jsx)(g.default, {
                      className: x.descriptionIcon,
                      color: u.default.unsafe_rawColors.RED_400.css,
                      backgroundColor: u.default.unsafe_rawColors.WHITE_500.css,
                    }),
                    R.default.Messages
                      .GUILD_TEMPLATES_FORM_DESCRIPTION_MESSAGES,
                  ],
                }),
                (0, a.jsxs)("div", {
                  className: x.descriptionRow,
                  children: [
                    (0, a.jsx)(g.default, {
                      className: x.descriptionIcon,
                      color: u.default.unsafe_rawColors.RED_400.css,
                      backgroundColor: u.default.unsafe_rawColors.WHITE_500.css,
                    }),
                    R.default.Messages.GUILD_TEMPLATES_FORM_DESCRIPTION_MEMBERS,
                  ],
                }),
                (0, a.jsxs)("div", {
                  className: x.descriptionRow,
                  children: [
                    (0, a.jsx)(g.default, {
                      className: x.descriptionIcon,
                      color: u.default.unsafe_rawColors.RED_400.css,
                      backgroundColor: u.default.unsafe_rawColors.WHITE_500.css,
                    }),
                    R.default.Messages.GUILD_TEMPLATES_FORM_DESCRIPTION_PERKS,
                  ],
                }),
              ],
            }),
          ],
        });
      }
      function G(e) {
        let { cancel: t, confirm: s } = e;
        return (0, a.jsx)(c.DeclarativeConfirmModal, {
          dismissable: !0,
          header: R.default.Messages.GUILD_TEMPLATES_DELETE_TEMPLATE,
          confirmText: R.default.Messages.GUILD_TEMPLATES_DELETE_TEMPLATE,
          cancelText: R.default.Messages.CANCEL,
          onCancel: t,
          onConfirm: s,
          children: (0, a.jsx)(c.Text, {
            variant: "text-md/normal",
            color: "text-normal",
            children: R.default.Messages.GUILD_TEMPLATES_DELETE_DESCRIPTION,
          }),
        });
      }
      function j() {
        let e = (0, d.useStateFromStores)([p], () => p.name),
          t = (0, d.useStateFromStores)([p], () => p.description),
          s = (0, d.useStateFromStores)([p], () => p.error);
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(c.FormItem, {
              className: L.marginBottom20,
              title: R.default.Messages.GUILD_TEMPLATES_FORM_LABEL_NAME,
              error: null == s ? void 0 : s.getFirstFieldErrorMessage("name"),
              children: (0, a.jsx)(c.TextInput, {
                value: e,
                onChange: e => p.setName(e),
                placeholder:
                  R.default.Messages.GUILD_TEMPLATES_FORM_PLACEHOLDER_NAME,
                maxLength: 100,
              }),
            }),
            (0, a.jsx)(c.FormItem, {
              className: L.marginBottom20,
              title: R.default.Messages.GUILD_TEMPLATES_FORM_LABEL_DESCRIPTION,
              error:
                null == s ? void 0 : s.getFirstFieldErrorMessage("description"),
              children: (0, a.jsx)(c.TextArea, {
                value: t,
                onChange: e => p.setDescription(e),
                placeholder:
                  R.default.Messages
                    .GUILD_TEMPLATES_FORM_PLACEHOLDER_DESCRIPTION,
                maxLength: 120,
              }),
            }),
          ],
        });
      }
      function U(e) {
        let { guild: t, guildTemplate: s } = e;
        return null == s
          ? (0, a.jsx)(P, { guild: t })
          : (0, a.jsxs)(a.Fragment, {
              children: [
                (0, a.jsx)(c.FormItem, {
                  title: R.default.Messages.GUILD_TEMPLATES_FORM_LABEL_LINK,
                  children: (0, a.jsx)(_.default, {
                    buttonLook: c.Button.Looks.FILLED,
                    buttonColor: c.Button.Colors.BRAND,
                    value: (0, m.default)(s.code),
                  }),
                }),
                s.isDirty &&
                  (0, a.jsx)(c.Text, {
                    color: "text-warning",
                    className: L.marginTop8,
                    variant: "text-sm/normal",
                    children:
                      R.default.Messages.GUILD_TEMPLATES_UNSYNCED_WARNING,
                  }),
                (0, a.jsxs)("div", {
                  className: i(L.marginTop20, x.buttonContainer),
                  children: [
                    s.isDirty && (0, a.jsx)(b, { guild: t, guildTemplate: s }),
                    (0, a.jsxs)("div", {
                      className: x.rightButtonContainer,
                      children: [
                        (0, a.jsx)(B, { guild: t, guildTemplate: s }),
                        (0, a.jsx)(y, { guildTemplate: s }),
                      ],
                    }),
                  ],
                }),
                s.isDirty &&
                  (0, a.jsx)("div", {
                    className: x.lastSync,
                    children:
                      R.default.Messages.GUILD_TEMPLATES_LAST_SYNC.format({
                        timestamp: new Date(s.updatedAt),
                      }),
                  }),
              ],
            });
      }
      function P(e) {
        var t;
        let { guild: s } = e,
          n = (0, d.useStateFromStores)([p], () => p.name),
          [i, r] = l.useState(!1),
          o = async () => {
            p.setError(null), r(!0);
            try {
              await f.default.createGuildTemplate(s.id, p.name, p.description);
            } catch (e) {
              p.setError(new T.APIError(e));
            }
            r(!1);
          };
        return (0, a.jsx)(c.Button, {
          submitting: i,
          disabled: !(null != (t = n) && t.trim().length >= 2),
          color: c.Button.Colors.BRAND,
          onClick: o,
          children: R.default.Messages.GUILD_TEMPLATES_CREATE_LINK,
        });
      }
      function b(e) {
        let { guild: t, guildTemplate: s } = e,
          [n, i] = l.useState(!1),
          r = async () => {
            p.setError(null), i(!0);
            try {
              await f.default.syncGuildTemplate(t.id, s.code);
            } catch (e) {
              p.setError(new T.APIError(e));
            }
            i(!1);
          };
        return (0, a.jsx)(c.Button, {
          submitting: n,
          className: x.button,
          onClick: r,
          children: R.default.Messages.GUILD_TEMPLATES_SYNC_TEMPLATE,
        });
      }
      function B(e) {
        let { guild: t, guildTemplate: s } = e,
          [n, i] = l.useState(!1),
          r = async () => {
            p.setError(null);
            try {
              await f.default.deleteGuildTemplate(t.id, s.code),
                p.setName(""),
                p.setDescription("");
            } catch (e) {
              p.setError(new T.APIError(e));
            }
            i(!1);
          };
        return (0, a.jsxs)(a.Fragment, {
          children: [
            (0, a.jsx)(c.Button, {
              look: c.Button.Looks.OUTLINED,
              className: x.button,
              color: c.Button.Colors.RED,
              onClick: () => i(!0),
              children: R.default.Messages.GUILD_TEMPLATES_DELETE_TEMPLATE,
            }),
            n ? (0, a.jsx)(G, { confirm: r, cancel: () => i(!1) }) : null,
          ],
        });
      }
      function y(e) {
        let { guildTemplate: t } = e;
        return (0, a.jsx)(c.Button, {
          color: c.Button.Colors.PRIMARY,
          className: x.button,
          onClick: () =>
            (0, c.openModalLazy)(async () => {
              let { default: e } = await s
                .el("843456")
                .then(s.bind(s, "843456"));
              return s => (0, a.jsx)(e, { ...s, guildTemplate: t });
            }),
          children: R.default.Messages.GUILD_TEMPLATES_PREVIEW_TEMPLATE,
        });
      }
    },
    78730: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("782340"),
        n = s("988341");
      function i(e) {
        let { showDirtyIndicator: t } = e;
        return t
          ? (0, a.jsxs)("div", {
              className: n.container,
              children: [
                l.default.Messages.GUILD_TEMPLATES,
                (0, a.jsx)("div", { className: n.dot }),
              ],
            })
          : (0, a.jsx)(a.Fragment, {
              children: l.default.Messages.GUILD_TEMPLATES,
            });
      }
    },
    757120: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          GuildSettingsVanityURLNotice: function () {
            return D;
          },
          default: function () {
            return G;
          },
        }),
        s("781738"),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("446674"),
        o = s("77078"),
        d = s("642950"),
        u = s("45299"),
        c = s("812204"),
        E = s("716241"),
        _ = s("685665"),
        I = s("634544"),
        T = s("379532"),
        f = s("52393"),
        S = s("102985"),
        m = s("409633"),
        N = s("181114"),
        g = s("118503"),
        h = s("427459"),
        C = s("900938"),
        R = s("610494"),
        x = s("914581"),
        L = s("11893"),
        O = s("49111"),
        p = s("944305"),
        A = s("782340"),
        M = s("705289");
      let D = r.default.connectStores([C.default, x.default], () => {
        let e = x.default.vanityURLCode,
          t = C.default.getGuildId();
        return {
          vanityURLCode: e,
          guildId: t,
          onReset() {
            (0, R.resetCode)();
          },
          onSave() {
            null != t && (0, R.saveCode)(t, e);
          },
        };
      })(u.default);
      class v extends l.PureComponent {
        componentWillUnmount() {
          (0, R.close)();
        }
        renderEditCard() {
          let { isRemoving: e } = this.state,
            {
              hasError: t,
              originalVanityURLCode: s,
              vanityURLCode: l,
              vanityURLUses: n,
              guild: i,
            } = this.props;
          if (null == l) return (0, a.jsx)(o.Spinner, {});
          let r =
            (null == i ? void 0 : i.hasFeature(O.GuildFeatures.VANITY_URL)) ===
            !0;
          return (0, a.jsxs)(o.Card, {
            editable: !0,
            className: M.editVanityUrlCard,
            children: [
              (0, a.jsxs)(o.FormTitle, {
                className: M.formTitle,
                children: [
                  (0, a.jsx)("div", {
                    className: M.formTitleField,
                    children: A.default.Messages.INVITE_URL,
                  }),
                  l.length > 0
                    ? (0, a.jsx)("div", {
                        children: A.default.Messages.VANITY_URL_USES.format({
                          uses: n,
                        }),
                      })
                    : null,
                ],
              }),
              (0, a.jsx)(m.default, {
                prefix: "".concat("https://discord.gg", "/"),
                value: l,
                onChange: this.handleInviteCodeChange,
                maxLength: 25,
                autoFocus: !0,
                error: t,
                disabled: !r,
              }),
              null != s && s.length > 0
                ? (0, a.jsx)(o.Button, {
                    className: M.removeVanityUrlButton,
                    onClick: this.handleRemoveVanityURL,
                    submitting: e,
                    look: o.Button.Looks.LINK,
                    size: o.Button.Sizes.MIN,
                    color: o.Button.Colors.RED,
                    children: A.default.Messages.REMOVE_VANITY_URL,
                  })
                : null,
            ],
          });
        }
        renderUpsellButton() {
          return (0, a.jsxs)(N.default, {
            color: o.Button.Colors.GREEN,
            className: i(M.marginTop16),
            innerClassName: M.upsellButton,
            onClick: this.handleVanityUrlUpsellButton,
            children: [
              (0, a.jsx)(g.default, {
                height: 16,
                width: 16,
                className: M.premiumUpsellBadge,
              }),
              " ",
              A.default.Messages.PREMIUM_GUILD_UNLOCK_WTH_BOOSTING_CTA,
            ],
          });
        }
        renderInfo() {
          let {
            hasError: e,
            errorDetails: t,
            originalVanityURLCode: s,
          } = this.props;
          if (e)
            return (0, a.jsx)(o.Text, {
              variant: "text-md/normal",
              color: "text-danger",
              className: M.marginTop20,
              children: (0, L.getErrorMessageFromErrorCode)(
                null == t ? void 0 : t.code
              ),
            });
          if (null != s && s.length > 0) {
            let e = (0, f.default)(s);
            return (0, a.jsx)(o.FormText, {
              className: M.marginTop20,
              type: o.FormTextTypes.LABEL_DESCRIPTOR,
              children: A.default.Messages.VANITY_URL_HELP_EXTENDED_LINK.format(
                { urlText: e, urlValue: e }
              ),
            });
          }
        }
        handleRemoveVanityURL() {
          (0, R.setCode)("");
        }
        handleInviteCodeChange(e) {
          (0, R.setCode)(e.replace(/ /g, "-"));
        }
        render() {
          let { hide: e, guild: t } = this.props;
          return null == t
            ? null
            : e
              ? (0, a.jsx)(d.default, {})
              : (0, a.jsxs)(o.FormSection, {
                  children: [
                    (0, a.jsxs)(o.FormTitle, {
                      tag: o.FormTitleTags.H1,
                      className: M.flexFormTitle,
                      children: [
                        (0, a.jsx)("div", {
                          children: A.default.Messages.VANITY_URL,
                        }),
                        (0, a.jsx)(I.default, {
                          guild: t,
                          guildFeature: O.GuildFeatures.VANITY_URL,
                          className: M.guildFeatureAvailabilityIndicator,
                          onClick: this.handleVanityUrlUpsellIndicator,
                        }),
                      ],
                    }),
                    (0, a.jsx)(o.FormText, {
                      type: o.FormTextTypes.DESCRIPTION,
                      className: M.marginBottom8,
                      children: A.default.Messages.VANITY_URL_HELP,
                    }),
                    (0, a.jsx)(o.FormText, {
                      type: o.FormTextTypes.DESCRIPTION,
                      className: M.marginBottom20,
                      children: A.default.Messages.VANITY_URL_HELP_CONFLICT,
                    }),
                    (0, a.jsx)(o.FormText, {
                      type: o.FormTextTypes.DESCRIPTION,
                      className: M.marginBottom20,
                      children: A.default.Messages.VANITY_URL_DEFAULT_CHANNEL,
                    }),
                    (0, L.canSeeVanityUrlSettings)(t)
                      ? this.renderEditCard()
                      : this.renderUpsellButton(),
                    this.renderInfo(),
                  ],
                });
        }
        constructor(...e) {
          super(...e),
            (this.state = { isRemoving: !1 }),
            (this.handleShowModalUpsell = (e, t, s, a, l) => {
              e.preventDefault(), e.stopPropagation();
              let { guild: n, analyticsLocations: i } = this.props;
              null != n &&
                ((0, E.trackWithMetadata)(
                  O.AnalyticEvents.PREMIUM_GUILD_PROMOTION_OPENED,
                  {
                    location: {
                      section: s,
                      object: O.AnalyticsObjects.LEARN_MORE,
                      objectType: (0, h.boostedGuildTierToAnalyticsObjectType)(
                        t
                      ),
                      location_stack: i,
                    },
                    guild_id: null == n ? void 0 : n.id,
                  }
                ),
                (0, T.default)({
                  analyticsLocations: i,
                  analyticsSourceLocation: {
                    section: s,
                    object: a,
                    page: O.AnalyticsPages.GUILD_SETTINGS,
                  },
                  guild: n,
                  perks: l,
                }));
            }),
            (this.handleVanityUrlUpsellIndicator = e => {
              this.handleShowModalUpsell(
                e,
                O.BoostedGuildTiers.TIER_3,
                O.AnalyticsSections.GUILD_SETTINGS_VANITY_URL,
                O.AnalyticsObjects.BADGE,
                (0, p.vanityUrlUpsellPerks)()
              );
            }),
            (this.handleVanityUrlUpsellButton = e => {
              this.handleShowModalUpsell(
                e,
                O.BoostedGuildTiers.TIER_3,
                O.AnalyticsSections.GUILD_SETTINGS_VANITY_URL,
                O.AnalyticsObjects.BUTTON_CTA,
                (0, p.vanityUrlUpsellPerks)()
              );
            });
        }
      }
      function G() {
        let e = (0, r.useStateFromStores)([C.default], () =>
            C.default.getGuild()
          ),
          t = (0, r.useStateFromStoresObject)([x.default], () => ({
            vanityURLCode: x.default.vanityURLCode,
            vanityURLUses: x.default.vanityURLUses,
            originalVanityURLCode: x.default.originalVanityURLCode,
            hasError: x.default.hasError(),
            errorDetails: x.default.errorDetails,
          })),
          s = (0, r.useStateFromStores)(
            [S.default],
            () => S.default.hideInstantInvites
          ),
          { analyticsLocations: l, AnalyticsLocationProvider: n } = (0,
          _.default)(c.default.VANITY_URL);
        return (0, a.jsx)(n, {
          children: (0, a.jsx)(v, {
            guild: e,
            ...t,
            hide: s,
            analyticsLocations: l,
          }),
        });
      }
    },
    310490: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return O;
          },
        }),
        s("222007"),
        s("843762");
      var a = s("37983"),
        l = s("884691"),
        n = s("917351"),
        i = s.n(n),
        r = s("316693"),
        o = s("446674"),
        d = s("77078"),
        u = s("642950"),
        c = s("913801"),
        E = s("679653"),
        _ = s("923959"),
        I = s("957255"),
        T = s("27618"),
        f = s("102985"),
        S = s("697218"),
        m = s("592407"),
        N = s("900938"),
        g = s("49111"),
        h = s("782340"),
        C = s("927253");
      let R = "NO_INSTANT_INVITE",
        x = r.default.combine(
          g.Permissions.VIEW_CHANNEL,
          g.Permissions.CREATE_INSTANT_INVITE
        );
      class L extends l.PureComponent {
        static getDerivedStateFromProps(e, t) {
          let { widgetEnabled: s } = e,
            { widgetEnabledProp: a } = t;
          return s !== a ? { internalEnabled: s, widgetEnabledProp: s } : null;
        }
        renderChannelSelect(e) {
          let { widgetChannelId: t } = this.props,
            s = _.default.getChannels(e.id),
            l = i([
              ...s[_.GUILD_SELECTABLE_CHANNELS_KEY],
              ...s[_.GUILD_VOCAL_CHANNELS_KEY],
            ])
              .filter(t => {
                let { channel: s } = t;
                return s.guild_id === e.id;
              })
              .filter(e => {
                let { channel: s } = e;
                return s.id === t || I.default.can(x, s);
              })
              .map(e => {
                let { channel: t } = e;
                return {
                  value: t.id,
                  label: (0, E.computeChannelName)(t, S.default, T.default, !0),
                };
              })
              .value();
          return (
            l.unshift({
              value: R,
              label: h.default.Messages.NO_INSTANT_INVITE,
            }),
            (0, a.jsxs)(d.FormItem, {
              title: h.default.Messages.FORM_LABEL_INSTANT_INVITE_CHANNEL,
              children: [
                (0, a.jsx)(d.SingleSelect, {
                  className: C.spacing,
                  options: l,
                  value: t,
                  onChange: this.handleChannelSelect,
                }),
                (0, a.jsx)(d.FormText, {
                  type: d.FormTextTypes.DESCRIPTION,
                  children: h.default.Messages.FORM_HELP_INSTANT_INVITE_CHANNEL,
                }),
              ],
            })
          );
        }
        renderAPIInfo(e) {
          let t = ""
            .concat(location.protocol)
            .concat(window.GLOBAL_ENV.API_ENDPOINT, "/guilds/")
            .concat(e.id, "/widget.json");
          return (0, a.jsxs)("div", {
            className: C.infoWrapper,
            children: [
              (0, a.jsx)(d.FormItem, {
                title: h.default.Messages.FORM_LABEL_SERVER_ID,
                className: C.infoItem,
                children: (0, a.jsx)(c.default, { value: e.id }),
              }),
              (0, a.jsx)(d.FormItem, {
                title: h.default.Messages.FORM_LABEL_JSON_API,
                className: C.infoItem,
                children: (0, a.jsx)(c.default, { value: t }),
              }),
            ],
          });
        }
        renderWidget(e) {
          let t = ""
            .concat(location.protocol)
            .concat(window.GLOBAL_ENV.WIDGET_ENDPOINT, "?id=")
            .concat(e.id, "&theme=dark");
          return (0, a.jsx)("div", {
            children: (0, a.jsxs)("div", {
              className: C.infoWrapper,
              children: [
                (0, a.jsxs)(d.FormItem, {
                  className: C.infoItem,
                  title: h.default.Messages.FORM_LABEL_PREMADE_WIDGET,
                  children: [
                    (0, a.jsx)(c.default, {
                      value: '<iframe src="'.concat(
                        t,
                        '" width="350" height="500" allowtransparency="true" frameborder="0" sandbox="allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts"></iframe>'
                      ),
                    }),
                    (0, a.jsx)(d.FormText, {
                      type: d.FormTextTypes.DESCRIPTION,
                      children:
                        h.default.Messages.GUILD_SETTINGS_WIDGET_EMBED_HELP.format(),
                    }),
                  ],
                }),
                (0, a.jsx)("img", {
                  className: C.infoItem,
                  "data-accessibility": "desaturate",
                  alt: "",
                  src: s("94944"),
                }),
              ],
            }),
          });
        }
        render() {
          let { guild: e } = this.props;
          return null == e
            ? null
            : this.props.hide
              ? (0, a.jsx)(u.default, {})
              : (0, a.jsxs)(d.FormSection, {
                  tag: d.FormTitleTags.H1,
                  title: h.default.Messages.GUILD_SETTINGS_TITLE_SERVER_WIDGET,
                  children: [
                    this.renderToggle(),
                    this.renderChannelSelect(e),
                    (0, a.jsx)(d.FormDivider, { className: C.divider }),
                    this.renderAPIInfo(e),
                    (0, a.jsx)(d.FormDivider, { className: C.divider }),
                    this.renderWidget(e),
                  ],
                });
        }
        constructor(...e) {
          super(...e),
            (this.state = {
              internalEnabled: this.props.widgetEnabled,
              widgetEnabledProp: this.props.widgetEnabled,
            }),
            (this.renderToggle = () =>
              (0, a.jsx)(d.FormSwitch, {
                className: C.spacing,
                value: this.state.internalEnabled,
                onChange: this.handleToggleWidget,
                children:
                  h.default.Messages.GUILD_SETTINGS_WIDGET_ENABLE_WIDGET,
              })),
            (this.handleToggleWidget = e => {
              let { guild: t, widgetChannelId: s } = this.props;
              null != t &&
                (this.setState({ internalEnabled: e }),
                m.default.updateEmbed(t.id, e, s));
            }),
            (this.handleChannelSelect = e => {
              let { guild: t, widgetEnabled: s } = this.props;
              null != t && m.default.updateEmbed(t.id, s, e !== R ? e : null);
            });
        }
      }
      var O = o.default.connectStores([N.default, f.default], () => {
        let {
          guild: e,
          embedChannelId: t,
          embedEnabled: s,
        } = N.default.getProps();
        return {
          guild: e,
          widgetChannelId: t,
          widgetEnabled: s,
          hide: f.default.enabled,
        };
      })(L);
    },
    275252: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return u;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("77078"),
        o = s("998728"),
        d = s("203391");
      function u(e) {
        let {
            action: t,
            children: s,
            className: n,
            onExpandChange: u,
            loading: c,
            ...E
          } = e,
          [_, I] = l.useState(!1),
          T = e => {
            I(e), null == u || u(e);
          };
        return (0, a.jsx)(r.Collapsible, {
          className: i(d.groupContainer, n),
          isExpanded: _,
          collapsibleContent: (0, a.jsxs)("div", {
            className: d.groupCollapsedContainer,
            children: [_ && (0, a.jsx)("div", { className: d.pointer }), s],
          }),
          children: e => {
            let { onClick: s } = e;
            return (0, a.jsx)(o.default, {
              ...E,
              className: d.groupHeaderRow,
              action: c
                ? (0, a.jsx)(r.Spinner, {
                    type: r.Spinner.Type.PULSING_ELLIPSIS,
                  })
                : t,
              onClick: e => {
                T(!_), s(e);
              },
            });
          },
        });
      }
    },
    378826: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return T;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("77078"),
        o = s("904276"),
        d = s("875436"),
        u = s("797944"),
        c = s("275252"),
        E = s("998728"),
        _ = s("782340"),
        I = s("613846");
      function T(e) {
        var t, s, n;
        let {
            changeTitle: T,
            value: f,
            options: S,
            className: m,
            onChange: N,
          } = e,
          [g, h] = l.useState(f),
          [C, R] = l.useState(!1),
          [x, L] = l.useState(!1),
          O = l.useRef(null);
        l.useEffect(() => {
          h(f);
        }, [f]),
          l.useEffect(
            () => () => {
              clearTimeout(O.current);
            },
            []
          );
        let p = S.find(e => e.value === g),
          A = e => {
            !e.disabled &&
              e.value !== g &&
              (L(!0),
              null == N || N(e),
              h(e.value),
              (O.current = setTimeout(() => {
                L(!1), R(!1);
              }, 1e3)));
          };
        return (0, a.jsx)(c.default, {
          title: C
            ? T
            : null !== (t = null == p ? void 0 : p.title) && void 0 !== t
              ? t
              : T,
          description: C
            ? "(".concat(
                null !== (s = null == p ? void 0 : p.title) && void 0 !== s
                  ? s
                  : _.default.Messages.NONE,
                ")"
              )
            : null !== (n = null == p ? void 0 : p.description) && void 0 !== n
              ? n
              : "",
          highlightColor: C
            ? u.HighlightColors.NONE
            : null == p
              ? void 0
              : p.highlightColor,
          action: (0, a.jsx)(r.Button, {
            look: r.Button.Looks.LINK,
            size: r.Button.Sizes.MIN,
            color: r.Button.Colors.LINK,
            children: _.default.Messages.CHANGE,
          }),
          loading: x,
          className: m,
          children: S.map((e, t) =>
            (0, a.jsx)(
              E.default,
              {
                title: e.title,
                description: e.description,
                highlightColor: e.highlightColor,
                className: i(I.groupCollapsedRow, g === e.value && I.selected),
                selected: g === e.value,
                action:
                  g === e.value
                    ? (0, a.jsx)(d.default, { className: I.radioItem })
                    : (0, a.jsx)(o.default, { className: I.radioItem }),
                onClick: () => A(e),
                disabled: e.disabled,
              },
              "".concat(e.title, "-").concat(t)
            )
          ),
        });
      }
    },
    998728: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return d;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("414456"),
        n = s.n(l),
        i = s("77078"),
        r = s("797944"),
        o = s("741593");
      function d(e) {
        let {
          title: t,
          description: s,
          action: l,
          highlightColor: d = r.HighlightColors.NONE,
          selected: u = !1,
          subsection: c = null,
          onClick: E,
          className: _,
          disabled: I,
        } = e;
        return (0, a.jsxs)("div", {
          className: n(o.container, _),
          children: [
            (0, a.jsx)(i.Clickable, {
              className: n(
                o.clickableContainer,
                { [o.noAction]: null == E, [o.disabled]: I },
                _
              ),
              onClick: I ? void 0 : E,
              children: (0, a.jsxs)("div", {
                className: n(o.backgroundModifierContainer, o[d], {
                  [o.selected]: u,
                  [o.disabled]: I,
                  [o.noAction]: null == E,
                }),
                children: [
                  (0, a.jsxs)("div", {
                    className: o.settingsDescriptionContainer,
                    children: [
                      (0, a.jsx)(i.Text, {
                        variant: "text-sm/medium",
                        color: "interactive-active",
                        children: t,
                      }),
                      (0, a.jsx)(i.Text, {
                        variant: "text-sm/normal",
                        color: "interactive-normal",
                        className: o.description,
                        children: s,
                      }),
                    ],
                  }),
                  (0, a.jsx)("div", { className: o.action, children: l }),
                ],
              }),
            }),
            null != c &&
              (0, a.jsx)("div", {
                className: o.subsectionContainer,
                children: c,
              }),
          ],
        });
      }
    },
    26991: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("283167"),
        i = s("868246"),
        r = s("414943"),
        o = s("945330"),
        d = s("53948"),
        u = s("636811"),
        c = e => {
          let { guild: t, guildMetadata: s, menuPlacement: c, disabled: E } = e,
            _ = e => {
              let { secondaryCategoryIds: a } = s,
                l = e.map(e => e.value);
              if (e.length < a.length) {
                let e = a.filter(e => !l.includes(e));
                e.forEach(e => (0, n.deleteGuildCategory)(t.id, e));
              } else {
                if (a.length >= d.MAX_SUBCATEGORIES) return;
                let e = l.filter(e => !a.includes(e));
                e.forEach(e => (0, n.addGuildCategory)(t.id, e));
              }
            },
            I = e => {
              (0, n.deleteGuildCategory)(t.id, e);
            },
            T = e => {
              e.preventDefault(), e.stopPropagation();
            },
            f = i.default.getAllCategories().map(e => {
              let { categoryId: t, name: s } = e;
              return { value: t, label: s };
            });
          return (0, a.jsx)(r.default, {
            value: s.secondaryCategoryIds,
            searchable: !0,
            clearable: !1,
            options: f,
            onChange: e => _(e),
            multiValueRenderer: e => {
              let { label: t, value: s } = e;
              return (0, a.jsxs)("span", {
                className: u.subcategory,
                onMouseDown: T,
                children: [
                  t,
                  (0, a.jsx)(l.Clickable, {
                    className: u.closeWrapper,
                    onClick: () => I(s),
                    children: (0, a.jsx)(o.default, {
                      width: 16,
                      height: 16,
                      className: u.close,
                    }),
                  }),
                ],
              });
            },
            menuPlacement: c,
            disabled: E,
            isMulti: !0,
          });
        };
    },
    84190: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return O;
          },
        }),
        s("222007"),
        s("808653");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("969176"),
        o = s.n(r),
        d = s("866227"),
        u = s.n(d),
        c = s("446674"),
        E = s("669491"),
        _ = s("77078"),
        I = s("75766"),
        T = s("923959"),
        f = s("381546"),
        S = s("423487"),
        m = s("701909"),
        N = s("299039"),
        g = s("592407"),
        h = s("49111"),
        C = s("782340"),
        R = s("327835");
      let x = e => {
        let {
            name: t,
            failingName: s,
            description: l,
            checked: n,
            pending: i,
            pendingDescription: r,
            failingDescription: o,
          } = e,
          d = t,
          u = null,
          c = null;
        return (
          i
            ? ((u = (0, a.jsx)(S.default, {
                color: E.default.unsafe_rawColors.YELLOW_300.css,
                width: 20,
                height: 20,
              })),
              (c = null != r ? r : l))
            : n
              ? ((u = (0, a.jsx)(_.Checkbox, {
                  readOnly: !0,
                  shape: _.Checkbox.Shapes.ROUND,
                  size: 20,
                  type: _.Checkbox.Types.INVERTED,
                  value: !0,
                })),
                (c = l))
              : ((u = (0, a.jsx)(f.default, {
                  color: E.default.unsafe_rawColors.RED_400.css,
                  width: 20,
                  height: 20,
                })),
                (d = null != s ? s : t),
                (c = null != o ? o : l)),
          (0, a.jsxs)("div", {
            className: R.checklistItem,
            children: [
              (0, a.jsx)("div", { className: R.checklistIcon, children: u }),
              (0, a.jsxs)("div", {
                className: R.checklistText,
                children: [
                  (0, a.jsx)(_.Heading, {
                    variant: "heading-md/semibold",
                    children: d,
                  }),
                  (0, a.jsx)(_.Text, {
                    color: "text-muted",
                    variant: "text-sm/normal",
                    children: c,
                  }),
                ],
              }),
            ],
          })
        );
      };
      function L(e, t) {
        return o(
          null == e
            ? void 0
            : e.map(e => {
                let [t, s] = e;
                return null == t ? void 0 : t.id;
              }),
          null == t
            ? void 0
            : t.map(e => {
                let [t, s] = e;
                return null == t ? void 0 : t.id;
              })
        );
      }
      var O = e => {
        let {
            guild: t,
            guildId: n,
            className: r,
            noHeader: o = !1,
            failedItemsOnly: d = !1,
          } = e,
          [E, f] = (0, c.useStateFromStoresArray)(
            [I.default],
            () => [I.default.getDiscoveryChecklist(n), I.default.isLoading()],
            [n]
          ),
          { nsfwProperties: S } = null != E ? E : {},
          O = null == t ? void 0 : t.hasFeature(h.GuildFeatures.PARTNERED),
          p = null == S ? void 0 : S.channels_banned_keywords,
          A = (0, c.useStateFromStores)(
            [T.default],
            () => {
              var e, s, a;
              if (null == p) return [];
              let l =
                  null !==
                    (s = (
                      null !== (e = T.default.getChannels(t.id)) && void 0 !== e
                        ? e
                        : {}
                    )[T.GUILD_SELECTABLE_CHANNELS_KEY]) && void 0 !== s
                    ? s
                    : [],
                n =
                  null !==
                    (a =
                      null == l
                        ? void 0
                        : l
                            .map(e => e.channel)
                            .reduce((e, t) => ({ ...e, [t.id]: t }), {})) &&
                  void 0 !== a
                    ? a
                    : {};
              return null == p
                ? []
                : Object.entries(p).map(e => {
                    let [t, s] = e;
                    return [n[t], s];
                  });
            },
            [t.id, p],
            L
          );
        if (f || null == E)
          return (0, a.jsxs)("div", {
            className: i(R.container, R.loaderContainer, r),
            children: [
              (0, a.jsx)(_.Heading, {
                className: R.loadingText,
                variant: "heading-md/semibold",
                color: "header-secondary",
                children:
                  C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_LOADING,
              }),
              (0, a.jsx)(_.Spinner, { className: R.spinner }),
            ],
          });
        let M = O
            ? C.default.Messages
                .GUILD_SETTINGS_DISCOVERY_CHECKLIST_SIZE_DESCRIPTION_FAILING_PARTNERS
            : C.default.Messages
                .GUILD_SETTINGS_DISCOVERY_CHECKLIST_SIZE_DESCRIPTION_FAIL,
          D = [
            {
              name: C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_SAFE,
              failingName:
                C.default.Messages
                  .GUILD_SETTINGS_DISCOVERY_CHECKLIST_SAFE_FAILING,
              description:
                C.default.Messages
                  .GUILD_SETTINGS_DISCOVERY_CHECKLIST_SAFE_DESCRIPTION,
              failingDescription:
                C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_SAFE_DESCRIPTION_FAILING_GUIDELINES.format(
                  {
                    termsURL: h.MarketingURLs.TERMS,
                    guidelinesURL: m.default.getArticleURL(
                      h.HelpdeskArticles.PUBLIC_GUILD_GUILDLINES
                    ),
                  }
                ),
              checked: null == E ? void 0 : E.safeEnvironment,
            },
            {
              name: C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_SIZE.format(
                { minMembers: E.minimumGuildSize }
              ),
              failingName:
                C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_SIZE_FAIL.format(
                  { minMembers: E.minimumGuildSize.toLocaleString() }
                ),
              description: null,
              failingDescription: M.format({
                minMembers: E.minimumGuildSize.toLocaleString(),
              }),
              checked: null == E ? void 0 : E.size,
            },
            {
              name: C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_AGE,
              failingName:
                C.default.Messages
                  .GUILD_SETTINGS_DISCOVERY_CHECKLIST_AGE_FAILING,
              description:
                C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_AGE_DESCRIPTION.format(
                  { minimumGuildAge: Math.ceil(E.minimumGuildAge / 7) }
                ),
              failingDescription:
                C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_AGE_DESCRIPTION_FAILING.format(
                  {
                    minimumGuildAge: Math.ceil(E.minimumGuildAge / 7),
                    passDate: u(N.default.extractTimestamp(n))
                      .add(E.minimumGuildAge, "days")
                      .format("LL"),
                  }
                ),
              checked: null == E ? void 0 : E.age,
            },
            {
              name: (null == E ? void 0 : E.healthScorePending)
                ? C.default.Messages
                    .GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_PENDING
                : C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY,
              failingName:
                C.default.Messages
                  .GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_FAILING,
              description:
                C.default.Messages
                  .GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_DESCRIPTION,
              failingDescription: (0, a.jsxs)(a.Fragment, {
                children: [
                  (0, a.jsx)(_.Text, {
                    color: "text-muted",
                    className: R.healthFailingDescription,
                    variant: "text-sm/normal",
                    children:
                      C.default.Messages
                        .GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_DESCRIPTION_FAILING,
                  }),
                  (null == E ? void 0 : E.engagementHealthy)
                    ? null
                    : (0, a.jsx)(_.Text, {
                        color: "text-danger",
                        variant: "text-sm/normal",
                        children:
                          C.default.Messages
                            .GUILD_SETTINGS_DISCOVERY_CHECKLIST_ENGAGEMENT_FAILING,
                      }),
                  (null == E ? void 0 : E.retentionHealthy)
                    ? null
                    : (0, a.jsx)(_.Text, {
                        color: "text-danger",
                        variant: "text-sm/normal",
                        children:
                          C.default.Messages
                            .GUILD_SETTINGS_DISCOVERY_CHECKLIST_RETENTION_FAILING,
                      }),
                  (() => {
                    if (null == E || null == E.healthScore) return !1;
                    let {
                        retentionHealthy: e,
                        engagementHealthy: t,
                        healthScore: s,
                      } = E,
                      {
                        avg_nonnew_participators: a,
                        avg_nonnew_communicators: l,
                        perc_ret_w1_intentful: n,
                      } = s;
                    return (!e && null != n) || (!t && null != a && null != l);
                  })() &&
                    (0, a.jsx)(_.Button, {
                      className: R.detailsButton,
                      look: _.Button.Looks.LINK,
                      size: _.Button.Sizes.NONE,
                      color: _.Button.Colors.LINK,
                      onClick: () =>
                        (0, _.openModalLazy)(async () => {
                          let { default: e } = await s
                            .el("127407")
                            .then(s.bind(s, "127407"));
                          return t =>
                            (0, a.jsx)(e, { ...t, guildChecklist: E });
                        }),
                      children:
                        C.default.Messages
                          .GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTH_VIEW_DETAILS,
                    }),
                ],
              }),
              pendingDescription: (null == E ? void 0 : E.size)
                ? C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_DESCRIPTION_PENDING.format(
                    {
                      checkBackHook: (e, t) =>
                        (0, a.jsx)(
                          "strong",
                          { className: R.healthPending, children: e },
                          t
                        ),
                    }
                  )
                : C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_DESCRIPTION_PENDING_SIZE.format(
                    { minMembers: 200 }
                  ),
              checked: null == E ? void 0 : E.healthy,
              pending: null == E ? void 0 : E.healthScorePending,
            },
            {
              name: C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_NSFW,
              failingName:
                C.default.Messages
                  .GUILD_SETTINGS_DISCOVERY_CHECKLIST_NSFW_FAILING,
              description:
                C.default.Messages
                  .GUILD_SETTINGS_DISCOVERY_CHECKLIST_NSFW_DESCRIPTION,
              failingDescription: (0, a.jsxs)(a.Fragment, {
                children: [
                  (null == S ? void 0 : S.channels) != null
                    ? (0, a.jsx)(_.Text, {
                        color: "text-muted",
                        variant: "text-sm/normal",
                        children:
                          C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_CHANGE_CHANNEL_NAMES_2.format(
                            {
                              channelHook: (e, t) =>
                                (0, a.jsx)(
                                  "span",
                                  { className: R.doesNot, children: e },
                                  t
                                ),
                            }
                          ),
                      })
                    : null,
                  A.length > 0
                    ? (0, a.jsx)("div", {
                        className: R.indent,
                        children: A.map(e => {
                          let [t, s] = e;
                          return null != t
                            ? (0, a.jsxs)(
                                _.Text,
                                {
                                  color: "text-muted",
                                  variant: "text-sm/normal",
                                  children: ["#", t.name, ": ", s.join(", ")],
                                },
                                t.id
                              )
                            : null;
                        }),
                      })
                    : null,
                  (null == S ? void 0 : S.name) != null
                    ? (0, a.jsx)(_.Text, {
                        color: "text-muted",
                        variant: "text-sm/normal",
                        children:
                          C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_CHANGE_NAME.format(
                            {
                              nameHook: (e, t) =>
                                (0, a.jsx)(
                                  "span",
                                  { className: R.doesNot, children: e },
                                  t
                                ),
                            }
                          ),
                      })
                    : null,
                  (null == S ? void 0 : S.description) != null
                    ? (0, a.jsx)(_.Text, {
                        color: "text-muted",
                        variant: "text-sm/normal",
                        children:
                          C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_CHANGE_DESCRIPTION.format(
                            {
                              descriptionHook: (e, t) =>
                                (0, a.jsx)(
                                  "span",
                                  { className: R.doesNot, children: e },
                                  t
                                ),
                            }
                          ),
                      })
                    : null,
                ],
              }),
              checked: null == S || 0 === Object.keys(S).length,
            },
            {
              name: C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_2FA,
              failingName:
                C.default.Messages
                  .GUILD_SETTINGS_DISCOVERY_CHECKLIST_2FA_FAILING,
              description:
                C.default.Messages
                  .GUILD_SETTINGS_DISCOVERY_CHECKLIST_2FA_DESCRIPTION,
              failingDescription:
                C.default.Messages.GUILD_SETTINGS_DISCOVERY_CHECKLIST_2FA_DESCRIPTION_FAILING.format(
                  {
                    onClick: () =>
                      g.default.setSection(
                        h.GuildSettingsSections.SAFETY,
                        h.GuildSettingsSubsections.SAFETY_PERMISSIONS
                      ),
                  }
                ),
              checked: null == E ? void 0 : E.protected,
            },
          ];
        return (0, a.jsxs)("div", {
          className: i(R.container, r),
          children: [
            (() => {
              let e =
                  C.default.Messages
                    .GUILD_SETTINGS_DISCOVERY_CHECKLIST_DOES_NOT_PASS,
                t = (null == E ? void 0 : E.sufficient)
                  ? s("624563")
                  : s("487663"),
                l = o
                  ? null
                  : (0, a.jsxs)("div", {
                      className: R.header,
                      children: [
                        (0, a.jsx)("img", {
                          alt: "",
                          src: t,
                          className: R.headerIcon,
                          width: 40,
                        }),
                        (0, a.jsx)(_.Heading, {
                          variant: "heading-md/semibold",
                          children: (null == E ? void 0 : E.sufficient)
                            ? C.default.Messages
                                .GUILD_SETTINGS_DISCOVERY_CHECKLIST_GOOD_STANDING
                            : e.format({
                                doesNotHook: (e, t) =>
                                  (0, a.jsx)(
                                    "strong",
                                    { className: R.doesNot, children: e },
                                    t
                                  ),
                              }),
                        }),
                      ],
                    });
              return l;
            })(),
            D.filter(e => !d || null == e.checked || !e.checked).map((e, t) =>
              (0, a.jsxs)(
                l.Fragment,
                {
                  children: [
                    (0, a.jsx)(x, { ...e }),
                    t < D.length - 1
                      ? (0, a.jsx)("hr", { className: R.separator })
                      : null,
                  ],
                },
                e.name
              )
            ),
          ],
        });
      };
    },
    796178: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return o;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("84190"),
        i = s("782340"),
        r = s("536072"),
        o = e => {
          let { guild: t } = e;
          return (0, a.jsxs)(l.FormSection, {
            title: i.default.Messages.DISCOVERY,
            tag: "h2",
            children: [
              (0, a.jsx)("div", { className: r.background }),
              (0, a.jsxs)("div", {
                className: r.discoverySettings,
                children: [
                  (0, a.jsx)("div", { className: r.image }),
                  (0, a.jsx)(l.Heading, {
                    className: r.header,
                    variant: "heading-xl/semibold",
                    children:
                      i.default.Messages.GUILD_SETTINGS_DISCOVERY_DISQUALIFIED,
                  }),
                  (0, a.jsx)(l.Text, {
                    className: r.description,
                    variant: "text-md/normal",
                    children:
                      i.default.Messages.GUILD_SETTINGS_DISCOVERY_DISQUALIFIED_DESCRIPTION.format(),
                  }),
                  (0, a.jsx)(n.default, {
                    className: r.checklist,
                    guild: t,
                    guildId: t.id,
                    noHeader: !0,
                    failedItemsOnly: !0,
                  }),
                ],
              }),
            ],
          });
        };
    },
    237938: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return x;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("917351"),
        i = s.n(n),
        r = s("775560"),
        o = s("446674"),
        d = s("77078"),
        u = s("75766"),
        c = s("758276"),
        E = s("132664"),
        _ = s("213307"),
        I = s("324105"),
        T = s("149632"),
        f = s("525065"),
        S = s("84190"),
        m = s("49111"),
        N = s("782340"),
        g = s("100207"),
        h = s("319765");
      let C = [
          "322850917248663552",
          "172018499005317120",
          "414234792121597953",
          "228406572756369408",
        ],
        R = [
          "620723483965653003",
          "662246299369734154",
          "181970867549503489",
          "102860784329052160",
        ];
      var x = e => {
        let { guild: t, onEnableDiscovery: s, isGuildAdmin: n } = e,
          [x, L] = (0, r.useStableMemo)(() => [i.sample(C), i.sample(R)], []);
        l.useEffect(() => {
          E.fetchDiscoverableGuilds([x, L]);
        }, [x, L]);
        let [O, p] = (0, o.useStateFromStoresArray)(
            [_.default],
            () => [_.default.getGuild(x), _.default.getGuild(L)],
            [x, L]
          ),
          { canEnableDiscovery: A, isPendingSuccess: M } = (0,
          o.useStateFromStoresObject)(
            [u.default],
            () => ({
              canEnableDiscovery: u.default.passesChecklist(t.id),
              isPendingSuccess: u.default.isPendingSuccess(t.id),
            }),
            [t.id]
          ),
          [D, v] = (0, o.useStateFromStoresArray)(
            [f.default],
            () => [null, f.default.getMemberCount(t.id)],
            [t.id]
          ),
          G = l.useCallback(() => {
            null != s && s();
          }, [s]),
          j = null;
        return (
          n
            ? M
              ? (j =
                  N.default.Messages.GUILD_SETTINGS_DISCOVERY_PENDING_HEALTHY)
              : !A &&
                (j =
                  N.default.Messages
                    .GUILD_SETTINGS_DISCOVERY_REQUIREMENTS_NOT_MET)
            : (j = N.default.Messages.GUILD_SETTINGS_DISCOVERY_ADMIN_ONLY),
          (0, a.jsxs)("div", {
            className: g.container,
            children: [
              (0, a.jsx)("img", { alt: "", src: h, className: g.sparkles }),
              (0, a.jsxs)("div", {
                className: g.discoverPreview,
                children: [
                  (0, a.jsx)(I.default, {
                    className: g.placeholderCard,
                    disabled: !0,
                    small: !0,
                    loading: null == O,
                    guild: O,
                  }),
                  (0, a.jsx)(I.default, {
                    className: g.previewCard,
                    guild: t,
                    description:
                      N.default.Messages
                        .GUILD_SETTINGS_DISCOVERY_PREVIEW_DESCRIPTION,
                    presenceCount: D,
                    memberCount: v,
                  }),
                  (0, a.jsx)(I.default, {
                    className: g.placeholderCard,
                    disabled: !0,
                    small: !0,
                    loading: null == p,
                    guild: p,
                  }),
                ],
              }),
              (0, a.jsx)(d.Heading, {
                className: g.header,
                variant: "heading-xl/semibold",
                children: N.default.Messages.GUILD_SETTINGS_DISCOVERY_HEADER,
              }),
              (0, a.jsx)(d.Text, {
                variant: "text-md/normal",
                className: g.valueProp,
                color: "header-secondary",
                children:
                  N.default.Messages.GUILD_SETTINGS_DISCOVERY_PAGE_DESCRIPTION.format(
                    {
                      onLinkClick: () =>
                        (0, T.navigateToAndTrackHelpCenterClick)({
                          articleId: m.HelpdeskArticles.SERVER_DISCOVERY,
                          guildId: t.id,
                          pageView: c.DiscoverySettingsViews.INTRO,
                        }),
                    }
                  ),
              }),
              (0, a.jsx)(d.Text, {
                variant: "text-md/normal",
                className: g.byline,
                color: "header-secondary",
                children:
                  N.default.Messages.GUILD_SETTINGS_DISCOVERY_PAGE_DESCRIPTION_SUBHEADING.format(
                    {
                      onGuidelinesClick: () =>
                        (0, T.navigateToAndTrackHelpCenterClick)({
                          articleId:
                            m.HelpdeskArticles.SERVER_DISCOVERY_GUIDELINES,
                          guildId: t.id,
                          pageView: c.DiscoverySettingsViews.INTRO,
                        }),
                    }
                  ),
              }),
              (0, a.jsx)(d.Tooltip, {
                text: j,
                children: e =>
                  (0, a.jsx)(d.Button, {
                    ...e,
                    className: g.enableButton,
                    color: d.Button.Colors.BRAND,
                    size: d.Button.Sizes.LARGE,
                    disabled: !A || !n,
                    onClick: G,
                    children:
                      N.default.Messages.GUILD_SETTINGS_SET_UP_DISCOVERY,
                  }),
              }),
              (0, a.jsx)(S.default, {
                className: g.checklist,
                guild: t,
                guildId: t.id,
              }),
            ],
          })
        );
      };
    },
    744421: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return N;
          },
        }),
        s("222007"),
        s("424973");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("446674"),
        o = s("77078"),
        d = s("430568"),
        u = s("283167"),
        c = s("86678"),
        E = s("882641"),
        _ = s("381546"),
        I = s("900938"),
        T = s("958706"),
        f = s("782340"),
        S = s("478762");
      let m = e => {
        var t;
        let {
            reason: s = "",
            emoji_name: n,
            onSetReason: u,
            onSelectEmoji: f,
            onClearPressed: m,
            reasonMinLength: N,
            reasonMaxLength: g,
            placeholder: h,
            position: C,
          } = e,
          [R, x] = l.useState(!1),
          L = (0, r.useStateFromStores)([I.default], () =>
            I.default.isGuildMetadataLoaded()
          );
        return (0, a.jsxs)("div", {
          className: i(S.reasonContainer),
          children: [
            (0, a.jsx)(o.Popout, {
              onRequestClose: () => {
                x(!1);
              },
              shouldShow: R,
              position: "right",
              align: "top",
              animation: o.Popout.Animation.NONE,
              renderPopout: e => {
                let { closePopout: t } = e;
                return (0, a.jsx)(c.default, {
                  pickerIntention: T.EmojiIntention.COMMUNITY_CONTENT,
                  closePopout: t,
                  onSelectEmoji: (e, s) => {
                    null != e && f(e), s && t();
                  },
                });
              },
              children: () =>
                (0, a.jsx)("div", {
                  className: S.background,
                  children: (0, a.jsx)(E.default, {
                    active: !1,
                    onClick: () => {
                      x(!0);
                    },
                    tabIndex: 0,
                    renderButtonContents:
                      null != n
                        ? () =>
                            (0, a.jsx)(d.default, {
                              emojiName: n,
                              animated: !1,
                            })
                        : null,
                  }),
                }),
            }),
            (0, a.jsxs)("div", {
              className: S.inputContainer,
              children: [
                (0, a.jsx)(
                  o.TextInput,
                  {
                    inputClassName: S.reason,
                    placeholder: h,
                    value: s,
                    minLength: N,
                    maxLength: g,
                    onChange: e => {
                      u(e);
                    },
                    defaultDirty: (null == s ? void 0 : s.length) > 0,
                  },
                  "text-input-".concat(C, "-").concat(L)
                ),
                (null !== (t = null == s ? void 0 : s.length) && void 0 !== t
                  ? t
                  : 0) > 0 || null != n
                  ? (0, a.jsx)(o.Button, {
                      className: S.clearStatusButton,
                      onClick: m,
                      look: o.Button.Looks.BLANK,
                      size: o.Button.Sizes.NONE,
                      tabIndex: -1,
                      "aria-hidden": !0,
                      children: (0, a.jsx)(_.default, {
                        className: S.clearStatusIcon,
                      }),
                    })
                  : null,
              ],
            }),
          ],
        });
      };
      var N = e => {
        let {
            reasonMinLength: t,
            reasonMaxLength: s,
            guildId: l,
            reasons: n,
          } = e,
          i = [
            f.default.Messages
              .DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_PLACEHOLDER_ONE,
            f.default.Messages
              .DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_PLACEHOLDER_TWO,
            f.default.Messages
              .DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_PLACEHOLDER_THREE,
            f.default.Messages
              .DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_PLACEHOLDER_FOUR,
          ],
          r = [];
        for (let e = 0; e < 4; e++)
          r.push(
            (0, a.jsx)(
              m,
              {
                position: e,
                placeholder: i[e],
                ...n[e],
                onSetReason: t => {
                  let s = [...n],
                    a = Object.assign({}, n[e], { reason: t });
                  (s[e] = a),
                    (0, u.updateGuildDiscoveryMetadataReasonsToJoin)(l, s);
                },
                onSelectEmoji: t => {
                  let s = [...n],
                    a = Object.assign({}, n[e], {
                      emoji_name: t.optionallyDiverseSequence,
                    });
                  (s[e] = a),
                    (0, u.updateGuildDiscoveryMetadataReasonsToJoin)(l, s);
                },
                onClearPressed: () => {
                  let t = [...n],
                    s = { reason: "", emoji_name: null };
                  (t[e] = s),
                    (0, u.updateGuildDiscoveryMetadataReasonsToJoin)(l, t);
                },
                reasonMinLength: t,
                reasonMaxLength: s,
              },
              "reasonListItem-" + e
            )
          );
        return (0, a.jsx)("div", { children: r });
      };
    },
    826485: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("345988"),
        i = s("427459"),
        r = s("49111"),
        o = s("646718"),
        d = s("782340"),
        u = s("253937");
      function c(e) {
        let { guild: t, numSounds: s, isOutOfSlots: c } = e,
          E = t.premiumTier,
          _ = (0, i.getNextTier)(E, t.id),
          I = o.TotalSoundboardSoundCountsByTier[E] - 2;
        if (null == _ || E === r.BoostedGuildTiers.TIER_3 || s < I) return null;
        let T = c
          ? {
              color: l.ButtonColors.GREEN,
              look: l.ButtonLooks.FILLED,
              text: d.default.Messages.GUILD_SETTINGS_SOUNDBOARD_CTA,
            }
          : void 0;
        return (0, a.jsx)(n.default, {
          header:
            d.default.Messages.PREMIUM_GUILD_SUBSCRIPTION_UPSELL_BANNER_HEADER,
          text: d.default.Messages.GUILD_SETTINGS_SOUNDBOARD_UPSELL_BANNER_TEXT.format(
            {
              level: _,
              numAdditional: (0, i.getIncrementalSoundboardSoundCountForTier)(
                _
              ),
            }
          ),
          headerColor: "header-primary",
          textColor: "text-normal",
          buttonProps: T,
          guild: t,
          analyticsLocation: {
            page: r.AnalyticsPages.GUILD_SETTINGS,
            section: r.AnalyticsSections.GUILD_SETTINGS_SOUNDBOARD,
            object: r.AnalyticsObjects.BOOST_UPSELL_BANNER_SLOTS_FULL,
            objectType: (0, i.boostedGuildTierToAnalyticsObjectType)(_),
          },
          className: u.container,
        });
      }
    },
    658329: function (e, t, s) {
      "use strict";
      function a() {
        let e =
            arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
          t =
            !(arguments.length > 1) || void 0 === arguments[1] || arguments[1],
          s = window.GLOBAL_ENV.GUILD_TEMPLATE_HOST;
        return ""
          .concat(t ? "".concat(location.protocol) : "", "//")
          .concat(s)
          .concat("/".concat(e));
      }
      s.r(t),
        s.d(t, {
          default: function () {
            return a;
          },
        });
    },
    8731: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          cropGIF: function () {
            return i;
          },
          cropStaticImage: function () {
            return r;
          },
          getBoundedCoordinates: function () {
            return o;
          },
          adjustImageDimensionsForAspectRatio: function () {
            return u;
          },
          calculateDragBoundaries: function () {
            return c;
          },
          calculateOverlaySize: function () {
            return E;
          },
          downsizeImage: function () {
            return _;
          },
        }),
        s("511434"),
        s("313619"),
        s("654714"),
        s("287168"),
        s("956660"),
        s("222007"),
        s("70102"),
        s("311790"),
        s("477657"),
        s("811875"),
        s("90301"),
        s("652153"),
        s("28797"),
        s("817884"),
        s("597349"),
        s("667536"),
        s("690341");
      var a = s("917351"),
        l = s("75015");
      function n(e, t, s, a) {
        let l = e.naturalWidth / e.width,
          n = t.width / 2,
          i = t.height / 2,
          r = (e.width / 2 - n - s.x) * l,
          o = (e.height / 2 - i - s.y) * l,
          d = t.width * l,
          u = t.height * l,
          c = Math.min(d, a.width),
          E = Math.min(u, a.height);
        return {
          x: r,
          y: o,
          scaledCropWidth: d,
          scaledCropHeight: u,
          canvasWidth: c,
          canvasHeight: E,
        };
      }
      async function i(e, t, a, i, r) {
        let {
            x: o,
            y: d,
            scaledCropWidth: u,
            scaledCropHeight: c,
          } = n(t, a, i, r),
          E = await e.arrayBuffer(),
          _ = new Worker(new URL(s.p + s.u("39703"), s.b)),
          I = new Promise((e, t) => {
            _.onmessage = s => {
              let { data: a } = s;
              if (a.type === l.MessageTypes.CROP_GIF_COMPLETE) {
                var n;
                e(
                  ((n = new Blob([a.result])),
                  new Promise(e => {
                    let t = new FileReader();
                    (t.onload = t => {
                      var s;
                      let a =
                        null === (s = t.target) || void 0 === s
                          ? void 0
                          : s.result;
                      "string" == typeof a ? e(a) : e("");
                    }),
                      t.readAsDataURL(n);
                  }))
                ),
                  _.terminate();
              } else
                a.type === l.MessageTypes.CROP_GIF_ERROR &&
                  (t(Error("Error cropping GIF")), _.terminate());
            };
          });
        return (
          _.postMessage({
            type: l.MessageTypes.CROP_GIF_START,
            gif: new Uint8Array(E),
            x: 0 | o,
            y: 0 | d,
            width: 0 | u,
            height: 0 | c,
          }),
          { result: I, cancelFn: () => _.terminate() }
        );
      }
      function r(e, t, s, a) {
        let {
            x: l,
            y: i,
            scaledCropWidth: r,
            scaledCropHeight: o,
            canvasWidth: d,
            canvasHeight: u,
          } = n(e, t, s, a),
          c = document.createElement("canvas");
        (c.width = d), (c.height = u);
        let E = c.getContext("2d");
        return (
          null != E && E.drawImage(e, l, i, r, o, 0, 0, c.width, c.height),
          c.toDataURL("image/png")
        );
      }
      function o(e, t, s) {
        return {
          x: (0, a.clamp)(e, s.left, s.right),
          y: (0, a.clamp)(t, s.bottom, s.top),
        };
      }
      function d(e, t, s, a) {
        let n = s,
          i = a;
        s > l.EDITING_CONTAINER_WIDTH &&
          ((n = l.EDITING_CONTAINER_WIDTH),
          (i = a * (l.EDITING_CONTAINER_WIDTH / s)));
        if (s / a < e) return { width: n, height: i };
        let r = t / i,
          o = n * r;
        return { width: o, height: t };
      }
      function u(e, t, s) {
        switch (e) {
          case l.UploadTypes.AVATAR:
          case l.UploadTypes.AVATAR_DECORATION:
            return { width: t, height: s };
          case l.UploadTypes.BANNER:
            return d(l.BANNER_ASPECT_RATIO, l.MAX_BANNER_OVERLAY_HEIGHT, t, s);
          case l.UploadTypes.GUILD_BANNER:
            return d(
              l.GUILD_BANNER_ASPECT_RATIO,
              l.MAX_GUILD_BANNER_OVERLAY_HEIGHT,
              t,
              s
            );
          case l.UploadTypes.VIDEO_BACKGROUND:
            return d(
              l.VIDEO_BACKGROUND_ASPECT_RATIO,
              l.MAX_VIDEO_OVERLAY_HEIGHT,
              t,
              s
            );
          case l.UploadTypes.SCHEDULED_EVENT_IMAGE:
            return d(
              l.SCHEDULED_EVENT_IMAGE_ASPECT_RATIO,
              l.MAX_SCHEDULED_EVENT_IMAGE_OVERLAY_HEIGHT,
              t,
              s
            );
          case l.UploadTypes.HOME_HEADER:
            return d(
              l.HOME_HEADER_ASPECT_RATIO,
              l.MAX_HOME_HEADER_OVERLAY_HEIGHT,
              t,
              s
            );
        }
      }
      function c(e, t, s) {
        let a = { top: 0, bottom: 0, left: 0, right: 0 },
          l = e - s.width,
          n = t - s.height;
        return (
          0 !== l && ((a.left = -Math.abs(l / 2)), (a.right = l / 2)),
          0 !== n && ((a.bottom = -Math.abs(n / 2)), (a.top = n / 2)),
          a
        );
      }
      function E(e, t, s, a) {
        switch (e) {
          case l.UploadTypes.AVATAR:
          case l.UploadTypes.AVATAR_DECORATION:
            let n = Math.min(t, s);
            return { width: n, height: n };
          case l.UploadTypes.BANNER:
            let i = Math.min(t, l.EDITING_CONTAINER_WIDTH);
            return { width: i, height: i * (1 / l.BANNER_ASPECT_RATIO) };
          case l.UploadTypes.GUILD_BANNER:
            let r = Math.min(t, l.EDITING_CONTAINER_WIDTH);
            return { width: r, height: Math.min(r * (9 / 16), a) };
          case l.UploadTypes.VIDEO_BACKGROUND:
            let o = Math.min(t, l.EDITING_CONTAINER_WIDTH);
            return { width: o, height: o * (9 / 16) };
          case l.UploadTypes.SCHEDULED_EVENT_IMAGE:
            let d = Math.min(t, l.EDITING_CONTAINER_WIDTH);
            return { width: d, height: 0.4 * d };
          case l.UploadTypes.HOME_HEADER:
            let u = Math.min(t, l.EDITING_CONTAINER_WIDTH);
            return { width: u, height: u * (1 / l.HOME_HEADER_ASPECT_RATIO) };
        }
      }
      function _(e, t, s) {
        let a = e.naturalWidth / e.naturalHeight,
          l = t,
          n = s;
        e.naturalWidth > e.naturalHeight ? (l /= a) : (n *= a);
        let i = { height: l, width: n };
        return r(e, { width: e.width, height: e.height }, { x: 0, y: 0 }, i);
      }
    },
    424960: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return i;
          },
        });
      var a = s("336522"),
        l = s("254490"),
        n = s("782340");
      function i(e) {
        (0, a.openUploadError)({
          title: n.default.Messages.UPLOAD_AREA_TOO_LARGE_TITLE,
          help: n.default.Messages.UPLOAD_AREA_TOO_LARGE_HELP.format({
            maxSize: (0, l.sizeString)(e),
          }),
        });
      }
    },
    656913: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return f;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("414456"),
        n = s.n(l),
        i = s("819855"),
        r = s("841098"),
        o = s("449918"),
        d = s("832132"),
        u = s("818643"),
        c = s("608684"),
        E = s("49111"),
        _ = s("854045");
      let I = E.Color.PRIMARY_400,
        T = E.Color.PRIMARY_500;
      function f(e) {
        let {
            enabled: t,
            imageClassName: s,
            iconWrapperClassName: l,
            ...E
          } = e,
          f = (0, r.default)(),
          S = (0, i.isThemeDark)(f) ? I : T,
          m = { height: 18, width: 18, color: (0, o.getColor)(S) };
        return (0, a.jsx)(c.default, {
          className: n({
            [_.avatarUploader]: t,
            [_.avatarUploaderDisabled]: !t,
          }),
          imageClassName: n(s, _.avatarUploaderInnerSquare, {
            [_.avatarUploaderInnerSquareDisabled]: !t,
          }),
          icon:
            null != E.image && "" !== E.image
              ? (0, a.jsx)(d.default, { ...m })
              : (0, a.jsx)(u.default, { ...m }),
          iconClassName: n(_.avatarUploadIcon, _.hideDefaultIcon),
          iconWrapperClassName: l,
          showIcon: !0,
          showIconDisabled: !0,
          hideSize: !0,
          ...E,
        });
      }
    },
    166382: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          ImageInputUploadErrors: function () {
            return l;
          },
          default: function () {
            return f;
          },
        });
      var a,
        l,
        n = s("37983");
      s("884691");
      var i = s("669491"),
        r = s("77078"),
        o = s("447353"),
        d = s("40119"),
        u = s("266926"),
        c = s("235692"),
        E = s("444456"),
        _ = s("423487"),
        I = s("782340"),
        T = s("555043");
      ((a = l || (l = {}))[(a.TOO_BIG = 0)] = "TOO_BIG"),
        (a[(a.RATE_LIMIT = 1)] = "RATE_LIMIT"),
        (a[(a.TOO_MANY_EMOJI = 2)] = "TOO_MANY_EMOJI"),
        (a[(a.TOO_MANY_ANIMATED_EMOJI = 3)] = "TOO_MANY_ANIMATED_EMOJI"),
        (a[(a.WRONG_TYPE = 4)] = "WRONG_TYPE"),
        (a[(a.RESIZE_GIF = 5)] = "RESIZE_GIF");
      var f = e => {
        let { error: t } = e,
          { type: s, filename: a } = t,
          l = {
            0: {
              icon: o.default,
              description: I.default.Messages.UPLOAD_ERROR_TOO_LARGE,
              color: i.default.unsafe_rawColors.RED_400.css,
              tooltip: I.default.Messages.UPLOAD_ERROR_TITLE,
            },
            4: {
              icon: d.default,
              description: I.default.Messages.UPLOAD_ERROR_WRONG_TYPE,
              color: i.default.unsafe_rawColors.RED_400.css,
              tooltip: I.default.Messages.UPLOAD_ERROR_TITLE,
            },
            5: {
              icon: c.default,
              description: I.default.Messages.UPLOAD_ERROR_RESIZE_GIF,
              color: i.default.unsafe_rawColors.RED_400.css,
              tooltip: I.default.Messages.UPLOAD_ERROR_TITLE,
            },
            1: {
              icon: E.default,
              description: I.default.Messages.UPLOAD_ERROR_RATE_LIMIT,
              color: i.default.unsafe_rawColors.ORANGE_345.css,
              tooltip: I.default.Messages.UPLOAD_ERROR_RETRY,
            },
            2: {
              icon: u.default,
              description: I.default.Messages.UPLOAD_ERROR_TOO_MANY_EMOJI,
              color: i.default.unsafe_rawColors.RED_400.css,
              tooltip: I.default.Messages.UPLOAD_ERROR_TITLE,
            },
            3: {
              icon: u.default,
              description:
                I.default.Messages.UPLOAD_ERROR_TOO_MANY_ANIMATED_EMOJI,
              color: i.default.unsafe_rawColors.RED_400.css,
              tooltip: I.default.Messages.UPLOAD_ERROR_TITLE,
            },
          },
          { icon: f, description: S, color: m, tooltip: N } = l[s];
        return (0, n.jsxs)("div", {
          className: T.emojiErrorItem,
          children: [
            (0, n.jsx)(f, {
              className: T.fileIcon,
              color: i.default.unsafe_rawColors.PRIMARY_300.css,
            }),
            (0, n.jsxs)(r.FormSection, {
              className: T.fileInfo,
              children: [
                (0, n.jsx)(r.FormTitle, { className: T.fileName, children: a }),
                (0, n.jsx)(r.FormText, {
                  type: r.FormTextTypes.DESCRIPTION,
                  children: S,
                }),
              ],
            }),
            (0, n.jsx)(r.TooltipContainer, {
              position: "right",
              text: N,
              children: (0, n.jsx)(_.default, { color: m }),
            }),
          ],
        });
      };
    },
    426733: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          processImages: function () {
            return c;
          },
          default: function () {
            return _;
          },
        }),
        s("70102"),
        s("424973"),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("77078"),
        i = s("371642"),
        r = s("694187"),
        o = s("166382"),
        d = s("991207");
      async function u(e) {
        try {
          var t;
          let s = await ((t = e),
            new Promise((e, s) => {
              if (null != t) {
                let a = new FileReader();
                (a.onload = t => {
                  var a;
                  "string" ==
                  typeof (null === (a = t.target) || void 0 === a
                    ? void 0
                    : a.result)
                    ? e(t.target.result)
                    : s(Error("Failed to read file"));
                }),
                  a.readAsDataURL(t);
              }
            })),
            a = new Image();
          return (a.src = s), await a.decode(), { image: a, dataURI: s };
        } catch {
          throw o.ImageInputUploadErrors.WRONG_TYPE;
        }
      }
      async function c(e, t) {
        let s = [];
        for (let a = 0; a < e.length; a++) {
          let l = e[a];
          try {
            let { image: e, dataURI: a } = await u(l),
              n = l.type === d.FileTypes.MP4 ? await t(a, l) : await t(a, l, e);
            null != n && s.push({ type: n, filename: l.name });
          } catch (e) {
            s.push({ type: e, filename: l.name });
          }
        }
        s.length > 0 && E(s);
      }
      let E = e => {
        (0, n.openModalLazy)(async () => {
          let { default: t } = await s.el("299052").then(s.bind(s, "299052"));
          return s => (0, a.jsx)(t, { errors: e, ...s });
        });
      };
      var _ = e => {
        let {
            onChange: t,
            multiple: o = !0,
            disabled: d,
            className: u,
            tabIndex: E = -1,
            "aria-label": _,
            filters: I,
            setLoading: T,
          } = e,
          f = l.createRef(),
          S = l.useRef(null),
          [m, N] = l.useState(!1);
        l.useEffect(() => {
          m && g();
        }, [m]);
        let g = () => {
            null !== S.current &&
              ((0, n.closeModal)(S.current), (S.current = null));
          },
          h = async e => {
            null == T || T(!0), await c(e, t), N(!0), null == T || T(!1);
          },
          C = async e => {
            var t, l, i;
            if (
              (e.stopPropagation(),
              e.preventDefault(),
              (null === (t = e.currentTarget) || void 0 === t
                ? void 0
                : t.files) == null ||
                (null === (i = e.currentTarget) || void 0 === i
                  ? void 0
                  : null === (l = i.files) || void 0 === l
                    ? void 0
                    : l.length) === 0)
            )
              return;
            let r = e.currentTarget.files;
            S.current = await (0, n.openModalLazy)(async () => {
              let { default: e } = await s.el("7476").then(s.bind(s, "7476"));
              return t => (0, a.jsx)(e, { processFiles: () => h(r), ...t });
            });
          };
        return (0, a.jsx)(i.default, {
          onChange: C,
          filters: null != I ? I : (0, r.getFilters)(),
          multiple: o,
          disabled: d,
          className: u,
          tabIndex: E,
          "aria-label": _,
          ref: f,
        });
      };
    },
    672630: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return i;
          },
        }),
        s("70102");
      var a = s("748820"),
        l = s("872717"),
        n = s("49111"),
        i = {
          generateNonce: function () {
            return (0, a.v4)();
          },
          createHandoffToken: async function e(e) {
            let {
              body: { handoff_token: t },
            } = await l.default.post({
              url: n.Endpoints.HANDOFF,
              body: { key: e },
              oldFormErrors: !0,
              retries: 1,
            });
            if (null != t) return t;
            throw Error("Missing handoff token!");
          },
        };
    },
    988724: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          fetchTopReadChannels: function () {
            return i;
          },
        });
      var a = s("872717"),
        l = s("913144"),
        n = s("49111");
      function i(e) {
        return a.default
          .get({
            url: n.Endpoints.GUILD_TOP_READ_CHANNELS(e),
            oldFormErrors: !0,
          })
          .then(t => {
            let { body: s } = t;
            l.default.dispatch({
              type: "GUILD_TOP_READ_CHANNELS_FETCH_SUCCESS",
              guildId: e,
              topChannelIds: s,
            });
          });
      }
    },
    161188: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("446674"),
        l = s("913144");
      let n = {};
      class i extends a.default.Store {
        hasFetched(e) {
          return null != n[e];
        }
        getTopChannelIds(e) {
          return "874345844743213126" === e
            ? [
                "1041887225819955252",
                "985996080107892776",
                "1035280727610241166",
              ]
            : n[e];
        }
      }
      var r = new i(l.default, {
        GUILD_TOP_READ_CHANNELS_FETCH_SUCCESS: function (e) {
          let { guildId: t, topChannelIds: s } = e;
          n[t] = s;
        },
      });
    },
    167627: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          getPaymentPayoutGroups: function () {
            return n;
          },
        });
      var a = s("872717"),
        l = s("49111");
      let n = async (e, t) => {
        let s = await a.default.get({
          url: l.Endpoints.PAYMENT_PAYOUT_GROUPS(e),
          query: t,
        });
        return s.body;
      };
    },
    397056: function (e, t, s) {
      "use strict";
      var a, l, n, i, r, o, d, u;
      s.r(t),
        s.d(t, {
          PaymentPayoutGroupStatuses: function () {
            return a;
          },
          PaymentPayoutGroupTypes: function () {
            return l;
          },
          PayoutStatuses: function () {
            return n;
          },
          PaymentPayoutGroupDeferralReasons: function () {
            return i;
          },
        }),
        ((r = a || (a = {}))[(r.OPEN = 1)] = "OPEN"),
        (r[(r.PAYOUT_CREATED = 2)] = "PAYOUT_CREATED"),
        (r[(r.CANCELED = 3)] = "CANCELED"),
        (r[(r.PAYOUT_DEFERRED = 4)] = "PAYOUT_DEFERRED"),
        ((o = l || (l = {})).MARKETPLACE = "marketplace"),
        (o.STAGE_EVENT_SKU = "stage_event_sku"),
        (o.SERVER_ROLE_SUBSCRIPTION = "server_role_subscription"),
        (o.GUILD_PRODUCT = "guild_product"),
        ((d = n || (n = {}))[(d.OPEN = 1)] = "OPEN"),
        (d[(d.PAID = 2)] = "PAID"),
        (d[(d.PENDING = 3)] = "PENDING"),
        (d[(d.MANUAL = 4)] = "MANUAL"),
        (d[(d.CANCELED = 5)] = "CANCELED"),
        (d[(d.DEFERRED = 6)] = "DEFERRED"),
        (d[(d.DEFERRED_INTERNAL = 7)] = "DEFERRED_INTERNAL"),
        (d[(d.PROCESSING = 8)] = "PROCESSING"),
        (d[(d.ERROR = 9)] = "ERROR"),
        (d[(d.REJECTED = 10)] = "REJECTED"),
        (d[(d.RISK_REVIEW = 11)] = "RISK_REVIEW"),
        (d[(d.SUBMITTED = 12)] = "SUBMITTED"),
        (d[(d.PENDING_FUNDS = 13)] = "PENDING_FUNDS"),
        ((u = i || (i = {}))[(u.MINIMUM_NOT_REACHED = 1)] =
          "MINIMUM_NOT_REACHED"),
        (u[(u.BILLING_PROFILE_INACTIVE = 2)] = "BILLING_PROFILE_INACTIVE"),
        (u[(u.PAYOUT_FAILED = 3)] = "PAYOUT_FAILED"),
        (u[(u.APPLICATION_NOT_APPROVED = 4)] = "APPLICATION_NOT_APPROVED"),
        (u[(u.PAYOUT_SEIZED = 5)] = "PAYOUT_SEIZED");
    },
    45395: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = {
          open() {
            (0, l.openModalLazy)(async () => {
              let { default: e } = await s.el("79536").then(s.bind(s, "79536"));
              return t => (0, a.jsx)(e, { ...t });
            });
          },
        };
    },
    566171: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return A;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("917351"),
        o = s.n(r),
        d = s("446674"),
        u = s("769846"),
        c = s("77078"),
        E = s("583367"),
        _ = s("145079"),
        I = s("900938"),
        T = s("735201"),
        f = s("26989"),
        S = s("697218"),
        m = s("773309"),
        N = s("533403"),
        g = s("427459"),
        h = s("159885"),
        C = s("49111"),
        R = s("782340"),
        x = s("69339");
      let L = (0, h.cssValueToNumber)(
        u.default
          .GUILD_SETTINGS_PREMIUM_TIER_STATUS_PROGRESS_WITH_SUBSCRIPTIONS_MARGIN_TOP
      );
      class O extends l.Component {
        componentDidMount() {
          this.measure();
          let { guildId: e } = this.props;
          null != e && (0, E.fetchAppliedGuildBoostsForGuild)(e),
            window.addEventListener("resize", this.measure);
        }
        componentWillUnmount() {
          window.removeEventListener("resize", this.measure);
        }
        componentDidUpdate() {
          if (null == this.state.tierPositions)
            !Object.values(this.tierRefs).some(e => null == e) &&
              this.measure();
        }
        getSubscriptionCount() {
          let { subscriptions: e } = this.props;
          return null != e ? e.length : 0;
        }
        renderProgressBar(e) {
          let { tierPositions: t } = this.state,
            { guildId: s } = this.props,
            l = this.getSubscriptionCount();
          if (null == t || null == s) return null;
          let n = { numRequired: 0, y: 0, key: m.FIRST_TIER_KEY },
            i = (0, g.getAppliedGuildBoostsRequired)(s),
            r = e.map(e => {
              var s;
              return {
                numRequired: i[e.tier],
                name: (0, g.getTierName)(e.tier),
                y: null !== (s = t[e.tier]) && void 0 !== s ? s : 0,
                key: e.tier,
              };
            });
          return (0, a.jsx)(m.default, {
            className: l > 0 ? x.progressWithSubscriptions : x.progress,
            progress: l,
            tiers: [n, ...r],
            initialAnimationDelay: 500,
            onAnimatedTierMaker: this.handleAnimatedTier,
          });
        }
        renderTierNone() {
          return (0, a.jsxs)("div", {
            className: x.tierDefaultUnlocked,
            ref: this.defaultTierRef,
            children: [
              (0, a.jsx)(c.FormText, {
                type: c.FormText.Types.LABEL_BOLD,
                children:
                  R.default.Messages
                    .GUILD_SETTINGS_GUILD_PREMIUM_PERKS_TITLE_NONE,
              }),
              (0, a.jsx)(c.FormText, {
                type: c.FormText.Types.DESCRIPTION,
                className: x.tierDefaultUnlockedDescription,
                children:
                  R.default.Messages
                    .GUILD_SETTINGS_GUILD_PREMIUM_PERKS_DESCRIPTION_NONE,
              }),
            ],
          });
        }
        renderSubscribers() {
          let { subscribers: e, subscriberCount: t, guildId: s } = this.props;
          return (0, a.jsxs)("div", {
            ref: this.defaultTierRef,
            className: x.subscribers,
            children: [
              (0, a.jsx)(N.default, {
                guildId: null != s ? s : void 0,
                users: e,
                renderUser: this.renderSubscriber,
                renderMoreUsers: this.renderMoreSubscribers,
                max: 5,
              }),
              (0, a.jsx)("div", {
                className: x.subscriberCount,
                children:
                  R.default.Messages.GUILD_SETTINGS_PREMIUM_GUILD_COUNT_SUBSCRIBERS.format(
                    { count: t }
                  ),
              }),
            ],
          });
        }
        render() {
          let {
            guildId: e,
            renderTier: t,
            subscriptions: s,
            subscriberCount: l,
            tiers: n,
          } = this.props;
          if (null == s)
            return (0, a.jsx)(c.Spinner, {
              type: c.Spinner.Type.SPINNING_CIRCLE,
            });
          if (null == e) return null;
          let i = (0, g.getAppliedGuildBoostsRequired)(e);
          return (0, a.jsx)("div", {
            children: (0, a.jsxs)("div", {
              className: x.content,
              children: [
                this.renderProgressBar(n),
                (0, a.jsxs)("div", {
                  className: x.tiers,
                  children: [
                    0 === l ? this.renderTierNone() : this.renderSubscribers(),
                    n.map((s, a, l) =>
                      t({
                        tier: s,
                        tiers: l,
                        tierIndex: a,
                        onSetRef: this.setTierRef,
                        isAnimatedTo: i[this.state.animatedTier] >= i[s.tier],
                        subscriptionCount: this.getSubscriptionCount(),
                        guildId: e,
                      })
                    ),
                  ],
                }),
              ],
            }),
          });
        }
        constructor(...e) {
          super(...e),
            (this.tierRefs = {}),
            (this.defaultTierRef = l.createRef()),
            (this.state = {
              tierPositions: null,
              animatedTier: C.BoostedGuildTiers.NONE,
            }),
            (this.measure = () => {
              let { subscriberCount: e } = this.props,
                t = this.defaultTierRef.current;
              if (null == t) return;
              let { top: s } = t.getBoundingClientRect(),
                a = {};
              for (let [t, l] of Object.entries(this.tierRefs)) {
                if (null == l) return;
                let { top: n } = l.getBoundingClientRect(),
                  i = e > 0 ? L : 0;
                a[t] = n - s + 32 - i;
              }
              this.setState({ tierPositions: a });
            }),
            (this.setTierRef = (e, t) => {
              this.tierRefs[t.tier] = e;
            }),
            (this.handleAnimatedTier = e => {
              this.setState({ animatedTier: e.key });
            }),
            (this.renderSubscriber = (e, t, s) => {
              var l;
              return null == e
                ? null
                : (0, a.jsx)(
                    c.Tooltip,
                    {
                      text: (0, a.jsx)(_.default, {
                        user: e.user,
                        nick: e.nick,
                      }),
                      "aria-label":
                        null !== (l = e.nick) && void 0 !== l ? l : e.user.tag,
                      children: s =>
                        (0, a.jsx)(c.Avatar, {
                          ...s,
                          tabIndex: -1,
                          src:
                            null != e
                              ? e.user.getAvatarURL(this.props.guildId, 32)
                              : null,
                          className: i(
                            x.avatar,
                            t,
                            null != t ? x.subscriberMask : null
                          ),
                          size: c.AvatarSizes.SIZE_32,
                        }),
                    },
                    s
                  );
            }),
            (this.renderSubscribersPopout = () =>
              (0, a.jsx)(c.Scroller, {
                className: x.subscribersPopout,
                children: this.props.subscribers.map(e =>
                  (0, a.jsxs)(
                    "div",
                    {
                      className: x.subscribersPopoutUser,
                      children: [
                        (0, a.jsx)(c.Avatar, {
                          src: e.user.getAvatarURL(this.props.guildId, 32),
                          "aria-label": e.user.username,
                          size: c.AvatarSizes.SIZE_32,
                          className: x.avatar,
                        }),
                        (0, a.jsx)("div", {
                          className: x.subscribersPopoutUsername,
                          children: (0, a.jsx)(_.default, {
                            user: e.user,
                            nick: e.nick,
                          }),
                        }),
                      ],
                    },
                    e.user.id
                  )
                ),
              })),
            (this.renderMoreSubscribers = (e, t, s) =>
              (0, a.jsx)(
                c.Popout,
                {
                  renderPopout: this.renderSubscribersPopout,
                  position: "bottom",
                  autoInvert: !1,
                  children: t =>
                    (0, a.jsx)("div", {
                      className: x.moreSubscribers,
                      ...t,
                      children: e,
                    }),
                },
                s
              ));
        }
      }
      let p = d.default.connectStores(
        [I.default, S.default, T.default, f.default],
        () => {
          let e = I.default.getGuildId(),
            t = null != e ? T.default.getAppliedGuildBoostsForGuild(e) : null,
            s = o(null != t ? t : []).uniqBy(e => e.userId),
            a = s
              .map(t => ({
                user: S.default.getUser(t.userId),
                nick: f.default.getNick(e, t.userId),
              }))
              .filter(e => null != e.user)
              .value();
          return {
            guildId: e,
            subscriptions: t,
            subscribers: a,
            subscriberCount: s.size(),
          };
        }
      )(O);
      var A = p;
    },
    417385: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return A;
          },
        }),
        s("222007");
      var a,
        l,
        n,
        i,
        r = s("37983"),
        o = s("884691"),
        d = s("414456"),
        u = s.n(d),
        c = s("146606"),
        E = s("77078"),
        _ = s("983065"),
        I = s("160604"),
        T = s("879473"),
        f = s("912702"),
        S = s("381546"),
        m = s("45029"),
        N = s("956089"),
        g = s("427459"),
        h = s("49111"),
        C = s("782340"),
        R = s("69339");
      let x = { tension: 200, friction: 20 },
        L = { ...x, clamp: !0 };
      function O(e) {
        let [t, s] = o.useState(0),
          { numUnlocked: a, numRequired: l } = e,
          n = () => {
            s(1);
          },
          i = () => {
            s(2);
          },
          d = 2 === t,
          _ = 1 === t;
        if (!(!(a >= l) && a / l >= 0.8) || d) return null;
        let I = _ || d ? R.hidden : null,
          f = _ ? T.default.Stages.FLYING : T.default.Stages.HOVERING;
        return (0, r.jsx)(c.Spring, {
          from: { opacity: 0 },
          to: { opacity: 1 },
          config: L,
          children: e =>
            (0, r.jsxs)(c.animated.div, {
              className: R.tierClose,
              style: e,
              children: [
                (0, r.jsx)(T.default, {
                  className: R.tierCloseMechaWumpus,
                  stage: f,
                  onFlyingComplete: i,
                }),
                (0, r.jsx)("div", {
                  className: u(R.tierCloseHint, I),
                  children:
                    C.default.Messages.GUILD_SETTINGS_PREMIUM_GUILD_CLOSE_HINT.format(
                      { numLeft: l - a }
                    ),
                }),
                (0, r.jsx)(E.Clickable, {
                  onClick: n,
                  className: u(R.tierCloseClose, I),
                  children: (0, r.jsx)(S.default, {
                    className: R.tierCloseCloseIcon,
                  }),
                }),
              ],
            }),
        });
      }
      function p(e) {
        let {
            withCardBody: t,
            isAnimatedTo: s,
            hasAnimatedUnlocked: a,
            onSetRef: l,
            tier: n,
            showHeaderLockStatus: i,
            headerButton: d = null,
            subscriptionsRequired: E,
            subscriptionCount: _,
            className: I,
          } = e,
          T = e => {
            null == l || l(e);
          },
          [S, m] = o.useState(0);
        return (
          o.useLayoutEffect(() => {
            s && m(1);
          }, [s]),
          (0, r.jsx)(c.Spring, {
            from: { unlockedTranslateY: 50 },
            to: { unlockedTranslateY: 0 === S ? 50 : 0 },
            config: x,
            children: e =>
              (0, r.jsx)("div", {
                className: u(
                  {
                    [R.tierHeaderWithoutCardBody]: !t,
                    [R.tierHeaderUnlocked]: a,
                    [R.tierHeaderLocked]: !a,
                  },
                  I
                ),
                ref: T,
                children: (0, r.jsxs)("div", {
                  className: R.tierHeaderContent,
                  children: [
                    (0, r.jsx)(f.default, {
                      tier: n.tier,
                      className: u(R.tierIcon, { [R.tierIconLocked]: !a }),
                    }),
                    (0, r.jsx)("div", {
                      className: u(R.tierTitle, { [R.tierTitleActive]: a }),
                      children: n.title,
                    }),
                    i
                      ? (0, r.jsx)(M, {
                          transform:
                            null == e
                              ? void 0
                              : e.unlockedTranslateY.to(e =>
                                  "translate3d(0, ".concat(e, "px, 0)")
                                ),
                          headerButton: d,
                          subscriptionsRequired: E,
                          hasAnimatedUnlocked: a,
                        })
                      : null,
                    (0, r.jsx)(O, { numUnlocked: _, numRequired: E }),
                  ],
                }),
              }),
          })
        );
      }
      function A(e) {
        let {
            children: t,
            subscriptionCount: s,
            onSetRef: a,
            tier: l,
            isAnimatedTo: n,
            hasBottomMargin: i,
            headerButton: o = null,
            withCardBody: d = !0,
            guildId: c,
            showHeaderLockStatus: E = !0,
          } = e,
          T = (0, g.getAppliedGuildBoostsRequired)(c)[l.tier],
          f = n && s >= T,
          S =
            l.tier !== h.BoostedGuildTiers.NONE &&
            l.tier !== h.BoostedGuildTiers.TIER_1,
          m = (e, t) => {
            let { icon: s, className: a } = (0, _.getPerkIcon)(e.icon, t);
            return (0, r.jsxs)(
              "div",
              {
                className: R.perk,
                children: [
                  (0, r.jsx)(I.default, {
                    name: String(e.icon),
                    icon: s,
                    className: R.perkIcon,
                    iconClassName: a,
                  }),
                  (0, r.jsxs)("div", {
                    className: R.perkText,
                    children: [
                      (0, r.jsxs)("div", {
                        className: R.perkTitle,
                        children: [
                          e.title,
                          e.isNew
                            ? (0, r.jsx)(N.TextBadge, {
                                className: R.newBadge,
                                text: C.default.Messages.NEW,
                              })
                            : null,
                        ],
                      }),
                      (0, r.jsx)("div", {
                        className: R.perkDescription,
                        children: e.description,
                      }),
                    ],
                  }),
                ],
              },
              e.title
            );
          };
        return (0, r.jsxs)(
          "div",
          {
            className: u(R.tier, { [R.tierBottomMargin]: i }),
            children: [
              (0, r.jsx)(p, {
                subscriptionCount: s,
                tier: l,
                headerButton: o,
                showHeaderLockStatus: E,
                onSetRef: e => {
                  null != a && a(e, l);
                },
                withCardBody: d,
                guildId: c,
                hasBottomMargin: i,
                subscriptionsRequired: T,
                hasAnimatedUnlocked: f,
                isAnimatedTo: n,
              }),
              (0, r.jsx)("div", {
                className: u({ [R.tierBody]: d }),
                children:
                  null != t
                    ? t
                    : (0, r.jsxs)(r.Fragment, {
                        children: [
                          S
                            ? (0, r.jsx)("div", {
                                className: R.previousPerks,
                                children:
                                  C.default.Messages
                                    .GUILD_SETTINGS_GUILD_PREMIUM_PERKS_PREVIOUS_PERKS,
                              })
                            : null,
                          null != l.perks &&
                            (0, r.jsx)("div", {
                              className: R.perks,
                              children: l.perks.map(e => m(e, f)),
                            }),
                        ],
                      }),
              }),
            ],
          },
          l.tier
        );
      }
      ((n = a || (a = {}))[(n.OPEN = 0)] = "OPEN"),
        (n[(n.CLOSING = 1)] = "CLOSING"),
        (n[(n.CLOSED = 2)] = "CLOSED"),
        ((i = l || (l = {}))[(i.NONE = 0)] = "NONE"),
        (i[(i.UNLOCKED_SLIDE = 1)] = "UNLOCKED_SLIDE");
      let M = e => {
          let {
            transform: t,
            hasAnimatedUnlocked: s,
            headerButton: a,
            subscriptionsRequired: l,
          } = e;
          return null !== a
            ? a
            : s
              ? (0, r.jsx)(D, { transform: t })
              : (0, r.jsx)(v, { subscriptionsRequired: l });
        },
        D = e => {
          let { transform: t } = e;
          return (0, r.jsx)(c.animated.div, {
            style: { transform: t },
            className: R.tierUnlocked,
            children: C.default.Messages.GUILD_SETTINGS_PREMIUM_GUILD_UNLOCKED,
          });
        },
        v = e => {
          let { subscriptionsRequired: t } = e;
          return (0, r.jsxs)(r.Fragment, {
            children: [
              (0, r.jsx)("div", {
                className: R.tierRequirement,
                children:
                  C.default.Messages.GUILD_SETTINGS_PREMIUM_GUILD_TIER_REQUIREMENT.format(
                    { required: t }
                  ),
              }),
              (0, r.jsx)(m.default, { className: R.tierLock }),
            ],
          });
        };
    },
    910687: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return f;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("77078"),
        o = s("87657"),
        d = s("612039"),
        u = s("945330"),
        c = s("987772"),
        E = s("467094"),
        _ = s("41170"),
        I = s("782340"),
        T = s("369185"),
        f = e => {
          let {
              className: t,
              isDisabled: n,
              sticker: f,
              canManageSticker: S,
            } = e,
            [m, N] = l.useState(!1),
            [g, h] = (0, d.default)(null, 4e3),
            C = () => {
              (0, r.openModalLazy)(async () => {
                let { default: e } = await s
                  .el("54666")
                  .then(s.bind(s, "54666"));
                return t =>
                  (0, a.jsx)(e, { sticker: f, guildId: f.guild_id, ...t });
              });
            },
            R = async () => {
              h(null), N(!0);
              try {
                await (0, E.deleteGuildSticker)(f);
              } catch (e) {
                h(e.body.message), N(!1);
              }
            };
          return (0, a.jsx)(r.Tooltip, {
            color: r.Tooltip.Colors.RED,
            forceOpen: null != g,
            text: g,
            children: () =>
              (0, a.jsxs)("div", {
                className: i(T.wrapper, t, { [T.wrapperDisabled]: n }),
                children: [
                  (0, a.jsxs)("div", {
                    className: i(T.content, { [T.contentRemoving]: m }),
                    children: [
                      (0, a.jsx)(_.default, {
                        className: T.sticker,
                        size: 72,
                        sticker: f,
                      }),
                      (0, a.jsxs)("div", {
                        children: [
                          (0, a.jsx)(r.Text, {
                            color: "header-primary",
                            variant: "text-xs/semibold",
                            className: T.stickerName,
                            children: f.name,
                          }),
                          null != f.user &&
                            (0, a.jsxs)("div", {
                              className: T.user,
                              children: [
                                (0, a.jsx)(o.default, {
                                  className: T.userAvatar,
                                  size: r.AvatarSizes.SIZE_16,
                                  user: f.user,
                                }),
                                (0, a.jsx)(r.Text, {
                                  color: "header-secondary",
                                  variant: "text-xs/normal",
                                  children: f.user.username,
                                }),
                              ],
                            }),
                        ],
                      }),
                      S
                        ? (0, a.jsxs)("div", {
                            className: T.actions,
                            children: [
                              (0, a.jsx)(r.Clickable, {
                                className: i(T.action, T.actionEdit),
                                onClick: C,
                                "aria-label": I.default.Messages.EDIT,
                                children: (0, a.jsx)(c.default, {
                                  className: T.icon,
                                }),
                              }),
                              (0, a.jsx)(r.Clickable, {
                                className: i(T.action, T.actionRemove),
                                onClick: R,
                                "aria-label": I.default.Messages.REMOVE,
                                children: (0, a.jsx)(u.default, {
                                  className: T.icon,
                                }),
                              }),
                            ],
                          })
                        : null,
                    ],
                  }),
                  m && (0, a.jsx)(r.Spinner, { className: T.spinner }),
                ],
              }),
          });
        };
    },
    657: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return M;
          },
        }),
        s("222007"),
        s("424973");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("446674"),
        o = s("77078"),
        d = s("997289"),
        u = s("685665"),
        c = s("617917"),
        E = s("163732"),
        _ = s("817963"),
        I = s("599110"),
        T = s("427459"),
        f = s("467094"),
        S = s("364685"),
        m = s("566171"),
        N = s("417385"),
        g = s("910687"),
        h = s("49111"),
        C = s("782340"),
        R = s("91591");
      let x = e =>
          e < (0, T.getTotalStickerCountForTier)(h.BoostedGuildTiers.NONE)
            ? h.BoostedGuildTiers.NONE
            : e < (0, T.getTotalStickerCountForTier)(h.BoostedGuildTiers.TIER_1)
              ? h.BoostedGuildTiers.TIER_1
              : e <
                  (0, T.getTotalStickerCountForTier)(h.BoostedGuildTiers.TIER_2)
                ? h.BoostedGuildTiers.TIER_2
                : e <
                    (0, T.getTotalStickerCountForTier)(
                      h.BoostedGuildTiers.TIER_3
                    )
                  ? h.BoostedGuildTiers.TIER_3
                  : h.BoostedGuildTiers.NONE,
        L = e => {
          let {
              children: t,
              currentGuildTier: s,
              guildStickers: l,
              tier: n,
            } = e,
            i = s < n,
            r = (0, T.getIncrementalStickerCountForTier)(n);
          return (0, a.jsxs)(a.Fragment, {
            children: [
              (0, a.jsx)(o.Heading, {
                color: "header-primary",
                variant: "heading-md/semibold",
                children: t,
              }),
              !i &&
                (0, a.jsx)(o.Text, {
                  variant: "text-xs/normal",
                  children:
                    C.default.Messages.GUILD_STICKER_SETTINGS_REMAINING_SLOTS_AVAILABLE.format(
                      {
                        numTotal: r,
                        numAvailable: (0, T.getAvailableStickerSlotCount)(l, n),
                      }
                    ),
                }),
            ],
          });
        },
        O = e => {
          let { guildId: t } = e;
          (0, o.openModalLazy)(async () => {
            let { default: e } = await s.el("54666").then(s.bind(s, "54666"));
            return s => (0, a.jsx)(e, { guildId: t, ...s });
          });
        },
        p = () =>
          (0, a.jsx)("div", {
            className: R.placeholderCard,
            children: (0, a.jsx)("img", {
              className: R.placeholderImg,
              alt: C.default.Messages
                .GUILD_STICKER_SETTINGS_PLACEHOLDER_ALT_TEXT,
              src: s("89734"),
            }),
          }),
        A = e => {
          let { guild: t } = e,
            { location: s } = (0, d.useAnalyticsContext)(),
            { canCreateExpressions: l } = (0, _.useManageResourcePermissions)(
              t
            );
          return (0, a.jsx)(o.Button, {
            size: o.Button.Sizes.SMALL,
            color: o.Button.Colors.BRAND,
            onClick: () => {
              I.default.track(h.AnalyticEvents.OPEN_MODAL, {
                type: h.AnalyticsSections.CREATE_STICKER_MODAL,
                location: s,
              }),
                O({ guildId: t.id });
            },
            disabled: !l,
            children: C.default.Messages.GUILD_STICKER_GRID_UPLOAD_LABEL,
          });
        };
      var M = e => {
        let { guild: t } = e,
          [n, d] = l.useState(!0),
          I = (0, r.useStateFromStores)(
            [S.default],
            () => {
              var e;
              return null !== (e = S.default.getStickersByGuildId(t.id)) &&
                void 0 !== e
                ? e
                : [];
            },
            [t]
          ),
          { analyticsLocations: O } = (0, u.default)(),
          M = t.hasFeature(h.GuildFeatures.MORE_STICKERS)
            ? h.BoostedGuildTiers.TIER_3
            : t.premiumTier,
          D = t.hasFeature(h.GuildFeatures.MORE_STICKERS)
            ? (0, T.getAppliedGuildBoostsRequired)(t.id)[
                h.BoostedGuildTiers.TIER_3
              ]
            : t.premiumSubscriberCount;
        if (
          (l.useEffect(() => {
            let e = !1,
              s = async () => {
                d(!0), await (0, f.fetchGuildStickers)(t.id), !e && d(!1);
              };
            return (
              s(),
              () => {
                e = !0;
              }
            );
          }, [t]),
          l.useEffect(() => {
            window.dispatchEvent(new Event("resize"));
          }, [I]),
          n)
        )
          return (0, a.jsx)(o.Spinner, {});
        let v = (e, s) => {
            let a = null;
            s === h.BoostedGuildTiers.TIER_1
              ? (a = h.AnalyticsObjectTypes.TIER_1)
              : s === h.BoostedGuildTiers.TIER_2
                ? (a = h.AnalyticsObjectTypes.TIER_2)
                : s === h.BoostedGuildTiers.TIER_3 &&
                  (a = h.AnalyticsObjectTypes.TIER_3),
              (0, E.default)({
                analyticsLocations: O,
                analyticsLocation: {
                  page: h.AnalyticsPages.GUILD_SETTINGS,
                  section: h.AnalyticsSections.GUILD_SETTINGS_STICKERS,
                  object: h.AnalyticsObjects.BOOST_LEVEL_UPSELL_BUTTON,
                  objectType: a,
                },
                guildId: t.id,
                totalNumberOfSlotsToAssign: e,
              });
          },
          G = [
            {
              tier: h.BoostedGuildTiers.NONE,
              title: (0, a.jsx)(L, {
                guildStickers: I,
                currentGuildTier: M,
                tier: h.BoostedGuildTiers.NONE,
                children:
                  C.default.Messages.GUILD_SETTINGS_STICKERS_FREE_SLOTS_HEADER,
              }),
            },
            {
              tier: h.BoostedGuildTiers.TIER_1,
              title: (0, a.jsx)(L, {
                guildStickers: I,
                currentGuildTier: M,
                tier: h.BoostedGuildTiers.TIER_1,
                children: C.default.Messages.PREMIUM_GUILD_TIER_1,
              }),
            },
            {
              tier: h.BoostedGuildTiers.TIER_2,
              title: (0, a.jsx)(L, {
                guildStickers: I,
                currentGuildTier: M,
                tier: h.BoostedGuildTiers.TIER_2,
                children: C.default.Messages.PREMIUM_GUILD_TIER_2,
              }),
            },
            {
              tier: h.BoostedGuildTiers.TIER_3,
              title: (0, a.jsx)(L, {
                guildStickers: I,
                currentGuildTier: M,
                tier: h.BoostedGuildTiers.TIER_3,
                children: C.default.Messages.PREMIUM_GUILD_TIER_3,
              }),
            },
          ];
        return (0, a.jsx)(m.default, {
          tiers: G,
          renderTier: e => {
            let l,
              {
                isAnimatedTo: n,
                onSetRef: r,
                tier: d,
                tiers: u,
                tierIndex: E,
              } = e,
              { canCreateExpressions: f, canManageGuildExpression: S } = (0,
              _.getManageResourcePermissions)(t),
              m = u[E - 1],
              L = null != m ? (0, T.getTotalStickerCountForTier)(m.tier) : 0,
              O = (0, T.getTotalStickerCountForTier)(d.tier),
              G = (0, T.getIncrementalStickerCountForTier)(d.tier),
              j = I.slice(L, O),
              U = j.length > 0,
              P = M < d.tier,
              b = x(I.length),
              B = f && !P && b === d.tier && O !== j.length,
              y = B || j.length > 0,
              F = O - L,
              H = s("89734"),
              k = G - j.length,
              w = B ? Math.min(5 - ((j.length + 0) % 5), k) : 0,
              V = [];
            for (let e = 0; e < w; e++)
              V.push((0, a.jsx)(p, {}, "placeholder-".concat(e)));
            let Y = b === E + 1 && b > M,
              W = B || Y || E > M;
            return (
              Y
                ? (l = (0, a.jsx)(c.default, {
                    guild: t,
                    size: o.Button.Sizes.SMALL,
                    color: o.Button.Colors.GREEN,
                    buttonText:
                      C.default.Messages.GUILD_STICKER_SETTINGS_UNLOCK_SLOTS,
                    targetBoostedGuildTier: M + 1,
                    analyticsLocation: {
                      page: h.AnalyticsPages.GUILD_SETTINGS,
                      section: h.AnalyticsSections.GUILD_SETTINGS_STICKERS,
                      object: h.AnalyticsObjects.BOOST_UPSELL_NEXT_LEVEL_HEADER,
                      objectType: (0, T.boostedGuildTierToAnalyticsObjectType)(
                        d.tier
                      ),
                    },
                  }))
                : B && (l = (0, a.jsx)(A, { guild: t })),
              (0, a.jsxs)(
                N.default,
                {
                  subscriptionCount: D,
                  tier: d,
                  onSetRef: r,
                  isAnimatedTo: n,
                  hasBottomMargin: E !== u.length - 1,
                  withCardBody: !y,
                  headerButton: l,
                  showHeaderLockStatus: W,
                  guildId: t.id,
                  children: [
                    y &&
                      (0, a.jsxs)("div", {
                        className: R.grid,
                        children: [
                          j.map(e =>
                            (0, a.jsx)(
                              g.default,
                              {
                                isDisabled: P,
                                sticker: e,
                                canManageSticker: S(e),
                              },
                              e.id
                            )
                          ),
                          V,
                        ],
                      }),
                    !P &&
                      !B &&
                      0 === j.length &&
                      (0, a.jsx)("div", {
                        className: i(R.emptyTierWrapper, R.unusedTierWrapper),
                        children: (0, a.jsx)(o.Text, {
                          variant: "text-md/normal",
                          color: "header-secondary",
                          children:
                            C.default.Messages.GUILD_STICKER_UNUSED_TIER,
                        }),
                      }),
                    P &&
                      !U &&
                      (0, a.jsxs)("div", {
                        className: R.emptyTierWrapper,
                        children: [
                          (0, a.jsx)("img", {
                            alt: C.default.Messages
                              .GUILD_STICKER_SETTINGS_ICON_ALT_TEXT,
                            className: R.emptyTierImage,
                            src: H,
                          }),
                          (0, a.jsx)(o.Text, {
                            className: R.unlockTierCtaHeading,
                            variant: "text-md/normal",
                            color: "header-secondary",
                            children:
                              d.tier === h.BoostedGuildTiers.TIER_1
                                ? C.default.Messages.GUILD_STICKER_SETTINGS_ADDITIONAL_SLOTS_WITHOUT_TOTAL.format(
                                    { numAdditional: F }
                                  )
                                : C.default.Messages.GUILD_STICKER_SETTINGS_ADDITIONAL_SLOTS.format(
                                    { numAdditional: F, numTotal: O }
                                  ),
                          }),
                          (0, a.jsx)(o.Button, {
                            color: o.Button.Colors.GREEN,
                            onClick: () =>
                              v(
                                (0, T.getAppliedGuildBoostsRequired)(t.id)[
                                  d.tier
                                ] - t.premiumSubscriberCount,
                                d.tier
                              ),
                            children:
                              C.default.Messages
                                .GUILD_STICKER_SETTINGS_BUY_LEVEL,
                          }),
                        ],
                      }),
                  ],
                },
                d.tier
              )
            );
          },
        });
      };
    },
    3245: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("872717"),
        l = s("49111"),
        n = {
          fetchTeams() {
            let e =
              arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            return a.default.get({
              url: l.Endpoints.TEAMS,
              query: { include_payout_account_status: e },
            });
          },
        };
    },
    810367: function (e, t, s) {
      "use strict";
      var a, l;
      s.r(t),
        s.d(t, {
          PayoutAccountStatuses: function () {
            return a;
          },
        }),
        ((l = a || (a = {}))[(l.UNSUBMITTED = 1)] = "UNSUBMITTED"),
        (l[(l.PENDING = 2)] = "PENDING"),
        (l[(l.ACTION_REQUIRED = 3)] = "ACTION_REQUIRED"),
        (l[(l.ACTIVE = 4)] = "ACTIVE"),
        (l[(l.BLOCKED = 5)] = "BLOCKED"),
        (l[(l.SUSPENDED = 6)] = "SUSPENDED");
    },
    963393: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          isUserTeamAdministrator: function () {
            return l;
          },
        });
      var a = s("162948");
      function l(e, t) {
        var s, l, n;
        if (t.owner_user_id === e) return !0;
        return (
          (null ===
            ((l = t), (n = e), (s = l.members.find(e => e.user.id === n))) ||
          void 0 === s
            ? void 0
            : s.role) === a.TeamMemberRoles.ADMIN
        );
      }
    },
    719887: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        }),
        s("222007");
      var a = s("884691"),
        l = s("3245"),
        n = function () {
          let e =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : {},
            { refreshOnDepChange: t } = e,
            [s, n] = a.useState([]),
            [i, r] = a.useState(!0),
            o = async () => {
              r(!0);
              try {
                let e = await l.default.fetchTeams(!0);
                n(e.body);
              } catch (e) {}
              r(!1);
            },
            d = a.useRef(!0);
          return (
            a.useEffect(() => {
              (d.current || t) && ((d.current = !1), o());
            }, [t]),
            { teams: s, loading: i, refresh: o }
          );
        };
    },
    478964: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return I;
          },
        });
      var a = s("446674"),
        l = s("913144"),
        n = s("305961"),
        i = s("49111");
      let r = { description: "", channels: [], enabled: !1 },
        o = r,
        d = !1,
        u = !1,
        c = r;
      function E(e) {
        let { welcomeScreen: t, guildId: s } = e,
          a = n.default.getGuild(s);
        if (null != t) {
          var l, d;
          c = o = {
            description: null !== (l = t.description) && void 0 !== l ? l : "",
            channels:
              null !== (d = t.welcome_channels) && void 0 !== d ? d : [],
            enabled:
              null == a
                ? void 0
                : a.hasFeature(i.GuildFeatures.WELCOME_SCREEN_ENABLED),
          };
        } else c = o = r;
        u = !1;
      }
      class _ extends a.default.Store {
        initialize() {
          this.waitFor(n.default);
        }
        get() {
          return c;
        }
        showNotice() {
          return u;
        }
        getSettingsProps() {
          return {
            submitting: d,
            hasErrors: u,
            welcomeSettings: c,
            originalWelcomeSettings: o,
          };
        }
      }
      _.displayName = "WelcomeScreenSettingsStore";
      var I = new _(l.default, {
        WELCOME_SCREEN_FETCH_SUCCESS: E,
        WELCOME_SCREEN_UPDATE: E,
        WELCOME_SCREEN_SETTINGS_RESET: function () {
          (c = o), (u = !1);
        },
        WELCOME_SCREEN_SETTINGS_CLEAR: function () {
          (c = r), (o = r);
        },
        WELCOME_SCREEN_SETTINGS_UPDATE: function (e) {
          let { settings: t } = e;
          c = { ...c, ...t };
        },
        WELCOME_SCREEN_SUBMIT: function () {
          d = !0;
        },
        WELCOME_SCREEN_SUBMIT_SUCCESS: function (e) {
          E(e), (d = !1);
        },
        WELCOME_SCREEN_SUBMIT_FAILURE: function () {
          (u = !0), (d = !1);
        },
      });
    },
    628624: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return u;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("446674"),
        n = s("45299"),
        i = s("900938"),
        r = s("223170"),
        o = s("478964"),
        d = s("782340"),
        u = () => {
          let { guild: e } = (0, l.useStateFromStores)([i.default], () =>
              i.default.getProps()
            ),
            { submitting: t, welcomeSettings: s } = (0, l.useStateFromStores)(
              [o.default],
              () => o.default.getSettingsProps()
            );
          return null == e
            ? null
            : (0, a.jsx)(n.default, {
                onSave: () => (0, r.saveWelcomeScreen)(e.id, s),
                onReset: r.resetWelcomeScreen,
                submitting: t,
                onSaveText: d.default.Messages.TRY_AGAIN,
                message:
                  d.default.Messages
                    .GUILD_SETTINGS_PUBLIC_WELCOME_UPDATE_FAILURE,
              });
        };
    },
    310457: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return d;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("446674"),
        n = s("77078"),
        i = s("679653"),
        r = s("42203"),
        o = s("782340");
      function d(e) {
        let { onConfirm: t, onCancel: s, channelId: d } = e,
          u = (0, l.useStateFromStores)([r.default], () =>
            null != d ? r.default.getChannel(d) : null
          ),
          c = (0, i.default)(u, !0);
        return (0, a.jsx)(n.DeclarativeConfirmModal, {
          dismissable: !0,
          header: o.default.Messages.WELCOME_CHANNEL_DELETE_CONFIRM_TITLE,
          confirmText: o.default.Messages.REMOVE,
          cancelText: o.default.Messages.CANCEL,
          onConfirm: t,
          onCancel: s,
          children: (0, a.jsx)(n.Text, {
            variant: "text-sm/normal",
            children:
              null != u
                ? o.default.Messages.WELCOME_CHANNEL_DELETE_CONFIRM_BODY.format(
                    { channelName: c }
                  )
                : o.default.Messages
                    .WELCOME_CHANNEL_DELETE_CONFIRM_BODY_GENERIC,
          }),
        });
      }
    },
    277277: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return a;
          },
        });
      var a,
        l = s("666038"),
        n = s("766274");
      a = class extends l.default {
        constructor(e) {
          super(),
            (this.id = e.id),
            (this.name = e.name),
            (this.managed = e.managed),
            (this.roles = e.roles),
            (this.requiredColons = e.requiredColons),
            (this.user = new n.default(e.user)),
            (this.animated = e.animated),
            (this.available = e.available);
        }
      };
    },
    93581: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return f;
          },
        }),
        s("222007"),
        s("881410");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("146606"),
        o = s("446674"),
        d = s("669491"),
        u = s("77078"),
        c = s("206230"),
        E = s("461380"),
        _ = s("578706"),
        I = s("171950");
      function T(e) {
        let { checked: t, children: s } = e;
        return (0, a.jsxs)("div", {
          className: I.row,
          children: [
            (0, a.jsx)(u.Text, {
              variant: "text-md/normal",
              color: "interactive-active",
              className: I.rowText,
              children: s,
            }),
            t
              ? (0, a.jsx)(_.default, {
                  backgroundColor: d.default.unsafe_rawColors.WHITE_500.css,
                  className: i(I.rowIcon, I.rowIconChecked),
                })
              : (0, a.jsx)("div", { className: i(I.rowIcon, I.rowIconEmpty) }),
          ],
        });
      }
      function f(e) {
        let {
            title: t,
            children: s,
            buttonLabel: n,
            buttonCallback: i,
            disabled: d,
          } = e,
          [_, f] = l.useState(!1),
          S = (0, o.useStateFromStores)(
            [c.default],
            () => c.default.useReducedMotion
          ),
          m = s.flatMap(e => e.items.map(e => e.completed)),
          N = m.filter(e => e).length / m.length,
          g = (0, r.useSpring)({
            width: "".concat(100 * N, "%"),
            immediate: S,
          });
        return (0, a.jsxs)("div", {
          className: I.container,
          children: [
            (0, a.jsxs)(u.Clickable, {
              className: I.headerBar,
              onClick: () => f(e => !e),
              children: [
                (0, a.jsx)(u.Heading, {
                  variant: "heading-md/semibold",
                  className: I.headerText,
                  children: t,
                }),
                (0, a.jsx)(E.default, {
                  direction: _
                    ? E.default.Directions.DOWN
                    : E.default.Directions.UP,
                  className: I.headerCaret,
                }),
              ],
            }),
            (0, a.jsx)("div", {
              className: I.progressBarOuter,
              children: (0, a.jsx)(r.animated.div, {
                className: I.progressBarInner,
                style: g,
              }),
            }),
            !_ &&
              s.map((e, t) => {
                let { title: s, items: n } = e;
                return (0, a.jsxs)(
                  l.Fragment,
                  {
                    children: [
                      t > 0 &&
                        (0, a.jsx)(u.FormDivider, { className: I.divider }),
                      (0, a.jsx)(u.FormTitle, {
                        className: I.categoryTitle,
                        children: s,
                      }),
                      n.map((e, t) =>
                        (0, a.jsx)(
                          T,
                          { children: e.description, checked: e.completed },
                          t
                        )
                      ),
                    ],
                  },
                  t
                );
              }),
            null !== n &&
              "" !== n &&
              null !== i &&
              (0, a.jsxs)("div", {
                children: [
                  (0, a.jsx)(u.FormDivider, { className: I.divider }),
                  (0, a.jsx)(u.Button, {
                    className: I.button,
                    size: u.Button.Sizes.SMALL,
                    color: u.Button.Colors.BRAND_NEW,
                    hover: u.Button.Colors.BRAND_NEW,
                    onClick: i,
                    disabled: 1 !== N || d,
                    children: n,
                  }),
                ],
              }),
          ],
        });
      }
    },
    920700: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          CopyInputModes: function () {
            return E;
          },
          default: function () {
            return I;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("77078"),
        o = s("474293"),
        d = s("145131"),
        u = s("782340"),
        c = s("704524");
      let E = { DEFAULT: "default", SUCCESS: "success", ERROR: "error" };
      class _ extends l.PureComponent {
        select() {
          var e;
          null === (e = this.inputRef.current) || void 0 === e || e.select();
        }
        renderInput(e) {
          var t;
          let { value: s, mode: l } = this.props,
            n =
              null === (t = this.context) || void 0 === t ? void 0 : t.titleId;
          return (0, a.jsx)("input", {
            className: i((0, o.getClass)(c, "input", l), {
              [c.inputHidden]: e,
            }),
            ref: this.inputRef,
            type: "text",
            value: s,
            onClick: this.handleInputClick,
            readOnly: !0,
            "aria-labelledby": n,
          });
        }
        render() {
          let e;
          let {
              text: t = u.default.Messages.COPY,
              mode: s,
              hideMessage: l,
              className: n,
              buttonLook: _,
            } = this.props,
            I = null != l;
          switch (s) {
            case E.SUCCESS:
              e = r.ButtonColors.GREEN;
              break;
            case E.ERROR:
              e = r.ButtonColors.RED;
              break;
            default:
              e = this.props.buttonColor;
          }
          return (0, a.jsx)(r.FocusRing, {
            focusTarget: this.inputRef,
            ringTarget: this.containerRef,
            children: (0, a.jsx)("div", {
              className: i((0, o.getClass)(c, "copyInput", s), n),
              ref: this.containerRef,
              children: (0, a.jsxs)(d.default, {
                className: c.layout,
                children: [
                  (0, a.jsxs)(d.default, {
                    className: c.inputWrapper,
                    children: [
                      this.renderInput(I),
                      I
                        ? (0, a.jsx)("div", {
                            className: c.hiddenMessage,
                            children: l,
                          })
                        : null,
                    ],
                  }),
                  (0, a.jsx)(d.default, {
                    shrink: 1,
                    grow: 0,
                    style: { margin: 0 },
                    children: (0, a.jsx)(r.Button, {
                      className: c.button,
                      onClick: this.handleButtonClick,
                      size: r.ButtonSizes.MIN,
                      color: e,
                      look: _,
                      children: t,
                    }),
                  }),
                ],
              }),
            }),
          });
        }
        constructor(...e) {
          super(...e),
            (this.inputRef = l.createRef()),
            (this.containerRef = l.createRef()),
            (this.handleButtonClick = () => {
              this.select();
              let { onCopy: e, value: t } = this.props;
              e(t);
            }),
            (this.handleInputClick = () => {
              this.select();
            });
        }
      }
      (_.contextType = r.FormContext),
        (_.defaultProps = {
          supportsCopy: !0,
          buttonColor: r.ButtonColors.PRIMARY,
          buttonLook: r.ButtonLooks.FILLED,
          mode: E.DEFAULT,
        }),
        (_.Modes = E),
        (_.ButtonColors = r.ButtonColors),
        (_.ButtonLooks = r.ButtonLooks);
      var I = _;
    },
    160604: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("146606"),
        o = s("467159");
      class d extends l.Component {
        render() {
          let { icon: e, ...t } = this.props;
          return (0, a.jsx)(e, { ...t });
        }
      }
      let u = (0, r.animated)(d);
      var c = function (e) {
        let { className: t, name: s, icon: l, iconClassName: n } = e,
          d = (0, r.useTransition)(
            { name: s, icon: l, iconClassName: n },
            {
              key: e => e.name,
              initial: null,
              from: { opacity: 0 },
              enter: { opacity: 1 },
              leave: { opacity: 0 },
            }
          );
        return (0, a.jsx)("div", {
          className: i(o.crossfade, t),
          children: d((e, t) => {
            let { icon: s, iconClassName: l } = t;
            return (0, a.jsx)(u, {
              icon: s,
              className: i(o.icon, l),
              style: e,
            });
          }),
        });
      };
    },
    879473: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return f;
          },
        }),
        s("222007");
      var a,
        l,
        n = s("37983"),
        i = s("884691"),
        r = s("414456"),
        o = s.n(r),
        d = s("917351"),
        u = s.n(d),
        c = s("661486"),
        E = s("158833");
      ((l = a || (a = {}))[(l.HOVERING = 0)] = "HOVERING"),
        (l[(l.FLYING = 1)] = "FLYING");
      let _ = Object.freeze({
        HOVERING: {
          Y_DURATION: 1500,
          Y_VALUE: -5,
          Y_VALUE_MODIFIER: -1,
          FIRE_COUNT: 10,
          FIRE_MIN_INTENSITY_FALLING: 0.8,
          FIRE_MAX_INTENSITY_FALLING: 1,
          FIRE_MIN_INTENSITY_RISING: 1,
          FIRE_MAX_INTENSITY_RISING: 1.2,
        },
        FALLING: { Y_VALUE: 10, FIRE_COUNT: 10, FIRE_VALUE: 0.2 },
        STAGING: {
          DURATION: 500,
          Y_VALUE: 22,
          SHAKE_COUNT: 10,
          SHAKE_INTENSITY: 2,
          FIRE_COUNT: 4,
          FIRE_MIN_INTENSITY: 0.6,
          FIRE_MAX_INTENSITY: 1,
        },
        FLYING: {
          DURATION: 500,
          Y_VALUE: -1e3,
          Y_EASING: c.default.Easing.bezier(0.46, 0.01, 1, -0.3),
          X_VALUE: 200,
          X_EASING: c.default.Easing.bezier(0.65, 0.05, 1, 0.25),
          FIRE_COUNT: 10,
          FIRE_MIN_INTENSITY: 1.2,
          FIRE_MAX_INTENSITY: 1.4,
          OPACITY_VALUE: 0,
          OPACITY_DURATION_DIVIDEND: 2,
        },
      });
      function I(e, t, s, a) {
        return c.default.sequence(
          u.times(t, l =>
            c.default.timing(e, { toValue: a(l), duration: s / t })
          )
        );
      }
      class T extends i.Component {
        componentDidMount() {
          this.startAnimation();
        }
        componentWillUnmount() {
          this.isUnmounted = !0;
        }
        componentDidUpdate(e) {
          this.props.stage !== e.stage && this.startAnimation();
        }
        startAnimation() {
          switch (
            (null != this.currentAnimation && this.currentAnimation.stop(),
            this.props.stage)
          ) {
            case 0:
              return this.startHoverAnimate();
            case 1:
              return this.flyAnimate();
          }
        }
        resetAnimation() {
          this.y.setValue(0),
            this.x.setValue(0),
            this.opacity.setValue(1),
            this.fireScale.setValue(1);
        }
        startHoverAnimate() {
          this.resetAnimation(), this.hoverAnimate(_.HOVERING.Y_VALUE);
        }
        createFireAnimation(e, t, s, a) {
          return I(this.fireScale, e, t, () => u.random(s, a));
        }
        async hoverAnimate(e) {
          if (0 !== this.props.stage || this.isUnmounted) return;
          let t = e > 1,
            s = t
              ? _.HOVERING.FIRE_MIN_INTENSITY_FALLING
              : _.HOVERING.FIRE_MIN_INTENSITY_RISING,
            a = t
              ? _.HOVERING.FIRE_MAX_INTENSITY_FALLING
              : _.HOVERING.FIRE_MAX_INTENSITY_RISING,
            l = this.createFireAnimation(
              _.HOVERING.FIRE_COUNT,
              _.HOVERING.Y_DURATION,
              s,
              a
            ),
            n = c.default.timing(this.y, {
              toValue: e,
              duration: _.HOVERING.Y_DURATION,
              easing: c.default.Easing.inOut(c.default.Easing.ease),
            });
          (this.currentAnimation = c.default.parallel([n, l])),
            await this.currentAnimation.start(),
            this.hoverAnimate(e * _.HOVERING.Y_VALUE_MODIFIER);
        }
        createShakeAnimation(e, t, s) {
          return I(this.x, e, t, e => u.random(1, s) * (e % 2 == 0 ? 1 : -1));
        }
        async flyAnimate() {
          let e = c.default.spring(this.y, {
              toValue: _.FALLING.Y_VALUE,
              overshootClamping: !0,
            }),
            t = c.default.spring(this.fireScale, {
              toValue: _.FALLING.FIRE_VALUE,
              overshootClamping: !0,
            }),
            s = c.default.parallel([e, t]),
            a = c.default.timing(this.y, {
              toValue: _.STAGING.Y_VALUE,
              duration: _.STAGING.DURATION,
            }),
            l = this.createShakeAnimation(
              _.STAGING.SHAKE_COUNT,
              _.STAGING.DURATION,
              _.STAGING.SHAKE_INTENSITY
            ),
            n = this.createFireAnimation(
              _.STAGING.FIRE_COUNT,
              _.STAGING.DURATION,
              _.STAGING.FIRE_MIN_INTENSITY,
              _.STAGING.FIRE_MAX_INTENSITY
            ),
            i = c.default.parallel([a, l, n]),
            r = c.default.timing(this.y, {
              toValue: _.FLYING.Y_VALUE,
              duration: _.FLYING.DURATION,
              easing: _.FLYING.Y_EASING,
            }),
            o = c.default.timing(this.x, {
              toValue: _.FLYING.X_VALUE,
              duration: _.FLYING.DURATION,
              easing: _.FLYING.X_EASING,
            }),
            d = c.default.timing(this.opacity, {
              toValue: _.FLYING.OPACITY_VALUE,
              duration: _.FLYING.DURATION / _.FLYING.OPACITY_DURATION_DIVIDEND,
              delay: _.FLYING.DURATION / _.FLYING.OPACITY_DURATION_DIVIDEND,
            }),
            u = this.createFireAnimation(
              _.FLYING.FIRE_COUNT,
              _.FLYING.DURATION,
              _.FLYING.FIRE_MIN_INTENSITY,
              _.FLYING.FIRE_MAX_INTENSITY
            ),
            E = c.default.parallel([r, o, d, u]);
          if (
            ((this.currentAnimation = c.default.sequence([s, i, E])),
            await this.currentAnimation.start(),
            !this.isUnmounted)
          ) {
            let { onFlyingComplete: e } = this.props;
            null != e && e();
          }
        }
        getWumpusStyle() {
          return {
            transform: [
              {
                translateY: this.y.interpolate({
                  inputRange: [0, 1],
                  outputRange: ["0px", "1px"],
                }),
              },
              {
                translateX: this.x.interpolate({
                  inputRange: [0, 1],
                  outputRange: ["0px", "1px"],
                }),
              },
            ],
            opacity: this.opacity,
          };
        }
        getFireStyle() {
          return { transform: [{ scale: this.fireScale }] };
        }
        render() {
          let { className: e, style: t } = this.props;
          return (0, n.jsxs)(c.default.div, {
            className: o(E.animation, e),
            style: { ...t, ...this.getWumpusStyle() },
            children: [
              (0, n.jsx)("div", {
                className: E.fireTopWrapper,
                children: (0, n.jsx)(c.default.div, {
                  className: E.fire,
                  style: this.getFireStyle(),
                }),
              }),
              (0, n.jsx)("div", {
                className: E.fireBottomWrapper,
                children: (0, n.jsx)(c.default.div, {
                  className: E.fire,
                  style: this.getFireStyle(),
                }),
              }),
              (0, n.jsx)("div", { className: E.wumpus }),
            ],
          });
        }
        constructor(...e) {
          super(...e),
            (this.x = new c.default.Value(0)),
            (this.y = new c.default.Value(0)),
            (this.opacity = new c.default.Value(1)),
            (this.fireScale = new c.default.Value(1)),
            (this.currentAnimation = null),
            (this.isUnmounted = !1);
        }
      }
      T.Stages = a;
      var f = T;
    },
    751433: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return E;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("77078"),
        o = s("151185"),
        d = s("342169"),
        u = s("108315");
      function c(e) {
        return "" === e || "-" === e;
      }
      var E = e => {
        let {
            value: t,
            onChange: s,
            className: n,
            minValue: E,
            maxValue: _,
          } = e,
          [I, T] = l.useState(t),
          f = c(I) || (null != E && I <= E),
          S = c(I) || (null != _ && I >= _),
          m = e => {
            s(c(e) ? (null != E ? E : 0) : e), T(e);
          };
        return (0, a.jsx)(r.FocusRing, {
          within: !0,
          children: (0, a.jsxs)("div", {
            className: i(u.actions, n),
            children: [
              (0, a.jsx)(r.Clickable, {
                onClick: e => {
                  e.stopPropagation(), !f && m(I - 1);
                },
                tabIndex: -1,
                className: i(u.iconWrapper, u.subtract, { [u.disabled]: f }),
                children: (0, a.jsx)(d.default, {
                  className: i(u.icon, { [u.disabled]: f }),
                }),
              }),
              (0, a.jsx)(r.TextInput, {
                value: "".concat(I),
                onChange: e => {
                  if (c(e)) return m(e);
                  let t = parseInt(e);
                  if (!isNaN(t))
                    return null != _ && t >= _
                      ? m(_)
                      : null != E && t <= E
                        ? m(E)
                        : m(t);
                },
                inputClassName: u.value,
              }),
              (0, a.jsx)(r.Clickable, {
                onClick: e => {
                  e.stopPropagation(), !S && m(I + 1);
                },
                tabIndex: -1,
                className: i(u.iconWrapper, u.add, { [u.disabled]: S }),
                children: (0, a.jsx)(o.default, {
                  className: i(u.icon, { [u.disabled]: S }),
                }),
              }),
            ],
          }),
        });
      };
    },
    409633: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return c;
          },
        });
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("145131"),
        o = s("564534"),
        d = s("890957");
      class u extends l.PureComponent {
        render() {
          let { focused: e } = this.state,
            {
              value: t,
              placeholder: s,
              error: l,
              className: n,
              maxLength: u,
              autoFocus: c,
              prefix: E,
              disabled: _,
            } = this.props;
          return (0, a.jsxs)(r.default, {
            align: r.default.Align.CENTER,
            justify: r.default.Justify.START,
            className: i(o.prefixInput, n, { [o.focused]: e, [o.error]: l }),
            onClick: this.handleFocusInput,
            children: [
              (0, a.jsx)(r.default.Child, {
                grow: 0,
                className: o.prefixInputPrefix,
                children: E,
              }),
              (0, a.jsx)(r.default.Child, {
                className: d.marginReset,
                children: (0, a.jsx)("input", {
                  ref: this.setInputRef,
                  className: o.prefixInputInput,
                  value: t,
                  placeholder: s,
                  maxLength: u,
                  onChange: this.handleChange,
                  onFocus: this.handleFocus,
                  onBlur: this.handleBlur,
                  autoFocus: c,
                  disabled: _,
                }),
              }),
            ],
          });
        }
        constructor(e) {
          super(e),
            (this.setInputRef = e => {
              this._inputRef = e;
            }),
            (this.handleChange = e => {
              let { onChange: t } = this.props;
              t(e.currentTarget.value);
            }),
            (this.handleFocus = () => {
              this.setState({ focused: !0 });
            }),
            (this.handleBlur = () => {
              this.setState({ focused: !1 });
            }),
            (this.handleFocusInput = () => {
              null != this._inputRef && this._inputRef.focus();
            });
          let { autoFocus: t } = this.props;
          this.state = { focused: null != t && t };
        }
      }
      var c = u;
    },
    773309: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          FIRST_TIER_KEY: function () {
            return S;
          },
          default: function () {
            return R;
          },
        }),
        s("222007");
      var a = s("37983"),
        l = s("884691"),
        n = s("414456"),
        i = s.n(n),
        r = s("146606"),
        o = s("748820"),
        d = s("118810"),
        u = s("769846"),
        c = s("77078"),
        E = s("159885"),
        _ = s("36694"),
        I = s("49111"),
        T = s("782340"),
        f = s("443941");
      let S = -1,
        m = (0, E.cssValueToNumber)(
          u.default.PREMIUM_GUILD_PROGRESS_BAR_PROGRESS_BAR_WIDTH
        ),
        N = (0, E.cssValueToNumber)(
          u.default.PREMIUM_GUILD_PROGRESS_BAR_TIER_MARKER_SIZE
        ),
        g = { tension: 140, friction: 30 },
        h = { tension: 800, friction: 20 };
      class C extends l.Component {
        getTotalHeight() {
          let { tiers: e } = this.props;
          return e[e.length - 1].y + N / 2;
        }
        getProgressHeight(e) {
          let { tiers: t, progress: s } = this.props,
            a = t[e],
            l = t[e + 1];
          if (null == l || s === a.numRequired) return a.y;
          let n = l.y - a.y,
            i = l.numRequired - a.numRequired,
            r = s - a.numRequired;
          return a.y + (r / i) * n;
        }
        getCurrentTierIndex() {
          let { tiers: e, progress: t } = this.props;
          for (let s = e.length - 1; s > 0; s--)
            if (t >= e[s].numRequired) return s;
          return 0;
        }
        renderForegroundTooltip() {
          let { progress: e, tiers: t } = this.props,
            { showForegroundTooltip: s, foregroundTooltipY: l } = this.state;
          if (!s || null == this.foregroundTooltipElementRef.current)
            return null;
          let n = this.getCurrentTierIndex(),
            i = t[n + 1],
            r = null != i ? i.numRequired : null,
            o = null != r ? r - e : null;
          return (0, a.jsxs)(
            c.TooltipLayer,
            {
              targetElementRef: this.foregroundTooltipElementRef,
              position: "right",
              color: c.Tooltip.Colors.BLACK,
              tooltipClassName: f.foregroundTooltip,
              children: [
                (0, a.jsx)("div", {
                  children:
                    T.default.Messages.PREMIUM_GUILD_SUBSCRIPTION_NUM_SUBSCRIPTIONS.format(
                      { numSubscriptions: e }
                    ),
                }),
                null != o && null != i
                  ? (0, a.jsx)("div", {
                      className: f.tooltipMuted,
                      children:
                        T.default.Messages.PREMIUM_GUILD_SETTINGS_MEMBERS_SUBSCRIBED_NEEDED.format(
                          { number: o, tier: i.name }
                        ),
                    })
                  : null,
              ],
            },
            l
          );
        }
        renderTierMarkerTooltip(e) {
          let { progress: t } = this.props;
          if (null == e.name || e.key === I.BoostedGuildTiers.NONE) return null;
          let s = Math.min(t, e.numRequired);
          return (0, a.jsxs)("div", {
            className: f.tierTooltip,
            children: [
              (0, a.jsx)("div", { children: e.name }),
              (0, a.jsx)("div", {
                children:
                  T.default.Messages.PREMIUM_GUILD_SETTINGS_X_OF_Y_SUBSCRIPTIONS.format(
                    { subscribers: s, numRequired: e.numRequired }
                  ),
              }),
            ],
          });
        }
        renderTierMarker(e, t, s) {
          var l;
          let n;
          let { progress: i, tiers: o } = this.props,
            d = o[s],
            u = i >= e.numRequired,
            E = null != d && e.key === d.key,
            I = e.key === o[0].key;
          n = I
            ? f.tierFirst
            : E
              ? f.tierCurrent
              : u
                ? f.tierAccomplished
                : f.tierInProgress;
          let T = e.y - (I ? 0 : N / 2),
            S = this.state.tierMarkerActive === t,
            m = !I && E && S;
          return (0, a.jsx)(
            c.Tooltip,
            {
              text: this.renderTierMarkerTooltip(e),
              position: "right",
              "aria-label": null !== (l = e.name) && void 0 !== l ? l : "",
              children: e =>
                (0, a.jsx)(r.Spring, {
                  from: { scale: 1 },
                  to: { scale: m ? 1.625 : 1 },
                  config: h,
                  children: t =>
                    (0, a.jsx)(r.animated.div, {
                      ...e,
                      className: n,
                      style: {
                        top: T,
                        transform: t.scale.interpolate(e =>
                          "scale(".concat(e, ")")
                        ),
                      },
                      children:
                        m &&
                        (0, a.jsx)(_.default, { className: f.currentTierIcon }),
                    }),
                }),
            },
            e.key
          );
        }
        renderProgressMask(e) {
          let { tiers: t } = this.props;
          return (0, a.jsxs)("mask", {
            id: "".concat(this.tierMarkerMaskId),
            children: [
              (0, a.jsx)("rect", {
                x: "0",
                y: "0",
                width: m,
                height: e,
                fill: "white",
              }),
              t.map(e =>
                (0, a.jsx)(
                  "circle",
                  { cx: m / 2, cy: e.y, r: m / 2, fill: "black" },
                  e.key
                )
              ),
            ],
          });
        }
        renderProgressBar(e, t) {
          let s = this.getProgressHeight(t),
            { finishedInitialAnimation: l, showForegroundTooltip: n } =
              this.state;
          return (0, a.jsxs)("g", {
            mask: "url(#".concat(this.tierMarkerMaskId, ")"),
            children: [
              (0, a.jsx)("rect", {
                className: f.background,
                height: e,
                fill: "currentColor",
              }),
              (0, a.jsx)(r.Spring, {
                from: { height: 0 },
                to: { height: s },
                config: g,
                delay: l ? 0 : this.props.initialAnimationDelay,
                onChange: this.handleForegroundFrame,
                onRest: l ? void 0 : this.handleFinishedInitialAnimation,
                children: e =>
                  (0, a.jsx)(r.animated.rect, {
                    className: f.foreground,
                    height: e.height.interpolate(e => Math.max(0, e)),
                    onMouseEnter: this.handleForegroundMouseEnter,
                    onMouseLeave: this.handleForegroundMouseLeave,
                    onMouseMove: n ? this.handleForegroundMouseMove : void 0,
                    fill: "currentColor",
                  }),
              }),
            ],
          });
        }
        render() {
          let { className: e, tiers: t } = this.props,
            s = this.getCurrentTierIndex(),
            l = this.getTotalHeight();
          return (0, a.jsxs)("div", {
            className: i(e, f.progressBar),
            style: { height: l },
            children: [
              (0, a.jsxs)("svg", {
                viewBox: "0 0 ".concat(m, " ").concat(l),
                width: m,
                height: l,
                children: [
                  this.renderProgressMask(l),
                  this.renderProgressBar(l, s),
                ],
              }),
              (0, a.jsx)("div", {
                ref: this.foregroundTooltipElementRef,
                style: { top: this.state.foregroundTooltipY },
                className: f.foregroundTooltipPosition,
              }),
              t.map((e, t) => this.renderTierMarker(e, t, s)),
              this.renderForegroundTooltip(),
            ],
          });
        }
        constructor(...e) {
          super(...e),
            (this.state = {
              showForegroundTooltip: !1,
              foregroundTooltipY: 0,
              tierMarkerActive: 0,
              finishedInitialAnimation: !1,
            }),
            (this.foregroundTooltipElementRef = l.createRef()),
            (this.tierMarkerMaskId = (0, o.v4)()),
            (this.handleForegroundMouseEnter = e => {
              this.setState({ showForegroundTooltip: !0 }),
                this.handleForegroundMouseMove(e);
            }),
            (this.handleForegroundMouseMove = e => {
              if (!(0, d.isElement)(e.target)) return;
              let t = e.target.getBoundingClientRect(),
                s = e.clientY - t.top;
              s !== this.state.foregroundTooltipY &&
                this.setState({ foregroundTooltipY: s });
            }),
            (this.handleForegroundMouseLeave = () => {
              this.setState({ showForegroundTooltip: !1 });
            }),
            (this.handleForegroundFrame = e => {
              let { height: t } = e,
                { tiers: s, progress: a, onAnimatedTierMaker: l } = this.props,
                { tierMarkerActive: n } = this.state;
              for (let e = s.length - 1; e > 0; e--) {
                let i = s[e],
                  r = n === e;
                if (t + 20 >= i.y && a >= i.numRequired) {
                  !r &&
                    (this.setState({ tierMarkerActive: e }), null != l && l(i));
                  return;
                }
              }
            }),
            (this.handleFinishedInitialAnimation = () => {
              this.setState({ finishedInitialAnimation: !0 });
            });
        }
      }
      C.defaultProps = { initialAnimationDelay: 0 };
      var R = C;
    },
    612434: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("77078"),
        n = s("145131"),
        i = s("983100"),
        r = e => {
          let { title: t, subtitle: s, icon: r } = e;
          return (0, a.jsxs)(n.default, {
            className: i.wrapper,
            align: n.default.Align.BASELINE,
            children: [
              null != r &&
                (0, a.jsx)(r, { width: 16, height: 16, className: i.icon }),
              (0, a.jsx)(l.Text, {
                variant: "text-md/normal",
                className: i.title,
                children: t,
              }),
              null != s && "" !== s
                ? (0, a.jsx)(l.Text, {
                    variant: "text-xs/semibold",
                    className: i.subtitle,
                    children: s,
                  })
                : null,
            ],
          });
        };
    },
    756609: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("308472"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let {
              width: t = 18,
              height: s = 18,
              color: l = "currentColor",
              foreground: n,
              ...r
            } = e;
            return (0, a.jsxs)("svg", {
              ...(0, i.default)(r),
              width: t,
              height: s,
              viewBox: "0 0 18 18",
              children: [
                (0, a.jsx)("path", {
                  fill: l,
                  className: n,
                  d: "M4.5,16.5v-3H3A1.5,1.5,0,0,1,1.5,12V3A1.5,1.5,0,0,1,3,1.5H15A1.5,1.5,0,0,1,16.5,3v9A1.5,1.5,0,0,1,15,13.5H8.5ZM3,3v9H6v1.5L8,12h7V3Z",
                }),
                (0, a.jsx)("path", {
                  fill: l,
                  className: n,
                  d: "M6.75,4.5H5.25v6h1.5Z",
                }),
                (0, a.jsx)("path", {
                  fill: l,
                  className: n,
                  d: "M9.75,7.5H8.25v3h1.5Z",
                }),
                (0, a.jsx)("path", {
                  fill: l,
                  className: n,
                  d: "M12.75,6h-1.5v4.5h1.5Z",
                }),
              ],
            });
          },
          n.AnalyticsIcon,
          void 0,
          { size: 18 }
        );
    },
    695197: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("472612"),
        i = s("246053"),
        r = (0, l.replaceIcon)(function (e) {
          return (0, a.jsx)(i.default, {
            ...e,
            direction: i.default.Directions.DOWN,
          });
        }, n.ArrowSmallDownIcon);
    },
    912702: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return o;
          },
        }),
        s("70102");
      var a = s("37983");
      s("884691");
      var l = s("394716"),
        n = s("216773"),
        i = s("507006"),
        r = s("49111");
      function o(e) {
        let { tier: t, ...s } = e;
        switch (t) {
          case r.BoostedGuildTiers.TIER_1:
            return (0, a.jsx)(l.default, { ...s });
          case r.BoostedGuildTiers.TIER_2:
            return (0, a.jsx)(n.default, { ...s });
          case r.BoostedGuildTiers.TIER_3:
            return (0, a.jsx)(i.default, { ...s });
          case r.BoostedGuildTiers.NONE:
            return null;
          default:
            throw Error("Not a valid tier type");
        }
      }
    },
    394716: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("859670"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: s = 24,
              color: l = "currentColor",
              foreground: n,
              ...r
            } = e;
            return (0, a.jsx)("svg", {
              ...(0, i.default)(r),
              width: t,
              height: s,
              viewBox: "0 0 32 32",
              children: (0, a.jsx)("path", {
                fill: l,
                className: n,
                d: "M16 1L7 10V22L16 31L25 22V10L16 1ZM20.62 11.27L16.5 7.16V2.91L23.62 10.03L20.62 11.27ZM12 19.93V12.07L16 8.07L20 12.07V19.93L16 23.93L12 19.93ZM15.5 7.16L11.38 11.28L8.38 10.04L15.5 2.91V7.16ZM11 12.2V19.8L8 21.04V10.96L11 12.2ZM11.38 20.73L15.5 24.85V29.09L8.38 21.97L11.38 20.73ZM16.5 24.84L20.62 20.72L23.62 21.96L16.5 29.09V24.84ZM21 19.8V12.2L24 10.96V21.05L21 19.8Z",
              }),
            });
          },
          n.BoostTier1Icon,
          void 0,
          { size: 24 }
        );
    },
    216773: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("372167"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: s = 24,
              color: l = "currentColor",
              foreground: n,
              ...r
            } = e;
            return (0, a.jsx)("svg", {
              ...(0, i.default)(r),
              width: t,
              height: s,
              viewBox: "0 0 32 32",
              children: (0, a.jsx)("path", {
                fill: l,
                className: n,
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M16.5 1.46002L24.62 9.58002L20.62 11.23L16.5 7.12002V1.46002ZM11 12.16L7 10.5V21.42L11 19.76V12.16ZM16.5 24.8001V30.4601L24.62 22.3401L20.62 20.6801L16.5 24.8001ZM15.5 7.12004V1.46004L7.38 9.58004L11.38 11.23L15.5 7.12004ZM15.5 30.46L7.38 22.34L11.38 20.68L15.5 24.8V30.46ZM21 19.76L25 21.42V10.5L21 12.16V19.76ZM16 8.03003L20 12.03V19.89L16 23.89L12 19.89V12.03L16 8.03003Z",
              }),
            });
          },
          n.BoostTier2Icon,
          void 0,
          { size: 24 }
        );
    },
    507006: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("860942"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: s = 24,
              color: l = "currentColor",
              foreground: n,
              ...r
            } = e;
            return (0, a.jsx)("svg", {
              ...(0, i.default)(r),
              width: t,
              height: s,
              viewBox: "0 0 32 32",
              children: (0, a.jsx)("path", {
                fill: l,
                className: n,
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M29 2C29 2.55 28.55 3 28 3C27.45 3 27 2.55 27 2V1C27 0.45 27.45 0 28 0C28.55 0 29 0.45 29 1V2ZM2.94 25.94L4 24L5.06 25.94L7 27L5.06 28.06L4 30L2.94 28.06L1 27L2.94 25.94ZM28 5C27.45 5 27 5.45 27 6V7C27 7.55 27.45 8 28 8C28.55 8 29 7.55 29 7V6C29 5.45 28.56 5 28 5ZM30 3H31C31.56 3 32 3.45 32 4C32 4.55 31.55 5 31 5H30C29.45 5 29 4.55 29 4C29 3.45 29.45 3 30 3ZM26 3H25C24.45 3 24 3.45 24 4C24 4.55 24.45 5 25 5H26C26.55 5 27 4.55 27 4C27 3.45 26.56 3 26 3ZM15.6201 1.46002V7.12002L11.5001 11.23L7.50012 9.58002L15.6201 1.46002ZM24.7401 9.58002L16.6201 1.46002V7.12002L20.7401 11.23L24.7401 9.58002ZM7.12012 10.5L11.1201 12.16V19.76L7.12012 21.42V10.5ZM16.6201 24.8V30.46L24.7401 22.34L20.7401 20.68L16.6201 24.8ZM15.6201 30.46L7.50012 22.34L11.5001 20.68L15.6201 24.8V30.46ZM21.1201 19.76L25.1201 21.42V10.5L21.1201 12.16V19.76ZM19.7301 11.64L20.1201 12.03V19.89L16.1201 23.89L12.1201 19.89V19.38L19.7301 11.64ZM12.1201 17.95L19.0201 10.93L18.2401 10.15L12.1201 16.38V17.95ZM17.5301 9.44002L12.1201 14.95V12.03L16.1201 8.03002L17.5301 9.44002Z",
              }),
            });
          },
          n.BoostTier3Icon,
          void 0,
          { size: 24 }
        );
    },
    944441: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("237020"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: s = 24,
              color: l = "currentColor",
              foreground: n,
              ...r
            } = e;
            return (0, a.jsx)("svg", {
              ...(0, i.default)(r),
              width: t,
              height: s,
              viewBox: "0 0 24 24",
              children: (0, a.jsx)("path", {
                className: n,
                fill: l,
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M9.00043 14.0491L19.5904 3.46912L23.1212 6.99994L8.99993 21.1213L1.28485 13.4062L4.83367 9.88236L9.00043 14.0491Z",
              }),
            });
          },
          n.CheckmarkBoldIcon,
          void 0,
          { size: 24 }
        );
    },
    117300: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("75196");
      function n(e) {
        let {
          width: t = 16,
          height: s = 16,
          color: n = "currentColor",
          ...i
        } = e;
        return (0, a.jsxs)("svg", {
          ...(0, l.default)(i),
          width: t,
          height: s,
          viewBox: "0 0 20 20",
          fill: "none",
          xmlns: "http://www.w3.org/2000/svg",
          children: [
            (0, a.jsx)("path", {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M0 10C0 4.47716 4.47716 0 10 0C15.5229 0 20 4.47716 20 10C20 15.5229 15.5229 20 10 20C4.47716 20 0 15.5229 0 10ZM10 2C5.58172 2 2 5.58172 2 10C2 14.4183 5.58172 18 10 18C14.4183 18 18 14.4183 18 10C18 5.58172 14.4183 2 10 2Z",
              fill: n,
            }),
            (0, a.jsx)("path", {
              fillRule: "evenodd",
              clipRule: "evenodd",
              d: "M7 11.25C7.30378 11.25 7.5911 11.3881 7.78087 11.6253L8.5 12.5242L9.21913 11.6253C9.4089 11.3881 9.69622 11.25 10 11.25C10.3038 11.25 10.5911 11.3881 10.7809 11.6253L11.5 12.5242L12.2191 11.6253C12.4089 11.3881 12.6962 11.25 13 11.25C13.3038 11.25 13.5911 11.3881 13.7809 11.6253L15.2809 13.5003C15.6259 13.9316 15.556 14.5609 15.1247 14.9059C14.6934 15.2509 14.0641 15.181 13.7191 14.7497L13 13.8508L12.2809 14.7497C12.0911 14.9869 11.8038 15.125 11.5 15.125C11.1962 15.125 10.9089 14.9869 10.7191 14.7497L10 13.8508L9.28087 14.7497C9.0911 14.9869 8.80378 15.125 8.5 15.125C8.19622 15.125 7.9089 14.9869 7.71913 14.7497L7 13.8508L6.28087 14.7497C5.93586 15.181 5.30657 15.2509 4.87531 14.9059C4.44404 14.5609 4.37412 13.9316 4.71913 13.5003L6.21913 11.6253C6.4089 11.3881 6.69622 11.25 7 11.25Z",
              fill: n,
            }),
            (0, a.jsx)("path", {
              d: "M6.625 9.25C7.24632 9.25 7.75 8.7463 7.75 8.125C7.75 7.50368 7.24632 7 6.625 7C6.00368 7 5.5 7.50368 5.5 8.125C5.5 8.7463 6.00368 9.25 6.625 9.25Z",
              fill: n,
            }),
            (0, a.jsx)("path", {
              d: "M13.375 9.25C13.9963 9.25 14.5 8.7463 14.5 8.125C14.5 7.50368 13.9963 7 13.375 7C12.7537 7 12.25 7.50368 12.25 8.125C12.25 8.7463 12.7537 9.25 13.375 9.25Z",
              fill: n,
            }),
          ],
        });
      }
    },
    447353: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("454882"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let {
              width: t = 18,
              height: s = 22,
              color: l = "currentColor",
              foreground: n,
              ...r
            } = e;
            return (0, a.jsx)("svg", {
              ...(0, i.default)(r),
              width: t,
              height: s,
              viewBox: "0 0 18 22",
              xmlns: "http://www.w3.org/2000/svg",
              children: (0, a.jsx)("path", {
                className: n,
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M13.414 0H2C0.897 0 0 0.898 0 2V20C0 21.103 0.897 22 2 22H16C17.103 22 18 21.103 18 20V4.586L13.414 0ZM9 19C8.448 19 8 18.552 8 18C8 17.448 8.448 17 9 17C9.552 17 10 17.448 10 18C10 18.552 9.552 19 9 19ZM10 15H8V9H10V15ZM12 6V1L17 6H12Z",
                fill: l,
              }),
            });
          },
          n.FileWarningIcon,
          void 0,
          { size: 22 }
        );
    },
    40119: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("862099"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let {
              width: t = 18,
              height: s = 22,
              color: l = "currentColor",
              ...n
            } = e;
            return (0, a.jsxs)("svg", {
              ...(0, i.default)(n),
              width: t,
              height: s,
              viewBox: "0 0 18 22",
              xmlns: "http://www.w3.org/2000/svg",
              children: [
                (0, a.jsx)("path", {
                  d: "M7.302 16.758C7.798 17.064 8.376 17.25 9 17.25C10.792 17.25 12.25 15.792 12.25 14C12.25 13.376 12.064 12.798 11.758 12.303L7.302 16.758Z",
                  fill: l,
                }),
                (0, a.jsx)("path", {
                  d: "M10.698 11.242C10.202 10.936 9.624 10.75 9 10.75C7.208 10.75 5.75 12.208 5.75 14C5.75 14.623 5.936 15.202 6.242 15.698L10.698 11.242Z",
                  fill: l,
                }),
                (0, a.jsx)("path", {
                  d: "M13.414 0H2C0.897 0 0 0.898 0 2V20C0 21.103 0.897 22 2 22H16C17.103 22 18 21.103 18 20V4.586L13.414 0ZM9 18.75C6.381 18.75 4.25 16.619 4.25 14C4.25 11.381 6.381 9.25 9 9.25C11.619 9.25 13.75 11.381 13.75 14C13.75 16.619 11.619 18.75 9 18.75ZM12 6V1L17 6H12Z",
                  fill: l,
                }),
              ],
            });
          },
          n.FileDenyIcon,
          void 0,
          { size: 22 }
        );
    },
    139011: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("305861"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let {
              width: t = 20,
              height: s = 20,
              color: l = "currentColor",
              ...n
            } = e;
            return (0, a.jsx)("svg", {
              ...(0, i.default)(n),
              width: t,
              height: s,
              fill: l,
              viewBox: "0 0 20 20",
              xmlns: "http://www.w3.org/2000/svg",
              children: (0, a.jsx)("path", {
                fill: "#DCDDDE",
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M15.8333 4.99125C12.9667 4.99125 10.6883 2.02042 10.6658 1.98959C10.3508 1.57292 9.64916 1.57292 9.33416 1.98959C9.31166 2.02042 7.03333 4.99125 4.16666 4.99125C3.70583 4.99125 3.33333 5.36459 3.33333 5.82459V11.6579C3.33333 14.8304 8.97 17.8896 9.61166 18.2279C9.73333 18.2921 9.86666 18.3229 9.99999 18.3229C10.1333 18.3229 10.2667 18.2913 10.3883 18.2279C11.03 17.8896 16.6667 14.8304 16.6667 11.6579V5.82459C16.6667 5.36459 16.2942 4.99125 15.8333 4.99125ZM14.6177 7.52947H13.4425V6.35433H12.6591V7.52947H11.484V8.31289H12.6591V9.48802H13.4425V8.31289H14.6177V7.52947ZM10.7006 9.48802C10.7006 10.3517 9.99743 11.0549 9.13371 11.0549C8.26998 11.0549 7.56686 10.3517 7.56686 9.48802C7.56686 8.6243 8.26998 7.92118 9.13371 7.92118C9.99743 7.92118 10.7006 8.6243 10.7006 9.48802ZM6.00002 13.7968C6.00002 12.4129 7.28835 11.4466 9.13371 11.4466C10.9791 11.4466 12.2674 12.4129 12.2674 13.7968V14.1886H6.00002V13.7968Z",
              }),
            });
          },
          n.ShieldUserIcon,
          void 0,
          { size: 20 }
        );
    },
    178837: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("704822"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: s = 24,
              color: l = "currentColor",
              foreground: n,
              ...r
            } = e;
            return (0, a.jsx)("svg", {
              ...(0, i.default)(r),
              width: t,
              height: s,
              viewBox: "0 0 24 24",
              children: (0, a.jsx)("path", {
                fill: l,
                className: n,
                d: "M12.65 10C11.83 7.67 9.61 6 7 6c-3.31 0-6 2.69-6 6s2.69 6 6 6c2.61 0 4.83-1.67 5.65-4H17v4h4v-4h2v-4H12.65zM7 14c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z",
              }),
            });
          },
          n.KeyIcon,
          void 0,
          { size: 24 }
        );
    },
    350932: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("396680"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: s = 24,
              color: l = "currentColor",
              ...n
            } = e;
            return (0, a.jsx)("svg", {
              ...(0, i.default)(n),
              width: t,
              height: s,
              fill: "none",
              viewBox: "0 0 24 24",
              children: (0, a.jsx)("path", {
                d: "M3 6H19.5M3 12H19.5M3 18H12.75M16.5 18H21M18.75 15.75V20.25",
                stroke: l,
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round",
              }),
            });
          },
          n.ChannelListPlusIcon,
          void 0,
          { size: 24 }
        );
    },
    375352: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("396680"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: s = 24,
              color: l = "currentColor",
              foreground: n,
              ...r
            } = e;
            return (0, a.jsx)("svg", {
              ...(0, i.default)(r),
              width: t,
              height: s,
              viewBox: "0 0 24 24",
              children: (0, a.jsx)("path", {
                className: n,
                fill: l,
                d: "M22 9H10V7H22V9ZM22 12H2V14H22V12ZM22 17H2V19H22V17ZM9 5.41L7.59 4L4 7.59L2.41 6L1 7.41L4 10.41L9 5.41Z",
              }),
            });
          },
          n.ChannelListPlusIcon,
          void 0,
          { size: 24 }
        );
    },
    412131: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("872036"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let {
              width: t = 20,
              height: s = 20,
              color: l = "currentColor",
              ...n
            } = e;
            return (0, a.jsx)("svg", {
              ...(0, i.default)(n),
              width: t,
              height: s,
              fill: l,
              viewBox: "0 0 20 20",
              xmlns: "http://www.w3.org/2000/svg",
              children: (0, a.jsx)("path", {
                fill: "#DCDDDE",
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M15.8333 4.99123C12.9666 4.99123 10.6883 2.0204 10.6658 1.98956C10.3508 1.5729 9.64909 1.5729 9.33409 1.98956C9.31159 2.0204 7.03325 4.99123 4.16659 4.99123C3.70575 4.99123 3.33325 5.36456 3.33325 5.82456V11.6579C3.33325 14.8304 8.96992 17.8896 9.61159 18.2279C9.73325 18.2921 9.86659 18.3229 9.99992 18.3229C10.1333 18.3229 10.2666 18.2912 10.3883 18.2279C11.0299 17.8896 16.6666 14.8304 16.6666 11.6579V5.82456C16.6666 5.36456 16.2941 4.99123 15.8333 4.99123ZM5.99994 10.0001C5.99994 7.79446 7.79434 6.00006 9.99994 6.00006C12.2055 6.00006 13.9999 7.79446 13.9999 10.0001V10.3129C13.9999 11.3225 13.4207 12.0001 12.5599 12.0001H12.4779C12.4515 12.0001 12.4255 11.9977 12.4007 11.9925L12.3999 12.0001C11.9719 12.0001 11.5303 11.7077 11.2707 11.3253C10.9399 11.6425 10.4935 11.8401 9.99994 11.8401C8.98514 11.8401 8.15994 11.0149 8.15994 10.0001C8.15994 8.98526 8.98514 8.16006 9.99994 8.16006C11.0147 8.16006 11.8399 8.98566 11.8399 10.0001V10.6525C11.8399 10.8729 12.1747 11.2001 12.3999 11.2001H12.4835C12.5091 11.2001 12.5351 11.2021 12.5591 11.2073L12.5599 11.2001C12.9607 11.2001 13.1999 10.8681 13.1999 10.3129V10.0001C13.1999 8.23566 11.7643 6.80006 9.99994 6.80006C8.23554 6.80006 6.79994 8.23566 6.79994 10.0001C6.79994 11.7645 8.23554 13.2001 9.99994 13.2001C10.6531 13.2001 11.2779 13.0077 11.8083 12.6445L12.2607 13.3037C11.5971 13.7593 10.8155 14.0001 9.99994 14.0001C7.79434 14.0001 5.99994 12.2061 5.99994 10.0001ZM8.95994 9.99966C8.95994 10.5733 9.42634 11.0397 9.99994 11.0397C10.5735 11.0397 11.0399 10.5733 11.0399 9.99966C11.0399 9.42606 10.5735 8.95966 9.99994 8.95966C9.42634 8.95966 8.95994 9.42606 8.95994 9.99966Z",
              }),
            });
          },
          n.ShieldAtIcon,
          void 0,
          { size: 20 }
        );
    },
    160237: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("141495"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let {
              width: t = 16,
              height: s = 16,
              color: l = "currentColor",
              ...n
            } = e;
            return (0, a.jsx)("svg", {
              ...(0, i.default)(n),
              width: t,
              height: s,
              viewBox: "0 0 24 24",
              fill: "none",
              xmlns: "http://www.w3.org/2000/svg",
              children: (0, a.jsx)("path", {
                d: "M4 6H20M4 12H20M4.24242 18H19.7576",
                stroke: l,
                strokeWidth: "2",
                strokeLinecap: "round",
                strokeLinejoin: "round",
              }),
            });
          },
          n.MenuIcon,
          void 0,
          { size: 16 }
        );
    },
    235692: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("75196");
      function n(e) {
        let {
          width: t = 18,
          height: s = 22,
          color: n = "currentColor",
          ...i
        } = e;
        return (0, a.jsx)("svg", {
          ...(0, l.default)(i),
          width: t,
          height: s,
          viewBox: "0 0 18 22",
          xmlns: "http://www.w3.org/2000/svg",
          children: (0, a.jsx)("path", {
            fillRule: "evenodd",
            clipRule: "evenodd",
            d: "M2 0H13.414L18 4.586V20C18 21.103 17.103 22 16 22H2C0.897 22 0 21.103 0 20V2C0 0.898 0.897 0 2 0ZM12 1V6H17L12 1ZM11.9444 10.2778L10.6667 9H14V12.3333L12.7222 11.0556L11.1278 12.6611L10.3389 11.8722L11.9444 10.2778ZM5.27778 11.0556L4 12.3333V9H7.33333L6.05556 10.2778L7.66111 11.8722L6.87222 12.6611L5.27778 11.0556ZM6.05556 17.7222L7.33333 19H4V15.6667L5.27778 16.9444L6.87222 15.3389L7.66111 16.1278L6.05556 17.7222ZM12.7222 16.9444L14 15.6667V19H10.6667L11.9444 17.7222L10.3389 16.1278L11.1278 15.3389L12.7222 16.9444Z",
            fill: n,
          }),
        });
      }
    },
    172483: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("410507"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let { height: t = 24, width: s = 24, ...l } = e;
            return (0, a.jsx)("svg", {
              ...(0, i.default)(l),
              width: s,
              height: t,
              viewBox: "0 0 24 24",
              fill: "none",
              xmlns: "http://www.w3.org/2000/svg",
              children: (0, a.jsx)("path", {
                fillRule: "evenodd",
                clipRule: "evenodd",
                d: "M6 2C5.44772 2 5 2.44772 5 3V15H3C2.44772 15 2 15.4477 2 16V17C2 17.5523 2.44772 18 3 18H5V21C5 21.5523 5.44772 22 6 22H7C7.55228 22 8 21.5523 8 21V18H10C10.5523 18 11 17.5523 11 17V16C11 15.4477 10.5523 15 10 15H8V3C8 2.44772 7.55228 2 7 2H6ZM16 3C16 2.44772 16.4477 2 17 2H18C18.5523 2 19 2.44772 19 3V6H21C21.5523 6 22 6.44772 22 7V8C22 8.55228 21.5523 9 21 9H19V21C19 21.5523 18.5523 22 18 22H17C16.4477 22 16 21.5523 16 21V9H14C13.4477 9 13 8.55228 13 8V7C13 6.44772 13.4477 6 14 6H16V3Z",
                fill: "#B9BBBE",
              }),
            });
          },
          n.FiltersHorizontalIcon,
          void 0,
          { size: 24 }
        );
    },
    891152: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("620000"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let {
              width: t = 16,
              height: s = 16,
              color: l = "currentColor",
              foreground: n,
              ...r
            } = e;
            return (0, a.jsxs)("svg", {
              ...(0, i.default)(r),
              width: t,
              height: s,
              viewBox: "0 0 16 16",
              fill: "none",
              children: [
                (0, a.jsx)("path", {
                  className: n,
                  fill: l,
                  d: "M12.1803 4.66659L12.1803 14.6666H10.4701L10.4701 4.66659L8.53289 6.63325L7.33329 5.40825L11.3292 1.33325L15.3333 5.40825L14.1337 6.65825L12.1803 4.66659Z",
                }),
                (0, a.jsx)("path", {
                  className: n,
                  fill: l,
                  d: "M3.81962 11.3333L3.81962 1.33325L5.52983 1.33325L5.52985 11.3333L7.46703 9.36658L8.66663 10.5916L4.67068 14.6666L0.666626 10.5916L1.86622 9.34158L3.81962 11.3333Z",
                }),
              ],
            });
          },
          n.ArrowsUpDownIcon,
          void 0,
          { size: 16 }
        );
    },
    444456: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("836155"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: s = 24,
              color: l = "currentColor",
              ...n
            } = e;
            return (0, a.jsxs)("svg", {
              ...(0, i.default)(n),
              width: t,
              height: s,
              viewBox: "0 0 24 24",
              xmlns: "http://www.w3.org/2000/svg",
              children: [
                (0, a.jsx)("path", {
                  d: "M11.525 15.019L12.257 9.893L13.742 10.105L13.037 15.041C15.661 15.218 18.146 16.065 20.326 17.526C21.382 15.943 22 14.043 22 12C22 6.486 17.514 2 12 2C6.486 2 2 6.486 2 12C2 14.042 2.618 15.942 3.673 17.526C6.008 15.96 8.693 15.106 11.525 15.019ZM18 11C18.552 11 19 11.447 19 12C19 12.553 18.552 13 18 13C17.448 13 17 12.553 17 12C17 11.447 17.448 11 18 11ZM16 7C16.552 7 17 7.447 17 8C17 8.553 16.552 9 16 9C15.448 9 15 8.553 15 8C15 7.447 15.448 7 16 7ZM12 5C12.552 5 13 5.447 13 6C13 6.553 12.552 7 12 7C11.448 7 11 6.553 11 6C11 5.447 11.448 5 12 5ZM8 7C8.552 7 9 7.447 9 8C9 8.553 8.552 9 8 9C7.448 9 7 8.553 7 8C7 7.447 7.448 7 8 7ZM6 11C6.552 11 7 11.447 7 12C7 12.553 6.552 13 6 13C5.448 13 5 12.553 5 12C5 11.447 5.448 11 6 11Z",
                  fill: l,
                }),
                (0, a.jsx)("path", {
                  d: "M11.9998 17C9.4598 17 7.0448 17.718 4.9458 19.081C6.7558 20.885 9.2498 22 11.9998 22C14.7508 22 17.2448 20.883 19.0548 19.08C16.9558 17.717 14.5388 17 11.9998 17Z",
                  fill: l,
                }),
              ],
            });
          },
          n.OdometerIcon,
          void 0,
          { size: 24 }
        );
    },
    935351: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return r;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("469563"),
        n = s("354087"),
        i = s("75196"),
        r = (0, l.replaceIcon)(
          function (e) {
            let {
              width: t = 24,
              height: s = 24,
              color: l = "currentColor",
              foreground: n,
              ...r
            } = e;
            return (0, a.jsx)("svg", {
              ...(0, i.default)(r),
              width: t,
              height: s,
              viewBox: "0 0 24 24",
              children: (0, a.jsx)("path", {
                className: n,
                fill: l,
                d: "M13.5605 11L11.2646 8.706L12.6842 7.294L17.4023 12.009L12.6822 16.708L11.2656 15.292L13.5685 13H2C2.50429 18.045 6.7842 22 11.9744 22C17.5025 22 22 17.513 22 12C22 6.487 17.5025 2 11.9744 2C6.7842 2 2.50429 5.954 2 11H13.5605Z",
              }),
            });
          },
          n.DoorExitIcon,
          void 0,
          { size: 24 }
        );
    },
    69080: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return l;
          },
        });
      var a = s("37983");
      s("884691");
      var l = e => {
        let {
          width: t = 24,
          height: s = 24,
          color: l = "currentColor",
          className: n,
        } = e;
        return (0, a.jsx)("svg", {
          className: n,
          width: t,
          height: s,
          viewBox: "0 0 14 12",
          children: (0, a.jsx)("path", {
            d: "M7 0L13.9282 12H0.0717969L7 0Z",
            fill: l,
          }),
        });
      };
    },
    315585: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          default: function () {
            return n;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("75196");
      function n(e) {
        let {
          width: t = 14,
          height: s = 14,
          color: n = "currentColor",
          foreground: i,
          ...r
        } = e;
        return (0, a.jsx)("svg", {
          ...(0, l.default)(r),
          width: t,
          height: s,
          viewBox: "0 0 14 14",
          children: (0, a.jsx)("path", {
            className: i,
            fill: n,
            d: "M12,0 C12.8284271,0 14,1.17157288 14,2 L14,12 C14,12.8284271 12.8284271,14 12,14 L2,14 C1.17157288,14 0,12.8284271 0,12 L0,2 C0,1.17157288 1.17157288,0 2,0 L12,0 Z M8,3 L6,3 L6,8 L8,8 L8,3 Z M8,11 L8,9 L6,9 L6,11 L8,11 Z",
          }),
        });
      }
    },
    701509: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          ArrowSmallDownIcon: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("669491"),
        n = s("82169");
      let i = e => {
        let {
          width: t = 24,
          height: s = 24,
          color: i = l.default.colors.INTERACTIVE_NORMAL,
          colorClass: r = "",
          ...o
        } = e;
        return (0, a.jsx)("svg", {
          ...(0, n.default)(o),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: s,
          fill: "none",
          viewBox: "0 0 24 24",
          children: (0, a.jsx)("path", {
            fill: "string" == typeof i ? i : i.css,
            d: "M12.7 20.7a1 1 0 0 1-1.4 0l-5-5a1 1 0 1 1 1.4-1.4l3.3 3.29V4a1 1 0 1 1 2 0v13.59l3.3-3.3a1 1 0 0 1 1.4 1.42l-5 5Z",
            className: r,
          }),
        });
      };
    },
    29244: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          BoostTier1Icon: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("669491"),
        n = s("82169");
      let i = e => {
        let {
          width: t = 24,
          height: s = 24,
          color: i = l.default.colors.INTERACTIVE_NORMAL,
          colorClass: r = "",
          ...o
        } = e;
        return (0, a.jsx)("svg", {
          ...(0, n.default)(o),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: s,
          fill: "none",
          viewBox: "0 0 24 24",
          children: (0, a.jsx)("path", {
            fill: "string" == typeof i ? i : i.css,
            fillRule: "evenodd",
            d: "M13.05 1.4a1.59 1.59 0 0 0-2.1 0l-4.9 4A3.37 3.37 0 0 0 5 8v8c0 1.07.4 2.06 1.05 2.6l4.9 4c.65.53 1.45.53 2.1 0l4.9-4A3.37 3.37 0 0 0 19 16V8c0-1.07-.4-2.06-1.05-2.6l-4.9-4ZM12 4.41 8.06 7.64c-.03.08-.06.2-.06.36v8c0 .16.03.28.06.36L12 19.59l3.94-3.23c.03-.08.06-.2.06-.36V8c0-.16-.03-.28-.06-.36L12 4.41Z",
            clipRule: "evenodd",
            className: r,
          }),
        });
      };
    },
    525387: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          BoostTier2Icon: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("669491"),
        n = s("82169");
      let i = e => {
        let {
          width: t = 24,
          height: s = 24,
          color: i = l.default.colors.INTERACTIVE_NORMAL,
          colorClass: r = "",
          ...o
        } = e;
        return (0, a.jsxs)("svg", {
          ...(0, n.default)(o),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: s,
          fill: "none",
          viewBox: "0 0 24 24",
          children: [
            (0, a.jsx)("path", {
              fill: "string" == typeof i ? i : i.css,
              d: "M11.65 6.35 9.29 8.71a1 1 0 0 0-.29.7v5.18c0 .26.1.52.3.7l2.35 2.36c.2.2.5.2.7 0l2.36-2.36a1 1 0 0 0 .29-.7V9.4a1 1 0 0 0-.3-.7l-2.35-2.36a.5.5 0 0 0-.7 0Z",
              className: r,
            }),
            (0, a.jsx)("path", {
              fill: "string" == typeof i ? i : i.css,
              fillRule: "evenodd",
              d: "M10.95 1.4a1.59 1.59 0 0 1 2.1 0l4.9 4A3.37 3.37 0 0 1 19 8v8c0 1.07-.4 2.06-1.05 2.6l-4.9 4c-.65.53-1.45.53-2.1 0l-4.9-4A3.37 3.37 0 0 1 5 16V8c0-1.07.4-2.06 1.05-2.6l4.9-4ZM7.32 6.95 12 3.12l4.68 3.83c.07.06.32.4.32 1.05v8c0 .65-.25 1-.32 1.05L12 20.88l-4.68-3.83C7.25 16.99 7 16.65 7 16V8c0-.65.25-1 .32-1.05Z",
              clipRule: "evenodd",
              className: r,
            }),
          ],
        });
      };
    },
    270465: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          BoostTier3Icon: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("669491"),
        n = s("82169");
      let i = e => {
        let {
          width: t = 24,
          height: s = 24,
          color: i = l.default.colors.INTERACTIVE_NORMAL,
          colorClass: r = "",
          ...o
        } = e;
        return (0, a.jsxs)("svg", {
          ...(0, n.default)(o),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: s,
          fill: "none",
          viewBox: "0 0 24 24",
          children: [
            (0, a.jsx)("path", {
              d: "M13.19 2.5c.29-.24.35-.7.06-.94l-.2-.16a1.59 1.59 0 0 0-2.1 0l-4.9 4A3.37 3.37 0 0 0 5 8v8c0 1.07.4 2.06 1.05 2.6l4.9 4c.65.53 1.45.53 2.1 0l4.9-4A3.37 3.37 0 0 0 19 16v-3.5c0-.28-.23-.5-.5-.54-.2-.03-.4-.08-.6-.15-.4-.14-.9.12-.9.54V16c0 .65-.25 1-.32 1.05l-4.36 3.57a.5.5 0 0 1-.64 0l-4.36-3.57C7.25 16.99 7 16.65 7 16V8c0-.65.25-1 .32-1.05l4.52-3.7c.1-.07.23-.07.32 0 .12.1.3.06.39-.07.17-.25.38-.49.64-.69Z",
              fill: "string" == typeof i ? i : i.css,
              className: r,
            }),
            (0, a.jsx)("path", {
              d: "m9.3 8.7 2.35-2.35c.2-.2.5-.2.7 0l2.36 2.36a1 1 0 0 1 .29.7v5.18a1 1 0 0 1-.3.7l-2.35 2.36a.5.5 0 0 1-.7 0l-2.36-2.36a1 1 0 0 1-.29-.7V9.4a1 1 0 0 1 .3-.7ZM17.86.8a1.21 1.21 0 0 1 2.28 0l.5 1.37a2 2 0 0 0 1.19 1.18l1.38.51a1.21 1.21 0 0 1 0 2.28l-1.38.5a2 2 0 0 0-1.18 1.19l-.51 1.38a1.21 1.21 0 0 1-2.28 0l-.5-1.38a2 2 0 0 0-1.19-1.18l-1.38-.51a1.21 1.21 0 0 1 0-2.28l1.38-.5a2 2 0 0 0 1.18-1.19l.51-1.38Z",
              fill: "string" == typeof i ? i : i.css,
              className: r,
            }),
          ],
        });
      };
    },
    567298: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          ChannelListPlusIcon: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("669491"),
        n = s("82169");
      let i = e => {
        let {
          width: t = 24,
          height: s = 24,
          color: i = l.default.colors.INTERACTIVE_NORMAL,
          colorClass: r = "",
          ...o
        } = e;
        return (0, a.jsx)("svg", {
          ...(0, n.default)(o),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: s,
          fill: "none",
          viewBox: "0 0 24 24",
          children: (0, a.jsx)("path", {
            d: "M3 3a1 1 0 0 0 0 2h18a1 1 0 0 0 0-2H3ZM19 14a1 1 0 0 1 1 1v3h3a1 1 0 1 1 0 2h-3v3a1 1 0 1 1-2 0v-3h-3a1 1 0 1 1 0-2h3v-3a1 1 0 0 1 1-1ZM2 8a1 1 0 0 1 1-1h18a1 1 0 0 1 0 2H3a1 1 0 0 1-1-1ZM3 11a1 1 0 1 0 0 2h11a1 1 0 0 0 0-2H3ZM2 16a1 1 0 0 1 1-1h8a1 1 0 0 1 0 2H3a1 1 0 0 1-1-1ZM3 19a1 1 0 1 0 0 2h8a1 1 0 0 0 0-2H3Z",
            fill: "string" == typeof i ? i : i.css,
            className: r,
          }),
        });
      };
    },
    203817: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          FileDenyIcon: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("669491"),
        n = s("82169");
      let i = e => {
        let {
          width: t = 24,
          height: s = 24,
          color: i = l.default.colors.INTERACTIVE_NORMAL,
          colorClass: r = "",
          ...o
        } = e;
        return (0, a.jsxs)("svg", {
          ...(0, n.default)(o),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: s,
          fill: "none",
          viewBox: "0 0 24 24",
          children: [
            (0, a.jsx)("path", {
              fill: "string" == typeof i ? i : i.css,
              d: "M21.27 12.38c.35.11.73-.13.73-.5V10.5a.5.5 0 0 0-.5-.5H19a5 5 0 0 1-5-5V2.5a.5.5 0 0 0-.5-.5H6a4 4 0 0 0-4 4v12a4 4 0 0 0 4 4h5.88c.37 0 .61-.38.5-.73a7 7 0 0 1 8.89-8.9Z",
              className: r,
            }),
            (0, a.jsx)("path", {
              fill: "string" == typeof i ? i : i.css,
              d: "M21.7 7.94c.01.03 0 .06-.04.06H19a3 3 0 0 1-3-3V2.34c0-.03.03-.05.06-.04a3 3 0 0 1 .82.58l4.24 4.24a3 3 0 0 1 .58.82Z",
              className: r,
            }),
            (0, a.jsx)("path", {
              fill: "string" == typeof i ? i : i.css,
              fillRule: "evenodd",
              d: "M21.76 14.83a5.02 5.02 0 0 1 .78 7.7 5 5 0 0 1-7.07 0 5.02 5.02 0 0 1 0-7.07 5 5 0 0 1 6.29-.63Zm-4.88 2.05a3 3 0 0 1 3.41-.59l-4 4a3 3 0 0 1 .59-3.41Zm4.83.83-4 4a3 3 0 0 0 4-4Z",
              clipRule: "evenodd",
              className: r,
            }),
          ],
        });
      };
    },
    356294: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          FileWarningIcon: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("669491"),
        n = s("82169");
      let i = e => {
        let {
          width: t = 24,
          height: s = 24,
          color: i = l.default.colors.INTERACTIVE_NORMAL,
          colorClass: r = "",
          ...o
        } = e;
        return (0, a.jsxs)("svg", {
          ...(0, n.default)(o),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: s,
          fill: "none",
          viewBox: "0 0 24 24",
          children: [
            (0, a.jsx)("path", {
              fill: "string" == typeof i ? i : i.css,
              d: "M21.65 13.63c.1.17.35.1.35-.1V10.5a.5.5 0 0 0-.5-.5H19a5 5 0 0 1-5-5V2.5a.5.5 0 0 0-.5-.5H6a4 4 0 0 0-4 4v12a4 4 0 0 0 4 4h5.49c.27 0 .5-.22.54-.5.06-.32.18-.65.37-.97l3.95-6.9a3.06 3.06 0 0 1 5.3 0Z",
              className: r,
            }),
            (0, a.jsx)("path", {
              fill: "string" == typeof i ? i : i.css,
              d: "M21.7 7.94c.01.03 0 .06-.04.06H19a3 3 0 0 1-3-3V2.34c0-.03.03-.05.06-.04a3 3 0 0 1 .82.58l4.24 4.24a3 3 0 0 1 .58.82Z",
              className: r,
            }),
            (0, a.jsx)("path", {
              fill: "string" == typeof i ? i : i.css,
              fillRule: "evenodd",
              d: "m14.13 21.52 3.96-6.9c.4-.68 1.43-.68 1.82 0l3.96 6.9c.38.67-.12 1.48-.91 1.48h-7.92c-.79 0-1.3-.81-.91-1.48Zm3.93-4.47a.5.5 0 0 1 .5-.55h.89c.3 0 .52.26.5.55l-.22 2.02c-.01.16-.17.26-.33.23a1.93 1.93 0 0 0-.8 0c-.16.03-.32-.07-.33-.23l-.21-2.02ZM19 22a1 1 0 1 0 0-2 1 1 0 0 0 0 2Z",
              clipRule: "evenodd",
              className: r,
            }),
          ],
        });
      };
    },
    611013: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          KeyIcon: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("669491"),
        n = s("82169");
      let i = e => {
        let {
          width: t = 24,
          height: s = 24,
          color: i = l.default.colors.INTERACTIVE_NORMAL,
          colorClass: r = "",
          ...o
        } = e;
        return (0, a.jsx)("svg", {
          ...(0, n.default)(o),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: s,
          fill: "none",
          viewBox: "0 0 24 24",
          children: (0, a.jsx)("path", {
            fill: "string" == typeof i ? i : i.css,
            fillRule: "evenodd",
            d: "M21.41 5.41A2 2 0 1 0 18.6 2.6l-7.75 7.74a.53.53 0 0 1-.58.11 6 6 0 1 0 3.3 3.28.51.51 0 0 1 .1-.55c.19-.19.5-.19.68 0l1.25 1.24a2 2 0 1 0 2.82-2.82l-1.23-1.24a.5.5 0 0 1 0-.7l.47-.47c.2-.2.5-.2.7 0l1.24 1.23A2 2 0 1 0 22.4 7.6l-1.23-1.24a.5.5 0 0 1 0-.7l.23-.24ZM10 16a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z",
            clipRule: "evenodd",
            className: r,
          }),
        });
      };
    },
    33968: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          MenuIcon: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("669491"),
        n = s("82169");
      let i = e => {
        let {
          width: t = 24,
          height: s = 24,
          color: i = l.default.colors.INTERACTIVE_NORMAL,
          colorClass: r = "",
          ...o
        } = e;
        return (0, a.jsx)("svg", {
          ...(0, n.default)(o),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: s,
          fill: "none",
          viewBox: "0 0 24 24",
          children: (0, a.jsx)("path", {
            fill: "string" == typeof i ? i : i.css,
            d: "M1 5a1 1 0 0 1 1-1h20a1 1 0 1 1 0 2H2a1 1 0 0 1-1-1ZM1 12a1 1 0 0 1 1-1h20a1 1 0 1 1 0 2H2a1 1 0 0 1-1-1ZM2 18a1 1 0 1 0 0 2h20a1 1 0 1 0 0-2H2Z",
            className: r,
          }),
        });
      };
    },
    281101: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          OdometerIcon: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("669491"),
        n = s("82169");
      let i = e => {
        let {
          width: t = 24,
          height: s = 24,
          color: i = l.default.colors.INTERACTIVE_NORMAL,
          colorClass: r = "",
          ...o
        } = e;
        return (0, a.jsx)("svg", {
          ...(0, n.default)(o),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: s,
          fill: "none",
          viewBox: "0 0 24 24",
          children: (0, a.jsx)("path", {
            fill: "string" == typeof i ? i : i.css,
            fillRule: "evenodd",
            d: "M17.38 21c.61 0 1.23-.18 1.7-.58a11 11 0 1 0-14.16 0c.47.4 1.09.58 1.7.58h10.76Zm.83-13.8a1 1 0 0 0-1.42-1.4l-4.27 4.27A2 2 0 0 0 10 12a2 2 0 1 0 3.93-.52l4.28-4.27ZM4 13a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm3.05 3.95a1 1 0 1 1-1.41 1.41 1 1 0 0 1 1.41-1.41Zm9.9 1.41a1 1 0 1 1 1.41-1.41 1 1 0 0 1-1.41 1.41ZM6.13 7.32a1 1 0 1 1 .42-1.96 1 1 0 0 1-.42 1.96ZM12 5a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm9 7a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z",
            clipRule: "evenodd",
            className: r,
          }),
        });
      };
    },
    71198: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          ShieldAtIcon: function () {
            return i;
          },
        });
      var a = s("37983");
      s("884691");
      var l = s("669491"),
        n = s("82169");
      let i = e => {
        let {
          width: t = 24,
          height: s = 24,
          color: i = l.default.colors.INTERACTIVE_NORMAL,
          colorClass: r = "",
          ...o
        } = e;
        return (0, a.jsxs)("svg", {
          ...(0, n.default)(o),
          xmlns: "http://www.w3.org/2000/svg",
          width: t,
          height: s,
          fill: "none",
          viewBox: "0 0 24 24",
          children: [
            (0, a.jsx)("path", {
              fill: "string" == typeof i ? i : i.css,
              d: "M12.81 13.23c-.3.4-.7.6-1.18.6-.4 0-.71-.14-.93-.42-.2-.27-.3-.67-.3-1.17 0-.63.15-1.14.46-1.53.32-.4.71-.6 1.2-.6.38 0 .68.14.9.42.21.27.32.66.32 1.17 0 .62-.15 1.14-.47 1.53Z",
              className: r,
            }),
            (0, a.jsx)("path", {
              fill: "string" == typeof i ? i : i.css,
              fillRule: "evenodd",
              d: "M4.56 4.22A2.83 2.83 0 0 0 3 6.75v3.03c0 5.6 3.3 10.69 8.42 12.96.37.17.79.17 1.16 0A14.18 14.18 0 0 0 21 9.78V6.75c0-1.07-.6-2.05-1.56-2.53l-6.1-3.05a3 3 0 0 0-2.68 0l-6.1 3.05Zm10.37 5.47a.5.5 0 0 0-.5-.57h-.22a.5.5 0 0 0-.47.34l-.14.4c-.14-.28-.36-.5-.64-.67a2.7 2.7 0 0 0-2.58.18c-.44.27-.79.67-1.04 1.18-.24.5-.37 1.09-.37 1.74 0 .85.2 1.52.62 2s.98.72 1.67.72c.45 0 .86-.1 1.23-.28.37-.2.65-.45.82-.76.05.3.2.55.44.75.25.19.57.29.97.29a3 3 0 0 0 1.7-.5c.5-.34.88-.81 1.16-1.42.28-.6.42-1.3.42-2.07a4.66 4.66 0 0 0-2.68-4.38 6.4 6.4 0 0 0-2.9-.64c-1.18 0-2.26.25-3.24.76a5.72 5.72 0 0 0-2.33 2.18A6.36 6.36 0 0 0 6 12.28c0 1.08.21 2.05.64 2.92a4.74 4.74 0 0 0 1.98 2.04c.9.5 2 .76 3.31.76.78 0 1.53-.08 2.28-.25a6.94 6.94 0 0 0 1.47-.5.46.46 0 0 0 .21-.61l-.1-.21c-.12-.27-.44-.37-.7-.26a7.5 7.5 0 0 1-3.04.58c-1.06 0-1.94-.2-2.64-.6a3.67 3.67 0 0 1-1.5-1.6 5.3 5.3 0 0 1-.46-2.26c0-1.01.22-1.9.66-2.66A4.5 4.5 0 0 1 9.9 7.87a5.23 5.23 0 0 1 2.55-.62c.82 0 1.55.15 2.18.47a3.5 3.5 0 0 1 1.48 1.34c.35.58.53 1.26.53 2.04 0 .52-.08.99-.24 1.41-.14.42-.35.75-.61.99s-.53.36-.82.36c-.34 0-.52-.2-.52-.61 0-.09 0-.15.02-.2l.46-3.36Z",
              clipRule: "evenodd",
              className: r,
            }),
          ],
        });
      };
    },
    162948: function (e, t, s) {
      "use strict";
      var a, l;
      s.r(t),
        s.d(t, {
          TeamMemberRoles: function () {
            return a;
          },
        }),
        ((l = a || (a = {})).ADMIN = "admin"),
        (l.DEVELOPER = "developer"),
        (l.READ_ONLY = "read_only");
    },
    86758: function (e, t, s) {
      "use strict";
      s.r(t),
        s.d(t, {
          truncateAndLocalizeNumber: function () {
            return l;
          },
        });
      var a = s("792788");
      let l = (e, t) => {
        let s = Math.round(10 * e) / 10;
        if (e < 1e6)
          return new Intl.NumberFormat(t, {
            maximumFractionDigits: s % 1 == 0 ? 0 : 1,
          }).format(e);
        let l = Math.round((e / 1e6) * 10) / 10,
          n = new Intl.NumberFormat(t, {
            maximumFractionDigits: l % 1 == 0 ? 0 : 1,
          }).format(e / 1e6);
        return a.default.Messages.NumberAbbreviations.MILLION.format({
          num: n,
        });
      };
    },
  },
]);
//# sourceMappingURL=89de7782883781479e56.js.map
