(this.webpackChunkdiscord_app = this.webpackChunkdiscord_app || []).push([
  ["90486"],
  {
    229353: function (e, _, E) {
      e.exports = Object.freeze({
        DISCORD: "Discord",
        DISCORD_DESC_SHORT: "Imagine a place",
        DISCORD_DESC_LONG:
          "Join over 100 million people who use Discord to talk and hang out with communities and friends.",
        NOTIFICATION_BODY_ATTACHMENT: "Uploaded !!{filename}!!",
        NOTIFICATION_TITLE_START_GAME: "Somebody Playin'",
        NOTIFICATION_BODY_START_GAME:
          "!!{username}!! started playing !!{gameName}!!!",
        NOTIFICATION_MESSAGE_CREATE_GUILD_ACTIVITY_JOIN:
          "!!{user}!! invited the channel to play !!{game}!!",
        NOTIFICATION_MESSAGE_CREATE_GROUP_DM_ACTIVITY_JOIN:
          "!!{user}!! invited the group to play !!{game}!!",
        NOTIFICATION_MESSAGE_CREATE_DM_ACTIVITY_JOIN:
          "!!{user}!! invited you to play !!{game}!!",
        NOTIFICATION_MESSAGE_CREATE_DM_ACTIVITY_JOIN_REQUEST:
          "!!{user}!! has requested an invite to !!{game}!!",
        NOTIFICATION_MESSAGE_CREATE_GUILD_ACTIVITY_LISTEN:
          "!!{user}!! invited the channel to listen on Spotify",
        NOTIFICATION_MESSAGE_CREATE_GROUP_DM_ACTIVITY_LISTEN:
          "!!{user}!! invited the group to listen on Spotify",
        NOTIFICATION_MESSAGE_CREATE_DM_ACTIVITY_LISTEN:
          "!!{user}!! invited you to listen on Spotify",
        NOTIFICATION_DISMISS: "Dismiss notification",
        NOTIFICATION_FRIEND_SUGGESTION_CONTACT_TITLE:
          "Your contact !!{contact}!! just joined Discord!",
        NOTIFICATION_FRIEND_SUGGESTION_TITLE:
          "!!{contact}!! just joined Discord!",
        NOTIFICATION_FRIEND_SUGGESTION_BODY: "Send them a friend request",
        IOS_NOTIFICATION_SEE_FULL: "Tap to see full message.",
        ERRORS_UNEXPECTED_CRASH:
          "Looks like Discord has crashed unexpectedly....",
        ERRORS_ACTION_TO_TAKE:
          "We've tracked the error and will get right on it.",
        ERRORS_RELOAD: "Reload",
        ERRORS_RESTART_APP: "Restart Discord",
        ERRORS_STORE_CRASH: "Looks like the Store has crashed unexpectedly....",
        ERRORS_IMAGE_NOT_FOUND: "Image not found",
        UNSUPPORTED_BROWSER: "Unsupported Browser",
        DOWNLOAD_APP: "Download App",
        CANCEL: "Cancel",
        FILTER: "Filter",
        UNSUPPORTED_BROWSER_DETAILS:
          "You want to be able to talk to your friends, right? Switch to latest Chrome, Opera, Firefox, Edge or download the Discord app to start talking right now!",
        TRY_AGAIN: "Try Again",
        EMAIL_VERIFICATION_INSTRUCTIONS_HEADER: "Instructions Sent",
        EMAIL_VERIFICATION_INSTRUCTIONS_BODY:
          "\nWe sent instructions to change your password to **!!{email}!!**, please check both your inbox and spam folder.\n  ",
        HELP: "Help",
        GOT_IT: "Got It",
        ALL_DONE: "All done",
        UPDATE: "Update",
        SUBMIT: "Submit",
        UNDO: "Undo",
        REQUIRED: "Required",
        REFRESH: "Refresh",
        SUPPORT: "Support",
        CHANGE_LOG: "Change Log",
        CHANGE_LOG_FAILED_TO_LOAD: "Failed to load",
        CHANGE_LOG_CLIENT_OLD:
          "Your client is out of date. Update to get the latest and greatest Discord experience!",
        DOWNLOAD_APPS: "Download Apps",
        DISCARD_CHANGES: "Discard unsaved changes?",
        DISCARD_CHANGES_DESCRIPTION:
          "You have unsaved changes, are you sure you want to discard them?",
        DISCARD_CHANGES_CONFIRM: "Discard",
        DISCARD_CHANGES_CANCEL: "Keep Editing",
        SHARE: "Share",
        SHARE_INVITE: "Share Invite",
        INVITE_APP_MESSAGES: "Messages",
        INVITE_APP_EMAIL: "Email",
        INBOX: "Inbox",
        RECENT_MENTIONS: "Recent Mentions",
        RECENT_ACTIVITY: "Recent Activity",
        RECENT_ACTIVITY_LABEL: "!!{channelName}!! \xb7 {timeAgo}",
        RECENTLY_VISITED: "Recently Visited",
        ALL_SERVERS: "All Servers",
        THIS_SERVER: "This Server",
        THIS_SERVER_NAMED: "Only !!{guildName}!!",
        NO_RECENT_MENTIONS:
          "Start up some conversations, then keep track of them here!",
        RECENT_MENTIONS_PRO_TIP:
          "Whenever someone mentions you it will be saved here for 7 days.",
        RECENT_MENTIONS_FILTER_EVERYONE: "Include @everyone mentions",
        RECENT_MENTIONS_FILTER_ROLES: "Include @role mentions",
        RECENT_MENTIONS_FILTER_ALL_SERVERS: "Include all servers",
        RECENT_MENTIONS_EMPTY_STATE_HEADER: "You made it through everything!",
        RECENT_MENTIONS_EMPTY_STATE_TIP:
          "Whenever someone mentions you it will be saved here for 7 days.",
        UNREADS_TAB_LABEL: "Unreads",
        UNREADS_EMPTY_STATE_HEADER: "You're all caught up!",
        UNREADS_EMPTY_STATE_TIP:
          "Open the Inbox by pressing CTRL+I, and mark your top message as read with CTRL+Shift+E.",
        UNREADS_EMPTY_STATE_TIP_MAC:
          "Open the Inbox by pressing CMD+I, and mark your top message as read with CMD+Shift+E.",
        UNREADS_EMPTY_STATE_ERROR_HEADER: "Whoops",
        UNREADS_EMPTY_STATE_ERROR_SUBTITLE:
          "The Inbox hit a snag, please close and re-open it.",
        UNREADS_VIEW_CHANNEL: "View all unreads",
        UNREADS_MARK_READ: "Mark Inbox As Read",
        UNREADS_TUTORIAL_HEADER: "Stay up to date with latest messages!",
        UNREADS_TUTORIAL_BODY:
          "Unread messages from all your unmuted channels will show up here. Time to get to that zero inbox!",
        UNREADS_CONFIRM_MARK_ALL_READ_HEADER: "Mark all as read?",
        UNREADS_CONFIRM_MARK_ALL_READ_DESCRIPTION:
          "This will mark all your unmuted channels as read. Are you sure you want to continue?",
        UNREADS_OLD_CHANNELS_DIVIDER: "Messages older than 10 days",
        UNREADS_NO_NOTIFICATIONS_DIVIDER: "Notifications disabled",
        CHANGE_AVATAR: "Change\nAvatar",
        CHANGE_AVATAR_A11Y_LABEL: "Change Avatar",
        CHANGE_AVATAR_OR_DECORATION_A11Y_LABEL: "Change Avatar or Decoration",
        REMOVE: "Remove",
        MINIMUM_SIZE: "Minimum Size: **{size}x{size}**",
        IMAGES: "Images",
        AVATAR_CONVERT_FAILURE_MOBILE:
          "Unable to convert avatar to data URL. {avatarUrl}",
        CHANGE_ICON: "Change\nIcon",
        CHANGE_SPLASH: "Change Background",
        CHANGE_HOME_HEADER: "Change Home Header",
        EDIT_IMAGE: "Edit Image",
        MOBILE_GUILD_LIST_CONTEXT_MENU_ACTION_BUTTON_A11Y_LABEL:
          "Edit Your Server List",
        MOBILE_GUILD_LIST_CONTEXT_MENU_GRID_VIEW: "Grid View",
        MOBILE_GUILD_LIST_CONTEXT_MENU_LIST_VIEW: "List View",
        MOBILE_GUILD_LIST_CONTEXT_MENU_CUSTOMIZE: "Customize",
        MOBILE_GUILD_LIST_CONTEXT_MENU_ADD_A_SERVER: "Add a Server",
        NUF_CHANNEL_CHANNEL_NAME: "making-plans",
        NUF_CHANNEL_FIRST_MESSAGE_AUTHOR: "Mallow",
        NUF_CHANNEL_FIRST_MESSAGE: "anyone want to hang out this weekend?",
        NUF_CHANNEL_SECOND_MESSAGE_AUTHOR: "Amanda",
        NUF_CHANNEL_SECOND_MESSAGE: "me! how about saturday?",
        CUSTOMIZE_SERVERS: "Customize Servers",
        CUSTOMIZE_FOLDERS: "Customize Folders",
        CREATE_FOLDER: "Create Folder",
        EDIT_FOLDER: "Edit Folder",
        NEW_FOLDER: "New Folder",
        EDIT_FOLDER_A11Y_LABEL: "Edit folder, !!{name}!!",
        EDIT_FOLDER_GUILD_ADDED_A11Y_LABEL:
          "!!{name}!! has been added to folder.",
        EDIT_FOLDER_GUILD_REMOVED_A11Y_LABEL:
          "!!{name}!! has been removed from folder.",
        SELECT_SERVERS: "Select Servers",
        FOLDER_NAME: "Folder Name",
        DELETE_FOLDER: "Delete Folder",
        DELETE_FOLDER_CONFIRM_TEXT:
          "Are you sure you want to delete this folder?",
        GUILD_LIST_EDIT_MODAL_PLACEHOLDER: "Enter a name for your folder",
        GUILD_LIST_EDIT_MODAL_SERVERS_A11Y_LABEL: "Customize your servers",
        GUILD_LIST_EDIT_MODAL_FOLDERS_A11Y_LABEL: "Customize your folders",
        CREATE_FOLDER_MISSING_SERVERS_ERROR_TITLE: "Oops!",
        CREATE_FOLDER_MISSING_SERVERS_ERROR_DESCRIPTION:
          "Your new folder must include at least two servers.",
        EDIT_FOLDER_MISSING_SERVERS_ERROR_TITLE: "Oops!",
        EDIT_FOLDER_MISSING_SERVERS_ERROR_DESCRIPTION:
          "You must have at least one server in your folder.",
        SAVE_GUILD_FOLDERS_ERROR_TITLE: "Oops!",
        SAVE_GUILD_FOLDERS_ERROR_DESCRIPTION:
          "Something went wrong while trying to save your server folder. Please try again later.",
        SAVE_GUILD_FOLDERS_NAME_ERROR_DESCRIPTION: "Please enter a valid name",
        PAGINATION_PREVIOUS: "Previous",
        PAGINATION_NEXT: "Next",
        PAGINATION_PAGE_LABEL: "Page {pageNumber}",
        PAGINATION_SLIDE_LABEL: "Slide {pageNumber}",
        MUTE: "Mute",
        UNMUTE: "Unmute",
        DEAFEN: "Deafen",
        UNDEAFEN: "Undeafen",
        SEARCH: "Search",
        AUTOCOMPLETE_NO_RESULTS_HEADER: "Nope!",
        AUTOCOMPLETE_NO_RESULTS_BODY: "Did you make a typo?",
        AUTOCOMPLETE_STICKERS_QUERY_MATCH: "Similar to: !!{queryMatch}!!",
        AUTOCOMPLETE_EMOJI_UPSELL:
          "Get {count, plural, one {# more matching emoji} other {# more matching emoji}} with Nitro",
        AUTOCOMPLETE_EMOJI_UPSELL_MODAL_HEADER: "Get more emoji with Nitro",
        AUTOCOMPLETE_EMOJI_UPSELL_MODAL_BLURB:
          "Lift off with Discord Nitro to use animated and custom emoji on any server. [Learn more](onLearnMore)",
        AUTOCOMPLETE_EMOJI_UPSELL_MODAL_BLURB_MOBILE:
          "Lift off with Discord Nitro to use animated and custom emoji on any server.",
        AUTOCOMPLETE_EMOJI_UPSELL_MODAL_BLURB_MOBILE_GENERIC:
          "Lift off with {planName} to use animated and custom emoji on any server.",
        FOLLOW_US_FOR_MORE_UPDATES: "Follow us for more updates!",
        UPDATE_BADGE_HEADER: "Update",
        CHANGELOG_SPECIAL_CTA_BODY:
          "Show a friend our new home page!\nWe’re here to make a good impression.",
        CHANGELOG_STICKERS_HEADER: "Stickers are here!",
        CHANGELOG_STICKERS_CTA_TITLE: "Have a question?",
        CHANGELOG_STICKERS_CTA_BODY:
          "View our Help Center for more info or hit us up on [Twitter](https://twitter.com/discord). We’re excited to see you express yourself with stickers.",
        CHANGELOG_STICKERS_CTA: "Learn More",
        CHANGELOG_CONTENT_LABEL: "Changelog content",
        RNA_CHANGELOG_UPSELL_TITLE: "Hey, Android friends",
        RNA_CHANGELOG_UPSELL_BODY:
          "We’ve heard your feedback and are making improvements to the new version of our Android app. Follow these updates in our Help Center.",
        RNA_CHANGELOG_UPSELL_CTA: "Read Help Center",
        TEXTAREA_PLACEHOLDER: "Message !!{channel}!!",
        FORUM_POST_TEXTAREA_PLACEHOLDER: "Send a message in !!{channel}!!",
        DM_TEXTAREA_PLACEHOLDER: "Message !!{channel}!!",
        TEXTAREA_FORUM_POST_A11Y_LABEL:
          "Compose Message, Forum Post !!{channel}!!",
        TEXTAREA_TEXT_DM_A11Y_LABEL: "Compose Message, !!{channel}!!",
        TEXTAREA_TEXT_CHANNEL_A11Y_LABEL:
          "Compose Message, Text Channel !!{channel}!!",
        TEXTAREA_THREAD_A11Y_LABEL: 'Compose Message, Thread "!!{channel}!!"',
        MESSAGE_TOO_LONG_HEADER: "Your message is too long.",
        MESSAGE_TOO_LONG_BODY_TEXT:
          "\nPlease make your message of {currentLength} characters shorter. We've set the limit at {maxLength} characters to be courteous to others.\n  ",
        MESSAGE_RATE_LIMITED_HEADER: "WOAH THERE. WAY TOO SPICY",
        MESSAGE_RATE_LIMITED_BODY: "You're sending messages too quickly!",
        MESSAGE_RATE_LIMITED_BUTTON: "Enter the chill zone",
        OKAY: "Okay",
        STOP: "Stop",
        NO_THANKS: "No thanks",
        BLOCKED_MESSAGES:
          "{count, plural, one {1 Blocked Message} other {{count} Blocked Messages}}",
        LOAD_MORE_MESSAGES: "Load more messages",
        AKA: "AKA",
        CHARACTER_COUNT_AT_LIMIT: "Message is at max length",
        CHARACTER_COUNT_CLOSE_TO_LIMIT: "{count} characters remaining",
        CHARACTER_COUNT_OVER_LIMIT: "Message is too long",
        CHANNEL_SETTINGS_SUMMARIES_TOGGLE: "Enable Channel Summaries",
        CHANNEL_SETTINGS_SUMMARIES_TOGGLE_DESCRIPTION:
          "If turned off, nobody will see the Summaries in this channel. [Learn More]({helpdeskArticle})",
        CHANNEL_TOOLTIP_VOICE: "Voice",
        CHANNEL_TOOLTIP_VOICE_LIMITED: "Voice (Limited)",
        CHANNEL_TOOLTIP_VOICE_LOCKED: "Voice (Locked)",
        CHANNEL_TOOLTIP_TEXT: "Text",
        CHANNEL_TOOLTIP_STAGE: "Stage",
        CHANNEL_TOOLTIP_STAGE_LIMITED: "Stage (Limited)",
        CHANNEL_TOOLTIP_STAGE_LOCKED: "Stage (Locked)",
        CHANNEL_TOOLTIP_TEXT_NSFW: "Text (Age-Restricted)",
        CHANNEL_TOOLTIP_TEXT_LIMITED: "Text (Limited)",
        CHANNEL_TOOLTIP_TEXT_ACTIVE_THREADS: "Text (Active Threads)",
        CHANNEL_TOOLTIP_ANNOUNCEMENTS: "Announcements",
        CHANNEL_TOOLTIP_ANNOUNCEMENTS_NSFW: "Announcements (Age-Restricted)",
        CHANNEL_TOOLTIP_ANNOUNCEMENTS_LIMITED: "Announcements (Limited)",
        CHANNEL_TOOLTIP_RULES: "Rules",
        CHANNEL_TOOLTIP_STORE: "Store",
        CHANNEL_TOOLTIP_DIRECTORY: "Directory",
        GUILD_OWNER: "Server Owner",
        RATE_LIMITED: "You are being rate limited.",
        NO_MIC_TITLE: "Microphone Access is Denied",
        NO_MIC_BODY:
          "Instructions for enabling access to your microphone can be found in the Discord Help Center.",
        NO_CAMERA_TITLE: "Camera Access is Denied",
        NO_CAMERA_BODY:
          "Instructions for enabling access to your camera can be found in the Discord Help Center.",
        HELP_DESK: "Help Desk",
        PTT_PERMISSION_TITLE: "Push-to-talk Needs Permission",
        PTT_PERMISSION_BODY:
          "\nYou launched !!{game}!! as administrator. Please relaunch Discord as an administrator in order to enable Push-to-talk\ndetection while the game has focus.\n  ",
        SUPPRESSED_AFK_TITLE: "Hello, anyone there?",
        SUPPRESSED_AFK_BODY:
          "It seems you've gone inactive on us. We've gone ahead and moved you to the inactive channel.",
        SUPPRESSED: "Suppressed",
        SUPPRESSED_PERMISSION_BODY:
          "You do not have permission to speak in this channel.",
        DONT_SHOW_AGAIN: "Don't show me this again.",
        SERVER_MUTED_DIALOG_TITLE: "Server Muted",
        SERVER_MUTED_DIALOG_BODY:
          "This channel has special permissions. To speak in it, you'll need someone, like a server moderator or admin, to unmute you.",
        SERVER_DEAFENED_DIALOG_TITLE: "Server Deafened",
        SERVER_DEAFENED_DIALOG_BODY:
          "This channel has special permissions. To listen in it, you'll need someone, like a server moderator or admin, to undeafen you.",
        NO_VIDEO_PERMISSION_DIALOG_TITLE: "No Video Permission",
        NO_VIDEO_PERMISSION_DIALOG_BODY:
          "This channel has special permissions. To use video in it, you'll need someone, like a server moderator or admin, to change your permissions.",
        NO_SCREENSHARE_PERMISSION_DIALOG_TITLE: "No Screen Share Permission",
        NO_SCREENSHARE_PERMISSION_DIALOG_BODY:
          "This channel has special permissions. To use Screen Share in it, you'll need someone, like a server moderator or admin, to change your permissions.",
        OS_MIN_SCREENSHARE_DIALOG_TITLE: "OS Version Requirement",
        OS_MIN_SCREENSHARE_DIALOG_BODY:
          "To use Screen Share, please update to latest OS version",
        IPAD_NO_SCREENSHARE_DIALOG_TITLE: "Feature Unavailable",
        IPAD_NO_SCREENSHARE_DIALOG_BODY:
          "Screen Share is currently unavailable on iPad. Coming soon!",
        NO_EMBEDDED_ACTIVITY_PERMISSION_DIALOG_TITLE:
          "No Activities Permission",
        NO_EMBEDDED_ACTIVITY_PERMISSION_DIALOG_BODY:
          "This channel has special permissions. To use Activities in it, you'll need someone, like a server moderator or admin, to change your permissions.",
        ACTIVITIES_GENERIC_LAUNCH_FAILURE_DIALOG_BODY:
          "Uh oh, something went wrong. Please try again later.",
        CONFIRM_DISABLE_SILENCE_TITLE: "We can't hear you!",
        CONFIRM_DISABLE_SILENCE_BODY:
          "\nIs your mic extra fancy and silencing itself? In that case you can turn off the red warning by clicking the\nteeny tiny small text below.",
        CONFIRM_DISABLE_SILENCE_DONT_SHOW: "Don't show me the warning again",
        VAD_PERMISSION_TITLE: "Push to Talk Required",
        VAD_PERMISSION_BODY:
          "\nThis channel requires Push to Talk to voice chat. You will only be able to listen until you switch modes\nto Push to Talk from Voice Activity Detection.\n  ",
        VAD_PERMISSION_SMALL:
          "You must have Push to Talk enabled to speak in this channel.",
        VAD_PERMISSION_ENABLE_PTT: "Switch to Push to Talk",
        VAD_PERMISSION_OKAY: "Don’t switch",
        INTERACTION_REQUIRED_TITLE: "Interaction Required",
        INTERACTION_REQUIRED_BODY:
          "Browsers require user interaction before they will play audio. Just click okay to continue.",
        CERTIFIED_DEVICE_RECOMMENDATION_TITLE: "Certified Device Detected",
        CERTIFIED_DEVICE_RECOMMENDATION_AUDIO_INPUT_BODY:
          "\nDiscord detected a certified audio input device named **{vendorName} {modelName}**. We recommend you switch to it for the most optimal experience.",
        CERTIFIED_DEVICE_RECOMMENDATION_AUDIO_OUTPUT_BODY:
          "\nDiscord detected a certified audio output device named **{vendorName} {modelName}**. We recommend you switch to it for the most optimal experience.",
        CERTIFIED_DEVICE_RECOMMENDATION_AUDIO_INPUT_AND_OUTPUT_BODY:
          "\nDiscord detected a certified audio device named **{vendorName} {modelName}**. We recommend you switch to it for the most optimal experience.",
        CONNECTED_DEVICE_DETECTED_TITLE: "New Audio Device Detected",
        CONNECTED_DEVICE_DETECTED_INPUT_BODY:
          "Discord has detected a new audio input device named **!!{name}!!**! Do you want to switch to it?",
        CONNECTED_DEVICE_DETECTED_OUTPUT_BODY:
          "Discord has detected a new audio output device named **!!{name}!!**! Do you want to switch to it?",
        CONNECTED_DEVICE_DETECTED_INPUT_AND_OUTPUT_BODY:
          "Discord has detected a new audio device named **!!{name}!!**! Do you want to switch to it?",
        CONNECTED_DEVICE_DETECTED_OPTION_INPUT_AND_OUTPUT:
          "Switch both input and output",
        CONNECTED_DEVICE_DETECTED_OPTION_INPUT: "Switch input only",
        CONNECTED_DEVICE_DETECTED_OPTION_OUTPUT: "Switch output only",
        CONNECTED_DEVICE_DETECTED_CONFIRM_BUTTON: "Switch Device",
        CONNECTED_DEVICE_DETECTED_CANCEL_BUTTON: "Don't Switch",
        OPEN_ORIGIANL_IMAGE_BUTTON_A11Y_DESCRIPTION:
          "click to open image dialog",
        NSFW_TITLE: "Age-Restricted Channel",
        NSFW_DESCRIPTION:
          "You must be at least eighteen years old to view this channel. Are you over eighteen and willing to see adult content?",
        NSFW_ACCEPT: "Continue",
        NSFW_DECLINE: "Nope",
        MATURE_LISTING_TITLE: "!!{name}!! is for mature audiences",
        MATURE_LISTING_DESCRIPTION:
          "You must be at least eighteen years old to view this game. Are you over eighteen and willing to view mature content?",
        MATURE_LISTING_ACCEPT: "Continue",
        MATURE_LISTING_DECLINE: "Nope",
        FORM_LABEL_CHANNEL_NAME: "Channel Name",
        FORM_LABEL_CHANNEL_TOPIC: "Channel Topic",
        A11Y_LABEL_CHANNEL_EMOJI_BUTTON:
          "!!{emojiName}!!, Change channel emoji",
        OPEN_CHANNEL_TOPIC: "Open Channel Topic",
        CHANNEL_TOPIC_EMPTY: "Let everyone know how to use this channel!",
        DELETE_CHANNEL: "Delete Channel",
        DELETE_CATEGORY: "Delete Category",
        REMOVE_CATEGORY: "Remove Category",
        DELETE_CATEGORY_SUBTEXT: "Channels will be uncategorized",
        OVERVIEW: "Overview",
        EDIT_OVERVIEW: "Edit Overview",
        ONBOARDING: "Onboarding",
        INSTANT_INVITES: "Invites",
        PERMISSIONS: "Permissions",
        DONE: "Done",
        CONFIRM: "Confirm",
        HIDE: "Hide",
        REVEAL: "Reveal",
        FORM_LABEL_BITRATE: "Bitrate",
        FORM_HELP_BITRATE:
          "ALL THE BITS! Going above {bitrate, number} kbps may adversely affect people on poor connections.",
        FORM_LABEL_USER_LIMIT: "User Limit",
        FORM_HELP_USER_LIMIT:
          "\nLimits the number of users that can connect to this voice channel. Users with the **Move Members** permission\nignore this limit and can move other users into the channel.\n",
        FORM_HELP_USER_LIMIT_STAGE:
          "\nLimits the number of users that can connect to this Stage channel. Users with the **Move Members** permission\nignore this limit and can move other users into the channel.\n",
        NO_USER_LIMIT: "No Limit",
        NUM_USERS: "{num, plural, one {1 user} other {{num} users}}",
        FORM_LABEL_NSFW_CHANNEL: "Age-Restricted Channel",
        FORM_HELP_NSFW:
          "\nUsers will need to confirm they are of over legal age to view in the content in this channel.\nAge-restricted channels are exempt from the explicit content filter.\n",
        FORM_LABEL_NEWS_CHANNEL: "Announcement Channel",
        FORM_HELP_NEWS:
          '\nPost messages that reach servers outside your own. Users can opt into "Following" this channel, so select posts you "Publish" from here will appear directly in their own servers. Announcement channels will not receive messages from other Announcement channels. [Learn more.]({documentationLink})\n  ',
        FORM_HELP_NEWS_ANDROID:
          'Post messages that reach servers outside your own. Users can opt into "Following" this channel, so select posts you "Publish" from here will appear directly in their own servers. [Learn more.]({documentationLink})',
        FORM_LABEL_SLOWMODE: "Slowmode",
        FORM_HELP_SLOWMODE:
          "\nMembers will be restricted to sending one message and creating one thread per this interval, unless they have Manage Channel or Manage Messages permissions.",
        FORM_HELP_SLOWMODE_THREAD:
          "Members will be restricted to sending one message per this interval, unless they have Manage Channel or Manage Messages permissions.",
        FORM_HELP_SLOWMODE_FORUM:
          "Members will be restricted to creating one post per this interval, unless they have Manage Channel or Manage Messages permissions.",
        FORM_LABEL_SLOWMODE_COOLDOWN: "Slowmode Cooldown",
        FORM_LABEL_SLOWMODE_OFF: "Slowmode is off.",
        CANNOT_DELETE_CHANNEL: "Cannot Delete Channel",
        DELETE_RULES_CHANNEL_BODY:
          "Community Servers are required to have a rules channel.",
        DELETE_DEFAULT_CHANNEL_BODY:
          "Deleting this channel will make your server incompatible with Community Onboarding.",
        DELETE_UPDATES_CHANNEL_BODY:
          "Community Servers are required to have a Community Updates channel where Discord can send important community server updates.",
        ANDROID_DESIGNATE_OTHER_CHANNEL:
          "You must designate another inside Server Settings before this channel can be deleted.",
        DESIGNATE_OTHER_CHANNEL:
          "You must designate another inside [Server Settings > Community > Overview](onClick) before this channel can be deleted.",
        DESIGNATE_OTHER_CHANNEL_ONBOARDING:
          "You must designate a replacement Default Channel in [Server Settings > Community > Onboarding](onClick) before this channel can be deleted.",
        DESIGNATE_OTHER_CHANNEL_GUIDE_TODO:
          "You must remove or replace the To Do in [Server Settings > Community > Onboarding](onClick) before this channel can be deleted.",
        DESIGNATE_OTHER_CHANNEL_GUIDE_RESOURCE:
          "You must remove or replace the Resource in [Server Settings > Community > Onboarding](onClick) before this channel can be deleted.",
        MOBILE_DESIGNATE_OTHER_CHANNEL:
          "You must designate another inside [Server Settings > Community > Overview](onClick) before this channel can be deleted.",
        ONBOARDING_CHANNEL_THRESHOLD_WARNING:
          "Making this change will make your server incompatible with Community Onboarding. You must designate a replacement Default Channel in [Server Settings > Community > Onboarding](onClick) before this channel can be modified.",
        ONBOARDING_CHANNEL_THRESHOLD_WARNING_MOBILE:
          "Making this change will make your server incompatible with Community Onboarding. You must designate a replacement Default Channel in **Server Settings > Community > Onboarding** (on desktop) before this channel can be modified.",
        CANNOT_CHANGE_CHANNEL_PERMS: "Cannot change channel permissions",
        FORM_LABEL_VIDEO_QUALITY: "Video Quality",
        VIDEO_QUALITY_MODE_AUTO: "Auto",
        VIDEO_QUALITY_MODE_FULL: "720p",
        FORM_HELP_VIDEO_QUALITY_MODE:
          "Sets camera video quality for all channel participants. Choose **Auto** for optimal performance.",
        OVERWRITE_AUTOCOMPLETE_LABEL: "Add:",
        OVERWRITE_AUTOCOMPLETE_PLACEHOLDER: "Role/Member",
        OVERWRITE_AUTOCOMPLETE_A11Y_LABEL: "Add Role or Member",
        ROLES: "Roles",
        MEMBERS: "Members",
        MEMBERS_LIST_LANDMARK_LABEL: "Members list for !!{channel}!! (channel)",
        ADD_A_ROLE: "Add a Role",
        ADD_A_MEMBER: "Add a Member",
        OVERWRITE_NO_ROLE_TO_ADD:
          "Every role has overridden permissions in this channel.",
        MEMBER_LIST: "Member List",
        MEMBER_LIST_SHOWN: "Hide Member List",
        MEMBER_LIST_HIDDEN: "Show Member List",
        GENERAL_PERMISSIONS: "General Permissions",
        MANAGE_CHANNEL: "Manage Channel",
        MANAGE_CHANNEL_DESCRIPTION:
          "Members with this permission can change the channel's name or delete it.",
        MANAGE_PERMISSIONS: "Manage Permissions",
        MANAGE_PERMISSIONS_DESCRIPTION:
          "Members with this permission can change this channel's permissions.",
        TEXT_PERMISSIONS: "Text Permissions",
        READ_MESSAGES: "Read Messages",
        READ_MESSAGES_VIEW_CHANNELS: "Read Text Channels & See Voice Channels",
        VIEW_CHANNEL: "View Channel",
        SEND_MESSAGES_DESCRIPTION:
          "Members with this permission can publish their own messages to all servers following this [Announcement Channel]({articleURL}).",
        SEND_TTS_MESSAGES: "Send TTS Messages",
        SEND_TTS_MESSAGES_DESCRIPTION:
          "\nMembers with this permission can send text-to-speech messages by starting a message with /tts. These messages\ncan be heard by everyone focused on the channel.\n  ",
        USE_APPLICATION_COMMANDS: "Use Application Commands",
        USE_APPLICATION_COMMANDS_GUILD_DESCRIPTION:
          "Members with this permission can use commands from applications, including slash commands and context menu commands.",
        USE_APPLICATION_COMMANDS_CHANNEL_DESCRIPTION:
          "Members with this permission can use commands from applications in this channel, including slash commands and context menu commands.",
        MANAGE_MESSAGES_DESCRIPTION:
          "Members with this permission can delete messages by other members or pin any message.",
        MENTION: "Mention",
        MENTION_USER: "Mention {username}",
        MENTION_EVERYONE_ANDROID: "Mention @everyone, @here, and All Roles",
        MENTION_EVERYONE_DESCRIPTION:
          'Members with this permission can use @everyone or @here to ping all members. They can also @mention all roles, even if the role\'s "Allow anyone to mention this role" permission is disabled.',
        MENTION_EVERYONE_CHANNEL_DESCRIPTION:
          'Members with this permission can use @everyone or @here to ping all members **in this channel**. They can also @mention all roles, even if the role\'s "Allow anyone to mention this role" permission is disabled.',
        USE_EXTERNAL_EMOJIS: "Use External Emoji",
        USE_EXTERNAL_EMOJIS_DESCRIPTION:
          "Members with this permission can use emoji from other servers in this server.",
        USE_EXTERNAL_STICKERS: "Use External Stickers",
        USE_EXTERNAL_STICKERS_DESCRIPTION:
          "Members with this permission can use stickers from other servers in this server.",
        REACTIONS: "Reactions",
        VIEW_REACTIONS: "View Reactions",
        ADD_REACTION_NAMED: "Add Reaction: {emojiName}",
        REMOVE_REACTION: "Remove Reaction",
        REMOVE_ALL_REACTIONS: "Remove All Reactions",
        REMOVE_ALL_REACTIONS_CONFIRM_TITLE: "Remove All Reactions",
        REMOVE_ALL_REACTIONS_CONFIRM_BODY:
          "Are you sure you want to remove all reactions from this message?",
        REMOVE_EMOJI_REACTIONS: "Remove Reactions",
        REMOVE_EMOJI_REACTIONS_CONFIRM_TITLE: "Remove Reactions for Emoji",
        REMOVE_EMOJI_REACTIONS_CONFIRM_BODY:
          "Are you sure you want to remove all of the reactions for this emoji from this message?",
        ADD_REACTIONS_DESCRIPTION:
          "\nMembers with this permission can add new reactions to a message. Members can still react using reactions already added to\nmessages without this permission.\n  ",
        VOICE_PERMISSIONS: "Voice Permissions",
        MOVE_MEMBERS_DESCRIPTION:
          "\nMembers with this permission can drag other members out of this channel. They can only move members between\nchannels both they and the member they are moving have access.\n  ",
        USE_VAD_DESCRIPTION:
          "Members must use Push-to-talk in this channel if this permission is disallowed.",
        STREAM_DESCRIPTION:
          "Members with this permission can stream into this server.",
        STREAM_CHANNEL_DESCRIPTION:
          "Members with this permission can stream into this channel.",
        PERMISSION_HELPDESK: "Need help with permissions?",
        SELF_DENY_PERMISSION_TITLE: "Pretty sure you don't want to do this",
        SELF_DENY_PERMISSION_BODY:
          "\nYou cannot deny this permission to **!!{name}!!** because it will deny it to you as well. Allow another role or yourself\nbefore trying again.\n",
        CANNOT_DENY_SELF_SIMPLE: "You cannot revoke permissions from yourself.",
        CANNOT_DENY_SINGULAR_PERMISSION:
          "Revoking this permission would remove it from you.",
        CANNOT_DENY_MISSING_PERMISSION:
          "You do not have this permission, so you cannot revoke it.",
        REMOVE_ROLE_OR_USER: "Remove !!{name}!!",
        SEARCH_GLOBAL_DMS: "Search for messages, people, etc.",
        SEARCH_ROLES: "Search Roles",
        SEARCH_ROLES_NO_RESULT: "No roles were found.",
        SEARCH_MEMBERS: "Search Members",
        SEARCH_MEMBERS_NO_RESULT: "No members were found.",
        SEARCH_ACTIONS: "Search Actions",
        SEARCH_CHANNELS: "Search Channels",
        SEARCH_CHANNELS_NO_RESULT: "No channels were found.",
        SEARCH_THREAD_NAMES: "Search for Thread Name",
        SEARCH_ACTIVE_JUST_NOW: "Active just now",
        SEARCH_ACTIVE_YESTERDAY: "Active yesterday",
        SEARCH_ACTIVE_AGO_TIMESTAMP_MINUTES: "Active {count}m ago",
        SEARCH_ACTIVE_AGO_TIMESTAMP_HOURS: "Active {count}h ago",
        SEARCH_ACTIVE_AGO_TIMESTAMP_DAYS: "Active {count} days ago",
        SEARCH_ACTIVE_AGO_TIMESTAMP_MONTHS: "Active {count} months ago",
        SEARCH_ACTIVE_AGO_TIMESTAMP_YEARS: "Active {count} years ago",
        SEARCH_TAP_TO_SEE_LINK: "Tap to see message",
        CONTENT_MATCHING: "!!{command}!! content matching **!!{query}!!**",
        EMOJI_MATCHING: "Emoji matching **!!{prefix}!!**",
        REACTIONS_MATCHING: "Add reaction **!!{prefix}!!**",
        MEMBERS_MATCHING: "Members matching **!!{prefix}!!**",
        ROLES_MATCHING: "Roles matching **!!{prefix}!!**",
        COMMANDS_MATCHING: "Commands matching **!!{prefix}!!**",
        STICKERS_MATCHING: "Stickers matching **!!{prefix}!!**",
        STICKERS_MATCHING_IOS: "Stickers matching {prefix}",
        CHANNELS_MATCHING: "Channels matching **!!{prefix}!!**",
        TEXT_CHANNELS_MATCHING: "Text channels matching **!!{prefix}!!**",
        VOICE_CHANNELS_MATCHING: "Voice channels matching **!!{prefix}!!**",
        OPTIONS_MATCHING: "Options matching **!!{prefix}!!**",
        REQUIRED_OPTIONS: "Required options",
        REQUIRED_OPTIONS_MATCHING: "Required options matching **!!{prefix}!!**",
        MENTION_USERS_WITH_ROLE:
          "Notify users with this role who have permission to view this channel.",
        EMOJI: "Emoji",
        SELECT_EMOJI: "Select emoji",
        SELECT_ACTIVITY: "Select Activity",
        COMMANDS: "Commands",
        TEXT_CHANNELS: "Text Channels",
        NO_SEND_MESSAGES_PERMISSION_PLACEHOLDER:
          "You do not have permission to send messages in this channel.",
        MENTION_EVERYONE_AUTOCOMPLETE_DESCRIPTION:
          "Notify everyone who has permission to view this channel.",
        MENTION_HERE_AUTOCOMPLETE_DESCRIPTION:
          "Notify everyone online who has permission to view this channel.",
        MENTION_EVERYONE_AUTOCOMPLETE_DESCRIPTION_MOBILE:
          "Notify everyone in this channel.",
        MENTION_HERE_AUTOCOMPLETE_DESCRIPTION_MOBILE:
          "Notify members online in this channel.",
        MENTION_ROLE_AUTOCOMPLETE_DESCRIPTION_MOBILE:
          "Notify users with this role in this channel.",
        COMMANDS_OPTION_COUNT:
          "+{count, plural, =1 {# option} other {# options}}",
        COMMANDS_OPTIONAL_HEADER: "Optional",
        COMMANDS_OPTIONAL_COUNT: "+{count} optional",
        COMMANDS_OPTIONAL_COUNT_REMAINING: "+{count} more",
        STICKERS_YOU_MIGHT_LIKE: "Stickers you might like",
        STICKERS_YOU_MIGHT_LIKE_A11Y: "Category: Stickers you might like",
        COMMAND_GIPHY_DESCRIPTION: "Search Animated GIFs on the Web",
        COMMAND_GIPHY_QUERY_DESCRIPTION: "Search for a GIF",
        COMMAND_SPOILER_DESCRIPTION: "Marks your message as a spoiler.",
        COMMAND_SPOILER_MESSAGE_DESCRIPTION: "Your message",
        COMMAND_TTS_DESCRIPTION:
          "Use text-to-speech to read the message to all members currently viewing the channel.",
        COMMAND_TTS_MESSAGE_DESCRIPTION: "Your message",
        COMMAND_ME_DESCRIPTION: "Displays text with emphasis.",
        COMMAND_ME_MESSAGE_DESCRIPTION: "Your message",
        COMMAND_TABLEFLIP_DESCRIPTION:
          "Appends (╯\xb0□\xb0)╯︵ ┻━┻ to your message.",
        COMMAND_TABLEFLIP_MESSAGE_DESCRIPTION: "Your message",
        COMMAND_TABLEUNFLIP_DESCRIPTION:
          "Appends ┬─┬ ノ( ゜-゜ノ) to your message.",
        COMMAND_TABLEUNFLIP_MESSAGE_DESCRIPTION: "Your message",
        COMMAND_SHRUG_DESCRIPTION: "Appends \xaf\\_(ツ)_/\xaf to your message.",
        COMMAND_SHRUG_MESSAGE_DESCRIPTION: "Your message",
        COMMAND_NICK_DESCRIPTION: "Change nickname on this server.",
        COMMAND_NICK_NEWNICK_DESCRIPTION: "New nickname",
        COMMAND_NICK_SUCCESS:
          "Your nickname on this server has been changed to **{nick}**.",
        COMMAND_NICK_RESET: "Your nickname on this server has been reset.",
        COMMAND_NICK_FAILURE:
          "Your nickname could not be changed on this server.",
        COMMAND_CHANGE_NICK_FOR_MEMBER_FAILURE:
          "This user's nickname could not be changed on this server.",
        COMMAND_NICK_FAILURE_PERMISSION:
          "You do not have the **Change Nickname** permission on this server.",
        COMMAND_THREAD_DESCRIPTION: "Start new thread",
        COMMAND_THREAD_NAME_DESCRIPTION: "Type a name for your thread",
        COMMAND_THREAD_MESSAGE_DESCRIPTION:
          "Type the first message in your thread",
        COMMAND_KICK_DESCRIPTION: "Kick user",
        COMMAND_KICK_USER_DESCRIPTION: "The user to kick",
        COMMAND_KICK_REASON_DESCRIPTION: "The reason for kicking, if any",
        COMMAND_KICK_CONFIRMATION: "!!{user}!! was kicked from the server.",
        COMMAND_KICK_UNABLE:
          "You do not have the appropriate permissions to kick that user.",
        COMMAND_KICK_ERROR:
          "Oops! We encountered an error when trying to kick that user.",
        COMMAND_BAN_DESCRIPTION: "Ban user",
        COMMAND_BAN_USER_DESCRIPTION: "The user to ban",
        COMMAND_BAN_DELETE_MESSAGES_DESCRIPTION:
          "How much of their recent message history to delete",
        COMMAND_BAN_REASON_DESCRIPTION: "The reason for banning, if any",
        COMMAND_BAN_CONFIRMATION: "!!{user}!! was banned from the server.",
        COMMAND_BAN_UNABLE:
          "You do not have the appropriate permissions to ban that user.",
        COMMAND_BAN_ERROR:
          "Oops! We encountered an error when trying to ban that user.",
        COMMAND_TIMEOUT_DESCRIPTION: "Timeout user",
        COMMAND_TIMEOUT_USER_DESCRIPTION: "The user to timeout",
        COMMAND_TIMEOUT_DURATION_DESCRIPTION:
          "How long they should be timed out for",
        COMMAND_TIMEOUT_REASON_DESCRIPTION:
          "The reason for timing them out, if any",
        COMMAND_TIMEOUT_CONFIRMATION:
          "!!{user}!! timed out for {duration, number} seconds.",
        COMMAND_TIMEOUT_UNABLE:
          "You do not have the appropriate permissions to timeout that user.",
        COMMAND_TIMEOUT_ERROR:
          "Oops! We encountered an error when trying to timeout that user.",
        COMMAND_MSG_DESCRIPTION: "Message user",
        COMMAND_MSG_USER_DESCRIPTION: "The user to message",
        COMMAND_MSG_MESSAGE_DESCRIPTION: "Message to send",
        COMMAND_MSG_ERROR:
          "Oops! We encountered an error when trying to message that user.",
        COMMAND_VALIDATION_REQUIRED_ERROR:
          "This option is required. Specify a value.",
        COMMAND_VALIDATION_BOOLEAN_ERROR: "Pick either true or false.",
        COMMAND_VALIDATION_INTEGER_ERROR: "Input a valid integer.",
        COMMAND_VALIDATION_NUMBER_ERROR: "Input a valid number.",
        COMMAND_VALIDATION_NUMBER_MAXIMUM_ERROR:
          "Enter a number less than or equal to !!{maximum}!!.",
        COMMAND_VALIDATION_NUMBER_MINIMUM_ERROR:
          "Enter a number greater than or equal to !!{minimum}!!.",
        COMMAND_VALIDATION_NUMBER_RANGE_ERROR:
          "Enter a number between !!{minimum}!! and !!{maximum}!!.",
        COMMAND_VALIDATION_STRING_EXACT_RANGE_ERROR:
          "Enter !!{value}!! characters.",
        COMMAND_VALIDATION_STRING_MAXIMUM_ERROR:
          "Enter !!{maximum}!! or fewer characters.",
        COMMAND_VALIDATION_STRING_MINIMUM_ERROR:
          "Enter !!{minimum}!! or more characters.",
        COMMAND_VALIDATION_STRING_RANGE_ERROR:
          "Enter between !!{minimum}!! and !!{maximum}!! characters.",
        COMMAND_VALIDATION_USER_ERROR: "Not a valid user.",
        COMMAND_VALIDATION_CHANNEL_ERROR: "Not a valid channel.",
        COMMAND_VALIDATION_ROLE_ERROR: "Not a valid role.",
        COMMAND_VALIDATION_MENTIONABLE_ERROR: "Not a valid user or role.",
        COMMAND_VALIDATION_CHOICE_ERROR: "Not a valid choice.",
        COMMAND_VALIDATION_GENERAL_ERROR: "Not a valid value.",
        COMMAND_DISPLAY_STRING: "{commandName}{commandText}",
        COMMAND_SECTION_BUILT_IN_NAME: "Built-In",
        COMMAND_ACCESSIBILITY_DESC_OPEN_DISCOVER_LIST:
          "Application commands list opened",
        COMMAND_ACCESSIBILITY_DESC_COMMAND_ITEM:
          "Slash {commandName}. {commandDescription}. From {applicationName}",
        COMMAND_ACCESSIBILITY_DESC_CONTEXT_MENU_COMMAND_ITEM:
          "{commandName}. From {applicationName}",
        COMMAND_ACCESSIBILITY_DESC_APP_ITEM: "{applicationName} application",
        COMMAND_ACCESSIBILITY_DESC_APP_ITEM_SELECTED:
          "{applicationName} application selected",
        COMMAND_ACCESSIBILITY_DESC_APP_HEADER_ITEM:
          "Slash command application {applicationName}",
        COMMAND_ACCESSIBILITY_DESC_COMMAND_OPTION_BUTTON:
          "Add command argument {optionName}",
        APP_LAUNCHER_HOME_RECENT_COMMANDS_HEADER: "Recents",
        APP_LAUNCHER_HOME_SERVER_APPS_HEADER: "Bots in this server",
        APP_LAUNCHER_COMMAND_LIST_SORT_HEADER: "Sort By",
        APP_LAUNCHER_COMMAND_LIST_SORT_OPTION_POPULAR: "Popular",
        APP_LAUNCHER_COMMAND_LIST_SORT_OPTION_ALPHABETICAL: "Alphabetical",
        APP_LAUNCHER_ALL_COMMANDS_HEADER: "All Commands",
        APP_LAUNCHER_NO_REQUIRED_OPTIONS_CALLOUT:
          "Nothing required. You can send the command or add an option below",
        APP_LAUNCHER_NO_OPTIONS_CALLOUT:
          "This command has no options. Send it!",
        APP_LAUNCHER_COMMAND_OPTIONAL_OPTIONS_LIST_HEADER:
          "Select an option below",
        APP_LAUNCHER_SEARCH_PLACEHOLDER: "Search Apps & Commands",
        APP_LAUNCHER_HOME_EMPTY_STATE_BODY:
          "No apps have been installed in this server yet",
        APP_LAUNCHER_SEARCH_EMPTY_STATE_BODY:
          "No apps or commands match your search",
        APP_LAUNCHER_BUILT_IN_SECTION_NAME: "Discord Built-In",
        APP_LAUNCHER_BUILT_IN_SECTION_DESCRIPTION:
          "Built-in commands for everyday use",
        APP_LAUNCHER_UNKNOWN_COMMAND_ERROR_MODAL_TITLE:
          "Something went wrong...",
        APP_LAUNCHER_UNKNOWN_COMMAND_ERROR_MODAL_BODY:
          "We were unable to run the command. Please try again later.",
        APP_LAUNCHER_AUTOCOMPLETE_OPTION_SEARCH_BAR_PLACEHOLDER:
          "Start typing...",
        APP_LAUNCHER_COMMAND_NOT_FOUND_TITLE: "No command found",
        APP_LAUNCHER_COMMAND_NOT_FOUND_BODY: "This command is not available",
        APP_LAUNCHER_NO_PERMISSIONS_STATE_BODY:
          "You don't have permission to use any apps in this channel",
        APP_LAUNCHER_PREVIOUSLY_EXECUTED_COMMAND_OPEN: "Open Command",
        APP_LAUNCHER_COMMAND_NO_PERMISSIONS_TITLE: "No permissions",
        APP_LAUNCHER_COMMAND_NO_PERMISSIONS_BODY:
          "You do not have permissions to run this command",
        READY: "Ready",
        CONNECTING: "Connecting…",
        CONNECTING_PROBLEMS_CTA: "Connection problems? Let us know!",
        TWEET_US: "Tweet Us",
        SERVER_STATUS: "Server Status",
        CREATE: "Create",
        CREATE_TEXT_CHANNEL: "Create Text Channel",
        CREATE_TEXT_CHANNEL_DESCRIPTION:
          "Send messages, images, GIFs, emoji, opinions, and puns",
        CREATE_VOICE_CHANNEL: "Create Voice Channel",
        CREATE_VOICE_CHANNEL_DESCRIPTION:
          "Hang out together with voice, video, and screen share",
        CREATE_STORE_CHANNEL_DESCRIPTION: "Sell your game directly on Discord",
        CREATE_NEWS_CHANNEL_DESCRIPTION:
          "Important updates for people in and out of the server",
        CREATE_STAGE_CHANNEL: "Create Stage Channel",
        CREATE_STAGE_CHANNEL_DESCRIPTION:
          "Host events, panels, and Q&As for an audience",
        CLONE_CHANNEL: "Duplicate Channel",
        CLONE_CHANNEL_HELP:
          "A new channel will be created with the same permissions, user limit and bitrate as **!!{name}!!**.",
        FORM_LABEL_CHANNEL_PERMISSIONS: "Who can access this channel?",
        FORM_LABEL_CATEGORY_PERMISSIONS: "Who can access this category?",
        CREATE_STORE_CHANNEL_APPLICATION: "Application",
        CREATE_STORE_CHANNEL_SELECT_APPLICATION: "Select application",
        CREATE_STORE_CHANNEL_SKU: "SKU",
        CREATE_STORE_CHANNEL_SELECT_SKU: "Select SKU",
        CREATE_STORE_CHANNEL_NO_SKUS: "No SKUs available",
        CREATE_STORE_CHANNEL_BRANCH: "Branch",
        CREATE_STORE_CHANNEL_SELECT_BRANCH: "Select branch",
        CREATE_STORE_CHANNEL_BETA_TITLE: "Beta Channel",
        CREATE_STORE_CHANNEL_BETA_NOTE:
          "Beta channels let users claim test branches of your game for free. [Learn more about beta channels.]({devPortalUrl})",
        INSTANT_INVITE_EXPIRED: "The invite is invalid or has expired.",
        INSTANT_INVITE_BANNED: "Uh-oh. Looks like you've been banned.",
        JOIN_SERVER_TITLE: "Join a Server",
        JOIN_SERVER_DESCRIPTION_NUF:
          "Enter an invite below to join an existing server",
        INVALID_INVITE_LINK_ERROR:
          "Please enter a valid invite link or invite code.",
        MAX_GUILD_MEMBERS_REACHED_ERROR:
          "This server is currently full. Please try again later.",
        SERVER_IS_CURRENTLY_FULL: "This server is currently full.",
        PLEASE_TRY_AGAIN_LATER: "Please try again later.",
        BACK: "Back",
        BACK_BUTTON_MENTIONS_ACCESSIBILITY_LABEL:
          "Back Button {mentionCount, plural, one {# mention} other {# mentions}}",
        BACK_ACCESSIBILITY_HINT: "Navigate back to the previous screen",
        JOIN: "Join",
        CREATE_SERVER_DEFAULT_SERVER_NAME_FORMAT: "{username}'s server",
        FORM_LABEL_SERVER_NAME: "Server Name",
        FORM_PLACEHOLDER_SERVER_NAME: "Enter a server name",
        FORM_CLEAR_SERVER_NAME_A11Y_LABEL: "Clear Server Name",
        SERVER_NAME_REQUIRED: "Server name is required.",
        CREATE_SERVER_BUTTON_ACTION: "Create Server",
        CREATE_SERVER_BUTTON_CTA: "Create a server",
        CREATE_SERVER_BUTTON_CTA_MOBILE: "Create a new Server",
        JOIN_SERVER_BUTTON_CTA: "Join a server",
        JOIN_SERVER_BUTTON_CTA_MOBILE: "Join a Server with an Invite Link",
        JOIN_SERVER_EXAMPLES: "Examples: {examples}",
        JOIN_GUILD_CONNECT:
          "Looking for more servers to join? [Connect Twitch or YouTube accounts.](onClick)",
        ADD_A_SERVER: "Add a Server",
        ADD_A_SERVER_MOBILE: "Tap to add a server!",
        CREATE_SERVER_GUIDELINES:
          "By creating a server, you agree to Discord's **[Community Guidelines]({guidelinesURL})**.",
        DISCOVERY_UPSELL_HEADER: "Don't have an invite?",
        DISCOVERY_UPSELL_DESCRIPTION:
          "Check out Discoverable communities in Server Discovery.",
        GUILD_TEMPLATE_SELECTOR_TITLE: "Create Your Server",
        GUILD_TEMPLATE_SELECTOR_DESCRIPTION:
          "Your server is where you and your friends hang out. Make yours and start talking.",
        GUILD_TEMPLATE_SELECTOR_OPTION_HEADER: "Start from a template",
        GUILD_TEMPLATE_HEADER_CREATE: "Create My Own",
        GUILD_TEMPLATE_HEADER_STUDY: "Study Group",
        GUILD_TEMPLATE_HEADER_GAMING: "Gaming",
        GUILD_TEMPLATE_HEADER_FRIEND: "Friends",
        GUILD_TEMPLATE_HEADER_CREATOR: "Artists & Creators",
        GUILD_TEMPLATE_HEADER_CLUBS: "Clubs",
        GUILD_TEMPLATE_HEADER_COMMUNITY: "Local Community",
        GUILD_TEMPLATE_NAME_ANNOUNCEMENTS: "announcements",
        GUILD_TEMPLATE_NAME_EVENTS: "events",
        GUILD_TEMPLATE_NAME_GAME: "games",
        GUILD_TEMPLATE_NAME_GENERAL: "general",
        GUILD_TEMPLATE_NAME_MEETUPS: "meetups",
        GUILD_TEMPLATE_NAME_MUSIC: "music",
        GUILD_TEMPLATE_NAME_OFF_TOPIC: "off-topic",
        GUILD_TEMPLATE_NAME_WELCOME_AND_RULES: "welcome-and-rules",
        GUILD_TEMPLATE_NAME_CLIPS_AND_HIGHLIGHTS: "clips-and-highlights",
        GUILD_TEMPLATE_NAME_NOTES_RESOURCES: "notes-resources",
        GUILD_TEMPLATE_NAME_HOMEWORK_HELP: "homework-help",
        GUILD_TEMPLATE_NAME_SESSION_PLANNING: "session-planning",
        GUILD_TEMPLATE_NAME_MEETING_PLANS: "meeting-plans",
        GUILD_TEMPLATE_NAME_IDEAS_AND_FEEDBACK: "ideas-and-feedback",
        GUILD_TEMPLATE_NAME_RESOURCES: "resources",
        GUILD_TEMPLATE_NAME_VOICE_LOBBY: "Lobby",
        GUILD_TEMPLATE_NAME_VOICE_GAMING: "Gaming",
        GUILD_TEMPLATE_NAME_VOICE_LOUNGE: "Lounge",
        GUILD_TEMPLATE_NAME_VOICE_STREAM_ROOM: "Stream Room",
        GUILD_TEMPLATE_NAME_VOICE_STUDY_ROOM: "Study Room {number}",
        GUILD_TEMPLATE_NAME_VOICE_MEETING_ROOM: "Meeting Room",
        GUILD_TEMPLATE_NAME_VOICE_COMMUNITY_HANGOUT: "Community Hangout",
        GUILD_TEMPLATE_NAME_CATEGORY_TEXT: "Text Channels",
        GUILD_TEMPLATE_NAME_CATEGORY_VOICE: "Voice Channels",
        GUILD_TEMPLATE_NAME_CATEGORY_INFORMATION: "Information",
        GUILD_TEMPLATE_MODAL_TITLE_CLASSROOM:
          "Create a server for your classroom",
        GUILD_TEMPLATE_MODAL_DESCRIPTION_CLASSROOM:
          "Give lectures, help with homework, and study together.",
        GUILD_TEMPLATES_FORM_LABEL_SERVER_NAME_CLASSROOM:
          "Name for your classroom",
        GUILD_TEMPLATE_DEFAULT_SERVER_NAME_CLASSROOM: "{username}'s Classroom",
        GUILD_TEMPLATE_MODAL_TITLE_LOCAL_COMMUNITIES:
          "Create a server for your community",
        GUILD_TEMPLATE_MODAL_DESCRIPTION_LOCAL_COMMUNITIES:
          "Meet up, organize, and stay in touch.",
        GUILD_TEMPLATES_FORM_LABEL_SERVER_NAME_LOCAL_COMMUNITIES:
          "Name for your community",
        GUILD_TEMPLATE_DEFAULT_SERVER_NAME_LOCAL_COMMUNITIES:
          "{username}'s Community",
        GUILD_TEMPLATE_MODAL_TITLE_CREATORS_HOBBIES:
          "Create a server for your group",
        GUILD_TEMPLATE_MODAL_DESCRIPTION_CREATORS_HOBBIES:
          "Collaborate, ideate, and show your stuff.",
        GUILD_TEMPLATES_FORM_LABEL_SERVER_NAME_CREATORS_HOBBIES:
          "Name for your group",
        GUILD_TEMPLATE_DEFAULT_SERVER_NAME_CREATORS_HOBBIES:
          "{username}'s Group",
        GUILD_TEMPLATE_MODAL_TITLE_GLOBAL_COMMUNITIES:
          "Create a server for your community",
        GUILD_TEMPLATE_MODAL_DESCRIPTION_GLOBAL_COMMUNITIES:
          "Coordinate, share resources, and host events.",
        GUILD_TEMPLATES_FORM_LABEL_SERVER_NAME_GLOBAL_COMMUNITIES:
          "Name for your community",
        GUILD_TEMPLATE_DEFAULT_SERVER_NAME_GLOBAL_COMMUNITIES:
          "{username}'s Community",
        GUILD_TEMPLATE_MODAL_TITLE_FRIENDS_FAMILY:
          "Create a server for your friends",
        GUILD_TEMPLATE_MODAL_DESCRIPTION_FRIENDS_FAMILY:
          "Make a home, have fun, and hang out.",
        GUILD_TEMPLATES_FORM_LABEL_SERVER_NAME_FRIENDS_FAMILY:
          "Name for your group",
        GUILD_TEMPLATE_DEFAULT_SERVER_NAME_FRIENDS_FAMILY: "{username}'s Group",
        GUILD_TEMPLATE_MODAL_TITLE_STUDY_GROUPS:
          "Create a server for your study group",
        GUILD_TEMPLATE_MODAL_DESCRIPTION_STUDY_GROUPS:
          "Stream lessons, ask questions, and study together.",
        GUILD_TEMPLATES_FORM_LABEL_SERVER_NAME_STUDY_GROUPS:
          "Name for your study group",
        GUILD_TEMPLATE_DEFAULT_SERVER_NAME_STUDY_GROUPS:
          "{username}'s Study Group",
        GUILD_TEMPLATE_MODAL_TITLE_CREATE_FROM_SCRATCH: "Create your server",
        GUILD_TEMPLATE_MODAL_DESCRIPTION_CREATE_FROM_SCRATCH:
          "Wave hello, share your screen, or just chat.",
        GUILD_TEMPLATES_FORM_LABEL_SERVER_NAME_CREATE_FROM_SCRATCH:
          "Name for your server",
        GUILD_TEMPLATE_DEFAULT_SERVER_NAME_CREATE_FROM_SCRATCH:
          "{username}'s Server",
        GUILD_TEMPLATE_MODAL_TITLE_CAMPUS_CLUBS:
          "Create a server for your club",
        GUILD_TEMPLATE_MODAL_DESCRIPTION_CAMPUS_CLUBS:
          "Meet up, organize and stay in touch.",
        GUILD_TEMPLATE_DEFAULT_SERVER_NAME_CAMPUS_CLUBS: "{username}'s Club",
        GUILD_TEMPLATE_MODAL_TITLE_LEAGUE_CLUBS:
          "Create a server for your community",
        GUILD_TEMPLATE_MODAL_DESCRIPTION_LEAGUE_CLUBS:
          "Stay in touch on and off the Rift.",
        GUILD_TEMPLATE_MODAL_TITLE_GITHUB_HACKATHON:
          "Create a server for your hackathon",
        GUILD_TEMPLATE_MODAL_DESCRIPTION_GITHUB_HACKATHON:
          "Your hackathon – all together in one place.",
        CREATE_GUILD_WITH_TEMPLATES_TITLE: "Create a server",
        GUILD_CREATE_TITLE: "Create Your Server",
        GUILD_CREATE_UPLOAD_ICON_BUTTON_TEXT: "Upload a Server Icon",
        GUILD_SEARCH_HEADING: "Search {guildName}",
        PLATFORM_MACOS: "MacOS",
        PLATFORM_WINDOWS: "Windows",
        PLATFORM_LINUX: "Linux",
        PLATFORM_IOS: "Apple iOS",
        PLATFORM_ANDROID: "Android",
        DOWNLOAD_DESKTOP_TITLE: "Get Discord at Home",
        DOWNLOAD_MOBILE_TITLE: "Or on the go",
        DOWNLOAD_DESKTOP_FOOTER:
          "Want some of that fresh off-the-vine Discord? [Get the public test build](https://discord.com/download#ptb-card).",
        DOWNLOAD: "Download",
        DEB: "Deb",
        TAR_GZ: "Tar",
        WINDOWS: "Windows",
        MACOS: "macOS",
        LINUX: "Linux",
        WINDOWS_32_BIT_DEPRECATED_WARNING:
          "Your version of Windows is out of date. Update it to continue receiving Discord updates and technical support. [Learn more about system requirements]({helpCenterLink})",
        WINDOWS_7_8_DEPRECATED_WARNING:
          "Your version of Windows is out of date. Update it to continue receiving Discord updates and technical support. [Learn more about system requirements]({helpCenterLink})",
        MACOS_DEPRECATED_WARNING:
          "Your version of macOS is out of date. Update it to continue receiving Discord updates and technical support. [Learn more about system requirements]({helpCenterLink})",
        EMBEDDED_ACTIVITIES_LEAVE_ACTIVITY: "Leave Activity",
        EMBEDDED_ACTIVITIES_LEAVE: "Leave",
        EMBEDDED_ACTIVITIES_JOIN_ACTIVITY: "Join Activity",
        EMBEDDED_ACTIVITIES_IN_ACTIVITY: "In Activity",
        EMBEDDED_ACTIVITIES_START_ACTIVITY_LABEL: "Start Activity",
        EMBEDDED_ACTIVITIES_START_AN_ACTIVITY: "Start an Activity",
        EMBEDDED_ACTIVITIES_INVITE_TO_ACTIVITY: "Invite To Activity",
        EMBEDDED_ACTIVITIES_INVITE_FRIENDS_TO_ACTIVITY_NAME:
          "Invite friends to {applicationName}",
        EMBEDDED_ACTIVITIES_SHARE_LINK_TO_ACTIVITY:
          "Share this link with others to grant access to this server and join the activity",
        EMBEDDED_ACTIVITIES_INVITE_CHANNEL_IN_SERVER:
          "**{channelName}** in **{serverName}**",
        EMBEDDED_ACTIVITIES_INVITE_ACTIVITY_FOOTER_LINK_HEADER:
          "Send an activity invite link to a friend",
        EMBEDDED_ACTIVITIES_INVITE_IN: "in",
        EMBEDDED_ACTIVITIES_INVITE_ACTIVITY_ENDED: "Activity has ended",
        EMBEDDED_ACTIVITIES_ALREADY_IN_ACTIVITY: "Already in Activity",
        EMBEDDED_ACTIVITIES_IS_PLAYING: "!!{username}!! is playing",
        EMBEDDED_ACTIVITIES_FEEDBACK_SURVEY:
          "Have feedback? [Take the survey]({surveyURL})",
        EMBEDDED_ACTIVITIES_USERNAME_AND_OTHERS:
          "!!{username}!! & {count, plural, =1 {# other} other {# others}}",
        EMBEDDED_ACTIVITIES_PLAYING_IN_GUILD: "Playing in !!{guildName}!!",
        EMBEDDED_ACTIVITIES_WATCHING_IN_GUILD: "Watching in !!{guildName}!!",
        EMBEDDED_ACTIVITIES_MAX_PARTICIPANTS: "Up to {count} participants",
        EMBEDDED_ACTIVITIES_ONE_TO_N_PARTICIPANTS: "1 - {count} participants",
        EMBEDDED_ACTIVITIES_ERROR_TITLE: "Error {code}",
        EMBEDDED_ACTIVITIES_NUM_PARTICIPANTS: "Participants - {numUsers}",
        EMBEDDED_ACTIVITIES_UNLIMITED_PARTICIPANTS: "Unlimited participants",
        EMBEDDED_ACTIVITIES_UNLIMITED_PARTICIPANTS_SHORT: "Unlimited",
        EMBEDDED_ACTIVITIES_LAUNCHING_ACTIVITY: "Launching activity",
        EMBEDDED_ACTIVITIES_UNKNOWN_ACTIVITY_NAME: "Unknown",
        EMBEDDED_ACTIVITIES_LAUNCH_FAILURE: "Failed to Launch Activity",
        EMBEDDED_ACTIVITIES_LAUNCH_FAIL_GENERIC: "Unable to launch activity",
        EMBEDDED_ACTIVITIES_LAUNCH_FAIL_ACCESS:
          "This server doesn't have access to the requested activity",
        EMBEDDED_ACTIVITIES_LAUNCH_FAIL_CONCURRENT:
          "This server has reached the limit of concurrent activities for the current boost level",
        EMBEDDED_ACTIVITIES_LAUNCH_FAIL_PREMIUM:
          "This server doesn't have a high enough boosting level for the requested activity",
        EMBEDDED_ACTIVITIES_LAUNCH_FAIL_AGE_GATE:
          "This Activity is age-restricted",
        EMBEDDED_ACTIVITY_CHANGE_CONFIRM_TITLE: "You sure?",
        EMBEDDED_ACTIVITY_CHANGE_ACTIVITY_CONFIRM_BODY:
          "Are you sure you want to disconnect from **!!{currentApplicationName}!!** in **!!{currentApplicationChannelName}!!**?",
        EMBEDDED_ACTIVITY_CURRENT_APPLICATION_DEFAULT: "an Activity",
        EMBEDDED_ACTIVITY_TARGET_APPLICATION_DEFAULT: "another Activity",
        EMBEDDED_ACTIVITY_CURRENT_APPLICATION_CHANNEL_DEFAULT:
          "its current channel",
        SPECTATE: "Spectate",
        EMBEDDED_ACTIVITIES_IN_VIDEO_CALL_MOBILE_PREVIEW_SUBTITLE_SHORT:
          "Coming soon to this OS",
        EMBEDDED_ACTIVITIES_MOBILE_ACTIVITY_PREVIEW_A11Y_LABEL:
          "A preview of {applicationName}",
        EMBEDDED_ACTIVITIES_CONCURRENT_ACTIVITIES_UPSELL_MODAL_TITLE:
          "Launch more activities at once by Boosting to Level {boostingTier}!",
        EMBEDDED_ACTIVITIES_CONCURRENT_ACTIVITIES_LIMITED_UPSELL_MODAL_BODY:
          "Take part in up to {targetTierConcurrentActivities} activities at once in one server by Boosting to Level {targetBoostTier}. Level {unlimitedConcurrentActivitiesBoostTier} unlocks unlimited concurrent activities!",
        EMBEDDED_ACTIVITIES_CONCURRENT_ACTIVITIES_UNLIMITED_UPSELL_MODAL_BODY:
          "Take part in unlimited activities at once in one server by Boosting to Level {unlimitedConcurrentActivitiesBoostTier}!",
        EMBEDDED_ACTIVITIES_FREE_PREVIEW_TOOLTIP:
          "{activity} is unlocked for a limited time!",
        EMBEDDED_ACTIVITIES_SHELF_TITLE: "Activities",
        EMBEDDED_ACTIVITIES_BOOSTING_BADGE_TOOLTIP:
          "Activities below require a LVL {tier} Boost",
        EMBEDDED_ACTIVITIES_MOBILE_ACTIVITIES_SOON_HEADER:
          "More activities coming soon to mobile",
        EMBEDDED_ACTIVITIES_MOBILE_ACTIVITIES_SOON_SUBHEADER:
          "All Activities are available on Desktop!",
        USE_EMBEDDED_ACTIVITIES: "Use Activities",
        EMBEDDED_ACTIVITIES_INVALID_PERMISSIONS:
          "You do not have permissions to use Activities in this channel.",
        EMBEDDED_ACTIVITIES_INVALID_CHANNEL:
          "You cannot launch Activities in this channel.",
        EMBEDDED_ACTIVITIES_ARE_YOU_SURE_WANT_TO_LEAVE:
          "Are you sure you want to leave?",
        EMBEDDED_ACTIVITIES_CAREFUL: "Careful...",
        EMBEDDED_ACTIVITIES_POP_OUT_WARNING:
          "If you pop out an Activity, it will refresh and you might lose your place. You sure you want to pop out?",
        EMBEDDED_ACTIVITIES_POP_IN_WARNING:
          "If you close this window, it will refresh and you might lose your place. You sure you want to close it?",
        EMBEDDED_ACTIVITIES_YEP: "Yep!",
        EMBEDDED_ACTIVITIES_NVM: "Never mind",
        EMBEDDED_ACTIVITIES_UNLOCK_ACTIVITIES:
          "Unlock {activity} and other great Activities by Boosting to Level {tier} or higher",
        ACTIVITY_HARDWARE_ACCELERATION_BETTER_TITLE:
          "Hardware Acceleration will make this better",
        ACTIVITY_HARDWARE_ACCELERATION_BETTER_BODY:
          "!!{applicationName}!! will run a lot better if hardware acceleration is turned on. Be aware that switching this setting will quit and re-launch Discord.",
        ACTIVITY_HARDWARE_ACCELERATION_TURN_IT_ON: "Turn it on!",
        ACTIVITY_HARDWARE_ACCELERATION_NO_THANKS: "No thanks",
        EMBEDDED_ACTIVITIES_SELECT_VOICE_CHANNEL: "Select Voice Channel",
        EMBEDDED_ACTIVITIES_LAUNCH: "Launch",
        EMBEDDED_ACTIVITIES_JOIN: "Join",
        EMBEDDED_ACTIVITIES_JOINED: "Joined",
        EMBEDDED_ACTIVITIES_ENDED: "Ended",
        EMBEDDED_ACTIVITIES_RETURN_TO_ACTIVITY: "Return to Activity",
        EMBEDDED_ACTIVITIES_PEOPLE_ARE_IN_AN_ACTIVITY:
          "{n, plural, one {1 person is} other {{n} people are}} in an Activity",
        EMBEDDED_ACTIVITIES_SUPPORTED_PLATFORMS_MOBILE: "Mobile",
        EMBEDDED_ACTIVITIES_SEND_ACTIVITY_INVITE: "Send Activity invite to",
        EMBEDDED_ACTIVITIES_FALLBACK_CHANNEL_NAME: "this channel",
        EMBEDDED_ACTIVITIES_SHELF_CHARACTERS_ALT_TEXT:
          "characters playing a game",
        EMBEDDED_ACTIVITIES_UNLOCK_ACTIVITIES_BOOSTING:
          "Unlock {activityName} with Boosting and get:",
        EMBEDDED_ACTIVITIES_UNLOCK_ACTIVITIES_NITRO:
          "Unlock {activityName} with Nitro and get:",
        EMBEDDED_ACTIVITIES_SHELF_SUBTITLE:
          "Start a casual game or watch party instantly",
        EMBEDDED_ACTIVITIES_DEVELOPER_SHELF_SUBTITLE:
          'You are using the "Developer Activity Shelf". So fancy!',
        EMBEDDED_ACTIVITIES_NITRO_SUBSCRIBE_CTA:
          "Subscribe to Nitro to access more activities!",
        EMBEDDED_ACTIVITIES_BOOST_SUBSCRIBE_CTA:
          "Boost this server to access more activities!",
        EMBEDDED_ACTIVITIES_NITRO_PERKS_BOOSTS:
          "2 Server Boosts for instant Level 1 perks",
        EMBEDDED_ACTIVITIES_NITRO_PERKS_BACKGROUNDS: "Custom video backgrounds",
        EMBEDDED_ACTIVITIES_NITRO_PERKS_STREAMING:
          "Source-quality Go Live streaming",
        EMBEDDED_ACTIVITIES_ALT_WUMPUS_ROCKET: "Wumpus riding a rocket",
        EMBEDDED_ACTIVITIES_ALT_TREASURE_CHEST:
          "A character opening a treasure chest",
        EMBEDDED_ACTIVITIES_END_ACTIVITY: "End {applicationName} for everyone?",
        EMBEDDED_ACTIVITIES_NITRO_END_WARNING:
          "As the only Nitro subscriber, the activity will end for everyone else if you leave.",
        EMBEDDED_ACTIVITIES_THANKS_FOR_TRYING: "Thanks for trying Activities!",
        EMBEDDED_ACTIVITIES_CURRENTLY_TESTING_NITRO_ACTIVITIES:
          "Hey, we had a great time and hope you did too. Activities are in the testing phase, but we hope to show you more soon.",
        EMBEDDED_ACTIVITIES_KEEP_THE_FUN_GOING_TITLE: "Keep the fun going",
        EMBEDDED_ACTIVITIES_KEEP_THE_FUN_GOING_SUBTITLE:
          "This activity has ended, but you can subscribe to Nitro to start your own activities and keep the fun going!",
        EMBEDDED_ACTIVITIES_NO_ELIGIBLE_HOST_MODAL: "No eligible host modal",
        EMBEDDED_ACTIVITIES_NO_ELIGIBLE_HOST_UPSELL_MODAL:
          "No eligible host upsell modal",
        EMBEDDED_ACTIVITIES_LAST_HOST_LEAVING_MODAL: "Last host leaving modal",
        EMBEDDED_ACTIVITIES_TRY_IT_OUT: "Try it out",
        EMBEDDED_ACTIVITIES_VOICE_CONTROLS_BUTTON_A11Y_LABEL:
          "Show Voice Controls",
        EMBEDDED_ACTIVITIES_OPEN_ACTIVITY_SHELF: "Open Activity Shelf",
        EMBEDDED_ACTIVITIES_LEAVE_ACTIVITY_A11Y_LABEL: "Leave Activity",
        EMBEDDED_ACTIVITIES_NOT_AVAILABLE_ON_OS:
          "Activities are not available on this OS at this time",
        EMBEDDED_ACTIVITIES_APPLICATION_UNSUPPORTED_OS:
          "This Activity is not currently available on this OS",
        EMBEDDED_ACTIVITIES_THIS_ACTIVITY: "this Activity",
        EMBEDDED_ACTIVITIES_SUBSCRIBE_CTA: "SUBSCRIBE AND PLAY MORE",
        EMBEDDED_ACTIVITIES_FREE_FOR_EVERYONE_BANNER_TEXT:
          "Activities are now free",
        EMBEDDED_ACTIVITIES_SUBSCRIBE: "Subscribe",
        EMBEDDED_ACTIVITIES_VOICE_CONTROLS_TOGGLE_NUX_HEADER:
          "Tap to view voice controls",
        EMBEDDED_ACTIVITIES_VOICE_CONTROLS_TOGGLE_NUX_BODY:
          "You can also drag this button around the screen and position it however you like",
        EMBEDDED_ACTIVITIES_UNLOCK_WITH_NITRO: "Unlock with Nitro",
        EMBEDDED_ACTIVITIES_SUBSCRIBE_TO_NITRO_AND_GET:
          "Subscribe to Nitro and get:",
        EMBEDDED_ACTIVITIES_DONT_ASK_ME_THIS_AGAIN: "Don't ask me this again",
        EMBEDDED_ACTIVITIES_ACTIVITY_ENDED: "This activity has ended",
        EMBEDDED_ACTIVITIES_ROCKET_BUTTON_A11Y_LABEL: "Start an Activity",
        EMBEDDED_ACTIVITIES_PREMIUM_UPSELL_BANNER_A11Y_LABEL:
          "Subscribe and play more",
        EMBEDDED_ACTIVITIES_ACTIVITIES_OPEN_TO_EVERYONE_BANNER_A11Y_LABEL:
          "Learn more about how Activities are now free",
        EMBEDDED_ACTIVITIES_NITRO_BANNER_HEADER: "More Ways to Hang",
        EMBEDDED_ACTIVITIES_NITRO_BANNER_IMG_ALT:
          "Two characters playing a board game",
        EMBEDDED_ACTIVITIES_PREMIUM_TIER_EXTRA_BOOSTS:
          "{nBoostsWithNitro} Server Boosts and {boostDiscount} off extra Boosts",
        EMBEDDED_ACTIVITIES_PREMIUM_TIER_UPLOAD_SIZE:
          "Upload file size increase to {premiumMaxSize}",
        EMBEDDED_ACTIVITIES_PREMIUM_TIER_CUSTOM_EMOJI: "Custom Emoji",
        EMBEDDED_ACTIVITIES_AVAILABLE_NOW: "Available Now!",
        EMBEDDED_ACTIVITY_NOTICE_BASH_OUT_DESCRIPTION:
          "Bash Out in partnership with PlayCo.",
        EMBEDDED_ACTIVITIES_VIDEO_DISABLED_FOR_THERMAL_STATE:
          "Pausing video for better performance",
        EMBEDDED_ACTIVITIES_SHOW_ACTIVITY_DEBUG_OVERLAY:
          "Show Activity Debug Overlay",
        EMBEDDED_ACTIVITIES_AUTO_SUGGEST_ACTIVITIES_TITLE:
          "Suggested Activities",
        EMBEDDED_ACTIVITIES_AUTO_SUGGEST_SEE_ALL: "See All",
        EMBEDDED_ACTIVITIES_MINI_SHELF_TITLE: "Activities Mini Shelf",
        EMBEDDED_ACTIVITIES_USE_ACTIVITY_URL_OVERRIDE:
          "Use Activity URL Override",
        EMBEDDED_ACTIVITIES_ACTIVITY_URL_OVERRIDE: "Activity URL Override",
        EMBEDDED_ACTIVITIES_INVALID_ACTIVITY_URL_OVERRIDE_ERROR:
          "Invalid Activity URL Override",
        EMBEDDED_ACTIVITIES_DEVELOPER_ACTIVITY_SHELF_FETCH_ERROR:
          "Error Fetching Developer Activity Shelf",
        EMBEDDED_ACTIVITIES_CONFIGURE_DEVELOPER_ACTIVITY_SHELF:
          "Configure Developer Activity Shelf",
        EMBEDDED_ACTIVITIES_SEARCH_SHELF_ITEMS: "Search Shelf Items",
        EMBEDDED_ACTIVITIES_DEVELOPER_ACTIVITY_SHELF_FILTER_ERROR:
          'No activities found with the characters "{filter}"',
        EMBEDDED_ACTIVITIES_ACTIVITY_INFO_TILE_TITLE:
          "Get the fun started with Activities in voice!",
        EMBEDDED_ACTIVITIES_VC_TILE_ENTRY_POINT_INVITE:
          "You're the only one here. Invite a friend to start chatting.\nChoose an Activity to play, watch, or collaborate together.",
        EMBEDDED_ACTIVITIES_ACTIVITY_ENTRY_POINT_TILE_CHOOSE_AN_ACTIVITY:
          "Choose an Activity",
        EMBEDDED_ACTIVITIES_VC_TILE_ENTRY_POINT_TITLE:
          "Looking for something to do?\nStart a game or video playlist instantly.",
        EMBEDDED_ACTIVITIES_AGE_GATED_TITLE:
          "You’re about to use an age-restricted activity",
        EMBEDDED_ACTIVITIES_AGE_GATED_DESCRIPTION:
          "Heads up, {applicationName} is only for adult players. Please play responsibly.",
        EMBEDDED_ACTIVITIES_IOS_KEYBOARD_RESIZES_VIEW:
          "iOS Keyboard Resizes View",
        EMBEDDED_ACTIVITIES_RESUME_VIDEO: "Resume Video",
        EMBEDDED_ACTIVITIES_RESUME_VIDEO_EXPLANATION:
          "Your camera and incoming video streams have been paused for better device performance. If you resume video, you may experience lag or voice distortion.",
        EMBEDDED_ACTIVITIES_DISMISS_ACTIVITY_MESSAGE:
          "Dismiss message for joining {applicationName}",
        EMBEDDED_ACTIVITIES_DM_TOOLTIP_HEADER:
          "Activities are now available in DMs",
        EMBEDDED_ACTIVITIES_DM_TOOLTIP_BODY:
          "Join a voice call > press the rocketship > start a casual game or watch party with friends.",
        EMBEDDED_ACTIVITIES_DM_TOOLTIP_HEADER: "Activities in DMs",
        EMBEDDED_ACTIVITIES_DM_TOOLTIP_BODY:
          "Start a casual game or watch party with your closest friends!",
        EMBEDDED_ACTIVITIES_ACTIVITY_TAB_TITLE: "Discord's Birthday",
        EMBEDDED_ACTIVITIES_BIRTHDAY_ACTIVITIES: "Discord's 8th Birthday Party",
        EMBEDDED_ACTIVITIES_BIRTHDAY_ACTIVITIES_HERO_ALT:
          "Discord's 8th birthday. Activities are free for all thru June 15th",
        EMBEDDED_ACTIVITIES_MINI_SHELF_GAME_NIGHT_POSTER_ALT:
          "Wumpus and friends playing games on their phones. Game Night. April 7th",
        EMBEDDED_ACTIVITIES_GAME_NIGHT: "Game Night",
        EMBEDDED_ACTIVITIES_KRUNKER_STRIKE_POSTER_ALT: "Krunker Strike",
        EMBEDDED_ACTIVITIES_COLONIST_POSTER_ALT: "Colonist",
        EMBEDDED_ACTIVITIES_RESOLVING_ACTIVITY: "Resolving Activity",
        EMBEDDED_ACTIVITIES_EMBED_ENDED: "Activity has ended.",
        EMBEDDED_ACTIVITIES_EMBED_START: "Start a new one?",
        EMBEDDED_ACTIVITIES_EMBED_TITLE_INVITED_TO_JOIN:
          "You've been invited to join",
        EMBEDDED_ACTIVITIES_INVITE_TITLE_TEXT: "You've been invited to join",
        EMBEDDED_ACTIVITIES_INVITE_SUBTITLE_TEXT:
          "**!!{channelName}!!** in **!!{guildName}!!**",
        EMBEDDED_ACTIVITIES_INVITE_NO_PARTICIPANTS_TEXT_WITH_NEWLINE:
          "Activity has ended.\nStart a new one?",
        EMBEDDED_ACTIVITIES_LAUNCH_ACTIVITY_IN_VOICE_CHANNEL:
          "Launch {activityName} in a voice channel",
        EMBEDDED_ACTIVITIES_START_ACTIVITY: "Start {activityName}",
        EMBEDDED_ACTIVITIES_GUILD_LABEL: "Server",
        EMBEDDED_ACTIVITIES_CHANNEL_LABEL: "Channel",
        EMBEDDED_ACTIVITIES_SELECT_GUILD: "Select Server",
        EMBEDDED_ACTIVITIES_SELECT_CHANNEL: "Select Channel",
        EMBEDDED_ACTIVITIES_N_USERS_PLAYED:
          "Over {nUsers} people have played this activity",
        EMBEDDED_ACTIVITIES_GAMEPLAY_ALT:
          "Screen capture of gameplay from {activityName}",
        EMBEDDED_ACTIVITIES_WHATS_NEW_DESCRIPTION:
          "Check back here weekly for surprises throughout the month!",
        EMBEDDED_ACTIVITIES_EXPLORE_ACTIVITIES: "Explore Activities",
        EMBEDDED_ACTIVITIES_EXPLORE_ACTIVITIES_SUBHEADER:
          "Click an activity to learn more and share with your friends!",
        EMBEDDED_ACTIVITIES_SEE_MORE_ACTIVITIES: "See more activities",
        EMBEDDED_ACTIVITIES_SEE_FEWER_ACTIVITIES: "See fewer activities",
        EMBEDDED_ACTIVITIES_HOW_YOU_CAN_CELEBRATE_WITH_US:
          "Fun ways to celebrate with us",
        EMBEDDED_ACTIVITIES_EXCLUSIVE_BIRTHDAY_MERCH: "DISXCORE Merch Launch",
        EMBEDDED_ACTIVITIES_VISIT_OUR_MERCH_STORE:
          "Head over to [discordmerch.com]({merchStoreLink}) to shop while stock lasts!",
        EMBEDDED_ACTIVITIES_MERCH_STORE_ALT:
          "Discord-themed merch including a black collared shirt, a white long-sleeve shirt, a backpack, and a Wumpus Pin",
        EMBEDDED_ACTIVITIES_SHARE_THE_GIFT_OF_NITRO: "Share Nitro with friends",
        EMBEDDED_ACTIVITIES_SHARE_THREE_TRIALS:
          "All Nitro members can share 2 weeks of free Nitro with 3 friends. [Here's how]({nitroLink}).",
        EMBEDDED_ACTIVITIES_SHARE_NITRO_TRIAL_ALT: "Discord Nitro 2-week trial",
        EMBEDDED_ACTIVITIES_WEEKLY_DROPS_TILE_TITLE: "Weekly Announcements",
        EMBEDDED_ACTIVITIES_WEEKLY_DROPS_TILE_DESCRIPTION:
          "Keep the party going! Come back each week to flip a new card and discover more ways to celebrate.",
        EMBEDDED_ACTIVITIES_WEEKLY_DROPS_TILE_IMG_ALT:
          "Wumpus surrounded by confetti",
        EMBEDDED_ACTIVITIES_WHATS_NEW_GDM_TILE_TITLE:
          "Activities are now in DMs",
        EMBEDDED_ACTIVITIES_WHATS_NEW_GDM_TILE_DESCRIPTION:
          "Activities have entered the chat. Now you can launch Activities in Voice in DMs and group DMs.",
        EMBEDDED_ACTIVITIES_WHATS_NEW_GDM_TILE_IMG_ALT:
          "A neon sci-fi image with a rocket on it",
        EMBEDDED_ACTIVITIES_WHATS_NEW_PUTT_PARTY_TILE_TITLE:
          "Putt Party Paradise",
        EMBEDDED_ACTIVITIES_WHATS_NEW_PUTT_PARTY_TILE_DESCRIPTION:
          "Try our updated mini-golf game featuring more levels, extra power-ups and a new tournament mode!",
        EMBEDDED_ACTIVITIES_WHATS_NEW_PUTT_PARTY_TILE_IMG_ALT:
          "Putt Party Paradise Update",
        EMBEDDED_ACTIVITIES_WHATS_NEW_JAMSPACE_TILE_TITLE:
          "Introducing Jamspace",
        EMBEDDED_ACTIVITIES_WHATS_NEW_JAMSPACE_TILE_DESCRIPTION:
          "Create together with friends in this shared canvas. It's not what you make, but the fun of making it!",
        EMBEDDED_ACTIVITIES_WHATS_NEW_JAMSPACE_TILE_IMG_ALT: "Discord jamspace",
        EMBEDDED_ACTIVITIES_WHATS_NEW_POKER_TILE_TITLE: "Poker Night Update",
        EMBEDDED_ACTIVITIES_WHATS_NEW_POKER_TILE_DESCRIPTION:
          "Enjoy new stickers, emotes, cardbacks and more. Head to the Poker Night store to claim some for free!",
        EMBEDDED_ACTIVITIES_WHATS_NEW_POKER_TILE_IMG_ALT: "Poker Night",
        EMBEDDED_ACTIVITIES_SHARE_EMPTY_LOGS_ERROR_MESSAGE:
          "Unable to share empty logs",
        EMBEDDED_ACTIVITIES_BIRTHDAY_HERO_TEXT_WITH_2_LINKS:
          "To celebrate [Discord's birthday]({linkToBdayBlogPost}), everyone is invited to try out Activities. Look out for weekly surprises and Nitro members can join the fun with $[special Nitro perks](linkToSurprises) all month long!",
        EMBEDDED_ACTIVITIES_NUMBER_OF_PLAYERS: "{nPlayers} players",
        EMBEDDED_ACTIVITIES_NUMBER_OF_MINUTES: "{nMinutes}+ min",
        EMBEDDED_ACTIVITIES_START_OR_SHARE:
          "Start an Activity or share it with your friends!",
        EMBEDDED_ACTIVITIES_CELEBRATE_TOWN_HALL_TITLE: "Party with us!",
        EMBEDDED_ACTIVITIES_CELEBRATE_TOWN_HALL_DESCRIPTION:
          "Join us in [Discord Town Hall](clickHandler) for fun birthday events all month long.",
        EMBEDDED_ACTIVITIES_CELEBRATE_TOWN_HALL_IMG_ALT:
          "Town Hall server banner",
        EMBEDDED_ACTIVITIES_SHARE_ACTIVITY_WITH: "Share {activityName} with",
        EMBEDDED_ACTIVITIES_BALLOONS: "Balloons",
        EMBEDDED_ACTIVITIES_BALLOON: "Balloon",
        EMBEDDED_ACTIVITIES_DISCORD_CHARACTER_AVATAR:
          "Discord character avatar",
        EMBEDDED_ACTIVITIES_DM_START_CONFIRMATION_TEXT:
          "This action will start a call with your friends in this DM.",
        EMBEDDED_ACTIVITIES_BALLOON_ARIA_DESCRIPTION: "Click to pop",
        EMBEDDED_ACTIVITIES_REVEAL_THIS_WEEKS_DROP:
          "Reveal the {revealDate} drop",
        EMBEDDED_ACTIVITIES_CLICK_TO_REVEAL_DATE: "Drops on {revealDate}",
        EMBEDDED_ACTIVITIES_PLAYING_CARD_ALT: "Playing card",
        EMBEDDED_ACTIVITIES_BIRTHDAY_TAB_KIT_BASH_1:
          "Discord Logo inside a weird sci-fi circle with a 23 in it",
        EMBEDDED_ACTIVITIES_BIRTHDAY_TAB_KIT_BASH_2: "Wireframe globe",
        EMBEDDED_ACTIVITIES_BIRTHDAY_TAB_KIT_BASH_3: "Wireframe Wumpus",
        EMBEDDED_ACTIVITIES_NITRO_ICON_ALT: "Nitro Icon",
        EMBEDDED_ACTIVITIES_OPEN_BIRTHDAY_SURPRISE: "Open Birthday Surprise",
        EMBEDDED_ACTIVITIES_JOIN_ACTIVITY_NAME: "Join {name}",
        EMBEDDED_ACTIVITIES_SHARE_MOMENT_HEADING: "Share with your friends",
        EMBEDDED_ACTIVITIES_SHARE_LIMIT_WARNING:
          "You can only share up to {maxShares} times",
        EMBEDDED_ACTIVITIES_SHARE_MOMENT_FROM_APP:
          "Shared from {applicationName}",
        EMBEDDED_ACTIVITIES_WUMPUS_PEEKING_ALT: "Wumpus peeking over a button",
        EMBEDDED_ACTIVITIES_FEELING_LUCKY_TITLE: "Feeling lucky?",
        EMBEDDED_ACTIVITIES_FEELING_LUCKY_DESCRIPTION:
          "Learn more about a random activity!",
        EMBEDDED_ACTIVITIES_BIRTHDAY_KIT_BASH_ALT: "Neon disxcore themed art",
        EMBEDDED_ACTIVITIES_HAPPENING_NOW_TITLE: "Happening Now",
        EMBEDDED_ACTIVITIES_HAPPENING_NOW_DESCRIPTION:
          "Looking for an activity? Jump in!",
        EMBEDDED_ACTIVITIES_HAVE_PLAYED_ONE_KNOWN:
          "**!!{username1}!!** has played",
        EMBEDDED_ACTIVITIES_HAVE_PLAYED_ONE_KNOWN_AND_MORE:
          "**!!{username1}!!** and {extras, plural, =1 {{extras, number} other} other {{extras, number} others}} have played",
        EMBEDDED_ACTIVITIES_BE_THE_FIRST_OF_YOUR_FRIENDS_TO_PLAY:
          "Be the first of your friends to play!",
        EMBEDDED_ACTIVITIES_FREE_FOREVER_TITLE:
          "ACTIVITIES! ARE STAYING! FREE!!!!",
        EMBEDDED_ACTIVITIES_FREE_FOREVER_DESCRIPTION:
          "Best birthday ever! We've had way too much fun to let this party end. So from now on, Activities are available to everyone on Discord. EVERYONE!!!",
        EMBEDDED_ACTIVITIES_STAYING_FREE_POSTER_ALT:
          "Activities are staying free for all",
        EMBEDDED_ACTIVITIES_IAP_NON_REFUNDABLE:
          "Hey! **This purchase is non-refundable.** This purchase is being offered to you by the developer of this Activity and can be accessed and used only when you’re in this Activity.",
        EMBEDDED_ACTIVITIES_IAP_NON_REFUNDABLE_SUBSCRIPTION_MONTHLY:
          "Hey! This purchase is for a recurring subscription, which which means that we'll charge you today and continue to charge you monthly until you cancel. You may cancel anytime under User Settings > Subscriptions, and previous charges won’t be refunded unless required by law. This purchase is being offered to you by the developer of this Activity and can be accessed and used only when you’re in this Activity.",
        EMBEDDED_ACTIVITIES_IAP_NON_REFUNDABLE_SUBSCRIPTION_MULTI_MONTH:
          "Hey! This purchase is for a recurring subscription, which which means that we'll charge you today and continue to charge you every {intervalCount} months until you cancel. You may cancel anytime under User Settings > Subscriptions, and previous charges won’t be refunded unless required by law. This purchase is being offered to you by the developer of this Activity and can be accessed and used only when you’re in this Activity.",
        EMBEDDED_ACTIVITIES_IAP_NON_REFUNDABLE_SUBSCRIPTION_YEARLY:
          "Hey! This purchase is for a recurring subscription, which which means that we'll charge you today and continue to charge you monthly until you cancel. You may cancel anytime under User Settings > Subscriptions, and previous charges won’t be refunded unless required by law. This purchase is being offered to you by the developer of this Activity and can be accessed and used only when you’re in this Activity.",
        EMBEDDED_ACTIVITIES_IAP_NON_REFUNDABLE_SUBSCRIPTION_RATE_AND_RENEWAL:
          "Hey! This purchase is for a recurring subscription, which will renew for **{rate}** on **{renewalDate, date, medium}**. You may cancel anytime under User Settings > Subscriptions, and previous charges won’t be refunded unless required by law. This purchase is being offered to you by the developer of this Activity and can be accessed and used only when you’re in this Activity.",
        EMBEDDED_ACTIVITIES_MINIMIZE_A11Y_LABEL: "Minimize activity",
        EMBEDDED_ACTIVITIES_EXPAND_A11Y_LABEL: "Expand activity",
        EMBEDDED_ACTIVITIES_DEVELOPER_ACTIVITY: "In Development",
        EMBEDDED_ACTIVITIES_INTERACTION_EMBED_ENDED: "Activity has ended.",
        EMBEDDED_ACTIVITIES_INTERACTION_EMBED_NO_PRESENCE:
          "Activity has started.",
        EMBEDDED_ACTIVITIES_LAUNCH_FAIL_GUILD_SIZE:
          "You cannot launch this activity in a server with more than 25 members",
        EMBEDDED_ACTIVITIES_INSTANCE_EMBED_ENDED:
          "Activity ended. Start a new one?",
        EMBEDDED_ACTIVITIES_INSTANCE_EMBED_NO_PRESENCE: "Activity started",
        EMBEDDED_ACTIVITIES_INSTANCE_EMBED_NO_VOICE_PERMISSION:
          "You do not have permissions to join this Voice Channel.",
        EMBEDDED_ACTIVITIES_INSTANCE_EMBED_INVALID_CHANNEL:
          "You cannot join Activities in this channel.",
        APPLICATION_COMMAND_PRIMARY_ENTRY_POINT_USED:
          "$[](userHook) started an activity",
        APPLICATION_COMMAND_PRIMARY_ENTRY_POINT_USED_MOBILE:
          "[!!{username}!!](usernameOnClick) started an activity",
        APPLICATION_COMMAND_PRIMARY_ENTRY_POINT_USED_NOTIFICATION:
          "{username} started an activity",
        KRUNKER_STRIKE_COACHMARK_TITLE: "Updated! Krunker Strike FRVR",
        KRUNKER_STRIKE_COACHMARK_DESCRIPTION:
          "Squad up with friends or other players around the world and battle your way to victory in this first person shooter game.",
        KRUNKER_STRIKE_COACHMARK_BUTTON_CANCEL: "Maybe later",
        KRUNKER_STRIKE_COACHMARK_BUTTON_ACCEPT: "Try it out",
        ACTIVITY_REPORT_POST_ACTIVITY_HEADER: "How'd !!{applicationName}!! go?",
        ACTIVITY_REPORT_POST_ACTIVITY_PROBLEM_TITLE:
          "What could have gone better?",
        ACTIVITY_REPORTED_POSITIVE:
          "Thanks for sharing! Feedback like yours helps us improve Activities.",
        ACTIVITY_REPORTED_BODY:
          "Thanks for reporting your issue! Feedback like yours helps us improve Activities.",
        ACTIVITY_REPORT_ACTIVITY_BODY: "Tell us about your activity experience",
        ACTIVITY_REPORT_ACTIVITY_END_FAILED_LOAD:
          "Activity didn't load properly",
        ACTIVITY_REPORT_ACTIVITY_FAILED_LOAD: "Activity not loading properly",
        ACTIVITY_REPORT_ACTIVITY_END_LAGGING:
          "Activity was lagging or freezing",
        ACTIVITY_REPORT_ACTIVITY_LAGGING: "Activity is lagging or freezing",
        ACTIVITY_REPORT_ACTIVITY_END_CONFUSING:
          "Activity controls were confusing",
        ACTIVITY_REPORT_ACTIVITY_CONFUSING: "Activity controls are confusing",
        ACTIVITY_REPORT_ACTIVITY_END_NOT_FUN: "Activity was not fun",
        ACTIVITY_REPORT_ACTIVITY_NOT_FUN: "Activity is not fun",
        OTHER: "Other",
        POMELO_ADD_FRIEND_ERROR:
          "Hm, didn’t work. Double check that the username is correct.",
        POMELO_ADD_FRIEND_DESCRIPTION:
          "You can add friends with their Discord username.",
        POMELO_ADD_FRIEND_PLACEHOLDER: "Enter a username",
        POMELO_ACTION_NEEDED: "**Action needed**: Update your username.",
        POMELO_ACTION_NEEDED_FORCE:
          "**Action needed**: Update your username. Starting {date}, Discord will assign unique usernames to users who have not updated their usernames.",
        POMELO_ACTION_LABEL: "Update Your Username",
        POMELO_UPDATE_DISABLED_MESSAGE:
          "You need to verify your email or add a phone number to change your username.",
        POMELO_EXISTING_FLOW_PROMPT_TITLE: "Update your username, {n}",
        POMELO_EXISTING_FLOW_PROMPT_BODY_1:
          "We are asking everyone to update to unique usernames from discriminators (username**#0000**). You can update yours now.",
        POMELO_EXISTING_FLOW_PROMPT_BODY_2:
          "[Why are usernames changing?]({helpdeskArticle})",
        POMELO_EXISTING_FLOW_PROMPT_BODY_3:
          "You can always change this again in User Settings.",
        POMELO_EXISTING_FLOW_PROMPT_ITEM_1:
          "**Unique usernames** are easier to remember and share with friends.",
        POMELO_EXISTING_FLOW_PROMPT_ITEM_2:
          "You can also choose a **display name** to control how you appear across Discord.",
        UNIQUE_USERNAME_EXISTING_FLOW_PROMPT_ITEM_3:
          "{username} will be memorialized as a badge on your profile. You can hide this at any time.",
        POMELO_EXISTING_FLOW_PROMPT_SKIP_CTA: "I’ll do this later",
        POMELO_EXISTING_FLOW_STEP_1_TITLE: "What should we call you?",
        POMELO_EXISTING_FLOW_STEP_1_SUBTITLE:
          "This is how others see you. You can use special characters, spaces, emoji, whatever.",
        POMELO_EXISTING_FLOW_STEP_1_ERROR_INVALID:
          "You can use emoji and any symbol or character except @ or #.",
        POMELO_EXISTING_FLOW_STEP_2_TITLE: "What’s your username?",
        POMELO_EXISTING_FLOW_STEP_2_SUBTITLE:
          "This will help friends add you. Keep it simple with numbers, letters, periods and underscores.",
        POMELO_EXISTING_FLOW_AVAILABLE: "Username is available. Nice!",
        POMELO_EXISTING_FLOW_ERROR_INVALID:
          "Please only use numbers, letters, underscores _ , or periods.",
        POMELO_EXISTING_FLOW_ERROR_VERIFY:
          "Please verify your email and try again.",
        POMELO_EXISTING_FLOW_ERROR_GENERIC: "An error has occurred.",
        POMELO_EXISTING_FLOW_ERROR_GENERIC_HELP:
          "If this happens repeatedly, [contact support](onClick).",
        POMELO_EXISTING_FLOW_ERROR_UNAVAILABLE:
          "Username is unavailable. Try adding numbers, letters, underscores _ , or periods.",
        POMELO_EXISTING_FLOW_ERROR_LIMIT:
          "This must be {minNum}-{maxNum} characters.",
        POMELO_EXISTING_FLOW_COMPLETION_TITLE: "You’re all set, {displayName}.",
        POMELO_EXISTING_FLOW_COMPLETION_SUBTITLE:
          "This is your profile. Looks fabulous.",
        POMELO_EXISTING_FLOW_REMINDER_TITLE:
          "Okay, we’ll remind you. Very soon.",
        POMELO_EXISTING_FLOW_REMINDER_BODY_1:
          "Claim the username you want today and make it easier for your friends to connect with you.",
        POMELO_EXISTING_FLOW_REMINDER_BODY_2:
          "You can always change it in [User Settings](onClick).",
        POMELO_EXISTING_FLOW_REMINDER_CTA: "I’ll update it now",
        POMELO_EXISTING_FLOW_FINAL_REMINDER_TITLE:
          "Update your username by {date}",
        POMELO_EXISTING_FLOW_FINAL_REMINDER_BODY_1:
          "You **must** update your username in order to use Discord after that date. Try not to procrastinate. <3",
        POMELO_REG_FLOW_TITLE: "Choose a name",
        POMELO_REG_FLOW_NAME_LABEL: "Display name",
        ACTION_NEEDED: "Action Needed",
        POMELO_VERIFY_EMAIL_BANNER:
          "You must verify your email in {days} days to keep your username.",
        POMELO_VERIFY_EMAIL_BANNER_ONE_DAY:
          "You must verify your email in 1 day to keep your username.",
        POMELO_EXISTING_FLOW_USER_SETTINGS:
          "You can always change this again in [User Settings](onClick).",
        POMELO_EXISTING_FLOW_ERROR_DOT_DOT:
          "Username cannot contain repeating dots.",
        POMELO_SUGGESTION_ORIGIN_NOTICE:
          "Suggested from your old username, {source}.",
        POMELO_FETCH_NEW_SUGGESTION:
          "[Show me another suggestion](onFetchSuggestion)",
        UNIQUE_USERNAME_TOGGLE_TITLE: "Legacy Username Badge",
        UNIQUE_USERNAME_TOGGLE_SUBTITLE: "Display {username} on your profile.",
        ORIGINALLY_KNOWN_AS: "Originally known as {legacyUsername}",
        POMELO_ACTION_LABEL_OCF: "Update your username",
        POMELO_EXISTING_FLOW_PROMPT_OCF:
          "We are asking everyone to update to unique usernames from discriminators (username**#0000**).",
        POMELO_SUGGESTIONS_OCF: "Recommended for you",
        POMELO_CHANGE_LATER_OCF: "You can always change this later.",
        POMELO_FETCH_OCF: "Checking if username is available",
        UU_REGISTER_DISPLAY_NAME_HEADER: "What's your name?",
        UU_REGISTER_DISPLAY_NAME_HINT:
          "You can use emoji and special characters.",
        UU_REGISTER_HEADER: "Next, create an account",
        UU_REGISTER_USERNAME_HINT:
          "Only use letters, numbers, underscores, and periods.",
        UU_REGISTER_PASSWORD_HINT: "Password must be 8 or more characters.",
        UU_REGISTER_AGE_GATE_HEADER: "And, how old are you?",
        UU_REGISTER_DISPLAY_NAME_ERROR: "Sorry, that name can't be used.",
        UU_REGISTER_SUGGESTION:
          "Here is a suggestion: [!!{suggestion}!!](nameOnClick)",
        UU_REGISTER_DISPLAY_NAME_HINT_2:
          "This is how others see you. You can use special characters and emoji.",
        UU_REGISTER_UNCLAIMED_HINT:
          "Your username is **!!{name}!!**, finish signing up so you can choose your own.",
        UU_FORCE_MIGRATION_EXISTING_FLOW_REMINDER_BODY_1:
          "Update your username by {date}",
        UU_FORCE_MIGRATION_EXISTING_FLOW_REMINDER_BODY_2:
          "Starting {date}, Discord will begin assigning unique usernames to users who have not updated their usernames.",
        ACTIVITIES_SHARE_LOGS: "Share Activity Logs",
        DEVELOPER_APPLICATION_TEST_MODE_ORIGIN_LABEL:
          "Select URL Origin Type (Embedded Apps Only)",
        DEVELOPER_APPLICATION_TEST_MODE_PORT_NUMBER_LABEL:
          "Localhost Port Number",
        DEVELOPER_APPLICATION_TEST_MODE_LOCALHOST_OPTION: "Localhost",
        DEVELOPER_APPLICATION_TEST_MODE_PROXY_OPTION: "Discord Proxy",
        DEVELOPER_APPLICATION_TEST_MODE_FULL_URL_OPTION: "Full URL",
        DEVELOPER_APPLICATION_TEST_MODE_FAILED_TO_AUTHORIZE_APP:
          "Failed to authorize app",
        DEVELOPER_APPLICATION_TEST_MODE_INVALID_URL: "Invalid URL",
        EMBEDDED_ACTIVITIES_MOBILE_NUX_HEADING: "NEW! Activities on Mobile",
        EMBEDDED_ACTIVITIES_MOBILE_NUX_BODY:
          "You now have access to Activities on mobile in Voice Channels!",
        EMBEDDED_ACTIVITIES_GAME_NIGHT_HEADING: "Activities are free today!",
        EMBEDDED_ACTIVITIES_GAME_NIGHT_BODY:
          "Play any Activity for free in Voice Channels until April 8th at 4AM PT.",
        EMBEDDED_ACTIVITY_NOTICE_TITLE: "NEW! Activities",
        EMBEDDED_ACTIVITY_NOTICE_NITRO_TITLE: "NEW! Activities in Nitro",
        EMBEDDED_ACTIVITY_NOTICE_HALLOWEEN_TITLE: "NEW! Haunted Sketch Heads",
        EMBEDDED_ACTIVITY_NOTICE_WTP_DESCRIPTION:
          "Play together for free in any Voice Channel. Unlock more Activities with Boosting!",
        EMBEDDED_ACTIVITY_NOTICE_NITRO_DESCRIPTION:
          "You now have access to Activities in Voice Channels!",
        EMBEDDED_ACTIVITY_NOTICE_LEARN_MORE_LINK_A11Y_LABEL:
          "Learn more about activities on Discord",
        EMBEDDED_ACTIVITY_NOTICE_HALLOWEEN_DESCRIPTION:
          "Try it for ghoulishly limited time.\nGot Nitro? Summon SpellCast.",
        NOTICE_EMBEDDED_APPLICATION_TEST_MODE:
          "Test mode is currently active for **!!{applicationName}!!**. Your application should appear as an option in the activities button menu.",
        EMBEDDED_ACTIVITY_GARTIC_PHONE_TITLE: "New Activity! Gartic Phone",
        EMBEDDED_ACTIVITY_GARTIC_PHONE_DESCRIPTION:
          "Try out a game where you draw and guess what you see with your friends. Free until March 29.",
        EMBEDDED_ACTIVITES_THERMAL_ALERT_HEADER: "Warning",
        VOICE_CHANNEL_EFFECTS_NOTICE_BETA_TAG: "(Desktop Beta)",
        VOICE_CHANNEL_EFFECTS_NOTICE_TITLE_2: "NEW! Voice channel reactions",
        VOICE_CHANNEL_EFFECTS_NOTICE_DESCRIPTION_2:
          "Whether you're watching a stream or just hanging with friends, express yourself without saying a word.",
        VOICE_CHANNEL_EFFECTS_SPARKLE_TOOLTIP: "React with emoji!",
        VOICE_CHANNEL_EFFECTS_TOGGLE_TOOLTIP_ENABLED: "Fun animations enabled",
        VOICE_CHANNEL_EFFECTS_TOGGLE_TOOLTIP_DISABLED: "Enable fun animations",
        VOICE_CHANNEL_EFFECTS_TOGGLE_TADA_ALT: "Party popper",
        VOICE_CHANNEL_EFFECTS_TOGGLE: "Nitro",
        VOICE_CHANNEL_EFFECTS_TOGGLE_UPSELL:
          "Enable more fun reactions with Nitro",
        VOICE_CHANNEL_EFFECTS_HOTBAR_TITLE: "Voice Channel Reactions Hotbar",
        VOICE_CHANNEL_EFFECTS_UPSELL_HEADER_2:
          "Get more reaction power with Nitro",
        VOICE_CHANNEL_EFFECTS_UPSELL_BODY_2:
          "React with custom emoji from any server and unlock exclusive animations [with Discord Nitro](onPressMore).",
        VOICE_CHANNEL_EFFECTS_UPSELL_CTA: "Subscribe",
        A11Y_ANNOUNCEMENT_VOICE_CHANNEL_EFFECTS_SINGLE:
          "{firstUsername} reacted {emojiNames}.",
        A11Y_ANNOUNCEMENT_VOICE_CHANNEL_EFFECTS_DOUBLE:
          "{firstUsername} and {secondUsername} reacted {emojiNames}.",
        A11Y_ANNOUNCEMENT_VOICE_CHANNEL_EFFECTS_MULTIPLE:
          "{firstUsername}, {secondUsername} and {count, plural, =1 {# other} other {# others}} reacted {emojiNames}.",
        ACTIVITIES_EXPERIMENT_SUNSET_HEADER: "Hang tight, Activities fans",
        ACTIVITIES_EXPERIMENT_SUNSET_BODY:
          "In the next few weeks, Activities will become unavailable as we make some improvements. Thanks for your patience!",
        ACTIVITIES_EXPERIMENT_SUNSET_ANCHOR: "Learn more here",
        ACTIVITIES_EARLY_USER_COACH_MARK_HEADER: "New Activities button!",
        ACTIVITIES_EARLY_USER_COACH_MARK_BODY:
          "We added this button for easier access. Activities will be available for testing for the next 3 months. Thanks for helping us, your server is awesome.",
        CHANNEL_LOCKED:
          "Your role does not have permission to access this channel.",
        CHANNEL_LOCKED_SHORT: "Channel Locked",
        CHANNELS_UNAVAILABLE_TITLE: "No Text Channels",
        CHANNELS_UNAVAILABLE_BODY:
          "You find yourself in a strange place. You don't have access to any text channels, or there are none in this server.",
        GUILD_UNAVAILABLE_HEADER: "Unavailable",
        GUILD_UNAVAILABLE_TITLE: "Looks like we’re having trouble connecting…",
        GUILD_UNAVAILABLE_BODY:
          "But no worries! Check back later to see if things smooth out.",
        UNABLE_TO_JOIN_CHANNEL_FULL: "This channel is full.",
        UNABLE_TO_JOIN_CHANNEL_FULL_MODAL_HEADER: "Channel is full",
        UNABLE_TO_JOIN_CHANNEL_FULL_MODAL_BODY:
          "Sorry, this channel has the max number of people!",
        INSTANT_INVITE: "Invite",
        INSTANT_INVITE_HIDDEN: "Hidden; Use copy button",
        EDIT_CHANNEL: "Edit Channel",
        LEAVE_SERVER_TITLE: "Leave '!!{name}!!'",
        LEAVE_SERVER_BODY:
          "\nAre you sure you want to leave **!!{name}!!**? You won't be able to rejoin this server unless you are re-invited.\n  ",
        LEAVE_SERVER: "Leave Server",
        VOICE_CHANNELS: "Voice Channels",
        VOICE_CHANNEL: "Voice Channel",
        VOICE_CHANNEL_LOCKED: "Voice Channel (Locked)",
        SERVER_SETTINGS: "Server Settings",
        SERVER_SETTINGS_UPDATED: "Server settings have been updated.",
        NOTIFICATION_SETTINGS: "Notification Settings",
        CHANNEL_ORDER_UPDATED: "Channel order updated.",
        GUILD_VERIFIED: "Verified",
        GUILD_PARTNERED: "Discord Partner",
        GUILD_VERIFIED_AND_PARTNERED: "Verified & Partnered",
        VOICE_CHANNEL_MUTED: "Muted",
        VOICE_CHANNEL_UNMUTED: "Unmuted",
        VOICE_CHANNEL_DEAFENED: "Deafened",
        VOICE_CHANNEL_UNDEAFENED: "Undeafened",
        VOICE_CHANNEL_LOCAL_MUTED: "Muted for me",
        VOICE_CHANNEL_MUTED_CUSTOM_JOIN_SOUND: "Join Without Entrance Sound",
        PREMIUM_GUILD_SUBSCRIPTION: "Boost",
        OPEN_CHAT: "Open Chat",
        INTERNAL_EMPLOYEE_ONLY: "Internal Employee (Staff)",
        FAVORITE_CHANNEL: "Add to Favorites",
        UNFAVORITE_CHANNEL: "Remove from Favorites",
        FAVORITE_DM: "Favorite DM",
        UNFAVORITE_DM: "Unfavorite DM",
        FAVORITE_GDM: "Favorite Group DM",
        UNFAVORITE_GDM: "Unfavorite Group DM",
        FAVORITES_EMPTY_TITLE: "Favorites",
        FAVORITES_EMPTY_BODY:
          'Welcome to your "favorite" new Discord feature! Add favorites by starring channels, voice chats, and DMs via their context menus.',
        FAVORITES_GUILD_NAME: "Favorites",
        FAVORITES_GO_TO_ORIGINAL_GUILD: "Go to original server",
        FAVORITES_SET_NICKNAME_DESCRIPTION:
          "This name will only appear in your favorites.",
        FAVORITE_ADDED: "Added to Favorites!",
        FAVORITES_RENAME_CATEGORY: "Rename Category",
        FAVORITES_ADD_A_CHANNEL: "Add a channel",
        AFK_SETTINGS: "Inactive Settings",
        NO_AFK_CHANNEL: "No Inactive Channel",
        FORM_LABEL_AFK_CHANNEL: "Inactive Channel",
        FORM_HELP_AFK_CHANNEL:
          "Automatically move members to this channel and mute them when they have been idle for longer than the\ninactive timeout. This does not affect browsers.",
        FORM_LABEL_AFK_TIMEOUT: "Inactive Timeout",
        NO_SYSTEM_CHANNEL: "No System Messages",
        FORM_LABEL_SYSTEM_CHANNEL: "System Messages Channel",
        FORM_LABEL_SYSTEM_CHANNEL_SETTINGS: "System Messages Settings",
        FORM_HELP_SYSTEM_CHANNEL:
          "This is the channel we send system event messages to. These can be turned off at any time.",
        FORM_HELP_SYSTEM_CHANNEL_JOIN_MESSAGES:
          "Send a random welcome message when someone joins this server.",
        FORM_HELP_SYSTEM_CHANNEL_JOIN_MESSAGE_REPLIES:
          "Prompt members to reply to welcome messages with a sticker.",
        FORM_HELP_SYSTEM_CHANNEL_PREMIUM_SUBSCRIPTION_MESSAGES:
          "Send a message when someone boosts this server.",
        FORM_HELP_SYSTEM_CHANNEL_GUILD_REMINDERS:
          "Send helpful tips for server setup.",
        FORM_LABEL_VERIFICATION_LEVEL: "Verification Level",
        FORM_LABEL_VERIFICATION_LEVEL_CHANGE: "Change Verification Level",
        FORM_HELP_VERIFICATION_LEVEL:
          "\nMembers of the server must meet the following criteria before they can send messages in text channels or initiate a\ndirect message conversation. If a member has an assigned role this does not apply.\n**We recommend setting a verification level for a Community Server.**\n",
        VERIFICATION_LEVEL_NONE: "None",
        VERIFICATION_LEVEL_NONE_CRITERIA: "Unrestricted",
        VERIFICATION_LEVEL_LOW: "Low",
        VERIFICATION_LEVEL_LOW_CRITERIA:
          "Must have a verified email on their Discord account.",
        VERIFICATION_LEVEL_MEDIUM: "Medium",
        VERIFICATION_LEVEL_MEDIUM_CRITERIA:
          "Must also be registered on Discord for longer than {min} minutes.",
        VERIFICATION_LEVEL_HIGH: "High",
        VERIFICATION_LEVEL_HIGH_CRITERIA:
          "Must also be a member of this server for longer than {min} minutes.",
        VERIFICATION_LEVEL_VERY_HIGH: "Highest",
        VERIFICATION_LEVEL_VERY_HIGH_CRITERIA:
          "Must have a verified phone on their Discord account.",
        FORM_LABEL_DEFAULT_NOTIFICATION_SETTINGS:
          "Default Notification Settings",
        FORM_HELP_DEFAULT_NOTIFICATION_SETTINGS_MOBILE:
          "\nThis will determine whether members who have not explicitly set their notification settings receive a notification for\nevery message sent in this server or not. We highly recommend setting this to only @mentions for a Community Server.\n",
        DELETE_SERVER_TITLE: "Delete '!!{name}!!'",
        DELETE_SERVER_BODY:
          "Are you sure you want to delete **!!{name}!!**? This action cannot be undone.",
        DELETE_SERVER: "Delete Server",
        DELETE_SERVER_ENTER_NAME: "Enter server name",
        DELETE_SERVER_INCORRECT_NAME:
          "You didn't enter the server name correctly",
        WIDGET: "Widget",
        BANS: "Bans",
        SECURITY: "Security",
        VANITY_URL: "Custom Invite Link",
        GUILD_MEMBERS_HEADER: "!!{guild}!! members",
        SETTINGS: "Settings",
        GUILD_PREMIUM: "Server Boost Status",
        USER_MANAGEMENT: "User Management",
        FORM_LABEL_EXPLICIT_CONTENT_FILTER: "Explicit Media Content Filter",
        FORM_LABEL_EXPLICIT_CONTENT_FILTER_CHANGE:
          "Change Explicit Content Filter Level",
        FORM_HELP_EXPLICIT_CONTENT_FILTER:
          "Automatically scan and delete media sent in this server that contains explicit content. Please choose how broadly the filter will apply to members in your server. **We recommend setting a filter for a Community Server.**\n",
        EXPLICIT_CONTENT_FILTER_DISABLED: "Don't scan any media content.",
        EXPLICIT_CONTENT_FILTER_DISABLED_DESCRIPTION:
          "My friends are nice most of the time.",
        EXPLICIT_CONTENT_FILTER_MEDIUM:
          "Scan media content from members without a role.",
        EXPLICIT_CONTENT_FILTER_MEDIUM_DESCRIPTION:
          "Recommended option for servers that use roles for trusted membership.",
        EXPLICIT_CONTENT_FILTER_HIGH: "Scan media content from all members.",
        EXPLICIT_CONTENT_FILTER_HIGH_DESCRIPTION:
          "Recommended option for when you want that squeaky clean shine.",
        EXPLICIT_CONTENT_FILTER_DISABLED_SHORT: "Disabled",
        EXPLICIT_CONTENT_FILTER_DISABLED_DESCRIPTION_SHORT:
          "Don't scan any media content. (I trust everyone)",
        EXPLICIT_CONTENT_FILTER_MEDIUM_SHORT: "Medium",
        EXPLICIT_CONTENT_FILTER_MEDIUM_DESCRIPTION_SHORT:
          "Scan media content from members without a role. (I trust members with roles)",
        EXPLICIT_CONTENT_FILTER_HIGH_SHORT: "High",
        EXPLICIT_CONTENT_FILTER_HIGH_DESCRIPTION_SHORT:
          "Scan media content from all members. (Recommended for squeaky clean servers)",
        FORM_LABEL_EXPLICIT_CONTENT_FILTER_V2: "Explicit image filter",
        SETTINGS_EXPLICIT_CONTENT_FILTER: "Explicit Image Filter",
        FORM_HELP_EXPLICIT_CONTENT_FILTER_V2:
          "Automatically block messages in this server that may contain explicit images in channels not marked as Age-restricted. Please choose how this filter will apply to members in your server. We recommend enabling this. [Learn more about this setting here.]({helpdeskArticle})",
        EXPLICIT_CONTENT_FILTER_DISABLED_V2: "Do not filter",
        EXPLICIT_CONTENT_FILTER_DISABLED_DESCRIPTION_V2:
          "Messages will not be filtered for explicit images.",
        EXPLICIT_CONTENT_FILTER_MEDIUM_V2:
          "Filter messages from server members without roles",
        EXPLICIT_CONTENT_FILTER_MEDIUM_DESCRIPTION_V2:
          "Messages from server members without a role will be filtered for explicit images.",
        EXPLICIT_CONTENT_FILTER_HIGH_V2: "Filter messages from all members",
        EXPLICIT_CONTENT_FILTER_HIGH_DESCRIPTION_V2:
          "All messages will be filtered for explicit images.",
        PUBLIC_GUILD_POLICY_TITLE: "Follow the rules",
        PUBLIC_GUILD_POLICY_ACCEPT: "I agree and understand",
        TOOLTIP_DISCOVERABLE_GUILD_FEATURE_DISABLED:
          "This is required for discoverable servers. Disable Discovery first to do this.",
        NUMBERS_ONLY: "{count, number}",
        COMMUNITY_GUIDELINES_AND_TYPES_OF_SPACES_POLICIES:
          "By setting your server as a Community Server, you agree that your server complies with our [Community Server Guidelines]({communityGuidelines}). Learn more about [Community Servers]({typesOfGuilds}).",
        ENABLE_COMMUNITY_MODAL_TITLE: "Let's set up your Community Server.",
        ENABLE_COMMUNITY_MODAL_STEP_1_TITLE: "Safety checks",
        ENABLE_COMMUNITY_MODAL_STEP_2_TITLE: "Setting up the basics",
        ENABLE_COMMUNITY_MODAL_STEP_3_TITLE: "Finishing touches",
        ENABLE_COMMUNITY_MODAL_STEP_1_HEADER: "Keep your community safe",
        ENABLE_COMMUNITY_MODAL_STEP_1_BODY:
          "To ensure user safety, Community Servers must have the following moderation settings enabled",
        ENABLE_COMMUNITY_MODAL_STEP_2_HEADER: "Set up the basics",
        ENABLE_COMMUNITY_MODAL_STEP_2_BODY:
          "Tell us which channel has your server rules and which channel we should send announcements to!",
        ENABLE_COMMUNITY_MODAL_STEP_3_HEADER: "One last step",
        ENABLE_COMMUNITY_MODAL_STEP_3_BODY:
          "You're almost there! Here are some suggestions to help create a better experience for your members.",
        ENABLE_COMMUNITY_MODAL_VERIFICATION_LEVEL_LABEL:
          "Verified email required",
        ENABLE_COMMUNITY_MODAL_CONTENT_FILTER_LABEL:
          "Scan messages sent by all members",
        ENABLE_COMMUNITY_MODAL_VERIFICATION_LEVEL_MET:
          "Your server already meets or exceeds the verification level requirement.",
        ENABLE_COMMUNITY_MODAL_CONTENT_FILTER_MET:
          "Your server already meets the media content filter requirement.",
        ENABLE_COMMUNITY_MODAL_VERIFICATION_LEVEL_HELP:
          "To minimize spam, members of the server must have a verified email before they can send messages. This does not apply to members with roles.",
        ENABLE_COMMUNITY_MODAL_DEFAULT_NOTIFICATIONS_LABEL:
          "Default notifications to Mentions Only $[info](infoHook)",
        ENABLE_COMMUNITY_MODAL_DEFAULT_NOTIFICATIONS_LABEL_MOBILE:
          "Default notifications to Mentions Only",
        ENABLE_COMMUNITY_MODAL_DEFAULT_NOTIFICATIONS_TOOLTIP:
          "Because Community Servers tend to have a lot of people talking at once, defaulting Server Notifications for members to Mentions Only can help reduce members leaving. Members can always override this option.",
        ENABLE_COMMUNITY_MODAL_EVERYONE_ROLE_PERMISSION_LABEL:
          "Remove moderation permissions from \n @everyone $[info](infoHook)",
        ENABLE_COMMUNITY_MODAL_EVERYONE_ROLE_PERMISSION_LABEL_MOBILE:
          "Remove manage permissions from **@everyone** role",
        ENABLE_COMMUNITY_MODAL_EVERYONE_ROLE_PERMISSION_TOOLTIP:
          "This will remove the following permissions from the @everyone role: Administrator, Manage Server, Manage Channels, Manage Roles, Kick Members, Ban Members, Manage Messages, and Mention @everyone, @here, and All Roles.",
        ENABLE_COMMUNITY_MODAL_REQUIREMENT_SATISFIED_TOOLTIP:
          "Nice, you did this already!",
        ENABLE_COMMUNITY_MODAL_STEP_HEADER: "Step {number} of {total}",
        COMMUNITY_POLICY_HELP:
          "By setting your server as a Community Server, you agree that your server complies with our [Community Server Guidelines]({helpdeskArticle}). Remember, all activity on Discord must abide by our [Community Guidelines](https://discord.com/guidelines).",
        ENABLE_COMMUNITY_BUTTON_TEXT: "Finish Setup",
        TOOLTIP_COMMUNITY_FEATURE_DISABLED:
          "This option is not available for Community Servers.",
        GUILD_SETTINGS_LABEL_AUDIT_LOG: "Audit Log",
        GUILD_SETTINGS_AUDIT_LOG_LOAD_MORE: "Load More",
        GUILD_SETTINGS_LABEL_AUDIT_LOG_EMPTY_TITLE: "No Logs Yet",
        GUILD_SETTINGS_LABEL_AUDIT_LOG_EMPTY_BODY:
          "Once moderators begin moderating, you can moderate the moderation here.",
        GUILD_SETTINGS_LABEL_AUDIT_LOG_ERROR_TITLE: "This is Awkward",
        GUILD_SETTINGS_LABEL_AUDIT_LOG_ERROR_BODY:
          "We broke something. Come back later.",
        UNKNOWN_INTEGRATION: "Unknown Integration",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_UPDATE:
          "$[**!!{user}!!**](userHook) made changes to $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TEXT_CREATE:
          "$[**!!{user}!!**](userHook) created a text channel $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_CATEGORY_CREATE:
          "$[**!!{user}!!**](userHook) created a category $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_VOICE_CREATE:
          "$[**!!{user}!!**](userHook) created a voice channel $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_STAGE_CREATE:
          "$[**!!{user}!!**](userHook) created a stage channel $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_UPDATE:
          "$[**!!{user}!!**](userHook) made changes to $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_DELETE:
          "$[**!!{user}!!**](userHook) removed $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_OVERWRITE_CREATE:
          "$[**!!{user}!!**](userHook) created channel overrides for $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_OVERWRITE_UPDATE:
          "$[**!!{user}!!**](userHook) updated channel overrides for $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_OVERWRITE_DELETE:
          "$[**!!{user}!!**](userHook) removed channel overrides for $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_KICK:
          "$[**!!{user}!!**](userHook) kicked $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_PRUNE:
          "$[**!!{user}!!**](userHook) pruned {count, plural, =1 {**a member**} other {**!!{count}!! members**}}",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_BAN_ADD:
          "$[**!!{user}!!**](userHook) banned $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_BAN_REMOVE:
          "$[**!!{user}!!**](userHook) removed the ban for $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_UPDATE:
          "$[**!!{user}!!**](userHook) updated $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_ROLE_UPDATE:
          "$[**!!{user}!!**](userHook) updated roles for $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_MOVE:
          "$[**!!{user}!!**](userHook) moved {count, plural, =1 {**a user**} other {**!!{count}!! users**}} to $[**!!{channel}!!**](channelHook)",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_DISCONNECT:
          "$[**!!{user}!!**](userHook) disconnected {count, plural, =1 {**a user**} other {**!!{count}!! users**}} from voice",
        GUILD_SETTINGS_AUDIT_LOG_BOT_ADD:
          "$[**!!{user}!!**](userHook) added $[**!!{target}!!**](targetHook) to the server",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_CREATE:
          "$[**!!{user}!!**](userHook) created the role $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_UPDATE:
          "$[**!!{user}!!**](userHook) updated the role $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_DELETE:
          "$[**!!{user}!!**](userHook) deleted the role $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_INVITE_CREATE:
          "$[**!!{user}!!**](userHook) created an invite $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_INVITE_UPDATE:
          "$[**!!{user}!!**](userHook) updated an invite $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_INVITE_DELETE:
          "$[**!!{user}!!**](userHook) deleted an invite $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_CREATE:
          "$[**!!{user}!!**](userHook) created the webhook $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_UPDATE:
          "$[**!!{user}!!**](userHook) updated the webhook $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_DELETE:
          "$[**!!{user}!!**](userHook) deleted the webhook $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_EMOJI_CREATE:
          "$[**!!{user}!!**](userHook) created the emoji $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_EMOJI_UPDATE:
          "$[**!!{user}!!**](userHook) updated the emoji $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_EMOJI_DELETE:
          "$[**!!{user}!!**](userHook) deleted the emoji $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_STICKER_CREATE:
          "$[**!!{user}!!**](userHook) created the sticker $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_STICKER_UPDATE:
          "$[**!!{user}!!**](userHook) updated the sticker $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_STICKER_DELETE:
          "$[**!!{user}!!**](userHook) deleted the sticker $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_MESSAGE_DELETE:
          "$[**!!{user}!!**](userHook) deleted {count, plural, =1 {**a message**} other {**!!{count}!! messages**}} by $[**!!{target}!!**](targetHook) in $[**!!{channel}!!**](channelHook)",
        GUILD_SETTINGS_AUDIT_LOG_MESSAGE_BULK_DELETE:
          "$[**!!{user}!!**](userHook) deleted {count, plural, =1 {**a message**} other {**!!{count}!! messages**}} in $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_MESSAGE_PIN:
          "$[**!!{user}!!**](userHook) pinned a message by $[**!!{target}!!**](targetHook) in $[**!!{channel}!!**](channelHook)",
        GUILD_SETTINGS_AUDIT_LOG_MESSAGE_UNPIN:
          "$[**!!{user}!!**](userHook) unpinned a message by $[**!!{target}!!**](targetHook) in $[**!!{channel}!!**](channelHook)",
        GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_CREATE:
          "$[**!!{user}!!**](userHook) added an integration for $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_UPDATE:
          "$[**!!{user}!!**](userHook) updated the integration for $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_DELETE:
          "$[**!!{user}!!**](userHook) deleted the integration for $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_CREATE:
          "$[**!!{user}!!**](userHook) started the stage for $[**!!{channel}!!**](channelHook)",
        GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_UPDATE:
          "$[**!!{user}!!**](userHook) updated the stage for $[**!!{channel}!!**](channelHook)",
        GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_DELETE:
          "$[**!!{user}!!**](userHook) ended the stage for $[**!!{channel}!!**](channelHook)",
        GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_DELETE_NO_USER:
          "Discord ended the stage for $[**!!{channel}!!**](channelHook) due to inactivity.",
        GUILD_SETTINGS_AUDIT_LOG_COMMAND_PERMISSION_UPDATE:
          "$[**!!{user}!!**](userHook) updated permissions for $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_VOICE_CHANNEL_STATUS_CREATED:
          "$[**!!{user}!!**](userHook) set a Voice Channel Status in $[**!!{channel}!!**](channelHook)",
        GUILD_SETTINGS_AUDIT_LOG_VOICE_CHANNEL_STATUS_DELETED:
          "$[**!!{user}!!**](userHook) removed a Voice Channel Status in $[**!!{channel}!!**](channelHook)",
        GUILD_SETTINGS_AUDIT_LOG_VOICE_CHANNEL_STATUS_STATUS_CREATE:
          "Set to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_PROFILE_UPDATE:
          "$[**!!{user}!!**](userHook) updated Clyde's profile",
        GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_UPDATE: "Set to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_NAME_UPDATED:
          "Set name to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_NAME_RESET: "Reset name to Clyde",
        GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_AVATAR_UPDATED: "Set new Avatar",
        GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_BANNER_UPDATED: "Set new Banner",
        GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_PERSONALITY_UPDATED:
          "Set personality to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_PERSONALITY_RESET:
          "Reset Clyde to default personality",
        GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_PRIMARY_THEME_COLOR_UPDATED:
          "Set primary theme color to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CLYDE_AI_THEME_COLORS_UPDATED:
          "Set theme colors to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_UNKNOWN_ACTION: "Unknown action",
        GUILD_SETTINGS_AUDIT_LOG_COMMON_REASON:
          "With reason **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_NAME_CHANGE:
          "Set the server name to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_ICON_HASH_CHANGE: "Set the server icon",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SPLASH_HASH_CHANGE:
          "Set the server invite background",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_BANNER_HASH_CHANGE:
          "Set the server banner",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_BANNER_HASH_REMOVE:
          "Removed the server banner",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_DISCOVERY_SPLASH_HASH_CHANGE:
          "Set the Server Discovery background",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_DESCRIPTION_CHANGE:
          "Set the server description to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_DESCRIPTION_CLEAR:
          "**Cleared** the server description",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_OWNER_ID_CHANGE:
          "Passed ownership to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_REGION_CHANGE:
          "Set the voice region to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_PREFERRED_LOCALE_CHANGE:
          "Set the preferred locale to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_AFK_CHANNEL_ID_CHANGE:
          "Set the inactive channel to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_AFK_CHANNEL_ID_CLEAR:
          "**Cleared** the inactive channel",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_ID_CHANGE:
          "Set the welcome notification channel to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_ID_DISABLE:
          "**Disabled** the welcome notification messages",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_RULES_CHANNEL_ID_CHANGE:
          "Set the rules channel to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_RULES_CHANNEL_ID_CLEAR:
          "**Cleared** the rules channel",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_UPDATES_CHANNEL_ID_CHANGE:
          "Set the Community Server updates channel to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_UPDATES_CHANNEL_ID_CLEAR:
          "**Cleared** the Community Server updates channel",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_AFK_TIMEOUT_CHANGE:
          "Set the inactive timeout to **!!{newValue}!!** minutes",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_MFA_LEVEL_ENABLED:
          "**Enabled** two-factor authentication requirement",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_MFA_LEVEL_DISABLED:
          "**Disabled** two-factor authentication requirement",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_WIDGET_ENABLED: "**Enabled** the widget",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_WIDGET_DISABLED:
          "**Disabled** the widget",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_WIDGET_CHANNEL_ID_CHANGE:
          "Set the widget channel to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_WIDGET_CHANNEL_ID_DELETE:
          "**Removed** the widget channel",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_NONE:
          "Set the server verification level to **None**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_LOW:
          "Set the server verification level to **Low**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_MEDIUM:
          "Set the server verification level to **Medium**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_HIGH:
          "Set the server verification level to **High**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_VERIFICATION_LEVEL_CHANGE_VERY_HIGH:
          "Set the server verification level to **Very High**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_DEFAULT_MESSAGE_NOTIFICATIONS_CHANGE_ALL_MESSAGES:
          "Set the default message notification setting to **All Messages**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_DEFAULT_MESSAGE_NOTIFICATIONS_CHANGE_ONLY_MENTIONS:
          "Set the default message notification setting to **Only Mentions**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_VANITY_URL_CODE_CHANGE:
          "Set the Custom Invite Link to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_VANITY_URL_CODE_DELETE:
          "**Removed** the Custom Invite Link",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_EXPLICIT_CONTENT_FILTER_DISABLE:
          "**Disabled** the explicit content filter",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_EXPLICIT_CONTENT_FILTER_MEMBERS_WITHOUT_ROLES:
          "Set the explicit content filter to scan messages from **members without a role**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_EXPLICIT_CONTENT_FILTER_ALL_MEMBERS:
          "Set the explicit content filter to scan messages from **all members**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_PREMIUM_PROGRESS_BAR_ENABLED_ENABLED:
          "Turned **on** the Boost progress bar",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_PREMIUM_PROGRESS_BAR_ENABLED_DISABLED:
          "Turned **off** the Boost progress bar",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_FLAGS_CHANGE:
          "Set system channel flags to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_JOIN_NOTIFICATIONS:
          "Set system channel welcome messages to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_PREMIUM_SUBSCRIPTIONS:
          "Set system channel boost notifications to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_REMINDER_NOTIFICATIONS:
          "Set system channel server setup tips to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SYSTEM_CHANNEL_JOIN_NOTIFICATION_REPLIES:
          "Set system channel welcome stickers to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_THREAD_FLAGS_CHANGE:
          "Updated thread properties",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_NAME_CREATE:
          "Set the name to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_POSITION_CREATE:
          "In position **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CREATE:
          "Set the topic to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_BITRATE_CREATE:
          "Set the bitrate to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RTC_REGION_OVERRIDE_CREATE:
          "Set the region override to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_USER_LIMIT_CREATE:
          "Set the user limit to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RATE_LIMIT_PER_USER_CREATE:
          "{newValue, plural, =0 {Set slowmode disabled} =1 {Set slowmode to **# second**} other {Set slowmode to **# seconds**}}",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TYPE_CREATE:
          "Set the type to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_VIDEO_QUALITY_MODE_CREATE:
          "Set the video quality mode to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_NAME_CHANGE:
          "Changed the name from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_POSITION_CHANGE:
          "Moved from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CHANGE:
          "Changed the topic to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TOPIC_CLEAR: "**Cleared** the topic",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_BITRATE_CHANGE:
          "Changed the bitrate to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RTC_REGION_OVERRIDE_CHANGE:
          "Changed the region override from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_USER_LIMIT_CHANGE:
          "Changed the user limit to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RATE_LIMIT_PER_USER_CHANGE:
          "{newValue, plural, =0 {Disabled slowmode} =1 {Set slowmode to **# second**} other {Set slowmode to **# seconds** }}",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_RTC_REGION_OVERRIDE_DELETE:
          "Removed the region override",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_TYPE_CHANGE:
          "Changed the type from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_VIDEO_QUALITY_MODE_CHANGE:
          "Set the video quality mode to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_NSFW_ENABLED:
          "Marked the channel as age-restricted",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_NSFW_DISABLED:
          "Unmarked the channel as age-restricted",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_PERMISSION_OVERRIDES_GRANTED:
          "**Granted** {count, plural, =1 {a permission} other {permissions}} for **!!{subtarget}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_PERMISSION_OVERRIDES_DENIED:
          "**Denied** {count, plural, =1 {a permission} other {permissions}} for **!!{subtarget}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_PERMISSION_OVERRIDES_RESET:
          "**Reset** {count, plural, =1 {a permission} other {permissions}} for **!!{subtarget}!!**",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_FLAGS_CHANGE:
          "Changed channel settings",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_AVAILABLE_TAGS_ADD:
          "Added tag $[](newTagHook)",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_AVAILABLE_TAGS_UPDATE:
          "Updated tag from $[](oldTagHook) to $[](newTagHook)",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_AVAILABLE_TAGS_DELETE:
          "Deleted tag $[](newTagHook)",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_NICK_CREATE:
          "Set their nickname to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_NICK_CHANGE:
          "Changed their nickname from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_NICK_DELETE:
          "**Removed** their nickname of **!!{oldValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_DEAF_ON: "**Deafened** them",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_DEAF_OFF: "**Undeafened** them",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_MUTE_ON: "**Muted** them",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_MUTE_OFF: "**Unmuted** them",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_ROLES_REMOVE:
          "**Removed** {count, plural, =1 {a role} other {some roles}}",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_ROLES_ADD:
          "**Added** {count, plural, =1 {a role} other {some roles}}",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_PRUNE_DELETE_DAYS:
          "For **{newValue, plural, =1 {a day} other {{newValue} days}}** of inactivity",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_BYPASSES_VERIFICATION_ON:
          "manually verified them",
        GUILD_SETTINGS_AUDIT_LOG_MEMBER_BYPASSES_VERIFICATION_OFF:
          "removed their manual verification",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_NAME_CREATE:
          "With the name **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_NAME_CHANGE:
          "Changed the name from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_PERMISSIONS_GRANTED:
          "**Granted** {count, plural, =1 {permission} other {permissions}}",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_PERMISSIONS_DENIED:
          "**Denied** {count, plural, =1 {permission} other {permissions}}",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_COLOR_NONE: "With no color",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_COLOR:
          "Set the color to **!!{newValue}!!** $[](newColorHook)",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_COLOR_IOS:
          "Set the color to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_HOIST_ON: "Hoisted",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_HOIST_OFF: "Not hoisted",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_MENTIONABLE_ON: "Mentionable",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_MENTIONABLE_OFF: "Not mentionable",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_ICON_HASH_CHANGE: "Set the icon",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_UNICODE_EMOJI_CHANGE:
          "Set the unicode emoji",
        GUILD_SETTINGS_AUDIT_LOG_INVITE_CODE_CREATE:
          "With code **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_INVITE_CHANNEL_CREATE:
          "For channel **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_INVITE_MAX_USES_CREATE:
          "Which expires after **!!{newValue}!!** uses",
        GUILD_SETTINGS_AUDIT_LOG_INVITE_MAX_USES_CREATE_INFINITE:
          "Which has **unlimited** uses",
        GUILD_SETTINGS_AUDIT_LOG_INVITE_MAX_AGE_CREATE:
          "Which expires after **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_INVITE_MAX_AGE_CREATE_INFINITE:
          "Which **never** expires",
        GUILD_SETTINGS_AUDIT_LOG_INVITE_TEMPORARY_ON: "With temporary **on**",
        GUILD_SETTINGS_AUDIT_LOG_INVITE_TEMPORARY_OFF: "With temporary **off**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_INVITE_GUEST_INVITE:
          "Which is a **guest** invite",
        GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_CHANNEL_CREATE:
          "With channel **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_CHANNEL_CHANGE:
          "Changed the channel to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_NAME_CREATE:
          "With name **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_NAME_CHANGE:
          "Changed the name from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_WEBHOOK_AVATAR: "Changed the avatar",
        GUILD_SETTINGS_AUDIT_LOG_EMOJI_NAME_CREATE:
          "With the name **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_EMOJI_NAME_CHANGE:
          "Changed the name from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_NAME_CREATE:
          "With the name **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_NAME_CHANGE:
          "Changed the name from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_TAGS_CREATE:
          "With the tags **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_TAGS_CHANGE:
          "Changed the tags from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_DESCRIPTION_CREATE:
          "With the description **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_DESCRIPTION_CHANGE:
          "Changed the description from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_ENABLE_EMOTICONS_ON:
          "Enabled emoticons",
        GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_ENABLE_EMOTICONS_OFF:
          "Disabled custom emoticons",
        GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_EXPIRE_BEHAVIOR_REMOVE_SYNCED_ROLE:
          "Set the expired sub behavior to **Remove Role**",
        GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_EXPIRE_BEHAVIOR_KICK_FROM_SERVER:
          "Set the expired sub behavior to **Kick**",
        GUILD_SETTINGS_AUDIT_LOG_INTEGRATION_EXPIRE_GRACE_PERIOD:
          "Set the expire grace period to **{newValue, plural, =1 {a day} other {# days}}**",
        GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_PRIVACY_LEVEL_GUILD_ONLY:
          "Set the privacy level to **Closed**",
        GUILD_SETTINGS_AUDIT_LOG_STAGE_INSTANCE_PRIVACY_LEVEL_PUBLIC:
          "Set the privacy level to **Public**",
        GUILD_SETTINGS_AUDIT_LOG_COMMAND_PERMISSION_REMOVED:
          "**Removed override** for **!!{subtarget}!!**",
        GUILD_SETTINGS_AUDIT_LOG_COMMAND_PERMISSION_GRANTED:
          "**Granted** permission for **!!{subtarget}!!**",
        GUILD_SETTINGS_AUDIT_LOG_COMMAND_PERMISSION_DENIED:
          "**Denied** permission for **!!{subtarget}!!**",
        GUILD_SETTINGS_AUDIT_LOG_TIME_AT_ANDROID: "{date} at {time}",
        GUILD_SETTINGS_FILTER_ACTION: "Filter by Action",
        GUILD_SETTINGS_FILTERED_ACTION: "Action Filter:",
        GUILD_SETTINGS_FILTER_USER: "Filter by User",
        GUILD_SETTINGS_FILTERED_USER: "User Filter:",
        GUILD_SETTINGS_FILTER_ALL: "All",
        GUILD_SETTINGS_FILTER_ALL_USERS: "All Users",
        GUILD_SETTINGS_FILTER_ALL_ACTIONS: "All Actions",
        GUILD_SETTINGS_ACTION_FILTER_GUILD_UPDATE: "Update Server",
        GUILD_SETTINGS_ACTION_FILTER_CHANNEL_CREATE: "Create Channel",
        GUILD_SETTINGS_ACTION_FILTER_CHANNEL_UPDATE: "Update Channel",
        GUILD_SETTINGS_ACTION_FILTER_CHANNEL_DELETE: "Delete Channel",
        GUILD_SETTINGS_ACTION_FILTER_CHANNEL_OVERWRITE_CREATE:
          "Create Channel Permissions",
        GUILD_SETTINGS_ACTION_FILTER_CHANNEL_OVERWRITE_UPDATE:
          "Update Channel Permissions",
        GUILD_SETTINGS_ACTION_FILTER_CHANNEL_OVERWRITE_DELETE:
          "Delete Channel Permissions",
        GUILD_SETTINGS_ACTION_FILTER_MEMBER_KICK: "Kick Member",
        GUILD_SETTINGS_ACTION_FILTER_MEMBER_PRUNE: "Prune Members",
        GUILD_SETTINGS_ACTION_FILTER_MEMBER_BAN_ADD: "Ban Member",
        GUILD_SETTINGS_ACTION_FILTER_MEMBER_BAN_REMOVE: "Unban Member",
        GUILD_SETTINGS_ACTION_FILTER_MEMBER_UPDATE: "Update Member",
        GUILD_SETTINGS_ACTION_FILTER_MEMBER_ROLE_UPDATE: "Update Member Roles",
        GUILD_SETTINGS_ACTION_FILTER_MEMBER_MOVE: "Move Member",
        GUILD_SETTINGS_ACTION_FILTER_MEMBER_DISCONNECT: "Disconnect Member",
        GUILD_SETTINGS_ACTION_FILTER_BOT_ADD: "Add Bot",
        GUILD_SETTINGS_ACTION_FILTER_ROLE_CREATE: "Create Role",
        GUILD_SETTINGS_ACTION_FILTER_ROLE_UPDATE: "Update Role",
        GUILD_SETTINGS_ACTION_FILTER_ROLE_DELETE: "Delete Role",
        GUILD_SETTINGS_ACTION_FILTER_INVITE_CREATE: "Create Invite",
        GUILD_SETTINGS_ACTION_FILTER_INVITE_UPDATE: "Update Invite",
        GUILD_SETTINGS_ACTION_FILTER_INVITE_DELETE: "Delete Invite",
        GUILD_SETTINGS_ACTION_FILTER_WEBHOOK_CREATE: "Create Webhook",
        GUILD_SETTINGS_ACTION_FILTER_WEBHOOK_UPDATE: "Update Webhook",
        GUILD_SETTINGS_ACTION_FILTER_WEBHOOK_DELETE: "Delete Webhook",
        GUILD_SETTINGS_ACTION_FILTER_EMOJI_CREATE: "Create Emoji",
        GUILD_SETTINGS_ACTION_FILTER_EMOJI_UPDATE: "Update Emoji",
        GUILD_SETTINGS_ACTION_FILTER_EMOJI_DELETE: "Delete Emoji",
        GUILD_SETTINGS_ACTION_FILTER_MESSAGE_DELETE: "Delete Messages",
        GUILD_SETTINGS_ACTION_FILTER_MESSAGE_BULK_DELETE:
          "Bulk Delete Messages",
        GUILD_SETTINGS_ACTION_FILTER_MESSAGE_PIN: "Pin Message",
        GUILD_SETTINGS_ACTION_FILTER_MESSAGE_UNPIN: "Unpin Message",
        GUILD_SETTINGS_ACTION_FILTER_INTEGRATION_CREATE: "Create Integration",
        GUILD_SETTINGS_ACTION_FILTER_INTEGRATION_UPDATE: "Update Integration",
        GUILD_SETTINGS_ACTION_FILTER_INTEGRATION_DELETE: "Delete Integration",
        GUILD_SETTINGS_ACTION_FILTER_STAGE_INSTANCE_CREATE: "Start Stage",
        GUILD_SETTINGS_ACTION_FILTER_STAGE_INSTANCE_UPDATE: "Update Stage",
        GUILD_SETTINGS_ACTION_FILTER_STAGE_INSTANCE_DELETE: "End Stage",
        GUILD_SETTINGS_ACTION_FILTER_STICKER_CREATE: "Create Sticker",
        GUILD_SETTINGS_ACTION_FILTER_STICKER_UPDATE: "Update Sticker",
        GUILD_SETTINGS_ACTION_FILTER_STICKER_DELETE: "Delete Sticker",
        GUILD_SETTINGS_ACTION_FILTER_APPLICATION_COMMAND_PERMISSION_UPDATE:
          "Update Command Permissions",
        GUILD_SETTINGS_ACTION_FILTER_VOICE_CHANNEL_STATUS_CREATE:
          "Create Voice Channel Status",
        GUILD_SETTINGS_ACTION_FILTER_VOICE_CHANNEL_STATUS_DELETE:
          "Delete Voice Channel Status",
        GUILD_SETTINGS_ROLE_ICON_SIDEBAR_NEW_ARIA_LABEL: "Manage Roles",
        PREMIUM_GUILD_TIER_0: "No Level",
        PREMIUM_GUILD_TIER_1: "Level 1",
        PREMIUM_GUILD_TIER_2: "Level 2",
        PREMIUM_GUILD_TIER_3: "Level 3",
        PREMIUM_GUILD_TIER_UNLOCKED: "Unlocked",
        PREMIUM_GUILD_TIER_1_SHORT: "LVL 1",
        PREMIUM_GUILD_TIER_2_SHORT: "LVL 2",
        PREMIUM_GUILD_TIER_3_SHORT: "LVL 3",
        PREMIUM_GUILD_INCLUDED: "Included in Boosting",
        PREMIUM_GUILD_SETTINGS_MEMBERS_SUBSCRIBED_NEEDED:
          "You need **{number, plural, =1 {# more Boost} other {# more Boosts}}** to unlock !!{tier}!!",
        PREMIUM_GUILD_SETTINGS_X_OF_Y_SUBSCRIPTIONS:
          "{subscribers, number}/{numRequired, plural, =1 {# Boost} other {# Boosts}}",
        GUILD_SETTINGS_PREMIUM_GUILD_TITLE: "Server Boost Status",
        GUILD_SETTINGS_PREMIUM_GUILD_BLURB:
          "\nMembers of your server can help unlock levels by bestowing Boosts. For every level achieved, your server will help unlock perks for everyone.\n\nMembers can revoke their boost at any time. **Your server will keep perks for three days if a level is lost**. [Learn more about Server Boosting]({helpdeskArticle}).",
        GUILD_SETTINGS_GUILD_PREMIUM_PERKS_TITLE_NONE: "No Server Boost",
        GUILD_SETTINGS_GUILD_PREMIUM_PERKS_DESCRIPTION_NONE:
          "No one has bestowed Boosts to this server yet. See if any members would kindly bless your server for server-wide Boost Perks!",
        GUILD_SETTINGS_GUILD_PREMIUM_PERKS_TITLE_TIER_1: "Level 1 Perks",
        GUILD_SETTINGS_GUILD_PREMIUM_PERKS_TITLE_TIER_2: "Level 2 Perks",
        GUILD_SETTINGS_GUILD_PREMIUM_PERKS_TITLE_TIER_3: "Level 3 Perks",
        GUILD_SETTINGS_GUILD_PREMIUM_PERKS_BASE_PERKS:
          "Boosted server perks include —",
        GUILD_SETTINGS_GUILD_PREMIUM_PERKS_PREVIOUS_PERKS:
          "Boosted servers get everything previous, and —",
        GUILD_SETTINGS_PREMIUM_GUILD_TIER_REQUIREMENT:
          "{required, plural, =1 {# Boost} other {# Boosts}}",
        GUILD_SETTINGS_PREMIUM_GUILD_TIER_REQUIREMENT_A11Y_LABEL:
          "{required, plural, =1 {# Boost} other {# Boosts}} required, tier locked",
        GUILD_SETTINGS_PREMIUM_GUILD_UNLOCKED: "Unlocked",
        GUILD_SETTINGS_PREMIUM_GUILD_COUNT_SUBSCRIBERS:
          "{count, plural, =1 {**# extremely cool person** has} other {**# extremely cool people** have}} boosted this server",
        GUILD_SETTINGS_PREMIUM_GUILD_CLOSE_HINT:
          "Only {numLeft, plural, =1 {# more boost} other {# more boosts}} until the next level!",
        GUILD_SETTINGS_PREMIUM_UPSELL_HEADING_PRIMARY: "Ready to Boost?",
        GUILD_SETTINGS_PREMIUM_UPSELL_HEADING_SECONDARY:
          "Get the best deal with Nitro",
        GUILD_SETTINGS_PREMIUM_UPSELL_HEADING_SECONDARY_PREMIUM_USER:
          "Want to give your server Level 1 perks?",
        GUILD_SETTINGS_PREMIUM_UPSELL_HEADING_TERTIARY_PREMIUM_USER:
          "Upgrade to Nitro and get {numFreeGuildSubscriptions, plural, =1 {# Server Boost} other {# Server Boosts}} with your subscription!",
        GUILD_SETTINGS_PREMIUM_UPSELL_SUBHEADING:
          "Server Boosts start at **!!{price}!!**.",
        GUILD_SETTINGS_PREMIUM_UPSELL_SUBHEADING_TIER_1:
          "Thanks for being a Nitro Classic member. You get a {discountPercent} discount on Server Boosts.\n\nBoosts are **!!{price}!!** $[!!{originalPrice}!!](originalPriceHook).",
        GUILD_SETTINGS_PREMIUM_UPSELL_SUBHEADING_TIER_1_MOBILE:
          "Thanks for being a Nitro Classic member. You get a {discountPercent} discount on Server Boosts.",
        GUILD_SETTINGS_PREMIUM_UPSELL_SUBHEADING_TIER_2:
          "Thanks for being a Nitro member. You get {freeSubscriptionCount, number} Boosts included with your subscription, and a {discountPercent} discount on future Server Boosts.\n\nBoosts are **!!{price}!!** $[(!!{originalPrice}!!)](originalPriceHook).",
        GUILD_SETTINGS_PREMIUM_UPSELL_SUBHEADING_TIER_2_MOBILE:
          "Thanks for being a Nitro member. You get {freeSubscriptionCount, number} Boosts included with your subscription, and a {discountPercent} discount on future Server Boosts.",
        GUILD_SETTINGS_PREMIUM_UPSELL_SUBHEADING_EXTRA_ANDROID:
          "Boosts are **!!{price}!!** $[~~({originalPrice})~~](originalPriceHook).",
        GUILD_SETTINGS_PREMIUM_UPSELL_SUBHEADING_EXTRA_IOS:
          "Boosts are **!!{price}!!** $[!!{originalPrice}!!](originalPriceHook).",
        GUILD_SETTINGS_PREMIUM_UPSELL_SUBHEADING_EXTRA_IOS_VOICEOVER_LABEL:
          "Boosts are !!{price}!!, discounted from !!{originalPrice}!!",
        GUILD_SETTINGS_PREMIUM_UPSELL_BODY_PERK_GUILD_SUBSCRIPTION_DISCOUNT:
          "{discountPercentage} off Server Boosts",
        GUILD_SETTINGS_PREMIUM_UPSELL_BODY_PERK_NUM_GUILD_SUBSCRIPTIONS:
          "Includes {numFreeGuildSubscriptions, plural, =1 {# Boost} other {# Boosts}}—unlock Level 1!",
        GUILD_SETTINGS_PREMIUM_UPSELL_BODY_PERK_NO_FREE_GUILD_SUBSCRIPTIONS:
          "Does not include {numFreeGuildSubscriptions, plural, =1 {# Boost} other {# Boosts}}",
        GUILD_SETTINGS_PREMIUM_UPSELL_LEARN_MORE:
          "Learn more about Discord Nitro",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_TITLE_TIER_ANY_EMOJI:
          "+{adding, number} server emoji slots (for a total of {total, number})",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_TITLE_TIER_ANY_STICKER:
          "+{adding, number} custom sticker slots (for a total of {total, number})",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_TITLE_TIER_ANY_AUDIO_QUALITY:
          "{bitrate, number} kbps audio quality",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_TITLE_TIER_ANY_UPLOAD_LIMIT:
          "{fileSize} upload limit for all members",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_1_EMOJI:
          "More emoji, more ways to express yourself!",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_TITLE_TIER_1_ANIMATED_GUILD_ICON:
          "Animated server icon",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_1_ANIMATED_GUILD_ICON:
          "Represent your server...in motion! **(Only in server)**",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_1_AUDIO_QUALITY:
          "Hear your friends in high definition!",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_TITLE_TIER_1_SPLASH:
          "Custom server invite background",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_1_SPLASH:
          "Upload a customizable background for all your server invites!",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_TITLE_TIER_1_STREAMING:
          "Stream to your friends in high quality.",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_1_STREAMING:
          "Share your high-quality gameplay with high-quality video streaming.",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_1_STICKER:
          "Upload your own sticker creations for everyone to use in your server.",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_1_SOUNDBOARD:
          "Add custom sounds for everyone in your server. Drumroll please!",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_2_EMOJI:
          "Even more emoji, for even more ways to express yourself!",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_2_AUDIO_QUALITY:
          "Hear your friends in higher definition!",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_2_UPLOAD_LIMIT:
          "Larger upload file size for high quality meme sharing. **(Only in server)**",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_TITLE_TIER_2_BANNER: "Server Banner",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_2_BANNER:
          "Upload a decorative banner that best represents your community! Shown under your server name.",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_TITLE_TIER_2_STREAMING:
          "1080p 60fps Go Live streams",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_2_STREAMING:
          "Stream to your friends in high quality.",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_2_STICKER:
          "More sticker slots for more custom expressions!",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_2_SOUNDBOARD:
          "Even more fun with even more sounds. Air horns incoming!",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_TITLE_TIER_2_THREAD_PRIVATE:
          "Create private threads",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_2_THREAD_PRIVATE:
          "Create threads that only selected members can view and use.",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_TITLE_TIER_2_CUSTOM_ROLE_ICONS:
          "Custom Role Icons",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_2_CUSTOM_ROLE_ICONS:
          "Set a unique icon for each role. Icons display in chat and the members list.",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_3_EMOJI:
          "Have yourself access to a truckload of emoji slots for all your expressing needs.",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_TITLE_TIER_3_VANITY_URL:
          "Custom Invite Link for the server",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_3_ANIMATED_GUILD_BANNER:
          "Animated server banner",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_3_VANITY_URL:
          "Customize the invite URLs to your server with **discord.gg/____. ([We have some rules]({helpdeskArticle}))**",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_3_AUDIO_QUALITY:
          "Hear your friends in the highest of definitions. It’s as if they’re right next to you...",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_3_UPLOAD_LIMIT:
          "The biggest file sizes for the highest quality meme sharing. **(Only in server)**",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_3_STICKER:
          "Now we’re talking... but with stickers.",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_3_SOUNDBOARD:
          "Crank up the Soundboard with even more custom sounds.",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_TITLE_TIER_3_ANIMATED_BANNER:
          "Animated Server Banner",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_DESCRIPTION_TIER_3_ANIMATED_BANNER:
          "Gives the option to choose a GIF as your banner.",
        GUILD_SETTINGS_GUILD_PREMIUM_PERK_TITLE_VIDEO_STAGE:
          "Video Stage audience limit increased to {limit}",
        GUILD_SETTINGS_FOLLOWER_ANALYTICS_TOOLTIP:
          "Gained: {subscribersGained} \nLost: {subscribersLost}",
        GUILD_SETTINGS_PUBLIC_UPDATE_FAILED:
          "Failed to update your settings. Please try again.",
        GUILD_SETTINGS_PUBLIC_NO_OPTION_SELECTED: "None Selected",
        WELCOME_SCREEN_DEPRECATED:
          "Changes to the Welcome Screen are disabled. The Welcome Screen will still appear for your members. A new and improved version of Welcome Screen is now available through $[Onboarding](onboardingLink), and will replace Welcome Screen if enabled.",
        GUILD_SETTINGS_PUBLIC_WELCOME: "Welcome Screen",
        GUILD_SETTINGS_PUBLIC_WELCOME_INTRO_TEXT:
          "Set up a custom Welcome Screen that appears when new members join. This can help new members discover all the cool things they can do in your server!\n\nServers that have set up a Welcome Screen see improvements in more people sticking around and engaging.",
        GUILD_SETTINGS_PUBLIC_WELCOME_INTRO_BUTTON: "Set Up Welcome Screen",
        GUILD_SETTINGS_PUBLIC_WELCOME_SETTINGS_TEXT:
          "If enabled, this Welcome Screen appears for new members when they join your server. This screen helps new members discover all the cool things they can do in your server!",
        GUILD_SETTINGS_PUBLIC_WELCOME_DESCRIPTION_PLACEHOLDER:
          "What's this server about? What do people do here?",
        GUILD_SETTINGS_PUBLIC_WELCOME_RECOMMENDED_CHANNELS_TITLE:
          "Top things to do",
        GUILD_SETTINGS_PUBLIC_WELCOME_RECOMMENDED_CHANNELS_DESCRIPTION:
          "Select up to 5 recommended channels. We suggest channels where people can interact, like channels for discussions, asking questions, reading news, or selecting roles.",
        GUILD_SETTINGS_PUBLIC_WELCOME_ADD_RECOMMENDED_CHANNEL: "Add a Channel",
        GUILD_SETTINGS_PUBLIC_WELCOME_RECOMMENDED_CHANNEL_MODAL_ADD:
          "Add a Recommended Channel",
        GUILD_SETTINGS_PUBLIC_WELCOME_RECOMMENDED_CHANNEL_MODAL_EDIT:
          "Edit Recommended Channel",
        GUILD_SETTINGS_PUBLIC_WELCOME_PICK_CHANNEL:
          "Pick a channel that you think new members should visit.",
        GUILD_SETTINGS_PUBLIC_WELCOME_SELECT_A_CHANNEL: "1. Select a Channel",
        GUILD_SETTINGS_PUBLIC_WELCOME_SET_DESCRIPTION:
          "2. What do people do in this channel?",
        GUILD_SETTINGS_PUBLIC_WELCOME_PICK_EMOJI: "3. Pick an emoji!",
        GUILD_SETTINGS_PUBLIC_WELCOME_PICK_EMOJI_UPSELL:
          "Optional, but why not add some fun?",
        GUILD_SETTINGS_PUBLIC_WELCOME_ONLY_VIEWABLE_CHANNELS:
          "You can only select channels that are viewable by @everyone.",
        GUILD_SETTINGS_PUBLIC_WELCOME_INVALID_CHANNEL:
          "This channel is no longer in Welcome Screen because it does not exist or is not viewable by @everyone",
        GUILD_SETTINGS_PUBLIC_WELCOME_CHANNEL_DESCRIPTION_PLACEHOLDER:
          "Chat about the latest Wumpus sightings",
        GUILD_SETTINGS_PUBLIC_WELCOME_ENABLED:
          "Your Welcome Screen is up and running.",
        GUILD_SETTINGS_PUBLIC_WELCOME_ENABLED_SECOND_LINE:
          "New members will be greeted by this screen when they join!",
        GUILD_SETTINGS_PUBLIC_WELCOME_ENABLE_REMINDER:
          " Don’t forget to enable when you’re finished!",
        GUILD_SETTINGS_PUBLIC_WELCOME_PROGRESS_WILL_SAVE:
          "Your changes are saved automatically.",
        GUILD_SETTINGS_PUBLIC_WELCOME_PREVIEW: "Preview",
        GUILD_SETTINGS_PUBLIC_WELCOME_UPDATE_FAILURE:
          "You must remove all invalid channels first before you can save.",
        GUILD_SETTINGS_PUBLIC_WELCOME_CHANNEL_MOVE_UP: "Move Up",
        GUILD_SETTINGS_PUBLIC_WELCOME_CHANNEL_MOVE_DOWN: "Move Down",
        GUILD_SETTINGS_PUBLIC_WELCOME_CHANNEL_EDIT: "Edit Channel",
        GUILD_SETTINGS_PUBLIC_WELCOME_CHANNEL_DELETE: "Remove Channel",
        WELCOME_CHANNEL_EMOJI_PICKER_TOOLTIP: "Set an emoji for this channel!",
        WELCOME_CHANNEL_DELETE_CONFIRM_TITLE: "Remove Recommended Channel",
        WELCOME_CHANNEL_DELETE_CONFIRM_BODY:
          "Are you sure you want to remove **!!{channelName}!!** from recommended channels?",
        WELCOME_CHANNEL_DELETE_CONFIRM_BODY_GENERIC:
          "Are you sure you want to remove this channel from recommended channels?",
        GUILD_SETTINGS_EXAMPLE_TOOLTIP: "Here's an example!",
        GUILD_SETTINGS_MEMBER_VERIFICATION: "Rules Screening",
        GUILD_SETTINGS_MEMBER_VERIFICATION_REQUIREMENTS: "Member Requirements",
        GUILD_SETTINGS_MEMBER_VERIFICATION_EXAMPLE_GUILD_NAME: "Wumpus Land",
        GUILD_SETTINGS_MEMBER_VERIFICATION_MANUAL_DESCRIPTION:
          "A way to screen members joining your community, from simple rule agreements to detailed questions. Granting a role to a new member will bypass this requirement.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_AUTOMATIC_DESCRIPTION:
          "Set up rules that new members must explicitly agree to before they can talk, react, or DM other members. Granting a role to a new member will bypass this requirement.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_INTRO_BUTTON:
          "Set up Membership Screening",
        GUILD_SETTINGS_MEMBER_VERIFICATION_REQUIREMENTS_INTRO_BUTTON:
          "Set up Member Requirements",
        GUILD_SETTINGS_MEMBER_VERIFICATION_PREVIEW: "Preview",
        GUILD_SETTINGS_MEMBER_VERIFICATION_ENABLED:
          "New members will be screened.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_ENABLED_SECOND_LINE:
          "They’ll have to meet your requirements to join or talk in the server.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_PROGRESS_WILL_SAVE:
          "Your changes are saved automatically.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_ENABLE_REMINDER:
          "Don’t forget to enable when you’re finished!",
        GUILD_SETTINGS_MEMBER_VERIFICATION_DESCRIPTION_TITLE: "Description",
        GUILD_SETTINGS_MEMBER_VERIFICATION_DESCRIPTION_PLACEHOLDER:
          "Briefly describe what your server is about. New members will see this when they try to join.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_SCREEN_TITLE: "Customize Screen",
        GUILD_SETTINGS_MEMBER_VERIFICATION_APPLICATIONS_TITLE:
          "Review Applications",
        GUILD_SETTINGS_MEMBER_VERIFICATION_PREVIEW_ENABLED_TITLE:
          "Allow Preview (Recommended)",
        GUILD_SETTINGS_MEMBER_VERIFICATION_PREVIEW_DESCRIPTION:
          "New members can browse the server before meeting the requirements. We recommend keeping this enabled so they can see what your community is like. If disabled, new members can’t view any contents of the server until they meet the requirements. [Learn more.]({helpdeskArticle})",
        GUILD_SETTINGS_MEMBER_VERIFICATION_PENDING: "Pending",
        GUILD_SETTINGS_MEMBER_VERIFICATION_PENDING_COUNT: "Pending ({count})",
        GUILD_SETTINGS_MEMBER_VERIFICATION_PENDING_COUNT_HYPEN:
          "Pending - ({count})",
        GUILD_SETTINGS_MEMBER_VERIFICATION_REJECTED_COUNT_HYPEN:
          "Rejected - ({count})",
        GUILD_SETTINGS_MEMBER_VERIFICATION_APPROVED_COUNT_HYPEN:
          "Approved - ({count})",
        GUILD_SETTINGS_MEMBER_VERIFICATION_SORT_NEWEST: "Sort by: Newest",
        GUILD_SETTINGS_MEMBER_VERIFICATION_SORT_OLDEST: "Sort by: Oldest",
        GUILD_SETTINGS_MEMBER_VERIFICATION_LIST_DESCRIPTION:
          "All submitted applications can be browsed up to 180 days after its submission date.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_REJECTED: "Rejected",
        GUILD_SETTINGS_MEMBER_VERIFICATION_APPROVED: "Approved",
        GUILD_SETTINGS_MEMBER_VERIFICATION_BANNED: "Denied & Banned",
        GUILD_SETTINGS_MEMBER_VERIFICATION_AUTO_APPROVAL: "Auto Approval",
        GUILD_SETTINGS_MEMBER_VERIFICATION_AUTO_APPROVAL_DESCRIPTION:
          "New members will be auto approved when they meet your requirements.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_MANUAL_APPROVAL: "Manual Approval",
        GUILD_SETTINGS_MEMBER_VERIFICATION_MANUAL_APPROVAL_REQUIRED:
          "Manual Approval Required",
        GUILD_SETTINGS_MEMBER_VERIFICATION_MANUAL_APPROVAL_DESCRIPTION:
          "New members will not be able to join or talk until a mod approves their application.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_REVIEW_APPLICATION_TITLE:
          "Review Application",
        GUILD_SETTINGS_MEMBER_VERIFICATION_EMPTY_PENDING_APPLICATIONS_TITLE:
          "There are no pending applications.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_EMPTY_PENDING_APPLICATIONS_BODY:
          "You'll be able to manage new member applications here.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_EMPTY_REJECTED_APPLICATIONS_TITLE:
          "There are no rejected applications.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_EMPTY_REJECTED_APPLICATIONS_BODY:
          "You'll be able to view rejected applications here.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_EMPTY_APPROVED_APPLICATIONS_TITLE:
          "There are no approved applications.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_EMPTY_APPROVED_APPLICATIONS_BODY:
          "You'll be able to view approved member applications here.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_REVIEW_APPLICATION_DESCRIPTION:
          "You are reviewing an application from someone who wants to join your server. Until you approve them, they cannot join or talk in the server.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_REVIEW_PENDING_APPLICATIONS:
          "{count, plural, one {Pending Application} other {{count, number} Pending Applications}}",
        GUILD_SETTINGS_MEMBER_VERIFICATION_APPLICATION_SUBMITTED_TIME:
          "submitted on {date}",
        GUILD_SETTINGS_MEMBER_VERIFICATION_APPROVE_APPLICATION: "Approve",
        GUILD_SETTINGS_MEMBER_VERIFICATION_DENY_APPLICATION: "Reject",
        GUILD_SETTINGS_MEMBER_VERIFICATION_DENY_AND_BAN_APPLICATION:
          "Deny & Ban",
        GUILD_SETTINGS_MEMBER_VERIFICATION_DENY_MODAL_TITLE:
          "Provide a denial reason to the user (OPTIONAL)",
        GUILD_SETTINGS_MEMBER_VERIFICATION_DENIED: "Denied",
        GUILD_SETTINGS_MEMBER_VERIFICATION_ACTIONED_BY:
          "By **{username}**#{discriminator} on {date}",
        GUILD_SETTINGS_MEMBER_VERIFICATION_ACTIONED_BY_HOOK:
          "By $[](usernameHook) on {date}",
        GUILD_SETTINGS_MEMBER_VERIFICATION_BAN_USER: "Ban User",
        GUILD_SETTINGS_MEMBER_VERIFICATION_REASON_TITLE:
          "Reason shared with user",
        GUILD_SETTINGS_MEMBER_VERIFICATION_TEXT_DESCRIPTION:
          "A free-form response with a 300 character limit.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_PARAGRAPH_DESCRIPTION:
          "A free-form response with a 1,000 character limit. Let them go wild.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_MANUAL_WARNING_TITLE:
          "Warning: Switching to Manual Approval",
        GUILD_SETTINGS_MEMBER_VERIFICATION_MANUAL_WARNING_DESCRIPTION:
          "Adding this requirement will change your Member Requirements to require manual approval.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_MANUAL_WARNING_EXPLANATION:
          "This means that new members will not be able to talk or join the server **until a server staff approves their application.**",
        GUILD_SETTINGS_MEMBER_VERIFICATION_EDIT_WARNING_TITLE:
          "You have {count, plural, one {application} other {{count, number} applications}} pending review!",
        GUILD_SETTINGS_MEMBER_VERIFICATION_EDIT_WARNING_DESCRIPTIONG:
          "You can still make changes, but keep in mind the changes will not affect the existing applications that are pending review.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_CONTINUE_EDITING: "Continue Editing",
        GUILD_SETTINGS_MEMBER_VERIFICATION_REVIEW_WARNING_TITLE:
          "You have {count, plural, one {{count, number} application} other {{count, number} applications}} awaiting review!",
        GUILD_SETTINGS_MEMBER_VERIFICATION_REVIEW_WARNING_DESCRIPTION:
          "Before you can disable Member Requirements, you have to either approve or reject all applications.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_QUESTION_LIMIT:
          "You can add up to 5 questions.",
        GUILD_SETTINGS_MEMBER_VERIFICATION_AUTOMATIC_APPROVAL_DIVIDER:
          "Automatic Approval",
        GUILD_SETTINGS_MEMBER_VERIFICATION_MANUAL_APPROVAL_DIVIDER:
          "Mod Approval Required",
        GUILD_SETTINGS_DISABLE_MEMBER_VERIFICATION_TITLE: "Are you sure?",
        GUILD_SETTINGS_DISABLE_MEMBER_VERIFICATION_DESCRIPTION:
          "Disabling Member Requirements means people can join your community without accepting rules or your manual approval. Warning! Any member who has not pass the requirements (e.g. Agree to the rules) will get kicked from the server.",
        GUILD_SETTINGS_KICK_STARTED_APPLICATIONS_DESCRIPTION:
          "Warning! Any member who has not submitted an application will get kicked from the server.",
        GUILD_SETTINGS_KEEP_STARTED_APPLICATIONS_DESCRIPTION:
          "Warning! Any member who has yet to agree to server rules will automatically be granted full membership.",
        MEMBER_VERIFICATION_GET_STARTED_TITLE: "Set up server rules!",
        MEMBER_VERIFICATION_GET_STARTED_DESCRIPTION:
          "Members are required to agree to server rules before they can talk.",
        MEMBER_VERIFICATION_GET_STARTED_SUBTITLE:
          "Create server rules and ask pending members to agree to them before they can talk.",
        MEMBER_VERIFICATION_GET_STARTED_BUTTON: "Get Started",
        MEMBER_VERIFICATION_ADD_QUESTION: "Add a question",
        MEMBER_VERIFICATION_ADD_QUESTIONS: "Add Questions",
        MEMBER_VERIFICATION_ADD_QUESTIONS_DESCRIPTION:
          "Use questions to manually approve new members before they can talk in your server.",
        MEMBER_VERIFICATION_FORM_ITEM_RULES: "Server Rules",
        MEMBER_VERIFICATION_FORM_ITEM_COMING_SOON: "Coming soon!",
        MEMBER_VERIFICATION_FORM_ITEM_TEXT_INPUT: "Short Answer",
        MEMBER_VERIFICATION_FORM_ITEM_PARAGRAPH: "Paragraph",
        MEMBER_VERIFICATION_FORM_ITEM_MULTIPLE_CHOICE: "Multiple Choice",
        MEMBER_VERIFICATION_FORM_ITEM_VERIFICATION: "Connections",
        MEMBER_VERIFICATION_FORM_VERIFICATION_SETTINGS:
          "To change this, [go to Moderation settings](onSettingsClick)",
        MEMBER_VERIFICATION_FORM_RULES_LABEL:
          "Read and agree to the server rules",
        MEMBER_VERIFICATION_ADD_RULE: "Add a rule",
        MEMBER_VERIFICATION_RULE_TOOLTIP: "You've already added rules",
        MEMBER_VERIFICATION_RULE_PLACEHOLDER: "Enter a rule",
        MEMBER_VERIFICATION_EXAMPLE_RULES_SUBTITLE: "Example rules",
        MEMBER_VERIFICATION_EXAMPLE_RULES: "Example rules (click them!)",
        MEMBER_VERIFICATION_RULE_BE_RESPECTFUL: "Be civil and respectful",
        MEMBER_VERIFICATION_RULE_NO_SPAM: "No spam or self-promotion",
        MEMBER_VERIFICATION_RULE_NO_NSFW:
          "No age-restricted or obscene content",
        MEMBER_VERIFICATION_RULE_SAFE: "Help keep things safe",
        MEMBER_VERIFICATION_RULE_BE_RESPECTFUL_FULL:
          "Treat everyone with respect. Absolutely no harassment, witch hunting, sexism, racism, or hate speech will be tolerated.",
        MEMBER_VERIFICATION_RULE_NO_SPAM_FULL:
          "No spam or self-promotion (server invites, advertisements, etc) without permission from a staff member. This includes DMing fellow members.",
        MEMBER_VERIFICATION_RULE_NO_NSFW_FULL:
          "No age-restricted or obscene content. This includes text, images, or links featuring nudity, sex, hard violence, or other graphically disturbing content.",
        MEMBER_VERIFICATION_RULE_SAFE_FULL:
          "If you see something against the rules or something that makes you feel unsafe, let staff know. We want this server to be a welcoming space!",
        MEMBER_VERIFICATION_FORM_ITEM_EMAIL_VERIFICATION_LABEL:
          "Verify your email.",
        MEMBER_VERIFICATION_FORM_ITEM_EMAIL_VERIFICATION_LABEL_VERIFIED:
          "Verified Email Address",
        MEMBER_VERIFICATION_FORM_ITEM_EMAIL_VERIFICATION_SETTINGS_LABEL:
          "New members must verify their email",
        MEMBER_VERIFICATION_FORM_ITEM_PHONE_VERIFICATION_SETTINGS_LABEL:
          "New members must verify their phone number",
        MEMBER_VERIFICATION_EMAIL_VERIFICATION_RESEND_EMAIL: "Resend email",
        MEMBER_VERIFICATION_EMAIL_VERIFICATION_EMAIL_SENT: "Email sent!",
        MEMBER_VERIFICATION_FORM_ITEM_PHONE_VERIFICATION_LABEL:
          "Verify your phone number.",
        MEMBER_VERIFICATION_FORM_ITEM_PHONE_VERIFICATION_LABEL_VERIFIED:
          "Verified Phone Number",
        MEMBER_VERIFICATION_FORM_PASSED_REQUIREMENTS:
          "Passed Verification Level",
        MEMBER_VERIFICATION_AGREED_TO_RULES: "Agreed to Rules",
        MEMBER_VERIFICATION_FORM_REQUIRED_ITEM: "This field is required",
        MEMBER_VERIFICATION_RULE_LIMIT: "You can only add up to {number} rules",
        MEMBER_VERIFICATION_DELETE_FIELD_CONFIRM_TITLE: "Remove field",
        MEMBER_VERIFICATION_DELETE_FIELD_CONFIRM_TEXT:
          "Are you sure you want to remove this field?",
        MEMBER_VERIFICATION_EMAIL_VERIFICATION_ENABLED:
          "You have a verified email.",
        MEMBER_VERIFICATION_PHONE_VERIFICATION_ENABLED:
          "You have a verified phone number.",
        MEMBER_VERIFICATION_GUILD_VERIFICATION_LEVEL:
          "Verification Level: $[](verificationLevelHook)",
        MEMBER_VERIFICATION_VERIFIED: "Verified",
        MEMBER_VERIFICATION_PHONE_VERIFIED: "Phone Verified",
        MEMBER_VERIFICATION_EMAIL_VERIFIED: "Email Verified",
        MEMBER_VERIFICATION_ACCOUNT_VERIFIED: "Passed Verification Level",
        MEMBER_VERIFICATION_NEED_RULES_CHANNEL_PERMS:
          "You need to have Send Message permissions in your server's rules channel to add or edit server rules here.",
        MEMBER_VERIFICATION_PREVIEW_DISABLED_MARKDOWN_WARNING:
          "Channel and role mentions will not show up properly in rules if you've disabled preview.",
        MEMBER_VERIFICATION_FIELD_QUESTION: "Enter your question",
        MEMBER_VERIFICATION_FIELD_QUESTION_REQUIRED_ERROR:
          "You must enter a question.",
        MEMBER_VERIFICATION_RULES_REQUIRED_ERROR:
          "You need to add one or more rules.",
        MEMBER_VERIFICATION_MULTIPLE_CHOICE_PLACEHOLDER:
          "Option {index, number}",
        MEMBER_VERIFICATION_MULTIPLE_CHOICE_ADD: "Add an option",
        MEMBER_VERIFICATION_CHOICES_REQUIRED_ERROR:
          "You need at least two or more choices.",
        MEMBER_VERIFICATION_FORM_FIELDS_LIMIT:
          "You can only add up to {number, number} questions",
        MEMBER_VERIFICATION_RULE_INDEX: "{ruleIndex, number}.",
        MEMBER_VERIFICATION_WARNING_TITLE: "Wait, you're not done!",
        MEMBER_VERIFICATION_WARNING_DESCRIPTION:
          "You're missing a description! Tell new members what your server is about.",
        MEMBER_VERIFICATION_WARNING_FIELDS:
          "You currently have no requirements enabled, which means new members will just see an empty pop-up.",
        MEMBER_VERIFICATION_WARNING_DESCRIPTION_AND_FIELDS:
          "Hey, looks like your Member Requirements isn't fully set up yet. You're missing a description, and you currently have no requirements enabled, which means new members will just see an empty pop-up.",
        MEMBER_VERIFICATION_WARNING_CONFIRM: "Proceed Anyway",
        MEMBER_VERIFICATION_WARNING_CANCEL: "Cancel",
        MEMBER_VERIFICATION_REJECTED_TITLE:
          "Your application to join the server has been rejected.",
        MEMBER_VERIFICATION_LEARN_MORE: "Learn more",
        MEMBER_VERIFICATION_CANCEL_APPLICATION_SUBTITLE:
          "If you want to join in the future, you’ll have to apply again.",
        MEMBER_VERIFICATION_APPLICATION_CONFIRMATION_TITLE:
          "Your application to join the server is awaiting review.",
        MEMBER_VERIFICATION_APPLICATION_CONFIRMATION_TITLE_WITH_GUILD_NAME:
          "Your application to join {guildName} is awaiting review!",
        MEMBER_VERIFICATION_APPLICATION_CONFIRMATION_SUBTITLE:
          "You'll get notified when there's an update.",
        MEMBER_VERIFICATION_CANCEL_APPLICATION: "Withdraw Application",
        MEMBER_VERIFICATION_DISABLE_CONFIRM_TITLE:
          "There are still pending members that haven't passed your screen.",
        MEMBER_VERIFICATION_DISABLE_CONFIRM_BODY:
          "Before you can disable Member Requirements, you have to either approve or kick all pending members. Approved members will still have to verify their email or phone (based on your Verification Level) to talk.",
        MEMBER_VERIFICATION_DISABLE_CONFIRM_APPROVE_ALL: "Approve All",
        MEMBER_VERIFICATION_CONFIRM_APPROVE_ALL_AND_DISABLE:
          "Approve all and disable",
        MEMBER_VERIFICATION_DISABLE_CONFIRM_KICK_ALL: "Kick All",
        MEMBER_VERIFICATION_VERIFICATION_FIELD_SETTINGS_TOOLTIP:
          "New members will also be required to pass your verification level requirements.",
        MEMBER_VERIFICATION_MEMBER_APPLICATION: "Member Application",
        MEMBER_VERIFICATION_MEMBER_APPLICATIONS: "Member Applications",
        GUILD_JOIN_REQUEST_STATUS_TOOLTIP_STARTED: "Membership Incomplete",
        GUILD_JOIN_REQUEST_STATUS_TOOLTIP_PENDING: "Membership In Review",
        GUILD_JOIN_REQUEST_STATUS_TOOLTIP_REJECTED: "Membership Rejected",
        GUILD_JOIN_REQUEST_STATUS_TOOLTIP_APPROVED: "Membership Approved",
        COMMUNITY: "Community",
        GUILD_SETTINGS_COMMUNITY: "Community Settings",
        GUILD_SETTINGS_COMMUNITY_ENABLE_COMMUNITY: "Enable Community",
        GUILD_SETTINGS_COMMUNITY_DISABLE_COMMUNITY: "Disable Community",
        GUILD_SETTINGS_COMMUNITY_DISABLE_COMMUNITY_DIALOG_TITLE:
          "Disabling Community",
        GUILD_SETTINGS_COMMUNITY_DISABLE_COMMUNITY_DIALOG_MESSAGE:
          "Are you sure you want to disable Community?",
        GUILD_SETTINGS_COMMUNITY_ADMINISTRATOR_ONLY:
          "Only server administrators are allowed to do this",
        GUILD_SETTINGS_COMMUNITY_DISABLE_COMMUNITY_DESCRIPTION:
          "This will remove specific features for Community Servers, like Server Discovery and Server Insights. ",
        GUILD_SETTINGS_COMMUNITY_UPSELL_HEADER:
          "Your server is now a Community Server!",
        GUILD_SETTINGS_COMMUNITY_UPSELL_BODY:
          "You now have access to additional tools that can help you moderate, run, and grow your server. Check out some of them to get started!",
        GUILD_SETTINGS_COMMUNITY_UPSELL_BUTTON_WELCOME_SCREEN:
          "Set up Welcome Screen",
        GUILD_SETTINGS_COMMUNITY_UPSELL_BUTTON_ONBOARDING: "Set up Onboarding",
        GUILD_SETTINGS_COMMUNITY_UPSELL_BUTTON_ADMIN_SERVER:
          "Join Discord's Admin Server",
        GUILD_SETTINGS_COMMUNITY_UPSELL_BUTTON_DISCOVERY: "Apply for Discovery",
        GUILD_SETTINGS_COMMUNITY_UPSELL_BUTTON_ANALYTICS:
          "Check Server Insights",
        GUILD_SETTINGS_COMMUNITY_RULES_CHANNEL_HELP:
          "Please select the channel that hosts your rules. This channel will by default start from the top and will feature a special header.",
        GUILD_SETTINGS_COMMUNITY_RULES_CHANNEL_HELP_MOBILE:
          "Please select the channel that hosts your rules. This channel will by default start from the top and will feature a special header.",
        GUILD_SETTINGS_COMMUNITY_MOD_CHANNEL_TITLE: "Community Updates Channel",
        GUILD_SETTINGS_COMMUNITY_MOD_CHANNEL_HELP:
          "This is the channel where Discord will send relevant updates for Community admins and moderators. As some info might be sensitive, we recommend selecting a role-restricted channel.",
        GUILD_SETTINGS_COMMUNITY_MOD_CHANNEL_HELP_MOBILE:
          "This is the channel where Discord will send updates for Community admins and moderators. ",
        GUILD_SETTINGS_COMMUNITY_MOD_CHANNEL_SELECTOR_TITLE:
          "Select a Community Updates channel",
        GUILD_SETTINGS_COMMUNITY_LOCALE_HELP:
          "This helps Discord customize features for you and your members.",
        GUILD_SETTINGS_COMMUNITY_INTRO_HEADER: "Are you building a Community?",
        GUILD_SETTINGS_COMMUNITY_INTRO_BODY:
          "Convert your server to a Community Server to access additional administrative tools that can better help you moderate, run, and grow your server.",
        GUILD_SETTINGS_COMMUNITY_INTRO_BODY_WITH_HELP_ARTICLE:
          "Convert to a Community Server to access additional administrative tools that help you moderate and grow your server. [Learn more.]({helpdeskArticle})",
        GUILD_SETTINGS_COMMUNITY_INTRO_DETAILS:
          "Community Servers are larger spaces where people with shared interests can come together.",
        GUILD_SETTINGS_COMMUNITY_INTRO_DETAILS_MOBILE:
          "Community Servers are larger spaces where people with shared interests can come together.",
        GUILD_SETTINGS_COMMUNITY_INTRO_LEARN_MORE:
          "Enabling Community does not make your server visible on Server Discovery. [Learn more here.]({helpdeskArticle})",
        GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_DISCOVERY_HEADER:
          "Grow your community",
        GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_DISCOVERY_BODY:
          "Apply to be in **$[Server Discovery](featureHook)** so more people can find your server directly on Discord.",
        GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_ANALYTICS_HEADER:
          "Keep members engaged",
        GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_ANALYTICS_BODY:
          "Access tools like **$[Server Insights](featureHook) $[info](infoHook)** that can better help you moderate and keep your server engaged.",
        GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_ANALYTICS_BODY_MOBILE:
          "Access tools like **$[Server Insights](featureHook)** that can better help you moderate and keep your server engaged.",
        GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_ANALYTICS_TOOLTIP:
          "Only for servers above 500 members",
        GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_STAY_INFORMED_HEADER:
          "Stay informed",
        GUILD_SETTINGS_COMMUNITY_INTRO_UPSELL_STAY_INFORMED_BODY:
          "Get direct updates about new features built for communities from Discord.",
        GUILD_SETTINGS_COMMUNITY_DISABLE_PUBLIC_CONFIRM_DEFAULT_TITLE:
          "Are you sure?",
        GUILD_SETTINGS_PARTNER_DISABLE_PUBLIC_CONFIRM_TEXT:
          "Are you sure? This will remove this server from the Partner Program.",
        GUILD_SETTINGS_PARTNER_AND_DISCOVERY_DISABLE_PUBLIC_CONFIRM_TEXT:
          "Are you sure? This will remove the server from the Partner Program and Server Discovery.",
        GUILD_SETTINGS_DISCOVERY_DISABLE_PUBLIC_CONFIRM_TEXT:
          "Disabling Community will also remove your server from Server Discovery.",
        GUILD_SETTINGS_COMMUNITY_DISABLE_MEMBER_VERIFICATION:
          "You must disable Member Requirements first before you can disable Community.",
        GUILD_SETTINGS_COMMUNITY_DISABLE_MEMBER_VERIFICATION_CONFIRM:
          "Go to Member Requirements",
        GUILD_SETTINGS_PARTNER_INTRO_HEADER: "Discord Partner Program",
        GUILD_SETTINGS_PARTNER_PAUSED_INTRO_HEADER:
          "Discord Partner Program (Currently Paused)",
        GUILD_SETTINGS_PARTNER_BUTTON_TOOLTIP_PAUSED:
          "Partner Program applications are currently paused.",
        GUILD_SETTINGS_PARTNER_INTRO_BODY:
          "We want to support communities that invest time and effort on Discord. Get rewarded for creating an engaged community with our Partner Program. [Learn more.]({helpdeskArticle})",
        GUILD_SETTINGS_PARTNER_INTRO_UPSELL_BRANDING_HEADER: "Unique Branding",
        GUILD_SETTINGS_PARTNER_INTRO_UPSELL_BRANDING_BODY:
          "Personalize your server with a Custom URL, Server Banner, and Invite Splash.",
        GUILD_SETTINGS_PARTNER_INTRO_UPSELL_PERKS_HEADER: "Partner-only Perks",
        GUILD_SETTINGS_PARTNER_INTRO_UPSELL_PERKS_BODY:
          "Get Discord Nitro, rewards for your community, and access to the Partners-only server.",
        GUILD_SETTINGS_PARTNER_INTRO_UPSELL_RECOGNITION_HEADER: "Be Recognized",
        GUILD_SETTINGS_PARTNER_INTRO_UPSELL_RECOGNITION_BODY:
          "Receive a special badge on your server and stand out from the crowd on our Discovery page.",
        GUILD_SETTINGS_PARTNER_INTRO_APPLY_BUTTON: "Apply for Partnership",
        GUILD_SETTINGS_PARTNER_INTRO_APPLY_BUTTON_TOOLTIP_ONLY_OWNER:
          "Only the server owner can apply.",
        GUILD_SETTINGS_PARTNER_INTRO_APPLY_BUTTON_TOOLTIP_PENDING:
          "Your application is pending review.",
        GUILD_SETTINGS_PARTNER_INTRO_APPLY_BUTTON_TOOLTIP_REJECTED:
          "Your application has been denied at this time.",
        GUILD_SETTINGS_PARTNER_INTRO_APPLY_DETAILS:
          "To apply, refer to the requirements below. Note that these are just the minimum requirements to apply, and acceptance is not guaranteed.\n\nAll Partnered servers must abide by the [Partner Code of Conduct]({helpdeskArticle}).",
        GUILD_SETTINGS_PARTNER_INTRO_PENDING:
          "Your server’s Partner application is $[pending review.](pendingHook) We hope to get back to you soon! Make sure to check your email.",
        GUILD_SETTINGS_PARTNER_INTRO_COOLDOWN:
          "You must wait two months before you can reapply.",
        GUILD_SETTINGS_PARTNER_INTRO_COOLDOWN_COUNTER:
          "You will be able to reapply in {numDays, number} days.",
        GUILD_SETTINGS_PARTNER_INTRO_REJECTED:
          "Your server’s Partner application has been $[denied](warningHook) at this time. Check the server owner’s email for more detail.",
        GUILD_SETTINGS_PARTNER_NOT_VERIFIED:
          "You must verify your email before you can see the requirements.",
        GUILD_SETTINGS_PARTNER_CHECKLIST_PASSING_HEADER: "Great work!",
        GUILD_SETTINGS_PARTNER_CHECKLIST_PASSING_SUBHEADER:
          "Your server is eligible to apply for the Partner Program.",
        GUILD_SETTINGS_PARTNER_CHECKLIST_FAILING_HEADER: "Not yet!",
        GUILD_SETTINGS_PARTNER_CHECKLIST_FAILING_SUBHEADER:
          "Your server $[is not](warningHook) currently eligible to apply for the Partner Program.",
        GUILD_SETTINGS_PARTNER_CHECKLIST_SIZE: "{minMembers}+ Members",
        GUILD_SETTINGS_PARTNER_CHECKLIST_SIZE_FAILING: "Not Enough Members",
        GUILD_SETTINGS_PARTNER_CHECKLIST_SIZE_DESCRIPTION:
          "For now, new Partnered servers must have at least {minMembers} members.",
        GUILD_SETTINGS_PARTNER_CHECKLIST_SIZE_DESCRIPTION_FAILING:
          "For now, new Partnered servers must have at least {minMembers} members.",
        GUILD_SETTINGS_PARTNER_CHECKLIST_AGE_DESCRIPTION:
          "Your server must be at least {minimumGuildAge, plural, one {1 week} other {{minimumGuildAge} weeks}} old.",
        GUILD_SETTINGS_PARTNER_CHECKLIST_AGE_DESCRIPTION_FAILING:
          "Your server must be at least {minimumGuildAge, plural, one {1 week} other {{minimumGuildAge} weeks}} old. Please check back on {passDate}.",
        GUILD_SETTINGS_PARTNER_CHECKLIST_HEALTHY_DESCRIPTION:
          "Your activity and retention metrics pass the minimum requirements to apply.",
        GUILD_SETTINGS_PARTNER_CHECKLIST_HEALTHY_DESCRIPTION_PENDING:
          "Partnered servers must meet basic activity requirements. This takes time to calculate for newer or smaller servers, $[so check back in about a week.](checkBackHook)",
        GUILD_SETTINGS_PARTNER_CHECKLIST_HEALTHY_DESCRIPTION_PENDING_SIZE:
          "Partnered servers must meet basic activity requirements. We're unable to calculate this until your server has at least {minMembers} members.",
        GUILD_SETTINGS_PARTNER_CHECKLIST_HEALTHY_DESCRIPTION_FAILING:
          "Your server does not currently pass the minimum activity requirements for Partnership.",
        GUILD_SETTINGS_PARTNER_CHECKLIST_HEALTH_VIEW_DETAILS:
          "For more details, go to the Partner Program tab in Server Insights.",
        GUILD_SETTINGS_PARTNER_CHECKLIST_ONBOARDING_NAME:
          "Set Up Community Onboarding",
        GUILD_SETTINGS_PARTNER_CHECKLIST_ONBOARDING_DESCRIPTION:
          "Onboarding creates a welcoming experience for new members and is a great way to help them engage and retain in your community. (This is Optional) [Enable Onboarding in Server Settings](onClick)",
        ONBOARDING_ADVANCED_MODE_HEADER: "Advanced Server Setup",
        ONBOARDING_ADVANCED_MODE_TOGGLE: "Switch to Advanced Mode",
        ONBOARDING_ADVANCED_MODE_ENABLE: "Enable",
        ONBOARDING_ADVANCED_MODE_DESCRIPTION:
          "Have an advanced server setup? Enable this mode to meet requirements via Default Channels and Questions combined.",
        ONBOARDING_DEFAULT_MODE_HEADER: "Disabled Advanced Server Setup",
        ONBOARDING_DEFAULT_MODE_TOGGLE: "Switch to Regular Mode",
        ONBOARDING_DEFAULT_MODE_DESCRIPTION:
          "Return to the regular requirements where 7 Default Channels are needed, 5 of which must be chattable.",
        GUILD_SETTINGS_DISCOVERY_HEADER:
          "Grow your community with Server Discovery",
        GUILD_SETTINGS_DISCOVERY_PAGE_DESCRIPTION:
          "Getting listed in [Server Discovery](onLinkClick) allows anyone to find and join your server.",
        GUILD_SETTINGS_DISCOVERY_PAGE_DESCRIPTION_SUBHEADING:
          "Make a great first impression by following our [Server Discovery guidelines](onGuidelinesClick).",
        GUILD_SETTINGS_DISCOVERY_PREVIEW_DESCRIPTION:
          "Tell people what your server's all about with a description!",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_LOADING:
          "Checking if your server passes requirements...",
        GUILD_SETTINGS_DISCOVERY_REQUIREMENTS_NOT_MET:
          "Your server does not meet all the requirements.",
        GUILD_SETTINGS_DISCOVERY_PENDING_HEALTHY:
          "We're still waiting on your health metrics!",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_GOOD_STANDING:
          "Great work! Your server passes all the requirements to be in Server Discovery.",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_DOES_NOT_PASS:
          "Your server currently **$[does not](doesNotHook)** meet the requirements for Server Discovery",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_SAFE: "Safe Environment",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_SAFE_FAILING:
          "Flagged By Trust & Safety",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_SAFE_DESCRIPTION:
          "Thanks for abiding by our Community Guidelines and keeping your server safe!",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_SAFE_DESCRIPTION_FAILING_GUIDELINES:
          "Your server was in violation of our [Terms of Service]({termsURL}) or [Community Server Guidelines]({guidelinesURL}).",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY:
          "Passed Server Activity Requirements",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_PENDING:
          "Waiting on Server Activity Metrics",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_FAILING:
          "Failed Server Activity Requirements",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_DESCRIPTION:
          "Your community metrics look good! Your server has enough members that regularly visit and talk.",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_DESCRIPTION_PENDING:
          "Servers in Discovery must meet certain activity requirements. This takes time to calculate for newer or smaller servers, $[so check back in about a week.](checkBackHook)",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_DESCRIPTION_PENDING_SIZE:
          "We're unable to calculate your server's activity metrics until your server has at least {minMembers} members. Servers in Discovery must meet certain activity requirements.",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTHY_DESCRIPTION_FAILING:
          "Uh oh, your server does not currently pass our activity requirements.",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTH_VIEW_DETAILS:
          "Click here for more details",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_HEALTH_DEFINITIONS_INTRO:
          "To ensure we're only recommending active servers to Discord users, servers in Discovery are required to have a minimum activity level.",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_VISITOR_FAILING_ACTION:
          "Increase number of weekly visitors",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_VISITOR_FAILING_ACTION_DETAILS:
          "A visitor is someone who has clicked into the server and has viewed at least 1 channel. Try to provide more reasons for members to drop by, like hosting regular community events.",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_VISITOR_PROGRESS_LABEL:
          "avg weekly visitors in your server",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_COMMUNICATOR_FAILING_ACTION:
          "Increase number of weekly communicators",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_COMMUNICATOR_FAILING_ACTION_DETAILS:
          "A communicator is someone who has talked (voice or text) in the server. Hosting community events and seeding discussion topics are great ways to encourage more people to talk.",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_COMMUNICATOR_PROGRESS_LABEL:
          "avg weekly communicators in your server",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_SCORE_EXPLAIN:
          "Calculated as a rolling avg over the past 8 weeks, so changes may take a few weeks to show. Only users who have been on Discord for 8 weeks+ are counted as visitors or communicators.",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_ENGAGEMENT_FAILING:
          "Your server needs more members who visit and talk weekly.",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_RETENTION_FAILING:
          "Your retention is too low. Try improving your new member onboarding experience.",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_RETENTION_FAILING_ACTION:
          "Improve new member experience",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_RETENTION_FAILING_ACTION_DETAILS_UPDATED:
          "Servers that gain more than 10 new members per week are required to have a new member retention of 10%. At least 1 out of 10 new people that join should stick around for a week+.\n\nTake a look at your server through the eyes of a new member. Are there areas where they might get confused and lost?",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_RETENTION_PROGRESS_LABEL:
          "avg new member retention in your server",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_PROGRESS_REQUIREMENT_LABEL:
          "min required",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_SIZE: "{minMembers}+ Members",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_SIZE_FAIL:
          "Fewer Than {minMembers} Members",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_SIZE_DESCRIPTION_FAILING_PARTNERS:
          "Unfortunately, Discovery is limited to only servers with more than {minMembers} members.",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_SIZE_DESCRIPTION_FAIL:
          "Your server must have at least {minMembers} members to be eligible.",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_NSFW: "No Bad Words",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_NSFW_FAILING: "Bad Words Found",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_NSFW_DESCRIPTION:
          "Your server name, description, and channel names look clean!",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_2FA:
          "2FA Requirement For Moderation Enabled ",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_CHANGE_CHANNEL_NAMES_2:
          "You need to change $[one or more channel names](channelHook)",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_CHANGE_DESCRIPTION:
          "You need to change your $[description](descriptionHook)",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_CHANGE_NAME:
          "You need to change your $[server name](nameHook)",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_2FA_FAILING:
          "Please Enable the [2FA Requirement For Moderation] Setting",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_2FA_DESCRIPTION:
          "Members with moderation powers (e.g. admins or mods) are required to have 2FA enabled to perform moderation actions.",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_2FA_DESCRIPTION_FAILING:
          "This setting will require all members with moderation powers to have 2FA enabled before they can perform moderation actions. This can help protect against compromised admin or mod accounts. [Enable at the bottom of the Safety Setup tab.](onClick)",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_AGE: "Meets Age Requirement",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_AGE_FAILING: "Server Too Young",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_AGE_DESCRIPTION:
          "Servers in Discovery have to be at least {minimumGuildAge, plural, one {1 week} other {{minimumGuildAge} weeks}} old.",
        GUILD_SETTINGS_DISCOVERY_CHECKLIST_AGE_DESCRIPTION_FAILING:
          "Servers in Discovery need to be at least {minimumGuildAge, plural, one {1 week} other {{minimumGuildAge} weeks}} old. Please check back on {passDate}.",
        DISCOVERY: "Discovery",
        DISCOVERY_LANDING_PAGE: "Server Web Page",
        DISCOVERY_LANDING_PAGE_DESCRIPTION:
          "Help people find and join your community more easily with a landing page on [discord.com]({discordURL}). Your page won’t go live until it’s published and can be disabled at any time.",
        DISCOVERY_LANDING_PAGE_LEARN_MORE: "[Learn more]({learnMoreURL}).",
        DISCOVERY_LANDING_PAGE_CATEGORY_TITLE: "Category",
        DISCOVERY_LANDING_PAGE_CATEGORY_DESCRIPTION:
          "Categories help Discord users discover communities that interest them. If you’ve already set one that you’re happy with, there’s no need to change it.",
        DISCOVERY_LANDING_PAGE_COVER_IMAGE_DESCRIPTION:
          "This image will be displayed on both your Discovery Listing and Server Web Page. The recommended minimum size is 1920x1080 and recommended aspect ratio is 16:9.",
        DISCOVERY_LANDING_PAGE_SERVER_DESCRIPTION:
          "Let people know what your server is about in one to two lines.",
        DISCOVERY_LANDING_PAGE_SERVER_DESCRIPTION_HINT:
          "This server is all about hanging with friends, sharing pet pics, and Gregorian chanting.",
        DISCOVERY_LANDING_PAGE_ABOUT_TITLE: "About your community",
        DISCOVERY_LANDING_PAGE_ABOUT_DESCRIPTION:
          "Describe your community in more depth. What does a prospective member need to know, and why should they join?",
        DISCOVERY_LANDING_PAGE_ABOUT_HINT:
          "This server is all about hanging with friends, sharing pet pics, and Gregorian chanting.",
        DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_TITLE:
          "Reasons to join your server",
        DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_DESCRIPTION:
          "What are the fun activities that happen in your community? These will display on your server’s web page.",
        DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_PLACEHOLDER_ONE:
          "ex: We hold weekly study group sessions",
        DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_PLACEHOLDER_TWO:
          "ex: Tips for keeping your house plants healthy",
        DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_PLACEHOLDER_THREE:
          "ex: Feedback on your art",
        DISCOVERY_LANDING_PAGE_REASONS_TO_JOIN_PLACEHOLDER_FOUR:
          "ex: Find other players for your group",
        DISCOVERY_LANDING_PAGE_SOCIAL_LINKS_TITLE: "Social Links",
        DISCOVERY_LANDING_PAGE_SOCIAL_LINKS_DESCRIPTION:
          "Display up to 9 of your official social media accounts on your page by linking them here.",
        DISCOVERY_LANDING_PAGE_SOCIAL_LINKS_DROPDOWN_PLACEHOLDER:
          "Select a social platform",
        DISCOVERY_LANDING_PAGE_SOCIAL_LINKS_HINT:
          "ex: https://twitter.com/discord",
        DISCOVERY_LANDING_PAGE_SOCIAL_LINKS_BUTTON_ADD_ANOTHER: "Add another",
        DISCOVERY_LANDING_PAGE_CHECKLIST_TITLE: "Landing Page",
        DISCOVERY_LANDING_PAGE_CHECKLIST_PUBLISH: "Publish Landing Page",
        DISCOVERY_LANDING_PAGE_CHECKLIST_REQUIREMENTS: "Requirements",
        DISCOVERY_LANDING_PAGE_CHECKLIST_UPLOAD_COVER_IMAGE:
          "Upload a cover image",
        DISCOVERY_LANDING_PAGE_CHECKLIST_SHORT_DESCRIPTION: "Short description",
        DISCOVERY_LANDING_PAGE_CHECKLIST_ABOUT: "About your server",
        DISCOVERY_LANDING_PAGE_CHECKLIST_REASONS: "Reasons to join",
        DISCOVERY_LANDING_PAGE_DISABLE_TITLE: "Disable landing page",
        DISCOVERY_LANDING_PAGE_DISABLE_DESCRIPTION:
          "Removes your landing page from the web. Publishing your page again will reenable it.",
        DISCOVERY_LANDING_PAGE_DISABLE_BUTTON: "Disable landing page",
        DISCOVERY_LANDING_PAGE_UPSELL_TITLE: "Server Web Pages",
        DISCOVERY_LANDING_PAGE_UPSELL_DESCRIPTION:
          "Showcase your community with your very own webpage!",
        DISCOVERY_LANDING_PAGE_UPSELL_BUTTON_ACCEPT: "Check it out",
        DISCOVERY_LANDING_PAGE_UPSELL_BUTTON_DISMISS: "Dismiss",
        DISCOVERY_LANDING_PAGE_PUBLISHED_URL_TITLE: "Published Page Url",
        DISCOVERY_LANDING_PAGE_PUBLISHED_URL_VIEW_PAGE_BUTTON: "View Page",
        GUILD_SETTINGS_ENABLE_DISCOVERABLE: "Enable Discovery",
        GUILD_SETTINGS_DISABLE_DISCOVERABLE: "Disable Discovery",
        GUILD_SETTINGS_SET_UP_DISCOVERY: "Set Up Discovery",
        FORM_HELP_ENABLE_DISCOVERABLE:
          "This lists your server in Server Discovery, which allows people to find your server via search or recommendations.",
        FORM_HELP_DISCOVERABLE_CHANGE_TIME:
          "May take up to 15 minutes to take effect.",
        FORM_LABEL_DISCOVERY_COVER_IMAGE: "Discovery listing cover image",
        FORM_HELP_DISCOVERY_COVER_IMAGE:
          "This image will be displayed on your Discovery Listing. The recommended minimum size is 1920x1080 and recommended aspect ratio is 16:9.",
        FORM_LABEL_DISCOVERY_RULES_CHANNEL: "Rules or guidelines channel",
        GUILD_SETTINGS_DISCOVERY_DISQUALIFIED:
          "This server has been removed from Discovery.",
        GUILD_SETTINGS_DISCOVERY_DISQUALIFIED_DESCRIPTION:
          "This server has failed to meet the requirements below and has been automatically removed from Discovery. Don't worry, you can rejoin once the server passes all requirements again.\n\nActivity requirements are recalculated weekly.",
        GUILD_SETTINGS_DISCOVERY_ADMIN_ONLY:
          "Only server administrators can enable and disable Discovery.",
        GUILD_SETTINGS_DISCOVERY_LOCALE_HELP:
          "Discord will prioritize this server in search to users who speak the selected language.",
        GUILD_SETTINGS_DISCOVERY_PRIMARY_CATEGORY_TITLE: "Server Category",
        GUILD_SETTINGS_DISCOVERY_PRIMARY_CATEGORY_DESCRIPTION:
          "Categories help Discord organize servers so that it's easier for people to discover communities that interest them. You can select 1 primary category and up to 5 subcategories.",
        GUILD_SETTINGS_DISCOVERY_SUBCATEGORY_TITLE: "Subcategories",
        GUILD_SETTINGS_DISCOVERY_SEARCH_KEYWORDS_TITLE: "Search Keywords",
        GUILD_SETTINGS_DISCOVERY_SEARCH_KEYWORDS_DESCRIPTION:
          "You can add up to 10 keywords to help people find your server in search. Keep in mind that search is primarily powered by your server's title and description. Keywords are secondary.\n\nKeywords can be useful if topics or functions of your server have alternative spelling or acronyms (e.g. LoL for League of Legends).",
        GUILD_SETTINGS_DISCOVERY_EMOJI_DISCOVERABILITY_TITLE:
          "Show Emoji/Sticker Info When Clicked",
        GUILD_SETTINGS_DISCOVERY_EMOJI_DISCOVERABILITY_DESCRIPTION:
          "This allows info to appear when clicking on a custom emoji or sticker from your server in any chat. Users will be able to see and join your server via the information that is displayed.",
        GUILD_SETTINGS_DISCOVERY_EMOJI_DISCOVERABILITY_ENABLE:
          "Enable Emoji/Sticker Information",
        GUILD_SETTINGS_DISCOVERY_EMOJI_DISCOVERABILITY_DISABLE:
          "Disable Emoji/Sticker Information",
        CHANNEL_NOTICE_SERVER_DISCOVERY_NEWLY_ELIGIBLE:
          "Your server is now eligible for Server Discovery!",
        CHANNEL_NOTICE_SERVER_DISCOVERY_NOT_YET_ELIGIBLE:
          "Server Discovery is now available to servers with 1K+ members!",
        CHANNEL_NOTICE_SERVER_DISCOVERY_ALMOST_DONE:
          "You're almost done setting up Server Discovery",
        CHANNEL_NOTICE_ELIGIBILITY_CTA: "Check Eligibility",
        SERVER_DISCOVERY_SETUP_SIDEBAR_HEADLINE:
          "Get your server ready for Discovery",
        SERVER_DISCOVERY_DESCRIPTION_PAGE_HEADER: "Describe your server",
        SERVER_DISCOVERY_DESCRIPTION_PAGE_SUBHEADING:
          "Let people know what your community is all about",
        SERVER_DISCOVERY_SERVER_DESCRIPTION_INPUT_SUBLABEL:
          "This will appear anywhere an invite link is shared, so keep it clean.",
        SERVER_DISCOVERY_DESCRIPTION: "Description",
        SERVER_DISCOVERY_CATEGORY: "Category",
        SERVER_DISCOVERY_SEARCH_SUBHEADING:
          "Help people find your server in search results",
        SERVER_DISCOVERY_CATEGORY_INPUT_SUBLABEL:
          "Choose a subject area that best fits your server.",
        SERVER_DISCOVERY_SUBCATEGORY_INPUT_LABEL: "Subcategory - optional",
        SERVER_DISCOVERY_SUBCATEGORY_INPUT_SUBLABEL:
          "Get more specific, if you want. You can add up to 5.",
        SERVER_DISCOVERY_TAGS: "Tags",
        SERVER_DISCOVERY_TAGS_INPUT_SUBLABEL:
          "In Server Discovery, you can search by name, description, and tags. You can add up to 10.",
        SERVER_DISCOVERY_TAGS_INPUT_PLACEHOLDER: "Tags go here.",
        SERVER_DISCOVERY_POPULAR_TAGS: "Popular Tags",
        SERVER_DISCOVERY_BLOCKED_WORD_LEARN_MORE:
          "This contains a blocked word. [Learn more](onLearnMoreClick).",
        SERVER_DISCOVERY_TAGS_ERROR_MSG_DASHES_ONLY:
          "Dashes are the only special character allowed.",
        SERVER_DISCOVERY_AGREE_TO_RULES: "Agree to rules",
        SERVER_DISCOVERY_RULES_FORM_LABEL: "Rules",
        SERVER_DISCOVERY_RULES_PAGE_SUBHEADING:
          "Help keep Server Discovery safe for everyone",
        SERVER_DISCOVERY_RULES_HEALTHY_ENV_HEADING:
          "Foster a healthy and positive environment",
        SERVER_DISCOVERY_RULES_HEALTHY_ENV_DESCRIPTION:
          "Create a welcoming space where harassment, toxicity, and illegal activity is not promoted or tolerated.",
        SERVER_DISCOVERY_RULES_SEXUAL_CONTENT_HEADING:
          "Do not host graphic or sexual content",
        SERVER_DISCOVERY_RULES_SEXUAL_CONTENT_DESCRIPTION:
          "All server content must be appropriate for ages 13+.",
        SERVER_DISCOVERY_RULES_COMPLY_GUIDELINES:
          "Comply with Discord's [Community Guidelines](onCommunityGuidelinesClick) and [Discovery Guidelines](onDiscoveryGuidelinesClick)",
        SERVER_DISCOVERY_RULES_COMPLY_GUIDELINES_DESCRIPTION:
          "Violating our policies may result in penalties against your server, including removal from Discovery.",
        SERVER_DISCOVERY_SETUP_CONFIRMATION_PAGE_HEADER: "Sweet, you made it",
        SERVER_DISCOVERY_SETUP_CONFIRMATION_PAGE_SUBHEADING:
          "Your server now looks like this to all of Discord. Need to change something? Head to [Server Settings](onServerSettingsClick).",
        SERVER_DISCOVERY_TOOLTIP_TITLE: "Grow your community faster",
        SERVER_DISCOVERY_TOOLTIP_DESCRIPTION:
          "Servers with {count, number}+ members are now eligible to join Server Discovery.",
        SERVER_DISCOVERY_SUGGESTED_TAG_BTS: "bts",
        SERVER_DISCOVERY_SUGGESTED_TAG_COMMUNITY: "community",
        SERVER_DISCOVERY_SUGGESTED_TAG_EDM: "edm",
        SERVER_DISCOVERY_SUGGESTED_TAG_ESPORTS: "esports",
        SERVER_DISCOVERY_SUGGESTED_TAG_FIVEM: "fivem",
        SERVER_DISCOVERY_SUGGESTED_TAG_FORTNITE: "fortnite",
        SERVER_DISCOVERY_SUGGESTED_TAG_GAMING: "gaming",
        SERVER_DISCOVERY_SUGGESTED_TAG_HIPHOP: "hiphop",
        SERVER_DISCOVERY_SUGGESTED_TAG_KPOP: "kpop",
        SERVER_DISCOVERY_SUGGESTED_TAG_LEAGUEOFLEGENDS: "leagueoflegends",
        SERVER_DISCOVERY_SUGGESTED_TAG_METAL: "metal",
        SERVER_DISCOVERY_SUGGESTED_TAG_MINECRAFT: "minecraft",
        SERVER_DISCOVERY_SUGGESTED_TAG_MUSIC_PRODUCTION: "music-production",
        SERVER_DISCOVERY_SUGGESTED_TAG_RAP: "rap",
        SERVER_DISCOVERY_SUGGESTED_TAG_ROBLOX: "roblox",
        SERVER_DISCOVERY_SUGGESTED_TAG_ROLEPLAY: "roleplay",
        SERVER_DISCOVERY_SUGGESTED_TAG_SINGING: "singing",
        SERVER_DISCOVERY_SUGGESTED_TAG_3D: "3d",
        SERVER_DISCOVERY_SUGGESTED_TAG_AESTHETIC: "aesthetic",
        SERVER_DISCOVERY_SUGGESTED_TAG_ANIMATION: "animation",
        SERVER_DISCOVERY_SUGGESTED_TAG_ANIME: "anime",
        SERVER_DISCOVERY_SUGGESTED_TAG_APPS: "apps",
        SERVER_DISCOVERY_SUGGESTED_TAG_ART: "art",
        SERVER_DISCOVERY_SUGGESTED_TAG_BASKETBALL: "basketball",
        SERVER_DISCOVERY_SUGGESTED_TAG_BEVERAGE: "beverage",
        SERVER_DISCOVERY_SUGGESTED_TAG_BITCOIN: "bitcoin",
        SERVER_DISCOVERY_SUGGESTED_TAG_BODYBUILDING: "bodybuilding",
        SERVER_DISCOVERY_SUGGESTED_TAG_BOTS: "bots",
        SERVER_DISCOVERY_SUGGESTED_TAG_CALISTHENICS: "calisthenics",
        SERVER_DISCOVERY_SUGGESTED_TAG_CLOTHING: "clothing",
        SERVER_DISCOVERY_SUGGESTED_TAG_CODING: "coding",
        SERVER_DISCOVERY_SUGGESTED_TAG_COLLEGE: "college",
        SERVER_DISCOVERY_SUGGESTED_TAG_CROSSFIT: "crossfit",
        SERVER_DISCOVERY_SUGGESTED_TAG_CRYPTOCURRENCY: "cryptocurrency",
        SERVER_DISCOVERY_SUGGESTED_TAG_CUTE: "cute",
        SERVER_DISCOVERY_SUGGESTED_TAG_DEFI: "defi",
        SERVER_DISCOVERY_SUGGESTED_TAG_DESIGN: "design",
        SERVER_DISCOVERY_SUGGESTED_TAG_DISCORD_BOT: "discord bot",
        SERVER_DISCOVERY_SUGGESTED_TAG_DISNEY: "disney",
        SERVER_DISCOVERY_SUGGESTED_TAG_DISNEYWORLD: "disneyworld",
        SERVER_DISCOVERY_SUGGESTED_TAG_DRAWING: "drawing",
        SERVER_DISCOVERY_SUGGESTED_TAG_EDUCATION: "education",
        SERVER_DISCOVERY_SUGGESTED_TAG_EMOJI: "emoji",
        SERVER_DISCOVERY_SUGGESTED_TAG_EMOTES: "emotes",
        SERVER_DISCOVERY_SUGGESTED_TAG_ENGLISH: "english",
        SERVER_DISCOVERY_SUGGESTED_TAG_ETHEREUM: "ethereum",
        SERVER_DISCOVERY_SUGGESTED_TAG_EVENTS: "events",
        SERVER_DISCOVERY_SUGGESTED_TAG_EXERCISE: "exercise",
        SERVER_DISCOVERY_SUGGESTED_TAG_FANTASY_FOOTBALL: "fantasy-football",
        SERVER_DISCOVERY_SUGGESTED_TAG_FASHION: "fashion",
        SERVER_DISCOVERY_SUGGESTED_TAG_FOOD: "food",
        SERVER_DISCOVERY_SUGGESTED_TAG_FOOTBALL: "football",
        SERVER_DISCOVERY_SUGGESTED_TAG_FOREX: "forex",
        SERVER_DISCOVERY_SUGGESTED_TAG_FORMULA1: "formula1",
        SERVER_DISCOVERY_SUGGESTED_TAG_FRIENDS: "friends",
        SERVER_DISCOVERY_SUGGESTED_TAG_FUN: "fun",
        SERVER_DISCOVERY_SUGGESTED_TAG_GITHUB: "github",
        SERVER_DISCOVERY_SUGGESTED_TAG_GIVEAWAYS: "giveaways",
        SERVER_DISCOVERY_SUGGESTED_TAG_GYM: "gym",
        SERVER_DISCOVERY_SUGGESTED_TAG_HARDWARE: "hardware",
        SERVER_DISCOVERY_SUGGESTED_TAG_HOMEWORK: "homework",
        SERVER_DISCOVERY_SUGGESTED_TAG_HYPEBEAST: "hypebeast",
        SERVER_DISCOVERY_SUGGESTED_TAG_INVESTING: "investing",
        SERVER_DISCOVERY_SUGGESTED_TAG_JAVASCRIPT: "javascript",
        SERVER_DISCOVERY_SUGGESTED_TAG_LANGUAGE: "language",
        SERVER_DISCOVERY_SUGGESTED_TAG_LEARNING: "learning",
        SERVER_DISCOVERY_SUGGESTED_TAG_LGBTQ: "lgbtq",
        SERVER_DISCOVERY_SUGGESTED_TAG_LINUX: "linux",
        SERVER_DISCOVERY_SUGGESTED_TAG_MANGA: "manga",
        SERVER_DISCOVERY_SUGGESTED_TAG_MEMES: "memes",
        SERVER_DISCOVERY_SUGGESTED_TAG_MENTAL_HEALTH: "mental-health",
        SERVER_DISCOVERY_SUGGESTED_TAG_NBA: "nba",
        SERVER_DISCOVERY_SUGGESTED_TAG_NFL: "nfl",
        SERVER_DISCOVERY_SUGGESTED_TAG_NFT: "nft",
        SERVER_DISCOVERY_SUGGESTED_TAG_NITRO: "nitro",
        SERVER_DISCOVERY_SUGGESTED_TAG_NUTRITION: "nutrition",
        SERVER_DISCOVERY_SUGGESTED_TAG_OPENSOURCE: "opensource",
        SERVER_DISCOVERY_SUGGESTED_TAG_OPTIONS: "options",
        SERVER_DISCOVERY_SUGGESTED_TAG_PHOTOGRAPHY: "photography",
        SERVER_DISCOVERY_SUGGESTED_TAG_PREMIER_LEAGUE: "premier-league",
        SERVER_DISCOVERY_SUGGESTED_TAG_PROGRAMMING: "programming",
        SERVER_DISCOVERY_SUGGESTED_TAG_RACING: "racing",
        SERVER_DISCOVERY_SUGGESTED_TAG_REDDIT: "reddit",
        SERVER_DISCOVERY_SUGGESTED_TAG_SCHOOL: "school",
        SERVER_DISCOVERY_SUGGESTED_TAG_SELF_IMPROVEMENT: "self-improvement",
        SERVER_DISCOVERY_SUGGESTED_TAG_SNACKS: "snacks",
        SERVER_DISCOVERY_SUGGESTED_TAG_SNEAKERS: "sneakers",
        SERVER_DISCOVERY_SUGGESTED_TAG_SOCCER: "soccer",
        SERVER_DISCOVERY_SUGGESTED_TAG_SOCIAL: "social",
        SERVER_DISCOVERY_SUGGESTED_TAG_SOFTWARE: "software",
        SERVER_DISCOVERY_SUGGESTED_TAG_SPORTS: "sports",
        SERVER_DISCOVERY_SUGGESTED_TAG_STOCKS: "stocks",
        SERVER_DISCOVERY_SUGGESTED_TAG_STREAMER: "streamer",
        SERVER_DISCOVERY_SUGGESTED_TAG_STREETWEAR: "streetwear",
        SERVER_DISCOVERY_SUGGESTED_TAG_STUDY: "study",
        SERVER_DISCOVERY_SUGGESTED_TAG_STYLE: "style",
        SERVER_DISCOVERY_SUGGESTED_TAG_SUPPORT: "support",
        SERVER_DISCOVERY_SUGGESTED_TAG_SUPREME: "supreme",
        SERVER_DISCOVERY_SUGGESTED_TAG_TECH: "tech",
        SERVER_DISCOVERY_SUGGESTED_TAG_TRADING: "trading",
        SERVER_DISCOVERY_SUGGESTED_TAG_TRAVEL: "travel",
        SERVER_DISCOVERY_SUGGESTED_TAG_TWITCH: "twitch",
        SERVER_DISCOVERY_SUGGESTED_TAG_VALORANT: "valorant",
        SERVER_DISCOVERY_SUGGESTED_TAG_YEEZY: "yeezy",
        SERVER_DISCOVERY_SUGGESTED_TAG_YOUTUBE: "youtube",
        CHANNELS: "Channels",
        SORT: "Sort",
        SORTING: "Sorting",
        REORDERING_CHANNELS: "Reordering Channels",
        REORDER: "Reorder",
        SELECT_SORT_MODE: "Select Sort Mode",
        GUILD_SECURITY_REQ_MFA_LABEL: "Require 2FA for moderator actions",
        GUILD_SECURITY_REQ_MFA_BODY:
          "When enabled, this requires members with moderation powers to have two-factor authentication enabled on their account in order to take moderation actions (e.g. kick, ban, and delete message). This can help prevent malicious people who compromise a mod or admin's account from taking destructive actions. **This setting can only be changed by the server owner if they have 2FA enabled on their account**.",
        GUILD_SETTINGS_REQ_MFA_LABEL: "Require 2FA for moderator actions",
        GUILD_SETTINGS_REQ_MFA_BODY:
          "Moderators must have two-factor authentication enabled to ban, kick, or timeout members and delete messages. Only the server owner can change this setting if they have 2FA enabled.",
        GUILD_SETTINGS_REQ_MFA_TOOLTIP:
          "In order to change this setting, you must have 2FA enabled on your account. [Enable it here.](onClick)",
        GUILD_SECURITY_REQ_MFA_ENABLE: "[Enable on your account.](onClick)",
        GUILD_SECURITY_REQ_MFA_TURN_ON: "Enable 2FA Requirement",
        GUILD_SECURITY_REQ_MFA_TURN_OFF: "Disable 2FA Requirement",
        GUILD_SECURITY_REQ_MFA_GUILD_ENABLE: "Enable 2FA Requirement",
        GUILD_SECURITY_REQ_MFA_GUILD_DISABLE: "Disable 2FA Requirement",
        GUILD_SECURITY_REQ_OWNER_ONLY:
          "Only the server owner is allowed to do this",
        INTEGRATIONS: "Integrations",
        INTEGRATION_SETTINGS: "Integration Settings",
        MANAGE_INTEGRATION: "Manage Integration",
        SYNC: "Sync",
        NO_INTEGRATIONS_LABEL: "Looking for more?",
        NO_INTEGRATIONS_BODY:
          "Manage apps, followed channels, and other integrations from the desktop app or web browser.",
        FORM_LABEL_SUB_EXPIRE_BEHAVIOR: "Expired Sub Behavior",
        FORM_LABEL_MEMBERSHIP_EXPIRE_BEHAVIOR: "Expired Membership Behavior",
        KICK_FROM_SERVER: "Kick",
        FORM_LABEL_CUSTOM_TWITCH_EMOTICON: "Custom Twitch Emoticons",
        ENABLE_TWITCH_EMOJI_SYNC:
          "Allow synced subscribers to use your Twitch Custom Emoticons in Discord.",
        REMOVE_SYNCED_ROLE: "Remove Role",
        FORM_LABEL_EXPIRE_GRACE_PERIOD: "Grace Period",
        N_DAYS: "{days, plural, one {1 day} other {{days} days}}",
        FORM_LABEL_SYNCED_ROLE: "Synced Role",
        FORM_LABEL_SYNCED_SUBS: "Synced Subs",
        FORM_LABEL_SYNCED_MEMBERS: "Synced Members",
        NUM_SUBSCRIBERS:
          "\n{subscribers, plural, =0 {**0** subscribers} one {**1** subscriber} other {**{subscribers}** subscribers}}",
        NUM_MEMBERS:
          "\n{subscribers, plural, =0 {**0** members} one {**1** member} other {**{subscribers}** members}}",
        LAST_SYNC: "last sync: {datetime}",
        SYNC_REVOKED:
          "Sync connection revoked! {user} must reconnect to {platformName} in their user settings.",
        DISABLE_INTEGRATION_TITLE: "Disable Sync",
        DISABLE_INTEGRATION_TWITCH_BODY:
          "\nDisabling sync will perform the selected expired sub behavior as if all subs have expired.\n",
        DISABLE_INTEGRATION_YOUTUBE_BODY:
          "\nDisabling sync will perform the selected expired membership behavior as if all members have expired.\n",
        FORCE_SYNC: "Force Sync",
        SYNC_THIS_ACCOUNT: "Sync this account",
        SUBSCRIBER_INFORMATION: "Subscriber Information",
        BANS_HEADER:
          "{bans, plural, =0 {No Bans} one {1 Ban} other {{bans} Bans}}",
        BANS_HEADER_NEW: "Server Ban List",
        BANS_SEARCH_PLACEHOLDER: "Search Bans",
        BANS_SEARCH_PLACEHOLDER_NEW: "Search Bans by User Id or Username",
        UNBAN: "Unban",
        UNBAN_USER_TITLE: "Unban '!!{user}!!'",
        BANS_HINT:
          "\nBans by default are by account and IP.\nA user can circumvent an IP ban by using a proxy.\nBan circumvention can be made very hard by enabling phone verification in [Moderation](onModerationClick).\n",
        BANS_NO_RESULTS:
          "We looked as hard as we could, but no banned users were found matching that search.",
        BANS_NO_USERS_BANNED:
          "\nYou haven't banned anybody...\nbut if and when you must, do not hesitate!\n",
        NO_BANS: "No Bans",
        BAN_REASON: "Ban Reason",
        NO_BAN_REASON: "No reason provided",
        REVOKE_BAN: "Revoke Ban",
        GUILD_SETTINGS_MEMBERS_SERVER_MEMBERS: "Server Members",
        GUILD_SETTINGS_MEMBERS_DISPLAY_ROLE: "Display role:",
        GUILD_SETTINGS_MEMBERS_REMOVE_ROLE: "Remove role !!{roleName}!!",
        GUILD_SETTINGS_MEMBERS_ADD_ROLE: "Add role",
        ADD_ROLE_PLACEHOLDER: "Role",
        ADD_ROLE_A11Y_LABEL: "Add Role",
        KICK: "Kick",
        KICK_USER: "Kick !!{user}!!",
        BAN: "Ban",
        BAN_USER: "Ban !!{user}!!",
        MEMBERS_HEADER:
          "{members, plural, =0 {No Members} one {1 Member} other {{members} Members}}",
        MEMBERS_SEARCH_PLACEHOLDER: "Search Members",
        GUILD_MEMBERS_SEARCH_NO_RESULT: "No members were found.",
        PRUNE_MEMBERS: "Prune Members",
        MEMBER_LIST_SERVER_OWNER_HELP:
          "This person is the server owner and always has all permissions regardless of roles.",
        CANNOT_MANAGE_IS_OWNER:
          "This person owns the server, so you cannot manage them.",
        CANNOT_MANAGE_HIGHER_RANK:
          "This person has a higher role than you, so you cannot manage them.",
        CANNOT_MANAGE_SAME_RANK:
          "This person's highest role is the same as yours, so you cannot manage them.",
        ADMINISTRATIVE: "Administrative",
        EDIT_USER: "Edit !!{user}!!",
        GUILD_SETTINGS_TITLE_SERVER_WIDGET: "Server Widget",
        GUILD_SETTINGS_WIDGET_ENABLE_WIDGET: "Enable Server Widget",
        NO_INSTANT_INVITE: "No Invite",
        FORM_LABEL_INSTANT_INVITE_CHANNEL: "Invite Channel",
        FORM_HELP_INSTANT_INVITE_CHANNEL:
          "\nIf a channel is selected then an invite link will be generated with the widget,\notherwise only online members and voice channels will be provided.\n  ",
        FORM_LABEL_SERVER_ID: "Server ID",
        FORM_LABEL_PREMADE_WIDGET: "Premade Widget",
        GUILD_SETTINGS_WIDGET_EMBED_HELP:
          "\nEmbed this HTML on your website to use Discord's beautiful pre-made widget.\n\nIf you have access to your site's users then you can dynamically add &username= to the querystring.",
        FORM_LABEL_JSON_API: "JSON API",
        MANAGE_USER: "Manage User",
        MANAGE_USER_SHORTHAND: "Manage",
        HELP_ROLES_DESCRIPTION:
          "Use Roles to organize your server members and customize their permissions. You can assign Roles in the [Members](onMembersClick) page.",
        HELP_ROLE_LOCKED:
          "Role is locked because it is a higher rank than your highest role.",
        HELP_ROLE_LOCKED_MINE:
          "Role is locked because it is your highest ranked role. Please ask a higher rank or Server Owner for help.",
        HELP_MISSING_MANAGE_ROLES_PERMISSION:
          "Role is locked because you do not have the Manage Roles permission.",
        HELP_MISSING_PERMISSION:
          "You cannot modify this permission because none of your roles have it.",
        HELP_SINGULAR_PERMISSION:
          "You cannot modify this permission because removing it would remove it from you.",
        HELP_CLEAR_PERMISSIONS:
          "You cannot clear permissions because it would remove one or more permissions from you.",
        FORM_LABEL_ROLE_ADD: "Add role",
        FORM_LABEL_MEMBER_ADD: "Add member",
        FORM_LABEL_ROLE_NAME: "Role name",
        FORM_LABEL_ROLE_ENTER_NAME: "You must provide a role name.",
        FORM_LABEL_ROLE_DESCRIPTION: "Description",
        FORM_LABEL_ROLE_DESCRIPTION_INFO:
          "Description will be displayed under role name in Linked Roles",
        FORM_LABEL_ROLE_COLOR: "Role color",
        FORM_LABEL_ROLE_ICON: "Role icon",
        FORM_LABEL_ROLE_ICON_SUBTITLE_MOBILE: "You can edit this on desktop",
        FORM_LABEL_ROLE_SETTINGS: "Role settings",
        FORM_LABEL_DISABLED_FOR_EVERYONE: "Disabled for @everyone",
        FORM_LABEL_HOIST_DESCRIPTION:
          "Display role members separately from online members",
        FORM_LABEL_MENTIONABLE: "Allow anyone to **@mention** this role",
        FORM_LABEL_MENTIONABLE_DESCRIPTION:
          'Note: Members with the "Mention @everyone, @here, and All Roles" permission will always be able to ping this role.',
        FORM_LABEL_ROLES_PRO_TIP: "Protip",
        ADMINISTRATOR_DESCRIPTION:
          "\nMembers with this permission have every permission and also bypass channel specific permissions. This is a dangerous\npermission to grant.\n",
        VIEW_AUDIT_LOG_DESCRIPTION:
          "Members with this permission have access to view the server's audit logs",
        MANAGE_SERVER_DESCRIPTION:
          "Members with this permission can change the server's name or move regions.",
        MANAGE_ROLES_DESCRIPTION:
          "\nMembers with this permission can create new roles and edit/delete roles lower than this one.\n  ",
        MANAGE_WEBHOOKS_DESCRIPTION:
          "Members with this permission can create, edit, and delete webhooks.",
        MANAGE_CHANNELS_DESCRIPTION:
          "Members with this permission can create new channels and edit or delete existing ones.",
        PRIORITY_SPEAKER_DESCRIPTION:
          "\nUsers with this permission have the ability to be more easily heard when talking. When activated,\nthe volume of others without this permission will be automatically lowered.\n",
        MANAGED_ROLE_EXPLAINATION:
          "\nThis role is automatically managed by an integration.\nIt cannot be manually assigned to members or deleted.\n",
        MANAGED_ROLE_PREMIUM_SUBSCRIBER_EXPLANATION:
          "This role is automatically managed by Discord for Server Boosting. It cannot be manually assigned to members or deleted.",
        MANAGED_ROLE_INTEGRATION_LINKED_EXPLANATION:
          "This role is managed by an integration: $[!!{name}!!](integrationNameHook). It cannot be manually assigned to members. You can remove the integration to remove this role.",
        MANAGED_ROLE_GUILD_CONNECTIONS_EXPLANATION:
          "Members are automatically assigned to this role. It cannot be manually assigned to or removed from members.",
        CHANGE_NICKNAME_DESCRIPTION:
          "Members with this permission can change their own nickname.",
        MANAGE_NICKNAMES_DESCRIPTION:
          "Members with this permission can change nicknames of other members.",
        DELETE_ROLE: "Delete !!{name}!!",
        VIEW_GUILD_ANALYTICS_DESCRIPTION:
          "Members with this permission can view the server's insights.",
        DELETE_ROLE_MOBILE: "Delete Role",
        PICK_A_COLOR: "Pick a Color",
        PICK_A_COLOR_FROM_THE_PAGE: "Pick a color from the page",
        EDIT_ROLES: "Edit Roles",
        ROLE_COLOR: "Role Color",
        ROLE_ORDER_UPDATED: "Role order updated.",
        ROLE_ID_COPIED: "Copied id for role: {role}",
        NEW_ROLE: "new role",
        ROLE_ICON_ALT_TEXT: "Role icon, {name}",
        EMOJI_SLOTS_AVAILABLE:
          "{count, plural, =0 {no slots} one {{count} slot} other {{count} slots}} available",
        UPLOAD_EMOJI: "Upload Emoji",
        UPLOAD_EMOJI_INSTRUCTIONS: "Drop emoji to upload them.",
        UPLOADED_BY: "Uploaded By",
        SERVER_EMOJI: "Server Emoji",
        ANIMATED_EMOJI: "Animated Emoji",
        NO_EMOJI: "Get the party started by uploading an emoji",
        NO_EMOJI_TITLE: "No Emoji",
        NO_EMOJI_BODY: "None",
        TOO_MANY_EMOJI: "You are out of emoji slots.",
        TOO_MANY_ANIMATED_EMOJI: "You are out of animated emoji slots.",
        EMOJI_TOO_BIG:
          "That emoji was too big! Emoji must be under {maxSize} KB.",
        EMOJI_DISABLED_PREMIUM_TIER_LOST: "Requires higher Server Boost Level",
        EMOJIS_TITLE:
          "{count, plural, =0 {no emoji} one {{count} emoji} other {{count} emoji}}",
        NO_INVITES_LABEL: "No invites yet",
        NO_INVITES_BODY:
          "\nFeeling aimless? Like a paper plane drifting through the skies?\nGet some friends in here by creating an invite link!\n",
        PUBLIC_RULES_CHANNEL_TITLE: "Rules Channel",
        PUBLIC_RULES_SELECTOR_TITLE: "Select a Rules Channel",
        PUBLIC_UPDATES_CHANNEL_TITLE: "Mod-only Channel",
        PUBLIC_LOCALE_TITLE: "Primary Language",
        PUBLIC_LOCALE_HELP:
          "Discord will prioritize this server in search and in recommendations to users who speak the selected language.",
        PUBLIC_LOCALE_SELECTOR_TITLE: "Select a Primary Language",
        NO_INVITES_CAPTION: "No invites yet!",
        CLYDE_SETTINGS: "Clyde Settings",
        CLYDE_CUSTOMIZE: "Edit Personality",
        CLYDE_PERSONALITY_NUX_HEADER: "Create your own AI chatbot",
        CLYDE_ADD_CLYDE: "Add Clyde to Server",
        CLYDE_PERSONALITY_NUX_INFO:
          "Clyde is Discord’s AI chatbot, and now you can give it a new personality. Change its name, avatar, profile, and more.",
        CLYDE_PERSONALITY_NUX_HINT: "Mention @Clyde to get started!",
        CLYDE_SETTINGS_SAVE_FAILED: "Failed to save Clyde Settings",
        CLYDE_SETTINGS_SAVE_SUCCESS: "Changes saved!",
        CLYDE_SECTION_DESCRIPTION:
          "Clyde is currently a free experiment and may generate content that could be considered biased, harmful, or inaccurate. Clyde follows server Automod rules. [Learn More]({helpdeskArticle})",
        ENABLE_CLYDE_SECTION: "Enable Clyde",
        EDIT_CLYDE: "Edit Clyde",
        CANNOT_EDIT_CLYDE:
          "Clyde cannot be edited, he has been banned from this server.",
        CANNOT_ADD_CLYDE:
          "Clyde cannot be added to the server, he has been banned.",
        SAD_CLYDE_ALT_TEXT: "sad face clyde",
        ENABLE_CLYDE_SECTION_SWITCH_DESCRIPTION:
          "This enables our AI chatbot to interact with members in this server.",
        ENABLE_CLYDE_LINK_TO_PERMISSIONS:
          "Access to Clyde is controlled through roles. Go to Guild Settings > Roles or Channel Settings > Permissions to manage Clyde access. [Learn More]({helpdeskArticle})",
        PERSONALITY_CLYDE_SECTION: "Personality",
        PERSONALITY_DEFAULT_TITLE: "Clyde",
        PERSONALITY_PLACEHOLDER: "Describe Clyde's personality",
        PERSONALITY_DESCRIPTION:
          "Edit Clyde's personality by writing a description or instructions for Clyde.",
        PERSONALITY_FEEDBACK: "Give us feedback",
        CLYDE_SETTINGS_AVATAR_HEADER: "Avatar",
        CLYDE_SETTINGS_BANNER_HEADER: "Profile Banner",
        CLYDE_PERSONALITY_BADGE_TOOLTIP:
          "Clyde has a custom backstory in this server",
        CLYDE_PERSONALITY_TOO_SHORT:
          "This personality is a bit short. The best prompts are at least 200 characters.",
        NONE: "None",
        INTEGRATION_ADDED_USER: "Added by !!{user}!!",
        INTEGRATION_ADDED_DATE: "Added on {timestamp, date, medium}",
        INTEGRATION_ADDED_USER_DATE:
          "Added on {timestamp, date, medium} by !!{user}!!",
        INTEGRATION_CREATED_DATE: "Created on {timestamp, date, medium}",
        INTEGRATION_CREATED_USER_DATE:
          "Created on {timestamp, date, medium} by !!{user}!!",
        INTEGRATIONS_OVERVIEW: "Integrations",
        INTEGRATIONS_OVERVIEW_DESCRIPTION_GUILD:
          "Customize your server with integrations. Manage webhooks, followed channels, and bots, as well as Twitch and YouTube settings for creators. [Learn more about managing integrations.]({helpdeskArticle})",
        INTEGRATIONS_OVERVIEW_DESCRIPTION_CHANNEL:
          "Customize your server with integrations. Manage webhooks and followed channels that post into this channel. [Learn more about managing integrations.]({helpdeskArticle})",
        INTEGRATIONS_OVERVIEW_NO_APPLICATIONS: "You don't have any apps yet!",
        INTEGRATIONS_OVERVIEW_NO_APPLICATIONS_APP_DIRECTORY_CTA:
          "Visit the [App Directory](handleGoToAppDirectory) to add apps to your server",
        INTEGRATIONS_APPLICATION_SECTION: "Bots and Apps",
        INTEGRATIONS_APPLICATION_BUTTON: "Manage",
        INTEGRATIONS_APPLICATION_BOT: "Bot",
        INTEGRATIONS_APPLICATION_VERIFIED_BOT: "Verified Bot",
        INTEGRATIONS_APPLICATION_BOT_NAME: "!!{user}!!",
        INTEGRATIONS_APPLICATION_NO_BOT:
          "This application does not have a bot in this server.",
        INTEGRATIONS_APPLICATION_REMOVE: "Remove App",
        INTEGRATIONS_APPLICATION_REMOVE_SUMMARY:
          "Removing this integration will remove any bots and webhooks on this page from your server. This action cannot be undone.",
        INTEGRATIONS_APPLICATION_REMOVE_NO_PERMISSIONS:
          "You do not have permissions to remove this integration.",
        INTEGRATIONS_APPLICATION_REMOVE_TITLE: "Remove !!{applicationName}!!",
        INTEGRATIONS_APPLICATION_REMOVE_BODY:
          "\nAre you sure you want to remove **!!{applicationName}!!**?\n",
        INTEGRATIONS_APPLICATION_REMOVE_ERROR_TITLE: "Error Removing Bot",
        INTEGRATIONS_APPLICATION_REMOVE_ERROR:
          "An internal server error has occurred.",
        INTEGRATIONS_APPLICATION_WEBHOOKS: "Webhooks",
        INTEGRATIONS_APPLICATION_APPLICATION_WEBHOOK_PERMISSIONS:
          "You don't have permission to manage this application's webhooks.",
        INTEGRATIONS_APPLICATION_NO_WEBHOOKS:
          "This application has no webhooks in this server.",
        INTEGRATIONS_APPLICATION_GRANTED_PERMISSIONS: "Granted permissions",
        INTEGRATIONS_APPLICATION_DENIED_PERMISSIONS: "Denied permissions",
        INTEGRATIONS_APPLICATION_NO_COMMANDS:
          "This application has no commands.",
        INTEGRATIONS_APPLICATION_ALL_CHANNELS: "All Channels",
        INTEGRATIONS_APPLICATION_COMMAND_PERMISSIONS: "Command Permissions",
        INTEGRATIONS_APPLICATION_COMMAND_PERMISSIONS_DESCRIPTION:
          "Restrict usage of this application's commands to roles, users, and channels.",
        INTEGRATIONS_APPLICATION_COMMAND_CHANNEL_SEARCH_PLACEHOLDER:
          "e.g. #general",
        INTEGRATIONS_APPLICATION_COMMAND_CHANNEL_ADD_BUTTON: "Add Channels",
        INTEGRATIONS_APPLICATION_COMMAND_ROLE_MEMBER_ADD: "Roles & Members",
        INTEGRATIONS_APPLICATION_COMMAND_ROLE_MEMBER_ADD_BUTTON:
          "Add Roles or Members",
        INTEGRATIONS_APPLICATION_COMMAND_ROLE_MEMBER_SEARCH_PLACEHOLDER:
          "e.g. Moderators, @wumpus",
        INTEGRATIONS_APPLICATION_COMMAND_PERMISSIONS_MODIFY:
          "Modify Command Permissions",
        INTEGRATIONS_APPLICATION_COMMAND_STATUS_HAS_OVERRIDES: "Has Overrides",
        INTEGRATIONS_APPLICATION_COMMAND_OVERRIDE_SECTION_ROLE_MEMBER_HEADER:
          "Role & Member Overrides",
        INTEGRATIONS_APPLICATION_COMMAND_OVERRIDE_SECTION_ROLE_MEMBER_NO_ENTRIES:
          "This command has no role or member overrides",
        INTEGRATIONS_APPLICATION_COMMAND_OVERRIDE_SECTION_CHANNEL_HEADER:
          "Channel Overrides",
        INTEGRATIONS_APPLICATION_COMMAND_OVERRIDE_SECTION_CHANNEL_NO_ENTRIES:
          "This command has no channel overrides",
        INTEGRATIONS_APPLICATION_COMMAND_DEFAULT_MEMBER_PERMISSIONS_SECTION_HEADER:
          "Command Restrictions",
        INTEGRATIONS_APPLICATION_COMMAND_DEFAULT_MEMBER_PERMISSIONS_SECTION_DESCRIPTION:
          "Members **need server permissions** to use this command. To override this, add members or roles below.",
        INTEGRATIONS_APPLICATION_COMMAND_DEFAULT_MEMBER_PERMISSIONS_MODAL_HEADER:
          "Required Permissions",
        INTEGRATIONS_APPLICATION_COMMAND_DEFAULT_MEMBER_PERMISSIONS_MODAL_ARIA_LABEL:
          "Modal showing the permissions required by a user to use the command by default",
        INTEGRATIONS_APPLICATION_PERMISSIONS_LOCKED_APPLICATION:
          "Cannot modify configurations due to not having access to this application",
        INTEGRATIONS_APPLICATION_PERMISSIONS_LOCKED_COMMAND:
          "Cannot modify configurations due to not having access to this command",
        INTEGRATIONS_APPLICATION_PERMISSIONS_LOCKED_USER_SELF:
          "Cannot modify permission to deny yourself access!",
        INTEGRATIONS_APPLICATION_PERMISSIONS_LOCKED_USER_OTHER:
          "Cannot modify permission to explicitly deny a user with a higher role than you!",
        INTEGRATIONS_APPLICATION_PERMISSIONS_LOCKED_ROLE:
          "Cannot modify permission to explicitly deny a role higher or equal to your highest role!",
        INTEGRATIONS_APPLICATION_PERMISSIONS_SELF_DENY_MODAL_MESSAGE_REMOVE_SELF:
          "You cannot remove the permission for **yourself** because it will remove your access. Grant access to a role you have or allow @everyone before trying again.",
        INTEGRATIONS_APPLICATION_PERMISSIONS_SELF_DENY_MODAL_MESSAGE_REMOVE_ROLE:
          "You cannot remove the permission for **!!{name}!!** because it will remove your access as well. Grant access to another role or yourself before trying again.",
        INTEGRATIONS_APPLICATION_PERMISSIONS_SELF_DENY_MODAL_MESSAGE_DENY_ROLE:
          "You cannot deny access for **!!{name}!!** because it will remove your access as well. Grant access to another role or yourself before trying again.",
        INTEGRATIONS_APPLICATION_PERMISSIONS_MAX:
          "You have reached the maximum number of permission overrides.",
        INTEGRATIONS_APPLICATION_PERMISSIONS_NOTICE_TEXT:
          "You're at the maximum number of permissions. Remove {removeCount, number} of them to make further changes.",
        INTEGRATIONS_APPLICATION_PERMISSION_ENTRY_REMOVE_ARIA_LABEL:
          "Remove this permission configuration entry",
        INTEGRATIONS_APPLICATION_SUBSCRIPTION_TIERS: "Subscription Tiers",
        INTEGRATIONS_TWITCH: "Twitch",
        INTEGRATIONS_TWITCH_SUMMARY:
          "{count, plural, one {1 connected account} other {{count, number} connected accounts}}",
        INTEGRATIONS_TWITCH_EMPTY_SUMMARY:
          "Sync your subscribers to roles and unlock your Twitch emotes",
        INTEGRATIONS_TWITCH_DESCRIPTION:
          "Link your Twitch account to automatically sync your Twitch subs to roles in this server. You can also let your subs use your Twitch emotes globally in Discord.",
        INTEGRATIONS_TWITCH_BUTTON: "Manage",
        INTEGRATIONS_TWITCH_EMPTY_BUTTON: "Connect Twitch",
        INTEGRATIONS_TWITCH_HELP:
          "[Connect](connectAction) your partnered or affiliate Twitch account to add it to this server. [Learn more.]({helpdeskArticle})",
        INTEGRATIONS_YOUTUBE: "YouTube",
        INTEGRATIONS_YOUTUBE_SUMMARY:
          "{count, plural, one {1 connected account} other {{count, number} connected accounts}}",
        INTEGRATIONS_YOUTUBE_EMPTY_SUMMARY:
          "Sync your channel members to roles and create an exclusive experience",
        INTEGRATIONS_YOUTUBE_DESCRIPTION:
          "Link your YouTube account to automatically sync your YouTube channel members to roles in this server. Create an exclusive experience just for your channel members. YouTube integrations are only available for partnered YouTube accounts.",
        INTEGRATIONS_YOUTUBE_BUTTON: "Manage",
        INTEGRATIONS_YOUTUBE_EMPTY_BUTTON: "Connect YouTube",
        INTEGRATIONS_YOUTUBE_HELP:
          "[Connect](connectAction) your partnered YouTube account to add it to this server. [Learn more.]({helpdeskArticle})",
        INTEGRATIONS_ACCOUNT_DESCRIPTION:
          "Enable {serviceName} integration for [!!{accountUrlText}!!]({accountUrl})",
        INTEGRATIONS_LAST_SYNC: "Last synced: {datetime}",
        INTEGRATIONS_ENABLE: "Enable",
        INTEGRATIONS_DISABLE: "Disable Integration",
        INTEGRATIONS_CHANNEL_FOLLOWING: "Channels Followed",
        INTEGRATIONS_CHANNEL_FOLLOWING_SUMMARY:
          "{count, plural, one {1 channel} other {{count, number} channels}}",
        INTEGRATIONS_CHANNEL_FOLLOWING_DESCRIPTION:
          "Updates from these announcement channels will get sent directly into your server. [Learn more.]({helpdeskArticle})",
        INTEGRATIONS_CHANNEL_FOLLOWING_SECTION: "Posting to $[](channelHook)",
        INTEGRATIONS_CHANNEL_FOLLOWING_BUTTON: "View Channels",
        INTEGRATIONS_CHANNEL_FOLLOWING_EMPTY:
          "You're not following any channels",
        INTEGRATIONS_CHANNEL_FOLLOWING_EMPTY_BUTTON: "Learn More",
        INTEGRATIONS_FOLLOWED_CHANNEL_DELETE_TITLE: "Unfollow !!{name}!!",
        INTEGRATIONS_FOLLOWED_CHANNEL_DELETE_BODY:
          "Are you sure you want to unfollow this channel? You can refollow it in the future by visiting the server it's from.",
        INTEGRATIONS_FOLLOWED_CHANNEL_ERROR_DELETING:
          "Error Removing Followed Channel",
        INTEGRATIONS_FOLLOWED_CHANNEL_DEST_CHANNEL: "Post To",
        INTEGRATIONS_FOLLOWED_CHANNEL_NAME: "Announcement Name",
        INTEGRATIONS_FOLLOWED_CHANNEL_DELETE: "Unfollow",
        INTEGRATIONS_FOLLOWED_CHANNEL_GUILD_SOURCE: "from $[](guildHook)",
        INTEGRATIONS_WEBHOOKS: "Webhooks",
        INTEGRATIONS_WEBHOOKS_SUMMARY:
          "{count, plural, one {1 webhook} other {{count, number} webhooks}}",
        INTEGRATIONS_WEBHOOKS_DESCRIPTION:
          'Webhooks are a simple way to post messages from other apps and websites into Discord using internet magic. [Learn more]({helpdeskArticle} "Learn more about webhooks"), or try [building one yourself.]({developersArticle})',
        INTEGRATIONS_WEBHOOKS_BUTTON: "View Webhooks",
        INTEGRATIONS_WEBHOOKS_EMPTY: "You have no webhooks!",
        INTEGRATIONS_WEBHOOKS_EMPTY_BUTTON: "Create Webhook",
        INTEGRATIONS_WEBHOOKS_CREATE: "New Webhook",
        INTEGRATIONS_WEBHOOK_COPY_URL: "Copy Webhook URL",
        INTEGRATIONS_WEBHOOK_COPIED_URL: "Copied!",
        INTEGRATIONS_WEBHOOK_DELETE: "Delete Webhook",
        INTEGRATIONS_SEARCH: "Search installed apps",
        INTEGRATIONS_SEARCH_NO_MATCH: "No installed apps matched your search.",
        CLYDE_NAME: "Clyde",
        CLYDE_GUILD_TOOLTIP_DETAILS:
          "Enable Clyde to let your members start talking to our AI chatbot. It’s new, so please be nice. [Learn more]({learnMoreURL})",
        CLYDE_GUILD_TOOLTIP_CTA: "Enable Clyde",
        CLYDE_GUILD_TOOLTIP_DISMISS: "No thanks",
        AI_GENERATED_TOOLTIP: "Generated by AI",
        CLYDE_PROFILE_BIO:
          ":robot: Discord’s AI chatbot. I’m experimental and currently free to try out. Please @ me! But not for advice, Discord support, or safety issues.\n:lock: I use OpenAI technology, but they can’t use your data to train their general models.\n:mag_right: Learn more at https://dis.gd/clyde",
        CLYDE_MENTION_DESCRIPTION: "Talk to Discord’s AI chatbot.",
        CLYDE_NOTICE:
          "Clyde can read all messages in this thread. [Learn More]({learnMoreUrl})",
        CLYDE_MODAL_TITLE: "Meet Clyde",
        CLYDE_MODAL_ABOUT_SUBHEADING: "What is this?",
        CLYDE_MODAL_ABOUT_SECTION:
          'Clyde is our AI chatbot. Ask @Clyde things like, "Recommend a playlist that\'s good for late nights" or "Send a GIF to get everyone pumped up."',
        CLYDE_MODAL_PRIVACY_SUBHEADING: "Privacy and Safety",
        CLYDE_MODAL_PRIVACY_SECTION:
          "Your privacy and safety is important to us. While Clyde uses OpenAI technology, **OpenAI may not use your data to train its general models**. Since Clyde is a Discord feature, our [Privacy Policy]({privacyPolicyURL}) and [Community Guidelines]({guidelinesURL}) apply.",
        CLYDE_MODAL_DISCLAIMER_SUBHEADING: "AI isn't perfect",
        CLYDE_MODAL_DISCLAIMER_SECTION:
          "Clyde is experimental so you might come across information that could be considered biased, misleading, harmful, or inaccurate. Don't rely on Clyde for advice, Discord support, or safety issues.",
        CLYDE_MODAL_LEARN_MORE:
          "[Learn more]({learnMoreURL}) and happy chatting!",
        CLYDE_NUX_ADMIN_CHANNEL_NOTICE_TITLE: "Get ready for Clyde",
        CLYDE_NUX_ADMIN_CHANNEL_NOTICE_MESSAGE:
          "Our new AI chatbot is coming soon to your server.",
        CLYDE_NUX_ADMIN_CHANNEL_NOTICE_MANAGE_SETTINGS: "Manage Settings",
        CLYDE_NUX_CHANNEL_NOTICE_LEARN_MORE: "Learn More",
        CLYDE_NUX_USER_CHANNEL_NOTICE_TITLE: "Chat with Clyde",
        CLYDE_NUX_USER_CHANNEL_NOTICE_MESSAGE:
          "Mention @Clyde to talk to our new AI chatbot.",
        CLYDE_SEND_MESSAGE: "Message",
        CLYDE_PROFILE_EMBED_HEADER: "Apply personality to server",
        CLYDE_PROFILE_APPLY: "Apply",
        CLYDE_PROFILE_EMBED_INVALID_HEADER: "Oops, this link doesn't work...",
        CLYDE_PROFILE_EMBED_INVALID_INFO_TITLE: "Invalid Link",
        CLYDE_PROFILE_EMBED_INVALID_INFO_BODY: "Try sending another one!",
        CLYDE_PROFILE_EMBED_RESOLVING_HEADER: "Resolving Personality",
        CLYDE_PROFILE_APPLY_PERSONALITY: "Apply Personality",
        CLYDE_PROFILE_APPLY_PERSONALITY_SUBHEADING:
          "This will override the personality for $[@Clyde](clydeHook) in the server you select.",
        CLYDE_PROFILE_APPLY_TO_GUILD: "Apply to Server",
        CLYDE_PROFILE_APPLY_TO_GUILD_CAPTION:
          "Only servers in this Clyde Custom Profile Beta will show up in this list",
        CLYDE_PROFILE_SELECT_GUILD: "Select server",
        CLYDE_PROFILE_SELECT_GUILD_ERROR:
          "You've run into a feature that's in Beta, sorry but none of your servers are part of the Beta.",
        CLYDE_PROFILE_APPLIED_TO: "Has been applied to",
        CLYDE_PROFILE_SERVER_CAPTION: "{serverName} Server",
        CLYDE_PROFILE_ERROR_MESSAGE_GENERIC:
          "An error has occured. Please try again soon.",
        CLYDE_PROFILE_SHARE_HEADER: "Share Personality",
        CLYDE_LAST_EDITED_BY_TAG: "Last edited by {username}",
        CLYDE_GENERATE_PERSONALITY: "Generate",
        CLYDE_GENERATE_PERSONALITY_HINT: "Generate a more detailed personality",
        CLYDE_GENERATE_PERSONALITY_UNDO: "Undo generated personality",
        CLYDE_EDIT_NAME_LABEL: "Name",
        MODERATION: "Moderation",
        SAFETY_SETUP: "Safety Setup",
        WEBHOOKS: "Webhooks",
        WEBHOOK_CREATE: "Create Webhook",
        WEBHOOK_CREATED_ON: "!!{username}!! on {timestamp, date, medium}",
        WEBHOOK_CANCEL: "Cancel",
        WEBHOOK_DELETE: "Delete",
        WEBHOOK_DELETE_TITLE: "Delete !!{name}!!",
        WEBHOOK_DELETE_BODY:
          "\nAre you sure you want to delete the **!!{name}!!** webhook? This action cannot be undone.\n",
        WEBHOOK_FORM_NAME: "Name",
        WEBHOOK_ERROR_CREATING_WEBHOOK: "Error Creating Webhook",
        WEBHOOK_ERROR_CREATING_WEBHOOK_RATE_LIMIT:
          "You're creating webhooks too quickly! Slow down.",
        WEBHOOK_ERROR_DELETING_WEBHOOK: "Error Deleting Webhook",
        WEBHOOK_ERROR_DELETING_WEBHOOK_RATE_LIMIT:
          "You're deleting webhooks too quickly! Slow down.",
        WEBHOOK_ERROR_MAX_WEBHOOKS_REACHED:
          "You have reached the maximum number of webhooks.",
        WEBHOOK_ERROR_INTERNAL_SERVER_ERROR:
          "An internal server error has occurred.",
        WEBHOOK_FORM_URL: "Webhook URL",
        FORM_LABEL_NOTIFICATION_FREQUENCY: "Frequency",
        FORM_LABEL_SERVER_NOTIFICATION_SETTINGS: "Server Notification Settings",
        FORM_LABEL_SUPPRESS_EVERYONE: "Suppress **@everyone** and **@here**",
        FORM_LABEL_SUPPRESS_ROLES: "Suppress All Role @mentions",
        FORM_LABEL_MUTE_SCHEDULED_EVENTS: "Mute New Events",
        FORM_LABEL_UNMUTE_SCHEDULED_EVENTS: "Unmute New Events",
        FORM_LABEL_MUTE_SERVER: "Mute **!!{name}!!**",
        FORM_LABEL_UNMUTE_SERVER: "Unmute **!!{name}!!**",
        FORM_LABEL_MUTE_SERVER_DESCRIPTION:
          "\nMuting a server prevents unread indicators and notifications from appearing unless you are mentioned.\n",
        FOR_LABEL_MUTE_SEVER_DESCRIPTION_V2:
          "Muting prevents unread badges and notifications from appearing unless you are mentioned.",
        FORM_LABEL_MUTE_SERVER_DESCRIPTION_NEW:
          "Muting a server suppresses notifications but unread indicators will still be visible if you're mentioned.",
        FORM_LABEL_MOBILE_PUSH_NOTIFICATIONS: "Mobile Push Notifications",
        FORM_LABEL_ALL_MESSAGES: "All Messages",
        FORM_LABEL_ALL_VOICE_ACTIVITY: "All Voice Activity",
        FORM_LABEL_ONLY_MENTIONS: "Only **@mentions**",
        FORM_LABEL_ONLY_TEXT_MENTIONS: "Only Text **@mentions**",
        FORM_LABEL_ONLY_MENTIONS_PLAIN: "Only @mentions",
        FORM_LABEL_NOTHING: "Nothing",
        FORM_LABEL_ALL_MESSAGES_SHORT: "All",
        FORM_LABEL_ONLY_MENTIONS_SHORT: "@mentions",
        FORM_LABEL_MUTED: "Muted",
        FORM_LABEL_CHANNEL_NOTIFCATION_SETTINGS:
          "Channel Notification Settings",
        FORM_LABEL_DEFAULT: "Use Server Default",
        FORM_LABEL_DEFAULT_CATEGORY: "Use Category Default",
        FORM_LABEL_ALL: "All",
        FORM_LABEL_OFF: "Off",
        FORM_LABEL_DESKTOP_ONLY: "Desktop",
        FORM_LABEL_MENTIONS: "Mentions",
        FORM_LABEL_LIVE_STAGES_ONLY: "All Live Stages",
        RESET: "Reset",
        LARGE_GUILD_NOTIFY_ALL_MESSAGES_DESCRIPTION:
          "Due to this server's size, you won't get mobile push notifications for non-@mention messages.",
        NOTIFICATION_SETTINGS_PRESETS: "Notifications Presets",
        NOTIFICATION_SETTINGS_ADVANCED: "Advanced",
        NOTIFICATION_SETTINGS_PRESETS_ALL_MESSAGES: "All Messages",
        NOTIFICATION_SETTINGS_PRESETS_MENTION_ONLY: "Mention Only",
        NOTIFICATION_SETTINGS_PRESETS_NONE: "None",
        NOTIFICATION_SETTINGS_PRESETS_UNREAD_TITLE: "Unread Badges",
        NOTIFICATION_SETTINGS_PRESETS_UNREAD_SUBTITLE:
          "Highlighted channel name and half dot",
        NOTIFICATION_SETTINGS_PRESETS_NOTIFICATION_TITLE: "Notifications",
        NOTIFICATION_SETTINGS_PRESETS_NOTIFICATION_SUBTITLE:
          "Push notification and ping sound",
        NOTIFICATION_SETTINGS_PRESETS_NOTIFICATION_CHANNEL_SUBTITLE:
          "Choose when you receive a notification from this channel.",
        NOTIFICATION_SETTINGS_CUSTOMIZE: "Customize",
        NOTIFICATION_SETTINGS_PRESETS_UNREAD_CHANNEL_1: "announcements",
        NOTIFICATION_SETTINGS_PRESETS_UNREAD_CHANNEL_2: "general",
        NOTIFICATION_SETTINGS_PRESETS_UNREAD_CHANNEL_3: "random",
        NOTIFICATION_SETTINGS_PRESETS_NOTIFICATION_MESSAGE:
          "that’s the annoying part yea lol it’s sooooo chunky",
        NOTIFICATION_SETTINGS_PRESETS_NOTIFICATION_AUTHOR: "Lone Wanderer",
        NOTIFICATION_SETTINGS_CHANNELS_CUSTOM_MENU_ARIA_LABEL:
          "The channel custom notification settings",
        FORM_LABEL_MOBILE_NOTIFICATIONS_LABEL: "Enable all notifications",
        FORM_LABEL_MOBILE_NOTIFICATIONS_SYSTEM_LABEL: "System notifications",
        FORM_LABEL_MOBILE_NOTIFICATIONS_SYSTEM_DESC:
          "Get notifications outside of Discord.",
        FORM_LABEL_MOBILE_NOTIFICATIONS_SYSTEM_HINT:
          "\nIf you're looking for per-channel or per-server notifications, tap the desired server title and select Notification Settings.\n    ",
        FORM_LABEL_MOBILE_NOTIFICATIONS_EVERY_TIME_DESC:
          "Notify on every new message in conversations",
        FORM_LABEL_MOBILE_NOTIFICATIONS_USER_LABEL: "Other notifications",
        FORM_LABEL_MOBILE_NOTIFICATIONS_STREAM_DESC:
          "Get notifications when your friends stream",
        FORM_LABEL_MOBILE_NOTIFICATIONS_INAPP_LABEL: "In-app notifications",
        FORM_LABEL_MOBILE_NOTIFICATIONS_INAPP_DESC:
          "Get notifications within Discord.",
        FORM_LABEL_MOBILE_USER_NOTIFICATIONS_LABEL:
          "User Notification Settings",
        FORM_LABEL_MOBILE_USER_NOTIFICATIONS_HINT:
          "Manage all in-app notifications.",
        FORM_LABEL_MOBILE_NOTIFICATIONS_BEHAVIOR: "Behavior",
        FORM_LABEL_MOBILE_NOTIFICATIONS_BLINK: "Disable notifications light.",
        FORM_LABEL_MOBILE_NOTIFICATIONS_VIBRATIONS:
          "Disable notifications vibration.",
        FORM_LABEL_MOBILE_NOTIFICATIONS_SOUND_DISABLE: "Disable Sounds",
        FORM_LABEL_MOBILE_NOTIFICATIONS_OS_CONTROL_JUMP:
          "Tweak notification settings",
        FORM_LABEL_MOBILE_NOTIFICATIONS_OS_CONTROL_JUMP_HELP:
          "Advanced notification settings are controlled by the system.",
        FORM_LABEL_MOBILE_NOTIFICATIONS_CALL_DESC:
          "Integrate calls with Phone app.",
        FORM_LABEL_MOBILE_NOTIFICATIONS_VOICE_CHANNEL_OVERRIDE:
          "Switching to at-mentions only will disable voice activity notifications while still letting you know if somebody pinged you directly in the VC chat.",
        FORM_LABEL_MOBILE_CHANNEL_OVERRIDE_MUTE:
          "You won't receive notifications from muted channels, and they will appear grayed out in your channel list. This setting applies across all your devices.",
        FORM_LABEL_MOBILE_CATEGORY_OVERRIDE_MUTE:
          "You won't receive notifications from muted categories, and they will appear grayed out in your channel list. This setting applies across all your devices.",
        FORM_LABEL_MOBILE_CHANNEL_OVERRIDE_GUILD_MUTED:
          "Your server is currently $[**muted**](mutedHook). You can't get notifications from this channel nor change settings until you unmute this server.",
        FORM_LABEL_MOBILE_CHANNEL_OVERRIDE_GUILD_MESSAGE_NOTIFICATION:
          "Your server's notification is set to $[**nothing**](notificationHook). You will not get any notifications from this channel, but you can override it here.",
        CHANNEL_OR_GUILD_MUTED: "This channel or server is currently muted.",
        MUTE_SETTINGS_MUTE_THIS_CONVERSATION: "Mute this conversation",
        MUTE_SETTINGS_MUTE_CHANNEL: "Mute this channel",
        MUTE_SETTINGS_MUTE_THREAD: "Mute this thread",
        MUTE_SETTINGS_MUTE_POST: "Mute this post",
        MUTE_SETTINGS_MUTE_SERVER: "Mute this server",
        MUTE_SETTINGS_MUTE_CATEGORY: "Mute this category",
        FORM_LABEL_MOBILE_CHANNEL_MUTED: "You have muted this channel",
        FORM_LABEL_MOBILE_CHANNEL_MUTED_UNTIL:
          "You have muted this channel until $[**{endTime}**](endTimeHook)",
        FORM_LABEL_MOBILE_SERVER_MUTED: "You have muted this server",
        FORM_LABEL_MOBILE_SERVER_MUTED_UNTIL:
          "You have muted this server until $[**{endTime}**](endTimeHook)",
        FORM_LABEL_MOBILE_DM_MUTED: "You have muted this conversation",
        FORM_LABEL_MOBILE_DM_MUTED_UNTIL:
          "You have muted this conversation until $[**{endTime}**](endTimeHook)",
        FORM_LABEL_MOBILE_CATEGORY_MUTED: "You have muted this category",
        FORM_LABEL_MOBILE_CATEGORY_MUTED_UNTIL:
          "You have muted this category until $[**{endTime}**](endTimeHook)",
        MUTE_DURATION_15_MINUTES: "For 15 Minutes",
        MUTE_DURATION_30_MINUTES: "For 30 Minutes",
        MUTE_DURATION_1_HOUR: "For 1 Hour",
        MUTE_DURATION_3_HOURS: "For 3 Hours",
        MUTE_DURATION_8_HOURS: "For 8 Hours",
        MUTE_DURATION_24_HOURS: "For 24 Hours",
        MUTE_DURATION_ALWAYS: "Until I turn it back on",
        MUTE_UNTIL: "Mute duration",
        MUTED_UNTIL_TIME: "Muted until {endTime}",
        DURATION_FOREVER: "Forever",
        FORM_DESCRIPTION_MOBILE_NOTIFICATION_MUTED:
          "You can’t get notifications from this channel nor change settings until you unmute this channel.",
        FORM_DESCRIPTION_MOBILE_GUILD_NOTIFICATION_ALL_MESSAGES:
          "You are receiving notifications from all messages in this server, but you can override it here",
        FORM_DESCRIPTION_MOBILE_GUILD_NOTIFICATION_ONLY_MENTIONS:
          "You are receiving notifications from only mentions in this server, but you can override it here",
        FORM_DESCRIPTION_MOBILE_GUILD_NOTIFICATION_ALL_ACTIVITY:
          "You are receiving notifications from all activity in this server, but you can override it here",
        SETTINGS_GAMES_NO_GAME_DETECTED: "No game detected",
        SETTINGS_GAMES_ADDED_GAMES_LABEL: "Added Games",
        SETTINGS_GAMES_HIDDEN_LIBRARY_APPLICATIONS_LABEL: "Hidden Games",
        SETTINGS_GAMES_ENABLE_OVERLAY_LABEL: "Enable Overlay",
        SETTINGS_GAMES_NOW_PLAYING_STATE: "Now playing!",
        SETTINGS_GAMES_NOT_PLAYING: "What are you playing?!",
        SETTINGS_GAMES_OVERLAY: "Overlay",
        SETTINGS_GAMES_OVERLAY_WARNING:
          "Overlay is known to be problematic on this game.",
        SETTINGS_GAMES_NO_GAMES_HEADER: "No games added",
        SETTINGS_GAMES_NOT_SEEING_GAME: "Not seeing your game?",
        SETTINGS_GAMES_ADD_GAME: "Add it!",
        SETTINGS_GAMES_ADD_NEW_GAME: "Add Game",
        SETTINGS_GAMES_VERIFIED_ICON: "Verified",
        SETTINGS_GAMES_LAST_PLAYED: "Last played **{when}**",
        SETTINGS_GAMES_OVERLAY_ON: "Overlay: On",
        SETTINGS_GAMES_OVERLAY_OFF: "Overlay: Off",
        SETTINGS_GAMES_TOGGLE_OVERLAY: "Toggle overlay",
        SETTINGS_GAMES_TOGGLE_DETECTION: "Toggle detection",
        SETTINGS_GAMES_REPORT_INCORRECT_DETECTION:
          "Report incorrectly detected game",
        SETTINGS_GAMES_REPORT_INCORRECT_DETECTION_CONFIRMATION:
          "Report sent for: !!{gameName}!!",
        CONNECTED_ACCOUNT_VERIFYING:
          "Connecting your **!!{name}!!** account to **Discord**",
        CONNECTED_ACCOUNT_VERIFY_SUCCESS:
          "Connected your **!!{name}!!** account to **Discord**",
        CONNECTED_ACCOUNT_VERIFY_SUCCESS_DETAILS:
          "You can close this window and go back to Discord.",
        CONNECTED_ACCOUNT_VERIFY_FAILURE:
          "Failed to connect your **!!{name}!!** account to **Discord**",
        CONNECTED_ACCOUNT_VERIFY_FAILURE_DETAILS:
          "We're sorry, there was a problem connecting. You can close this window and try again.",
        DISCONNECT_ACCOUNT: "Disconnect",
        DISCONNECT_ACCOUNT_TITLE: "Disconnect !!{name}!!",
        DISCONNECT_ACCOUNT_BODY:
          "Disconnecting your account might remove you from servers you joined via this account.",
        CONNECTED_ACCOUNT_COPY_USERNAME: "Copy username for !!{name}!!",
        EVERYONE_POPOUT_BODY:
          "By using **{role}**, you are about to mention {count}+ people. Are you sure?",
        EVERYONE_POPOUT_BODY_THREAD:
          "By using **{role}**, you are about to mention {count}+ people in this thread. Are you sure?",
        EVERYONE_POPOUT_BODY_FORUM_POST:
          "By using **{role}**, you are about to mention {count}+ people in this post. Are you sure?",
        EVERYONE_POPOUT_SEND_NOW: "Send Now",
        EVERYONE_POPOUT_ESC: "**ESC** to edit",
        EVERYONE_POPOUT_ENTER: "**ENTER** to send",
        EVERYONE_POPOUT_FOOTER:
          "Maybe try mentioning a role or individual users instead?",
        ENABLE_PUBLIC_MODAL_CONTENT_FILTER_HELP:
          "Discord will automatically scan and delete media sent in this server that contain explicit content (excludes age-restricted channels).",
        ENABLE_PUBLIC_MODAL_VERIFICATION_LEVEL_DESCRIPTION:
          "Verified email required.",
        ENABLE_PUBLIC_MODAL_RULES_CHANNEL_TITLE: "Rules or Guidelines Channel",
        ENABLE_PUBLIC_MODAL_RULES_CHANNEL_HELP:
          "Community Servers must have clearly posted server rules and/or guidelines for members. Please select the channel that hosts this.",
        ENABLE_PUBLIC_MODAL_CREATE_CHANNEL: "Create one for me",
        LETS_GO: "Let's Go",
        FORM_LABEL_MAX_AGE: "Expire After",
        FORM_LABEL_MAX_USES: "Max Uses",
        FORM_LABEL_TEMPORARY: "Temporary Membership",
        FORM_HELP_TEMPORARY:
          "Members are automatically kicked when they disconnect unless a role is assigned.",
        MAX_AGE_NEVER: "Never",
        MAX_USES:
          "{maxUses, plural, =0 {No limit} one {1 use} other {{maxUses} uses}}",
        MAX_AGE_NEVER_DESCRIPTION_MOBILE: "Never expires",
        MAX_USES_DESCRIPTION_MOBILE:
          "{maxUses, plural, =0 {unlimited uses} one {1 use} other {{maxUses} uses}}",
        MAX_USES_DESCRIPTION_UNLIMITED_USES: "unlimited uses",
        INVITE_SETTINGS_EXPIRED_DESCRIPTION:
          "Expires in !!{maxAge}!!, !!{maxUses}!!",
        INVITE_SETTINGS_DESCRIPTION_NO_EXPIRATION:
          "!!{maxAge}!!, !!{maxUses}!!",
        ADVANCED_SETTINGS: "Advanced Settings",
        INVITE_MEMBERS: "Invite Members",
        INSTANT_INVITE_FRIENDS: "Invite friends to your server!",
        INVITE_TO_SERVER_NAME: "Invite friends to **!!{name}!!**",
        INVITE_PRIVATE_CHANNEL_WARNING:
          "This channel is private, only select members and roles can view this channel.",
        TOO_MANY_INVITES_ERROR:
          "The maximum number of server invites have been generated. $[View invites for this server.](inviteListHook) $[Learn more](inviteHelpHook) about how server invitations work on Discord!",
        TOO_MANY_INVITES_ERROR_MEMBER:
          "The maximum number of server invites have been generated. Admins can manage the list of invitations.",
        INVITE_FRIEND_MODAL_TITLE: "Invite friends to message",
        INVITE_FRIEND_MODAL_LOADING: "Fetching your friends list...",
        INVITE_FRIEND_MODAL_NO_RESULTS: "No results found",
        INVITE_FRIEND_MODAL_SENT: "Sent",
        INVITE_FRIEND_MODAL_INVITE: "Invite",
        INVITE_FRIEND_MODAL_RETRY: "Retry",
        INVITE_FRIEND_MODAL_BOOSTING_UPSELL:
          "Add an image to your invite link with Boosting",
        NOTIFICATION_SETTINGS_MUTE_BANNER_GUILD_TITLE:
          "Server is currently muted",
        NOTIFICATION_SETTINGS_MUTE_BANNER_CHANNEL_TITLE:
          "Channel is currently muted",
        NOTIFICATION_SETTINGS_MUTE_BANNER_SUBTITLE:
          "You are not seeing any notifications or unread badges.",
        NOTIFICATION_SETTINGS_MUTE_BANNER_SUBTITLE_UNTIL:
          "You are not seeing any notifications or unread badges until !!{endTime}!!",
        CONTACT_SYNC_FAILED_ALERT_TITLE: "Uh oh something went wrong.",
        CONTACT_SYNC_FAILED_ALERT_MESSAGE:
          "Something went wrong while syncing your contacts. Please wait a moment and try again.",
        CONTACT_SYNC_ENTER_PHONE_NUMBER_TITLE: "Verify your phone number",
        CONTACT_SYNC_ENTER_PHONE_NUMBER_DESCRIPTION:
          "We need to first verify your phone number so your contacts that also have your number can find you",
        CONTACT_SYNC_ENTER_NAME_PREFILL:
          "We prefilled this name from your contact book.",
        CONTACT_SYNC_LANDING_SCREEN_DESCRIPTION:
          "By turning on Friend Sync, we’ll automatically add your phone contacts as friends on Discord if: \n \n 1. You both have each other’s phone numbers \n \n 2. You both have Friend Sync turned on",
        CONTACT_SYNC_PERMISSIONS_DESCRIPTION_ANDROID:
          "Your contacts will be regularly sent to us. This can be changed anytime in settings. $[Learn More](learnMoreHook)",
        REVOKE: "Revoke",
        CHANNEL: "Channel",
        CHANNEL_SELECT: "Select a Channel",
        GUILD_SELECT: "Select a Server",
        MEMBER: "Member",
        COMMUNITIES: "Communities",
        INSTANT_INVITE_INVITER: "Inviter",
        INSTANT_INVITE_INVITE_CODE: "Invite Code",
        INSTANT_INVITE_USES: "Uses",
        INSTANT_INVITE_EXPIRES: "Expires",
        INSTANT_INVITE_FAILED_TO_GENERATE: "Failed to make an invite link.",
        INSTANT_INVITE_INVALID_CHANNEL:
          "You can't make an invite for that channel. Let's try another one!",
        INSTANT_INVITE_NOT_ALLOWED:
          "Looks like you can't make an invite for this server.",
        APP_OPENED_TITLE: "Discord App Launched",
        APP_OPENED_BODY:
          "We've beamed the info to your Discord app. You can close this browser tab or continue with the web version.",
        CONTINUE_TO_WEBAPP: "Continue to Discord",
        APP_NOT_OPENED: "The Discord app could not be opened.",
        APP_OPENING: "Opening Discord App.",
        INVITE_INVALID_CTA: "Tap to learn more",
        INVITE_INVALID_ERROR:
          "This invite link is invalid or has expired.\nWant to know more about Discord?",
        INSTANT_INVITE_REDIRECTING: "Redirecting...",
        INSTANT_INVITE_RESOLVING: "Resolving Invite",
        INSTANT_INVITE_ACCEPTING: "Accepting Invite",
        INSTANT_INVITE_RESOLVED_TITLE: "Why, hello there.",
        INSTANT_INVITE_ACCEPT: "Accept Invite",
        INSTANT_INVITE_SEE_MESSAGES: "See Messages",
        INSTANT_INVITE_ACCEPT_STAGE: "Join and Listen In",
        INSTANT_INVITE_DOWNLOAD_THE_APP: "Download the App",
        INSTANT_INVITE_DOWNLOAD_THE_ANDROID_APP: "Download the Android App",
        INSTANT_INVITE_DOWNLOAD_THE_IOS_APP: "Download the iOS App",
        INSTANT_INVITE_REGISTER_SUCCESS:
          "You successfully created an account and joined **{guildName}**.",
        INSTANT_INVITE_PRE_REGISTRATION_SUBTITLE:
          "You can log in or create an account in the Discord app to join **{guildName}**.",
        INSTANT_INVITE_YOU_ARE_ALREADY_A_MEMBER_OF:
          "You're already a member of",
        INSTANT_INVITE_YOU_HAVE_BEEN_INVITED_TO_CHAT:
          "!!{username}!! invited you to chat",
        INSTANT_INVITE_FRIENDS_COUNT:
          "You have **{count, plural, one {1 Friend} other {{count, number} Friends}}** on Discord",
        INSTANT_INVITE_YOU_HAVE_BEEN_INVITED_TO_CHAT_WITH:
          "You’ve been invited to chat with",
        INSTANT_INVITE_YOU_HAVE_BEEN_INVITED_TO_JOIN_BY_USER:
          "**!!{username}!!** has invited you to join",
        INSTANT_INVITE_YOU_HAVE_BEEN_INVITED_TO_JOIN:
          "You've been invited to join",
        INSTANT_INVITE_YOU_HAVE_BEEN_INVITED_TO_JOIN_GROUP_DM:
          "You've been invited to join a group DM by",
        INSTANT_INVITE_YOU_HAVE_JOINED: "You have joined",
        INSTANT_INVITE_GUILD_BY_USER:
          "$[**!!{guild}!!**](guildNameHook) by **!!{username}!!**",
        INSTANT_INVITE_GUILD_MEMBERS_ONLINE: "{membersOnline, number} Online",
        INSTANT_INVITE_GUILD_MEMBERS_TOTAL:
          "{count, plural, one {1 Member} other {{count, number} Members}}",
        INSTANT_INVITE_GUILD_MEMBERS_RATIO:
          "{online} / {offline} Members online",
        INSTANT_INVITE_ASK_USER_FOR_NEW_INVITE:
          "Ask !!{username}!! for a new invite!",
        INSTANT_INVITE_ASK_FOR_NEW_INVITE: "Ask for a new one!",
        INSTANT_INVITE_BANNED_INFO: "Uh-oh. Looks like you've been banned.",
        INSTANT_INVITE_DIRECT_FRIEND_DESCRIPTION:
          "Accepting this invite will add **!!{username}!!** as your friend on Discord.",
        INSTANT_INVITE_DIRECT_FRIEND_DESCRIPTION_REGISTER:
          "Create an account and add **!!{username}!!** as your friend on Discord.",
        INSTANT_INVITE_DISABLED_ALERT_TITLE:
          "Invites are paused in this server",
        INSTANT_INVITE_DISABLED_ALERT_SUBTITLE:
          "An admin has temporarily disabled invites",
        DEEPLINK_BROWSER_TITLE: "Discord App Detected",
        DEEPLINK_BROWSER_PROMPT:
          "Do you want to open this link in your Discord app?",
        DEEPLINK_BROWSER_APP_OPENED:
          "We've opened the link in your Discord app. You can close this browser tab now.",
        INVITE_BUTTON_TITLE_INVITED: "You've been invited to join a server",
        INVITE_BUTTON_TITLE_INVITER: "You sent an invite to join a server",
        INVITE_BUTTON_TITLE_INVITED_VOICE_CHANNEL:
          "You've been invited to join a voice channel",
        INVITE_BUTTON_TITLE_INVITED_STAGE_CHANNEL:
          "You've been invited to join a stage channel",
        INVITE_BUTTON_TITLE_INVITER_VOICE_CHANNEL:
          "You sent an invite to join a voice channel",
        INVITE_BUTTON_TITLE_INVITER_STAGE_CHANNEL:
          "You sent an invite to join a stage channel",
        INVITE_BUTTON_TITLE_STREAMING: "Invite to watch stream",
        INVITE_BUTTON_TITLE_INVITED_STREAM:
          "You've been invited to watch a stream",
        INVITE_BUTTON_TITLE_INVITER_STREAM:
          "You sent an invite to watch a stream",
        INVITE_BUTTON_TITLE_INVITED_GROUP_DM:
          "You've been invited to join a group DM",
        INVITE_BUTTON_TITLE_INVITER_GROUP_DM:
          "You sent an invite to join a group DM",
        INVITE_BUTTON_TITLE_INVITER_FRIEND: "You sent a friend link",
        INVITE_BUTTON_TITLE_INVITED_FRIEND: "You've got a friend link",
        INVITE_BUTTON_TITLE_INVITED_INVALID: "You received an invite, but...",
        INVITE_BUTTON_TITLE_INVITER_INVALID: "You sent an invite, but...",
        INVITE_BUTTON_STREAMING: "!!{name}!! is live!",
        INVITE_BUTTON_STREAMER: "You are live!",
        INVITE_BUTTON_STREAM_ENDED: "!!{name}!! was live",
        INVITE_BUTTON_STREAM_ENDED_STREAMER: "You were live",
        INVITE_BUTTON_STREAM_WATCHING: "Watching",
        INVITE_BUTTON_STREAMING_SUBTEXT: "in !!{guildName}!!",
        INVITE_BUTTON_RESOLVING: "Resolving Invite",
        INVITE_BUTTON_INVALID: "Invalid Invite",
        INVITE_BUTTON_INVALID_OWNER: "Try sending a new invite!",
        INVITE_BUTTON_EXPIRED: "Invite Expired",
        INVITE_BUTTON_BODY_IN_GUILD: "in !!{guildName}!!",
        INVITE_BUTTON_TITLE_INVITED_TO_PLAY: "You've been invited to play",
        INVITE_BUTTON_ADD_FRIEND: "Add Friend",
        INVITE_BUTTON_ALREADY_FRIENDS: "Send a Message",
        LEARN_MORE: "Learn More",
        LEARN_MORE_ALT: "Learn about Nitro",
        LEARN_MORE_LINK: "[Learn More]({helpdeskArticle})",
        LEARN_MORE_CLICK: "[Learn More](onClick)",
        LOGIN_TITLE: "Welcome back!",
        FORM_LABEL_EMAIL: "Email",
        FORM_LABEL_PHONE_NUMBER: "Phone Number",
        FORM_LABEL_EMAIL_OR_PHONE_NUMBER: "Email or Phone Number",
        EMAIL_REQUIRED: "A valid email is required.",
        PHONE_REQUIRED: "A valid phone is required.",
        LOGIN_REQUIRED: "A valid login is required.",
        EMAIL_INVALID:
          "The email entered is not valid, please update it and try again.",
        PHONE_INVALID: "Phone number is not valid.",
        PHONE_FAILED_TO_ADD:
          "Failed to add phone number, please try again later",
        FORM_LABEL_PASSWORD: "Password",
        REGISTER_PASSWORD_EXPERIMENT_HINT:
          "Password must be at least 8 characters",
        PASSWORD_REQUIRED: "Password is required.",
        PASSWORD_LENGTH_ERROR: "Passwords must be between 8 and 72 characters",
        LOGIN: "Login",
        _LOGIN: "Log In",
        LOGIN_STAGE: "Login and Listen In",
        _LOGIN_STAGE: "Listen In",
        REGISTER: "Register",
        ENTER_PHONE_OR_EMAIL: "Enter phone or email",
        ENTER_YOUR_PHONE: "Enter your phone number",
        ENTER_YOUR_EMAIL: "Enter your email",
        ENTER_EMAIL: "Enter email",
        REGISTER_USERNAME_HINT: "You can always change this later!",
        REGISTER_LOGIN_PRIVACY_NOTICE:
          "[View our Privacy Policy]({privacyURL})",
        FORGOT_PASSWORD: "Forgot your password?",
        NEED_ACCOUNT: "Need an account?",
        ACCOUNT_SCHEDULED_FOR_DELETION_TITLE: "Account Scheduled for Deletion",
        ACCOUNT_DISABLED_TITLE: "Account Disabled",
        ACCOUNT_SCHEDULED_FOR_DELETION_DESCRIPTION:
          "Your account is scheduled to self-destruct soon.",
        ACCOUNT_DISABLED_DESCRIPTION: "You cannot use it while it's disabled.",
        RETURN_TO_LOGIN: "Return To Login",
        _RETURN_TO_LOGIN: "Return to Login",
        ACCOUNT_SCHEDULED_FOR_DELETION_CANCEL:
          "Change your mind? [Restore Account](onClick)",
        ACCOUNT_SCHEDULED_FOR_DELETION_CANCEL_MOBILE: "Restore Account",
        PASSWORD_MANAGER: "Password Manager",
        PASSWORD_MANAGER_USE: "Use a password manager?",
        PASSWORD_MANAGER_OPEN_SETTINGS: "Open Settings",
        PASSWORD_MANAGER_INFO_ANDROID:
          "If you use a password manager, you'll need to allow it in Accessibility Settings -> Downloaded Services. Don't worry, we can take you there.",
        PASSWORD_MANAGER_OPEN_SETTINGS_ERROR:
          "Cannot open Accessibility Settings",
        LOGIN_WITH_QR: "Log in with QR Code",
        LOGIN_WITH_QR_DESCRIPTION:
          "Scan this with the **Discord mobile app** to log in instantly.",
        LOGIN_WITH_QR_ERROR_SUBTITLE:
          "Captcha attempt unsuccessful. Please try logging in with username and password, or phone number if this issue persists.",
        LOGIN_WITH_QR_LOADING_LABEL: "QR code login is loading",
        LOGIN_WITH_QR_LOADING_FINISHED_LABEL: "QR code login is now ready",
        LOGIN_AS: "Logging in as !!{username}!!",
        CONFIRM_QR_CHECK_YOUR_PHONE: "Check your phone!",
        CONFIRM_QR_DESCRIPTION: "Never scan a login QR code from another user.",
        CONFIRM_QR_KEEP_ME_SIGNED_IN: "Keep me signed in",
        CONFIRM_QR_LOGIN_ON_COMPUTER: "Log in",
        QR_CODE_NOT_FOUND: "Can't find this computer!",
        QR_CODE_NOT_FOUND_DESCRIPTION:
          "Oh no! Wumpus can't find the computer you're trying to log in on. Make sure that the computer is connected to the internet, and try reopening the Discord desktop app.",
        QR_CODE_LOGIN_CONFIRM: "Log in on a new device?",
        QR_CODE_LOGIN_SUCCESS: "You're in!",
        QR_CODE_LOGIN_SUCCESS_FLAVOR: "You're now logged in on desktop.",
        QR_CODE_LOGIN_START_OVER: "Not me, start over",
        QR_CODE_LOGIN_FINISH_BUTTON: "Start talking",
        QR_CODE_LOGIN_DELAY: "Log in on a new device? Ready in !!{seconds}!!",
        QR_CODE_INVALID: "Invalid QR Code Found",
        QR_CODE_FAIL: "Failed to scan",
        QR_CODE_FAIL_DESCRIPTION: "Something went wrong when trying to scan.",
        QR_CODE_IN_APP_SCANNER_ONLY:
          "Rescan the QR code to continue the login process.",
        SMS_CONFIRMATION_TITLE: "Enter your confirmation code",
        SMS_CONFIRMATION_DESCRIPTION: "An SMS was sent to !!{phone}!!.",
        PASSWORD_RECOVERY_TITLE: "Password Recovery",
        PASSWORD_RECOVERY_EXTERNAL_LINK_DESCRIPTION:
          "To continue, open our change password page in your browser by tapping the button below.",
        PASSWORD_RECOVERY_VERIFY_PHONE_TITLE:
          "Enter your confirmation code to reset your password",
        PASSWORD_RECOVERY_VERIFY_PHONE_SUBTITLE:
          "An SMS was sent to the phone number connected to this account.",
        PASSWORD_RECOVERY_VERIFY_PHONE_SUBTITLE_RESEND:
          "An SMS was sent to the phone number connected to this account. Didn't get a code? [Resend Code](onResendClick)",
        VERIFY_BY_PHONE_BAIL: "Sign up using email instead",
        PHONE_IP_AUTHORIZATION_TITLE:
          "Enter your confirmation code to verify it's you",
        PHONE_IP_AUTHORIZATION_SUBTITLE:
          "We don’t recognize this location. We sent a confirmation code to the phone number connected to this account.",
        PHONE_IP_AUTHORIZATION_SUBTITLE_RESEND:
          "We don’t recognize this location. We sent a confirmation code to the phone number connected to this account. Didn't get a code? [Resend Code](onResendClick)",
        CONTINUE_IN_BROWSER: "Continue in browser",
        BACK_TO_LOGIN: "Back to Login",
        AUTH_MESSAGE_INVITED_BY: "!!{username}!! invited you to join",
        AUTH_MESSAGE_INVITED_TO_STREAM:
          "You've been invited to !!{username}!!'s stream in",
        AUTH_MESSAGE_INVITED_TO_PLAY_USERNAME:
          "!!{username}!! invited you to play",
        AUTH_MESSAGE_INVITED_TO_PLAY: "You've been invited to play",
        AUTH_USERNAME_TOOLTIP: "You can change this later.",
        AUTH_BROWSER_HANDOFF_DETECTING_DESCRIPTION:
          "Trying to detect a Discord account from your default browser. Gimme just one second...",
        AUTH_LOGIN_BODY: "We're so excited to see you again!",
        AUTH_IP_AUTH_SUCCEEDED_SUGGESTION:
          "If you followed this link after trying to login on the desktop or mobile app, please go back and try again.",
        _AUTH_IP_AUTH_SUCCEEDED_SUGGESTION:
          "If you followed this link after trying to log in on the desktop or mobile app, please go back and try again.",
        AUTH_EXPIRED_SUGGESTION: "Please login to resend the link.",
        _AUTH_EXPIRED_SUGGESTION: "Please log in to resend the link.",
        AUTH_VERFICATION_EXPIRED_SUGGESTION:
          "Please login and resend the link.",
        _AUTH_VERFICATION_EXPIRED_SUGGESTION:
          "Please log in and resend the link.",
        AUTH_DISABLE_EMAIL_NOTIFICATIONS_SUCCESS_HEADER:
          "Email Notifications Disabled",
        AUTH_DISABLE_EMAIL_NOTIFICATIONS_SUCCESS_BODY:
          "Your inbox feels a bit lighter.",
        AUTH_DISABLE_EMAIL_NOTIFICATIONS_FAILURE_HEADER:
          "Whoops. That didn't work.",
        AUTH_DISABLE_EMAIL_NOTIFICATIONS_FAILURE_BODY:
          "Try doing that again. Sorry!",
        AUTH_INVALID_INVITE_BODY:
          "This invite may be expired, or you might not have permission to join.",
        AUTH_BANNED_INVITE_BODY:
          "Uh-oh. Looks like you've been banned. You'll no longer be able to join or interact within this server.",
        AUTH_INVALID_INVITE_TITLE: "Invite Invalid",
        AUTH_INVALID_INVITE_TIP: "Why is my invite invalid?",
        AUTH_VIEW_PASSWORD: "View Password",
        AUTH_HIDE_PASSWORD: "Hide Password",
        NOTIFICATIONS: "Notifications",
        NOTIFICATIONS_FOR_YOU: "For You",
        NOTIFICATIONS_MENTIONS: "Mentions",
        CHATS: "Chats",
        MESSAGES: "Messages",
        MESSAGE_A11Y_ROLE_DESCRIPTION: "Message",
        DELETE_MESSAGE_TITLE: "Delete Message",
        DELETE_MESSAGE_BODY: "Are you sure you want to delete this message?",
        DELETE_MESSAGE_REPORT: "Report to Discord's Trust & Safety team.",
        DELETE_MESSAGE_CONTEXT_MENU_HINT:
          "\nYou can hold down shift when clicking **delete message** to bypass this confirmation entirely.",
        EDIT: "Edit",
        PREVIEW: "Preview",
        EXIT_PREVIEW: "Exit Preview",
        PREVIEW_MODE: "Preview Mode",
        DELETE: "Delete",
        DELETED: "Deleted",
        RETRY: "Retry",
        UNPIN: "Unpin",
        PIN: "Pin",
        PIN_MESSAGE: "Pin Message",
        UNPIN_MESSAGE: "Unpin Message",
        MESSAGE_PUBLISHED: "Message published.",
        MESSAGE_PINNED: "Message pinned.",
        MESSAGE_UNPINNED: "Message unpinned.",
        NEW_MESSAGES_DIVIDER: "New Messages",
        NEW_MESSAGES:
          "{count, plural, one {1 new message} other {{count} new messages}} since {timestamp, time, short}",
        NEW_MESSAGES_SUMMARIES: "{count} new messages",
        JUMP_TO_LAST_UNREAD_MESSAGE: "Jump to last unread message",
        NEW_MESSAGES_WITH_DATE:
          "\n{count, plural, one {1 new message} other {{count} new messages}} since {timestamp, time, short}\non {timestamp, date, long}\n",
        NEW_MESSAGES_ESTIMATED:
          "{count}+ new messages since {timestamp, time, short}",
        NEW_MESSAGES_ESTIMATED_WITH_DATE:
          "{count}+ new messages since {timestamp, time, short} on {timestamp, date, long}",
        NEW_MESSAGES_ESTIMATED_SUMMARIES: "{count}+ new messages",
        NEW_SUMMARIES:
          "{count, plural, one {1 new summary} other {{count, number} new summaries}}",
        MARK_AS_READ: "Mark As Read",
        MARK_GUILD_AS_READ: "Mark Server As Read",
        MARKED_AS_READ: "Marked As Read",
        JUMP_TO_PRESENT: "Jump To Present",
        JUMP_TO_REPLY: "Jump To Reply",
        YOURE_VIEWING_OLDER_MESSAGES: "You're viewing older messages",
        BEGINNING_DM:
          "This is the beginning of your direct message history with **!!{username}!!**.",
        BEGINNING_GROUP_DM_MANAGED:
          "You will automatically leave this group when you're done.",
        BEGINNING_GROUP_DM:
          "Welcome to the beginning of the **!!{name}!!** group.",
        BEGINNING_GROUP_DM_NEW:
          "Welcome to your new group! Invite friends whenever you're ready.",
        GROUP_DM_SINGLE_USER_SUMMARY: "!!{user}!!",
        GROUP_DM_TWO_USER_SUMMARY: "!!{user1}!! and !!{user2}!!",
        GROUP_DM_MULTIPLE_USER_SUMMARY:
          "!!{user1}!!, !!{user2}!!, and {extras, plural, =1 {{extras, number} other} other {{extras, number} others}}",
        BEGINNING_CHANNEL_NO_HISTORY:
          "You do not have permission to view the message history of **#!!{channelName}!!**.",
        BEGINNING_CHANNEL_WELCOME: "Welcome to !!{channelName}!!!",
        BEGINNING_CHANNEL_DESCRIPTION:
          "This is the start of the !!{channelName}!! channel. $[](topicHook)",
        BEGINNING_CHAT_DM_MOBILE:
          "This is the very beginning of your legendary conversation with !!{username}!!.",
        MESSAGE_EDITED: "edited",
        MESSAGE_EDITED_TIMESTAMP_A11Y_LABEL: "Edited !!{timeFormatted}!!",
        EDIT_TEXTAREA_HELP:
          "escape to [cancel](onCancel) • enter to [save](onSave)",
        INVALID_VOICE_CHANNEL: "Invalid Channel",
        INVALID_TEXT_CHANNEL: "invalid-channel",
        SPOILER_REVEAL: "Click to reveal spoiler",
        SPOILER_MARK_SELECTED: "Mark as spoiler",
        SPOILER_HIDDEN_A11Y_LABEL: "spoiler, hidden",
        SPOILER: "Spoiler",
        SENSITIVE_CONTENT:
          "Content warning: images or videos may contain nudity, violence, or other sensitive content",
        IMAGE_ALT: "Alt",
        SUPPRESS_ALL_EMBEDS: "Remove all embeds",
        APP_TAG: "APP",
        BOT_TAG_BOT: "BOT",
        BOT_TAG_SERVER: "SERVER",
        REPORT_MESSAGE_MENU_OPTION: "Report Message",
        REMOVE_FILE: "Remove file",
        SYSTEM_PERMISSION_REQUEST_FILES:
          "To access **your impressive files, you'll need to grant us permission**.",
        SYSTEM_PERMISSION_REQUEST_CAMERA:
          "To access **your camera, you'll need to grant us permission**.",
        SYSTEM_PERMISSION_GRANT: "Grant Permission",
        SYSTEM_ENABLE_PERMISSIONS: "Enable Permissions",
        CHOOSE_AN_APPLICATION: "Choose an application",
        DOWNLOAD_FILE_COMPLETE: "!!{fileName}!! downloaded",
        DOWNLOAD_FAILED: "Download failed",
        ATTACHMENT_FILENAME_UNKNOWN: "unknown",
        SHARE_TO: "Share to",
        OTHER_OPTIONS: "Other options",
        NOTIFICATION_REPLY: "Reply",
        NOTIFICATION_REPLY_SUCCESS: "Replied to {recipient}",
        NOTIFICATION_REPLY_FAILED: "Failed to reply to {recipient}",
        NOTIFICATION_MUTE_1_HOUR: "Mute 1H",
        MESSAGE_TTS: "!!{username}!! said !!{body}!!",
        MESSAGE_TTS_REPLY:
          "!!{username}!! replied to !!{replyUsername}!! !!{body}!!",
        MESSAGE_TTS_DELETED_ROLE: "Deleted Role",
        FORM_LABEL_LAST_SEEN: "Last Seen",
        FORM_HELP_LAST_SEEN_1:
          "\nPruning will kick **{members, plural, =-1 {[calculating...] members} =0 {0 members} one {1 member} other\n{{members} members}}** who have not been seen on Discord in **{days, plural, one {1 day} other {{days} days}}**\nand are not assigned to any roles. They can rejoin the server using a new invite.\n  ",
        LAST_SEEN:
          "more than {days, plural, one {1 day} other {{days} days}} ago",
        PRUNE: "Prune",
        PRUNE_WITH_ROLES: "Also include members with these roles",
        FORM_HELP_LAST_SEEN_WITH_ROLES_1:
          "\nPruning will kick **{members, plural, =-1 {[calculating...] members} =0 {0 members} one {1 member} other\n{{members} members}}** who have not been seen on Discord in **{days, plural, one {1 day} other {{days} days}}**\nand are assigned to just the roles you've selected. Members who are not assigned to any roles are still included. They can rejoin the server using a new invite.\n  ",
        REGISTER_TITLE: "Create an account",
        FORM_LABEL_ACCOUNT_INFORMATION: "Account Information",
        FORM_LABEL_USERNAME: "Username",
        FORM_LABEL_USERNAME_MOBILE: "Pick a username",
        USERNAME_REQUIRED: "Username is required.",
        FORM_PLACEHOLDER_USERNAME: "What should everyone call you?",
        ALREADY_HAVE_ACCOUNT: "Already have an account?",
        CONTINUE: "Continue",
        TRY_IT_OUT: "Try it out",
        LOG_IN_WITH_APP: "Log In with the App",
        BEEP_BOOP: "Beep boop. Boop beep?",
        TERMS_PRIVACY:
          "By registering, you agree to Discord's [Terms of Service]({termsURL}) and [Privacy Policy]({privacyURL}).",
        TERMS_PRIVACY_OPT_IN:
          "I have read and agree to Discord's [Terms of Service]({termsURL}) and [Privacy Policy]({privacyURL}).",
        TERMS_PRIVACY_ON_REGISTER:
          "By clicking {buttonText}, you agree to Discord's [Terms of Service]({termsURL}) and [Privacy Policy]({privacyURL}).",
        TERMS_PRIVACY_ON_REGISTER_MOBILE:
          "By tapping {buttonText}, you agree to Discord's [Terms of Service]({termsURL}) and [Privacy Policy]({privacyURL}).",
        TERMS_PRIVACY_OPT_IN_TOOLTIP:
          "You need to agree to our terms of service to continue",
        LOCALE_TITLE: "Hi! Select language",
        LOCALE_SUBTITLE: "You can change this later.",
        LOCALE_SELECTOR_TITLE: "Select Language",
        SEARCH_LANGUAGES: "Search Languages",
        SIGN_UP_CAPPED: "Sign Up",
        CREATE_ACCOUNT: "Create Account",
        PASSWORDLESS_ENTER_PASSWORD_TITLE: "Enter your password",
        PASSWORDLESS_ENTER_PASSWORD_DESCRIPTION_PHONE:
          "Enter the password for the account with the phone number {phone}",
        PASSWORDLESS_ENTER_PASSWORD_DESCRIPTION_EMAIL:
          "Enter the password for the account with the email address {email}",
        TEXT_DATA_RATES: "Standard message and data rates apply.",
        PHONE_NOT_MOBILE_ERROR:
          "Unable to register using phone number. Please register with an e-mail address.",
        NUF_BODY_REFRESH:
          "Join over 100 million people who use Discord to talk with communities and friends.",
        NUF_TITLE_MOBILE: "Welcome to Discord",
        NUF_BODY_MOBILE: "Login or Register to get started",
        _NUF_BODY_MOBILE: "Log In or Register to get started",
        GET_STARTED: "Get Started",
        SKIP: "Skip",
        CREATE_SERVER_TITLE_MOBILE_REFRESH: "Create a server",
        CREATE_SERVER_DESCRIPTION_MOBILE_REFRESH:
          "Your server is where you and your friends hang out.\n  Make yours and start talking.",
        OR: "or",
        JOIN_SERVER_TITLE_MOBILE_REFRESH: "Join a server",
        JOIN_EXISTING_SERVER: "Join an existing server",
        JOIN_WITH_INVITE_LINK: "Join with Invite Link",
        JOIN_STUDENT_HUB: "Join a Student Hub",
        JOIN_SERVER_DESCRIPTION_MOBILE_REFRESH:
          "Enter an invite below to join an existing server.",
        FORM_LABEL_INVITE_LINK: "Invite link",
        EXAMPLES: "Examples",
        EXAMPLE: "Example",
        JOIN_SERVER_INVITE_EXAMPLES_HEADER: "Invites should look like",
        JOIN_SERVER_INVITE_EXAMPLES_MOBILE_REFRESH:
          "Invites should look like $[!!{example1}!!](exampleHook), $[!!{example2}!!](exampleHook), or $[!!{example3}!!](exampleHook)",
        NOTICE_CONNECTION_CONFLICT:
          "Your voice has been disconnected because you connected at another location.",
        NOTICE_VOICE_CONNECTED_LAST_SESSION:
          "You were in a voice channel last time you left Discord.",
        NOTICE_UNCLAIMED_ACCOUNT:
          "This is an unclaimed account. Claim it before it's lost.",
        NOTICE_UNVERIFIED_ACCOUNT:
          "Please check your email and follow the instructions to verify your account.",
        NOTICE_UNVERIFIED_ACCOUNT_UU:
          "Please check your email to verify your account and keep your current username.",
        NOTICE_NATIVE_APPS_2020_06:
          "Want to take full advantage of Discord with better performance, in-game overlay, and more? Get the desktop app!",
        NOTICE_SCHEDULED_MAINTENANCE:
          "Discord will be undergoing scheduled maintenance on **{start, date, long}** at **{start, time, short}**.",
        NOTICE_NO_INPUT_DETECTED:
          "\nWell, it looks like Discord is not detecting any input from your mic. Let's fix that... together.\n",
        NOTICE_NO_INPUT_DETECTED_SETTINGS:
          "\nWell, it looks like Discord is not detecting any input from your mic. Let's fix that!\n",
        NOTICE_NO_INPUT_DETECTED_HELP_LINK_TEXT: "Help!",
        NOTICE_NO_INPUT_DETECTED_SETTINGS_LINK_TEXT: "Visit Settings",
        NOTICE_CALLSCOPE_CALL:
          "Metrics of this call are being captured for diagnostics purposes.",
        NOTICE_CALLSCOPE_MARK_ISSUE: "Mark Video Issue",
        NOTICE_CALLSCOPE_MARK_ISSUE_TOOLTIP:
          "Mark video issues as soon as they occur. This helps Discord better know where to look when diagnosing the problem.",
        NOTICE_CALLSCOPE_DIALOG_HEADER: "Video Issue Report",
        NOTICE_CALLSCOPE_DIALOG_INPUT: "A description of the video problem.",
        NOTICE_HARDWARE_MUTE:
          "\n  Well, it looks like the **{vendorName} {modelName}** microphone hardware mute switch is on.\n  ",
        NOTICE_H264_DISABLED_SETTINGS:
          "\n  Well, it looks like openH264 is disabled. Let's fix that!\n  ",
        NOTICE_H264_DISABLED_SETTINGS_LINK_TEXT: "Visit Settings",
        NOTICE_CORRUPT_INSTALLATION:
          "\nWell, it looks like your Discord installation is corrupt. Let's fix that... together.\n",
        NOTICE_CORRUPT_INSTALLATION_HELP_LINK_TEXT: "Help!",
        NOTICE_STREAMER_MODE_TEXT:
          "Streamer Mode is enabled. Usernames have been truncated.",
        NOTICE_CONNECT_SPOTIFY:
          "Connect your Spotify account to display your music in your status!",
        NOTICE_CONNECT_PLAYSTATION:
          "Connect your PlayStation Network account to display games you're playing in your status!",
        CLAIM_ACCOUNT: "Claim Account",
        CLAIM_ACCOUNT_SHORT: "Claim",
        CLAIM_ACCOUNT_LONG: "Claim Your Account",
        RECONNECT: "Reconnect",
        RECONNECTING: "Reconnecting",
        UNLOCK_WITH_NITRO: "Unlock with Nitro",
        DISMISS: "Dismiss",
        DISABLE: "Disable",
        ENABLE: "Enable",
        CONFIGURE: "Configure",
        RESEND: "Resend",
        CHECK_IT_OUT: "Check it out",
        ENABLE_NOTIFICATIONS: "Enable notifications",
        NOTICE_SPOTIFY_AUTO_PAUSED:
          "Spotify playback paused while transmitting audio.",
        NOTICE_WHATS_THIS: "What's this?",
        NOTICE_PREMIUM_PROMO_MESSAGE: "Enhance your Discord experience!",
        NOTICE_PREMIUM_PROMO_ACTION: "Check it out",
        NOTICE_MFA_SMS_BACKUP:
          "We suggest adding a phone to your 2 factor authentication settings as a backup.",
        NOTICE_MFA_SMS_BACKUP_BUTTON: "Add Phone",
        NOTICE_DISPATCH_ERROR: "Oh no, an error has occurred.",
        NOTICE_DISPATCH_ERROR_WITH_CODE:
          "Oh no, an error has occurred. Code {code}",
        NOTICE_DISPATCH_ERROR_DISK_LOW:
          "You do not have enough disk space. {required} is required but only {available} is available.",
        NOTICE_DISPATCH_ERROR_POST_INSTALL_FAILED:
          "Oh no, Discord failed to install the stuff the game needs. {name} failed.",
        NOTICE_DISPATCH_ERROR_FILE_NAME_TOO_LONG:
          "Oh no, this game has file names too long for Windows. Please select a shorter install directory.",
        NOTICE_DISPATCH_ERROR_UNWRITABLE:
          "Oh no, the install location you chose is not writable. You chose {path}",
        NOTICE_DISPATCH_ERROR_INVALID_DRIVE:
          "Oh no, the install location you chose is not valid. You chose {path}",
        NOTICE_DISPATCH_ERROR_NO_MANIFESTS:
          "Oh no, it looks like there is no content for this game. Please contact support.",
        NOTICE_DISPATCH_ERROR_NOT_ENTITLED:
          "Oh no, it looks like you do not own this game. Please contact support if you believe this is an error.",
        NOTICE_DISPATCH_ERROR_POST_INSTALL_CANCELLED:
          "It looks like you said no to an install script. You need to say yes for the game to install.",
        NOTICE_DISPATCH_ERROR_IO_PERMISSION_DENIED:
          "Oh no, we failed to update the game. Please ensure the game is closed then try again.",
        NOTICE_DISPATCH_INSTALL_SCRIPT_PROGRESS:
          "Discord has to install some stuff before we can launch your game. Installing ({progress, number} of {total, number}).",
        NOTICE_DISPATCH_INSTALL_SCRIPT_PROGRESS_WITH_NAME:
          "Discord has to install some stuff before we can launch your game. Installing {name} ({progress, number} of {total, number}).",
        NOTICE_DISPATCH_APPLICATION_LOCK_FAILED:
          "Discord is already performing an operation on this game. Ensure that no other Discord clients are running.",
        NOTICE_DISPATCH_ERROR_DISK_FULL:
          "On no, it looks like your disk is full. Free up some space and try again.",
        NOTICE_DISPATCH_API_ERROR:
          "Oh no, it looks like the Discord servers are having issues. Please try again in a little bit.",
        NOTICE_APPLICATION_TEST_MODE:
          "Test mode is currently active for **!!{applicationName}!!**. Unpublished SKUs will appear and you will not be charged for any related payments.",
        NOTICE_APPLICATION_TEST_MODE_GO_TO_LISTING: "Go to SKU",
        APPLICATION_TEST_MODE_VIEW_OTHER_LISTINGS:
          "See other listings for this SKU",
        NOTICE_DETECTED_OFF_PLATFORM_PREMIUM_PERK_MESSAGE:
          "Play **!!{applicationName}!!**? Redeem your free *!!{skuName}!!* Nitro perk!",
        NOTICE_DETECTED_OFF_PLATFORM_NO_PREMIUM_PERK_MESSAGE:
          "Play **!!{applicationName}!!**? Get a free *!!{skuName}!!*!",
        NOTICE_DETECTED_OFF_PLATFORM_PREMIUM_PERK_BUTTON: "Redeem Now",
        NOTICE_ENABLE_PUBLIC_GUILD_UPSELL_MESSAGE:
          "Get custom features and tools that can help you run your community.",
        NOTICE_CHANNEL_MAX_MEMBERS_CAP_REACHED_MESSAGE:
          "Your server is approaching its member size limit. To grow past {maxMemberCount, number} members, you need to send in a request. [Learn more]({maxMembersUrl})",
        NOTICE_PREMIUM_TRIAL_ENDING_DAYS:
          "Only {days, plural, =1 {# day} other {# days}} left to claim your trial",
        NOTICE_PREMIUM_TRIAL_ENDING_HOURS:
          "Only {hours, plural, =1 {# hour} other {# hours}} left to claim your trial",
        NOTICE_PREMIUM_TRIAL_ENDING_MINUTES:
          "Only {minutes, plural, =1 {# minute} other {# minutes}} left to claim your trial",
        NOTICE_PREMIUM_TIER_2_TRIAL_ENDING_DAYS:
          "You have {days, plural, =1 {# day} other {# days}} left to get a free month of Nitro",
        NOTICE_PREMIUM_TIER_2_TRIAL_ENDING_HOURS:
          "You have {hours, plural, =1 {# hour} other {# hours}} left to get a free month of Nitro",
        NOTICE_PREMIUM_TIER_2_TRIAL_ENDING_MINUTES:
          "You have {minutes, plural, =1 {# minute} other {# minutes}} left to get a free month of Nitro",
        NOTICE_PREMIUM_TIER_2_TRIAL_ENDING_CTA: "Claim Your Free Month!",
        NOTICE_PREMIUM_TIER_0_TRIAL_ENDING_DAYS_VARIANT:
          "You have {days, plural, =1 {# day} other {# days}} left to get a free trial of Nitro Basic",
        NOTICE_PREMIUM_TIER_0_TRIAL_ENDING_HOURS_VARIANT:
          "You have {hours, plural, =1 {# hour} other {# hours}} left to get a free trial of Nitro Basic",
        NOTICE_PREMIUM_TIER_0_TRIAL_ENDING_MINUTES_VARIANT:
          "You have {minutes, plural, =1 {# minute} other {# minutes}} left to get a free trial of Nitro Basic",
        NOTICE_PREMIUM_TIER_2_TRIAL_ENDING_DAYS_VARIANT:
          "You have {days, plural, =1 {# day} other {# days}} left to get a free trial of Nitro",
        NOTICE_PREMIUM_TIER_2_TRIAL_ENDING_HOURS_VARIANT:
          "You have {hours, plural, =1 {# hour} other {# hours}} left to get a free trial of Nitro",
        NOTICE_PREMIUM_TIER_2_TRIAL_ENDING_MINUTES_VARIANT:
          "You have {minutes, plural, =1 {# minute} other {# minutes}} left to get a free trial of Nitro",
        NOTICE_PREMIUM_TIER_2_TRIAL_ENDING_CTA_VARIANT:
          "Claim Your Free Nitro!",
        NOTICE_PREMIUM_TIER_0_TRIAL_ENDING_CTA_VARIANT:
          "Claim Your Free Nitro Basic!",
        NOTICE_NITRO_PRICE_CHANGED:
          "We updated prices in {countryName}. You’re now paying less for Nitro.",
        PLAYSTATION_CONNECT_DESCRIPTION:
          "Let your friends see you’re online and what game you’re playing!",
        ACTIVITY_FEED_CARD_GDPR_BUTTON_YES: "Yes, count me in!",
        ACTIVITY_FEED_NONE_PLAYING_HEADER: "It's quiet for now...",
        ACTIVITY_FEED_NONE_PLAYING_BODY:
          "When a friend starts an activity—like playing a game or hanging out on voice—we’ll show it here!",
        ACTIVITY_FEED_NOW_PLAYING_MULTIPLE_GAMES: "Playing Multiple Games",
        ACTIVITY_FEED_NOW_PLAYING_XBOX: "Playing on Xbox",
        ACTIVITY_FEED_NOW_PLAYING_SPOTIFY: "Listening to Spotify",
        ACTIVITY_FEED_NOW_PLAYING_LISTENING: "Listening to {name}",
        ACTIVITY_FEED_NOW_PLAYING_STAGE_CHANNEL: "Listening to a Stage",
        ACTIVITY_FEED_NOW_PLAYING_WATCHING: "Watching a Stream",
        ACTIVITY_FEED_NOW_PLAYING_IN_A_VOICE_CHANNEL: "In a Voice Channel",
        ACTIVITY_FEED_NOW_PLAYING_HEADER_TWO_KNOWN:
          "**!!{user1}!!**, **!!{user2}!!**, and {extras, plural, =1 {{extras, number} other} other {{extras, number} others}}",
        ACTIVITY_FEED_NOW_PLAYING_HEADER_TWO_KNOWN_ONLY:
          "**!!{user1}!!** and **!!{user2}!!**",
        ACTIVITY_FEED_NOW_STREAMING_TWITCH: "Streaming on Twitch",
        ACTIVITY_FEED_NOW_PLAYING_HEADER_TWO_KNOWN_ONLY_ALT:
          "!!{user1}!! and !!{user2}!!",
        ACTIVITY_FEED_NOW_PLAYING_HEADER_TWO_KNOWN_ALT:
          "!!{user1}!!, !!{user2}!!, and {extras, plural, =1 {{extras, number} other} other {{extras, number} others}}",
        ACTIVITY_FEED_NOW_PLAYING_ACTION_JOIN_CHANNEL: "Join Channel",
        ACTIVITY_FEED_NOW_PLAYING_ACTION_GO_TO_SERVER: "Go to Server",
        ACTIVITY_FEED_NOW_PLAYING_ACTION_LISTEN_ALONG: "Listen Along",
        ACTIVITY_FEED_NOW_PLAYING_ACTION_PLAY_ON_SPOTIFY: "Play on Spotify",
        ACTIVITY_FEED_USER_PLAYING_JUST_STARTED: "!!{name}!! - just now",
        ACTIVITY_FEED_USER_PLAYING_FOR_MINUTES: "!!{name}!! – {time}m",
        ACTIVITY_FEED_USER_PLAYING_FOR_HOURS: "!!{name}!! – {time}h",
        ACTIVITY_FEED_USER_PLAYING_FOR_DAYS: "!!{name}!! – {time}d",
        ACTIVITY_FEED_SINGLE_MEMBER_LIST_HEADER:
          "{memberCount, plural, =1 {{memberCount, number} Person} other {{memberCount, number} People}}",
        ACTIVITY_FEED_OTHER_MEMBER_LIST_HEADER: "Other Members",
        ACTIVITY_FEED_POPOUT_APPLICATION_RUNNING:
          "!!{name}!! is already running.",
        ACTIVITY_FEED_POPOUT_APPLICATION_LAUNCHING: "Launching !!{name}!!.",
        DIRECT_MESSAGES: "Direct Messages",
        DIRECT_MESSAGES_PENDING_FRIENDS:
          "Direct Messages, {requestCount, number} pending friend requests",
        DIRECT_MESSAGE: "Direct Message",
        DM_SEARCH_PLACEHOLDER: "Find or start a conversation",
        PLAYING_GAME: "Playing **!!{game}!!**",
        STREAMING: "Streaming **!!{name}!!**",
        STREAMING_A_GAME: "Streaming a game",
        LISTENING_TO: "Listening to **!!{name}!!**",
        WATCHING: "Watching **!!{name}!!**",
        COMPETING: "Competing in **!!{name}!!**",
        UNFORMATTED_PLAYING_GAME: "Playing {game}",
        UNFORMATTED_STREAMING: "Streaming {name}",
        UNFORMATTED_LISTENING_TO: "Listening to {name}",
        UNFORMATTED_WATCHING: "Watching {name}",
        UNFORMATTED_COMPETING: "Competing in {name}",
        SPECTATORS: "Spectators - {numViewers}",
        HIDE_CHAT: "Hide chat",
        SHOW_CHAT: "Show chat",
        CHANNEL_ADD_TO_MESSAGES: "Add to Messages",
        CHANNEL_REMOVE_FROM_MESSAGES: "Remove From Messages",
        NOTIFICATION_TITLE_DISCORD: "Discord",
        BROWSER_NOTIFICATIONS_ENABLED_BODY: "Swoosh. Notifications are a go!",
        NOTIFICATION_REPORT_TOO_MANY: "I get too many of these notifications",
        NOTIFICATION_REPORT_RELEVANT: "It wasn’t relevant to me",
        NOTIFICATION_REPORT_CONTENT: "I don’t like the content",
        NOTIFICATION_REPORT_BODY: "Tell us about your notification experience.",
        NOTIFICATION_EMBED_BUTTON:
          "Was this notification useful? [Let us know!](handleMessage)",
        NOTIFICATION_EMBED_BUTTON_2:
          "[Highlight Notification Settings](handleMessage)",
        NOTIFICATION_REPORT_TITLE: "Was this notification useful?",
        NOTIFICATION_REPORT_FEEDBACK: "Give Feedback on this Notification",
        NOTIFICATION_REPORT_TEXT:
          "We’ll use this to improve the notifications experience. Visit the [help center]({helpUrl}) to learn about highlights notifications.",
        NOTIFICATION_CENTER_FRIEND_ACCEPTED: "Friend added!",
        NOTIFICATION_CENTER_FRIEND_DECLINED: "Friend request ignored",
        NOTIFICATION_CENTER_INCOMING_FRIEND_REQUEST:
          "{username} sent you a friend request.",
        NOTIFICATION_CENTER_INCOMING_FRIEND_REQUEST_ACCEPTED:
          "You accepted {username}’s friend request.",
        NOTIFICATION_CENTER_INCOMING_FRIEND_REQUESTS:
          "**{user}**, **{user2}**, and **{count} others** have sent you friend requests.",
        NOTIFICATION_CENTER_FRIEND_REQUESTS_TITLE: "Friend Requests",
        NOTIFICATION_CENTER_FRIEND_REQUESTS_EMPTY_TITLE:
          "No Incoming Friend Requests",
        NOTIFICATION_CENTER_FRIEND_REQUESTS_EMPTY_SUBTITLE:
          "Once you have incoming friend requests, you can access them here!",
        NOTIFICATION_CENTER_TODO: "TODO",
        NOTIFICATION_CENTER_DONE: "DONE",
        NOTIFICATION_CENTER_CONTACT_SYNC_TITLE:
          "Use the Discord mobile app to enable Contact Sync",
        NOTIFICATION_CENTER_CONTACT_SYNC_BODY:
          "To start syncing your contacts, open this notification with your mobile app.",
        NOTIFICATION_CENTER_GUILD_SCHEDULED_EVENT_ENDED:
          "**{event_name}** started in **{guild_name}**.",
        NOTIFICATION_CENTER_SHOW_ROLE_MENTIONS: "Show Role Mentions",
        NOTIFICATION_CENTER_SHOW_INDIRECT_MENTIONS: "Show Indirect Mentions",
        NOTIFICATION_CENTER_SHOW_INDIRECT_MENTIONS_SUBTITLE:
          "@here and @everyone",
        RESET_PASSWORD_TITLE: "Change Your Password",
        RESET_PASSWORD_SUCCESS_TITLE: "Password Changed",
        FORM_LABEL_NEW_PASSWORD: "New Password",
        FORM_LABEL_CONFIRM_NEW_PASSWORD: "Confirm New Password",
        FORM_LABEL_CONFIRM_PASSWORD: "Confirm Password",
        FORM_LABEL_NEW_PASSWORD_MISMATCH: "Passwords do not match!",
        CHANGE_PASSWORD: "Change Password",
        UPDATE_PASSWORD: "Update your password",
        FORCE_PASSWORD_UPDATE_DESCRIPTION:
          "Discord has new password requirements. Please update your password now.",
        CHANGE_PASSWORD_DESCRIPTION:
          "Please enter your existing password and your new password.",
        PASSWORD_REQUIREMENTS_EMPTY: "Your new password cannot be empty.",
        PASSWORD_REQUIREMENTS_MIN_LENGTH: "Must be at least 8 characters long.",
        PASSWORD_REQUIREMENTS_CHARACTER_TYPES:
          "Must be at least 8 characters and include 3 of these 4 character types: uppercase, lowercase, numbers, and symbols.",
        SHORTCUT_RECORDER_BUTTON: "Record Keybind",
        SHORTCUT_RECORDER_BUTTON_RECORDING: "Stop Recording",
        SHORTCUT_RECORDER_BUTTON_EDIT: "Edit Keybind",
        SHORTCUT_RECORDER_NO_BIND: "No Keybind Set",
        BROWSER_CHROME: "Google Chrome",
        BROWSER_FIREFOX: "Mozilla Firefox",
        UNSUPPORTED_BROWSER_TITLE: "Well, this is awkward",
        UNSUPPORTED_BROWSER_BODY:
          "\nIt looks like you're using an unsupported browser. To experience what Discord has to offer, upgrade your\nbrowser or download one of our apps.\n  ",
        EXPRESSION_PICKER: "Expression Picker",
        EXPRESSION_PICKER_CATEGORIES_A11Y_LABEL: "Expression Picker Categories",
        EXPRESSION_PICKER_EMOJI: "Emoji",
        EXPRESSION_PICKER_GIF: "GIFs",
        EXPRESSION_PICKER_STICKER: "Stickers",
        EXPRESSION_PICKER_OPEN_EMOJI_PICKER_A11Y_LABEL: "Open Emoji Picker",
        EXPRESSION_PICKER_OPEN_GIF_PICKER_A11Y_LABEL: "Open GIF Picker",
        EXPRESSION_PICKER_OPEN_STICKER_PICKER_A11Y_LABEL: "Open Sticker Picker",
        EXPRESSION_SUGGESTIONS_STICKER_NAME: "**!!{stickerName}!!**",
        EXPRESSION_SUGGESTIONS_STICKER_SHORT_NAV_PROMPT:
          "$[](upHook) to select",
        EXPRESSION_SUGGESTIONS_STICKER_DISABLE: "Don't show again",
        CATEGORY_FAVORITE: "Favorites",
        SEARCH_EMOJIS: "Search emoji",
        SEARCH_FOR_EMOJI: "Find the perfect emoji",
        SEARCH_FOR_STICKER: "Find the perfect sticker",
        SEARCH_FOR_REACTION: "Find the perfect reaction",
        SEARCH_FOR_SUPER_REACTION: "Find the perfect Super Reaction",
        NO_EMOJI_SEARCH_RESULTS: "No emoji match your search",
        EMOJI_CATEGORY_PACK: "{packName} Pack",
        EMOJI_CATEGORY_RECENT: "Frequently Used",
        EMOJI_CATEGORY_CUSTOM: "Custom",
        EMOJI_CATEGORY_ACTIVITY: "Activities",
        EMOJI_CATEGORY_FLAGS: "Flags",
        EMOJI_CATEGORY_FOOD: "Food",
        EMOJI_CATEGORY_NATURE: "Nature",
        EMOJI_CATEGORY_OBJECTS: "Objects",
        EMOJI_CATEGORY_PEOPLE: "People",
        EMOJI_CATEGORY_SYMBOLS: "Symbols",
        EMOJI_CATEGORY_TRAVEL: "Travel",
        EMOJI_CATEGORY_PREMIUM_UPSELL: "Available with Nitro",
        EMOJI_FROM_PACK: "collected from **!!{packName}!!**’s pack",
        EMOJI_FROM_PACK_V2: "added from **!!{packName}!!**’s pack",
        EMOJI_FROM_GUILD: "from **!!{guildName}!!**",
        EMOJI_FROM_GUILD_LABEL: "!!{names}!! from !!{guildName}!!",
        EMOJI_AVAILABLE_WITH_PREMIUM: "Available with Nitro",
        UNICODE_EMOJI_CATEGORY_SHORTCUT_A11Y_LABEL:
          "Navigate to unicode emoji categories",
        EMOJI_MODIFIER_NONE: "None",
        EMOJI_MODIFIER_MENU_BUTTON: "Select emoji skin tone",
        EMOJI_MODIFIER_LIGHT_SKIN_TONE: "Light skin tone",
        EMOJI_MODIFIER_MEDIUM_LIGHT_SKIN_TONE: "Medium-light skin tone",
        EMOJI_MODIFIER_MEDIUM_SKIN_TONE: "Medium skin tone",
        EMOJI_MODIFIER_MEDIUM_DARK_SKIN_TONE: "Medium dark skin tone",
        EMOJI_MODIFIER_DARK_SKIN_TONE: "Dark skin tone",
        EMOJI_NAMES_WITH_FAVORITED: "!!{names}!!, favorited",
        EMOJI_FAVORITE_TOOLTIP: "!!{key}!!+Click to ⭐",
        EMOJI_IS_FAVORITE_ARIA_LABEL: "!!{names}!! is in favorites",
        EMOJI_ADD_TO_FAVORITES: "Add to Favorites",
        EMOJI_REMOVE_FROM_FAVORITES: "Remove from Favorites",
        EXPRESSION_REMOVED_FROM_FAVORITES: "Removed from Favorites",
        EXPRESSION_ADDED_TO_FAVORITES: "Added to Favorites",
        EMOJI_PICKER_SCROLL_TO_UNICODE_A11Y_LABEL: "Scroll to Unicode emoji",
        EMOJI_PICKER_DOUBLE_REACTION_ERROR_TITLE: "Uh, whoops",
        EMOJI_PICKER_DOUBLE_REACTION_SUPER_ERROR_TITLE: "Oops!",
        EMOJI_PICKER_DOUBLE_REACTION_SUPER_ERROR_BODY:
          "You can’t react and super react with the same emoji. There’s a lot of emoji to choose from, so maybe try another one.",
        SUPER_REACTIONS_BETA_MODAL_TITLE: "This feature is in Beta",
        SUPER_REACTIONS_BETA_MODAL_CONTENT:
          "Super Reactions will be available for all Nitro members soon.",
        EMOJI_PICKER_FAVORITES_TIP:
          "Heart an emoji? Right click to add it to your favorites!",
        SEARCH_GIFS: "Search GIFs",
        SEARCH_TENOR: "Search Tenor",
        GIF_BUTTON_LABEL: "Open GIF picker",
        GIF_PICKER_RESULT_TYPE_TRENDING_GIFS: "Trending GIFs",
        NO_GIF_SEARCH_RESULTS: "No GIFs match your search.",
        NO_GIF_FAVORITES_HOW_TO_FAVORITE:
          "Click the star in the corner of a gif to favorite it",
        NO_GIF_FAVORITES_WHERE_TO_FAVORITE: "Favorites will show up here!",
        NO_GIF_FAVORITES_GO_FAVORITE: "So uhh… maybe go favorite some GIFs?",
        NO_GIF_FAVORITES_FLAVOR_FAVORITE_PLEASE: "Uh, go favorite them… please",
        NO_GIF_FAVORITES_FLAVOR_STILL_HERE: "Why uh are you still here?",
        NO_GIF_SEARCH_RESULTS_WITH_RELATED_SEARCH:
          "No GIFs match your search. We hand picked a couple of related terms below like ripe fruit.",
        NO_GIF_SEARCH_RESULTS_WITHOUT_RELATED_SEARCH:
          "Nothing matched your search and we couldn’t find any related terms. Keep trying for that perfect GIF.",
        GIF_PICKER_RELATED_SEARCH:
          "Your perfect GIF is in another castle. Try the suggested keywords below!",
        GIF_PICKER_ENTER_SEARCH:
          "Enter a search term above and find that perfect GIF to express how you really feel.",
        GIF_TOOLTIP_ADD_TO_FAVORITES: "Add to Favorites",
        GIF_TOOLTIP_REMOVE_FROM_FAVORITES: "Remove from Favorites",
        GIF_TOOLTIP_FAVORITED_PICKER_BUTTON: "Added to Favorites",
        FAVORITES_LIMIT_REACHED_TITLE: "Oh no!",
        FAVORITES_LIMIT_REACHED_BODY:
          "You cannot have more than {count} favorites.",
        FAVORITE_GIFS_LIMIT_REACHED_BODY: "You cannot have more favorites.",
        GIF_CATEGORY_A11Y_LABEL: "Category, !!{categoryName}!!",
        STICKER: "Sticker",
        STICKER_ASSET_LOAD_ERROR: "Uh Oh!",
        STICKER_A11Y_LABEL: "Sticker, !!{stickerName}!!",
        STICKER_CATEGORY_A11Y_LABEL: "Category, !!{categoryName}!!",
        SEARCH_FOR_STICKERS: "Search stickers",
        NO_STICKERS_TO_SEARCH_THROUGH: "No stickers to search through yet",
        STICKER_CATEGORY_RECENT: "Frequently Used",
        ERROR_LOADING_STICKER: "Error loading sticker",
        NO_STICKER_SEARCH_RESULTS: "No stickers match your search",
        NO_STICKER_SEARCH_RESULTS_WITH_SUGGESTIONS:
          "Try searching for another term or select one below",
        STICKER_FROM_SOURCE: "from **!!{source}!!**",
        STICKER_NOTIFICATION_BODY: "Sent a sticker: !!{stickerName}!!",
        STICKER_BUTTON_LABEL: "Open sticker picker",
        STICKER_PACK_PRICE_FREE: "Free",
        STICKER_PACK_STICKER_COUNT:
          "{numStickers, plural, =0 {# stickers} one {# sticker} other {# stickers}}",
        STICKER_PICKER_PREMIUM_EMPTY_STATE_TITLE:
          "Choose from 300 stickers with Nitro",
        STICKER_PICKER_PREMIUM_EMPTY_STATE_SUBTITLE:
          "Subscribe to add personality to your conversations.",
        STICKER_PICKER_PREMIUM_EMPTY_STATE_CTA: "Subscribe",
        STICKER_PICKER_CREATE_STICKER: "Add Sticker",
        STICKER_PICKER_CREATE_STICKER_TITLE: "Upload a sticker to this server",
        STICKER_PICKER_CATEGORIES_RECENT: "Frequently used",
        STICKER_PICKER_DISCOUNTED_PRICE_ANDROID:
          "!!{discountedPrice}!! $[~~{regularPrice}~~](originalPriceHook)",
        STICKER_PICKER_DISCOUNTED_FREE_ANDROID:
          "Free $[~~{regularPrice}~~](originalPriceHook)",
        STICKER_PICKER_PRICE_WITH_PREMIUM_TIER_2: "!!{price}!! with Nitro",
        STICKER_PICKER_PREMIUM_PACKS: "Nitro Packs",
        STICKER_PICKER_PREMIUM_UPSELL_ALT:
          "A wumpus sticker surrounded by sparkles.",
        STICKER_PICKER_PREMIUM_UPSELL_TITLE:
          "You can't use this sticker right now",
        STICKER_PICKER_PREMIUM_UPSELL_DESCRIPTION:
          "Lift off with **Discord Nitro** to use custom stickers on any server. [Learn more.](onClick)",
        STICKER_PICKER_PREMIUM_UPSELL_DESCRIPTION_NO_BOLD:
          "Lift off with Discord Nitro to use custom stickers on any server. [Learn more.](onClick)",
        STICKER_PICKER_PREMIUM_UPSELL_DESCRIPTION_NO_BOLD_V2:
          "Lift off with {planName} to use custom stickers on any server. [Learn more.](onClick)",
        STICKER_PICKER_PREMIUM_TIER_UPSELL_DESCRIPTION:
          "Lift off with **{planName}** to use custom stickers on any server. [Learn more.](onClick)",
        STICKER_PACK_PRICE_FREE_WITH_PREMIUM_TIER_2: "Free with Nitro",
        STICKER_PACK_PRICE_FREE_WITH_PREMIUM_TIER_1: "Free with Nitro Classic",
        STICKER_PACK_VIEW: "View Sticker Pack",
        STICKER_VIEW_MORE_STICKERS: "View More Stickers",
        STICKER_POPOUT_PACK_INFO:
          "This is from the **{stickerPackName}** sticker pack. Get {discount, number}% off with [Nitro](onClick).",
        STICKER_POPOUT_PACK_INFO_PREMIUM:
          "This is a **{stickerPackName}** sticker.",
        STICKER_POPOUT_PACK_INFO_UNAVAILABLE:
          "This is a **{stickerPackName}** sticker. They are no longer available.",
        STICKER_POPOUT_COUNTDOWN_HEADER: "Limited time left",
        STICKER_PREMIUM_TIER_2_UPSELL_ALERT_PERKS_GUILD_SUBSCRIPTIONS:
          "{numFreeGuildSubscriptions, plural, =1 {# Server Boost} other {# Server Boosts}} for instant Level 1 perks",
        STICKER_PREMIUM_TIER_2_UPSELL_ALERT_UPGRADE_CTA: "Subscribe to Nitro",
        STICKER_PREMIUM_TIER_2_UPSELL_ALERT_TITLE:
          "Get Nitro to unlock stickers and more. For **!!{monthlyPrice}!! / Month**:",
        STICKER_PREMIUM_SUBSCRIPTION_UPSELL_ALERT_TITLE:
          "Get {planName} to unlock stickers and more. For **!!{monthlyPrice}!! / Month**:",
        STICKER_PREMIUM_TIER_2_UPSELL_PERK_CUSTOM:
          "Use custom stickers across all servers",
        STICKER_PREMIUM_TIER_2_UPSELL_PERK_GUILD_SUBSCRIPTION:
          "Get {numGuildSubscriptions, number} free boosts and {discountPercent} off on Boost purchases",
        STICKER_PREMIUM_TIER_2_UPSELL_PERK_PREMIUM_SUBSCRIPTION:
          "Powerful chat perks: animated emoji, custom Discord tag, better Go Live streaming, and more",
        STICKER_PREMIUM_TIER_0_UPSELL_PERK_PREMIUM_SUBSCRIPTION:
          "Powerful chat perks: custom emoji anywhere, animated emoji, bigger file uploads, and more",
        STICKER_PREMIUM_TIER_0_UPSELL_PERK_PREMIUM_SUBSCRIPTION_V2:
          "Powerful chat perks: custom emoji anywhere, animated emoji, and more",
        STICKER_PICKER_VIEW_ALL: "View\nAll",
        STICKER_PICKER_PACK_DETAILS: "{stickerPackName} Details",
        STICKER_PICKER_PACK_DETAILS_ANIMATED: "Animated",
        STICKER_PICKER_PACK_DETAILS_PREMIUM: "Only with Nitro subscription",
        STICKER_PICKER_PACK_DETAILS_LIMITED_TIME_LEFT:
          "Limited time left: {time}",
        STICKER_PICKER_PACK_EXPIRING_SOON: "Expiring Soon",
        STICKER_PACK_PREMIUM_CTA: "Get Nitro",
        STICKER_PACK_AVAILABLE_WITH_PREMIUM: "Get with Nitro",
        STICKER_PICKER_EMPTY_GUILD_UPSELL_NO_PREMIUM_SUBSCRIPTIONS_DESCRIPTION:
          "Upload {count, number}+ custom stickers with Server Boosting.",
        STICKER_PICKER_EMPTY_GUILD_UPSELL_NO_PREMIUM_SUBSCRIPTIONS_CTA:
          "Purchase Boosts",
        STICKER_PICKER_EMPTY_GUILD_UPSELL_NO_STICKERS_DESCRIPTION:
          "Your server is waiting for you to upload some stickers!",
        STICKER_PICKER_EMPTY_GUILD_UPSELL_NO_STICKERS_CTA: "Manage Stickers",
        PREMIUM_GIFT_BUTTON_LABEL: "Send a gift",
        PREMIUM_GIFT_BUTTON_TOOLTIP:
          "Upgrade your friends! Gift them awesome chat perks with Nitro.",
        PREMIUM_GIFT_SHARE_LINK_IOS: "Share",
        SKU_PAYMENT_STEPS_LABEL: "Purchase",
        GOOGLE_PLAY_TRIAL_PAYMENT_FLOW_CTA: "Continue on Google Play",
        IOS_TRIAL_PAYMENT_FLOW_CTA: "Continue on App Store",
        UPLOAD_AREA_TITLE_NO_CONFIRMATION: "Insta Upload Mode!",
        UPLOAD_AREA_HELP:
          "\nYou can add comments before uploading.\nHold shift to upload directly.",
        UPLOAD_AREA_NEW_THREAD_HELP: "You can add comments before uploading.",
        UPLOAD_AREA_TOO_LARGE_TITLE: "Your files are too powerful",
        UPLOAD_AREA_PREMIUM_UPSELL_BODY_LINE_1:
          "The max file size is {maxSize}.",
        UPLOAD_AREA_PREMIUM_UPSELL_BODY_LINE_1_PREMIUM_TIER_0:
          "The max file size for Nitro Basic is {maxSize}.",
        UPLOAD_AREA_PREMIUM_UPSELL_BODY_LINE_1_PREMIUM_TIER_1:
          "The max file size for Nitro Classic is {maxSize}.",
        UPLOAD_AREA_PREMIUM_UPSELL_BODY_LINE_2:
          "Upgrade to Discord Nitro to upload files up to {premiumMaxSize}",
        UPLOAD_AREA_PREMIUM_TIER_UPSELL_BODY_LINE_2:
          "Upgrade to {premiumPlan} to upload files up to {premiumMaxSize}",
        UPLOAD_AREA_PREMIUM_UPSELL_BODY_LINE_2_INCREASE:
          "Upgrade to Discord Nitro to upload files up to \n 500MB (Available on desktop and iOS only)",
        UPLOAD_AREA_PREMIUM_UPSELL_WITH_SIZE_AND_ACTION:
          "Lift off with Discord Nitro to upload files up to {premiumMaxSize}. [Learn more](onClick).",
        UPLOAD_AREA_PREMIUM_UPSELL_WITH_SIZE_AND_ACTION_V2:
          "Lift off with {planName} to upload files up to {premiumMaxSize}. [Learn more](onClick).",
        UPLOAD_AREA_TOO_LARGE_HELP: "Max file size is {maxSize} please.",
        UPLOAD_AREA_REQUEST_LIMIT_HELP:
          "Total message size must be less than {maxSize}",
        UPLOAD_AREA_TOO_LARGE_HELP_PREMIUM_TIER_1:
          "Max file size for Nitro Classic is {maxSize} please.",
        UPLOAD_AREA_TOO_LARGE_HELP_MOBILE:
          "To upload images larger than {maxSize}, you can compress it as a lower size image, or get Nitro to send a crystal clear image without losing quality!",
        UPLOAD_AREA_ALWAYS_COMPRESS: "Always Compress Images",
        UPLOAD_AREA_ALWAYS_COMPRESS_DESC:
          "You can find this in Text & Images in Settings",
        UPLOAD_AREA_INVALID_FILE_TYPE_TITLE: "Invalid File Type",
        UPLOAD_AREA_INVALID_FILE_TYPE_HELP:
          "Hmm.. I don't think we support that type of file.",
        UPLOAD_AREA_UPLOAD_FAILED_TITLE: "Upload Failed",
        UPLOAD_AREA_UPLOAD_FAILED_HELP:
          "[Click here to retry the upload](onClick)",
        UPLOAD_AREA_UPLOAD_FAILED_RETRY_HELP:
          "Something went wrong, try again later",
        UPLOAD_AREA_INVALID_FILE_TYPE_EMPTY: "File cannot be empty",
        UPLOAD_AREA_FILENAME: "Filename",
        UPLOAD_AREA_LEAVE_A_COMMENT: "Add a comment",
        UPLOAD_AREA_OPTIONAL: "optional",
        UPLOAD_AREA_CANCEL_ALL: "Cancel All",
        UPLOAD: "Upload",
        UPLOAD_TO: "Upload to **{destination}**",
        UPLOAD_TO_NEW_THREAD: "Upload to thread",
        UPLOAD_TO_NEW_POST: "Upload to post",
        UPLOAD_OPEN_FILE_FAILED: "Unable to open file: {file}.",
        LARGE_MESSAGE_UPLOAD_TITLE_MAX_LENGTH:
          "Oh no! Your message is over {maxLength, number} characters.",
        LARGE_MESSAGE_UPLOAD_SUBTITLE:
          "You can upload your message as a file instead.",
        UPLOAD_COMPLETE: "Upload complete",
        UPLOAD_IMAGE_BODY:
          "Is this your card? Err, do you want to upload this image?",
        CROP: "Crop",
        UNABLE_TO_PROCESS_IMAGE: "Unable to process image",
        IMAGE_COMPRESSION: "Image compression",
        IMAGE_COMPRESSION_LABEL: "Auto-compress Images",
        IMAGE_COMPRESSION_NITRO_UPSELL:
          "When this is on, images sent will be compressed. Get Nitro to send a crystal clear image! **[Get Nitro]({nitroLink})**",
        TITLE: "Title",
        SERVER_MUTE: "Server Mute",
        SERVER_UNMUTE: "Server Unmute",
        SERVER_VOICE_MUTE: "Server Mute",
        SERVER_VOICE_UNMUTE: "Server Unmute",
        SERVER_FOLDER_MARK_AS_READ: "Mark Folder As Read",
        SERVER_FOLDER_SETTINGS: "Folder Settings",
        SERVER_FOLDER_COLLAPSE_ALL: "Close All Folders",
        SERVER_FOLDER_MUTE_ALL: "Mute all servers in folder",
        SERVER_FOLDER_UNMUTE_ALL: "Unmute all servers in folder",
        SERVER_DEAFEN: "Server Deafen",
        SERVER_UNDEAFEN: "Server Undeafen",
        SERVER_DEAFENED: "Server Deafened",
        USER_POPOUT_MESSAGE: "Message",
        USER_POPOUT_WUMPUS_TOOLTIP: "I'm new to Discord, say hi!",
        SERVER_MUTED: "Server Muted",
        LOCAL_MUTED: "Muted by you",
        LOCAL_VIDEO_DISABLED: "Video disabled by you",
        ROLES_LIST:
          "{numRoles, plural, =0 {No Roles} one {Role} other {Roles}}",
        USER_VOLUME: "User Volume",
        QUICK_DM_BLOCKED: "You cannot message blocked users",
        QUICK_DM_USER: "Message @!!{name}!!",
        USER_SETTINGS_MY_ACCOUNT: "My Account",
        USER_SETTINGS_EDIT_USER_PROFILE: "Edit User Profile",
        USER_SETTINGS_EDIT_STATUS: "Edit Status",
        USER_SETTINGS_ADD_STATUS: "Add Status",
        USER_SETTINGS_EDIT_PROFILE: "Edit Profile",
        USER_SETTINGS_CONFIRM_LOGOUT: "Are you sure you want to logout?",
        USER_SETTINGS_UNVERIFIED_EMAIL_BODY:
          "Please check your email and follow the instructions to verify your email. If you did not receive an email or if it expired, you can resend one.",
        USER_SETTINGS_LABEL_USERNAME: "Username",
        USER_SETTINGS_LABEL_DISCRIMINATOR: "Discriminator",
        USER_SETTINGS_LABEL_EMAIL: "Email",
        USER_SETTINGS_LABEL_CURRENT_PASSWORD: "Current Password",
        USER_SETTINGS_LABEL_PHONE_NUMBER: "Phone Number",
        USER_SETTINGS_ADD_EMAIL_CLAIM: "Add an email to claim your account.",
        USER_SETTINGS_NO_DISPLAYNAME_PLACEHOLDER:
          "You haven't added a display name yet.",
        USER_SETTINGS_NO_EMAIL_PLACEHOLDER: "You haven't added an email yet.",
        USER_SETTINGS_NO_PHONE_PLACEHOLDER:
          "You haven't added a phone number yet.",
        USER_SETTINGS_CHANGE_AVATAR: "Change Avatar",
        USER_SETTINGS_DELETE_AVATAR: "Delete Avatar",
        USER_SETTINGS_UPLOAD_AVATAR: "Upload Avatar",
        USER_SETTINGS_UPDATE_FAILURE:
          "Your username is invalid or contains invalid characters. You must update your username before you can change other user settings.",
        USER_SETTINGS_EDIT_PROFILE_GENERIC_ERROR:
          "There was a problem updating your account",
        GUILD_SETTINGS_EDIT_PROFILE_GENERIC_ERROR:
          "There was a problem updating your server profile...",
        USER_SETTINGS_SCAN_QR_CODE: "Scan QR Code",
        USER_SETTINGS_EDIT_ACCOUNT_PASSWORD_LABEL:
          "Enter your password to confirm changes",
        USER_SETTINGS_EDIT_ACCOUNT_TAG: "TAG",
        USER_SETTINGS_MFA_ENABLE_CODE_LABEL: "Enter the 2FA Code",
        USER_SETTINGS_MFA_ENABLE_CODE_BODY:
          "Open your authentication app and enter the code below.",
        USER_SETTINGS_MFA_ENABLED: "Enabled",
        USER_SETTINGS_MFA_REMOVED: "2FA successfully removed",
        USER_SETTINGS_AVAILABLE_CODES: "Available Backup Codes",
        USER_SETTINGS_USED_BACKUP_CODES: "Used Backup Codes",
        TWO_FA_SUCCESS_BODY_MOBILE:
          "Your Discord account is now protected with an extra layer of security",
        COPY_CODE: "Copy !!{code}!! to clipboard",
        USER_SETTINGS_ENTER_PASSWORD_VIEW_CODES:
          "Enter your password to view backup codes.",
        USER_SETTINGS_WINDOWS_SETTINGS: "Windows Settings",
        USER_SETTINGS_STARTUP_BEHAVIOR: "System Startup Behavior",
        USER_SETTINGS_CLOSE_BUTTON: "Close Button",
        USER_SETTINGS_OPEN_ON_STARTUP_LABEL: "Open Discord",
        USER_SETTINGS_OPEN_ON_STARTUP_BODY:
          "Save yourself a few clicks and let Discord greet you on computer startup.",
        USER_SETTINGS_START_MINIMIZED_LABEL: "Start Minimized",
        USER_SETTINGS_START_MINIMIZED_BODY:
          "Discord starts in the background and remains out of your way.",
        USER_SETTINGS_MINIMIZE_TO_TRAY_LABEL: "Minimize to Tray",
        USER_SETTINGS_MINIMIZE_TO_TRAY_BODY:
          "Hitting X will make Discord sit back and relax in your system tray when you close the app.",
        USER_SETTINGS_LINUX_SETTINGS: "Linux Settings",
        THEME: "Theme",
        THEME_LIGHT: "Light",
        THEME_DARK: "Dark",
        THEME_MIDNIGHT: "Midnight",
        THEME_UPDATED: "Theme has been updated.",
        THEME_SYSTEM: "Sync with computer",
        THEME_DISABLED_FOR_FORCED_COLORS:
          "When your device has High Contrast settings enabled, your Theme will automatically default to sync with your computer.",
        THEME_DISABLED_FOR_CONTRAST_SYNC:
          "Discord is using your computer’s contrast theme. To use a Discord Theme, turn off “Sync contrast settings” in the [Accessibility](onClick) settings.",
        DEVELOPER_MODE: "Developer Mode",
        DEVELOPER_MODE_HELP_TEXT:
          "Developer Mode exposes context menu items helpful for people writing bots using the [Discord API]({apiDocsUrl}).",
        DEVELOPER_APPLICATION_TEST_MODE_MODAL_HEADER: "Application Test Mode",
        DEVELOPER_APPLICATION_TEST_MODE_MODAL_BODY:
          "Enter your Discord application ID to enable test mode for that application. An application in test mode will allow you to view related unpublished SKUs and bypass related purchases to make development easier.",
        DEVELOPER_APPLICATION_TEST_MODE: "Application Test Mode",
        DEVELOPER_APPLICATION_TEST_MODE_PLACEHOLDER: "Application ID",
        DEVELOPER_APPLICATION_TEST_MODE_ACTIVATE: "Activate",
        DEVELOPER_APPLICATION_TEST_MODE_CLEAR: "Clear",
        DEVELOPER_APPLICATION_TEST_MODE_INVALID: "Invalid application ID",
        DEVELOPER_APPLICATION_TEST_MODE_NOTE:
          "Enter your Discord application ID to enable test mode for that application.",
        DEVELOPER_ACTIVITY_SHELF: "Developer Activity Shelf",
        DEVELOPER_ACTIVITY_SHELF_ENABLE: "Enable Developer Activity Shelf",
        DEVELOPER_ACTIVITY_SHELF_NOTE:
          "When enabled, the activity shelf will show all activities your user and user's teams have access to.",
        USER_SETTINGS_APPEARANCE_PREVIEW_MESSAGE_1:
          "Look at me I'm a beautiful butterfly",
        USER_SETTINGS_APPEARANCE_PREVIEW_MESSAGE_2_LIGHT:
          "Fluttering in the sunlight :sun_with_face:",
        USER_SETTINGS_APPEARANCE_PREVIEW_MESSAGE_2_DARK:
          "Fluttering in the moonlight :full_moon_with_face:",
        USER_SETTINGS_APPEARANCE_PREVIEW_MESSAGE_3: "Waiting for the day when",
        USER_SETTINGS_APPEARANCE_PREVIEW_MESSAGE_4:
          "Compact mode would be turned on",
        USER_SETTINGS_APPEARANCE_PREVIEW_MESSAGE_5: "Oh here it is!",
        USER_SETTINGS_APPEARANCE_ZOOM_TIP:
          "You can change the zoom level with {modKey} +/- and reset to the default zoom with {modKey}+0.",
        USER_SETTINGS_APPEARANCE_PREVIEW_THEMES_TITLE: "Preview Themes",
        USER_SETTINGS_APPEARANCE_PREVIEW_THEME_TITLE: "Preview Theme",
        USER_SETTINGS_APPEARANCE_GRADIENT_THEME_TITLE: "Color",
        USER_SETTINGS_APPEARANCE_IN_APP_ICON_TITLE: "App Icon",
        USER_SETTINGS_APPEARANCE_CHANNEL_LIST_LAYOUT: "Channel List Layout",
        USER_SETTINGS_APPEARANCE_CHANNEL_LIST_LAYOUT_COZY: "Cozy",
        USER_SETTINGS_APPEARANCE_CHANNEL_LIST_LAYOUT_COMPACT: "Compact",
        USER_SETTINGS_APPEARANCE_CHANNEL_LIST_LAYOUT_HYBRID: "Hybrid",
        USER_SETTINGS_APPEARANCE_CHANNEL_LIST_PREVIEWS: "DM Message Previews",
        USER_SETTINGS_APPEARANCE_CHANNEL_LIST_PREVIEWS_ALL: "All Messages",
        USER_SETTINGS_APPEARANCE_CHANNEL_LIST_PREVIEWS_UNREADS:
          "Unread DMs only",
        USER_SETTINGS_APPEARANCE_CHANNEL_LIST_PREVIEWS_NONE: "None",
        USER_SETTINGS_EXACT_SEARCH_RESULT_COUNT:
          "Show exact search result counts",
        USER_SETTINGS_EXACT_SEARCH_RESULT_COUNT_DESCRIPTION:
          "When enabled, may increase the time it takes to show search results.",
        USER_SETTINGS_SHOW_LIBRARY: "Show Game Library",
        USER_SETTINGS_SHOW_LIBRARY_NOTE:
          "Turn this off to hide your Game Library so you can focus on your conversations.",
        HARDWARE_ACCELERATION: "Hardware Acceleration",
        HARDWARE_ACCELERATION_HELP_TEXT:
          "Turns on Hardware Acceleration, which uses your GPU to make Discord smoother. Turn this off if you are experiencing frame drops.",
        SWITCH_HARDWARE_ACCELERATION: "Change Hardware Acceleration",
        SWITCH_HARDWARE_ACCELERATION_BODY:
          "\n  Changing the hardware acceleration setting will quit and re-launch Discord.\n  Are you sure you want to do this?\n  ",
        USER_SETTINGS_HOME_AUTO_NAV: "Auto-navigate to Home",
        USER_SETTINGS_HOME_AUTO_NAV_HELP_TEXT:
          "For community servers with Home enabled, automatically navigate to a server's Home if you've been away for a while. [Learn more about the Home beta.]({helpCenterLink})",
        ADD_KEYBIND: "Add a Keybind",
        ADD_KEYBIND_WARNING:
          "Keybinds are disabled while this panel is visible.",
        REMOVE_KEYBIND: "Remove Keybind",
        KEYBIND_DESCRIPTION_UNASSIGNED:
          "This action doesn't do anything! Please choose one from the drop down.",
        KEYBIND_DESCRIPTION_PUSH_TO_MUTE:
          "Hold to temporarily disable your microphone while in Voice Activity mode.",
        KEYBIND_DESCRIPTION_PUSH_TO_TALK:
          "Hold to temporarily enable your microphone while in Push to Talk mode.",
        KEYBIND_DESCRIPTION_PUSH_TO_TALK_PRIORITY:
          "\nHold to temporarily enable your microphone while in Push to Talk mode. Other speakers\nwho are not also transmitting with priority will temporarily have their volume lowered\nwhile you are speaking.\n",
        KEYBIND_DESCRIPTION_TOGGLE_MUTE:
          "Toggle your microphone's transmission on and off.",
        KEYBIND_DESCRIPTION_TOGGLE_DEAFEN:
          "\nToggle your speaker's playback on and off. Also disables your microphone while deafened.\n  ",
        KEYBIND_DESCRIPTION_TOGGLE_OVERLAY:
          "Toggle to turn your overlay on and off.",
        KEYBIND_DESCRIPTION_TOGGLE_VOICE_MODE:
          "Toggle to switch between Push To Talk and Voice Activity mode.",
        KEYBIND_DESCRIPTION_TOGGLE_OVERLAY_INPUT_LOCK:
          "Toggle overlay interactivity lock.",
        KEYBIND_DESCRIPTION_TOGGLE_STREAMER_MODE:
          "Toggle to enable/disable Streamer Mode.",
        KEYBIND_DESCRIPTION_TOGGLE_GO_LIVE_STREAMING:
          "Toggle to start/stop streaming in your current voice channel. Streams can only be started with this keybind if Discord recognizes the game you are currently playing.",
        KEYBIND_DESCRIPTION_NAVIGATE_BACK: "Navigate backward in page history",
        KEYBIND_DESCRIPTION_NAVIGATE_FORWARD:
          "Navigate forward in page history",
        KEYBIND_UNASSIGNED: "Unassigned",
        KEYBIND_PUSH_TO_TALK: "Push to Talk (Normal)",
        KEYBIND_PUSH_TO_TALK_PRIORITY: "Push to Talk (Priority)",
        KEYBIND_PUSH_TO_MUTE: "Push to Mute",
        KEYBIND_TOGGLE_MUTE: "Toggle Mute",
        KEYBIND_TOGGLE_DEAFEN: "Toggle Deafen",
        KEYBIND_TOGGLE_OVERLAY: "Toggle Overlay",
        KEYBIND_TOGGLE_VOICE_MODE: "Toggle VAD",
        KEYBIND_TOGGLE_STREAM_MODE: "Toggle Streamer Mode",
        KEYBIND_NAVIGATE_BACK: "Navigate Back",
        KEYBIND_NAVIGATE_FORWARD: "Navigate Forward",
        KEYBIND_TOGGLE_GO_LIVE_STREAMING: "Toggle Screen Share",
        KEYBIND_IN_BROSWER_NOTICE:
          "Custom keybinds are not currently supported in the browser. [Download]({downloadLink}) the desktop application to use custom keybinds.",
        USER_SETTINGS_KEYBINDS_SHOW_LIST_TITLE: "Show Keyboard Shortcuts List",
        USER_SETTINGS_KEYBINDS_KEYBIND: "Keybind",
        USER_SETTINGS_KEYBINDS_DEFAULT_KEYBINDS_TITLE: "Default Keybinds",
        USER_SETTINGS_KEYBINDS_ACTION: "Action",
        USER_SETTINGS_KEYBINDS_NAVIGATION_SECTION_TITLE: "Navigation",
        USER_SETTINGS_KEYBINDS_VOICE_AND_VIDEO_SECTION_TITLE: "Voice and Video",
        USER_SETTINGS_KEYBINDS_CHAT_SECTION_TITLE: "Chat",
        USER_SETTINGS_KEYBINDS_MISCELLANEOUS_SECTION_TITLE: "Miscellaneous",
        USER_SETTINGS_KEYBINDS_MESSAGE_SECTION_TITLE: "Messages",
        USER_SETTINGS_KEYBINDS_MESSAGE_DESCRIPTION:
          "These shortcuts work when focused on a message.",
        USER_SETTINGS_KEYBINDS_DND_SECTION_TITLE: "Drag and Drop",
        USER_SETTINGS_KEYBINDS_DND_DESCRIPTION:
          "These shortcuts work when focused on a draggable item",
        USER_SETTINGS_KEYBINDS_SEARCH_VOICE: "Search for a voice channel",
        USER_SETTINGS_KEYBINDS_SEARCH_NO_RESULTS_FOUND:
          "No voice channels found, perhaps try another search",
        USER_SETTINGS_KEYBINDS_SWITCH_TO_VOICE_CHANNEL_LABEL:
          "Switch To Voice Channel",
        USER_SETTINGS_KEYBINDS_VOICE_CHANNEL_DISCONNECT_LABEL:
          "Disconnect From Voice Channel",
        USER_SETTINGS_KEYBINDS_NO_VOICE_CHANNEL_SELECTED:
          "No voice channel selected",
        USER_SETTINGS_KEYBINDS_SELECT_VOICE_CHANNEL: "Select Channel",
        USER_SETTINGS_KEYBIND_SWITCH_SERVER_SETTINGS_SECTION:
          "Select the voice channel to join or switch to",
        USER_SETTINGS_KEYBIND_ENABLE_DISABLE: "Enable or disable keybind",
        USER_SETTINGS_KEYBIND_VOICE_CHANNEL_RESULTS: "Results",
        SHOW_CURRENT_ACTIVITY: "Display current activity as a status message.",
        SHOW_CURRENT_ACTIVITY_DESC:
          "Discord will automatically update your status if you're attending a public Stage.",
        SHOW_CURRENT_ACTIVITY_DESC_EMBEDDED:
          "Discord will automatically update your status based on the game you're playing (if detectable), an activity you're doing that supports Rich Presence, or if you're attending a public Stage.",
        GAME_DETECTION_SERVICE: "Game Detection Service",
        USER_SETTINGS_GAMES_INSTALL_LOCATIONS: "Install locations",
        USER_SETTINGS_GAMES_INSTALL_LOCATION_ADD: "Add Install Location",
        USER_SETTINGS_GAMES_INSTALL_LOCATION_REMOVE: "Remove Location",
        USER_SETTINGS_GAMES_INSTALL_LOCATION_SPACE:
          "{available} available of {total}",
        USER_SETTINGS_GAMES_INSTALL_LOCATION_NAME: "Install Location Name",
        USER_SETTINGS_GAMES_INSTALL_LOCATION: "Location",
        USER_SETTINGS_GAMES_INSTALL_LOCATION_MAKE_DEFAULT:
          "Make this my default location",
        USER_SETTINGS_GAMES_REMOVE_LOCATION_BODY:
          "Are you sure you want to remove this installation location?",
        USER_SETTINGS_GAMES_SHORTCUTS_DESKTOP: "Create Desktop Shortcut",
        USER_SETTINGS_GAMES_SHORTCUTS_DESKTOP_NOTE:
          "When installing games from the Discord Store.",
        USER_SETTINGS_GAMES_SHORTCUTS_START_MENU: "Create Start Menu Shortcut",
        USER_SETTINGS_GAMES_SHORTCUTS_START_MENU_NOTE:
          "When installing games from the Discord Store. Also makes your games discoverable via windows search.",
        USER_SETTINGS_RESTART_APP_MOBILE:
          "Restart the app for your new settings to take effect.",
        INSTALL_LOCATION_MAIN: "Main",
        USER_SETTINGS_PRIVACY_TERMS:
          "Check out our [Terms of Service]({termsLink}) and [Privacy Policy]({privacyLink}).",
        USER_SETTINGS_HYPESQUAD: "HypeSquad",
        HYPESQUAD_HEADING: "Join the HypeSquad!",
        HYPESQUAD_HEADING_EXISTING_MEMBER: "You're in HypeSquad!",
        HYPESQUAD_SUBHEADING:
          "You're excited about Discord. We're excited that you're excited about Discord. Let's get other people excited about Discord, together.",
        HYPESQUAD_READY_TO_REP: "Ready to rep Discord?",
        HYPESQUAD_UNCLAIMED_ACCOUNT_NOTICE:
          "Before joining HypeSquad, you need to claim your account.",
        HYPESQUAD_UNVERIFIED_EMAIL_NOTICE:
          "Before joining HypeSquad, we need to verify your email address.",
        HYPESQUAD_JOIN: "Join HypeSquad",
        HYPESQUAD_NEWSLETTER_WARNING:
          "Wumpus’ lawyers wanted us to let you know that joining the HypeSquad will sign you up for our newsletter.",
        HYPESQUAD_PERKS_HEADING: "Perks of being hype",
        HYPESQUAD_PERK_TITLE_NEWSLETTER: "Super Secret Newsletter",
        HYPESQUAD_PERK_DESCRIPTION_NEWSLETTER:
          "We regularly send out newsletters with contests, giveaways, and more.",
        HYPESQUAD_PERK_TITLE_PROFILE_BADGE: "Hype Profile Badge",
        HYPESQUAD_PERK_DESCRIPTION_PROFILE_BADGE:
          "Get a unique profile badge to rep the HypeSquad House you're sorted into.",
        HYPESQUAD_PERK_TITLE_SQUAD_CHALLENGES: "Squad Challenges",
        HYPESQUAD_PERK_DESCRIPTION_SQUAD_CHALLENGES:
          "Rep your house and participate in challenges against other HypeSquad houses.",
        HYPESQUAD_LEAVE_PROMPT: "Don't want to be hype anymore?",
        HYPESQUAD_LEAVE_ACTION: "Leave the HypeSquad",
        HYPESQUAD_QUIZ_ONGOING_MODAL_TITLE:
          "Question {currentQuestion, number} of {questionCount, number}",
        HYPESQUAD_QUIZ_COMPLETED_MODAL_TITLE: "You've been picked!",
        HYPESQUAD_QUIZ_ERROR_MODAL_TITLE: "Something went wrong!",
        HYPESQUAD_QUIZ_CANCEL: "Cancel",
        HYPESQUAD_QUIZ_CLOSE: "Close",
        HYPESQUAD_QUIZ_RETRY: "Retry",
        HYPESQUAD_QUIZ_NEXT_QUESTION: "Next question",
        HYPESQUAD_QUIZ_SELECT_ANSWER: "Select your answer:",
        HYPESQUAD_QUIZ_SHOW_MY_HOUSE: "Show me my house!",
        HYPESQUAD_QUIZ_TITLE: "House of {house}",
        HYPESQUAD_QUIZ_BODY_HOUSE_1:
          "The House of Bravery thanks you for joining our efforts to preserve the sanctity of the land and maintain the legacy of Renwil. Your bravery is comparable to that of a thousand gallant warriors and without your leadership and prowess, we would be much closer to descending into chaos.",
        HYPESQUAD_QUIZ_BODY_HOUSE_2:
          "The House of Brilliance thanks you for joining our efforts to protect the land and maintain the legacy of Urdim. Your execution of strategies is that of a master tactician and without your calculated approach to any conflicts that comes your way, we would be much closer to descending into chaos.",
        HYPESQUAD_QUIZ_BODY_HOUSE_3:
          "The House of Balance thanks you for joining our efforts to protect the land and maintain the legacy of Arame. Your ability to stay stout and steadfast in times of uncertainty is admirable. Without your natural understanding of both your environment and your inner self, we would be much closer to descending into chaos.",
        HYPESQUAD_ERROR_HEADING: "Uh oh, we broke Discord!",
        HYPESQUAD_ERROR_BODY:
          "There was an error adding you to HypeSquad Online. If the error persists, please contact [{emailAddress}]({emailAddressLink}).",
        HYPESQUAD_LEAVE_ERROR:
          "There was an error removing you from HypeSquad Online. Please try again.",
        HYPESQUAD_ATTENDEE_CTA:
          "Interested in repping the HypeSquad at a local event? Coordinating an event of your own? [Apply here!]({url})",
        HYPESQUAD_YOUR_HOUSE: "Your House:",
        HYPESQUAD_MEMBERSHIP_HEADING: "House of {houseName}",
        HYPESQUAD_DESCRIPTION_HOUSE_1:
          "The universe needs people to lead the charge with confident optimism and tenacity. Without the brave, the HypeSquad would descend into chaos.",
        HYPESQUAD_DESCRIPTION_HOUSE_2:
          "It takes patience and discipline to become a vital member of the universe. Without brilliance, the HypeSquad would descend into chaos.",
        HYPESQUAD_DESCRIPTION_HOUSE_3:
          "Harmony and poise are necessary to create equilibrium in the universe. Without balance, the HypeSquad would descend into chaos.",
        HYPESQUAD_SWITCH_HOUSES_PROMPT: "Wanna switch houses?",
        HYPESQUAD_SWITCH_HOUSES_ACTION: "Take the test again",
        HYPESQUAD_HOUSE_1: "Bravery",
        HYPESQUAD_HOUSE_2: "Brilliance",
        HYPESQUAD_HOUSE_3: "Balance",
        HYPESQUAD_QUESTION_0_PROMPT: "Which insult would hurt you the most?",
        HYPESQUAD_QUESTION_0_RESPONSE_A: "You overreact a lot.",
        HYPESQUAD_QUESTION_0_RESPONSE_B: "You don't listen enough.",
        HYPESQUAD_QUESTION_0_RESPONSE_C: "You only care about yourself.",
        HYPESQUAD_QUESTION_0_RESPONSE_D: "You're ordinary.",
        HYPESQUAD_QUESTION_1_PROMPT: "What sounds like a perfect day to you?",
        HYPESQUAD_QUESTION_1_RESPONSE_A:
          "Sleeping in, having a giant, homemade lunch, and heading out to meet up with close friends late at night.",
        HYPESQUAD_QUESTION_1_RESPONSE_B:
          "Waking up early, finishing something you've been putting off for a while, and working on a new hobby in the late afternoon.",
        HYPESQUAD_QUESTION_1_RESPONSE_C:
          "Waking up on time, walking to the garden store and buying a new plant, and sinking deep into a bath to end the day.",
        HYPESQUAD_QUESTION_1_RESPONSE_D:
          "Waking up with no plans, taking the day as it comes.",
        HYPESQUAD_QUESTION_2_PROMPT:
          "What's something positive about you that you would agree with?",
        HYPESQUAD_QUESTION_2_RESPONSE_A: "Making decisions is easy for you.",
        HYPESQUAD_QUESTION_2_RESPONSE_B:
          "It's easy for you to understand new things.",
        HYPESQUAD_QUESTION_2_RESPONSE_C: "You're dependable.",
        HYPESQUAD_QUESTION_2_RESPONSE_D: "You tend to see the good in people.",
        HYPESQUAD_QUESTION_3_PROMPT:
          "Which of these smells makes you happiest?",
        HYPESQUAD_QUESTION_3_RESPONSE_A:
          "Air that's deep and smokey from a campfire, and sweet from toasted marshmallows.",
        HYPESQUAD_QUESTION_3_RESPONSE_B:
          "Crisp, cool air revitalized after a thunderstorm.",
        HYPESQUAD_QUESTION_3_RESPONSE_C:
          "Fresh flowers in bloom mixed with the clean smell of laundry drying on a line.",
        HYPESQUAD_QUESTION_3_RESPONSE_D:
          "Walking into a kitchen after something flavorful has been slow cooking for 8 hours as fresh bread cools on the counter.",
        HYPESQUAD_QUESTION_4_PROMPT: "Your favorite out of these genres is:",
        HYPESQUAD_QUESTION_4_RESPONSE_A: "Fiction",
        HYPESQUAD_QUESTION_4_RESPONSE_B: "Biographies and memoirs",
        HYPESQUAD_QUESTION_4_RESPONSE_C: "Poetry",
        HYPESQUAD_QUESTION_4_RESPONSE_D: "Romance",
        HYPESQUAD_QUESTION_5_PROMPT:
          "You and your best friend get into a fight. No one is clearly in the wrong. You:",
        HYPESQUAD_QUESTION_5_RESPONSE_A:
          "Wait to see if they apologize first, but eventually give in and reach out.",
        HYPESQUAD_QUESTION_5_RESPONSE_B:
          "Apologize first but secretly be upset you had to say something first.",
        HYPESQUAD_QUESTION_5_RESPONSE_C: "Apologize first and truly mean it.",
        HYPESQUAD_QUESTION_5_RESPONSE_D:
          "Never apologize. Whatever happens, happens.",
        HYPESQUAD_QUESTION_6_PROMPT:
          "Your dream exotic animal companion would be:",
        HYPESQUAD_QUESTION_6_RESPONSE_A:
          "Something intimidating and protective like a bear.",
        HYPESQUAD_QUESTION_6_RESPONSE_B:
          "Something small and nimble like a fox.",
        HYPESQUAD_QUESTION_6_RESPONSE_C:
          "Something large and helpful like an elephant.",
        HYPESQUAD_QUESTION_6_RESPONSE_D:
          "Something different and eye catching like a komodo dragon.",
        HYPESQUAD_QUESTION_7_PROMPT:
          "Your dream house would definitely have a:",
        HYPESQUAD_QUESTION_7_RESPONSE_A:
          "Perfectly sized bedroom with an extravagantly comfy bed.",
        HYPESQUAD_QUESTION_7_RESPONSE_B:
          "Giant, roaring fireplace with a cat sleeping calmly in front.",
        HYPESQUAD_QUESTION_7_RESPONSE_C:
          "Some seriously beautiful outdoor space.",
        HYPESQUAD_QUESTION_7_RESPONSE_D:
          "An expansive living room meant for hanging out in with tons of natural light.",
        HYPESQUAD_QUESTION_8_PROMPT: "You would want a job that:",
        HYPESQUAD_QUESTION_8_RESPONSE_A:
          "Challenges you in a way that makes you grow. You don't feel bored in your day to day.",
        HYPESQUAD_QUESTION_8_RESPONSE_B:
          "You're really good at and are looked to for advice.",
        HYPESQUAD_QUESTION_8_RESPONSE_C:
          "Lets you feel like you're making a difference in something.",
        HYPESQUAD_QUESTION_8_RESPONSE_D:
          "You do what needs to be done, but you're not really too invested in it.",
        HYPESQUAD_QUESTION_9_PROMPT: "How do you react to learning new things?",
        HYPESQUAD_QUESTION_9_RESPONSE_A:
          "You tend to stay away from learning new things and focus on becoming better at things you're already good at.",
        HYPESQUAD_QUESTION_9_RESPONSE_B:
          "Get really frustrated you aren't good at the start and become obsessive.",
        HYPESQUAD_QUESTION_9_RESPONSE_C:
          "Take things slowly and learn step-by-step to make sure you get things right.",
        HYPESQUAD_QUESTION_9_RESPONSE_D: "Give up early and often.",
        HYPESQUAD_QUESTION_10_PROMPT:
          "You can only listen to one type of music for the rest of your life. Do you pick:",
        HYPESQUAD_QUESTION_10_RESPONSE_A:
          "Something catchy that gets you excited.",
        HYPESQUAD_QUESTION_10_RESPONSE_B:
          "Something unintrusive that helps you concentrate.",
        HYPESQUAD_QUESTION_10_RESPONSE_C:
          "Something relaxing that puts you at ease.",
        HYPESQUAD_QUESTION_10_RESPONSE_D:
          "Something nostalgic that you know well.",
        HYPESQUAD_QUESTION_11_PROMPT: "Vacation time. Where are you going?",
        HYPESQUAD_QUESTION_11_RESPONSE_A:
          "Somewhere new and extremely different from where you live.",
        HYPESQUAD_QUESTION_11_RESPONSE_B:
          "Somewhere quiet. It's not a vacation unless you get to relax and reset.",
        HYPESQUAD_QUESTION_11_RESPONSE_C:
          "A place you've been before that you have grown to see as a second home.",
        HYPESQUAD_QUESTION_11_RESPONSE_D:
          "Stay at home. You're not one for travelling.",
        HYPESQUAD_QUESTION_12_PROMPT: "Your computer desk looks like:",
        HYPESQUAD_QUESTION_12_RESPONSE_A:
          "A mess to anyone who isn't you. But you know where everything is...",
        HYPESQUAD_QUESTION_12_RESPONSE_B:
          "A mess. And you're not sure where everything is...",
        HYPESQUAD_QUESTION_12_RESPONSE_C:
          "Kinda simple but you really like it.",
        HYPESQUAD_QUESTION_12_RESPONSE_D:
          "Something out of a magazine. It's clean and decorative.",
        HYPESQUAD_QUESTION_13_PROMPT:
          "The nightmare situation finally happens to you. You order food at a restaurant and what comes out is not what you ordered. You:",
        HYPESQUAD_QUESTION_13_RESPONSE_A:
          "Don't complain. Just send it back because you were really craving that one thing.",
        HYPESQUAD_QUESTION_13_RESPONSE_B:
          "Complain to the table that this isn't what you ordered but don't send it back.",
        HYPESQUAD_QUESTION_13_RESPONSE_C:
          "Eat it without saying anything to anyone.",
        HYPESQUAD_QUESTION_13_RESPONSE_D:
          "Complain to the waiter that this isn't what you ordered and send it back.",
        HYPESQUAD_QUESTION_14_PROMPT:
          "You're on your way out the door to something important, but your neighbor says that they need help with something. You:",
        HYPESQUAD_QUESTION_14_RESPONSE_A:
          "Help them and don't worry about the other thing you were on your way to.",
        HYPESQUAD_QUESTION_14_RESPONSE_B:
          "Apologize to your neighbor but insist you have something you must get to.",
        HYPESQUAD_QUESTION_14_RESPONSE_C:
          "Knock on your other neighbor's door and ask them if they can help out in your place.",
        HYPESQUAD_QUESTION_14_RESPONSE_D: "Pretend you didn't hear them.",
        OVERLAY_EXPLANATION:
          "\nEnabling the overlay will probably trigger a false positive in your anti-virus.\nAlso, the overlay may not work for everyone. If you have trouble or questions check out\n[this fancy help article!]({supportURL})\n",
        ENABLE_INGAME_OVERLAY: "Enable in-game overlay.",
        OVERLAY_DISABLED_OLD_CLIENT:
          "Overlay is disabled because your client is out of date.",
        KEYBIND_TOGGLE_OVERLAY_INPUT_LOCK: "Toggle Overlay Lock",
        KEYBIND_ACTIVATE_OVERLAY_CHAT: "Activate Overlay Chat",
        INLINE_MEDIA_LABEL: "Display images, videos, and lolcats",
        INLINE_EMBED_MEDIA: "When posted as links to chat",
        INLINE_ATTACHMENT_MEDIA: "When uploaded directly to Discord",
        INLINE_ATTACHMENT_MEDIA_HELP:
          "Images larger than {maxSize} MB will not be previewed.",
        IMAGE_DESCRIPTION_HELP:
          "Image descriptions are used to describe images for screenreaders.",
        IMAGE_DESCRIPTION: "Image Description",
        GIF_AUTO_PLAY_LABEL: "Automatically play GIFs when Discord is focused.",
        GIF_AUTO_PLAY_LABEL_MOBILE: "Automatically play GIFs when possible.",
        STICKERS_AUTO_PLAY_HEADING: "Stickers",
        STICKERS_AUTO_PLAY_HELP: "This controls when stickers animate.",
        STICKERS_AUTO_PLAY_HELP_DISABLED:
          "This controls when stickers animate. This is currently overridden by your reduced motion preferences.",
        STICKERS_ALWAYS_ANIMATE: "Always animate",
        STICKERS_ANIMATE_ON_INTERACTION: "Animate on interaction",
        STICKERS_ANIMATE_ON_INTERACTION_DESCRIPTION:
          "On the desktop client, stickers will animate on hover or focus. On mobile clients, stickers will animate on long-press.",
        STICKERS_NEVER_ANIMATE: "Never animate",
        SEND_IMAGES_LABEL: "Send images",
        LOW_QUALITY_IMAGE_MODE: "Low quality image mode.",
        LOW_QUALITY_IMAGE_MODE_HELP:
          "When this is on, images sent will be lower quality on cellular networks.",
        CAMERA_UPLOADS_LABEL: "Camera Uploads",
        SAVE_CAMERA_UPLOADS_TO_DEVICE_SETTING: "Save to device",
        SAVE_CAMERA_UPLOADS_TO_DEVICE_SETTING_HELP:
          "When this is on, images and videos captured using the camera when sending a message will save to the device as well",
        VIDEO_UPLOAD_QUALITY_SETTING_TITLE: "Video Uploads",
        VIDEO_UPLOAD_QUALITY_SETTING_BEST: "Best Quality",
        VIDEO_UPLOAD_QUALITY_SETTING_STANDARD: "Standard (recommended)",
        VIDEO_UPLOAD_QUALITY_SETTING_DATA_SAVER: "Data Saver",
        VIDEO_UPLOAD_QUALITY_SETTING_HELP:
          "Best Quality will use more data. Data Saver will upload faster and use less cellular data. [Learn More]({supportURL})",
        VIDEO_UPLOAD_QUALITY_NITRO_UPSELL:
          "[Unlock 1080p video uploads with Nitro](onClick)",
        DATA_CONSUMPTION_SETTING: "Data Consumption",
        DATA_SAVING_MODE_SETTING: "Data Saving Mode",
        DATA_SAVING_MODE_HINT:
          "When this is on, images and videos will be sent in lower quality on cellular networks to reduce data usage.",
        RENDER_EMBEDS_LABEL: "Embeds and Link Previews",
        RENDER_EMBEDS: "Show embeds and preview website links pasted into chat",
        RENDER_REACTIONS: "Show emoji reactions on messages",
        ANIMATE_EMOJI: "Play animated emoji",
        ANIMATE_EMOJI_NOTE: "I want emoji to move and groove.",
        ALLOW_TTS_COMMAND: "Allow playback and usage of /tts command",
        CONVERT_EMOTICONS:
          "Automatically convert emoticons in your messages to emoji",
        CONVERT_EMOTICONS_HELP:
          "For example, when you type \\:\\-\\) Discord will convert it to :slight_smile:",
        MESSAGE_DISPLAY_MODE_LABEL: "Message Display",
        COMPACT_MODE: "Compact: Fit more messages on screen at one time. #IRC",
        COZY_MODE: "Cozy: Modern, beautiful, and easy on your eyes.",
        KEYBOARD_BEHAVIOR_MOBILE_HEADER: "Keyboard behavior",
        KEYBOARD_BEHAVIOR_MOBILE_SHIFT_ENTER_TO_SEND:
          "Shift enter to send a message.",
        KEYBOARD_BEHAVIOR_MOBILE_SHIFT_ENTER_TO_SEND_HINT:
          "By default, external keyboards will send message on enter.",
        CHAT_BEHAVIOR: "Chat Behavior",
        CUSTOM_TABS_MOBILE_HEADER: "Use Chrome Custom Tabs",
        CUSTOM_TABS_MOBILE_BODY:
          "Use Chrome Custom Tabs for links instead of an external browser.",
        SHOW_SPOILER_CONTENT: "Show spoiler content",
        SHOW_SPOILER_CONTENT_HELP:
          "This controls when spoiler content is displayed.",
        SHOW_SPOILER_ON_CLICK: "On click",
        SHOW_SPOILER_ON_SERVERS_I_MOD: "On servers I moderate",
        SHOW_SPOILER_ALWAYS: "Always",
        USE_THREADS_SIDEBAR_DESCRIPTION: "Open threads in split view",
        GUILD_DOCK: "Server Dock",
        GUILD_DOCK_LABEL: "Use server dock navigation",
        CHAT_GESTURES: "Chat Gestures",
        SWIPE_TO_REPLY: "Swipe to Reply",
        SWIPE_TO_REPLY_HINT:
          "Currently, swiping right-to-left opens Member List. Toggle to enable swiping to reply to a message.",
        SWIPE_TO_REPLY_COACHMARK:
          "If you prefer to swipe to reply to a message, you can change the default behavior in [Settings](onClick).",
        CONNECTED_ACCOUNTS: "Connected Accounts",
        CONNECTED_ACCOUNTS_NONE_TITLE: "No Connections",
        CONNECTED_ACCOUNTS_NONE:
          "Connect your accounts to unlock special Discord integrations",
        CONNECTED_ACCOUNT_REVOKED:
          "This account has been revoked. Would you like to [reconnect](onReconnect) it?",
        SUB_ENABLED_SERVERS: "Sub Enabled Servers",
        AUTHORIZATION: "Authorization",
        AUTHORIZED_APPS: "Authorized Apps",
        DEAUTHORIZE: "Deauthorize",
        DEAUTHORIZE_APP: "Deauthorize Application",
        ABOUT_THIS_APP: "About this App",
        ABOUT: "About",
        DEFAULT_APP_DESCRIPTION: "- None provided -",
        NO_AUTHORIZED_APPS: "No Authorized Apps",
        NO_AUTHORIZED_APPS_NOTE:
          "Enhance your Discord experience by authorizing and integrating third-party services",
        DELETE_APP_CONFIRM_MSG:
          "This action will remove the link between your Discord account and this app.",
        JOIN_GUILD: "Join",
        JOINING_GUILD: "Joining",
        JOINED_GUILD: "Joined",
        CONNECT_ACCOUNT_TITLE: "Connect your accounts",
        CONNECT_ACCOUNT_DESCRIPTION:
          "Connect these accounts and unlock special Discord integrations.",
        DISPLAY_ON_PROFILE: "Display on profile",
        DISPLAY_DETAILS_ON_PROFILE: "Display details on profile",
        CONNECTED_ACCOUNT_ADD_DETAILS_DESCRIPTION:
          "Add connection details to your profile! [Learn more]({helpdeskUrl})",
        CONNECTED_ACCOUNT_ADD_DETAILS_SHORT_DESC:
          "Add connection details to your profile!",
        CONNECTED_ACCOUNT_ADD_DETAILS_LEARN_MORE: "Learn more",
        CONNECTED_ACCOUNT_ADD_DETAILS: "Add details",
        SYNC_FRIENDS: "Sync friends to Discord",
        DISPLAY_ACTIVITY: "Display {platform} as your status",
        DETECT_PLATFORM_ACCOUNTS:
          "Automatically detect accounts from other platforms on this computer.",
        APPLICATIONS_AND_CONNECTIONS: "Applications",
        APPLICATIONS_AND_CONNECTIONS_BODY:
          "Here's all the apps that are doing super cool things to make your Discord experience super cooler. If it gets too chilly, you can remove them at any time.",
        INVITE_VOICE_CHANNEL_JOIN: "Join Voice",
        ERROR_OCCURRED_TRY_AGAIN: "An error occurred, please try again.",
        ERROR_ANOTHER_TRY: "Whoops, something went wrong. Give it another try?",
        VERFICATION_EXPIRED: "Email verification link has expired.",
        VERIFYING: "Verifying",
        ACTION_MAY_TAKE_A_MOMENT: "This may take a moment.",
        VERIFICATION_VERIFYING: "Verifying your email",
        VERIFICATION_VERIFIED: "Email Verified!",
        VERIFICATION_OPEN_DISCORD: "Continue to Discord",
        GUILD_MEMBERSHIP_AUTOMATION_VERIFICATION_VERIFYING:
          "Verifying your request.",
        GUILD_MEMBERSHIP_AUTOMATION_VERFICATION_EXPIRED:
          "Verification link has expired.",
        GUILD_MEMBERSHIP_AUTOMATION_VERFICATION_VERIFIED:
          "Verification success.",
        IP_AUTHORIZATION_SUCCEEDED: "IP Address Authorized",
        AUTHORIZING: "Authorizing",
        AUTHORIZATION_EXPIRED: "IP authorization link has expired.",
        VERIFICATION_EMAIL_TITLE: "Verification Email",
        VERIFICATION_EMAIL_BODY:
          "\nWe have sent you a new verification email to **!!{email}!!**, please check both your inbox and spam folder.\n  ",
        VERIFICATION_EMAIL_ERROR_TITLE: "Error Sending Verification Email",
        VERIFICATION_EMAIL_ERROR_BODY:
          "There was an error sending you a verification email. Try again later or contact support.",
        UNCLAIMED_ACCOUNT_TITLE: "Unclaimed Account",
        UNCLAIMED_ACCOUNT_BODY_2:
          "Please add an email and password to claim your account before it's lost.",
        UNVERIFIED_EMAIL_TITLE: "Unverified Email",
        FORM_LABEL_CURRENT_PASSWORD: "Current Password",
        CHANGE_PHONE_NUMBER: "Change Phone Number?",
        PTT_LIMITED_TITLE: "Hey, Just a quick heads",
        PTT_LIMITED_BODY:
          "\nPush to Talk (Limited) will only work when this browser tab has focus. Download the desktop application\nto get system-wide Push to Talk.\n  ",
        PTT_LIMITED_WARNING:
          "\nPush to Talk (Limited) will only work when the browser tab has focus. [Download](onDownloadClick) the\ndesktop application to get system-wide Push to Talk.\n  ",
        BROWSER_INPUT_DEVICE_WARNING:
          "\nInput devices cannot be changed while using the browser. [Download](onDownloadClick) the desktop application\nto get full control over input devices.\n  ",
        BROWSER_OUTPUT_DEVICE_WARNING:
          "\nOutput devices cannot be changed while using the browser. [Download](onDownloadClick) the desktop application\nto get full control over output devices.\n  ",
        FORM_LABEL_INPUT_DEVICE: "Input Device",
        FORM_LABEL_OUTPUT_DEVICE: "Output Device",
        FORM_LABEL_INPUT_VOLUME: "Input Volume",
        FORM_LABEL_OUTPUT_VOLUME: "Output Volume",
        FORM_HELP_VOICE_VIDEO_TROUBLESHOOTING_GUIDE:
          "Need help with voice or video? Check out our [troubleshooting guide]({guideURL}).",
        FORM_LABEL_INPUT_MODE: "Input Mode",
        INPUT_MODE_PTT: "Push to Talk",
        INPUT_MODE_PTT_LIMITED: "Push to Talk (Limited)",
        INPUT_MODE_PTT_RELEASE_DELAY: "Push to Talk Release Delay",
        INPUT_MODE_VAD: "Voice Activity",
        FORM_LABEL_AUTOMATIC_VAD: "Automatically determine input sensitivity",
        FORM_HELP_AUTOMATIC_VAD:
          "If the indicator is solid green then Discord is transmitting your beautiful voice.",
        FORM_LABEL_SHORTCUT: "Shortcut",
        FORM_LABEL_VOICE_PROCESSING: "Voice Processing",
        FORM_LABEL_VIDEO_CODECS: "Video Codecs",
        FORM_LABEL_VOICE_DIAGNOSTICS: "Voice Diagnostics",
        FORM_LABEL_QOS: "Quality Of Service",
        FORM_LABEL_VOLUME: "Volume",
        FORM_LABEL_STREAM_VOLUME: "Stream Volume",
        FORM_LABEL_INPUT: "Input",
        FORM_LABEL_OUTPUT: "Output",
        FORM_LABEL_VIDEO_DEVICE: "Camera",
        FORM_LABEL_VIDEO_PREVIEW: "Preview",
        TEST_VIDEO: "Test Video",
        FORM_WARNING_VIDEO_PREVIEW:
          "\nYou must grant Discord [access to your camera](onEnableClick) in order to be able to preview.\n  ",
        ECHO_CANCELLATION: "Echo Cancellation",
        ENABLE_H265: "Enable H265",
        NOISE_SUPPRESSION: "Noise Suppression",
        AUTOMATIC_GAIN_CONTROL: "Automatic Gain Control",
        ADVANCED_VOICE_ACTIVITY: "Advanced Voice Activity",
        USER_SETTINGS_DISABLE_ADVANCED_VOICE_ACTIVITY:
          "Turning this off may help if your voice is not being detected by the automatic input sensitivity.",
        EXPERIMENTAL_ENCODERS: "Experimental Encoders",
        USE_SPEAKER: "Use speaker",
        SWITCH_AUDIO_OUTPUT: "Change Audio Output",
        DISPLAY_SILENCE_WARNING:
          "Show a warning when Discord is not detecting audio from your mic",
        FORM_LABEL_TEST_MICROPHONE: "Test my Microphone",
        FORM_LABEL_ANDROID_OPENSL: "Low-latency Hardware Acceleration",
        FORM_LABEL_ANDROID_OPENSL_DESC:
          "OpenSL ES is a fancy audio API that may improve your call experience. **Changes to this setting require a Discord restart to take effect!**",
        FORM_LABEL_ANDROID_OPENSL_DEFAULT: "Let my Operating System decide",
        FORM_LABEL_ANDROID_OPENSL_DEFAULT_DESC:
          "Android will do its best to pick the right option for your device.",
        FORM_LABEL_ANDROID_OPENSL_FORCE_ENABLED:
          "Force calls to use OpenSL ES.",
        FORM_LABEL_ANDROID_OPENSL_FORCE_ENABLED_DESC:
          "This may improve your voice call experience, but may not be supported properly on older devices.",
        FORM_LABEL_ANDROID_OPENSL_FORCE_DISABLED:
          "Force calls to not use OpenSL ES.",
        FORM_LABEL_ANDROID_OPENSL_FORCE_DISABLED_DESC:
          "If you have an older device, this may fix issues you experience on voice calls.",
        FORM_CHECKBOX_DEBUG_LOGGING: "Debug Logging",
        FORM_HELP_DEBUG_LOGGING:
          "Saves debug logs to voice module folder that you can upload to Discord Support for troubleshooting.",
        SET_DEBUG_LOGGING: "Change Debug Logging",
        SET_DEBUG_LOGGING_BODY:
          "\nChanging debug logging will quit and re-launch Discord.\nAre you sure you want to do this?\n",
        FORM_LABEL_DEBUG: "Debugging",
        SHARE_DEBUG_LOGS: "Share Debug Logs",
        UPLOAD_DEBUG_LOGS: "Upload debug logs to Discord Support",
        UPLOAD_DEBUG_LOG_SUCCESS_HEADER: "Upload Successful",
        UPLOAD_DEBUG_LOG_SUCCESS:
          "Success! Your debug logs have been uploaded to Discord Support.",
        UPLOAD_DEBUG_LOG_FAILURE_HEADER: "Upload Failed",
        UPLOAD_DEBUG_LOG_FAILURE_PROGRESS:
          "Hold up! Your logs have been uploaded and are still being processed.",
        UPLOAD_DEBUG_LOG_FAILURE_NO_FILE:
          "We did not find any debug logs to upload. Please make sure that debug logging is enabled and try again.",
        UPLOAD_DEBUG_LOG_FAILURE_UPLOAD:
          "Something went wrong while uploading debug files. Please try again.",
        UPLOAD_DEBUG_LOG_FAILURE_READ:
          "Something went wrong while reading log files from your system. Please try again.",
        UPLOAD_DEBUG_LOG_FAILURE:
          "Something went wrong and we were unable to upload your debug files. Please try again.",
        SHARE_PUSH_NOTIFICATION_LOGS: "Share Push Notification Logs",
        FORM_CHECKBOX_AEC_DUMP: "Diagnostic Audio Recording",
        FORM_HELP_AEC_DUMP:
          "Diagnostic audio recording is used for analyzing audio problems. The last five minutes of voice is saved to voice module folder.",
        FORM_CHECKBOX_CONNECTION_LOG: "Save Connection Replay Log",
        FORM_HELP_CONNECTION_LOG:
          "Records all RTP data received for the next voice/video connection for debugging purposes.",
        OPEN_CONNECTION_REPLAY: "Open Connection Replay",
        FORM_LABEL_ATTENUATION: "Attenuation",
        FORM_HELP_ATTENUATION:
          "\nLower the volume of other applications by this percent when someone is speaking.\nSet to 0% to completely disable attenuation.\n  ",
        FORM_HELP_CERTIFIED_VOICE_PROCESSING:
          "\nWhile using a Discord Certified microphone certain voice processing features are no longer handled by Discord itself,\nbut rather by the microphone.\n  ",
        FORM_CHECKBOX_QOS: "Enable Quality of Service High Packet Priority",
        FORM_HELP_QOS:
          "\nHints to your router that the packets Discord is transmitting are high priority.\nSome routers or internet service providers may misbehave when this is set.\n  ",
        ATTENUATE_WHILE_SPEAKING_SELF: "When I speak",
        ATTENUATE_WHILE_SPEAKING_OTHERS: "When others speak",
        FORM_LABEL_SUBSYSTEM: "Audio Subsystem",
        SWITCH_SUBSYSTEM: "Change Audio Subsystem",
        SWITCH_SUBSYSTEM_BODY:
          "\nChanging the audio subsystem will quit and re-launch Discord.\nAre you sure you want to do this?\n",
        SETTINGS_GENERAL: "General",
        SETTINGS_ADVANCED: "Advanced",
        SETTINGS_CUSTOM_APP_ICONS: "App Icon",
        SETTINGS_CUSTOM_APP_ICONS_OFFICIAL: "Official",
        APP_ICON_UPSELL: "Unlock all icons with Nitro",
        APP_ICON_UPSELL_MODAL_TITLE: "Unlock this app icon",
        APP_ICON_UPSELL_MODAL_BODY:
          "Upgrade to Nitro to express yourself with custom app icons, updated often!",
        APP_ICON_LOGS_ERROR_MESSAGE_GENERIC:
          "An error has occured. Please try again soon.",
        APP_ICON_COACHMARK_TITLE: "New: Custom App Icons",
        APP_ICON_COACHMARK_BODY_NITRO:
          "Personalize your home screen with an app icon that speaks to you. Now available with your Nitro membership.",
        APP_ICON_COACHMARK_BODY_NON_NITRO:
          "Personalize your home screen with an app icon that speaks to you. Available now with Nitro.",
        APP_ICON_COACHMARK_CTA: "Check it out",
        APP_ICON_COACHMARK_DISMISS: "Not Now",
        APP_ICON_NEW_BADGE: "New icons",
        APP_ICON_LIMITED_TIME: "Limited-time",
        APP_ICON_PREVIEW_TITLE: "Preview app icon",
        APP_ICON_SETTINGS_TITLE: "In-app Icon",
        APP_ICON_SETTINGS_DESCRIPTION:
          "Change the Discord in-app icon, only with Nitro.",
        APP_ICON_PREVIEW_DESCRIPTION_BETA:
          "Change the Discord icon within the app, only with Nitro. $[](betaHook)",
        APP_ICON_PREVIEW_DESCRIPTION:
          "Change the Discord icon within the app, only with Nitro.",
        APP_ICON_MISSING_NAME: "MissingNo.",
        APP_ICON_DEFAULT: "Blurple (Default)",
        APP_ICON_BRAND_INVERTED: "Drocsid",
        APP_ICON_BRAND_DARK: "Goth",
        APP_ICON_MATTE_LIGHT: "Ceramic",
        APP_ICON_MATTE_DARK: "Charcoal",
        APP_ICON_CAMO: "Tactical",
        APP_ICON_PASTEL: "Pastel",
        APP_ICON_CIRCUIT: "Mainframe",
        APP_ICON_GALAXY: "Galactic Chrome",
        APP_ICON_SUNSET: "Sunset Ave",
        APP_ICON_HOLO_WAVES: "Prismatic Waves",
        APP_ICON_PIRATE: "Matey",
        APP_ICON_PIRATE_1: "Yarr",
        APP_ICON_PIRATE_2: "Aye Aye",
        APP_ICON_PIRATE_3: "Discarrrd",
        APP_ICON_PIRATE_4: "Arrr",
        APP_ICON_GAMING: "Gaming",
        APP_ICON_BEANIE: "Sherbet Dreamsicle",
        APP_ICON_CHERRY_BLOSSOM: "Sakura",
        APP_ICON_MANGA: "WHAM",
        APP_ICON_BLUSH: "uwu~",
        APP_ICON_ANGRY: "Fuming",
        APP_ICON_Y2K: "Holo",
        APP_ICON_CONTROLLER: "D64",
        APP_ICON_ZOMBIE: "Zombie",
        APP_ICON_CLYDE_STEIN: "IT’S ALIVE",
        APP_ICON_BRAIN: "Big Brain",
        APP_ICON_SLIMY: "Slimy",
        APP_ICON_DRIP: "Drip",
        SETTINGS_SYNC: "Sync across clients",
        FORM_LABEL_SENSITIVTY: "Sensitivity",
        FORM_LABEL_INPUT_SENSITIVTY: "Input Sensitivity",
        FORM_WARNING_INPUT_SENSITIVTY:
          "\nYou do not have any input devices enabled. You must grant Discord [access to your microphone](onEnableClick)\nin order to be able to observe input sensitivity.\n  ",
        FORM_LABEL_SCREENSHARE: "Screen Share",
        FORM_LABEL_ACCESSIBILITY_CHAT_INPUT: "Chat Input",
        DISPLAY_SUBMIT_BUTTON: "Show Send Message button",
        FORM_LABEL_TTS: "Text-to-Speech",
        FORM_LABEL_TTS_NOTIFICATIONS: "Text-to-Speech Notifications",
        FORM_DESCRIPTION_TTS:
          "Turn this on to have a high tech robot speak your notifications to you.",
        TTS_ALLS: "For all channels",
        TTS_CURRENT: "For current selected channel",
        TTS_NEVER: "Never",
        FORM_LABEL_USE_RICH_CHAT_BOX: "Text box",
        PREVIEW_MARKDOWN: "Preview Markdown",
        PREVIEW_MARKDOWN_DESCRIPTION:
          "Preview emoji, mentions, and markdown syntax as you type",
        LEGACY_CHAT_INPUT: "Use the legacy chat input",
        LEGACY_CHAT_INPUT_DESCRIPTION:
          "Disables most chat features but may work better with screen readers",
        DESKTOP_NOTIFICATIONS_ENABLE: "Enable Desktop Notifications",
        DESKTOP_NOTIFICATIONS_ENABLE_BODY:
          "\nIf you're looking for per-channel or per-server notifications, right-click the desired server icon and select Notification Settings.\n",
        USER_SETTINGS: "User Settings",
        MORE_DETAILS: "More Details",
        USER_SETTINGS_WITH_BUILD_OVERRIDE:
          "User Settings (Build Override: !!{webBuildOverride}!!)",
        APP_SETTINGS: "App Settings",
        BILLING_SETTINGS: "Billing Settings",
        ACTIVITY_SETTINGS: "Activity Settings",
        APP_INFORMATION: "App Information",
        PREMIUM_SETTINGS_GENERIC: "Billing Settings",
        PREMIUM_SETTINGS: "Nitro Settings",
        PREMIUM_SETTINGS_GET: "Get Nitro",
        PREMIUM_SETTINGS_GET_TIER_0: "Get Nitro Basic",
        PREMIUM_SETTINGS_SUBSCRIBE_TODAY: "Subscribe Today",
        PREMIUM_SETTINGS_MANAGE: "Manage Nitro",
        PREMIUM_SETTINGS_PREMIUM_GUILD_SUBSCRIPTIONS: "Boosts",
        PREMIUM_GUILD_SUBSCRIPTIONS_GOAL: "Goal: {levelName}",
        PREMIUM_GUILD_SUBSCRIPTIONS_NUDGE_TOOLTIP:
          "Buy Boosts to help unlock {levelName} perks!",
        PREMIUM_GUILD_SUBSCRIPTIONS_NUDGE_TOOLTIP_COMPLETE:
          "This server has unlocked all Boosting perks!",
        PREMIUM_GUILD_SUBSCRIPTIONS_PROGRESS_BAR_BLURB:
          "**{numBoosts, number}/{numTotal, number}** Boosts",
        PREMIUM_GUILD_SUBSCRIPTIONS_PROGRESS_BAR_COMPLETED_BLURB:
          "**{numBoosts, number}** Boosts",
        PREMIUM_GUILD_SUBSCRIPTIONS_PROGRESS_BAR_TADA_ICON_ALT_TEXT:
          "Image of party popper",
        VOICE: "Voice",
        VOICE_AND_VIDEO: "Voice & Video",
        VOICE_SETTINGS: "Voice Settings",
        VOICE_CALL_MEMBER_LIST_TITLE:
          "{count, plural, =1 {# Person} other {# People}}",
        VOICE_CALL_ACTION_A11Y_HINT: "Open voice call actions",
        TURN_CAMERA_ON_A11Y_LABEL: "Turn Camera On",
        TURN_CAMERA_OFF_A11Y_LABEL: "Turn Camera Off",
        IN_GAME_VOICE_SETTINGS: "In-Game Voice Settings",
        VIDEO_SETTINGS: "Video Settings",
        TEXT: "Text",
        ACTIVITY_STATUS: "Activity Status",
        REGISTERED_GAMES: "Registered Games",
        ACTIVITY_PRIVACY: "Activity Privacy",
        FRIEND_REQUESTS: "Friend Requests",
        ACTIVITY: "Activity",
        LIBRARY: "Library",
        KEYBINDS: "Keybinds",
        TEXT_AND_IMAGES: "Text & Images",
        TEXT_AND_MEDIA: "Text & Media",
        CONNECTIONS: "Connections",
        ACCOUNT: "Account",
        ACCOUNT_SETTINGS: "Account Settings",
        NOTIFICATIONS: "Notifications",
        YOU: "You",
        NOTIFICATIONS_MUTED: "Notifications, muted",
        DATA_SETTINGS: "Data",
        APPEARANCE: "Appearance",
        OVERLAY: "Game Overlay",
        LOCALE: "Locale",
        LOGOUT: "Log Out",
        SOUNDS: "Sounds",
        PREMIUM: "Nitro",
        SOUND_MESSAGE: "Message",
        SOUND_DEAFEN: "Deafen",
        SOUND_UNDEAFEN: "Undeafen",
        SOUND_MUTE: "Mute",
        SOUND_UNMUTE: "Unmute",
        SOUND_VOICE_DISCONNECTED: "Voice Disconnected",
        SOUND_PTT_ACTIVATE: "PTT Activate",
        SOUND_PTT_DEACTIVATE: "PTT Deactivate",
        SOUND_USER_JOIN: "User Join",
        SOUND_USER_LEAVE: "User Leave",
        SOUND_USER_MOVED: "User Moved",
        SOUND_INCOMING_RING: "Incoming Ring",
        SOUND_OUTGOING_RING: "Outgoing Ring",
        SOUND_STREAM_STARTED: "Stream Started",
        SOUND_STREAM_STOPPED: "Stream Stopped",
        SOUND_VIEWER_JOIN: "Viewer Join",
        SOUND_VIEWER_LEAVE: "Viewer Leave",
        SOUND_INVITED_TO_SPEAK: "Invited to Speak",
        SOUND_ACTIVITY_START: "Activity Start",
        SOUND_ACTIVITY_END: "Activity End",
        SOUND_ACTIVITY_USER_JOIN: "Activity User Join",
        SOUND_ACTIVITY_USER_LEAVE: "Activity User Leave",
        SOUND_DISABLE_ALL: "Disable All Notification Sounds",
        SOUND_DISABLE_ALL_NOTE:
          "Your existing notification sound settings will be preserved.",
        RESET_VOICE_SETTINGS: "Reset Voice Settings",
        RESET_VOICE_SETTINGS_BODY:
          "\nResetting voice settings will clear all local mutes and local volumes.\nAre you sure you want to do this?\n",
        ACKNOWLEDGEMENTS: "Acknowledgements",
        CONNECT_TO_VOICE: "Connect to Voice",
        CONNECT_TO_VIDEO: "Connect to Video",
        DISCONNECT_FROM_VOICE: "Disconnect from Voice",
        JOINING_WILL_END_CURRENT_CALL_TITLE: "You're already in a call.",
        JOINING_VOICE_CALL_WILL_END_CURRENT_CALL_BODY:
          "To join this voice call, your current call will be ended.",
        VIDEO_UNSUPPORTED_BROWSER_TITLE: "Browser not supported",
        VIDEO_UNSUPPORTED_BROWSER_BODY:
          "Video and Screen Share are not supported in this browser. Please download our desktop client to beam your face and screen across the net.",
        MOBILE_ENABLE_HARDWARE_SCALING: "Enable Hardware Scaling",
        MOBILE_ENABLE_HARDWARE_SCALING_DESC:
          "Experimental feature that may improve performance in video calls. Beware, may cause jank.",
        CERTIFIED: "Certified",
        USER_SETTINGS_BLOCKED_USERS: "Blocked Users",
        USER_SETTINGS_BLOCKED_USERS_HEADER:
          "{numberOfBlockedUsers} Blocked Users",
        USER_SETTINGS_BLOCKED_USERS_UNBLOCKBUTTON: "Unblock",
        USER_SETTINGS_BLOCKED_USERS_EMPTY: "You don't have any blocked users",
        OVERLAY_LAUNCH_TITLE: "Use Discord overlay in-game",
        OVERLAY_LAUNCH_OPEN_TIP: "Press $[!!{keybind}!!](keybindHook) to show",
        OVERLAY_SETTINGS_TITLE: "Overlay Settings",
        OVERLAY_NOTIFICATION_INCOMING_CALL: "Incoming call...",
        OVERLAY_WIDGET_SHOW_IN_GAME: "Show window in game",
        OVERLAY_WIDGET_HIDE_IN_GAME: "Hide window in game",
        OVERLAY_NEWS_GO_LIVE_BODY:
          "Want to stream !!{game}!! to your friends in !!{server}!!?",
        OVERLAY_NEWS_GO_LIVE_CTA: "Go Live",
        OVERLAY_SETTINGS_GENERAL_TAB: "General",
        OVERLAY_SETTINGS_VOICE_TAB: "Voice",
        OVERLAY_TOO_SMALL:
          "Whoops! Your game is too tiny for our overlay. Resize to !!{width}!!x!!{height}!! to fix it.",
        OVERLAY_IN_GAME_PREVIEW_HEADER: "In-Game Preview",
        OVERLAY_CHANNEL_CHAT_HOTKEY:
          "Press !!{keybind}!! to talk in !!{channelName}!!",
        OVERLAY_USER_CHAT_HOTKEY: "Press !!{keybind}!! to talk",
        OVERLAY_MOBILE_TOGGLE_LABEL: "Enable Mobile Voice Overlay",
        OVERLAY_MOBILE_TOGGLE_DESC:
          "See who's talking and access shortcuts while using other apps when connected to voice.",
        OVERLAY_MOBILE_REQUIRED:
          "Enable Mobile Overlay in the Discord's Voice Settings.",
        OVERLAY_MOBILE_UNAUTHED:
          "Login to the Discord app to enable this feature.",
        _OVERLAY_MOBILE_UNAUTHED:
          "Log in to the Discord app to enable this feature.",
        OVERLAY_MENU_GET_INVITE: "Get Invite Link",
        OVERLAY_MENU_SWITCH_CHANNELS: "Switch Channels",
        OVERLAY_MENU_OPEN_DISCORD: "Open Discord",
        OVERLAY_NO_RESULTS:
          "We’ve searched far and wide, but we couldn't find any voice channels.",
        LANGUAGE: "Language",
        LANGUAGE_SELECT: "Select a Language",
        LANGUAGE_UPDATED: "Language has been Updated.",
        ESLATAM_LANGUAGE_LAUNCH_NOTICE:
          "Discord now supports Latin American Spanish.",
        ESLATAM_LANGUAGE_LAUNCH_NOTICE_CTA: "Change Language",
        CHECKING_FOR_UPDATES: "Checking For Updates",
        UPDATE_AVAILABLE: "Downloading Update",
        UPDATE_DOWNLOADED: "Update Ready!",
        UPDATE_MANUALLY: "There is an update available",
        OUT_OF_DATE_TITLE: "You're out of date",
        OUT_OF_DATE_DESCRIPTION:
          "We've got some sweet changes to Discord (and probably a bug fix or two).  Update to continue.",
        OUT_OF_DATE_ACTION: "Update Discord",
        VERY_OUT_OF_DATE_DESCRIPTION:
          "Your Discord installation has continuously failed to update and is now very out of date. Let's fix that... together.",
        UPDATE_DURING_CALL_TITLE: "Briefly leave voice?",
        UPDATE_DURING_CALL_BODY:
          "Updating Discord while in a voice channel will cause you to leave briefly. You're probably going to update anyway but, you know, just warning you.",
        UPDATE_DURING_CALL_CONTINUE: "Update anyway!",
        TAB_BADGE_A11Y_LABEL:
          "{count, plural, =0 {} =1 {, # new} other {, # new}},",
        SERVERS_TAB_BADGE_A11Y_LABEL:
          "{count, plural, =0 {} =1 {, # mention} other {, # mentions}},",
        YOU_TAB_ONBOARDING_AVATAR_TITLE: "Add an avatar",
        YOU_TAB_ONBOARDING_AVATAR_DESCRIPTION:
          "Show off your personality and help others online know they’re talking to the right person!",
        YOU_TAB_ONBOARDING_ABOUT_ME_TITLE: "Add a bio",
        YOU_TAB_ONBOARDING_ABOUT_ME_DESCRIPTION:
          "Games, music, TV shows, movies - what are you into? Tell people what you’re all about!",
        ACCOUNT_CLICK_TO_COPY: "Click to copy username",
        ACCOUNT_SPEAKING_WHILE_MUTED: "You are currently muted!",
        ACCOUNT_USERNAME_COPY_SUCCESS_1: "Copied!",
        ACCOUNT_USERNAME_COPY_SUCCESS_2: "Double Copy!",
        ACCOUNT_USERNAME_COPY_SUCCESS_3: "Triple Copy!",
        ACCOUNT_USERNAME_COPY_SUCCESS_4: "Dominating!!",
        ACCOUNT_USERNAME_COPY_SUCCESS_5: "Rampage!!",
        ACCOUNT_USERNAME_COPY_SUCCESS_6: "Mega Copy!!",
        ACCOUNT_USERNAME_COPY_SUCCESS_7: "Unstoppable!!",
        ACCOUNT_USERNAME_COPY_SUCCESS_8: "Wicked Sick!!",
        ACCOUNT_USERNAME_COPY_SUCCESS_9: "Monster Copy!!!",
        ACCOUNT_USERNAME_COPY_SUCCESS_10: "GODLIKE!!!",
        ACCOUNT_USERNAME_COPY_SUCCESS_11: "BEYOND GODLIKE!!!!",
        SET_STATUS: "Set Status",
        ONLINE_STATUS: "Online Status",
        CHANGE_ONLINE_STATUS: "Change Online Status",
        STATUS_ONLINE: "Online",
        STATUS_ONLINE_MOBILE: "Online via mobile",
        STATUS_OFFLINE: "Offline",
        STATUS_IDLE: "Idle",
        STATUS_UNKNOWN: "Unknown",
        STATUS_DND: "Do Not Disturb",
        STATUS_INVISIBLE: "Invisible",
        STATUS_DND_HELP: "You will not receive any desktop notifications.",
        STATUS_INVISIBLE_HELPER:
          "You will not appear online, but will have full access to all of Discord.",
        STATUS_UNTIL: "until {endTime}",
        STATUS_STREAMING: "Streaming",
        STATUS_TAB_A11Y_ACTION: "Set your status",
        PINNED_MESSAGES: "Pinned Messages",
        PINNED_MESSAGES_PRO_TIP: "PROTIP:",
        PINNED_MESSAGES_PRO_TIP_BODY_CHANNEL:
          "Users with 'Manage Messages' permission can pin a message from its context menu.",
        PINNED_MESSAGES_PRO_TIP_BODY_DMS:
          "You can pin a message from its context menu.",
        NO_PINS_IN_CHANNEL:
          "This channel doesn't have any\npinned messages... yet.",
        NO_PINS_IN_DM:
          "This direct message doesn't have\nany pinned messages... yet.",
        JUMP: "Jump",
        COLLAPSE: "Collapse",
        EXPAND: "Expand",
        UNBLOCK_TO_JUMP_TITLE: "Soo... You Blocked This Person",
        UNBLOCK_TO_JUMP_BODY:
          "First unblock '!!{name}!!' and then you can jump to their message.",
        PIN_MESSAGE_TITLE: "Pin It. Pin It Good.",
        PIN_MESSAGE_BODY:
          "\nHey, just double checking that you want to pin this message to #!!{channelName}!! for posterity and greatness?",
        PIN_MESSAGE_BODY_PRIVATE_CHANNEL:
          "\nHey, just double checking that you want to pin this message to the current channel for posterity and greatness?",
        UNPIN_MESSAGE_TITLE: "Unpin Message",
        UNPIN_MESSAGE_BODY: "You sure you want to remove this pinned message?",
        UNPIN_CONFIRM: "Remove it please!",
        UNPIN_MESSAGE_CONTEXT_MENU_HINT:
          "\nYou can hold down shift when clicking **unpin message** to bypass this confirmation entirely.",
        PIN_CONFIRM: "Oh yeah. Pin it",
        PIN_MESSAGE_TOO_MANY_TITLE: "The Pin Broke",
        PIN_MESSAGE_TOO_MANY_BODY:
          "\nDiscord is unable to pin that message. You may have hit the limit of {maxPins} pins in channel #!!{channelName}!!.",
        PIN_MESSAGE_TOO_MANY_BODY_PRIVATE_CHANNEL:
          "\nDiscord is unable to pin that message. You may have hit the limit of {maxPins} pins in this channel.",
        UNPIN_MESSAGE_FAILED_TITLE: "The Pin Is Stuck!",
        UNPIN_MESSAGE_FAILED_BODY:
          "Discord failed to unpin that message for some reason. Sorry about that.",
        PINS_DISABLED_NSFW:
          "This channel is age-restricted and due to its content its pins should not be viewed by anyone.",
        FAVORITE_ITEM: "Favorite",
        UNFAVORITE_ITEM: "Unfavorite",
        NO_INPUT_DEVICES: "No Input Devices",
        NO_OUTPUT_DEVICES: "No Output Devices",
        NO_VIDEO_DEVICES: "No Video Devices",
        DEFAULT: "Default",
        INPUT_DEVICE: "Input Device",
        OUTPUT_DEVICE: "Output Device",
        CONNECTION_STATUS_CONNECTING: "Connecting",
        CONNECTION_STATUS_AUTHENTICATING: "Authenticating",
        CONNECTION_STATUS_AWAITING_ENDPOINT: "Awaiting Endpoint",
        CONNECTION_STATUS_DISCONNECTED: "Disconnected",
        CONNECTION_STATUS_VOICE_CONNECTED: "Voice Connected",
        CONNECTION_STATUS_VIDEO_CONNECTED: "Video Connected",
        CONNECTION_STATUS_RTC_CONNECTING: "RTC Connecting",
        CONNECTION_STATUS_ICE_CHECKING: "Checking Route",
        CONNECTION_STATUS_DTLS_CONNECTING: "DTLS Connecting",
        CONNECTION_STATUS_NO_ROUTE: "No Route",
        CONNECTION_STATUS_RTC_DISCONNECTED: "RTC Disconnected",
        CONNECTION_STATUS_STREAM_CONNECTED: "Watching !!{username}!!'s Stream",
        CONNECTION_STATUS_STREAM_SELF_CONNECTED: "Screen Sharing",
        SECURE_CONNECTION: "Secure Connection",
        DEBUG: "Debug",
        COPY_STATS: "Copy Stats",
        DISCONNECT_SELF: "Disconnect",
        DISCONNECT_OTHER: "Disconnect",
        RTC_CONNECTION: "RTC Connection",
        RTC_CONNECTION_STATE_AWAITING_ENDPOINT:
          "We're waiting to connect for ya. If your connection gets stuck here, we may be experiencing a region outage. Check our [service status page]({url}) for more info or consider asking your server admins or owner to temporarily switch regions under the Voice Channel Settings.",
        RTC_CONNECTION_STATE_CONNECTING:
          "\nA RTC server has been allocated for you and Discord is attempting to connect to it. Get ready to roll out.\n",
        RTC_CONNECTION_STATE_AUTHENTICATING:
          "\nDiscord has connected to your real-time communication server and is securing the connection.\n",
        RTC_CONNECTION_STATE_RTC_CONNECTING:
          "\nLocked and loaded! Discord has established a secure connection to your real-time communication server and is\nattempting to send data.\n",
        RTC_CONNECTION_STATE_ICE_CHECKING:
          "\nShields Up! Discord has established a secure connection to your real-time communication server and is attempting to send data.\nIf your browser connection is stuck in this step, check out [this swanky article]({url}) to help resolve the problem.\n",
        RTC_CONNECTION_STATE_NO_ROUTE:
          "Hm, Discord can't establish a connection. We'll try again in a moment. If Discord keeps getting stuck in this step, check out [this fancy article]({url}) to help resolve the problem.",
        RTC_CONNECTION_STATE_RTC_CONNECTED_AVERAGE_PING:
          "Average ping: **{averagePing} ms**",
        RTC_CONNECTION_STATE_RTC_CONNECTED_LAST_PING:
          "Last ping: **{lastPing} ms**",
        RTC_CONNECTION_STATE_RTC_CONNECTED_LOSS_VALUE:
          "Outbound packet loss rate: **{outboundLossRate}%**",
        RTC_CONNECTION_STATE_RTC_CONNECTED_DETAILS:
          "You may notice delayed audio at {badPing} ms or higher. If the problem persists, disconnect and try again.",
        RTC_CONNECTION_STATE_RTC_CONNECTED_DETAILS_WITH_LOSS:
          "You may notice delayed audio at {badPing} ms or higher. You may sound robotic if your packet loss rate is over {badLossRate}%. If the problem persists, disconnect and try again.",
        RTC_CONNECTION_STATE_DISCONNECTED:
          "Discord's connection has been interrupted. Sorry about that, we'll attempt to re-establish the connection in a moment.",
        TUTORIAL_CLOSE: "Got it!",
        SKIP_ALL_TIPS: "Skip all tips",
        TIP_WRITING_MESSAGES_TITLE3: "Have a Conversation",
        TIP_WRITING_MESSAGES_BODY3:
          "\nNow that you've joined {serverName}, make your presence known and **say hello**! \uD83D\uDC4B\n\n  ",
        TIP_WHOS_ONLINE_TITLE3: "What's everyone doing?",
        TIP_WHOS_ONLINE_BODY3:
          "\nHere you can view all the members of this channel. See who's online and what they're up to, like playing a game or listening to music.\n\n  ",
        TIP_INSTANT_INVITE_TITLE3: "Invite Your Friends",
        TIP_INSTANT_INVITE_BODY3:
          "\nTo invite people to a server, click the share icon $[!!{shareIcon}!!](shareIconHook) next to any channel.\n\n  ",
        TIP_SERVER_SETTINGS_TITLE3: "Access Server Settings",
        TIP_SERVER_SETTINGS_BODY3:
          "\nClick here to adjust your server notifications or privacy settings.\n\n  ",
        TIP_DIRECT_MESSAGES_TITLE3: "Start a separate conversation",
        TIP_DIRECT_MESSAGES_BODY3:
          "\nWant some one-on-one time? Click here to send a direct message to a friend.\n\n  ",
        TIP_CREATE_MORE_SERVERS_TITLE3: "Create Your Own Server",
        TIP_CREATE_MORE_SERVERS_BODY3:
          "\nCreate a brand new server with voice and text chat for your buddies!\n\n  ",
        TIP_CREATE_FIRST_SERVER_TITLE3: "Create Your Own Server",
        TIP_CREATE_FIRST_SERVER_BODY3:
          "\nCreate a brand new server with voice and text chat for your buddies!\n\n  ",
        TIP_FRIENDS_LIST_TITLE3: "See Your Friends",
        TIP_FRIENDS_LIST_BODY3:
          "\nView all of your friends and direct messages, or start a new private conversation.\n\n  ",
        BAN_USER_TITLE: "Ban '!!{user}!!'",
        BAN_USER_CONFIRMED: "'!!{user}!!' has been banned from the server.",
        BAN_CONFIRM_TITLE: "Would you like to ban '!!{username}!!?'",
        FORM_LABEL_DELETE_MESSAGE_HISTORY: "Delete Message History",
        FORM_LABEL_REASON_KICK: "Reason for Kick",
        FORM_LABEL_REASON_BAN: "Reason for Ban",
        DELETE_MESSAGE_HISTORY_OPTION_NONE: "Don't Delete Any",
        DELETE_MESSAGE_HISTORY_OPTION_1HR: "Previous Hour",
        DELETE_MESSAGE_HISTORY_OPTION_6HR: "Previous 6 Hours",
        DELETE_MESSAGE_HISTORY_OPTION_12HR: "Previous 12 Hours",
        DELETE_MESSAGE_HISTORY_OPTION_24HR: "Previous 24 Hours",
        DELETE_MESSAGE_HISTORY_OPTION_3D: "Previous 3 Days",
        DELETE_MESSAGE_HISTORY_OPTION_7D: "Previous 7 Days",
        BAN_REASON_OPTION_SPAM_ACCOUNT: "Suspicious or spam account",
        BAN_REASON_OPTION_HACKED_ACCOUNT: "Compromised or hacked account",
        BAN_REASON_OPTION_BREAKING_RULES: "Breaking server rules",
        BAN_REASON_OPTION_OTHER: "Other",
        BAN_REASON_REQUIRED_ERROR: "Ban reason must be provided",
        CALL_USER_PROMPT_HEADER: "Ready to start a call?",
        CALL_USER_PROMPT: "Enjoy this moment.  Then jump in when you're ready.",
        CALL_USER_CONFIRM: "I'm ready!",
        DEFAULT_FAILURE_TO_PERFORM_ACTION_MESSAGE:
          "Oops! Looks like that didn't work",
        NO_TEXT: "No",
        YES_TEXT: "Yes",
        CLOSE: "Close",
        SEND: "Send",
        SEND_COMPRESSED: "Send Compressed",
        SAVE: "Save",
        APPLY: "Apply",
        SELECT: "Select",
        SELECT_ALL: "Select All",
        START: "Start",
        LAUNCH: "Launch",
        ADD: "Add",
        ADDED: "Added",
        REMAINING_PARTICIPANTS: "Add Members (!!{current}!!/!!{max}!!)",
        SEND_WAVE: "Send a wave",
        WAVE_TO: "Wave to !!{username}!!",
        WAVE_DEFAULT_RECIPIENT: "your pal",
        WAVE_CTA: "\uD83D\uDC4B  Wave",
        WAVE: "Wave",
        CONTINUE_IN_BROWSER: "Continue in Browser",
        NEXT: "Next",
        BACKSPACE: "Backspace",
        SYSTEM_KEYBOARD: "System keyboard",
        PAUSE: "Pause",
        PLAY: "Play",
        PLAY_NOW: "Play now",
        PLAY_AGAIN: "Play again",
        TOGGLE_DRAWER: "Toggle drawer",
        CLOSE_DRAWER: "Close drawer",
        TOGGLE_MICROPHONE: "Toggle microphone",
        TOGGLE_CAMERA: "Toggle camera",
        TOGGLE_SCREENSHARE: "Toggle screen share",
        CHANGE_CAMERA: "Change camera",
        SAVED_SETTINGS: "Settings successfully updated.",
        DEVICE_SETTINGS: "Device Settings",
        ACTIONS: "Actions",
        SAVE_MEDIA_SUCCESS_MOBILE: "Saved",
        SAVE_MEDIA_FAILURE_MOBILE: "Save Failed",
        SAVE_MEDIA_FAILURE_HELP_MOBILE:
          "Please check your system network and privacy settings for the Photos app.",
        NO_CONTACTS_ACCESS: "Discord does not have access to your contacts",
        NO_CAMERA_ACCESS: "Discord does not have access to your camera",
        NO_MICRPHONE_ACCESS: "Discord does not have access to your microphone",
        NO_PHOTOS_ACCESS: "Discord does not have access to your photos",
        NO_SELECT_PHOTO_ACCESS: "Discord does not have access to this photo.",
        NO_INPUT_MONITORING_ACCESS:
          "Discord does not have access to system wide keyboard input required for Push to Talk",
        ENABLE_PRIVACY_ACCESS: "You can enable access in privacy settings.",
        PIN_MESSAGE_BODY_MOBILE: "Are you sure you want to pin this message?",
        JOIN_VOICE_CHANNEL: "Connect to this voice channel?",
        LEAVE_SERVER_BODY_MOBILE: "Are you sure you want to leave !!{name}!!?",
        TIMEOUT_USER_TITLE: "Timeout '!!{user}!!'",
        REMOVE_TIMEOUT_USER_TITLE: "Remove timeout from '!!{user}!!'",
        KICK_USER_TITLE: "Kick '!!{user}!!'",
        KICK_USER_BODY:
          "Are you sure you want to kick !!{user}!! from the server? They will be able to rejoin again with a new invite.",
        KICK_USER_CONFIRMED: "'!!{user}!!' has been kicked from the server.",
        KICK_USER_ERROR_GENERIC:
          "Whoops... !!{user}!! could not be kicked.  Please try again!",
        BAN_USER_BODY:
          "Are you sure you want to ban !!{user}!!? They won't be able to return unless you unban them.",
        BAN_USER_ERROR_GENERIC:
          "Whoops... !!{user}!! could not be banned.  Please try again!",
        JOIN_AFK_CHANNEL_BODY:
          "It seems you've joined the inactive channel. You cannot speak in this channel.",
        IMAGE: "Image",
        PHOTO: "Photo",
        VIDEO: "Video",
        REPORT: "Report",
        REPORT_THIS_USER_FOR_ABUSE: "Report This User for Abuse",
        ACCEPT: "Accept",
        AGREE: "Agree",
        REPORT_SPAM: "Report Spam",
        REPORT_NOT_SPAM: "Mark as not spam",
        REPORT_NOT_SPAM_TOOLTIP:
          "Accept DM and help improve our spam detection",
        ACCEPT_DM_HEADER: "New direct message",
        ACCEPT_DM_SUBTEXT:
          "Accept to start chatting. They will only be notified if you message them back.",
        ACCEPT_SPAM_DM_HEADER: "This might be spam",
        ACCEPT_SPAM_DM_SUBTEXT:
          "Message content hidden just to be safe. You can still reply.",
        ACCEPT_SPAM_DM_SUBTEXT_MOBILE:
          "Message content hidden just to be safe. You can still reply.\nMessages marked as not spam will help improve our spam filters.",
        HIDDEN_SPAM_MESSAGE_COUNT:
          "{count, plural, one {1 message hidden from likely spammer.} other {{count} messages hidden from likely spammer.}}",
        BLOCK_SPAMMER_HEADER: "Want to block them?",
        BLOCK_SPAMMER_SUBHEADER:
          "If blocked, {username} will be unable to message you.",
        SPAMMER_BLOCKED: "Blocked {username}",
        CLOSE_DM: "Close DM",
        EDIT_MESSAGE: "Edit Message",
        REMOVE_MESSAGE_ATTACHMENT: "Remove Message Attachment",
        SAVE_IMAGE: "Save Image",
        COPY_MEDIA_LINK: "Copy Media Link",
        DELETE_MESSAGE: "Delete Message",
        EDITING_MESSAGE: "Editing Message",
        EDITING_MESSAGE_CANCEL: "Cancel Editing Message",
        SPEAK_MESSAGE: "Speak Message",
        STOP_SPEAKING_MESSAGE: "Stop Speaking Message",
        MARK_UNREAD: "Mark Unread",
        QUOTE: "Quote",
        READ_ONLY_CHANNEL: "Channel is read-only.",
        CREATE_CHANNEL: "Create Channel",
        CHANNEL_NAME_PLACEHOLDER: "new-channel",
        DELETED_CHANNEL_PLACEHOLDER: "deleted-channel",
        UNKNOWN_CHANNEL_PLACEHOLDER: "unknown-channel",
        UNKNOWN_CHANNEL: "Unknown",
        DELETED_ROLE_PLACEHOLDER: "deleted-role",
        UNKNOWN_USER_MENTION_PLACEHOLDER: "unknown-user",
        CATEGORY_NAME_PLACEHOLDER: "New Category",
        CREATE_CHANNEL_IN_CATEGORY: "Create Channel in !!{categoryName}!!",
        OPEN_IN_BROWSER: "Open in Browser",
        OPEN_IN_APP: "Open App",
        USER_SIGNED_IN_AS: "$[You are signed in as](signedInAs) $[](userTag)",
        NEW_DM: "New Direct Message",
        NEW_MESSAGE: "New Message",
        EXPIRES_IN: "Expires in:",
        DELETE_CHANNEL_BODY:
          "Are you sure you want to delete **!!{channelName}!!**? This cannot be undone.",
        DELETE_FAVORITES_CHANNEL_TITLE: "Remove from Favorites",
        DELETE_FAVORITES_CHANNEL_BODY:
          "Are you sure you want to remove **!!{channelName}!!** from Favorites? You can add **!!{channelName}!!** back into Favorites at any time.",
        DELETE_FAVORITES_CHANNEL_CONFIRM: "Remove Channel",
        DELETE_FAVORITES_CATEGORY_BODY:
          "Are you sure you want to delete **!!{channelName}!!** from Favorites? Conversations under this category will be uncategorized.",
        DELETE_FAVORITES_CATEGORY_CONFIRM: "Remove Category",
        SERVERS: "Servers",
        USERS: "Users",
        USER: "User",
        COPY_TEXT: "Copy Text",
        COPIED_TEXT: "Copied to clipboard.",
        COPY_USERNAME: "Copy Username",
        LOAD_IMAGE_ERROR: "Failed to load the image.\nPlease try again.",
        SEND_MESSAGE_FAILURE: "Failed to send message. Hold for options.",
        INVALID_ATTACHMENTS_FAILURE:
          "Attachments you trying to send are unavailable.",
        RESEND_MESSAGE: "Resend message",
        PARTIAL_OUTAGE:
          "\n{count, plural, one {**1** other server is unavailable due to a temporary outage.}\nother {**{count}** other servers are unavailable due to a temporary outage.}}",
        PARTIAL_OUTAGE_A11Y:
          "{count, plural, one {1 server is unavailable due to a temporary outage.} other {{count} servers are unavailable due to a temporary outage.}} Discord's Twitter should have more information.",
        MUTE_CHANNEL: "Mute **!!{name}!!**",
        UNMUTE_CHANNEL: "Unmute **!!{name}!!**",
        MUTE_CONVERSATION: "Mute Conversation",
        UNMUTE_CONVERSATION: "Unmute Conversation",
        MUTE_SERVER: "Mute Server",
        UNMUTE_SERVER: "Unmute Server",
        MUTE_THREAD: "Mute Thread",
        UNMUTE_THREAD: "Unmute Thread",
        MUTE_CHANNEL_GENERIC: "Mute Channel",
        UNMUTE_CHANNEL_GENERIC: "Unmute Channel",
        SYNC_ACROSS_CLIENTS_TEXT: "Sync across clients.",
        MOBILE_AUTOMATIC_THEME: "Automatic (follows system settings)",
        MOBILE_AUTOMATIC_THEME_SHORT: "Automatic",
        SYNC_ACROSS_CLIENTS_TEXT_HELP:
          "\nTurning this on will overwrite text & image settings on all other clients including desktop and browser.\n  ",
        SYNC_ACROSS_CLIENTS_APPEARANCE_HELP:
          "\nTurning this on will overwrite the above appearance settings on all other clients including desktop and browser.\n  ",
        SYNC_ACROSS_CLIENTS_APPEARANCE_HELP_NO_WHITESPACE:
          "Turning this on will overwrite the above appearance settings on all other clients including desktop and browser.",
        SETTINGS_TITLE_NEW_LAYOUT: "New Layout",
        NEW_LAYOUT_TOGGLE_TEXT: "Show New Layout",
        NEW_LAYOUT_FEEDBACK_TEXT: "Give us Feedback",
        NEW_LAYOUT_LEARN_MORE: "Learn More",
        NETWORK_ERROR_CLOUDFLARE_INTERMITTENT:
          "There may have been a brief CloudFlare service interruption; please try again.",
        NETWORK_ERROR_CLOUDFLARE_UNAUTHORIZED:
          "Your IP address is currently blacklisted on CloudFlare.",
        NETWORK_ERROR_REST_REQUEST: "A network error has occurred.",
        NETWORK_ERROR_CONNECTION:
          "A network error has occurred. Please check your connection and try again.",
        NETWORK_ERROR_UNKNOWN: "An unknown network error has occurred.",
        NETWORK_ERROR_SSL:
          "A network SSL error has occurred.  Please ensure your system clock is synced.",
        NETWORK_ERROR_UNAUTHORIZED:
          "You are unauthorized to perform this request.",
        NETWORK_ERROR_REQUEST_TOO_LARGE:
          "Network request payload was too large.",
        NETWORK_ERROR_FORBIDDEN:
          "A forbidden network request has occurred, please try again.",
        NETWORK_ERROR_BAD_REQUEST:
          "A bad network request has occurred, please try again.",
        NETWORK_OFFLINE: "Network connectivity limited or unavailable.",
        NETWORK_OFFLINE_AIRPLANE_MODE: "Airplane mode is active.",
        TIMEOUT_ERROR: "Operation took too long to complete, please try again.",
        INTERNAL_SERVER_ERROR:
          "An internal server error has occurred, please try again.",
        WEB_BROWSER: "Web Browser",
        WEB_BROWSER_IN_APP: "In-App Browser",
        WEB_BROWSER_SAFARI: "Safari",
        WEB_BROWSER_CHROME: "Chrome",
        WEB_BROWSER_EXTERNAL: "External Browser",
        JUMP_TO_MESSAGE: "Jump to Message",
        CHANNEL_PERMISSIONS: "Channel Permissions",
        CATEGORY_PERMISSIONS: "Category Permissions",
        FORM_HELP_CHANNEL_PERMISSIONS:
          "Change privacy settings and customize how members can interact with this channel.",
        NEW_PERMISSION: "New Permission",
        PERMISSION_OVERRIDES: "Permission Overrides",
        VIEW_PROFILE: "View Profile",
        VIEW_PROFILE_USERNAME: "View Profile, !!{username}!!",
        BUNDLE_READY_TITLE: "Augment Complete",
        BUNDLE_READY_BODY: "Restart Discord for some improvements!",
        BUNDLE_READY_RESTART: "Restart",
        BUNDLE_READY_LATER: "Not now",
        UNHANDLED_LINK_TITLE: "Unhandled Link",
        UNHANDLED_LINK_BODY:
          "Sorry, no applications on your device were found to handle this link:",
        CHANNEL_SETTINGS_HAVE_BEEN_UPDATED:
          "Channel settings have been updated.",
        CHANNEL_HAS_BEEN_DELETED: "Channel has been deleted.",
        CATEGORY_SETTINGS_HAVE_BEEN_UPDATED:
          "Category settings have been updated.",
        CATEGORY_HAS_BEEN_DELETED: "Category has been deleted.",
        ADD_NEW_CONNECTION: "Add New Connection",
        DEFAULT_INPUT_PLACEHOLDER: "Loading...",
        UNKNOWN_USER: "Unknown User",
        INVITE_NO_THANKS: "No Thanks",
        PINS: "Pins",
        PINS_UNREAD_A11Y_LABEL: "Pins, unread",
        CHANNEL_EMOJI_CUSTOMIZE: "Customize",
        CHANNEL_EMOJI_REQUIRES_BOOST: "Requires Level 1+ Server Boost",
        CHANNEL_EMOJI_MYSELF_TAB: "Myself",
        CHANNEL_EMOJI_NO_PERMISSION: "No Permission",
        QUARANTINE_MODE: "Quarantine Mode",
        YOUR_ACCOUNT_IS_QUARANTINED: "Your account is quarantined",
        QUARANTINE_MODE_INFO_MODAL_DESCRIPTION:
          "Based on your recent activity, Discord has quarantined your account. We have limited your access to new communities. [Learn more about account quarantine]({helpdeskArticle}).",
        QUARANTINE_MODE_INFO_MODAL_APPEAL:
          "If you think this is a mistake, [appeal your quarantine]({appealLink}).",
        QUARANTINE_MODE_NOTICE:
          "Your account is quarantined. Discord has limited your access to new communities.",
        APPEAL_QUARANTINE: "Appeal Quarantine",
        QUARANTINE_MODE_DM_BAR_SUBTEXT:
          "You can't start new direct messages. [Learn more about account quarantine]({helpdeskArticle}).",
        LIMITED_ACCESS_NAG_BAR_NOTICE:
          "Hey, something looks off with your account so we limited your access, but sometimes we make mistakes.",
        LIMITED_ACCESS_NAG_BAR_APPEAL: "Regain access here",
        LIMITED_ACCESS_INFO_MODAL_HEADING: "Your account has limited access",
        LIMITED_ACCESS_INFO_MODAL_DESCRIPTION:
          "We noticed that something looks off with your account, and to be safe we limited your account access.",
        LIMITED_ACCESS_INFO_MODAL_DESCRIPTION_V2:
          "Discord has limited your access to some features. Please check for system messages from Discord with more information.",
        LIMITED_ACCESS_INFO_MODAL_APPEAL:
          "Did we make a mistake? [Regain access here]({appealLink}).",
        LIMITED_ACCESS_DM_BAR_SUBTEXT:
          "You can't start new direct messages right now. [Did we make a mistake? Regain access here]({appealLink}).",
        GUILD_LIMITED_ACCESS_INFO_MODAL_HEADING:
          "This server's features are limited",
        GUILD_LIMITED_ACCESS_INFO_MODAL_DESCRIPTION:
          "{guildName} has temporarily lost access to some Discord features because it broke Discord's rules for servers. Please see the [Help Center]({helpdeskArticle}) for more information.",
        GUILD_LIMITED_ACCESS_INFO_MODAL_DESCRIPTION_FALLBACK:
          "This server has temporarily lost access to some Discord features because it broke Discord's rules for servers. Please see the [Help Center]({helpdeskArticle}) for more information.",
        MAXIMUM_LENGTH: "Maximum {maxLength} characters.",
        MAXIMUM_LENGTH_ERROR:
          "Must be {maxLength} characters or fewer in length.",
        MINIMUM_LENGTH: "Minimum {minLength} characters.",
        MINIMUM_LENGTH_ERROR:
          "Must be {minLength} characters or more in length.",
        CHARACTER_COUNT: "Character count",
        CHARACTER_COUNT_A11Y_LABEL:
          "Character count, {remainingCharacters, plural, =0 {0 characters} one {1 character} other {{remainingCharacters} characters}} remaining",
        TITLE_BAR_CLOSE_WINDOW: "Close",
        TITLE_BAR_MINIMIZE_WINDOW: "Minimize",
        TITLE_BAR_MAXIMIZE_WINDOW: "Maximize",
        TITLE_BAR_FULLSCREEN_WINDOW: "Full screen",
        CHAT: "Chat",
        CHANNEL_CHAT_HEADING: "{channelName} chat",
        QUICK_SWITCHER: "Quick switcher",
        QUICK_SWITCHER_RESULTS_CHANNEL_LABEL:
          "!!{name}!!, !!{type}!!, !!{guild}!!",
        QUICK_SWITCHER_RESULTS_LABEL: "Results",
        QUICK_SWITCHER_RESULTS_GROUP_DM_LABEL: "!!{name}!!, Group Message",
        QUICK_SWITCHER_RESULTS_GROUP_DM_UNREAD_LABEL:
          "!!{name}!!, Group Message {mentions, plural, =0 {} =1 {, # unread message} other {, # unread messages}}",
        QUICK_SWITCHER_RESULTS_USER_LABEL: "!!{name}!!, User, !!{id}!!",
        QUICK_SWITCHER_RESULTS_USER_UNREAD_LABEL:
          "!!{name}!!, User, !!{id}!! {mentions, plural, =0 {} =1 {, # unread message} other {, # unread messages}}",
        QUICK_SWITCHER_RESULTS_GUILD_LABEL: "!!{name}!!, Server",
        LISTEN_ON_SPOTIFY: "Listen on spotify",
        TOGGLE_DEAFEN: "Toggle deafen",
        TOGGLE_MUTE: "Toggle mute",
        TOGGLE_EMOJI_KEYBOARD: "Toggle emoji keyboard",
        REMOVE_ITEM_FROM_LIST_A11Y_LABEL: "!!{text}!!, remove",
        ITEM_REMOVED_FROM_LIST_A11Y_LABEL: "!!{text}!!, removed",
        ITEM_SELECTED_FROM_LIST_A11Y_LABEL: "!!{text}!!, selected",
        TWITTER: "Twitter",
        FACEBOOK: "Facebook",
        INSTAGRAM: "Instagram",
        VIEW_SPECTATORS: "View spectators",
        OPEN: "Open",
        SELECT_PICTURE: "Select picture",
        TAB_BAR: "Tab bar",
        TAB_A11Y_ROLE_DESCRIPTION: "Tab, {position} of {tabCount}",
        TOGGLE_MEDIA_KEYBOARD: "Toggle media keyboard",
        TOGGLE_MEDIA_KEYBOARD_HINT:
          "Open to add an image to your message, use a command, or start a thread",
        A11Y_MOBILE_HEADER_BUTTON_HINT: "double-tap for more options",
        A11Y_MOBILE_BUTTON_HINT: "double-tap to activate",
        A11Y_ROLE_CHECKBOX: "checkbox",
        A11Y_ROLE_SWITCH: "switch",
        A11Y_ROLE_RADIO_BUTTON: "radio button",
        A11Y_ROLE_VIDEO_BUTTON: "video, button",
        A11Y_ROLE_IMAGE_BUTTON: "image, button",
        A11Y_LOADING_STARTED: "Loading",
        A11Y_LOADING_FINISHED: "Loading finished",
        A11Y_CHECKBOX_CHECKED: "checked",
        A11Y_CHECKBOX_UNCHECKED: "unchecked",
        DND_ITEM_PICKED_UP: "Picked up !!{itemName}!!",
        DND_ITEM_DROPPED: "Dropped item",
        DND_DRAG_CANCELED: "Stopped dragging",
        DND_DROP_COMBINE: "Combine with !!{itemName}!!",
        DND_DROP_ABOVE: "Above !!{itemName}!!",
        DND_END_OF_LIST: "end of list",
        DND_OPERATION_LABEL_START: "Start Drag and Drop",
        DND_OPERATION_LABEL_MOVE: "Move",
        DND_OPERATION_LABEL_CANCEL: "Cancel",
        DND_OPERATION_LABEL_DROP: "Drop item",
        DND_MOVE_UP: "Move item up in list",
        DND_MOVE_DOWN: "Move item down in list",
        DND_MOBILE_ITEM_HINT: "double-tap and hold to drag",
        DND_MOBILE_DROP_ADD_TO_FOLDER: "Add to folder, !!{folderName}!!",
        DND_MOBILE_DROP_COMBINE_TO_NEW_FOLDER: "Combine and create new folder",
        A11Y_ANNOUNCEMENT_GENERIC_FAIL: "update failed",
        A11Y_ANNOUNCEMENT_FRIEND_CANCEL_REQUEST: "friend request dismissed",
        A11Y_ANNOUNCEMENT_FRIEND_ACCEPT_REQUEST: "friend request accepted",
        A11Y_ANNOUNCEMENT_FRIEND_REMOVED: "friend removed",
        A11Y_ANNOUNCEMENT_USER_UNBLOCKED: "user unblocked",
        A11Y_ANNOUNCEMENT_DM_CLOSED: "direct message closed",
        A11Y_ANNOUNCEMENT_DM_CLOSED_FAILED: "failed to close direct message",
        A11Y_ANNOUNCEMENT_USER_ADDED_TO_GROUP_DM: "user added to the group",
        A11Y_ANNOUNCEMENT_USER_ADDED_TO_GROUP_DM_FAILED:
          "failed to add user to the group",
        A11Y_ANNOUNCEMENT_MESSAGE_DELETED: "message deleted",
        A11Y_ANNOUNCEMENT_MESSAGE_EDITED: "message edited",
        A11Y_ANNOUNCEMENT_MESSAGE_EDITED_FAILED: "failed to update message",
        A11Y_ANNOUNCEMENT_MESSAGE_EDITED_AUTOMOD_BLOCKED:
          "edit blocked by automod",
        A11Y_ANNOUNCEMENT_STATUS_CHANGED: "Status updated to {statusLabel}",
        A11Y_ANNOUNCEMENT_CUSTOM_STATUS_CHANGED: "Custom status updated",
        A11Y_ANNOUNCEMENT_AVATAR_NONE: "No avatar set",
        A11Y_ANNOUNCEMENT_AVATAR_CHANGED: "Your avatar has been updated",
        A11Y_ANNOUNCEMENT_CHANNEL_CREATED: "Channel !!{name}!!, created",
        A11Y_ANNOUNCEMENT_CHANNEL_CREATED_FAILED: "failed to create channel",
        A11Y_ANNOUNCEMENT_CHANNEL_SETTINGS_UPDATED: "channel settings updated",
        A11Y_ANDROID_POPUP_WINDOW_ANNOUNCEMENT: "Popup Window",
        A11Y_IOS_DISMISS_CONTEXT_MENU_LABEL: "Dismiss context menu",
        A11Y_ANDROID_DISMISS_CONTEXT_MENU_LABEL: "Dismiss popup window",
        A11Y_DISMISS_ALERT_MODAL: "Dismiss alert",
        A11Y_NAVIGATE_TO_SETTINGS: "Navigate to settings",
        FORM_LABEL_AVATAR_SIZE: "Avatar Size",
        AVATAR_SIZE_OPTION_SMALL: "Small",
        AVATAR_SIZE_OPTION_LARGE: "Large",
        FORM_LABEL_DISPLAY_NAMES: "Display Names",
        FORM_LABEL_DISPLAY_USERS: "Display Users",
        DISPLAY_OPTION_ALWAYS: "Always",
        DISPLAY_OPTION_NEVER: "Never",
        DISPLAY_OPTION_ONLY_WHILE_SPEAKING: "Only While Speaking",
        FORM_LABEL_AUTOMATIC_VAD_MOBILE: "Auto Sensitivity",
        RESET_NOTIFICATION_SETTINGS: "Reset Notification Settings",
        RESET_NOTIFICATION_OVERRIDE: "Reset Override",
        CHANNEL_SETTINGS: "Channel Settings",
        SEND_MESSAGE: "Send Message",
        OVERLAY_NOTIFICATIONS_SETTINGS: "Overlay Notifications",
        FORM_LABEL_NOTIFICATION_POSITION: "Notification Position",
        OVERLAY_NOTIFICATION_SETTINGS_DISABLED: "Notifications Disabled",
        OVERLAY_NOTIFICATION_SETTINGS_POSITION: "Displaying: !!{position}!!",
        FORM_LABEL_OVERLAY_TEXT_CHAT_NOTIFICATIONS:
          "Show text chat notifications",
        FORM_LABEL_OVERLAY_CHAT_OPACITY: "Opacity",
        ONE_USER_TYPING: "**!!{a}!!** is typing...",
        TWO_USERS_TYPING: "**!!{a}!!** and **!!{b}!!** are typing...",
        THREE_USERS_TYPING:
          "**!!{a}!!**, **!!{b}!!**, and **!!{c}!!** are typing...",
        SEVERAL_USERS_TYPING: "Several people are typing...",
        CHANNEL_SLOWMODE_DESC:
          "Slowmode is enabled. Members can send one message every {seconds, plural, =1 {1 second} other {{seconds} seconds}}.",
        CHANNEL_SLOWMODE_DESC_MINUTES:
          "Slowmode is enabled. Members can send one message every {minutes, plural, =1 {1 minute} other {{minutes} minutes}} {seconds, plural, =0 {} =1 {1 second} other {{seconds} seconds}}",
        CHANNEL_SLOWMODE_DESC_HOURS:
          "Slowmode is enabled. Members can send one message every {hours, plural, =1 {1 hour} other {{hours} hours}} {minutes, plural, =0 {} =1 {1 minute} other {{minutes} minutes}} {seconds, plural, =0 {} =1 {1 second} other {{seconds} seconds}}",
        CHANNEL_SLOWMODE_DESC_IMMUNE:
          "Slowmode is enabled, but you are immune. Amazing!",
        CHANNEL_SLOWMODE_DESC_SHORT: "Slowmode is enabled.",
        CHANNEL_SLOWMODE_COOLDOWN:
          "Slowmode is enabled. You can send another message in this channel in {seconds, plural, =1 {1 second} other {{seconds} seconds}}.",
        FORUM_SLOWMODE_DESC:
          "Slowmode is enabled. Members can create one post every {seconds, plural, =1 {1 second} other {{seconds} seconds}}.",
        FORUM_SLOWMODE_DESC_MINUTES:
          "Slowmode is enabled. Members can create one post every {minutes, plural, =1 {1 minute} other {{minutes} minutes}} {seconds, plural, =0 {} =1 {1 second} other {{seconds} seconds}}",
        FORUM_SLOWMODE_DESC_HOURS:
          "Slowmode is enabled. Members can create one post every {hours, plural, =1 {1 hour} other {{hours} hours}} {minutes, plural, =0 {} =1 {1 minute} other {{minutes} minutes}} {seconds, plural, =0 {} =1 {1 second} other {{seconds} seconds}}",
        PERMISSION_OVERRIDE_DENY: "Deny",
        PERMISSION_OVERRIDE_PASSTHROUGH: "Passthrough",
        PERMISSION_OVERRIDE_ALLOW: "Allow",
        VOICE_CHANNEL_HIDE_NAMES: "Hide Names",
        VOICE_CHANNEL_SHOW_NAMES: "Show Names",
        COPY: "Copy",
        COPIED: "Copied",
        COPY_ID: "Copy ID",
        COPY_ID_APPLICATION: "Copy Application ID",
        COPY_ID_AUTOMOD_RULE: "Copy AutoMod Rule ID",
        COPY_ID_CHANNEL: "Copy Channel ID",
        COPY_ID_COMMAND: "Copy Command ID",
        COPY_ID_EMOJI: "Copy Emoji ID",
        COPY_ID_EVENT: "Copy Event ID",
        COPY_ID_GUILD: "Copy Server ID",
        COPY_ID_MESSAGE: "Copy Message ID",
        COPY_ID_ROLE: "Copy Role ID",
        COPY_ID_THREAD: "Copy Thread ID",
        COPY_ID_UNKNOWN: "Copy ID",
        COPY_ID_USER: "Copy User ID",
        COPY_ID_AUTHOR: "Copy Author ID",
        CUT: "Cut",
        PASTE: "Paste",
        COPY_IMAGE_MENU_ITEM: "Copy Image",
        SAVE_IMAGE_MENU_ITEM: "Save Image",
        LINK_OPTIONS: "Link Options",
        COPY_LINK: "Copy Link",
        COPIED_LINK: "Link Copied!",
        COPY_MESSAGE_LINK: "Copy Message Link",
        OPEN_LINK: "Open Link",
        SHARE_LINK: "Share Link",
        COPY_CHANNEL_TOPIC: "Copy Topic",
        INVITE_TO_SERVER: "Invite to Server",
        INVITE_SENDING: "Sending invite",
        INVITE_SENT: "Invite Sent",
        INVITE_SENT_EXCLAMATION: "Invite sent!",
        SEARCH_WITH_GOOGLE: "Search with Google",
        JUMP_TO_CHANNEL: "Jump to Channel",
        ERROR: "Error",
        ERROR_COPYING_IMAGE: "Unable to copy image preview.",
        ERROR_SAVING_IMAGE: "Unable to save image preview.",
        DISABLE_VIDEO: "Disable Video",
        ENABLE_VIDEO: "Enable Video",
        NO_RESULTS_FOUND: "No results found",
        APPS: "Apps",
        COPY_EVENT_LINK: "Copy Event Link",
        MUTE_SOUNDBOARD: "Mute Soundboard",
        UNMUTE_SOUNDBOARD: "Unmute Soundboard",
        GENERIC_ACTIONS_MENU_LABEL: "Actions",
        APPLICATION_ACTIONS_MENU_LABEL: "Application Actions",
        CHANNEL_ACTIONS_MENU_LABEL: "Channel Actions",
        CHANNEL_MENTION_ACTIONS_MENU_LABEL: "Channel Mention Actions",
        THREAD_ACTIONS_MENU_LABEL: "Thread Actions",
        GUILD_ACTIONS_MENU_LABEL: "Server Actions",
        GUILD_ROLE_ACTIONS_MENU_LABEL: "Server Role Actions",
        IMAGE_ACTIONS_MENU_LABEL: "Image Actions",
        MESSAGE_ACTIONS_MENU_LABEL: "Message Actions",
        OVERLAY_ACTIONS_MENU_LABEL: "Overlay Actions",
        USER_MORE_ACTIONS_MENU_LABEL: "User Actions",
        RECENTS_NOTIFICATIONS_MENU_LABEL: "Notification Actions",
        TEXT_ACTIONS_MENU_LABEL: "Text Actions",
        TEXTAREA_ACTIONS_MENU_LABEL: "Text area Actions",
        USER_ACTIONS_MENU_LABEL: "User Settings Actions",
        USER_SETTINGS_ACTIONS_MENU_LABEL: "User Settings Actions",
        STREAM_ACTIONS_MENU_LABEL: "Stream Actions",
        CHANNEL_CALL_OVERFLOW_MENU_LABEL: "Channel Call Actions",
        AUDIO_DEVICE_ACTIONS: "Audio Device Actions",
        EXPRESSION_PICKER_ACTIONS_MENU_LABEL: "Expression Picker Actions",
        PROFILE_ACTIONS_MENU_LABEL: "Profile Actions",
        PROGRESS_BAR_ACTIONS_MENU_LABEL: "Progress Bar Actions",
        HOME_ACTIONS_MENU_LABEL: "Home Actions",
        ACTIVITY_SHELF_ITEM_ACTIONS_MENU_LABEL: "Activity Shelf Item Actions",
        MORE_OPTIONS: "More Options",
        SWITCH_TO_COZY_MODE: "Switch to Cozy Mode",
        SWITCH_TO_COMPACT_MODE: "Switch to Compact Mode",
        SWITCH_TO_PUSH_TO_TALK: "Switch to Push to Talk",
        SWITCH_TO_VOICE_ACTIVITY: "Switch to Voice Activity",
        MOVE_TO: "Move to",
        MOVE_TO_SUCCESS: "User has been moved to the selected channel.",
        DISCONNECT_USER_SUCCESS: "User has been disconnected from voice.",
        CHANGE: "Change",
        GUILD_VERIFICATION_TEXT_NOT_CLAIMED:
          "You must claim and verify your account before you can send messages in this server.",
        GUILD_VERIFICATION_TEXT_NOT_VERIFIED:
          "You must verify your account before you can send messages in this server.",
        GUILD_VERIFICATION_TEXT_ACCOUNT_AGE:
          "Your account must be at least {min} minutes old to send messages in this server.",
        GUILD_VERIFICATION_TEXT_MEMBER_AGE:
          "You must be a member for at least {min} minutes to send messages in this server.",
        RESEND_VERIFICATION_EMAIL: "Resend Verification Email",
        GUILD_VERIFICATION_TEXT_NOT_PHONE_VERIFIED:
          "You must verify your identity by phone before you can send messages in this server.",
        VERIFY_PHONE: "Verify Phone",
        GUILD_VERIFICATION_VOICE_HEADER: "You can't join voice channels yet!",
        GUILD_VERIFICATION_VOICE_NOT_CLAIMED:
          "You must claim and verify your account before you can speak in this server.",
        GUILD_VERIFICATION_VOICE_NOT_VERIFIED:
          "You must verify your account before you can speak in this server.",
        GUILD_VERIFICATION_VOICE_ACCOUNT_AGE:
          "Your account must be at least {min} minutes old to speak in this server.",
        GUILD_VERIFICATION_VOICE_MEMBER_AGE:
          "You must be a member for at least {min} minutes to speak in this server.",
        GUILD_VERIFICATION_VOICE_NOT_PHONE_VERIFIED:
          "You must verify your identity by phone before you can speak in this server.",
        LURKER_MODE_CHAT_INPUT_MESSAGE:
          "Join this server to add it to your list and start talking!",
        LURKER_MODE_CHAT_INPUT_MESSAGE_IOS:
          "You are in preview mode. Join this server to talk.",
        LURKER_MODE_CHAT_INPUT_BUTTON: "Join Server",
        LURKER_MODE_VIEW_GUILD: "Visit Server",
        LURKER_MODE_NAG_BAR_HEADER:
          "You are currently in preview mode. Join this server to start chatting!",
        LURKER_MODE_NAG_BAR_BUTTON: "Join {guild}",
        LURKER_MODE_POPOUT_CHAT_HEADER: "You can't talk here yet!",
        LURKER_MODE_POPOUT_REACTIONS_HEADER: "You can't react until you join!",
        LURKER_MODE_POPOUT_SUCCESS_HEADER: "You're now a member of {guild}!",
        LURKER_MODE_POPOUT_UPSELL_BODY:
          "You have to join the community first before you can interact.",
        LURKER_MODE_POPOUT_SUCCESS_BODY:
          "Hooray! It's time to talk and hang out with your fellow members.",
        LURKER_MODE_POPOUT_SUCCESS_BUTTON: "Let's go!",
        LURKER_MODE_POPOUT_JOIN: "Join this server",
        LURKER_MODE_POPOUT_CANCEL: "I'm not ready yet",
        TRANSFER: "Transfer",
        TRANSFER_OWNERSHIP: "Transfer Ownership",
        TRANSFER_OWNERSHIP_TO_USER_V2:
          "This will transfer ownership of $[](GuildHook) to **!!{user}!!**. This cannot be undone!",
        TRANSFER_OWNERSHIP_TO_USER_WITH_AKA_V2:
          "This will transfer ownership of $[](GuildHook) to **!!{user}!!**, $[](AKAHook). This cannot be undone!",
        TRANSFER_OWNERSHIP_ACKNOWLEDGE:
          "\nI acknowledge that by transferring ownership of this server to **!!{username}!!**, it officially belongs to them.\n",
        TRANSFER_OWNERSHIP_PROTECTED_GUILD:
          "Partnered or Verified servers must reach out to the Community team for ownership transfer requests.",
        TRANSFER_OWNERSHIP_PROTECTED_GUILD_PAUSED:
          "Partnered or Verified servers must reach out to the Community team for ownership transfer requests. However, our Partner and Verified Server Programs are currently paused and not able to handle any requests.",
        TRANSFER_OWNERSHIP_PROTECTED_GUILD_LINK:
          "Partnered or Verified servers must reach out to the [Community team]({ticketUrl}) for ownership transfer requests.",
        TRANSFER_OWNERSHIP_PROTECTED_GUILD_LINK_PAUSED:
          "Partnered or Verified servers must reach out to the [Community team]({ticketUrl}) for ownership transfer requests. However, our Partner and Verified Server Programs are currently paused and not able to handle any requests.",
        TRANSFER_OWNERSHIP_FAILURE_MODAL_TITLE:
          "Server ownership transfer failed",
        SERVER_SUBSCRIPTION_OWNERSHIP_TRANSFER_FAILURE_MODAL_BODY:
          "It looks like the new owner is ineligible for Server Monetization. Head to our [Support Article]({server_subscription_owner_transfer_article}) to learn more about why.",
        TRANSFER_OWNERSHIP_SERVER_SUBSCRIPTION_GUILD:
          "You are transferring a server with Server Monetization enabled. Please also read our [Support Article]({server_subscription_owner_transfer_article}).",
        USER_PROFILE_MODAL: "User Profile Modal",
        PROFILE: "Profile",
        USER_INFO: "User Info",
        MUTUAL_GUILDS: "Mutual Servers",
        MUTUAL_FRIENDS: "Mutual Friends",
        USER_PROFILE_ACTIVITY: "Activity",
        CONNECTION_VERIFIED: "Verified Connection",
        CONNECTION_VERIFIED_ON_TWITTER: "Verified on Twitter",
        NO_MUTUAL_GUILDS: "No servers in common",
        NO_MUTUAL_FRIENDS: "No friends in common",
        SHARING_SCREEN: "Sharing their screen",
        VERIFIED_BOT_TOOLTIP: "Verified Bot",
        USER_PROFILE_ABOUT_ME: "About Me",
        USER_PROFILE_LOAD_ERROR:
          "Unable to load profile banner, badges, and about me.",
        USER_PROFILE_ACTION_MENU_A11Y_LABEL: "Open User Action menu",
        USER_PROFILE_MEMBER_SINCE: "Member Since",
        USER_PROFILE_DISCORD_MEMBER_SINCE: "Discord Member Since",
        MUTUAL_FRIENDS_COUNT:
          "{count, plural, =1 {1 Mutual Friend} other {{count} Mutual Friends}}",
        MUTUAL_GUILDS_COUNT:
          "{count, plural, =1 {1 Mutual Server} other {{count} Mutual Servers}}",
        SHOW_USER_PROFILE: "Show User Profile",
        HIDE_USER_PROFILE: "Hide User Profile",
        SHOW_USER_PROFILE_UNAVAILABLE: "Show User Profile (Unavailable)",
        CLIENT_THEMES_EDITOR_HEADER: "Preview Theme",
        CLIENT_THEMES_EDITOR_GRADIENT_DESCRIPTION:
          "Change the color of your theme.\nOnly with Nitro.",
        CLIENT_THEMES_EDITOR_GRADIENT_DESCRIPTION_SETTINGS:
          "Make Discord yours. Only with Nitro.",
        CLIENT_THEMES_EDITOR_GRADIENT_DESCRIPTION_WITH_LINK:
          "Unlock more themes with [Nitro](onPremiumClick).",
        CLIENT_THEMES_EDITOR_GRADIENT_DESCRIPTION_PREVIEW_WITH_LINK:
          "Get [Nitro](onPremiumClick) and make Discord yours with unique colors.",
        CLIENT_THEMES_EDITOR_UPSELL:
          "New Theme colors! Add your vibe to Discord. [Learn more](onClick).",
        CLIENT_THEMES_EDITOR_GRADIENT_DESCRIPTION_COACHMARK:
          "Make Discord yours with unique colors. Only with Nitro.",
        CLIENT_THEMES_EDITOR_PICK_A_THEME_HEADER: "Pick a Theme",
        CLIENT_THEMES_EDITOR_PREVIEW_A_THEME_HEADER: "Preview a Theme",
        CLIENT_THEMES_EDITOR_UPSELL_HEADER:
          "NEW THEMES! Add your vibe to Discord",
        CLIENT_THEMES_EDITOR_RETURN_TO_SETTINGS: "Back to Settings",
        CLIENT_THEMES_EDITOR_EXIT_PREVIEW: "Exit Preview",
        CLIENT_THEMES_GRADIENT_SUNSET: "Sunset",
        CLIENT_THEMES_GRADIENT_CHROMA_GLOW: "Chroma Glow",
        CLIENT_THEMES_GRADIENT_FOREST: "Forest",
        CLIENT_THEMES_GRADIENT_CRIMSON_MOON: "Crimson Moon",
        CLIENT_THEMES_GRADIENT_MIDNIGHT_BLURPLE: "Midnight Blurple",
        CLIENT_THEMES_GRADIENT_MARS: "Mars",
        CLIENT_THEMES_GRADIENT_DUSK: "Dusk",
        CLIENT_THEMES_GRADIENT_UNDER_THE_SEA: "Under the Sea",
        CLIENT_THEMES_GRADIENT_RETRO_STORM: "Retro Storm",
        CLIENT_THEMES_GRADIENT_NEON_NIGHTS: "Neon Nights",
        CLIENT_THEMES_GRADIENT_SEPIA: "Sepia",
        CLIENT_THEMES_GRADIENT_STRAWBERRY_LEMONADE: "Strawberry Lemonade",
        CLIENT_THEMES_GRADIENT_AURORA: "Aurora",
        CLIENT_THEMES_GRADIENT_MINT_APPLE: "Mint Apple",
        CLIENT_THEMES_GRADIENT_CITRUS_SHERBERT: "Citrus Sherbert",
        CLIENT_THEMES_GRADIENT_RETRO_RAINCLOUD: "Retro Raincloud",
        CLIENT_THEMES_GRADIENT_HANAMI: "Hanami",
        CLIENT_THEMES_GRADIENT_SUNRISE: "Sunrise",
        CLIENT_THEMES_GRADIENT_COTTON_CANDY: "Cotton Candy",
        CLIENT_THEMES_GRADIENT_LOFI_VIBES: "LoFi Vibes",
        CLIENT_THEMES_GRADIENT_DESERT_KHAKI: "Desert Khaki",
        CLIENT_THEMES_GRADIENT_EASTER_EGG: "Memory Lane",
        BOTS_DATA_ACCESS_TAB: "Data Access",
        BOTS_DATA_ACCESS_MESSAGE_CONTENT_HEADER: "Read Messages",
        BOTS_DATA_ACCESS_MESSAGE_CONTENT_BODY:
          "Can access messages in this server and read their contents.",
        BOTS_DATA_ACCESS_GUILD_PRESENCES_HEADER: "Presence",
        BOTS_DATA_ACCESS_GUILD_PRESENCES_BODY:
          "Can see online status of server members and what they are playing, watching, or listening to.",
        BOTS_DATA_ACCESS_GUILD_MEMBERS_HEADER: "Members",
        BOTS_DATA_ACCESS_GUILD_MEMBERS_BODY:
          "Can see who's in the server and their roles, nicknames, and permission changes.",
        BOTS_DATA_ACCESS_BASELINE:
          "All bots can access a set of baseline data. Please visit the [Help Center]({helpCenterUrl}) to learn more.",
        BOT_PROFILE_SLASH_COMMANDS: "Try my commands",
        BOT_PROFILE_UPGRADE_CTA: "Upgrade",
        BOT_PROFILE_BENEFITS_HEADING: "Unlocked Premium Features",
        BOT_PROFILE_VIEW_ALL_COMMANDS_CTA: "View All Commands",
        LOADING: "Loading",
        OAUTH2_CONNECT_TO_DISCORD: "Connect to Discord",
        OAUTH2_TITLE: "Authorize access to your account",
        OAUTH2_CANNOT_READ_SEND_NOTICE:
          "This application **cannot** read your messages or send messages as you.",
        OAUTH2_CAN_READ_NOTICE:
          "This application **can** read your messages but **can not** send messages as you.",
        OAUTH2_SCOPES_LABEL:
          "This will allow the developer of !!{application}!! to:",
        OAUTH2_SCOPES_LABEL_TRUSTED_NAME:
          "This will allow !!{application}!! to:",
        OAUTH2_SCOPES_IP_LOCATION_SCOPE:
          "Developer may see your IP address while you use this application.",
        OAUTH2_REQUESTS_ACCOUNT_ACCESS: "wants to access your Discord account",
        OAUTH2_SIGNED_IN_AS: "Signed in as $[](userHook)",
        OAUTH2_THIRD_PARTY_APPLICATION: "An external application",
        OAUTH2_LOGOUT: "Not you?",
        OAUTH2_DETAILS_REDIRECT:
          "Once you authorize, you will be redirected outside of Discord to: !!{origin}!!",
        OAUTH2_DETAILS_PRIVACY_POLICY:
          "The developer of !!{application}!!'s privacy policy and terms of service apply to this application.",
        OAUTH2_DETAILS_PRIVACY_POLICY_WITH_LINKS:
          "The developer of !!{application}!!'s [privacy policy]({privacyPolicyURL}) and [terms of service]({termsOfServiceURL}) apply to this application.",
        OAUTH2_DETAILS_PRIVACY_POLICY_WITH_PRIVACY_POLICY_LINK:
          "The developer of !!{application}!!'s [privacy policy]({privacyPolicyURL}) and terms of service apply to this application.",
        OAUTH2_DETAILS_PRIVACY_POLICY_WITH_TERMS_OF_SERVICE_LINK:
          "The developer of !!{application}!!'s privacy policy and [terms of service]({termsOfServiceURL}) apply to this application.",
        OAUTH2_DETAILS_CREATION_DATE: "Active since {date, date, medium}",
        OAUTH2_DETAILS_GUILDS: "Used in {guildCount, number} servers",
        OAUTH2_ADD_WEBHOOK_INCOMING: "Add a webhook to:",
        OAUTH2_ADD_TO_GUILD: "Add to server:",
        OAUTH2_ADD_TO_GUILD_PLACEHOLDER: "Select a server",
        OAUTH2_ADD_TO_GUILD_DESCRIPTION:
          "This requires you to have **Manage Server** permission in the server.",
        OAUTH2_REQUEST_MISSING_PARAM:
          "Invalid request. Missing param **{param}**",
        OAUTH2_REQUEST_INVALID_SCOPE: "Invalid scope **{scope}**",
        OAUTH2_CONFIRM_BOT_PERMISSIONS:
          "Confirm that you want to grant **!!{applicationName}!!** the following permissions on **!!{guildName}!!**:",
        OAUTH2_DISABLED_PERMISSIONS:
          "**!!{applicationName}!!** has also asked for the following permissions, but you can't grant them:",
        OAUTH2_FAKE_SCOPE_1: "Bake a cake",
        OAUTH2_FAKE_SCOPE_2: "Buy you a nice seafood dinner",
        OAUTH2_FAKE_SCOPE_3: "Have an existential crisis",
        OAUTH2_FAKE_SCOPE_4: "Microbrew some local kombucha",
        OAUTH2_FAKE_SCOPE_5: "Solve a mystery with Scooby and the gang",
        OAUTH2_FAKE_SCOPE_6: "Record a new mixtape",
        OAUTH2_FAKE_SCOPE_7: "Paint a happy little tree",
        OAUTH2_FAKE_SCOPE_8: "Read you a bedtime story",
        OAUTH2_UNKNOWN_ERROR: "Oops, something went wrong...",
        SCOPE_IDENTIFY: "Access your username, avatar, and banner",
        SCOPE_EMAIL: "Access your email address",
        SCOPE_CONNECTIONS: "Access your third-party connections",
        SCOPE_GUILDS: "Know what servers you're in",
        SCOPE_GUILDS_JOIN: "Join servers for you",
        SCOPE_GUILDS_MEMBERS_READ:
          "Read your member info (nickname, avatar, roles, etc...) for servers you belong to",
        SCOPE_GUILDS_MEMBERS_READ_VOICE:
          "Read member info (nickname, avatar, roles, etc...) for servers you belong to",
        SCOPE_GDM_JOIN: "Join group DMs for you",
        SCOPE_BOT: "Add a bot to a server",
        SCOPE_RPC: "Interface with your Discord client",
        SCOPE_RPC_NOTIFICATIONS_READ:
          "Listen to notifications over your Discord client",
        SCOPE_RPC_VOICE_WRITE: "Alter your voice settings and use soundboard",
        SCOPE_RPC_VOICE_READ:
          "Read your voice settings and listen for voice events",
        SCOPE_RPC_VIDEO_READ: "Read your video state",
        SCOPE_RPC_VIDEO_WRITE: "Alter your video settings and start video",
        SCOPE_RPC_SCREENSHARE_READ: "Read your screenshare state",
        SCOPE_RPC_SCREENSHARE_WRITE:
          "Alter your screenshare settings and start screenshare",
        SCOPE_RPC_ACTIVITIES_WRITE: "Set your current activity",
        SCOPE_VOICE:
          "Connect to voice on your behalf and see others who are in any voice channel or call",
        SCOPE_DM_CHANNELS_READ:
          "See information about the DMs and GDMs you are in",
        SCOPE_ROLE_CONNECTIONS_WRITE:
          "Update your connection and metadata for this application",
        SCOPE_WEBHOOK_INCOMING: "Adds a webhook to a channel",
        SCOPE_WEBHOOK_INCOMING_DESCRIPTION:
          "This allows the app to send messages to a channel on Discord.",
        SCOPE_WEBHOOK_INCOMING_CHANNEL_PLACEHOLDER: "Select a channel",
        SCOPE_MESSAGES_READ: "Read all messages",
        SCOPE_APPLICATIONS_BUILDS_UPLOAD: "Upload and manage builds",
        SCOPE_APPLICATIONS_BUILDS_READ: "Read build information",
        SCOPE_APPLICATIONS_COMMANDS: "Create commands",
        SCOPE_APPLICATIONS_COMMANDS_UPDATE: "Update commands",
        SCOPE_APPLICATIONS_COMMANDS_PERMISSIONS_UPDATE:
          "Manage access to its commands in a server",
        SCOPE_APPLICATIONS_STORE_UPDATE:
          "Manage store SKUs, listings, and assets",
        SCOPE_APPLICATIONS_ENTITLEMENTS: "Manage entitlements",
        SCOPE_ACTIVITIES_READ: "Access your Active Now activities",
        SCOPE_ACTIVITIES_WRITE: "Update your current activity",
        SCOPE_RELATIONSHIPS_READ: "See who your friends are",
        AUTHORIZE: "Authorize",
        AUTHORIZED: "Authorized",
        AUTHORIZED_SUCCESS: "Success!",
        AUTHORIZED_APP_TO_SERVER:
          "**!!{installedApplicationName}!!** has been authorized and added to **!!{guildName}!!**.",
        AUTHORIZED_APP:
          "**!!{installedApplicationName}!!** has been authorized and added.",
        AUTHORIZED_GENERIC:
          "This application has been authorized and added to the server.",
        OAUTH2_MESSAGE_CTA: "You may now close this window or tab.",
        WHITELISTED: "Whitelisted",
        WHITELISTING: "Whitelisting...",
        WHITELIST_FAILED: "Whitelist Failed",
        SCOPE_UNSUPPORTED_ON_ANDROID: "Not supported within Android app",
        SCOPE_UNSUPPORTED_ON_ANDROID_DESCRIPTION:
          "This OAuth2 scope is not supported within the app yet.\nGood news though, it does work on your mobile web browser! So please open it there.",
        OAUTH2_GO_TO_SERVER_NAME_CTA: "Go to **!!{guildName}!!**",
        OAUTH2_GO_TO_SERVER_DEFAULT_CTA: "Go to Server",
        SETTINGS_TWO_FA: "Multi-Factor Authentication",
        TWO_FA: "Authenticator App",
        TWO_FA_DESCRIPTION:
          "Configuring an authenticator app is a good way to add an extra layer of security to your Discord account to make sure that only you have the ability to log in.",
        TWO_FA_KEY: "2FA Key (Manual entry)",
        TWO_FA_ACTIVATE: "Activate",
        TWO_FA_REMOVE: "Remove Authenticator App",
        TWO_FA_GENERATE_CODES: "Generate New Backup Codes",
        TWO_FA_VIEW_CODES: "View Codes",
        TWO_FA_VIEW_CODES_SUBMIT: "Submit",
        TWO_FA_VIEW_BACKUP_CODES: "View Backup Codes",
        TWO_FA_VIEW_BACKUP_CODES_ENTER_PASSWORD: "Enter Your Password",
        TWO_FA_BACKUP_CODE_USED: "used",
        TWO_FA_GENERATE_CODES_CONFIRM_TEXT:
          "Generating new backup codes will invalidate any old backup codes you have saved.",
        TWO_FA_DOWNLOAD_CODES: "Download Backup Codes",
        TWO_FA_BACKUP_CODES_NEXT_ACTION: "Next",
        TWO_FA_CONFIRM_VIEW_BACKUP_CODES_LABEL: "Enter Verification Key",
        TWO_FA_CONFIRM_VIEW_BACKUP_CODES_INPUT_LABEL: "Verification key",
        TWO_FA_CONFIRM_VIEW_RESEND_EMAIL_PROMPT:
          "Don't see an email? Resend it.",
        TWO_FA_CONFIRM_VIEW_RESEND_EMAIL_SUCCESS:
          "Verification email resent, please check your email.",
        TWO_FA_CONFIRM_VIEW_BACKUP_CODES_BODY:
          "As an added security measure, please enter the key we just sent to your email address. You should see it in a minute or two.",
        TWO_FA_BACKUP_CODES_LABEL: "Backup Codes",
        TWO_FA_BACKUP_CODES_BODY:
          "These codes will allow you to enter your account if you lose your auth app, protect them like you would protect your password. Do not share them with anyone and keep them somewhere safe. \n\n**Each code can only be used once! Any previously generated codes no longer work!**",
        TWO_FA_BACKUP_CODES_WARNING:
          "Without your backup codes, you are at risk of **losing your account permanently** if you lose access to your authenticator! Save these somewhere safe on and off your device to reduce the risk of losing your account!",
        TWO_FA_BACKUP_CODES_WEBAUTHN_WARNING:
          "Without your backup codes, you are at risk of **losing your account permanently** if you lose access to your authenticator! Save these somewhere safe on and off your device to reduce the risk of losing your account!",
        TWO_FA_BACKUP_CODE_ENTER: "Enter the 8-character Backup code.",
        TWO_FA_BACKUP_CODE_ENTER_WRONG:
          "Backup codes need to be 8 characters long and can contain only numbers and letters.",
        TWO_FA_BACKUP_CODE_HINT: "8-character backup code",
        TWO_FA_ENABLE: "Enable Authenticator App",
        TWO_FA_ENABLE_SUBHEADER: "Make your account safer in 3 easy steps:",
        TWO_FA_DISABLE: "Disable Authenticator App",
        TWO_FA_ENABLED: "Multi-Factor Authentication enabled",
        TWO_FA_SALES_PITCH:
          "Protect your Discord account with an extra layer of security. Once configured, you'll be required\nto enter your password and complete one additional step in order to sign in.",
        TWO_FA_DOWNLOAD_APP_LABEL: "Download an authenticator app",
        TWO_FA_DOWNLOAD_APP_BODY:
          "Download and install [Authy]({authyURL}) or [Google Authenticator]({googleAuthURL}) for your phone or tablet.",
        TWO_FA_QR_LABEL: "Scan the QR code",
        TWO_FA_QR_BODY:
          "Open the authentication app and scan the image to the left using your phone's camera.",
        TWO_FA_LOGIN_LABEL: "Login with your code",
        _TWO_FA_LOGIN_LABEL: "Log in with your code",
        TWO_FA_LOGIN_BODY: "Enter the 6-digit verification code generated.",
        TWO_FA_LOGIN_FOOTER: "Go back to Login",
        _TWO_FA_LOGIN_FOOTER: "Go Back to Login",
        TWO_FA_BACKUP_CODE: "8-digit backup code",
        TWO_FA_AUTH_CODE: "6-digit authentication code/8-digit backup code",
        TWO_FA_AUTH_CODE_NO_BACKUP: "6-digit authentication code",
        TWO_FA_USE_DESKTOP_APP:
          "Authenticator app setup is not supported on this browser. Please use the Desktop app to setup an authenticator app.",
        TWO_FA_NOT_VERIFIED:
          "You must verify your account before you can enable two-factor authentication.",
        TWO_FA_TOKEN_REQUIRED: "A valid Discord Auth Code is required.",
        TWO_FA_ENTER_TOKEN_LABEL: "Enter Discord Auth/Backup Code",
        TWO_FA_ENTER_BACKUP_LABEL: "Enter Discord Backup Code",
        TWO_FA_ENTER_TOKEN_NO_BACKUP_LABEL: "Enter Discord Auth Code",
        TWO_FA_EDIT_DIGIT_A11Y_LABEL: "Edit code digit {index}, value: {value}",
        TWO_FA_ENTER_SMS_TOKEN_LABEL: "Enter Discord SMS Code",
        TWO_FA_ENTER_TOKEN_BODY:
          "You can use a backup code or your two-factor authentication mobile app.",
        TWO_FA_ENTER_SMS_TOKEN_SENDING: "Sending...",
        TWO_FA_ENTER_SMS_TOKEN_SENT:
          "We've sent a message to !!{phoneNumber}!!.  Please enter the code you received.",
        TWO_FA_GUILD_MFA_WARNING:
          "This server requires members with moderation powers to have Multi-Factor Authentication. You cannot take any moderation actions until you enable it. [Resolve](onClick)",
        TWO_FA_GUILD_MFA_WARNING_MESSAGE:
          "This server requires members with moderation powers to have Multi-Factor Authentication. You cannot take any moderation actions until you enable it.",
        TWO_FA_GUILD_MFA_WARNING_MESSAGE_WITH_SPACING:
          "This server requires members with moderation powers to have Multi-Factor Authentication.\n\nYou cannot take any moderation actions until you enable it.",
        TWO_FA_GUILD_MFA_WARNING_RESOLVE_BUTTON: "Resolve",
        TWO_FA_GUILD_MFA_WARNING_IOS:
          "This server requires members with moderation powers to have Multi-Factor Authentication. You cannot take any moderation actions until you enable it.",
        TWO_FA_DISCORD_BACKUP_CODES:
          "These are your Discord backup codes for account !!{email}!!.  Keep them safe!",
        TWO_FA_CHANGE_ACCOUNT: "Change account details",
        TWO_FA_SUCCESS_HEADER: "2FA is activated! :tada:",
        TWO_FA_SUCCESS_HEADER_MOBILE: "2FA is activated! \uD83C\uDF89",
        TWO_FA_APP_NAME_AUTHY: "Authy",
        TWO_FA_APP_NAME_GOOGLE_AUTHENTICATOR: "Google Authenticator",
        TWO_FA_CONFIRM_TITLE: "Continue without Backup",
        TWO_FA_CONFIRM_BODY:
          "Are you sure you don't want to enable SMS authentication or download your backup codes? Without them, you are at risk of losing your account permanently if you lose access to your authenticator app!",
        TWO_FA_CONFIRM_WEBAUTHN_BODY:
          "Are you sure you don't want to download your backup codes? Without them, you are at risk of losing your account permanently if you lose access to your authenticator!",
        TWO_FA_CONFIRM_CONFIRM: "I'm sure",
        TWO_FA_UNKNOWN_ERROR: "Oh no, an error has occurred.",
        TWO_FA_WEBAUTHN_BODY:
          "When you are ready to authenticate, press the button below.",
        TWO_FA_WEBAUTHN_ACTION: "Use security key",
        TWO_FA_WEBAUTHN_SWITCH_TOTP: "Enter a 2FA code instead",
        TWO_FA_WEBAUTHN_TITLE: "Security Keys",
        TWO_FA_WEBAUTHN_VIEW_KEYS_TITLE: "Your Keys",
        TWO_FA_WEBAUTHN_REGISTER_KEY_PLACEHOLDER_NAME: "My Key",
        TWO_FA_WEBAUTHN_DESCRIPTION:
          "Add an additional layer of protection to your account with a Security Key.",
        TWO_FA_WEBAUTHN_REGISTER: "Register a Security Key",
        TWO_FA_WEBAUTHN_INTERACT: "Interact with your security key",
        TWO_FA_WEBAUTHN_NAME: "Name your security key",
        TWO_FA_WEBAUTHN_RENAME: "Rename your security key",
        TWO_FA_WEBAUTHN_REGISTER_INSTRUCTIONS:
          "When you are ready to authenticate, press the button below.",
        TWO_FA_WEBAUTHN_REGISTER_CONFIRM: "Let's go",
        TWO_FA_WEBAUTHN_INTERACT_INSTRUCTIONS:
          "You may need to tap your device or confirm a prompt.",
        TWO_FA_WEBAUTHN_NAME_INSTRUCTIONS:
          "What do you want to call this thing?",
        TWO_FA_WEBAUTHN_REGISTER_FINISH: "Finish",
        TWO_FA_WEBAUTHN_CREDENTIAL_OPTIONS: "Options",
        TWO_FA_WEBAUTHN_DELETE_CREDENTIAL: "Delete",
        TWO_FA_WEBAUTHN_RENAME_CREDENTIAL: "Rename",
        TWO_FA_DISABLED_FOR_SERVER_SUBSCRIPTION_MOD:
          "Disabled for owner/admin of servers that have published server subscription tiers",
        TWO_FA_DISABLED_FOR_STAFF: "Disabled for Staff",
        TWO_FA_WEBAUTHN_RENAME_FORM_NEW_KEY: "New Key Name",
        TWO_FA_WEBAUTHN_SHOULD_DO: "Here is something you **should do**!",
        MFA_SMS_AUTH: "SMS Backup Authentication",
        MFA_SMS_AUTH_SALES_PITCH:
          "Add your phone as a backup MFA method in case you lose access to your authenticator app or backup codes.",
        MFA_SMS_AUTH_CURRENT_PHONE:
          "Your current phone number is: !!{phoneNumber}!!.",
        MFA_SMS_PHONE_NUMBER_REVEAL: "Reveal",
        MFA_SMS_PHONE_NUMBER_HIDE: "Hide",
        MFA_SMS_ENABLE: "Enable SMS Authentication",
        MFA_SMS_ADD_PHONE: "Add Phone Number",
        MFA_SMS_ALREADY_ENABLED: "Already Enabled!",
        MFA_SMS_DISABLED_PARTNER: "Disabled for Partners",
        MFA_SMS_DISABLED_NO_EMAIL: "Email Required",
        MFA_SMS_ENABLE_SHOULD_DO:
          "Now here are a few things you **should do**!",
        MFA_SMS_REMOVE: "Remove SMS Authentication",
        MFA_SMS_CONFIRM_REMOVE_BODY:
          "This removes the ability to login with an authentication code through SMS. Are you sure you want to remove this?",
        _MFA_SMS_CONFIRM_REMOVE_BODY:
          "This removes the ability to log in with an authentication code through SMS. Are you sure you want to remove this?",
        MFA_SMS_CONFIRM_REMOVE_ACTION: "Remove SMS Backup",
        MFA_SMS_RECEIVE_CODE: "Receive auth code from SMS",
        MFA_SMS_RESEND: "Resend SMS?",
        MFA_V2_DESCRIPTION:
          "Before you continue, we need to verify it’s really you.",
        MFA_V2_HEADER: "Multi-Factor Authentication",
        MFA_V2_SELECT_HEADER: "This extra step shows it's really you.",
        MFA_V2_WEBAUTHN_CTA: "Authenticate with security key",
        MFA_V2_CHOOSE: "Choose how to verify",
        MFA_V2_CHOOSE_DESCRIPTION:
          "Select an option to verify it's really you.",
        MFA_V2_GO_TO_SELECT: "Verify with something else",
        MFA_V2_INVALID_CODE: "Invalid two-factor code",
        MFA_V2_INVALID_WEBAUTHN: "Failed to authenticate your security key",
        MFA_V2_INVALID_PASSWORD: "Invalid password",
        MFA_V2_WEBAUTHN_NAME: "Use a security key",
        MFA_V2_TOTP_NAME: "Use your authenticator app",
        MFA_V2_SMS_NAME: "Use a code sent to your phone",
        MFA_V2_PASSWORD_NAME: "Use your password",
        MFA_V2_BACKUP_NAME: "Use a backup code",
        MFA_V2_CANCELED: "Multi-factor authentication cancelled",
        MFA_V2_BACKUP: "Verify with a backup code",
        MFA_V2_TOTP: "Verify with your authenticator app",
        MFA_V2_PASSWORD: "Verify with a password",
        MFA_V2_SMS_RESEND: "Resend Code",
        MFA_V2_WEBAUTHN_GENERIC_ERROR: "An error occurred. Please try again.",
        ACCOUNT_MANAGEMENT: "Account Management",
        DELETE_ACCOUNT: "Delete Account",
        DISABLE_ACCOUNT: "Disable Account",
        DELETE_ACCOUNT_BODY:
          "Are you sure that you want to delete your account? This will immediately log you out of your account and you will not be able to log in again.",
        DISABLE_ACCOUNT_BODY:
          "Are you sure that you want to disable your account? This will immediately log you out and make your account inaccessible to anyone.",
        DELETE_ACCOUNT_TRANSFER_OWNERSHIP: "You Own Servers!",
        DELETE_ACCOUNT_TRANSFER_OWNERSHIP_BODY:
          "In order to delete or disable your account you must first transfer ownership of all servers that you own.",
        DELETE_ACCOUNT_ERROR: "Error Deleting Your Account",
        PRIVACY_AND_SAFETY: "Privacy & Safety",
        FRIENDS: "Friends",
        PEOPLE: "People",
        REMOVE_FRIEND_TITLE: "Remove '!!{name}!!'",
        REMOVE_FRIEND_BODY:
          "Are you sure you want to permanently remove **!!{name}!!** from your friends?",
        REDESIGN_CLEAR_INCOMING_REQUESTS_TITLE: "Are you sure?",
        REDESIGN_CLEAR_INCOMING_REQUESTS_BODY:
          "This will clear {incomingRequestCount, plural, =1 {{incomingRequestCount} incoming friend request} other {{incomingRequestCount} incoming friend requests}}. The {incomingRequestCount, plural, =1 {user} other {{incomingRequestCount} users}} who sent them won't be informed.",
        CLEAR_INCOMING_REQUESTS_CONFIRMATION_TITLE:
          "Clear Incoming Friend Requests",
        CLEAR_INCOMING_REQUESTS_CONFIRMATION_BODY:
          "This will clear {incomingRequestCount, plural, =1 {{incomingRequestCount} friend request} other {{incomingRequestCount} friend requests}} from the pending list. The {incomingRequestCount, plural, =1 {user} other {{incomingRequestCount} users}} will not be notified.",
        CLEAR_INCOMING_REQUESTS_CONFIRMATION_CTA: "Clear All",
        CLEAR_INCOMING_REQUESTS_CONFIRMATION_ERROR:
          "There was an error clearing your incoming friend requests. Please try again later.",
        CLEAR_INCOMING_REQUESTS_BUTTON: "Clear Incoming",
        ADD_FRIEND: "Add Friend",
        ADD_FRIENDS: "Add Friends",
        ADD_MORE_FRIENDS: "Add more friends",
        INVITE_MORE_FRIENDS: "Invite more friends",
        ADD_A_FRIEND: "Add a Friend",
        REMOVE_FRIEND: "Remove Friend",
        YOUR_FRIENDS: "Your Friends",
        BLOCKED: "Blocked",
        INCOMING_FRIEND_REQUEST: "Incoming Friend Request",
        INCOMING_FRIEND_REQUESTS: "Incoming Friend Requests",
        INCOMING_FRIEND_REQUEST_FROM: "Incoming Friend Request from !!{name}!!",
        INCOMING_FRIEND_REQUESTS_COUNT: "{count} incoming friend requests",
        OUTGOING_FRIEND_REQUEST: "Outgoing Friend Request",
        CANCEL_FRIEND_REQUEST: "Cancel Friend Request",
        OUTGOING_FRIEND_REQUEST_DELETE_MSG:
          "Are you sure you want to delete your friend request to **!!{name}!!**?",
        FRIEND_REQUESTS_COMBINED_COUNT:
          "{incoming, number} received  •  {outgoing, number} sent",
        INCOMING_FRIEND_REQUEST_ACCEPTED_SUBLABEL: "is now your friend!",
        BLOCK: "Block",
        CONFIRM_USER_BLOCK_TITLE: "Block !!{name}!!?",
        CONFIRM_USER_BLOCK_BODY:
          "Are you sure you want to block **!!{name}!!**? Blocking this user will also remove them from your friends list.",
        UNBLOCK: "Unblock",
        MORE: "More",
        TRUNCATION_MORE: "...more",
        SEND_DM: "Message",
        FRIEND_REQUEST_RECEIVED: "Sent you a friend request:",
        FRIEND_REQUEST_ACCEPT: "Accept",
        FRIEND_REQUEST_IGNORE: "Ignore",
        FRIEND_REQUEST_CANCEL: "Cancel",
        FRIEND_REQUESTS_TAB_RECIEVED: "Received",
        FRIEND_REQUESTS_TAB_SENT: "Sent",
        FRIENDS_SECTION_ADD_FRIEND: "Add Friend",
        FRIENDS_SECTION_ALL: "All",
        FRIENDS_SECTION_ONLINE: "Online",
        FRIENDS_SECTION_PENDING: "Pending",
        FRIENDS_SECTION_SUGGESTIONS: "Suggestions",
        FRIENDS_COLUMN_NAME: "Name",
        FRIENDS_EMPTY_STATE_ALL:
          "Wumpus is waiting on friends. You don’t have to though!",
        FRIENDS_EMPTY_STATE_ONLINE: "No one's around to play with Wumpus.",
        FRIENDS_EMPTY_STATE_PENDING:
          "There are no pending friend requests. Here's Wumpus for now.",
        FRIENDS_EMPTY_STATE_OUTGOING:
          "You haven't sent any new friend requests. Here's Wumpus for now.",
        FRIENDS_EMPTY_STATE_SUGGESTIONS:
          "There are no pending friend suggestions. Here's Wumpus for now.",
        FRIENDS_EMPTY_STATE_BLOCKED: "You can't unblock the Wumpus.",
        FRIENDS_PENDING_REQUEST_HEADER:
          "Pending Requests — {pendingRequestNumber}",
        FRIENDS_EMPTY_STATE_SUBTITLE:
          "Try adding a friend with their username, or scan to see who is nearby.",
        FRIENDS_FRIEND_SUGGESTIONS_HEADER: "Friend Suggestions — {count}",
        FRIENDS_SUGGESTED_FRIENDS_HEADER: "Suggested Friends - {count}",
        FRIENDS_ONLINE_HEADER: "Online — {online}",
        FRIENDS_OFFLINE_HEADER: "Offline — {offline}",
        FRIENDS_ALL_HEADER: "All friends — {count}",
        FRIENDS_PENDING_HEADER: "Pending — {count}",
        FRIENDS_BLOCKED_HEADER: "Blocked — {count}",
        FRIENDS_PENDING_REQUEST_EXPAND: "See All",
        FRIENDS_PENDING_REQUEST_EXPAND_COLLAPSE: "See Less",
        FRIEND_REQUEST_SETTINGS: "Friend Request Settings",
        FRIENDS_REQUEST_STATUS_OUTGOING: "Outgoing Friend Request",
        FRIENDS_REQUEST_STATUS_INCOMING: "Incoming Friend Request",
        FRIENDS_CONTACT_SYNC_CTA: "Find Your Friends",
        FRIENDS_CONTACT_SUGGESTION_ADDED: "Friend request sent",
        CONTACTS: "Contacts",
        CONTACTS_ON_DISCORD: "Contacts on Discord",
        FRIEND_REQUEST_NO_RESULTS_FOUND:
          "Wumpus looked, but couldn’t find anyone with that name.",
        SEARCH_OR_ADD_BY_USERNAME: "Search or add by @username",
        ADD_BY_USERNAME: "Add by Username",
        ADD_BY_ID_TITLE: "Add your friend on Discord",
        ADD_BY_ID_BODY:
          "You will need both their username and a tag. Keep in mind that username is case sensitive.",
        ADD_BY_ID_INPUT_HEADER: "Add via username",
        ADD_BY_ID_INPUT_ERROR: "You must enter a valid username and tag",
        SELF_USERNAME_INDICATOR_HOOK: "Your username is $[](usernameHook)",
        SELF_USERNAME_INDICATOR: "Your username is {username}",
        SELF_USERNAME_DISPLAY_HOOK:
          "By the way, your username is $[](usernameHook).",
        USERNAME_SEARCH_BODY:
          "To find someone and add them as a friend, you’ll need their username and tag. Keep in mind that username is case sensitive.",
        USERNAME_SEARCH_HEADER: "Who would you like to add as a friend?",
        ADD_FRIEND_OTHER_OPTIONS: "or use these options",
        ADD_FRIEND_STUDENT_HUB: "Connect with friends in your student hub.",
        NEARBY_SCAN: "Nearby Scan",
        NEARBY_SCAN_CTA_TITLE: "Nearby scan",
        NEARBY_SCAN_SUBTITLE: "Use Bluetooth and Wifi to find nearby friends.",
        FRIENDS_SHARE_SHEET_SCANNING_TEXT_TOP:
          "Make sure your friends are scanning too!",
        FRIENDS_SHARE_SHEET_SCANNING_TEXT_BOTTOM:
          "Scanning the airwaves for friends. Make sure your friends are on this page and scanning too.",
        FRIENDS_SHARE_TABBAR_TITLE:
          "Add me on {url} so we can talk! My username is {username}.",
        FRIENDS_ROW_ACTION_BUTTON_ACCESSIBILITY_LABEL_CANCEL_WITH_NAME:
          "Cancel Friend Request for {name}",
        FRIENDS_ROW_MUTUAL_FRIENDS:
          "{count, plural, =1 {1 mutual friend} other {{count} mutual friends}}",
        FRIENDS_ROW_ACTION_BUTTON_ACCESSIBILITY_LABEL_DECLINE_WITH_NAME:
          "Ignore Invitation from {name}",
        FRIENDS_ROW_ACTION_BUTTON_ACCESSIBILITY_LABEL_ACCEPT_WITH_NAME:
          "Accept Invitation from {name}",
        FRIENDS_ROW_ACTION_BUTTON_ACCESSIBILITY_LABEL_MESSAGE_WITH_NAME:
          "Send a DM to {name}",
        FRIENDS_ROW_ACTION_BUTTON_ACCESSIBILITY_LABEL_CALL_WITH_NAME:
          "Call {name}",
        FRIENDS_ROW_ACTION_BUTTON_ACCESSIBILITY_LABEL_ACCEPT_SUGGESTION:
          "Accept Suggestion",
        FRIENDS_ROW_ACTION_BUTTON_ACCESSIBILITY_LABEL_IGNORE_SUGGESTION:
          "Ignore Suggestion",
        FRIENDS_EMPTY_STATE_FRIEND_SUGGESTIONS_COPY: "No suggested friends",
        FRIENDS_EMPTY_STATE_PENDING_FRIENDS_COPY: "No pending friends",
        FRIENDS_EMPTY_STATE_ADD_FRIENDS:
          "Discord without Friends is like a house that's not a home. Invite some people to get things going!",
        FRIEND_PERMITTED_SOURCE: "Who can send you a friend request",
        FRIEND_PERMITTED_SOURCE_ALL: "Everyone",
        FRIEND_PERMITTED_SOURCE_MUTUAL_FRIENDS: "Friends of Friends",
        FRIEND_PERMITTED_SOURCE_MUTUAL_GUILDS: "Server Members",
        USER_DIRECT_MESSAGE_FILTERS: "Direct message filters",
        USER_EXPLICIT_CONTENT_FILTER: "Safe Direct Messaging",
        USER_EXPLICIT_CONTENT_FILTER_V2: "Explicit image filter",
        USER_EXPLICIT_CONTENT_FILTER_HELP:
          "Automatically scan and delete direct messages you receive that contain explicit media content.",
        USER_EXPLICIT_CONTENT_FILTER_HELP_V2:
          "Automatically scan and block direct messages you receive that contain explicit media content or spam.",
        USER_EXPLICIT_CONTENT_FILTER_HELP_V3:
          "Automatically block direct messages that may contain explicit images. [Learn more about this setting here.]({appealLink})",
        ACTIVITY_PARTY_PRIVACY: "Rich Presence",
        ACTIVITY_PARTY_PRIVACY_FRIENDS: "Allow friends to join your game.",
        ACTIVITY_PARTY_PRIVACY_FRIENDS_HELP:
          "This setting allows friends to join your game without sending a request.",
        ACTIVITY_PARTY_PRIVACY_VOICE_CHANNEL:
          "Allow voice channel participants to join your game.",
        ACTIVITY_PARTY_PRIVACY_VOICE_CHANNEL_HELP:
          "This setting allows people that are in the same voice channel as you to join your game without sending a request. This feature only works in non-community servers.",
        USER_EXPLICIT_CONTENT_FILTER_FRIENDS_AND_NON_FRIENDS: "Keep me safe",
        USER_EXPLICIT_CONTENT_FILTER_FRIENDS_AND_NON_FRIENDS_HELP:
          "Scan direct messages from everyone.",
        USER_EXPLICIT_CONTENT_FILTER_NON_FRIENDS: "My friends are nice",
        USER_EXPLICIT_CONTENT_FILTER_NON_FRIENDS_HELP:
          "Scan direct messages from everyone unless they are a friend.",
        USER_EXPLICIT_CONTENT_FILTER_DISABLED: "Do not scan",
        USER_EXPLICIT_CONTENT_FILTER_DISABLED_HELP:
          "Direct messages will not be scanned for explicit content.",
        USER_EXPLICIT_CONTENT_FILTER_DISABLED_HELP_V2:
          "Direct messages will not be scanned for explicit media content or spam.",
        USER_EXPLICIT_CONTENT_FILTER_COACHMARK_HEADER: "DM Spam Filter Beta",
        USER_EXPLICIT_CONTENT_FILTER_COACHMARK_HEADER_V2: "Filter DM spam",
        USER_EXPLICIT_CONTENT_FILTER_COACHMARK_CONTENT:
          "See less DM spam. New DMs will automatically be filtered for spam. Toggle this under Settings > Privacy & Safety > Safe Direct Messaging.",
        USER_EXPLICIT_CONTENT_FILTER_COACHMARK_CONTENT_V2:
          "See less DM spam. New DMs may automatically be filtered for spam. Toggle this under Settings > Privacy & Safety > Direct message filters > DM spam filter.\n\n[Click here to learn more.]({helpdeskArticle})",
        USER_EXPLICIT_CONTENT_FILTER_COACHMARK_CONTENT_MOBILE_V2:
          "See less DM spam. New DMs may automatically be filtered for spam. Toggle this under Settings > Privacy & Safety > Direct message filters > DM spam filter.",
        USER_EXPLICIT_CONTENT_FILTER_COACHMARK_CONTENT_CLICK_TO_LEARN:
          "[Click here to learn more.]({helpdeskArticle})",
        USER_EXPLICIT_CONTENT_FILTER_COACHMARK_REDIRECT: "Change setting",
        USER_EXPLICIT_CONTENT_FILTER_COACHMARK_ASSET_ALT:
          "Wumpus getting mail out of a bag on the back of a turtle.",
        USER_EXPLICIT_CONTENT_FILTER_FRIENDS_AND_NON_FRIENDS_V2:
          "Filter all direct messages",
        USER_EXPLICIT_CONTENT_FILTER_FRIENDS_AND_NON_FRIENDS_HELP_V2:
          "All direct messages will be filtered for explicit images.",
        USER_EXPLICIT_CONTENT_FILTER_NON_FRIENDS_V2:
          "Filter direct messages from non-friends",
        USER_EXPLICIT_CONTENT_FILTER_NON_FRIENDS_HELP_V2:
          "Direct messages from non-friends will be filtered for explicit images.",
        USER_EXPLICIT_CONTENT_FILTER_DISABLED_V2:
          "Do not filter direct messages",
        USER_EXPLICIT_CONTENT_FILTER_DISABLED_HELP_V2:
          "Direct messages will not be filtered for explicit images.",
        SETTINGS_DM_SPAM_FILTER: "DM Spam Filter",
        USER_DM_SPAM_FILTER: "DM spam filter",
        USER_DM_SPAM_FILTER_HELP:
          "Automatically send direct messages that may contain spam into a separate spam inbox. [Learn more about this setting here.]({appealLink})",
        USER_DM_SPAM_FILTER_DISABLED: "Do not filter direct messages",
        USER_DM_SPAM_FILTER_DISABLED_HELP:
          "Direct messages will not be filtered for spam.",
        USER_DM_SPAM_FILTER_NON_FRIENDS:
          "Filter direct messages from non-friends",
        USER_DM_SPAM_FILTER_NON_FRIENDS_HELP:
          "Direct messages from non-friends will be filtered for spam.",
        USER_DM_SPAM_FILTER_FRIENDS_AND_NON_FRIENDS:
          "Filter all direct messages",
        USER_DM_SPAM_FILTER_FRIENDS_AND_NON_FRIENDS_HELP:
          "All direct messages will be filtered for spam.",
        SETTINGS_DATA_PRIVACY_CONTROLS: "How We Use Your Data",
        DATA_PRIVACY_CONTROLS: "How we use your data",
        DATA_PRIVACY_CONTROLS_USAGE_STATISTICS_TITLE:
          "Use data to improve Discord",
        DATA_PRIVACY_CONTROLS_USAGE_STATISTICS_NOTE:
          "This setting allows us to use and process information about how you navigate and use Discord for analytical purposes. For example, it allows us to include you in new feature experiments we test. [Learn more about it here.]({helpdeskArticle})",
        DATA_PRIVACY_CONTROLS_PERSONALIZATION_TITLE:
          "Use data to customize my Discord experience",
        DATA_PRIVACY_CONTROLS_PERSONALIZATION_NOTE_LEARN_MORE:
          "This setting allows us to use information, such as who you talk to and what games you play, to customize Discord for you. [Learn more about it here.]({helpdeskArticle})",
        DATA_PRIVACY_CONTROLS_BASIC_SERVICE_TITLE:
          "Use data to make Discord work",
        DATA_PRIVACY_CONTROLS_PERSONAL_DATA_TITLE: "Request all of my Data",
        DATA_PRIVACY_CONTROLS_BASIC_SERVICE_NOTE:
          "We need to store and process some data in order to provide you the basic Discord service, such as your messages, what servers you’re in and your Direct Messages. By using Discord, you allow us to provide this basic service. You can stop this by [Disabling or Deleting your account](onClick).",
        DATA_PRIVACY_CONTROLS_REQUEST_DATA_DOWNLOAD: "Request Data",
        DATA_PRIVACY_CONTROLS_REQUEST_DATA_SUCCESS_TITLE: "Request received",
        DATA_PRIVACY_CONTROLS_REQUEST_DATA_SUCCESS_BODY:
          "We will email you a link to download as soon as it’s ready.",
        DATA_PRIVACY_CONTROLS_REQUEST_DATA_FAILURE_TITLE:
          "Oops, something went wrong...",
        DATA_PRIVACY_CONTROLS_REQUEST_DATA_FAILURE_BODY: "Please try again",
        DATA_PRIVACY_CONTROLS_REQUEST_DATA_TOOLTIP:
          "Your account must be verified with an email address to request data. You can verify your account in the My Account section",
        DATA_PRIVACY_CONTROLS_REQUEST_DATA_MODAL_TITLE: "Submit Data Request",
        DATA_PRIVACY_CONTROLS_REQUEST_DATA_MODAL_NOTE:
          "It may take us up to 30 days to collect your data. We will send you an email to the address you registered with when the package is ready.",
        DATA_PRIVACY_CONTROLS_REQUEST_DATA_MODAL_CONFIRM: "Request My Data",
        DATA_PRIVACY_CONTROLS_REQUEST_DATA_MODAL_CANCEL: "I've changed my mind",
        DATA_PRIVACY_CONTROLS_REQUEST_DATA_MODAL_SUCCESS:
          "Our privacy farmers have begun harvesting your data. This can take up to 30 days, but we'll email you when it’s done.",
        DATA_PRIVACY_CONTROLS_REQUEST_DATA_NOTE:
          "[Learn more]({helpdeskArticle}) about how getting a copy of your personal data works.",
        DATA_PRIVACY_UPDATE_CONSENTS_FAILED:
          "We couldn't update your data usage preferences right now. Please try again later",
        USER_DM_SETTINGS: "Server Privacy Defaults",
        USER_DM_SETTINGS_HELP:
          "This setting is applied when you join a new server. It does not apply retroactively to your existing servers.",
        USER_DM_SETTINGS_QUESTION:
          "Do you want to also apply this change to all your existing servers?",
        NEW_GUILDS_DM_ALLOWED: "Allow direct messages from server members",
        USER_DROPS_SETTINGS: "Promo Settings",
        USER_DROPS_SETTINGS_DROPS_OPTED_OUT: "In-game rewards (aka Drops)",
        USER_DROPS_SETTINGS_DROPS_OPTED_OUT_NOTE:
          "Use the information about what games you play to tell you about Drops opportunities and to complete Drops Quests.",
        USER_DM_SETTINGS_TITLE: "Server Privacy",
        USER_DM_SETTINGS_DESCRIPTION:
          "Do you want to also apply this change to all your existing servers? You can also disable direct messages on individual servers by visiting that server's settings page.",
        DROPS_REQUEST_FEEDBACK_OPT_OUT:
          "Drops is currently in beta - we'd like to learn more about why you turned it off. [Feedback Survey]({feedbackURL})",
        DROPS_REQUEST_FEEDBACK_SUCCESS:
          "Drops is currently in beta - thanks for participating, now we'd like to hear from you! [Feedback Survey]({feedbackURL})",
        DROPS_READ_BLOG_TO_ENABLE:
          'You must be looking for Discord Quests! If you\'re seeing this message, we need to tweak some settings. To enable it, you\'ll need to go to Settings -> Privacy & Safety and enable both "Use data to customize my Discord experience" and "In-game rewards (aka Quests)" settings.\n\n[Read more in our FAQs]({blogURL})',
        DROPS_ELIGIBILITY_ENROLLMENT_PRIMARY_CTA: "Enroll Now",
        DROPS_AVAILABLE: "Quests Available",
        DROPS_ENABLED: "Quests Enabled",
        DROPS_BANNER_ENDED_INCOMPLETE:
          "{gameTitle} Quest has closed. Would you mind sharing some feedback on why you couldn't complete it?",
        DROPS_FEEDBACK_SURVEY: "Feedback Survey",
        DROPS_QUEST_COMPLETION_TOOLTIP_HEADER: "Claim Your Quest Reward!",
        GIFT_INVENTORY_AVAILABLE_GIFTS: "Available Gifts",
        DROPS_GIFT_INVENTORY_TITLE: "Quests",
        DROPS_CARD_REDEEM_UNTIL: "Code is available to redeem until {endDate}.",
        DROPS_GIFT_INVENTORY_AVAILABLE_GIFT_PROMPT:
          "Stream for {streamLengthRequirement} minutes and unlock a game code for {gameTitle} on any platform!",
        DROPS_GIFT_INVENTORY_REDEMPTION_TOOLTIP:
          "Complete the requirements to earn this Quest reward.",
        DROPS_REQUIRE_NUM_VIEWERS:
          "Requires {numViewers, plural, one {1 viewer} other {{numViewers} viewers}}",
        DROPS_STREAM_PROGRESS_INDICATOR:
          "Streamed for {minutesStreamed}/{streamLengthRequirement} minutes",
        DROPS_MODAL_CHOOSE_PLATFORM:
          "Select the platform you would like to get your {title} code for.",
        DROPS_MODAL_CHOOSE_SINGLE_PLATFORM: "Unlock a code for {platform}!",
        DROPS_MODAL_PLATFORM_CONFIRMATION_TITLE:
          "Are you sure you want a code for {platform}?",
        DROPS_MODAL_CONFIRMATION_WARNING:
          "You will not be able to change your selection after hitting confirm.",
        DROPS_GIFT_INVENTORY_ENROLL: "Enroll",
        DROPS_PLATFORM_XBOX: "Xbox",
        DROPS_PLATFORM_PLAYSTATION: "PlayStation",
        DROPS_PLATFORM_SWITCH: "Nintendo Switch",
        DROPS_PLATFORM_PC: "PC",
        DROPS_REDEMPTION_CODE_PLATFORM_TITLE: "Redemption Code for {platform}",
        DROPS_CODES_RAN_OUT:
          "We're all out of codes, stay tuned for more information.",
        DROPS_PROGRESS_INTERRUPTION_WARNING:
          "There's an issue with your stream. Please restart Discord & {gameTitle} to continue earning Quest progress.",
        DROPS_QUEST_NOT_COMPLETED_ERROR:
          "It looks like you haven't completed the Quest for this reward yet!",
        DROPS_USER_NOT_ENROLLED_ERROR:
          "You are not enrolled in this Quest yet!",
        DROPS_NO_CODE_AVAILABLE_ERROR:
          "That code is no longer available and cannot be claimed",
        DROPS_CODE_ALREADY_CLAIMED_ERROR: "That code has already been claimed!",
        DROPS_BANNER_NOTICE:
          "Don't forget! Unlock a {gameName} Quest reward when you stream the game in a voice channel for {streamLengthRequirement, plural, one {1 minute} other {{streamLengthRequirement} minutes}}. Ends {endDate}.",
        DROP_ENROLLMENT_CTA_TOOLTIP_HEADER: "{gameName} Quests!",
        DROPS_LEARN_MORE: "Learn more in our [Quests FAQ.]({faqUrl})",
        GUILD_WARS_REDEMPTION_TIP:
          "Copy the code below and log in to your Guild Wars 2 account to redeem it! [Learn More.]({learnMoreUrl})",
        GUILD_WARS_GO_LIVE_TASK:
          "Stream Guild Wars 2 for {streamLengthRequirement, plural, one {1 minute} other {{streamLengthRequirement} minutes}} to at least 1 viewer and unlock the Heroes Bundle. To start, join a voice channel, then share using the game window (not your entire screen)! Unlock codes available for ArenaNet or Steam.",
        GUILD_WARS_DROPS_ELIGIBILITY_ENROLLMENT_TOOLTIP:
          "Stream for {streamLengthRequirement, plural, one {1 minute} other {{streamLengthRequirement} minutes}} to at least 1 viewer and unlock the Heroes Bundle!",
        GUILD_WARS_DROPS_COMPLETION_TOOLTIP:
          "You streamed for {streamLengthRequirement, plural, one {1 minute} other {{streamLengthRequirement} minutes}} and unlocked the Heroes Bundle.",
        FORTNITE_REWARD_NAME: "Coruscant's Pride Wrap",
        FORNITE_GUARD_OUTPUT: "Coruscant Guard Outfit",
        FORTNITE_REDEMPTION_TIP:
          "Click the link below and log in to your Fortnite account to redeem it! [Learn More.]({learnMoreUrl})",
        FORTNITE_GO_LIVE_TASK:
          "Stream Fortnite for {streamLengthRequirement, plural, one {1 minute} other {{streamLengthRequirement} minutes}} to at least 1 viewer and unlock the {rewardName}. To start, join a voice channel, then share using the game window (not your entire screen)!. Unlock codes available for Fortnite.",
        FORTNITE_DROPS_ELIGIBILITY_ENROLLMENT_TOOLTIP:
          "Stream for {streamLengthRequirement, plural, one {1 minute} other {{streamLengthRequirement} minutes}} to at least 1 viewer and unlock the {rewardName}!",
        FORTNITE_DROPS_COMPLETION_TOOLTIP:
          "You streamed for {streamLengthRequirement, plural, one {1 minute} other {{streamLengthRequirement} minutes}} and unlocked the {rewardName}.",
        FORTNITE_GIFT_INVENTORY_INFO:
          "Get your gear to match your {guardOutfitName}!\n\nStarting May 4, unlock the {rewardName} Discord Drop by doing one of two things:\n\nStream live and Screen Share Fortnite on Discord for 15+ or more minutes to at least one Discord friend.\n\nAfter 15 minutes of screen sharing to a friend, you’ll receive a link as a gift in your Settings > Gift Inventory.\n\nClick the link to log into your Epic Games account and the Wrap will be added to your Fortnite Locker!\n\nCan’t stream? You can also accept the Discord Bot Quest! Start by joining the [official Fortnite Discord server](http://discord.gg/fortnite).\n\nIn the server, you’ll see a bot you can interact with to join the Discord Quest.\n\nUpon interacting with the bot, you’ll be taken to a page where you can link your Epic and Discord accounts.\n\nWith your accounts linked, participate in the Quest by completing a task inside Discord and a task inside Fortnite.\n\nAfter both of these tasks are complete, the Wrap will be added to your Fortnite Locker!\n\nLearn more on our blog post!\n",
        ACTIVITY_RESTRICTION_DEFAULT:
          "Share your activity status by default when joining large servers",
        ACTIVITY_RESTRICTION_DEFAULT_NOTE:
          "This setting allows you to control how you share your activity status by default when you join a new server with over 200 members. [Learn more about this setting]({helpdeskArticle}).",
        ACTIVITY_RESTRICTION_MODAL_DESC:
          "Do you want to apply this Activity Status setting change to all your existing servers (regardless of size)? You can also disable sharing your activity status in individual servers by visiting that server's Privacy Settings.",
        FRIEND_REQUEST_SENT: "Friend request has been sent.",
        FRIEND_REQUEST_CANCELLED: "Friend request has been canceled.",
        FRIEND_REQUEST_IGNORED: "Friend request has been ignored.",
        FRIEND_HAS_BEEN_DELETED: "Friend has been removed.",
        USER_HAS_BEEN_BLOCKED: "User has been blocked.",
        USER_HAS_BEEN_UNBLOCKED: "User has been unblocked.",
        CONFIRMATION_CODE: "Confirmation Code",
        TOAST_ADD_FRIEND: "Friend Request Sent",
        TOAST_ADD_FRIENDS: "Friend requests sent!",
        TOAST_IMAGE_SAVED: "Image Saved",
        TOAST_VIDEO_SAVED: "Video Saved",
        TOAST_GIF_SAVED: "Gif Saved",
        TOAST_USERNAME_SAVED: "Username Copied",
        TOAST_MESSAGE_COPIED: "Copied Message Text",
        TOAST_MESSAGE_ID_COPIED: "Copied Message ID",
        TOAST_ID_COPIED: "Copied ID",
        TOAST_FEEDBACK_SENT: "Feedback Sent!",
        TOAST_COMMAND_COPIED: "Copied Command",
        TOAST_FRIEND_INVITES_REVOKED: "Friend invites revoked",
        NOISE_CANCELLATION_ON: "Noise Suppression On",
        NOISE_CANCELLATION_OFF: "Noise Suppression Off",
        TOAST_FRIEND_REQUEST_ACCEPTED: "Friend added",
        TOAST_FRIEND_REQUEST_IGNORED: "Friend Request Cleared",
        TOAST_REMIX_LANGUAGE_SUPPORT_WARNING:
          "Some characters are not available in remix.",
        FRIEND_REQUEST_RATE_LIMITED_HEADER: "WOAH THERE. WAY TOO SPICY",
        FRIEND_REQUEST_RATE_LIMITED_BODY:
          "You're sending friend requests too quickly!",
        FRIEND_REQUEST_RATE_LIMITED_BUTTON: "Enter the chill zone",
        FRIEND_REQUEST_REQUIRES_EMAIL_VALIDATION_HEADER: "HOLD UP JUST A SEC.",
        FRIEND_REQUEST_REQUIRES_EMAIL_VALIDATION_BODY:
          "You're going to need to claim your account and verify your e-mail before you can send a friend request.",
        FRIEND_REQUEST_REQUIRES_EMAIL_VALIDATION_BUTTON:
          "Enter the verification zone.",
        FRIEND_REQUEST_FAILED_HEADER: "Friend request failed",
        FRIEND_REQUEST_FAILED_BODY_NAMES:
          "Hm, something went wrong when sending a friend request to !!{name}!!. You can always try again later from the friends list.",
        FRIEND_REQUEST_FAILED_BODY:
          "Hm, something went wrong when sending friend requests. You can always try again later from the friends list.",
        ADD_FRIEND_DESCRIPTION:
          "You can add a friend with their Discord Tag. It's cAsE sEnSitIvE!",
        ADD_FRIEND_PLACEHOLDER: "Enter a Username#0000",
        ADD_FRIEND_INPUT_HINT: "Username#0000",
        ADD_FRIEND_CONFIRMATION: "Sent request to **!!{name}!!**",
        ADD_FRIEND_BUTTON: "Send Friend Request",
        ADD_FRIEND_BUTTON_AFTER: "Friend Request Sent",
        ACCEPT_REQUEST_BUTTON_AFTER: "Request Accepted",
        ADD_FRIEND_MAKE_FRIENDS: "Other places to make friends",
        ADD_FRIEND_EXPLORE_PUBLIC_SERVERS: "Explore Discoverable Servers",
        ADD_FRIEND_INVITE_LINK_SHARE_MESSAGE:
          "Add me as a friend on Discord! Invite expires in 1 week: {link}",
        INVITE_CONTACT_BUTTON: "Invite",
        INVITE_CONTACT_MESSAGE_PLACEHOLDER: "Add me back on Discord !!{link}!!",
        INVITE_GUILD_CONTACT_MESSAGE_PLACEHOLDER:
          "Join this server on Discord !!{link}!!",
        INVITE_TAP_TO_INVITE: "Tap to Invite",
        INVITE_YOUR_CONTACTS: "Your Contacts",
        INVITE_YOUR_CONTACTS_HEADER: "Invite Your Contacts",
        SHOW_ALL_WITH_COUNT: "Show all ({count})",
        INVITE_CONTACTS_HEADER: "Contacts You Should Invite — {count}",
        INVITE_CONTACTS_EMPTY_TITLE: "Find your friends",
        INVITE_CONTACTS_EMPTY_BODY:
          "By syncing your contacts, Discord can find your friends and help them find you.",
        INVITE_CONTACTS_BODY_NOTIFICATION:
          "Sync your contacts to find people you know on Discord.",
        INVITE_CONTACTS_FOOTER:
          "$[Learn more about finding your friends](learnMoreHook)",
        INVITE_CONTACTS_EMPTY_CTA: "Get Started",
        INVITE_CONTACTS_INNER_CONTACTS_COUNT:
          "{numFriends, plural, =0 {# friends on Discord} one {# friend on Discord} other {# friends on Discord}}",
        INVITE_CONTACTS_NO_SUGGESTIONS_TITLE: "No suggestions at the moment...",
        INVITE_CONTACTS_NO_SUGGESTIONS_BODY:
          "Check back later to view suggestions from your contacts.",
        INVITE_CONTACTS_ADD_FRIEND_BY_USERNAME: "Add a Friend by Username",
        INVITE_CONTACTS_SHARE_FRIEND_LINK: "Share Your Friend Link",
        INVITE_CONTACTS_TO_GUILD_FRIENDS_SECTION_TITLE: "Friends",
        INVITE_CONTACTS_TO_GUILD_CONTACTS_SECTION_TITLE: "Contacts",
        INVITE_CONTACTS_SEE_ALL: "See All",
        INVITE_CONTACTS_DM_SUBHEADER: "Invite Contacts to Message",
        USER_SUMMARY_WITH_OTHERS:
          "{name} and {count, plural, one {1 other} other {{count} others}}",
        USER_SUMMARY_ONE: "!!{first}!!",
        USER_SUMMARY_TWO: "!!{first}!!, !!{second}!!",
        USER_SUMMARY_THREE: "!!{first}!!, !!{second}!!, !!{third}!!",
        USER_SUMMARY_THREE_AND_OTHERS:
          "!!{first}!!, !!{second}!!, !!{third}!!, and {count, plural, one {1 other} other {{count} others}}",
        ADD_FRIEND_SUCCESS:
          "Success! Your friend request to **!!{discordTag}!!** was sent.",
        ADD_FRIEND_ERROR_NUMBERS_ONLY:
          "We're more than numbers... we're people! Enter a username and tag. It should look something like: TotallyARealUsername#0000",
        ADD_FRIEND_ERROR_USERNAME_ONLY:
          "We need !!{username}!!'s four digit tag so we know which one they are.",
        ADD_FRIEND_ERROR_DISCORD_TAG_USERNAME:
          "DiscordTag is a fake username. Enter your friend's real username and tag. It should look something like: TotallyARealUsername#0000",
        ADD_FRIEND_ERROR_INVALID_DISCORD_TAG:
          "**!!{discordTag}!!** is not accepting friend requests. They’ll have to add you to become friends.",
        ADD_FRIEND_ERROR_TOO_MANY_FRIENDS:
          "You've maxed out your friend list. Welcome to the elite 1,000 friends club!",
        ADD_FRIEND_ERROR_ALREADY_FRIENDS:
          "You're already friends with that user!",
        ADD_FRIEND_ERROR_OTHER:
          "Hm, didn't work. Double check that the capitalization, spelling, any spaces, and numbers are correct.",
        ADD_FRIEND_ADD_MANUALLY: "Send Friend Request",
        ADD_FRIEND_FRIEND: "Friend",
        ADD_FRIEND_NEARBY_ENABLE: "Start Nearby Scanning",
        ADD_FRIEND_NEARBY_TITLE: "Scanning the airwaves...",
        ADD_FRIEND_NEARBY_BODY:
          "Make sure your friends are on this page and scanning too.",
        ADD_FRIEND_NEARBY_FOUND_TITLE: "We found some friends!",
        ADD_FRIEND_NEARBY_FOUND_BODY:
          "Still scanning the airwaves. You will see more friends pop up here if we find them.",
        ADD_FRIEND_NEARBY_STOPPED: "Nearby connection was stopped.",
        ADD_FRIEND_NEARBY_CONNECTION_ERROR:
          "Please turn on location services, Bluetooth, and WiFi (all the things!). Then reconnect to the internet to activate Nearby.",
        ADD_FRIEND_NEARBY_CONNECTION_ERROR_IOS:
          "Please turn on Bluetooth and WiFi to activate Nearby.",
        ADD_FRIEND_NEARBY_GENERIC_ERROR:
          "There was a problem using Nearby. Please try again",
        ADD_FRIEND_NEARBY_LEARN_MORE: "[Learn More]({helpdeskArticle})",
        ME: "Me",
        BLOCK_USER_ERROR_TOO_MANY_BLOCKED_USERS:
          "You've maxed out your block list.",
        NOTIFICATION_PENDING_FRIEND_REQUEST: "Sent a friend request.",
        NOTIFICATION_ACCEPTED_FRIEND_REQUEST: "Accepted your friend request.",
        FRIEND_REQUEST_PENDING_A11Y_ANNOUNCEMENT:
          "!!{username}!! sent you a friend request",
        FRIEND_REQUEST_ACCEPTED_A11Y_ANNOUNCEMENT:
          "!!{username}!! has accepted your friend request",
        DM_VERIFICATION_TEXT_BLOCKED:
          "You cannot send messages to a user you have blocked.",
        PRIVACY_SETTINGS: "Privacy Settings",
        ALLOW_SERVER_DMS: "Allow direct messages from server members.",
        ALLOW_HUB_DMS: "Allow direct messages from Hub members.",
        PRIVACY_SETTINGS_DIRECT_MESSAGES: "Direct Messages",
        PRIVACY_SETTINGS_DIRECT_MESSAGES_DESC:
          "Allow direct messages from other members in this server.",
        PRIVACY_SETTINGS_DIRECT_MESSAGES_DESC_HUB:
          "Allow direct messages from other members in this hub.",
        PRIVACY_SETTINGS_MESSAGE_REQUESTS: "Message Requests",
        PRIVACY_SETTINGS_MESSAGE_REQUESTS_DESC_HUB:
          "If direct messages are enabled, filter messages from hub members you may not know.[Learn more about this setting here.]({helpdeskArticle})",
        PRIVACY_SETTINGS_MESSAGE_REQUESTS_DESC:
          "If direct messages are enabled, filter messages from server members you may not know. [Learn more about this setting here.]({helpdeskArticle})",
        PRIVACY_SETTINGS_ACTIVITY_STATUS: "Activity Status",
        PRIVACY_SETTINGS_ACTIVITY_STATUS_DESC:
          "Share your activity status in this server. [Learn more about this setting here.]({helpdeskArticle})",
        PRIVACY_SETTINGS_ACTIVITY_JOINING: "Activity Joining",
        PRIVACY_SETTINGS_ACTIVITY_JOINING_DESC:
          "Allow users to join your activity in this server. [Learn more about this setting here.]({helpdeskArticle})",
        PRIVACY_SETTINGS_STAFF_ONLY_HEADER: "Staff Only Privacy Settings",
        PRIVACY_SETTINGS_STAFF_ONLY_DESC:
          "Help improve Discord's spam models by submitting data when marking messages as non-spam.",
        PRIVACY_SETTINGS_NON_SPAM_RETRAINING_SETTING_OPT_IN_HEADER: "Opt-in",
        PRIVACY_SETTINGS_NON_SPAM_RETRAINING_SETTING_OPT_IN_DESC:
          "A non-spam report will be sent.",
        PRIVACY_SETTINGS_NON_SPAM_RETRAINING_SETTING_OPT_OUT_HEADER: "Opt-out",
        PRIVACY_SETTINGS_NON_SPAM_RETRAINING_SETTING_OPT_OUT_DESC:
          "A non-spam report will NOT be sent.",
        PRIVACY_SETTINGS_NON_SPAM_RETRAINING_SETTING_UNSET_HEADER: "Undecided",
        PRIVACY_SETTINGS_NON_SPAM_RETRAINING_SETTING_UNSET_DESC:
          "No decision has been made and we will prompt for a decision in the future.",
        PRIVACY_SETTINGS_COMMUNITY_GUILDS_DISCLAIMER:
          "Learn about enhanced safety measures in Community Servers [here]({policyLink}).",
        MESSAGE_REQUESTS: "Message Requests",
        MESSAGE_REQUEST_ACCEPT: "Accept DM",
        MESSAGE_REQUEST_IGNORE: "Ignore",
        MESSAGE_REQUEST_PREVIEW: "Preview",
        MESSAGE_REQUEST_INCOMING: "Incoming message request",
        MESSAGE_REQUEST_SECTION_HEADER:
          "Message Requests — {pendingRequestNumber}",
        MESSAGE_REQUEST_BANNER_TITLE: "This is a Message Request.",
        MESSAGE_REQUEST_BANNER_SUBTITLE:
          "You can accept or hide the conversation.",
        MESSAGE_REQUEST_ACCEPT_CONFIRMATION_TITLE:
          "Are you sure you know this person?",
        MESSAGE_REQUEST_ACCEPT_CONFIRMATION_BODY:
          "They're not on your friends list. Click 'Confirm' below if you're sure you want to speak to them in a DM.",
        MESSAGE_REQUEST_BLOCK_ON_REJECT_CONFIRMATION_TITLE:
          "Block this account?",
        MESSAGE_REQUEST_BLOCK_ON_REJECT_CONFIRMATION_BODY:
          "You chose to ignore this message request. Do you want to block this user to prevent future messages?",
        MESSAGE_REQUESTS_CONTEXT_MENU_MOVE_TO:
          "Mark as Message Request (Experimental)",
        MESSAGE_REQUESTS_CONTEXT_MENU_CLEAR:
          "Reset Message Request (Experimental)",
        MESSAGE_REQUESTS_EMPTY_STATE_BODY:
          "There are no pending message requests. Here's Wumpus for now.",
        MESSAGE_REQUESTS_SPAM_EMPTY_STATE_BODY:
          "There are no spam requests. Here's Wumpus for now.",
        MESSAGE_REQUESTS_DELETED_MESSAGE: "The last message was deleted.",
        MESSAGE_REQUESTS_BLOCKED_MESSAGE: "Message is from a blocked user.",
        MESSAGE_REQUESTS_ERROR_LOADING_PREVIEW:
          "Error loading message preview.",
        MESSAGE_REQUESTS_STICKER_MOBILE: "Message contains a sticker.",
        MESSAGE_REQUESTS_NO_TEXT_CONTENT_MOBILE:
          "Message contains an attachment.",
        MESSAGE_REQUESTS_UNABLE_TO_RENDER_PREVIEW:
          "Unable to display message preview.",
        MESSAGE_REQUEST_REQUEST_ERROR_ALERT_TITLE:
          "Uh oh! Something went wrong while updating this message request. Please wait a moment and try again.",
        MESSAGE_REQUEST_ROW_ACTION_BUTTON_ACCESSIBILITY_LABEL_ACCEPT:
          "Accept message request",
        MESSAGE_REQUEST_ROW_ACTION_BUTTON_ACCESSIBILITY_LABEL_IGNORE:
          "Ignore message request",
        MESSAGE_REQUEST_ROW_SELECT_ACCESSIBILITY_LABEL:
          "Preview message request",
        MESSAGE_REQUESTS_SETTING_GENERAL_HEADER:
          "Enable message requests from server members you may not know",
        MESSAGE_REQUESTS_SETTING_GENERAL_CAPTION:
          "If direct messages are enabled, this setting is applied when you join a new server. It does not apply retroactively to your existing servers. [Learn more about this setting here.]({helpdeskArticle})",
        MESSAGE_REQUESTS_SETTING_GENERAL_MODAL_HEADER: "Message Requests",
        MESSAGE_REQUESTS_SETTING_GENERAL_MODAL_DESCRIPTION:
          "Do you want to also apply this change to all your existing servers? You can also disable messages requests on individual servers by visiting that servers setting's page.",
        MESSAGE_REQUESTS_COACHMARK_TITLE: "New Message Requests",
        MESSAGE_REQUESTS_COACHMARK_CONTENT:
          "Messages from people you aren't friends with will show up here. Toggle this under Settings > Privacy & Safety.",
        MESSAGE_REQUESTS_COACHMARK_CONTENT_TEENS:
          "Messages from people you aren't friends with will show up here.",
        MESSAGE_REQUESTS_COACHMARK_DISMISS: "Got it",
        MESSAGE_REQUESTS_COACHMARK_CONFIRM: "Check it out",
        MESSAGE_REQUESTS_REQUESTS_TAB_TITLE: "Requests",
        MESSAGE_REQUESTS_SPAM_TAB_TITLE: "Spam",
        MESSAGE_REQUESTS_SPAM_TAB_TITLE_WITH_COUNT: "Spam ({count})",
        MESSAGE_REQUESTS_PREVIEW_TAB_TITLE: "Message Preview",
        MESSAGE_REQUESTS_SPAM_HEADER: "Spam - {count}",
        MESSAGE_REQUESTS_SPAM_ERROR_ALERT_TITLE:
          "Uh oh! Something went wrong while updating this spam message. Please wait a moment and try again.",
        MESSAGE_REQUESTS_SPAM_ACCEPT: "Accept DM",
        MESSAGE_REQUESTS_SPAM_REPORT: "Report",
        MESSAGE_REQUESTS_SPAM_IGNORE: "Ignore",
        MESSAGE_REQUESTS_SPAM_HAM: "Mark as not spam",
        MESSAGE_REQUESTS_PAGE_TITLE: "Pending Requests",
        MESSAGE_REQUESTS_PAGE_TITLE_WITH_COUNT: "Pending Requests — {count}",
        MESSAGE_REQUESTS_SPAM_HAM_MODAL_HEADER: "Confirm this isn't spam",
        MESSAGE_REQUESTS_SPAM_HAM_MODAL_SUBHEADER:
          "Are you sure this message isn't spam?",
        MESSAGE_REQUESTS_SPAM_HAM_TOGGLE:
          "Help improve our spam filter by forwarding this message to Discord",
        MESSAGE_REQUESTS_SPAM_HAM_OPT_OUT: "Don't show this again",
        MESSAGE_REQUESTS_SPAM_BOTTOMSHEET_HEADER: "Mark as Not Spam",
        MESSAGE_REQUESTS_SPAM_MOBILE_HEADER: "Spam Requests - {count}",
        MESSAGE_REQUESTS_CHANNEL_SIDEBAR_HAM_HEADER:
          "Was this message spam? Let us know and help improve Discord’s spam filtering.",
        MESSAGE_REQUESTS_CHANNEL_SIDEBAR_HAM_BUTTON: "Mark as Not Spam",
        MESSAGE_REQUESTS_SPAM_ROW_ACTION_BUTTON_ACCESSIBILITY_LABEL_ACCEPT:
          "Accept spam message request",
        MESSAGE_REQUESTS_SPAM_ROW_ACTION_BUTTON_ACCESSIBILITY_LABEL_IGNORE:
          "Ignore spam message request",
        MESSAGE_REQUESTS_SPAM_ROW_SELECT_ACCESSIBILITY_LABEL:
          "Preview spam message request",
        MESSAGE_REQUESTS_SPAM_REQUEST_ERROR_ALERT_TITLE:
          "Uh oh! Something went wrong while updating this spam message request. Please wait a moment and try again.",
        MESSAGE_REQUESTS_SPAM_REQUEST_BOTTOMSHEET_HEADER:
          "This message might be spam",
        MESSAGE_REQUESTS_SPAM_REQUEST_BOTTOMSHEET_SUBHEADER:
          "You can still reply. Messages marked as “not spam” will help improve our spam filters.",
        MESSAGE_REQUESTS_SPAM_REQUEST_BOTTOMSHEET_ACCEPT: "Accept Message",
        MESSAGE_REQUESTS_HAM_ACTIONSHEET_TOGGLE_TEXT:
          "Help improve our spam filter by forwarding this message to Discord",
        MESSAGE_REQUESTS_CLEAR_ALL: "Clear All",
        SAFETY_CONSUMER_EDUCATION_BLOCK_HEADER: "How to Block",
        SAFETY_CONSUMER_EDUCATION_BLOCK_CONTENT:
          "Not a fan of annoying messages? Control your DM settings & block away.",
        SAFETY_CONSUMER_EDUCATION_MUTE_HEADER: "How to Mute",
        SAFETY_CONSUMER_EDUCATION_MUTE_CONTENT:
          "Need some quiet time? Mute away - you're in control.",
        SAFETY_CONSUMER_EDUCATION_REPORTING_HEADER: "How to Report",
        SAFETY_CONSUMER_EDUCATION_REPORTING_CONTENT:
          "Seeing something that's not ok? Click that report button.",
        BOT_DM_SEND_FAILED:
          "Your message could not be delivered because you don't share a server with the recipient or you disabled direct messages on your shared server, recipient is only accepting direct messages from friends, or you were blocked by the recipient.",
        BOT_DM_SEND_FAILED_WITH_HELP_LINK:
          "Your message could not be delivered. This is usually because you don't share a server with the recipient or the recipient is only accepting direct messages from friends. You can see the full list of reasons here: {helpUrl}",
        BOT_DM_SEND_FAILED_WITH_HELP_LINK_MOBILE:
          "Your message could not be delivered. This is usually because you don't share a server with the recipient or the recipient is only accepting direct messages from friends. You can see the full list of reasons [here]({helpUrl})",
        BOT_REQUIRES_EMAIL_VERIFICATION:
          "You need to verify your email or phone before you can send messages here.",
        BOT_DM_RATE_LIMITED:
          "You are sending too many new direct messages. Hold off for a few minutes before trying to message this person again.",
        BOT_DM_SEND_MESSAGE_TEMPORARILY_DISABLED:
          "Sending messages to this channel has been temporarily disabled. Try again in a bit.",
        BOT_DM_EXPLICIT_CONTENT:
          "Woah there! !!{name}!! has requested that Discord block any messages our mostly-accurate robots deem to be explicit, so your message has not been sent.",
        BOT_GDM_EXPLICIT_CONTENT:
          "Woah there! Someone in !!{name}!! has requested that Discord block any messages our mostly-accurate robots deem to be explicit, so your message has not been sent.",
        BOT_GUILD_EXPLICIT_CONTENT:
          "Woah there! The owner of !!{name}!! has requested that Discord block any messages our mostly-accurate robots deem to be explicit, so your message has not been sent.",
        BOT_CALL_IDLE_DISCONNECT_2:
          "It appears you've been by yourself in this call for more than {number, plural, one {one minute} other {{number} minutes}}. The bandwidth patrol has asked me to disconnect you to save bandwidth. That stuff doesn't grow on trees!",
        CLAIM_ACCOUNT_REQUIRED_BODY:
          "Please claim your account to use the desktop app.",
        CLAIM_ACCOUNT_EMAIL_TO:
          "Thanks! We've sent a confirmation link to: **!!{email}!!**",
        CLAIM_ACCOUNT_REQUIRED_EMAIL_TO:
          "Thanks! We've sent a confirmation link to **!!{email}!!**. Please click the link to verify your account.",
        CLAIM_ACCOUNT_PROMOTE_APP_2021_04:
          "Now that you have an account, download the Discord desktop app for better performance and more features!",
        CLAIM_ACCOUNT_GET_APP: "Get the Desktop App",
        FINISH_SIGNING_UP: "Finish signing up",
        CLAIM_ACCOUNT_BODY_2:
          "Claim your account by entering an email and password.",
        STREAMER_MODE: "Streamer Mode",
        OPTIONS: "Options",
        USER_SETTINGS_STREAMER_NOTICE_TITLE: "Looking for integrations?",
        USER_SETTINGS_STREAMER_NOTICE_BODY:
          "\nEnhance your Discord community with tools made for streamers.\n\nCheck out [Discord's StreamKit]({streamkitURL}).",
        STREAMER_MODE_ENABLED: "Streamer Mode Enabled",
        ENABLE_STREAMER_MODE_LABEL: "Enable Streamer Mode",
        ENABLE_STREAMER_MODE_DESCRIPTION:
          "You can set a keybind to toggle Streamer Mode in [Keybind Settings](onClick).",
        AUTO_TOGGLE_STREAMER_MODE_LABEL: "Automatically Enable/Disable",
        AUTO_TOGGLE_STREAMER_MODE_DESCRIPTION:
          "Automatically enable/disable Streamer Mode if OBS or XSplit are running on this computer.",
        HIDE_INSTANT_INVITES_LABEL: "Hide Invite Links",
        HIDE_INSTANT_INVITES_DESCRIPTION:
          "Recommended if you don't want random people accessing your Discord servers.",
        DISABLE_SOUNDS_LABEL: "Disable Sounds",
        DISABLE_SOUNDS_DESCRIPTION: "All sound effects will be disabled.",
        DISABLE_NOTIFICATIONS_LABEL: "Disable Notifications",
        DISABLE_NOTIFICATIONS_DESCRIPTION:
          "All desktop notifications will be disabled.",
        HIDE_WINDOW_FROM_STREAM_LABEL:
          "Hide Discord Window from Screen Capture",
        HIDE_WINDOW_FROM_STREAM_DESCRIPTION:
          "Hides most Discord windows from most screen capture software.",
        HIDE_PERSONAL_INFORMATION_LABEL: "Hide Personal Information",
        HIDE_PERSONAL_INFORMATION_DESCRIPTION:
          "Hides email, connected accounts, notes, and anonymizes number tags.",
        CUSTOM_COLOR: "Custom Color",
        COLOR_PICKER_PRESETS: "Presets",
        COLOR_PICKER_CUSTOM: "Custom",
        COLOR_PICKER_USE_DEFAULT: "Use Default",
        TAP_ADD_NICKNAME: "Tap to add a nickname",
        CHANGE_NICKNAME: "Change Nickname",
        NICKNAME: "Nickname",
        SERVER_NICKNAME: "Server Nickname",
        RESET_NICKNAME: "Reset Nickname",
        CHANGE_NICKNAME_WARNING:
          "\nNicknames are visible to everyone on this server. Do not change them unless you are enforcing a naming system\nor clearing a bad nickname.\n",
        NICKNAME_CHANGED: "Nickname changed to !!{nickname}!!.",
        NICKNAME_CLEARED: "Nickname cleared.",
        FRIEND_NICKNAME: "Friend Nickname",
        RESET_FRIEND_NICKNAME: "Reset Friend Nickname",
        ADD_FRIEND_NICKNAME: "Add Friend Nickname",
        CHANGE_FRIEND_NICKNAME: "Change Friend Nickname",
        FRIEND_NICKNAME_DESCRIPTION:
          "Find a friend faster with a personal nickname. It will only be visible to you in your direct messages.",
        MORE_INFO: "More Info",
        MORE_INFO_CLYDE_LEGAL:
          "Discord’s AI chatbot. I’m experimental and currently free to try out. Please @ me! But not for advice, Discord support, or safety issues. I use OpenAI technology, but they can’t use your data to train their general models.",
        MORE_INFO_HELP_CENTER: "Help Center Article",
        NOTE: "Note",
        NOTE_PLACEHOLDER: "Click to add a note",
        NOTE_PLACEHOLDER_MOBILE: "Tap to add a note",
        ADD_NOTE: "Add Note",
        LOADING_NOTE: "Loading Note",
        EDIT_NOTE: "Edit Note",
        CHANGE_DM_OWNER: "Make Group Owner",
        TRANSFER_GROUP_OWNERSHIP: "Transfer Group Ownership",
        CONFIRM_CHANGE_DM_OWNER:
          "Transfer ownership of this group to $[](usernameHook)?",
        WATCH_STREAM: "Watch Stream",
        JOIN_STREAM: "Join Stream",
        WATCH_USER_STREAM: "Watch !!{streamerName}!!'s Stream",
        WATCH_STREAM_STREAMING: "You’re Streaming!",
        WATCH_STREAM_WATCHING: "Watching Stream",
        WATCH_STREAM_TIP: "Double click user to watch",
        WATCH_STREAM_IN_APP: "Go to the app to watch",
        WATCH: "Watch",
        STREAMER_PLAYING: "playing !!{game}!!",
        STREAM_PLAYING: "Playing !!{game}!!",
        LIVE: "Live",
        STOP_WATCHING: "Stop Watching",
        STOP_WATCHING_USER: "Stop Watching — !!{username}!!",
        STOP_STREAMING: "Stop Streaming",
        START_STREAMING: "Start Streaming",
        STREAM_ENDED: "This stream has ended. *cricket noise*",
        STREAM_HIDDEN: "This stream has been hidden.",
        CLOSE_WINDOW: "Close Window",
        CLOSE_STREAM: "Close Stream",
        STREAM_FAILED_TITLE: "Stream failed to start :(",
        STREAM_FAILED_DESCRIPTION:
          "Having issues with your stream? [Let us try to help.]({helpUrl})",
        STREAM_BAD_STREAMER:
          "Your stream currently has reduced video or audio quality. This may be due to network conditions.",
        STREAM_BAD_SPECTATOR:
          "The stream you're viewing currently has reduced video or audio quality. This may be due to network conditions.",
        STREAM_NETWORK_QUALITY_ERROR:
          "Your network connection may be causing a decrease in video and audio quality. To improve voice audio, disable the stream.",
        STREAM_RECONNECTING_ERROR: "You've been disconnected...",
        STREAM_RECONNECTING_ERROR_SUBTEXT:
          "Sit tight, we're patching you back in!",
        STREAM_SOUNDSHARE_FAILED:
          "Hey, something went wrong and we couldn't stream the sound from your application.",
        STREAM_PREVIEW_PAUSED: "Your stream is still running!",
        STREAM_PREVIEW_PAUSED_SUBTEXT:
          "We’ve paused this preview to save your resources.",
        STREAM_CAPTURE_PAUSED: "Stream Paused",
        STREAM_CAPTURE_PAUSED_DETAILS: "Swap to your application to resume.",
        STREAM_CAPTURE_PAUSED_DETAILS_VIEWER:
          "!!{username}!! has minimized their application... sit tight!",
        POPOUT_PLAYER: "Pop Out",
        POPOUT_PLAYER_OPENED: "You've popped out the player to another window",
        POPOUT_RETURN: "Return to App",
        POPOUT_STAY_ON_TOP: "Stay On Top",
        POPOUT_REMOVE_FROM_TOP: "Remove From Top",
        STREAM_FULL_MODAL_HEADER: "Stream is Full",
        STREAM_FULL_MODAL_BODY:
          "Sorry, this stream has the max number of viewers.",
        STREAM_NO_PREVIEW: "Stream just started. Get in here!",
        STREAM_PREVIEW_LOADING: "Generating preview...",
        STREAM_QUALITY_DISCORD_NITRO_UNLOCK: "Unlock with Discord Nitro",
        STREAMER_SETTINGS_TITLE: "Stream Settings",
        OPEN_IN_THEATER: "Open in Theater",
        SWITCH_PIP_TO_USER_STREAM: "Switch to !!{username}!!'s Stream",
        SWITCH_PIP_TO_GO_LIVE: "Switch to Go Live",
        SWITCH_PIP_TO_ACTIVITY_NAME: "Switch to {activityName}",
        SWITCH_PIP_TO_ACTIVITY: "Switch to Activity",
        SHARE_YOUR_SCREEN: "Share Your Screen",
        VIDEO_CAPACITY_MODAL_HEADER: "Video isn't available",
        VIDEO_CAPACITY_MODAL_BODY:
          "Sorry, video chat isn't available when there's more than {videoUserLimit} people in the voice channel.",
        STREAM_VOLUME: "Stream Volume",
        STREAM_WATCH_MULTIPLE_TOOLTIP: "Start watching multiple streams",
        STREAM_SHOW_NON_VIDEO: "Show Non-Video Participants",
        SHOW_SELF_VIDEO: "Show My Camera",
        SHOW_SELF_STREAM: "Show My Screen Share",
        SHOW_NEW_MESSAGE_PREVIEWS: "Show New Message Previews",
        IOS_STREAM_SHOW_NON_VIDEO: "Show Non-Video Participants",
        STREAM_PARTICIPANTS_HIDDEN:
          "Participants without video are currently hidden.\n\nWould you like to show them?",
        IOS_STREAM_PARTICIPANTS_HIDDEN:
          "Participants without video are currently hidden. Would you like to show them?",
        MOBILE_STREAM_PARTICIPANTS_HIDDEN:
          "Participants without video are currently hidden. Would you like to show them?",
        STREAM_SHOW_ALL_PARTICIPANTS: "Show All Participants",
        STREAM_FPS_OPTION: "{value} FPS",
        STREAM_RESOLUTION: "Resolution",
        STREAM_PREMIUM_UPSELL_HEADER:
          "Unlock HD Video streaming with Discord Nitro",
        STREAM_PREMIUM_UPSELL_BANNER: "Unlock all resolutions and frame rates.",
        STREAM_PREMIUM_UPSELL_BANNER_PRESET_DOCUMENTS:
          "Level up your streaming.",
        STREAM_PREMIUM_UPSELL_BANNER_CTA: "Get Nitro",
        STREAM_PREMIUM_UPSELL_BODY:
          "Stream HD resolutions at 60 frames per second, get access to chat perks, [and more with Discord Nitro!](onPressMore)",
        STREAM_PREMIUM_UPSELL_BODY_NO_CTA:
          "Stream HD resolutions at 60 frames per second, get access to chat perks, and more with Discord Nitro!",
        STREAM_PREMIUM_UPSELL_WITH_ACTION:
          "Lift off with Discord Nitro to stream HD resolutions at 60 frames per second. [Learn more](onClick).",
        STREAM_PREMIUM_UPSELL_CTA: "Subscribe",
        STREAM_PRESET_DOCUMENTS_DESCRIPTION_NITRO:
          "The picture will be clear (Source) with a slow frame rate ({fps} FPS).",
        STREAM_PRESET_VIDEO: "Smoother Video",
        STREAM_PRESET_DOCUMENTS: "Better Text Readability",
        STREAM_PRESET_CUSTOM: "Custom",
        STREAM_QUALITY: "Stream Quality",
        STREAM_SINGLE_PERSON_BODY:
          "No one else is here yet. Invite people to join you!",
        STREAM_SINGLE_PERSON_BODY_ALT:
          "No one else is here yet. Tell your friends to come join you!",
        STREAM_SINGLE_PERSON_INVITE: "Invite people to join you!",
        STREAM_SINGLE_PERSON_NO_INVITE: "You're alone in this call.",
        STREAM_NO_PERMISSION_CTA: "No permission",
        DISPLAY_NAME: "Display Name",
        PICTURE_IN_PICTURE_COLLAPSE: "Collapse",
        PICTURE_IN_PICTURE_EXPAND: "Expand",
        PICTURE_IN_PICTURE_SHOW_PIP: "Show PIP",
        PICTURE_IN_PICTURE_DISMISS: "Dismiss",
        STREAM_REPORT_A_PROBLEM: "Report a problem",
        STREAM_REPORT_PROBLEM_MENU_ITEM: "Report Problem",
        STREAM_REPORT_A_PROBLEM_POST_STREAM: "How'd the stream go?",
        STREAM_REPORT_PROBLEM: "Report a problem with your stream",
        STREAM_REPORT_PROBLEM_MOBILE: "Report Stream Issue",
        STREAM_REPORT_PROBLEM_HEADER_MOBILE: "Had an issue?",
        STREAM_REPORT_PROBLEM_BODY:
          "Sorry you had an issue! Let us know what happened.",
        STREAM_REPORT_RATING_BODY:
          "Tell us about your stream watching experience.",
        STREAM_REPORT_RATING_BODY_STREAMER:
          "Tell us about your streaming experience.",
        STREAM_REPORT_LABEL: "Streaming issue",
        STREAM_REPORT_PLACEHOLDER: "Select your issue",
        STREAM_REPORT_BLACK: "Stream is black",
        STREAM_REPORT_BLURRY: "Stream is blurry or pixelated",
        STREAM_REPORT_LAGGING: "Stream is lagging or refreshing",
        STREAM_REPORT_OUT_OF_SYNC: "Stream is out of sync with voice",
        STREAM_REPORT_AUDIO_MISSING: "Application audio is absent",
        STREAM_REPORT_AUDIO_POOR: "Application audio is low quality",
        STREAM_REPORT_ENDED_BLACK: "Stream was black",
        STREAM_REPORT_ENDED_BLURRY: "Stream was blurry or pixelated",
        STREAM_REPORT_ENDED_LAGGING: "Stream was lagging or refreshing",
        STREAM_REPORT_ENDED_OUT_OF_SYNC: "Stream was out of sync with voice",
        STREAM_REPORT_ENDED_AUDIO_MISSING: "Application audio was absent",
        STREAM_REPORT_ENDED_AUDIO_POOR: "Application audio was low quality",
        STREAM_REPORT_ENDED_STREAM_STOPPED_UNEXPECTEDLY:
          "Stream stopped unexpectedly",
        STREAM_REPORT_SUBMIT: "Submit",
        STREAM_REPORTED: "Feedback Submitted",
        STREAM_REPORTED_BODY:
          "Thanks for reporting your issue! Feedback like yours helps us improve Screen Share.",
        MOBILE_STREAM_ACTIVE_HEADER: "You’re sharing your screen!",
        MOBILE_STREAM_ACTIVE_BODY:
          "You can switch to other apps for your friends to see.",
        MOBILE_STREAM_ACTIVE_SOUNDSHARE_WARNING_ANDROID:
          "Audio sharing is not supported on Android system version 9 or earlier.",
        MOBILE_STREAM_STOP_SHARING: "Stop sharing",
        MOBILE_STREAM_SCREEN_SHARE: "Screen Share",
        MOBILE_STREAM_SCREEN_SHARING: "Sharing screen",
        SCREEN_SHARE_NFX_TITLE: "Mobile Screen Share is here!",
        SCREEN_SHARE_NFX_BODY:
          "Watch videos, stream gameplay, or browse other apps together by sharing your screen with your friends.",
        SCREEN_SHARE_NFX_TRY: "Try it out!",
        SCREEN_SHARE_NFX_SKIP: "Skip for now",
        VOICE_CONTROLS_SHEET_TOOLTIP_SWIPE_UP: "Swipe up",
        MAIN_TAB_FEEDBACK_SHEET_TITLE: "How did it go?",
        MAIN_TAB_FEEDBACK_PROMPT:
          "Please tell us about your experience with the new app layout.",
        MAIN_TAB_FEEDBACK_ISSUE_SECTION_HEADER: "How can we improve?",
        MAIN_TAB_FEEDBACK_OPTION_BUG: "The app has a critical bug",
        MAIN_TAB_FEEDBACK_OPTION_PERFORMANCE: "The app feels slow",
        MAIN_TAB_FEEDBACK_OPTION_CRASH:
          "The app isn't working/crashes/is glitchy for me",
        MAIN_TAB_FEEDBACK_OPTION_MISSING_FEATURE:
          "I'm missing features I was using prior to the change",
        MAIN_TAB_FEEDBACK_OPTION_LAYOUT:
          "The layout feels overwhelming to look at",
        MAIN_TAB_FEEDBACK_OPTION_INFORMATION:
          "The app is showing me too much information I don't care about",
        MAIN_TAB_FEEDBACK_OPTION_VIBE:
          'The "vibe" or aesthetics feel off to me',
        MAIN_TAB_FEEDBACK_OPTION_NAVIGATION:
          "I'm having issues navigating through the app",
        MAIN_TAB_FEEDBACK_OPTION_SERVERS:
          "The Servers Tab is confusing and difficult to navigate",
        MAIN_TAB_FEEDBACK_OPTION_SOCIAL:
          "Discord is emphasizing social features too much",
        MAIN_TAB_FEEDBACK_OPTION_NOTIFICATIONS:
          "Notifications are hard to manage",
        MAIN_TAB_FEEDBACK_OPTION_OTHER: "Other",
        CALL_FEEDBACK_SHEET_TITLE: "How'd the call go?",
        CALL_FEEDBACK_PROMPT: "Tell us about your call experience.",
        CALL_FEEDBACK_ISSUE_SECTION_HEADER: "Choose your main issue",
        CALL_FEEDBACK_OPTION_OTHER: "Other",
        CALL_FEEDBACK_OPTION_COULD_NOT_HEAR_AUDIO:
          "I couldn't hear audio at all",
        CALL_FEEDBACK_OPTION_NOBODY_COULD_HEAR_ME: "Nobody could hear me",
        CALL_FEEDBACK_OPTION_AUDIO_ECHOS: "Audio had echos or feedback",
        CALL_FEEDBACK_OPTION_AUDIO_ROBOTIC: "Audio was robotic or distorted",
        CALL_FEEDBACK_OPTION_AUDIO_CUT: "Audio cut in and out",
        CALL_FEEDBACK_OPTION_BAD_VOLUME: "Volume was too low or high",
        CALL_FEEDBACK_OPTION_BACKGROUND_NOISE: "Background noise was too loud",
        CALL_FEEDBACK_OPTION_SPEAKERPHONE: "Issues with speakerphone",
        CALL_FEEDBACK_OPTION_HEADSET: "Issues with headset/bluetooth",
        CALL_FEEDBACK_CONFIRMATION: "Thanks for the feedback!",
        CALL_FEEDBACK_SENTIMENT_NEGATIVE: "Negative",
        CALL_FEEDBACK_SENTIMENT_NEUTRAL: "Neutral",
        CALL_FEEDBACK_SENTIMENT_POSITIVE: "Positive",
        FEEDBACK_ISSUE_TITLE: "Your Issue",
        FEEDBACK_MODAL_TITLE: "Submit Feedback",
        FEEDBACK_DESCRIBE_ISSUE: "Describe your issue",
        FEEDBACK_NEED_MORE_HELP:
          "Need help with your issue? [Open a help request with our customer experience team.]({helpdeskURL})",
        SUMMARIES_FEEDBACK_MENU_ITEM_LABEL: "Give feedback",
        SUMMARIES_FEEDBACK_HEADER: "How was the summary?",
        SUMMARIES_FEEDBACK_BODY: "Tell us about the quality of the summary.",
        SUMMARIES_FEEDBACK_PROBLEM_TITLE: "Had an issue?",
        SUMMARIES_FEEDBACK_OPTION_DUPLICATED: "Duplicated",
        SUMMARIES_FEEDBACK_OPTION_TOO_GENERIC: "Too generic",
        SUMMARIES_FEEDBACK_OPTION_TOO_MANY:
          "Too many summaries for one conversation",
        SUMMARIES_FEEDBACK_OPTION_INACCURATE:
          "Inaccurately summarized the conversation",
        SUMMARIES_FEEDBACK_OPTION_NOT_USEFUL:
          "Summaries aren't useful in this channel",
        SUMMARIES_FEEDBACK_OPTION_OTHER: "Other",
        SUMMARIES_ACTIONS_CREATE_THREAD_FAILED: "Could not create thread",
        SUMMARIES_ACTIONS_NOTIFICATIONS_LABEL: "Notifications",
        SUMMARIES_ACITONS_SHARE_LABEL: "Share",
        SUMMARIES_ACITONS_SHARE_CONTENT:
          "Talking about !!{topic}!! - !!{url}!!",
        SUMMARIES_ACITONS_SHARE_FAILED: "Failed to share the conversation",
        SUMMARIES_NOTIFICATIONS_HEADER: "Highlight Notifications",
        SUMMARIES_NOTIFICATIONS_FOOTER:
          "Change this in [server settings](notifSettingsHook) at any time.",
        GENERIC_FEEDBACK_THANKS: "Thanks for your feedback!",
        SUMMARIES_DELETE_SUMMARY: "Delete Summary",
        INVITE_URL: "Invite URL",
        VANITY_URL_USES:
          "{uses, plural, =0 {0 uses} one {1 use} other {{uses} uses}}",
        REMOVE_VANITY_URL: "Remove Custom Invite Link",
        VANITY_URL_HEADER_USES:
          "Custom Invite Link ({uses, plural, =0 {0 uses} one {1 use} other {{uses} uses}})",
        VANITY_URL_HELP:
          "\nMake your server easily accessible with a fancy Custom Invite Link of your choosing.\nBe aware that this makes your server accessible to anyone who uses this link.\n",
        VANITY_URL_HELP_CONFLICT:
          "\nKeep in mind that we may take back Custom Invite Links if we discover abuse or if there's an intellectual property conflict.",
        VANITY_URL_HELP_EXTENDED:
          "This server is now accessible to everyone at **!!{url}!!**",
        VANITY_URL_HELP_EXTENDED_LINK:
          "This server is now accessible to everyone at [!!{urlText}!!]({urlValue})",
        CHANGE_VANITY_URL_ERROR:
          "\nCustom Invite Link could not be changed because it contains invalid characters, was too short, or is already taken.\nCustom Invite Links can only contain letters, numbers, or dashes.\n",
        VANITY_URL_HINT_MOBILE: "your-url-here",
        VANITY_URL_DEFAULT_CHANNEL:
          "Remember that Custom Invite Links require one text channel to be accessible to all members in order to work.",
        CUSTOM_INVITE_DEFAULT_CHANNEL:
          "Remember that Custom Invite Links require one text channel to be accessible to all members in order to work.",
        SET_VANITY_URL_ERROR_MESSAGE_UNKNOWN_CHANNEL:
          "You need to set a text channel that is accessible to all members before setting a Custom Invite Link.",
        SET_VANITY_URL_ERROR_MESSAGE_INVALID_PERMISSIONS:
          "You do not have access to this feature.",
        SET_VANITY_URL_ERROR_MESSAGE_INVALID_ACCESS:
          "Your server does not have access to this feature.",
        SET_VANITY_URL_ERROR_MESSAGE_REQUIRED_FOR_PUBLISHED_GUILDS:
          "You cannot clear your custom invite URL while your server web page is published.",
        SET_VANITY_URL_ERROR_MESSAGE_REQUIREMENTS_NOT_MET:
          "Custom Invite Link requires Server Boosting Level 3, or being a partnered, verified, HypeSquad event server",
        VANITY_URL_EMPLOYEE_ONLY_GUILD_DISABLED:
          "Can't set vanity url for an internal employee only server",
        GUILD_WEB_PAGE_VANITY_URL_CANNOT_BE_MODIFIED:
          "Servers with a published discovery landing page can only remove vanity URLs but cannot modify it",
        GROUP_DMS: "Group DMs",
        GROUP_NAME_PROMPT: "Group name (optional)",
        UNNAMED: "Unnamed",
        LEAVE_GROUP_DM_TITLE: "Leave '!!{name}!!'",
        LEAVE_GROUP_DM_MANAGED_TITLE: "Leave !!{name}!! Group",
        GROUP_DM_ALONE: "{name}'s Group",
        GROUP_DM_UPSELL_TEXT: "Just a few things before you add friends.",
        GROUP_DM_UPSELL_MSG_NOTICE:
          "People you add to this group can see the full message history.",
        GROUP_DM_UPSELL_LINK_NOTICE: "Shared links expire after 24 hours.",
        LEAVE_GROUP_DM_MANAGED_BODY:
          "\nAre you sure you want to leave? You won't be able to rejoin this group unless\n**!!{name}!!** adds you again.\n  ",
        LEAVE_GROUP_DM_BODY:
          "\nAre you sure you want to leave **!!{name}!!**? You won't be able to rejoin this group unless you are re-invited.\n  ",
        LEAVE_GROUP_DM: "Leave Group",
        LEAVE_GROUP_DM_ERROR:
          "Whoops, something went wrong. Give it another try?",
        LEAVE_GROUP_DM_SILENTLY: "Leave without notifying other members",
        LEAVE_GROUP_DM_SILENTLY_COMMAND_OPTION: "silent",
        REMOVE_ICON: "Remove Icon",
        REMOVE_FROM_GROUP: "Remove From Group",
        SEARCH_FRIENDS_A11Y_LABEL: "Search your friends",
        GROUP_DM_SEARCH_PLACEHOLDER: "Type the username of a friend",
        GROUP_DM_ADD_FRIENDS: "Add Friends to DM",
        GROUP_DM_ADD_MEMBERS: "Add Members",
        GROUP_DM_MEMBER_COUNT: "{members, number} Members",
        GROUP_DM_ADD_MEMBERS_COUNT: "{numMembers} of {maxMemberLimit} members",
        GROUP_DM_CREATE_MEMBERS_COUNT: "{numMembers} of {maxMemberLimit}",
        GROUP_DM_INVITE_WITH_NAME: "Invite friends to !!{groupname}!!",
        NEW_GROUP_DM: "New Group DM",
        NEW_GROUP_DM_CREATE_WITH: "Create a new group with !!{recipient}!!",
        NEW_GROUP: "New Group",
        GROUP_DM_HEADER: "Select Friends",
        CREATE_DM: "Create DM",
        CREATE_GROUP_DM: "Create Group DM",
        DM_SEND_MESSAGE: "Send a message",
        DM_NO_FRIENDS:
          "Add some friends to start chatting, playing games, and more!",
        GROUP_DM_INVITE_TO: "To:",
        GROUP_DM_INVITE_EMPTY:
          "No friends found that are not already in this DM.",
        GROUP_DM_INVITE_FULL_MAIN: "The party is full!",
        GROUP_DM_INVITE_FULL_SUB: "Groups have a 10 member limit.",
        GROUP_DM_INVITE_FULL_SUB2: "This group has a {number} member limit.",
        GROUP_DM_INVITE_WILL_FILL_MOBILE:
          "The selected users will fill the group.",
        GROUP_DM_INVITE_REMAINING:
          "{number, plural, one {You can add 1 more friend.} other {You can add {number} more friends.}}",
        GROUP_DM_INVITE_UNSELECT_USERS:
          "{number, plural, one {You must unselect 1 friend.} other {You must unselect {number} friends.}}",
        GROUP_DM_INVITE_NONE_REMAINING: "You can't add any more friends.",
        GROUP_DM_INVITE_NO_FRIENDS: "You don't have any friends to add!",
        GROUP_DM_INVITE_NOT_FRIENDS:
          "You need to be friends with **!!{username}!!** to start a group DM.",
        GROUP_DM_INVITE_CONFIRM: "Confirm New Group",
        GROUP_DM_INVITE_CONFIRM_BUTTON: "Create Group",
        GROUP_DM_INVITE_CONFIRM_DESCRIPTION:
          "You already have a group with these people! Are you sure you want to create a new one?",
        GROUP_DM_INVITE_SELECT_EXISTING: "Existing Groups",
        CALL: "Call",
        RING: "Ring",
        RING_USERNAME_A11Y_LABEL: "Ring !!{username}!!",
        STOP_RINGING: "Stop Ringing",
        STOP_RINGING_USERNAME_A11Y_LABEL: "Stop Ringing !!{username}!!",
        VOICE_STATUS_RINGING: "Ringing…",
        VOICE_STATUS_CONNECTING: "Connecting…",
        VOICE_STATUS_NOT_CONNECTED_MOBILE:
          "You are disconnected from this call.",
        VOICE_STATUS_NOT_CONNECTED: "Not Connected",
        IN_THE_VOICE_CHANNEL: "In the voice channel",
        CALL_INVITE_NOT_FRIENDS:
          "You need to be friends with **!!{username}!!** to start a call",
        START_CALL: "Start Call",
        JOIN_CALL: "Join Call",
        VOICE_CALL: "Voice Call",
        START_VOICE_CALL: "Start Voice Call",
        JOIN_VOICE_CALL: "Join Voice Call",
        JOIN_VOICE: "Join Voice",
        JOIN_MUTED: "Join Muted",
        VIDEO_CALL: "Video Call",
        START_VIDEO_CALL: "Start Video Call",
        JOIN_VIDEO_CALL: "Join Video Call",
        MISSED_CALL: "Missed Call",
        CALL_ENDED: "Call Ended",
        ONGOING_CALL: "Ongoing Call",
        ONGOING_CALL_YOU_ARE_ALL_ALONE:
          "You're alone in this call. \n Others in this chat can join at any time.",
        VIDEO_CALL_RETURN_TO_GRID: "Grid",
        VIDEO_CALL_RETURN_TO_LIST: "List",
        VIDEO_CALL_AUTO_SELECT: "Focus",
        VIDEO_CALL_SHOW_MEMBERS: "Show Members",
        VIDEO_CALL_HIDE_MEMBERS: "Hide Members",
        VIDEO_CALL_SHOW_CHAT: "Show Chat",
        VIDEO_CALL_HIDE_CHAT: "Hide Chat",
        VIDEO_CALL_VIEW_ALL_COUNT: "View all ({count})",
        CAMERA_UNAVAILABLE: "Camera Unavailable",
        CAMERA_DISABLED_LIMIT_REACHED:
          "Video chat isn't available for more than {limit, plural, one {# user} other {# users}}",
        CAMERA_DISABLED_STAGE_LIMIT_REACHED:
          "This Stage has reached its audience limit for Video Stages. To enable Video and Go Live, upgrade to the next Boost level.",
        CAMERA_DISABLED_STAGE_LIMIT_REACHED_MAX:
          "This Stage has reached its audience limit for Video Stages.",
        BROWSER_NOT_SUPPORTED: "Browser Not Supported",
        ANSWER: "Answer",
        DECLINE: "Decline",
        LEAVE_CALL: "Leave Call",
        NOT_NOW: "Not Now",
        FOCUS_PARTICIPANT: "Focus This Person",
        UNFOCUS_PARTICIPANT: "Unfocus This Person",
        GROUP_NAME: "Group Name",
        CUSTOMIZE_GROUP: "Customize Group",
        MUTE_GROUP_DM: "Mute **!!{name}!!**",
        REGION: "region",
        CALL_UNAVAILABLE: "Call Unavailable",
        CALL_UNAVAILABLE_BLOCKED_USERS:
          "You cannot call a user you have blocked",
        VOICE_UNAVAILABLE: "Voice Unavailable",
        VIDEO_UNAVAILABLE: "Video Unavailable",
        GROUPS: "Groups",
        CONTROL_VOLUME: "Control volume",
        CAMERA_ON: "Turn On Camera",
        CAMERA_OFF: "Turn Off Camera",
        CAMERA_SWITCH: "Switch Camera",
        ENABLE_CAMERA: "Enable Camera",
        FULL_SCREEN: "Full Screen",
        EXIT_FULL_SCREEN: "Exit Full Screen",
        SCREENSHARE_CHANGE_WINDOWS: "Change Windows",
        CAMERA_NO_DEVICE: "Uh oh, we can't detect any camera.",
        SCREENSHARE_UNAVAILABLE: "Screen Sharing Unavailable",
        SCREENSHARE_UNAVAILABLE_DOWNLOAD_APP:
          "Download the Discord Desktop app to use screen sharing!",
        GROUP_DM_INVITE_LINK_EXPIRE_24_HOURS: "Invite links expire in 24 hours",
        GROUP_DM_INVITE_LINK_MOBILE_TITLE: "Create and Share an invite link",
        GROUP_DM_INVITE_LINK_SHARE_MESSAGE:
          "Hey there! !!{username}!! invited you to join their group DM. Invite expires in 24 hours. !!{link}!!",
        GROUP_DM_CREATE_SHARE_LINK_WHEN_READY: "Share a link when you're ready",
        GROUP_DM_ADD_ERROR:
          "Whoops, something went wrong. Give it another try?",
        GROUP_DM_INVITE_LINK_TITLE: "Or, send an invite link to a friend!",
        GROUP_DM_INVITE_LINK_CREATE: "Create",
        GROUP_DM_INVITE_LINK_EXAMPLE: "example",
        INVITE_LINKS: "Invite Links",
        CURRENTLY_IN_VOICE_EMPTY: "No one is currently in voice.",
        CURRENTLY_IN_VOICE_1: "!!{a}!! is currently in voice.",
        CURRENTLY_IN_VOICE_2: "!!{a}!! and !!{b}!! are currently in voice.",
        CURRENTLY_IN_VOICE_2_N:
          "!!{a}!!, !!{b}!!, and {n, plural, one {1 other} other {{n} others}} are currently in voice.",
        CURRENTLY_IN_STAGE_EMPTY: "No one is currently speaking.",
        CURRENTLY_IN_STAGE_1: "!!{a}!! is currently speaking.",
        CURRENTLY_IN_STAGE_2: "!!{a}!! and !!{b}!! are currently speaking.",
        CURRENTLY_IN_STAGE_2_N:
          "!!{a}!!, !!{b}!!, and {n, plural, one {1 other} other {{n} others}} are currently speaking.",
        CURRENTLY_IN_VOICE_1_SHORT: "!!{a}!!",
        CURRENTLY_IN_VOICE_2_SHORT: "!!{a}!! and !!{b}!!",
        CURRENTLY_IN_VOICE_2_N_SHORT:
          "!!{a}!!, !!{b}!!, and {n, plural, one {1 other} other {{n} others}}",
        CAMERA_PREVIEW_MENU_ITEM: "Preview Camera",
        CAMERA_PREVIEW_ALWAYS_PREVIEW: "Always preview video",
        CAMERA_PREVIEW_ALWAYS_PREVIEW_NOTE:
          "Pops up preview modal every time you turn on video",
        CAMERA_CHANGE_VIDEO_BACKGROUND_MENU_ITEM: "Change Video Background",
        CAMERA_PREVIEW_MODAL_HEADER: "Ready to video chat?",
        CAMERA_PREVIEW_CAMERA: "Camera",
        CAMERA_PREVIEW_VIDEO_BACKGROUND: "Video Background",
        CAMERA_PREVIEW_VIDEO_BACKGROUND_NONE: "None",
        CAMERA_PREVIEW_VIDEO_BACKGROUND_BLUR: "Blur",
        CAMERA_PREVIEW_VIDEO_BACKGROUND_UPLOAD_TOOLTIP_PREMIUM:
          "Upload your own custom backgrounds with Nitro.",
        CAMERA_PREVIEW_VIDEO_BACKGROUND_UPLOAD_TOOLTIP_MAX_REACHED:
          "You’ve hit the limit of {maxCustomBackgrounds} backgrounds! Remove a background before adding another.",
        CAMERA_PREVIEW_VIDEO_BACKGROUND_UPSELL_TOOLTIP:
          "Get your own custom video backgrounds and more with Nitro!",
        CAMERA_PREVIEW_VIDEO_BACKGROUND_NEW_ANIMATED_TOOLTIP:
          "NEW! You can now choose a GIF or or upload a custom animated background with Nitro.",
        CAMERA_PREVIEW_VIDEO_BACKGROUND_CUSTOM: "Custom",
        CAMERA_PREVIEW_VIDEO_BACKGROUND_CHANGE_HEADER:
          "Change Video Background",
        CAMERA_PREVIEW_VIDEO_BACKGROUND_CHANGE_BACKGROUND: "Change Background",
        CAMERA_PREVIEW_MODAL_VIDEO_BACKGROUND_EDUCATION_SUBTITLE_2:
          "Express a mood or hide your messy room. Nitro subscribers can upload custom images.",
        CAMERA_PREVIEW_VIDEO_BACKGROUND_CUSTOM_TOOLTIP: "Custom Background",
        CAMERA_PREVIEW_VIDEO_BACKGROUND_UPLOAD_SUBTITLE:
          "File should be PNG, JPG, GIF, or MP4 (10 MB max)",
        VIDEO_BACKGROUND_ERROR_APPLY:
          "Uh oh! Something went wrong when setting your background. Please try again or use a different background.",
        VIDEO_BACKGROUND_ERROR_UPLOAD:
          "Uh oh! Something went wrong when uploading your background. Please try again or use a different image.",
        VIDEO_BACKGROUND_ERROR_UPLOAD_FILE_SIZE:
          "Uh oh! That file size was too large. Please use a different image under 10 MB.",
        VIDEO_BACKGROUND_DEFAULT_BACKGROUND_NAME_1: "Cybercity",
        VIDEO_BACKGROUND_DEFAULT_BACKGROUND_NAME_2: "Discord the Movie",
        VIDEO_BACKGROUND_DEFAULT_BACKGROUND_NAME_3: "Wumpus Vacation",
        VIDEO_BACKGROUND_DEFAULT_BACKGROUND_NAME_4: "Vaporwave",
        VIDEO_BACKGROUND_DEFAULT_BACKGROUND_NAME_7: "Capernite Day",
        VIDEO_BACKGROUND_DEFAULT_BACKGROUND_NAME_8: "Capernite Night",
        VIDEO_BACKGROUND_DEFAULT_BACKGROUND_NAME_9: "Hacker Den",
        VIDEO_BACKGROUND_DEFAULT_BACKGROUND_NAME_10: "Wumpice",
        VIDEO_BACKGROUND_BIRTHDAY_BACKGROUND_NAME_1: "7th Birthday",
        VIDEO_BACKGROUND_CONTEXT_MENU_LABEL: "Video Background Actions",
        VIDEO_BACKGROUND_REMOVE: "Remove Background",
        VIDEO_BACKGROUND_CANNOT_REMOVE_DEFAULT:
          "Cannot remove default backgrounds",
        VIDEO_BACKGROUND_CANNOT_REMOVE_SELECTED:
          "Cannot remove currently selected background",
        VIDEO_BACKGROUND_UPSELL_TITLE: "Wanna upload your own background?",
        VIDEO_BACKGROUND_UPSELL_BODY:
          "Get more customization by uploading your own video background, custom global emoji, [and more with Discord Nitro!](onLearnMore)",
        VIDEO_BACKGROUND_UPSELL_BODY_TIER_0:
          "Get more customization by uploading your own video background, custom global emoji, [and more with Discord Nitro Basic!](onLearnMore)",
        VIDEO_BACKGROUND_FEEDBACK_HEADER: "How were video backgrounds?",
        VIDEO_BACKGROUND_FEEDBACK_BODY:
          "Tell us about your video backgrounds experience.",
        VIDEO_BACKGROUND_FEEDBACK_PROBLEM_TITLE: "Had an issue?",
        VIDEO_BACKGROUND_ISSUE_REPORTED_BODY:
          "Thanks for reporting your issue! Feedback like yours helps us improve Video Backgrounds",
        VIDEO_BACKGROUND_FEEDBACK_OPTION_BAD_OUTLINE:
          "The outline on my body was fuzzy or had a halo",
        VIDEO_BACKGROUND_FEEDBACK_OPTION_BACKGROUND_DETECTION_ACCURACY:
          "The background detection was not accurate",
        VIDEO_BACKGROUND_FEEDBACK_OPTION_FLICKERING:
          "I saw flickering objects on the screen",
        VIDEO_BACKGROUND_FEEDBACK_OPTION_BACKGROUND_DETECTION_LAG:
          "Background detection was laggy when I moved",
        MUTE_THEM: "Mute Them",
        UNMUTE_THEM: "Unmute Them",
        TURN_OFF_THEIR_VIDEO: "Turn Off Their Video",
        TURN_ON_THEIR_VIDEO: "Turn On Their Video",
        VIDEO_PAUSED: "Video paused",
        VIDEO_PAUSED_REASON: "Video paused due to unstable connection",
        UNSTABLE_CONNECTION: "Unstable Internet Connection",
        UNSTABLE_CONNECTION_REASON:
          "We paused {username}’s video to protect audio quality. We will turn it back on when your connection improves.",
        UNSTABLE_CONNECTION_REASON_2:
          "This video stream has been paused to ensure good audio quality. We'll turn it back on when the connection improves.",
        TURN_ON_VIDEO_ANYWAY: "Turn on video anyway",
        TURN_ON_VIDEOS_ANYWAY: "Turn on videos anyway",
        LEAVE_VIDEO_OFF: "Never mind",
        OVERLAY_FRIEND_CALLING: "!!{name}!! is calling you!",
        OVERLAY_UNLOCK_TO_ANSWER:
          "Unlock to answer $[!!{keybind}!!](keybindHook)",
        OVERLAY_UNLOCK_TO_JOIN: "Unlock to join $[!!{keybind}!!](keybindHook)",
        INCOMING_CALL: "Incoming Call",
        INCOMING_VIDEO_CALL: "Incoming Video Call",
        INCOMING_CALL_ELLIPSIS: "Incoming Call...",
        INCOMING_VIDEO_CALL_ELLIPSIS: "Incoming Video Call...",
        INCOMING_CALL_PREVIEW_CAMERA: "Preview my camera",
        SCREENSHARE_SCREEN: "Your Entire Screen",
        SCREENSHARE_SOURCE: "Source",
        SCREENSHARE_DESCRIPTION:
          "\nDiscord wants to share the contents of your screen with !!{name}!!.\n\nChoose which screen you'd like to share.\n  ",
        SCREENSHARE_STREAM_QUALITY: "Stream Quality",
        SCREENSHARE_FRAME_RATE: "Frame Rate",
        SCREENSHARE_RELAUNCH: "Screen Share Problems",
        SCREENSHARE_RELAUNCH_BODY:
          "Our robots have gone wild and need to re-launch Discord to get screen share working again. Are you sure you want to do this?",
        SCREENSHARE_RESOLUTION_ABBREVIATED: "{resolution}p",
        SCREENSHARE_FPS_ABBREVIATED: "{fps}FPS",
        SCREENSHARE_QUALITY_TOOLTIP_NORMAL: "Streaming quality",
        SCREENSHARE_QUALITY_TOOLTIP_PREMIUM: "Nitro streaming quality",
        SCREENSHARE_QUALITY_TOOLTIP_REDUCED: "Experiencing reduced quality",
        SCREENSHARE_STREAM_GIFTING_HEADER: "Give the gift of HD streaming",
        SCREENSHARE_STREAM_GIFTING_BODY:
          "Help a buddy out (and their viewers too!) by gifting higher stream quality.",
        SCREENSHARE_STREAM_GIFTING_DISMISS: "Dismiss",
        SCREENSHARE_STREAM_GIFTING_CTA: "Gift Nitro",
        SYSTEM_MESSAGE_RECIPIENT_ADD_HOOK:
          "$[!!{username}!!](usernameHook) added $[!!{otherUsername}!!](otherUsernameHook) to the group.",
        SYSTEM_MESSAGE_RECIPIENT_ADD:
          "[!!{username}!!](usernameOnClick) added [!!{otherUsername}!!](otherUsernameOnClick) to the group.",
        SYSTEM_MESSAGE_RECIPIENT_REMOVE_HOOK:
          "$[!!{username}!!](usernameHook) removed $[!!{otherUsername}!!](otherUsernameHook) from the group.",
        SYSTEM_MESSAGE_RECIPIENT_REMOVE:
          "[!!{username}!!](usernameOnClick) removed [!!{otherUsername}!!](otherUsernameOnClick) from the group.",
        SYSTEM_MESSAGE_RECIPIENT_REMOVE_SELF_HOOK:
          "$[!!{username}!!](usernameHook) left the group.",
        SYSTEM_MESSAGE_RECIPIENT_REMOVE_SELF:
          "[!!{username}!!](usernameOnClick) left the group.",
        SYSTEM_MESSAGE_CHANNEL_NAME_CHANGE:
          "[!!{username}!!](usernameOnClick) changed the channel name: **!!{channelName}!!**",
        SYSTEM_MESSAGE_CHANNEL_NAME_CHANGE2:
          "$[!!{username}!!](usernameHook) changed the channel name: **!!{channelName}!!**",
        SYSTEM_MESSAGE_FORUM_POST_TITLE_CHANGE:
          "[!!{username}!!](usernameOnClick) changed the post title: **!!{channelName}!!**",
        SYSTEM_MESSAGE_FORUM_POST_TITLE_CHANGE2:
          "$[!!{username}!!](usernameHook) changed the post title: **!!{channelName}!!**",
        SYSTEM_MESSAGE_CHANNEL_ICON_CHANGE_HOOK:
          "$[!!{username}!!](usernameHook) changed the group icon.",
        SYSTEM_MESSAGE_CHANNEL_ICON_CHANGE:
          "[!!{username}!!](usernameOnClick) changed the group icon.",
        SYSTEM_MESSAGE_CALL_STARTED_HOOK:
          "$[!!{username}!!](usernameHook) started a call.",
        SYSTEM_MESSAGE_CALL_STARTED:
          "[!!{username}!!](usernameOnClick) started a call.",
        SYSTEM_MESSAGE_CALL_STARTED_WITH_DURATION_HOOK:
          "$[!!{username}!!](usernameHook) started a call that lasted !!{callDuration}!!.",
        SYSTEM_MESSAGE_CALL_MISSED_HOOK:
          "You missed a call from $[!!{username}!!](usernameHook).",
        SYSTEM_MESSAGE_CALL_MISSED_WITH_DURATION_HOOK:
          "You missed a call from $[!!{username}!!](usernameHook) that lasted !!{callDuration}!!.",
        SYSTEM_MESSAGE_JOIN_CALL: "Join the call",
        SYSTEM_MESSAGE_PINNED_MESSAGE_NO_CTA:
          "[!!{username}!!](usernameOnClick) pinned a message to this channel.",
        SYSTEM_MESSAGE_PINNED_MESSAGE_NO_CTA_FORMATTED_HOOK:
          "$[!!{username}!!](usernameHook) pinned a message to this channel.",
        SYSTEM_MESSAGE_PINNED_MESSAGE_NO_CTA_FORMATTED_WITH_MESSAGE_HOOK:
          "$[!!{username}!!](usernameHook) pinned [a message](messageOnClick) to this channel.",
        SYSTEM_MESSAGE_PINNED_MESSAGE:
          "$[!!{username}!!](usernameHook) pinned a message to this channel. See all [pinned messages](pinsActionOnClick).",
        SYSTEM_MESSAGE_PINNED_MESSAGE_WITH_MESSAGE:
          "$[!!{username}!!](usernameHook) pinned [a message](messageOnClick) to this channel. See all [pinned messages](pinsActionOnClick).",
        SYSTEM_MESSAGE_PINNED_MESSAGE_MOBILE:
          "[!!{username}!!](usernameOnClick) pinned a message to this channel. See all [pinned messages](pinsOnClick).",
        SYSTEM_MESSAGE_GUILD_MEMBER_SUBSCRIBED_HOOK:
          "$[!!{username}!!](usernameHook) just boosted the server!",
        SYSTEM_MESSAGE_GUILD_MEMBER_SUBSCRIBED:
          "[!!{username}!!](usernameOnClick) just boosted the server!",
        SYSTEM_MESSAGE_GUILD_MEMBER_SUBSCRIBED_ACHIEVED_TIER_HOOK:
          "$[!!{username}!!](usernameHook) just boosted the server! !!{guildName}!! has achieved **{newTierName}!**",
        SYSTEM_MESSAGE_GUILD_MEMBER_SUBSCRIBED_ACHIEVED_TIER:
          "[!!{username}!!](usernameOnClick) just boosted the server! !!{guildName}!! has achieved **{newTierName}!**",
        SYSTEM_MESSAGE_GUILD_MEMBER_SUBSCRIBED_MANY_HOOK:
          "$[!!{username}!!](usernameHook) just boosted the server **{numSubscriptions}** times!",
        SYSTEM_MESSAGE_GUILD_MEMBER_SUBSCRIBED_MANY:
          "[!!{username}!!](usernameOnClick) just boosted the server **{numSubscriptions}** times!",
        SYSTEM_MESSAGE_GUILD_MEMBER_SUBSCRIBED_MANY_ACHIEVED_TIER_HOOK:
          "$[!!{username}!!](usernameHook) just boosted the server **{numSubscriptions}** times! !!{guildName}!! has achieved **{newTierName}!**",
        SYSTEM_MESSAGE_GUILD_MEMBER_SUBSCRIBED_MANY_ACHIEVED_TIER:
          "[!!{username}!!](usernameOnClick) just boosted the server **{numSubscriptions}** times! !!{guildName}!! has achieved **{newTierName}!**",
        SYSTEM_MESSAGE_CHANNEL_FOLLOW_ADD:
          "[!!{username}!!](usernameOnClick) has added **$[!!{webhookName}!!](webhookNameHook)** to this channel. Its most important updates will show up here.",
        SYSTEM_MESSAGE_CHANNEL_FOLLOW_ADD_HOOK:
          "$[!!{username}!!](usernameHook) has added **$[!!{webhookName}!!](webhookNameHook)** to this channel. Its most important updates will show up here.",
        SYSTEM_MESSAGE_CHANNEL_FOLLOW_ADD_IOS:
          "[!!{username}!!](usernameOnClick) has added **[!!{webhookName}!!](webhookNameOnClick)** to this channel. Its most important updates will show up here.",
        SOURCE_MESSAGE_DELETED: "[Original Message Deleted]",
        SYSTEM_MESSAGE_GUILD_DISCOVERY_DISQUALIFIED:
          "This server has been removed from Server Discovery because it no longer passes all the requirements. Check [Server Settings](onClick) for more details.",
        SYSTEM_MESSAGE_GUILD_DISCOVERY_DISQUALIFIED_MOBILE:
          "This server has been removed from Server Discovery because it no longer passes all the requirements. Check Server Settings on desktop for more details.",
        SYSTEM_MESSAGE_GUILD_DISCOVERY_REQUALIFIED:
          "This server is eligible for Server Discovery again and has been automatically relisted!",
        SYSTEM_MESSAGE_GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING:
          "This server has failed Discovery activity requirements for 1 week. If this server fails for 4 weeks in a row, it will be automatically removed from Discovery.",
        SYSTEM_MESSAGE_GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING:
          "This server has failed Discovery activity requirements for 3 weeks in a row. If this server fails for 1 more week, it will be removed from Discovery.",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_001_HOOK:
          "$[!!{username}!!](usernameHook) joined the party.",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_002_HOOK:
          "$[!!{username}!!](usernameHook) is here.",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_003_HOOK:
          "Welcome, $[!!{username}!!](usernameHook). We hope you brought pizza.",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_004_HOOK:
          "A wild $[!!{username}!!](usernameHook) appeared.",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_005_HOOK:
          "$[!!{username}!!](usernameHook) just landed.",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_006_HOOK:
          "$[!!{username}!!](usernameHook) just slid into the server.",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_007_HOOK:
          "$[!!{username}!!](usernameHook) just showed up!",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_008_HOOK:
          "Welcome $[!!{username}!!](usernameHook). Say hi!",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_009_HOOK:
          "$[!!{username}!!](usernameHook) hopped into the server.",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_010_HOOK:
          "Everyone welcome $[!!{username}!!](usernameHook)!",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_011_HOOK:
          "Glad you're here, $[!!{username}!!](usernameHook).",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_012_HOOK:
          "Good to see you, $[!!{username}!!](usernameHook).",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_013_HOOK:
          "Yay you made it, $[!!{username}!!](usernameHook)!",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_001:
          "[!!{username}!!](usernameOnClick) joined the party.",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_002:
          "[!!{username}!!](usernameOnClick) is here.",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_003:
          "Welcome, [!!{username}!!](usernameOnClick). We hope you brought pizza.",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_004:
          "A wild [!!{username}!!](usernameOnClick) appeared.",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_005:
          "[!!{username}!!](usernameOnClick) just landed.",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_006:
          "[!!{username}!!](usernameOnClick) just slid into the server.",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_007:
          "[!!{username}!!](usernameOnClick) just showed up!",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_008:
          "Welcome [!!{username}!!](usernameOnClick). Say hi!",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_009:
          "[!!{username}!!](usernameOnClick) hopped into the server.",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_010:
          "Everyone welcome [!!{username}!!](usernameOnClick)!",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_011:
          "Glad you're here, [!!{username}!!](usernameOnClick).",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_012:
          "Good to see you, [!!{username}!!](usernameOnClick).",
        SYSTEM_MESSAGE_GUILD_MEMBER_JOIN_013:
          "Yay you made it, [!!{username}!!](usernameOnClick)!",
        SYSTEM_MESSAGE_GUILD_BOT_JOIN:
          "[Learn how to use this bot.](learnOnClick)",
        SYSTEM_MESSAGE_APPLICATION_COMMAND_USED_HOOK:
          "$[!!{username}!!](usernameHook) used $[](commandNameHook) with $[](applicationNameHook)",
        SYSTEM_MESSAGE_APPLICATION_COMMAND_USED_MOBILE:
          "[!!{username}!!](usernameOnClick) used **!!{commandName}!!** with **!!{applicationName}!!**",
        SYSTEM_MESSAGE_APPLICATION_COMMAND_USED_SHORT_MOBILE:
          "[!!{username}!!](usernameOnClick) used **[!!{commandName}!!](commandNameOnClick)**",
        SYSTEM_MESSAGE_APPLICATION_COMMAND_REPLY:
          "used **[!!{commandName}!!](commandNameOnClick)**",
        SYSTEM_MESSAGE_APPLICATION_COMMAND_USED_AS_TITLE:
          "[!!{username}!!](usernameOnClick) used **[!!{commandName}!!](commandName)** with",
        SYSTEM_MESSAGE_STAGE_START_HOOK:
          "$[!!{username}!!](usernameHook) started **!!{topic}!!**",
        SYSTEM_MESSAGE_STAGE_START_MOBILE:
          "[!!{username}!!](usernameOnClick) started **!!{topic}!!**",
        SYSTEM_MESSAGE_STAGE_END_HOOK:
          "$[!!{username}!!](usernameHook) ended **!!{topic}!!**",
        SYSTEM_MESSAGE_STAGE_END_MOBILE:
          "[!!{username}!!](usernameOnClick) ended **!!{topic}!!**",
        SYSTEM_MESSAGE_STAGE_SPEAKER_HOOK:
          "$[!!{username}!!](usernameHook) is now a speaker.",
        SYSTEM_MESSAGE_STAGE_SPEAKER_MOBILE:
          "[!!{username}!!](usernameOnClick) is now a speaker.",
        SYSTEM_MESSAGE_STAGE_RAISE_HAND_HOOK:
          "$[!!{username}!!](usernameHook) requested to speak.",
        SYSTEM_MESSAGE_STAGE_RAISE_HAND_MOBILE:
          "[!!{username}!!](usernameOnClick) requested to speak.",
        SYSTEM_MESSAGE_STAGE_TOPIC_HOOK:
          "$[!!{username}!!](usernameHook) changed the Stage topic: **!!{topic}!!**",
        SYSTEM_MESSAGE_STAGE_TOPIC_MOBILE:
          "[!!{username}!!](usernameOnClick) changed the Stage topic: **!!{topic}!!**",
        STAGE_SYSTEM_MESSAGE_MODERATOR_VISIBILITY_MESSAGE:
          "Only Stage moderators can see this • [Dismiss message](handleDelete)",
        SYSTEM_MESSAGE_GET_GAMING_STATS: "Get my stats!",
        ACCEPT_INVITE_MODAL_BUTTON: "Accept Invite",
        ACCEPT_INVITE_MODAL_BUTTON_WITH_USERNAME: "Accept as $[](usernameHook)",
        INVITE_MODAL_BUTTON: "Join **!!{guildName}!!**",
        INIVTE_MODAL_NO_THANKS: "No Thanks",
        INVITE_MODAL_ERROR_TITLE: "Whoops...",
        INVITE_MODAL_ERROR_INVALID_TITLE:
          "The invite link is invalid or has expired.",
        INVITE_MODAL_ERROR_INVALID_BODY:
          "Try using a different link to join this server.",
        INVITE_MODAL_ERROR_BUTTON_TEXT: "Got it",
        INVITE_MODAL_ERROR_DEFAULT: "Unable to accept invite",
        INVALID_COUNTRY_CODE: "This server is not available in your location.",
        INVALID_CANNOT_FRIEND_SELF: "You cannot friend yourself",
        INVITES_DISABLED_MODAL_TITLE: "Invites Paused",
        INVITES_DISABLED_MODAL_DESCRIPTION:
          "Invites are currently paused for this server. Please try again later. [Learn More]({articleLink})",
        INVITES_DISABLED_TOOLTIP: "Invites paused for this server",
        INVITES_DISABLED_CONFIRMATION: "Got it",
        INVITES_DISABLED_EMBED_HEADER: "Server invite paused... what the",
        INVITES_DISABLED_EMBED_TITLE: "Invites Paused",
        INVITES_DISABLED_EMBED_DESCRIPTION: "Invites are currently paused for",
        INVITES_DISABLED_ARTICLE_LABEL: "Learn More",
        INVITES_DISABLED_GUILD_NAME_DEFAULT: "this server",
        DISABLE_EMAIL_NOTIFICATIONS:
          "Success! We've disabled e-mail notifications for you!",
        KEYBIND_CONFLICT:
          "This conflicts with a built-in shortcut. We have disabled the built-in shortcut.",
        KEYBIND_NAVIGATION_CONFLICT:
          "This key is used for [keyboard navigation]({keyboardNavArticle}). It will no longer activate Keyboard Mode.",
        KEYBIND_DESCRIPTION_MODAL_TITLE: "Keyboard Combos",
        KEYBIND_DESCRIPTION_MODAL_SUBTITLE:
          "Master these to be the greatest Discord Discord Revolution player",
        KEYBIND_DESCRIPTION_MODAL_NAVIGATE_SERVERS: "Navigate between servers",
        KEYBIND_DESCRIPTION_MODAL_MARK_SERVER_READ: "Mark server read",
        KEYBIND_DESCRIPTION_MODAL_NAVIGATE_CHANNELS:
          "Navigate between channels",
        KEYBIND_DESCRIPTION_MODAL_UNREAD_CHANNELS:
          "Navigate between unread channels",
        KEYBIND_DESCRIPTION_MODAL_UNREAD_MENTION_CHANNELS:
          "Navigate between unread channels with mentions",
        KEYBIND_DESCRIPTION_MODAL_NAVIGATE_BACK_FORWARD:
          "Navigate forward and backward in page history",
        KEYBIND_DESCRIPTION_MODAL_NAVIGATE_TO_CALL: "Navigate to current call",
        KEYBIND_DESCRIPTION_MODAL_JUMP_TO_FIRST_UNREAD:
          "Jump to oldest unread message",
        KEYBIND_DESCRIPTION_MODAL_MARK_CHANNEL_READ: "Mark channel as read",
        KEYBIND_DESCRIPTION_MODAL_TOGGLE_PREVIOUS_GUILD:
          "Toggle between last server and DMs",
        KEYBIND_DESCRIPTION_MODAL_CREATE_GUILD: "Create or join a server",
        KEYBIND_DESCRIPTION_MODAL_QUICKSWITCHER: "Toggle QuickSwitcher",
        KEYBIND_DESCRIPTION_MODAL_CREATE_DM_GROUP: "Create a private group",
        KEYBIND_DESCRIPTION_MODAL_TOGGLE_PINS: "Toggle pins popout",
        KEYBIND_DESCRIPTION_MODAL_TOGGLE_INBOX: "Toggle inbox popout",
        KEYBIND_DESCRIPTION_MODAL_MARK_TOP_INBOX_CHANNEL_READ:
          "Mark top inbox channel read",
        KEYBIND_DESCRIPTION_MODAL_TOGGLE_USERS:
          "Toggle channel member list or voice text chat",
        KEYBIND_DESCRIPTION_MODAL_TOGGLE_MUTE: "Toggle mute",
        KEYBIND_DESCRIPTION_MODAL_TOGGLE_DEAFEN: "Toggle deafen",
        KEYBIND_DESCRIPTION_MODAL_CALL_ACCEPT: "Answer incoming call",
        KEYBIND_DESCRIPTION_MODAL_CALL_DECLINE: "Decline incoming call",
        KEYBIND_DESCRIPTION_MODAL_CALL_START:
          "Start call in private message or group",
        KEYBIND_DESCRIPTION_MODAL_SCROLL_CHAT: "Scroll chat up or down",
        KEYBIND_DESCRIPTION_MODAL_FOCUS_TEXT_AREA: "Focus text area",
        KEYBIND_DESCRIPTION_MODAL_UPLOAD_FILE: "Upload a file",
        KEYBIND_DESCRIPTION_MODAL_SEARCH_EMOJIS: "Toggle emoji picker",
        KEYBIND_DESCRIPTION_MODAL_SEARCH_GIFS: "Toggle GIF picker",
        KEYBIND_DESCRIPTION_MODAL_SEARCH_STICKERS: "Toggle sticker picker",
        KEYBIND_DESCRIPTION_MODAL_TOGGLE_HELP: "Get help",
        KEYBIND_DESCRIPTION_MODAL_EASTER_EGG: "Raging Demon",
        KEYBIND_DESCRIPTION_MODAL_SEARCH: "Search",
        INVITE_STREAM_HEADER: "Invite to Stream",
        INVITE_SHARE_LINK_TO_STREAM:
          "Share this link with others to grant access to this server and watch the stream",
        INVITE_STREAM_FOOTER_LINK_HEADER:
          "Or, send a stream invite link to a friend",
        INVITE_SEARCH_FOR_FRIENDS: "Search for friends",
        INVITE_FOOTER_LINK_HEADER: "Or, send a server invite link to a friend",
        INVITE_SHARE_LINK_OWN_SERVER:
          "Share this link with others to grant access to your server!",
        INVITE_COPIED: "Copied",
        INVITE_SETTINGS_TITLE: "Server invite link settings",
        INVITE_EXPIRES_MINUTES: "Your invite link expires in 30 minutes.",
        INVITE_EXPIRES_MINUTES_OR_USES:
          "Your invite link expires in 30 minutes, or after {numUses, plural, =1 {{numUses} use} other {{numUses} uses}}.",
        INVITE_EXPIRES_HOURS:
          "Your invite link expires in {numHours, plural, =1 {{numHours} hour} other {{numHours} hours}}.",
        INVITE_EXPIRES_HOURS_OR_USES:
          "Your invite link expires in {numHours, plural, =1 {{numHours} hour} other {{numHours} hours}}, or after {numUses, plural, =1 {{numUses} use} other {{numUses} uses}}.",
        INVITE_EXPIRES_DAYS_PLURAL:
          "Your invite link expires in {numDays, plural, =1 {{numDays} day} other {{numDays} days}}.",
        INVITE_EXPIRES_DAYS_OR_USES_PLURAL:
          "Your invite link expires in {numDays, plural, =1 {{numDays} day} other {{numDays} days}}, or after {numUses, plural, =1 {{numUses} use} other {{numUses} uses}}.",
        INVITE_EXPIRES_USES:
          "Your invite link expires after {numUses, plural, =1 {{numUses} use} other {{numUses} uses}}.",
        INVITE_EXPIRES_NEVER: "Your invite link will never expire.",
        INVITE_VANITY_USED: "Using this server's custom invite link.",
        INVITE_EDIT_LINK: "Edit invite link.",
        INVITE_WELCOME_HEADING: "Welcome to your new server!",
        INVITE_WELCOME_SUBHEADING: "Let's start by inviting your friends",
        INVITE_YOUR_FRIENDS_HEADER_MOBILE: "Your Friends",
        INVITE_YOUR_FRIENDS_CHANNEL_MOBILE: "Invite friends to {channelName}",
        INVITE_COPY_INVITE_LINK_HEADER_MOBILE: "Copy Invite Link",
        INVITE_EXPIRED_SUBTEXT_MOBILE: " • expires in !!{maxAge}!!",
        INVITE_PRIVATE_CALL_HEADS_UP:
          "Heads up! Friends you invite can see your previous message history.",
        INVITE_EMPTY_BODY:
          "Share this link with friends and they'll automatically join your server.",
        INVITE_EMPTY_TITLE: "Invite a friend to your server!",
        INVITE_A_FRIEND: "Invite a friend",
        LINK_COPIED: "Link Copied!",
        INVITE_NOTICE_MESSAGE: "An adventure begins.",
        INVITE_NOTICE_MESSAGE_PART_2: "Let's add some friends!",
        INVITE_PEOPLE: "Invite People",
        INVITE_FRIENDS: "Invite Friends",
        SHARE_INVITE_LINK_FOR_ACCESS:
          "Share this link with others to grant access to this server",
        SHARE_INVITE_MOBILE: "Share {inviteUrl}",
        INVITE_LINK_COPIED: "Invite copied!",
        INVITE_LINKS_EXPIRE_AFTER_DEFAULT:
          "Invite links expire every {days} by default",
        SET_INVITE_LINK_NEVER_EXPIRE: "Set this link to never expire",
        LINK_SETTINGS: "Link Settings",
        GENERATE_A_NEW_LINK: "Generate a New Link",
        CREATE_LINK: "Create Link",
        HOW_TO_INVITE_OTHERS:
          'Hello. Beep. Boop. If you wanna invite friends to this server, click the server name in the top left and select "!!{invitePeople}!!". Beep!',
        GRANT_TEMPORARY_MEMBERSHIP: "Grant temporary membership",
        TEMPORARY_MEMBERSHIP_EXPLANATION:
          "Temporary members are automatically kicked when they disconnect unless a role\n    has been assigned",
        MAX_NUMBER_OF_USES: "Max Number of Uses",
        EXPIRE_AFTER: "Expire After",
        ONLY_YOU_CAN_SEE_AND_DELETE_THESE:
          "Only you can see {count, plural, one {this} other {these}} • [Dismiss {countMessages, plural, one {message} other {messages}}](handleDelete)",
        NEW: "new",
        UPDATED: "updated",
        NEW_MENTIONS: "New Mentions",
        NEW_UNREADS: "New Unreads",
        MENTIONS_COUNT: "{count} mentions",
        NEW_MENTIONS_COUNT:
          "{count, plural, =1 {1 New Mention} other {{count} New Mentions}}",
        FILTER_OPTIONS: "Filter Options",
        FILTER_MENTIONS: "Filter Mentions",
        SERVER_OPTIONS: "Server Options",
        INVALID_ANIMATED_EMOJI_BODY:
          "This emoji doesn't work because it's animated. Upgrade to Discord Nitro to fulfill all your animated emoji dreams",
        INVALID_ANIMATED_EMOJI_BODY_UPGRADE:
          "This emoji doesn't work because it's animated. Discord Nitro can solve all of that, check User Settings > Nitro for details",
        INVALID_EXTERNAL_EMOJI_BODY:
          "This emoji doesn't work here because it's from a different server. Upgrade to Discord Nitro to use emoji from other servers",
        INVALID_EXTERNAL_EMOJI_BODY_UPGRADE:
          "This emoji doesn't work here because it's from a different server. Discord Nitro can solve all of that, check User Settings > Nitro for details",
        REACTION_PICKER: "Reaction Picker",
        ADD_REACTION: "Add Reaction",
        REACT: "React",
        SUPER_REACT: "Super React",
        BURST_REACTION_ADD_UNLIMITED_SUCCESS_A11Y:
          "{name} super reaction successfully added.",
        BURST_REACTION_ADD_UNLIMITED_ERROR_A11Y:
          "{name} super reaction could not be added.",
        BURST_REACTION_REMOVE_SUCCESS_A11Y:
          "{name} super reaction successfully removed.",
        BURST_REACTION_REMOVE_ERROR_A11Y:
          "{name} super reaction could not be removed.",
        SUPER_REACTIONS_FIRST_SEND_HEADER: "Time to celebrate!",
        SUPER_REACTIONS_FIRST_SEND_BODY_V2:
          "You sent your first Super Reaction on mobile. Keep the hype coming, friend!",
        SUPER_REACTIONS_FIRST_SEND_BODY:
          "You sent your first Super Reaction! You’ll get {refillAmount} more Super Reactions each week with Nitro. Enjoy!",
        SUPER_REACTIONS_FIRST_SEND_BODY_DAILY:
          "You sent your first Super Reaction! You’ll get {refillAmount} more Super Reactions each day with Nitro. Enjoy!",
        SUPER_REACTIONS_EMOJI_PICKER_UPSELL:
          "NEW! Hype up the chat with Super Reactions.",
        SUPER_REACTIONS_LAUNCH_EMOJI_PICKER_UPSELL_NITRO:
          "NEW! Hype up the chat with Super Reactions. You’ll get {refillAmount} more each week with Nitro",
        SUPER_REACTIONS_LAUNCH_EMOJI_PICKER_UPSELL_NITRO_DAILY:
          "NEW! Hype up the chat with Super Reactions. You’ll get {refillAmount} per day with Nitro",
        SUPER_REACTIONS_LAUNCH_EMOJI_PICKER_UPSELL_FREE:
          "NEW! Hype up the chat with Super Reactions. Try it out with 2 free reactions.",
        SUPER_REACTIONS_LAUNCH_EMOJI_PICKER_UPSELL:
          "Hype up the chat with Super Reactions. Get more each week with [Nitro](onClick).",
        SUPER_REACTIONS_LAUNCH_EMOJI_PICKER_DAILY_UPSELL:
          "Hype up the chat with Super Reactions. Get more each day with [Nitro](onClick).",
        SUPER_REACTIONS_MOBILE_DISMISS_MESSAGE: "Tap anywhere to close",
        SUPER_REACTION_OUT_OF_BURSTS:
          "Looks like you’re out of Super Reactions",
        SUPER_REACTIONS_OUT_OF_BURST_GOT_IT: "Got it!",
        SUPER_REACTIONS_OUT_OF_BURSTS_SIMPLE:
          "But don’t worry! You’ll get more Super Reactions in {n, plural, =1 {1 day} other {{n} days}}.",
        SUPER_REACTIONS_OUT_OF_BURSTS_SIMPLE_SOON:
          "But don’t worry! You’ll get more Super Reactions later today.",
        SUPER_REACTIONS_OUT_OF_BURSTS_DAILY_SIMPLE_SOON:
          "But don’t worry! You’ll get more Super Reactions tomorrow.",
        SUPER_REACTIONS_REFILL_COUNTDOWN:
          "You’ll get {refillAmount} more Super Reactions in {n, plural, =1 {1 day} other {{n} days}}.",
        SUPER_REACTIONS_REFILL_SOON:
          "You’ll get {refillAmount} more Super Reactions later today.",
        SUPER_REACTIONS_TAB_TOOLTIP:
          "You’re out of Super Reactions. You’ll get more in {n, plural, =1 {1 day} other {{n} days}}!",
        SUPER_REACTIONS_TAB_TOOLTIP_AMOUNT:
          "You have {count, plural, =1 {1 Super Reaction} other {{count} Super Reactions}}. You’ll get {refillAmount} more in {n, plural, =1 {1 day} other {{n} days}}.",
        SUPER_REACTIONS_TAB_TOOLTIP_AMOUNT_SOON:
          "You have {count, plural, =1 {1 Super Reaction} other {{count} Super Reactions}}. You’ll get {refillAmount} more later today.",
        SUPER_REACTIONS_TAB_TOOLTIP_SOON:
          "You’ll get more Super Reactions later today.",
        SUPER_REACTIONS_TOOLTIP_COACHMARK_TITLE: "NEW! Super Reactions",
        SUPER_REACTIONS_TOOLTIP_COACHMARK:
          "A better way to react, now available with [Nitro]({nitroLink}).",
        SUPER_REACTION_COACHMARK_DESCRIPTION:
          "Hype up the chat with Super Reactions [[Beta]]({helpdeskArticle}). Now available with Nitro.",
        SUPER_REACTION_COACHMARK_DESCRIPTION_FREE:
          "Hype up the chat and get a taste of our newest Nitro-exclusive perk: Super Reactions.",
        SUPER_REACTIONS_LAUNCH_COACHMARK_DESCRIPTION:
          "Hype up the chat with Super Reactions. Now available with [Nitro]({nitroLink}).",
        SUPER_REACTIONS_LAUNCH_COACHMARK_DESCRIPTION_CLICK:
          "Hype up the chat with Super Reactions. Now available with [Nitro](onClick).",
        SUPER_REACTIONS_LAUNCH_COACHMARK_DESCRIPTION_CLICK_V2:
          "Hype up the chat with Super Reactions. Now available with [{planName}](onClick).",
        SUPER_REACTIONS_LAUNCH_COACHMARK_DESCRIPTION_UNLIMITED:
          "Hype up the chat with unlimited Super Reactions. Now available with [{planName}](onClick).",
        SUPER_REACTIONS_LAUNCH_COACHMARK_DESCRIPTION_UNLIMITED_V2:
          "Hype up the chat with unlimited Super Reactions! Now available with Nitro.",
        SUPER_REACTIONS_LAUNCH_COACHMARK_DESCRIPTION_UNLIMITED_V2_A:
          "Hype up the chat with unlimited Super Reactions!",
        SUPER_REACTIONS_LAUNCH_COACHMARK_DESCRIPTION_UNLIMITED_V2_B:
          "Now available with Nitro.",
        SUPER_REACTIONS_LAUNCH_COACHMARK_NITRO_DESCRIPTION:
          "Hype up the chat with Super Reactions.  Get {refillAmount} per week, available with [Nitro]({nitroLink}).",
        SUPER_REACTIONS_LAUNCH_COACHMARK_NITRO_DESCRIPTION_DAILY:
          "Hype up the chat with Super Reactions.  Get {refillAmount} per day, available with [Nitro]({nitroLink}).",
        SUPER_REACTIONS_LAUNCH_COACHMARK_NITRO_LINK:
          "Hype up the chat with Super Reactions.  Get {refillAmount} per week, now with [Nitro](onClick).",
        SUPER_REACTIONS_LAUNCH_COACHMARK_NITRO_LINK_DAILY:
          "Hype up the chat with Super Reactions.  Get {refillAmount} per day, now with [Nitro](onClick).",
        SUPER_REACTIONS_LAUNCH_COACHMARK_NITRO:
          "Hype up the chat with Super Reactions.  Get {refillAmount} per week, now with Nitro.",
        SUPER_REACTIONS_LAUNCH_COACHMARK_NITRO_DAILY:
          "Hype up the chat with Super Reactions.  Get {refillAmount} per day, now with Nitro.",
        SUPER_REACTION_COACHMARK_DESCRIPTION_MOBILE:
          "Hype up the chat with Super Reactions $[[Beta]](betaHook). Now available with Nitro.",
        SUPER_REACTIONS_CONGRATS_HEADER: "Congratulations!",
        SUPER_REACTIONS_CONGRATS_DESCRIPTION:
          "You just sent your first Super Reaction. Get weekly Super Reactions with [Nitro](onClick)",
        SUPER_REACTIONS_CONGRATS_DESCRIPTION_DAILY:
          "You just sent your first Super Reaction. Get daily Super Reactions with [Nitro](onClick)",
        SUPER_REACTIONS_REMINDER_COACHMARK_TITLE: "Ready to bring the hype?",
        SUPER_REACTIONS_REMINDER_COACHMARK_DESCRIPTION:
          "Celebrate your favorite posts and pump up your friends with Super Reactions.",
        SUPER_REACTIONS_REMINDER_COACHMARK_NITRO_DESCRIPTION:
          "Use Super Reactions to emphasize your reaction with a fun animation.",
        SUPER_REACTION_COACHMARK_NITRO_DESCRIPTION:
          "Hype up the chat with Super Reactions [[Beta]]({helpdeskArticle}). Get {refillAmount} per week, now with {premiumTier}.",
        SUPER_REACTION_COACHMARK_NITRO_DESCRIPTION_MOBILE:
          "Hype up the chat with Super Reactions $[[Beta]](betaHook). Get {refillAmount} per week, now with {premiumTier}.",
        SUPER_REACTIONS_BANNER_TITLE: "A new way to react",
        SUPER_REACTIONS_BANNER_DESCRIPTION:
          "Hype up the chat with Super Reactions. Now available to all Nitro members.",
        REACTION_ADD_SUCCESS_A11Y: "{name} reaction successfully added",
        REACTION_ADD_ERROR_A11Y: "{name} reaction could not be added",
        REACTION_REMOVE_SUCCESS_A11Y: "{name} reaction successfully removed",
        REACTION_REMOVE_ERROR_A11Y: "{name} reaction could not be removed",
        ADD_BURST_REACTION: "Add Super Reaction",
        REACTION_REACTORS_A11Y:
          "{name} {n, plural, =1 {1 reaction} other {{n} reactions}}",
        BURST_REACTION_REACTORS_A11Y:
          "{name} {n, plural, =1 {1 super reaction} other {{n} super reactions}}",
        BURST_REACTIONS_LEFT: "{count} left",
        BURST_REACTIONS_REMOVE_MODAL_TITLE: "Are you sure?",
        BURST_REACTIONS_REMOVE_MODAL_DESCRIPTION:
          "You will not get a credit refund if you choose to remove this Super Reaction.",
        BURST_REACTIONS_REMOVE_MODAL_CONFIRM: "Remove Super Reaction",
        BURST_REACTIONS_REMOVE_MODAL_CANCEL: "Cancel",
        BURST_MOBILE_NOT_READY_IMG_ALT: "Wumpus waving",
        BURST_MOBILE_NOT_READY_TITLE: "Super Reactions",
        SUPER_MOBILE_NOT_READY_SUBTITLE:
          "The ability to add Super Reactions is only on desktop for now. Use the desktop app to send and view these special animated reactions.",
        REACT_WITH_COUNT_A11Y_LABEL:
          "!!{emojiName}!!{reactions, plural, =1 {, # reaction} other {, # reactions}}, press to react",
        REACT_REMOVE_WITH_COUNT_A11Y_LABEL:
          "!!{emojiName}!!{reactions, plural, =1 {, # reaction} other {, # reactions}}, press to remove your reaction",
        SUPER_REACT_WITH_COUNT_A11Y_LABEL:
          "!!{emojiName}!!{reactions, plural, =1 {, # super reaction} other {, # super reactions}}, press to super react",
        SUPER_REACT_REMOVE_WITH_COUNT_A11Y_LABEL:
          "!!{emojiName}!!{reactions, plural, =1 {, # super reaction} other {, # super reactions}}, press to remove your super reaction",
        OTHER_REACTIONS: "Other Reactions",
        VIEW_MORE: "View More",
        VIEW_LESS: "View Less",
        TOO_MANY_REACTIONS_ALERT_HEADER: "We appreciate the enthusiasm, but...",
        TOO_MANY_REACTIONS_ALERT_BODY:
          "Your reaction was not added because there are too many reactions on this message.",
        REACTION_TOOLTIP_1: "!!{emojiName}!! reacted by !!{a}!!",
        REACTION_TOOLTIP_1_N:
          "!!{emojiName}!! reacted by !!{a}!! and {n, plural, one {1 other} other {{n} others}}",
        REACTION_TOOLTIP_1_N_INTERACTIVE:
          "!!{emojiName}!! reacted by !!{a}!! and {n, plural, one {[1 other](onClick)} other {[{n} others](onClick)}}",
        REACTION_TOOLTIP_2: "!!{emojiName}!! reacted by !!{a}!! and !!{b}!!",
        REACTION_TOOLTIP_2_N:
          "!!{emojiName}!! reacted by !!{a}!!, !!{b}!!, and {n, plural, one {1 other} other {{n} others}}",
        REACTION_TOOLTIP_2_N_INTERACTIVE:
          "!!{emojiName}!! reacted by !!{a}!!, !!{b}!!, and {n, plural, one {[1 other](onClick)} other {[{n} others](onClick)}}",
        REACTION_TOOLTIP_3:
          "!!{emojiName}!! reacted by !!{a}!!, !!{b}!!, and !!{c}!!",
        REACTION_TOOLTIP_3_N:
          "!!{emojiName}!! reacted by !!{a}!!, !!{b}!!, !!{c}!!, and {n, plural, one {1 other} other {{n} others}}",
        REACTION_TOOLTIP_3_N_INTERACTIVE:
          "!!{emojiName}!! reacted by !!{a}!!, !!{b}!!, !!{c}!!, and {n, plural, one {[1 other](onClick)} other {[{n} others](onClick)}}",
        REACTION_TOOLTIP_N:
          "!!{emojiName}!! reacted by {n, plural, one {1 person} other {{n} people}}",
        REACTION_TOOLTIP_N_INTERACTIVE:
          "!!{emojiName}!! reacted by {n, plural, one {1 person} other {[{n} people](onClick)}}",
        BURST_REACTION_TOOLTIP_1: "!!{emojiName}!! Super reacted by !!{a}!!",
        BURST_REACTION_TOOLTIP_1_N:
          "!!{emojiName}!! Super reacted by !!{a}!! and {n, plural, one {1 other} other {{n} others}}",
        BURST_REACTION_TOOLTIP_1_N_INTERACTIVE:
          "!!{emojiName}!! Super reacted by !!{a}!! and {n, plural, one {[1 other](onClick)} other {[{n} others](onClick)}}",
        BURST_REACTION_TOOLTIP_2:
          "!!{emojiName}!! Super reacted by !!{a}!! and !!{b}!!",
        BURST_REACTION_TOOLTIP_2_N:
          "!!{emojiName}!! Super reacted by !!{a}!!, !!{b}!!, and {n, plural, one {1 other} other {{n} others}}",
        BURST_REACTION_TOOLTIP_2_N_INTERACTIVE:
          "!!{emojiName}!! Super reacted by !!{a}!!, !!{b}!!, and {n, plural, one {[1 other](onClick)} other {[{n} others](onClick)}}",
        BURST_REACTION_TOOLTIP_3:
          "!!{emojiName}!! Super reacted by !!{a}!!, !!{b}!!, and !!{c}!!",
        BURST_REACTION_TOOLTIP_3_N:
          "!!{emojiName}!! Super reacted by !!{a}!!, !!{b}!!, !!{c}!!, and {n, plural, one {1 other} other {{n} others}}",
        BURST_REACTION_TOOLTIP_3_N_INTERACTIVE:
          "!!{emojiName}!! Super reacted by !!{a}!!, !!{b}!!, !!{c}!!, and {n, plural, one {[1 other](onClick)} other {[{n} others](onClick)}}",
        BURST_REACTION_TOOLTIP_N:
          "!!{emojiName}!! Super reacted by {n, plural, one {1 person} other {{n} people}}",
        BURST_REACTION_TOOLTIP_N_INTERACTIVE:
          "!!{emojiName}!! super reaction sent by {n, plural, one {1 person} other {[{n} people](onClick)}}",
        SUPER_REACTION_TOOLTIP_CTA: "Add Super Reaction",
        SUPER_REACTION_TOOLTIP_CTA_REACTED: "You've sent this Super Reaction",
        SUPER_REACTION_TOOLTIP_UPSELL:
          "Want to start the hype train? Get Nitro to add a Super Reaction.",
        LOAD_REACTIONS_ERROR:
          "Whoops, something went wrong. Give it another try?",
        NO_REACTIONS_HEADER: "No Reactions",
        NO_REACTIONS_BODY: "What a cold, emotionless world.",
        SUPER_REACTION_TOGGLE_ENABLED: "Super Reactions enabled",
        SUPER_REACTION_TOGGLE_DISABLED: "Enable Super Reactions",
        SUPER_REACTIONS_UPSELL_TITLE: "A better way to react on Discord",
        SUPER_REACTIONS_UPSELL_TITLE_MOBILE: "A better way to react!",
        SUPER_REACTIONS_UPSELL_UNLIMITED_BODY:
          "Hype up the chat with Super Reactions! Get unlimited Super Reactions and other cool perks with [Nitro](onClick).",
        SUPER_REACTIONS_UNLIMITED_NOTICE_TITLE: "Unlimited Super Reactions!",
        SUPER_REACTIONS_UNLIMITED_NOTICE_DESCRIPTION_DESKTOP_V2:
          "Click the button to add a Super Reaction.",
        SUPER_REACTIONS_UNLIMITED_NOTICE_DESCRIPTION_MOBILE_V2:
          "Tap the button to add a Super Reaction.",
        HOLD_UP: "Hold Up",
        MASKED_LINK_ALERT_V2_HEADER: "Leaving Discord",
        MASKED_LINK_ALERT_V2_WARNING_WEBSITE:
          "This link is taking you to the following website",
        MASKED_LINK_ALERT_V2_WARNING_PROTOCOL:
          "This link is trying to open **an application on your device**",
        MASKED_LINK_ALERT_V2_TRUST_WEBSITE:
          "Trust **!!{domain}!!** links from now on",
        MASKED_LINK_ALERT_V2_TRUST_PROTOCOL:
          "Trust **!!{protocol}!!** links from now on",
        MASKED_LINK_ALERT_V2_CONFIRM_WEBSITE: "Visit Site",
        MASKED_LINK_ALERT_V2_CONFIRM_PROTOCOL: "Open Link",
        MALFORMED_LINK_BODY:
          "This link **!!{url}!!** is malformed and potentially dangerous.",
        MALFORMED_LINK_BODY_NO_URL:
          "Unable to open link because it is malformed and potentially dangerous.",
        BAD_LINK_WARNING_TITLE_V2: "Dangerous Website Ahead",
        BAD_LINK_WARNING_BODY_V2:
          "Heads up, this link goes to **a known abusive domain**. Websites like these might try to trick you into sharing personal information, steal your password, or install unwanted software on your device.",
        SUSPICIOUS_DOWNLOAD_WARNING_TITLE: "Potential Dangerous Download",
        SUSPICIOUS_DOWNLOAD_WARNING_BODY:
          "Woah there! While programs downloaded from the internet may be beneficial, this type of file can damage your device or steal your personal data. Make sure to only run executables from developers that you trust!",
        SUSPICIOUS_DOWNLOAD_WARNING_DOWNLOAD: "Continue to download",
        SUSPICIOUS_DOWNLOAD_WARNING_CANCEL: "Close",
        LINK_NOT_DISCORD_WARNING_TITLE: "Hold Up! This is not Discord!",
        LINK_NOT_DISCORD_WARNING_BODY:
          "Heads up, **!!{url}!!** may look or seem like it is from Discord, but this website is not run or managed by us! Websites like these might try to trick you into sharing personal information, steal your password, or install unwanted software on your device. Make sure not to enter your account credentials anywhere that isn't Discord.",
        LINK_NOT_DISCORD_WARNING_CONTINUE: "Continue to link",
        LINK_NOT_DISCORD_WARNING_CANCEL: "Close",
        ACCESSIBILITY: "Accessibility",
        ACCESSIBILITY_FONT_SCALING_LABEL: "Chat font scaling",
        ACCESSIBILITY_FONT_SCALE_CLASSIC_LABEL: "Classic chat text size",
        ACCESSIBILITY_FONT_SCALE_CLASSIC_HINT:
          "When enabled uses a slightly smaller font size for the chat text.",
        ACCESSIBILITY_ZOOM_LEVEL_LABEL: "Zoom level",
        ACCESSIBILITY_ZOOM_LEVEL_VALUE_LABEL: "Zoom level ({value})",
        ACCESSIBILITY_FONT_SCALING_USE_APP:
          "Currently using the Discord-specific font scale.",
        ACCESSIBILITY_FONT_SCALING_USE_OS:
          "Currently using your device's font scale.",
        ACCESSIBILITY_DARK_SIDEBAR: "Dark Sidebar",
        ACCESSIBILITY_MESSAGE_GROUP_SPACING: "Space Between Message Groups",
        ACCESSIBILITY_PREFERS_REDUCED_MOTION: "Reduced Motion",
        ACCESSIBILITY_PREFERS_REDUCED_MOTION_DESCRIPTION:
          "Reduce the amount and intensity of animations, hover effects, and other moving effects across Discord. Need help? Check our [Help Center]({helpdeskArticle}) for more info!",
        ACCESSIBILITY_PREFERS_REDUCED_MOTION_AUTO: "Sync with computer",
        ACCESSIBILITY_PREFERS_REDUCED_MOTION_AUTO_MOBILE:
          "Sync with Device Settings",
        ACCESSIBILITY_PREFERS_REDUCED_MOTION_ENABLE: "Enable Reduced Motion",
        ACCESSIBILITY_REDUCED_MOTION_SETTINGS_OVERRIDE:
          "This setting has been automatically disabled because of your **Reduced Motion** setting.",
        ACCESSIBILITY_FORCED_COLORS_MODAL_HEADER: "Introducing, contrast sync",
        ACCESSIBILITY_FORCED_COLORS_MODAL_BODY:
          "Discord now syncs with your computer's contrast theme! Change this any time in the Accessibility settings.",
        ACCESSIBILITY_FORCED_COLORS_MODAL_LEARN_MORE:
          "[Learn more]({helpCenterLink}) about contrast settings.",
        ACCESSIBILITY_FORCED_COLORS_GOTO_SETTINGS: "Go to Accessibility",
        ACCESSIBILITY_SETTINGS_APPEARANCE_LINK:
          "Can’t find what you’re looking for? Check out the [Appearance](onAppearanceClick) settings.",
        APPEARANCE_SETTINGS_ACCESSIBILITY_LINK:
          "Can’t find what you’re looking for? Check out the [Accessibility](onAccessibilityClick) settings.",
        ACCESSIBILITY_SETTINGS_PROFILE_COLORS_TITLE: "Profile Colors",
        ACCESSIBILITY_SETTINGS_PROFILE_THEMES_DESCRIPTION:
          "Sync profile themes",
        ACCESSIBILITY_SETTINGS_PROFILE_THEMES_NOTE:
          "Make profiles sync with your Discord [theme](onThemeClick).",
        ACCESSIBILITY_SETTINGS_ROLE_STYLE_TITLE: "Role Colors",
        ACCESSIBILITY_SETTINGS_ROLE_STYLE_DESCRIPTION:
          "Choose a display for role colors.",
        ACCESSIBILITY_SETTINGS_ROLE_STYLE_USERNAME_LABEL:
          "Show role colors in names",
        ACCESSIBILITY_SETTINGS_ROLE_STYLE_DOT_LABEL:
          "Show role colors next to names",
        ACCESSIBILITY_SETTINGS_ROLE_STYLE_HIDDEN_LABEL:
          "Don't show role colors",
        ACCESSIBILITY_SETTINGS_ROLE_STYLE_LEARN_MORE:
          "Learn more about [role colors and other accessibility settings]({learnMoreLink}).",
        ACCESSIBILITY_SETTINGS_SATURATION_TITLE: "Saturation",
        ACCESSIBILITY_SETTINGS_SATURATION_DESCRIPTION:
          "Reduce the saturation of colors within the application, for those with color sensitivities. This does not affect the saturation of images, videos, role colors or other user-provided content by default.",
        ACCESSIBILITY_SETTINGS_SATURATION_CUSTOM_COLORS_LABEL:
          "Apply to custom color choices",
        ACCESSIBILITY_SETTINGS_SATURATION_CUSTOM_COLORS_DESCRIPTION:
          "Turn on to apply this adjustment to custom color choices, like role colors",
        ACCESSIBILITY_SETTINGS_SATURATION_PREVIEW_MESSAGE:
          "links will look like this https://discord.com/",
        ACCESSIBILITY_SETTINGS_SATURATION_LINK_PREVIEW_MESSAGE:
          "links will look like this {previewLink}",
        ACCESSIBILITY_SETTINGS_TTS_RATE_LABEL: "Text-to-Speech rate",
        ACCESSIBILITY_SETTINGS_TTS_RATE_TEST:
          "This is what text-to-speech sounds like at the current speed.",
        ACCESSIBILITY_SETTINGS_TTS_RATE_PREVIEW: "Preview",
        ACCESSIBILITY_SETTINGS_TTS_RATE_SLOWER: "Slower",
        ACCESSIBILITY_SETTINGS_TTS_RATE_FASTER: "Faster",
        ACCESSIBILITY_SETTINGS_CONTRAST: "Contrast",
        ACCESSIBILITY_SETTINGS_CONTRAST_MOBILE_DESCRIPTION:
          "Adjust the contrast between foreground and background colors",
        ACCESSIBILITY_SETTINGS_INCREASE_CONTRAST: "Increase Contrast",
        ACCESSIBILITY_SETTINGS_REDUCE_CONTRAST: "Reduce Contrast",
        ACCESSIBILITY_SETTINGS_REDUCE_SATURATION: "Reduce Saturation",
        ACCESSIBILITY_SETTINGS_SYNC_FORCED_COLORS_LABEL:
          "Sync contrast settings",
        ACCESSIBILITY_SETTINGS_SYNC_FORCED_COLORS_DESCRIPTION:
          "This allows Discord to use your computer's contrast theme. [Learn more]({learnMoreLink}) about contrast settings.",
        ACCESSIBILITY_SETTINGS_SYNC_FORCED_COLORS_DESCRIPTION_WITH_FEEDBACK:
          "This allows Discord to use your computer's contrast theme. [Learn more]({learnMoreLink}) about contrast settings, or [share your feedback]({shareFeedbackLink}).",
        ACCESSIBILITY_SETTINGS_ALWAYS_SHOW_LINK_DECORATIONS_LABEL:
          "Always underline links",
        ACCESSIBILITY_SETTINGS_ALWAYS_SHOW_LINK_DECORATIONS_NOTE:
          "Make links to websites, help articles, and other pages stand out more by underlining them.",
        ACCESSIBILITY_EXAMPLE_BUTTON_LABEL: "Example Button",
        GUILDS_BAR_A11Y_LABEL: "Servers sidebar",
        DM_TOOLTIP_A11Y_LABEL:
          "!!{name}!! {mentions, plural, =0 {} =1 {, # unread message} other {, # unread messages}}",
        GUILD_TOOLTIP_A11Y_LABEL:
          " {mentions, plural, =0 {} =1 {# mention,} other {# mentions,}} !!{guildName}!!",
        GUILD_TOOLTIP_A11Y_LABEL_UNREADS: "Unread messages, !!{guildName}!!",
        GUILD_FOLDER_TOOLTIP_A11Y_LABEL:
          "!!{folderName}!!, folder {mentions, plural, =0 {} =1 {, # unread mention} other {, # unread mentions}}",
        GUILD_FOLDER_TOOLTIP_A11Y_LABEL_WITH_EXPANDED_STATE:
          "!!{folderName}!!, folder {mentions, plural, =0 {} =1 {, # unread mention} other {, # unread mentions}}, !!{expandedState}!!",
        CHANNEL_MEMBERS_A11Y_LABEL:
          "!!{title}!!, {count, plural, =1 {# member} other {# members}}",
        CHANNEL_CALL_MEMBERS_POPOUT_HEADER: "Participants — {count}",
        CHANNEL_CALL_PARTICIPANTS: "Participants",
        CHANNEL_CALL_CURRENT_SPEAKER: "Currently Speaking: !!{username}!!",
        CALL_TILE_A11Y_LABEL_ACTIVITY: "Call tile, activity, {activityName}",
        CALL_TILE_A11Y_LABEL_HIDDEN_STREAM:
          "Call tile, hidden stream, {streamerName}",
        CALL_TILE_A11Y_LABEL_STREAM: "Call tile, stream, {streamerName}",
        CALL_TILE_A11Y_LABEL_USER: "Call tile, {username}",
        PRIVATE_CHANNELS_A11Y_LABEL: "Private channels",
        ACCOUNT_A11Y_LABEL: "User area",
        GUILD_SIDEBAR_A11Y_LABEL: "!!{guildName}!! (server)",
        GUILD_SIDEBAR_ACTIONS_BUTTON: "!!{guildName}!!, server actions",
        GUILD_SIDEBAR_DEFAULT_CHANNEL_A11Y_LABEL:
          "!!{channelName}!! (text channel)",
        GUILD_SIDEBAR_THREAD_A11Y_LABEL: "!!{channelName}!! (thread)",
        GUILD_SIDEBAR_STORE_CHANNEL_A11Y_LABEL:
          "!!{channelName}!! (store channel)",
        GUILD_SIDEBAR_DIRECTORY_CHANNEL_A11Y_LABEL:
          "!!{channelName}!! (directory channel)",
        GUILD_SIDEBAR_ANNOUNCEMENT_CHANNEL_A11Y_LABEL:
          "!!{channelName}!! (announcement channel)",
        GUILD_SIDEBAR_DEFAULT_CHANNEL_A11Y_LABEL_WITH_UNREADS:
          "unread, !!{channelName}!! (text channel)",
        GUILD_SIDEBAR_THREAD_A11Y_LABEL_WITH_UNREADS:
          "unread, !!{channelName}!! (thread)",
        GUILD_SIDEBAR_ANNOUNCEMENT_CHANNEL_A11Y_LABEL_WITH_UNREADS:
          "unread, !!{channelName}!! (announcement channel)",
        GUILD_SIDEBAR_DEFAULT_CHANNEL_A11Y_LABEL_WITH_MENTIONS:
          "{mentionCount, plural, one {# mention} other {# mentions}}, !!{channelName}!! (text channel)",
        GUILD_SIDEBAR_THREAD_A11Y_LABEL_WITH_MENTIONS:
          "{mentionCount, plural, one {# mention} other {# mentions}}, !!{channelName}!! (thread)",
        GUILD_SIDEBAR_ANNOUNCEMENT_CHANNEL_A11Y_LABEL_WITH_MENTIONS:
          "{mentionCount, plural, one {# mention} other {# mentions}}, !!{channelName}!! (announcement channel)",
        GUILD_SIDEBAR_VOICE_CHANNEL_A11Y_LABEL:
          "!!{channelName}!! (voice channel)",
        GUILD_SIDEBAR_VOICE_CHANNEL_A11Y_LABEL_WITH_USERS:
          "!!{channelName}!! (voice channel), {userCount, plural, one {1 user} other {# users}}",
        GUILD_SIDEBAR_VOICE_CHANNEL_A11Y_LABEL_WITH_LIMIT:
          "!!{channelName}!! (voice channel), {userCount, number} of {limit, number} users",
        GUILD_SIDEBAR_CHANNEL_A11Y_LABEL_MENTIONS:
          "{mentionCount, plural, one {# mention} other {# mentions}}",
        GUILD_SIDEBAR_CHANNEL_A11Y_LABEL_UNREAD: "unread",
        GUILD_SIDEBAR_VOICE_CHANNEL_A11Y_LABEL_USERS:
          "{userCount, plural, one {1 user} other {# users}}",
        GUILD_SIDEBAR_ACTIVE_VOICE_CHANNEL_A11Y_LABEL:
          "{channelCount, plural, one {# Active Voice Channel} other {# Active Voice Channels}}",
        GUILD_SIDEBAR_ACTIVE_VOICE_CHANNEL_A11Y_HINT: "Tap to expand",
        GUILD_SIDEBAR_VOICE_CHANNEL_DESCRIBED_BY_LABEL_ACTIVITIES:
          "Active activities in this channel: {activeActivities}",
        GUILD_SIDEBAR_CHANNEL_A11Y_LABEL_LIMIT:
          "{userCount, number} of {limit, number} users",
        GUILD_SIDEBAR_CHANNEL_A11Y_LABEL_ACTIVITIES:
          "{activitiesCount, plural, one {# activity} other {# activities}}",
        GUILD_SIDEBAR_CHANNEL_A11Y_LABEL_PREMIUM_UNLOCKED: "Premium Channel",
        GUILD_SIDEBAR_CHANNEL_A11Y_LABEL_PREMIUM_LOCKED:
          "Premium Channel (locked)",
        GUILD_SIDEBAR_STAGE_CHANNEL_A11Y_LABEL:
          "!!{channelName}!! (stage channel)",
        GUILD_SIDEBAR_STAGE_CHANNEL_A11Y_LABEL_WITH_USERS:
          "!!{channelName}!! (stage channel), {userCount, plural, one {1 user} other {# users}}",
        GUILD_SIDEBAR_STAGE_CHANNEL_A11Y_LABEL_WITH_LIMIT:
          "!!{channelName}!! (stage channel), {userCount, number} of {limit, number} users",
        GUILD_SIDEBAR_UNKNOWN_CHANNEL_A11Y_LABEL:
          "!!{channelName}!! (unknown channel)",
        GUILD_SIDEBAR_VOICE_CHANNEL_A11Y_LABEL_WITH_LIMIT_WITH_MENTIONS:
          "{mentionCount, plural, one {# mention} other {# mentions}}, !!{channelName}!! (voice channel), {userCount, number} of {limit, number} users",
        GUILD_SIDEBAR_VOICE_CHANNEL_A11Y_LABEL_WITH_USERS_WITH_MENTIONS:
          "{mentionCount, plural, one {# mention} other {# mentions}}, !!{channelName}!! (voice channel), {userCount, plural, one {1 user} other {# users}}",
        GUILD_SIDEBAR_VOICE_CHANNEL_A11Y_LABEL_WITH_MENTIONS:
          "{mentionCount, plural, one {# mention} other {# mentions}}, !!{channelName}!! (voice channel)",
        CHANNEL_A11Y_LABEL: "!!{channelName}!! (channel)",
        THREAD_A11Y_LABEL: "!!{channelName}!! (thread)",
        TEXT_IN_VOICE_A11Y_LABEL:
          "Text chat for voice channel !!{channelName}!!",
        TEXT_IN_STAGE_A11Y_LABEL:
          "Text chat for stage channel !!{channelName}!!",
        THREAD_PARENT_A11Y_LABEL: "parent channel !!{channelName}!!",
        CATEGORY_A11Y_LABEL: "!!{categoryName}!! (category)",
        CATEGORY_A11Y_LABEL_WITH_EXPANDED_STATE:
          "!!{categoryName}!! (category), !!{isExpanded}!!",
        CATEGORY_A11Y_HINT_COLLAPSED: "Double tap to expand",
        CATEGORY_A11Y_HINT_EXPANDED: "Double tap to collapse",
        OPEN_USER_PROFILE_A11Y_HINT: "Double tap to view profile",
        CHANNEL_MUTED_A11Y_HINT: "Muted",
        DIRECT_MESSAGE_A11Y_LABEL: "!!{channelName}!! (direct message)",
        DIRECT_MESSAGE_A11Y_LABEL_WITH_UNREADS:
          "unread, !!{channelName}!! (direct message)",
        GROUP_MESSAGE_A11Y_LABEL: "!!{channelName}!! (group message)",
        GROUP_MESSAGE_A11Y_LABEL_WITH_UNREADS:
          "unread, !!{channelName}!! (group message)",
        CHANNEL_HEADER_BAR_A11Y_LABEL: "Channel header",
        THREAD_HEADER_BAR_A11Y_LABEL: "Thread header",
        CHANNEL_MESSAGES_A11Y_LABEL: "Messages in !!{channelName}!!",
        CHANNEL_MESSAGES_A11Y_DESCRIPTION:
          "Use the up and down arrow keys to navigate between messages quickly. New messages will be added to the bottom of the list as they come in.",
        CHANNEL_MESSAGE_REPLY_A11Y_LABEL:
          "!!{author}!! replying to !!{repliedAuthor}!!",
        MESSAGE_UTILITIES_A11Y_LABEL: "Message Actions",
        LOADING_MESSAGES_A11Y_LABEL: "Loading more messages",
        SELECT_FROM_APPLICATION_A11Y_LABEL: "Select from Application",
        CAMERA_A11Y_TURNED_ON: "Camera On",
        CAMERA_A11Y_TURNED_OFF: "Camera Off",
        SHEET_GRABBER_A11Y_LABEL: "Sheet Grabber",
        SHEET_GRABBER_A11Y_HINT: "Double tap to expand/collapse more actions",
        PIXEL_VALUE_A11Y_TEXT: "!!{value}!! pixels",
        CLOSE_MODAL_A11Y_LABEL: "Close modal",
        EXPANDED: "Expanded",
        COLLAPSED: "Collapsed",
        IMG_ALT_ATTACHMENT_FILE_TYPE: "Attachment file type: !!{fileType}!!",
        IMG_ALT_ICON: "!!{name}!! Icon",
        IMG_ALT_LOGO: "!!{name}!! Logo",
        IMG_ALT_EMOJI: "!!{name}!! Emoji",
        ATTACHMENT_IMG_A11Y_HINT: "double tap to enlarge",
        ATTACHMENT_VIDEO_A11Y_HINT: "double tap to play video and enlarge",
        HOME: "Home",
        SERVER_FOLDER_PLACEHOLDER: "Server Folder",
        SHOW_FOLDER: "Show Folder",
        OPEN_NAVIGATION: "Open Navigation",
        HIDE_NAVIGATION: "Hide Navigation",
        SKIP_TO_CONTENT: "Skip to Content",
        WUMPUS: "Wumpus",
        GO_BACK: "Go Back",
        BACK_TO: "Back to !!{destination}!!",
        UNGROUPED: "Ungrouped",
        NEW_TERMS_TITLE: "Terms of Service and Policy Updates",
        NEW_TERMS_DESCRIPTION:
          "\nTo continue using Discord, please read and agree to\nour updated Terms of Service and Privacy Policy.",
        NEW_TERMS_ACK: "I understand and agree with these terms.",
        NEW_TERMS_CONTINUE: "Continue to Discord",
        TERMS_OF_SERVICE: "[Terms of Service]({url})",
        PRIVACY_POLICY: "[Privacy Policy]({url})",
        PAID_SERVICES_TERMS: "[Paid Services Terms]({url})",
        TERMS_ACKNOWLEDGEMENT_DESCRIPTION_1:
          "Heads up! Updates are coming to the following policies below. These changes will go into effect on **{date, date, long}**. We’re letting you know now so you have time to learn what’s changing.",
        TERMS_ACKNOWLEDGEMENT_DESCRIPTION_2:
          "We encourage you to read the updated documents in full. Some of the most important changes are explained in our blog post.",
        TERMS_AGREEMENT_DESCRIPTION_1:
          "We announced updates to the policies below. The changes are now in effect. To agree, just keep using Discord.",
        TERMS_AGREEMENT_DESCRIPTION_2:
          "We encourage you to read the updated documents in full, as they apply to your use of Discord. We’ve explained some of the most important changes in our blog post.",
        TERMS_OF_SERVICE_UPDATE_03_27_2023_DESCRIPTION:
          "We announced our annual updates to our policies last month, which are now in effect. Check out our [blog post](https://discord.com/blog/important-policy-updates) for a summary of these changes, and read the full policies below.",
        COMMUNITY_GUIDELINES: "[Community Guidelines]({url})",
        BLOG_POST: "[Our blog post]({url})",
        SEARCH_FILTER_CONTEXT_MENU_FROM: "From a specific person",
        SEARCH_FILTER_CONTEXT_MENU_MENTIONS: "Mention someone",
        SEARCH_FILTER_CONTEXT_MENU_CHANNEL: "In a specific channel",
        SEARCH_FILTER_CONTEXT_MENU_BEFORE_DATE: "Before a date",
        SEARCH_FILTER_CONTEXT_MENU_AFTER_DATE: "After a date",
        SEARCH_FILTER_CONTEXT_MENU_ON_DATE: "Sent on a date",
        SEARCH_FILTER_MESSAGES_FROM_USER:
          "Filter messages from a particular user",
        SEARCH_FILTER_MESSAGES_FROM_CHANNEL:
          "Filter messages from a particular channel",
        SEARCH_FILTER_MESSAGES_MENTION_USER:
          "Filter messages that mention a particular user",
        SEARCH_FILTER_MESSAGES_BEFORE_DATE:
          "Filter messages from before a date",
        SEARCH_FILTER_MESSAGES_AFTER_DATE: "Filter messages from after a date",
        SEARCH_FILTER_MESSAGES_ON_DATE:
          "Filter messages sent on a specific date",
        SEARCH_AUTOCOMPLETE_PROMPT: "Start typing to see some suggestions!",
        SEARCH_AUTOCOMPLETE_NO_RESULTS:
          "Unfortunately, we could not find any suggestions.",
        SEARCH_ADD_FILTERS: "Add Filters",
        SEARCH_RESULTS_SECTION_LABEL: "Search Results",
        SEARCH_IN: "Search in {guildName}",
        SEARCH_DM_WITH: "Search DM with {userName}",
        SEARCH_DATE_PICKER_HINT: "You can also do",
        SEARCH_NEWEST: "Newest",
        SEARCH_MOST_RELEVANT_SHORT: "Relevant",
        SEARCH_NEWEST_SHORT: "New",
        SEARCH_OLDEST_SHORT: "Old",
        SEARCH_FOR_VALUE: "Search For: **!!{value}!!**",
        TOTAL_RESULTS:
          "{count, plural, =0 {No Results} one {{count} Result} other {{count} Results}}",
        STILL_INDEXING: "Indexing",
        SEARCHING: "Searching…",
        SEARCH_NO_RESULTS:
          "We searched far and wide. Unfortunately, no results were found.",
        SEARCH_NO_RESULTS_ALT:
          "No results found. Empathy banana is here for you.",
        SEARCH_GUILD_STILL_INDEXING:
          "Before searching, we need to index this server. Give us a bit.",
        SEARCH_DM_STILL_INDEXING:
          "Before searching, we need to index this DM. Give us a bit.",
        SEARCH_DMS_STILL_INDEXING:
          "Before searching, we need to index your messages. Give us a bit.",
        SEARCH_ERROR:
          "We dropped the magnifying glass. Can you try searching again?",
        SEARCH_STILL_INDEXING_HINT:
          "{count, plural, =0 {No results} one {{count} result} other {{count} results}} indexed so far. We’re still indexing older messages.",
        SEARCH_NUM_RESULTS_BLOCKED_NOT_SHOWN:
          "We’ve hidden {count, plural, one {{count} result} other {{count} results}} from users you’ve blocked.",
        SEARCH_HIDE_BLOCKED_MESSAGES:
          "Hide {count, plural, one {{count} message} other {{count} messages}} from blocked users",
        SEARCH_PICK_DATE: "Pick a date",
        SEARCH_FROM_SUGGESTIONS: 'Search for "{suggestion}"',
        SEARCH_GROUP_HEADER_FROM: "From User",
        SEARCH_GROUP_HINT_FROM_USER:
          "Tap to append filter. Search messages from this user",
        SEARCH_GROUP_HEADER_MENTIONS: "Mentions User",
        SEARCH_GROUP_HINT_MENTIONS_USER:
          "Tap to append filter. Search messages which mention this user",
        SEARCH_GROUP_HEADER_HAS: "Message Contains",
        SEARCH_GROUP_HINT_HAS_CONTENT:
          "Tap to append filter. Search messages which contain this content",
        SEARCH_GROUP_HEADER_CHANNELS: "In Channel",
        SEARCH_GROUP_HINT_IN_CHANNEL:
          "Tap to append filter. Search messages in this channel",
        SEARCH_GROUP_HEADER_LINK_FROM: "Link From Website",
        SEARCH_GROUP_HEADER_FILE_TYPE: "File type",
        SEARCH_GROUP_HEADER_SEARCH_OPTIONS: "Search Options",
        SEARCH_GROUP_HINT_SEARCH_OPTION:
          "Tap to append filter to current search",
        SEARCH_GROUP_HEADER_HISTORY: "History",
        SEARCH_GROUP_HINT_PAST_SEARCH: "Tap to submit this past search",
        SEARCH_GROUP_HEADER_DATES: "Dates",
        SEARCH_GROUP_HEADER_PINNED: "Pinned",
        SEARCH_GROUP_HINT_PINNED:
          "Tap to append filter. Search pinned messages",
        SEARCH_FILTERS: "Search Filters",
        SEARCH_FILTER_RESULTS_ELLIPSIZED: "Filter results...",
        SEARCH_FILTER_FROM: "from",
        SEARCH_FILTER_HAS: "has",
        SEARCH_FILTER_BEFORE: "before",
        SEARCH_FILTER_ON: "on",
        SEARCH_FILTER_DURING: "during",
        SEARCH_FILTER_AFTER: "after",
        SEARCH_FILTER_IN: "in",
        SEARCH_FILTER_MENTIONS: "mentions",
        SEARCH_FILTER_LINK_FROM: "linkFrom",
        SEARCH_FILTER_FILE_TYPE: "fileType",
        SEARCH_FILTER_FILE_NAME: "fileName",
        SEARCH_FILTER_PINNED: "pinned",
        SEARCH_HISTORY_SECTION: "Search History",
        SEARCH_MEDIA_SECTION: "Photos & Media",
        SEARCH_VIEW_ALL: "View all",
        SEARCH_CLEAR_ALL: "Clear all",
        SEARCH_ANSWER_FROM: "user",
        SEARCH_ANSWER_HAS: "link, embed or file",
        SEARCH_ANSWER_DATE: "specific date",
        SEARCH_ANSWER_IN: "channel",
        SEARCH_ANSWER_MENTIONS: "user",
        SEARCH_ANSWER_LINK_FROM: "website",
        SEARCH_ANSWER_FILE_TYPE: "extension",
        SEARCH_ANSWER_FILE_NAME: "file name",
        SEARCH_ANSWER_BOOLEAN: "true or false",
        SEARCH_SHORTCUT_TODAY: "today",
        SEARCH_SHORTCUT_YESTERDAY: "yesterday",
        SEARCH_SHORTCUT_WEEK: "week",
        SEARCH_SHORTCUT_MONTH: "month",
        SEARCH_SHORTCUT_YEAR: "year",
        SEARCH_ANSWER_HAS_LINK: "link",
        SEARCH_ANSWER_HAS_ATTACHMENT: "file",
        SEARCH_ANSWER_HAS_EMBED: "embed",
        SEARCH_ANSWER_HAS_IMAGE: "image",
        SEARCH_ANSWER_HAS_VIDEO: "video",
        SEARCH_ANSWER_HAS_SOUND: "sound",
        SEARCH_ANSWER_HAS_STICKER: "sticker",
        SEARCH_CLEAR_HISTORY: "Clear Search History",
        SEARCH_CLEAR: "Clear search",
        PAGINATION_PAGE_OF: "Page {page} of {totalPages}",
        PREMIUM_NOT_VERIFIED: "Verify your email first",
        PREMIUM_NOT_VERIFIED_BODY:
          "Hey friend! If you want to make purchases, you’ll need to verify your email first.",
        PREMIUM_NOT_CLAIMED: "Claim your account first",
        PREMIUM_NOT_CLAIMED_BODY:
          "Hey friend! If you want to make purchases, you’ll need to claim your account first so you don’t lose your stuff.",
        ALPHA: "Alpha",
        BETA: "Beta",
        EXPERIMENTAL: "Experimental",
        EXPERIMENTAL_FEATURES: "Experimental Features",
        EXPERIMENTAL_DESCRIPTION:
          "These settings/features are in testing phase and may be unstable. They are subject to change or removal without notice. Use with caution.",
        EXPERIMENTAL_FEATURES_TOAST:
          "These settings are still baking. Try not to get burnt \uD83D\uDD25",
        PREMIUM_PERKS_TIER_2_PROFILE:
          "Style your profile with a banner, custom tag, theme, animated avatar, and exclusive Nitro badge",
        PREMIUM_PERKS_TIER_1_PROFILE:
          "Style your profile with a custom tag, animated avatar, and exclusive Nitro badge",
        PREMIUM_PERKS_TIER_2_CUSTOM_EMOJI:
          "Use your custom emoji anywhere and animate them",
        PREMIUM_PERKS_TIER_2_PREMIUM_PROFILES:
          "Be who you want and use a different avatar, banner, and bio in each of your servers.",
        PREMIUM_PERKS_TIER_1_CUSTOM_EMOJI:
          "Use custom and animated emoji anywhere",
        PREMIUM_PERKS_TIER_2_STREAM_RESOLUTION:
          "Better video resolutions for all your desktop screen shares up to 4k 60fps",
        PREMIUM_PERKS_TIER_1_STREAM_RESOLUTION:
          "Screen share up to 1080p and up to 60 fps",
        PREMIUM_PERKS_UPLOAD_SIZE:
          "Increased upload size from {maxUploadStandard} to {maxUploadPremium}",
        PREMIUM_PERKS_TIER_2_GUILD_SUBSCRIPTION:
          "Get {numBoosts} Boosts and {discountPercentage} off future Boosts",
        PREMIUM_PERKS_TIER_1_GUILD_SUBSCRIPTION:
          "{discountPercentage} off Server Boosts",
        PREMIUM_PERKS_TIER_2_MAX_GUILDS:
          "Double the number of servers you can join from {nonPremiumMaxGuilds} to {premiumMaxGuilds}",
        PREMIUM_PERKS_TIER_2_ACTIVITIES: "Get access to even more Activities",
        PREMIUM_CHAT_PERKS_CUSTOM_STICKERS: "Use custom stickers anywhere",
        PREMIUM_CHAT_PERKS_MAX_MESSAGE_LENGTH:
          "Say what's on your mind with an increased character count from {nonPremiumMaxMessageLength} to {premiumMaxMessageLength} characters",
        PREMIUM_CHAT_PERKS_MAX_MESSAGE_LENGTH_UPSELL:
          "Lift off with Discord Nitro to type to your heart’s content, up to {premiumMaxMessageLength} characters. [Learn more](onClick).",
        PREMIUM_SUBSCRIPTION_CREDIT: "!!{planName}!! Credit",
        PREMIUM_SUBSCRIPTION_CREDIT_COUNT_MONTHS:
          "{count, plural, =1 {# Month} other {# Months}}",
        PREMIUM_SUBSCRIPTION_CREDIT_APPLIED_ON:
          "Credit will be applied on {date, date, medium}.",
        PREMIUM_SUBSCRIPTION_CREDIT_APPLIED_MISMATCHED_PLAN:
          "This credit will apply once you sign up for a !!{planName}!! subscription.",
        PREMIUM_SUBSCRIPTION_CREDIT_APPLIED_MISMATCHED_PLAN_ANDROID:
          "This credit can be applied to a !!{planName}!! subscription purchased on desktop.",
        PREMIUM_SUBSCRIPTION_SUBSCRIPTIONS_LINK:
          "Trying to manage your Nitro subscription? Go to your [Subscriptions](onSubscriptionsClick) page.",
        PREMIUM_SUBSCRIPTION_MANAGE_YOURS_LINK:
          "Trying to manage your {subscriptionName} subscription? Go to your [Subscriptions](onSubscriptionsClick) page.",
        PREMIUM_SUBSCRIPTION_TIER_1_DEPRECATION:
          "Nitro Classic is no longer available for new purchases. As an existing Classic subscriber, you can keep your plan as long as your renewal is successful. For more details, check this [support article]({helpdeskArticle}). Go to the [Subscriptions](onSubscriptionsClick) page to manage your Nitro plan.",
        PREMIUM_UPSELL_FEATURE_PRETEXT:
          "Boost at a better price with Discord Nitro! For **{monthlyPrice}/Month** you’ll get:",
        PREMIUM_UPSELL_FEATURE_PRETEXT_WITHOUT_PRICE:
          "Boost at a better price with Discord Nitro! You’ll get:",
        PREMIUM_UPSELL_FEATURE_PRETEXT_TRIAL:
          "Boost at a better price with Discord Nitro! Start your free month and gain access to:",
        PREMIUM_UPSELL_FEATURE_PRETEXT_TRIAL_VARIANT:
          "Boost at a better price with Discord Nitro! Start your free trial and gain access to:",
        PREMIUM_UPSELL_FEATURE_FREE_GUILD_SUBSCRIPTION:
          "{numFreeGuildSubscriptions, plural, =1 {# Server Boost} other {# Server Boosts}} for instant Level 1 perks",
        PREMIUM_UPSELL_FEATURE_GUILD_SUBSCRIPTION_DISCOUNT:
          "{percent} off Server Boosts",
        PREMIUM_UPSELL_FEATURE_STREAM: "Source-quality Go Live streaming",
        PREMIUM_UPSELL_FEATURE_UPLOAD: "Upload file size increase to 100MB",
        PREMIUM_UPSELL_FEATURE_UPLOAD_INCREASE:
          "Upload file size increase to {premiumMaxSize}",
        PREMIUM_UPSELL_FEATURE_CHAT_PERKS:
          "Superpower chat perks: animated emoji, custom Discord tag, and more",
        PREMIUM_UPSELL_FEATURE_CHAT_PERKS_MOBILE:
          "Extra chat perks: animated emoji, custom Discord tag, and more",
        PREMIUM_UPSELL_UPGRADE: "Upgrade to Nitro",
        PREMIUM_UPSELL_CONTINUE_TO_BOOSTS: "Continue to Boosts",
        PREMIUM_UPSELL_CONTINUE_TO_MONTHLY: "Continue to Monthly",
        PREMIUM_UPSELL_YEARLY_TITLE: "Get {discountPercentage} off {planName}",
        PREMIUM_UPSELL_YEARLY_DESCRIPTION:
          "Subscribe to a yearly subscription and get a {discountPercentage} discount.",
        PREMIUM_UPSELL_YEARLY_CTA: "Subscribe Yearly - !!{price}!! / Year",
        PREMIUM_GRANDFATHERED_YEARLY:
          "As a thank you for supporting Discord, you have access to Nitro for two years. Your access ends **{date, date, medium}**.",
        PREMIUM_GRANDFATHERED_MONTHLY:
          "Thanks for being an early supporter. Your grandfathered Nitro subscription changes to Nitro Classic on **{date, date, medium}**. Upgrade now for a free month and keep your current perks",
        PREMIUM_GUILD_SUBSCRIPTION_TITLE: "Server Boost",
        PREMIUM_GUILD_SUBSCRIPTION_SUBTITLE:
          "Boosting a server allows it to progress towards levels. Each level gives collective perks for the entire server.\n\n  Boosting a server activates a 7-day cooldown. You may not transfer a Boost to another server until this cooldown is finished. [Learn more about Server Boosting.]({helpdeskArticle})",
        PREMIUM_GUILD_SUBSCRIPTION_MARKETING_GUILDS_BLURB:
          "You can Boost a joined server, check the current level progress, and view level perks within the server itself. Get started with any of your joined servers:",
        PREMIUM_GUILD_SUBSCRIPTION_MARKETING_GUILDS_BLURB_WITHOUT_PROMPT:
          "You can Boost a joined server, check the current level progress, and view level perks within the server itself.",
        PREMIUM_GUILD_SUBSCRIPTION_MARKETING_GUILDS_BLURB_PROMPT:
          "Get started with any of your joined servers:",
        PREMIUM_GUILD_SUBSCRIPTION_MARKETING_GUILDS_EMPTY_DESCRIPTION_TITLE:
          "Looks like you haven't joined a server yet.",
        PREMIUM_GUILD_SUBSCRIPTION_MARKETING_GUILDS_EMPTY_DESCRIPTION_TEXT:
          "Come back after you've found some cool people to Boost with.",
        PREMIUM_GUILD_SUBSCRIPTION_SUBTITLE_MOBILE_1:
          "Boosting allows a server to progress towards levels. Each level unlocks perks for the entire server.",
        PREMIUM_GUILD_SUBSCRIPTION_SUBTITLE_MOBILE_2:
          "Boosting a server activates a 7-day cooldown. You may not use this Boost on another server until this cooldown is finished. [Learn more about Server Boosting.]({helpdeskArticle})",
        PREMIUM_GUILD_SUBSCRIPTION_UNUSED_SLOT_DESCRIPTION: "Unused Boost",
        PREMIUM_GUILD_SUBSCRIPTION_INVENTORY_UNCANCEL_TITLE:
          "Uncancel Boost Subscription",
        PREMIUM_GUILD_SUBSCRIPTION_INVENTORY_UNCANCEL_TITLE_MOBILE:
          "Save the Boost?",
        PREMIUM_GUILD_SUBSCRIPTION_INVENTORY_UNCANCEL_DESCRIPTION:
          "Would you like to uncancel this Server Boost?",
        PREMIUM_GUILD_SUBSCRIPTION_INVENTORY_UNCANCEL_BUTTON:
          "Yes, Uncancel Now",
        PREMIUM_GUILD_SUBSCRIPTION_INVENTORY_UNCANCEL_BUTTON_MOBILE:
          "Uncancel Now",
        PREMIUM_GUILD_SUBSCRIPTION_INVENTORY_UNCANCEL_ERROR:
          "There was an error trying to uncancel this boost.",
        PREMIUM_GUILD_SUBSCRIPTION_INVENTORY_UNCANCEL_CONFIRM_TITLE:
          "Boosts Saved!",
        PREMIUM_GUILD_SUBSCRIPTION_INVENTORY_UNCANCEL_CONFIRM_DESCRIPTION:
          "This Server Boost is saved from cancellation! Keep on Boosting!",
        PREMIUM_GUILD_SUBSCRIPTION_PURCHASE_BUTTON_DISABLED_PENDING_MUTATION_PLAN:
          "You have to cancel your pending plan change before buying boosts.",
        PREMIUM_GUILD_SUBSCRIPTION_PURCHASE_BUTTON_DISABLED_PENDING_MUTATION_PREMIUM_GUILD_SUBSCRIPTION:
          "You have a pending boost cancellation. You have to uncancel it before buying boosts.",
        PREMIUM_GUILD_SUBSCRIPTION_PURCHASE_BUTTON_DISABLED_SUBSCRIPTION_PAST_DUE:
          "Your subscription is past due. You have to update your payment information before buying boosts.",
        PREMIUM_GUILD_SUBSCRIPTION_PURCHASE_BUTTON_DISABLED_SUBSCRIPTION_ACCOUNT_HOLD:
          "Your subscription is on hold. You have to update your payment information before buying boosts.",
        PREMIUM_GUILD_SUBSCRIPTION_ACTIVE_TITLE: "Active Server Boosts",
        PREMIUM_GUILD_COOLDOWN_AVAILABLE_COUNTDOWN:
          "Boost Cooldown: **{days, number}d {hours, number}h {minutes, number}m**",
        PREMIUM_GUILD_COOLDOWN_AVAILABLE_COUNTDOWN_DAYS:
          "Cooldown! Boost cannot be moved for {days, plural, =1 {# day} other {# days}}.",
        PREMIUM_GUILD_COOLDOWN_AVAILABLE_COUNTDOWN_HOURS:
          "Cooldown! Boost cannot be moved for {hours, plural, =1 {# hour} other {# hours}} and {minutes, plural, =1 {# minute} other {# minutes}}.",
        PREMIUM_GUILD_COOLDOWN_AVAILABLE_COUNTDOWN_MINUTES:
          "Cooldown! Boost cannot be moved for {minutes, plural, =1 {# minute} other {# minutes}}.",
        PREMIUM_GUILD_GRACE_PERIOD_TITLE:
          "**Your server is going to lose a level!**",
        PREMIUM_GUILD_GRACE_PERIOD_COOLDOWN:
          "This server will lose {tierName} perks in: **{days, number}d {hours, number}h**. You need **{numPremiumSubscriptions, plural, =1 {# Boost} other {# Boosts}}** to maintain it.",
        PREMIUM_GUILD_GRACE_PERIOD_COOLDOWN_SOON:
          "This server will lose {tierName} perks soon. You need **{numPremiumSubscriptions, plural, =1 {# Boost} other {# Boosts}}** to maintain it.",
        PREMIUM_GUILD_SUBSCRIPTION_GUILD_SUBSRIPTION_SUBTITLE:
          "You Boosted {numSubscriptions, plural, =1 {# time} other {# times}}",
        PREMIUM_GUILD_SUBSCRIPTION_NUM_SUBSCRIPTIONS:
          "{numSubscriptions, plural, =1 {# Boost} other {# Boosts}}",
        PREMIUM_GUILD_SUBSCRIPTION_AVAILABLE:
          "{numSubscriptions, plural, =1 {# Boost} other {# Boosts}} Available",
        PREMIUM_GUILD_SUBSCRIPTION_SUBSCRIBE: "Boost a server",
        PREMIUM_GUILD_SUBSCRIPTION_SELECT_SERVER_BUTTON: "Select a Server",
        PREMIUM_GUILD_SUBSCRIPTION_TRANSFER_BUTTON: "Transfer Boost",
        PREMIUM_GUILD_SUBSCRIPTION_TRANSFER_HERE: "Transfer here",
        PREMIUM_GUILD_SUBSCRIPTION_TRANSFER_BUTTON_DISABLED_TOOLTIP:
          "This Boost is on cooldown",
        PREMIUM_GUILD_SUBSCRIPTION_APPLY_NON_GUILD_MEMBER:
          "You're not a member of any servers yet!\n\n$[Explore public servers](publicGuildDirectoryHook) and join one to apply your Boost.",
        PREMIUM_GUILD_SUBSCRIPTION_APPLY_GUILD_NOT_FOUND:
          "Couldn't find any guilds by that name.",
        PREMIUM_GUILD_SUBSCRIPTION_CANCEL_BUTTON_DISABLED_TOOLTIP:
          "This Boost is included with your Nitro subscription",
        PREMIUM_GUILD_SUBSCRIPTION_CANCEL_BUTTON_DISABLED_PAST_DUE_TOOLTIP:
          "Your subscription is past due. Please update your payment information before managing boosts.",
        PREMIUM_GUILD_SUBSCRIPTION_SLOT_CANCEL_BUTTON:
          "Cancel Boost Subscription",
        PREMIUM_GUILD_SUBSCRIPTION_SLOT_UNCANCEL_BUTTON:
          "Uncancel Boost Subscription",
        PREMIUM_GUILD_SUBSCRIPTION_SLOT_UNCANCEL_BUTTON_MOBILE: "Uncancel",
        PREMIUM_GUILD_SUBSCRIPTION_CREATION_DATE: "{date, date, long}",
        PREMIUM_GUILD_SUBSCRIPTION_DURATION:
          "Boosting since {date, date, medium} ({months, plural, =1 {# Month} other {# Months}})",
        PREMIUM_GUILD_SUBSCRIPTION_DURATION_SHORTENED:
          "Since {date, date, medium}",
        PREMIUM_GUILD_SUBSCRIPTION_PENDING_CANCELATION:
          "Pending Cancellation: **{date, date, medium}**",
        PREMIUM_GUILD_SUBSCRIPTION_SUBSCRIBER_COUNT_TOOLTIP:
          "{subscriberCount, plural, =1 {# Boost} other {# Boosts}}",
        PREMIUM_GUILD_NUM_MONTH_GUILD_SUBSCRIPTIONS:
          "**{num}** \xd7 {num, plural, =1 {Server Boost} other {Server Boosts}} Monthly",
        PREMIUM_GUILD_NUM_MULTI_MONTHS_GUILD_SUBSCRIPTIONS:
          "**{num}** \xd7 {num, plural, =1 {Server Boost} other {Server Boosts}} {intervalCount} Month",
        PREMIUM_GUILD_NUM_YEAR_GUILD_SUBSCRIPTIONS:
          "**{num}** \xd7 {num, plural, =1 {Server Boost} other {Server Boosts}} Yearly",
        PREMIUM_GUILD_NUM_MONTH_GUILD_SUBSCRIPTIONS_UNFORMATTED:
          "{num} \xd7 {num, plural, =1 {Server Boost} other {Server Boosts}} Monthly",
        MANAGE_PREMIUM_GUILD_SUBSCRIPTION: "Manage Boost",
        GUILD_BOOSTING_USER_SETTINGS_HEADING_NO_GUILD_BOOSTS:
          "Uh oh, you haven't Boosted yet!",
        GUILD_BOOSTING_USER_SETTINGS_HEADING_YOUR_GUILD_BOOSTS:
          "Your server\n\nBoosts",
        GUILD_BOOSTING_USER_SETTINGS_HEADING_HAS_UNAPPLIED_FREE_GUILD_BOOSTS:
          "Your Boosts are\n\nwaiting",
        GUILD_BOOSTING_USER_SETTINGS_HEADING_UNAPPLIED_GUILD_BOOST_HEADING_V2:
          "Your {numUnappliedGuildBoostSlots, plural, =1 {Boost} other {Boosts}} {numUnappliedGuildBoostSlots, plural, =1 {is} other {are}} waiting!",
        GUILD_BOOSTING_USER_SETTINGS_HEADING_UNAPPLIED_GUILD_BOOST_HEADING_INCLUDED_WITH_SUBSCRIPTION:
          "Your free {numUnappliedGuildBoostSlots, plural, =1 {Boost} other {Boosts}} {numUnappliedGuildBoostSlots, plural, =1 {is} other {are}} waiting",
        GUILD_BOOSTING_USER_SETTINGS_HEADING_UNAPPLIED_GUILD_BOOST_SUBHEADING:
          "Just waiting here until you choose a server to give {numUnappliedGuildBoostSlots, plural, =1 {it} other {them}} to!",
        GUILD_BOOSTING_USER_SETTINGS_HEADING_UNAPPLIED_GUILD_BOOST_SUBHEADING_WITH_PREMIUM_SUBSCRIPTION:
          "Just waiting here until you choose a server to give {numUnappliedGuildBoostSlots, plural, =1 {it} other {them}} to! Learn more about your Nitro Perks $[here](learnMoreHook).",
        GUILD_BOOSTING_USER_SETTINGS_CANCEL_BOOST: "Cancel Boost",
        GUILD_BOOSTING_USER_SETTINGS_UNCANCEL_BOOST: "Uncancel Boost",
        GUILD_BOOSTING_USER_SETTINGS_BOOST_ANY_SERVER: "Boost any server",
        GUILD_BOOSTING_USER_SETTINGS_BOOST_THIS_SERVER: "Boost this server",
        GUILD_BOOSTING_USER_SETTINGS_SUBTITLE_ACTIVE_BOOSTS: "Active Boosts",
        GUILD_BOOSTING_USER_SETTINGS_SUBTITLE_ACTIVE_BOOSTS_FLAVOR:
          "These are your purchased Boosts, powering your favorite servers. You can manage them here (add, subtract, cancel — just beware the 7-day cooldown). [Learn more here.]({helpdeskArticle})",
        GUILD_BOOSTING_USER_SETTINGS_SUBTITLE_SUBBED_NO_ACTIVE_BOOSTS:
          "Give your Boosts to your favorite servers",
        GUILD_BOOSTING_USER_SETTINGS_SUBTITLE_NO_ACTIVE_BOOSTS_FLAVOR:
          "Server Boosts start at {monthlyGuildBoostPrice}.",
        GUILD_BOOSTING_USER_SETTINGS_SUBTITLE_NO_SUB_NO_ACTIVE_BOOSTS:
          "Boost your favorite servers",
        GUILD_BOOSTING_USER_SETTINGS_RECOMMENDED_SERVERS_HEADING:
          "These servers could use a Boost",
        GUILD_BOOSTING_USER_SETTINGS_NO_JOINED_SERVER_SUBTITLE:
          "Join a server to get started",
        GUILD_BOOSTING_USER_SETTINGS_PUBLIC_SERVER_TITLE:
          "Discoverable Servers",
        GUILD_BOOSTING_USER_SETTINGS_PUBLIC_SERVER_SUBTITLE:
          "Find your community on Discord",
        GUILD_BOOSTING_USER_SETTINGS_PUBLIC_SERVER_CTA: "Explore servers",
        GUILD_BOOSTING_USER_SETTINGS_UNAPPLIED_GUILD_BOOST_DESCRIPTION:
          "Looks like this Boost could use a new home!",
        GUILD_BOOSTING_USER_SETTINGS_NO_AVAILABLE_GUILD_BOOST_SLOTS:
          "Oh no! You don't have any available Boosts.",
        GUILD_BOOSTING_USER_SETTINGS_APPLIED_GUILD_BOOST_UNKNOWN_GUILD:
          "Unknown Server",
        GUILD_BOOSTING_USER_SETTINGS_PERK_TEMPLATE:
          "This Boost helped unlock **{perk}** for everyone",
        GUILD_BOOSTING_USER_SETTINGS_PERK_EMOJI_SLOTS:
          "{numEmojiSlots} emoji slots",
        GUILD_BOOSTING_USER_SETTINGS_PERK_STICKER_SLOTS:
          "{numStickerSlots} sticker slots",
        GUILD_BOOSTING_USER_SETTINGS_PERK_SOUNDBOARD_SLOTS:
          "{numSoundboardSlots} soundboard slots",
        GUILD_BOOSTING_USER_SETTINGS_PERK_STREAM_QUALITY:
          "{resolution} & {framerate}fps stream quality",
        GUILD_BOOSTING_USER_SETTINGS_PERK_AUDIO_QUALITY:
          "{bitrate}kbps audio quality",
        GUILD_BOOSTING_USER_SETTINGS_PERK_UPLOAD_SIZE_LIMIT:
          "{filesize} upload size limit",
        GUILD_BOOSTING_USER_SETTINGS_PERK_VIDEO_STAGE_SEATS:
          "{numVideoStageSeats} video stage seats",
        GUILD_BOOSTING_USER_SETTINGS_PERK_ANIMATED_GUILD_ICON:
          "an animated server icon",
        GUILD_BOOSTING_USER_SETTINGS_PERK_GUILD_INVITE_BACKGROUND:
          "a server invite background",
        GUILD_BOOSTING_USER_SETTINGS_PERK_GUILD_BANNER: "a server banner",
        GUILD_BOOSTING_USER_SETTINGS_PERK_CUSTOM_ROLE_ICONS:
          "custom role icons",
        GUILD_BOOSTING_USER_SETTINGS_PERK_VANITY_URL: "a custom invite link",
        GUILD_BOOSTING_USER_SETTINGS_BOOST_ANY_GUILD_CTA:
          "Don't see the server you're looking for? $[Boost any server here.](boostAnyGuildHook)",
        MONTHLY_GUILD_SUBSCRIPTION: "Monthly Subscription (!!{planName}!!)",
        MULTI_MONTHS_GUILD_SUBSCRIPTION:
          "{intervalCount} Month Subscription (!!{planName}!!)",
        YEARLY_GUILD_SUBSCRIPTION: "Yearly Subscription (!!{planName}!!)",
        PREMIUM_GUILD_SUBSCRIPTION_CANCEL_TITLE: "Cancel Server Boost",
        PREMIUM_GUILD_SUBSCRIPTION_CANCEL_TITLE_INVENTORY:
          "Cancel Server Boost From Inventory",
        PREMIUM_GUILD_SUBSCRIPTION_CANCEL_TITLE_GUILD:
          "Cancel Server Boost From A Server",
        PREMIUM_GUILD_SUBSCRIPTION_CANCEL_TITLE_PENDING_CANCELLATION:
          "Boost Pending Cancellation",
        PREMIUM_GUILD_SUBSCRIPTION_CANCEL_BODY_INVENTORY:
          "Are you sure you want to cancel a Server Boost from your Inventory? We’ll smash this gem to pieces.\n\nIt will be removed from associated servers and canceled from your subscription at the end of your billing period: **{endDate, date, long}**.",
        PREMIUM_GUILD_SUBSCRIPTION_CANCEL_BODY_GUILD:
          "Are you sure you want to cancel this Server Boost? We’ll smash this gem to pieces.\n\nIt will be removed from associated servers and canceled from your subscription at the end of your billing period: **{endDate, date, long}**.",
        PREMIUM_GUILD_SUBSCRIPTION_CANCEL_BODY_EXTERNAL:
          "Sorry, we don't currently support canceling boosts purchased through !!{paymentGatewayName}!!. You can cancel your boost through [!!{paymentGatewayName}!!'s Subscription Management]({subscriptionManagementLink}).",
        PREMIUM_GUILD_SUBSCRIPTION_CANCEL_PREVIEW:
          "This Server Boost subscription will be canceled at the end of your Nitro or Nitro Classic billing period, **{endDate, date, medium}**.\n\nThe changes to your subscription are reflected below:",
        PREMIUM_GUILD_SUBSCRIPTION_CANCEL_INVOICE_SUBSCRIPTION_CANCELLED:
          "**{subscriptionCount, number}** {subscriptionCount, plural, =1 {Server Boost} other {Server Boosts}} Canceled",
        PREMIUM_GUILD_SUBSCRIPTION_CANCEL_BUTTON: "Yes, Cancel Boost",
        PREMIUM_GUILD_SUBSCRIPTION_CANCEL_BUTTON_MOBILE: "Cancel Boost",
        PREMIUM_GUILD_SUBSCRIPTION_CANCEL_ERROR_MOBILE:
          "There was an error trying to cancel this boost.",
        PREMIUM_GUILD_SUBSCRIPTION_CONFIRM_TITLE: "Boost Canceled!",
        PREMIUM_GUILD_SUBSCRIPTION_CONFIRM_BODY:
          "Alright, we're ready to smash this Boost gem for you.\n\nThis Boost is scheduled to be canceled on: **{endDate, date, medium}**.\n\n**You can still use this Boost until it gets demolished!**",
        PREMIUM_GUILD_SUBSCRIPTION_NOTICE:
          "Server Boosts are here! Rally your community to boost your server.",
        PREMIUM_GUILD_SUBSCRIPTION_NOTICE_SMALL_GUILD:
          "Server Boosts are here! Rally your friends to boost your server.",
        PREMIUM_GUILD_SUBSCRIPTION_NOTICE_BUTTON: "See Levels & Perks",
        PREMIUM_GUILD_SUBSCRIPTION_GUILD_AFFINITY_NOTICE:
          "Support your top server with a boost and get a special badge!",
        PREMIUM_GUILD_SUBSCRIPTION_GUILD_AFFINITY_NOTICE_SMALL_GUILD:
          "Unlock perks for your favorite server and get a special badge!",
        PREMIUM_GUILD_SUBSCRIPTION_GUILD_AFFINITY_NOTICE_BUTTON:
          "Boost This Server",
        PREMIUM_GUILD_GRACE_PERIOD_NOTICE:
          "Oh no! Your server is going to lose a level! Refer to your server settings for status details.",
        PREMIUM_GUILD_GRACE_PERIOD_NOTICE_BUTTON: "Check Status",
        GUILD_BANNER_NOTICE:
          "Want this server to feel unique? Unlock custom server banners with **{boostsNeeded} more {boostsNeeded, plural, =1 {boost} other {boosts}}.**",
        GUILD_BANNER_NOTICE_CTA: "Boost This Server",
        PREMIUM_GUILD_SUBSCRIPTION_MARKETING_HEADER:
          "Anyone can help your favorite server level up & unlock customizations, and collective perks",
        PREMIUM_GUILD_SUBSCRIPTION_MARKETING_HEADER_IOS:
          "Support your favorite servers",
        PREMIUM_GUILD_SUBSCRIPTION_MARKETING_BLURB:
          "Give Boosts to a server and help unlock up to three levels. The more Boosts, the higher the level, the more perks unlock for everyone in that server!",
        PREMIUM_GUILD_SUBSCRIPTION_HEADER_SUBSCRIBE_TOOLTIP_HEADER:
          "Server Boosting",
        PREMIUM_GUILD_SUBSCRIPTION_HEADER_SUBSCRIBE_TOOLTIP_TEXT:
          "Level up and unlock new perks for everyone in your server!",
        PREMIUM_GUILD_SUBSCRIPTION_HEADER_SUBSCRIBE_TOOLTIP_CLOSE: "Got it",
        PREMIUM_GUILD_SUBSCRIPTION_OUT_OF_SLOTS_TITLE: "You're Out of Boosts!",
        PREMIUM_GUILD_SUBSCRIPTION_OUT_OF_SLOTS_PURCHASE_ON_DESKTOP:
          "You have no more boosts to apply. Purchase additional boosts on the desktop app.\n[Learn more.]({helpdeskArticle})",
        PREMIUM_GUILD_SUBSCRIPTION_OUT_OF_SLOTS_PENDING_PLAN_CHANGE:
          "You have no more boosts to apply. To purchase more, upgrade your plan once your pending plan change is complete.",
        PREMIUM_GUILD_SUBSCRIPTION_OUT_OF_SLOTS_CANCELED_SUBSCRIPTION:
          "You have no more boosts to apply. To purchase more, please re-subscribe and upgrade your plan.",
        PREMIUM_GUILD_SUBSCRIPTION_OUT_OF_SLOTS_ACCOUNT_HOLD_TITLE:
          "Your subscription is on hold",
        PREMIUM_GUILD_SUBSCRIPTION_OUT_OF_SLOTS_ACCOUNT_HOLD:
          "In order to use your existing Boosts or purchase more please resolve your subscription hold by updating your payment info.",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_MODAL_HEADER:
          "Unlock customization and upgrades for everyone:",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_MODAL_PROGRESS_BAR_HEADER:
          "Boosting unlocks powerful features and upgrades for everyone in the server to enjoy. Give a Boost and get:",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_MODAL_HEADER_IMG_ALT_TEXT:
          "Image of a pink crystal with wings",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_MODAL_FEATURE_BANNER_TITLE:
          "Personalize your invites",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_MODAL_FEATURE_BANNER_SUBTITLE:
          "Reach Boosting Level 1 and add a custom image to your server invites.",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_AUDIO_QUALITY:
          "Increased audio quality to {targetQuality} kbps",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_THREADS_PRIVATE:
          "Create private threads",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_ACTIVITIES:
          "Access to more fun Activities!",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_OTHER:
          "Powerful upgrades: larger file upload sizes, increased audio quality, and more!",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_OTHER_TIER_1:
          "Powerful upgrades: animated server icon, additional thread options, and more!",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_OTHER_TIER_2:
          "Powerful upgrades: larger file upload sizes, server banner, custom role icons, and more!",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_OTHER_TIER_3:
          "Powerful upgrades: Custom Invite Link, extra emoji slots, and animated server banner.",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_ROLE_ICON:
          "Set a unique icon for each role in the server",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_GUILD_BANNER:
          "Show everyone what your server is about with a server banner",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_ANIMATED_GUILD_BANNER:
          "Stand out with an animated server banner",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_CUSTOM_INVITE:
          "Customize your server invites with a custom background",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_ANIMATED_ICON:
          "Stand out with an animated server icon",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_FILE_UPLOAD_TIER_3:
          "Increased file upload limit to 100MB",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_STICKERS:
          "Upload custom stickers for everyone to use",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_STICKERS_UPLOAD:
          "Upload up to {numStickers} custom stickers",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_STICKERS_AND_EMOJIS:
          "Upload up to {numStickers} custom stickers and {numEmojis} custom emoji",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_VANITY_URL:
          "Easily add new members with a Custom Invite Link",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_SCREEN_SHARE_720P:
          "Screen share in 720p/60fps",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_PERKS_SCREEN_SHARE_1080P:
          "Screen share in 1080p/60fps",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_BANNER_HEADER: "Get Boosted",
        PREMIUM_GUILD_SUBSCRIPTION_UPSELL_BANNER_BUTTON: "Boost Server",
        NAVIGATE_TO_GUILD: "Go to server",
        GUILD_BANNER_UPSELL_MODAL_TITLE: "This looks great!",
        GUILD_BANNER_UPSELL_MODAL_SUBTITLE_STATIC:
          "Boost your server to {targetLevelOrPlan} to use your new server banner.",
        GUILD_BANNER_UPSELL_MODAL_SUBTITLE_ANIMATED:
          "Boost your server to {targetLevelOrPlan} to apply your new animated server banner.",
        GUILD_BANNER_UPSELL_MODAL_PERK_INTRO:
          "You’ll also help unlock more customization features and utility upgrades for everyone in the server like:",
        GUILD_CHECKLIST_UPSELL_PROGRESS_BAR_TITLE: "Get to the next level",
        GUILD_CHECKLIST_UPSELL_PROGRESS_BAR_INTRO:
          "Boosting unlocks powerful features. Reach Level 1 and get new customizations and upgrades for the whole server.",
        GUILD_CHECKLIST_UPSELL_PROGRESS_BAR_FOOTER:
          "[But wait, there’s more. See all perks that come with Boosting.](onClick)",
        GUILD_CHECKLIST_UPSELL_FLAIR_TITLE: "Boosting Server Flair",
        GUILD_CHECKLIST_UPSELL_FLAIR_SUBTITLE:
          "Servers who reach Boosting Level 1 and above get unique invite embeds with custom Server Invite Backgrounds.",
        GUILD_CHECKLIST_UPSELL_FLAIR_INTRO:
          "Level 1 also unlocks more customization features and utility upgrades for everyone in the server like:",
        GUILD_CHECKLIST_UPSELL_BOOST_INTRO:
          "Boosting unlocks powerful features. Reach **Level 1** and get new customizations and upgrades for the whole server. [Learn more.](onClick)",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_0:
          "You have custom emoji, bigger uploads, and more for **!!{price}!!**",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_0_NO_PRICE:
          "You have custom emoji, bigger uploads, and more",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_0_PENDING_CANCELATION:
          "You have custom emoji, bigger uploads, and more for **!!{price}!!** (Pending Cancellation)",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_0_PENDING_CANCELATION_NO_PRICE:
          "You have custom emoji, bigger uploads, and more (Pending Cancellation)",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_0_ACCOUNT_HOLD:
          "Your subscription to Nitro Basic, which gives you custom emoji, bigger uploads, and other perks for **!!{price}!!** is **on hold**",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_0_ACCOUNT_HOLD_NO_PRICE:
          "Your subscription to Nitro Basic, which gives you custom emoji, bigger uploads, and other perks is **on hold**",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_0_PENDING_PAYMENT:
          "You will have custom emoji, bigger uploads, and more **as soon as your payment processes.** We will send you an email as soon as it does",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_1:
          "You have chat perks and a Boost discount for **!!{price}!!**",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_1_NO_PRICE:
          "You have chat perks and a Boost discount",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_1_PENDING_CANCELATION:
          "You have chat perks and a Boost discount for **!!{price}!!** (Pending Cancellation)",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_1_PENDING_CANCELATION_NO_PRICE:
          "You have chat perks and a Boost discount (Pending Cancellation)",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_1_ACCOUNT_HOLD:
          "Your chat perks and a Boost discount for **!!{price}!!** subscription is **on hold**",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_1_ACCOUNT_HOLD_NO_PRICE:
          "Your chat perks and a Boost discount subscription is **on hold**",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_1_PENDING_PAYMENT:
          "You will have chat perks and a Boost discount **as soon as your payment processes.** We will send you an email as soon as it does",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_2:
          "You have premium chat, **{num, number}x** Boosts, and a Boost discount for **!!{price}!!**",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_2_NO_PRICE:
          "You have premium chat, **{num, number}x** Boosts, and a Boost discount",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_2_PENDING_CANCELATION:
          "You have premium chat, **{num, number}x** Boosts, and a Boost discount for **!!{price}!!** (Pending Cancellation)",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_2_PENDING_CANCELATION_NO_PRICE:
          "You have premium chat, **{num, number}x** Boosts, and a Boost discount (Pending Cancellation)",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_2_ACCOUNT_HOLD:
          "Your premium chat, **{num, number}x** Boosts, and a Boost discount subscription for **!!{price}!!** is **on hold**",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_2_ACCOUNT_HOLD_NO_PRICE:
          "Your premium chat, **{num, number}x** Boosts, and a Boost discount subscription is **on hold**",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_TIER_2_PENDING_PAYMENT:
          "You will have premium chat, **{num, number}** Boosts, and a Boost discount **as soon as your payment processes.** We will send you an email as soon as it does",
        PREMIUM_SUBSCRIPTION_DESCRIPTION_DISCOUNT_APPLIED:
          "Your first **3 months** are **{discountedPrice}**. After that you'll be charged {price}/month",
        PREMIUM_WITH_PREMIUM_GUILD_EXTERNAL_PLAN_DESCRIPTION:
          "{premiumDescription} with {premiumGuildDescription}",
        PREMIUM_GUILD_USER_FEATURES_HEADER: "Boost a server and get:",
        PREMIUM_GUILD_USER_FEATURE_MEMBER_BADGE:
          "A member list icon next to your name",
        PREMIUM_GUILD_USER_FEATURE_BOOST_CRYSTAL:
          "An exclusive crystal badge next to your name",
        PREMIUM_GUILD_USER_FEATURE_SPECIAL_ROLE:
          "Special role only available to those who give a Boost",
        PREMIUM_GUILD_USER_FEATURE_PROFILE_BADGE:
          "A shiny user profile badge that changes over time",
        PREMIUM_GUILD_USER_FEATURE_ROLE: "An exclusive new role in that server",
        PREMIUM_GUILD_USER_FEATURE_OTHERS:
          "Access to server-wide features like: custom stickers, larger file upload limits, and more!",
        PREMIUM_GUILD_GUILD_FEATURES_HEADER: "Boosted servers can get:",
        PREMIUM_GUILD_GUILD_FEATURE_EMOJI: "Room for more custom emoji",
        PREMIUM_GUILD_GUILD_FEATURE_AUDIO_QUALITY:
          "Better quality for voice channels and Go Live",
        PREMIUM_GUILD_GUILD_FEATURE_UPLOAD_SIZE:
          "Bigger upload size for all server members",
        PREMIUM_GUILD_GUILD_FEATURE_STICKERS:
          "Unlock more slots for custom stickers",
        PREMIUM_GUILD_GUILD_FEATURE_CUSTOMIZATION:
          "Server Customization for avatar, banner and URL",
        PREMIUM_GUILD_GUILD_FEATURE_THREADS: "Create private threads",
        PREMIUM_GUILD_GUILD_ROLE_ICONS:
          "Set and display a unique icon for each role",
        PREMIUM_GUILD_FULL_FEATURE_LIST:
          "Check out the full list of server perks in our [Server Boosting FAQ.]({helpdeskArticle})",
        PREMIUM_TIER_UPLOAD_ITEM: "{maxUploadPremium} uploads",
        PREMIUM_TIER_NITRO_BADGE_ITEM: "Special Nitro badge on your profile",
        PREMIUM_TIER_CUSTOM_EMOJI_ITEM: "Custom emoji anywhere",
        PREMIUM_TIER_HD_STREAMING_ITEM: "HD video streaming",
        PREMIUM_TIER_SERVER_BOOST_ITEM: "2 Server Boosts",
        PREMIUM_TIER_SERVER_BOOST_MORE_ITEM: "2 Server Boosts, and more!",
        PREMIUM_TIER_SERVER_BOOST_WITH_PERCENTAGE_ITEM:
          "{numBoosts, plural, =1 {# Server Boost} other {# Server Boosts}} + !!{percentageOff}!! off others",
        PREMIUM_TIER_CUSTOM_PROFILE_ITEM: "Custom profiles and more!",
        PREMIUM_TIER_0_MOBILE_PREMIUM_BADGE: "Starting at {monthlyPrice}",
        PREMIUM_TIER_2_TITLE:
          "Get an enhanced Discord experience for one low monthly cost.",
        PREMIUM_TIER_2_SUBTITLE:
          "Customize your profile with a unique tag, access animated emoji, enjoy bigger file uploads, boost your favorite server, and more.",
        PREMIUM_TIER_2_TRIAL_CTA_SUBTITLE:
          "Claim by signing up for Nitro and start your emoji collection today.",
        PREMIUM_TIER_2_TRIAL_CTA_NOTE:
          "*Please note that gifts and Nitro Classic are not included in this offer.",
        PREMIUM_TRIAL_CTA_BUTTON_VARIANT: "Try Nitro for Free",
        PREMIUM_TRIAL_TIER_0_CTA_BUTTON_VARIANT: "Try Nitro Basic for Free",
        PREMIUM_TRIAL_FREE_DURATION_DAYS:
          "{days, plural, =1 {# day free} other {# days free}}",
        PREMIUM_TRIAL_FREE_DURATION_WEEKS:
          "{weeks, plural, =1 {# week free} other {# weeks free}}",
        PREMIUM_TRIAL_FREE_DURATION_MONTHS:
          "{months, plural, =1 {# month free} other {# months free}}",
        PREMIUM_TRIAL_FREE_DURATION_YEARS:
          "{years, plural, =1 {# year free} other {# years free}}",
        PREMIUM_TRIAL_REMAINING_AVAILABILITY_DAYS:
          "Offer available for {days, plural, =1 {# day} other {# days}}.",
        PREMIUM_TRIAL_REMAINING_AVAILABILITY_HOURS:
          "Offer available for {hours, plural, =1 {# hour} other {# hours}} and {minutes, plural, =1 {# minute} other {# minutes}}.",
        PREMIUM_TRIAL_REMAINING_AVAILABILITY_MINUTES:
          "Offer available for {minutes, plural, =1 {# minute} other {# minutes}}.",
        PREMIUM_TRIAL_MARKETING_EXPERIMENT_TRIAL_HEADING: "1 Month Free!",
        PREMIUM_TRIAL_MARKETING_TRIAL_HEADING_DAYS:
          "{days, plural, =1 {# day Free} other {# Days Free}}!",
        PREMIUM_TRIAL_MARKETING_TRIAL_HEADING_WEEKS:
          "{weeks, plural, =1 {# Week Free} other {# Weeks Free}}!",
        PREMIUM_TRIAL_MARKETING_TRIAL_HEADING_MONTHS:
          "{months, plural, =1 {# Month Free} other {# Months Free}}!",
        PREMIUM_TRIAL_MARKETING_TRIAL_HEADING_YEARS:
          "{years, plural, =1 {# Year Free} other {# Years Free}}!",
        PREMIUM_TRIAL_MARKETING_TRIAL_CTA_DAYS:
          "{days, plural, =1 {Try # day Free} other {Try # Days Free}}",
        PREMIUM_TRIAL_MARKETING_TRIAL_CTA_WEEKS:
          "{weeks, plural, =1 {Try # Week Free} other {Try # Weeks Free}}",
        PREMIUM_TRIAL_MARKETING_TRIAL_CTA_MONTHS:
          "{months, plural, =1 {Try # Month Free} other {Try # Months Free}}",
        PREMIUM_TRIAL_MARKETING_TRIAL_CTA_YEARS:
          "{years, plural, =1 {Try # Year Free} other {Try # Years Free}}",
        PREMIUM_TRIAL_MARKETING_TRIAL_BODY:
          "Get your first {duration} free when signing up for Nitro. Offer available for...",
        PREMIUM_TRIAL_MARKETING_TRIAL_BODY_REMAINING:
          "Get your first {duration} free when signing up for Nitro. Offer available for **{remaining}**.",
        PREMIUM_TRIAL_MARKETING_TRIAL_BODY_REMAINING_DAYS:
          "{days, plural, =1 {# day} other {# days}}",
        PREMIUM_TRIAL_MARKETING_TRIAL_BODY_REMAINING_HOURS:
          "{hours, plural, =1 {# hour} other {# hours}}*",
        PREMIUM_TRIAL_MARKETING_TRIAL_BODY_REMAINING_MINUTES:
          "{minutes, plural, =1 {# minute} other {# minutes}}",
        PREMIUM_TRIAL_MARKETING_EXPERIMENT_TRIAL_CTA: "Try Nitro for Free",
        PREMIUM_TRIAL_MARKETING_EXPERIMENT_GIFT_HEADING:
          "Give the gift of Nitro",
        PREMIUM_TRIAL_MARKETING_EXPERIMENT_GIFT_BODY:
          "Gift someone Nitro to give them access to profile customization, emoji, and superpowered chat features.",
        PREMIUM_TRIAL_MARKETING_EXPERIMENT_SEASONAL_GIFT_HEADING:
          "Gift the joy of Nitro",
        PREMIUM_TRIAL_MARKETING_EXPERIMENT_SEASONAL_GIFT_BODY:
          "Gift Nitro and unlock profile customization, custom emoji, and superpowered chat features for your friends to unleash more holiday fun.",
        PREMIUM_TRIAL_UPSELL_STICKERS_IN_HOUSE:
          "Subscribe to add personality to your conversations.",
        PREMIUM_TRIAL_ACTION_SHEET_TIER_0_HEADER:
          "Try Nitro Basic free for 30 days",
        PREMIUM_TRIAL_ACTION_SHEET_TIER_2_HEADER: "Try Nitro free for 30 days",
        PREMIUM_TRIAL_ACTION_SHEET_HEADER:
          "Try {displayName} free for {duration}",
        PREMIUM_TRIAL_ACTION_SHEET_INTERVAL_CTA: "Continue to {duration} trial",
        PREMIUM_TRIAL_ACTION_SHEET_CTA: "Continue to 30 day trial",
        PREMIUM_TRIAL_ACTION_SHEET_CUSTOM_APP_ICONS: "Custom app icons",
        PREMIUM_TRIAL_ACTION_SHEET_CLIPS: "Clips early access",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_HEADER: "Welcome to Nitro!",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_HEADER_COMPLETED:
          "You’re ready to blast off!",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_HEADER_COMPLETED_ONE:
          "1 down, 2 to go!",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_HEADER_LAST_ONE: "Last one!",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_SUB_HEADER:
          "Check out a few of your new perks. Choose one to get started.",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_SUB_HEADER_CHOOSE_ANOTHER_PERK:
          "Choose another perk to explore.",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_SUB_HEADER_COMPLETED:
          "Have fun trying out all your new perks.",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_SUB_HEADER_LAST_ONE:
          "Check out your last perk.",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_CUSTOM_PROFILES: "Custom profiles",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_SERVER_PROFILES: "Server profiles",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_BOOSTS: "Server Boosts",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_EMOJI: "Unlocked emoji",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_MARKETING_REDIRECT: "See all perks",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_MARKETING_CLOSE: "Close",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_CLOSE_CONFIRMATION_HEADER:
          "Close this tutorial?",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_CLOSE_CONFIRMATION_SUBHEADER:
          "You won't be able to reopen this tutorial once it's closed.",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_CLOSE_YES: "Yes, close",
        PREMIUM_TRIAL_TUTORIAL_COACHMARK_CLOSE_CANCEL: "Cancel",
        PREMIUM_TRIAL_TUTORIAL_COLLAPSED_COACHMARK_HEADING:
          "Explore your Nitro perks",
        PREMIUM_TRIAL_TUTORIAL_FILE_UPLOAD_TOOLTIP:
          "Upload files up to 500MB with Nitro!",
        PREMIUM_TRIAL_TUTORIAL_STICKER_TOOLTIP:
          "Use stickers from any of your servers in **all** your servers and DMs!",
        PREMIUM_TRIAL_TUTORIAL_STICKER_TOOLTIP_UNFORMATTED:
          "Use stickers from any of your servers in all your servers and DMs!",
        PREMIUM_TRIAL_TUTORIAL_EMOJI_TOOLTIP:
          "Use emoji from any of your servers in **all** your servers and DMs!",
        PREMIUM_TRIAL_TUTORIAL_EMOJI_TOOLTIP_UNFORMATTED:
          "Use emoji from any of your servers in all your servers and DMs!",
        PREMIUM_TRIAL_TUTORIAL_EMOJI_FLOW_DISABLED_TOOLTIP:
          "None of your servers have custom emoji. Upload custom emoji in the Server Settings.",
        PREMIUM_TRIAL_TUTORIAL_BOOST_FLOW_DISABLED_TOOLTIP:
          "Go to one of your servers to check out Server Boosts.",
        PREMIUM_TRIAL_TUTORIAL_OPEN_CHANNEL_TOOLTIP:
          "Open a DM or text channel to check out unlocked emoji.",
        PREMIUM_TRIAL_TUTORIAL_CHANNEL_DOESNT_ALLOW_EMOJI_TOOLTIP:
          "This channel doesn’t allow custom emoji. Go to another channel to check out unlocked emoji.",
        PREMIUM_TRIAL_TUTORIAL_WELCOME_BACK: "Welcome back!",
        PREMIUM_TRIAL_OFFER_ENDS_MINUTES:
          "Offer ends in {numMinutes, plural, one {1 minute} other {{numMinutes} minutes}}",
        PREMIUM_TRIAL_OFFER_ENDS_HOURS:
          "Offer ends in {numHours, plural, one {{numHours} hour} other {{numHours} hours}}",
        PREMIUM_TRIAL_OFFER_ENDS_DAYS:
          "Offer ends in {numDays, plural, one {{numDays} day} other {{numDays} days}}",
        PREMIUM_FREE_NITRO_TRIAL_TEXT: "Free Nitro trial",
        PREMIUM_DISCOUNT_BADGE: "Discount",
        PREMIUM_DISCOUNT_AMOUNT_OFF_BADGE: "!!{percent, number}!!% discount",
        PREMIUM_DISCOUNT_CTA: "Save !!{percent, number}!!% on Nitro",
        PREMIUM_DISCOUNT_CTA_WITHOUT_PERCENT: "Save on Nitro",
        PREMIUM_TIER_CARD_DISCOUNT_HEADER_BEFORE_REDEMPTION:
          "Pay just **{discountedPrice}** a month for **3 months!** Then pay {regularPrice}.",
        PREMIUM_TIER_CARD_DISCOUNT_HEADER_AFTER_REDEMPTION:
          "Your !!{percent, number}!!% discount will end 3 months after purchase. After that you'll be charged {regularPrice}.",
        PREMIUM_TIER_SUBSCRIPTION_DESCRIPTION_AFTER_REDEMPTION:
          "Your first **3 months** are **{discountedPrice}**. After that you'll be charged {regularPrice}.",
        PREMIUM_TIER_CARD_DISCOUNT_APPLIED: "discount applied",
        PREMIUM_TUTORIAL_GOT_IT: "Got it!",
        PREMIUM_TIER_CARD_TRIAL_HEADER_BEFORE_REDEMPTION_NEW:
          "Try {planName} for {duration} on us. Then !!{price}!!.",
        PREMIUM_TIER_CARD_TRIAL_HEADER_AFTER_REDEMPTION:
          "Your **free trial ends {remainingTime, plural, =0 {today} one {in # day} other {in # days}}**. After that, you’ll be charged !!{price}!!.",
        PREMIUM_TIER_CARD_TRIAL_ACTIVATED: "free trial activated",
        INCLUDED: "Included",
        NOT_INCLUDED: "Not included",
        MARKETING_REFRESH_PREMIUM_FEATURES_GO_LIVE_INFO:
          "Up to 4K source resolution and up to 60fps screen share.",
        MARKETING_REFRESH_PREMIUM_TIER_2_CTA_TITLE:
          "Ready to upgrade to Nitro?",
        MARKETING_REFRESH_PREMIUM_TIER_2_CTA_SUBTITLE:
          "Pick the plan that works best for you and start your emoji collection.",
        MARKETING_REFRESH_PREMIUM_TIER_1_CTA_DESCRIPTION_WITH_PRICE_NO_INFO_HOOK:
          "Want to keep it simple? Enjoy a light plan with fewer perks, continue to support Discord, and get !!{discountPercentage}!! off Server Boosts. Choose between **!!{monthlyPrice}!! per month** or **!!{yearlyPrice}!! per year**.",
        HOLIDAY_PREMIUM_MARKETING_FEATURE_HEADER:
          "Here's what you get with Nitro:",
        GIFT_NITRO: "Gift Nitro",
        GIFT_NITRO_TIER_0: "Gift Nitro Basic",
        SEASONAL_GIFTING_PREMIUM_HERO_HEADER: "Our Holiday Gift Guide",
        SEASONAL_GIFTING_PREMIUM_HERO_BODY_INTRO:
          "Nitro. That's it, that's the guide.",
        SEASONAL_GIFTING_PREMIUM_HERO_BODY:
          "Give a friend the gift of higher quality streams, multiple custom profiles, and all the emoji!",
        SEASONAL_GIFTING_CUSTOMIZE_YOUR_GIFT_BOX: "Customize your gift BOX:",
        SEASONAL_GIFTING_SPREAD_CHEER_TOOLTIP:
          "Spread some cheer! Gift Nitro in special holiday gift boxes.",
        SEASONAL_GIFTING_OPEN_GIFT: "Open Gift",
        SEASONAL_GIFTING_OPTION_SNOWGLOBE: "Wumpus Snow Globe",
        SEASONAL_GIFTING_OPTION_BOX: "Wumpus Box",
        SEASONAL_GIFTING_OPTION_CUP: "Wumpus Cup",
        SEASONAL_GIFTING_INFO_TOOLTIP:
          "Your friend will see this image when they receive their gift.",
        SEASONAL_GIFTING_POPUP_HEADER: "Looking for a holiday gift?",
        SEASONAL_GIFTING_DM_POPUP_HEADER: "Gift Nitro for the holidays.",
        SEASONAL_GIFTING_DM_POPUP_BODY:
          "Send a personalized Nitro gift to spread holiday cheer!",
        SEASONAL_GIFTING_MAKE_SOMEONES_DAY_TOOLTIP:
          "Make someone's day when you send some sweet Nitro their way.",
        SEASONAL_GIFTING_SEND_GIFT_CTA: "Send gift",
        SEASONAL_GIFTING_DM_POPUP_CTA: "Try it out",
        PREMIUM_MARKETING_FEATURE_EMOJI_TITLE: "More Emoji Power",
        PREMIUM_MARKETING_FEATURE_PREMIUM_BADGE_DESCRIPTION_VARIANT_1:
          "Get this cool badge for being a Nitro subscriber.",
        PREMIUM_MARKETING_FEATURE_PREMIUM_GO_LIVE_TITLE: "HD Video",
        PREMIUM_MARKETING_VARIANT_2_FEATURE_CLIENT_THEMES_TITLE: "Color Themes",
        PREMIUM_MARKETING_VARIANT_2_FEATURE_CLIENT_THEMES_DESCRIPTION:
          "Add your vibe to Discord with unique theme colors.",
        PREMIUM_MARKETING_FEATURE_CUSTOM_APP_ICONS_TITLE: "Custom App Icons",
        PREMIUM_MARKETING_FEATURE_CUSTOM_APP_ICONS_DESCRIPTION:
          "Choose a mobile and in-app desktop icon that fits your vibe.",
        PREMIUM_MARKETING_SURFACE_PERKS_TITLE: "The Perks",
        PREMIUM_MARKETING_SURFACE_HERO_HEADING:
          "Upgrade Your Discord Experience",
        PREMIUM_MARKETING_SURFACE_HERO_SUBHEADING:
          "Get more of what you love when you subscribe to Nitro.",
        PREMIUM_MARKETING_SURFACE_TOP_PERK_EMOJI:
          "Use your favorite emoji everywhere",
        PREMIUM_MARKETING_SURFACE_TOP_PERK_PROFILE:
          "Add more personality to your profile",
        PREMIUM_MARKETING_SURFACE_TOP_PERK_HD_STREAMING:
          "Stream in sweet, sweet HD resolution",
        PREMIUM_MARKETING_SURFACE_TOP_PERK_FILE_UPLOADS:
          "Share 100MB videos and photos",
        PREMIUM_MARKETING_SURFACE_TOP_PERK_FILE_UPLOADS_INCREASE:
          "Share {premiumMaxSize} videos and photos",
        PREMIUM_MARKETING_SURFACE_PERK_HEADING_COMING_SOON: "More Coming Soon",
        PREMIUM_MARKETING_SURFACE_PERK_DESCRIPTION_COMING_SOON:
          "We're always adding new perks to Discord Nitro.",
        PREMIUM_MARKETING_SURFACE_FEATURE_GRID_HEADING:
          "Not enough? You get this stuff too!",
        PREMIUM_MARKETING_SURFACE_SIDEBAR_ABOUT: "About Nitro",
        PREMIUM_MARKETING_SURFACE_FEATURE_PREMIUM_GUILD_TITLE:
          "Server Boosting",
        PREMIUM_MARKETING_SURFACE_FEATURE_PREMIUM_GUILD_DESCRIPTION:
          "Get {numFreeGuildSubscriptions, plural, =1 {# Server Boost} other {# Server Boosts}} and !!{percentageOff}!! off extra Boosts to unlock server features.",
        PREMIUM_MARKETING_SURFACE_FEATURE_STICKERS_TITLE: "Special Stickers",
        PREMIUM_MARKETING_SURFACE_FEATURE_STICKERS_DESCRIPTION:
          "Use custom stickers anywhere.",
        PREMIUM_MARKETING_SURFACE_PREMIUM_TIER_2_DESCRIPTION:
          "Pick the plan that works for you. Cancel anytime.",
        PREMIUM_MARKETING_PERKS_TITLE: "Favorite Nitro Perks",
        PREMIUM_MARKETING_PERKS_TITLE_NITRO_HOME: "More Perks, More Fun",
        PREMIUM_MARKETING_PERKS_SEE_ALL: "See All",
        PREMIUM_MARKETING_PERKS_SEE_LESS: "See Less",
        PREMIUM_MARKETING_UPLOADS_PERK_TITLE:
          "From clips to pics, share away with bigger file uploads",
        PREMIUM_MARKETING_STREAMING_PERK_TITLE:
          "Stream apps and games in sweet, sweet HD",
        PREMIUM_MARKETING_EMOJI_PERK_TITLE:
          "Hype, roast, and meme with custom emoji anywhere.",
        PREMIUM_MARKETING_BOOST_PERK_TITLE:
          "Unlock perks for your communities with 2 Server Boosts",
        PREMIUM_MARKETING_STICKER_PERK_TITLE_OLD: "Super Stickers",
        PREMIUM_MARKETING_STICKER_PERK_TITLE: "Special Sticker Access",
        PREMIUM_MARKETING_STICKER_PERK_DESCRIPTION:
          "Use custom stickers anywhere.",
        PREMIUM_MARKETING_PER_GUILD_PROFILES_PERK_TITLE: "Custom Profiles",
        PREMIUM_MARKETING_PER_GUILD_PROFILE_THEMES_PERK_DESCRIPTION_CHECK_IT_OUT:
          "Use a different avatar, profile theme, banner, and bio in each of your servers. [Check it out.](onCheckItOutClick)",
        PREMIUM_MARKETING_PER_GUILD_PROFILE_THEMES_PERK_DESCRIPTION_TRY_IT_OUT:
          "Use a different avatar, profile theme, banner, and bio in each of your servers. [Try it out.](onTryItOutClick)",
        PREMIUM_MARKETING_BADGE_PERK_TITLE: "Nitro Badge",
        PREMIUM_MARKETING_BADGE_PERK_DESCRIPTION:
          "Show off your Nitro membership with a badge in your profile.",
        PREMIUM_MARKETING_LONGER_MESSAGES_PERK_TITLE: "Longer Messages",
        PREMIUM_MARKETING_LONGER_MESSAGES_PERK_DESCRIPTION:
          "Say what's on your mind with an increased character count.",
        PREMIUM_MARKETING_MORE_GUILDS_PERK_TITLE: "More Servers",
        PREMIUM_MARKETING_MORE_GUILDS_PERK_DESCRIPTION:
          "Join up to 200 of your favorite servers.",
        PREMIUM_MARKETING_SUPER_REACTIONS_PERK_TITLE: "Super Reactions",
        PREMIUM_MARKETING_SUPER_REACTIONS_PERK_TITLE_UNLIMITED:
          "Unlimited Super Reactions",
        PREMIUM_MARKETING_SUPER_REACTIONS_PERK_DESCRIPTION:
          "Hype up the chat with action-packed, animated reactions.",
        PREMIUM_MARKETING_CLYDE_PERK_TITLE: "Get more @Clyde",
        PREMIUM_MARKETING_CLYDE_PERK_DESCRIPTION:
          "Extra Clyde messages for all your burning questions. [Learn more]({learnMoreLink}).",
        PREMIUM_MARKETING_UPLOADS_SMALL_PERK_TITLE: "{premiumMaxSize} Uploads",
        PREMIUM_MARKETING_UPLOADS_SMALL_PERK_DESCRIPTION:
          "Upload what you want with increased {premiumMaxSize} upload size.",
        PREMIUM_MARKETING_STREAMING_SMALL_PERK_DESCRIPTION:
          "Better video resolutions for all your streams. Stream apps and games in sweet, sweet HD.",
        PREMIUM_MARKETING_VIDEO_BACKGROUND_PERK_TITLE: "Video Backgrounds",
        PREMIUM_MARKETING_VIDEO_BACKGROUND_PERK_DESCRIPTION:
          "Make video calls unique with your own backgrounds.",
        PREMIUM_MARKETING_STICKER_PERK_LONG_DESCRIPTION:
          "Use custom stickers anywhere and access 300+ Nitro exclusives.",
        PREMIUM_MARKETING_PERKS_DISCOVERABILITY_TITLE:
          "Check Out These Nitro Favorites",
        PREMIUM_MARKETING_PERKS_DISCOVERABILITY_SUBTITLE:
          "Explore the most popular perks that come with your Nitro subscription.",
        PREMIUM_MARKETING_PERKS_DISCOVERABILITY_PROFILES_TITLE:
          "Customize Your Profile",
        PREMIUM_MARKETING_PERKS_DISCOVERABILITY_PROFILES_SUBTITLE:
          "Use a different avatar, profile theme, banner, and bio in each of your servers.",
        PREMIUM_MARKETING_PERKS_DISCOVERABILITY_PROFILES_DESCRIPTION:
          "Explore all the ways to customize your profiles across servers. Only available with Nitro.",
        PREMIUM_MARKETING_PERKS_DISCOVERABILITY_THEMES_TITLE:
          "Color Your Experience",
        PREMIUM_MARKETING_PERKS_DISCOVERABILITY_THEMES_SUBTITLE:
          "Add your vibe to Discord with unique theme colors.",
        PREMIUM_MARKETING_PERKS_DISCOVERABILITY_THEMES_DESCRIPTION:
          "Bring some fresh hues to your Discord views with themes. Choose from over 20 color themes, like Cotton Candy, Midnight Blurple, and many more.",
        PREMIUM_MARKETING_PERKS_DISCOVERABILITY_BOOSTS_TITLE:
          "2 Server Boosts + 30% off",
        PREMIUM_MARKETING_PERKS_DISCOVERABILITY_BOOSTS_SUBTITLE:
          "Give your favorite communities a boost and unlock awesome perks.",
        PREMIUM_MARKETING_PERKS_DISCOVERABILITY_BOOSTS_DESCRIPTION:
          "Support your favorite communities and friend servers! Nitro members get 2 free Boosts & 30% off all others.",
        PREMIUM_MARKETING_WHATS_NEW_TITLE_NON_SUB: "See What's New With Nitro",
        PREMIUM_MARKETING_WHATS_NEW_SUBTITLE_NON_SUB:
          "These are the freshest offerings exclusive for our illustrious Nitro members. We're adding more all the time!",
        PREMIUM_MARKETING_WHATS_NEW_TITLE_SUB: "Explore What's New",
        PREMIUM_MARKETING_WHATS_NEW_SUBTITLE_SUB:
          "Check back here often for the latest offerings exclusive for our illustrious Nitro members, like yourself.",
        PREMIUM_MARKETING_WHATS_NEW_ENTRANCE_SOUNDS_TITLE: "Entrance Sounds",
        PREMIUM_MARKETING_WHATS_NEW_ENTRANCE_SOUNDS_SUBTITLE:
          "Pick a Soundboard sound to play whenever you join a voice channel.",
        PREMIUM_MARKETING_WHATS_NEW_ENTRANCE_SOUNDS_DESCRIPTION_NON_SUB:
          "Drop into voice channels in style with your favorite Soundboard sound. Now available on Nitro.",
        PREMIUM_MARKETING_WHATS_NEW_ENTRANCE_SOUNDS_DESCRIPTION_SUB:
          "Ready your airhorns! You can now drop into voice channels in style with Soundboard sound. Now available on Nitro.",
        PREMIUM_MARKETING_WHATS_NEW_REMIXING_TITLE: "Remix on Mobile",
        PREMIUM_MARKETING_WHATS_NEW_REMIXING_SUBTITLE:
          "Media editing and meme creation, at the speed of Discord.",
        PREMIUM_MARKETING_WHATS_NEW_REMIXING_DESCRIPTION_NON_SUB:
          "Nitro members get early beta access to the Remix tool. Join Nitro to create and share your own memes within the mobile app, and much more!",
        PREMIUM_MARKETING_WHATS_NEW_REMIXING_DESCRIPTION_SUB:
          "Nitro members get early beta access to the Remix tool on mobile. Remix lets you create and share your own memes by adding text, emoji, and stickers to images. Head on over to your mobile app to check it out!",
        PREMIUM_MARKETING_WHATS_NEW_AVATAR_DECO_TITLE: "New Avatar Decorations",
        PREMIUM_MARKETING_WHATS_NEW_AVATAR_DECO_SUBTITLE_SUB:
          "Enjoy special deals in the Shop, where you can buy and collect your favorite styles!",
        PREMIUM_MARKETING_WHATS_NEW_AVATAR_DECO_SUBTITLE_NON_SUB:
          "Unlock access to the Shop, where you can buy and collect the latest styles for your avatar.",
        PREMIUM_MARKETING_WHATS_NEW_AVATAR_DECO_DESCRIPTION_SUB:
          "Ready for a new look? The latest avatar decorations just landed in the Shop! Find your favorite styles to rock for any occasion.",
        PREMIUM_MARKETING_WHATS_NEW_AVATAR_DECO_DESCRIPTION_NON_SUB:
          "Ready for a new look? Get Nitro to buy and collect your favorite avatar decorations to rock for any occasion.",
        PREMIUM_MARKETING_WHATS_NEW_PROFILE_EFFECTS_TITLE: "Profile Effects",
        PREMIUM_MARKETING_WHATS_NEW_PROFILE_EFFECTS_SUBTITLE:
          "Level up your look with the latest addition to the Shop: animated profile effects.",
        PREMIUM_MARKETING_WHATS_NEW_PROFILE_EFFECTS_DESCRIPTION_SUB:
          "Complete your profile vibe with fun, flashy profile effects. Early access to the Shop and special deals are now available with Nitro.",
        PREMIUM_MARKETING_WHATS_NEW_PROFILE_EFFECTS_DESCRIPTION_NON_SUB:
          "Complete your profile vibe with fun, flashy profile effects. Unlock exclusive Shop access and special deals with Nitro.",
        PREMIUM_MARKETING_WHATS_NEW_CLIPS_SUBTITLE:
          "Capture your favorite streaming moments right in Discord and share with friends.",
        PREMIUM_MARKETING_WHATS_NEW_CLIPS_DESCRIPTION_SUB:
          "Start creating and sharing your favorite clips. Early access now available with Nitro.",
        PREMIUM_MARKETING_WHATS_NEW_CLIPS_DESCRIPTION_NON_SUB:
          "Clip, edit, share! It's as simple as that. Get early access to clips, only with Nitro.",
        PREMIUM_MARKETING_WHATS_NEW_CLIPS_CTA: "Explore clips",
        PREMIUM_MARKETING_WHATS_NEW_SPECIAL_SHOP_PERKS_TITLE:
          "Special Shop Perks",
        PREMIUM_MARKETING_WHATS_NEW_SPECIAL_SHOP_PERKS_SUBTITLE:
          "Enjoy member pricing plus Nitro exclusive items in the Shop.",
        COMING_SOON: "Coming Soon!",
        NEW_DROP: "New Drop",
        VISIT_THE_SHOP_CTA: "Visit the Shop",
        SUBSCRIBER_NITRO_HOME_TITLE: "Welcome to\n\nYour Nitro Home",
        SUBSCRIBER_NITRO_HOME_TITLE_ONE_LINE: "Welcome to Your Nitro Home",
        SUBSCRIBER_NITRO_HOME_SUBTITLE: "Share the magic of Nitro.",
        SUBSCRIBER_NITRO_HOME_MANAGE_MEMBERSHIP_TITLE:
          "Looking to manage your membership?",
        SUBSCRIBER_NITRO_HOME_MANAGE_MEMBERSHIP_SUBTITLE:
          "You can manage your {planName} membership in the Subscriptions tab in Settings. Your {planName} subscription will automatically renew on **{renewalDate, date, short}**.",
        PROFILE_THEMES_TOOLTIP_TITLE: "Customize more with Profile Themes",
        PROFILE_THEMES_TOOLTIP_DESCRIPTION_PREMIUM:
          "Add your personal style to your profile with custom colors!",
        PREMIUM_SWITCH_PLAN_DISABLED_PENDING_MUTATION_PLAN:
          "You have to cancel your pending plan change before choosing another plan.",
        PREMIUM_SWITCH_PLAN_DISABLED_PENDING_MUTATION_PREMIUM_GUILD_SUBSCRIPTION:
          "You have a pending boost cancellation. You have to uncancel it before switching plans.",
        PREMIUM_SWITCH_PLAN_DISABLED_IN_TRIAL:
          "You cannot switch plans during your trial.",
        PREMIUM_TIER_1_ACCOUNT_CREDIT_HEADER:
          "Nitro Classic is no longer available for purchase in your region, but you can still redeem your credits. Enjoy your perks!",
        PREMIUM_TIER_1_ACCOUNT_CREDIT_BANNER_DESCRIPTION:
          "Get chat perks and a Boost discount with Nitro Classic",
        PREMIUM_TIER_1_ACCOUNT_CREDIT_BANNER_CTA: "Subscribe",
        PREMIUM_GUILD_UNLOCK_WTH_BOOSTING_CTA: "Unlock with Boosting",
        PREMIUM_GUILD_FEATURES_UPLOAD_SIZES_MOBILE:
          "Increased community-wide upload sizes",
        PREMIUM_GUILD_FEATURES_CUSTOM_EMOJI_MOBILE:
          "Room for more custom emoji",
        PREMIUM_GUILD_FEATURES_VOICE_QUALITY:
          "Better quality for voice channels and Go Live",
        PREMIUM_GUILD_FEATURES_UPSELL_BANNER_SUBSCRIBE:
          "Subscribe to Nitro to get {numFreeGuildSubscriptions, plural, =1 {# Boost} other {# Boosts}} and a Boost discount! [Learn more about Server Boosting.]({helpdeskArticle})",
        PREMIUM_GUILD_SUBSCRIBER_FEATURE_MEMBER_BADGE:
          "Show off with a new Member List icon",
        PREMIUM_GUILD_SUBSCRIBER_FEATURE_PROFILE_BADGE:
          "New profile badge that evolves over time",
        PREMIUM_GUILD_SUBSCRIBER_FEATURE_ROLE: "Get an exclusive Booster role",
        PREMIUM_GUILD_SUBSCRIBE_SELECT_GUILD_HEADER: "Select a Server",
        PREMIUM_GUILD_SUBSCRIBE_SELECT_GUILD_TRANSFER_HEADER:
          "Select a server to transfer to",
        PREMIUM_GUILD_SUBSCRIBE_SEARCH_GUILD_PLACEHOLDER: "Search servers",
        PREMIUM_GUILD_SUBSCRIBE_CONFIRM_TRANSFER_FROM_GUILD:
          "Current {guildCount, plural, =1 {server} other {servers}}",
        PREMIUM_GUILD_SUBSCRIBE_CONFIRM_TRANSFER_TO_GUILD:
          "Move {slotCount, plural, =1 {boost} other {boosts}} to",
        PREMIUM_GUILD_SUBSCRIBE_CONFIRM_BLURB: "Ready to Boost this server?",
        PREMIUM_GUILD_SUBSCRIBE_CONFIRM_TRANSFER_HEADER:
          "Transfer Server Boost?",
        PREMIUM_GUILD_SUBSCRIBE_CONFIRM_TRANSFER_BLURB:
          "Are you sure you want to transfer {slotCount, plural, =1 {this Server Boost} other {these Server Boosts}}? {guildCount, plural, =1 {The current server} other {The current servers}} will lose progress if you continue.",
        PREMIUM_GUILD_SUBSCRIBE_CONFIRM_COOLDOWN_WARNING:
          "Boosting this server will prevent transferring {slotCount, plural, =1 {this Boost} other {these Boosts}} to another server for {days, plural, =1 {# day} other {# days}}.",
        PREMIUM_GUILD_SUBSCRIBE_CONFIRM_CANCEL_WARNING:
          "{canceledCount, plural, =1 {This Boost is} other {# Boosts are}} pending cancellation and will automatically be removed from this server on {date, date, long}.",
        PREMIUM_GUILD_SUBSCRIBE_CONFIRM_CONFIRMATION:
          "{slotCount, plural, =1 {Boost} other {Boost # times}}",
        PREMIUM_GUILD_SUBSCRIBE_CONFIRM_CONFIRMATION_LABEL:
          "Select this server. It will take a moment for your {slotCount, plural, =1 {Boost} other {Boosts}} to take effect.",
        PREMIUM_GUILD_SUBSCRIBE_TRANSFER_CONFIRM_CONFIRMATION:
          "Yes, Transfer {slotCount, plural, =1 {Boost} other {Boosts}}",
        PREMIUM_GUILD_SUBSCRIBE_TRANSFER_ERROR_HEADER: "Transfer Error",
        PREMIUM_GUILD_SUBSCRIBE_TRANSFER_ERROR_BODY:
          "There was an error with the Boost transfer. Please try again.",
        PREMIUM_GUILD_SUBSCRIBE_TRANSFER_CONFIRM_CONFIRMATION_LABEL:
          "Transfer {slotCount, plural, =1 {Boost} other {Boosts}} to this server. It will take a moment for your {slotCount, plural, =1 {boost} other {boosts}} to take effect.",
        PREMIUM_GUILD_SUBSCRIBE_SUCCESS_OKAY: "Okay!",
        PREMIUM_GUILD_SUBSCRIBE_UNUSED_SLOTS_HEADER: "Unused Boosts",
        PREMIUM_GUILD_SUBSCRIBE_UNUSED_SLOTS_DESCRIPTION:
          "You have some unused Boosts. How many do you want to use for this server?",
        PREMIUM_GUILD_SUBSCRIBE_UNUSED_SLOTS_COUNTER: "Server Boost(s)",
        PREMIUM_GUILD_SUBSCRIBE_UNUSED_SLOTS_CANCEL: "Cancel",
        PREMIUM_GUILD_SUBSCRIBE_UNUSED_SLOTS_NEXT: "Next",
        PREMIUM_GUILD_SUBSCRIPTION_ERROR_RATE_LIMIT_DAYS:
          "Looks like you're on cooldown. Please wait **{days, plural, =1 {# day} other {# days}} and {hours, plural, =1 {# hour} other {# hours}}** before trying again",
        PREMIUM_GUILD_SUBSCRIPTION_ERROR_RATE_LIMIT_HOURS:
          "Looks like you're on cooldown. Please wait **{hours, plural, =1 {# hour} other {# hours}} and {minutes, plural, =1 {# minute} other {# minutes}}** before trying again",
        PREMIUM_GUILD_SUBSCRIPTION_ERROR_RATE_LIMIT_MINUTES:
          "Looks like you're on cooldown. Please wait **{minutes, plural, =1 {# minute} other {# minutes}}** before trying again",
        PREMIUM_GUILD_SUBSCRIPTION_ERROR_MOBILE:
          "There was an error trying to boost. Please try again.",
        PREMIUM_GUILD_SUBSCRIPTION_ERROR_PENDING_MUTATION:
          "You must cancel your pending plan change before purchasing boosts.",
        PREMIUM_GUILD_HEADER_BADGE_NO_TIER: "No Level",
        PREMIUM_GUILD_HEADER_DROPDOWN_NITRO_SERVER_SUBSCRIBE: "Server Boost",
        PREMIUM_GUILD_PERKS_MODAL_HEADER: "Server Boost Status",
        PREMIUM_GUILD_PERKS_MODAL_HEADER_SUBSCRIPTION_COUNT:
          "{subscriptions, plural, =0 {No Boosts} =1 {# Boost} other {# Boosts}}",
        PREMIUM_GUILD_PERKS_MODAL_HEADER_USER_SUBSCRIPTION_COUNT:
          "(You've Boosted this server {numSubscriptions, plural, =1 {# time} other {# times!}})",
        PREMIUM_GUILD_PERKS_MODAL_HEADER_USER_SUBSCRIPTION_COUNT_WITHOUT_PARENTHESES:
          "You've Boosted this server {numSubscriptions, plural, =1 {# time} other {# times!}}",
        PREMIUM_GUILD_PERKS_MODAL_GIFT_NITRO: "Gift Nitro",
        PREMIUM_GUILD_PERKS_MODAL_SUBSCRIBE_WITH_FREE_BOOSTS:
          "Get Nitro with 2 Free Boosts",
        PREMIUM_GUILD_PERKS_MODAL_BLURB:
          "Support your favorite server with a Boost. Every Boost helps unlock new levels and more perks for everyone in the server. [Learn more about Server Boosting]({helpdeskArticle}). Manage your Boosts in [User Settings](openPremiumGuildSettings).",
        PREMIUM_GUILD_PERKS_MODAL_BLURB_MOBILE:
          "Support your favorite server with a Boost. Every Boost helps unlock new levels and more perks for everyone in the server.",
        PREMIUM_GUILD_PERKS_MODAL_BLURB_MOBILE_LEARN_MORE:
          "[Learn more about Server Boosting.]({helpdeskArticle})",
        PREMIUM_GUILD_PERKS_MODAL_BOOST_ALERT_IOS_TITLE: "Sorry :(",
        PREMIUM_GUILD_PERKS_MODAL_PROTIP:
          "$[Protip:](protipHook) Discord Nitro includes {numFreeGuildSubscriptions, plural, =1 {# Boost} other {# Boosts}}! [Learn more.](onLearnMore)",
        PREMIUM_GUILD_PERKS_MODAL_PROTIP_MOBILE:
          "**PROTIP:** Discord Nitro includes {numFreeGuildSubscriptions, plural, =1 {# Boost} other {# Boosts}}! [Learn more.]({onLearnMore})",
        PREMIUM_GUILD_PERKS_MODAL_LEVEL_SUBSCRIBER_COUNT_TOOLTIP:
          "**{subscriberCount, number}/{numRequired, number}** Boosts",
        PREMIUM_GUILD_PERKS_MODAL_SUBSCRIBE_TO_TIER_TOOLTIP:
          "Boost to **!!{tierName}!!**",
        PREMIUM_GUILD_PERKS_MODAL_BASE_PERKS: "Boosted server perks include —",
        PREMIUM_GUILD_PERKS_MODAL_PREVIOUS_PERKS:
          "Boosted servers get everything previous, and —",
        PREMIUM_GUILD_PERKS_MODAL_MANAGE_YOUR_SUBSCRIPTIONS: "Manage Boosts",
        PREMIUM_GUILD_PERKS_MODAL_BUTTON_UPGRADE_TO_PREMIUM_EXTERNAL_ERROR:
          "We don't currently support upgrades to Nitro for subscriptions through !!{paymentGatewayName}!!. You can cancel your subscription through [!!{paymentGatewayName}!!'s Subscription Management]({subscriptionManagementLink}), but the subscription will remain active until its expiration date.",
        PREMIUM_GUILD_PERKS_MODAL_BUTTON_SUBSCRIBE_THIS_SERVER:
          "Boost This Server",
        PREMIUM_GUILD_PERKS_MODAL_SUBSCRIBER_PERKS_HEADER:
          "Get cool rewards for becoming a Booster! ",
        PREMIUM_GUILD_PERKS_MODAL_VIDEO_STAGE_HEADER: "Video Stages are Here",
        PREMIUM_GUILD_PERKS_MODAL_VIDEO_STAGE_BODY:
          "Now you can host Stage events with video and screenshare. Boosted servers can host larger Video Stage events (150 users for Level 2, 300 for Level 3).",
        PREMIUM_GUILD_PERKS_MODAL_VIDEO_STAGE_BODY_BOOSTING_EXPT:
          "For Level 3 servers, each additional Boost grants 30 more seats for every Video Stage event (up to 10,000).",
        GUILD_BOOSTING_MANAGEMENT_OPEN_DESKTOP_APP:
          "To manage your Server Boosts, please [open the Discord desktop app](openAppHook).",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_HEADING:
          "Boost this server & unlock perks for everyone",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_NONE_NAME: "Unboosted",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_BOOSTS_REQUIRED:
          "{numBoostsRequired, number} Boosts",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_CUSTOM_EMOJI:
          "{numEmojiSlots, number} Emoji Slots",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_CUSTOM_STICKERS:
          "{numStickerSlots, number} Sticker Slots",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_CUSTOM_SOUNDS:
          "{numSoundboardSlots, plural, =1 {# Soundboard Slot} other {# Soundboard Slots}}",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_ANIMATED_GUILD_ICON:
          "Animated Server Icon",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_AUDIO_QUALITY:
          "Better Quality Audio",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_AUDIO_QUALITY_WITH_BITRATE:
          "{bitrate} Audio Quality",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_STREAM_QUALITY:
          "HD Streaming",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_STREAM_QUALITY_WITH_RESOLUTION:
          "{resolution} Stream Quality",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_LARGER_FILE_UPLOADS:
          "{uploadSizeLimit} File Uploads",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_ROLE_ICONS:
          "Custom Role Icons",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_GUILD_BANNER:
          "Server Banner",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_GUILD_BANNER_STATIC:
          "Static Server Banner",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_GUILD_BANNER_ANIMATED:
          "Animated Server Banner",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_VANITY_URL:
          "Custom Server Invite Link",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_HIGHEST_AUDIO_QUALITY:
          "Highest Quality Audio",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_ANIMATED_GUILD_BANNER:
          "Animated Server Banner",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_STAGE_SEATS_AND_MORE:
          "{numStageSeats, number} Video Stage Seats & more!",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PERK_STAGE_SEATS:
          "{numStageSeats, number} Video Stage Seats",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_CURRENT_TIER_LABEL: "Current",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TOP_PERKS_CARDS_HEADING:
          "Top perks you can unlock with Boosting",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TOP_PERKS_CARDS_HD_STREAMING_HEADING:
          "HD Streaming",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TOP_PERKS_CARDS_HD_STREAMING_DESCRIPTION:
          "Support your server’s access to high quality streams, for everyone.",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TOP_PERKS_CARDS_ANIMATED_GUILD_ICON_HEADING:
          "Animated Server Icon",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TOP_PERKS_CARDS_ANIMATED_GUILD_ICON_DESCRIPTION:
          "Reach max cool status with a sleek custom animated icon.",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TOP_PERKS_VANITY_URL_HEADING:
          "Custom Invite Link",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TOP_PERKS_VANITY_URL_DESCRIPTION:
          "Help your server grow and look very official with a custom invite link.",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PROGRESS_BAR_TOOLTIP_REMAINING_FOR_TIER:
          "{numBoostsRequired, plural, one {{numBoostsRequired, number} more Boost} other {{numBoostsRequired, number} more Boosts}} to !!{tierName}!!",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PROGRESS_BAR_TOOLTIP_TIER_UNLOCKED:
          "!!{tierName}!! unlocked!",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PROGRESS_BAR_SCREEN_READER_VALUE:
          "This server currently has {numSubscriptionsApplied, plural, one {{numSubscriptionsApplied, number} Boost} other {{numSubscriptionsApplied, number} Boosts}} applied.",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PROGRESS_BAR_SCREEN_READER_VALUE_TIER_UNLOCKED:
          "This server currently has {numSubscriptionsApplied, plural, one {{numSubscriptionsApplied, number} Boost} other {{numSubscriptionsApplied, number} Boosts}} applied. It has unlocked the !!{tierName}!! plan.",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_HEADING:
          "Boost this server & unlock perks for everyone",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_HEADING:
          "Uplevel this server with the best perks",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_RECOMMENDED_TAG:
          "Recommended",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_CURRENT_TAG:
          "Current",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_COLUMN_HEADING_PERKS:
          "Perks",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_PERK_HEADING_EMOJI_SLOTS:
          "Emoji Slots",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_PERK_HEADING_STICKER_SLOTS:
          "Sticker Slots",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_PERK_HEADING_SOUNDBOARD_SLOTS:
          "Soundboard Slots",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_PERK_HEADING_STREAM_QUALITY:
          "Stream Quality",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_PERK_HEADING_VOICE_QUALITY:
          "Audio Quality",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_PERK_HEADING_UPLOAD_SIZE_LIMIT:
          "Upload Size Limit",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_PERK_HEADING_VIDEO_STAGE_SEATS:
          "Video Stage Seats",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_PERK_HEADING_ANIMATED_GUILD_ICON:
          "Animated Server Icon",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_PERK_HEADING_GUILD_INVITE_BACKGROUND:
          "Server Invite Background",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_PERK_HEADING_GUILD_BANNER:
          "Server Banner",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_PERK_HEADING_CUSTOM_ROLE_ICONS:
          "Custom Role Icons",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_PERK_HEADING_VANITY_URL:
          "Custom Invite Link",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_CELL_STREAM_QUALITY:
          "!!{resolution}!! & !!{framerate}!!fps",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_CELL_GUILD_BANNER_STATIC:
          "Static",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_TIER_COMPARISON_TABLE_CELL_GUILD_BANNER_ANIMATED:
          "Animated",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_BOOSTER_RECOGNITION_HEADING:
          "Give your community a Boost & be recognized",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_BOOSTER_RECOGNITION_MEMBER_LIST_ICON:
          "Display your support with a Member List icon",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_BOOSTER_RECOGNITION_PROFILE_BADGE:
          "Unlock a profile badge that evolves over time",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_BOOSTER_RECOGNITION_BOOSTER_ROLE:
          "Get an exclusive Booster role",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_BOOSTER_RECOGNITION_COMMUNITY_SUPPORT:
          "Show support for your community",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_FAQ_HEADING: "Boosting FAQ",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_FAQ_QUESTION_1:
          "What is a Server Boost?",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_FAQ_QUESTION_2:
          "How do I Boost a server?",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_FAQ_QUESTION_3:
          "Can I Boost a Server multiple times?",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_FAQ_QUESTION_4:
          "Can I continue Boosting a server after it reaches Level 3?",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_FAQ_ANSWER_1:
          "Boosts allow you to support your favorite Servers, by unlocking perks for everyone in them. The more Boosts a server has, the more epic the perks that can be unlocked. See the chart above for more details.",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_FAQ_ANSWER_2:
          "You can Boost this server directly on this page! If you want to Boost a different server, you can find step-by-step instructions [in our Help Center]({helpCenterUrl}).",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_FAQ_ANSWER_3:
          "Yes, you can Boost a server as many times as you want! The more Boosts the server gets, the better the perks that will be unlocked.",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_FAQ_ANSWER_4:
          "Absolutely! Server Boosts are a great way to support your favorite servers. When you Boost a server, you'll be recognized with a special Member List Icon, a Boosting role, and a Profile Badge.",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_PRODUCT_DEMO_HEADING:
          "More Boosts means more fun for everyone",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_MOBILE_HEADING:
          "Boost this server to unlock perks",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_SHOW_MORE: "Show more",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_SHOW_LESS: "Show less",
        BOOSTING_MARKETING_REDESIGN_EXPERIMENT_NEXT_TIER: "Your next level",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_STEP_SELECT_DESCRIPTION:
          "Help a server unlock great perks with Server Boosts. Purchase at any time — we'll do the math and prorate it.",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_COUNTER: "Server Boost(s)",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_SUBTOTAL: "Subtotal",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_UNUSED_SLOT_NOTICE:
          "Looks like you have {slotCount, plural, =1 {# unused Boost} other {# unused Boosts}}. We'll add 'em to this server for you.",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_FOOTER_UPSELL:
          "You could be paying **{discountPercentage} less** for each Boost, and get an additional {freeSubscriptionCount} Boosts with [Discord Nitro](onPremiumSubscriptionClick)!",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_FOOTER_UPSELL_TRIAL:
          "Claim your free month to get {freeSubscriptionCount} Boosts, and save **{discountPercentage}** on additional Boosts with [Discord Nitro](onPremiumSubscriptionClick)!",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_FOOTER_UPSELL_TRIAL_VARIANT:
          "Claim your free trial to get {freeSubscriptionCount} Boosts, and save **{discountPercentage}** on additional Boosts with [Discord Nitro](onPremiumSubscriptionClick)!",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_FOOTER_DISCOUNT:
          "You get a discount as part of your **{planName}** subscription!",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_PURCHASE_DETAILS_HEADER:
          "Purchase Details",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_INVOICE_ROW_CONTENT:
          "!!{numGuildSubscriptions}!! \xd7 {planName}",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_PAYMENT_SOURCE_TOOLTIP:
          "We'll use the payment method you selected for your subscription",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_SUBMIT: "Purchase",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_ACTIVATED_DESCRIPTION:
          "Boost success!\n\nYou just Boosted !!{guildName}!! **{guildSubscriptionQuantity, plural, =1 {# time} other {# times}}**.",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_ACTIVATED_DESCRIPTION_GENERIC_GUILD:
          "Boost success!\n\nYou just Boosted the server **{guildSubscriptionQuantity, plural, =1 {# time} other {# times}}**.",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_ACTIVATED_DESCRIPTION_MOBILE1:
          "Boost success!",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_ACTIVATED_DESCRIPTION_MOBILE2:
          "You just Boosted !!{guildName}!! **{guildSubscriptionQuantity, plural, =1 {# time} other {# times}}**.",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_ACTIVATED_DESCRIPTION_NO_APPLICATION:
          "You now have **{guildSubscriptionQuantity, plural, =1 {# Server Boost} other {# Server Boosts}}** available for use.",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_ACTIVATED_CLOSE_BUTTON: "Nice!",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_TRANSFERRED_DESCRIPTION:
          "Boost transfer success!\n\nYou just Boosted !!{guildName}!!.",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_TRANSFERRED_DESCRIPTION_GENERIC_GUILD:
          "Boost transfer success!\n\nYou just Boosted the server.",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_TRANSFERRED_DESCRIPTION_MOBILE1:
          "Boost transfer success!",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_TRANSFERRED_DESCRIPTION_MOBILE2:
          "You just Boosted !!{guildName}!! **{guildSubscriptionQuantity, plural, =1 {# time} other {# times}}**.",
        GUILD_SUBSCRIPTION_PURCHASE_MODAL_EXTERNAL:
          "Sorry, we don't currently support buying Boosts with a subscription through !!{paymentGatewayName}!!.",
        PREMIUM_PROMO_TITLE_SEARCH_UPSELL:
          "You can't use this emoji right now.",
        PREMIUM_PROMO_DESCRIPTION_SEARCH_UPSELL:
          "Lift off with **Discord Nitro** to use animated and custom emoji anywhere. [Learn more](onClick)",
        PREMIUM_PROMO_DESCRIPTION_SEARCH_TIER_UPSELL:
          "Lift off with **{planName}** to use animated and custom emoji anywhere. [Learn more](onClick)",
        PREMIUM_PROMO_DESCRIPTION_SEARCH_UPSELL_NO_BOLD:
          "Lift off with Discord Nitro to use animated and custom emoji anywhere. [Learn more](onClick).",
        PREMIUM_PROMO_DESCRIPTION_SEARCH_UPSELL_NO_BOLD_V2:
          "Lift off with {planName} to use animated and custom emoji anywhere. [Learn more.](onClick)",
        PREMIUM_TITLE: "Discord Nitro",
        PREMIUM_CHOOSE_PLAN_TITLE: "Choose a Plan",
        SUBSCRIPTIONS_TITLE: "Subscriptions",
        PREMIUM_GIFTING_BUTTON: "Gift",
        PREMIUM_GIFTING_TITLE: "Nitro Gifting",
        PREMIUM_GIFTING_TITLE_MOBILE: "Select a Nitro Gift",
        PREMIUM_GIFTING_PURCHASE_GIFT: "Purchase a Nitro Gift",
        PREMIUM_INCLUDED: "Included in Nitro:",
        PREMIUM_TIER_1_PERKS_TITLE: "Or keep it simple and get the basics.",
        PREMIUM_PLAN_MONTH: "Nitro Monthly",
        PREMIUM_PLAN_YEAR: "Nitro Yearly",
        PREMIUM_PLAN_MONTH_TIER_0: "Nitro Basic Monthly",
        PREMIUM_PLAN_ONE_MONTH_TIER_0: "1 Month Nitro Basic",
        PREMIUM_PLAN_YEAR_TIER_0: "Nitro Basic Yearly",
        PREMIUM_PLAN_ONE_YEAR_TIER_0: "1 Year Nitro Basic",
        PREMIUM_PLAN_MONTH_TIER_0_TRIAL_DURATION:
          "Nitro Basic Monthly **(+{duration} free)**",
        PREMIUM_PLAN_YEAR_TIER_0_TRIAL_DURATION:
          "Nitro Basic Yearly **(+{duration} free)**",
        PREMIUM_PLAN_MONTH_TIER_1: "Nitro Classic Monthly",
        PREMIUM_PLAN_YEAR_TIER_1: "Nitro Classic Yearly",
        PREMIUM_PLAN_ONE_MONTH_TIER_1: "1 Month Nitro Classic",
        PREMIUM_PLAN_ONE_YEAR_TIER_1: "1 Year Nitro Classic",
        PREMIUM_PLAN_MONTH_TIER_2: "Nitro Monthly",
        PREMIUM_PLAN_MONTH_TIER_2_TRIAL:
          "Nitro Monthly **(+{months} {months, plural, =1 {month} other {months}} free)**",
        PREMIUM_PLAN_MONTH_TIER_2_TRIAL_DURATION:
          "Nitro Monthly **(+{duration} free)**",
        PREMIUM_PLAN_YEAR_TIER_2: "Nitro Yearly",
        PREMIUM_PLAN_YEAR_TIER_2_TRIAL:
          "Nitro Yearly **(+{months} {months, plural, =1 {month} other {months}} free)**",
        PREMIUM_PLAN_YEAR_TIER_2_TRIAL_DURATION:
          "Nitro Yearly **(+{duration} free)**",
        PREMIUM_PLAN_3_MONTH_TIER_2: "Nitro 3 Month",
        PREMIUM_PLAN_6_MONTH_TIER_2: "Nitro 6 Month",
        PREMIUM_PLAN_ONE_MONTH_TIER_2: "1 Month Nitro",
        PREMIUM_PLAN_ONE_YEAR_TIER_2: "1 Year Nitro",
        PREMIUM_TIER_0: "Nitro Basic",
        PREMIUM_TIER_1: "Nitro Classic",
        PREMIUM_TIER_2: "Nitro",
        PREMIUM_GUILD_PLAN_MONTH: "Server Boost Monthly",
        PREMIUM_GUILD_PLAN_YEAR: "Server Boost Yearly",
        PREMIUM_GUILD_PLAN_SINGLE_MONTH: "Single Month Server Boost(s)",
        PREMIUM_GUILD_PLAN_SINGLE_YEAR: "Single Year Server Boost(s)",
        PREMIUM_GUILD_PLAN_3_MONTH: "Server Boost 3 Month",
        PREMIUM_GUILD_PLAN_6_MONTH: "Server Boost 6 Month",
        MONTHLY: "Monthly",
        YEARLY: "Yearly",
        MULTI_MONTHS: "{intervalCount} Month",
        ESTIMATED_TAX_LABEL: "Estimated Tax",
        TAX_LABEL: "Tax",
        PREMIUM_ACTIVATED: "Nitro Activated",
        PREMIUM_SUBSCRIPTION_POLICY_HINT_IOS:
          "See subscription and auto-renewal details below",
        PREMIUM_SUBSCRIPTION_TERMS_POLICY_IOS:
          "By purchasing a Nitro subscription, you agree to our [Terms of Service]({termsURL}), [Paid Services Terms]({paidURL}), and [Privacy Policy]({privacyURL}). Payment will be charged to your Apple ID account at the confirmation of purchase. Subscription automatically renews unless it is canceled at least 24 hours before the end of the current period. Your account will be charged for renewal within 24 hours prior to the end of the current period. You can manage and cancel your subscriptions by going to your account settings on the App Store after purchase.",
        PREMIUM_SUBSCRIPTION_TERMS_POLICY_ANDROID:
          "By purchasing a Nitro subscription, you agree to our [Terms of Service]({termsURL}), [Paid Services Terms]({paidURL}), and [Privacy Policy]({privacyURL}). Payment will be charged to your Google Play account at the confirmation of purchase. Subscription automatically renews unless it is canceled at least 24 hours before the end of the current period. Your account will be charged for renewal within 24 hours prior to the end of the current period. You can manage and cancel your subscriptions by going to your account settings on the Google Play Store after purchase.",
        PREMIUM_SUBSCRIPTION_BILLING_INFO_MOBILE:
          "These are your current subscriptions. They will be billed on the same billing cycle.",
        PREMIUM_SUBSCRIPTION_BILLING_INFO_NITRO_ONLY:
          "This is your current Nitro subscription. You can update your subscription at any time.",
        PREMIUM_CANCEL_CONFIRM_TITLE: "Cancel !!{planPremiumType}!!?",
        PREMIUM_CANCEL_CONFIRM_BODY_TIER_0:
          "Cancellation will take effect at the end of your current billing period on **{date, date, medium}**, you'll lose access to all your Nitro perks, including bigger file uploads and the ability to use custom emoji everywhere.\n\nYou can restart your subscription anytime.",
        PREMIUM_CANCEL_CONFIRM_BODY_TIER_1:
          "Cancellation will take effect at the end of your current billing period on **{date, date, medium}**.\n\nYou can restart your subscription anytime.",
        PREMIUM_CANCEL_CONFIRM_BODY_TIER_2:
          "Cancellation will take effect at the end of your current billing period. On **{date, date, medium}**, you will lose access to Nitro, and your included Server Boosts will be removed.\n\n  You can restart your subscription anytime.",
        PREMIUM_CANCEL_CONFIRM_BODY_TIER_0_PAYMENT_BLOCKED_RUSSIA:
          "Cancellation will take effect at the end of your current billing period on **{date, date, medium}**, you'll lose access to all your Nitro perks, including bigger file uploads and the ability to use custom emoji everywhere.\n\n  At this time we are temporarily unable to renew subscriptions for those located in Russia or who use a Russian payment method. [Learn More]({helpdeskArticle}).",
        PREMIUM_CANCEL_CONFIRM_BODY_TIER_1_PAYMENT_BLOCKED_RUSSIA:
          "Cancellation will take effect at the end of your current billing period on **{date, date, medium}**.\n\n  At this time we are temporarily unable to renew subscriptions for those located in Russia or who use a Russian payment method. [Learn More]({helpdeskArticle}).",
        PREMIUM_CANCEL_CONFIRM_BODY_TIER_2_PAYMENT_BLOCKED_RUSSIA:
          "Cancellation will take effect at the end of your current billing period. On **{date, date, medium}**, you will lose access to Nitro, and your included Server Boosts will be removed.\n\n  At this time we are temporarily unable to renew subscriptions for those located in Russia or who use a Russian payment method. [Learn More]({helpdeskArticle})",
        PREMIUM_CANCEL_PAST_DUE_CONFIRM_BODY:
          "Cancellation will take effect immediately for any Nitro and Server Boost subscriptions.",
        PREMIUM_CANCEL_CONFIRM_NEW: "Yup, Cancel !!{planPremiumType}!!",
        PREMIUM_UPGRADE_DONE_BUTTON: "Sweet!",
        PREMIUM_DOWNGRADE_DONE_BUTTON: "Got It",
        PREMIUM_UPLOAD_PROMO:
          "Upgrade to Discord Nitro for {maxUploadPremium} file limit",
        PREMIUM_UPLOAD_PROMO_TRIAL:
          "Get 1 month free of Discord Nitro and increase your limit to {maxUploadPremium}",
        PREMIUM_SWITCH_REVIEW_HEADER_PREMIUM_MONTH_TIER_0:
          "Switch to Nitro Basic Monthly",
        PREMIUM_SWITCH_REVIEW_HEADER_PREMIUM_YEAR_TIER_0:
          "Switch to Nitro Basic Yearly",
        PREMIUM_SWITCH_REVIEW_HEADER_PREMIUM_MONTH_TIER_1:
          "Switch to Nitro Classic Monthly",
        PREMIUM_SWITCH_REVIEW_HEADER_PREMIUM_YEAR_TIER_1:
          "Switch to Nitro Classic Yearly",
        PREMIUM_SWITCH_REVIEW_HEADER_PREMIUM_MONTH_TIER_2:
          "Switch to Nitro Monthly",
        PREMIUM_SWITCH_REVIEW_HEADER_PREMIUM_YEAR_TIER_2:
          "Switch to Nitro Yearly",
        PREMIUM_ALERT_ERROR_TITLE: "Oops, something went wrong...",
        PREMIUM_PENDING_PLAN_CHANGE_NOTICE:
          "Your plan change is pending. **{planName}** will start on **{date, date, medium}**.",
        PREMIUM_PENDING_PLAN_CHANGE_CANCEL_HEADER:
          "Cancel Subscription Plan Change",
        PREMIUM_PENDING_PLAN_CHANGE_CANCEL_BODY:
          "You have chosen to cancel the change from **{existingPlan}** to **{downgradedPlan}**. If you cancel this plan change, your **{existingPlan}** at **{existingRate}** will continue.",
        PREMIUM_PENDING_PLAN_CHANGE_CANCEL_BODY_NO_EXISTING_PLAN:
          "You have chosen to cancel the change to **{downgradedPlan}**. If you cancel this plan change, your existing plan at **{existingRate}** will continue.",
        PREMIUM_PENDING_PLAN_CHANGE_CANCEL_BUTTON: "Cancel Plan Change",
        PREMIUM_CHANGE_DISCRIMINATOR_WARNING:
          "When your Nitro subscription ends, your Discord Tag will be randomized.",
        PREMIUM_CHANGE_DISCRIMINATOR_LENGTH_ERROR:
          "This tag is invalid. Tags must contain 4 digits.",
        PREMIUM_CHANGE_DISCRIMINATOR_ZERO_ERROR:
          "This tag is invalid. Tags must be greater than 0.",
        PREMIUM_SETTINGS_SUBSCRIPTIONS_MOBILE_HEADER: "Your subscriptions",
        PREMIUM_SETTINGS_BILLING_INFO: "Billing Information",
        PREMIUM_SETTINGS_PAYMENT_PROCESSING:
          "**Your payment is processesing.** Please be patient, this can take up to {maxProcessingTimeInDays} days. We will email you a confirmation when it’s complete.",
        PREMIUM_SETTINGS_PREPAID_THROUGH_DATE:
          "Your **Nitro** subscription is prepaid through **{prepaidEndDate, date, medium}**. You can extend your plan by editing your payment method.",
        PREMIUM_SETTINGS_RENEWAL_INFO:
          "Your subscriptions will automatically renew on **{renewalDate, date, medium}** and you'll be charged **!!{price}!!**.",
        PREMIUM_SETTINGS_RENEWAL_INFO_EXTERNAL:
          "Your subscriptions will automatically renew on **{renewalDate, date, medium}**. Please [visit your !!{paymentGatewayName}!! Subscription settings]({subscriptionManagementLink}) for more details.",
        PREMIUM_SETTINGS_CANCELLED_INFO:
          "Your subscription will end on **{endDate, date, medium}**.",
        PREMIUM_SETTINGS_PAST_DUE_INFO:
          "Your **!!{price}!!** subscription is past due. Please update your payment info or your subscription will end on **{endDate, date, medium}**.",
        PREMIUM_SETTINGS_PAST_DUE_INFO_EXTERNAL:
          "Your subscription is past due. Please [update your payment info for !!{paymentGatewayName}!!]({paymentSourceLink}) or your subscription will end on **{endDate, date, medium}**.",
        PREMIUM_SETTINGS_ACCOUNT_HOLD_INFO:
          "Your subscription is **on hold**. Please update your payment info or your subscription will end on {endDate, date, medium}.",
        PREMIUM_SETTINGS_ACCOUNT_HOLD_INFO_PRICE:
          "Your **!!{price}!!** subscription is on hold. Please update your payment info or your subscription will end on **{endDate, date, medium}**.",
        PREMIUM_SETTINGS_ACCOUNT_HOLD_NOTICE_INFO:
          "Your payment method needs to be updated. Your subscription is on hold and you currently don't have access to your perks. Please update your payment method by **{endDate, date, medium}** or you'll lose your **!!{planDescription}!!** perks.",
        PREMIUM_SETTINGS_ACCOUNT_HOLD_NOTICE_CHANGE_PAYMENT_METHOD_BUTTON:
          "Change your payment method",
        PREMIUM_SETTINGS_ACCOUNT_HOLD_INFO_EXTERNAL:
          "Your subscription is on hold. Please [update your payment info for !!{paymentGatewayName}!!]({paymentSourceLink}) or your subscription will end on **{endDate, date, medium}**.",
        PREMIUM_SETTINGS_RENEWAL_INFO_WITH_PLAN:
          "Your **{planName}** subscription will automatically renew on **{renewalDate, date, short}** and you'll be charged **!!{price}!!**.",
        PREMIUM_SETTINGS_NAVIGATE_TO_HOME_CTA: "Take Me to My Nitro",
        PREMIUM_SETTINGS_NATIGATE_TO_SUBSCRIPTIONS_CTA:
          "Manage Plan in Subscriptions",
        PREMIUM_SETTINGS_NAVIGATE_TO_HOME_CTA_V2: "Learn More About My Nitro",
        PREMIUM_GUILD_SUBSCRIPTIONS_RENEWAL_INFO:
          "**{quantity}x** {quantity, plural, =1 {Server Boost} other {Server Boosts}} - **!!{rate}!!**",
        PREMIUM_GUILD_SUBSCRIPTIONS_RENEWAL_INFO_NO_PRICE:
          "**{quantity}x** {quantity, plural, =1 {Server Boost} other {Server Boosts}}",
        PREMIUM_GUILD_SUBSCRIPTIONS_RENEWAL_INFO_PENDING_CANCELATION:
          "**{quantity}x** {quantity, plural, =1 {Server Boost} other {Server Boosts}} - **!!{rate}!!** (Pending Cancellation)",
        PREMIUM_GUILD_SUBSCRIPTIONS_RENEWAL_INFO_PENDING_CANCELATION_NO_PRICE:
          "**{quantity}x** {quantity, plural, =1 {Server Boost} other {Server Boosts}} (Pending Cancellation)",
        PREMIUM_GUILD_SUBSCRIPTIONS_RENEWAL_INFO_ANDROID:
          "**{boostQuantity}x** {quantity, plural, =1 {Server Boost} other {Server Boosts}} - **!!{rate}!!**",
        PREMIUM_GUILD_SUBSCRIPTIONS_RENEWAL_INFO_PENDING_CANCELATION_ANDROID:
          "**{boostQuantity}x** {quantity, plural, =1 {Server Boost} other {Server Boosts}} - **!!{rate}!!** (Pending Cancellation)",
        PREMIUM_GUILD_SUBSCRIPTIONS_RENEWAL_INFO_ACCOUNT_HOLD:
          "**{boostQuantity}x** {quantity, plural, =1 {Server Boost} other {Server Boosts}} - **!!{rate}!!** (Subscription on hold)",
        PREMIUM_GUILD_SUBSCRIPTIONS_RENEWAL_INFO_ACCOUNT_HOLD_NO_PRICE:
          "**{boostQuantity}x** {quantity, plural, =1 {Server Boost} other {Server Boosts}} (Subscription on hold)",
        PREMIUM_RESTORE_SUBSCRIPTION_IOS: "Restore App Store Subscriptions",
        PREMIUM_SWITCH_PLANS: "Switch Plans",
        PREMIUM_CURRENT_ACTIVE_SUBSCRIPTION: "Current active subscription",
        PREMIUM_MANAGE_VIA_DESKTOP:
          "Please manage your subscription on desktop.\n[Learn more.]({helpdeskArticle})",
        PREMIUM_CANCEL_CONFIRM_HEADER: "Cancel Your Subscription?",
        PREMIUM_CANCEL_CONFIRM_BODY:
          "Are you sure you want to delete your subscription? You won't be able to reactivate it from your mobile device unless you switch to using Google Play.\n[Learn more.]({helpdeskArticle})",
        PREMIUM_CANCEL_CONFIRM_BUTTON: "Cancel Subscription",
        PREMIUM_NO_PLANS_HEADER: "Sorry!",
        PREMIUM_NO_PLANS_BODY:
          "We don't current offer a plan through Google Play Billing with more boosts. [Learn more.]({helpdeskArticle})",
        PREMIUM_PAUSE_OR_CANCEL: "Pause or Cancel",
        PREMIUM_SETTINGS_STARTING_AT_PER_MONTH:
          "Subscribe - Starting at !!{price}!! / Month",
        PREMIUM_SUBSCRIPTION_UPDATES: "Subscription Updates",
        PREMIUM_SUBSCRIPTION_PLAN_ADJUSTMENT: "{planName} Adjustment",
        PREMIUM_SUBSCRIPTION_GUILD_SUBSCRIPTION_ADJUSTMENT: "Boost Adjustment",
        PREMIUM_SUBSCRIPTION_RENEWAL_FOOTER:
          "Any eligible subscription credit will be applied until it runs out. Your subscription will renew for **{rate}** on **{renewalDate, date, medium}**. Have questions? [Contact our support team]({contactLink}) or [check out our subscription FAQ]({helpdeskArticle}).",
        PREMIUM_SUBSCRIPTION_RENEWAL_FOOTER_TAX_EXCLUSIVE:
          "Any eligible subscription credit will be applied until it runs out. Your subscription will renew for **{rate}** plus tax on **{renewalDate, date, medium}**. Have questions? [Contact our support team]({contactLink}) or [check out our subscription FAQ]({helpdeskArticle}).",
        PREMIUM_SUBSCRIPTION_RENEWAL_FOOTER_TRIAL:
          "Your free month credit will be applied until it runs out, and we'll send you a reminder email **{days, plural, =1 {1 day} other {{days} days}}** before your free period ends. Have questions? [Check out our offer FAQ]({helpdeskArticle}) or [contact our support team]({contactLink}).",
        PREMIUM_SUBSCRIPTION_RENEWAL_FOOTER_TRIAL_DURATION:
          "Your free {duration} credit will be applied until it runs out, and we'll send you a reminder email **{days, plural, =1 {1 day} other {{days} days}}** before your free period ends. Have questions? [Check out our offer FAQ]({helpdeskArticle}) or [contact our support team]({contactLink}).",
        PREMIUM_SUBSCRIPTION_SHOW_DETAILS: "Show Subscription Details",
        PREMIUM_SUBSCRIPTION_HIDE_DETAILS: "Hide Subscription Details",
        PREMIUM_SUBSCRIPTION_NEW_LABEL: "New Subscription",
        PREMIUM_SUBSCRIPTION_CURRENT_LABEL: "Current Subscription",
        PREMIUM_SUBSCRIPTION_NEW_TOTAL: "New Subscription Total",
        PREMIUM_SUBSCRIPTION_CANCELLED: "{planName} Canceled",
        PREMIUM_SUBSCRIPTION_ADJUSTMENT_TOOLTIP:
          "This adjustment includes prorations, discounts, and refunds.",
        PREMIUM_SUBSCRIPTION_GUILD_SUBSCRIPTION_ADJUSTMENT_TOOLTIP:
          "**Why am I seeing this?**\n\nYou are purchasing a plan change. Your Server Boosts are being updated accordingly.",
        PREMIUM_SUBSCRIPTION_GUILD_SUBSCRIPTION_ADJUSTMENT_TEXT:
          "You are purchasing a plan change. Your Server Boosts are being updated accordingly.",
        PREMIUM_SUBSCRIPTION_PERIOD_RESET_NOTICE:
          "Your next renewal date will be **{renewalDate, date, medium}**.",
        USER_SETTINGS_SUBSCRIPTIONS_HEADER: "Your Subscriptions",
        USER_SETTINGS_NO_SUBSCRIPTIONS: "You have no active subscriptions",
        USER_SETTINGS_NO_SUBSCRIPTION_CREDIT: "You have no unused credits",
        PROMOTION_ERROR_TITLE: "Wait a second...",
        PROMOTION_ERROR_BODY:
          "Seems like something’s gone wrong and you can’t use that code. Sorry about that.",
        PROMOTION_ERROR_CLAIMED_BODY:
          "Sorry, looks like this code has already been redeemed.",
        PROMOTION_ERROR_NOT_YOUR_CODE_BODY:
          "Looks like this code belongs to someone else.",
        PROMOTION_ERROR_NO_CODE_BODY:
          "Looks like this code didn't work. Make sure you have the right code and try again.",
        PROMOTION_ERROR_NOT_VERIFIED_BODY:
          "Looks like your email isn't verified. Make sure to verify your email before redeeming this code.",
        PROMOTION_ERROR_HELP_CENTER_LINK:
          "Visit our [Help Center]({helpCenterLink}) for more information.",
        PROMOTION_EXISTING_SUBSCRIBER_TITLE: "Oh no!",
        PROMOTION_EXISTING_SUBSCRIBER_BODY:
          "It looks like you have Nitro already. Sorry, promotions are for new subscribers only. You can give your link to a friend and send {months, plural, =1 {# month} other {# months}} of free {planName} their way.",
        PROMOTION_PREVIOUS_SUBSCRIBER_BODY:
          "It looks like you've had Nitro before. Sorry, promotions are for new subscribers only. You can give your link to a friend and send {months, plural, =1 {# month} other {# months}} of free {planName} their way.",
        PROMOTION_REDEEM_BODY:
          "You get {months, plural, =1 {# month} other {# months}} of free {planName} from this promotion!",
        PROMOTION_ACCOUNT_IDENTIFIER:
          "Signed in as $[](avatarHook) {tag}. [Not You?](logoutHook)",
        PROMOTION_ACCOUNT_IDENTIFIER_SWITCH_ACCOUNTS:
          "Signed in as $[](avatarHook) {tag}. [Switch Accounts](logoutHook)",
        PROMOTION_CONFIRM_UPGRADE_HEADER: "You have an active subscription!",
        PROMOTION_CONFIRM_UPGRADE_DESCRIPTION:
          "If you claim this promotion, your current subscription of:\n\n$[](lineItemsHook)\n\nwill be replaced with a {newPlanName} subscription.",
        PROMOTION_CONFIRM_UPGRADE_TERMS:
          "You'll receive the full value of the promotion, including {trialMonths, plural, =1 {# month} other {# months}} free ([learn more]({helpCenterLink})). **But you'll lose any features associated with your current subscription, and you won't receive a refund for any remaining value on your current subscription.** At the end of the promotion period, you'll be converted to a paying {newPlanName} subscription at the price of {planPrice}.",
        PROMOTION_CONFIRM_UPGRADE_LINE_ITEM:
          "{quantity, plural, =1 {} other {#x }}{lineItem}",
        PROMOTION_CONFIRM_UPGRADE_BUTTON: "Upgrade Anyway",
        OUTBOUND_PROMOTION_CARD_UNCLAIMED_UNEXPANDED_BODY:
          "Gift is available to claim until {endDate}. [More Details](onClickDetails)",
        OUTBOUND_PROMOTION_CARD_UNCLAIMED_EXPANDED_BODY:
          "Gift is available to claim until {endDate}. [Less Details](onClickDetails)",
        OUTBOUND_PROMOTION_CARD_CLAIMED_UNEXPANDED_BODY:
          "Use your code before {endDate}. [More Details](onClickDetails)",
        OUTBOUND_PROMOTION_CARD_CLAIMED_EXPANDED_BODY:
          "Use your code before {endDate}. [Less Details](onClickDetails)",
        OUTBOUND_PROMOTION_MORE_DETAILS: "[More Details](onClick)",
        OUTBOUND_PROMOTION_SEE_CODE: "See Code",
        MOBILE_OUTBOUND_PROMOTION_CARD_UNCLAIMED_BODY:
          "Claim your code before {endDate}",
        MOBILE_OUTBOUND_PROMOTION_CARD_CLAIMED_BODY:
          "Use your code before {endDate}",
        OUTBOUND_PROMOTION_CODE_CONFIRMATION_EMAIL:
          "This code is included in a confirmation email we just sent you.",
        REDEMPTION_CODE: "Redemption Code",
        PARTNER_PROMOTION_TITLE: "Claim your gift!",
        PARTNER_PROMOTION_ACCOUNT_SUBTITLE:
          "This gift will apply to the account you’re currently logged into.",
        PARTNER_PROMOTION_CLAIM: "Next",
        PARTNER_PROMOTION_ERROR_TITLE: "Uh oh!",
        PARTNER_PROMOTION_ERROR_BODY: "Looks like something went wrong.",
        PARTNER_PROMOTION_MAX_CLAIMS_ERROR_BODY:
          "Looks like this promotion has reached its maximum number of claims.",
        PARTNER_PROMOTION_NEW_SUBSCRIPTION_REQUIRED_ERROR_BODY:
          "It looks like you have Nitro already.",
        PARTNER_PROMOTION_PREVIOUS_PURCHASE_ERROR_BODY:
          "Sorry, looks like you’ve already had a Nitro sub!",
        PARTNER_PROMOTION_USER_CLAIMED_ERROR_BODY:
          "Looks like you already claimed a gift.",
        PARTNER_PROMOTION_GIFT_CLAIMED_ERROR_BODY:
          "Looks like this gift has already been claimed.",
        PARTNER_PROMOTION_USER_NOT_VERIFIED_ERROR_BODY:
          "Looks like your email isn’t verified. Make sure to verify your email before claiming this gift.",
        PARTNER_PROMOTION_UNKNOWN_GIFT_ERROR_BODY: "Unknown gift.",
        REDEEM: "Redeem",
        UNLOCK_CODE: "Unlock Code",
        OUTBOUND_PROMOTION_REDEMPTION_MODAL_TITLE: "Awesome!",
        TERMS_AND_CONDITIONS: "Terms & Conditions",
        OUTBOUND_PROMOTION_NOTICE:
          "Hey, you have something waiting for you in your gift inventory! Don’t forget to claim it before it’s lost.",
        TAKE_ME_THERE: "Take me there",
        PREMIUM_UPSELL_ANIMATED_AVATAR: "Want an animated avatar?",
        PREMIUM_UPSELL_ANIMATED_AVATAR_SUBTITLE:
          "Join Nitro to get this feature and more!",
        PREMIUM_UPSELL_ANIMATED_AVATAR_TEXT:
          "Get Nitro and you'll be able to set .gifs as your profile picture",
        PREMIUM_UPSELL_EMOJI_ACTIVE_MOBILE:
          "You can’t use this emoji right now",
        PREMIUM_UPSELL_EMOJI_PASSIVE_MOBILE: "Get upgraded emoji power!",
        PREMIUM_UPSELL_EMOJI_MOBILE: "You can’t use this emoji right now",
        PREMIUM_UPSELL_BADGE_ACTIVE_MOBILE: "Looking to add a badge?",
        PREMIUM_UPSELL_BADGE_PASSIVE_MOBILE: "Badges are pretty neat!",
        PREMIUM_UPSELL_UPLOAD_ACTIVE_MOBILE: "Your files are too powerful!",
        PREMIUM_UPSELL_UPLOAD_PASSIVE_MOBILE: "Upload higher quality memes",
        PREMIUM_UPSELL_ANIMATED_AVATAR_ACTIVE_MOBILE:
          "You can't have a dancing avatar (yet)!",
        PREMIUM_UPSELL_ANIMATED_AVATAR_PASSIVE_MOBILE:
          "Want an animated avatar?",
        PREMIUM_UPSELL_ANIMATED_EMOJIS_ACTIVE_MOBILE:
          "Trying to move and groove?",
        PREMIUM_UPSELL_ANIMATED_EMOJIS_PASSIVE_MOBILE:
          "Want to move and groove?",
        PREMIUM_UPSELL_VIDEO_QUALITY_TITLE:
          "You can't choose this setting right now",
        PREMIUM_UPSELL_VIDEO_QUALITY_DESC:
          "**Discord Nitro** subscribers can upload high quality videos anywhere, up to a maximum of 1080p.",
        PREMIUM_UPSELL_UPLOAD_DESCRIPTION_MOBILE:
          "Max file size is {maxUploadStandard}. Upgrade to **Discord Nitro** for {maxUploadPremium} file limit!",
        PREMIUM_UPSELL_BADGE_DESCRIPTION_MOBILE:
          "Deck out your profile! Subscribe to **Discord Nitro** and get an exclusive Nitro badge.",
        PREMIUM_UPSELL_EMOJI_DESCRIPTION_MOBILE:
          "Lift off with **Discord Nitro** to use animated and custom emoji on any server.",
        PREMIUM_UPSELL_EMOJI_DESCRIPTION_MOBILE_NEW:
          "Subscribe to lift off with **Discord Nitro** to use animated and custom emoji on any server.",
        PREMIUM_UPSELL_ANIMATED_AVATAR_DESCRIPTION_MOBILE:
          "If you wanna upload a fun animated avatar, you should subscribe to **Discord Nitro**.",
        PREMIUM_UPSELL_ANIMATED_EMOJIS_DESCRIPTION_MOBILE:
          "Hey friend you gotta subscribe to **Discord Nitro** to use animated emoji.",
        PREMIUM_UPSELL_ANIMATED_EMOJIS_DESCRIPTION_MOBILE_GENERIC:
          "Hey friend you gotta subscribe to **{planName}** to use animated emoji.",
        PREMIUM_UPSELL_GLOBAL_STICKERS_TITLE_MOBILE:
          "You can't use this sticker right now",
        PREMIUM_UPSELL_GLOBAL_STICKERS_DESCRIPTION_MOBILE:
          "Subscribe to lift off with **Discord Nitro** to use custom stickers on any server.",
        PREMIUM_UPSELL_GLOBAL_STICKERS_DESCRIPTION_MOBILE_GENERIC:
          "Subscribe to lift off with **{planName}** to use custom stickers on any server.",
        PREMIUM_RETENTION_EMOJI_PICKER_DESCRIPTION:
          "Careful! Your !!{planName}!! perks, including global and animated emoji, expire soon on **{endsAt, date, medium}**.",
        PREMIUM_RETENTION_EMOJI_PICKER_UPDATE_PAYMENT_INFORMATION:
          "Update your payment information.",
        PREMIUM_NITRO_DROP_2023_HEADER: "We Unleashed 4x the Fun on Nitro!",
        PREMIUM_NITRO_DROP_2023_SUBHEADER:
          "Get your airhorn ready, because these 4 new Nitro perks are coming in hot",
        PREMIUM_NITRO_DROP_2023_SHARE_NITRO_PROMO:
          "For a limited time, Nitro members can share a trial with up to 3 friends.",
        PREMIUM_NITRO_DROP_2023_TERMS:
          "Additional terms apply. [Learn more]({helpdeskArticle})",
        PREMIUM_NITRO_DROP_2023_SHARE_NITRO_TIER_2_NUDGE:
          "Share the Nitro fun!",
        PREMIUM_NITRO_DROP_2023_SHARE_NITRO_NON_TIER_2_SUB_NUDGE:
          "Need an extra reason to upgrade to Nitro?",
        PREMIUM_NITRO_DROP_2023_SHARE_NITRO_NON_SUB_NUDGE:
          "Need an extra reason to get Nitro?",
        PREMIUM_NITRO_DROP_2023_SHARE_NITRO_WITH_TRIAL_NUDGE:
          "Need an extra reason to try Nitro?",
        PREMIUM_NITRO_DROP_2023_CLIENT_THEMES_FEATURE_HEADER: "New Themes",
        PREMIUM_NITRO_DROP_2023_CLIENT_THEMES_FEATURE_SUBHEADER:
          "Bring your vibe to Discord with new themes.",
        PREMIUM_NITRO_DROP_2023_AVATAR_DECO_FEATURE_HEADER:
          "Avatar Decorations",
        PREMIUM_NITRO_DROP_2023_AVATAR_DECO_FEATURE_SUBHEADER:
          "Add some flair to your profile with limited-time decorations.",
        PREMIUM_NITRO_DROP_2023_SOUNDBOARD_FEATURE_HEADER: "Soundboard",
        PREMIUM_NITRO_DROP_2023_SOUNDBOARD_FEATURE_SUBHEADER:
          "Crank up the fun in voice with sound reactions.",
        PREMIUM_NITRO_DROP_2023_SUPER_REACTIONS_FEATURE_HEADER:
          "Super Reactions",
        PREMIUM_NITRO_DROP_2023_SUPER_REACTIONS_FEATURE_SUBHEADER:
          "Hype up the chat with new animated reactions (coming soon).",
        PREMIUM_NITRO_DROP_2023_SUPER_REACTIONS_FEATURE_SUBHEADER_2:
          "Hype up the chat with new animated reactions.",
        PREMIUM_NITRO_DROP_2023_TIER_2_SUB_BUTTON_TEXT: "Learn more",
        PREMIUM_NITRO_DROP_2023_NON_TIER_2_SUB_BUTTON_TEXT: "Upgrade your plan",
        PREMIUM_NITRO_DROP_2023_NON_SUB_BUTTON_TEXT: "Get Nitro",
        PREMIUM_NITRO_DROP_2023_WITH_TRIAL_BUTTON_TEXT: "Try 1 month free",
        PREMIUM_NITRO_DROP_2023_BANNER_HEADER: "4x the Fun Incoming with Nitro",
        PREMIUM_NITRO_DROP_2023_BANNER_TIER_2_SUB_SUBHEADER:
          "Try the latest perks: Themes, Avatar Decorations, Super Reactions (coming soon), and Soundboard!",
        PREMIUM_NITRO_DROP_2023_BANNER_TIER_2_SUB_SUBHEADER_2:
          "Try the latest perks: Themes, Avatar Decorations, Soundboard, and Super Reactions!",
        PREMIUM_NITRO_DROP_2023_BANNER_NON_TIER_2_SUB_SUBHEADER:
          "Check out the latest perks: Themes, Avatar Decorations, Super Reactions (coming soon), and Soundboard!",
        PREMIUM_NITRO_DROP_2023_BANNER_NON_TIER_2_SUB_SUBHEADER_2:
          "Check out the latest perks: Themes, Avatar Decorations, Soundboard, and Super Reactions!",
        PREMIUM_FEATURE_AVATAR_DECORATIONS_HEADER: "Avatar Decorations",
        EMOJI_PICKER_PREMIUM_UPSELL_BODY:
          "Use these emoji and more by subscribing to Nitro.",
        EMOJI_PICKER_PREMIUM_TIER_0_UPSELL_BODY:
          "Use these emoji and more by subscribing to {planName}.",
        EMOJI_PICKER_PREMIUM_UPSELL_BODY_TOP_OF_LIST:
          "Unlock every emoji and use them anywhere with Nitro.",
        EMOJI_PICKER_PREMIUM_UPSELL_CTA: "Get Nitro",
        EMOJI_PICKER_CREATE_EMOJI_TITLE: "Upload an emoji to this server",
        EMOJI_PICKER_PREMIUM_PROMO_DESCRIPTION:
          "Lift off with **{planName}** to use animated and custom emoji anywhere.",
        SUBSCRIPTION_PAYMENT_LEGALESE_MONTHLY:
          "Hey! What you're purchasing is a recurring subscription, which means we'll charge you today and continue to charge you monthly until you cancel the subscription. You can cancel anytime from your Settings page, though!",
        SUBSCRIPTION_PAYMENT_LEGALESE_MULTI_MONTH:
          "Hey! What you're purchasing is a recurring subscription, which means we'll charge today and continue to charge you every {intervalCount} months until you cancel the subscription. You can cancel anytime from your Settings page, though!",
        SUBSCRIPTION_PAYMENT_LEGALESE_YEARLY:
          "Hey! What you're purchasing is a recurring subscription, which means we'll charge you today and continue to charge you yearly until you cancel the subscription. You can cancel anytime from your Settings page, though!",
        SUBSCRIPTION_PAYMENT_LEGALESE_V2:
          '**By clicking "{primaryText}", you are purchasing a recurring subscription.** You\'ll be charged {rate} starting today, less any applicable credits or discounts, until you cancel. Cancel anytime from your Settings page. [Paid Service Terms]({paidURL}) apply. Have questions? [Contact us]({contactLink}) or see our [Subscriptions FAQ]({helpdeskArticle}).',
        SUBSCRIPTION_PAYMENT_LEGALESE_PLAN_CHANGE_V2:
          '**By clicking "{primaryText}", you are purchasing a recurring subscription.** You\'ll be charged {rate} on the date shown above, less any applicable credits or discounts, until you cancel. Cancel anytime from your Settings page. [Paid Service Terms]({paidURL}) apply. Have questions? [Contact us]({contactLink}) or see our [Subscriptions FAQ]({helpdeskArticle}).',
        SUBSCRIPTION_PAYMENT_LEGALESE_PAYSAFECARD:
          "Please note that Discord can’t refund purchases made with a Paysafecard.",
        SOFORT_MANDATE_AGREEMENT:
          "By providing your payment information and confirming this payment, you authorise (A) Discord and Stripe, our payment service provider and/or PPRO, its local service provider, to send instructions to your bank to debit your account and (B) your bank to debit your account in accordance with those instructions. As part of your rights, you are entitled to a refund from your bank under the terms and conditions of your agreement with your bank. A refund must be claimed within 8 weeks starting from the date on which your account was debited. Your rights are explained in a statement that you can obtain from your bank. You agree to receive notifications for future debits up to 2 days before they occur.",
        PAYMENT_SOURCES_ADD: "Add a new payment method",
        ATTACH_PAYMENT_SOURCE_PROMPT_OPTION:
          "Attach a payment method to continue",
        ATTACH_PAYMENT_SOURCE_PROMPT_OPTION_OPTIONAL:
          "Attach a payment method (Optional)",
        ATTACH_PAYMENT_SOURCE_OPTIONAL_WITH_ENTITLEMENTS_WARNING:
          "You have **{months, plural, =1 {# month} other {# months}} of credit**. A payment source is required to avoid interruptions after your credit has been used.",
        PAYMENT_SOURCE_TYPE_SELECT: "Select Payment Type",
        PAYMENT_SOURCE_TYPE: "Payment Type",
        PAYMENT_SOURCE_INFORMATION: "Payment Information",
        PAYMENT_SOURCE_CREDIT_CARD_CARD_ONLY: "Card",
        PAYMENT_SOURCE_UNKNOWN: "Unknown",
        PAYMENT_SOURCE_PRZELEWY24: "Przelewy24",
        PAYMENT_SOURCE_PRZELEWY24_INFO: "Przelewy24 Info",
        PAYMENT_SOURCE_PRZELEWY24_BANK_LABEL: "Przelewy24 Bank",
        PAYMENT_SOURCE_EPS: "EPS",
        PAYMENT_SOURCE_EPS_WITH_BANK: "EPS with **{bank}**",
        PAYMENT_SOURCE_EPS_INFO: "EPS Info",
        PAYMENT_SOURCE_EPS_BANK_LABEL: "EPS Bank",
        PAYMENT_SOURCE_EPS_ACCOUNT_HOLDER_NAME: "Account Holder Name",
        PAYMENT_SOURCE_ACCOUNT_HOLDER_NAME: "Account Holder Name",
        PAYMENT_SOURCE_IDEAL: "iDEAL",
        PAYMENT_SOURCE_IDEAL_WITH_BANK: "iDEAL with **{bank}**",
        PAYMENT_SOURCE_IDEAL_BANK_LABEL: "iDEAL Bank",
        PAYMENT_SOURCE_SOFORT: "Sofort",
        PAYMENT_SOURCE_SOFORT_INFO: "Sofort Info",
        PAYMENT_SOURCE_PAYSAFE_CARD: "Paysafecard",
        PAYMENT_SOURCE_PAYSAFE_CARD_REDIRECT:
          "Paysafecard (auto-redirect to new browser)",
        PAYMENT_SOURCE_GIROPAY: "Giropay",
        PAYMENT_SOURCE_PAYPAL: "PayPal",
        PAYMENT_SOURCE_GCASH: "GCash",
        PAYMENT_SOURCE_GRABPAY: "GrabPay",
        PAYMENT_SOURCE_MOMO_WALLET: "MoMo Wallet",
        PAYMENT_SOURCE_VENMO: "Venmo",
        PAYMENT_SOURCE_KAKAOPAY: "KaKaoPay",
        PAYMENT_SOURCE_GOPAY_WALLET: "GoPay",
        PAYMENT_SOURCE_BANCONTACT: "Bancontact",
        PAYMENT_SOURCE_CASH_APP_PAY: "Cash App Pay",
        PAYMENT_SOURCE_APPLE: "Apple",
        PAYMENT_SOURCE_PAYPAL_LOADING: "Contacting PayPal...",
        PAYMENT_SOURCE_CARD_ENDING: "{brand} ending in **{last_4}**",
        PAYMENT_SOURCE_CARD_EXPIRES: "Expires {month} {year}",
        PAYMENT_SOURCE_PAYPAL_ACCOUNT: "PayPal Account",
        PAYMENT_SOURCE_PAYMENT_REQUEST_LABEL: "Add Payment",
        PAYMENT_SOURCE_PAYMENT_REQUEST_INFO_LOADING:
          "Confirming payment in your browser!",
        PAYMENT_SOURCE_PAYMENT_REQUEST_INFO_CREATING:
          "Creating card ending in {last4}...",
        PAYMENT_SOURCE_PAYMENT_REQUEST_INFO_TITLE: "Pay for it with",
        PAYMENT_SOURCE_PAYMENT_REQUEST_BUTTON_GENERIC: "Autofill from Browser",
        PAYMENT_SOURCE_PAYMENT_REQUEST_BUTTON_GPAY: "Google Pay",
        PAYMENT_SOURCE_PAYMENT_REQUEST_UNSUPPORTED:
          "Autofill from Browser (N/A)",
        PAYMENT_SOURCE_CONFIRM_PAYPAL_DETAILS:
          "Confirm PayPal details in your browser!",
        PAYMENT_SOURCE_CONNECT_TO_PAYPAL: "Connect to PayPal",
        PAYMENT_SOURCE_PAYPAL_DETAILS: "PayPal Details",
        PAYMENT_SOURCE_CARD_NUMBER: "Card Number",
        PAYMENT_SOURCE_EXPIRATION_DATE_PLACEHOLDER: "MM/YY",
        PAYMENT_SOURCE_MAKE_DEFAULT: "Make this my default payment method.",
        PAYMENT_SOURCE_DELETE: "Delete Payment Method",
        PAYMENT_SOURCE_DELETED: "Payment Method deleted",
        PAYMENT_SOURCE_EDIT_SELECT_STATE: "Select State",
        PAYMENT_SOURCE_EDIT_TITLE: "Edit Payment Method",
        PAYMENT_SOURCE_EDIT_HELP_CARD:
          "To edit other card information, please use the 'Add Payment Method' button.",
        PAYMENT_SOURCE_EDIT_HELP_PAYPAL:
          "To edit your PayPal payment information, visit [PayPal.com]({paypalURL}).",
        PAYMENT_SOURCE_EDIT_SAVED: "Payment information saved",
        PAYMENT_SOURCE_NAME_ERROR_REQUIRED: "Name is required.",
        PAYMENT_SOURCE_EMAIL_ERROR_REQUIRED: "Email is required.",
        PAYMENT_SOURCE_CARD_ENDING_IN: "Card ending in {last4}",
        PAYMENT_SOURCE_DELETE_DISABLED_TOOLTIP:
          "Cannot delete this payment source while you have an active Nitro subscription.",
        PAYMENT_SOURCE_INVALID: "Invalid",
        PAYMENT_SOURCE_INVALID_HELP:
          "We were unable to successfully charge this payment source. Please ensure the information is correct.",
        PAYMENT_SOURCE_SUBSCRIPTION: "Subscription",
        PAYMENT_SOURCE_REDEMPTION_INVALID:
          "Sorry, This Payment Source Cannot Be Used for Redemption",
        PAYMENT_SOURCE_VENMO_DETAILS: "Venmo Details",
        PAYMENT_SOURCE_VENMO_LOADING: "Contacting Venmo...",
        PAYMENT_SOURCE_CONNECT_TO_VENMO: "Connect to Venmo",
        PAYMENT_SOURCE_VENMO_CONNECTION_INSTRUCTIONS:
          "Follow the steps to complete your account connection.",
        PAYMENT_SOURCE_VENMO_CONNECTED_SUCCESS:
          "You've connected {venmoUsername}'s account.",
        PAYMENT_SOURCE_VENMO_CONNECTED_SUCCESS_INSTRUCTIONS:
          "Hooray! You can now pay via your Venmo account.",
        PAYMENT_SOURCE_CASH_APP_PAY_DETAILS: "Cash App Pay Details",
        PAYMENT_SOURCE_CASH_APP_PAY_LOADING: "Contacting Cash App Pay...",
        PAYMENT_SOURCE_CONNECT_TO_CASH_APP_PAY: "Connect to Cash App Pay",
        PAYMENT_SOURCE_CASH_APP_PAY_CONNECTION_INSTRUCTIONS:
          "Follow the steps to complete your account connection.",
        PAYMENT_SOURCE_CASH_APP_PAY_CONNECTED_SUCCESS:
          "You've connected {cashtag}'s account.",
        PAYMENT_SOURCE_CASH_APP_PAY_CONNECTED_SUCCESS_INSTRUCTIONS:
          "Hooray! You can now pay via your Cash App account.",
        PAYMENT_MODAL_SUBTITLE_PREMIUM_GIFT: "Buy a Gift",
        PAYMENT_MODAL_BUTTON_PREMIUM: "Get !!{planPremiumType}!!",
        PAYMENT_MODAL_BUTTON_PREMIUM_GIFT: "Buy Gift",
        PAYMENT_MODAL_ONE_YEAR: "1 Year",
        PAYMENT_MODAL_ONE_MONTH: "1 Month",
        PAYMENT_PRICE_CHANGE_TITLE: "The price changed!",
        PAYMENT_PRICE_CHANGE_BODY:
          "The price has changed since you started the purchase. Please restart the purchase after checking the price.",
        PAYMENT_CURRENCY: "Currency",
        PAYMENT_CURRENCY_PAYING_IN: "Paying in",
        PREMIUM_PAYMENT_IS_GIFT: "You are purchasing a gift.",
        PREMIUM_PAYMENT_IS_GIFT_IN_TIER_0_EXPERIMENT:
          "Gifting is only available for Nitro (Nitro Basic coming soon)",
        PREMIUM_PAYMENT_IS_GIFT_STREAM_QUALITY_UPSELL:
          "This Nitro gift includes HD quality streaming and other perks.",
        PREMIUM_PAYMENT_GIFT_SUBTEXT_MONTHLY:
          "This will be a one time charge for the amount of time chosen. You will not be billed monthly.",
        PREMIUM_PAYMENT_GIFT_SUBTEXT_YEARLY:
          "This will be a one time charge for the amount of time chosen. You will not be billed yearly.",
        PREMIUM_PAYMENT_CONFIRMATION_BLURB_IAP:
          "You can now claim {skuName} using your Nitro subscription. Let's get this bread!!!",
        PREMIUM_PAYMENT_CONFIRMATION_BUTTON_IAP: "Get {skuName}!",
        PREMIUM_TIER_2_GIFT_BLURB_MOBILE:
          "Gift someone Nitro to give them access to all the perks, including HD video, 2 Server Boosts, Profile personalization, and more. [Learn more about Nitro.](onClick)",
        PREMIUM_PAYMENT_GIFT_BLURB_MOBILE:
          "Gift someone Nitro to give access to super powered chat perks and Server Boosting. [Learn more about Nitro.](onClick)",
        PREMIUM_CLASSIC_PAYMENT_GIFT_BLURB_MOBILE:
          "Gift someone Nitro Classic to enhance their experience with super powered chat perks. [Learn more about Nitro Classic.](onClick)",
        PREMIUM_TIER_0_GIFT_BLURB_MOBILE:
          "Gift someone Nitro Basic to give them access to custom emoji & stickers anywhere, bigger file uploads, and more. [Learn more about Nitro Basic.](onClick)",
        PREMIUM_REQUIRED: "Nitro Required",
        PREMIUM_SUBSCRIPTION_REQUIRED_BODY:
          "Hold up! You need Nitro to get this loot.",
        PREMIUM_UPGRADE_REQUIRED_BODY:
          "Hold up! You need Nitro to get this loot. You have Nitro Classic.",
        PREMIUM_REQUIRED_GET_NITRO: "Get Nitro!",
        BILLING: "Billing",
        BILLING_SECURE_TOOLTIP:
          "Your payment methods are encrypted and stored with a secure payment processing service.",
        BILLING_PAYMENT_SOURCES: "Payment Methods",
        BILLING_ADD_PAYMENT_METHOD: "Add Payment Method",
        BILLING_SECURE: "Secure",
        BILLING_NO_PAYMENT_METHOD: "No payment method saved",
        BILLING_NO_PAYMENT_METHOD_DESCRIPTION:
          "Checkout faster by saving a payment method",
        BILLING_SALES_TAX_ADDED:
          "!!{tax}!! in sales tax has been added due to your billing address.",
        BILLING_SALES_TAX_INCLUDED: "Tax is included with the price.",
        BILLING_CODE_REDEMPTION_REDIRECT:
          "Psst! Looking to redeem a Discord key? We've moved it to [your inventory](onClick).",
        BILLING_MANAGED_BY_APPLE: "Your subscription is handled by Apple.",
        BILLING_MANAGED_BY_PAYMENT_GATEWAY:
          "Your subscription is handled by !!{paymentGatewayName}!!",
        BILLING_MANAGE_SUBSCRIPTION: "Manage Subscription",
        BILLING_MANAGE_ON_GOOGLE_PLAY: "Manage subscription in Google Play",
        BILLING_MANAGE_ON_GOOGLE_PLAY_LINK:
          "[Manage subscription in Google Play]({onClick})",
        BILLING_MANAGE_BILLING: "Change Payment Method",
        BILLING_ADDRESS: "Billing Address",
        BILLING_ADDRESS_ADDRESS: "Address",
        BILLING_ADDRESS_ADDRESS_ERROR_REQUIRED: "Oops! You forgot this one!",
        BILLING_ADDRESS_ADDRESS_PLACEHOLDER: "123 Discord Drive",
        BILLING_ADDRESS_ADDRESS2: "Address 2 (Optional)",
        BILLING_ADDRESS_ADDRESS2_PLACEHOLDER: "Apt, Ste, Dimension",
        BILLING_ADDRESS_CITY: "City",
        BILLING_ADDRESS_CITY_ERROR_REQUIRED: "City is required",
        BILLING_ADDRESS_CITY_PLACEHOLDER: "Coolsville",
        BILLING_ADDRESS_ZIP_CODE: "ZIP Code",
        BILLING_ADDRESS_ZIP_CODE_ERROR_REQUIRED: "ZIP code is required",
        BILLING_ADDRESS_ZIP_CODE_ERROR_LENGTH: "ZIP code must be 5 digits",
        BILLING_ADDRESS_ZIP_CODE_INVALID: "ZIP code is invalid",
        BILLING_ADDRESS_ZIP_CODE_PLACEHOLDER: "00000",
        BILLING_ADDRESS_POSTAL_CODE: "Postal Code",
        BILLING_ADDRESS_POSTAL_CODE_ERROR_REQUIRED: "Postal code is required",
        BILLING_ADDRESS_POSTAL_CODE_CANADA_PLACEHOLDER: "A1B 2C3",
        BILLING_ADDRESS_STATE: "State",
        BILLING_ADDRESS_STATE_ERROR_REQUIRED: "State is required",
        BILLING_ADDRESS_REGION: "State/Province/Region",
        BILLING_ADDRESS_PROVINCE: "Province",
        BILLING_ADDRESS_PROVINCE_ERROR_REQUIRED: "Province is required",
        BILLING_ADDRESS_COUNTRY: "Country",
        BILLING_ADDRESS_COUNTRY_ERROR_REQUIRED: "Country is required",
        BILLING_ADDRESS_NAME: "Name",
        BILLING_ADDRESS_NAME_ERROR_REQUIRED: "Name is required",
        BILLING_STEP_SELECT_PLAN: "Select Plan",
        BILLING_STEP_PAYMENT: "Payment",
        BILLING_STEP_PAYMENT_TYPE: "Payment Type",
        BILLING_STEP_PAYMENT_INFO: "Payment Information",
        BILLING_STEP_PAYPAL: "PayPal Information",
        BILLING_STEP_VENMO: "Venmo Information",
        BILLING_STEP_CREDIT_CARD_INFORMATION: "Payment Information",
        BILLING_STEP_ADDRESS: "Address",
        BILLING_STEP_REVIEW: "Review",
        BILLING_STEP_AWAITING_AUTHENTICATION: "Awaiting Authentication",
        BILLING_STEP_SHOP: "Shop",
        BILLING_STEP_PLAN: "Plan",
        BILLING_STEP_PAYMENT_METHOD: "Payment Method",
        BILLING_STEP_PLAN_AND_PAYMENT: "Plan & Payment",
        BILLING_CHECKOUT_CONFIRMATION_HEADER: "Close Checkout?",
        BILLING_CHECKOUT_CONFIRMATION_BODY:
          "You may lose any unsaved progress for your purchase. Are you sure you want to close checkout?",
        BILLING_CHECKOUT_CONFIRMATION_CONFIRM: "Close Checkout",
        BILLING_CHECKOUT_CONFIRMATION_CANCEL: "Cancel",
        BILLING_PAY_FOR_IT_WITH: "Pay for it With",
        BILLING_PAYMENT_AUTHORIZATION_CHARGE:
          "A hold may be placed on your payment method. [Learn More]({helpDeskArticle})",
        BILLING_IS_GIFT_PURCHASE: "Is this a gift?",
        BILLING_GIFT_LINK: "Gift Link",
        BILLING_GIFT_COPIED: "Copied!",
        BILLING_LEGAL_MUMBO_JUMBO: "Legal Mumbo Jumbo",
        BILLING_LEGAL_MUMBO_JUMBO_TERMS_LABEL:
          "I agree to the [Discord Terms of Service]({termsURL}) and [Paid Services Terms]({paidURL})",
        BILLING_LEGAL_MUMBO_JUMBO_TERMS_LABEL_SIMPLE:
          "I agree to the [Paid Services Terms]({paidURL})",
        BILLING_LEGAL_MUMBO_JUMBO_TERMS_LABEL_V2:
          'By clicking "{primaryText}", you agree to the [Paid Services Terms]({paidURL}).',
        BILLING_LEGAL_MUMBO_JUMBO_TRIAL_TERMS_LABEL:
          "I agree to the [Discord Terms of Service]({termsURL}), [Paid Services Terms]({paidURL}), and that my subscription will renew for **{rate}** on **{renewalDate, date, medium}**. I can cancel anytime under User Settings > Subscriptions, and previous charges won’t be refunded unless required by law.",
        BILLING_THIRD_PARTY_EULA_LABEL:
          "I agree to the [{applicationName} EULA](onClick)",
        BILLING_ONLINE_PURCHASE_WAIVER: "Online Purchase Waiver",
        BILLING_ONLINE_PURCHASE_WAIVER_CHECKBOX:
          "I agree to Discord’s Right to Withdrawal waiver",
        BILLING_ONLINE_PURCHASE_WAIVER_DISCLAIMER:
          "You understand that services begin upon purchase, and you waive your Right to Withdrawal once those services begin.",
        BILLING_PURCHASE_TERMS_ONE_TIME_DISCLAIMER:
          "By clicking {primaryText}, you agree to our [Terms of Service]({termsURL}).",
        BILLING_PURCHASE_TERMS_SUBSCRIPTION_DISCLAIMER:
          "By clicking {primaryText}, you are agreeing to our [Terms of Service]({termsURL}). This is a recurring subscription, which means that we'll charge you today and continue to charge you every {period} until you cancel your subscription. You can cancel anytime through [User Settings]({userSettingsURL}).",
        BILLING_PRICE_PER_MONTH: "!!{price}!! / Month",
        BILLING_PRICE_PER_MONTH_CURRENT_PLAN_MOBILE:
          "(Current Plan) !!{price}!! / Month",
        BILLING_PRICE_PER_YEAR: "!!{price}!! / Year",
        BILLING_PRICE_PER_MONTH_BOLD: "**!!{price}!!** / Month",
        BILLING_PRICE_PER_YEAR_BOLD: "**!!{price}!!** / Year",
        BILLING_PRICE_PER_MULTI_MONTHS_BOLD:
          "**!!{price}!!** Every {intervalCount} months",
        BILLING_PRICE_PER_YEAR_CURRENT_PLAN_MOBILE:
          "(Current Plan) !!{price}!! / Year",
        BILLING_PRICE_PER_MONTH_EACH: "!!{price}!! / Month each",
        BILLING_PRICE_PER_YEAR_EACH: "!!{price}!! / Year each",
        BILLING_PRICE_PER_MULTI_MONTH_EACH: "!!{price}!! each",
        BILLING_PRICE_PER_MULTI_MONTHS:
          "!!{price}!! every {intervalCount} months",
        BILLING_PREMIUM_GIFT_YEAR_MOBILE: "!!{price}!! for 1 Year",
        BILLING_PREMIUM_GIFT_MONTH_MOBILE: "!!{price}!! for 1 Month",
        BILLING_PREMIUM_PREMIUM_TEXT_A11Y_LABEL: "{product}, {description}",
        BILLING_ACCEPT_TERMS_PAID_SERVICES_TOOLTIP:
          "Accept the Terms of Service and Paid Services Terms to continue",
        BILLING_SELECT_PAYMENT_SOURCE_TOOLTIP:
          "Select a payment source to continue",
        BILLING_PAYMENT_SOURCE_INVALID: "This payment source is invalid.",
        BILLING_TRIAL_REDEMPTION_DISABLED:
          "Trial redemption is temporarily unavailable. Please try again later.",
        BILLING_ACCOUNT_CREDIT: "Account Credit",
        BILLING_ACCOUNT_CREDIT_DESCRIPTION:
          "When you accept a gift while you have a running subscription, or accept a gift that differs from your current subscription, it will appear here as credit.",
        BILLING_ACCOUNT_CREDIT_DESCRIPTION_IOS_DISCLAIMER:
          "Unfortunately mobile subscriptions are not eligible for account credit. Account credit will be applied while subscribing through the desktop app.",
        BILLING_SUBSCRIPTION_CREDIT: "Subscription Credit",
        BILLING_PAYMENT_PREMIUM: "Your Subscription",
        BILLING_PAYMENT_PREMIUM_DESCRIPTION:
          "These are your current subscriptions. They will be billed on the same billing cycle. You can update any subscription at any time.",
        BILLING_PAYMENT_PREMIUM_TERMS_LEGALESE_MONTHLY:
          "By purchasing a Discord subscription, you agree to our [Terms of Service]({termsUrl}), [Paid Services Terms]({paidURL}), and [Privacy Policy]({privacyUrl}). Nitro and Server Boost are auto-recurring subscriptions. You authorize Discord to immediately charge the payment method provided at !!{price}!! and to continue to do so automatically monthly until you cancel. You may cancel anytime.",
        BILLING_PAYMENT_PREMIUM_TERMS_LEGALESE_MULTI_MONTH:
          "By purchasing a Discord subscription, you agree to our [Terms of Service]({termsUrl}), [Paid Services Terms]({paidURL}), and [Privacy Policy]({privacyUrl}). Nitro and Server Boost are auto-recurring subscriptions. You authorize Discord to immediately charge the payment method provided at !!{price}!! and to continue to do so automatically every {intervalCount} months until you cancel. You may cancel anytime.",
        BILLING_PAYMENT_PREMIUM_TERMS_LEGALESE_YEARLY:
          "By purchasing a Discord subscription, you agree to our [Terms of Service]({termsUrl}), [Paid Services Terms]({paidURL}), and [Privacy Policy]({privacyUrl}). Nitro and Server Boost are auto-recurring subscriptions. You authorize Discord to immediately charge the payment method provided at !!{price}!! and to continue to do so automatically yearly until you cancel. You may cancel anytime.",
        BILLING_HISTORY: "Billing History",
        BILLING_PAYMENT_HISTORY: "Transaction History",
        BILLING_PAYMENT_BREAKDOWN_TAXES: "Taxes",
        BILLING_PAYMENT_ID: "Payment ID",
        BILLING_PAYMENT_ID_COPY: "Copy",
        BILLING_PAYMENT_ID_COPIED: "Copied!",
        BILLING_PAYMENT_BREAKDOWN_TOTAL: "Total",
        BILLING_PAYMENT_BREAKDOWN_REFUNDED: "Refunded",
        BILLING_PAYMENT_BREAKDOWN_NET: "Net",
        BILLING_PAYMENT_TABLE_HEADER_DATE: "Date",
        BILLING_PAYMENT_TABLE_HEADER_DESCRIPTION: "Description",
        BILLING_PAYMENT_TABLE_HEADER_AMOUNT: "Amount",
        BILLING_PURCHASE_DETAILS_HEADER: "Purchase Details",
        BILLING_DOWNLOAD_INVOICE_VAT: "Download VAT Invoice",
        BILLING_DOWNLOAD_REFUND_INVOICE: "Download VAT Credit Note",
        BILLING_DOWNLOAD_INVOICE: "Download extended purchase receipt",
        BILLING_DOWNLOAD_INVOICE_ADDRESS_OVERRIDE_TOGGLE:
          "Override Billing Address (Optional)",
        BILLING_DOWNLOAD_INVOICE_ADDRESS_OVERRIDE_DESCRIPTION:
          "Replace the billing address used during payment with a custom address to be displayed in the PDF",
        BILLING_DOWNLOAD_INVOICE_PDF_BUTTON: "Download PDF",
        BILLING_DOWNLOAD_INVOICE_PDF_BUTTON_ERROR:
          "Oops! Download doesn't seem to be working right now",
        BILLING_REFUND_HEADER: "Issues with your purchase?",
        BILLING_TAG_PENDING: "Pending",
        BILLING_TAG_FAILED: "Failed",
        BILLING_TAG_REFUNDED: "Refunded",
        BILLING_TAG_PARTIALLY_REFUNDED: "Partially Refunded",
        BILLING_TAG_REVERSED: "Reversed",
        BILLING_TAG_CANCELED: "Canceled",
        BILLING_APPLICATION_CONSUMABLE_REFUND_TEXT_UNABLE:
          "In-game content cannot be refunded. If there is an issue with your purchase, [please contact our support.]({supportURL})",
        BILLING_APPLICATION_REFUND_TEXT:
          "A refund can be requested if this purchase was made in the last {dateLimit, number} days and the game has been played for less than {playtimeLimit, number} hours. [Our friendly help desk will help you get your coins back.]({supportURL})",
        BILLING_PREMIUM_REFUND_TEXT:
          "A refund can be requested if this purchase was made in the last {dateLimit, number} days. [Our friendly help desk will help you get your coins back.]({supportURL})",
        BILLING_GIFT_REFUND_TEXT:
          "A refund can be requested if this purchase was made in the last {dateLimit, number} days and the gift has not been redeemed. [Our friendly help desk will help you get your coins back.]({supportURL})",
        BILLING_PREORDER_REFUND_TEXT:
          "A refund can be requested at any time before the game's release for preorders. [Our friendly help desk will help you get your coins back.]({supportURL})",
        BILLING_APPLICATION_REFUND_TEXT_UNABLE:
          "We're sorry, this purchase is not eligible for refunds. A refund can be requested if this purchase was made in the last {dateLimit, number} days and the game has been played for less than {playtimeLimit, number} hours.",
        BILLING_PREMIUM_REFUND_TEXT_UNABLE:
          "We're sorry, this purchase is not eligible for refunds. A refund can be requested if this purchase was made in the last {dateLimit, number} days.",
        BILLING_GIFT_REFUND_TEXT_UNABLE:
          "We're sorry, this purchase is not eligible for refunds. A refund can be requested if this purchase was made in the last {dateLimit, number} days and the gift has not been redeemed.",
        BILLING_REFUND_PURCHASE_DATE_SUBHEADER: "Purchase Date",
        BILLING_REFUND_RELEASE_DATE_SUBHEADER: "Release Date",
        BILLING_REFUND_PURCHASE_DATE:
          "{daysSincePurchase, plural, =0 {Today} =1 {{daysSincePurchase} day ago} other {{daysSincePurchase} days ago}}",
        BILLING_REFUND_PLAY_TIME_SUBHEADER: "Time Played",
        BILLING_REFUND_PLAY_TIME_NEVER_PLAYED: "Never played",
        BILLING_REFUND_MODAL_HEADER: "Submit Refund",
        BILLING_REFUND_MODAL_HEADER_ERROR: "Something went wrong",
        BILLING_REFUND_ERROR:
          'Looks like there was a problem when we tried to refund your purchase: "!!{error}!!".',
        BILLING_REFUND_ERROR_CONTACT_SUPPORT:
          "Please contact our [customer support team]({supportUrl}) for assistance.",
        BILLING_REFUND_BUTTON_TEXT: "Refund",
        BILLING_REFUND_SELECT_REASON: "Select a reason for the refund",
        BILLING_REFUND_REVOCATION_NOTICE:
          "By requesting a refund, you agree to lose access to this feature.",
        BILLING_REFUND_ONE_TIME_REFUND_NOTICE:
          "Limit one refund per subscription type, including gifts you redeem for yourself.",
        BILLING_REFUND_GENERIC_REASON:
          "We're sorry, this purchase is not eligible for refunds.",
        BILLING_REFUND_ALREADY_REFUNDED_PREMIUM_REASON:
          "You have already refunded a Nitro subscription.",
        BILLING_REFUND_ALREADY_REFUNDED_PREMIUM_GUILD_REASON:
          "You have already refunded a Boost subscription.",
        BILLING_REFUND_ALREADY_CONSUMED_REASON:
          "This gift has already been used.",
        BILLING_REFUND_USER_REASON_OTHER: "Something else",
        BILLING_REFUND_USER_REASON_USER_CONFUSION: "Wasn't what I expected",
        BILLING_REFUND_USER_REASON_GIFTING_REFUND: "Bought a gift I didn't use",
        BILLING_REFUND_USER_REASON_BUYERS_REMORSE: "Changed my mind",
        BILLING_REFUND_USER_REASON_WRONG_PURCHASE: "Bought it by mistake",
        BILLING_REFUND_USER_REASON_FORGOT_TO_CANCEL: "Forgot to cancel",
        BILLING_REFUND_USER_REASON_SERVER_BOOSTING_COOLDOWN:
          "Had a problem using Boosts",
        BILLING_REFUND_USER_REASON_WANT_TO_SWITCH_TIERS:
          "Want to switch Nitro plans",
        BILLING_REFUND_USER_REASON_DONT_NEED: "Don't need it anymore",
        BILLING_REFUND_REPORT_A_PROBLEM: "Report a problem",
        BILLING_GIFT_PURCHASE_TOOLTIP: "This was a gift",
        BILLING_EXTERNAL_HEADER:
          "You subscribed through !!{paymentGatewayName}!!",
        BILLING_EXTERNAL_DESCRIPTION:
          "!!{paymentGatewayName}!! transactions will not be listed below. To view !!{paymentGatewayName}!! transaction history or to change your !!{paymentGatewayName}!! payment method, [visit your !!{paymentGatewayName}!! Billing settings]({billingHistoryLink}).",
        BILLING_EXTERNAL_MANAGE_ELSEWHERE:
          "This is not supported for !!{paymentGatewayName}!! subscriptions. To manage your subscription, please [visit your !!{paymentGatewayName}!! Billing settings]({subscriptionManagementLink}).",
        BILLING_SWITCH_PLAN_TIER_2_DESCRIPTION:
          "Get access to superpowered perks and {numFreeGuildSubscriptions, plural, =1 {# Server Boost} other {# Server Boosts}}.",
        BILLING_SWITCH_PLAN_TIER_1_DESCRIPTION:
          "Enhance your Discord experience with sweet perks.",
        BILLING_SWITCH_PLAN_TIER_0_DESCRIPTION_V3:
          "Get access to custom emoji & stickers and $[!!{uploadSize}!!](uploadSizeHook) uploads.",
        BILLING_SWITCH_PLAN_CHOOSE_ONE: "Choose one:",
        BILLING_SWITCH_PLAN_CHOOSE_ONE_TRIAL_SUBTITLE:
          "You won't be charged until after **your free month**, and you may cancel at any time.",
        BILLING_SWITCH_PLAN_CHOOSE_ONE_TRIAL_SUBTITLE_DURATION:
          "You won't be charged until after **your free {duration}**, and you may cancel at any time.",
        BILLING_SWITCH_PLAN_CURRENT_PLAN: "Current Plan",
        BILLING_SWITCH_PLAN_YEARLY_FREE_MONTHS: "2 months free!",
        BILLING_PLAN_SELECTION_DISCOUNT: "save !!{discount}!!",
        BILLING_SWITCH_PLAN_PURCHASE_DETAILS: "Purchase Details",
        BILLING_SWITCH_PLAN_SUBSCRIPTION_COST: "Subscription Cost",
        BILLING_SWITCH_PLAN_CHANGE_DATE:
          "Your subscription will change starting on **{renewalDate, date, medium}**.",
        BILLING_SWITCH_PLAN_CHANGE_DATE_WITH_CHARGE:
          "Your subscription will change starting on **{renewalDate, date, medium}** and will cost **{rate}**.",
        BILLING_SWITCH_PLAN_UPGRADE: "Upgrade",
        BILLING_SWITCH_PLAN_CHANGE: "Change Plan",
        BILLING_SWITCH_PLAN_UPGRADE_BODY_TIER_1:
          "Switch to Nitro Classic and get a discount on Server Boosts and some superpowered perks.",
        BILLING_SWITCH_PLAN_UPGRADE_BODY_TIER_2:
          "Get Nitro to gain access to superpowered perks and Server Boosts.",
        BILLING_SWITCH_PLAN_UPGRADE_BODY_TIER_2_YEAR:
          "Switch to a yearly plan and save some cash. Enjoy superpowered perks and {numFreeGuildSubscriptions, plural, =1 {# Server Boost} other {# Server Boosts}} all year round.",
        BILLING_SWITCH_PLAN_UPGRADE_BODY_TIER_1_YEAR:
          "Save some cash and switch to a yearly plan. Enjoy sweet perks all year round.",
        BILLING_SWITCH_PLAN_DOWNGRADE_BODY_TIER_1:
          "Once you switch from Nitro to Nitro Classic, you lose the included Server Boosts and some superpowered perks.",
        BILLING_SWITCH_PLAN_DOWNGRADE_BODY_TIER_1_TO_TIER_0:
          "Once you switch from Nitro Classic to Nitro Basic, you lose the included Boost discount and some superpowered perks.",
        BILLING_SWITCH_PLAN_DOWNGRADE_BODY_TIER_0:
          "Once you switch from Nitro to Nitro Basic, you lose the included Server Boosts and some superpowered perks.",
        BILLING_SWITCH_PLAN_DOWNGRADE_BODY_MONTH:
          "Once you switch from the yearly plan to monthly, you keep all the same perks but you lose the 2 month free discount.",
        BILLING_SWITCH_PLAN_CONFIRM_TIER_0:
          "Hooray! You've got Nitro Basic. You can now use custom emoji anywhere, share bigger files, and more!",
        BILLING_SWITCH_PLAN_CONFIRM_TIER_1:
          "You now have sweet perks. Enjoy friend!",
        BILLING_SWITCH_PLAN_CONFIRM_TIER_2:
          "You now have superpowered perks and Server Boosts. Enjoy friend!",
        BILLING_SWITCH_PLAN_CONFIRM_TIER_2_NO_PAYMENT_TRIAL:
          "You will not be charged for this trial. After your free Nitro trial, you can extend it to a subscription by adding a payment method.",
        BILLING_SWITCH_PLAN_DELAYED_CONFIRMATION_TIER_1:
          "You will have sweet perks **once your payment has been completed.** We will send you an email as soon as it does.",
        BILLING_SWITCH_PLAN_DELAYED_CONFIRMATION_TIER_2:
          "You will have access to premium chat, 2 Boosts and a Boost discount **once your payment has been completed.** We will send you an email as soon as it does.",
        BILLING_SWITCH_PLAN_CONFIRM_UPGRADE_TIER_2_MONTH:
          "You now have superpowered perks and Server Boosts. Enjoy friend!",
        BILLING_SWITCH_PLAN_CONFIRM_UPGRADE_TIER_1_YEAR:
          "You now have sweet perks all year round. Enjoy friend!",
        BILLING_SWITCH_PLAN_DELAYED_CONFIRMATION_UPGRADE_TIER_1_YEAR:
          "You will have sweet perks all year round **once your payment has been completed.** We will send you an email as soon as it does.",
        BILLING_SWITCH_PLAN_CONFIRM_UPGRADE_TIER_2_YEAR:
          "You now have superpowered perks and {numFreeGuildSubscriptions, plural, =1 {# Server Boost} other {# Server Boosts}} all year round. Enjoy friend!",
        BILLING_SWITCH_PLAN_DELAYED_CONFIRMATION_UPGRADE_TIER_2_YEAR:
          "You will have superpowered perks and {numFreeGuildSubscriptions, plural, =1 {# Server Boost} other {# Server Boosts}} all year round **once your payment has been completed.** We will send you an email as soon as it does.",
        BILLING_SWITCH_PLAN_CONFIRM_UPGRADE_TIER_2_MULTI_MONTH:
          "You now have superpowered perks and Server Boosts. Enjoy friend!",
        BILLING_SWITCH_PLAN_CONFIRM_TO_TIER_0:
          "You're now subscribed to Nitro Basic. Enjoy! Upgrade any time for more Nitro perks.",
        BILLING_SWITCH_PLAN_CONFIRM_TIER_2_TO_TIER_1:
          "You lose your included Server Boosts but keep some sweet perks. You can switch back plans at any time.",
        BILLING_SWITCH_PLAN_CONFIRM_TIER_2_YEAR_TO_MONTH:
          "You lose two free months but keep all superpowered perks and your Server Boosts. You can switch back to a yearly plan at any time.",
        BILLING_SWITCH_PLAN_CONFIRM_TIER_2_GENERIC_TO_MONTH:
          "Keep all superpowered perks and your Server Boosts with a monthly plan.",
        BILLING_SWITCH_PLAN_CONFIRM_TIER_1_YEAR_TO_MONTH:
          "You lose two free months but keep all your sweet perks.",
        BILLING_POST_PURCHASE_JOIN_GUILD_FOR_EMOJI:
          "Ready to join the **!!{guildName}!!** server and get that emoji?",
        BILLING_POST_PURCHASE_JOIN_GUILD_FOR_EMOJI_CTA: "Join Server",
        BILLING_SELECT_PLAN_PREMIUM_YEAR_TIER_0: "Get Nitro Basic Yearly",
        BILLING_SELECT_PLAN_PREMIUM_MONTH_TIER_0: "Get Nitro Basic Monthly",
        BILLING_SELECT_PLAN_PREMIUM_YEAR_TIER_1: "Get Nitro Classic Yearly",
        BILLING_SELECT_PLAN_PREMIUM_MONTH_TIER_1: "Get Nitro Classic Monthly",
        BILLING_SELECT_PLAN_PREMIUM_YEAR_TIER_2: "Get Nitro Yearly",
        BILLING_SELECT_PLAN_PREMIUM_MONTH_TIER_2: "Get Nitro Monthly",
        BILLING_SELECT_PLAN_PREMIUM_MONTHS_TIER_2:
          "Get Nitro {intervalCount} Month",
        BILLING_SELECT_PLAN: "Get Nitro",
        BILLING_PLAN_SELECT_DESCRIPTION_PREMIUM_TIER_1_PREMIUM_GUILD_BUNDLE:
          "Nitro Classic + {num, plural, =1 {# Boost} other {# Boosts}}",
        BILLING_PLAN_SELECT_DESCRIPTION_PREMIUM_TIER_2_PREMIUM_GUILD_BUNDLE:
          "Nitro + {num, plural, =1 {# Boost} other {# Boosts}}",
        BILLING_PLAN_SELECT_INCLUDES_BOOSTS:
          "(Includes {num, plural, =1 {# Boost} other {# Boosts}})",
        BILLING_PLAN_SELECTION: "Plan Selection",
        BILLING_SELECT_PLAN_GUILD_SUBSCRIPTION: "Get !!{planName}!!",
        BILLING_SUBSCRIBE_TO_PLAN: "Subscribe",
        BILLING_INVOICE_GIFT_PLAN: "Gift !!{planName}!!",
        BILLING_INVOICE_SUBSCRIPTION_CREDIT_APPLIED:
          "Subscription Credit applied!",
        BILLING_INVOICE_TOTAL: "**Total**",
        BILLING_INVOICE_TODAY_TOTAL: "**Today's Total**",
        BILLING_INVOICE_TODAY_TOTAL_TAX_INCLUSIVE:
          "**Today's Total** (Tax Included)",
        BILLING_INVOICE_TOTAL_TAX_INCLUSIVE: "**Total** (Tax Included)",
        BILLING_PREMIUM_TIER_0_PLAN_ACTIVATED:
          "You can now use your favorite emoji anywhere, share bigger files, and more.",
        BILLING_PREMIUM_TIER_1_PLAN_ACTIVATED:
          "You now have access to your favorite emoji that you can use anywhere, more ways to style your profile, and so much more! Enjoy friend.",
        BILLING_PREMIUM_TIER_2_PLAN_ACTIVATED:
          "You now have access to your favorite emoji that you can use anywhere, more ways to style all your profiles across each of your servers, bigger uploads, and so much more! Enjoy friend.",
        BILLING_ERROR_SECTION_CARD:
          "Uh oh! Looks like there is an issue with this card. Please fix the fields and try again!",
        BILLING_ERROR_UNSUPPORTED_CURRENCY:
          "Your payment method does not support the eligible currencies. Please add another payment method and set it to default.",
        BILLING_ERROR_SECTION_ADDRESS:
          "Uh oh! Looks like there is an issue with this address. Please fix the fields and try again!",
        BILLING_ERROR_ADD_PAYMENT_SOURCE_STREAMER_MODE:
          "You cannot add new payment sources while in Streamer Mode.",
        BILLING_ERROR_RATE_LIMIT:
          "You've attempted too many purchases too quickly. Please wait a bit and try again!",
        BILLING_ERROR_NEGATIVE_INVOICE_AMOUNT:
          "This purchase results in a negative balance and unfortunately cannot be completed. We know this is frustrating and are currently working on improving this system. Check back soon!",
        BILLING_ERROR_UNKNOWN_PAYMENT_SOURCE:
          "An unknown payment source was specified. Select another and try again.",
        BILLING_ERROR_GENERIC:
          "Something went wrong while processing your request, please try again!",
        BILLING_ERROR_PURCHASE:
          "An issue has occurred with your purchase. Please wait and try again.",
        BILLING_ERROR_PURCHASE_DETAILS_NOT_FOUND:
          "Purchase details not found. Please wait and try again.",
        BILLING_ERROR_TRY_ANOTHER: "Try another card or currency.",
        BILLING_ERROR_CONTACT_PAYMENT_SOURCE:
          "Try again or contact your payment source provider for help.",
        BILLING_ERROR_INVALID_PLAN_FOR_PAYMENT_SOURCE:
          "This plan is not available for this payment source. Please select a different plan or try a different payment source.",
        BILLING_ERROR_PENDING_PAYMENT:
          "Unable to process change due to pending payment.",
        BILLING_ERROR_INVALID_CAPTCHA_RESPONSE:
          "Invalid captcha response. Please try again.",
        BILLING_PREMIUM_PLANS: "Nitro Plans",
        BILLING_PREMIUM_AND_PREMIUM_GUILD_PLANS: "Nitro + Boost Plans",
        BILLING_PREMIUM_GUILD_PLANS: "Boost Plans",
        BILLING_PREMIUM_AND_PREMIUM_GUILD_PLAN_ACTIVATED:
          "You now have **{planName}**. Enjoy friend!",
        BILLING_FINAL_PRICE_MAY_CHANGE:
          "Final price and currency will be based on your selected payment method. [Learn More]({documentationLink}).",
        BILLING_HOW_PRICING_WORKS:
          "[Click here]({documentationLink}) to learn about how we determine what currency and price you pay.",
        BILLING_CONFIRM_PRICE_CHANGE_TITLE: "Confirm Price Change",
        BILLING_TRIAL_PAYMENT_MODAL_INFO:
          "Your **free trial** will end on {trialEnd, date, short}. Choose a plan for after your {trialPeriod} trial ends.",
        BILLING_TRIAL_MONTHLY_PRICE_AFTER_TRIAL: "{price}/month after trial",
        BILLING_TRIAL_YEARLY_PRICE_AFTER_TRIAL: "{price}/year after trial",
        BILLING_TRIAL_MONTHLY_PRICE_AFTER_TRIAL_TAX_EXCLUSIVE:
          "{price} + tax /month after trial",
        BILLING_TRIAL_YEARLY_PRICE_AFTER_TRIAL_TAX_EXCLUSIVE:
          "{price} + tax /year after trial",
        BILLING_TRIAL_PRICE_NOW: "{price} now",
        BILLING_TRIAL_CANCEL_ANYTIME_LINK:
          "[Cancel anytime in your Subscriptions]({link})",
        BILLING_TRIAL_CANCEL_ANYTIME: "Cancel anytime in your Subscriptions",
        BILLING_TRIAL_CHOOSE_PAYMENT: "Choose a payment method",
        BILLING_TRIAL_FREE_TRIAL_TEXT: "free trial",
        BILLING_DISCOUNT_PAYMENT_MODAL_INFO:
          "Pay just **{discountedPrice}** a month for your first **3 months** of Nitro. Pay {regularPrice} a month after the 3-month discount end.",
        BILLING_DISCOUNT_MONTHLY_PRICE:
          "{discountedPrice}/month for 3 months\n\n{regularPrice}/month after 3 months",
        BILLING_YEARLY_PLAN_SAVINGS:
          "Save !!{percent, number}!!% with annual subscription",
        BILLING_SUBTOTAL: "Subtotal",
        BILLING_TRIAL_LEGAL_COPY:
          'By selecting "{buttonText}", you’re agreeing to Discord’s [Paid Service Terms]({paidServiceTermsArticle}). Nitro is a recurring subscription. Your payment method will be charged after your trial ends and continue to be charged every month unless you [cancel your subscription]({cancelSubscriptionArticle}). We’ll send a reminder email 7 days before your trial ends. Total doesn’t include any additional fees charged by your financial institution.',
        BILLING_TRIAL_LEGAL_COPY_V2:
          'By selecting "{buttonText}", you’re agreeing to Discord’s [Paid Service Terms]({paidServiceTermsArticle}). Nitro is a recurring subscription. Your payment method will be charged after your trial ends and continue to be charged every {interval} unless you [cancel your subscription]({cancelSubscriptionArticle}). We’ll send a reminder email 7 days before your trial ends. Total doesn’t include any additional fees charged by your financial institution.',
        BILLING_DISCOUNT_LEGAL_COPY:
          'By selecting "{buttonText}", you’re agreeing to Discord’s [Paid Service Terms]({paidServiceTermsArticle}). Nitro is a recurring subscription. Your payment method will be charged after your discount ends and continue to be charged every {interval} unless you [cancel your subscription]({cancelSubscriptionArticle}). We’ll send a reminder email 7 days before your discount ends. Total doesn’t include any additional fees charged by your financial institution.',
        BILLING_TRIAL_2_WEEK_PERIOD: "2-week",
        BILLING_TRIAL_30_DAY_PERIOD: "30-day",
        PAYMENT_AUTHENTICATION_MODAL_TITLE:
          "There was a problem with your payment",
        PAYMENT_AUTHENTICATION_MODAL_START:
          "We were unable to complete your payment of **!!{price}!!** for **!!{item}!!**. This is probably because it must be authenticated manually with your bank.",
        PAYMENT_AUTHENTICATION_MODAL_BUTTON: "Continue",
        PAYMENT_AUTHENTICATION_MODAL_BUTTON_CANCEL_PAYMENT: "Cancel Payment",
        PAYMENT_AUTHENTICATION_MODAL_TITLE_SUCCESS: "Payment Authenticated",
        PAYMENT_AUTHENTICATION_MODAL_SUCCESS:
          "Your payment was authenticated successfully. Thanks!",
        PAYMENT_AUTHENTICATION_MODAL_TITLE_FAIL:
          "Payment Authentication Failed",
        PAYMENT_AUTHENTICATION_MODAL_TITLE_CANCELED: "Payment Canceled",
        PAYMENT_AUTHENTICATION_MODAL_FAIL:
          "We were unable to authenticate your payment. Please try updating your payment method.",
        PAYMENT_AUTHENTICATION_MODAL_CANCELED:
          "Your payment for **!!{item}!!** has been canceled.",
        PAYMENT_WAITING_FOR_AUTHENTICATION: "Waiting for authentication...",
        PAYMENT_WAITING_FOR_PURCHASE_TOKEN_AUTHORIZATION_MODAL_HEADER:
          "Action Required",
        PAYMENT_WAITING_FOR_PURCHASE_TOKEN_AUTHORIZATION_MODAL:
          "Your purchase is almost complete.",
        PAYMENT_WAITING_FOR_PURCHASE_TOKEN_AUTHORIZATION_MODAL_INSTRUCTIONS:
          "We just sent you an email. Click the verification link in the email to authorize this purchase.",
        PAYMENT_WAITING_FOR_PURCHASE_TOKEN_AUTHORIZATION_MODAL_NEXT_BUTTON:
          "Continue",
        PAYMENT_WAITING_FOR_PURCHASE_TOKEN_AUTHORIZATION_MODAL_RESEND_PROMPT:
          "Didn't recieve anything?",
        PAYMENT_WAITING_FOR_PURCHASE_TOKEN_AUTHORIZATION_MODAL_RESEND_ACTION:
          "Resend email",
        PAYMENT_WAITING_FOR_PURCHASE_TOKEN_AUTHORIZATION_MODAL_RESEND_SENT:
          "Email sent!",
        PAYMENT_WAITING_FOR_BROWSER_CHECKOUT_MODAL_HEADER:
          "Complete checkout on your browser",
        PAYMENT_WAITING_FOR_BROWSER_CHECKOUT_MODAL_NEXT_BUTTON: "Pay Here",
        FORM_ERROR_GENERIC:
          "Oops! You've caught an ultra rare error. This is probably our fault, so please try again or check [our status page]({statusPageURL}).",
        FORM_ERROR_GENERIC_WITH_DETAILS:
          "Oops! You've caught an ultra rare error. This is probably our fault, so please try again or check [our status page]({statusPageURL}). ({details})",
        ERROR_GENERIC_TITLE: "Oops, something went wrong...",
        DATE: "Date",
        DESCRIPTION: "Description",
        AMOUNT: "Amount",
        PENDING: "Pending",
        COMPLETED: "Completed",
        FAILED: "Failed",
        REVERSED: "Reversed",
        REFUND: "Refund",
        RESUBSCRIBE: "Re-subscribe",
        CREDIT_CARD_ERROR_REQUIRED: "Card number required.",
        CREDIT_CARD_ERROR_NUMBER:
          "Something is wrong with your credit card number",
        CREDIT_CARD_ERROR_EXPIRATION:
          "Something is wrong with your expiration date",
        CREDIT_CARD_ERROR_SECURITY_CODE:
          "Something is wrong with your security code",
        PAYMENT_METHOD_CONFIRMATION_ERROR: "Unable to confirm payment method",
        PAYPAL_ACCOUNT_VERIFYING: "Connecting to PayPal",
        PAYMENT_ACCOUNT_VERIFYING: "Connecting with your payment source",
        PAYPAL_CALLBACK_SUCCESS:
          "**PayPal** account authorized. Return to **Discord** to complete the transaction.",
        REDIRECTED_CONFIRMATION_CALLBACK_SUCCESS:
          "Payment confirmed. Return to **Discord**.",
        REDIRECTED_CALLBACK_PENDING:
          "Connecting your payment source. Your payment method will show up in Billing Settings once confirmed.",
        REDIRECTED_PAYMENT_METHOD_CONFIRMATION_CALLBACK_SUCCESS:
          "Payment method confirmed. Return to **Discord**.",
        REDIRECTED_CALLBACK_ERROR: "Something went wrong, try again.",
        CARD_NUMBER: "Card Number",
        CREDIT_CARD_NUMBER: "Credit Card Number",
        CREDIT_CARD_CVC: "CVC",
        CREDIT_CARD_SECURITY_CODE: "Security Code",
        CREDIT_CARD_NAME_ON_CARD: "Name On The Card",
        CREDIT_CARD_NAME: "Name",
        CREDIT_CARD_EXPIRATION_DATE: "Expiration Date",
        IOS_IAP_ERROR_TITLE: "Oops...",
        IOS_IAP_ITUNES_ERROR: "Apple Error",
        IOS_IAP_GENERIC_BILLING_ERROR:
          "Something went wrong while processing your request, please try again.",
        IOS_IAP_RESTORE_SUBSCRIPTION_ERROR:
          "An error occurred while restoring your subscription. Please try again!",
        IOS_IAP_RESTORE_SUBSCRIPTION_SUCCESS: "Done.",
        IOS_IAP_RESTORE_SUBSCRIPTION_NONE_TITLE: "Nothing to restore.",
        IOS_IAP_RESTORE_SUBSCRIPTION_NONE_DESCRIPTION:
          "There are no purchases to restore.",
        IOS_IAP_MANAGE_SUBSCRIPTION_BUTTON: "Manage my subscription",
        IOS_IAP_SWITCH_PLANS_BUTTON: "Switch plans",
        IOS_IAP_MANAGE_PREMIUM_GUILD_BUTTON: "Manage Boosts",
        IOS_IAP_TESTFLIGHT_ERROR:
          "Oops! We cannot accept purchases via the Testflight build. You'll have to use the production build that's available on the App Store.",
        IAP_RESUBSCRIBE_BUTTON: "Resubscribe",
        GPLAY_BILLING_ALERT_TITLE: "Oh no!",
        GPLAY_BILLING_ALERT_BODY:
          "An issue has occurred with your purchase. Please wait and try again.",
        GPLAY_BILLING_VALIDATE_FAILURE:
          "Unable to make purchase. Please wait and try again.",
        GPLAY_BILLING_VALIDATE_FAILURE_RELOAD:
          "Unable to make purchase. Please reload app and try again.",
        GPLAY_BILLING_CONNECTION_ERROR:
          "Unable to connect to Google Play Services. Please wait and try again.",
        MOBILE_MANAGE_SUBSCRIPTION_DESKTOP:
          "Unfortunately, you cannot manage this subscription within the {mobilePlatform} app. Please go to the desktop app and manage your subscription via User Settings.",
        MOBILE_MANAGE_SUBSCRIPTION_EXTERNAL:
          "Unfortunately, you cannot manage this subscription within the {mobilePlatform} app. Please go to the {externalPaymentGateway} subscription settings to manage your subscription.",
        FILE_UPLOAD_LIMIT_NEW_STANDARD: "25MB",
        FILE_UPLOAD_LIMIT_PREMIUM_TIER_0_CORRECTED: "50MB",
        FILE_UPLOAD_LIMIT_PREMIUM_TIER_2_INCREASE: "500MB",
        FILE_UPLOAD_LIMIT_BOOSTED_GUILD_TIER_2: "50MB",
        FILE_UPLOAD_LIMIT_BOOSTED_GUILD_TIER_3: "100MB",
        STAFF_BADGE_TOOLTIP: "Discord Staff",
        PREMIUM_BADGE_TOOLTIP: "Subscriber since {date, date, medium}",
        PREMIUM_GUILD_SUBSCRIPTION_TOOLTIP:
          "Server boosting since {date, date, medium}",
        SELF_XSS_HEADER: "Hold Up!",
        SELF_XSS_LINE_1:
          "If someone told you to copy/paste something here you have an 11/10 chance you're being scammed.",
        SELF_XSS_LINE_2:
          "Pasting anything in here could give attackers access to your Discord account.",
        SELF_XSS_LINE_3:
          "Unless you understand exactly what you are doing, close this window and stay safe.",
        SELF_XSS_LINE_4:
          "If you do understand exactly what you are doing, you should come work with us {url}",
        QUICKSWITCHER_PLACEHOLDER: "Where would you like to go?",
        QUICKSWITCHER_NOTICE:
          "Use Quick Switcher to get around Discord quickly. Just press:",
        QUICKSWITCHER_QUERYMODE_USERS: "Searching All Users",
        QUICKSWITCHER_QUERYMODE_USERS_IN_GUILD:
          "Search friends and users in: {name}",
        QUICKSWITCHER_QUERYMODE_TEXT_CHANNELS: "Searching Text Channels",
        QUICKSWITCHER_QUERYMODE_VOICE_CHANNELS: "Searching Voice Channels",
        QUICKSWITCHER_QUERYMODE_GUILDS: "Searching Servers",
        QUICKSWITCHER_QUERYMODE_APPLICATIONS: "Searching Games",
        QUICKSWITCHER_LAST_CHANNEL: "Previous Channels",
        QUICKSWITCHER_DRAFTS: "Drafts",
        QUICKSWITCHER_MENTIONS: "Mentions",
        QUICKSWITCHER_UNREAD_CHANNELS: "Unread Channels",
        QUICKSWITCHER_EMPTY_TEXT: "Can’t seem to find what you’re looking for?",
        QUICKSWITCHER_EMPTY_CTA: "Learn more about Quick Switcher",
        QUICKSWITCHER_LINK_MESSAGE: "Go to message",
        QUICKSWITCHER_LINK_UNKNOWN: "Go to link",
        QUICKSWITCHER_LINK_NO_ACCESS: "You don't have access to this link",
        QUICKSWITCHER_PROTIP:
          "Start searches with $[](userSymbolHook) $[](textChannelSymbolHook) $[](voiceChannelSymbolHook) $[](guildSymbolHook) to narrow results. [Learn more]({helpdeskArticle})",
        QUICKSWITCHER_PROTIP_USERNAMES: "Usernames",
        QUICKSWITCHER_PROTIP_TEXT_CHANNELS: "Text Channels",
        QUICKSWITCHER_PROTIP_VOICE_CHANNELS: "Voice Channels",
        QUICKSWITCHER_PROTIP_GUILDS: "Servers",
        QUICKSWITCHER_TUTORIAL_MESSAGE_SEARCH:
          "Search for servers, channels or DMs",
        QUICKSWITCHER_TUTORIAL_MESSAGE_SELECT:
          "Select a result and press ENTER to jump to it",
        SUGGESTIONS: "Suggestions",
        SUGGESTED: "Suggested",
        LAUNCH_PAD: "LaunchPad",
        LAUNCH_PAD_DESCRIPTION:
          "Enables an experimental feature for faster navigation throughout the app. Accessible globally with a gesture or pull-tab UI element.",
        LAUNCH_PAD_STANDARD_RADIO: "Full Screen Gesture",
        LAUNCH_PAD_STANDARD_RADIO_ALT: "Right Edge Gesture",
        LAUNCH_PAD_STANDARD_RADIO_DESCRIPTION:
          "Use a global right to left gesture to activate Launch Pad (Please Note: this will disable the swipe-to-reply function in chat and require a right edge gesture to drag chats back in due to gesture conflicts).",
        LAUNCH_PAD_STANDARD_RADIO_DESCRIPTION_ALT:
          "Use a global right to left gesture to activate Launch Pad that you activate from the right edge (on Android this may conflict with system gestures if you have them enabled and while this keeps swipe to reply enabled, there may be conflicts we still need to fix).",
        LAUNCH_PAD_PULL_TAB_RADIO: "Pull Tab",
        LAUNCH_PAD_PULL_TAB_RADIO_DESCRIPTION:
          "Use a persistent pull tab element on the right of the screen to activate Launch Pad.",
        LAUNCH_PAD_DISABLED_RADIO: "Disabled",
        LAUNCH_PAD_DISABLED_RADIO_DESCRIPTION: "Disable usage of Launch Pad.",
        LAUNCH_PAD_UNREAD_CHANNELS_GUILD: "Unread Channels in {guildName}",
        LAUNCH_PAD_HISTORY_SHOW_MORE: "Show More",
        LAUNCH_PAD_HISTORY_SHOW_LESS: "Show Less",
        LAUNCH_PAD_NUX_TITLE: "Swipe the tab to activate LaunchPad",
        LAUNCH_PAD_NUX_SUBTITLE:
          "Quickly navigate to your recent conversations",
        USER_SETTIONS_NEW_DISCORD_TITLE: "New Discord",
        USER_SETTINGS_VOICE_CODEC_TITLE: "Audio Codec",
        USER_SETTINGS_VOICE_CODEC_DESCRIPTION:
          "Discord uses only the best organic, locally-sourced Opus Voice codec.",
        USER_SETTINGS_VOICE_ADD_MULTIPLE:
          "You can add multiple Push to Talk binds under [Keybind Settings](onClick).",
        USER_SETTINGS_VOICE_MIC_TEST_TITLE: "Mic Test",
        USER_SETTINGS_VOICE_MIC_TEST_DESCRIPTION:
          "Having mic issues? Start a test and say something fun—we'll play your voice back to you.",
        USER_SETTINGS_VOICE_MIC_TEST_BUTTON_ACTIVE: "Stop Testing",
        USER_SETTINGS_VOICE_MIC_TEST_BUTTON_INACTIVE: "Let's Check",
        USER_SETTINGS_VOICE_MIC_TEST_VOICE_CAPTION:
          "Playing back your beautiful voice",
        USER_SETTINGS_VOICE_MIC_TEST_VOICE_NO_INPUT_NOTICE:
          "Discord isn’t detecting any input from your mic. Please check that you’ve selected the right input device.",
        USER_SETTINGS_VOICE_VIDEO_HOOK_LABEL:
          "Use our advanced technology to capture your screen",
        USER_SETTINGS_VOICE_VIDEO_CODEC_TITLE: "Video Codec",
        USER_SETTINGS_VOICE_OPEN_H264:
          "OpenH264 Video Codec provided by Cisco Systems, Inc.",
        USER_SETTINGS_VOICE_HARDWARE_H264: "Hardware Acceleration",
        USER_SETTINGS_VOICE_AV1: "AV1 video codec",
        USER_SETTINGS_VOICE_EXPERIMENTAL_SOUNDSHARE_LABEL:
          "Use an experimental method to capture audio from applications",
        USER_SETTINGS_VOICE_SOUNDSHARE_NOT_ENABLED_LABEL:
          "Capturing audio on your device requires the installation or updating of additional software. After clicking the install button below, you'll be prompted for authorization. [Learn More]({helpdeskArticle})",
        USER_SETTINGS_VOICE_SOUNDSHARE_ENABLING_LABEL:
          "The audio capture extension requires authorization. Check your Security & Privacy system preferences. [Learn More]({helpdeskArticle})",
        USER_SETTINGS_VOICE_SOUNDSHARE_ENABLED_LABEL:
          "You're all set to capture audio from applications. [Learn More]({helpdeskArticle})",
        USER_SETTINGS_VOICE_SOUNDSHARE_FAILED_TO_ENABLE_LABEL:
          "Something went wrong setting up the audio capture extension. Please visit our [help page]({helpdeskArticle}) to troubleshoot",
        USER_SETTINGS_VOICE_INSTALL_LABEL: "Install",
        FORM_HELP_OPEN_H264:
          "Disabling OpenH264 also disables hardware accelerated video encoding, if available.",
        FORM_HELP_HARDWARE_H264:
          "Hardware acceleration uses your GPU for efficient video encoding and decoding, if available.",
        FORM_HELP_HARDWARE_AV1:
          "Disabled if hardware acceleration is disabled.",
        FORM_HELP_VIDEO_HOOK:
          "Our signed DLL is injected into the application to capture frames.",
        USERNAME: "Username",
        USERNAME_AND_TAG: "Username and Tag",
        SERVICE_CONNECTIONS_DISCONNECT: "Disconnect",
        REPORT_SERVER: "Report Server — !!{name}!!",
        REPORT_SERVER_NO_NAME: "Report Server",
        REPORT_MESSAGE: "Report Message Posted by !!{name}!!",
        REPORT_USER: "Report User — !!{name}!!",
        FORM_LABEL_REPORT_REASON: "What is it you’re reporting?",
        FORM_REPORT_HELP_TEXT:
          "Reports are sent to the Discord Trust & Safety team - **not the server owner**. Creating false reports and/or spamming the report button may result in a suspension of reporting abilities. Learn more from the [Discord Community Guidelines]({guidelinesURL}). Thanks for keeping things safe and sound.",
        APP_PERMISSION_CONNECT_LABEL: "Connect to Discord app",
        APP_PERMISSION_CONNECT_DESC:
          "Connect to Discord and join voice channels",
        PERMISSION_MICROPHONE_DENIED:
          "Microphone access denied - Discord requires audio access to connect to a call.",
        STAGE_CHANNEL_PERMISSION_MICROPHONE_DENIED:
          "Discord requires audio access to allow you to speak.",
        PERMISSION_MEDIA_DENIED:
          "Media access denied - Discord requires access to storage to post attachments.",
        PERMISSION_MEDIA_DOWNLOAD_DENIED:
          "Download access denied - Discord requires storage access to download files.",
        PERMISSION_QR_SCANNER_DENIED:
          "Camera access denied - Discord requires camera access to scan QR codes.",
        SERVER_OVERVIEW: "Server Overview",
        DISPLAY: "Display",
        GUILD_SETTINGS_PREMIUM_PROGRESS_BAR_TITLE: "Show Boost progress bar",
        GUILD_SETTINGS_PREMIUM_PROGRESS_BAR_DESCRIPTION:
          "This progress bar will display in your channel list, attached to your server name (or server banner if you have one set).",
        GUILD_SETTINGS_PREMIUM_PROGRESS_BAR_IMG_ALT:
          "Boost progress bar example",
        GUILD_ENABLE_PROGRESS_BAR: "Enable Progress Bar",
        GUILD_SETTINGS_ICON_RECOMMEND:
          "We recommend an image of at least 512x512 for the server.",
        GUILD_SETTINGS_SPLASH_RECOMMEND:
          "The recommended minimum size is 1920x1080 and recommended aspect ratio is 16:9. [Learn more]({articleURL})",
        GUILD_SETTINGS_SPLASH_DESCRIPTION:
          "This image will display in server invite embeds, invite in browser, and invite confirmation modal.",
        GUILD_SETTINGS_SPLASH_INFO:
          "This image will display when users receive an invite to the server.",
        UPLOAD_IMAGE: "Upload Image",
        REPLACE_IMAGE: "Replace Image",
        UPLOAD_BACKGROUND: "Upload Background",
        GUILD_SETTINGS_DEFAULT_NOTIFICATION_SETTINGS_INTRO:
          "This will determine whether members who have not explicitly set their notification settings receive a notification for every message sent in this server or not.",
        GUILD_SETTINGS_DEFAULT_NOTIFICATION_SETTINGS_TIP:
          "We highly recommend setting this to only @mentions for a Community Server.",
        GUILD_SETTINGS_DEFAULT_NOTIFICATIONS_LARGE_GUILD_NOTIFY_ALL:
          "Due to this server's size, members will not get mobile push notifications for non-@mention messages.",
        GUILD_SETTINGS_SERVER_INVITE_BACKGROUND: "Server Invite Background",
        GUILD_SETTINGS_OVERVIEW_TIER_INFO:
          "This is a Tier {tier} Nitro Feature. [Check your tier status]({tierStatusUrl})",
        GUILD_SETTINGS_OVERVIEW_BOOST_UNLOCK:
          "{boosts, plural, =1 {# boost} other {# boosts}} to unlock",
        GUILD_SETTINGS_OVERVIEW_BOOST_UNLOCKED: "Tier {tier} perk unlocked",
        GUILD_SETTINGS_HOME_HEADER: "Home Page Banner Background",
        GUILD_SETTINGS_HOME_HEADER_DESCRIPTION:
          "This image will be displayed on the Home page of your community server.",
        GUILD_SETTINGS_HOME_HEADER_RECOMMEND:
          "The recommended minimum size is 1920x480 and recommended aspect ratio is 4:1.",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_SETUP_WELCOME:
          "Set Up Welcome Sign",
        GUILD_SETTINGS_ONBOARDING_HOME_NEW_MEMBER_EXAMPLE: "Joiner",
        GUILD_SETTINGS_ONBOARDING_HOME_EXISTING_MEMBER_EXAMPLE: "Member",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_WELCOME_TITLE: "Welcome Sign",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_WELCOME_DESCRIPTION:
          "Tell new members what's special about your community and why you're excited to see them!",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_WELCOME_DESCRIPTION_TIP:
          "**TIP:** Use [@username] to mention the member by name.",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_WELCOME_PLACEHOLDER:
          "Hi [@username]! I made this server so that nerds like us could have a safe space to be ourselves. I've made a bunch of lifelong friends and hope you can find the same thing too. I've curated some things for you to get started with below:",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_WELCOME_AUTHOR_TITLE:
          "Message Author",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_WELCOME_AUTHOR_EXPLAINER:
          "Members with permissions to manage the guild and roles.",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_WELCOME_MESSAGE_INPUT_HEADER:
          "Welcome Message",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_TODOS_TITLE:
          "New Member To Do's",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_TODOS_DESCRIPTION:
          "Set 3-5 tasks for your new members to do. Get them to **talk and engage in your channels.**",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_TODOS_BAD_EXAMPLE_TITLE:
          "chat with the community",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_TODOS_BAD_EXAMPLE_CHANNEL:
          "in #general",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_TODOS_BAD_EXAMPLE_REASON:
          "Don't Do This: Too General",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_TODOS_RULES: "Read the rules",
        GUILD_SETTINGS_ONBOARDING_HOME_REVIEW_TITLE: "Server Guide",
        GUILD_SETTINGS_ONBOARDING_HOME_GUIDE_EXAMPLE_ALT:
          "Server Guide example",
        GUILD_SETTINGS_ONBOARDING_HOME_REVIEW_DESCRIPTION:
          "Your Welcome Message, Banner, To Do tasks, and Resources are all set up",
        NEW_MEMBER_ACTION_CHANNEL: "in #{channelName}",
        GUILD_SETTINGS_ONBOARDING_RULES_ACTION: "Read the rules",
        GUILD_SETTINGS_ONBOARDING_CUSTOMIZE_ACTION: "Visit Channels & Roles",
        GUILD_SETTINGS_ONBOARDING_ADD_A_TASK: "Add a task",
        GUILD_SETTINGS_ONBOARDING_HOME_BANNER: "Server Guide Banner",
        GUILD_SETTINGS_ONBOARDING_HOME_BANNER_EXPLAINER_1:
          "This image will display at the top of the Server Guide.",
        GUILD_SETTINGS_ONBOARDING_HOME_BANNER_EXPLAINER_2:
          "The recommended minimum size is 960x540 and recommended aspect ratio is 16:9. $[Learn More](learnMoreHook).",
        GUILD_SETTINGS_ONBOARDING_ACTION_VIEW: "Member visits the channel",
        GUILD_SETTINGS_ONBOARDING_ACTION_TALK:
          "Member sends a message in the channel",
        GUILD_SETTINGS_ONBOARDING_ACTION_TALK_IN_FORUM:
          "Member posts or responds in the forum",
        GUILD_SETTINGS_ONBOARDING_ACTION_TITLE:
          "What should the new member do?",
        GUILD_SETTINGS_ONBOARDING_ACTION_TITLE_PLACEHOLDER:
          "Ex: Post a photo of your pet",
        GUILD_SETTINGS_ONBOARDING_ACTION_CHANNEL: "Where should they do it?",
        GUILD_SETTINGS_ONBOARDING_ACTION_CHANNEL_EXPLAINER:
          "Channels must be viewable by @everyone",
        GUILD_SETTINGS_ONBOARDING_ACTION_ICON: "Upload a custom thumbnail",
        GUILD_SETTINGS_ONBOARDING_ACTION_ICON_EXPLAINER:
          "72x72 minimum. 1:1 aspect ratio. PNG, JPG",
        GUILD_SETTINGS_ONBOARDING_ACTION_ICON_EMOJI: "Choose Emoji",
        GUILD_SETTINGS_ONBOARDING_ACTION_ICON_UPLOAD: "Upload Icon",
        GUILD_SETTINGS_ONBOARDING_ACTION_ICON_REMOVE: "Remove Image",
        GUILD_SETTINGS_ONBOARDING_ACTION_TYPE: "This task is complete when:",
        GUILD_SETTINGS_ONBOARDING_RESOURCE_CHANNEL_EDIT_TITLE: "Edit Resource",
        GUILD_SETTINGS_ONBOARDING_RESOURCE_TITLE:
          "2. Give this resource a name",
        GUILD_SETTINGS_ONBOARDING_RESOURCE_TITLE_PLACEHOLDER:
          "#rules might be Rules",
        GUILD_SETTINGS_ONBOARDING_RESOURCE_DESCRIPTION:
          "3. Give this resource a description",
        GUILD_SETTINGS_ONBOARDING_RESOURCE_DESCRIPTION_PLACEHOLDER:
          "Ex: Rules for the server",
        GUILD_SETTINGS_ONBOARDING_RESOURCE_CHANNEL:
          "1. Choose a resource channel",
        GUILD_SETTINGS_ONBOARDING_RESOURCE_CHANNEL_EXPLAINER:
          "You can only select channels that are readonly for @everyone.",
        GUILD_SETTINGS_ONBOARDING_RESOURCE_UPLOAD:
          "4. Upload a custom thumbnail",
        GUILD_SETTINGS_ONBOARDING_RESOURCE_UPLOAD_EXPLAINER:
          "72x72 minimum. 1:1 aspect ratio. PNG, JPG",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCES_TITLE:
          "Resource Pages",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCES_DESCRIPTION:
          "Turn read-only channels into fancy resource pages in your Server Guide. They will no longer appear on the channel list unless you enable All Channels. Resources come with some perks:",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCE_BULLET_1:
          "Members start at the top of pages instead of the bottom of a message thread",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCE_BULLET_2:
          "Chat bars and avatars are removed so it looks cleaner",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCE_BULLET_3:
          "All the content, embeds, media, and formatting will stay the same",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCE_NEW_USER: "New User",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_RESOURCE_EXISTING_USER:
          "Existing User",
        GUILD_SETTINGS_ONBOARDING_ADD_A_RESOURCE: "Add a resource",
        WELCOME_MESSAGE_VALIDATION_ERROR_AUTHOR_AND_MESSAGE:
          "Welcome messages require both an author and a message of at least {minLength} characters.",
        WELCOME_MESSAGE_VALIDATION_ERROR_AUTHOR:
          "Welcome messages require an author",
        WELCOME_MESSAGE_VALIDATION_ERROR_MESSAGE:
          "Welcome messages require a message of at least {minLength} characters.",
        NEW_MEMBER_ACTION_VALIDATION_ERROR_TITLE_REQUIRED:
          "Actions must be at least {minLength} characters.",
        NEW_MEMBER_ACTION_VALIDATION_ERROR_TYPE_VIEW_INVALID_FOR_CHANNEL:
          "The selected channel does not have view channel permissions for @everyone.",
        NEW_MEMBER_ACTION_VALIDATION_ERROR_TYPE_CHAT_INVALID_FOR_CHANNEL:
          "The selected channel does not have send message permissions for @everyone.",
        GUILD_ONBOARDING_SETUP_EDUCATION_HOME_TITLE: "Set up your Server Guide",
        GUILD_ONBOARDING_SETUP_EDUCATION_HOME_SUBTITLE:
          "Try making sure all your Get Started items are actionable. We've added a \"Read the Rules\" task so you don't have to!",
        GUILD_SETTINGS_ONBOARDING_HOME_REVIEW_INVALID_DESCRIPTION:
          "You must have a welcome message and at least 3 To Do tasks.",
        GUILD_SETTINGS_ONBOARDING_HOME_REVIEW_NOT_STARTED_DESCRIPTION:
          "Set up your Server Guide to help new members get started.",
        GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED:
          "Failed to save Server Guide",
        GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED_REASON:
          "You must have a welcome message and at least 3 To Do tasks.",
        GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED_INVALID:
          "Check that the permissions on your To Do and Resource channels are set correctly.",
        GUILD_SETTINGS_ONBOARDING_HOME_SAVE_FAILED_INVALID_WITH_DETAILS:
          "Check that the permissions on your To Do and Resource channels are set correctly.\n\nErrors: {errorMessage}",
        GUILD_SETTINGS_ONBOARDING_SUGGESTED_RESOURCES_EXPLAINER:
          "We picked a few channels that are read-only",
        GUILD_SETTINGS_ONBOARDING_SUGGESTED_RESOURCES_DISMISS: "Dismiss All",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_INVALID_ACTION_CHANNEL:
          "Assigned channel is missing permissions for @everyone",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_INVALID_ACTION_CHANNEL_EMOJI:
          "This emoji no longer exists. Select a new one.",
        GUILD_SETTINGS_ONBOARDING_HOME_SETTINGS_INVALID_RESOURCE_CHANNEL:
          "Assigned channel must be readonly for @everyone",
        GUILD_SETTINGS_ONBOARDING_PROMPT_INVALID_EMOJI:
          "This emoji no longer exists. Select a new one.",
        GUILD_ONBOARDING_HOME_GUILD_MEMBERS_RATIO:
          "{online, number} / {total, number} Members online",
        GUILD_SETTINGS_EMOJI_ALIAS: "Alias",
        GUILD_SETTINGS_EMOJI_NAME: "Name",
        GUILD_SETTINGS_EMOJI_IMAGE: "Image",
        GUILD_SETTINGS_EMOJI_ALIAS_PLACEHOLDER: "Enter Alias",
        GUILD_SETTINGS_EMOJI_UPLOAD_TO_SERVER_MESSAGE:
          "Add up to {count} custom emoji that anyone can use in this server. Animated GIF emoji may be used by members with Discord Nitro. Emoji names must be at least 2 characters long and can only contain alphanumeric characters and underscores. Emoji must be under {maxSize} KB in size.",
        GUILD_SETTINGS_EMOJI_UPLOAD_TO_SERVER_DESCRIPTION:
          "Add up to {count} custom emoji that anyone can use in this server. Animated GIF emoji may be used by members with Discord Nitro.",
        GUILD_SETTINGS_EMOJI_UPLOAD_HEADING: "Upload Requirements",
        GUILD_SETTINGS_EMOJI_UPLOAD_REQUIREMENTS_1: "File type: JPEG, PNG, GIF",
        GUILD_SETTINGS_EMOJI_UPLOAD_REQUIREMENTS_2:
          "Recommended file size: {maxSize} KB (We’ll compress it for you)",
        GUILD_SETTINGS_EMOJI_UPLOAD_REQUIREMENTS_3:
          "Recommended dimensions: 128x128",
        GUILD_SETTINGS_EMOJI_UPLOAD_REQUIREMENTS_4:
          "Naming: Emoji names must be at least 2 characters long and can only contain alphanumeric characters and underscores",
        GUILD_SETTINGS_EMOJIS_UPSELL_BANNER_TOO_MANY_EMOJIS_HEADER:
          "Level {level} emoji lost",
        GUILD_SETTINGS_EMOJIS_UPSELL_BANNER_TOO_MANY_EMOJIS_TEXT:
          "Boost your server to Level {level} or buy a level to unlock your emoji!",
        GUILD_SETTINGS_EMOJIS_UPSELL_BANNER_TEXT:
          "Boost your server to Level {level} to unlock more emoji slots!",
        GUILD_SETTINGS_STICKERS: "Stickers",
        GUILD_SETTINGS_STICKERS_UPSELL_TITLE: "Get Boosted",
        GUILD_SETTINGS_STICKERS_UPSELL_DESCRIPTION:
          "Enjoy stickers and more perks by boosting your server to Level 1. Each Level unlocks more sticker slots and new benefits for everyone.",
        GUILD_SETTINGS_STICKERS_UPSELL_DESCRIPTION_FREE_SLOTS:
          "Enjoy more stickers and other perks by boosting your server to Level 1. Each Level unlocks more sticker slots and new benefits for everyone.",
        GUILD_SETTINGS_STICKERS_UPSELL_BANNER_TEXT:
          "Boost your server to Level {level} to unlock {numAdditional} more sticker slots!",
        GUILD_SETTINGS_STICKERS_UPSELL_BANNER_TOO_MANY_STICKERS_HEADER:
          "Level {level} stickers lost",
        GUILD_SETTINGS_STICKERS_UPSELL_BANNER_TOO_MANY_STICKERS_TEXT:
          "Boost your server to Level {level} or buy a level to unlock your stickers!",
        GUILD_SETTINGS_STICKERS_BOOST_SERVER: "Boost Server",
        GUILD_SETTINGS_STICKERS_UPLOAD_AUTO_RESIZE_HEADING:
          "Upload Instructions",
        GUILD_SETTINGS_STICKERS_UPLOAD_AUTO_RESIZE_INSTRUCTIONS:
          "Stickers can be static (PNG) or animated (APNG, GIF). Stickers must be exactly 320 x 320 pixels and no larger than {fileSize}. We will automatically resize static PNG and animated GIF stickers for you.",
        GUILD_SETTINGS_STICKERS_UPLOAD_AUTO_RESIZE_HELP:
          "For more information about file types and tips on uploading custom stickers, check out this [Help Center article]({articleUrl}).",
        GUILD_SETTINGS_STICKERS_FREE_SLOTS_HEADER: "Free Slots",
        GUILD_STICKER_A11Y_REMOVE_STICKER:
          "Remove attached {name} sticker from message",
        GUILD_STICKER_UPLOAD_TITLE: "Upload a file",
        GUILD_STICKER_UPLOAD_DESCRIPTION_NO_LOTTIE:
          "File should be APNG, PNG, or GIF ({fileSize} max)",
        GUILD_STICKER_UPLOAD_DESCRIPTION:
          "File should be APNG, PNG, Lottie, or GIF ({fileSize} max)",
        GUILD_STICKER_UPLOAD_NAME_TITLE: "Sticker Name",
        GUILD_STICKER_UPLOAD_NAME_PLACEHOLDER: "ex: cat hug",
        GUILD_STICKER_UPLOAD_PREVIEW_TITLE: "Preview",
        GUILD_STICKER_UPLOAD_FILE_TITLE: "File",
        GUILD_STICKER_UPLOAD_FILE_TITLE_BLOCKED: "File (This cannot be edited)",
        GUILD_STICKER_UPLOAD_FILE_PLACEHOLDER: "Choose a file",
        GUILD_STICKER_UPLOAD_FILE_BUTTON: "Browse",
        GUILD_STICKER_UPLOAD_RELATED_EMOJI_TITLE: "Related Emoji",
        GUILD_STICKER_UPLOAD_RELATED_EMOJI_PLACEHOLDER: "Click to select",
        GUILD_STICKER_UPLOAD_DESCRIPTION_TITLE: "Description",
        GUILD_STICKER_UPLOAD_DESCRIPTION_PLACEHOLDER:
          "See our Help Center for tips on writing sticker descriptions.",
        GUILD_STICKER_UPLOAD_DESCRIPTION_TOOLTIP:
          "You can add a description, sometimes called alt-text, to your stickers so they’re accessible to even more people, including those who are blind or visually impaired. Good descriptions are concise, but present what’s in your stickers accurately enough to understand their context. Descriptions are optional but must be more than 1 character.",
        GUILD_STICKER_PREVIEW_IMG_ALT_DARK: "Sticker preview on dark theme",
        GUILD_STICKER_PREVIEW_IMG_ALT_LIGHT: "Sticker preview on light theme",
        GUILD_STICKERS_UPDATE: "Update",
        GUILD_STICKER_GRID_UPLOAD_LABEL: "Upload Sticker",
        GUILD_STICKER_INVALID_STICKER: "Invalid sticker file",
        GUILD_STICKER_FILE_TOO_BIG:
          "That sticker was too big! Stickers must be under {maxSize}.",
        GUILD_STICKER_UNKNOWN_MIME_TYPE: "Unsupported file format",
        GUILD_STICKER_UNSUPPORTED_MIME_TYPE:
          "Unsupported file format. [Learn more]({articleURL})",
        GUILD_STICKER_SETTINGS_ADDITIONAL_SLOTS_WITHOUT_TOTAL:
          "+{numAdditional, plural, =1 {{numAdditional} Sticker Slot} other {{numAdditional} Sticker Slots}}",
        GUILD_STICKER_SETTINGS_ADDITIONAL_SLOTS:
          "+{numAdditional, plural, =1 {{numAdditional} Sticker Slot} other {{numAdditional} Sticker Slots}} ({numTotal, number} total)",
        GUILD_STICKER_SETTINGS_BUY_LEVEL: "Buy Level",
        GUILD_STICKER_SETTINGS_UNLOCK_SLOTS: "Unlock More Slots",
        GUILD_STICKER_SETTINGS_ICON_ALT_TEXT:
          "A smiling sticker icon surrounded by purple and pink sparkles",
        GUILD_STICKER_SETTINGS_PLACEHOLDER_ALT_TEXT:
          "A grayscale wumpus sticker peeling off the screen from the top left corner.",
        GUILD_STICKER_UNUSED_TIER:
          "Upload more stickers to make use of this unlocked level.",
        GUILD_STICKER_SETTINGS_REMAINING_SLOTS_AVAILABLE:
          "{numAvailable, number} of {numTotal, plural, =1 {{numTotal} slot} other {{numTotal} slots}} available",
        SETTINGS_WEBHOOKS_INTRO:
          "\nWebhooks are an easy way to get automated messages and data updates sent to a text channel in the server using internet magic. [Learn more]({articleURL}).\n",
        SETTINGS_WEBHOOKS_EMPTY_TITLE: "No Webhooks",
        SETTINGS_WEBHOOKS_EMPTY_BODY_IOS:
          "For now, webhooks can only be created on web or desktop",
        SETTINGS_NOTICE_MESSAGE: "Careful — you have unsaved changes!",
        SAVE_CHANGES: "Save Changes",
        WEBHOOK_MODAL_TITLE: "Edit Webhook",
        WEBHOOK_MODAL_ICON_DESCRIPTION:
          "We recommend an image of at least 256x256",
        SETTINGS_ROLES_DELETE_TITLE: "Delete Role",
        SETTINGS_ROLES_DELETE_BODY:
          "Are you sure you want to delete the **!!{name}!!** role? This action cannot be undone.",
        SETTINGS_PERMISSIONS_DELETE_TITLE: "Delete Permission Settings",
        SETTINGS_PERMISSIONS_DELETE_BODY:
          "Are you sure you want to delete **!!{name}!!** permissions? This action cannot be undone.",
        SETTINGS_INVITE_TIP:
          "Here's a list of all active invite links. You can revoke any one or [create one](onCreateInvite).",
        SETTINGS_INVITE_TIP_WITHOUT_CREATE:
          "Here's a list of all active invite links. You can revoke any one.",
        INVITES: "Invites",
        GRANT_GUEST_MEMBERSHIP: "Invite as Guest",
        GRANT_GUEST_MEMBERSHIP_VOICE_ONLY: "Invite as Guest (Voice Only)",
        INVITE_A_GUEST: "Invite a Guest",
        INVITE_A_GUEST_VOICE_ONLY: "Invite a Guest (Voice Only)",
        INVITE_A_GUEST_EXPLANATION:
          "A guest invite allows someone to join a server voice channel without being a server member. Guests cannot see the rest of the server, and are kicked once they leave voice.",
        INVITE_A_GUEST_SELECT_VOICE_CHANNEL: "Select a Voice Channel",
        INVITE_A_GUEST_STEP_1: "1. Pick a Voice Channel",
        INVITE_A_GUEST_STEP_2: "2. Send a guest invite link to a friend",
        GUEST_MEMBERSHIP_EXPLANATION:
          "Guests are automatically kicked when they leave the voice channel. They cannot see other channels in the server.",
        GUEST_NAME_SUFFIX: "(Guest)",
        GUEST_INVITE_EMBED_TITLE_RECEIVER:
          "You received a guest invite to join a voice channel",
        GUEST_INVITE_EMBED_TITLE_SENDER:
          "You sent a guest invite to join a voice channel",
        GUILD_SETTINGS_SERVER_BANNER_BACKGROUND: "Server Banner Background",
        FORM_LABEL_SERVER_DESCRIPTION: "Server Description",
        CHANGE_BANNER: "Change Banner",
        FORM_HELP_SERVER_BANNER:
          "This image will display at the top of your channels list.",
        FORM_HELP_SERVER_DESCRIPTION:
          "Describe your community. This description will be displayed in external embeds of this server’s invite link.",
        SERVER_DESCIPTION_EMPTY: "Tell the world a bit about this server.",
        FORM_LABEL_SERVER_BANNER: "Server Banner Background",
        GUILD_SETTINGS_BANNER_RECOMMEND:
          "The recommended minimum size is 960x540 and recommended aspect ratio is 16:9. [Learn more]({articleURL}).",
        FORM_LABEL_SERVER_LANGUAGE: "Server Primary Language",
        GUILD_SETTINGS_ANIMATED_BANNER_UPSELL:
          "**NEW!** Boost to Level 3 to use an animated server banner.",
        GUILD_SETTINGS_ANIMATED_BANNER_TRY_IT:
          "**NEW!** Set an animated server banner by uploading or selecting a GIF.",
        GUILD_SETTINGS_ANIMATED_BANNER_TRY_IT_MOBILE:
          "**NEW!** Set an animated server banner by uploading a GIF.",
        GUILD_SETTINGS_ANIMATED_BANNER_UPSELL_TRY_IT_CTA: "Try it!",
        GUILD_SETTINGS_ANIMATED_BANNER_UPSELL_MOBILE_BOOST_CTA:
          "Boost This Server",
        SEARCH_COUNTRY: "Search a country",
        ENTER_PHONE_TITLE: "Enter a Phone Number",
        ENTER_PHONE_DESCRIPTION:
          "You will receive a text message with a verification code.",
        ENTER_PHONE_DESCRIPTION_NOTE:
          "Your phone number can be used to verify **one Discord account** at a time and is only used for verification and login.",
        VERIFICATION_PHONE_TITLE: "Verify Your Number",
        VERIFICATION_PHONE_DESCRIPTION:
          "Enter the 6 digit code we sent to your phone.",
        RESEND_CODE: "Resend Code",
        COUNTRY_CODE: "Country Code",
        COUNTRY_CODES: "Country Codes",
        COUNTRY_NO_RESULTS: "No countries found.",
        EMAIL: "Email",
        YOUR_EMAIL: "Your Email",
        USE_EMAIL: "Use Email",
        PHONE: "Phone",
        USE_PHONE: "Use Phone",
        VERIFY_BY: "Verify by",
        VERIFY_BY_EMAIL: "Verify by Email",
        VERIFY_BY_EMAIL_FORMATTED: "Verify by\n**Email**",
        ENTER_EMAIL_BODY:
          "In order to verify your email address, you must first enter an email address.",
        VERIFY_EMAIL_BODY:
          "Please check your email and follow the instructions to verify your account.  If you did not receive an email or if it expired, you can resend one.",
        VERIFY_EMAIL_BODY_RESENT:
          "\n  We have sent you a new verification email to **!!{email}!!**, please check both your inbox and spam folder.\n  ",
        VERIFY_EMAIL: "Verify Email",
        VERIFY_ACCOUNT: "Verify Account",
        VERIFICATION_TITLE: "Verification Required",
        VERIFICATION_BODY:
          "We've detected something out of the ordinary going on.\nTo continue using Discord, **we will need you to verify your account.**",
        VERIFICATION_BODY_ALT: "Now, let's make sure you're human...",
        VERIFICATION_BODY_WITH_HELP_LINK:
          "We've detected something out of the ordinary going on, and we want to keep you and the community safe. To continue using Discord, **we will need you to verify your account.** [Learn more.]({helpCenterURL})",
        VERIFICATION_FOOTER: "Think you're seeing this by mistake?",
        VERIFICATION_FOOTER_SUPPORT: "[Support]({supportURL})",
        VERIFICATION_FOOTER_LOGOUT: "[Log Out](logoutOnClick)",
        VERIFY_BY_PHONE_FORMATTED: "Verify by\n**Phone**",
        START_VERIFICATION_BUTTON: "Start Verification",
        START_PHONE_VERIFICATION_BUTTON: "Verify by Phone",
        START_PHONE_REVERIFICATION_BUTTON: "Re-verify by Phone",
        START_EMAIL_REVERIFICATION_BUTTON: "Re-verify by Email",
        PHONE_THEN_EMAIL_INTERSTITIAL_TITLE: "Phone verified!",
        PHONE_THEN_EMAIL_INTERSTITIAL_BODY:
          "Great! Next, we'll verify your email.",
        PHONE_THEN_EMAIL_INTERSTITIAL_CONFIRM: "Continue",
        RESEND_EMAIL: "Resend my verification email!",
        CHANGE_EMAIL: "Click here to change your email",
        CHANGE_EMAIL_SHORT: "Change Email",
        ADD_EMAIL: "Add an Email",
        ADD_EMAIL_SHORT: "Add Email",
        ADD_EMAIL_DESCRIPTION:
          "Some Discord features require your account to have a verified email.",
        ADD_EMAIL_BANNER_TITLE: "Add an email to your account",
        VERIFY_YOUR_EMAIL: "Verify your email",
        RESEND_EMAIL_SHORT: "Resend Email",
        ENTER_CODE: "Enter your confirmation code",
        VERIFY_PHONE_FOR_SUPPORT:
          "Please enter the 6 digit code sent to you and reenter your phone number.",
        BOUNCED_EMAIL_DETECTED_NOTICE:
          "We can't reach your email which could impact access to your account.",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_TITLE:
          "Pick the plan that works best for you",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_HEADER:
          "Pricing and Features",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_ROW_LABEL_PRICE:
          "Price",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_ROW_LABEL_EMOJI:
          "Custom emoji anywhere and make them animated",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_ROW_LABEL_STICKER:
          "Custom stickers anywhere",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_ROW_LABEL_SUPER_REACTIONS:
          "Super Reactions",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_SUPER_REACTIONS:
          "{weeklyReactionsNumber}/week",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_SUPER_REACTIONS_DAILY:
          "{dailyReactionsNumber}/day",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_ROW_LABEL_UPLOAD:
          "Bigger file sharing",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_ROW_LABEL_STREAMING:
          "HD streaming",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_STREAMING_DETAILS:
          "Up to 4K and 60fps",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_ROW_LABEL_BOOSTS:
          "{numBoosts} Boosts + {percentageOff} off extra Boosts",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_ROW_LABEL_PROFILE_THEMES:
          "Animated avatar, banner, and profile theme",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_ROW_LABEL_SERVER_PROFILE:
          "Custom server profiles",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_ROW_LABEL_SHOP_DISCOUNTS_GENERIC:
          "Shop member pricing, and exclusive items",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_ROW_LABEL_CLIENT_THEME:
          "Colors for your Discord theme",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_ROW_LABEL_BADGE:
          "Nitro badge on your profile",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_ROW_LABEL_VIDEO_BACKGROUND:
          "Custom video backgrounds",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_ROW_LABEL_SERVER_LIMIT:
          "Join up to 200 servers",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_ROW_LABEL_MESSAGE_LENGTH:
          "Longer messages up to {maxChars} characters",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_ROW_LABEL_CLYDE:
          "More @Clyde messages",
        PREMIUM_TIER_0_DESKTOP_MARKETING_COMPARISON_TABLE_PLAN_ACTIVATED_PILL:
          "activated",
        PREMIUM_COMPARISON_TABLE_WHAT_YOU_HAVE_GOT_TITLE: "What You’ve Got",
        DURATION_SECONDS:
          "{seconds, plural, =1 {1 second} other {{seconds} seconds}}",
        DURATION_MINUTES:
          "{minutes, plural, =1 {1 minute} other {{minutes} minutes}}",
        DURATION_HOURS: "{hours, plural, =1 {1 hour} other {{hours} hours}}",
        DURATION_DAYS: "{days, plural, =1 {1 day} other {{days} days}}",
        DURATION_MINS: "{mins, plural, =1 {1 min} other {{mins} mins}}",
        DURATION_SECS: "{secs, plural, =1 {1 sec} other {{secs} secs}}",
        DURATION_WEEKS: "{weeks, plural, =1 {1 week} other {{weeks} weeks}}",
        DURATION_MONTHS:
          "{months, plural, =1 {1 month} other {{months} months}}",
        DURATION_YEARS: "{years, plural, =1 {1 year} other {{years} years}}",
        DURATION_SECONDS_SHORT: "{seconds, plural, =1 {1s} other {{seconds}s}}",
        DURATION_MINUTES_SHORT: "{minutes, plural, =1 {1m} other {{minutes}m}}",
        DURATION_HOURS_SHORT: "{hours, plural, =1 {1h} other {{hours}h}}",
        DURATION_DAYS_SHORT: "{days, plural, =1 {1d} other {{days}d}}",
        DURATION_MONTHS_SHORT: "{months, plural, =1 {1mo} other {{months}mo}}",
        DURATION_YEARS_SHORT: "{years, plural, =1 {1y} other {{years}y}}",
        DURATION_SECONDS_CAPITALIZE:
          "{seconds, plural, =1 {1 Second} other {{seconds} Seconds}}",
        DURATION_MINUTES_CAPITALIZE:
          "{minutes, plural, =1 {1 Minute} other {{minutes} Minutes}}",
        DURATION_HOURS_CAPITALIZE:
          "{hours, plural, =1 {1 Hour} other {{hours} Hours}}",
        DURATION_DAYS_CAPITALIZE:
          "{days, plural, =1 {1 Day} other {{days} Days}}",
        DURATION_WEEKS_CAPITALIZE:
          "{weeks, plural, =1 {1 Week} other {{weeks} Weeks}}",
        DURATION_MONTHS_CAPITALIZE:
          "{months, plural, =1 {1 Month} other {{months} Months}}",
        DURATION_YEARS_CAPITALIZE:
          "{years, plural, =1 {1 Year} other {{years} Years}}",
        DURATION_SECONDS_AGO:
          "{seconds, number} {seconds, plural, =1 {second} other {seconds}} ago",
        DURATION_MINUTES_AGO:
          "{minutes, number} {minutes, plural, =1 {minute} other {minutes}} ago",
        DURATION_HOURS_AGO:
          "{hours, number} {hours, plural, =1 {hour} other {hours}} ago",
        DURATION_DAYS_AGO:
          "{days, number} {days, plural, =1 {day} other {days}} ago",
        DURATION_MONTHS_AGO:
          "{months, number} {months, plural, =1 {month} other {months}} ago",
        DURATION_YEARS_AGO:
          "{years, number} {years, plural, =1 {year} other {years}} ago",
        REPORT_MODAL_REPORT_MESSAGE: "Report a message",
        REPORT_MODAL_MESSAGE_SELECTED: "Message Selected",
        REPORT_MODAL_TYPE_TITLE: "What can we help you with?",
        REPORT_MODAL_SELECT_ONE: "Select one",
        REPORT_MODAL_SUBMIT: "Submit",
        REPORT_MODAL_SUBJECT: "Subject",
        REPORT_MODAL_DESCRIPTION: "Description",
        REPORT_MODAL_ERROR:
          "There was an error submitting your report. Please try again or click [here]({tnsReportUrl}) to submit online.",
        REPORT_MODAL_SUBMITTED: "Report Submitted",
        REPORT_USER_MODAL_SUBMITTED: "User Reported",
        REPORT_OTHER_USER_SUBMITTED: "Thank you for notifying us.",
        REPORT_MODAL_SUBMITTED_EMAIL_CONFIRMATION:
          "Thank you for notifying us. You’ll receive an email confirmation shortly.",
        REPORT_MODAL_DESCRIPTION_MIN_MAX:
          "{min, number} character minimum, {max} character maximum",
        REPORT_MODAL_DESCRIPTION_MAX_EXCEEDED:
          "You are over the maximum character limit.",
        REPORT_MODAL_SHOULD_DELETE: "Do you want to delete this message?",
        REPORT_MODAL_SHOULD_BLOCK: "Do you want to block this user?",
        REPORT_MODAL_BLOCK_USER: "Block user",
        REPORT_MODAL_REPORT_STAGE_MENU_ITEM: "Report Stage",
        REPORT_MODAL_REPORT_EVENT_MENU_ITEM: "Report Event",
        REPORT_MODAL_SERVER_PREVIEW_HEADER: "Selected Server",
        REPORT_MODAL_TEXT_LINE_START_TEXTING: "Start Texting",
        MOBILE_REPORTS_BREADCRUMBS_TITLE: "Report Category",
        MOBILE_REPORTS_MESSAGE_PREVIEW_TITLE: "Selected Message",
        MOBILE_REPORTS_STAGE_CHANNEL_PREVIEW_TITLE: "Selected Stage",
        MOBILE_REPORTS_EVENT_PREVIEW_TITLE: "Selected Event",
        MOBILE_REPORTS_SUBMIT_REPORT: "Submit Report",
        MOBILE_REPORTS_SUBMIT_INFO_TEXT:
          "By submitting this report you confirm that it is truthful and made in good faith. Please follow our [Community Guidelines](https://discord.com/guidelines) and do not submit false or duplicate reports.",
        MOBILE_REPORTS_BLOCK_ELEMENT_HEADER: "More you can do",
        MOBILE_REPORTS_BLOCK_ELEMENT_DESCRIPTION:
          "This is who posted the message you reported. Block them to stop seeing any of their messages.",
        MOBILE_REPORTS_DELETE_MESSAGE_ELEMENT_DESCRIPTION:
          "Delete the message to prevent others from seeing this message.",
        MOBILE_REPORTS_LEAVE_ELEMENT_DESCRIPTION: "Leave the server",
        MOBILE_REPORTS_LEFT_SERVER: "Left Server",
        MOBILE_REPORTS_SUBMIT_FAILED:
          "There was an error trying to submit this report. Please try again!",
        IAR_FEEDBACK_TITLE: "How'd your reporting experience go?",
        IAR_FEEDBACK_PROMPT: "Tell us about your reporting experience.",
        IAR_FEEDBACK_PROBLEM_COULD_NOT_FIND:
          "I couldn't find what I was looking for",
        IAR_FEEDBACK_PROBLEM_CONFUSING_LANGUAGE:
          "I found the language in the menu confusing",
        FORM_LABEL_PUSH_AFK_TIMEOUT: "Push Notification Inactive Timeout",
        FORM_DESCRIPTION_PUSH_AFK_TIMEOUT:
          "\nDiscord avoids sending push notifications to your mobile device when you are at your computer.\nUse this setting to control how long you need to be inactive on desktop for before you receive push notifications.\n",
        USER_SETTINGS_NOTIFICATIONS_SHOW_BADGE_LABEL:
          "Enable Unread Message Badge",
        USER_SETTINGS_NOTIFICATIONS_SHOW_BADGE_BODY:
          "Shows a red badge on the app icon when you have unread messages.",
        USER_SETTING_NOTIFICATIONS_ENABLE_BURST_REACTION_NOTIFICATIONS_LABEL:
          "Enable Super Reaction Notifications",
        USER_SETTINGS_NOTIFICATIONS_SHOW_FLASH_LABEL: "Enable Taskbar Flashing",
        USER_SETTINGS_NOTIFICATIONS_SHOW_FLASH_BODY:
          "Flashes the app in your taskbar when you have new notifications.",
        USER_SETTINGS_NOTIFICATIONS_PREVIEW_SOUND: "Preview sound",
        USER_SETTINGS_NOTIFICATIONS_NOTIFY_MESSAGES_IN_SELECTED_CHANNEL_LABEL:
          "Enable same-channel message notifications",
        USER_SETTINGS_NOTIFICATIONS_NOTIFY_MESSAGES_IN_SELECTED_CHANNEL_NOTE:
          "Play a unique sound when there's a new message in the channel you're currently reading.",
        AUTH_SESSIONS: "Devices",
        AUTH_SESSIONS_DESCRIPTION:
          "Here are all the devices that are currently logged in with your Discord account. You can log out of each one individually or all other devices.\n \nIf you see an entry you don't recognize, log out of that device and change your Discord account password immediately.",
        AUTH_SESSIONS_CURRENT: "Current Device",
        AUTH_SESSIONS_OTHERS: "Other Devices",
        AUTH_SESSIONS_LINK_NEW_DEVICE: "Link New Device",
        AUTH_SESSIONS_OTHERS_LOG_OUT_TITLE: "Log out of all known devices",
        AUTH_SESSIONS_OTHERS_LOG_OUT_SELECTED_TITLE:
          "Log out of selected devices",
        AUTH_SESSIONS_OTHERS_LOG_OUT_DESCRIPTION:
          "You'll have to log back in on all logged out devices.",
        AUTH_SESSIONS_OTHERS_LOG_OUT_ACTION: "Log Out All Known Devices",
        AUTH_SESSIONS_OTHERS_LOG_OUT_SELECTED_ACTION:
          "Log Out {count, plural, =1 {# Device} other {# Devices}}",
        AUTH_SESSIONS_ACTIVE_RECENTLY: "less than an hour ago",
        AUTH_SESSIONS_SESSION_LOG_OUT: "Log Out of Device",
        AUTH_SESSIONS_OS_UNKNOWN: "Unknown",
        AUTH_SESSIONS_UNKNOWN_LEGACY:
          "Some older devices may not be shown here",
        AUTH_SESSIONS_UNKNOWN_LEGACY_LOG_OUT:
          "To log them out, please [change your password](onClick)",
        MERCHANDISE: "Merch",
        CHANNEL_TYPE: "Channel Type",
        TEXT_CHANNEL: "Text Channel",
        FORUM_CHANNEL: "Forum Channel",
        FORUM_POST: "Forum Post",
        STORE_CHANNEL: "Store Channel",
        NEWS_CHANNEL: "Announcement Channel",
        DM: "Direct Message",
        DM_ABBREVIATED: "DM",
        GROUP_DM: "Group DM",
        STAGE_CHANNEL: "Stage Channel",
        STAGE_CHANNEL_LOCKED: "Stage Channel (Locked)",
        VOICE_CHAT_TEXT_CHANNEL: "Voice Chat Text Channel",
        CATEGORY: "Category",
        TEXT_CHANNEL_DESC: "Post images, GIFs, stickers, opinions, and puns",
        VOICE_CHANNEL_DESC: "Connect to live audio for group conversations",
        NEWS_CHANNEL_DESC:
          "A text channel that can post to servers following it",
        STAGE_CHANNEL_DESC:
          "A voice channel for hosting events with an audience",
        WHATS_NEW: "What's New",
        WHATS_NEW_DATE: "{date, date, long}",
        EDIT_CATEGORY: "Edit Category",
        CATEGORY_NAME: "Category Name",
        HIDE_MUTED_CHANNELS: "Hide Muted Channels",
        COLLAPSE_CATEGORY: "Collapse Category",
        COLLAPSE_ALL_CATEGORIES: "Collapse All Categories",
        CHANNEL_OR_CATEGORY: "Channel or Category",
        CREATE_CATEGORY: "Create Category",
        MUTE_CATEGORY: "Mute Category",
        UNMUTE_CATEGORY: "Unmute Category",
        NO_CATEGORY: "No Category",
        IN_CATEGORY: "in !!{categoryName}!!",
        NUM_CHANNELS:
          "{num, plural, =1 {{num} channel} other {{num} channels}}",
        ADD_CHANNEL_TO_OVERRIDE:
          "Add a channel to override its default notification settings",
        ADD_CHANNEL_OR_CATEGORY: "Add a Channel or Category",
        ADD_OVERRIDE: "Add Override",
        NEW_OVERRIDE: "New Override",
        SELECT_CHANNEL_OR_CATEGORY: "Select a channel or category…",
        NOTIFICATION_OVERRIDES: "Notification Overrides",
        CHANNEL_NOTIFICATION_OVERRIDES: "Channel Notification Overrides",
        PRIVATE_CHANNEL: "Private Channel",
        CATEGORY_SETTINGS: "Category Settings",
        PRIVATE_CATEGORY: "Private Category",
        PRIVATE_CHANNEL_NOTE:
          "By making a channel private, only selected roles will have access to read or connect to this channel.",
        PRIVATE_CATEGORY_NOTE:
          "By making a category private, all locked channels within it will inherit permissions.",
        CHAT_ATTACH_UPLOAD_A_FILE: "Upload a File",
        CHAT_ATTACH_UPLOAD_OR_INVITE: "Upload a file or send invites",
        CHAT_ATTACH_INVITE_TO_PLAY_GAME:
          "Invite !!{channel}!! to Play !!{game}!!",
        CHAT_ATTACH_INVITE_TO_LISTEN:
          "Invite !!{channel}!! to Listen to !!{name}!!",
        CHAT_ATTACH_INVITE_TO_WATCH: "Invite !!{channel}!! to Watch !!{name}!!",
        CHAT_ATTACH_USE_SLASH_COMMAND: "Use Apps",
        CHAT_ATTACH_UPLOAD_TEXT_AS_FILE: "Upload your message as a file",
        CHANNEL_LOCKED_TO_CATEGORY:
          "Permissions synced with category: **{categoryName}**",
        PERMISSIONS_UNSYNCED:
          "Permissions not synced with category: **{categoryName}**",
        CONFIRM_CHANNEL_DRAG_TITLE: "Sync permissions?",
        SYNC_PERMISSIONS: "Sync Permissions",
        SYNC_NOW: "Sync Now",
        SYNC_PERMISSIONS_EXPLANATION:
          "Would you like to sync **{channelName}** permissions with **{categoryName}**?",
        KEEP_PERMISSIONS: "Keep Current Permissions",
        NEVERMIND: "Never Mind",
        GIF: "GIF",
        NITRO_HOME_ENJOY_UPDATED_DISCORD: "Enjoy An Upgraded Discord",
        NITRO_HOME_SHOW_UP_HOW_YOU_WANT: "Show Up The Way You Want",
        NITRO_HOME_ALL_YOUR_NITRO_PERKS: "All Your Nitro Perks",
        NITRO_HOME_CARD_INCLUDED_WITH_BASIC_AND_NITRO:
          "Included with Basic and Nitro.",
        NITRO_HOME_CARD_INCLUDED_WITH_ONLY_NITRO: "Only with Nitro.",
        NITRO_HOME_CARD_CHOOSE_CUSTOM_EMOJI:
          "Choose from all of your custom emojis in any conversation.",
        NITRO_HOME_CARD_CUSTOM_SOUNDS_EVERYWHERE: "Custom Sounds Everywhere",
        NITRO_HOME_CARD_USE_CUSTOM_SOUNDS:
          "Use custom soundboard sounds across voice channels.",
        NITRO_HOME_CARD_UPLOAD_POWER: "Feel the upload power.",
        NITRO_HOME_STREAM_UP_TO_4K: "Up to 4K and 60FPS.",
        NITRO_HOME_UPLOAD_ALL_YOU_WANT:
          "Upload what you want with increased 500MB upload size.",
        NITRO_HOME_SUPER_REACTIONS: "Super Reactions",
        NITRO_HOME_SUPER_REACTIONS_DESCRIPTION:
          "Hype up the chat with action-packed, animated reactions.",
        NITRO_HOME_ENTRANCE_SOUNDS_BENEFIT:
          "Make a splash like only Nitro subscribers can in your favorite voice channels.",
        NITRO_HOME_SUBSCRIBER_BADGE: "Subscriber Badge",
        NITRO_HOME_GET_THIS_SUBSCRIBER_BADGE:
          "Get this cool badge for being a Nitro subscriber.",
        NITRO_HOME_SUBSCRIBER_BADGE_FOR_THE_COLLECTORS:
          "For the collectors. Grab this exclusive Nitro-only badge.",
        MARKETING_PAGE_CAROUSEL_TITLE: "Make Discord Yours",
        MARKETING_PAGE_CHOOSE_PLAN_TITLE: "Choose Your Nitro",
        MARKETING_PAGE_CHOOSE_PLAN_SUBTITLE:
          "Upgrade to get all the customization thangs.",
        MARKETING_PAGE_CHOOSE_PLAN_TIER_2_PERK_LIST_EMOJIS:
          "Use all your emoji and stickers everywhere",
        MARKETING_PAGE_CHOOSE_PLAN_TIER_2_PERK_LIST_PROFILES:
          "Multiple profiles! Use a different avatar, banner, and bio in each of your servers",
        MARKETING_PAGE_CHOOSE_PLAN_TIER_2_PERK_LIST_UPLOADS:
          "Upload media up to 100MB",
        MARKETING_PAGE_CHOOSE_PLAN_TIER_2_PERK_LIST_UPLOADS_INCREASE:
          "Upload media up to {premiumMaxSize}",
        MARKETING_PAGE_CHOOSE_PLAN_TIER_2_PERK_LIST_BOOSTS:
          "Get 2 Boosts to use on your favorite server and 30% off Boosts",
        MARKETING_PAGE_CHOOSE_PLAN_TIER_2_PERK_LIST_BADGE:
          "Special Nitro badge on your profile and custom tag",
        MARKETING_PAGE_CHOOSE_PLAN_TIER_2_PERK_LIST_SERVERS:
          "Join twice as many servers (up to 200)",
        MARKETING_PAGE_CHOOSE_PLAN_TIER_2_PERK_LIST_MESSAGES:
          "Longer messages (up to 4,000 characters)",
        MARKETING_PAGE_CHOOSE_PLAN_TIER_2_PERK_LIST_STREAMING:
          "Best HD streaming quality on desktop (up to 4k 60fps)",
        MARKETING_PAGE_CHOOSE_PLAN_TIER_1_PERK_LIST_LESS:
          "What you love about Nitro, just a little less",
        MARKETING_PAGE_CHOOSE_PLAN_TIER_1_PERK_LIST_UPLOADS:
          "Up to 50MB file uploads",
        MARKETING_PAGE_CHOOSE_PLAN_TIER_1_PERK_LIST_STREAMING:
          "1080p and 60fps streaming on desktop",
        MARKETING_PAGE_PERK_CARD_EMOJIS_HEADER: "All Emoji, Everywhere",
        MARKETING_PAGE_PERK_CARD_EMOJIS_SUBHEADER:
          "Use your **favorite custom and animated emoji**, along with custom stickers.",
        MARKETING_PAGE_PERK_CARD_UPLOADS_HEADER: "Bigger Uploads",
        MARKETING_PAGE_PERK_CARD_UPLOADS_SUBHEADER:
          "Share your favorite photos, videos, and more with 100MB upload size.",
        MARKETING_PAGE_PERK_CARD_UPLOADS_SUBHEADER_INCREASE:
          "Share your favorite photos, videos, and more with {premiumMaxSize} upload size.",
        MARKETING_PAGE_PERK_CARD_PROFILE_HEADER: "Express Yourself",
        MARKETING_PAGE_PERK_CARD_PROFILE_SUBHEADER:
          "Style your profile with a different animated avatar, banner, and bio in each server.",
        MARKETING_PAGE_PERK_CARD_BOOSTS_HEADER: "2 Boosts and more!",
        MARKETING_PAGE_PERK_CARD_BOOSTS_SUBHEADER:
          "Get 2 Boosts to support your favorite servers, plus 30% off Boosts purchases.",
        MARKETING_PAGE_CTA_TIER_2: "Get Nitro for {price}",
        MARKETING_PAGE_CTA_TIER_1: "Get Nitro Classic for {price}",
        MARKETING_PAGE_CTA_BUY_NOW: "Buy Now",
        MARKETING_PAGE_CTA_GET_NITRO: "Get Nitro",
        MARKETING_PAGE_CTA_JOIN_NITRO: "Join Nitro",
        MARKETING_PAGE_CTA_UPGRADE_NOW: "Upgrade Now",
        MARKETING_PAGE_CTA_UPGRADE_NITRO: "Upgrade Nitro",
        MARKETING_PAGE_CTA_SWITCH_PLANS: "Switch Plans",
        MARKETING_PAGE_CTA_GET_BASIC: "Get Basic",
        MARKETING_PAGE_CTA_GET_FREE_TRIAL: "Get Free Trial",
        MARKETING_PAGE_CTA_TRY_1_MONTH_FREE: "Try 1 Month Free",
        MARKETING_PAGE_CTA_START_FREE_TRIAL: "Start Free Trial",
        MARKETING_PAGE_HEADLINE_MAKE_DISCORD_YOURS: "Make Discord yours",
        MARKETING_PAGE_HEADLINE_MAKE_DISCORD_YOURS_WITH_NITRO:
          "Make Discord Yours with Nitro",
        MARKETING_PAGE_HEADLINE_UPGRADE_YOUR_DISCORD_WITH_NITRO:
          "Upgrade Your Discord with Nitro",
        MARKETING_PAGE_HEADLINE_JOIN_NITRO_HAVE_FUN_YOUR_WAY:
          "Join Nitro And Have Fun Your Way",
        MARKETING_PAGE_HEADLINE_UPGRADE_YOUR_DISCORD: "Upgrade your Discord",
        SUBSCRIPTION_MANAGEMENT: "Subscription Management",
        PREMIUM_SUBSCRIPTION_LEGAL_DISCLAIMER_IOS:
          "By clicking “Get Nitro” you agree to the Terms of Service and Paid Services Terms. This is a recurring subscription. We'll charge your Apple ID account today and every {interval} until you cancel. You can cancel any time up to 24 hours before your current period ends in the App Store Settings.",
        PREMIUM_SUBSCRIPTION_LEGAL_DISCLAIMER_ANDROID:
          "By clicking “Get Nitro” you agree to the Terms of Service and Paid Services Terms. This is a recurring subscription. We'll charge your Google Play account today and every {interval} until you cancel. You can cancel any time up to 24 hours before your current period ends in the Google Play Store Settings.",
        PREMIUM_SUBSCRIPTION_INTERVAL_MONTH: "month",
        PREMIUM_SUBSCRIPTION_INTERVAL_YEAR: "year",
        ANOTHER_PREMIUM_SUBSCRIPTION_LEGAL_DISCLAIMER_IOS:
          "By clicking \"Purchase\" you agree to the [Terms of Service]({termsURL}) and [Paid Services Terms]({paidURL}). What you're purchasing is a recurring subscription, which means we'll charge your Apple ID account today and continue to charge you every {interval} until you cancel. You can cancel any time up to 24 hours before your current period ends in the App Store Settings.",
        ANOTHER_PREMIUM_SUBSCRIPTION_LEGAL_DISCLAIMER_ANDROID:
          "By clicking \"Purchase\" you agree to the [Terms of Service]({termsURL}) and [Paid Services Terms]({paidURL}). What you're purchasing is a recurring subscription, which means we'll charge your Google Play account today and continue to charge you every {interval} until you cancel. You can cancel any time up to 24 hours before your current period ends in the Google Play Store Settings.",
        GOOGLE_PLAY_PREMIUM_TRIAL_DISCLAIMER:
          "By clicking \"Continue on Google Play\" you're agreeing to Discord's [Paid Services Terms]({paidURL}). Nitro is a recurring subscription. Your payment method will be charged after your trial ends and continue to be charged every {interval} unless you [cancel your subscription]({cancelURL}). You will receive a reminder email before your trial ends. Total doesn't include any additional fees charged by your financial institution.",
        IOS_PREMIUM_TRIAL_DISCLAIMER:
          "By clicking \"Continue on App Store\" you're agreeing to Discord's [Paid Services Terms]({paidURL}). Nitro is a recurring subscription. Your payment method will be charged after your trial ends and continue to be charged every {interval} unless you [cancel your subscription]({cancelURL}). You will receive a reminder email before your trial ends. Total doesn't include any additional fees charged by your financial institution.",
        THIS_IS_WHAT_YOU_HAVE: "This is what you have",
        PREMIUM_CTA_TIER_0: "Get Basic",
        PREMIUM_MOBILE_TRIAL_MARKETING_PAGE_BADGE:
          "Free Trial ({days, plural, =1 {# day left} other {# days left}})",
        PREMIUM_MOBILE_TRIAL_FREE_TRIAL_BADGE: "Free Trial",
        USER_ACTIVITY_HEADER_PLAYING: "Playing a game",
        USER_ACTIVITY_HEADER_LIVE_ON_PLATFORM: "Live on !!{platform}!!",
        USER_ACTIVITY_HEADER_PLAYING_ON_PLATFORM: "Playing on !!{platform}!!",
        USER_ACTIVITY_HEADER_WATCHING: "Watching !!{name}!!",
        USER_ACTIVITY_HEADER_LISTENING: "Listening to !!{name}!!",
        USER_ACTIVITY_HEADER_STREAMING_TO_GUILD: "Streaming to !!{server}!!",
        USER_ACTIVITY_HEADER_STREAMING_TO_DM: "Streaming",
        USER_ACTIVITY_HEADER_COMPETING: "Competing in !!{name}!!",
        USER_ACTIVITY_STATE_SIZE: "({count} of {max})",
        USER_ACTIVITY_TIMESTAMP_END_SIMPLE: "{timeDelta} left",
        USER_ACTIVITY_TIMESTAMP_START_SIMPLE: "{timeDelta} elapsed",
        USER_ACTIVITY_TIMESTAMP_END:
          "{hours, plural, =-1 {} other {{hours}:}}{minutes, plural, =-1 {} other {{minutes}:}}{seconds, plural, =-1 {} other {{seconds}}} left",
        USER_ACTIVITY_TIMESTAMP_START:
          "{hours, plural, =-1 {} other {{hours}:}}{minutes, plural, =-1 {} other {{minutes}:}}{seconds, plural, =-1 {} other {{seconds}}} elapsed",
        USER_ACTIVITY_USER_PLAYING_FOR_MINUTES:
          "for {time, number} {time, plural, =1 {minute} other {minutes}}",
        USER_ACTIVITY_USER_PLAYING_FOR_HOURS:
          "for {time, number} {time, plural, =1 {hour} other {hours}}",
        USER_ACTIVITY_USER_PLAYING_FOR_DAYS:
          "for {time, number} {time, plural, =1 {day} other {days}}",
        USER_ACTIVITY_ACTION_NOTIFY_ME: "Notify Me",
        USER_ACTIVITY_ACTION_ASK_TO_JOIN: "Ask to Join",
        USER_ACTIVITY_ACTION_INVITE_TO_JOIN: "Invite to Join",
        USER_ACTIVITY_ACTION_INVITE_TO_LISTEN_ALONG: "Invite to Listen Along",
        USER_ACTIVITY_ACTION_ASK_TO_JOIN_USER: "Ask to Join !!{name}!!",
        USER_ACTIVITY_ACTION_DOWNLOAD_APP: "Download",
        USER_ACTIVITY_CANNOT_JOIN_SELF: "You can't join yourself",
        USER_ACTIVITY_NOT_DETECTED: "{name} is not detected",
        USER_ACTIVITY_LISTENING: "Listening",
        USER_ACTIVITY_LISTEN_ALONG: "Listen Along",
        USER_ACTIVITY_WATCH_ALONG: "Watch Along",
        USER_ACTIVITY_PLAY_ON_PLATFORM: "Play on {platform}",
        USER_ACTIVITY_CONNECT_PLATFORM: "Connect {platform}",
        USER_ACTIVITY_CANNOT_PLAY_SELF: "You played yourself. Wait, you can't.",
        USER_ACTIVITY_CANNOT_SYNC_SELF:
          "Listen along with someone else, not yourself.",
        USER_ACTIVITY_ALREADY_PLAYING: "You're already playing this.",
        USER_ACTIVITY_ALREADY_SYNCING: "You're already along for this ride.",
        USER_ACTIVITY_INVITE_REQUEST_REQUESTED:
          "**!!{username}!!** wants to join you in **!!{game}!!**.",
        USER_ACTIVITY_JOINING: "Joining",
        USER_ACTIVITY_RESPOND_YEAH: "Yeah",
        USER_ACTIVITY_RESPOND_NOPE: "Nope",
        USER_ACTIVITY_CHAT_INVITE_EDUCATION:
          "**!!{game}!!** supports game invites. [Dismiss](dismissOnClick)",
        USER_ACTIVITY_LISTENING_ARTISTS: "by $[!!{artists}!!](artistsHook)",
        USER_ACTIVITY_LISTENING_ALBUM: "on $[!!{album}!!](albumHook)",
        USER_ACTIVITY_LISTEN_ALONG_DESCRIPTION: "Listen along with !!{name}!!",
        USER_ACTIVITY_USER_JOIN:
          "**!!{username}!!** is joining your game via Discord.",
        USER_ACTIVITY_USER_JOIN_HINT:
          "This may take a moment while their game launches.",
        USER_ACTIVITY_STAGE_STATE_SIZE:
          "{numSpeakers, number} speakers, {numListeners, number} listeners",
        INVITE_EMBED_GAME_INVITE: "Game Invite",
        INVITE_EMBED_LISTENING_INVITE: "Listen Along Invite",
        INVITE_EMBED_ASK_TO_JOIN: "Ask to Join",
        INVITE_EMBED_INVITE_TO_JOIN: "Invite to Join",
        INVITE_EMBED_INVITE_TO_JOIN_GROUP: "Invite to Join Group",
        INVITE_EMBED_INVITE_TO_LISTEN: "Invite to Listen Along on {name}",
        INVITE_EMBED_INVITE_TO_WATCH: "Invite to Watch {name}",
        INVITE_EMBED_NUM_OPEN_SLOTS:
          "{number, number} open {number, plural, =1 {slot} other {slots}}",
        INVITE_EMBED_GAME_HAS_ENDED: "Game has ended",
        INVITE_EMBED_LISTEN_HAS_ENDED: "The listening party is over!",
        INVITE_EMBED_WATCH_HAS_ENDED: "The watching party is over!",
        INVITE_EMBED_FULL_GROUP: "Full group",
        INVITE_EMBED_JOIN_VIA_DESKTOP_APP: "Join via Desktop App",
        INVITE_EMBED_JOIN_VIA_IOS: "Join via iOS",
        INVITE_EMBED_JOIN_VIA_ANDROID: "Join via Android",
        INVITE_EMBED_JOIN_VIA_XBOX: "Join via Xbox",
        INVITE_EMBED_IN_GROUP: "Joined group",
        INVITE_EMBED_SEND_INVITE: "Send Invite",
        INVITE_EMBED_JOINED: "Joined",
        GIFT_EMBED_TITLE: "A wild gift appears!",
        GIFT_EMBED_TITLE_SUBSCRIPTION: "You've been gifted a subscription!",
        GIFT_EMBED_TITLE_SELF: "You sent a gift!",
        GIFT_EMBED_TITLE_SUBSCRIPTION_SELF: "You gifted a subscription!",
        GIFT_EMBED_BODY_DEFAULT:
          "**!!{username}!!** has gifted you a game. Accept the gift to add it to your library.",
        GIFT_EMBED_BODY_NO_USER_DEFAULT:
          "You've been gifted a game. Accept the gift to add it to your library.",
        GIFT_EMBED_BODY_SUBSCRIPTION_DEFAULT_MONTHS:
          "**!!{username}!!** has gifted you {skuName} for **{intervalCount, plural, =1 {# month} other {# months}}**!",
        GIFT_EMBED_BODY_SUBSCRIPTION_NO_USER_DEFAULT_MONTHS:
          "You've been gifted {skuName} for **{intervalCount, plural, =1 {# month} other {# months}}**!",
        GIFT_EMBED_BODY_SUBSCRIPTION_DEFAULT_YEARS:
          "**!!{username}!!** has gifted you {skuName} for **{intervalCount, plural, =1 {# year} other {# years}}**!",
        GIFT_EMBED_BODY_SUBSCRIPTION_NO_USER_DEFAULT_YEARS:
          "You've been gifted {skuName} for **{intervalCount, plural, =1 {# year} other {# years}}**!",
        GIFT_EMBED_BODY_SELF:
          "If you want to claim this gift for yourself, go right ahead. We won't judge :)",
        GIFT_EMBED_BODY_SELF_NOT_REDEEMABLE:
          "Thanks for giving the gift of !!{skuName}!!.",
        GIFT_EMBED_BODY_SUBSCRIPTION_ALREADY_ACTIVE:
          "This gift cannot be redeemed with an existing subscription.",
        GIFT_EMBED_BODY_CLAIMED_SELF:
          "It looks like you already claimed this gift. {skuName} is in your [Library](onViewInLibrary).",
        GIFT_EMBED_BODY_CLAIMED_SELF_MOBILE:
          "Looks like you already claimed this gift.",
        GIFT_EMBED_BODY_CLAIMED_SELF_SUBSCRIPTION:
          "Looks like you already claimed this gift.",
        GIFT_EMBED_BODY_CLAIMED_OTHER:
          "Hmm, it seems someone already claimed this gift.",
        GIFT_EMBED_BODY_OWNED:
          "Oops! You can't claim {skuName} because you already own it. [View in Library](onViewInLibrary)",
        GIFT_EMBED_BODY_SUBSCRIPTION_MISMATCH:
          "Oops! You're unable to accept this gift because you're already subscribed to {planName}.",
        GIFT_EMBED_BODY_REQUIRES_VERIFICATION:
          "[Verify your account](onClick) before claiming this gift.",
        GIFT_EMBED_BODY_REQUIRES_VERIFICATION_EMAIL:
          "[Verify your email address](onClick) before claiming this gift.",
        GIFT_EMBED_BODY_GIVEAWAY:
          "**!!{username}!!** is giving away {totalCopies, number} copies of {skuName}. Claim your gift before they're gone!",
        GIFT_EMBED_BODY_NO_USER_GIVEAWAY:
          "{totalCopies, number} copies of {skuName} are up for grabs! Claim your gift before they're gone!",
        GIFT_EMBED_EXPIRATION:
          "Expires in {hours, plural, =1 {# hour} other {# hours}}",
        GIFT_EMBED_BODY_SUBSCRIPTION_GIVEAWAY:
          "**!!{username}!!** is giving away {maxUses, number} subscriptions to {skuName}. Claim your gift before they're gone! Wahoooo!!!",
        GIFT_EMBED_BODY_SUBSCRIPTION_NO_USER_GIVEAWAY:
          "{maxUses, number} copies of {skuName} are up for grabs! Claim your gift before they're gone! Wahoooo!!!",
        GIFT_EMBED_COPIES_LEFT:
          "{remaining, number} of {total, number} copies left",
        GIFT_EMBED_SUBSCRIPTIONS_LEFT:
          "{remaining, number} of {total, number} subscriptions left",
        GIFT_EMBED_BUTTON_ACCEPT: "Accept",
        GIFT_EMBED_BUTTON_CLAIMED: "Claimed",
        GIFT_EMBED_BUTTON_CLAIMING: "Claiming",
        GIFT_EMBED_BUTTON_CLAIM: "Claim",
        GIFT_EMBED_BUTTON_OWNED: "Owned",
        GIFT_EMBED_BUTTON_OPEN: "Open Gift",
        GIFT_EMBED_HEADER_OWNER_INVALID: "You sent a gift, but...",
        GIFT_EMBED_HEADER_RECEIVER_INVALID: "You received a gift, but...",
        GIFT_EMBED_INFO_OWNER_INVALID: "Try sending another gift link!",
        GIFT_EMBED_INFO_RECEIVER_INVALID:
          "If you missed it, try asking for another link!",
        GIFT_EMBED_INVALID: "Gift Link Invalid",
        GIFT_EMBED_INVALID_TITLE_OTHER: "You received a gift, but...",
        GIFT_EMBED_INVALID_TITLE_SELF: "You sent a gift, but...",
        GIFT_EMBED_INVALID_TAGLINE_SELF:
          "The gift link has either expired or has been revoked. You can still create a new link to send again.",
        GIFT_EMBED_INVALID_TAGLINE_OTHER:
          "The gift link has either expired or has been revoked. The sender can still create a new link to send again.",
        GIFT_EMBED_TITLE_PROMOTION: "You got a promotion code!",
        GIFT_EMBED_TAGLINE_PROMOTION:
          "This gift link is a promotion code. Click the button below to claim it.",
        GIFT_EMBED_RESOLVING: "Resolving gift",
        GIFT_EMBED_BODY_REQUIRES_VERIFICATION_MOBILE:
          "Verify your account before claiming this gift.",
        GIFT_EMBED_BODY_REQUIRES_VERIFICATION_EMAIL_MOBILE:
          "Verify your email address before claiming this gift.",
        GIFT_INVENTORY: "Gift Inventory",
        GIFT_INVENTORY_EXPIRES_IN:
          "Link expires in {hours, plural, =1 {# hour} other {# hours}}",
        GIFT_INVENTORY_EXPIRES_IN_MOBILE:
          "Link expires in {hours, plural, =1 {# hour} other {# hours}} - $[Revoke](revokeHook)",
        GIFT_INVENTORY_NO_GIFTS: "There are no gifts.",
        GIFT_INVENTORY_NO_GIFTS_SUBTEXT:
          "Feeling generous? Give someone the gift of [Nitro](onClick) and make their day!",
        GIFT_INVENTORY_NO_GIFTS_SUBTEXT_MOBILE:
          "Feeling generous? Give someone the gift of Nitro and make their day!",
        GIFT_INVENTORY_COPIES: "{copies, plural, =1 {# copy} other {# copies}}",
        GIFT_INVENTORY_REDEEM_CODES: "Redeem Codes",
        GIFT_INVENTORY_GENERATE_LINK: "Generate Link",
        GIFT_INVENTORY_GENERATE_LINK_IOS: "Generate",
        GIFT_INVENTORY_HIDDEN: "Gift code hidden. Use copy button.",
        GIFT_INVENTORY_GENERATE_HELP: "You have more gifts! Make another link?",
        GIFT_INVENTORY_SUBSCRIPTION_MONTHS:
          "{skuName} ({intervalCount, plural, =1 {# month} other {# months}})",
        GIFT_INVENTORY_SUBSCRIPTION_YEARS:
          "{skuName} ({intervalCount, plural, =1 {# year} other {# years}})",
        GIFT_INVENTORY_SELECT_NITRO_GIFT: "Select a Nitro Gift",
        GIFT_INVENTORY_SELECT_NITRO_CLASSIC_GIFT: "Select a Nitro Classic Gift",
        GIFT_INVENTORY_YOUR_GIFTS: "Your Gifts",
        GIFT_INVENTORY_CLAIM_GIFT: "Claim",
        GIFT_INVENTORY_GIFTS_YOU_PURCHASED: "Gifts You Purchased",
        GIFT_PURCHASE_GOOGLE_PLAY_NOTICE:
          "Currently, gifts cannot contribute towards subscriptions managed by the Google Play Store.",
        GIFT_PURCHASE_GOOGLE_PLAY_NOTICE_EXTENDED:
          "Currently, gifts cannot contribute towards subscriptions managed by the Google Play Store.\n\nRedeemed gifts can still contribute towards subscriptions purchased on our desktop or browser apps.",
        GIFT_CONFIRMATION_BODY_CONFIRM:
          "Once you accept, {skuName} will be yours FOR-EV-ERRRRRR!",
        GIFT_CONFIRMATION_BODY_CONFIRM_NITRO:
          "Once you accept you'll have credit for **{skuName}** for **{timeFrame}** *",
        GIFT_CONFIRMATION_BODY_CONFIRM_NITRO_DISCLAIMER:
          "*If you have a subscription through Google Play, you cannot apply this credit to your subscription at this time. [Learn more.]({helpdeskArticle})",
        GIFT_CONFIRMATION_BODY_SUBSCRIPTION_MONTHLY_CONFIRM:
          "Once you accept you will have {skuName} for **{intervalCount, plural, =1 {# month} other {# months}}**.",
        GIFT_CONFIRMATION_BODY_SUBSCRIPTION_YEARLY_CONFIRM:
          "Once you accept you will have {skuName} for **{intervalCount, plural, =1 {# year} other {# years}}**.",
        GIFT_CONFIRMATION_BUTTON_CONFIRM: "Heck Yeah! Add to Library",
        GIFT_CONFIRMATION_BUTTON_CONFIRM_SUBSCRIPTION: "I accept",
        GIFT_CONFIRMATION_BUTTON_CONFIRM_MOBILE: "Gimme",
        GIFT_CONFIRMATION_BUTTON_SUCCESS_MOBILE: "Noice!",
        GIFT_CONFIRMATION_BUTTON_GO_TO_LIBRARY: "Go to my Library",
        GIFT_CONFIRMATION_BUTTON_SUBSCRIPTION_SUCCESS: "Sweet!",
        GIFT_CONFIRMATION_BUTTON_FAIL: "Oh ok.",
        GIFT_CONFIRMATION_HEADER_CONFIRM: "Accept this gift?",
        GIFT_CONFIRMATION_HEADER_CONFIRM_NITRO: "You've been gifted {skuName}",
        GIFT_CONFIRMATION_HEADER_SUCCESS: "Noice!",
        GIFT_CONFIRMATION_HEADER_SUCCESS_NITRO: "You got {skuName}!",
        GIFT_CONFIRMATION_HEADER_FAIL: "*Sad Trombone*",
        GIFT_CONFIRMATION_BODY_CLAIMED:
          "You couldn't claim this gift because someone else beat you to the punch. That's jazz baby!",
        GIFT_CONFIRMATION_BODY_OWNED:
          "You couldn't claim this gift because you already have it. You can find it in [your library](onGoToLibrary).",
        GIFT_ERROR_OWNED:
          "You couldn't claim this gift because you already have it.",
        GIFT_CONFIRMATION_BODY_UNKNOWN_ERROR:
          "Something funky happened and we failed to secure the bag...try again?",
        GIFT_CONFIRMATION_BODY_SELF_GIFT_NO_PAYMENT:
          "You can't accept this gift. You need to give this gift to someone else.",
        GIFT_CONFIRMATION_BODY_ERROR_NITRO_UPGRADE_DOWNGRADE:
          "Oops! You're unable to accept this gift because of your existing subscription.",
        GIFT_CONFIRMATION_BODY_ERROR_SUBSCRIPTION_MANAGED:
          "Unfortunately, since you have an active subscription through an external provider, you cannot accept Nitro gifts.",
        GIFT_CONFIRMATION_BODY_ERROR_INVOICE_OPEN:
          "Unfortunately, you're unable to accept this gift because your subscription has an open invoice.",
        GIFT_CONFIRMATION_BODY_INVALID:
          "Bummer! You couldn't claim this gift because it has been revoked.",
        GIFT_CONFIRMATION_BODY_SUCCESS:
          "{skuName} is now available in your library. Go forth and play!",
        GIFT_CONFIRMATION_BODY_SUCCESS_GENERIC: "Go forth and enjoy your gift!",
        GIFT_CONFIRMATION_BODY_SUCCESS_NITRO_CLASSIC_MOBILE:
          "Thanks to another generous human, you now have access to enhanced chat perks for {timeFrame}.",
        GIFT_CONFIRMATION_BODY_SUCCESS_NITRO_MOBILE:
          "Thanks to another generous human, you now have access to enhanced chat perks and Server Boosts for {timeframe}.",
        GIFT_CONFIRMATION_BODY_SUCCESS_PREMIUM_TIER_1_MONTHLY:
          "Thanks to another generous human, you now have access to enhanced chat perks for {intervalCount, plural, =1 {# month} other {# months}}.",
        GIFT_CONFIRMATION_BODY_SUCCESS_PREMIUM_TIER_1_YEARLY:
          "Thanks to another generous human, you now have access to enhanced chat perks for {intervalCount, plural, =1 {# year} other {# years}}.",
        GIFT_CONFIRMATION_BODY_SUCCESS_PREMIUM_TIER_2_MONTHLY:
          "Thanks to another generous human, you now have access to enhanced chat perks and Server Boosts for {intervalCount, plural, =1 {# month} other {# months}}.",
        GIFT_CONFIRMATION_BODY_SUCCESS_PREMIUM_TIER_2_YEARLY:
          "Thanks to another generous human, you now have access to enhanced chat perks and Server Boosts for {intervalCount, plural, =1 {# year} other {# years}}.",
        GIFT_CONFIRMATION_BODY_SUCCESS_GENERIC_SUBSCRIPTION_MONTHLY:
          "Thanks to another generous human, you now have {skuName} for {intervalCount, plural, =1 {# month} other {# months}}.",
        GIFT_CONFIRMATION_BODY_SUCCESS_GENERIC_SUBSCRIPTION_YEARLY:
          "Thanks to another generous human, you now have {skuName} for {intervalCount, plural, =1 {# year} other {# years}}.",
        GIFT_CONFIRMATION_BODY_SUCCESS_MOBILE:
          "**{skuName}** has been added to your library.",
        GIFT_CONFIRMATION_NITRO_TIME_FRAME_YEARS:
          "{time, plural, =1 {# year} other {# years}}",
        GIFT_CONFIRMATION_NITRO_TIME_FRAME_MONTHS:
          "{time, plural, =1 {# month} other {# months}}",
        GIFT_CONFIRMATION_BUTTON_NOICE: "Noice!",
        GIFT_CODE_AUTH_INVALID_BODY:
          "This gift code may be expired or you might have the wrong code.",
        GIFT_CODE_AUTH_INVALID_TITLE: "Gift Code Invalid",
        GIFT_CODE_AUTH_VERIFICATION_TITLE: "Welcome !!{username}!!",
        GIFT_CODE_AUTH_INVALID_TIP: "Why is my gift code invalid?",
        GIFT_CODE_AUTH_ACCEPT: "Woo! Accept Gift",
        GIFT_CODE_AUTH_CONTINUE_IN_BROWSER: "Continue in browser",
        GIFT_CODE_AUTH_HELP_TEXT_VERIFICATION_REQUIRED:
          "To accept this gift you must have a verified email address. Check your email to verify your account.",
        GIFT_CODE_AUTH_CHECK_VERIFICATION_AGAIN:
          "Already verified you say? Click here to check again...",
        GIFT_CODE_AUTH_HELP_TEXT_OWNED:
          "You already have this game. Find it in [your library.]({libraryLink})",
        GIFT_CODE_AUTH_HELP_TEXT_CLAIMED: "This gift has already been claimed.",
        GIFT_CODE_AUTH_GIFTED_BY: "!!{username}!! gifted you",
        GIFT_CODE_AUTH_GIFTED: "You've been gifted",
        GIFT_CODE_AUTH_GIFTED_SUBSCRIPTION_MONTHLY:
          "{skuName} for {intervalCount, plural, =1 {# month} other {# months}}",
        GIFT_CODE_AUTH_GIFTED_SUBSCRIPTION_YEARLY:
          "{skuName} for {intervalCount, plural, =1 {# year} other {# years}}",
        GIFT_CODE_AUTH_ACCEPTING: "Accepting",
        GIFT_CODE_AUTH_RESOLVING: "Retrieving your gift from cyberspace",
        GIFT_CODE_AUTH_FETCHING_USER: "Checking your ID",
        GIFT_CODE_AUTH_VERIFICATION_SENT: "Sent!",
        GIFT_CODE_AUTH_LOGGED_IN_AS:
          "You are accepting this gift as **!!{userTag}!!**. [Wrong account?](onLogoutClick)",
        GIFT_CODE_CANNOT_ACCEPT_BODY_IOS:
          "Sorry, you can only accept your own gift on the desktop app.",
        GIFT_CODE_SMITE_REJECT_HELP_TEXT:
          "Sorry, seems like something's gone wrong and you can't use that code.",
        GIFT_CODE_PAYMENT_SOURCE_INVALID:
          "Sorry, this payment source cannot be used for redemption",
        REGION_BLOCKED_PAYMENTS_HEADER: "Billing is paused in your country",
        REGION_BLOCKED_PAYMENTS_BODY:
          "Payments and gift redemptions are temporarily suspended in Russia, but the rest of Discord will stay online.",
        REGION_BLOCKED_PAYMENTS_CTA:
          "[Why am I seeing this?]({helpdeskArticle})",
        REGION_BLOCKED_PAYMENTS_ONE_LINER:
          "Billing is paused in your country.  [Learn more]({helpdeskArticle})",
        PREORDER_SKU_NAME: "!!{name}!! (Preorder)",
        ADD_A_COMMENT_OPTIONAL: "Add a Comment (Optional)",
        MESSAGE_PREVIEW: "Message Preview",
        CHANGE_CATEGORY: "Change Category",
        UNCATEGORIZED: "Uncategorized",
        MOVE_FROM_CATEGORY_TO: "Move from {categoryName} to",
        RTC_DEBUG_OPEN: "Open Debug Panel",
        RTC_DEBUG_CONTEXT: "RTC Debug: {context}",
        RTC_DEBUG_TRANSPORT: "Transport",
        RTC_DEBUG_RTP_OUTBOUND: "Outbound",
        RTC_DEBUG_RTP_INBOUND: "Inbound",
        RTC_DEBUG_SCREENSHARE: "Screen Share",
        RTC_DEBUG_CAMERA: "Camera",
        RTC_DEBUG_CLIPS: "Clips",
        RTC_DEBUG_POPOUT_WINDOW_TITLE: "RTC Debug",
        MENTIONS: "Mentions",
        MENTIONS_AND_QUICKSWITCHER: "Mentions and Quickswitcher",
        CATEGORIES: "Categories",
        GAME_INVITES: "Invites",
        GAME_INVITES_RECENT_HEADER: "Recent invites",
        GAME_INVITES_EXPIRED_HEADER: "Expired invites",
        GAME_INVITES_DELETE_ALL: "Delete all invites",
        GAME_INVITES_SENT_YOU_AN_INVITE: "{username} Sent You a Game Invite",
        GAME_INVITES_INVITE_FROM: "Invite from {username}",
        GAME_INVITES_JOIN_GAME: "Join Game",
        GAME_INVITES_LAUNCH_GAME: "Launch Game",
        GAME_INVITES_INSTALL_GAME: "Install Game",
        GAME_INVITES_LAUNCH_TO_JOIN: "Launch to Join",
        GAME_INVITES_EMPTY_STATE_TITLE:
          "Game invites from your friends will show up here!",
        GAME_INVITES_EMPTY_STATE_SUBTITLE:
          "You’ll be able to launch or install games you own\n directly your from invites.",
        GAME_INVITE_ACTIONS_MENU_LABEL: "Game invite actions",
        GAME_INVITES_DELETE_MODAL_TITLE:
          "Are you sure you want to delete all game invites?",
        GAME_INVITES_DELETE_MODAL_SUBTITLE:
          "Your current game invites will be deleted permanently.",
        GAME_INVITES_DELETE_INVITES: "Delete invites",
        GAME_INVITES_NOT_DETECTED_TOOLTIP: "!!{gameTitle}!! is not detected",
        GAME_INVITES_EXPIRED: "Expired",
        NUX_NAVIGATION_HELP_GUILD:
          "A server is a superpowered group chat where people come together to hang out",
        NUX_NAVIGATION_HELP_CHANNELS:
          "Servers are made up of channels; places where people talk about different topics",
        NUX_NAVIGATION_HELP_DMS: "Add friends and chat with them directly",
        NUX_POST_REG_JOIN_SERVER_TITLE: "Do you have an invite?",
        NUX_POST_REG_JOIN_SERVER_DESCRIPTION:
          "Get the most out of Discord by joining a server.",
        NUX_POST_REG_JOIN_SERVER_SKIP: "I don't have one",
        NUX_OVERLAY_TITLE: "Meet the Mobile Voice Overlay!",
        NUX_OVERLAY_DESCRIPTION:
          "See who's talking and access shortcuts while using other apps—no need to switch back to Discord.",
        NUX_OVERLAY_ENABLE: "Enable Overlay",
        NUX_SAMSUNG_GAME_PRESENCE_LINK_TITLE: "What are you playing?!",
        NUX_SAMSUNG_GAME_PRESENCE_LINK_DESCRIPTION:
          "Let friends see when you’re gaming by linking your account with Samsung and enabling Mobile Game Detection.",
        NUX_SAMSUNG_GAME_PRESENCE_LINK_ENABLE: "Let's do it",
        NUX_VALUE_PROPS_NEXT_BUTTON: "Let's Go!",
        NUX_VALUE_PROPS_CHAT_CARD_TITLE:
          "Follow conversations and topics in text chat",
        NUX_VALUE_PROPS_VOICE_CARD_TITLE:
          "Chat over voice with multiple people at once",
        NUX_VALUE_PROPS_CAMERA_CARD_TITLE:
          "Hang out using video chat and screenshare",
        NUX_VALUE_PROPS_SERVERS_CARD_TITLE:
          "Connect with all your communities in servers",
        NUX_VALUE_PROPS_SERVERS_2_CARD_TITLE:
          "Connect with all your communities in one place",
        NUX_VALUE_PROPS_WELCOME_CARD_TITLE: "Welcome to Discord!",
        NUX_VALUE_PROPS_HEADER_TITLE: "Welcome to Discord!",
        NUX_VALUE_PROPS_SUBTITLE:
          "Discord is a home for your communities, friends, book clubs, study groups, and more.",
        CRASH_UNEXPECTED: "Discord has crashed unexpectedly.",
        CRASH_TESTERS_INVITE:
          "Not all is lost! Join us at {testers} and let us know what happened. We'll get right on it.",
        CRASH_DISCLAIMER:
          "Please note that using apps which attempt to customize your device's UI are not officially supported and may cause undesired behavior.",
        CRASH_DETAILS: "Crash Details",
        CRASH_APP_VERSION: "App Version: {version}",
        CRASH_DEVICE: "Device: {device}",
        CRASH_DEVICE_VERSION: "Device Version: {version}",
        CRASH_TIMESTAMP: "Crash Timestamp: {timestamp}",
        CRASH_SOURCE: "Crash Source: {source}",
        CAPTCHA: "Captcha",
        VERIFY_BY_RECAPTCHA: "Verify by reCaptcha",
        VERIFY_BY_HCAPTCHA: "Verify by hCaptcha",
        VERIFY_BY_RECAPTCHA_DESCRIPTION: "We need to know you're not a robo.",
        CAPTCHA_FAILED: "The captcha failed. Please try again.",
        CAPTCHA_FAILED_UNSUPPORTED:
          "The captcha failed, your device is unsupported.",
        CAPTCHA_FAILED_PLAY_SERVICES:
          "The captcha failed, Google Play Services is required.  After installing or updating please restart the app and try again.",
        VERIFY: "Verify",
        CAPTCHA_ISSUES: "Having issues with CAPTCHA?",
        CAPTCHA_PROBLEMS: "CAPTCHA Problems?",
        CAPTCHA_PROBLEMS_INFO:
          "If you're unable to complete the CAPTCHA, try doing it in your browser",
        CAPTCHA_OPEN_BROWSER: "Open Browser",
        SPOTIFY_CONNECTION_INFO_ANDROID:
          "To enable Spotify Status on Android, be sure to enable **Device Broadcast Status** within the Spotify app's settings. This will not update your status while the Discord app is in the background.",
        SPOTIFY_LISTEN_ALONG_TITLE_HOST:
          "{count, number} {count, plural, =1 {Listener} other {Listeners}}",
        SPOTIFY_LISTEN_ALONG_TITLE_LISTENER: "Listening Along",
        SPOTIFY_LISTEN_ALONG_SUBTITLE_LISTENER: "on Spotify",
        SPOTIFY_LISTEN_ALONG_STOP: "Stop",
        SPOTIFY_LISTEN_ALONG_HOST: "Host",
        SPOTIFY_LISTEN_ALONG_LISTENER: "Listener",
        SPOTIFY_LISTEN_ALONG_LISTENERS: "Listeners",
        SPOTIFY_LISTEN_ALONG_LISTENING_ALONG_COUNT:
          "{count, number} Listening Along",
        SPOTIFY_LISTEN_ALONG_INFO: "What's this?",
        XBOX_AUTHORIZATION_TITLE: "Xbox Account Authorization",
        LINK_YOUR_XBOX_ACCOUNT_1:
          "Link your Xbox account to Discord to show what game you're playing.",
        LINK_YOUR_XBOX_ACCOUNT_2:
          "Discord is a voice, text, and video chat app that's free, secure, and works on both desktop and mobile.",
        XBOX_PIN_STEP1: "Open the Discord app on your phone",
        XBOX_PIN_STEP2: "Go to Settings > Connections > Add",
        XBOX_PIN_STEP3: "Click on Xbox and enter the PIN above",
        XBOX_LINK: "Link",
        JOIN_ON_XBOX: "Join on Xbox",
        TRANSFER_TO_XBOX: "Transfer to Xbox",
        GET_XBOX_APP: "Get the Xbox App",
        GET_XBOX_APP_BODY:
          "Download the Xbox app to connect to Discord on your Xbox.",
        GET_THE_APP: "Get the app",
        GET_XBOX_APP_CANCEL: "Nevermind",
        XBOX_REMOTE_CONNECTING: "Connecting on **Xbox**",
        XBOX_REMOTE_CONNECTING_RAW: "Connecting on Xbox",
        XBOX_REMOTE_CONNECTING_ELLIPSIS: "Connecting on **Xbox...**",
        XBOX_REMOTE_CONNECTED: "Connected on **Xbox**",
        XBOX_REMOTE_CONNECTED_RAW: "Connected on Xbox",
        XBOX_REMOTE_CONNECTING_SUBTITLE:
          "Hold on while we connect to your console.",
        CONNECT_XBOX_LANDING_TITLE: "Discord is now on Xbox!",
        RECONNECT_XBOX_LANDING_TITLE: "Relink Xbox to get new features!",
        CONNECT_XBOX_LANDING_BODY:
          "It's what you've been waiting for! Two things: first sign in with your Xbox account and then authorize here on Discord.",
        CONNECT_CONSOLE_LANDING_BODY_LEARN_MORE:
          "[Learn more at the Discord Help Center.]({helpCenterLink})",
        CONNECT_XBOX_LANDING_ONE_WAY_WARNING:
          "Although you’ve previously connected your Xbox account, please reconnect to enable new features.",
        XBOX_DETAILS_TITLE: "First let's sign in with Xbox",
        XBOX_DETAILS_TITLE_WAITING: "Waiting for connection...",
        XBOX_DETAILS_BODY:
          "We'll use this to display your Xbox gamertag and what games you’re playing.",
        CONSOLE_REDIRECT_NOTICE: "You will be redirected to: {redirectUrl}",
        XBOX_DETAILS_BODY_WAITING:
          "Sign in to Xbox in your browser and return here when you're done.",
        BIDIRECTIONAL_STEP_HEADER: "Step {number} of {total}",
        CONNECT_XBOX_SUCCESS_TITLE: "You're all set up!",
        CONNECT_XBOX_SUCCESS_BODY:
          "Head over to a voice channel to try it out.",
        CONNECT_XBOX_SUCCESS_APP_TITLE: "Get the Xbox Mobile App",
        CONNECT_XBOX_SUCCESS_APP_BODY:
          "In order to enable voice chat on console, please have the Xbox Mobile app installed.",
        CONNECT_XBOX_SUCCESS_APP_BUTTON_IOS: "View on App Store",
        CONNECT_XBOX_SUCCESS_APP_BUTTON_ANDROID: "View on Google Play Store",
        CONNECT_XBOX_ERROR_TITLE: "Oops, something went wrong...",
        CONNECT_XBOX_ERROR_BODY:
          "We were unable to link your Xbox account. Please try again or contact support if the issue persists.",
        CONNECT_XBOX_EDUCATION_TITLE: "You’re all set up!",
        CONNECT_XBOX_TRANSFER_VOICE_VALUE_PROP:
          "Transfer voice chat to Series X|S or Xbox One",
        CONNECT_XBOX_DISPLAY_GAME_VALUE_PROP:
          "Display the Xbox game you're playing on Discord",
        CONNECT_XBOX_ONE_MORE_THING: "One more thing...",
        CONNECT_XBOX_ENSURE_APP_INSTALLED:
          "Please make sure that you have the Xbox mobile app installed. You’ll need this for voice chat on console.",
        CONNECT_XBOX_APP_INSTALLED: "Xbox Mobile App Installed",
        AUTHORIZE_AND_CONTINUE: "Authorize and Continue",
        TRANSFER_VOICE_TO_DEVICE: "Transfer Voice to This Device",
        TRANSFER_VOICE_TO_XBOX: "Transfer Voice to Xbox",
        CONSOLE_NUX_MOBILE: "Try voice chat on console!",
        CONSOLE_NUX_MOBILE_SUBTITLE:
          "Tap on the output switcher to switch to console.",
        CONSOLE_STREAM_DISABLED: "Unavailable on console",
        AUTHORIZED_APP_IS_CONNECTED_ACCOUNT:
          "!!{applicationName}!! is also a connected account. Visit [Connections](onConnectionPress) for more information.",
        CONSOLE_NUX_TOOLTIP_HEADER: "Try voice chat on console!",
        CONSOLE_NUX_TOOLTIP_BODY_XBOX:
          "Now you're ready to join a call on your Xbox. Grab your headset and controller!",
        CONSOLE_NUX_TOOLTIP_BODY_PS5:
          "Now you're ready to join a call on your PS5. Grab your headset and controller!",
        CONSOLE_NUX_TOOLTIP_DISMISS: "Dismiss",
        CONSOLE_NUX_TOOLTIP_ACCEPT: "Check it out",
        PS_LINK_UPSELL_HEADER_RECONNECT: "Send Discord audio to your PS5!",
        PS_LINK_UPSELL_HEADER: "Connect PlayStation Network",
        PS_LINK_UPSELL_CONTENT_RECONNECT:
          "Now you can chat in Discord Voice Channels and Voice Calls while gaming on your PS5!",
        PS_LINK_UPSELL_CONTENT:
          "Hang out with Discord friends while playing games in voice chat.",
        CONSOLE_CONNECTING_DISABLED: "Disabled while connecting to console",
        XBOX_APP_REQUIRED_SUBHEADER:
          "Grab your headset and controller! The Xbox mobile app is required for audio on console.",
        XBOX_APP_FOR_MOBILE: "Xbox app for mobile",
        XBOX_APP_STEP_ONE: "Have the mobile Xbox app installed",
        XBOX_APP_STEP_TWO: "Scan the QR code to join!",
        CONSOLE_TRANSFER: "Transfer to Console",
        FEATURE_DISABLED_WHILE_IN_BETA:
          "During the beta, status sync is enabled.",
        CONNECTED_ACCOUNT_IS_AUTHORIZED_APP_DISCONNECT_WARNING:
          "!!{platformName}!! is also an Authorized Application. Disconnecting will also remove it from Authorized Apps.",
        AUTHORIZED_APP_IS_CONNECTED_ACCOUNT_DISCONNECT_WARNING:
          "!!{applicationName}!! is also a Connected Account. Disconnecting will also remove it from Connected Accounts.",
        XBOX_TWO_WAY_UPSELL_TITLE: "Send Discord audio to your Xbox!",
        XBOX_TWO_WAY_UPSELL_BODY:
          "Now you can chat in Discord Voice Channels and Voice Calls on your Xbox! You'll need to reconnect to Xbox in order to enable this feature. [Learn more]({help_article})",
        CANCEL_TRANSFER_VOICE_FAILED_TITLE: "Unable to disconnect",
        CANCEL_TRANSFER_VOICE_FAILED_BODY:
          "There was an error canceling the transfer. Please leave the voice channel on your console.",
        ACTIVATE_DEVICE_TITLE: "Connect Your Device",
        ACTIVATE_DEVICE_BODY:
          "Enter the code displayed on your TV to link your device with your Discord account.",
        ACTIVATE_DEVICE_ERROR_BAD_CODE: "Incorrect Code",
        ACTIVATE_DEVICE_ERROR_RATE_LIMIT:
          "Slow down! You're submitting too fast.",
        ACTIVATE_DEVICE_ERROR_UNKNOWN: "Something went wrong, try again later.",
        ACTIVATE_DEVICE_LINK_ERROR_TITLE:
          "Unexpected error linking your account",
        ACTIVATE_DEVICE_INPUT_PLACEHOLDER: "{number} character code",
        ACTIVATE_DEVICE_ERROR_TITLE: "Oops, something went wrong…",
        ACTIVATE_DEVICE_ERROR_BODY:
          "We weren’t able to connect accounts. Please try again or contact support if the issue persists.",
        ACTIVATE_DEVICE_SUCCESS_TITLE: "You’re all set up!",
        ACTIVATE_DEVICE_SUCCESS_TWO_WAY_BODY:
          "Head over to a voice channel to try it out.",
        GAME_CONSOLE_TRANSFER_TIMEOUT_TITLE: "Voice Transfer Failed",
        GAME_CONSOLE_TRANSFER_TIMEOUT_BODY:
          "Transfer to console timed out, please check that your console is on and try again.",
        CONSOLE_VOICE_MOBILE_UPSELL: "Transfer voice chat to console!",
        CONSOLE_VOICE_MOBILE_UPSELL_HEADER: "XBOX DETECTED",
        CONSOLE_VOICE_MOBILE_UPSELL_HEADER_PLAYSTATION: "PLAYSTATION DETECTED",
        CONSOLE_VOICE_MOBILE_UPSELL_REDESIGN_PLAYSTATION:
          "Playing on PlayStation?",
        CONSOLE_VOICE_MOBILE_UPSELL_REDESIGN_XBOX: "Playing on Xbox?",
        CONSOlE_VOICE_MOBILE_UPSELL_REDESIGN_SUBTITLE_PLAYSTATION:
          "Transfer voice chat to your PlayStation!",
        CONSOlE_VOICE_MOBILE_UPSELL_REDESIGN_SUBTITLE_XBOX:
          "Transfer voice chat to your Xbox!",
        PTT_NOT_SUPPORTED_XBOX: "Push to Talk isn’t supported on Xbox",
        PTT_NOT_SUPPORTED_PLAYSTATION:
          "Push to Talk isn’t supported on PlayStation",
        PTT_NOT_SUPPORTED_ALERT_BODY:
          "Once you join this Voice Channel, your Input Mode will switch to Voice Activity.",
        CONSOLE_TRANSFER_VOICE: "Transfer Voice",
        CONSOLE_PLAYSTATION_TRANSFER_VOICE_MODAL_HEADER:
          "Transfer Voice To PlayStation",
        CONSOLE_PLAYSTATION_TRANSFER_VOICE_MODAL_SUBHEADING:
          "Check that your console is turned on, and grab your headset and controller! Transferring this call will route audio input and output through the selected console.",
        CONSOLE_PLAYSTATION_TRANSFER_VOICE: "Transfer to PlayStation",
        CONSOLE_PLAYSTATION_JOIN_VOICE: "Join on PlayStation",
        CONSOLE_SWITCH_DEVICE: "Switch",
        CONSOLE_CONNECTING: "Connecting...",
        CONNECT_PS_LANDING_TITLE: "Discord is now on PlayStation!",
        RECONNECT_PS_LANDING_TITLE:
          "Reconnect PlayStation to enable new features!",
        PS5: "PS5",
        PS_VALUE_PROP_VOICE: "Join voice chat on PS5",
        PS_VALUE_PROP_GAME: "Display the game you're playing",
        PS4: "PS4",
        CONNECT_PS_LANDING_BODY:
          "A match made in gamer heaven. Certain features are only available on PS5.",
        PS_PRECONNECT_TITLE: "First let's sign in",
        PS_PRECONNECT_BODY:
          "We'll use this to display your PlayStation Online ID and what games you're playing.",
        CONSOLE_PRECONNECT_TITLE_WAITING: "Waiting for connection...",
        PS_PRECONNECT_BODY_WAITING:
          "Sign in to PlayStation Network in your browser and return here when you're done",
        CONNECT_CONSOLE_ERROR_TITLE: "Oops, something went wrong...",
        CONNECT_PS_ERROR_BODY:
          "We were unable to link your account for PlayStation Network. Please try again or contact support if the issue persists.",
        PS_LINK_SUCCESS_TITLE: "That's it!",
        PS_LINK_SUCCESS_BODY:
          "Head over to a voice channel to try it out! Chat with Discord voice chat on your PS5. Show which games you're playing with rich presence, and more.",
        CONSOLE_DEVICE_NOT_RESPONDING: "Your !!{deviceType}!! isn’t responding",
        CONSOLE_DEVICE_NOT_RESPONDING_BODY:
          "Please make sure !!{deviceName}!! is turned on or in rest mode.",
        CONSOLE_DEVICE_REQUIRES_PASSCODE: "!!{deviceType}!! requires passcode",
        CONSOLE_DEVICE_REQUIRES_PASSCODE_BODY:
          "Please enter the passcode on !!{deviceName}!! to continue.",
        CONSOLE_DEVICE_IN_USE: "Someone’s already using this !!{deviceType}!!",
        CONSOLE_DEVICE_IN_USE_BODY:
          "Please logout on !!{deviceName}!! and try again.",
        CONSOLE_DEVICE_RECONNECT_ACCOUNT:
          "Re-link your !!{deviceType}!! account in connection settings to transfer voice to your !!{deviceType}!!",
        CONSOLE_DEVICE_COMMUNICATION_RESTRICTED: "Unable to transfer",
        CONSOLE_DEVICE_COMMUNICATION_RESTRICTED_BODY:
          "You’re restricted from using communication features on your !!{deviceType}!!.",
        CONSOLE_DEVICE_UNKNOWN_ERROR: "Something went wrong",
        CONSOLE_DEVICE_UNKNOWN_ERROR_BODY:
          "We weren’t able to connect to !!{deviceName}!!. Please try again later!",
        PLAYSTATION_DEVICES_NOT_FOUND: "We couldn’t find any PS5s…",
        PLAYSTATION_DEVICES_NOT_FOUND_BODY:
          "Unable to find a PS5 to connect to. Make sure your PS5 is registered to the account you have linked here.",
        PLAYSTATION_DEVICES_INFOBOX:
          "Not seeing your PS5? Make sure it’s associated with the account you have linked.",
        PLAYSTATION_REMOTE_CONNECTED: "Connected on **PS5**",
        PLAYSTATION_REMOTE_CONNECTED_RAW: "Connected on PS5",
        PS_TWO_WAY_UPSELL_TITLE: "Send Discord audio to your PlayStation 5!",
        PS_TWO_WAY_UPSELL_BODY:
          "Now you can chat in Discord Voice Channels and Voice Calls on your PlayStation 5! You'll need to reconnect to PlayStation Network in order to enable this feature. [Learn more]({help_article})",
        PLAYSTATION_TRANSFERRING: "Transferring to PS5",
        PLAYSTATION_TRANSFERRING_ELLIPSIS: "Transferring to PS5…",
        PLAYSTATION_TRANSFERRING_ELLIPSIS_BOLD: "Transferring to **PS5…**",
        CONSOLE_TRANSFERRING_SUBTITLE:
          "We’re working on it… [Cancel](onCancel)",
        XBOX_TRANSFERRING: "Transferring to Xbox",
        XBOX_TRANSFERRING_ELLIPSIS: "Transferring to Xbox…",
        XBOX_TRANSFERRING_ELLIPSIS_BOLD: "Transferring to **Xbox…**",
        PLAYSTATION_SELECT_DEVICE: "Select a PS5",
        PLAYSTATION_SELECT_DEVICE_RELOAD: "Reload",
        PLAYSTATION_JOIN_CALL: "Join Call on PlayStation",
        CONSOLE_ERROR_CODE_SUPPORT:
          "If the error persists, contact [customer support]({supportURL}) with error code: {errorCode}",
        CONSOLE_LAN_DETECT_CTA:
          "Want to join calls directly from your gaming console? Tap here to setup!",
        ENABLE_LOCAL_NETWORK_ACCESS: "Enable local network access",
        ENABLE_LOCAL_NETWORK_ACCESS_DESCRIPTION:
          "This will give Discord access to your local network to find consoles and suggest account connections like Xbox, Playstation, and more.",
        FIND_CONSOLES: "Find consoles",
        CONSOLE_LAN_SEARCHING: "Searching...",
        CONSOLE_LAN_SEARCHING_DESCRIPTION:
          "Looking for devices on your network.",
        CONSOLE_DETECT_NO_DEVICES_FOUND: "No devices found",
        CONSOLE_DETECT_NO_DEVICES_FOUND_DESCRIPTION:
          "Don’t see your console? Make sure this device is connected to WiFi and all your devices are using the same internet connection.",
        CONSOLE_DETECT_DEVICE_FOUND:
          "{count, plural, one {Device} other {Devices}} found!",
        CONSOLE_DETECT_DEVICE_FOUND_DESCRIPTION:
          "We found some devices on your network. {count, plural, one {Here is a connection suggestion to make the most of it!} other {Here are some connection suggestions to make the most of them!}}",
        CONNECT_XBOX: "Connect Xbox",
        CONNECT_PLAYSTATION: "Connect PlayStation",
        CONNECT_CRUNCHYROLL_LANDING_TITLE: "Crunchyroll is now on Discord!",
        CONNECT_CRUNCHYROLL_LANDING_BODY:
          "It’s anime time! Sign in to Crunchyroll to connect your accounts.",
        CRUNCHYROLL_DETAILS_TITLE: "First let's sign in with Crunchyroll",
        CRUNCHYROLL_DETAILS_TITLE_WAITING: "Waiting for connection...",
        CRUNCHYROLL_DETAILS_BODY:
          "We’ll use this to display what show you’re watching on Crunchyroll",
        CRUNCHYROLL_DETAILS_BODY_WAITING:
          "Sign in to Crunchyroll in your browser and return here when you're done.",
        CONNECT_CRUNCHYROLL_SUCCESS_TITLE: "You're ready to go!",
        CONNECT_CRUNCHYROLL_SUCCESS_BODY:
          "Start watching your favorite anime on Crunchyroll to try it out.",
        CONNECT_CRUNCHYROLL_ERROR_TITLE: "Oops, something went wrong...",
        CONNECT_CRUNCHYROLL_ERROR_BODY:
          "We were unable to link your Crunchyroll account. Please try again or contact support if the issue persists.",
        CONNECT_CRUNCHYROLL_DISPLAY_SHOW_VALUE_PROP:
          "Display the Crunchyroll show you’re watching on Discord.",
        CONNECTION_LOGIN_WITH: "or login with",
        _CONNECTION_LOGIN_WITH: "or log in with",
        CONNECTION_LOGIN_MICROSOFT: "Microsoft",
        CONNECTION_ENTER_CODE: "Enter the code as it appears on your screen",
        CONNECTION_INVALID_PIN: "Invalid pin code entered",
        DISCORD_RICH_PRESENCE: "Discord Rich Presence",
        LINK_YOUR_DISCORD_ACCOUNT: "Link your Discord Account",
        LOADING_YOUR_PIN: "Loading your pin",
        YOUR_PIN_EXPIRES: "Your pin expires {time}",
        YOUR_PIN_IS_EXPIRED: "Your pin has expired",
        STEP_NUMBER: "Step {number}",
        BROWSER_HANDOFF_DETECTING_TITLE: "Detecting Account",
        BROWSER_HANDOFF_AUTHENTICATING_TITLE: "Authenticating",
        BROWSER_HANDOFF_AUTHENTICATING_DESCRIPTION:
          "Attempting to authenticate the Discord desktop client. Do not close this window.",
        BROWSER_HANDOFF_DONE_TITLE: "Done",
        BROWSER_HANDOFF_DONE_SAFE_TO_CLOSE: "This window is safe to close now.",
        BROWSER_HANDOFF_FAILED_TITLE: "Authentication Failed",
        BROWSER_HANDOFF_SUCCESS_TITLE: "Hey !!{name}!!!",
        BROWSER_HANDOFF_SUCCESS_BODY: "Do you want to login with this account?",
        _BROWSER_HANDOFF_SUCCESS_BODY:
          "Do you want to log in with this account?",
        BROWSER_HANDOFF_SUCCESS_ACTION: "Continue as !!{name}!!",
        BROWSER_HANDOFF_SUCCESS_CANCEL: "Switch to another account?",
        GAME_ACTION_BUTTON_PLAY: "Play",
        GAME_ACTION_BUTTON_INSTALL: "Install",
        GAME_ACTION_BUTTON_UPDATE: "Update",
        GAME_ACTION_BUTTON_PAUSED: "Paused",
        GAME_ACTION_BUTTON_LOCATE: "Locate",
        GAME_ACTION_BUTTON_QUEUED: "Queued",
        GAME_ACTION_BUTTON_DOWNLOADING: "Downloading",
        GAME_ACTION_BUTTON_VIEW_IN_STORE: "View in Store",
        GAME_ACTION_BUTTON_ADD_TO_LIBRARY: "Add to library",
        GAME_ACTION_BUTTON_UNAVAILABLE: "Unavailable",
        GAME_ACTION_BUTTON_GAME_NOT_DETECTED: "Game not detected",
        GAME_ACTION_BUTTON_PLAY_DISABLED_DESKTOP_APP: "Launch via Desktop App",
        GAME_ACTION_BUTTON_CANNOT_INSTALL: "Not installable",
        GAME_ACTION_BUTTON_LOGIN_TO_BUY: "Log In to Buy",
        GAME_ACTION_BUTTON_NOW_PLAYING: "Now Playing",
        GAME_ACTION_BUTTON_UNAVAILABLE_TOOLTIP:
          "Available on {operatingSystem}",
        GAME_ACTION_BUTTON_RESTRICTED_IN_REGION: "Unavailable in Your Country",
        GAME_ACTION_BUTTON_PREORDER_WAIT: "Coming Soon",
        GAME_ACTION_BUTTON_PREORDER_WAIT_TOOLTIP: "Available !!{date}!!",
        GAME_ACTION_BUTTON_UNINSTALLING_1: "Uninstalling",
        GAME_ACTION_BUTTON_UNINSTALLING_2: "Obliterating",
        GAME_ACTION_BUTTON_UNINSTALLING_3: "Vaporizing",
        GAME_ACTION_BUTTON_UNINSTALLING_4: "Destroying",
        GAME_ACTION_BUTTON_UNINSTALLING_5: "Terminating",
        GAME_ACTION_BUTTON_UNINSTALLING_6: "Annihilating",
        GAME_ACTION_BUTTON_UNINSTALLING_7: "Dismantling",
        GAME_ACTION_BUTTON_UNINSTALLING_8: "Deleting",
        GAME_ACTION_BUTTON_UNINSTALLING_9: "Razing",
        GAME_ACTION_BUTTON_UNINSTALLING_10: "Expunging",
        GAME_FEED_CURRENT_HEADER_TITLE: "Active Now",
        GAME_FEED_ACTIVITY_ACTION_PLAY: "Play",
        GAME_FEED_ACTIVITY_PLAYING_XBOX: "Playing on Xbox",
        GAME_FEED_ACTIVITY_STREAMING_TWITCH: "Streaming on Twitch",
        GAME_FEED_USER_PLAYING_JUST_STARTED: "Just started playing",
        GAME_FEED_USER_PLAYING_FOR_MINUTES:
          "Playing for {time, number} {time, plural, =1 {minute} other {minutes}}",
        GAME_FEED_USER_PLAYING_FOR_HOURS:
          "Playing for {time, number} {time, plural, =1 {hour} other {hours}}",
        GAME_FEED_USER_PLAYING_FOR_DAYS:
          "Playing for {time, number} {time, plural, =1 {day} other {days}}",
        GAME_FEED_USER_PLAYING_JUST_ENDED: "Just stopped playing",
        GAME_FEED_USER_PLAYED_MINUTES_AGO:
          "Played {time, number} {time, plural, =1 {minute} other {minutes}} ago",
        GAME_FEED_USER_PLAYED_HOURS_AGO:
          "Played {time, number} {time, plural, =1 {hour} other {hours}} ago",
        GAME_FEED_USER_PLAYED_DAYS_AGO:
          "Played {time, number} {time, plural, =1 {day} other {days}} ago",
        GAME_FEED_USER_PLAYED_WEEKS_AGO:
          "Played {time, number} {time, plural, =1 {week} other {weeks}} ago",
        GAME_FEED_USER_PLAYED_MONTHS_AGO:
          "Played {time, number} {time, plural, =1 {month} other {months}} ago",
        GAME_FEED_USER_PLAYED_YEARS_AGO:
          "Played {time, number} {time, plural, =1 {year} other {years}} ago",
        GAME_FEED_UNKNOWN_PLAYERS:
          "{count, plural, one {# Unknown Player} other {# Unknown Players}}",
        GAME_POPOUT_VIEW_SERVER: "View Server",
        GAME_POPOUT_FOLLOW: "Follow",
        GAME_POPOUT_NITRO_UPSELL: "Use anywhere with Nitro",
        APPLICATION_LIBRARY_MY_GAMES: "My Games",
        APPLICATION_LIBRARY_INVENTORY: "Gift Inventory",
        APPLICATION_LIBRARY_FILTER_PLACEHOLDER: "Filter",
        APPLICATION_LIBRARY_EMPTY_SEARCH_DESCRIPTION:
          "After looking far and wide, we couldn't find any games matching **!!{query}!!**...",
        APPLICATION_LIBRARY_EMPTY_STATE_HEADER: "No games found",
        APPLICATION_LIBRARY_EMPTY_STATE_DESCRIPTION_NO_IMPORT:
          "Hm, seems you don't have any games. Purchase games and they'll show up here!",
        APPLICATION_LIBRARY_REMOVE_CONFIRM_HEADER: "Hide from library",
        APPLICATION_LIBRARY_REMOVE_CONFIRM_BODY:
          "!!{name}!! will be hidden from your library. You can show it again from the Game Library settings page.",
        APPLICATION_LIBRARY_REMOVE_CONFIRM_CONFIRM: "I'm Sure",
        APPLICATION_PROGRESS_INDICATOR_PAUSED: "Paused",
        APPLICATION_PROGRESS_INDICATOR_INSTALLING: "Downloading !!{name}!!",
        APPLICATION_PROGRESS_INDICATOR_INSTALLING_SECONDS:
          "Downloading !!{name}!! - {timeRemaining, plural, =1 {wrapping up} other {# seconds remaining}}",
        APPLICATION_PROGRESS_INDICATOR_INSTALLING_MINUTES:
          "Downloading !!{name}!! - {timeRemaining, plural, =1 {# minute} other {# minutes}} remaining",
        APPLICATION_PROGRESS_INDICATOR_INSTALLING_HOURS:
          "Downloading !!{name}!! - {timeRemaining, plural, =1 {# hour} other {# hours}} remaining",
        APPLICATION_PROGRESS_INDICATOR_UPDATING: "Updating !!{name}!!",
        APPLICATION_PROGRESS_INDICATOR_UPDATING_SECONDS:
          "Updating !!{name}!! - {timeRemaining, plural, =1 {wrapping up} other {# seconds remaining}}",
        APPLICATION_PROGRESS_INDICATOR_UPDATING_MINUTES:
          "Updating !!{name}!! - {timeRemaining, plural, =1 {# minute} other {# minutes}} remaining",
        APPLICATION_PROGRESS_INDICATOR_UPDATING_HOURS:
          "Updating !!{name}!! - {timeRemaining, plural, =1 {# hour} other {# hours}} remaining",
        APPLICATION_CONTEXT_MENU_LAUNCH: "Play Game",
        APPLICATION_CONTEXT_MENU_LAUNCH_OPTIONS: "Show Launch Options",
        APPLICATION_CONTEXT_MENU_LAUNCH_APPLICATION_NAME: "Play !!{name}!!",
        APPLICATION_CONTEXT_MENU_SHOW: "Show Game in Library",
        APPLICATION_CONTEXT_MENU_HIDE: "Hide Game from Library",
        APPLICATION_CONTEXT_MENU_PRIVATE_STATUS: "Hide Playing Status",
        APPLICATION_CONTEXT_MENU_TOGGLE_OVERLAY_DISABLE: "Disable Overlay",
        APPLICATION_CONTEXT_MENU_INSTALL: "Install",
        APPLICATION_CONTEXT_MENU_REPAIR: "Repair",
        APPLICATION_CONTEXT_MENU_UNINSTALL: "Uninstall",
        APPLICATION_CONTEXT_MENU_CREATE_DESKTOP_SHORTCUT:
          "Create Desktop Shortcut",
        APPLICATION_UNINSTALL_PROMPT_TITLE: "Uninstall {gameName}?",
        APPLICATION_UNINSTALL_PROMPT_BODY:
          "Say goodbye to all of {gameName}'s data on your computer. Press the red button and it will be no more.",
        APPLICATION_UNINSTALL_PROMPT_CANCEL: "Nevermind",
        APPLICATION_UNINSTALL_PROMPT_CONFIRM: "Uninstall",
        PLAY_FULL_VIDEO: "Play Full Video",
        FILE_SIZE_KB: "{size, number} KB",
        FILE_SIZE_KB_NO_SPACE: "{size, number}KB",
        FILE_SIZE_MB: "{size, number} MB",
        FILE_SIZE_MB_NO_SPACE: "{size, number}MB",
        FILE_SIZE_GB: "{size, number} GB",
        FILE_SIZE_GB_NO_SPACE: "{size, number}GB",
        FILE_RATE_KB: "{size, number} KB/S",
        FILE_RATE_MB: "{size, number} MB/S",
        BITRATE_KBPS: "{bitrate, number} kbps",
        BITRATE_KBPS_NO_SPACE: "{bitrate, number}kbps",
        GAME_LIBRARY_UPDATES_INSTALLING:
          "Downloading — {progress} of {total} (!!{percent, number}!!%)",
        GAME_LIBRARY_UPDATES_INSTALLING_SECONDS:
          "Downloading — {progress} of {total} (!!{percent, number}!!%) — {timeRemaining, plural, =1 {wrapping up} other {# seconds remaining}}",
        GAME_LIBRARY_UPDATES_INSTALLING_MINUTES:
          "Downloading — {progress} of {total} (!!{percent, number}!!%) — {timeRemaining, plural, =1 {1 minute} other {# minutes}} remaining",
        GAME_LIBRARY_UPDATES_INSTALLING_HOURS:
          "Downloading — {progress} of {total} (!!{percent, number}!!%) — {timeRemaining, plural, =1 {1 hour} other {# hours}} remaining",
        GAME_LIBRARY_UPDATES_UPDATING:
          "Patching — {progress} of {total} (!!{percent, number}!!%)",
        GAME_LIBRARY_UPDATES_UPDATING_UPDATING_SECONDS:
          "Patching — {progress} of {total} (!!{percent, number}!!%) — {timeRemaining, plural, =1 {wrapping up} other {# seconds remaining}}",
        GAME_LIBRARY_UPDATES_UPDATING_UPDATING_MINUTES:
          "Patching — {progress} of {total} (!!{percent, number}!!%) — {timeRemaining, plural, =1 {1 minute} other {# minutes}} remaining",
        GAME_LIBRARY_UPDATES_UPDATING_UPDATING_HOURS:
          "Patching — {progress} of {total} (!!{percent, number}!!%) — {timeRemaining, plural, =1 {1 hour} other {# hours}} remaining",
        GAME_LIBRARY_UPDATES_PROGRESS_PLANNING:
          "Planning — !!{percent, number}!!%",
        GAME_LIBRARY_UPDATES_PROGRESS_WAITING_FOR_ANOTHER:
          "Waiting for another download to pause — {progress} of {total} (!!{percent, number}!!%)",
        GAME_LIBRARY_UPDATES_PROGRESS_WAITING_FOR_ANOTHER_NO_TRANSITION:
          "Waiting for another download to pause",
        GAME_LIBRARY_UPDATES_PROGRESS_ALLOCATING_DISK:
          "Allocating Disk Space — (!!{percent, number}!!%)",
        GAME_LIBRARY_UPDATES_PROGRESS_FINALIZING:
          "Finalizing — !!{percent, number}!!%",
        GAME_LIBRARY_UPDATES_PROGRESS_PAUSING:
          "Pausing — {progress} of {total} (!!{percent, number}!!%)",
        GAME_LIBRARY_UPDATES_PROGRESS_VERIFYING:
          "Verifying Install — {progress} of {total} (!!{percent, number}!!%)",
        GAME_LIBRARY_UPDATES_PROGRESS_POST_INSTALL_SCRIPTS:
          "Running Scripts — {progress} of {total} (!!{percent, number}!!%)",
        GAME_LIBRARY_UPDATES_PROGRESS_PAUSED:
          "Paused — {progress} of {total} (!!{percent, number}!!%)",
        GAME_LIBRARY_UPDATES_PROGRESS_PAUSED_NO_TRANSITION: "Paused",
        GAME_LIBRARY_UPDATES_PROGRESS_QUEUED:
          "Queued — {progress} of {total} (!!{percent, number}!!%)",
        GAME_LIBRARY_UPDATES_PROGRESS_QUEUED_NO_TRANSITION: "Queued",
        GAME_LIBRARY_UPDATES_PROGRESS_FINISHED: "Finished — [Clear](remove)",
        GAME_LIBRARY_UPDATES_PROGRESS_REPAIRING:
          "Repairing — {progress} of {total} (!!{percent, number}!!%)",
        GAME_LIBRARY_UPDATES_ACTION_PAUSE: "Pause",
        GAME_LIBRARY_UPDATES_ACTION_RESUME: "Resume",
        GAME_LIBRARY_UPDATES_ACTION_REMOVE: "Remove",
        GAME_LIBRARY_UPDATES_ACTION_MOVE_UP: "Move Up",
        GAME_LIBRARY_NOT_APPLICABLE: "N/A",
        GAME_LIBRARY_LIST_HEADER_NAME: "Name",
        GAME_LIBRARY_LIST_HEADER_PLATFORM: "Platform",
        GAME_LIBRARY_LIST_HEADER_LAST_PLAYED: "Last Played",
        GAME_LIBRARY_UPDATES_HEADER_DISK: "Disk",
        GAME_LIBRARY_UPDATES_HEADER_NETWORK: "Network",
        GAME_LIBRARY_NEW: "new!",
        GAME_LIBRARY_PRIVATE_TOOLTIP: "Playing Status Hidden",
        GAME_LIBRARY_OVERLAY_DISABLED_TOOLTIP: "Overlay Disabled",
        GAME_LIBRARY_TIME_PLAYED_NONE: "never played",
        GAME_LIBRARY_TIME_PLAYED_SECONDS:
          "!!{time}!!  {time, plural, =1 {second} other {seconds}}",
        GAME_LIBRARY_TIME_PLAYED_MINUTES:
          "!!{time}!!  {time, plural, =1 {minute} other {minutes}}",
        GAME_LIBRARY_TIME_PLAYED_HOURS:
          "!!{time}!!  {time, plural, =1 {hour} other {hours}}",
        GAME_LIBRARY_LAST_PLAYED_NONE: "never played",
        GAME_LIBRARY_LAST_PLAYED_PLAYING_NOW: "now playing",
        GAME_LIBRARY_LAST_PLAYED_JUST_NOW: "just now",
        GAME_LIBRARY_LAST_PLAYED_MINUTES:
          "{time, plural, =1 {# minute} other {# minutes}} ago",
        GAME_LIBRARY_LAST_PLAYED_HOURS:
          "{time, plural, =1 {# hour} other {# hours}} ago",
        GAME_LIBRARY_LAST_PLAYED_DAYS:
          "{time, plural, =1 {yesterday} other {# days ago}}",
        GAME_LIBRARY_LAST_PLAYED_WEEKS:
          "{time, plural, =1 {last week} other {# weeks ago}}",
        GAME_LIBRARY_LAST_PLAYED_MONTHS:
          "{time, plural, =1 {last month} other {# months ago}}",
        GAME_LIBRARY_LAST_PLAYED_YEARS:
          "{time, plural, =1 {last year} other {# years ago}}",
        GAME_LIBRARY_NOTIFICATION_GAME_INSTALLED_TITLE: "Ready to Play",
        GAME_LIBRARY_NOTIFICATION_GAME_INSTALLED_BODY:
          "!!{name}!! finished installing. Have fun!",
        GAME_LAUNCH_FAILED_LAUNCH_TARGET_NOT_FOUND:
          "Failed to launch game. Game executable was not found.",
        APPLICATION_CONTEXT_MENU_APPLICATION_ID: "Application ID",
        APPLICATION_CONTEXT_MENU_BRANCH_ID: "Branch ID",
        APPLICATION_CONTEXT_MENU_SKU_ID: "SKU ID",
        APPLICATION_INSTALLATION_MODAL_TITLE: "Install game",
        APPLICATION_INSTALLATION_MODAL_LOCATION: "Install location",
        APPLICATION_INSTALLATION_MODAL_SELECT_DIRECTORY: "Select a directory",
        APPLICATION_INSTALLATION_MODAL_NO_PERMISSION:
          "Unfortunately, we can't install this here. Choose another spot.",
        APPLICATION_INSTALLATION_MODAL_NOT_ENOUGH_SPACE:
          "Not enough disk space",
        APPLICATION_INSTALLATION_MODAL_DIRECTORY_WITH_SPACE:
          "!!{path}!! ({size} available)",
        APPLICATION_INSTALLATION_SPACE_USED: "{used} of disk space used",
        APPLICATION_STORE_LINK_COPIED: "Link Copied!",
        APPLICATION_STORE_BUY: "Buy",
        APPLICATION_STORE_BUY_GIFT: "Buy Gift",
        APPLICATION_STORE_BUY_AS_GIFT: "Buy as Gift",
        APPLICATION_STORE_BUY_FOR_PRICE: "Buy for !!{price}!!",
        APPLICATION_STORE_PREORDER: "Preorder",
        APPLICATION_STORE_PREORDER_AS_GIFT: "Preorder as Gift",
        APPLICATION_STORE_PREORDER_FOR_PRICE: "Preorder for !!{price}!!",
        APPLICATION_STORE_COMING_SOON: "Coming Soon",
        APPLICATION_STORE_RESTRICTED: "Unavailable in your region",
        APPLICATION_STORE_FREE_WITH_PREMIUM: "Free with Nitro",
        APPLICATION_STORE_FREE: "Free",
        APPLICATION_STORE_IN_LIBRARY: "In library",
        APPLICATION_STORE_GET_PREMIUM: "Subscribe",
        APPLICATION_STORE_FIRST_ON_DISCORD: "First On Discord",
        APPLICATION_STORE_ABOUT_HEADER: "About !!{name}!!",
        APPLICATION_STORE_THE_GAME_AWARDS_WINNER: "The Game Awards 2018 Winner",
        APPLICATION_STORE_LISTING_PURCHASE_GENERIC_ERROR:
          "Something went wrong. Please try again later or contact support.",
        APPLICATION_STORE_LISTING_PURCHASE_GENERIC_ERROR_SHORT:
          "Something went wrong.",
        APPLICATION_STORE_LISTING_PURCHASE_RATE_LIMIT_ERROR:
          "Woah there! You're adding games too fast. Give us some time to catch up and then try again.",
        APPLICATION_STORE_LISTING_PURCHASE_RATE_LIMIT_ERROR_SHORT:
          "Too fast! Wait a bit and try again.",
        APPLICATION_STORE_LISTING_SELECT_EDITION: "Select Edition",
        APPLICATION_STORE_PURCHASE_HEADER_DISTRIBUTION_APPLICATION: "Buy Game",
        APPLICATION_STORE_PURCHASE_HEADER_DISTRIBUTION_DLC: "Buy DLC",
        APPLICATION_STORE_PURCHASE_HEADER_DISTRIBUTION_CONSUMABLE:
          "Buy In-App Item",
        APPLICATION_STORE_PURCHASE_HEADER_DISTRIBUTION_BUNDLE: "Buy Bundle",
        APPLICATION_STORE_PURCHASE_HEADER_FREE_APPLICATION: "Get Game",
        APPLICATION_STORE_PURCHASE_HEADER_FREE_DLC: "Get DLC",
        APPLICATION_STORE_PURCHASE_HEADER_FREE_CONSUMABLE: "Get In-App Item",
        APPLICATION_STORE_PURCHASE_HEADER_FREE_BUNDLE: "Get Bundle",
        APPLICATION_STORE_PURCHASE_HEADER_PREORDER_APPLICATION: "Preorder Game",
        APPLICATION_STORE_PURCHASE_HEADER_PREORDER_DLC: "Preorder DLC",
        APPLICATION_STORE_PURCHASE_HEADER_PREORDER_CONSUMABLE:
          "Preorder In-App Item",
        APPLICATION_STORE_PURCHASE_HEADER_PREORDER_BUNDLE: "Preorder Bundle",
        APPLICATION_STORE_PURCHASE_HEADER_PREORDER_ENTITLED: "Coming Soon",
        APPLICATION_STORE_PURCHASE_HEADER_TIME_LEFT_UNTIL_RELEASE:
          "Time Left Until Release",
        APPLICATION_STORE_PURCHASE_AVAILABLE_DATE:
          "Available !!{releaseDate}!!",
        APPLICATION_STORE_PURCHASE_IN_LIBRARY: "In library",
        APPLICATION_STORE_PURCHASE_IN_LIBRARY_HIDDEN: "In library (hidden)",
        APPLICATION_STORE_PURCHASE_HEADER_GAMES_DIFFERENT: "Games",
        APPLICATION_STORE_PURCHASE_HEADER_GAMES_SAME: "More Games",
        APPLICATION_STORE_PURCHASE_HEADER_DLC_DIFFERENT: "Downloadable Content",
        APPLICATION_STORE_PURCHASE_HEADER_DLC_SAME: "More Downloadable Content",
        APPLICATION_STORE_PURCHASE_HEADER_CONSUMABLES_DIFFERENT: "In-App Item",
        APPLICATION_STORE_PURCHASE_HEADER_CONSUMABLES_SAME: "More In-App Items",
        APPLICATION_STORE_PURCHASE_HEADER_BUNDLES_DIFFERENT: "Bundles",
        APPLICATION_STORE_PURCHASE_HEADER_BUNDLES_SAME: "More Bundles",
        APPLICATION_STORE_PURCHASE_HEADER_FIRST_ON: "First On",
        APPLICATION_STORE_WARNING_RESTRICTED_IN_REGION_TITLE:
          "Restricted in Country",
        APPLICATION_STORE_WARNING_RESTRICTED_IN_REGION_DESCRIPTION:
          "This game is not available in your country. [Learn about country restrictions.]({helpArticle})",
        APPLICATION_STORE_WARNING_REQUIRES_DESKTOP_APP_TITLE:
          "Requires Desktop App",
        APPLICATION_STORE_WARNING_REQUIRES_DESKTOP_APP_DESCRIPTION:
          "In order to play this game, you must have the Discord $[desktop app](downloadHook) installed.",
        APPLICATION_STORE_WARNING_UNAVAILABLE_WINDOWS_TITLE:
          "Unavailable for Windows",
        APPLICATION_STORE_WARNING_UNAVAILABLE_MAC_OS_TITLE:
          "Unavailable for macOS",
        APPLICATION_STORE_WARNING_UNAVAILABLE_LINUX_TITLE:
          "Unavailable for Linux",
        APPLICATION_STORE_WARNING_UNAVAILABLE_LINUX_DESCRIPTION:
          "Discord does not yet support Linux for games. You can still purchase it and play on supported operating systems.",
        APPLICATION_STORE_WARNING_UNAVAILABLE_OS_DESCRIPTION:
          "This game is not available for your current operating system. You can still purchase it and play on supported operating systems.",
        APPLICATION_STORE_WARNING_DLC_REQUIRES_BASE_APPLICATION_TITLE:
          "Downloadable Content",
        APPLICATION_STORE_WARNING_DLC_REQUIRES_BASE_APPLICATION_DESCRIPTION:
          "This DLC requires you to own $[!!{baseName}!!](baseHook) on Discord in order to play. [Learn about DLC.]({helpArticle})",
        APPLICATION_STORE_WARNING_EARLY_ACCESS_TITLE: "Early Access",
        APPLICATION_STORE_WARNING_EARLY_ACCESS_DESCRIPTION:
          "Provide feedback and help the devs build a game you want to play! Still in development. [Learn more about early access.]({helpArticle})",
        APPLICATION_STORE_WARNING_UNAVAILABLE_IN_LANGUAGE_TITLE:
          "Your Language is not Supported",
        APPLICATION_STORE_WARNING_UNAVAILABLE_IN_LANGUAGE_DESCRIPTION:
          "This game does not feature any audio, interface, or subtitle support for your currently selected language.",
        APPLICATION_STORE_SECTION_TITLE_VERIFIED_GUILD:
          "Verified Discord Server",
        APPLICATION_STORE_SECTION_TITLE_SYSTEM_REQUIREMENTS:
          "System Requirements",
        APPLICATION_STORE_SECTION_TITLE_DETAILS: "Details",
        APPLICATION_STORE_SECTION_TITLE_RECOMMENDATION: "Why you might like it",
        APPLICATION_STORE_SECTION_TITLE_FEATURES: "Features",
        APPLICATION_STORE_SECTION_TITLE_RATINGS: "Rating",
        APPLICATION_STORE_SECTION_TITLE_COPYRIGHT: "Copyright",
        APPLICATION_STORE_RECOMMENDATION_NOW_PLAYING_SINGLE:
          "$[!!{user1}!!](user1Hook) is playing right now",
        APPLICATION_STORE_RECOMMENDATION_NOW_PLAYING_DOUBLE:
          "$[!!{user1}!!](user1Hook) and $[!!{user2}!!](user2Hook) are playing right now",
        APPLICATION_STORE_RECOMMENDATION_NOW_PLAYING_OTHER:
          "**{count, plural, one {1 person} other {{count} people}} you know** are playing right now",
        APPLICATION_STORE_RECOMMENDATION_RECENTLY_PLAYED_SINGLE:
          "$[!!{user1}!!](user1Hook) has played recently",
        APPLICATION_STORE_RECOMMENDATION_RECENTLY_PLAYED_DOUBLE:
          "$[!!{user1}!!](user1Hook) and $[!!{user2}!!](user2Hook) have played recently",
        APPLICATION_STORE_RECOMMENDATION_RECENTLY_PLAYED_OTHER:
          "**{count, plural, one {1 person} other {{count} people}} you know** have played recently",
        APPLICATION_STORE_RECOMMENDATION_EVER_PLAYED_SINGLE:
          "$[!!{user1}!!](user1Hook) has played before",
        APPLICATION_STORE_RECOMMENDATION_EVER_PLAYED_DOUBLE:
          "$[!!{user1}!!](user1Hook) and $[!!{user2}!!](user2Hook) have played before",
        APPLICATION_STORE_RECOMMENDATION_EVER_PLAYED_OTHER:
          "**{count, plural, one {1 person} other {{count} people}} you know** have played before",
        APPLICATION_STORE_STAFF_PICK: "Discord Staff Pick",
        APPLICATION_STORE_EARLY_ACCESS: "Early Access",
        APPLICATION_STORE_DESCRIPTION_READ_MORE: "Read More",
        APPLICATION_STORE_DESCRIPTION_READ_LESS: "Read Less",
        APPLICATION_STORE_EXPAND_DOWNLOADABLE_CONTENT: "Show All DLC",
        APPLICATION_STORE_SINGLE_PLAYER: "Single Player",
        APPLICATION_STORE_LOCAL_MULTIPLAYER: "Local Multiplayer",
        APPLICATION_STORE_ONLINE_MULTIPLAYER: "Online Multiplayer",
        APPLICATION_STORE_PVP: "PvP",
        APPLICATION_STORE_LOCAL_COOP: "Local Cooperative",
        APPLICATION_STORE_ONLINE_COOP: "Online Cooperative",
        APPLICATION_STORE_CROSS_PLATFORM: "Cross Platform",
        APPLICATION_STORE_RICH_PRESENCE: "Rich Presence",
        APPLICATION_STORE_DISCORD_GAME_INVITES: "Discord Game Invites",
        APPLICATION_STORE_SPECTATOR_MODE: "Spectator Mode",
        APPLICATION_STORE_CONTROLLER_SUPPORT: "Controller Support",
        APPLICATION_STORE_CLOUD_SAVES: "Cloud Saves",
        APPLICATION_STORE_SECURE_NETWORKING: "Secure Networking",
        APPLICATION_STORE_SINGLE_PLAYER_TOOLTIP:
          "For when you're tired of other people!",
        APPLICATION_STORE_LOCAL_MULTIPLAYER_TOOLTIP:
          "Yes, we want you to sit next to people.",
        APPLICATION_STORE_ONLINE_MULTIPLAYER_TOOLTIP:
          "For when you need strangers in your life!",
        APPLICATION_STORE_PVP_TOOLTIP: "How's your anger management?",
        APPLICATION_STORE_LOCAL_COOP_TOOLTIP: "Because fist bumps are great.",
        APPLICATION_STORE_ONLINE_COOP_TOOLTIP:
          "For when you need to chill on that PVP grind.",
        APPLICATION_STORE_CROSS_PLATFORM_TOOLTIP: "The gates are open!",
        APPLICATION_STORE_RICH_PRESENCE_TOOLTIP:
          "Show detailed stats about your game experience on your profile.",
        APPLICATION_STORE_DISCORD_GAME_INVITES_TOOLTIP:
          "Send game invites directly through Discord.",
        APPLICATION_STORE_SPECTATOR_MODE_TOOLTIP:
          "For when your friends are eating dinner while you finish a match.",
        APPLICATION_STORE_CONTROLLER_SUPPORT_TOOLTIP:
          'This should really say "play with a controller."',
        APPLICATION_STORE_CLOUD_SAVES_TOOLTIP:
          "We store your save data for you. Access it anywhere from Discord!",
        APPLICATION_STORE_SECURE_NETWORKING_TOOLTIP:
          "This game's networking is on our secure network, rather than a third party.",
        CLOUD_SYNC_MODAL_OR: "OR",
        CLOUD_SYNC_MODAL_CONFLICT_HEADER: "Cloud Save Conflict",
        CLOUD_SYNC_MODAL_CONFLICT_DESCRIPTION:
          "Local save files conflict with cloud save files for **{applicationName}**. Please choose which save you'd like to use before launching the game.",
        CLOUD_SYNC_MODAL_CONFLICT_LAST_MODIFIED: "Last modified:",
        CLOUD_SYNC_MODAL_CONFLICT_CHOICE_DOWNLOAD: "Download Cloud Saves",
        CLOUD_SYNC_MODAL_CONFLICT_CHOICE_UPLOAD: "Upload Local Saves",
        CLOUD_SYNC_ICON_TOOLTIP_SUPPORTED: "Supports Cloud Saves",
        CLOUD_SYNC_ICON_TOOLTIP_PLANNING: "Checking Cloud Saves",
        CLOUD_SYNC_ICON_TOOLTIP_PREPARING: "Preparing Cloud Saves",
        CLOUD_SYNC_ICON_TOOLTIP_PUSHING: "Uploading Cloud Saves",
        CLOUD_SYNC_ICON_TOOLTIP_PULLING: "Downloading Cloud Saves",
        CLOUD_SYNC_ICON_TOOLTIP_DONE: "Cloud Save Sync Completed",
        CLOUD_SYNC_MODAL_ERROR_HEADER: "Unable to sync cloud saves",
        CLOUD_SYNC_MODAL_ERROR_DESCRIPTION:
          "An issue is preventing Discord from syncing cloud saves for **{applicationName}.** Do you want to play anyway?",
        APPLICATION_STORE_SPECS_MINIMUM: "Minimum",
        APPLICATION_STORE_SPECS_RECOMMENDED: "Recommended",
        APPLICATION_STORE_SPECS_OS: "Operating System",
        APPLICATION_STORE_SPECS_CPU: "CPU",
        APPLICATION_STORE_SPECS_MEMORY: "Memory",
        APPLICATION_STORE_SPECS_MEMORY_VALUE: "{size} RAM",
        APPLICATION_STORE_SPECS_VIDEO: "Video",
        APPLICATION_STORE_SPECS_STORAGE: "Storage",
        APPLICATION_STORE_SPECS_SOUND: "Sound",
        APPLICATION_STORE_SPECS_NETWORK: "Network",
        APPLICATION_STORE_SPECS_NOTES: "Notes",
        APPLICATION_STORE_DETAILS_RELEASE_DATE: "Release Date",
        APPLICATION_STORE_DETAILS_GENRES: "Genres",
        APPLICATION_STORE_DETAILS_DEVELOPER: "Developer",
        APPLICATION_STORE_DETAILS_PUBLISHER: "Publisher",
        APPLICATION_STORE_NEW_RELEASE: "New release",
        APPLICATION_STORE_FREE_PREMIUM_CONTENT: "Free Nitro Content",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_ALCOHOL_REFERENCE:
          "Alcohol Reference",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_ANIMATED_BLOOD:
          "Animated Blood",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_BLOOD: "Blood",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_BLOOD_AND_GORE:
          "Blood and Gore",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_CARTOON_VIOLENCE:
          "Cartoon Violence",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_COMIC_MISCHIEF:
          "Comic Mischief",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_CRUDE_HUMOR: "Crude Humor",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_DRUG_REFERENCE:
          "Drug Reference",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_FANTASY_VIOLENCE:
          "Fantasy Violence",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_INTENSE_VIOLENCE:
          "Intense Violence",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_LANGUAGE: "Language",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_LYRICS: "Lyrics",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_MATURE_HUMOR: "Mature Humor",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_NUDITY: "Nudity",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_PARTUAL_NUDITY:
          "Partial Nudity",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_REAL_GAMBLING:
          "Real Gambling",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_SEXUAL_CONTENT:
          "Sexual Content",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_SEXUAL_THEMES:
          "Sexual Themes",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_SEXUAL_VIOLENCE:
          "Sexual Violence",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_SIMULATED_GAMBLING:
          "Simulated Gambling",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_STRONG_LANGUAGE:
          "Strong Language",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_STRONG_LYRICS:
          "Strong Lyrics",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_STRONG_SEXUAL_CONTENT:
          "Strong Sexual Content",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_SUGGESTIVE_THEMES:
          "Suggestive Themes",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_TOBACCO_REFERENCE:
          "Tobacco Reference",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_USE_OF_ALCOHOL:
          "Use Of Alcohol",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_USE_OF_DRUGS: "Use Of Drugs",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_USE_OF_TOBACCO:
          "Use Of Tobacco",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_VIOLENCE: "Violence",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_MILD_BLOOD: "Mild Blood",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_MILD_CARTOON_VIOLENCE:
          "Mild Cartoon Violence",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_MILD_FANTASY_VIOLENCE:
          "Mild Fantasy Violence",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_MILD_LANGUAGE:
          "Mild Language",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_MILD_LYRICS: "Mild Lyrics",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_MILD_SEXUAL_THEMES:
          "Mild Sexual Themes",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_MILD_SUGGESTIVE_THEMES:
          "Mild Suggestive Themes",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_MILD_VIOLENCE:
          "Mild Violence",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_ANIMATED_VIOLENCE:
          "Animated Violence",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_VIOLENT_REFERENCES:
          "Violent References",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_IN_GAME_PURCHASES:
          "In-Game Purchases",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_USERS_INTERACT:
          "Users Interact",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_SHARES_LOCATION:
          "Shares Location",
        APPLICATION_STORE_RATING_DESCRIPTORS_ESRB_UNRESTRICTED_INTERNET:
          "Unrestricted Internet",
        APPLICATION_STORE_RATING_DESCRIPTORS_PEGI_VIOLENCE: "Violence",
        APPLICATION_STORE_RATING_DESCRIPTORS_PEGI_BAD_LANGUAGE: "Bad Language",
        APPLICATION_STORE_RATING_DESCRIPTORS_PEGI_FEAR: "Fear",
        APPLICATION_STORE_RATING_DESCRIPTORS_PEGI_GAMBLING: "Gambling",
        APPLICATION_STORE_RATING_DESCRIPTORS_PEGI_SEX: "Sex",
        APPLICATION_STORE_RATING_DESCRIPTORS_PEGI_DRUGS: "Drugs",
        APPLICATION_STORE_RATING_DESCRIPTORS_PEGI_DISCRIMINATION:
          "Discrimination",
        APPLICATION_STORE_PURCHASE_APPLICATION: "Buy Game",
        APPLICATION_STORE_PURCHASE_DLC: "Buy DLC",
        APPLICATION_STORE_PURCHASE_CONSUMABLE: "Buy In-App Item",
        APPLICATION_STORE_PURCHASE_BUNDLE: "Buy Bundle",
        APPLICATION_STORE_PURCHASE_IAP: "In-App Purchase",
        APPLICATION_STORE_PURCHASE_CONFIRMATION_TITLE_1: "Get excited!",
        APPLICATION_STORE_PURCHASE_CONFIRMATION_TITLE_2: "Complete!",
        APPLICATION_STORE_PURCHASE_CONFIRMATION_TITLE_3: "Finished!",
        APPLICATION_STORE_PURCHASE_CONFIRMATION_TITLE_4: "Congrats!",
        APPLICATION_STORE_PURCHASE_GIFT_CONFIRMATION_TITLE:
          "Gift ready for delivery",
        APPLICATION_STORE_PURCHASE_GIFT_AND_MESSAGE_CONFIRMATION_TITLE:
          "Your gift has been sent to",
        APPLICATION_STORE_PURCHASE_CONFIRMATION_BLURB:
          "You can install !!{name}!! below and launch it from the library tab once it finishes. We hope you enjoy it!",
        APPLICATION_STORE_BUNDLE_PURCHASE_CONFIRMATION_BLURB:
          "!!{name}!! was purchased and its contents are now available in your library.",
        APPLICATION_STORE_GIFT_PURCHASE_CONFIRMATION_BLURB:
          "Send this link to a friend to give them the game. We hope they enjoy it!",
        APPLICATION_STORE_GIFT_PURCHASE_CONFIRM_SUBSCRIPTION_MONTHLY:
          "You're so generous! Send this gift to a friend to give them {intervalCount, plural, =1 {# month} other {# months}} of {skuName}. We hope they enjoy!",
        APPLICATION_STORE_GIFT_PURCHASE_AND_MESSAGE_CONFIRM_SUBSCRIPTION_MONTHLY:
          "You're so generous! You've given {intervalCount, plural, =1 {# month} other {# months}} of {skuName}. We hope they enjoy!",
        APPLICATION_STORE_SEASONAL_GIFT_PURCHASE_AND_MESSAGE_CONFIRM_SUBSCRIPTION_MONTHLY:
          "You've gifted {intervalCount, plural, =1 {# month} other {# months}} of {skuName}. We know they'll enjoy your holiday surprise!",
        APPLICATION_STORE_GIFT_PURCHASE_FAILURE_GENERIC_BLURB:
          "We tried to deliver your gift but Wumpus got lost. Share the gift code link to try again!",
        APPLICATION_STORE_GIFT_PURCHASE_AND_MESSAGE_FAILED:
          "Uh-oh! Something went wrong!",
        APPLICATION_STORE_GIFT_PURCHASE_CONFIRM_SUBSCRIPTION_YEARLY:
          "You're so generous! Send this gift to a friend to give them {intervalCount, plural, =1 {# year} other {# years}} of {skuName}. We hope they enjoy!",
        APPLICATION_STORE_GIFT_PURCHASE_AND_MESSAGE_CONFIRM_SUBSCRIPTION_YEARLY:
          "You're so generous! You've given {intervalCount, plural, =1 {# year} other {# years}} of {skuName}. We hope they enjoy!",
        APPLICATION_STORE_SEASONAL_GIFT_PURCHASE_AND_MESSAGE_CONFIRM_SUBSCRIPTION_YEARLY:
          "You've gifted {intervalCount, plural, =1 {# year} other {# years}} of {skuName}. We know they'll enjoy your holiday surprise!",
        APPLICATION_STORE_GIFT_PURCHASE_CONFIRM_MONTHLY_MOBILE:
          "You're so generous! Send this gift to a friend to give them {intervalCount, plural, =1 {# month} other {# months}} of {name}.",
        APPLICATION_STORE_GIFT_PURCHASE_CONFIRM_YEARLY_MOBILE:
          "You're so generous! Send this gift to a friend to give them {intervalCount, plural, =1 {# year} other {# years}} of {name}.",
        APPLICATION_STORE_GIFT_PURCHASE_CONFIRMATION_SUBTEXT:
          "This link is included in your confirmation email and can be found and managed in your [gift inventory](onInventoryClick). Gift link expires after 48 hours.",
        APPLICATION_STORE_GIFT_PURCHASE_CONFIRMATION_SUBTEXT_WO_LINK:
          "This link is included in your confirmation email and can be found and managed in your gift inventory. Gift link expires after 48 hours.",
        APPLICATION_STORE_GIFT_PURCHASE_CONFIRMATION_SUBTEXT_NO_FORMAT:
          "Expires in 48 hours; you can renew expired links in User Settings > Gift Inventory. Be sure to only share a gift link with your intended recipient.",
        APPLICATION_STORE_GIFT_PURCHASE_GIFT_RECIPIENT_SECTION_LABEL:
          "Gift Recipient",
        APPLICATION_STORE_GIFT_PURCHASE_GIFT_RECIPIENT_SUBTEXT:
          "Gift will be delivered to recipient via direct message.",
        APPLICATION_STORE_GIFT_PURCHASE_PRIVATE_LINK: "Private Gift Link",
        APPLICATION_STORE_GIFT_PURCHASE_GIFT_RECIPIENT_SELECT_PLACEHOLDER:
          "Type your friend’s name",
        APPLICATION_STORE_GIFT_PURCHASE_GIFT_SEND_NOW_BUTTON: "Send Now",
        APPLICATION_STORE_GIFT_PURCHASE_GIFT_ERROR_SENDING_LINK:
          "Your message could not be delivered to this recipient.",
        APPLICATION_STORE_PURCHASE_INSTALL_GAME: "Install Game",
        APPLICATION_STORE_PURCHASE_GAME_CURRENT_OS_UNSUPPORTED:
          "Your platform is not supported by this game.",
        APPLICATION_STORE_PURCHASE_TEST_MODE:
          "You are in test mode for this application and will not be charged.",
        APPLICATION_STORE_PURCHASE_GIFT_ONLY:
          "You already own this application, only gifts can be purchased.",
        APPLICATION_STORE_PURCHASE_GIFT_ONLY_UNGIFTABLE:
          "You can only purchase a gift and unfortunately we do not support gifting for this payment method.",
        APPLICATION_STORE_PURCHASE_CONFIRMATION_UNSUPPORTED_OS:
          "!!{name}!! can be downloaded the next time you launch the {operatingSystem} Discord app. We hope you enjoy it!",
        APPLICATION_STORE_PURCHASE_WARNING_PREORDER:
          "You are preordering this game. It will be available !!{date}!!!",
        APPLICATION_STORE_PREORDER_PURCHASE_CONFIRMATION_BLURB:
          "!!{applicationName}!! will be ready to install on !!{date}!!. For now you can stare longingly at it in your library.",
        APPLICATION_IAP_PURCHASE_RETURN_TO_GAME: "Return to Game",
        APPLICATION_PREORDER_PURCHASE_CONFIRMATION_BUTTON: "Go to Library",
        APPLICATION_ADDON_PURCHASE_CONFIRMATION_BLURB:
          "!!{itemName}!! has been purchased and will be available in !!{applicationName}!!.",
        APPLICATION_ENTITLEMENT_CODE_REDEMPTION_PROMPT:
          "Received a code for Nitro or a game? That's exciting! Enter it below:",
        APPLICATION_ENTITLEMENT_CODE_REDEMPTION_REDEEM: "Redeem",
        APPLICATION_ENTITLEMENT_CODE_REDEMPTION_INVALID: "Invalid code entered",
        APPLICATION_ENTITLEMENT_CODE_REDEMPTION_PROMOTION:
          "This looks like a promotion code. [Click here](promoLink) to redeem.",
        APPLICATION_STORE_GENRE_ACTION: "Action",
        APPLICATION_STORE_GENRE_ACTION_RPG: "Action RPG",
        APPLICATION_STORE_GENRE_BRAWLER: "Beat 'Em Up/Brawler",
        APPLICATION_STORE_GENRE_HACK_AND_SLASH: "Hack and Slash",
        APPLICATION_STORE_GENRE_PLATFORMER: "Platformer",
        APPLICATION_STORE_GENRE_STEALTH: "Stealth",
        APPLICATION_STORE_GENRE_SURVIVAL: "Survival",
        APPLICATION_STORE_GENRE_ADVENTURE: "Adventure",
        APPLICATION_STORE_GENRE_ACTION_ADVENTURE: "Action-Adventure",
        APPLICATION_STORE_GENRE_METROIDVANIA: "Metroidvania",
        APPLICATION_STORE_GENRE_OPEN_WORLD: "Open-World",
        APPLICATION_STORE_GENRE_PSYCHOLOGICAL_HORROR: "Psychological Horror",
        APPLICATION_STORE_GENRE_SANDBOX: "Sandbox",
        APPLICATION_STORE_GENRE_SURVIVAL_HORROR: "Survival Horror",
        APPLICATION_STORE_GENRE_VISUAL_NOVEL: "Visual Novel",
        APPLICATION_STORE_GENRE_DRIVING_RACING: "Driving/Racing",
        APPLICATION_STORE_GENRE_VEHICULAR_COMBAT: "Vehicular Combat",
        APPLICATION_STORE_GENRE_MASSIVELY_MULTIPLAYER: "Massively Multiplayer",
        APPLICATION_STORE_GENRE_MMORPG: "MMORPG",
        APPLICATION_STORE_GENRE_ROLE_PLAYING: "Role-Playing",
        APPLICATION_STORE_GENRE_DUNGEON_CRAWLER: "Dungeon Crawler",
        APPLICATION_STORE_GENRE_ROGUELIKE: "Roguelike",
        APPLICATION_STORE_GENRE_SHOOTER: "Shooter",
        APPLICATION_STORE_GENRE_LIGHT_GUN: "Light-Gun",
        APPLICATION_STORE_GENRE_SHOOT_EM_UP: "Shoot 'Em Up",
        APPLICATION_STORE_GENRE_FPS: "FPS",
        APPLICATION_STORE_GENRE_DUAL_JOYSTICK_SHOOTER: "Dual-Joystick Shooter",
        APPLICATION_STORE_GENRE_SIMULATION: "Simulation",
        APPLICATION_STORE_GENRE_FLIGHT_SIMULATOR: "Flight Simulator",
        APPLICATION_STORE_GENRE_TRAIN_SIMULATOR: "Train Simulator",
        APPLICATION_STORE_GENRE_LIFE_SIMULATOR: "Life Simulator",
        APPLICATION_STORE_GENRE_FISHING: "Fishing",
        APPLICATION_STORE_GENRE_SPORTS: "Sports",
        APPLICATION_STORE_GENRE_BASEBALL: "Baseball",
        APPLICATION_STORE_GENRE_BASKETBALL: "Basketball",
        APPLICATION_STORE_GENRE_BILLIARDS: "Billiards",
        APPLICATION_STORE_GENRE_BOWLING: "Bowling",
        APPLICATION_STORE_GENRE_BOXING: "Boxing",
        APPLICATION_STORE_GENRE_FOOTBALL: "Football",
        APPLICATION_STORE_GENRE_GOLF: "Golf",
        APPLICATION_STORE_GENRE_HOCKEY: "Hockey",
        APPLICATION_STORE_GENRE_SKATEBOARDING_SKATING: "Skateboarding/Skating",
        APPLICATION_STORE_GENRE_SNOWBOARDING_SKIING: "Snowboarding/Skiing",
        APPLICATION_STORE_GENRE_SOCCER: "Soccer",
        APPLICATION_STORE_GENRE_TRACK_FIELD: "Track & Field",
        APPLICATION_STORE_GENRE_SURFING_WAKEBOARDING: "Surfing/Wakeboarding",
        APPLICATION_STORE_GENRE_WRESTLING: "Wrestling",
        APPLICATION_STORE_GENRE_STRATEGY: "Strategy",
        APPLICATION_STORE_GENRE_FOUR_X: "4X",
        APPLICATION_STORE_GENRE_ARTILLERY: "Artillery",
        APPLICATION_STORE_GENRE_RTS: "RTS",
        APPLICATION_STORE_GENRE_TOWER_DEFENSE: "Tower Defense",
        APPLICATION_STORE_GENRE_TURN_BASED_STRATEGY: "Turn Based Strategy",
        APPLICATION_STORE_GENRE_WARGAME: "Wargame",
        APPLICATION_STORE_GENRE_MOBA: "MOBA",
        APPLICATION_STORE_GENRE_FIGHTING: "Fighting",
        APPLICATION_STORE_GENRE_PUZZLE: "Puzzle",
        APPLICATION_STORE_GENRE_CARD_GAME: "Card Game",
        APPLICATION_STORE_GENRE_EDUCATION: "Education",
        APPLICATION_STORE_GENRE_FITNESS: "Fitness",
        APPLICATION_STORE_GENRE_GAMBLING: "Gambling",
        APPLICATION_STORE_GENRE_MUSIC_RHYTHM: "Music/Rhythm",
        APPLICATION_STORE_GENRE_PARTY_MINI_GAME: "Party/Mini-Game",
        APPLICATION_STORE_GENRE_PINBALL: "Pinball",
        APPLICATION_STORE_GENRE_TRIVIA_BOARD_GAME: "Trivia/Board Game",
        APPLICATION_STORE_GENRE_MISCELLANEOUS: "Other",
        APPLICATION_STORE_COUNTDOWN_SECONDS: "sec",
        APPLICATION_STORE_COUNTDOWN_MINUTES: "min",
        APPLICATION_STORE_COUNTDOWN_HOURS: "hrs",
        APPLICATION_STORE_COUNTDOWN_DAYS: "days",
        APPLICATION_BRANCH_NAME_MASTER: "Master",
        APPLICATION_BRANCH_NAME_UNKNOWN: "Unknown",
        NEWS_CHANNEL_PUBLISH: "Publish",
        NEWS_CHANNEL_PUBLISHED: "Published",
        NEWS_CHANNEL_PUBLISH_BUMP: "Share with your followers!",
        NEWS_CHANNEL_PUBLISH_BUMP_HIDE_PERMANENTLY: "Don't show again",
        DISPATCH_ERROR_MODAL_HEADER: "Discord Dispatch Error",
        DISPATCH_ERROR_MODAL_DESCRIPTION:
          "Something went wrong. [Get help here.]({link})",
        DISPATCH_ERROR_MODAL_BODY:
          "If the problem persists, create a support ticket and copy the message content below.",
        DISPATCH_ERROR_MODAL_ERROR_LABEL: "Error Message (Copy and paste me)",
        DISPATCH_ERROR_MODAL_OPEN_TICKET: "Open a ticket",
        MISSING_ENTITLEMENT_MODAL_HEADER: "Unable to launch {applicationName}",
        MISSING_ENTITLEMENT_MODAL_HEADER_UNKNOWN_APPLICATION:
          "Unable to launch game",
        MISSING_ENTITLEMENT_MODAL_BODY:
          "Discord cannot launch **{applicationName}** for you because you've lost entitlement to it. This can be for a variety of reasons, such as a lapsed Nitro subscription, a refund, or if **{applicationName}** has been removed from the Discord store. [Please see this help article for more information or support.]({supportArticleURL})",
        MISSING_ENTITLEMENT_MODAL_BODY_UNKNOWN_APPLICATION:
          "Discord cannot launch this game for you because you've lost entitlement to it. This can be for a variety of reasons, such as a lapsed Nitro subscription, a refund, or if the game has been removed from the Discord store. [Please see this help article for more information or support.]({supportArticleURL})",
        SPOTIFY_PREMIUM_UPGRADE_HEADER: "*Record Scratch*",
        SPOTIFY_PREMIUM_UPGRADE_BODY:
          "Sorry pal, looks like you aren't a Spotify Premium member! Premium members are able to listen along with other Spotify listeners.",
        SPOTIFY_PREMIUM_UPGRADE_BUTTON: "Upgrade Spotify",
        EXPERIMENT_MOBILE_ONLY_USER_HEADER: "Howdy Friend!",
        EXPERIMENT_MOBILE_ONLY_USER_TEXT1:
          "Why don’t you saddle up with Discord for your desktop computer? Here’s the link to grab the desktop app: {downloadUrl}",
        GROUP_OWNER: "Group Owner",
        ACTIVE_ON_MOBILE: "Active on Mobile",
        FULL: "Full",
        PAGINATOR_CURRENT_PAGE: "Page !!{currentPage, number}!!",
        PAGINATOR_OF_PAGES:
          "Page !!{currentPage, number}!! of !!{numPages, number}!!",
        ATTACHMENT_PROCESSING: "Processing...",
        ATTACHMENT_PROCESSING_SERVER: "Server processing...",
        ATTACHMENT_PROCESSING_GATHERING: "Gathering wood...",
        ATTACHMENT_PROCESSING_WUMPUS: "Wumpus is working...",
        ATTACHMENT_PROCESSING_UNSURE: "Not sure about this one...",
        ATTACHMENT_PROCESSING_PYLONS: "Constructing pylons...",
        ATTACHMENT_PROCESSING_BYTES: "That's a lot of bytes",
        ATTACHMENT_PROCESSING_WEATHER: "How about that weather?",
        ATTACHMENT_PROCESSING_FILING: "Filing that away... get it?",
        ATTACHMENT_PROCESSING_CALL: "Your call is very important to us",
        ATTACHMENT_COMPRESSING: "Compressing files...",
        UPLOADING_FILES_TITLE: "Uploading...",
        SENDING_MESSAGE_TITLE: "Sending...",
        UPLOADING_LOADING_TEXT: "Your files are being prepared. Please wait.",
        UPLOAD_ERROR_TITLE: "Something went wrong",
        UPLOAD_ERROR_RETRY: "Try again later",
        UPLOAD_ERROR_DESCRIPTION: "The following files failed to upload:",
        UPLOAD_ERROR_TOO_LARGE: "File too large",
        UPLOAD_ERROR_WRONG_TYPE: "Wrong file type",
        UPLOAD_ERROR_TOO_MANY_EMOJI: "Too many emoji",
        UPLOAD_ERROR_TOO_MANY_ANIMATED_EMOJI: "Too many animated emoji",
        UPLOAD_ERROR_RATE_LIMIT: "Rate Limited",
        UPLOAD_ERROR_RESIZE_GIF: "Cannot resize GIF",
        UPLOAD_QUEUED: "Upload Queued",
        QUEUED_FILES:
          "{count, plural, =1 {{filename} queued} other {{count} Files queued}}",
        UPLOADING_FILES:
          "{count, plural, one, {Uploading 1 File} other {Uploading {count} Files}}",
        UPLOADING_FILES_FAILED:
          "{count, plural, one, {1 File Uploading Failed} other {{count} Files Uploading Failed}}",
        PREVIEW_CHANGE_LANGUAGE: "Change language",
        PREVIEW_SEARCH_LANGUAGE_PLACEHOLDER: "Search languages",
        PREVIEW_NUM_LINES: "{lines, plural, =1 {# line} other {# lines}}",
        PREVIEW_NUM_LINES_AT_LEAST:
          "More than {lines, plural, =1 {# line} other {# lines}}",
        PREVIEW_MODAL_LABEL: "Plaintext file previews",
        PREVIEW_WHOLE_FILE: "View whole file",
        PREVIEW_LINES_LEFT:
          "({lines, plural, =1 {# line} other {# lines}} left)",
        PREVIEW_BYTES_LEFT: "({formattedBytes} left)",
        EXECUTED_COMMAND_POPOUT_ATTACHMENT_OPTION_VALUE: "[attachment]",
        NUM_IMAGES: "{count, plural, one {1 image} other {{count} images}}",
        NUM_VIDEOS: "{count, plural, one {1 video} other {{count} videos}}",
        NUM_LINKS: "{count, plural, one {1 link} other {{count} links}}",
        NUM_ATTACHMENTS: "{count, plural, one {1 file} other {{count} files}}",
        MOST_POPULAR: "Most Popular",
        SPELLCHECK: "Spellcheck",
        ADD_TO_DICTIONARY: "Add to Dictionary",
        REMOVE_FROM_DICTIONARY: "Remove from Dictionary",
        LANGUAGES: "Languages",
        AUTO_SUGGEST_STICKERS: "Sticker Suggestions",
        AUTO_SUGGEST_STICKERS_DESCRIPTION:
          "Allows sticker suggestions to appear when typing messages.",
        STICKERS_IN_AUTOCOMPLETE: "Stickers in Autocomplete",
        INCLUDE_STICKER_RESULTS_IN_AUTOCOMPLETE:
          "Allows stickers to appear in your autocomplete results.",
        NUF_AGE_GATE_BODY:
          "We're so excited you're here! Before we get started please enter your birthday. [Why do I need to provide my birthday?]({helpURL})",
        NUF_COMPLETE_TITLE: "Your server is ready!",
        NUF_COMPLETE_SUBTITLE: "Welcome! You belong here",
        NUF_COMPLETE_CTA: "Take me to my server!",
        NUF_CREATE_SERVER_CUSTOMIZE_HEADER: "Customize Your Server",
        NUF_CREATE_SERVER_CUSTOMIZE_SUBHEADER:
          "Give your new server a personality with a name and an icon. You can always change it later.",
        NUF_CREATE_SERVER_BUTTON: "Create Server",
        NUF_JOIN_SERVER_TITLE_2: "Welcome to Discord!",
        NUF_JOIN_SERVER_BUTTON: "Join Server",
        NUF_DOWNLOAD_APP_BUTTON_PLATFORM: "Download for {platform}",
        NUF_ASK_FRIEND_SERVER_INVITE:
          "Ask your friends to invite you to their servers, which are places for hanging out and talking.",
        NUF_CREATE_GUILD_CTA_DESCRIPTION:
          "You can also [start your own server](onClick)",
        DATA_PRIVACY_RATE_LIMIT_TITLE: "Sorry about that",
        USAGE_STATISTICS_DISABLE_MODAL_TITLE: "Turn off some usage statistics?",
        USAGE_STATISTICS_DISABLE_MODAL_BODY:
          "If you turn this off, we’ll stop processing new data for analytics. You will lose access to new experimental features and usage-based improvements to features like voice chat. Your old data will no longer be directly tied to you. If you'd like to further assert your right to object to our processing of your data, email privacy@discord.com.",
        USAGE_STATISTICS_DISABLE_MODAL_CONFIRM: "Yes, I'm sure",
        USAGE_STATISTICS_DISABLE_MODAL_CANCEL: "No, take me back!",
        PERSONALIZATION_DISABLE_MODAL_TITLE: "Turn off customization?",
        PERSONALIZATION_DISABLE_MODAL_BODY:
          "By turning this off you lose access to things like personalized recommendations and suggestions. You won’t be able to recover them in the future!",
        PERSONALIZATION_DISABLE_MODAL_CONFIRM: "Yes, I'm sure",
        PERSONALIZATION_DISABLE_MODAL_CANCEL: "No, take me back!",
        DATA_DOWNLOAD_REQUESTED_STATUS_NOTE:
          "You've recently requested a copy of your data. You can request again on {date}.",
        RATING_REQUEST_TITLE: "Enjoying Discord?",
        RATING_REQUEST_BODY_ANDROID:
          "Head over to the Play Store and leave us a rating. Every little bit helps!",
        OVERLAY_NOTIFICATIONS_DISABLED: "Disabled",
        OVERLAY_NOTIFICATIONS_TOP_LEFT: "Top Left",
        OVERLAY_NOTIFICATIONS_TOP_RIGHT: "Top Right",
        OVERLAY_NOTIFICATIONS_BOTTOM_LEFT: "Bottom Left",
        OVERLAY_NOTIFICATIONS_BOTTOM_RIGHT: "Bottom Right",
        OVERLAY_LINK_ALERT_TITLE: "Hold Up!",
        OVERLAY_LINK_ALERT_BODY:
          "You're about to open this link in an external browser. Do you want to continue?",
        OVERLAY_LINK_ALERT_SECONDARY: "Open and don't bother me again.",
        OVERLAY_CRASHED_TITLE: "Discord Overlay has crashed!",
        OVERLAY_RELOAD: "Reload Overlay",
        OVERLAY_CLICK_TO_JUMP_TO_CHANNEL: "Click to jump to channel",
        OVERLAY_CLICK_TO_UNLOCK: "Click to unlock overlay",
        OVERLAY_RESET_DEFAULT_LAYOUT: "Reset Default Layout",
        ACTIVITY_INVITE_MODAL_HEADER: "Invite to Play !!{name}!!",
        ACTIVITY_INVITE_MODAL_SEARCH_PLACEHOLDER: "Search users and channels",
        ACTIVITY_INVITE_MODAL_SENT: "Sent",
        ACTIVITY_INVITE_MODAL_INVITE: "Invite",
        ACTIVITY_INVITE_PRIVATE:
          "\nYou cannot send an invite because you are either invisible or are hiding your playing status. If you prefer to not change\nyour settings you can have someone invite you instead.\n",
        LOBBY: "Lobby",
        GUILD_DISCOVERY_TOOLTIP: "Explore Discoverable Servers",
        GUILD_DISCOVERY_HOME_TITLE: "Find your community on Discord",
        GUILD_DISCOVERY_HOME_SUBTITLE:
          "From gaming, to music, to learning, there's a place for you.",
        GUILD_DISCOVERY_CATEGORY_TITLE:
          "Find {categoryName} communities on Discord",
        GUILD_DISCOVERY_SEARCH_PLACEHOLDER: "Explore communities",
        GUILD_DISCOVERY_CATEGORY_SEARCH_PLACEHOLDER:
          "Explore {categoryName} servers",
        GUILD_DISCOVERY_CATEGORY_FOOTER_TITLE:
          "There are more communities out there!",
        GUILD_DISCOVERY_FOOTER_BODY: "Try searching for them.",
        GUILD_DISCOVERY_SEARCH_LABEL: "Explore popular communities",
        GUILD_DISCOVERY_SEARCH_ENTER_CTA: '"ENTER" to Search',
        GUILD_DISCOVERY_HEADER_GAMES_YOU_PLAY: "Communities for games you play",
        GUILD_DISCOVERY_POPULAR_HEADER: "Popular communities",
        GUILD_DISCOVERY_FEATURED_HEADER: "Featured communities",
        GUILD_DISCOVERY_SEARCH_RESULTS_HEADER:
          '{count, plural, =0 {0 communities} one {1 community} other {{count} communities}} for "{query}"',
        GUILD_DISCOVERY_SEARCH_RESULTS_CATEGORY_HEADER:
          '{count, plural,  =0 {0  **{category}** communities} one {1 **{category}** community} other {{count} **{category}** communities}} for "{query}"',
        GUILD_DISCOVERY_SEARCH_EMPTY_HEADER: "No results found",
        GUILD_DISCOVERY_SEARCH_EMPTY_CATEGORY_HEADER:
          "No results found in {categoryName}",
        GUILD_DISCOVERY_SEARCH_EMPTY_BODY: "Try searching for something else.",
        GUILD_DISCOVERY_SEARCH_EMPTY_CATEGORY_BODY:
          "Try searching for something else or [see results from all categories](onClick).",
        GUILD_DISCOVERY_SEARCH_ERROR:
          "Uh oh, Discovery search is having issues right now. Check back later.",
        GUILD_DISCOVERY_ALL_CATEGORY_FILTER: "All",
        GUILD_DISCOVERY_MAIN_VIEW_TITLE: "Find your Community",
        GUILD_DICOVERY_MAIN_VIEW_SUBTITLE:
          "From gaming, to music, to education, there's a place for you on Discord.",
        GUILD_DISCOVERY_CATEGORY_HEADER: "Popular {categoryName} communities",
        GUILD_DISCOVERY_MOBILE_SEARCH_PLACEHOLDER: "Search for communities",
        GUILD_DISCOVERY_SEARCH_PROTIP:
          "$[PROTIP:](protipHook) You can search for a server by name, category, or keyword. Try any shared interest or hobby, no matter how obscure!",
        GUILD_DISCOVERY_CHAT_INPUT_BACK: "Back to Discovery",
        GUILD_DISCOVERY_LURKER_FOLLOW_NEWS_BUTTON: "Follow Updates",
        GUILD_POPOUT_VIEW_SERVER_BUTTON: "View Server",
        GUILD_POPOUT_UNAVAILABLE_HEADER: "This server is not available.",
        GUILD_POPOUT_UNAVAILABLE_FLAVOR: "We can't show any further details.",
        ANNOUNCEMENT_GUILD_POPOUT_NAME: "Community Updates",
        ANNOUNCEMENT_GUILD_DESCRIPTION:
          "Official announcements from Discord for Community Server admins and moderators.",
        ANNOUNCEMENT_GUILD_HERE_TO_HELP: "We're here to help!",
        GUILD_PROFILE_JOIN_SERVER_BUTTON: "Join Server",
        LAUNCH_APP: "Launch {app}",
        FOLLOW_MODAL_TITLE: "Add this channel's updates to your server!",
        FOLLOW_MODAL_BODY:
          "Select where you want these updates to go. You can remove this at any time in Server Settings > Integrations > Channels Followed.",
        FOLLOW_MODAL_HINT:
          "Only servers and channels you have webhook permissions in are shown.",
        FOLLOW_MODAL_HINT_NO_PERMS:
          "Uh oh, you don't have webhook permissions in any server you're in. Ask your server admin to give you the permission or ask them to come follow themselves!",
        FOLLOW_MODAL_WARNING: "Note: This is an age-restricted channel.",
        FORM_LABEL_SEND_TO: "Send to",
        FORM_LABEL_SELECT_CHANNEL: "Select channel",
        FOLLOW: "Follow",
        FOLLOW_MODAL_FAIL: "Failed to follow the channel, please try again.",
        FOLLOW_MODAL_TOO_MANY_WEBHOOKS:
          "The selected channel has too many webhooks. Please remove a webhook or select another channel.",
        FOLLOW_SUCCESS_MODAL_HEADER_01:
          "What a nice addition to your server. Lookin' real spiffy in here.",
        FOLLOW_SUCCESS_MODAL_HEADER_02:
          "What a nice addition to your server. Lookin' real good in here.",
        FOLLOW_SUCCESS_MODAL_HEADER_03:
          "What a nice addition to your server. Lookin' real dapper in here.",
        FOLLOW_SUCCESS_MODAL_HEADER_04:
          "What a nice addition to your server. Lookin' real swanky in here.",
        FOLLOW_SUCCESS_MODAL_HEADER_05:
          "What a nice addition to your server. Lookin' real snazzy in here.",
        FOLLOW_SUCCESS_MODAL_HEADER_06:
          "What a nice addition to your server. Lookin' real dandy in here.",
        FOLLOW_SUCCESS_MODAL_HEADER_07:
          "What a nice addition to your server. Lookin' real cozy in here.",
        FOLLOW_SUCCESS_MODAL_HEADER_08:
          "What a nice addition to your server. Lookin' real nifty in here.",
        FOLLOW_SUCCESS_MODAL_HEADER_09:
          "What a nice addition to your server. Lookin' real neato in here",
        FOLLOW_SUCCESS_MODAL_HEADER_10:
          "What a nice addition to your server. Lookin' real lively in here.",
        FOLLOW_SUCCESS_MODAL_BODY:
          "The most important updates from this channel will now show up directly in your server. Enjoy!",
        FOLLOW_NEWS_CHAT_INPUT_MESSAGE:
          "Follow to get this channel's updates in your own server.",
        FOLLOW_NEWS_CHAT_INPUT_SUBTITLE:
          "Over !!{count}!! other people are also following.",
        MODIFY_FOLLOWED_NEWS_HEADER: "Are you sure?",
        DELETE_FOLLOWED_NEWS_BODY:
          "This message will be deleted in all servers following this channel. It may take some time before it’s removed from all servers.",
        EDIT_FOLLOWED_NEWS_BODY:
          "This message will also be updated in all servers following this channel. It may take some time before all servers are updated.",
        PUBLISH_FOLLOWED_NEWS_BODY:
          "This message will be sent to all servers following this channel. You can edit or delete this message later, and it will update correspondingly in each following server.",
        PUBLISH_FOLLOWED_NEWS_BODY_REACH:
          "This message will be sent to **{numGuildsFollowing, plural, one {# server} other {# servers}}** following this channel. You can edit or delete this message later, and it will update correspondingly in each following server.",
        PUBLISH_FOLLOWED_NEWS_FAIL_TITLE: "Uh-oh, a pop up box.",
        PUBLISH_FOLLOWED_NEWS_FAIL_BODY:
          "You've reached your 10 published messages per-hour limit. But we love the enthusiasm, so please try again in {retryAfter, plural, one {1 minute} other {{retryAfter} minutes}}.",
        PUBLISH_FOLLOWED_NEWS_GENERIC_BODY: "Sorry, something went wrong.",
        PUBLISH_FOLLOWED_NEWS_BODY_SETTINGS_INSIGHTS:
          "Announcement stats can be found in [Server Insights.](onClick)",
        ANNOUNCEMENT_EDIT_RATE_LIMIT:
          "To keep announcements speedy, published messages can only be edited 3 times per hour. Please try again in {retryAfterMinutes, plural, one {1 minute} other {{retryAfterMinutes} minutes}}.",
        ACTIVITY_PANEL_GO_LIVE: "Go Live",
        ACTIVITY_PANEL_GO_LIVE_STREAM_GAME: "Stream !!{game}!!",
        ACTIVITY_PANEL_GO_LIVE_TOOLTIP_NO_PERMISSION_IN_VOICE:
          "You can’t stream into this channel.",
        ACTIVITY_PANEL_GO_LIVE_TOOLTIP_NO_PERMISSION_IN_GUILD:
          "You can’t stream into this server.",
        ACTIVITY_PANEL_GO_LIVE_TOOLTIP_NOT_IN_GUILD:
          "Navigate to a server to start streaming.",
        GO_LIVE_MODAL_TITLE: "Screen Share",
        GO_LIVE_MODAL_CAPTURE: "Capture Devices",
        GO_LIVE_MODAL_DESCRIPTION_GENERIC:
          "Set up your stream and have your friends grab a seat!",
        GO_LIVE_MODAL_DESCRIPTION_SELECT_SOURCE:
          "Select something to stream and have your friends grab a seat!",
        GO_LIVE_MODAL_APPLICATIONS: "Applications",
        GO_LIVE_MODAL_SCREENS: "Screens",
        GO_LIVE_MODAL_APPLICATION_FORM_TITLE: "What you're streaming",
        GO_LIVE_MODAL_SELECT_CHANNEL_FORM_TITLE: "Select a voice channel",
        GO_LIVE_MODAL_CURRENT_CHANNEL_FORM_TITLE: "Streaming channel",
        GO_LIVE_MODAL_CTA: "Go Live",
        GO_LIVE_MODAL_OVERFLOW_TWO_USERS: "!!{nickname0}!! and !!{nickname1}!!",
        GO_LIVE_MODAL_OVERFLOW_THREE_USERS:
          "!!{nickname0}!!, !!{nickname1}!!, and !!{nickname2}!!",
        GO_LIVE_MODAL_OVERFLOW_FOUR_OR_MORE_USERS:
          "!!{nickname0}!!, !!{nickname1}!!, and !!{remainingCount}!! others",
        GO_LIVE_MODAL_CAPTURE_DESCRIPTION:
          "Pick your video device and the matching audio device.",
        GO_LIVE_FORM_LABEL_AUDIO_DEVICE: "Audio Device",
        GO_LIVE_FORM_LABEL_VIDEO_DEVICE: "Video Device",
        GO_LIVE_FORM_BUTTON_CAMERA_READY: "Looks Good!",
        GO_LIVE_HEY: "Hey!",
        GO_LIVE_LOOK: "Look!",
        GO_LIVE_LISTEN: "Listen!",
        GO_LIVE_VIDEO_DRIVERS_OUTDATED:
          "Your video drivers are out of date. Update them for better screen share performance.",
        GO_LIVE_SCREENSHARE_NO_SOUND:
          "Sound may not be available when sharing a screen on your device.",
        GO_LIVE_SCREENSHARE_UPDATE_WINDOWS_FOR_SOUNDSHARE:
          "Audio sharing may not work on your Windows version. Please upgrade to the latest Windows 10.",
        GO_LIVE_SCREENSHARE_UPDATE_MACOS_FOR_SOUNDSHARE:
          "Audio sharing may not work on your device. Please upgrade to at least macOS 10.15.",
        GO_LIVE_SCREENSHARE_ENABLE_FOR_SOUNDSHARE:
          "To enable audio for screen share, head over to [Voice & Video Settings > Screen Share](onVoiceSettingsClick) and follow the setup instructions.",
        GO_LIVE_TILE_SCREEN: "!!{username}!!’s Screen",
        GO_LIVE_USER_PLAYING: "!!{username}!! Playing {applicationName}",
        GO_LIVE_SHARE_SCREEN: "Screen",
        GO_LIVE_WATCHING_USER: "Watching {username}",
        GO_LIVE_MODAL_NOTIFY_FRIENDS_CHECKBOX_LABEL:
          "Notify my friends in this server that I'm streaming.",
        GO_LIVE_MODAL_ENABLE_SCREEN_SOUNDSHARE_LABEL:
          "Also share system audio.",
        VOICE_CHANNEL_EFFECTS: "Voice Channel Effects",
        VOICE_CHANNEL_EFFECTS_COOLDOWN: "Reaction Cooldown {seconds}s",
        VOICE_CHANNEL_EFFECTS_MORE: "More Reactions",
        VOICE_CHANNEL_EFFECTS_REDUCED_MOTION_TOOLTIP_TITLE:
          "Turn off Reduced Motion to see reactions",
        VOICE_CHANNEL_EFFECTS_REDUCED_MOTION_TOOLTIP_BODY:
          "To view animated reactions, turn off Reduced Motion in your Accessibility settings.",
        VOICE_CHANNEL_EFFECTS_REDUCED_MOTION_TOOLTIP_CONFIRM: "Update Setting",
        VOICE_CHANNEL_EFFECTS_REDUCED_MOTION_TOOLTIP_CANCEL: "Cancel",
        GUILD_VOICE_CHANNEL_EMPTY_BODY_MOBILE:
          "Ready to talk? Grab a seat in this voice channel so people know you're around to hang out.",
        JOIN_VOICE_CHANNEL_CTA: "Join Voice",
        JOIN_VIDEO_CHANNEL: "Join Video",
        SET_VOICE_CHANNEL_TOPIC_SHORT_CTA: "Set a topic",
        SET_VOICE_CHANNEL_TOPIC: "Set Voice Status",
        SET_VOICE_CHANNEL_TOPIC_PLACEHOLDER: "What's going on?",
        SET_VOICE_CHANEL_TOPIC_UPDATE_CHANNEL_CTA: "Post an update to",
        CHANNEL_STATE_OPEN: "Open",
        CHANNEL_STATE_BUSY: "Busy",
        GUILD_VOICE_CHAT_EMPTY_STATE_TITLE: "No one's here yet",
        GUILD_VOICE_CHAT_EMPTY_STATE_SUBTITLE:
          "Voice channels are for hanging out. When you’re ready to talk, just hop in. Friends will be able to see and join you. It’s like using telepathy to say hi.",
        LOCAL_PUSH_NOTIFICATION_GUILD_VERIFICATION_BODY:
          "You can now talk in this server. Thanks for waiting!",
        LOCAL_PUSH_NOTIFICATION_SCREENSHARE_NOT_SUPPORTED:
          "This application may not support screensharing.",
        ELEVATED_PERMISSIONS_SOUND_TITLE: "Sound Permissions",
        ELEVATED_PERMISSIONS_SOUND_BODY:
          "Discord is unable to stream your application audio due to missing permissions. Grant Discord administrator permissions in order to send those sweet, sweet soundwaves to your friends?",
        ELEVATED_PERMISSIONS_SOUND_NO_SOUND_BUTTON: "Stream Without Sound",
        ELEVATED_PERMISSIONS_SOUND_REQUEST_ACCESS_BUTTON: "Grant Access",
        CUSTOM_STATUS: "Custom Status",
        CUSTOM_STATUS_SET_CUSTOM_STATUS: "Set a custom status",
        CUSTOM_STATUS_SET_CUSTOM_STATUS_CTA: "Set Custom Status",
        CUSTOM_STATUS_CHANGE_CUSTOM_STATUS_A11Y_LABEL: "Change custom status",
        CUSTOM_STATUS_CUSTOM_STATUS_A11Y_LABEL:
          "Custom status: !!{emoji}!! !!{status}!!",
        CUSTOM_STATUS_CHANGE_CUSTOM_STATUS_A11Y_HINT:
          "Current: !!{emoji}!! !!{status}!!",
        CUSTOM_STATUS_EDIT_CUSTOM_STATUS_PLACEHOLDER: "Edit Custom Status",
        CUSTOM_STATUS_EMOJI_BUTTON_A11Y_LABEL: "Select Custom Status Emoji",
        CUSTOM_STATUS_CLEAR_CUSTOM_STATUS: "Clear Status",
        CUSTOM_STATUS_MODAL_BODY: "What's cookin', !!{username}!!?",
        CUSTOM_STATUS_MODAL_PLACEHOLDER: "Support has arrived!",
        CUSTOM_STATUS_CLEAR_AFTER: "Clear after",
        CUSTOM_STATUS_DONT_CLEAR: "Don't clear",
        CUSTOM_STATUS_MINUTES:
          "{minutes, plural, =1 {# minute} other {# minutes}}",
        CUSTOM_STATUS_CLEAR_IN_MINUTES:
          "Clear in {minutes, plural, =1 {# minute} other {# minutes}}",
        CUSTOM_STATUS_HOURS: "{hours, plural, =1 {# hour} other {# hours}}",
        CUSTOM_STATUS_CLEAR_IN_HOURS:
          "Clear in {hours, plural, =1 {# hour} other {# hours}}",
        CUSTOM_STATUS_TODAY: "Today",
        CUSTOM_STATUS_CLEAR_TOMORROW: "Clear tomorrow",
        CUSTOM_STATUS_UPDATE_SUCCESS: "Custom status updated!",
        CUSTOM_STATUS_STATUS_TITLE: "Status",
        CUSTOM_STATUS_CLEARS_IN_MINUTES: "Clears in {minutes} minutes",
        CUSTOM_STATUS_CLEARS_IN_HOURS: "Clears in {hours} hours",
        CUSTOM_STATUS_PLACEHOLDER: "What're you up to?",
        CUSTOM_STATUS_DURATION: "Status Duration",
        SYSTEM_DM_CHANNEL_DESCRIPTION:
          "This thread is reserved for official Discord notifications.",
        SYSTEM_DM_CHANNEL_DESCRIPTION_SUBTEXT:
          "Discord will never ask you for your password or account token.",
        SYSTEM_DM_EMPTY_MESSAGE:
          "This is an official message from Team Discord. Please be advised that Discord will never ask you for your password or account token.",
        SYSTEM_DM_TAG_SYSTEM: "SYSTEM",
        SYSTEM_DM_ACTIVITY_TEXT: "Official Discord Message",
        SYSTEM_DM_URGENT_MESSAGE_MODAL_HEADER: "Urgent Message",
        SYSTEM_DM_URGENT_MESSAGE_MODAL_BODY:
          "There's an official message from the Discord team that needs your attention.",
        BUILD_OVERRIDE: "Build Override",
        BUILD_OVERRIDE_FOR: "Build Override for {releaseChannel}",
        BUILD_OVERRIDE_ID: "Commit Hash",
        BUILD_OVERRIDE_APPLY: "Apply",
        BUILD_OVERRIDE_CLEAR: "Clear",
        BUILD_OVERRIDE_ISNT_AVAILABLE: "Build isn't available",
        BUILD_OVERRIDE_LINK_COPY: "Copy Link",
        BUILD_OVERRIDE_LINK_COPIED: "Link Copied!",
        BUILD_OVERRIDE_INVALID: "Invalid build override",
        BUILD_OVERRIDE_INCOMPATIBLE_CLIENT: "{releaseChannel} client only",
        BUILD_OVERRIDE_INCOMPATIBLE_TARGETS:
          "This build override is only valid for targets: {requestedTargets}",
        BUILD_OVERRIDE_EXPIRED: "Build expired",
        BUILD_OVERRIDE_INVALID_USER: "Incorrect user",
        CLEAR_BUILD_OVERRIDE: "Clear Build Override",
        LABEL_WITH_ONLINE_STATUS: "{label}, {status}",
        INCOMPATIBLE_BROWSER:
          "Or, visit this page from a [supported browser]({supportedBrowserURL}).",
        DESKTOP_APP: "Desktop App",
        CONNECTED_ON_ANOTHER_CLIENT: "Connected on another client",
        NOW_PLAYING_GDPR_HEADER: "This section could be better",
        NOW_PLAYING_GDPR_BODY:
          "We can customize Active Now, and other parts of Discord, based on information like who you talk to and what games you play. You can change this anytime in [privacy settings](onPrivacyClick).",
        hr: "Croatian",
        "zh-TW": "Chinese, Taiwan",
        fr: "French",
        de: "German",
        "en-US": "English, US",
        "en-GB": "English, UK",
        "pt-BR": "Portuguese, Brazilian",
        ru: "Russian",
        it: "Italian",
        "es-ES": "Spanish",
        "es-419": "Spanish, LATAM",
        ko: "Korean",
        nl: "Dutch",
        "sv-SE": "Swedish",
        pl: "Polish",
        ja: "Japanese",
        bg: "Bulgarian",
        uk: "Ukrainian",
        tr: "Turkish",
        da: "Danish",
        cs: "Czech",
        fi: "Finnish",
        no: "Norwegian",
        el: "Greek",
        lt: "Lithuanian",
        hu: "Hungarian",
        ro: "Romanian, Romania",
        "zh-CN": "Chinese, China",
        th: "Thai",
        vi: "Vietnamese",
        hi: "Hindi",
        en: "English",
        I18N_LOCALE_LOADING_ERROR: "An error occurred loading {locale}",
        NUF_HAVE_AN_INVITE_ALREADY: "Have an invite already?",
        NUF_JOIN_A_FRIEND: "Join a friend on Discord",
        GUILD_FOLDER_NAME: "Folder Name",
        GUILD_FOLDER_COLOR: "Folder Color",
        GUILD_FOLDER_UNNAMED: "Unnamed Server Folder",
        GUILD_FOLDER_UPDATED_SUCCESS: "Folder settings saved!",
        USER_PROFILE_MESSAGE: "Message",
        USER_PROFILE_AUDIO: "Call",
        USER_PROFILE_VIDEO: "Video",
        USER_PROFILE_ADD_FRIEND: "Add Friend",
        USER_PROFILE_PENDING: "Pending",
        USER_PROFILE_MUTUAL_FRIENDS:
          "{count, plural, =0 {0 Mutual Friends} one {1 Mutual Friend} other {{count} Mutual Friends}}",
        USER_PROFILE_MUTUAL_GUILDS:
          "{count, plural, =0 {0 Mutual Servers} one {1 Mutual Server} other {{count} Mutual Servers}}",
        USER_PROFILE_MUTUAL_FRIENDS_PLACEHOLDER: "Mutual Friends",
        USER_PROFILE_MUTUAL_GUILDS_PLACEHOLDER: "Mutual Servers",
        PROFILE_JOIN_VOICE_CHANNEL: "Join Voice Channel",
        PROFILE_IN_VOICE_CALL: "In a voice call",
        PROFILE_OPEN_VOICE_CHANNEL: "Open Voice Channel",
        IOS_PROFILE_IN_VOICE_CALL: "In a voice call",
        IOS_PROFILE_OPEN_VOICE_CHANNEL: "Open Voice Channel",
        USER_PROFILE_INCOMING_FRIEND_REQUEST_DIALOG_BODY:
          "Accept this friend request?",
        USER_PROFILE_VOLUME: "Volume",
        USER_PROFILE_FAILURE_TO_OPEN_MESSAGE:
          "Uh oh! We can't view details for this user",
        WRONG_USER_LOGOUT: "Wrong account?",
        USER_PROFILE_HEADER_A11Y_ANIMATE: "Animate Profile Banner GIF",
        USER_PROFILE_HEADER_A11Y_LABEL: "{username}'s User Profile Banner",
        SERVER_INSIGHTS: "Server Insights",
        GUILD_ANALYTICS_DESCRIPTION:
          "We’ve put together a bunch of helpful data to help you better run your community. Learn how active your community is, where new members are coming from, and much more. Use what you learn to make informed decisions to improve your server’s engagement!\n\nAnalytics about Announcement Channels, Server Discovery, and Welcome Screen also live here.",
        GUILD_ANALYTICS_DEVELOPERS_CTA:
          "Server Insights is hosted on a separate website so that it’s easier to share links and browse cross platform.",
        GUILD_ANALYICS_DEVELOPERS_BUTTON: "Go to Server Insights",
        WEEKLY_COMMUNICATORS: "Weekly Communicators",
        COMMUNICATORS_INFO: "A visitor who talked (voice or text).",
        WEEKLY_VISITORS: "Weekly Visitors",
        VISITORS_INFO:
          "A member who has clicked into the server and viewed a channel.",
        WEEKLY_NEW_MEMBERS: "Weekly New Members",
        WEEKLY_NEW_MEMBER_RETENTION: "Weekly New Member Retention",
        NEW_MEMBER_RETENTION_INFO:
          "Percentage of new members that still came back to the server the week after joining.",
        NOT_AVAILABLE: "N/A",
        TRENDING_ARROW_UP: "Trending Arrow Up",
        TRENDING_ARROW_DOWN: "Trending Arrow Down",
        PERCENTAGE_SINCE_LAST_WEEK: "{percentage}% since last week",
        GUILD_ANALYTICS_METRICS_LAST_WEEK: "From the most recent week",
        GUILD_ANALYTICS_ERROR_MESSAGE:
          "Uh oh! Looks like something broke. Please refresh the application and try again.",
        GUILD_ANALYTICS_ERROR_GUILD_SIZE:
          "Looks like your server isn’t quite ready to see full insights. You will only have access to Announcement Channels and Welcome Screen analytics.",
        NOISE_CANCELLATION_POPOUT_HEADER: "Noise Suppression",
        NOISE_CANCELLATION_POPOUT_DESCRIPTION:
          "Enable Krisp noise suppression! Make some noise—like clapping your hands—while speaking. Your friends will hear nothing but your beautiful voice.",
        NOISE_CANCELLATION_POPOUT_FOOTER: "Powered by",
        NOISE_CANCELLATION_POPOUT_TEST: "Test",
        NOISE_CANCELLATION_POPOUT_STOP: "Stop",
        NOISE_CANCELLATION_POPOUT_MIC_TEST_TITLE: "Mic Test",
        NOISE_CANCELLATION_TOOLTIP: "Noise Suppression powered by Krisp",
        USER_SETTINGS_NOISE_CANCELLATION: "Noise Suppression",
        USER_SETTINGS_NOISE_CANCELLATION_DESCRIPTION:
          "Suppress background noise from your mic.",
        USER_SETTINGS_NOISE_CANCELLATION_KRISP: "Krisp",
        USER_SETTINGS_NOISE_CANCELLATION_STANDARD: "Standard",
        USER_SETTINGS_NOISE_CANCELLATION_DISABLED: "None",
        USER_SETTINGS_DISABLE_NOISE_SUPPRESSION:
          "Noise reduction is disabled while Noise Suppression is active.",
        MOBILE_NOISE_CANCELLATION_POPOUT_TITLE: "Noise suppression",
        MOBILE_NOISE_CANCELLATION_FAILED:
          "We couldn't enable Krisp due to an error. Give it another go and try again.",
        MOBILE_NOISE_CANCELLATION_CPU_OVERUSE:
          "We disabled noise suppression to improve phone performance.",
        NOISE_CANCELLATION_CPU_OVERUSE:
          "We disabled noise suppression to improve performance.",
        MOBILE_ADVANCED_VOICE_ACTIVITY_CPU_OVERUSE:
          "We disabled voice activity detection to improve phone performance.",
        MOBILE_NOISE_CANCELLATION_POPOUT_DESCRIPTION:
          "While speaking, filter out background noise and showcase your wonderful voice. Powered by Krisp.",
        ENABLE_NOISE_CANCELLATION: "Enable Noise Suppression",
        DISABLE_NOISE_CANCELLATION: "Disable Noise Suppression",
        MIC_TEST_VOICE_CHANNEL_WARNING:
          "You'll be muted and deafened in your voice session during Mic Testing.",
        CAMERA: "Camera",
        FILES: "Files",
        TAKE_A_PHOTO: "Take a Photo",
        IOS_VIEW_ALL: "View all",
        ALL_ALBUMS: "All Albums",
        VIEW_ALL: "View all",
        SHOW_ALL: "Show all",
        CLEAR_ALL: "Clear all",
        PHOTOS: "Photos",
        PHOTOS_AND_FILES: "Photos & Files",
        RECENTS: "Recents",
        IOS_MEDIA_KEYBOARD_NO_PERMISSION:
          "Enable permissions to access your photo library. Show everyone how cute your pet is.",
        IOS_MEDIA_KEYBOARD_NO_PHOTOS:
          "You don’t have any photos in your photo library. The best time to start is now.",
        IOS_MEDIA_KEYBOARD_MORE_PHOTOS:
          "Not what you’re looking for? Browse your photo library for that perfect picture.",
        IOS_MEDIA_KEYBOARD_ENABLE_IN_SETTINGS: "Enable in Settings",
        IOS_MEDIA_KEYBOARD_BROWSE_PHOTO: "Browse Photos",
        CANNOT_ATTACH_FILES: "You don't have permission to attach files",
        MEDIA_KEYBOARD_BROWSE: "Browse",
        MEDIA_KEYBOARD_GIFT: "Gift",
        MEDIA_KEYBOARD_NUM_SELECTED: "{num} selected",
        MEDIA_KEYBOARD_MAX_SELECTION_INFO: "Select up to {max}",
        EXPAND_BUTTONS: "Expand Buttons",
        CLEAR_ATTACHMENTS: "Clear Attachments",
        MESSAGE_ATTACHMENTS: "Message Attachments",
        MESSAGE_ATTACHMENT_A11Y_LABEL: "Message Attachment, {name}",
        MESSAGE_ATTACHMENT_MOBILE_A11Y_HINT: "Tap to modify",
        SEND_A_MESSAGE: "Send a Message",
        ATTACHMENT_FILES: "File Selector",
        ATTACHMENT_MEDIA: "Media Selector",
        SHOW_KEYBOARD: "Show Keyboard",
        ENABLE_PERMISSION: "Enable Permission",
        STORAGE_PERMISSION_DENIED: "Storage Permission Required",
        CAMERA_INTENT_RESULT_ERROR: "Camera Result Invalid",
        CAMERA_UNKNOWN_ERROR: "Unknown Camera Error",
        FLASH_AUTO: "Auto Flash",
        FLASH_ON: "Flash On",
        FLASH_OFF: "Flash Off",
        FLASH_TORCH: "Flash Torch",
        PREMIUM_GAME: "Discord Nitro Game",
        GIFT_NITRO_ACTION: "Gift Nitro",
        GIFT_NITRO_BENEFITS:
          "Give this friend custom profiles, HD video, animated emoji, and more!",
        GIFT_CARD_SELECTION: "Select gift card",
        GIFT_OPTIONAL_MESSAGE: "Add message (optional)",
        GIFT_SUBSCRIPTION_SELECTION: "Select gift",
        GIFT_PREVIEW: "Preview gift",
        GIFT_CARD_PREVIEW: "Gift card preview",
        GIFT_PURCHASE_REVIEW: "Review your gift",
        ONE_TIME_CHARGE: "Pay a one time charge of {currencyAmount}",
        PAYMENT_METHOD_SELECTION: "Choose payment method",
        BILLING_ADDRESS_ACTION: "Add billing address",
        DEFAULT_CUSTOM_GIFT_MESSAGE:
          "You’re awesome, just like this gift. Enjoy!",
        PAYMENT_METHOD_INFO: "Payment method",
        PAID_SERVICE_TERMS_AGREEMENT:
          "By clicking “Buy gift”, you agree to the Paid Services Terms",
        ONE_TIME_CHARGE_INFO:
          "This will be a one time charge for the amount of time chosen. You will not be billed yearly.",
        GIFT_RECIPIENT_NOTIFICATION: "{recipientDisplayName}, you have a gift!",
        GIFT_DURATION: "1 {timeInterval} of Nitro",
        BASIC_GIFT_DURATION: "1 {timeInterval} of Nitro Basic",
        GIFT_OPEN_PROMPT: "Open gift",
        GIFT_RECIPIENT_INFO: "To: {recipientDisplayName}",
        GIFT_SENDER_INFO: "From: {sender}",
        GIFT_SUBSCRIPTION_INFO:
          "{sender} has gifted you Nitro for 1 {timeInterval}!",
        GIFT_SUBSCRIPTION_INFO_TIER_0:
          "{sender} has gifted you Nitro Basic for 1 {timeInterval}!",
        GIFT_SUBSCRIPTION_INFO_GENERIC: "{sender} has gifted you Nitro!",
        GIFT_SUBSCRIPTION_INFO_SENDER_UNKNOWN:
          "You have been gifted you Nitro for 1 {timeInterval}!",
        GIFT_SUBSCRIPTION_INFO_TIER_0_SENDER_UNKNOWN:
          "You have been gifted Nitro Basic for 1 {timeInterval}!",
        GIFT_SUBSCRIPTION_INFO_GENERIC_SENDER_UNKNOWN:
          "You have been gifted Nitro!",
        GIFT_SELECT_SOUND: "Add sound effect",
        GIFT_SELECT_EMOJI: "Add emoji confetti",
        GIFT_SELECT_SOUNDBOARD_ADD: "Add",
        GIFT_SELECT_SOUNDBOARD_OR_EMOJI_DESCRIPTION:
          "This will play when your friend opens their gift",
        NITRO_CONFIRMATION: "You've got Nitro",
        PREMIUM_FEATURES_TIER_2:
          "Now you can use HD streaming, bigger file uploads, custom stickers, and more for 1 {timeInterval}.",
        PREMIUM_FEATURES_TIER_2_GENERIC:
          "Now you can use HD streaming, bigger file uploads, custom stickers, and more.",
        OPENED_GIFT_CONFIRMATION: "You opened this gift!",
        NITRO_PERKS: "Check out your new Nitro perks!",
        TEAL: "Teal",
        LIGHT_GREEN: "Light green",
        BLUE: "Blue",
        PURPLE: "Purple",
        MAGENTA: "Magenta",
        DARK_TEAL: "Dark teal",
        GREEN: "Green",
        DARK_BLUE: "Dark blue",
        LIGHT_BLUE: "Light blue",
        SKY_BLUE: "Sky blue",
        DARK_PURPLE: "Dark purple",
        BURGUNDY: "Burgundy",
        YELLOW: "Yellow",
        ORANGE: "Orange",
        SALMON: "Salmon",
        LIGHT_GREY: "Light grey",
        DARK_GREY: "Dark grey",
        GREY: "Grey",
        TAN: "Tan",
        BROWN: "Brown",
        TERRACOTTA: "Terracotta",
        DISCODO_ENABLED: "ディスコード enabled",
        DISCODO_DISABLED: "ディスコード disabled",
        PROMOTION_CARD_ACTION_CLAIM: "Claim",
        ALLOW_DIRECT_MESSAGES: "Allow Direct Messages",
        ALLOW_DIRECT_MESSAGES_CAPTION: "Anyone in the server can message you",
        ALLOW_DIRECT_MESSAGES_HUB_CAPTION: "Anyone in the Hub can message you",
        ALLOW_MESSAGE_REQUESTS: "Allow Message Requests",
        ALLOW_MESSAGE_REQUESTS_CAPTION:
          "Filter messages from members you may not know",
        HUMANIZE_DURATION_A_FEW_SECONDS: "a few seconds",
        HUMANIZE_DURATION_SECONDS:
          "{time, plural, =1 {1 second} other {# seconds}}",
        HUMANIZE_DURATION_MINUTES:
          "{time, plural, =1 {1 minute} other {# minutes}}",
        HUMANIZE_DURATION_HOURS: "{time, plural, =1 {1 hour} other {# hours}}",
        HUMANIZE_DURATION_DAYS: "{time, plural, =1 {1 day} other {# days}}",
        BILLING_STANDALONE_GUILD_SUBSCRIPTION_PURCHASE_TITLE:
          "Purchase Server Boosts",
        BILLING_STANDALONE_PREMIUM_PURCHASE_TITLE: "Purchase Discord Nitro",
        BILLING_STANDALONE_PREMIUM_SWITCH_PLAN_TITLE:
          "Switch Discord Nitro Plan",
        BILLING_STANDALONE_PREMIUM_GIFT_PURCHASE_TITLE: "Gift Discord Nitro",
        BILLING_STANDALONE_ADD_PAYMENT_TITLE: "Add Payment Method",
        BILLING_STANDALONE_PAYMENT_HISTORY_TITLE: "View Payment History",
        BILLING_STANDALONE_PROMOTION_REDEMPTION_TITLE: "Redeem Promotion",
        BILLING_STANDALONE_MANAGE_SUBSCRIPTION_TITLE: "Manage Subscription",
        BILLING_STANDALONE_PARTNER_PROMOTION_CLAIM_TITLE: "Claim Promotion",
        SHARE_SETTINGS_TITLE: "Sharing",
        IOS_SHARE_SUGGESTIONS_TOGGLE: "iOS Conversation Suggestions",
        IOS_SHARE_SUGGESTIONS_HINT:
          "Allows Discord conversations to appear as suggestions for sharing and search in iOS. Disabling this will hide those suggestions and make iOS forget which friends and servers are your favorite.",
        SUPPRESS_EMBED_TITLE: "Are you sure?",
        SUPPRESS_EMBED_BODY:
          "This will remove all embeds on this message for everyone.",
        SUPPRESS_EMBED_CONFIRM: "Remove All Embeds",
        SUPPRESS_EMBED_TIP:
          "Hold shift when clearing embeds to skip this modal.",
        REMOVE_ATTACHMENT_TITLE: "Are you sure?",
        REMOVE_ATTACHMENT_BODY:
          "This will remove this attachment from this message permanently.",
        REMOVE_ATTACHMENT_CONFIRM: "Remove Attachment",
        REMOVE_ATTACHMENT_TOOLTIP_TEXT: "Delete",
        BLOCKED_MESSAGE_COUNT:
          "{count, plural, =0 {No blocked messages} one {{count} blocked message} other {{count} blocked messages}}",
        BLOCKED_MESSAGES_SHOW:
          "{count, plural, one {Show message} other {Show messages}}",
        BLOCKED_MESSAGES_HIDE:
          "{count, plural, one {Collapse message} other {Collapse messages}}",
        AUDIO_DEVICES_OUTPUT_SELECTION_PROMPT: "Select Audio Output",
        AUDIO_DEVICES_CHANGE_OUTPUT: "Change Audio Output",
        AUDIO_DEVICES_BLUETOOTH: "Bluetooth",
        AUDIO_DEVICES_SPEAKER: "Speaker",
        AUDIO_DEVICES_CHANGE_SPEAKER: "Switch to Speaker",
        AUDIO_DEVICES_EARPIECE: "Phone",
        AUDIO_DEVICES_CHANGE_EARPIECE: "Switch to Phone",
        AUDIO_DEVICES_WIRED: "Wired Headset",
        AUDIO_DEVICES_UNKNOWN: "Unknown",
        AUDIO_DEVICES_INVALID: "INVALID",
        AUDIO_DEVICES_TOGGLE_UNAVAILABLE: "Unavailable during video call.",
        AUDIO_DEVICES_NONE_AVAILABLE: "No devices available",
        AUDIO_DEVICES_BLUETOOTH_LE_HEADSET: "Bluetooth LE",
        WORKING: "Working...",
        GUILD_TEMPLATE_RESOLVING_TITLE: "Loading server template",
        GUILD_TEMPLATE_INVALID_TITLE: "Invalid server template",
        GUILD_TEMPLATE_INVALID_SUBTITLE:
          "You can ask the owner to make a new one though",
        GUILD_TEMPLATE_MOBILE_INVALID_CTA: "Tap to learn more",
        GUILD_TEMPLATE_MOBILE_INVALID_ERROR:
          "This template link is invalid or has expired.\nWant to know more about Discord?",
        GUILD_TEMPLATE_RESOLVED_EMBED_TITLE: "Server template",
        GUILD_TEMPLATE_MODAL_TITLE: "Create a server based on:",
        GUILD_TEMPLATE_OPEN: "View Template",
        GUILD_TEMPLATE_EMBED_VIEW_IN_APP: "Available in App",
        GUILD_TEMPLATE_USAGES:
          "{usageCount, plural, =0 {Be the first to use this!} one {**1** person used this template} other {**{usageCount}** people used this template}}",
        GUILD_TEMPLATE_USAGES_NO_BOLD:
          "{usageCount, plural, =0 {Be the first to use this!} one {1 person used this template} other {{usageCount} people used this template}}",
        GUILD_TEMPLATE_USAGES_BY_CREATOR2:
          "{usageCount, plural, =0 {Be the first to use this template by $[**!!{creator}!!**](creatorHook)!} one {**1** person used this template by $[**!!{creator}!!**](creatorHook)} other {**{usageCount}** people used this template by $[**!!{creator}!!**](creatorHook)}}",
        GUILD_TEMPLATE_MODAL_CHANNELS_HEADER: "Template Channels",
        GUILD_TEMPLATE_MODAL_CHANNELS_DESCRIPTIONS:
          "Use channels to organize your server by specific topics.",
        GUILD_TEMPLATE_MODAL_CHANNELS_TIP:
          "You can always edit the channels, roles, and permissions after creation.",
        GUILD_TEMPLATE_MODAL_ROLES_HEADER: "Roles and Permissions",
        GUILD_TEMPLATE_MODAL_ROLES_HEADER2: "Template Roles and Permissions",
        GUILD_TEMPLATE_MODAL_ROLES_DESCRIPTION:
          "Use roles to organize your members and to grant permissions like access to private channels.",
        GUILD_TEMPLATES: "Server Template",
        GUILD_TEMPLATE_SETTINGS_DESCRIPTION:
          "A server template is an easy way to share your server setup and help anyone create a server instantly.\n\n  When someone uses your server template link, they create a new server pre-filled with the same channels, roles, permissions, and settings as yours.",
        GUILD_TEMPLATES_FORM_LABEL_LINK: "Template Link",
        GUILD_TEMPLATES_CREATE_LINK: "Generate Template",
        GUILD_TEMPLATES_FORM_LABEL_NAME: "Template Title",
        GUILD_TEMPLATES_FORM_PLACEHOLDER_NAME:
          "Who is this server for? E.g. School Club, Artists' Community",
        GUILD_TEMPLATES_FORM_LABEL_DESCRIPTION: "Template Description",
        GUILD_TEMPLATES_FORM_PLACEHOLDER_DESCRIPTION:
          "What can people do in this server?",
        GUILD_TEMPLATES_PREVIEW_TEMPLATE: "Preview Template",
        GUILD_TEMPLATES_SYNC_TEMPLATE: "Sync Template",
        GUILD_TEMPLATES_UNSYNCED_WARNING:
          "* You have unsynced changes. Update the channels, roles, and permissions in your template by syncing.",
        GUILD_TEMPLATES_LAST_SYNC: "Last sync: {timestamp, date, long}",
        GUILD_TEMPLATES_DELETE_TEMPLATE: "Delete Template",
        GUILD_TEMPLATES_DELETE_DESCRIPTION:
          "Are you sure you want to delete your template? This will prevent anyone with the link from using it.",
        GUILD_TEMPLATES_FORM_DESCRIPTION_WILL_COPY: "Templates will copy:",
        GUILD_TEMPLATES_FORM_DESCRIPTION_WONT_COPY: "Templates will not copy:",
        GUILD_TEMPLATES_FORM_DESCRIPTION_CHANNELS:
          "Channels and channel topics",
        GUILD_TEMPLATES_FORM_DESCRIPTION_ROLES: "Roles and permissions",
        GUILD_TEMPLATES_FORM_DESCRIPTION_SETTINGS: "Default server settings",
        GUILD_TEMPLATES_FORM_DESCRIPTION_MESSAGES: "Messages or any content",
        GUILD_TEMPLATES_FORM_DESCRIPTION_MEMBERS: "Members or bots",
        GUILD_TEMPLATES_FORM_DESCRIPTION_PERKS:
          "Your server icon, Boosts, or other perks",
        GUILD_TEMPLATES_UNSYNCED_TOOLTIP:
          "Your server is out of sync with your server template. Sync template?",
        GUILD_TEMPLATE_SETUP_DISCORD: "Set up your Server",
        GUILD_TEMPLATE_CREATE_DISCORD: "Create a Server",
        GUILD_TEMPLATE_BASED_ON: "based on",
        TABS_HOME_ACCESSIBILITY_LABEL: "Home tab",
        TABS_FRIENDS_ACCESSIBILITY_LABEL: "Friends tab",
        TABS_SEARCH_ACCESSIBILITY_LABEL: "Search tab",
        TABS_MENTIONS_ACCESSIBILITY_LABEL: "Mentions tab",
        TABS_SETTINGS_ACCESSIBILITY_LABEL: "Settings tab",
        VIDEO_PLAYBACK_MUTE_ACCESSIBILITY_LABEL: "Mute video",
        VIDEO_PLAYBACK_UNMUTE_ACCESSIBILITY_LABEL: "Unmute video",
        WELCOME_SCREEN_TITLE: "Welcome to $[!!{guildName}!!](guildNameHook)",
        WELCOME_SCREEN_CHOICE_HEADER: "Top things to do here",
        WELCOME_SCREEN_SKIP: "I'll just look around for now",
        NUF_CHANNELS_TITLE_V2: "These are your channels",
        NUF_CHANNELS_TITLE: "These are your channels!",
        NUF_CHANNELS_DESCRIPTION:
          "Channels are places in your server where people can talk about different topics.",
        NUF_CHANNELS_CTA_LABEL: "View my channels",
        NUF_VOICE_CHANNELS_TITLE:
          "Voice channels are where people come together to talk.",
        NUF_VOICE_CHANNELS_DESCRIPTION:
          "There's no ringing or calling. Pop into a voice channel and friends can jump in to talk with you, use video, or even share their screen.",
        GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_TITLE:
          "Welcome to **Wumpus Land!**",
        GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_DESCRIPTION:
          "Here you can meet other Wumpus fans and participate in weekly group events",
        GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_DESCRIPTION_1:
          "Chat about the latest Wumpus sightings",
        GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_NAME_1: "general",
        GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_DESCRIPTION_2:
          "Find others to hunt Wumpus together",
        GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_NAME_2:
          "looking-for-group",
        GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_DESCRIPTION_3:
          "Get the latest news about Wumpus",
        GUILD_SETTINGS_PUBLIC_WELCOME_EXAMPLE_CHANNEL_NAME_3: "wumpus-news",
        MEMBER_VERIFICATION_MODAL_TITLE: "Before you can talk here...",
        MEMBER_VERIFICATION_MODAL_TITLE_WITH_GUILD_NAME:
          "Before you can talk in !!{guildName}!!...",
        MEMBER_VERIFICATION_MODAL_SUBTITLE:
          "You’ll need to complete the required steps below.",
        MEMBER_VERIFICATION_MODAL_PRIVACY_DESCRIPTION:
          "Your email and phone number will not be shared with the community staff.",
        MEMBER_VERIFICATION_MODAL_PRIVACY_DESCRIPTION_EMAIL:
          "Your email address will not be shared with the community staff.",
        MEMBER_VERIFICATION_NUM_EMOJIS:
          "{emojis, plural, =0 {no server emoji} one {{emojis} server emoji} other {{emojis} server emoji}}",
        MEMBER_VERIFICATION_NUM_ONLINE: "{membersOnline, number} Online",
        MEMBER_VERIFICATION_NUM_MEMBERS: "{members, number} Members",
        MEMBER_VERIFICATION_READ_RULES: "I have read and agree to the rules",
        MEMBER_VERIFICATION_OTHER_RULES:
          "{count, plural, one {{count} other rule} other {{count} other rules}}",
        MEMBER_VERIFICATION_WARNING:
          "Make sure you have not entered your password or any other sensitive information.",
        MEMBER_VERIFICATION_NOTICE_TEXT:
          "You must complete a few more steps before you can start talking in this server.",
        MEMBER_VERIFICATION_CHAT_BLOCKER_TEXT:
          "You must complete a few more steps before you can talk.",
        MEMBER_VERIFICATION_NOTICE_CTA: "Complete",
        MEMBER_VERIFICATION_VERSION_MISMATCH_ERROR:
          "This server's requirements have changed. Please close this and try again.",
        MEMBER_VERIFICATION_FORM_INCOMPLETE:
          "You have not completed all the required steps.",
        MEMBER_VERIFICATION_MUST_READ_RULES:
          "You must finish reading the rules to join.",
        MEMBER_VERIFICATION_READ_AGREE_RULES:
          'By clicking "Finish", you have read and agreed to the Server Rules.',
        MEMBER_VERIFICATION_CLAIM_ACCOUNT_TITLE:
          "Claim your account to talk in this server.",
        MEMBER_VERIFICATION_CLAIM_ACCOUNT_SUBTITLE:
          "This will also save all your messages and servers even after you close the browser.",
        MEMBER_VERIFICATION_CLAIM_ACCOUNT_INFO:
          "We will send you a verification email once you press Next. You must verify your email to continue.",
        MEMBER_VERIFICATION_EMAIL_CONFIRMATION_TITLE:
          "We've sent a confirmation link to !!{email}!!",
        MEMBER_VERIFICATION_EMAIL_CONFIRMATION_SUBTITLE:
          "Confirm the link from your email to continue verification. This page will automatically refresh.",
        MEMBER_VERIFICATION_EMAIL_RESEND: "Resend Confirmation Email",
        MEMBER_VERIFICATION_CLAIM_ACCOUNT_ICON: "User avatar icon",
        MEMBER_VERIFICATION_VERIFY_EMAIL_ICON:
          "Stylized image of a mail envelope",
        MEMBER_VERIFICATION_VERIFICATION_ICON:
          "Stylized image of a sparkle for emphasis",
        MEMBER_VERIFICATION_CANCEL_PENDING_APPLICATION_MODAL_TITLE:
          "Are you sure you want to withdraw your application?",
        MEMBER_VERIFICATION_CANCEL_PENDING_APPLICATION_MODAL_DESC:
          "If you want to join in the future, you’ll have to apply again.",
        MEMBER_VERIFICATION_PENDING_APPLICATION_NOTICE_TITLE:
          "Your application is awaiting review.",
        MEMBER_VERIFICATION_PENDING_APPLICATION_ICON:
          "Stylized image of a clipboard and pencil",
        MEMBER_VERIFICATION_PENDING_APPLICATION_MODAL_TITLE:
          "Your application is pending!",
        MEMBER_VERIFICATION_PENDING_APPLICATION_CANCEL_MODAL_TITLE:
          "Are you sure you want to withdraw your application?",
        MEMBER_VERIFICATION_PENDING_APPLICATION_LEAVE_SERVER_MODAL_TITLE:
          "Are you sure you want to leave this server?",
        MEMBER_VERIFICATION_PENDING_APPLICATION_MODAL_DESC:
          "You’ll get notified when there’s an update.",
        MEMBER_VERIFICATION_PENDING_APPLICATION_LEAVE_SERVER_MODAL_DESC:
          "You’ll have to resubmit your application if you want to join again in the future.",
        MEMBER_VERIFICATION_PENDING_APPLICATION_MODAL_CONFIRM: "Got it",
        MEMBER_VERIFICATION_PENDING_APPLICATION_MODAL_CANCEL:
          "Cancel Application",
        MEMBER_VERIFICATION_PENDING_APPLICATION_MODAL_LEAVE: "Leave Server",
        MEMBER_VERIFICATION_PENDING_APPLICATION_MODAL_WITHDRAW_AND_LEAVE:
          "Withdraw and Leave Server",
        MEMBER_VERIFICATION_PENDING_APPLICATION_MODAL_DISMISS: "Never mind",
        MEMBER_VERIFICATION_PENDING_APPLICATION_MODAL_REAPPLY: "Reapply",
        MEMBER_VERIFICATION_LEAVE_APPLICATION_TITLE:
          "Are you sure you want to quit?",
        MEMBER_VERIFICATION_LEAVE_APPLICATION_DESC:
          "You’ll have to resubmit your application if you want to join again in the future.",
        MEMBER_VERIFICATION_LEAVE_APPLICATION_COMPLETE_LATER:
          "Complete Application Later",
        MEMBER_VERIFICATION_APPROVED_APPLICATION_MODAL_TITLE:
          "You are now a member of !!{guildName}!!!",
        MEMBER_VERIFICATION_APPROVED_APPLICATION_MODAL_DESC:
          "Hooray! It's time to talk and meet your new community.",
        MEMBER_VERIFICATION_APPROVED_APPLICATION_MODAL_CONFIRM: "Let's Go!",
        MEMBER_VERIFICATION_PROGRESS_LOST_TITLE:
          "Are you sure? Your progress will be lost.",
        MEMBER_VERIFICATION_PROGRESS_LOST_CONTINUE: "Close Anyway",
        MEMBER_VERIFICATION_APPLICATION_REJECTED_NOTICE_TITLE:
          "Your application has been rejected.",
        MEMBER_VERIFICATION_APPLICATION_REJECTED_TITLE:
          "Your application to join the server has been denied.",
        MEMBER_VERIFICATION_APPLICATION_REJECTED_TITLE_WITH_GUILD_NAME:
          "Your application to join {guildName} has been denied.",
        MEMBER_VERIFICATION_APPLICATION_REJECTED_REASON: "Reason:",
        MEMBER_VERIFICATION_APPLICATION_REAPPLY: "Reapply",
        MEMBER_VERIFICATION_APPLICATION_REJECTED_ICON:
          "Stylized image of a clipboard with an X",
        MEMBER_VERIFICATION_FOLDER_NAME: "Pending Join Requests",
        MEMBER_VERIFICATION_CONFIRM_LEAVE_TITLE: "Are you sure?",
        MEMBER_VERIFICATION_ICON_DESC: "Server Application Status",
        MEMBER_VERIFICATION_WARNING_UPDATE_MODAL_TITLE:
          "You need to update your app to join this server.",
        MEMBER_VERIFICATION_WARNING_UPDATE_MODAL_DESC:
          "If you are still seeing this screen after updating, please reach out to support.",
        MEMBER_VERIFICATION_WARNING_UPDATE: "Update",
        MEMBER_VERIFICATION_ON: "On",
        MEMBER_VERIFICATION_OFF: "Off",
        MEMBER_VERIFICATION_AUTOMATIC_DISABLED:
          "Members won’t see the requirements until you enable Rules Screening.",
        MEMBER_VERIFICATION_AUTOMATIC_ENABLED:
          "New members must accept the rules to talk in the server.",
        MEMBER_VERIFICATION_MANUAL:
          "Members won’t see the application until you enable Member Application.",
        MEMBER_VERIFICATION_AUTOMATIC_WARNING:
          "You currently have no rules, which means new members will just see an empty pop-up.",
        WELCOME_MESSAGE_TITLE_CHANNEL: "Welcome to !!{channelName}!!!",
        ANDROID_WELCOME_MESSAGE_TITLE_CHANNEL: "Welcome to #!!{channelName}!!!",
        WELCOME_MESSAGE_SUBTITLE_CHANNEL:
          "This is the start of the !!{channelName}!! channel.",
        ANDROID_WELCOME_MESSAGE_SUBTITLE_CHANNEL:
          "This is the start of the #!!{channelName}!! channel.",
        WELCOME_MESSAGE_EDIT_CHANNEL: "Edit channel",
        WELCOME_CTA_TITLE: "Welcome to\n\n!!{guildName}!!",
        WELCOME_CTA_TITLE_MOBILE: "Welcome to !!{guildName}!!",
        WELCOME_CTA_SUBTITLE_OWNER: "This is your brand new, shiny server.",
        WELCOME_CTA_SUBTITLE_MEMBER: "This is a brand new, shiny server.",
        WELCOME_CTA_SUBTITLE_EXISTING_SERVER:
          "This is the beginning of this server.",
        WELCOME_CTA_SUBTITLE_ACTION_WITH_GUIDE:
          "Here are some steps to help you get started. For more, check out our [Getting Started guide]({guideURL}).",
        WELCOME_CTA_INVITE_TITLE: "Invite your friends",
        WELCOME_CTA_MESSAGE_TITLE: "Send your first message",
        WELCOME_CTA_PERSONALIZE_TITLE: "Personalize your server with an icon",
        WELCOME_CTA_PERSONALIZE_TITLE_MOBILE: "Personalize your server",
        WELCOME_CTA_DOWNLOAD_TITLE: "Download the Discord App",
        WELCOME_CTA_BOOSTING: "Upgrade your server with Boosts",
        WELCOME_CTA_BOOSTING_PROGRESS_BAR: "Wanna make hangouts more fun?",
        WELCOME_CTA_BOOSTING_PROGRESS_BAR_SUBTITLE:
          "Boost to Level 1 and gain perks for everyone. Turn on the Boost progress bar to get support from your server. [Learn more](onClick)",
        WELCOME_CTA_BOOSTING_AWARENESS_TITLE: "Get server flair with Boosting",
        WELCOME_CTA_BOOSTING_AWARENESS_SUBTITLE:
          "Servers who reach Boosting Level 1 and above get unique invite embeds with custom Server Invite Backgrounds. [Learn more.](onClick)",
        WELCOME_CTA_BOOSTING_PURCHASE_MODAL_TITLE: "Get to the next level",
        WELCOME_CTA_APPS_RECOMMENDATION_TITLE: "Add your first app",
        GUILD_RULES_HEADER: "Server Rules",
        GUILD_RULES_SUBHEADER:
          "By participating in this server, you have read and agreed to the server's rules.",
        GUILD_RULES_EDIT_LINK: "Edit Server Rules",
        GUILD_RULES_INVALID_CHANNEL: "Invalid server rules channel",
        DISCOVER: "Discover",
        AVATAR_UPLOAD_EDIT_MEDIA: "Edit Image",
        AVATAR_UPLOAD_CANCEL: "Cancel",
        AVATAR_UPLOAD_APPLY: "Apply",
        AVATAR_UPLOAD_SKIP: "Skip",
        AVATAR_IN_ONBOARDING_MODAL_TITLE: "Choose profile picture",
        AVATAR_IN_ONBOARDING_MODAL_SUBTITLE:
          "Choose a photo that represents you!",
        AVATAR_IN_ONBOARDING_DEFAULT_SELECT_SUBTITLE:
          "or choose a Discord avatar",
        AVATAR_IN_ONBOARDING_SELECT_DEFAULT_AVATAR: "Select default avatar",
        AVATAR_IN_ONBOARDING_SKIP_STEP_ALERT_TITLE: "Skip uploading a picture?",
        AVATAR_IN_ONBOARDING_SKIP_STEP_ALERT_SUBTITLE:
          "You can always upload a profile picture later within Settings.",
        AVATAR_IN_ONBOARDING_ADD_PICTURE_CTA: "Add profile picture",
        AVATAR_IN_ONBOARDING_SKIP_FOR_NOW: "Skip for now",
        AVATAR_IN_ONBOARDING_FILE_TYPE_ERROR:
          "Please upload a JPG or PNG file.",
        AVATAR_IN_ONBOARDING_SELECT_DEFAULT_AVATAR_A11Y_LABEL:
          "Default Avatar {index}, {description}",
        DEFAULT_AVATAR_1_A11Y_LABEL:
          "a character with an Apple shaped head with a yellow shirt, head in hands, making a kissing face",
        DEFAULT_AVATAR_2_A11Y_LABEL:
          "a character with pink skin and a purple mohwak, wearing a purple jacket and drinking from a blue straw",
        DEFAULT_AVATAR_3_A11Y_LABEL:
          "a yellow bunny character wearing large orange glasses",
        DEFAULT_AVATAR_4_A11Y_LABEL:
          "a character with green skin drinking from a pink straw and wearing a blue gaming headset",
        DEFAULT_AVATAR_5_A11Y_LABEL:
          "a character with blue skin with a large smile, wearing a pink baseball cap",
        DEFAULT_AVATAR_6_A11Y_LABEL:
          "a yellow bird character with a long neck, wearing a blue shirt and small black sunglasses",
        DEFAULT_AVATAR_7_A11Y_LABEL:
          "a purple speaker shaped character with one large eye, smiling",
        DEFAULT_AVATAR_8_A11Y_LABEL:
          "a character with blue skin and yellow lips, looking suspicious, with a pink book on their head",
        DISCOVERABILITY_LANDING_TITLE: "Help your friends find you",
        DISCOVERABILITY_LANDING_SUBTITLE:
          "Let people who have your email address or phone number search for you on Discord.",
        DISCOVERABILITY_LANDING_TOGGLE_LABEL: "Allow search by email/number",
        DISCOVERABILITY_LANDING_INFO:
          "Allow someone to search for you if they have your phone number and/or email. This can be changed anytime in settings.",
        DISCOVERABILITY_LANDING_INFO_SETTINGS:
          "This can be changed anytime in Settings.",
        DISCOVERABILITY_LEARN_MORE_REDESIGN: "$[Learn more](learnMoreHook)",
        DISCOVERABILITY_LEARN_MORE: "$[Learn More](learnMoreHook)",
        DISCOVERABILITY_ALLOW_FIND_ME: "Allow people to find me",
        LAUNCH_WELCOME_LANDING_TITLE: "We've improved our mobile app!",
        LAUNCH_WELCOME_LANDING_SUBTITLE: "Choose a theme to get started.",
        LAUNCH_WELCOME_LEARN_MORE: "[Learn more here]({learnMoreUrl})",
        LAUNCH_WELCOME_NUX_TITLE: "Your DMs live here now!",
        LAUNCH_WELCOME_NUX_SUBTITLE: "Tap anywhere to dismiss.",
        LAUNCH_WELCOME_CHOOSE_A_THEME: "Choose a theme",
        APP_THEME: "App Theme",
        CHANNEL_PREVIEW_A11Y_LABEL: "App preview, with your theme applied",
        THEME_PICKER_MESSAGE_AUTHOR_1: "Nelly",
        THEME_PICKER_MESSAGE_PREVIEW_1: "Enjoy your trip to spain!",
        THEME_PICKER_MESSAGE_AUTHOR_2: "bio study group",
        THEME_PICKER_MESSAGE_PREVIEW_2: "graggle: Can someone explain #4?",
        THEME_PICKER_MESSAGE_AUTHOR_3: "phibi",
        THEME_PICKER_MESSAGE_PREVIEW_3: "I'll add them to the server",
        THEME_PICKER_MESSAGE_AUTHOR_4: "Dodgeball",
        THEME_PICKER_MESSAGE_PREVIEW_4: "cap: Registration opens on the third!",
        THEME_PICKER_MESSAGE_AUTHOR_5: "mac",
        THEME_PICKER_MESSAGE_PREVIEW_5: "What time should we start tonight?",
        THEME_PICKER_MESSAGE_AUTHOR_6: "Wumpus and Locke",
        THEME_PICKER_MESSAGE_PREVIEW_6: "Locke: okay I'll see you there",
        THEME_PICKER_MESSAGE_AUTHOR_7: "amanda",
        THEME_PICKER_MESSAGE_PREVIEW_7: "ok",
        THEME_PICKER_MESSAGE_AUTHOR_8: "Wumpus",
        THEME_PICKER_MESSAGE_PREVIEW_8: "let's play on saturday!",
        THEME_PICKER_MESSAGE_AUTHOR_9: "olive",
        THEME_PICKER_MESSAGE_PREVIEW_9: "yeppers",
        THEME_PICKER_MESSAGE_AUTHOR_10: "tofu",
        THEME_PICKER_MESSAGE_PREVIEW_10:
          "lmk if you need another for the group",
        THEME_PICKER_ACTIVITY_TITLE_1: "Mallow, Cap, and 3 others",
        THEME_PICKER_ACTIVITY_TITLE_2: "locke, mallow, and graggle",
        THEME_PICKER_SAMPLE_CHANNEL_NAME: "the-couch",
        THEME_PICKER_SAMPLE_ACTIVITY_NAME: "SketchHeads",
        THEME_PICKER_NITRO_ONLY: "This theme is available to Nitro users only.",
        THEME_PICKER_SYNC_APPEARANCE_HINT:
          "This will change the theme across all your devices.",
        THEME_PICKER_YOU_CAN_CHANGE_THIS_LATER:
          "You can always change this later!",
        AGE_GATE_GO_BACK: "Go back",
        AGE_GATE_SUBMIT: "Submit",
        AGE_GATE_AGE_VERIFIED_BODY:
          "Thank you for verifying your age. This helps us to keep Discord safe.",
        AGE_GATE_HEADER: "Enter your birthday",
        AGE_GATE_DATE_OF_BIRTH: "Date of birth",
        AGE_GATE_DATE_OF_BIRTH_A11Y_HINT: "Tap to open date picker",
        AGE_GATE_UNDERAGE_HEADER: "Unable to register",
        AGE_GATE_UNDERAGE_BODY_POST_REGISTER_MESSAGE:
          "Based on the information you provided, we can’t create an account for you right now.",
        AGE_GATE_UNDERAGE_BODY_DEFAULT_REG_MESSAGE:
          "You must be at least 13 years old to use Discord.",
        AGE_GATE_UNDERAGE_BODY:
          "{underageMessage} [View our help article]({helpURL}) to learn more.",
        AGE_GATE_UNDERAGE_BACK_TO_LOGIN: "Back to Login",
        AGE_GATE_VIEW_HELP_ARTICLE: "View Help Article",
        AGE_GATE_INVALID_BIRTHDAY: "Please enter a valid date of birth",
        AGE_GATE_YOUR_BIRTHDAY: "Your birthday",
        AGE_GATE_EXISTING_HEADER: "Help us keep Discord safe",
        AGE_GATE_FAMILY_CENTER_HEADER: "Please confirm your age",
        AGE_GATE_BODY:
          "To keep our users safe, we need to verify your age. We will only ask you for this once. [Why do I need to provide my birthday?]({helpURL})",
        AGE_GATE_NSFW_BODY:
          "Before you can view this age-restricted channel, we need to verify your age. We will only ask you for this once. [Why do I need to provide my birthday?]({helpURL})",
        AGE_GATE_DEEP_LINK_BODY:
          "We need to verify your age. [Why do I need to provide my birthday?]({helpURL})",
        AGE_GATE_FAMILY_CENTER_BODY:
          "Before you can use Family Center, we need to verify your age so we can show you the appropriate experience. We will only ask you for this once.",
        AGE_GATE_UNDERAGE_EXISTING_HEADER: "Sorry, there's an issue.",
        AGE_GATE_UNDERAGE_EXISTING_BODY_DELETION:
          "You have **14 days** to verify your age before your account will be deleted. Check your email for instructions on verifying your age.",
        AGE_GATE_UNDERAGE_EXISTING_BODY_DELETION_WITH_DAYS:
          "You have **{days, plural, =1 {1 day} other {{days} days}}** to verify your age before your account will be deleted. Check your email for instructions on verifying your age.",
        AGE_GATE_AGE_VERIFIED: "Age Verified",
        AGE_GATE_FAILED_TO_UPDATE_BIRTHDAY:
          "Failed to verify your birthday, please try again",
        AGE_GATE_NSFW_UNDERAGE_HEADER:
          "Sorry, you're not old enough to view this age-restricted channel",
        AGE_GATE_NSFW_UNDERAGE_BODY:
          "You need to be 18 or older in order to view age-restricted channels on Discord. [View our help article]({helpURL}) on age verification.",
        AGE_GATE_NSFW_DESCRIPTION:
          "This channel contains adult content marked as age-restricted. Do you wish to proceed?",
        AGE_GATE_CONFIRM_HEADER:
          "You submitted that you're {age, plural, =1 {1 year old} other {{age} years old}}. Is that correct?",
        AGE_GATE_CONFIRM_GO_BACK: "Go back",
        AGE_GATE_CONFIRM_BUTTON: "Confirm age",
        AGE_GATE_DOB_DAY: "Day",
        AGE_GATE_DOB_MONTH: "Month",
        AGE_GATE_DOB_YEAR: "Year",
        NSFW_GUILD_HEADER: "Age-restricted server",
        NSFW_GUILD_DESCRIPTION:
          "Sorry, age-restricted servers are blocked on the iOS platform per App Store guidelines. If you're over 18 you can join on the desktop app or website.",
        NSFW_GUILD_DESCRIPTION_MORE:
          "Read more at our [Help Center]({helpURL}).",
        NSFW_GUILD_CLOSE: "Got it",
        NSFW_GUILD_SIDEBAR_HEADER: "Age-restricted server",
        NSFW_GUILD_SIDEBAR_DESCRIPTION:
          "Age-restricted servers are blocked on the iOS platform per App Store guidelines. [Visit our Help Center]({helpURL}) to learn more.",
        NSFW_CHANNEL_HEADER: "Unavailable",
        NSFW_GUILD_EMOJI_UNAVAILABLE: "Emoji from this server are unavailable",
        NSFW_GUILD_STICKERS_UNAVAILABLE:
          "Stickers from this server are unavailable",
        NSFW_GUILD_CHANNEL_DESCRIPTION:
          "This server's content is unavailable on iOS",
        NSFW_GUILDS_TOGGLE_HEADER:
          "Allow access to age-restricted servers on iOS",
        NSFW_GUILDS_TOGGLE_CAPTION:
          "After joining on desktop, view your servers for people 18+ on iOS devices.",
        NSFW_DM_COMMANDS_HEADER:
          "Allow access to age-restricted commands from apps in Direct Messages",
        NSFW_DM_COMMANDS_CAPTION:
          "This setting applies to all bots and apps. Allows people 18+ to access commands marked as age-restricted in DMs",
        MULTI_ACCOUNT_LOGIN_TITLE: "Add Account",
        MULTI_ACCOUNT_LOGIN_SUBTITLE:
          "Logging in to another account will let you easily switch between accounts on this device.",
        MULTI_ACCOUNT_MAX_ACCOUNTS_ERROR:
          "Sorry, you can only add {maxNumAccounts, number} accounts.",
        MULTI_ACCOUNT_ANNOUNCEMENT_TOOLTIP_TITLE: "New: Account Switching",
        MULTI_ACCOUNT_ANNOUNCEMENT_SUBTITLE:
          "Now you can easily switch between your main account and up to {maxAltAccounts, number} alts.",
        MULTI_ACCOUNT_GOODBYE_TITLE: "Account Switching Ends Soon",
        MULTI_ACCOUNT_GOODBYE_SUBTITLE:
          "The beta test is ending and we'll be turning off the account switcher shortly. Be sure to switch back to your primary account to stay signed in.",
        MULTI_ACCOUNT_GOODBYE_THANKS: "Thanks again for trying it out!",
        MULTI_ACCOUNT_GOODBYE_BUTTON: "Ok, will do",
        MULTI_ACCOUNT_LOGGED_OUT: "{username} logged out",
        SWITCH_ACCOUNTS_MENU_ITEM_TITLE: "Switch Accounts",
        SWITCH_ACCOUNTS_MANAGE_ACCOUNTS: "Manage Accounts",
        SWITCH_ACCOUNTS_MODAL_SUBHEADER:
          "Switch accounts, sign in, sign out, go wild.",
        SWITCH_ACCOUNTS_ADD_AN_ACCOUNT_BUTTON: "Add an account",
        SWITCH_ACCOUNTS_ACTIVE_ACCOUNT: "Active account",
        SWITCH_ACCOUNTS_ACTION_LOG_IN: "Log in",
        SWITCH_ACCOUNTS_ACTION_SWITCH: "Switch",
        SWITCH_ACCOUNTS_CHOOSE_ACCOUNT: "Choose an account",
        SWITCH_ACCOUNTS_CHOOSE_ACCOUNT_HELPER:
          "Select an account to log in with or add a new one.",
        SWITCH_ACCOUNTS_REMOVE_ACCOUNT: "Log out",
        SWITCH_ACCOUNTS_MANAGE_ACCOUNT: "Manage account",
        SWITCH_ACCOUNTS_INVALID_TOKEN: "Please log in again.",
        MULTI_ACCOUNT_SERVER_INVITE_JOINING_AS: "Joining as",
        SWITCH_ACCOUNTS_TOAST_LOGIN_SUCCESS: "Switched to {username}",
        SWITCH_ACCOUNTS_TOAST_LOGIN_ERROR: "Switch failed, sorry :(",
        MULTI_ACCOUNT_MAX_ACCOUNTS_ALERT_TITLE: "Account limit reached",
        MULTI_ACCOUNT_MAX_ACCOUNTS_ALERT_BODY:
          "You can switch between up to {maxNumAccounts, number} accounts. Remove an account first to add a new one.",
        MULTI_ACCOUNT_REMOVE_ACCOUNT_ALERT_TITLE: "Remove this account?",
        MULTI_ACCOUNT_REMOVE_ACCOUNT_ALERT_BODY:
          "You'll have to log in to !!{username}!! again later.",
        MULTI_ACCOUNT_CHANGE_ACCOUNT_A11Y_HINT: "double tap to switch accounts",
        MULTI_ACCOUNT_SWITCHING_ACCOUNTS: "Switching accounts...",
        MULTI_ACCOUNT_TAB_A11Y_ACTION: "Switch accounts",
        NUF_CHANNEL_PROMPT_TITLE: "Start a conversation",
        NUF_CHANNEL_PROMPT_SUBTITLE:
          "Let's get you ready to talk.\n  What's a topic your group likes?",
        NUF_CHANNEL_PROMPT_TOPIC: "Topic",
        NUF_CHANNEL_PROMPT_CTA: "Take me to my server!",
        NUF_CHANNEL_PROMPT_CHANNEL_TOPIC_TEMPLATE:
          "This is a good place to talk about !!{topic}!!",
        NUF_CHANNEL_PROMPT_TOPIC_PLACEHOLDER: "Drawing, climbing, memes, etc.",
        EMOJI_TOOLTIP_CLICK_CTA: "Click to learn more",
        EMOJI_POPOUT_UNJOINED_GUILD_EMOJI_DESCRIPTION: "Get this emoji from",
        EMOJI_POPOUT_JOINED_GUILD_EMOJI_DESCRIPTION: "This emoji is from",
        EMOJI_POPOUT_PREMIUM_CURRENT_GUILD_DESCRIPTION:
          "This emoji is from this server. You can use it everywhere.",
        EMOJI_POPOUT_PREMIUM_JOINED_GUILD_DESCRIPTION:
          "This emoji is from one of your servers. Type its name in the chat bar to use it.",
        EMOJI_POPOUT_PREMIUM_UNJOINED_DISCOVERABLE_GUILD_DESCRIPTION:
          "Want to use this emoji everywhere? Join the server.",
        EMOJI_POPOUT_PREMIUM_UNJOINED_PRIVATE_GUILD_DESCRIPTION:
          "This emoji is from a server that is either invite-only or unavailable.",
        EMOJI_POPOUT_CURRENT_GUILD_DESCRIPTION:
          "This emoji is from this server. Get Nitro to use it everywhere.",
        EMOJI_POPOUT_JOINED_GUILD_DESCRIPTION:
          "This emoji is from one of your servers. Get Nitro to use it everywhere.",
        EMOJI_POPOUT_ADDED_PACK_DESCRIPTION:
          "This emoji is from one of your packs. Type its name in the chat bar to use it.",
        EMOJI_POPOUT_UNJOINED_DISCOVERABLE_GUILD_DESCRIPTION:
          "Want to use this emoji everywhere? Get Nitro and join the server.",
        EMOJI_POPOUT_UNJOINED_PRIVATE_GUILD_DESCRIPTION:
          "This emoji is from a server that is either invite-only or unavailable. [Learn more](openPremiumSettings) about using custom emoji.",
        STICKER_POPOUT_UNJOINED_GUILD_EMOJI_DESCRIPTION:
          "Get this sticker from",
        STICKER_POPOUT_JOINED_GUILD_EMOJI_DESCRIPTION: "This sticker is from",
        STICKER_POPOUT_PREMIUM_CURRENT_GUILD_DESCRIPTION:
          "This sticker is from this server. You can use it everywhere.",
        STICKER_POPOUT_PREMIUM_JOINED_GUILD_DESCRIPTION:
          "This sticker is from one of your servers. Type its name in the chat bar to use it.",
        STICKER_POPOUT_PREMIUM_UNJOINED_DISCOVERABLE_GUILD_DESCRIPTION:
          "Want to use this sticker everywhere? Join the server.",
        STICKER_POPOUT_PREMIUM_UNJOINED_PRIVATE_GUILD_DESCRIPTION:
          "This sticker is from a server that is either invite-only or unavailable.",
        STICKER_POPOUT_CURRENT_GUILD_DESCRIPTION:
          "This sticker is from this server. Get Nitro to use it everywhere.",
        STICKER_POPOUT_JOINED_GUILD_DESCRIPTION:
          "This sticker is from one of your servers. Get Nitro to use it everywhere.",
        STICKER_POPOUT_UNJOINED_DISCOVERABLE_GUILD_DESCRIPTION:
          "Want to use this sticker everywhere? Get Nitro and join the server.",
        STICKER_POPOUT_UNJOINED_PRIVATE_GUILD_DESCRIPTION:
          "This sticker is from a server that is either invite-only or unavailable. [Learn more](openPremiumSettings) about using custom stickers.",
        STICKER_POPOUT_JOIN_SERVER: "Join Server",
        STICKER_POPOUT_PUBLIC_SERVER: "Discoverable Server",
        STICKER_POPOUT_PRIVATE_SERVER: "Invite-only server",
        STICKER_POPOUT_SHOW_MORE_STICKERS: "Show More Stickers",
        EMOJI_POPOUT_PREMIUM_CTA: "Get Nitro",
        EMOJI_POPOUT_SHOW_MORE_EMOJIS: "Show More Emoji",
        EMOJI_POPOUT_PUBLIC_SERVER: "Discoverable Server",
        EMOJI_POPOUT_PRIVATE_SERVER: "Invite-only server",
        EMOJI_POPOUT_STANDARD_EMOJI_DESCRIPTION:
          "A default emoji. You can use this emoji everywhere on Discord.",
        TEST_NEWLINES_KEY:
          "\nThis is a test string, let's see if we can preserve newlines.\n\n  ",
        LOADING_DID_YOU_KNOW: "Did you know",
        LOADING_LINE_1:
          "Discord was almost called Bonfire before we picked our name. It was meant to be nice and cozy.",
        LOADING_LINE_2:
          "Discord was almost called Wyvern before we picked our name. Not too proud of that one.",
        LOADING_LINE_4:
          'There are a bunch of hidden "Easter Eggs" in the app that happen when you click certain things...',
        LOADING_LINE_5:
          "Discord started as a game company making a mobile game called Fates Forever.",
        LOADING_LINE_6: "Discord’s official birthday is May 13, 2015.",
        LOADING_LINE_7:
          "We came up with the idea of Discord Nitro over morning breakfast potatoes.",
        LOADING_LINE_8:
          "Our mascot, Wumpus, was originally created as a character with no friends :(",
        LOADING_LINE_9:
          "In Discord's early days, light theme was the only theme. Dark theme didn't arrive until August 2015.",
        LOADING_LINE_10:
          "In the ancient days, Discord started as a browser-only app.",
        LOADING_LINE_11:
          "Our HypeSquad program has three houses you can be sorted in to by taking the in-app quiz: Bravery, Balance, and Brilliance.",
        LOADING_LINE_12:
          "The character on our 404 page is a robot hamster named Nelly.",
        LOADING_LINE_13:
          "You can play our version of the Snake game on our 404 page by pressing a ~secret~ button.",
        LOADING_LINE_14:
          "There's a very small—and we mean small—chance you can get a secret ringtone when calling someone. Good luck!",
        LOADING_LINE_15:
          "Our old Partner mascot was an elf named Springle. He recently retired.",
        LOADING_KEYBIND_TIP_1:
          "$[](quickSwitcherHook) to quickly find a previous conversation or channel.",
        LOADING_KEYBIND_TIP_2:
          "$[](markUnreadHook) a message to mark it as unread.",
        LOADING_KEYBIND_TIP_3:
          "$[](markServerUnreadHook) to mark an entire server as read.",
        LOADING_KEYBIND_TIP_4:
          "$[](navigateUnreadHook) or $[](downHook) will navigate between unread channels",
        LOADING_KEYBIND_TIP_5:
          "Use $[](keyboardShortcutsHook) to bring up the list of keyboard shortcuts.",
        LOADING_KEYBIND_TIP_6:
          "$[](messageNewlineHook) to make a new line without sending your message.",
        LOADING_KEYBIND_TIP_7:
          "Holding $[](shiftHook) while clicking emoji allows you to send multiple emoji.",
        LOADING_KEYBIND_TIP_8:
          "You can press $[](upHook) to quickly edit your most recent message.",
        LOADING_TIP_1:
          "You can use Streamer Mode to hide personal details while streaming.",
        LOADING_TIP_2:
          "You can type /tableflip and /unflip to spice up your messages.",
        LOADING_TIP_3:
          "Characters like @, #, !, and * will narrow Quick Switcher results.",
        LOADING_TIP_4:
          "Click a server name in the emoji picker to hide that server's emoji.",
        LOADING_TIP_5:
          "Hover a GIF and click the star to save it to your favorites.",
        LOADING_TIP_6:
          "The top-most role for a user defines that user's color.",
        LOADING_TIP_7:
          "A red mic icon means that person has been muted by a server admin.",
        LOADING_TIP_8:
          "You can temporarily mute a server or channel by right-clicking it.",
        LOADING_TIP_9:
          "Click your avatar in the lower-left corner to set a custom status.",
        LOADING_TIP_10: "Group DMs can have up to ten members.",
        LOADING_TIP_11:
          "Click the compass in your server list to find new servers.",
        LOADING_TIP_12:
          "Drag and drop servers on top of each other to create server folders.",
        LOADING_TIP_13:
          "Type /gif or /tenor + anything to find a GIF for that topic!",
        LOADING_TIP_14:
          "Share what you're playing by using the Game Activity settings.",
        LOADING_TIP_15:
          "Highlight text in your chat bar to bold, use italics, and more.",
        LOADING_TIP_16:
          "Hide muted channels in a server by right clicking the server name.",
        LOADING_TIP_17:
          "Customize Discord's appearance in the user settings menu.",
        LOADING_TIP_18:
          "Link your favorite social media accounts in the connections settings.",
        LOADING_TIP_19:
          "You can create channel categories to group and organize your channels.",
        LOADING_TIP_20:
          "You can join up to 100 servers, and up to 200 with Nitro!",
        LOADING_TIP_21:
          "You can drag and drop files onto Discord to upload them.",
        LOADING_TIP_22:
          "Change each participant's volume by right-clicking them in a call.",
        LOADING_TIP_23:
          "Right click to pin messages in a channel or DM to save them for later.",
        LOADING_TIP_24:
          "Type a plus sign before an emoji name to turn it into a reaction.",
        LOADING_TIP_25:
          "You can type /nick to quickly change your nickname in a server.",
        LOADING_TIP_26:
          "You can type / to view bot commands and other built-in commands",
        LOADING_TIP_27:
          "You can type !!{asterisks}!! around your words to make them **bold**.",
        HALLOWEEN_LOADING_TEXT_1:
          "happy halloween make sure to bring your server back from the dead",
        HALLOWEEN_LOADING_TEXT_2:
          "oooOOOooO have a very spoopy halloween season",
        HALLOWEEN_LOADING_TEXT_3: "Brewing up a bone-chilling ringtone",
        HALLOWEEN_LOADING_TEXT_4: "BoooOOOOooOo0o",
        HALLOWEEN_LOADING_TEXT_5: "In voice chat, everyone is a spirit",
        HALLOWEEN_LOADING_TEXT_6:
          "Verifying your servers aren't haunted (probably)",
        HALLOWEEN_LOADING_TEXT_7:
          "We’re getting into the “spirit” of Halloween",
        HALLOWEEN_LOADING_TEXT_8: "Do zombies only post dead memes?",
        HALLOWEEN_LOADING_TEXT_9:
          "Discord is getting infected! Watch out for Zombie Wumpus",
        ACCESSIBILITY_LOADING_TIP_1:
          "Pick light or dark theme in Appearance Settings.",
        ACCESSIBILITY_LOADING_TIP_2:
          "Turn off animations with Reduced Motion in Accessibility Settings.",
        ACCESSIBILITY_LOADING_TIP_3:
          "Change Text-to-Speech speed in Accessibility Settings.",
        ACCESSIBILITY_LOADING_TIP_4:
          "Make images accessible to everyone. Add a description on upload.",
        ACCESSIBILITY_LOADING_TIP_5:
          "Make roles with unique colors easier to read in Accessibility Settings.",
        ACCESSIBILITY_LOADING_TIP_6:
          "No mouse? Use Keyboard Mode to get around. $[](tabHook) to get started.",
        ACCESSIBILITY_LOADING_TIP_7:
          "No keyboard? Enable the Send Message button in Accessibility Settings to chat.",
        ACCESSIBILITY_LOADING_TIP_8:
          "Adjust color saturation in Accessibility Settings.",
        ACCESSIBILITY_LOADING_TIP_9:
          "Scale chat font size in Appearance Settings.",
        ACCESSIBILITY_LOADING_TIP_10:
          "Jump to different sections of Discord with $[](F6Hook). $[](tabHook) to get started.",
        VOICE_PANEL_EMPTY_SUBTITLE:
          "No one’s here yet!\nWhen you are ready to talk, just hop in.",
        VOICE_PANEL_STREAM_PREVIEW_HEADER: "{username}'s stream",
        VOICE_PANEL_INTRODUCTION_HEADER: "Welcome to your first voice channel!",
        VOICE_PANEL_INTRODUCTION_TEXT:
          "Control your voice settings, turn on video, or start screensharing here.",
        VOICE_PANEL_INTRODUCTION_CLOSE: "Got it",
        VOICE_PANEL_SHOW_VOICE_USERS: "Show Voice Users",
        VOICE_PANEL_USERS_A11Y_LABEL: "Voice Users",
        VOICE_PANEL_USER_A11Y_DEAFENED_LABEL: "{username}, deafened and muted",
        VOICE_PANEL_USER_A11Y_MUTED_LABEL: "{username}, muted",
        VOICE_PANEL_SHOW_EXTRAS: "Show All Users",
        VOICE_PANEL_HIDE_EXTRAS: "Minimize",
        VOICE_PANEL_USER_TOOLTIP: "!!{userName}!!, {status}",
        VOICE_PANEL_PEOPLE_IN_VOICE:
          "{n, plural, one {1 Person} other {{n} People}} in Voice",
        VOICE_PANEL_NAVIGATE_TO_PIP_A11Y_LABEL: "Minimize to PIP",
        VOICE_PANEL_NAVIGATE_TO_GRID_A11Y_LABEL: "View voice grid",
        VOICE_PANEL_HEADER_ACCESSIBILITY_HINT: "Double-tap for Settings",
        VOICE_PANEL_OVERVIEW_HEADER_2_PEOPLE: "{user1} and {user2}",
        VOICE_PANEL_OVERVIEW_HEADER_3_OR_MORE_PEOPLE:
          "{user1}, {user2}, and {numPeople, plural, =1 {1 other} other {{numPeople} others}}",
        VOICE_PANEL_CUSTOMIZE_BACKGROUND_TITLE: "Customize Call Background",
        VOICE_PANEL_CUSTOMIZE_BACKGROUND_SUBTITLE:
          "Set background for everyone in the call",
        VOICE_PANEL_CHANNEL_SETTINGS_SUBTITLE:
          "Edit preferences for this shared space",
        VOICE_PANEL_VOICE_SETTINGS_SUBTITLE:
          "Adjust your personal voice & video settings",
        VOICE_PANEL_DEAFEN_SUBTITLE: "Disables all sound",
        VOICE_PANEL_ONLY_SHOW_VIDEO_TITLE: "Only Show Videos",
        VOICE_PANEL_ONLY_SHOW_VIDEO_SUBTITLE:
          "We won't show non-video participants",
        VOICE_PANEL_CHANGE_BACKGROUND_TITLE: "Change Background",
        VOICE_PANEL_CHANGE_BACKGROUND_SUBTITLE: "Set background for everyone",
        VOICE_PANEL_CHANGE_BACKGROUND_FOOTER:
          "This background will be shown to everyone after saving.",
        VOICE_PANEL_LOAD_MORE: "Load more",
        VOICE_PANEL_NO_JOIN_PERMISSIONS_ALERT_TITLE:
          "You don’t have permission to join this Voice Channel.",
        VOICE_PANEL_NO_JOIN_PERMISSIONS_ALERT_SUBTITLE:
          "This channel is only for selected members and roles.",
        VOICE_PANEL_MAX_CAPACITY_ALERT_TITLE: "This channel is full",
        VOICE_PANEL_MAX_CAPACITY_ALERT_SUBTITLE:
          "Only {count, plural, =1 {# person} other {# people}} can join this voice channel.",
        VOICE_PANEL_AUDIO_SELECTOR_PHONE: "This Phone",
        VOICE_PANEL_AUDIO_SELECTOR_EXTERNAL: "External Device",
        VOICE_PANEL_FLOATING_CTA_INVITE_LABEL: "Add people to Voice Chat",
        VOICE_PANEL_FLOATING_CTA_INVITE_SUBLABEL:
          "Let the group know you are here!",
        VOICE_PANEL_BAD_CONNECTION_CTA_LABEL: "Somone has a weak connection",
        VOICE_PANEL_BAD_CONNECTION_CTA_SUB_LABEL:
          "Some participants will be audio only.",
        VOICE_PANEL_FOR_DEVELOPERS: "For Developers",
        VOICE_PANEL_SCREENSHARE_SHORTCUTS: "Screen Share Shortcuts",
        VOICE_PANEL_HIDE_DRAWER: "Hide Drawer",
        VOICE_PANEL_SHOW_DRAWER: "Show Settings Drawer",
        NUF_DESKTOP_TEMPLATES_TITLE: "Create Your First Discord Server",
        NUF_DESKTOP_TEMPLATES_SUBTITLE:
          "Your server is where you and your friends hang out.\n  Make yours and start talking.",
        TOO_MANY_USER_GUILDS_TITLE_2:
          "You are at the {quantity, number} server limit.",
        TOO_MANY_USER_GUILDS_DESCRIPTION:
          "You must leave a server first to join.",
        ONGOING_CALL_TAP_TO_JOIN: " — Tap to join",
        CALL_ENDED_DESCRIPTION: "!!{duration}!! — !!{timestamp}!!",
        CALL_MOBILE_TAP_TO_RETURN: "!!{callState}!! — Tap to return to call",
        TOO_MANY_USER_GUILDS_ALERT_TITLE: "Oh no!",
        TOO_MANY_USER_GUILDS_ALERT_DESCRIPTION:
          "You are at the {quantity, number} server limit. You must leave a server first to join.",
        MESSAGES_FAILED_TO_LOAD: "Messages failed to load",
        MESSAGES_FAILED_TO_LOAD_TRY_AGAIN: "Try Again",
        BUILD_OVERRIDE_MODAL_INVITE:
          "You have been invited to try a test build of Discord",
        BUILD_OVERRIDE_MODAL_APPLY: "Okay let's try it!",
        BUILD_OVERRIDE_MODAL_EXPIRES_DURATION:
          "expires in {expirationDuration}",
        BUILD_OVERRIDE_MODAL_INVALID: "This link is no longer valid.",
        BUILD_OVERRIDE_MODAL_INVALID_BUTTON: "Continue to Discord",
        APPLICATION_COMMAND: "Slash Command",
        COPY_COMMAND: "Copy Command",
        OPTIONAL_APPLICATION_COMMAND_INDICATOR: "optional",
        APPLICATION_COMMAND_SENDING: "Sending command...",
        APPLICATION_COMMAND_WAITING: "!!{applicationName}!! is thinking...",
        APPLICATION_COMMAND_FAILED: "This interaction failed",
        APPLICATION_COMMAND_TIMED_OUT: "The application did not respond",
        APPLICATION_COMMAND_USED:
          "$[](userHook) used $[](commandHook) with $[](applicationHook)",
        APPLICATION_COMMAND_USED_SHORT: "$[](userHook) used $[](commandHook)",
        APPLICATION_COMMAND_USED_MOBILE:
          "[!!{username}!!](handleTapUsername) used [!!{commandName}!!](handleTapCommandName) with [!!{applicationName}!!](handleTapApplicationName)",
        APPLICATION_COMMAND_USED_MOBILE_SHORT:
          "[!!{username}!!](usernameOnClick) used [!!{commandName}!!](commandNameOnClick)",
        APPLICATION_COMMAND_AUTOCOMPLETE_NO_OPTIONS:
          "No options match your search",
        APPLICATION_COMMAND_AUTOCOMPLETE_FAILED: "Loading options failed",
        APPLICATION_COMMAND_NO_PERMISSIONS:
          "You don't have permission to use any commands from **!!{applicationName}!!**",
        APPLICATION_COMMAND_NO_COMMANDS: "No Commands Available",
        APPLICATION_COMMAND_EDUCATION:
          "Try slash commands! A new way to use bots by typing slash. [Dismiss](dismissOnClick)",
        APPLICATION_COMMAND_FILE_ATTACHMENT: "Please attach a file",
        APPLICATION_COMMAND_MENTION_CONFIRM_HEADER: "Clear message?",
        APPLICATION_COMMAND_MENTION_CONFIRM_BODY:
          "Looks like you've already written something. Do you want to clear it and use a command?",
        MJ_CHATBAR_BODY:
          "Type “$[command](commandHook)” to use Midjourney. Tip: Create a server to try it with just friends.",
        APPLICATION_IFRAME_MODAL_LOAD_ERROR:
          "There was an error trying to load the application.",
        INTERACTION_RATE_LIMITED: "Slow down! You're clicking too fast.",
        APPLICATION_ADD_TO_SERVER: "Add to Server",
        APPLICATION_ADD_BUTTON: "Add App",
        APPLICATION_ADD_TO_SERVER_ACTIONS: "Add to Server Actions",
        APPLICATION_ADD_TO_SERVER_ACTIONS_COPY: "Copy Add to Server URL",
        COMMANDS_SCOPE_MIGRATION_OVERVIEW_TOOLTIP:
          "Members can't use this bot until you turn on permissions.",
        COMMANDS_SCOPE_MIGRATION_TOGGLE_TOOLTIP:
          "Flip this switch to enable {botName}'s commands for everyone! Read more about command permissions [here.]({link})",
        COMMANDS_SCOPE_MIGRATION_ADMIN_NOTICE:
          "Commands have been enabled for bots in your server. Customize permissions in **Server Settings > Integrations**.",
        VIEWING_AS_ROLES:
          "You are viewing this server as {numRoles, plural, =0 {@everyone} =1 {1 role} other {{numRoles} roles}}.",
        VIEWING_AS_ROLES_SELECT: "Select Roles",
        VIEWING_AS_ROLES_BACK: "Back to Roles Settings",
        VIEW_AS_ROLE: "View Server As Role",
        VIEW_AS_ROLE_DESCRIPTION:
          "This will let you test what actions this role can take and what channels it can see. Only available to Server Owners and Admins.",
        VIEW_AS_ROLES_HIDDEN_VC_WARNING:
          "This voice channel is not visible to the role(s) you are viewing as. You will no longer see this channel once you disconnect.",
        VIEW_AS_ROLES_VOICE_WARNING:
          "View as Role does not reflect a role's voice restrictions, including priority speaker and suppression.",
        VIEW_AS_ROLES_MENTIONS_WARNING:
          "You are viewing as roles. Notifications may be in channels you can't see.",
        VIEWING_AS_ROLES_BACK_INTEGRATIONS: "Back to Integrations Settings",
        VIEW_AS_ROLES_SEE_ROLES: "See Roles",
        VIEW_AS_MEMBER_DESCRIPTION:
          "You are viewing the server as a new member.",
        VIEW_AS_MEMBER_DESCRIPTION_WITH_ROLES:
          "You are viewing the server as a new member. {numRoles, plural, =0 {You have no roles} =1 {You have 1 role} other {You have {numRoles} roles}}.",
        VIEW_AS_MEMBER_ROLES_WARNING:
          "Changing roles manually may not reflect the new member experience.",
        VIEW_AS_ROLES_NO_ACCESS:
          "You do not have permissions to use this feature",
        VIEWING_AS_ONBOARDING_MEMBER_BACK: "Back to Onboarding Settings",
        SERVER_SHOP_PREVIEW_DISCLAIMER:
          "Currently viewing all server subscription tiers and products. There is a maximum of {maxTiers} tiers and {maxProducts} products that can be published at a time.",
        MESSAGE_ACTION_REPLY: "Reply",
        REPLYING_TO: "Replying to $[](userHook)",
        REPLYING_TO_A11Y_LABEL: "Replying to !!{username}!!",
        REPLYING_TO_A11Y_HINT: "go to the replied message",
        MOBILE_REPLYING_TO: "Replying to **{username}**",
        MOBILE_REPLYING_TO_A11Y_LABEL: "Replying to {username}",
        MOBILE_REPLY_PREVIEW_A11Y_LABEL: "Reply message preview",
        MOBILE_SCROLL_TO_MESSAGE_ACTION_A11Y_LABEL: "Scroll to message",
        CANCEL_REPLYING_TO: "Cancel reply",
        JUMP_BAR_VIEWING_REPLY: "You are viewing a reply.",
        JUMP_TO_ORIGINAL_MESSAGE: "Jump to original message",
        REPLY_QUOTE_NO_TEXT_CONTENT: "Click to see attachment",
        REPLY_QUOTE_NO_TEXT_CONTENT_MOBILE: "Tap to see attachment",
        REPLY_QUOTE_MESSAGE_BLOCKED: "Blocked message",
        REPLY_QUOTE_MESSAGE_NOT_LOADED: "Message could not be loaded",
        REPLY_QUOTE_MESSAGE_DELETED: "Original message was deleted",
        REPLY_QUOTE_STICKER: "Click to see sticker",
        REPLY_QUOTE_STICKER_MOBILE: "Tap to see sticker",
        REPLY_QUOTE_COMMAND: "Click to see command",
        REPLY_QUOTE_VOICE_MESSAGE: "Click to see voice message",
        REPLY_QUOTE_VOICE_MESSAGE_MOBILE: "Tap to see voice message",
        REPLY_MENTION_ON: "ON",
        REPLY_MENTION_ON_TOOLTIP:
          "Click to disable pinging the original author.",
        REPLY_MENTION_OFF: "OFF",
        REPLY_MENTION_OFF_TOOLTIP:
          "Click to enable pinging the original author.",
        REPLY_MENTION_ON_MOBILE_A11Y_HINT:
          "Tap to disable pinging the original author.",
        REPLY_MENTION_OFF_MOBILE_A11Y_HINT:
          "Tap to enable pinging the original author.",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_PROMPT:
          "Your current email address is !!{email}!! What would you like to change it to?",
        USER_SETTINGS_ACCOUNT_VERIFY_PASSWORD_TITLE: "Verify your password",
        USER_SETTINGS_ACCOUNT_VERIFY_PASSWORD_TITLE_IN_TITLE_CASE:
          "Confirm Password",
        USER_SETTINGS_ACCOUNT_VERIFY_PASSWORD_SUBTITLE:
          "Please enter your password to edit your account.",
        USER_SETTINGS_ACCOUNT_VERIFY_PASSWORD_DESCRIPTION:
          "Last step: Enter your password to complete the change.",
        USER_SETTINGS_ACCOUNT_VERIFY_PASSWORD_FORGOT:
          "[Forgot your password? It happens.]({passwordResetURL})",
        USER_SETTINGS_ACCOUNT_CHANGE_USERNAME_TITLE: "Edit Username",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_TITLE: "Edit Email",
        USER_SETTINGS_ACCOUNT_REMOVAL_SECTION: "Account Removal",
        USER_SETTINGS_ACCOUNT_REMOVAL_DESCRIPTION:
          "Disabling your account means you can recover it at any time after taking this action.",
        USER_SETTINGS_ACCOUNT_REMOVAL_DESCRIPTION_UNCLAIMED:
          "No longer need your account?",
        USER_SETTINGS_ACCOUNT_PASSWORD_AND_AUTHENTICATION:
          "Password and Authentication",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_TITLE_DESKTOP:
          "Enter an email address",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_PROMPT_DESKTOP:
          "Enter a new email address and your existing password.",
        USER_SETTINGS_ACCOUNT_CHANGE_USERNAME_TITLE_DESKTOP:
          "Change your username",
        USER_SETTINGS_ACCOUNT_CHANGE_USERNAME_PROMPT_DESKTOP:
          "Enter a new username and your existing password.",
        USER_SETTINGS_ACCOUNT_CHANGE_PASSWORD_TITLE_DESKTOP:
          "Change your password",
        USER_SETTINGS_ACCOUNT_CHANGE_PASSWORD_PROMPT_DESKTOP:
          "Enter your current password and a new password.",
        USER_SETTINGS_ACCOUNT_REMOVE_PHONE_NUMBER_TITLE: "Remove phone number",
        USER_SETTINGS_ACCOUNT_REMOVE_PHONE_SMS_BACKUP_WARNING:
          "Removing your phone number will disable SMS backup for two-factor authentication.",
        USER_SETTINGS_ACCOUNT_REMOVE_PHONE_NUMBER_BUTTON: "Remove Phone Number",
        USER_SETTINGS_ACCOUNT_REMOVE_PHONE_NUMBER_WARNING_TITLE:
          "Removing your phone number will disable SMS backup",
        USER_SETTINGS_ACCOUNT_REMOVE_PHONE_NUMBER_WARNING_BODY:
          "You won't be able to use SMS as a recovery tool if you're locked out of your account.",
        USER_SETTINGS_ACCOUNT_EMAIL_DESCRIPTION_NO_LINK:
          "We’ll need to verify your old email address in order to change it.\n\nLost access to your email? Please contact your email provider to regain access.",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_CONFIRM_TITLE: "Enter Code",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_CONFIRM_TITLE_DESKTOP: "Enter code",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_CONFIRM_DESCRIPTION:
          "Check your email: we just sent a verification code to **{oldEmail}**. Enter it here to verify you’re really you.",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_CONFIRM_SUBTITLE:
          "Check your email: we sent you a verification code. Enter it here to verify you’re really you.",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_CONFIRM_PROMPT: "Verification Code",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_CONFIRM_RESEND:
          "[Didn’t receive a code or it expired? Resend it.](onResend)",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_CONFIRM_CODE_SENT:
          "Verification code sent.",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_SEND_TITLE: "Verify email address",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_SEND_DESCRIPTION_NO_LINK:
          "We’ll need to verify your old email address, **!!{oldEmail}!!**, in order to change it.\n\nLost access to your email? Please contact your email provider to regain access.",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_COMPLETE_TITLE:
          "Confirm your new email",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_COMPLETE_DESCRIPTION:
          "To finish, we sent a verification email to: **!!{email}!!**",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_CHECK_SPAM:
          "Didn't get the email? Make sure to check your spam folder.",
        USER_SETTINGS_ACCOUNT_CHANGE_EMAIL_SEND_BUTTON:
          "Send Verification Code",
        USER_SETTINGS_ACCOUNT_EDIT_USERNAME_A11Y_LABEL: "Edit username",
        USER_SETTINGS_ACCOUNT_EDIT_DISPLAYNAME_A11Y_LABEL: "Edit display name",
        USER_SETTINGS_ACCOUNT_ADD_EMAIL_A11Y_LABEL: "Add an email address",
        USER_SETTINGS_ACCOUNT_ADD_PHONE_A11Y_LABEL: "Add a phone number",
        USER_SETTINGS_ACCOUNT_EDIT_EMAIL_A11Y_LABEL: "Edit email address",
        USER_SETTINGS_ACCOUNT_EDIT_PHONE_A11Y_LABEL: "Edit phone number",
        USER_SETTINGS_ACCOUNT_REVEAL_EMAIL_A11Y_LABEL: "Reveal email address",
        USER_SETTINGS_ACCOUNT_REVEAL_PHONE_A11Y_LABEL: "Reveal phone number",
        USER_SETTINGS_ACCOUNT_HIDE_EMAIL_A11Y_LABEL: "Hide email address",
        USER_SETTINGS_ACCOUNT_HIDE_PHONE_A11Y_LABEL: "Hide phone number",
        USER_SETTINGS_ACCOUNT_REMOVE_PHONE_A11Y_LABEL: "Remove phone number",
        USER_SETTINGS_COPIED: "Copied!",
        USER_SETTINGS_CACHES_CLEARED: "Caches Cleared!",
        USER_SETTINGS_CACHES_WRITTEN: "Caches Written!",
        PHONE_VERIFICATION_UPDATE_TITLE: "Update your phone number",
        PHONE_VERIFICATION_ADD_TITLE: "Enter a phone number",
        PHONE_VERIFICATION_CURRENT_PHONE:
          "The current number on your account is !!{phone}!!.",
        PHONE_VERIFICATION_RECEIVE_TEXT:
          "You will receive a text message with a verification code.",
        PHONE_VERIFICATION_NEW_PHONE_LABEL: "New Phone Number",
        PHONE_VERIFICATION_PHONE_LABEL: "Phone Number",
        COUNTDOWN_UNITS_DAYS: "d",
        COUNTDOWN_UNITS_HOURS: "h",
        COUNTDOWN_UNITS_MINUTES: "m",
        COUNTDOWN_UNITS_SECONDS: "s",
        SETUP_PROGRESS: "Setup Progress",
        RESUME_SETUP: "Resume your server setup",
        GUILD_PROGRESS_CTA: "Set up your server",
        GUILD_PROGRESS_TITLE: "Finish setting up your server!",
        GUILD_PROGRESS_STEPS:
          "You have completed $[**!!{numFinished}!! of {total} steps**](stepsHook).",
        GUILD_PROGRESS_CURRENT_STEP: "Step {currStep} of {total}: {step}",
        GUILD_PROGRESS_SKIP: "Skip these steps",
        GUILD_PROGRESS_FINISH: "Finish",
        GUILD_PROGRESS_DISMISS: "Dismiss Server Setup",
        BLACK_FRIDAY_PROMOTION_GIFT_INVENTORY_TITLE: "Black Friday Deal",
        STICKERS_GIFT_INVENTORY_TITLE_MONTH:
          "Stickers Gift — {skuName} ({intervalCount, plural, =1 {# month} other {# months}})",
        STICKERS_GIFT_INVENTORY_TITLE_YEAR:
          "Stickers Gift — {skuName} ({intervalCount, plural, =1 {# year} other {# years}})",
        ROLE_REQUIRED_SINGLE_USER_MESSAGE: "(Only you can see this channel)",
        BEGINNING_ROLE_REQUIRED_CHANNEL_DESCRIPTION:
          "This is the start of the !!{channelName}!! **private** channel. $[](topicHook)",
        PRIVATE_CHANNEL_ADD_MEMBERS_MODAL_SUBTITLE:
          "Add individual members by starting with @, or type a role name",
        PRIVATE_CHANNEL_ADD_MEMBERS_MODAL_SKIP: "Skip for now",
        CHANNEL_PERMISSIONS_PRIVATE_CHANNEL_DESCRIPTION:
          "By making a channel private, only select members and roles will be able to view this channel.",
        CHANNEL_PERMISSIONS_PRIVATE_CHANNEL_DESCRIPTION_VOICE:
          "By making a channel private, only select members and roles will have access to view or connect to this channel.",
        CHANNEL_PERMISSIONS_PRIVATE_CATEGORY_DESCRIPTION:
          "By making a category private, only select members and roles will be able to view this category. Synced channels in this category will automatically match to this setting.",
        CHANNEL_PERMISSIONS_ADD_MEMBERS_TITLE: "Add members or roles",
        CHANNEL_PERMISSIONS_NO_ROLES: "No Roles",
        CHANNEL_PERMISSIONS_EVERYONE_IS_ADMIN_WARNING:
          "All members can view this channel because @everyone has Administrator permissions. You can change this in Roles via Server Settings.",
        CHANNEL_PERMISSIONS_EVERYONE_CAN_NOT_VIEW_WARNING:
          "Heads up, @everyone does not have permission to view or connect to channels in this server. All channels will be default hidden to members. Use the Advanced View to give specific roles or members access to this channel.",
        PRIVATE_CHANNEL_ADD_MEMBERS_MODAL_SEARCH_PLACEHOLDER_MOBILE:
          "Search Roles & Members",
        PRIVATE_CHANNEL_ADD_MEMBERS_MODAL_ROW_ROLE: "Role",
        PRIVATE_CHANNEL_ADD_MEMBERS_MODAL_ROW_OWNER: "Server Owner",
        PRIVATE_CHANNEL_ADD_MEMBERS_MODAL_ROW_ADMINISTRATOR: "Administrator",
        PRIVATE_CHANNEL_ADD_MEMBERS_MODAL_ROW_MEMBER: "Member",
        PRIVATE_CHANNEL_ADD_MEMBERS_MODAL_NO_RESULT:
          "There are no members or roles with the name **!!{query}!!**.",
        PRIVATE_CHANNEL_ADD_MEMBERS_MODAL_NO_ROLES:
          "You haven't created any roles yet",
        PRIVATE_CHANNEL_ACCESS_INFO_TITLE: "Who can access",
        PRIVATE_CHANNEL_ACCESS_INFO_TITLE_WITH_COLON: "Who can access:",
        PRIVATE_CHANNEL_ACCESS_INFO_MEMBERS:
          "{count, plural, one {{count} Member} other {{count} Members}}",
        PRIVATE_CHANNEL_ACCESS_INFO_ROLES:
          "{count, plural, one {{count} Role} other {{count} Roles}}",
        PRIVATE_CHANNEL_ACCESS_INFO_MEMBERS_OVERFLOW: "{count}+ Members",
        PRIVATE_CHANNEL_ACCESS_INFO_ROLES_OVERFLOW: "{count}+ Roles",
        PRIVATE_CHANNEL_MEMBERS_SECTION_HEADER:
          "{sectionTitle} – {numberOfItems}",
        PRIVATE_CHANNEL_MEMBERS_REMOVE_YES_CONFIRMATION: "Yes, remove now",
        PRIVATE_CHANNEL_MEMBERS_REMOVED: "!!{name}!! removed",
        CHANNEL_PERMISSIONS_BASIC_VIEW: "Basic View",
        CHANNEL_PERMISSIONS_ADVANCED_VIEW: "Advanced View",
        CHANNEL_PERMISSIONS_MAKE_PUBLIC_ALERT_TITLE:
          "Make this channel open to everyone?",
        CHANNEL_PERMISSIONS_MAKE_PUBLIC_ALERT_SUBTITLE:
          "**#!!{channelName}!!** will become available to all members.",
        CHANNEL_PERMISSIONS_MAKE_PRIVATE_ALERT_TITLE:
          "Make this channel private?",
        CHANNEL_PERMISSIONS_MAKE_PRIVATE_ALERT_SUBTITLE:
          "**#!!{channelName}!!** will become private and visible to select members and roles.",
        PRIVATE_CHANNEL_MANAGE_CHANNEL_ACCESS_CTA: "Manage channel access",
        PRIVATE_CHANNEL_MEMBERS_ADDED_TOAST_MSG:
          "{count, plural, one {{count} member} other {{count} members}} added",
        PRIVATE_CHANNEL_ROLES_ADDED_TOAST_MSG:
          "{count, plural, one {{count} role} other {{count} roles}} added",
        PRIVATE_CHANNEL_MEMBERS_ROLES_ADDED_TOAST_MSG:
          "Members and roles added",
        PRIVATE_CHANNEL_MANAGE_ROLE_PERMISSION_MISSING_HINT:
          "You will need the Manage Roles permission to edit access to this private channel.",
        PRIVATE_TEXT_CHANNEL_CREATION_PERMISSION_MISSING_HINT:
          "**View Channels** permission required to create this private channel.",
        PRIVATE_VOICE_CHANNEL_CREATION_PERMISSION_MISSING_HINT:
          "**View Channels** and **Connect** permissions required to create this private channel.",
        PRIVATE_CATEGORY_CREATION_PERMISSION_MISSING_HINT:
          "**View Channels** and **Connect** permissions required to create this private category.",
        CHANNEL_PERMISSIONS_ADVANCED_PERMISSIONS: "Advanced permissions",
        CHANNEL_PERMISSIONS_SUBTITLE:
          "Use permissions to customize who can do what in this channel.",
        CATEGORY_PERMISSIONS_SUBTITLE:
          "Use permissions to customize who can do what in this category.",
        CHANNEL_PERMISSIONS_ADD_MEMBERS_TOOLTIP_OWNER:
          "Server owner cannot be removed.",
        CHANNEL_PERMISSIONS_ADD_MEMBERS_TOOLTIP_ADMINISTRATOR:
          "Cannot be removed due to Administrator access.",
        CHANNEL_PERMISSIONS_ADD_MEMBERS_TOOLTIP: "Remove access to channel.",
        CHANNEL_PERMISSIONS_CANNOT_REMOVE_PERMISSIONS:
          "Cannot remove permissions",
        PRIVATE_CHANNEL_ADD_MEMBERS_MODAL_PLACEHOLDER:
          "e.g. Moderators, @wumpus",
        KEYBOARD_SHORTCUTS_EXPLAINER_MODAL_TITLE: "Hey there $[](tab) friend",
        KEYBOARD_SHORTCUTS_EXPLAINER_MODAL_BODY:
          "You can navigate Discord with your tab and arrow keys just fine, but there are some other helpful things we’ve added.",
        KEYBOARD_SHORTCUTS_EXPLAINER_LIST_SHORTCUT:
          "List of keyboard shortcuts",
        KEYBOARD_SHORTCUTS_EXPLAINER_QUICKSWITCHER_SHORTCUT:
          "Open the Quick Switcher—it’s the fastest way to move around!",
        KEYBOARD_SHORTCUTS_EXPLAINER_HELP_CENTER_LINK:
          "This [help center article]({link}) has more info.",
        DIALOG_JUST_SO_YOU_KNOW: "Just so you know!",
        ROLE_PERMISSIONS_SECTION_GENERAL_GUILD: "General Server Permissions",
        ROLE_PERMISSIONS_SECTION_GENERAL_CHANNEL: "General Channel Permissions",
        ROLE_PERMISSIONS_SECTION_GENERAL_CATEGORY:
          "General Category Permissions",
        ROLE_PERMISSIONS_SECTION_MEMBERSHIP: "Membership Permissions",
        ROLE_PERMISSIONS_SECTION_TEXT: "Text Channel Permissions",
        ROLE_PERMISSIONS_SECTION_VOICE: "Voice Channel Permissions",
        ROLE_PERMISSIONS_SECTION_VOICE_CHAT: "Voice Channel Chat Permissions",
        ROLE_PERMISSIONS_SECTION_VOICE_CHAT_DESCRIPTION:
          "Automated moderation makes monitoring text chat in voice channels easier. [Enable AutoMod](setUpAutomod)",
        ROLE_PERMISSIONS_SECTION_ADVANCED: "Advanced Permissions",
        ROLE_PERMISSIONS_VIEW_CHANNEL: "View Channels",
        ROLE_PERMISSIONS_VIEW_CHANNEL_DESCRIPTION:
          "Allows members to view channels by default (excluding private channels).",
        MANAGE_CHANNELS: "Manage Channels",
        ROLE_PERMISSIONS_MANAGE_CHANNELS_DESCRIPTION:
          "Allows members to create, edit, or delete channels.",
        MANAGE_ROLES: "Manage Roles",
        ROLE_PERMISSIONS_MANAGE_ROLES_DESCRIPTION:
          "Allows members to create new roles and edit or delete roles lower than their highest role. Also allows members to change permissions of individual channels that they have access to.",
        MANAGE_EXPRESSIONS: "Manage Expressions",
        ROLE_PERMISSIONS_MANAGE_EXPRESSIONS_DESCRIPTION:
          "Allows members to edit or remove custom emoji, stickers, and sounds in this server.",
        CREATE_EXPRESSIONS: "Create Expressions",
        ROLE_PERMISSIONS_CREATE_EXPRESSIONS_DESCRIPTION:
          "Allows members to add custom emoji, stickers, and sounds in this server.",
        VIEW_AUDIT_LOG: "View Audit Log",
        ROLE_PERMISSIONS_VIEW_AUDIT_LOG_DESCRIPTION:
          "Allows members to view a record of who made which changes in this server.",
        VIEW_GUILD_ANALYTICS: "View Server Insights",
        ROLE_PERMISSIONS_VIEW_GUILD_ANALYTICS_DESCRIPTION:
          "Allows members to view Server Insights, which shows data on community growth, engagement, and more.",
        MANAGE_WEBHOOKS: "Manage Webhooks",
        ROLE_PERMISSIONS_MANAGE_WEBHOOKS_DESCRIPTION:
          "Allows members to create, edit, or delete webhooks, which can post messages from other apps or sites into this server.",
        MANAGE_SERVER: "Manage Server",
        ROLE_PERMISSIONS_MANAGE_SERVER_DESCRIPTION:
          "Allow members to change this server's name, switch regions, view all invites, add bots to this server and create and update AutoMod rules.",
        CREATE_INSTANT_INVITE: "Create Invite",
        ROLE_PERMISSIONS_CREATE_INSTANT_INVITE_DESCRIPTION:
          "Allows members to invite new people to this server.",
        ROLE_PERMISSIONS_CHANGE_NICKNAME_DESCRIPTION:
          "Allows members to change their own nickname, a custom name for just this server.",
        MANAGE_NICKNAMES: "Manage Nicknames",
        ROLE_PERMISSIONS_MANAGE_NICKNAMES_DESCRIPTION:
          "Allows members to change the nicknames of other members.",
        KICK_MEMBERS: "Kick Members",
        KICK_MEMBERS_AND_REVIEW_APPLICATIONS:
          "Kick, Approve, and Reject Members",
        ROLE_PERMISSIONS_KICK_MEMBERS_DESCRIPTION:
          "Allows members to remove other members from this server. Kicked members will be able to rejoin if they have another invite.",
        ROLE_PERMISSIONS_KICK_MEMBERS_AND_REVIEW_APPLICATION_DESCRIPTION:
          "Kick will remove other members from this server. Kicked members will be able to rejoin if they have another invite. If the server enables Member Requirements, this permission enables the ability to approve or reject members who request to join.",
        BAN_MEMBERS: "Ban Members",
        ROLE_PERMISSIONS_BAN_MEMBERS_DESCRIPTION:
          "Allows members to permanently ban and delete the message history of other members from this server.",
        SEND_MESSAGES: "Send Messages",
        ROLE_PERMISSIONS_SEND_MESSAGES_DESCRIPTION:
          "Allows members to send messages in text channels.",
        EMBED_LINKS: "Embed Links",
        ROLE_PERMISSIONS_EMBED_LINKS_DESCRIPTION:
          "Allows links that members share to show embedded content in text channels.",
        ATTACH_FILES: "Attach Files",
        ROLE_PERMISSIONS_ATTACH_FILES_DESCRIPTION:
          "Allows members to upload files or media in text channels.",
        ADD_REACTIONS: "Add Reactions",
        ROLE_PERMISSIONS_ADD_REACTIONS_DESCRIPTION:
          "Allows members to add new emoji reactions to a message. If this permission is disabled, members can still react using any existing reactions on a message.",
        ROLE_PERMISSIONS_USE_EXTERNAL_EMOJIS: "Use External Emoji",
        ROLE_PERMISSIONS_USE_EXTERNAL_EMOJIS_DESCRIPTION:
          "Allows members to use emoji from other servers, if they’re a Discord Nitro member.",
        ROLE_PERMISSIONS_USE_EXTERNAL_STICKERS: "Use External Stickers",
        ROLE_PERMISSIONS_USE_EXTERNAL_STICKERS_DESCRIPTION:
          "Allows members to use stickers from other servers, if they’re a Discord Nitro member.",
        MENTION_EVERYONE: "Mention @everyone, @here, and All Roles",
        ROLE_PERMISSIONS_MENTION_EVERYONE_DESCRIPTION:
          "Allows members to use @everyone (everyone in the server) or @here (only online members in that channel). They can also @mention all roles, even if the role’s “Allow anyone to mention this role” permission is disabled.",
        MANAGE_MESSAGES: "Manage Messages",
        ROLE_PERMISSIONS_MANAGE_MESSAGES_DESCRIPTION:
          "Allows members to delete messages by other members or pin any message.",
        READ_MESSAGE_HISTORY: "Read Message History",
        READ_POST_HISTORY: "Read Post History",
        ROLE_PERMISSIONS_READ_MESSAGE_HISTORY_DESCRIPTION:
          "Allows members to read previous messages sent in channels. If this permission is disabled, members only see messages sent when they are online and focused on that channel.",
        ROLE_PERMISSIONS_SEND_TTS_MESSAGES: "Send Text-to-Speech Messages",
        ROLE_PERMISSIONS_SEND_TTS_MESSAGES_DESCRIPTION:
          "Allows members to send text-to-speech messages by starting a message with /tts. These messages can be heard by anyone focused on the channel.",
        ROLE_PERMISSIONS_USE_APPLICATION_COMMANDS: "Use Application Commands",
        ROLE_PERMISSIONS_USE_APPLICATION_COMMANDS_GUILD_DESCRIPTION:
          "Allows members to use commands from applications, including slash commands and context menu commands.",
        ROLE_PERMISSIONS_SEND_VOICE_MESSAGE: "Send Voice Messages",
        ROLE_PERMISSIONS_SEND_VOICE_MESSAGE_GUILD_DESCRIPTION:
          "Allows members to send voice messages.",
        ROLE_PERMISSIONS_USE_CLYDE_AI: "Use Clyde",
        ROLE_PERMISSIONS_USE_CLYDE_AI_GUILD_DESCRIPTION:
          "Allows members to interact with and customize the Clyde AI bot.",
        ROLE_PERMISSIONS_USE_CLYDE_AI_CHANNEL_DESCRIPTION:
          "Allows members to interact with the Clyde AI bot.",
        CONNECT: "Connect",
        ROLE_PERMISSIONS_CONNECT_DESCRIPTION:
          "Allows members to join voice channels and hear others.",
        SPEAK: "Speak",
        ROLE_PERMISSIONS_SPEAK_DESCRIPTION:
          "Allows members to talk in voice channels. If this permission is disabled, members are default muted until somebody with the “Mute Members” permission un-mutes them.",
        ROLE_PERMISSIONS_STREAM_DESCRIPTION:
          "Allows members to share their video, screen share, or stream a game in this server.",
        USE_VAD: "Use Voice Activity",
        ROLE_PERMISSIONS_USE_VAD_DESCRIPTION:
          "Allows members to speak in voice channels by simply talking. If this permission is disabled, members are required to use Push-to-talk. Good for controlling background noise or noisy members.",
        PRIORITY_SPEAKER: "Priority Speaker",
        ROLE_PERMISSIONS_PRIORITY_SPEAKER_DESCRIPTION:
          "Allows members to be more easily heard in voice channels. When activated, the volume of others without this permission will be automatically lowered.",
        ROLE_PERMISSIONS_PRIORITY_SPEAKER_DESCRIPTION_APP:
          "Allows members to be more easily heard in voice channels. When activated, the volume of others without this permission will be automatically lowered. Priority Speaker is activated by using the **[{keybind}](onClick)** keybind.",
        ROLE_PERMISSIONS_PRIORITY_SPEAKER_DESCRIPTION_MOBILE:
          "Allows members to be more easily heard in voice channels. When activated, the volume of others without this permission will be automatically lowered. Priority Speaker is activated by using the **{keybind}** keybind.",
        MUTE_MEMBERS: "Mute Members",
        ROLE_PERMISSIONS_MUTE_MEMBERS_DESCRIPTION:
          "Allows members to mute other members in voice channels for everyone.",
        DEAFEN_MEMBERS: "Deafen Members",
        ROLE_PERMISSIONS_DEAFEN_MEMBERS_DESCRIPTION:
          "Allows members to deafen other members in voice channels, which means they won’t be able to speak or hear others.",
        MOVE_MEMBERS: "Move Members",
        ROLE_PERMISSIONS_MOVE_MEMBERS_DESCRIPTION:
          "Allows members to disconnect or move other members between voice channels that the member with this permission has access to.",
        ADMINISTRATOR: "Administrator",
        ROLE_PERMISSIONS_ADMINISTRATOR_DESCRIPTION:
          "Members with this permission will have every permission and will also bypass all channel specific permissions or restrictions (for example, these members would get access to all private channels). **This is a dangerous permission to grant**.",
        ROLE_PERMISSIONS_VIEW_CHANNEL_DESCRIPTION_CHANNEL:
          "Allows members to view this channel by default.",
        ROLE_PERMISSIONS_VIEW_CHANNEL_DESCRIPTION_CATEGORY:
          "Allows members to view these channels by default.",
        ROLE_PERMISSIONS_VIEW_CHANNEL_DESCRIPTION_TEXT_EVERYONE:
          "Allows members to view this channel by default. Disabling this for @everyone will make this channel private.",
        ROLE_PERMISSIONS_VIEW_CHANNEL_DESCRIPTION_CATEGORY_EVERYONE:
          "Allows members to view these channels by default. Disabling this for @everyone will make text channels private. Disabling this and the Connect permission for @everyone will make voice channels private.",
        ROLE_PERMISSIONS_VIEW_CHANNEL_DESCRIPTION_VOICE_EVERYONE:
          "Allows members to view this channel by default. Disabling this and the Connect permission for @everyone will make this channel private.",
        ROLE_PERMISSIONS_MANAGE_CHANNEL_DESCRIPTION_TEXT:
          "Allows members to change this channel’s name, description, and text settings. They can also delete the channel.",
        ROLE_PERMISSIONS_MANAGE_CHANNEL_DESCRIPTION_VOICE:
          "Allows members to change this channel’s name, description, and voice settings. They can also delete the channel.",
        ROLE_PERMISSIONS_MANAGE_CHANNEL_DESCRIPTION_CATEGORY:
          "Allows members to change these channels’ name, description, and text / voice settings. They can also delete these channels.",
        ROLE_PERMISSIONS_MANAGE_ROLES_DESCRIPTION_CHANNEL:
          "Allows members to change this channel’s permissions.",
        ROLE_PERMISSIONS_MANAGE_ROLES_DESCRIPTION_CATEGORY:
          "Allows members to change these channels’ permissions.",
        ROLE_PERMISSIONS_MANAGE_WEBHOOKS_DESCRIPTION_CHANNEL:
          "Allows members to create, edit, or delete webhooks in this channel, which can post messages from other apps or sites.",
        ROLE_PERMISSIONS_MANAGE_WEBHOOKS_DESCRIPTION_CATEGORY:
          "Allows members to create, edit, or delete webhooks in these channels, which can post messages from other apps or sites.",
        ROLE_PERMISSIONS_CREATE_INSTANT_INVITE_DESCRIPTION_TEXT:
          "Allows members to invite new people to this server via a direct invite link to this channel.",
        ROLE_PERMISSIONS_CREATE_INSTANT_INVITE_DESCRIPTION_VOICE:
          "Allows members to invite new people to this server via a direct invite link to this channel. The recipient will automatically join the voice channel if they have permission to connect.",
        ROLE_PERMISSIONS_CREATE_INSTANT_INVITE_DESCRIPTION_CATEGORY:
          "Allows members to invite new people to this server via a direct invite link to these channels.",
        ROLE_PERMISSIONS_SEND_MESSAGES_DESCRIPTION_TEXT:
          "Allows members to send messages in this channel.",
        ROLE_PERMISSIONS_SEND_MESSAGES_WITH_TIV_DESCRIPTION_TEXT_DISABLED:
          "Allows members to send messages in this channel. \n $[We recommend you keep this permission enabled.](warningHook) \n Keeping Send Messages enabled allows your members to participate in conversations when they're unable to speak, either because of their environment or comfort level.",
        ROLE_PERMISSIONS_SEND_MESSAGES_DESCRIPTION_CATEGORY:
          "Allows members to send messages in these channels.",
        ROLE_PERMISSIONS_SEND_MESSAGES_DESCRIPTION_ANNOUNCEMENT:
          "Allows members to publish their own messages to all servers following this [Announcement Channel]({articleURL}).",
        ROLE_PERMISSIONS_EMBED_LINKS_DESCRIPTION_TEXT:
          "Allows links that members share to show embedded content in this channel.",
        ROLE_PERMISSIONS_EMBED_LINKS_DESCRIPTION_CATEGORY:
          "Allows links that members share to show embedded content in these channels.",
        ROLE_PERMISSIONS_ATTACH_FILES_DESCRIPTION_TEXT:
          "Allows members to upload files or media in this channel.",
        ROLE_PERMISSIONS_ATTACH_FILES_DESCRIPTION_CATEGORY:
          "Allows members to upload files or media in these channels.",
        ROLE_PERMISSIONS_ADD_REACTIONS_DESCRIPTION_TEXT:
          "Allows members to add new emoji reactions to a message in this channel. If this permission is disabled, members can still react using any existing reactions on a message.",
        ROLE_PERMISSIONS_ADD_REACTIONS_DESCRIPTION_TEXT_WITH_VOICE_CHANNEL_EFFECTS:
          "Allows members to add new emoji reactions to a message in this channel and send reactions in voice channels. If this permission is disabled, members can still react using any existing reactions on a message.",
        ROLE_PERMISSIONS_ADD_REACTIONS_DESCRIPTION_CATEGORY:
          "Allows members to add new emoji reactions to a message in these channels. If this permission is disabled, members can still react using any existing reactions on a message.",
        ROLE_PERMISSIONS_USE_EXTERNAL_EMOJIS_DESCRIPTION_TEXT:
          "Allows members to use emoji from other servers in this channel, if they’re a Discord Nitro member.",
        ROLE_PERMISSIONS_USE_EXTERNAL_STICKERS_DESCRIPTION_TEXT:
          "Allows members to use stickers from other servers in this channel, if they’re a Discord Nitro member.",
        ROLE_PERMISSIONS_USE_EXTERNAL_EMOJIS_DESCRIPTION_CATEGORY:
          "Allows members to use emoji from other servers in these channels, if they’re a Discord Nitro member.",
        ROLE_PERMISSIONS_USE_EXTERNAL_STICKERS_DESCRIPTION_CATEGORY:
          "Allows members to use stickers from other servers in these channels, if they’re a Discord Nitro member.",
        ROLE_PERMISSIONS_MENTION_EVERYONE_DESCRIPTION_TEXT:
          "Allows members to use @everyone or @here (only online members) in this channel. They can also @mention all roles in this channel, even if the role’s “Allow anyone to mention this role” permission is disabled.",
        ROLE_PERMISSIONS_MENTION_EVERYONE_DESCRIPTION_CATEGORY:
          "Allows members to use @everyone or @here (only online members) in these channels. They can also @mention all roles in these channels, even if the role’s “Allow anyone to mention this role” permission is disabled.",
        MENTION_EVERYONE_STAGE: "Mention @everyone when a Stage starts",
        ROLE_PERMISSIONS_MENTION_EVERYONE_DESCRIPTION_STAGE:
          "Allow Stage Moderators with this role to notify @everyone when a Stage starts. This is the same permission as Mention @everyone, @here, and All Roles.",
        ROLE_PERMISSIONS_MANAGE_MESSAGES_DESCRIPTION_TEXT:
          "Allows members to delete messages by other members or pin any message in this channel.",
        ROLE_PERMISSIONS_MANAGE_MESSAGES_DESCRIPTION_CATEGORY:
          "Allows members to delete messages by other members or pin any message in these channels.",
        ROLE_PERMISSIONS_MANAGE_MESSAGES_DESCRIPTION_ANNOUNCEMENT:
          "Allows members to delete messages by other members or pin any message in this channel. They can also publish messages by other members to all servers that follow this [Announcement Channel]({articleURL}).",
        ROLE_PERMISSIONS_READ_MESSAGE_HISTORY_DESCRIPTION_TEXT:
          "Allows members to read previous messages sent in this channel. If this permission is disabled, members only see messages sent when they are online and focused on this channel.",
        ROLE_PERMISSIONS_READ_MESSAGE_HISTORY_DESCRIPTION_FORUM_CHANNEL:
          "Allows members to read previous messages and posts created in this channel. If this permission is disabled, members only see messages and posts created when they are online and focused on this channel.",
        ROLE_PERMISSIONS_READ_MESSAGE_HISTORY_WITH_TIV_DESCRIPTION_TEXT_DISABLED:
          "Allows members to read previous messages sent in this channel. If this permission is disabled, members only see messages sent when they are online and focused on this channel. \n $[We recommend you keep this permission enabled.](warningHook) \n Keeping Read Message History enabled gives your members context in ongoing conversations so that they can participate, leading to a more engaged community. Members can also refer back to previously shared links and memes.",
        ROLE_PERMISSIONS_READ_MESSAGE_HISTORY_DESCRIPTION_CATEGORY:
          "Allows members to read previous messages sent in these channels. If this permission is disabled, members only see messages sent when they are online and focused on that channel.",
        ROLE_PERMISSIONS_SEND_TTS_MESSAGES_DESCRIPTION_TEXT:
          "Allows members to send text-to-speech messages in this channel by starting a message with /tts. These messages can be heard by anyone focused on this channel.",
        ROLE_PERMISSIONS_SEND_TTS_MESSAGES_DESCRIPTION_CATEGORY:
          "Allows members to send text-to-speech messages in these channels by starting a message with /tts. These messages can be heard by anyone focused on that channel.",
        ROLE_PERMISSIONS_USE_APPLICATION_COMMANDS_DESCRIPTION_TEXT:
          "Allows members to use commands from applications in this channel, including slash commands and context menu commands.",
        ROLE_PERMISSIONS_USE_APPLICATION_COMMANDS_DESCRIPTION_CATEGORY:
          "Allows members to use commands from applications in these channels, including slash commands and context menu commands.",
        ROLE_PERMISSIONS_SEND_VOICE_MESSAGES_DESCRIPTION_TEXT:
          'Allows members to send voice messages in this channel. Requires the "Attach Files" permission as well.',
        ROLE_PERMISSIONS_SEND_VOICE_MESSAGES_DESCRIPTION_CATEGORY:
          'Allows members to send voice messages in these channels. Requires the "Attach Files" permission as well.',
        ROLE_PERMISSIONS_CONNECT_DESCRIPTION_VOICE:
          "Allows members to join this voice channel and hear others.",
        ROLE_PERMISSIONS_CONNECT_DESCRIPTION_CATEGORY:
          "Allows members to join these voice channels and hear others.",
        ROLE_PERMISSIONS_CONNECT_DESCRIPTION_VOICE_EVERYONE:
          "Allows members to join this voice channel and hear others. Disabling this and the View Channel permissions for @everyone will make this channel private.",
        ROLE_PERMISSIONS_CONNECT_DESCRIPTION_CATEGORY_EVERYONE:
          "Allows members to join these voice channels and hear others. Disabling this and the View Channel permissions for @everyone will make these channels private.",
        ROLE_PERMISSIONS_SPEAK_DESCRIPTION_VOICE:
          "Allows members to talk in this voice channel. If this permission is disabled, members are default muted until somebody with the “Mute Members” permission un-mutes them.",
        ROLE_PERMISSIONS_SPEAK_DESCRIPTION_CATEGORY:
          "Allows members to talk in these voice channels. If this permission is disabled, members are default muted until somebody with the “Mute Members” permission un-mutes them.",
        ROLE_PERMISSIONS_STREAM_DESCRIPTION_VOICE:
          "Allows members to share their video, screen share, or stream a game in this voice channel.",
        ROLE_PERMISSIONS_STREAM_DESCRIPTION_STAGE:
          "Allows speakers to share their video, screen share, or stream a game in this Stage channel.",
        ROLE_PERMISSIONS_STREAM_DESCRIPTION_CATEGORY:
          "Allows members to share their video, screen share, or stream a game in these voice channels.",
        ROLE_PERMISSIONS_USE_VAD_DESCRIPTION_VOICE:
          "Allows members to speak in this voice channel by simply talking. If this permission is disabled, members are required to use Push-to-talk. Good for controlling background noise or noisy members.",
        ROLE_PERMISSIONS_USE_VAD_DESCRIPTION_CATEGORY:
          "Allows members to speak in these voice channels by simply talking. If this permission is disabled, members are required to use Push-to-talk. Good for controlling background noise or noisy members.",
        ROLE_PERMISSIONS_PRIORITY_SPEAKER_DESCRIPTION_VOICE:
          "Allows members to be more easily heard in this voice channel. When activated, the volume of others without this permission will be automatically lowered. Priority Speaker is activated by using the **[{keybind}](onClick)** keybind.",
        ROLE_PERMISSIONS_PRIORITY_SPEAKER_DESCRIPTION_VOICE_MOBILE:
          "Allows members to be more easily heard in this voice channel. When activated, the volume of others without this permission will be automatically lowered. Priority Speaker is activated by using the **{keybind}** keybind.",
        ROLE_PERMISSIONS_PRIORITY_SPEAKER_DESCRIPTION_CATEGORY:
          "Allows members to be more easily heard in these voice channels. When activated, the volume of others without this permission will be automatically lowered. Priority Speaker is activated by using the **[{keybind}](onClick)** keybind.",
        ROLE_PERMISSIONS_PRIORITY_SPEAKER_DESCRIPTION_CATEGORY_MOBILE:
          "Allows members to be more easily heard in these voice channels. When activated, the volume of others without this permission will be automatically lowered. Priority Speaker is activated by using the **{keybind}** keybind.",
        ROLE_PERMISSIONS_MUTE_MEMBERS_DESCRIPTION_VOICE:
          "Allows members to mute other members in this voice channel for everyone.",
        ROLE_PERMISSIONS_MUTE_MEMBERS_DESCRIPTION_CATEGORY:
          "Allows members to mute other members in these voice channels for everyone.",
        ROLE_PERMISSIONS_DEAFEN_MEMBERS_DESCRIPTION_VOICE:
          "Allows members to deafen other members in this voice channel, which means they won’t be able to speak or hear others.",
        ROLE_PERMISSIONS_DEAFEN_MEMBERS_DESCRIPTION_CATEGORY:
          "Allows members to deafen other members in these voice channels, which means they won’t be able to speak or hear others.",
        ROLE_PERMISSIONS_MOVE_MEMBERS_DESCRIPTION_VOICE:
          "Allows members to disconnect other members from this channel. They will also be able to move somebody into other channels that they have this permission in.",
        ROLE_PERMISSIONS_MOVE_MEMBERS_DESCRIPTION_CATEGORY:
          "Allows members to disconnect other members from these channels. They will also be able to move somebody into other channels that they have this permission in.",
        ROLE_PERMISSIONS_USE_EMBEDDED_ACTIVITIES_DESCRIPTION:
          "Allows members to use Activities in this server.",
        ROLE_PERMISSIONS_USE_EMBEDDED_ACTIVITIES_DESCRIPTION_CHANNEL:
          "Allows members to use Activities in this channel.",
        ROLE_PERMISSIONS_USE_EMBEDDED_ACTIVITIES_DESCRIPTION_CATEGORY:
          "Allows members to use Activities in these channels.",
        IOS_GUILD_DELETE_FEEDBACK_HEADER: "Why are you deleting this server?",
        GUILD_DELETE_FEEDBACK_HEADER: "Can you tell us more?",
        GUILD_DELETE_FEEDBACK_BODY:
          "Help us understand why you're deleting this server.",
        GUILD_DELETE_FEEDBACK_TOO_HARD: "The server was too hard to figure out",
        GUILD_DELETE_FEEDBACK_TEST: "I wanted to test features and/or bots",
        GUILD_DELETE_FEEDBACK_ACCIDENT: "I didn't mean to make a server",
        GUILD_DELETE_FEEDBACK_TEMPLATE:
          "I was curious what a server or template looked like",
        GUILD_DELETE_FEEDBACK_LONELY: "I couldn't get people to join",
        GUILD_DELETE_FEEDBACK_INACTIVE: "Server was no longer active",
        GUILD_DELETE_FEEDBACK_OTHER: "Other",
        GUILD_DELETE_FEEDBACK_REPORT:
          "Thanks for reporting your issue! Feedback like yours helps us improve Discord.",
        GUILD_LEAVE_FEEDBACK_HEADER: "Can you tell us more?",
        GUILD_LEAVE_FEEDBACK_BODY: "Why did you leave !!{server}!!?",
        GUILD_LEAVE_FEEDBACK_UNINTERESTED:
          "I am not interested in the topic of this server",
        GUILD_LEAVE_FEEDBACK_ACCIDENT: "I didn't mean to join this server",
        GUILD_LEAVE_FEEDBACK_INACTIVE: "There is no activity in this server",
        GUILD_LEAVE_FEEDBACK_UNCOMFORTABLE:
          "Server content and/or members made me uncomfortable",
        GUILD_LEAVE_FEEDBACK_DISRUPTIVE: "Too many notifications",
        GUILD_LEAVE_FEEDBACK_OVERACTIVE: "Too much activity in this server",
        GUILD_LEAVE_FEEDBACK_CONFUSING:
          "Server was too confusing/I did not understand how to use it",
        GUILD_LEAVE_FEEDBACK_REPORT:
          "Thanks for your feedback! Feedback like yours helps us improve Discord.",
        ROLE_CREATED_TOAST: "New role created",
        ROLE_CREATE_CTA: "Create Role",
        ROLE_OVERVIEW_HEADER: "Server Roles",
        ROLE_OVERVIEW_DESCRIPTION:
          "Use roles to group your server members and assign permissions.",
        ROLE_OVERVIEW_EMPTY_SUBHEADER: "Organize your members",
        ROLE_OVERVIEW_VIEW_MEMBERS: "View members",
        ROLE_LIST_HEADER: "Roles – {numRoles}",
        ROLE_LIST_BODY:
          "Members use the color of the highest role they have on this list. Drag roles to reorder them.",
        ROLE_LIST_BODY_WITH_HELP:
          "Members use the color of the highest role they have on this list. Drag roles to reorder them. [Need help with permissions?]({articleURL})",
        ROLE_DELETE_CANNOT_BE_UNDONE: "This cannot be undone.",
        ROLE_EVERYONE_SUBLABEL: "Default permissions for all server members",
        ROLE_ROW_DESCRIPTION:
          "!!{name}!!, {count, plural, one {{count} member} other {{count} members}}, edit",
        ROLE_ROW_VIEW_MEMBERS:
          "View {count, plural, one {{count} Member} other {{count} Members}}",
        ROLE_MEMBER_COUNT:
          "{count, plural, one {{count} Member} other {{count} Members}}",
        ROLE_LIST_EMPTY: "No roles",
        ROLE_EDIT_TITLE_WITH_NAME: "Edit Role — !!{roleName}!!",
        ROLE_EDIT_TAB_DISPLAY: "Display",
        ROLE_COLOR_HELP:
          "Members use the color of the highest role they have on the roles list.",
        ROLE_ICON_HELP:
          "Upload an image under 256 KB or pick a custom emoji from this server. We recommend at least 64x64 pixels. Members will see the icon for their highest role if they have multiple roles.",
        ROLE_ICON_CHOOSE_IMAGE: "Choose Image",
        ROLE_ICON_TAB_UPLOAD_IMAGE: "Upload Image",
        ROLE_ICON_TAB_EMOJI: "Emoji",
        ROLE_ICON_UPLOAD_FILES_INFO: "Choose a PNG or JPG to upload",
        ROLE_ICON_UPLOAD_BROWSE_FILES: "Browse Files",
        ROLE_ICON_UPLOAD_FILE_TOO_BIG:
          "Oh no! File is too big. Please select a .png or .jpg 256 KB or smaller.",
        ROLE_ICON_TOAST_MESSAGE: "**!!{roleName}!!**",
        ROLE_ICON_POPOUT_DESCRIPTION:
          "Custom Role Icon for {name}. This feature is a part of Server Boosting.",
        ROLE_ICON_POPOUT_CTA: "Learn more",
        ROLE_EDIT_TAB_PERMISSIONS: "Permissions",
        ROLE_EDIT_TAB_MEMBERS: "Members",
        ROLE_EDIT_TAB_MANAGE_MEMBERS: "Manage Members",
        ROLE_EDIT_TAB_MEMBERS_WITH_LIST: "Manage Members ({numMembers})",
        ROLE_EDIT_TAB_VERIFICATION: "Links",
        ROLE_EDIT_SAVED: "Changes saved",
        ROLE_EDIT_HOIST_LABEL: "Display separately",
        ROLE_EDIT_PERMISSIONS_NO_RESULTS:
          "No permissions with the name **!!{query}!!**",
        ROLE_EDIT_MEMBERS_NO_RESULTS:
          "No members with the name **!!{query}!!**",
        ROLE_EDIT_MEMBERS_MISSING:
          "Not all members are shown, use Search to find specific members",
        ROLE_ADD_MEMBERS_SEARCH: "Search members",
        ROLE_EDIT_MEMBERS_NO_SEARCH_RESULTS:
          "No members were found. $[Add members to this role.](addMembersHook)",
        ROLE_ADD_MEMBERS_TITLE: "Add members",
        ROLE_ADD_MEMBERS_BUTTON: "Add Members",
        ROLE_PERMISSIONS_SEARCH_PLACEHOLDER: "Search permissions",
        ROLE_PERMISSIONS_CLEAR_PERMISSIONS: "Clear permissions",
        ROLE_PERMISSIONS_EMPTY_TEXT: "No permissions found",
        ROLE_REMOVE_MEMBER_CONFIRM_TITLE: "Remove member",
        ROLE_REMOVE_MEMBER_CONFIRM_BODY:
          "Remove **!!{username}!!** from role **!!{roleName}!!**?",
        ROLE_REMOVE_MEMBER_CONFIRM_TIP:
          "Hold shift when removing members to skip this modal.",
        ROLE_REMOVE_MEMBER_MANAGED:
          "Members cannot be manually added or removed from this role",
        ROLE_CHANGED_SAVE_CHANGES: "Save changes?",
        ROLE_CHANGED_SAVE_CHANGES_BODY:
          "You've made changes. Do you want to save them before leaving this page?",
        ROLE_CHANGED_DONT_SAVE: "Don't Save",
        ROLE_SAMPLE_MESSAGE: "rocks are really old",
        ROLE_EVERYONE_LABEL: "Default Permissions",
        ROLE_EVERYONE_DESCRIPTION: "applies to all server members",
        ROLE_EMPTY_STATE_CLUBS_ROLE_1: "president",
        ROLE_EMPTY_STATE_CLUBS_ROLE_2: "leadership",
        ROLE_EMPTY_STATE_CLUBS_ROLE_3: "coach",
        ROLE_EMPTY_STATE_CLUBS_ROLE_4: "new recruit",
        ROLE_EMPTY_STATE_CLUBS_ROLE_5: "alumni",
        ROLE_EMPTY_STATE_CLUBS_ROLE_6: "mentee",
        ROLE_EMPTY_STATE_GAMING_ROLE_1: "D&D",
        ROLE_EMPTY_STATE_GAMING_ROLE_2: "FFXIV",
        ROLE_EMPTY_STATE_GAMING_ROLE_3: "WoW",
        ROLE_EMPTY_STATE_GAMING_ROLE_4: "tank",
        ROLE_EMPTY_STATE_GAMING_ROLE_5: "dps",
        ROLE_EMPTY_STATE_GAMING_ROLE_6: "support",
        ROLE_EMPTY_STATE_HOBBIES_ROLE_1: "streamer",
        ROLE_EMPTY_STATE_HOBBIES_ROLE_2: "moderator",
        ROLE_EMPTY_STATE_HOBBIES_ROLE_3: "kpop",
        ROLE_EMPTY_STATE_HOBBIES_ROLE_4: "subscriber",
        ROLE_EMPTY_STATE_HOBBIES_ROLE_5: "artist",
        ROLE_EMPTY_STATE_HOBBIES_ROLE_6: "pianist",
        ROLE_PERMISSION_HELP_BODY:
          "Need help? [Start with one of our templates](onTemplateOpen)",
        ROLE_PERMISSION_TEMPLATE_TITLE: "Start with a template",
        ROLE_PERMISSION_TEMPLATE_NAME_COSMETIC: "Cosmetic",
        ROLE_PERMISSION_TEMPLATE_DESCRIPTION_COSMETIC:
          "Just for looks. Great for giving labels or color to members.",
        ROLE_PERMISSION_TEMPLATE_NAME_MEMBER: "Member",
        ROLE_PERMISSION_TEMPLATE_DESCRIPTION_MEMBER:
          "Basic permissions for a regular member to talk.",
        ROLE_PERMISSION_TEMPLATE_NAME_MODERATOR: "Moderator",
        ROLE_PERMISSION_TEMPLATE_DESCRIPTION_MODERATOR:
          "People who can help you manage other members in this server.",
        ROLE_PERMISSION_TEMPLATE_NAME_MANAGER: "Manager",
        ROLE_PERMISSION_TEMPLATE_DESCRIPTION_MANAGER:
          "Trusted leaders who can help you build the server.",
        ROLE_PERMISSION_TEMPLATE_SELECT_CTA: "Select",
        ROLE_PERMISSION_TEMPLATE_SELECT_WARNING_TITLE: "Wait!",
        ROLE_PERMISSION_TEMPLATE_SELECT_WARNING_BODY:
          "Looks like you already made some changes to your permissions. Do you want to override them with this template?",
        ROLE_PERMISSION_TEMPLATE_SELECT_CONFIRMATION_TOAST: "Template applied",
        ROLE_PERMISSION_TEMPLATE_COSMETIC_CONTENT_1:
          "Shows up on their profile",
        ROLE_PERMISSION_TEMPLATE_COSMETIC_CONTENT_2: "Colors their name",
        ROLE_PERMISSION_TEMPLATE_MEMBER_CONTENT_1: "Talk in channels",
        ROLE_PERMISSION_TEMPLATE_MEMBER_CONTENT_2: "Invite friends",
        ROLE_PERMISSION_TEMPLATE_MEMBER_CONTENT_3: "Change nickname",
        ROLE_PERMISSION_TEMPLATE_MODERATOR_CONTENT_PREFACE:
          "Everything members can do, and:",
        ROLE_PERMISSION_TEMPLATE_MODERATOR_CONTENT_1: "Delete any messages",
        ROLE_PERMISSION_TEMPLATE_MODERATOR_CONTENT_2:
          "Mute people in voice chat",
        ROLE_PERMISSION_TEMPLATE_MODERATOR_CONTENT_3: "Kick/ban members",
        ROLE_PERMISSION_TEMPLATE_MODERATOR_CONTENT_4: "Timeout members",
        ROLE_PERMISSION_TEMPLATE_MANAGER_CONTENT_PREFACE:
          "Everything moderators can do, and:",
        ROLE_PERMISSION_TEMPLATE_MANAGER_CONTENT_1:
          "Create and delete channels",
        ROLE_PERMISSION_TEMPLATE_MANAGER_CONTENT_2: "Create and delete roles",
        ROLE_PERMISSION_TEMPLATE_MANAGER_CONTENT_3: "Add emoji and bots",
        ROLE_PERMISSION_TEMPLATE_MANAGER_CONTENT_4: "Pretty much anything",
        ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER: "Create Linked Role",
        ROLE_EDIT_CONNECTIONS_CONTROLS_SELECT_CONNECTION_HEADER:
          "Add requirement",
        ROLE_EDIT_CONNECTIONS_CONTROLS_CLEAR_ALL: "Clear all",
        ROLE_EDIT_CONNECTIONS_CONTROLS_ADD_CONNECTION: "Add requirement",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_ACCOUNT:
          "Must connect {platformName} account",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_GAMES:
          "Must have at least $[](metadataHook) games",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_DOTA2:
          "Must have at least $[](metadataHook) DOTA 2 items",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_TF2:
          "Must have at least $[](metadataHook) TF2 items",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_KARMA:
          "Must have at least $[](metadataHook) Karma",
        ROLE_EDIT_CONNECTIONS_CONTROLS_AGE:
          "Account must be at least $[](metadataHook) days old",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_FOLLOWERS:
          "Must have at least $[](metadataHook) followers",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_FOLLOWING:
          "Must follow at least $[](metadataHook) users",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_LIKES:
          "Must have at least $[](metadataHook) likes",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_TWEETS:
          "Must have at least $[](metadataHook) posts",
        ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_ITEMS: "{gameName} Items",
        ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_ACCOUNT_AGE: "Account Age",
        ROLE_EDIT_CONNECTIONS_CONTROLS_HEADER_VERIFIED: "Verified",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_BE_MOD:
          "Must be a verified moderator",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_GOLD: "Must have Reddit Gold",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_BE_VERIFIED: "Must be verified",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_PAYPAL_VERIFIED_BANK_ACCOUNT:
          "Must have verified bank account",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_BE_TOP_RATED_SELLER:
          "Must be Top Rated Seller",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_POSITIVE_FEEDBACK_PERCENTAGE:
          "Must have at least $[](metadataHook) percent positive ratings",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_UNIQUE_POSITIVE_FEEDBACK_COUNT:
          "Must have at least $[](metadataHook) positive feedback review(s)",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_MOST_UNIQUE_NEGATIVE_FEEDBACK_COUNT:
          "Must have at most $[](metadataHook) negative feedback review(s)",
        ROLE_EDIT_CONNECTIONS_CONTROLS_REQUIREMENTS: "Requirements",
        ROLE_EDIT_CONNECTIONS_CONTROLS_OR_DESCRIPTION:
          "Must connect at least one",
        ROLE_EDIT_CONNECTIONS_CONTROLS_AND_DESCRIPTION: "Must connect all",
        ROLE_EDIT_CONNECTIONS_CONTROLS_WARNING:
          "Adding connection or app requirements to an existing role will remove members from that role unless they already pass the new requirements. Consider creating a new role instead.",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MEMBERS_WARNING:
          "Adding connection or app requirements to an existing role is only possible if the role has no members. Consider creating a new role instead.",
        ROLE_EDIT_CONNECTIONS_CONTROLS_DESCRIPTION_LEARN_MORE:
          "Linking a connection or app requires members to connect their accounts before being added to the role. [Learn more about Linked Roles]({helpdeskArticleUrl}).",
        ROLE_EDIT_CONNECTIONS_CONTROLS_MUST_HAVE_AT_LEAST_POSTS:
          "Must have at least $[](metadataHook) posts",
        COUNTRY_NAME_AF: "Afghanistan",
        COUNTRY_NAME_AX: "Aland Islands",
        COUNTRY_NAME_AL: "Albania",
        COUNTRY_NAME_DZ: "Algeria",
        COUNTRY_NAME_AS: "American Samoa",
        COUNTRY_NAME_AD: "Andorra",
        COUNTRY_NAME_AO: "Angola",
        COUNTRY_NAME_AI: "Anguilla",
        COUNTRY_NAME_AQ: "Antarctica",
        COUNTRY_NAME_AG: "Antigua and Barbuda",
        COUNTRY_NAME_AR: "Argentina",
        COUNTRY_NAME_AM: "Armenia",
        COUNTRY_NAME_AW: "Aruba",
        COUNTRY_NAME_AC: "Ascension",
        COUNTRY_NAME_AU: "Australia",
        COUNTRY_NAME_AT: "Austria",
        COUNTRY_NAME_AZ: "Azerbaijan",
        COUNTRY_NAME_BS: "Bahamas",
        COUNTRY_NAME_BH: "Bahrain",
        COUNTRY_NAME_BD: "Bangladesh",
        COUNTRY_NAME_BB: "Barbados",
        COUNTRY_NAME_BY: "Belarus",
        COUNTRY_NAME_BE: "Belgium",
        COUNTRY_NAME_BZ: "Belize",
        COUNTRY_NAME_BJ: "Benin",
        COUNTRY_NAME_BM: "Bermuda",
        COUNTRY_NAME_BT: "Bhutan",
        COUNTRY_NAME_BO: "Bolivia",
        COUNTRY_NAME_BQ: "Bonaire, Sint Eustatius and Saba",
        COUNTRY_NAME_BA: "Bosnia and Herzegovina",
        COUNTRY_NAME_BW: "Botswana",
        COUNTRY_NAME_BV: "Bouvet Island",
        COUNTRY_NAME_BR: "Brazil",
        COUNTRY_NAME_IO: "British Indian Ocean Territory",
        COUNTRY_NAME_VG: "British Virgin Islands",
        COUNTRY_NAME_BN: "Brunei",
        COUNTRY_NAME_BG: "Bulgaria",
        COUNTRY_NAME_BF: "Burkina Faso",
        COUNTRY_NAME_BI: "Burundi",
        COUNTRY_NAME_KH: "Cambodia",
        COUNTRY_NAME_CM: "Cameroon",
        COUNTRY_NAME_CA: "Canada",
        COUNTRY_NAME_CV: "Cape Verde",
        COUNTRY_NAME_KY: "Cayman Islands",
        COUNTRY_NAME_CF: "Central African Republic",
        COUNTRY_NAME_TD: "Chad",
        COUNTRY_NAME_CL: "Chile",
        COUNTRY_NAME_CN: "China",
        COUNTRY_NAME_CX: "Christmas Island",
        COUNTRY_NAME_CC: "Cocos-Keeling Islands",
        COUNTRY_NAME_CO: "Colombia",
        COUNTRY_NAME_KM: "Comoros",
        COUNTRY_NAME_CG: "Congo",
        COUNTRY_NAME_CD: "Congo, Dem. Rep. of (Zaire)",
        COUNTRY_NAME_CK: "Cook Islands",
        COUNTRY_NAME_CR: "Costa Rica",
        COUNTRY_NAME_HR: "Croatia",
        COUNTRY_NAME_CU: "Cuba",
        COUNTRY_NAME_CW: "Curacao",
        COUNTRY_NAME_CY: "Cyprus",
        COUNTRY_NAME_CZ: "Czech Republic",
        COUNTRY_NAME_DK: "Denmark",
        COUNTRY_NAME_DG: "Diego Garcia",
        COUNTRY_NAME_DJ: "Djibouti",
        COUNTRY_NAME_DM: "Dominica",
        COUNTRY_NAME_DO: "Dominican Republic",
        COUNTRY_NAME_TP: "East Timor",
        COUNTRY_NAME_EC: "Ecuador",
        COUNTRY_NAME_EG: "Egypt",
        COUNTRY_NAME_SV: "El Salvador",
        COUNTRY_NAME_GQ: "Equatorial Guinea",
        COUNTRY_NAME_ER: "Eritrea",
        COUNTRY_NAME_EE: "Estonia",
        COUNTRY_NAME_ET: "Ethiopia",
        COUNTRY_NAME_FK: "Falkland Islands",
        COUNTRY_NAME_FO: "Faroe Islands",
        COUNTRY_NAME_FJ: "Fiji",
        COUNTRY_NAME_FI: "Finland",
        COUNTRY_NAME_FR: "France",
        COUNTRY_NAME_GF: "French Guiana",
        COUNTRY_NAME_PF: "French Polynesia",
        COUNTRY_NAME_TF: "French Southern Territories",
        COUNTRY_NAME_GA: "Gabon",
        COUNTRY_NAME_GM: "Gambia",
        COUNTRY_NAME_GE: "Georgia",
        COUNTRY_NAME_DE: "Germany",
        COUNTRY_NAME_GH: "Ghana",
        COUNTRY_NAME_GI: "Gibraltar",
        COUNTRY_NAME_GR: "Greece",
        COUNTRY_NAME_GL: "Greenland",
        COUNTRY_NAME_GD: "Grenada",
        COUNTRY_NAME_GP: "Guadeloupe",
        COUNTRY_NAME_GU: "Guam",
        COUNTRY_NAME_GT: "Guatemala",
        COUNTRY_NAME_GG: "Guernsey",
        COUNTRY_NAME_GN: "Guinea",
        COUNTRY_NAME_GW: "Guinea-Bissau",
        COUNTRY_NAME_GY: "Guyana",
        COUNTRY_NAME_HT: "Haiti",
        COUNTRY_NAME_HM: "Heard Island and McDonald Islands",
        COUNTRY_NAME_VA: "Holy See (Vatican City State)",
        COUNTRY_NAME_HN: "Honduras",
        COUNTRY_NAME_HK: "Hong Kong SAR China",
        COUNTRY_NAME_HU: "Hungary",
        COUNTRY_NAME_IS: "Iceland",
        COUNTRY_NAME_IN: "India",
        COUNTRY_NAME_ID: "Indonesia",
        COUNTRY_NAME_IR: "Iran",
        COUNTRY_NAME_IQ: "Iraq",
        COUNTRY_NAME_IE: "Ireland",
        COUNTRY_NAME_IM: "Isle of Man",
        COUNTRY_NAME_IL: "Israel",
        COUNTRY_NAME_IT: "Italy",
        COUNTRY_NAME_CI: "Ivory Coast",
        COUNTRY_NAME_JM: "Jamaica",
        COUNTRY_NAME_JP: "Japan",
        COUNTRY_NAME_JE: "Jersey",
        COUNTRY_NAME_JO: "Jordan",
        COUNTRY_NAME_KZ: "Kazakhstan",
        COUNTRY_NAME_KE: "Kenya",
        COUNTRY_NAME_KI: "Kiribati",
        COUNTRY_NAME_XK: "Kosovo",
        COUNTRY_NAME_KW: "Kuwait",
        COUNTRY_NAME_KG: "Kyrgyzstan",
        COUNTRY_NAME_LA: "Laos",
        COUNTRY_NAME_LV: "Latvia",
        COUNTRY_NAME_LB: "Lebanon",
        COUNTRY_NAME_LS: "Lesotho",
        COUNTRY_NAME_LR: "Liberia",
        COUNTRY_NAME_LY: "Libya",
        COUNTRY_NAME_LI: "Liechtenstein",
        COUNTRY_NAME_LT: "Lithuania",
        COUNTRY_NAME_LU: "Luxembourg",
        COUNTRY_NAME_MO: "Macau SAR China",
        COUNTRY_NAME_MK: "North Macedonia",
        COUNTRY_NAME_MG: "Madagascar",
        COUNTRY_NAME_MW: "Malawi",
        COUNTRY_NAME_MY: "Malaysia",
        COUNTRY_NAME_MV: "Maldives",
        COUNTRY_NAME_ML: "Mali",
        COUNTRY_NAME_MT: "Malta",
        COUNTRY_NAME_MH: "Marshall Islands",
        COUNTRY_NAME_MQ: "Martinique",
        COUNTRY_NAME_MR: "Mauritania",
        COUNTRY_NAME_MU: "Mauritius",
        COUNTRY_NAME_YT: "Mayotte",
        COUNTRY_NAME_MX: "Mexico",
        COUNTRY_NAME_FM: "Micronesia",
        COUNTRY_NAME_MI: "Midway Island",
        COUNTRY_NAME_MD: "Moldova",
        COUNTRY_NAME_MC: "Monaco",
        COUNTRY_NAME_MN: "Mongolia",
        COUNTRY_NAME_ME: "Montenegro",
        COUNTRY_NAME_MS: "Montserrat",
        COUNTRY_NAME_MA: "Morocco",
        COUNTRY_NAME_MZ: "Mozambique",
        COUNTRY_NAME_MM: "Myanmar",
        COUNTRY_NAME_NA: "Namibia",
        COUNTRY_NAME_NR: "Nauru",
        COUNTRY_NAME_NP: "Nepal",
        COUNTRY_NAME_NL: "Netherlands",
        COUNTRY_NAME_AN: "Netherlands Antilles",
        COUNTRY_NAME_KN: "Nevis",
        COUNTRY_NAME_NC: "New Caledonia",
        COUNTRY_NAME_NZ: "New Zealand",
        COUNTRY_NAME_NI: "Nicaragua",
        COUNTRY_NAME_NE: "Niger",
        COUNTRY_NAME_NG: "Nigeria",
        COUNTRY_NAME_NU: "Niue",
        COUNTRY_NAME_NF: "Norfolk Island",
        COUNTRY_NAME_KP: "North Korea",
        COUNTRY_NAME_MP: "Northern Mariana Islands",
        COUNTRY_NAME_NO: "Norway",
        COUNTRY_NAME_OM: "Oman",
        COUNTRY_NAME_PK: "Pakistan",
        COUNTRY_NAME_PW: "Palau",
        COUNTRY_NAME_PS: "Palestinian Territory",
        COUNTRY_NAME_PA: "Panama",
        COUNTRY_NAME_PG: "Papua New Guinea",
        COUNTRY_NAME_PY: "Paraguay",
        COUNTRY_NAME_PE: "Peru",
        COUNTRY_NAME_PH: "Philippines",
        COUNTRY_NAME_PN: "Pitcairn",
        COUNTRY_NAME_PL: "Poland",
        COUNTRY_NAME_PT: "Portugal",
        COUNTRY_NAME_PR: "Puerto Rico",
        COUNTRY_NAME_QA: "Qatar",
        COUNTRY_NAME_RE: "Reunion",
        COUNTRY_NAME_RO: "Romania",
        COUNTRY_NAME_RU: "Russia",
        COUNTRY_NAME_RW: "Rwanda",
        COUNTRY_NAME_BL: "Saint Barth\xe9lemy",
        COUNTRY_NAME_PM: "Saint Pierre and Miquelon",
        COUNTRY_NAME_SH: "Saint Helena, Ascension and Tristan da Cunha",
        COUNTRY_NAME_LC: "Saint Lucia",
        COUNTRY_NAME_MF: "Saint Martin",
        COUNTRY_NAME_VC: "Saint Vincent and the Grenadines",
        COUNTRY_NAME_WS: "Samoa",
        COUNTRY_NAME_SM: "San Marino",
        COUNTRY_NAME_ST: "Sao Tome and Principe",
        COUNTRY_NAME_SA: "Saudi Arabia",
        COUNTRY_NAME_SN: "Senegal",
        COUNTRY_NAME_RS: "Serbia",
        COUNTRY_NAME_SC: "Seychelles",
        COUNTRY_NAME_SL: "Sierra Leone",
        COUNTRY_NAME_SG: "Singapore",
        COUNTRY_NAME_SX: "Sint Maarten",
        COUNTRY_NAME_SK: "Slovakia",
        COUNTRY_NAME_SI: "Slovenia",
        COUNTRY_NAME_SB: "Solomon Islands",
        COUNTRY_NAME_SO: "Somalia",
        COUNTRY_NAME_ZA: "South Africa",
        COUNTRY_NAME_GS: "South Georgia and the South Sandwich Islands",
        COUNTRY_NAME_KR: "South Korea",
        COUNTRY_NAME_SS: "South Sudan",
        COUNTRY_NAME_ES: "Spain",
        COUNTRY_NAME_LK: "Sri Lanka",
        COUNTRY_NAME_SD: "Sudan",
        COUNTRY_NAME_SR: "Suriname",
        COUNTRY_NAME_SJ: "Svalbard and Jan Mayen",
        COUNTRY_NAME_SZ: "eSwatini",
        COUNTRY_NAME_SE: "Sweden",
        COUNTRY_NAME_CH: "Switzerland",
        COUNTRY_NAME_SY: "Syria",
        COUNTRY_NAME_TW: "Taiwan",
        COUNTRY_NAME_TJ: "Tajikistan",
        COUNTRY_NAME_TZ: "Tanzania",
        COUNTRY_NAME_TH: "Thailand",
        COUNTRY_NAME_TL: "Timor Leste",
        COUNTRY_NAME_TG: "Togo",
        COUNTRY_NAME_TK: "Tokelau",
        COUNTRY_NAME_TO: "Tonga",
        COUNTRY_NAME_TT: "Trinidad and Tobago",
        COUNTRY_NAME_TN: "Tunisia",
        COUNTRY_NAME_TR: "Turkey",
        COUNTRY_NAME_TM: "Turkmenistan",
        COUNTRY_NAME_TC: "Turks and Caicos Islands",
        COUNTRY_NAME_TV: "Tuvalu",
        COUNTRY_NAME_VI: "U.S. Virgin Islands",
        COUNTRY_NAME_UG: "Uganda",
        COUNTRY_NAME_UA: "Ukraine",
        COUNTRY_NAME_AE: "United Arab Emirates",
        COUNTRY_NAME_GB: "United Kingdom",
        COUNTRY_NAME_US: "United States",
        COUNTRY_NAME_UM: "United States Minor Outlying Islands",
        COUNTRY_NAME_UY: "Uruguay",
        COUNTRY_NAME_UZ: "Uzbekistan",
        COUNTRY_NAME_VU: "Vanuatu",
        COUNTRY_NAME_VE: "Venezuela",
        COUNTRY_NAME_VN: "Vietnam",
        COUNTRY_NAME_WK: "Wake Island",
        COUNTRY_NAME_WF: "Wallis and Futuna",
        COUNTRY_NAME_EH: "Western Sahara",
        COUNTRY_NAME_YE: "Yemen",
        COUNTRY_NAME_ZM: "Zambia",
        COUNTRY_NAME_ZW: "Zimbabwe",
        INACCESSIBLE_CHANNEL_LINK_TITLE: "You don't have access to this link.",
        INACCESSIBLE_CHANNEL_LINK_SUBTITLE:
          "This link is to a server or channel you don't have access to.",
        CREATION_INTENT_TITLE: "Tell Us More About Your Server",
        CREATION_INTENT_DESCRIPTION:
          "In order to help you with your setup, is your new server for just a few friends or a larger community?",
        CREATION_INTENT_OPTION_FRIENDS: "For me and my friends",
        CREATION_INTENT_OPTION_COMMUNITY: "For a club or community",
        CREATION_INTENT_SKIP:
          "Not sure? You can [skip this question](onSkip) for now.",
        VIEW: "View",
        GUILD_CREATE_INVITE_TITLE: "Add some people",
        GUILD_CREATE_INVITE_DESCRIPTION:
          "You’ll need a few friends to get the most out of your server.",
        GUILD_CREATE_INVITE_SEE_MORE_SUGGESTIONS: "See more friends",
        GUILD_INVITE_SEARCH_SERVERS_PLACEHOLDER: "Search your servers",
        GUILD_INVITE_EXPIRATION_SUBLABEL: "Invites expire in {xDays}.",
        GUILD_INVITE_YOUR_GUILDS_LIST_LABEL: "Owned by you",
        GUILD_INVITE_OTHER_GUILDS_LIST_LABEL: "Other servers",
        GUILD_INVITE_SEARCH_NO_RESULTS: "No Results",
        GUILD_INVITE_CTA: "Invite to Servers",
        FRIEND_FINDER_SUGGESTIONS: "Suggestions",
        FRIEND_FINDER_FRIENDS: "All Friends",
        FRIEND_FINDER_CONTACT_FRIEND_SUGGESTIONS_HEADER:
          "Contacts on Discord — {count}",
        FRIEND_FINDER_PEOPLE_YOU_MAY_KNOW_HEADER_NEW_USER:
          "People you may know — {count}",
        FRIEND_FINDER_SEARCH_ROW_NOT_FOUND: "No exact username matches found",
        FRIEND_FINDER_SHOW_ALL: "Show All ({count})",
        FRIEND_FINDER_HIDE_CONTACTS_FROM_NOTIFICATIONS_TITLE: "Hide Contacts",
        FRIEND_FINDER_HIDE_CONTACTS_FROM_NOTIFICATIONS_BODY:
          "Are you sure you want to hide this section? You will no longer see your contacts in Notifications.",
        CONTACT_SYNC_TITLE: "Find your friends",
        CONTACT_SYNC_LANDING_TITLE: "Find your friends",
        CONTACT_SYNC_LANDING_SUBTITLE_REDESIGN:
          "Let's see which of your contacts is already on Discord!",
        CONTACT_SYNC_SUBTITLE:
          "Discord can connect you with your friends and help them find you.",
        CONTACT_SYNC_ADD_FRIENDS_SUBTITLE:
          "Sync your phone contacts to find people you know on Discord. [Learn more](learnMoreHook)",
        CONTACT_SYNC_LANDING_TOGGLE_LABEL: "Allow contacts to add me",
        CONTACT_SYNC_FIND_FRIENDS: "Find friends",
        CONTACT_SYNC_LANDING_DISCOVERABILITY_FOOTER:
          "This allows people to send you friend requests if they have your phone number saved in their contacts. $[Learn more about finding your friends](learnMoreHook)",
        CONTACT_SYNC_SETTING_LABEL: "Sync Contacts",
        CONTACT_SYNC_LANDING_INFO_2:
          "Allow someone to add you if they have your phone number saved in their phone contacts. (Email coming soon!)",
        CONTACT_SYNC_INFO_2:
          "Use the settings below to allow someone to add you if they have your contact information saved in their phone contacts.",
        CONTACT_SYNC_INFO_3:
          "Allow someone to add you if they have your contact information saved in their phone contacts.",
        CONTACT_SYNC_LEARN_MORE:
          "This can be changed anytime in settings. $[Learn More](learnMoreHook)",
        CONTACT_SYNC_DONT_SHOW_AGAIN: "Don't show me this again",
        CONTACT_SYNC_SUGGESTIONS_TITLE: "Add Friends",
        REDESIGN_CONTACT_SYNC_SUGGESTIONS_TITLE: "Add friends",
        CONTACT_SYNC_CONTACT_INVITE_TITLE: "Invite friends",
        CONTACT_SYNC_CONTACT_INVITE_SUBTITLE_INCENTIVIZED:
          "Get a free month of Nitro, the premium Discord experience, when these friends sign up.",
        CONTACT_SYNC_CONTACT_INVITE_SUBTITLE_NON_INCENTIVIZED:
          "Invite your friends to to join you on Discord for more fun!",
        CONTACT_SYNC_SUGGESTIONS_CTA: "Add Friends",
        CONTACT_SYNC_FRIEND_FINDER_TITLE:
          "You have {count, plural, one {1 friend} other {{count} friends}} on Discord",
        CONTACT_SYNC_FRIEND_FINDER_SUBTITLE:
          "Discord can connect you with your friends and help them find you. Enable access to your contacts to find out who they are.",
        CONTACT_SYNC_SUGGESTIONS_SUBTITLE:
          "We found some people you know on Discord! Select who you’d like to send a friend request to.",
        REDESIGN_CONTACT_SYNC_SUGGESTIONS_SUBTITLE:
          "Looks like you know some people who are already using Discord! Add them below.",
        CONTACT_SYNC_NEEDS_PERMISSIONS:
          "To help you find your friends Discord, we’ll need permission to access your contacts.",
        CONTACT_SYNC_NEEDS_PERMISSIONS_ANDROID:
          "To help you find your friends Discord, we’ll need permission to access your contacts. Go to settings, then permissions, then turn contacts on.",
        CONTACT_SYNC_ENTER_NAME_TITLE: "Enter your name",
        CONTACT_SYNC_ENTER_NAME_SUBTITLE:
          "Your name is used for friend requests, suggestions to your contacts and connecting with people you may know.",
        CONTACT_SYNC_ENTER_NAME_INPUT_HEADER: "Your name",
        CONTACT_SYNC_UPDATE_NAME_TITLE: "Update your name",
        CONTACT_SYNC_UPDATE_NAME_SUBTITLE:
          "Your name is only used when you send friend requests to people you have in your contact book.",
        CONTACT_SYNC_REMOVE_NAME: "Remove name",
        CONTACT_SYNC_SUGGESTIONS_EMPTY_TITLE: "Invite your friends to Discord",
        CONTACT_SYNC_SUGGESTIONS_EMPTY_SUBTITLE:
          "None of your contacts are on Discord yet, but we’ll let you know when your friends join. For now, you can invite your friends to join Discord!",
        CONTACT_SYNC_PHONE_VERIFY_TITLE: "Enter your phone number",
        CONTACT_SYNC_PHONE_VERIFY_TITLE_2:
          "Find your friends by adding your phone number",
        CONTACT_SYNC_PHONE_VERIFY_SUBTITLE:
          "Before we can sync your contacts, we need to verify your phone number.",
        CONTACT_SYNC_FIND_FRIENDS_TITLE: "Find your friends",
        CONTACT_SYNC_FIND_FRIENDS_SUBTITLE:
          "Sync your contacts and start chatting.",
        CONTACT_SYNC_EMPTY_FRIENDS_SUBTITLE:
          "Add friends from your contacts and let them know you’re on Discord.",
        CONTACT_SYNC_INFO_SETTINGS_2:
          "Discord can connect you with your friends and help them find you. Your contacts will be regularly sent to us. [Learn More](onClick)",
        CONTACT_SYNC_INFO_PERMISSIONS_FORM_HEADER: "Discovery permissions",
        SETTINGS_CONTACT_SYNC_DISCOVERY: "Discovery Permissions",
        CONTACT_SYNC_INFO_PHONE: "People can add you by your phone number",
        CONTACT_SYNC_INFO_EMAIL: "People can add you by your email",
        SUGGESTED_FRIENDS_LIST_HEADER: "Suggested Friends",
        PENDING_FRIENDS_LIST_HEADER: "Pending Friends",
        PEOPLE_YOU_MAY_KNOW_LIST_HEADER: "People You May Know",
        FORM_LABEL_REGION_OVERRIDE: "Region Override",
        FORM_HELP_REGION_OVERRIDE:
          "Anyone in this channel will connect to the region you set, regardless of where they live. Regions affect voice and video quality. Leave it on Automatic and Discord will figure out what works best.",
        AUTOMATIC_REGION: "Automatic",
        STAGE_VOICE_CHANNEL: "Stage Channel",
        LISTENING_COUNT:
          "{count, plural, =0 {0 in audience} other {{count} in audience}}",
        BLOCKED_COUNT: "{count} blocked",
        SPEAKING_COUNT:
          "{count, plural, =0 {0 is speaking} other {{count} speaking}}",
        DISCOVERY_SPEAKER_COUNT:
          "{speakersCount, plural, =1 {+{count} Speaker} other {+{count} Speakers}}",
        STAGE_CHANNEL_USERS_ARE_SPEAKING:
          "{count, plural, =1 {is} other {are}} speaking",
        STAGE_SETTINGS: "Stage Settings",
        VISIT_COMMUNITY: "Visit Community",
        STAGE_MUSIC_MUTE: "Mute Music",
        STAGE_MUSIC_UNMUTE: "Unmute Music",
        START_STAGE_CHANNEL_EVENT_MODAL_TITLE:
          "What will you be talking about?",
        START_STAGE_CHANNEL_EVENT_MODAL_SUBTITLE:
          "Write a topic to start your Stage.",
        START_STAGE_CHANNEL_EVENT_MODAL_TOPIC_LABEL: "Stage Topic",
        START_STAGE_CHANNEL_EVENT_MODAL_TOPIC_PLACEHOLDER:
          "The debate is over: diet is better than regular",
        START_STAGE_CHANNEL_EVENT_MODAL_BUTTON: "Start Stage",
        START_STAGE_CHANNEL_EVENT_MODAL_TOPIC_REQUIRED:
          "You must set a topic. It’s a rule we made up.",
        START_STAGE_CHANNEL_EVENT_MODAL_SPEAKER_HINT:
          "You will be a Speaker when the Stage opens.",
        EDIT_STAGE_TITLE: "Edit Stage",
        EDIT_STAGE_SUBTITLE: "Change the topic",
        EDIT_STAGE_CHANNEL_TITLE: "Edit Stage",
        RECOMMENDED: "Recommended",
        START_STAGE_CHANNEL_EVENT_MEMBERS_TITLE: "Members Only",
        START_STAGE_CHANNEL_EVENT_MEMBERS_SUBTITLE:
          "Only members of your server can join.",
        START_STAGE_CHANNEL_EVENT_PUBLIC_SUBTITLE:
          "Your Stage will be listed in Stage Discovery.\nAnyone can listen in!",
        START_STAGE_CHANNEL_EVENT_PUBLIC_EXPLANATION:
          "People who listen in will also be able to join your server while the Stage is live. Public Stages must follow [additional guidelines.]({articleURL})",
        START_STAGE_CHANNEL_EVENT_PUBLIC_PERMISSIONS_DISCLAIMER:
          "Only Stage moderators with Invite Members permission can make their Stage public.",
        START_STAGE_CHANNEL_EVENT_PUBLIC_PERMANENT_DISCLAIMER:
          "Public Stages cannot become closed.",
        START_STAGE_CHANNEL_EVENT_PUBLIC_EVERYONE_WARNING:
          "You can only start public Stages in channels that are joinable by @everyone.",
        START_STAGE_PUBLIC_SHORT_TOPIC_WARNING:
          "Is your topic descriptive enough? Make sure it's clear so that people browsing Stage Discovery can easily know what your Stage and community is about.",
        START_STAGE_PUBLIC_INFO_TITLE: "Your Stage is going public!",
        START_STAGE_PUBLIC_INFO_TITLE_CAPTION:
          "Here are a few things you should know.",
        START_STAGE_PUBLIC_INFO_ALT_TEXT: "People performing",
        START_STAGE_PUBLIC_INFO_SECTION_ONE:
          "This Stage will be listed in Stage Discovery. Anyone can listen in!",
        START_STAGE_PUBLIC_INFO_SECTION_TWO:
          "While the Stage is live, listeners can join your server and become part of your community.",
        START_STAGE_PUBLIC_INFO_SECTION_THREE:
          "Public Stages must follow a few additional rules. [Read full guidelines here.]({articleURL})",
        START_STAGE_PUBLIC_INFO_SECTION_FOUR:
          "Public Stages cannot feature explicit, graphic, or sexual content, and make sure your topic is accurate and descriptive.",
        START_STAGE_PUBLIC_CONFIRM: "Let's do it",
        START_STAGE_PUBLIC_PREVIEW_TITLE: "Your Stage is going public!",
        START_STAGE_PUBLIC_PREVIEW_SUBTITLE:
          "It'll be listed publicly in Stage Discovery.",
        START_STAGE_PUBLIC_PREVIEW_SECTION_ONE:
          "This is a great chance to grow your community! Anyone can listen in from Stage Discovery.",
        START_STAGE_PUBLIC_PREVIEW_SECTION_TWO:
          "Listeners can also directly join your server if they like the Stage.",
        START_STAGE_PUBLIC_PREVIEW_SECTION_THREE:
          "We recommend a more descriptive topic since listeners might not know about your server.",
        START_STAGE_PUBLIC_PREVIEW_SECTION_FOUR:
          "Public Stages must follow [Stage Guidelines.]({articleURL}) No explicit or sexual content allowed.",
        STAGE_MODERATOR_JOIN_MODAL_TITLE: "Talking or just listening in?",
        STAGE_MODERATOR_JOIN_MODAL_SUBTITLE:
          "Join as Speaker to talk, or chill out in the audience.",
        STAGE_MODERATOR_JOIN_MODAL_JOIN_SPEAKER: "Join as Speaker",
        STAGE_MODERATOR_JOIN_MODAL_JOIN_AUDIENCE: "Join Audience",
        STAGE_BLOCKED_USERS_TITLE: "Blocked Accounts Present",
        STAGE_BLOCKED_USERS_TITLE_PLURAL:
          "Blocked {number, plural, =1 {Account} other {Accounts}} Present",
        STAGE_BLOCKED_USERS_BODY:
          "Just so you know, {number, plural, =1 {# account you blocked is} other {# accounts you blocked are}} in this Stage.",
        STAGE_BLOCKED_USERS_DESCRIPTION_COUNT:
          "{number, plural, =1 {# account you blocked is} other {# accounts you blocked are}} in this Stage.",
        STAGE_BLOCKED_USERS_ACCEPT: "Got it, thanks",
        STAGE_BLOCKED_USERS_CANCEL: "Never mind",
        STAGE_BLOCKED_USERS_LIST_A11Y_LABEL: "blocked users",
        STAGE_START_PROMPT_TITLE:
          "Waiting for the Stage to start… Any day now.",
        STAGE_START_PROMPT_TITLE_MODERATOR: "Waiting for the Stage to start.",
        STAGE_START_PROMPT_TITLE_MODERATOR_DESKTOP:
          'Click "Start the Stage", and pick a topic to start the conversation.',
        STAGE_START_PROMPT_SUBTITLE: "What will you be talking about today?",
        STAGE_START_PROMPT_SUBTITLE_MOBILE:
          "Here is some music while you wait.",
        STAGE_START_PROMPT_SUBTITLE_MOBILE_MODERATOR:
          'Press "Start the Stage", and pick a topic to start the conversation.',
        STAGE_CONTINUE_PROMPT_TITLE: "Continue without starting",
        STAGE_CONTINUE_PROMPT_SUBTITLE:
          "For mic checks. Start when you're ready.",
        STAGE_AUDIENCE_WAITING_ONE: "!!{first}!! is currently waiting.",
        STAGE_AUDIENCE_WAITING_TWO:
          "!!{first}!!, and !!{second}!! are currently waiting.",
        STAGE_AUDIENCE_WAITING_MANY:
          "!!{first}!!, !!{second}!!, and {numOthers, plural, =1 {# other} other {# others}} are currently waiting.",
        AUDIENCE_LABEL: "Audience",
        AUDIENCE_A11Y_LABEL: "!!{name}!! - Audience",
        SPEAKER_LABEL: "Speakers",
        SPEAKER_A11Y_LABEL: "!!{name}!! - Speaker",
        AUDIENCE_RAISE_HAND_CTA: "Request to Speak",
        AUDIENCE_RAISE_HAND_NO_PERMISSION: "Raise Hand Disabled",
        AUDIENCE_LOWER_HAND: "Cancel Request",
        AUDIENCE_DISCONNECT: "Disconnect Quietly",
        AUDIENCE_SECTION_HEADER: "Audience — {audienceSize}",
        MODERATOR_RAISE_OWN_HAND: "Speak on Stage",
        MODERATOR_ALLOW_EVERYONE_RAISE_HAND: "Allow requests from @everyone",
        STAGE_MODERATOR_TOOLTIP: "Stage Moderator",
        REQUEST_TO_SPEAK_AREA_TITLE: "Requests to Speak",
        REQUEST_TO_SPEAK_AREA_OPEN: "Show Requests",
        REQUEST_TO_SPEAK_AREA_CLOSE: "Hide Requests",
        REQUEST_TO_SPEAK_AREA_ALL_ROLES: "@everyone can request to speak",
        REQUEST_TO_SPEAK_AREA_ALL_ROLES_DISABLED: "Requests Disabled",
        REQUEST_TO_SPEAK_LIST_TITLE: "Requests to Speak — {numHands}",
        REQUEST_TO_SPEAK_EMPTY_LIST_TITLE: "No Requests",
        REQUEST_TO_SPEAK_EMPTY_LIST_BODY:
          "Requests to speak will show up here.",
        REQUEST_TO_SPEAK_ACCEPT: "Invite to Speak",
        REQUEST_TO_SPEAK_INVITATION_SEND: "Invite Sent",
        REQUEST_TO_SPEAK_DECLINE: "Dismiss",
        REQUEST_TO_SPEAK_ACCESSIBILITY_TEXT: "Open Raised Hands List",
        REQUEST_TO_SPEAK_ACCESSIBILITY_TEXT_WITH_PENDING_REQUESTS:
          "Open Raised Hands List, {count, plural, one {# request} other {# requests}} pending",
        REQUEST_TO_SPEAK_MEMBER_INFO_MEMBER: "Member",
        REQUEST_TO_SPEAK_MEMBER_INFO_MEMBER_ROLES: "Member with Role(s)",
        REQUEST_TO_SPEAK_MEMBER_INFO_NEW_MEMBER: "New Member",
        REQUEST_TO_SPEAK_MEMBER_INFO_NON_MEMBER: "Visitor (Non-Member)",
        REQUEST_TO_SPEAK_MEMBER_INFO_NEW_TO_DISCORD: "New to Discord",
        MOVE_ME_TO_AUDIENCE: "Leave the Stage",
        RAISED_HAND_LIST_MOVED_NUX_TITLE: "Raised Hand list has moved!",
        RAISED_HAND_LIST_MOVED_NUX_DESCRIPTION:
          "Click here in the future to see who's requesting to speak.",
        REQUEST_TO_SPEAK: "Request to Speak",
        ROLE_PERMISSIONS_REQUEST_TO_SPEAK_DESCRIPTION:
          "Allow requests to speak in Stage channels. Stage moderators manually approve or deny each request.",
        ROLE_PERMISSIONS_REQUEST_TO_SPEAK_DESCRIPTION_CATEGORY:
          "Allow requests to speak in these Stage channels. Stage moderators manually approve or deny each request.",
        ROLE_PERMISSIONS_REQUEST_TO_SPEAK_DESCRIPTION_STAGE:
          "Allow requests to speak in this Stage channel. Stage moderators manually approve or deny each request.",
        ROLE_PERMISSIONS_SECTION_STAGE: "Stage Channel Permissions",
        ROLE_PERMISSIONS_MANAGE_CHANNEL_DESCRIPTION_STAGE:
          "(Required for Stage moderator) Allow members to set a topic to start the Stage and enable or disable requests to speak. They can also delete the Stage channel.",
        ROLE_PERMISSIONS_MANAGE_ROLES_DESCRIPTION_STAGE:
          "Allow members to change this channel's permissions.",
        ROLE_PERMISSIONS_CONNECT_DESCRIPTION_STAGE_EVERYONE:
          "Allow members to join this Stage channel as the audience. Disabling this and the View Channel permissions for @everyone will make this channel private.",
        ROLE_PERMISSIONS_CONNECT_DESCRIPTION_STAGE:
          "Allow members to join this Stage channel as the audience.",
        ROLE_PERMISSIONS_SPEAK_DESCRIPTION_STAGE:
          "Allow members to be Speakers in this channel.",
        ROLE_PERMISSIONS_USE_VAD_DESCRIPTION_STAGE:
          "Allow Speaker voices to be heard automatically when they start talking. If this permission is disabled, Speakers will be required to use Push to Talk.",
        ROLE_PERMISSIONS_MUTE_MEMBERS_DESCRIPTION_STAGE:
          "(Required for Stage moderator) Allow members to add or remove Speakers.",
        ROLE_PERMISSIONS_MOVE_MEMBERS_DESCRIPTION_STAGE:
          "(Required for Stage moderator) Allow members to force others to disconnect from this channel.",
        STAGE_CHANNEL_CANNOT_OVERWRITE_PERMISSION:
          "This override is currently disabled for Stage channels.",
        STAGE_INVITE_GUILD_HEADER: "Presented By",
        STAGE_INVITE_SPEAKER_COUNT:
          "{count, plural, =1 {1 Speaker} other {{count} Speakers}}",
        STAGE_CHANNEL_USER_MOVE_TO_AUDIENCE: "Leave the Stage",
        STAGE_CHANNEL_USER_MOVE_TO_AUDIENCE_OTHER: "Move to Audience",
        STAGE_CHANNEL_USER_INVITE_TO_SPEAK: "Invite to Speak",
        STAGE_CHANNEL_USER_INVITED_TO_SPEAK: "Invite Sent",
        STAGE_CHANNEL_USER_SET_MYSELF_TO_SPEAKER: "Speak on Stage",
        STAGE_AUDIENCE: "Audience",
        STAGE_SPEAKER: "Speaker",
        STAGE_CHANNEL_START_TITLE: "Start the Stage",
        STAGE_CHANNEL_START_SUBTITLE: "Pick a topic to start the conversation.",
        STAGE_CHANNEL_AUDIENCE_COUNT: "{userCount} listening",
        STAGE_CHANNEL_NO_AUDIENCE: "No listeners yet",
        STAGE_CHANNEL_LIVE_NOW: "Live Now",
        STAGE_CHANNEL_HAPPENING_NOW: "Happening Now",
        STAGE_CHANNEL_JOIN_BUTTON: "Listen In",
        STAGE_CHANNEL_JOINED_AUDIENCE_BUTTON: "Joined Audience",
        STAGE_CHANNEL_JOINED_SPEAKER_BUTTON: "Joined as Speaker",
        STAGE_CHANNEL_LEAVE_BUTTON: "Disconnect Quietly",
        STAGE_CHANNEL_NO_TOPIC: "No topic yet. Write one to start the Stage!",
        STAGE_CHANNEL_AUDIENCE_NO_TOPIC:
          "Waiting for event to start. [elevator music]",
        STAGE_CHANNEL_AUDIENCE_MODAL_TITLE: "Welcome to Stages!",
        STAGE_CHANNEL_AUDIENCE_MODAL_BULLET_1:
          "Your mic will be muted unless you are invited to speak.",
        STAGE_CHANNEL_AUDIENCE_MODAL_BULLET_2:
          "You can leave and rejoin anytime without making noise.",
        STAGE_CHANNEL_AUDIENCE_MODAL_BULLET_3:
          "Request to speak to join the conversation!",
        STAGE_CHANNEL_AUDIENCE_MODAL_BULLET_4:
          "Listening to a public Stage will show up as your status. Go to User Settings > Activity Status for more info.",
        STAGE_CHANNEL_AUDIENCE_MODAL_ACTION: "Got it!",
        STAGE_CHANNEL_AUDIENCE_MODAL_ALT_TEXT:
          "Illustration of four people sitting on a couch watching a stage curtain open",
        STAGE_SPEAK_INVITE_HEADER: "You have been invited to speak.",
        STAGE_SPEAK_INVITE_HEADER_BLOCKED_USERS:
          "{number, plural, =1 {# blocked user} other {# blocked users}} present",
        STAGE_SPEAK_INVITE_PUSH_NOTIFICATION:
          "You have been invited to speak in !!{channelName}!! about !!{channelTopic}!!.",
        STAGE_SPEAK_INVITE_ACCEPT: "Accept",
        STAGE_SPEAK_INVITE_DECLINE: "Decline",
        STAGE_SPEAK_INVITE_BLOCKED_USERS:
          "{number, plural, =1 {# blocked user} other {# blocked users}} in this Stage",
        STAGE_SPEAK_INVITE_MODAL: "Join the speakers in $[](stageChannelHook)",
        STAGE_CHANNEL_JOIN: "Join Stage",
        GUILD_STAGES_CANT_START_EVENT_YET:
          "This Stage isn't scheduled to start until {startDate} at {startTime}",
        EXIT_EVENT_STAGE_OPTIONS_LABEL: "Disconnect Quietly",
        END_GUILD_EVENT_FOR_EVERYONE: "End Stage for Everyone",
        END_EVENT_STAGE_CONFIRMATION_TITLE:
          "Are you sure you want to end the Stage for everyone?",
        END_EVENT_STAGE_CONFIRMATION_SUBTITLE:
          "The Stage will end immediately.",
        STAGE_START_NOTIFICATION_CATEGORY: "Stage Live",
        STAGE_START_PUSH_NOTIFICATION_TITLE:
          "!!{guildName}!! is hosting a live Stage",
        STAGE_START_PUSH_NOTIFICATION_BODY:
          '!!{username}!!: @everyone "!!{topic}!!" is starting. Listen in!',
        STAGE_FULL_MODERATOR_TITLE: "This Video Stage is full!",
        STAGE_FULL_MODERATOR_BODY:
          "Boost the server to let more people in.\nLevel 2 supports 150 people. Level 3 supports 300.",
        STAGE_FULL_MODERATOR_MAX_TITLE: "This Video Stage is maxed out.",
        STAGE_FULL_MODERATOR_MAX_TITLE_MOBILE: "You've maxed out!",
        STAGE_FULL_TITLE: "Sorry, this Stage is full.",
        STAGE_FULL_BODY:
          "This server will need to be Boosted to the next level to support more people.",
        STAGE_FULL_MAX_BODY: "This Stage is at maximum capacity.",
        STAGE_FULL_BOOST_MORE_BODY:
          "This server will need to be Boosted to the next level to support more people. Each additional Boost grants 30 more seats in Video Stage events.",
        GUILD_SCHEDULED_EVENT_STAGE_START_TITLE:
          "Your event is starting in !!{guildName}!!",
        GUILD_SCHEDULED_EVENT_STAGE_START_BODY:
          '"!!{topic}!!" with !!{username}!!. Join in!',
        GUILD_SCHEDULED_EVENT_EXTERNAL_START_BODY: '"!!{topic}!!". Join in!',
        GUILD_SCHEDULED_EVENT_LIVE: "Event Live",
        GUILD_SCHEDULED_EVENT_JOIN_LIVE: "Join Event",
        GUILD_SCHEDULED_EVENT_VIEW_DETAIL: "View Details",
        GUILD_EVENT_INTERESTED_COUNT:
          "{count, plural, =1 {# person is} other {# people are}} interested",
        GUILD_EVENT_CREATED_BY_HOOK: "Created by $[](usernameHook)",
        GUILD_EVENT_CREATED_BY: "Created by {username}",
        DATE_GENERIC_ERROR: "The date selected is invalid.",
        DATE_BELOW_MIN_ALERT_BODY:
          "Please choose a date on or after {minDate}.",
        DATE_ABOVE_MAX_ALERT_BODY: "Please choose a date before {maxDate}.",
        CREATE_EVENT_START_DATE_LABEL: "Start Date",
        CREATE_EVENT_START_TIME_LABEL: "Start Time",
        CREATE_EVENT_ADD_END_TIME_LABEL: "Add end date and time",
        CREATE_EVENT_REMOVE_END_TIME_LABEL: "Remove end date and time",
        CREATE_EVENT_END_DATE_LABEL: "End Date",
        CREATE_EVENT_END_TIME_LABEL: "End Time",
        CREATE_EVENT_PRIVACY_LABEL: "Visibility/Privacy",
        MANAGE_EVENTS: "Manage Events",
        CREATE_EVENTS: "Create Events",
        ROLE_PERMISSIONS_SECTION_GUILD_EVENTS: "Events Permissions",
        ROLE_PERMISSIONS_MANAGE_EVENTS_DESCRIPTION:
          "Allows members to edit and cancel events.",
        ROLE_PERMISSIONS_CREATE_EVENTS_DESCRIPTION:
          "Allows members to create events.",
        ROLE_PERMISSIONS_MANAGE_EVENTS_DESCRIPTION_CATEGORY:
          "Allows members to edit and cancel events in these channels.",
        ROLE_PERMISSIONS_MANAGE_EVENTS_DESCRIPTION_CHANNEL:
          "Allows members to edit and cancel events in this channel.",
        ROLE_PERMISSIONS_CREATE_EVENTS_DESCRIPTION_CATEGORY:
          "Allows members to create events in these channels.",
        ROLE_PERMISSIONS_CREATE_EVENTS_DESCRIPTION_CHANNEL:
          "Allows members to create events in this channel.",
        STAGE_SPEAK_INVITE_SEND: "Invite to Speak",
        STAGE_IS_SPEAKING_ZERO_QUANTITY_HOOK: "](usernameHook)is speaking...",
        STAGE_IS_SPEAKING_HOOK:
          "$[{username} {count, plural, =1 {and one other](usernameHook) are speaking...} other {and {count} others](usernameHook) are speaking...}}",
        STAGE_DISCOVERY_TOOLTIP: "New: Discover Live Stages",
        STAGE_DISCOVERY_INTRO_CARD_BODY_DESKTOP:
          "There's a community talking about it on Discord.\nListen to conversations happening live with Stages.",
        ACTIVITY_CARD_GUILD_MEMBERS:
          "{count, plural, one {{count} Member} other {{count, number} Members}}",
        ACTIVITY_CARD_GUILD_EVENT_LIVE: "Live Event",
        ACTIVITY_CARD_GUILD_EVENT_UPCOMING: "Upcoming Event",
        ACTIVITY_CARD_LIVE_STAGE_LISTENERS_NO_SPEAKER:
          "{listener_count, number} listeners",
        ACTIVITY_CARD_LIVE_STAGE_LISTENERS:
          "{speaker_name} + {listener_count, number} listeners",
        ACTIVITY_CARD_LIVE_STAGE_LISTENING: "!!{name}!! is listening",
        ACTIVITY_CARD_LIVE_STAGE_LISTENING_TWO:
          "!!{name1}!! and !!{name2}!! are listening",
        ACTIVITY_CARD_LIVE_STAGE_LISTENING_MANY:
          "!!{name}!! and !!{count}!! others are listening",
        ACTIVITY_CARD_LIVE_STAGE_WATCHING: "!!{name}!! is watching",
        ACTIVITY_CARD_LIVE_STAGE_WATCHING_TWO:
          "!!{name1}!! and !!{name2}!! are watching",
        ACTIVITY_CARD_LIVE_STAGE_WATCHING_MANY:
          "!!{name}!! and !!{count}!! others are watching",
        ACTIVITY_CARD_LIVE_STAGE_SPEAKING: "!!{name}!! is speaking",
        ACTIVITY_CARD_LIVE_STAGE_ON_STAGE: "!!{name}!! on stage",
        ACTIVITY_CARD_LIVE_STAGE_ON_STAGE_TWO:
          "!!{name1}!! and !!{name2}!! on stage",
        ACTIVITY_CARD_LIVE_STAGE_ON_STAGE_MANY:
          "!!{name}!! and !!{count}!! others on stage",
        ACTIVITY_CARD_LIVE_STAGE_SHARING: "!!{name}!! is sharing",
        ACTIVITY_CARD_LIVE_STAGE_SHARING_TWO:
          "!!{name1}!! and !!{name2}!! are sharing",
        ACTIVITY_CARD_LIVE_STAGE_SHARING_MANY:
          "!!{name}!! and !!{count}!! others are sharing",
        ACTIVITY_CARD_LIVE_STAGE_MANY_FRIENDS:
          "!!{name}!! and {count, number} other friends",
        ACTIVITY_CARD_LIVE_STAGE_MANY_PARTICIPANTS:
          "!!{name}!! and {count, number} others",
        GUILD_EVENTS: "Events",
        GUILD_EVENTS_PLURAL: "{number, plural, =1 {# Event} other {# Events}}",
        LIVE_EVENT: "Live Event",
        START_EVENT: "Start Event",
        SCHEDULE_EVENT: "Create Event",
        CREATE_AND_VIEW_EVENTS: "Create & View Events",
        INDICATE_RSVP: "Interested",
        GUILD_MEMBER_REQUIRED_FOR_EVENT: "You must join the server first.",
        ADD_TO_CALENDAR: "Add to Calendar",
        ADD_TO_GOOGLE_CALENDAR: "Add to Google Calendar",
        DOWNLOAD_ICS: "Download ICS file",
        ADD_TO_YAHOO: "Add to Yahoo",
        ADD_TO_OUTLOOK: "Add to Outlook",
        CALENDAR_CHANNEL_LOCATION:
          "Discord: !!{guildName}!! server, !!{channelName}!!",
        EDIT_EVENT: "Edit Event",
        DELETE_EVENT: "Cancel Event",
        SAVE_EVENT: "Save Event",
        END_EVENT: "End Event",
        HAPPENING_NOW: "Happening Now",
        ACTIVE_NOW: "Active Now",
        SEE_DETAIL: "Event Details",
        EVENT_MARK_INTERESTED: "Mark as Interested",
        EVENT_MARK_NOT_INTERESTED: "Mark as Not Interested",
        SCHEDULE_EVENT_DESCRIPTION: "Schedule a Stage for a future date.",
        GO_TO_CHANNEL: "Go To Channel",
        STARTING_SOON: "Starting soon",
        NEW_EVENT: "New Event",
        DISCONNECT_MENU: "Disconnect Actions",
        STARTING_IN_MINUTES: "Starting in {minutes}m",
        STARTING_ON_DATE: "Starting on {date}",
        ENDING_ON_DATE: "Ends {date}",
        START_DATE_TO_END_DATE: "{start} — {end}",
        START_DATE_TO_END_DATE_WITH_COLOR:
          "$[!!{start}!!](startHook) — Ends {end}",
        START_EVENT_CONFIRMATION:
          "You are about to start this $[**!!{privacyLevel}!!**](privacyLevelHook) event",
        START_EVENT_CONFIRMATION_NO_HOOK: "You are about to start this event",
        GUILD_NOTIFY_MEMBERS: "Notify @everyone",
        GUILD_NOTIFY_MEMBERS_DESKTOP:
          "Also let @everyone know the event is starting.",
        GUILD_NOTIFY_MEMBERS_TOOLTIP_NEW:
          "This will send a notification to members who can see this channel.",
        GUILD_NOTIFY_MEMBERS_ENABLED_NEW:
          "We'll let @everyone know the Stage is starting.",
        GUILD_NOTIFY_MEMBERS_DISABLED_NEW:
          "Tell @everyone that the Stage is starting.",
        GUILD_EVENT_INTERESTED: "{count, number} Interested",
        GUILD_EVENT_INTERESTED_NOTIFICATION:
          "You'll be notified when the event starts",
        GUILD_EVENT_PREVIEW_TITLE: "Here's a preview of your event.",
        GUILD_EVENT_PREVIEW_BODY:
          "When it's time, visit $[**!!{channelName}!!**](channelHook) to start the event!",
        GUILD_EVENT_PREVIEW_BODY_A11Y_LABEL:
          "When it's time, visit !!{channelName}!! to start the event!",
        GUILD_EVENT_PREVIEW_EXTERNAL_EVENT_BODY:
          "This event will auto start when it's time.",
        GUILD_EVENT_START_DATE_REQUIRED:
          "Events must have a start date and time.",
        GUILD_EVENT_END_DATE_REQUIRED: "End date and time are required.",
        GUILD_EVENT_PAST_START_DATE: "The start time must be in the future.",
        GUILD_EVENT_PAST_END_DATE_1: "The end time must be in the future.",
        GUILD_EVENT_END_DATE_BEFORE_START_DATE:
          "The end time must be after the start time.",
        GUILD_EVENT_DELETE_CONFIRM_HEADER: "Cancel Event?",
        GUILD_EVENT_DELETE_CONFIRM_BODY:
          "Are you sure you want to cancel this event?",
        GUILD_EVENT_CREATE_HEADER: "What's your event about?",
        GUILD_EVENT_CREATE_BODY: "Fill out the details of your event.",
        GUILD_EVENT_CREATE_TOPIC_LABEL: "Event Topic",
        GUILD_EVENT_CREATE_TOPIC_PLACEHOLDER: "What's your event?",
        GUILD_EVENT_CREATE_DESCRIPTION_PLACEHOLDER:
          "Tell people a little more about your event. Markdown, new lines, and links are supported.",
        GUILD_EVENT_IMAGE: "Cover Image",
        GUILD_EVENT_ADD_IMAGE: "Upload Cover Image",
        GUILD_EVENT_CHANGE_IMAGE: "Change Image",
        GUILD_EVENT_ADD_IMAGE_SUGGESTION:
          "We recommend an image that’s at least 800px wide and 320px tall.",
        GUILD_EVENT_REMOVE_IMAGE: "Remove Image",
        GUILD_EVENT_CREATE_TOPIC_ERROR_EMPTY_FIELD:
          "An event topic is required.",
        GUILD_EVENT_CREATE_START_TIME_ERROR_EVENT_STARTED:
          "You cannot edit the start time of an already active event.",
        GUILD_EVENT_CREATE_ENTITY_TYPE_ERROR_EMPTY_FIELD:
          "You must first choose an event location.",
        GUILD_EVENT_CREATE_IRL_LOCATION_ERROR_EMPTY_FIELD:
          "A location is required.",
        GUILD_EVENT_CREATE_CHANNEL_ERROR_EMPTY_FIELD: "A channel is required.",
        GUILD_EVENT_START_PROMPT: 'Start Event: "{eventName}"',
        GUILD_EVENT_UPCOMING_PROMPT: 'Upcoming Event: "{eventName}"',
        GUILD_EVENT_START_PROMPT_DESCRIPTION: "Scheduled for {startTime}",
        GUILD_EVENT_MODAL_EMPTY_TITLE: "There are no upcoming events.",
        GUILD_EVENT_MODAL_EMPTY_SUBTITLE:
          "Schedule an event for any planned activity in your server.",
        GUILD_EVENT_ROLE_TIP:
          "You can give other people permission to create events in **[Server Settings > Roles](onClick)**.",
        GUILD_EVENT_PRIVATE_CHANNEL_TOOLTIP:
          "Only members who can view this channel can see this event.",
        GUILD_EVENT_CANNOT_CONNECT: "Missing permission to connect.",
        GUILD_EVENT_DATE_AT_TIME: "{date} at {time}",
        GUILD_EVENT_STEP_LABEL: "Step {step} of {total}",
        GUILD_EVENT_MODAL_PROGRESS_BAR_STEP_1: "Location",
        GUILD_EVENT_MODAL_PROGRESS_BAR_STEP_2: "Event Info",
        GUILD_EVENT_MODAL_PROGRESS_BAR_STEP_3: "Review",
        GUILD_EVENT_LOCATION_TITLE: "Where is your event?",
        GUILD_EVENT_PRIVATE_DESCRIPTION:
          "Events in private channels will only be visible to people who can access that channel.",
        GUILD_EVENT_LOCATION_SUBTITLE: "So no one gets lost on where to go.",
        GUILD_EVENT_LOCATION_EXTERNAL: "Somewhere Else",
        GUILD_EVENT_LOCATION_OPTION_STAGE_HINT:
          "Great for larger community audio events.",
        GUILD_EVENT_LOCATION_OPTION_VOICE_HINT:
          "Hang out with voice, video, screenshare, and Go Live.",
        GUILD_EVENT_LOCATION_OPTION_ELSEWHERE_HINT:
          "Text channel, external link, or in-person location.",
        GUILD_EVENT_LOCATION_OPTION_ELSEWHERE_PLACEHOLDER:
          "Add a location, link, or something.",
        GUILD_EVENT_LOCATION_VOICE_FIELD_LABEL: "Select a channel",
        GUILD_EVENT_LOCATION_SELECT_BUTTON_A11Y_HINT:
          "Tap to open the channel selection list",
        GUILD_EVENT_LOCATION_DISABLED_NO_AVAILABLE_CHANNEL:
          "There are no available channels.",
        GUILD_EVENT_LOCATION_DISABLED_NO_PERMISSION:
          "You do not have the required server or channel permission.",
        GUILD_EVENT_LOCATION_DISABLED_EXTERNAL_NO_PERMISSION:
          "You do not have permission.",
        GUILD_EVENT_LOCATION_DISABLED_CANNOT_EDIT:
          "You cannot edit the location type of an event after it starts.",
        GUILD_EVENT_LOCATION_A11Y_LABEL: "Event Location",
        GUILD_EVENT_STAGE_UPSELL_TITLE: "Try using a Stage channel!",
        GUILD_EVENT_STAGE_UPSELL:
          "Good for: $[Q&A, AMA, Panel Discussion](suggestionsHook)",
        GUILD_EVENT_STAGE_UPSELL_HINT_1: "Q&A",
        GUILD_EVENT_STAGE_UPSELL_HINT_2: "AMA",
        GUILD_EVENT_STAGE_UPSELL_HINT_3: "Panel",
        GUILD_EVENT_STAGE_UPSELL_HINT_4: "Discussion",
        GUILD_EVENT_STAGE_UPSELL_ALT_IMAGE:
          "Three speakers in a Stage channel speak to five audience members, two audience members have their hand raised",
        GUILD_EVENT_LOCATION_ELSEWHERE_FIELD_LABEL: "Enter a location",
        GUILD_EVENT_LOCATION_ELSEWHERE_FIELD_PLACEHOLDER:
          "Add a location, link, or something.",
        GUILD_EVENT_INVITE_EMBED_JOIN_SERVER_BUTTON_LABEL:
          "Join and View Event",
        GUILD_EVENT_INVITE_COMPLETED: "Event is over",
        GUILD_EVENT_TOOLTIP_COPY_INVITE: "Share server invite link to event",
        GUILD_EVENT_TOOLTIP_COPY_INVITE_WITHOUT_PERMISSION:
          "Copy direct event link. Invite permission is required to create a server invite link.",
        GUILD_EVENT_TOOLTIP_COPY_INVITE_PRIVATE_CHANNEL:
          "Copy direct event link. Events in private channels don't support server invite links.",
        GUILD_EVENT_STARTED: "Event is in progress",
        GUILD_EVENT_END_PROMPT_TITLE: "Do you want to also end the event?",
        GUILD_EVENT_END_PROMPT_BODY:
          "If no one is in the channel, the event will automatically end once it feels lonely.",
        GUILD_EVENT_END_PROMPT_CONFIRM: "Yes, end the event",
        GUILD_EVENT_END_PROMPT_CANCEL: "No, just disconnect",
        GUILD_EVENT_EXTERNAL_END_PROMPT_TITLE:
          "Are you sure you want to end the event?",
        GUILD_EVENT_JOIN: "Join",
        GUILD_EVENT_DETAILS_INFO_TAB_TITLE: "Event Info",
        GUILD_EVENT_DETAILS_USER_LIST_TAB_TITLE: "{userCount} Interested",
        GUILD_EVENT_DETAILS_USER_LIST_EMPTY_TITLE:
          "No one's interested in this event yet.",
        GUILD_EVENT_DETAILS_USER_LIST_REMAINING:
          "{userRemainCount, plural, =1 {# more person is} other {# more people are}} interested.",
        GUILD_EVENT_DETAILS_USER_LIST_FETCH_ERROR:
          "We are having problems looking up who is interested in this event. Please try again later.",
        GUILD_EVENT_CHANNEL_DELETE_GUILD_EVENTS:
          "There {count, plural, =1 {is **{count}** Event} other {are **{count}** Events}} associated with this channel. Deleting this channel will also delete the {count, plural, =1 {Event} other {Events}}.",
        GUILD_EVENTS_LIST_ACTION_SHEET_HEADER:
          "{count, plural, one {1 Event} other {{count} Events}}",
        GUILD_EVENTS_LIST_ACTION_SHEET_CREATE_EVENT: "Create",
        GUILD_EVENT_UPSELL_HEADER_PART_1: "Starting now:",
        GUILD_EVENT_UPSELL_HEADER_PART_2: "Scheduled Events",
        GUILD_EVENT_UPSELL_HEADER: "Starting now:\nScheduled Events",
        GUILD_EVENT_UPSELL_BODY:
          "Plan a watch party, game night, hangout, mysterious guest appearance, anything you want in advance.",
        GUILD_EVENT_UPSELL_PRIMARY_CTA: "Check it out",
        GUILD_EVENT_UPSELL_ALT_IMG:
          "Calendar next to three friends in voice chat, with lots of sparkles and excitement",
        GUILD_EVENT_CREATED_MODAL_HEADER: "All set. Now share your event!",
        GUILD_EVENT_CREATED_MODAL_BODY:
          "Copy the event link below to invite people to your event. This also acts as a server invite link.",
        GUILD_SETTINGS_ACTION_FILTER_GUILD_SCHEDULED_EVENT_CREATE:
          "Create Event",
        GUILD_SETTINGS_ACTION_FILTER_GUILD_SCHEDULED_EVENT_UPDATE:
          "Update Event",
        GUILD_SETTINGS_ACTION_FILTER_GUILD_SCHEDULED_EVENT_DELETE:
          "Cancel Event",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_CREATE:
          "$[**!!{user}!!**](userHook) scheduled the event $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_UPDATE:
          "$[**!!{user}!!**](userHook) updated the scheduled event $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_DELETE:
          "$[**!!{user}!!**](userHook) canceled the scheduled event $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_RECURRENCE_UPDATE:
          "$[**!!{user}!!**](userHook) updated an event recurrence for $[**!!{target}!!**](targetHook) at **!!{subtarget}!!**",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_RECURRENCE_DELETE:
          "$[**!!{user}!!**](userHook) reset an event recurrence for $[**!!{target}!!**](targetHook) at **!!{subtarget}!!**",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_NAME_CREATE:
          "With the name **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_DESCRIPTION_CREATE:
          "Set the description to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_STATUS_SCHEDULED:
          "Set the status to **Scheduled**",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_STATUS_ACTIVE:
          "Set the status to **Active**",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_STATUS_COMPLETED:
          "Set the status to **Completed**",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_STATUS_CANCELED:
          "Set the status to **Canceled**",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_ENTITY_TYPE_NONE:
          "Linked to **Nothing**",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_ENTITY_TYPE_STAGE_INSTANCE:
          "Linked with a **Stage**",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_ENTITY_TYPE_VOICE:
          "Linked with a **Voice Channel**",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_ENTITY_TYPE_EXTERNAL:
          "Linked **externally**",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_CHANNEL:
          "Set the channel to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_CHANNEL_CLEAR:
          "Removed the channel",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_LOCATION:
          "Set the location to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_LOCATION_CLEAR:
          "Removed the location",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_RECURRENCE_RULE:
          "Updated the recurrence",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_RECURRENCE_RULE_CLEAR:
          "Removed the recurrence",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_IMAGE_HASH_CHANGE:
          "Set the cover image",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_IMAGE_HASH_REMOVE:
          "Removed the cover image",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_EXCEPTION_SCHEDULED_START_TIME_CHANGE:
          "Set the start time to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_EXCEPTION_SCHEDULED_START_TIME_REMOVED:
          "Reset the start time",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_EXCEPTION_SCHEDULED_END_TIME_CHANGE:
          "Set the start time to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_EXCEPTION_SCHEDULED_END_TIME_REMOVED:
          "Reset the end time",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_EXCEPTION_IS_CANCELED_CANCELED:
          "Canceled this event",
        GUILD_SETTINGS_AUDIT_LOG_SCHEDULED_EVENT_EXCEPTION_IS_CANCELED_RESTORED:
          "Restored this event",
        CHANNEL_PERMISSIONS_MODERATOR_TITLE: "Stage Moderators",
        CHANNEL_PERMISSIONS_MODERATOR_CURRENT_TITLE: "Current Stage moderators",
        CHANNEL_PERMISSIONS_MODERATOR_DESCRIPTION:
          "Stage moderators are Speakers who can add and remove other Speakers. They can also start the Stage event. Stage moderators don't have to be mods of the server.",
        CHANNEL_PERMISSIONS_MODERATOR_LABEL:
          "Who is a Stage moderator for this channel?",
        CHANNEL_PERMISSIONS_REMOVE_MODERATOR_TOOLTIP:
          "Remove Stage moderator from channel.",
        CHANNEL_PERMISSIONS_NOT_MODERATOR: "You are not a Stage moderator.",
        CHANNEL_PERMISSIONS_SEARCH_TOOLTIP:
          "Only users or roles with Manage Roles permission can be added.",
        CHANNEL_PERMISSIONS_CANNOT_EDIT_MODERATORS:
          "You cannot add or remove Stage moderators.",
        CHANNEL_PERMISSIONS_ADD_MODERATOR_TITLE: "Add Stage moderators",
        CHANNEL_PERMISSIONS_REMOVE_NOT_OVERWRITE:
          "Permissions do not come from a channel overwrite.",
        CHANNEL_PERMISSIONS_ROLE_ALREADY_HAS_PERMISSIONS:
          "Already has permissions",
        CHANNEL_PERMISSIONS_MODERATOR_TITLE_SIMPLE: "Moderators",
        CHANNEL_PERMISSIONS_ADD_MODERATOR_TITLE_SIMPLE: "Add Stage moderators",
        CHANNEL_PERMISSIONS_ADD_HAS_GUILD_PERMISSIONS:
          "Role already has server-level permissions.",
        TIMEOUT_SUBMIT: "Timeout",
        DISABLE_GUILD_COMMUNICATION_FOR_USER: "Timeout !!{user}!!",
        ENABLE_GUILD_COMMUNICATION_FOR_USER: "Remove Timeout From !!{user}!!",
        MANUALLY_VERIFY_MEMBER: "Verify Member",
        MANUALLY_UNVERIFY_MEMBER: "Unverify Member",
        MODERATE_MEMBER: "Timeout Members",
        MODERATE_MEMBERS_PERMISSION_INTERNAL: "Moderate Members",
        ROLE_PERMISSIONS_MODERATE_MEMBER_DESCRIPTION:
          "When you put a user in timeout they will not be able to send messages in chat, reply within threads, react to messages, or speak in voice or Stage channels.",
        DISABLE_GUILD_COMMUNICATION_TITLE: "Timeout",
        TIME_OUT: "Timeout",
        REMOVE_TIME_OUT: "Remove Timeout",
        DISABLE_GUILD_COMMUNICATION_BODY:
          "When you put a user in timeout they will not be able to send messages in chat, reply within threads, react to messages, or speak in voice or Stage channels. [Learn more]({helpdeskArticle})",
        REASON: "Reason",
        DURATION: "Duration",
        DISABLE_GUILD_COMMUNICATION_CONFIRMED:
          "!!{user}!! has been timed out for {duration}",
        ENABLE_GUILD_COMMUNICATION_BODY:
          "!!{user}!! has {timeRemaining} remaining in timeout.",
        ENABLE_GUILD_COMMUNICATION_BODY_HELP_TEXT:
          "Remove it now to let them post and react to messages, and join voice and stage channels. [Learn more]({helpdeskArticle})",
        GUILD_ENABLE_COMMUNICATION_HEADER: "Remove Timeout",
        GUILD_ENABLE_COMMUNICATION_TIME_REMAINING:
          "!!{username}!! has $[](countdown) remaining in timeout.",
        GUILD_ENABLE_COMMUNICATION_CTA:
          "Remove it now to let them post and react to messages, and join voice and stage channels. [Learn More]({link})",
        GUILD_ENABLE_COMMUNICATION_SUCCESS: "Timeout Removed",
        DISABLE_GUILD_COMMUNICATION_REASON_HEADER: "Reason for Timeout",
        DISABLE_GUILD_COMMUNICATION_BODY_HEADER:
          "Members who are in timeout are temporarily not allowed to chat or react in text channels. They are also not allowed to connect to voice or Stage channels. [Learn more.]({helpdeskArticle})",
        DISABLE_GUILD_COMMUNICATION_BODY_ITEM_1:
          "Disables posting or reacting to messages in text chat",
        DISABLE_GUILD_COMMUNICATION_BODY_ITEM_2:
          "Prevents them from connecting to voice or stage channels",
        DISABLE_GUILD_COMMUNICATION_BODY_ITEM_3:
          "Automatically disconnects them from a voice or stage channel",
        DISABLE_GUILD_COMMUNICATION_FOOTER:
          "This will be visible in Server Settings > Audit Log.",
        TIMEOUT_USER: "Timeout",
        GUILD_COMMUNICATION_DISABLED_ON_MEMBER: "Timed Out",
        GUILD_COMMUNICATION_DISABLED_NOTICE_HEADER: "Timed Out",
        GUILD_COMMUNICATION_DISABLED_DURATION: "DURATION",
        GUILD_COMMUNICATION_DISABLED_REASON: "REASON",
        GUILD_COMMUNICATION_DISABLED_REASON_HINT_ANDROID: "Enter a reason.",
        GUILD_COMMUNICATION_DISABLED_REASON_PLACEHOLDER:
          "Enter a reason. This will only be visible in the Audit Log and will not be shown to the member.",
        GUILD_COMMUNICATION_DISABLED_SUCCESS: "!!{user}!! Timed Out",
        GUILD_COMMUNICATION_DISABLED_CHAT_NOTICE_TITLE: "TIMED OUT",
        GUILD_COMMUNICATION_DISABLED_CHAT_NOTICE_DESCRIPTION:
          "You can not chat, reply, react, or join voice channels during timeout. [Learn more]({link})",
        GUILD_COMMUNICATION_DISABLED_BOTTOM_SHEET_TITLE: "Timed Out",
        GUILD_COMMUNICATION_DISABLED_POPOUT_HEADER: "Timed Out",
        GUILD_COMMUNICATION_DISABLED_POPOUT_SUBHEADER:
          "You received a timeout in {guildName}.",
        GUILD_SETTINGS_AUDIT_LOG_COMMUNICATION_DISABLED_UNTIL:
          "Set timeout for user until **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_COMMUNICATION_DISABLED_UNTIL_REMOVED:
          "Removed timeout",
        GUILD_COMMUNICATION_DISABLED_ICON_TOOLTIP_BODY:
          "This is only visible to moderators and indicates this user is timed out.",
        STAGE_DISCOVERY_NO_RESULTS_HEADER:
          "We couldn't find any live Stages happening right now.",
        GUILD_EVENT_STAGE_TOOLTIP_BODY:
          "They’re built for larger events and come with features like hand raise and auto-mute.",
        START_STAGE_MODAL_SERVER_SELECTION_EMPTY_TITLE:
          "You can't start a Stage yet",
        START_STAGE_MODAL_SET_TOPIC_SELECT_LABEL: "Stage channel",
        START_STAGE_MODAL_SET_TOPIC_SELECT_A11Y_HINT:
          "the channel selection list",
        START_STAGE_MODAL_SET_TOPIC_HELP_TEXT:
          "Your Stage will be hosted in $[**!!{stageName}!!**](stageHook).",
        START_STAGE_MODAL_SET_TOPIC_CHANGE_CHANNEL:
          "Your Stage will be hosted in $[**!!{stageName}!!**](stageHook). $[Change Channel](changeHook)",
        START_STAGE_MODAL_SELECT_CHANNEL: "Select a Stage channel",
        END_STAGE: "End Stage",
        END_STAGE_TITLE: "Do you want to end the Stage?",
        EXPLICIT_END_STAGE_TITLE: "Do you want to also end the Stage?",
        EXPLICIT_END_STAGE_SUBTITLE:
          "A Stage with no speakers will automatically end after a few minutes.",
        EXPLICIT_END_STAGE_CONFIRM: "Disconnect and End",
        EXPLICIT_END_STAGE_CONFIRM_MOBILE: "Disconnect and end the Stage",
        EXPLICIT_END_STAGE_CANCEL: "No, just disconnect quietly",
        TOKEN_POPOUT_BODY:
          "This message may contain a Discord authentication token, which can grant an attacker access to your account. Are you sure you want to send it?",
        STAGE_DISCOVERY_CARD_SPEAKER_TEXT_OVERFLOW:
          "{count, plural, =0 {} other {+{count} speaking}}",
        STAGE_DISCOVERY_ORIGIN_TEXT: "From {origin}",
        STAGE_DISCOVERY: "Stage Discovery",
        STAGE_DISCOVERY_CONNECTION_ERROR_GENERIC:
          "We are having problems connecting you to this Stage. Please try later.",
        VOICE_CONNECTION_ERROR_GENERIC:
          "We are having problems connecting you to this Channel. Please try later.",
        STAGE_DISCOVERY_LIVE_STAGE_TILE_SPEAKER_SUMMARY_OVERFLOW:
          "{count, plural, =1 {+{count} Speaker} other {+{count} Speakers}}",
        STAGE_DISCOVERY_LIVE_STAGE_TILE_FRIENDS_GUILDS_CONTEXT_AUDIENCE_1:
          "**!!{a}!!** is in the audience",
        STAGE_DISCOVERY_LIVE_STAGE_TILE_FRIENDS_GUILDS_CONTEXT_AUDIENCE_2:
          "**!!{a}!! and !!{b}!!** are in the audience",
        STAGE_DISCOVERY_LIVE_STAGE_TILE_FRIENDS_GUILDS_CONTEXT_AUDIENCE_3:
          "**!!{a}!!, !!{b}!! and !!{c}!!** are in the audience",
        STAGE_DISCOVERY_LIVE_STAGE_TILE_FRIENDS_GUILDS_CONTEXT_AUDIENCE_3_N:
          "**!!{a}!!, !!{b}!!, !!{c}!!, and {n, plural, one {1 other} other {{n} others}}** are in the audience",
        START_STAGE_CHANNEL_EVENT_PRIVACY_TITLE: "Privacy",
        STAGE_CHANNEL_ACTIVITY_FEED_DEFAULT: "In a Stage Channel",
        STAGE_CHANNEL_ACTIVITY_FEED_JOIN: "Join {channel}",
        STAGE_CHANNEL_INVITE_TO_STAGE_MODAL_HEADER: "Invite friends to Stage",
        STAGE_CHANNEL_INVITE_TO_STAGE_MODAL_FOOTER:
          "Or, send a Stage invite link to a friend",
        STAGE_CHANNEL_V2_UPSELL_TITLE:
          "Screenshare and Video in Stage Channels!",
        STAGE_CHANNEL_V2_UPSELL_SUBTITLE:
          "Now you can do more in your next community event. There's also built-in text chat now too.",
        GUILD_EVENT_INVITE_MODAL_TITLE: "Invite friends to event",
        GUILD_EVENT_INVITE_MODAL_FOOTER:
          "Or, send an event invite link to a friend",
        STAGE_INSTANCE_PRIVACY_TYPE_PUBLIC_LABEL: "Public",
        STAGE_INSTANCE_PRIVACY_TYPE_PRIVATE_LABEL: "Private",
        CREATE_STAGE_INSTANCE_DESCRIPTION_INPUT_LABEL: "Description",
        MESSAGE_BUTTON_COMPONENT_LINK_CONTEXT_MENU_NAME: "Button Link Actions",
        MESSAGE_BUTTON_COMPONENT_LINK_CONTEXT_MENU_COPY: "Copy link",
        MESSAGE_SELECT_COMPONENT_DEFAULT_PLACEHOLDER: "Make a selection",
        MESSAGE_SELECT_COMPONENT_SELECT_REQUIREMENT: "Select at least {count}",
        MESSAGE_SELECT_COMPONENT_MAX_SELECT_REQUIREMENT:
          "Select at most {count}",
        SELECT_ACCESSIBILITY_DESC_OPEN_OPTIONS_LIST:
          "Select options list opened",
        SELECT_ACCESSIBILITY_DESC_OPTION:
          "Option {emojiName} {optionName} {optionDescription}",
        SELECT_ACCESSIBILITY_DESC: "Select component {placeholder}",
        SELECT_ACCESSIBILITY_DESC_WITH_SELECTION:
          "Select component with {selections} selected",
        SELECT_USER_OPTION_A11Y_LABEL: "{username}#{discriminator} (user)",
        SELECT_BOT_OPTION_A11Y_LABEL: "{username}#{discriminator} (bot)",
        SELECT_ROLE_OPTION_A11Y_LABEL: "{roleName} (role)",
        USER_SETTINGS_USER_PROFILE: "User Profile",
        USER_SETTINGS_PROFILES: "Profiles",
        USER_SETTINGS_PROFILE_COLOR: "Profile Color",
        USER_SETTINGS_PROFILE_COLOR_DEFAULT: "Default",
        USER_SETTINGS_PROFILE_COLOR_DEFAULT_BUTTON:
          "Use default profile color, calculated from your avatar. {colorHex}",
        USER_SETTINGS_PROFILE_COLOR_CUSTOM: "Custom",
        USER_SETTINGS_PROFILE_COLOR_CUSTOM_BUTTON:
          "Use a custom profile color. Selected: {colorHex}",
        USER_SETTINGS_PROFILE_COLOR_SELECT_COLOR: "Select custom color",
        USER_SETTINGS_CUSTOMIZATION_UPSELL: "Unlock with Nitro",
        USER_SETTINGS_CUSTOMIZATION_UPGRADE_UPSELL: "Upgrade to Unlock",
        USER_SETTINGS_AVATAR: "Avatar",
        USER_SETTINGS_DISPLAY_NAME_TITLE: "Name",
        USER_SETTINGS_AVATAR_SPECS:
          "Upload a PNG or JPG under 8MB. Images should be at least 128x128.",
        USER_SETTINGS_PROFILE_BANNER: "Profile Banner",
        USER_SETTINGS_ADD_BANNER_SPECS:
          "Turn your favorite photos, memes, or GIFs into profile banners!",
        USER_SETTINGS_CUSTOMIZE_PROFILE_TITLE: "Customizing My Profile",
        USER_SETTINGS_CUSTOMIZE_PROFILE_EXAMPLE_BUTTON: "Example Button",
        USER_SETTINGS_REMOVE_BANNER: "Remove Banner",
        USER_SETTINGS_RESET_BANNER: "Reset Banner",
        USER_SETTINGS_UNLOCK_BANNER: "Unlock Banner",
        USER_SETTINGS_ADD_BANNER: "Add Banner",
        USER_SETTINGS_REMOVE_AVATAR: "Remove Avatar",
        USER_SETTINGS_RESET_AVATAR: "Reset Avatar",
        USER_SETTINGS_ADD_ANIMATED_AVATAR: "Add Animated Avatar",
        USER_SETTINGS_AVATAR_DECORATION: "Avatar Decoration",
        USER_SETTINGS_REMOVE_AVATAR_DECORATION: "Remove Decoration",
        USER_SETTINGS_CHANGE_AVATAR_DECORATION: "Change Decoration",
        USER_SETTINGS_PROFILE_EFFECT: "Profile Effect",
        USER_SETTINGS_REMOVE_PROFILE_EFFECT: "Remove Effect",
        USER_SETTINGS_CHANGE_PROFILE_EFFECT: "Change Effect",
        USER_SETTINGS_ABOUT_ME: "About Me",
        USER_SETTINGS_ABOUT_ME_HINT: "Tap to add an about me",
        USER_SETTINGS_PRONOUNS_HINT: "Tap to add pronouns",
        USER_SETTINGS_ABOUT_ME_EDIT_A11Y_HINT: "Tap to edit about me",
        USER_SETTINGS_PRONOUNS_EDIT_A11Y_HINT: "Tap to edit pronouns",
        USER_SETTINGS_ABOUT_ME_EDIT_A11Y_LABEL: "Edit About Me",
        USER_SETTINGS_PRONOUNS_EDIT_A11Y_LABEL: "Edit Pronouns",
        USER_SETTINGS_PROFILE_EFFECT_EDIT_A11Y_HINT:
          "Tap to edit profile effect",
        USER_SETTINGS_PROFILE_EFFECT_EDIT_A11Y_LABEL: "Edit Profile Effect",
        USER_SETTINGS_AVATAR_DECORATION_EDIT_A11Y_HINT:
          "Tap to edit avatar decoration",
        USER_SETTINGS_AVATAR_DECORATION_EDIT_A11Y_LABEL:
          "Edit avatar decoration",
        USER_SETTINGS_ABOUT_ME_DETAILS:
          "You can use markdown and links if you’d like.",
        USER_SETTINGS_BANNER_COLOR_TITLE: "Banner Color",
        USER_SETTINGS_PROFILE_COLOR_MOBILE: "Banner Color",
        USER_SETTINGS_PROFILE_THEME: "Profile Theme",
        USER_SETTINGS_PROFILE_THEME_PRIMARY: "Primary",
        USER_SETTINGS_PROFILE_THEME_ACCENT: "Accent",
        USER_SETTINGS_RESET_PROFILE_THEME: "Reset Theme",
        USER_SETTINGS_RESET_PROFILE_THEME_DESCRIPTION:
          "Resets theme to match User Profile theme.",
        USER_SETTINGS_PROFILE_THEMES_BANNER_MODAL_SPECS:
          "Upload a PNG, JPG, or GIF under 10MB. Images should be at least 680x240.",
        USER_SETTINGS_PROFILE_PREVIEW_MOBILE: "Preview profile",
        USER_SETTINGS_PROFILE_PREVIEW_NOTICE_MOBILE:
          "This is what others see when they view your profile.",
        EDIT_PROFILE_CATEGORY_USER_PROFILE: "User Profile",
        EDIT_PROFILE_CATEGORY_GUILD_IDENTITY: "Server Profiles",
        LIMITED_TIME: "Limited time",
        USER_SETTINGS_TRY_OUT_PREMIUM_HEADER: "Try out Nitro!",
        USER_SETTINGS_TRY_OUT_PREMIUM_HEADER_MOBILE:
          "Try out Profile Customization",
        USER_SETTINGS_TRY_OUT_PREMIUM_DESCRIPTION:
          "See what your profile could look like with Nitro.",
        USER_SETTINGS_TRY_OUT_PREMIUM_DESCRIPTION_VARIANT:
          "See what your profile could look like with Nitro!",
        USER_SETTINGS_TRY_OUT_PREMIUM_PREVIEW: "Nitro Preview",
        USER_SETTINGS_TRY_OUT_PREMIUM_ALSO_INCLUDES:
          "Nitro also includes an exclusive Nitro badge.",
        USER_SETTINGS_TRY_OUT_PREMIUM_TRIAL_DESCRIPTION:
          "Try out all Nitro perks with a [free trial](onClick)!",
        USER_SETTINGS_PROFILE_THEMES_USER_PROFILE_ICON_TOOLTIP_UPSELL:
          "Customize your own profile theme, banner, animated avatar, and more with Nitro!",
        USER_SETTINGS_PROFILE_THEMES_UPSELL_FROM_BANNER_MODAL_TITLE:
          "Create a vibe with Profile Themes",
        USER_SETTINGS_PROFILE_THEMES_UPSELL_FROM_ICON_MODAL_TITLE:
          "Make it yours with Profile Customization",
        USER_SETTINGS_PROFILE_THEMES_UPSELL_FROM_BANNER_MODAL_DESCRIPTION:
          "Customize colors for your profile border, background, and button.",
        USER_SETTINGS_PROFILE_THEMES_UPSELL_FROM_ICON_MODAL_DESCRIPTION:
          "Get more customization with a profile theme, banner, animated avatar, custom tag, [and more with Nitro!](onAndMoreWithPremiumClick)",
        USER_SETTINGS_PROFILE_THEMES_UPSELL_MODAL_IMAGE_ALT:
          "Five profile theme examples in various colors",
        USER_SETTINGS_PROFILE_THEMES_UPSELL_UPGRADE: "Upgrade Nitro",
        USER_SETTINGS_PROFILE_THEMES_UPSELL_TRY_IT_OUT: "Try it out",
        USER_SETTINGS_PROFILE_THEMES_UPSELL_PREVIEW_NITRO: "Preview Nitro",
        USER_SETTINGS_PROFILE_THEMES_UPSELL_TRY_IT_OUT_DESCRIPTION:
          "Like what you see? Get profile themes, animated avatars, profile banners, and more with Nitro!",
        PROFILE_THEMES_ACCESSIBILITY_TOOLTIP_TITLE:
          "Are some profiles too bright?",
        PROFILE_THEMES_ACCESSIBILITY_TOOLTIP_DESCRIPTION:
          "Make profile colors easier on the eyes by syncing them to your Discord theme under Accessibility settings.",
        PREMIUM_UPSELL_PROFILE_CUSTOMIZATION_TITLE:
          "Show up how you want with profile customization",
        PREMIUM_UPSELL_PROFILE_CUSTOMIZATION_DESCRIPTION:
          "Get profile themes, animated avatars, banners and more with Nitro!",
        AVATAR_DECORATION_MODAL_APPLY: "Apply",
        AVATAR_DECORATION_SELECTION_SECTION_A11Y:
          "Avatar Decoration Selection Section",
        PROFILE_EFFECT_MODAL_HEADER: "Add Profile Effect",
        PROFILE_EFFECT_MODAL_SHOP_PREVIEW_HEADER: "Preview The Shop",
        PROFILE_EFFECT_MODAL_APPLY: "Apply",
        PROFILE_EFFECT_ACQUIRABILITY_DISCLAIMER_MOBILE:
          "The ability to acquire new profile effects is not available on this platform.",
        PROFILE_EFFECT_NON_NITRO_DISCLAIMER_HEADER_MOBILE:
          "Looking for profile effects?",
        PROFILE_EFFECTS_SOCIAL_UPSELL:
          "Level up your look with animated profile effects! $[Check them out](openShop).",
        GUILD_IDENTITY_UPSELL_OVERLAY_TITLE:
          "Make unique profiles for each server",
        GUILD_IDENTITY_UPSELL_OVERLAY_DESCRIPTION_THEMES:
          "Customize your avatar, banner, theme, and bio for every server.",
        GUILD_IDENTITY_UPSELL_OVERLAY_TITLE_VARIANT:
          "Customize your profile for every server!",
        GUILD_IDENTITY_UPSELL_OVERLAY_IMAGE_ALT: "customized profile image",
        GUILD_IDENTITY_PFX_COACHMARK_TITLE: "Elevate your profile styles",
        GUILD_IDENTITY_PFX_COACHMARK_BODY:
          "You can now set server-specific avatar decorations & profile effects with Nitro.",
        USER_POPOUT_ABOUT_ME: "About Me",
        PREMIUM_PROFILE_CUSTOMIZATION_UPSELL_HEADER:
          "Wanna upload your own banner?",
        PREMIUM_PROFILE_CUSTOMIZATION_UPGRADE_BODY:
          "Get more customization with a profile banner and join more servers by [upgrading to Discord Nitro](onLearnMore)",
        PREMIUM_PROFILE_CUSTOMIZATION_UPSELL_BODY:
          "Get more customization with a profile banner, an animated avatar, a custom tag, [and more with Discord Nitro!](onLearnMore)",
        PROFILE_CUSTOMIZATION_NITRO_ICON_TOOLTIP: "Exclusive to Nitro",
        PROFILE_USER_BADGES: "User Badges",
        PROFILE_USER_BADGE_A11Y_LABEL: "Badge, {badgeLabel}",
        PROFILE_HEADING_COPY_ID_A11Y_HINT: "double tap to copy user I.D",
        PROFILE_CUSTOMIZATION_PREVIEW: "Preview",
        PROFILE_CUSTOMIZATION_ACTIVITY_TIME: "$[](renderTimeHook) elapsed",
        EDIT_PROFILE: "Edit Profile",
        USER_SETTINGS_BANNER_A11Y_LABEL: "Change Profile Banner",
        PROFILE_CUSTOMIZATION_GUILD_SELECT_TITLE: "Choose a Server",
        PROFILE_CUSTOMIZATION_GUILD_SELECT_PLACEHOLDER: "Search servers",
        PROFILE_CUSTOMIZATION_GUILD_HINT:
          "Show who you are with different profiles for each of your servers. [Learn more about Server Profiles]({helpCenterLink})",
        PREMIUM_MESSAGE_LENGTH_UPSELL_MODAL_HEADER:
          "Wanna send longer messages?",
        PREMIUM_MESSAGE_LENGTH_UPSELL_MODAL_BODY:
          "Speak your mind with 2x longer messages, send larger file uploads, [and more with Discord Nitro!](onLearnMore)",
        PREMIUM_MESSAGE_LENGTH_UPSELL_TOOLTIP:
          "Send longer messages with [Discord Nitro!](onLearnMore)",
        PREMIUM_MESSAGE_LENGTH_UPSELL_TOOLTIP_WITHOUT_LINK:
          "Send longer messages with Discord Nitro!",
        PREMIUM_MESSAGE_LENGTH_UPSELL_MODAL_UPLOAD: "Upload as File",
        PREMIUM_FEATURES_MESSAGE_LENGTH_HEADING: "Longer Messages",
        PREMIUM_FEATURES_MESSAGE_LENGTH_SUBHEADING:
          "Say what’s on your mind with an increased character count.",
        PREMIUM_MESSAGE_LENGTH_ROADBLOCK_MODAL_HEADER:
          "Your message is too long...",
        PREMIUM_MESSAGE_LENGTH_ROADBLOCK_MODAL_BODY:
          "You’ve hit the {maxLength} character count limit.\n\nSpeak your mind with 2x longer messages, send larger file uploads, [and more with Discord Nitro!](onLearnMore)",
        PREMIUM_MESSAGE_LENGTH_ROADBLOCK_MODAL_CONTEXT:
          "You’ve hit the {maxLength} character count limit.",
        PREMIUM_MESSAGE_LENGTH_ROADBLOCK_MODAL_CONTEXT_NO_COUNT:
          "You've hit the character limit.",
        PREMIUM_MESSAGE_LENGTH_ROADBLOCK_MODAL_GLOW_UP:
          "Speak your mind with 2x longer messages, send larger file uploads, [and more with Discord Nitro!](onLearnMore)",
        PREMIUM_MESSAGE_LENGTH_CHATBOX_FLAIR:
          "Nitro is powering you with {maxLength} characters per message!",
        PREMIUM_MESSAGE_LENGTH_MOBILE_ALERT_HEADER: "Your message is too long",
        PREMIUM_MESSAGE_LENGTH_MOBILE_ALERT_BODY:
          "You’ve hit the {maxLength} character count limit. Speak your mind with 2x longer messages, send larger file uploads, and more with Discord Nitro!",
        GUILD_CAP_INVITE_MODAL_BUTTON: "You are at the 100 server limit",
        GUILD_CAP_UPSELL_TOOLTIP:
          "Upgrade to Discord Nitro to join up to 200 servers!",
        GUILD_CAP_UPSELL_GET_NITRO: "Get Nitro",
        GUILD_CAP_UPSELL_MODAL_TITLE: "Wanna join more servers?",
        GUILD_CAP_UPSELL_MODAL_AT_LIMIT_BODY:
          "We love the enthusiasm, but you've hit the 100 server limit.\n\nJoin up to 200 servers $[NEW](newBadgeHook), use your server emoji everywhere, $[and more with Discord Nitro!](onAndMore)",
        GUILD_CAP_UPSELL_MODAL_AT_LIMIT_CONTEXT:
          "We love the enthusiasm, but you've hit the 100 server limit.",
        GUILD_CAP_UPSELL_MODAL_GLOW_UP:
          "Join up to 200 servers, use your server emoji everywhere, $[and more with Discord Nitro!](onAndMore)",
        GUILD_CAP_UPSELL_MODAL_AT_LIMIT_BODY_NON_FORMATTED:
          "We love the enthusiasm, but you've hit the 100 server limit.\n\n  Join up to 200 servers, use your server emoji everywhere, and more with Discord Nitro!",
        GUILD_CAP_UPSELL_MODAL_NEAR_LIMIT_BODY:
          "You're in {guildCount} servers and might hit the 100 server limit soon.\n\nJoin up to 200 servers $[NEW](newBadgeHook), use your server emoji everywhere, $[and more with Discord Nitro!](onAndMore)",
        GUILD_CAP_UPSELL_MODAL_NEAR_LIMIT_CONTEXT:
          "You're in {guildCount} servers and might hit the 100 server limit soon.",
        GUILD_CAP_PREMIUM_FEATURE_TITLE: "More Servers",
        GUILD_CAP_PREMIUM_FEATURE_DESCRIPTION:
          "Double the number of servers you can join up to 200.",
        MARKETING_TIER_1_PERK_LIST_BOOST_DISCOUNT: "30% off Server Boosts",
        SUBMIT_BUG: "Submit Bug",
        BUG_REPORT_TITLE: "Submit a Bug Report",
        BUG_REPORT_NAME: "What's the issue?",
        BUG_REPORT_NO_SCREENSHOT: "Screenshot removed from report",
        BUG_REPORT_DESCRIPTION: "Detailed description (optional)",
        BUG_REPORT_PRIORITY: "Priority",
        BUG_REPORT_PRIORITY_CRITICAL_TITLE: "Critical (P0)",
        BUG_REPORT_PRIORITY_CRITICAL_DESCRIPTION:
          "**Urgent and important.** These are **mission critical** issues that prevent a **widespread** number of users from using critical functions of the app.",
        BUG_REPORT_PRIORITY_HIGH_TITLE: "High (P1)",
        BUG_REPORT_PRIORITY_HIGH_DESCRIPTION:
          "**Important but not urgent.** These are issues that impact a user's ability to use a core function of the app, while not preventing them from using other parts of the app.",
        BUG_REPORT_PRIORITY_LOW_TITLE: "Low (P2)",
        BUG_REPORT_PRIORITY_LOW_DESCRIPTION:
          "**Urgent but not important.** These are issues that negatively impact a user's experience with the application but do not actively prevent them from using core application functionality.",
        BUG_REPORT_PRIORITY_VERY_LOW_TITLE: "Very Low (P3)",
        BUG_REPORT_PRIORITY_VERY_LOW_DESCRIPTION:
          "**Not urgent and not important.** P3 allows us to acknowledge that something is an issue, but these kinds of issues do not need to be fixed until other more pressing concerns are dealt with.",
        BUG_REPORT_URL: "Url (optional)",
        BUG_REPORT_ERROR_NAME_REQUIRED: "Issue name required",
        BUG_REPORT_ERROR_PRIORITY_REQUIRED: "Priority required",
        BUG_REPORT_STATUS_SENDING: "Sending report",
        BUG_REPORT_STATUS_SENT: "Report sent",
        BUG_REPORT_FEATURE_AREA: "Feature area",
        BUG_REPORT_SELECT_FEATURE_AREA: "Select Feature Area",
        BUG_REPORT_OVERRIDE_PLATFORM_INFORMATION:
          "Override Platform Information",
        BUG_REPORT_DEVICE: "Device",
        BUG_REPORT_OS: "Operating System",
        BUG_REPORT_OS_VERSION: "Operating System Version",
        BUG_REPORT_CLIENT_VERSION: "Client Version",
        BUG_REPORT_IS_ANDROID_REACT_NATIVE: "Is Android React Native Client",
        BUG_REPORT_CLIENT_BUILD_NUMBER: "Client Build Number",
        BUG_REPORT_LOCALE: "Client Locale",
        BUG_REPORT_SUBMITTING: "Submitting",
        BUG_REPORT_WHAT_DID_YOU_EXPECT_TO_SEE: "What did you expect to see?",
        BUG_REPORT_TURN_OFF_TEXT: "Turn this thing off for me",
        BUG_REPORT_HAS_BEEN_TURNED_OFF_TEXT: "Bug reporter turned off",
        BUG_REPORT_SOMETHING_IS_BROKEN: "Something is broken on this screen",
        BUG_REPORT_EXTERNAL_SOURCE: "Reddit post, Zendesk ticket, Tweet?",
        BUG_REPORT_REMOVE_SCREENSHOT: "Remove screenshot",
        BUG_REPORT_SUBMITTING_BUG: "Submitting Bug",
        BUG_REPORT_BUG_SUBMITTED: "Bug submitted",
        BUG_REPORT_FAILED_TO_SUBMIT: "Failed to submit report",
        BUG_REPORT_ATTACHMENTS: "Attachments",
        BUG_REPORT_ADD_ATTACHMENTS: "Add attachment(s)",
        BUG_REPORT_UPLOAD_ATTACHMENT: "Upload Attachment",
        UNLOCK_GUILD_MEMBER_AVATAR: "Unlock\nAvatar",
        GUILD_IDENTITY_UPSELL_MODAL_TITLE:
          "Express yourself fully with server profiles",
        GUILD_IDENTITY_UPSELL_MODAL_BODY:
          "Be who you want and use a different avatar, banner, and bio in each of your servers, unlock animated avatars, and more with [Discord Nitro!](onAndMore)",
        GUILD_IDENTITY_BANNER_A11Y_LABEL: "Change Server Profile Banner",
        GUILD_IDENTITY_BIO_EDIT_SUBTITLE:
          "If left blank, your default about me will be used.",
        GUILD_IDENTITY_PRONOUNS_EDIT_SUBTITLE:
          "If left blank, your default pronouns will be used.",
        GUILD_IDENTITY_BIO_TOAST: "Server Bio for !!{guildName}!!",
        GUILD_IDENTITY_PRONOUNS_TOAST: "Pronouns for !!{guildName}!!",
        GUILD_IDENTITY_BIO_HINT: "Tap to add an about me for this server",
        GUILD_IDENTITY_PRONOUNS_HINT: "Tap to add pronouns for this server",
        GUILD_IDENTITY_BIO_EDIT_A11Y_HINT:
          "Tap to edit about me for this server",
        GUILD_IDENTITY_PRONOUNS_EDIT_A11Y_HINT:
          "Tap to edit pronouns for this server",
        GUILD_IDENTITY_BIO_EDIT_A11Y_LABEL: "Edit About Me for this server",
        GUILD_IDENTITY_PRONOUNS_EDIT_A11Y_LABEL:
          "Edit Pronouns for this server",
        GUILD_IDENTITY_UPSELL_NATIVE_MODAL_TITLE:
          "Wanna use a different avatar, banner, and bio?",
        GUILD_IDENTITY_UPSELL_NATIVE_MODAL_BODY:
          "Be who you want and use a different avatar, banner, bio in each of your servers, upgrade your profile, and more with Discord Nitro!",
        GUILD_IDENTITY_SETTINGS_EMPTY_STATE_TITLE:
          "You don't belong to a server yet",
        GUILD_IDENTITY_SETTINGS_EMPTY_STATE_DESCRIPTION:
          "Join servers to hang out with friends and explore new communities.",
        GUILD_IDENTITY_SETTINGS_EMPTY_STATE_DESCRIPTION_V2:
          "Create or join a server to hang out with friends.",
        GUILD_IDENTITY_SETTINGS_EMPTY_STATE_CTA: "Browse Servers",
        CHANGE_IDENTITY: "Edit Server Profile",
        CHANGE_IDENTITY_MODAL_UNKNOWN_ERROR: "Unknown error",
        CHANGE_IDENTITY_MODAL_CHANGE_NICKNAME_DISABLED: "Nickname (Disabled)",
        AKA_MORE_AVATARS_OVERFLOW: "See more server avatars",
        CHANGE_IDENTITY_UPSELL: "Unlock with Nitro",
        CHANGE_IDENTITY_PREVIEW_WITH_GUILD_NAME: "Preview For !!{guildName}!!",
        CHANGE_IDENTITY_BIO_PLACEHOLDER:
          "Tell this server a bit about yourself",
        CHANGE_IDENTITY_SERVER_PROFILE: "Server Profile",
        CHANGE_IDENTITY_SERVER_PROFILE_MENU_HELP:
          "Visible only to those in this server",
        CHANGE_IDENTITY_NICKNAME_PERMISSIONS_DISABLED:
          "You don't have permission to change your nickname in this server.",
        USER_PROFILE_MENU_HELP: "Default profile and visible to everyone",
        PREMIUM_PROGRESS_BAR_GUILD_HEADER_TOOLTIP_TITLE:
          "Want to get to the next Level?",
        PREMIUM_PROGRESS_BAR_GUILD_HEADER_TOOLTIP_CONTENT:
          "The **Boost Progress Bar** shows members how many Boosts your server needs to reach the next Level. Toggle it under **Server Settings > Display**.",
        PREMIUM_PROGRESS_BAR_GUILD_HEADER_TOOLTIP_CTA_PRIMARY_ROLE_SETTINGS:
          "Toggle On",
        PREMIUM_PROGRESS_BAR_GUILD_HEADER_TOOLTIP_CTA_SECONDARY: "Got it",
        PREMIUM_PROGRESS_BAR_GUILD_HEADER_SIZE_TOOLTIP_TITLE:
          "Want more perks for @everyone?",
        PREMIUM_PROGRESS_BAR_GUILD_HEADER_SIZE_TOOLTIP_CONTENT:
          "Enable the **Boost Progress Bar** under Server Settings > Display so members can Boost easily and help unlock server perks together.",
        INVITE_SPLASH_GUILD_HEADER_TOOLTIP_TITLE:
          "Personalize your server invites",
        INVITE_SPLASH_GUILD_HEADER_TOOLTIP_CONTENT:
          "Your server invite image will now display in chat. Customize yours under **Server Settings > Overview**.",
        INVITE_SPLASH_GUILD_HEADER_TOOLTIP_CONTENT_LOCKED:
          "Boost this server to add an image to your invite link embeds. Unlock with only {boostCount, plural, =1 {# more Boost} other {# more Boosts}}.",
        INVITE_SPLASH_GUILD_HEADER_TOOLTIP_CTA_PRIMARY_ROLE_SETTINGS:
          "Server Settings",
        INVITE_SPLASH_GUILD_HEADER_TOOLTIP_CTA_SECONDARY: "Got it",
        DISPLAY_COMPACT_AVATARS: "Show avatars in Compact mode",
        NUX_REDESIGN_NOTIFICATION_TITLE: "Turn on notifications",
        NUX_REDESIGN_NOTIFICATION_BODY:
          "Get notifications for new messages, friend requests, events, and more.",
        NUX_NOTIFICATION_PERMISSION_PROMPT_TEXT:
          "You’ll receive push notifications for Discord activities like messages, mentions, friend requests, and events.",
        NUX_NOTIFICATION_PERMISSION_PROMPT_SUBTITLE:
          "Don’t miss a thing! Setup notifications to know when your friends send you a message.",
        NUX_NOTIFICATION_PERMISSION_ALERT_TITLE: "Allow Notifications",
        ENABLE_NOTIFICATIONS_TITLECASE: "Enable Notifications",
        SKIP_FOR_NOW: "Skip For Now",
        MAYBE_LATER: "Maybe Later",
        ALLOW: "Allow",
        DISCORD_U_COMING_SOON_TO_MOBILE:
          "Coming soon to mobile! For now, head over to desktop to access Student Hubs",
        USER_SETTING_NOTIFICATION_NOT_ENABLED_PROMPT:
          "Push notifications not enabled",
        NOTIFICATION_NOT_ENABLED_PROMPT_CTA:
          "Don't miss out, enable notifications!",
        THREADS: "Threads",
        VIEW_THREAD: "View Thread",
        CREATE_THREAD: "Create Thread",
        EDIT_THREAD: "Edit Thread",
        DELETE_THREAD: "Delete Thread",
        ARCHIVE_THREAD: "Close Thread",
        ARCHIVE_LOCK_THREAD: "Close & Lock Thread",
        LOCK_THREAD: "Lock Thread",
        UNLOCK_THREAD: "Unlock Thread",
        UNARCHIVE_THREAD: "Open Thread",
        THREAD_SETTINGS: "Thread Settings",
        ARCHIVE_SETTINGS: "Auto-Hide Settings",
        ARCHIVE_NOW: "Close Now",
        AUTO_ARCHIVE: "Auto-hide",
        AUTO_ARCHIVE_OPTIONS: "Auto-hide options",
        AUTO_ARCHIVE_THREAD_AT_LONG: "This thread will archive: {time}",
        EMPTY_MESSAGE_PRIVATE_THREAD_INSTRUCTIONS:
          "@mention users to add them to this private thread.",
        MEMBER_LIST_PRIVATE_THREAD_INSTRUCTIONS:
          "Only people you invite and moderators can see this thread.",
        AUTO_ARCHIVE_THREAD_AFTER: "Hide after {duration} of inactivity",
        AUTO_ARCHIVE_DURATION_1_HOUR: "1 Hour",
        AUTO_ARCHIVE_DURATION_24_HOURS: "24 Hours",
        AUTO_ARCHIVE_DURATION_3_DAYS: "3 Days",
        AUTO_ARCHIVE_DURATION_1_WEEK: "1 Week",
        ACTIVE_THREADS_POPOUT_HEADER: "More Active Threads",
        ACTIVE_THREADS_POPOUT_HEADER_FORUM: "More Active Posts",
        ACTIVE_THREADS_POPOUT_LINK: "See All",
        ACTIVE_THREADS_UPSELL_HEADER: "Active Threads has moved",
        ACTIVE_THREADS_UPSELL_CONTENT: "It will now appear in the server menu.",
        JOIN_THREAD: "Join Thread",
        LEAVE_THREAD: "Leave Thread",
        THREAD_MESSAGE_COUNT:
          "{count, plural, one {1 Message ›} other {{count} Messages ›}}",
        THREAD_MESSAGE_COUNT_MOBILE: "{count} ›",
        THREAD_MESSAGE_ROLE_DESCRIPTION: "Open Thread Button",
        SEE_THREAD: "See Thread ›",
        THREAD_ARCHIVED: "This thread is archived",
        NO_THREAD_MESSAGES: "There are no messages in this thread yet.",
        NO_RECENT_THREAD_MESSAGES:
          "There are no recent messages in this thread.",
        THREAD_STARTER_MESSAGE_ORIGINAL_MESSAGE:
          "Original message from channel",
        THREAD_STARTER_MESSAGE_NOT_LOADED:
          "Sorry, we couldn't load the first message in this thread",
        THREAD_STARTED_BY: "Started by $[](usernameHook)",
        THREAD_STARTER_MESSAGE_NOTIFICATION:
          '!!{username}!! started a thread, "!!{threadName}!!"',
        THREAD_BROWSER_MESSAGE_PREVIEW:
          "$[](usernameHook) $[](messageTextHook)",
        BEGINNING_THREAD_ARCHIVE_DESCRIPTION:
          "This thread will archive after $[](autoArchiveDurationHook) of inactivity.",
        THREAD: "Thread",
        THREAD_SETTINGS_UPDATED: "Thread settings have been updated.",
        OPEN_IN_FULL_VIEW: "Open in Full View",
        OPEN_IN_SPLIT_VIEW: "Open in Split View",
        THREAD_HEADER_NOTICE_JOIN:
          "Join this thread to get notifications and to save in your channel list.",
        THREAD_HEADER_NOTICE_ARCHIVED:
          "This thread is archived. You can send a message to unarchive it.",
        THREAD_HEADER_NOTICE_LOCKED:
          "This thread has been closed and locked. Only moderators can reopen it.",
        THREAD_HEADER_NOTICE_ACTIVE_LOCKED:
          "This thread has been locked. Only moderators can send messages.",
        UNARCHIVE: "Open",
        UNLOCK: "Unlock",
        ARCHIVED_THREAD_REACTIONS_DISABLED_TOAST:
          "You cannot add or remove reactions in archived threads.",
        ARCHIVED_THREAD_FOLLOW_DISABLED_TOAST:
          "You cannot follow archived threads.",
        THREAD_BROWSER_TITLE: "Threads",
        THREAD_BROWSER_ROW_TITLE_A11Y_LABEL: "Thread, {name}",
        THREAD_BROWSER_ACTIVE: "Active",
        THREAD_BROWSER_ARCHIVED: "Archived",
        THREAD_BROWSER_PUBLIC: "Public",
        THREAD_BROWSER_PRIVATE: "Private",
        THREAD_BROWSER_STARTED_BY: "Started by $[](authorHook)",
        THREAD_BROWSER_CREATION_TIME: "Created {time}",
        THREAD_BROWSER_ARCHIVE_TIME: "Archived {time}",
        THREAD_BROWSER_LAST_ACTIVE_TIME: "Last active {time}",
        THREAD_BROWSER_PUBLIC_HEADER: "Public Threads",
        THREAD_BROWSER_PRIVATE_HEADER: "Private Threads",
        THREAD_BROWSER_OTHER_HEADER: "{count} other active threads",
        THREAD_BROWSER_ARCHIVED_HEADER: "older threads",
        THREAD_BROWSER_JOINED_HEADER: "{count} joined threads",
        THREAD_BROWSER_OTHER_REDESIGN_HEADER: "{count} Other Active Threads",
        THREAD_BROWSER_ARCHIVED_REDESIGN_HEADER: "Older Threads",
        THREAD_BROWSER_JOINED_REDESIGN_HEADER: "{count} Joined Threads",
        THREAD_BROWSER_TIMESTAMP_SECONDS: "{count}s ago",
        THREAD_BROWSER_TIMESTAMP_DAYS: "{count}d ago",
        THREAD_BROWSER_TIMESTAMP_HOURS: "{count}h ago",
        THREAD_BROWSER_TIMESTAMP_MINUTES: "{count}m ago",
        THREAD_BROWSER_TIMESTAMP_MORE_THAN_MONTH: ">30d ago",
        THREAD_BROWSER_TIMESTAMP_MORE_THAN_YEAR: ">1y ago",
        THREAD_BROWSER_TIMESTAMP_DAYS_A11Y_LABEL: "{count} days ago",
        THREAD_BROWSER_TIMESTAMP_HOURS_A11Y_LABEL: "{count} hours ago",
        THREAD_BROWSER_TIMESTAMP_MINUTES_A11Y_LABEL: "{count} minutes ago",
        THREAD_BROWSER_TIMESTAMP_MORE_THAN_MONTH_A11Y_LABEL:
          "more than 30 days ago",
        THREAD_BROWSER_NO_RECENT_MESSAGES: "No recent messages",
        THREAD_BROWSER_EMPTY_STATE_HEADER: "There are no threads.",
        THREAD_BROWSER_EMPTY_STATE_ACTIVE_HEADER:
          "There are no active threads.",
        THREAD_BROWSER_EMPTY_STATE_ARCHIVED_HEADER:
          "There are no archived threads.",
        THREAD_BROWSER_EMPTY_STATE_SUBTEXT:
          "Stay focused on a conversation with a thread, a temporary text channel.",
        THREAD_BROWSER_FILTER_SETTINGS_TITLE: "Filter Settings",
        THREAD_BROWSER_FILTER_SETTINGS_VISIBILITY: "Thread visibility",
        THREAD_MEMBER_WITHOUT_ACCESS: "Cannot view this thread",
        ALL_ACTIVE_THREADS: "All Active Threads",
        ACTIVE_THREADS: "Active Threads",
        MODERATOR_VIEW: "Moderator View",
        MODERATOR_VIEW_DESCRIPTION:
          "See all private threads created by all users",
        MODERATOR_VIEW_TOOLTIP:
          "Moderator view lets you see all private threads, even those created by others.",
        MODERATOR_VIEW_TOOLTIP_MOBILE:
          "See all private threads created by all users",
        NEW_THREAD: "New Thread",
        THREAD_NAME: "Thread Name",
        FORM_THREAD_NAME_PLACEHOLDER: "New Thread",
        FORM_THREAD_NAME_REQUIRED_ERROR: "Thread Name is required",
        FORM_THREAD_AUTO_ARCHIVE_SECTION_LABEL: "Hide After Inactivity",
        FORM_THREAD_STARTER_MESSAGE_SECTION_LABEL: "Starter Message",
        FORM_THREAD_STARTER_MESSAGE_PLACEHOLDER:
          "Enter a message to start the conversation!",
        FORM_THREAD_STARTER_MESSAGE_REQUIRED_ERROR:
          "Starter Message is required",
        FORM_THREAD_PRIVATE_THREAD_SECTION_LABEL:
          "Only people you invite and moderators can see",
        FORM_THREAD_PRIVATE_THREAD_DESCRIPTION:
          "You can invite new people by @mentioning them.",
        PRIVATE_THREAD: "Private Thread",
        THREAD_REPLY_SUGGESTION:
          "Want to make it easier to follow this chain of {count, plural, =1 {# reply} other {# replies}}?",
        FORM_PRIVATE_THREAD_DESCRIPTION:
          "Only people you invite and moderators can see this thread.",
        CREATE_THREAD_HEADER_1:
          "Send a message to start a thread in this channel!",
        CREATE_THREAD_HEADER_2:
          "It will hide after $[](durationHook) of inactivity.",
        CANNOT_JOIN_THREAD: "Cannot join thread",
        CANNOT_ADD_USER_TO_THREAD: "Cannot add user to thread",
        CANNOT_CREATE_THREAD: "Cannot create thread",
        CANNOT_UNARCHIVE_THREAD: "Cannot reopen thread",
        TOO_MANY_MEMBERS_MESSAGE:
          "This thread has reached the maximum possible number of members.",
        TOO_MANY_THREADS_MESSAGE:
          "This server has reached the maximum number of active threads. Free up space by archiving a thread.",
        TOO_MANY_ANNOUNCEMENT_THREADS_MESSAGE:
          "This server has reached the maximum number of active announcement threads. Free up space by archiving a thread.",
        BOT_DM_TOO_MANY_THREADS:
          "Your message could not be sent because this server has reached the maximum number of threads. Free up space by archiving a thread.",
        BOT_DM_TOO_MANY_ANNOUNCEMENT_THREADS:
          "Your message could not be sent because this server has reached the maximum number of announcement threads. Free up space by archiving a thread.",
        CANNOT_JOIN_FORUM_POST: "Cannot join post",
        CANNOT_ADD_USER_TO_FORUM_POST: "Cannot add user to post",
        CANNOT_CREATE_FORUM_POST: "Cannot create post",
        CANNOT_UNARCHIVE_FORUM_POST: "Cannot reopen post",
        TOO_MANY_MEMBERS_MESSAGE_FORUM_POST:
          "This post has reached the maximum possible number of members.",
        TOO_MANY_FORUM_POSTS_MESSAGE:
          "This server has reached the maximum number of active posts. Free up space by archiving a post.",
        BOT_DM_TOO_MANY_POSTS:
          "Your message could not be sent because this server has reached the maximum number of posts. Free up space by archiving a post.",
        FORM_HELP_DEFAULT_AUTO_ARCHIVE_DURATION:
          "New threads will not show in the channel list after being inactive for the specified duration.",
        FORM_HELP_AUTO_ARCHIVE_DURATION:
          "Threads will not show in the channel list after being inactive for the specified duration.",
        UPLOAD_FILE_SUBTEXT: "Tip: Double click the $[](icon)",
        SYSTEM_MESSAGE_THREAD_CREATED:
          "$[!!{actorName}!!](actorHook) started a thread: **[!!{threadName}!!](threadOnClick)**. See all [threads](viewThreadsOnClick).",
        SYSTEM_MESSAGE_THREAD_CREATED_MOBILE:
          "[!!{actorName}!!](actorHook) started a thread: **[!!{threadName}!!](threadOnClick)**.",
        SYSTEM_MESSAGE_THREAD_CREATED_MOBILE2:
          "$[!!{actorName}!!](actorHook) started a thread: **$[!!{threadName}!!](threadOnClick)**.",
        SYSTEM_MESSAGE_THREAD_MEMBER_ADD:
          "$[!!{actorName}!!](actorHook) added $[!!{targetName}!!](targetHook) to the thread.",
        SYSTEM_MESSAGE_THREAD_MEMBER_ADD_MOBILE:
          "[!!{username}!!](usernameOnClick) added [!!{otherUsername}!!](otherUsernameOnClick) to the thread.",
        SYSTEM_MESSAGE_THREAD_MEMBER_REMOVE:
          "$[!!{actorName}!!](actorHook) removed $[!!{targetName}!!](targetHook) from the thread.",
        SYSTEM_MESSAGE_THREAD_MEMBER_REMOVE_MOBILE:
          "[!!{username}!!](usernameOnClick) removed [!!{otherUsername}!!](otherUsernameOnClick) from the thread.",
        SYSTEM_MESSAGE_THREAD_MEMBER_REMOVE_SELF_MOBILE:
          "[!!{username}!!](usernameOnClick) left the thread",
        REMOVE_USER_FROM_THREAD: "Remove !!{user}!! from Thread",
        KICK_USER_FROM_SERVER: "Kick !!{user}!! from Server",
        BAN_USER_FROM_SERVER: "Ban !!{user}!! from Server",
        MANAGE_THREADS: "Manage Threads",
        ROLE_PERMISSIONS_MANAGE_THREADS_DESCRIPTION:
          "Allows members to rename, delete, close, and turn on slow mode for threads. They can also view private threads.",
        ROLE_PERMISSIONS_MANAGE_THREADS_DESCRIPTION_TEXT:
          "Allows members to rename, delete, close, and turn on slow mode for threads in this channel. They can also view private threads.",
        ROLE_PERMISSIONS_MANAGE_THREADS_DESCRIPTION_CATEGORY:
          "Allows members to rename, delete, close, and turn on slow mode for threads in these channels. They can also view private threads.",
        CREATE_PUBLIC_THREADS: "Create Public Threads",
        ROLE_PERMISSIONS_CREATE_PUBLIC_THREADS_DESCRIPTION:
          "Allow members to create threads that everyone in a channel can view.",
        ROLE_PERMISSIONS_CREATE_PUBLIC_THREADS_DESCRIPTION_TEXT:
          "Allow members to create threads that everyone in this channel can view.",
        ROLE_PERMISSIONS_CREATE_PUBLIC_THREADS_DESCRIPTION_CATEGORY:
          "Allow members to create threads that everyone in these channels can view.",
        CREATE_PRIVATE_THREADS: "Create Private Threads",
        ROLE_PERMISSIONS_CREATE_PRIVATE_THREADS_DESCRIPTION:
          "Allow members to create invite-only threads.",
        ROLE_PERMISSIONS_CREATE_PRIVATE_THREADS_DESCRIPTION_TEXT:
          "Allow members to create invite-only threads in this channel.",
        ROLE_PERMISSIONS_CREATE_PRIVATE_THREADS_DESCRIPTION_CATEGORY:
          "Allow members to create invite-only threads in these channels.",
        SEND_MESSAGES_IN_THREADS: "Send Messages in Threads",
        ROLE_PERMISSIONS_SEND_MESSAGES_IN_THREADS_DESCRIPTION:
          "Allow members to send messages in threads.",
        ROLE_PERMISSIONS_SEND_MESSAGES_IN_THREADS_DESCRIPTION_TEXT:
          "Allow members to send messages in threads under this channel.",
        ROLE_PERMISSIONS_SEND_MESSAGES_IN_THREADS_DESCRIPTION_CATEGORY:
          "Allow members to send messages in threads under these channels.",
        DURATION_DAYS_SHORT: "{days, plural, =1 {1d} other {{days}d}}",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_DEFAULT_AUTO_ARCHIVE_DURATION_CREATE:
          "{newValue, plural, =0 {Removed default hide duration} =1 {Set default hide duration to **# minute**} other {Set default hide duration to **# minutes**}}",
        GUILD_SETTINGS_AUDIT_LOG_CHANNEL_DEFAULT_AUTO_ARCHIVE_DURATION_CHANGE:
          "{newValue, plural, =0 {Removed default hide duration} =1 {Changed default hide duration to **# minute**} other {Changed default hide duration to **# minutes**}}",
        GUILD_SETTINGS_ACTION_FILTER_THREAD_CREATE: "Create Thread",
        GUILD_SETTINGS_ACTION_FILTER_THREAD_UPDATE: "Update Thread",
        GUILD_SETTINGS_ACTION_FILTER_THREAD_DELETE: "Delete Thread",
        GUILD_SETTINGS_AUDIT_LOG_PRIVATE_THREAD_CREATE:
          "$[**!!{user}!!**](userHook) created a private thread $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_ANNOUNCEMENT_THREAD_CREATE:
          "$[**!!{user}!!**](userHook) created an announcement thread $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_THREAD_CREATE:
          "$[**!!{user}!!**](userHook) created a thread $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_THREAD_UPDATE:
          "$[**!!{user}!!**](userHook) made changes to the thread $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_THREAD_DELETE:
          "$[**!!{user}!!**](userHook) deleted the thread $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_THREAD_NAME_CREATE:
          "Set the name to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_THREAD_NAME_CHANGE:
          "Changed the name from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_THREAD_ARCHIVED: "Closed the thread",
        GUILD_SETTINGS_AUDIT_LOG_THREAD_UNARCHIVED: "Reopened the thread",
        GUILD_SETTINGS_AUDIT_LOG_THREAD_LOCKED:
          "Locked the thread, restricting it to only be opened by moderators",
        GUILD_SETTINGS_AUDIT_LOG_THREAD_UNLOCKED:
          "Unlocked the thread, allowing it to be opened by non-moderators",
        GUILD_SETTINGS_AUDIT_LOG_THREAD_INVITABLE_ENABLED:
          "Allowed non-moderators to add members to the thread",
        GUILD_SETTINGS_AUDIT_LOG_THREAD_INVITABLE_DISABLED:
          "Disallowed non-moderators from adding members to the thread",
        GUILD_SETTINGS_AUDIT_LOG_THREAD_AUTO_ARCHIVE_DURATION_CREATE:
          "{newValue, plural, =0 {Removed auto hide duration} =1 {Set auto hide duration to **# minute**} other {Set auto hide duration to **# minutes**}}",
        GUILD_SETTINGS_AUDIT_LOG_THREAD_AUTO_ARCHIVE_DURATION_CHANGE:
          "{newValue, plural, =0 {Removed auto hide duration} =1 {Changed auto hide duration to **# minute**} other {Changed auto hide duration to **# minutes**}}",
        THREAD_MEMBER_LIST_EMPTY_STATE_HEADER: "There’s no one in this thread.",
        THREAD_MEMBER_LIST_EMPTY_STATE_SUBTEXT:
          "You can invite people by @mentioning them in a message.",
        THREAD_ROLE_MENTION_FAILURE:
          "Some roles were not mentioned or added to the thread.",
        FORM_HELP_THREAD_INVITABLE:
          "When disabled, only moderators and the thread creator can add new members to this thread.",
        THREAD_INVITABLE_TOGGLE_LABEL: "Anyone can invite",
        THREAD_GROUP_A11Y_LABEL: "!!{channelName}!! threads",
        GENERIC_ERROR_TITLE: "Oh no! Something went wrong.",
        GENERIC_ERROR_BODY:
          "Seems like something's gone wrong. Sorry about that.",
        FREQUENTLY_USED: "Frequently Used",
        CLICK_TO_LEARN_MORE: "Click to learn more",
        NITRO_CHURN_SURVEY_TITLE: "Farewell, {subscriptionName}",
        NITRO_CHURN_SURVEY_SUBTITLE:
          "Your {subscriptionName} subscription has been canceled.",
        NITRO_CHURN_SURVEY_QUESTION:
          "Could we ask: What was the main reason you decided to cancel {subscriptionName}?",
        NITRO_CHURN_SURVEY_ANSWER_CHOICE_NO_LONGER_SUPPORT_DISCORD:
          "I no longer want to support Discord",
        NITRO_CHURN_SURVEY_ANSWER_CHOICE_DONT_UNDERSTAND_NITRO:
          "I don’t really understand Nitro or what it’s for",
        NITRO_CHURN_SURVEY_ANSWER_CHOICE_DONT_LIKE_MONTHLY_SUBS:
          "I don’t like monthly subscriptions",
        NITRO_CHURN_SURVEY_ANSWER_CHOICE_DIDNT_FEEL_WORTH:
          "I don’t feel like Nitro is worth its price",
        NITRO_CHURN_SURVEY_ANSWER_CHOICE_DONT_NEED_SPECIFIC_FEAT:
          "I subscribed for a Nitro feature I don’t need anymore",
        NITRO_CHURN_SURVEY_ANSWER_CHOICE_DONT_USE_DISCORD_OFTEN:
          "I don’t currently use Discord enough to need Nitro",
        NITRO_CHURN_SURVEY_ANSWER_CHOICE_WANT_TO_SWITCH_TIERS:
          "I want to switch to a different tier of Nitro",
        NITRO_CHURN_SURVEY_ANSWER_CHOICE_CANT_AFFORD:
          "I can’t afford it right now",
        NITRO_CHURN_SURVEY_ANSWER_OTHER: "Other",
        NITRO_CHURN_SURVEY_OTHER_PLACEHOLDER: "Share your reason here.",
        PREMIUM_SURVEY_THANK_YOU: "Thank you!",
        PREMIUM_SURVEY_WE_APPRECIATE_IT:
          "Thanks for your feedback. We appreciate it!",
        PREMIUM_NO_PROBLEM: "No problem",
        HUB_WAITLIST_MODAL_JOIN_HEADER:
          "Find study groups, clubs, and friends in the Student Hub for your school!",
        HUB_WAITLIST_MODAL_JOIN_SUBHEADER:
          "Get notified when your hub launches so you can easily find\nstudent-run servers for your study groups and clubs.",
        HUB_WAITLIST_MODAL_FORM_DESCRIPTION:
          "Enter your official student email address",
        HUB_WAITLIST_MODAL_FORM_PLACEHOLDER: "sam@college.edu",
        HUB_WAITLIST_MODAL_FORM_TITLE: "School Email",
        HUB_DISCORD_HUB: "Student Hub",
        HUB_VERIFIED_DISCORD_HUB: "Verified Student Hub",
        JOIN_WAITLIST: "Join Waitlist",
        HUB_WAITLIST_MODAL_JOINED_HEADER: "Thanks! You're on the waitlist.",
        HUB_WAITLIST_MODAL_JOINED_DESCRIPTION:
          "We'll reach out when the Student Hub for !!{school}!! is live.",
        HUB_EMAIL_CONNECTION_SIDEBAR_HEADER: "Student Hubs",
        HUB_EMAIL_CONNECTION_SIDEBAR_LEARN_MORE_HEADER: "What's a Student Hub?",
        HUB_EMAIL_CONNECTION_SIDEBAR_DESCRIPTION:
          "Hubs are not affiliated with or managed by schools.\n\nServers listed in the school’s Student Hub are run by students. Users do not need to be a member of a Student Hub to be invited to join a server listed there.",
        MOBILE_HUB_EMAIL_CONNECTION_SIDEBAR_DESCRIPTION_1:
          "An exclusive place to connect with students, discover servers, and share your own servers for students to join.",
        MOBILE_HUB_EMAIL_CONNECTION_SIDEBAR_DESCRIPTION_2:
          "Hubs are not affiliated with or managed by schools.",
        MOBILE_HUB_EMAIL_CONNECTION_SIDEBAR_DESCRIPTION_3:
          "Servers in the Hub are student-run, but may include non-students.",
        MOBILE_HUB_EMAIL_CONNECTION_SIDEBAR_DESCRIPTION_4:
          "Servers listed in the school’s Student Hub are run by students. Users do not need to be a member of a Student Hub to be invited to join a server listed there.",
        HUB_EMAIL_CONNECTION_CONTENT_HEADER:
          "Find study groups, clubs, and friends in the Student Hub for your school!",
        HUB_EMAIL_CONNECTION_NUX_HEADER:
          "Find your classmates in the Student Hub for your school",
        HUB_EMAIL_CONNECTION_CONTENT_DESCRIPTION:
          "Meet classmates from your school, discover communities, and share your servers, all in one place.",
        HUB_EMAIL_CONNECTION_NUX_CONTENT_DESCRIPTION:
          "Join for exclusive access to student-run study groups, clubs, game nights, and more.",
        MOBILE_HUB_EMAIL_CONNECTION_CONTENT_DESCRIPTION:
          "Meet classmates from your school, discover communities, and share your servers, all in one place. [Learn more.](onClick)",
        HUB_EMAIL_CONNECTION_CONTENT_INPUT_HEADER: "School Email",
        HUB_EMAIL_CONNECTION_CONTENT_INPUT_HEADER_MOBILE:
          "Official School Email Address",
        HUB_EMAIL_CONNECTION_CONTENT_INPUT_PLACEHOLDER: "name@school.edu",
        HUB_EMAIL_CONNECTION_CONTENT_INPUT_DESCRIPTION:
          "Enter your official student email address",
        HUB_EMAIL_CONNECTION_CONTENT_BUTTON: "Join Hub",
        HUB_EMAIL_CONNECTION_CONTENT_CANCEL_BUTTON: "No Thanks",
        HUB_EMAIL_CONNECTION_CONTENT_TOS_AND_PP:
          "Review Discord's [Terms of Service]({termsURL}) and [Privacy Policy]({privacyURL}) to learn more about how we use your data.",
        HUB_EMAIL_CONFIRMATION_DIFFERENT_EMAIL: "Try A Different Email",
        HUB_EMAIL_CONNECTION_ADD_HEADER: "Attend multiple schools?",
        HUB_EMAIL_CONNECTION_ADD_DESCRIPTION:
          "Join the Student Hub for any school you’re attending.",
        HUB_EMAIL_CONNECTION_JOIN_MY_SCHOOOL: "Join Hub",
        HUB_EMAIL_CONNECTION_JOIN_ANOTHER: "Join Another Hub",
        HUB_EMAIL_CONNECTION_JOIN_HEADER:
          "Find study groups, clubs, and friends in the Student Hub for your school!",
        HUB_EMAIL_CONNECTION_JOIN_DESCRIPTION:
          "An exclusive place to meet classmates and discover student-run servers for whatever you're into.",
        HUB_EMAIL_CONNECTION_JOIN_CARD_DESCRIPTION:
          "Meet classmates from your school, discover communities, and share your servers, all in one place.",
        HUB_DISCORD_HUBS: "Student Hubs",
        HUB_SCHOOL_HUBS: "Student Hubs",
        HUB_DISCOVERY_FOOTER_DESCRIPTION:
          "Hubs are not affiliated with or managed by schools.\nServers listed in the school’s Student Hub are run by students in that Hub. Users do not need to be a member of a Student Hub to be invited to join a server listed there.",
        HUB_EMAIL_CONNECTION_INVITE_HEADER:
          "Join {count, plural, =0 {} =1 {{count} other friend} other {{count} other friends}} in the Student Hub for !!{guildName}!!!",
        HUB_INVITE_BUTTON_TITLE_INVITED: "You've been invited to join a Hub",
        HUB_INVITE_BUTTON_TITLE_INVITER: "You sent an invite to join a Hub",
        HUB_INVITE_ANOTHER_SCHOOL_LINK:
          "Go to a different school? [Join here](onClick)",
        HUB_EXTRA_DESCRIPTION: "What’s a Student Hub?",
        HUB_EMAIL_CONNECTION_SCHOOL_SUBMIT_HEADER: "Join the waitlist",
        HUB_EMAIL_CONNECTION_SCHOOL_SUBMIT_DESCRIPTION:
          "The Hub for your school isn't live yet. Enter your school's name and we'll let you know when it is!",
        HUB_EMAIL_CONNECTION_SCHOOL_SUBMIT_INPUT_HEADER: "School Name",
        HUB_EMAIL_CONNECTION_SCHOOL_SUBMIT_INPUT_PLACEHOLDER:
          "Full school name",
        HUB_EMAIL_CONNECTION_GUILD_SELECT_HEADER: "Select your school",
        HUB_EMAIL_CONNECTION_GUILD_SELECT_MISSING_SCHOOL:
          "My school isn't here",
        HUB_EMAIL_CONNECTION_GUILD_SELECT_SUBHEADER:
          "Can't find your school? [Join the waitlist.](onJoinWaitlist)",
        HUB_EMAIL_CONNECTION_GUILD_SELECT_NO_RESULTS_HEADER: "No matches found",
        HUB_EMAIL_CONNECTION_GUILD_SELECT_NO_RESULTS_SUBHEADER:
          "[Join the waitlist.](onJoinWaitlist)",
        HUB_UNAVAILABLE_SCHOOL: "My school isn't here",
        YOUR_HUB: "Your Hubs",
        HUB_VERIFY_EMAIL_ADDRESS: "Verify your email to join",
        HUB_PIN_DESCRIPTION:
          "Your code has been emailed to your official school email.\nDidn't get the code? [Resend code](onClick) to !!{email}!!",
        HUB_ENTER_PIN: "Enter Discord verification code",
        HUB_RESEND: "Sent",
        HUB_RESEND_ERROR: "Unable to send email",
        HUB_EMAIL_CONNECTION_CANCEL: "No, thanks",
        HUB_INVITE_HEADER: "Invite friends to the Student Hub for your school",
        HUB_INVITE_SUBHEADER: "A student email address is required to join.",
        HUB_LINK_CHANNEL_NOTICE_BODY:
          "New! Find study groups and clubs in the Student Hub for your school.",
        HUB_CHAT_INPUT_BACK: "Back to Hub",
        HUB_PROGRESS_JOIN_GUILD: "Join your first server",
        HUB_PROGRESS_INVITE_USER: "Invite your classmates",
        HUB_PROGRESS_SYNC_CONTACTS: "Find your friends",
        HUB_PROGRESS_STEP_SUBTITLE: "{number} of {total} steps completed",
        HUB_PROGRESS_TITLE: "Finish Student Hub orientation!",
        HUB_PROGRESS_TITLE_FINISHED: "You're all set!",
        HUB_STUDY_ROOM_NOTICE_TITLE: "NEW! Hub study rooms",
        HUB_STUDY_ROOM_NOTICE_DESCRIPTION:
          "Everyone stays muted so you can quietly cram for tests together.",
        HUB_STUDY_ROOM_NOTICE_CTA: "Hop into library",
        HUB_STUDY_ROOM_NOTICE_VOICE_CTA: "Study Together",
        HUB_STUDY_ROOM_SUPPRESS_TITLE:
          "In Hubs, everyone is muted by default in Voice Channels",
        HUB_STUDY_ROOM_SUPPRESS_DESCRIPTION:
          "This is a special place where people hang out quietly.",
        HUB_STUDY_ROOM_VOICE_CHANNEL_TOOLTIP: "quiet studying",
        HUB_EVENTS_HEADER_TITLE: "Want to promote events in Hubs?",
        HUB_EVENTS_HEADER_DESCRIPTION:
          'Add your server to the hub, create an event in your server, and select "Share to Student Hubs" in the Event Settings.',
        HUB_EVENTS_FOOTER_TITLE:
          "That’s it for now! But wait, there might be more...",
        HUB_EVENTS_FOOTER_DESCRIPTION: "Refresh to see latest events",
        HUB_EVENTS_FOOTER_BUTTON_TEXT: "Reload Events",
        HUB_EVENTS_SHARE_TITLE: "Share event to Student Hubs",
        HUB_EVENTS_SHARE_DESCRIPTION:
          "This event will be discoverable by people in Student Hubs this server is in.",
        HUB_EVENTS_SHARE_CHANNEL_EVERYONE_VIEWABLE_WARNING:
          "You can only show this event in Student Hubs if it is in a channel that is viewable by @everyone.",
        HUB_EVENTS_GO_TO_GUILD: "Go to Server",
        HUB_EVENTS_JOIN_GUILD: "Join !!{guildName}!!",
        HUB_ONBOARDING_STUDENT_PROMPT_HEADER:
          "Get access to features just for students",
        HUB_ONBOARDING_STUDENT_PROMPT_YES_LABEL: "Yes, I'm a student",
        HUB_ONBOARDING_STUDENT_PROMPT_YES_SUBLABEL: "Give me student features",
        HUB_ONBOARDING_STUDENT_PROMPT_NO_LABEL: "No, I'm not interested",
        HUB_ONBOARDING_VALUE_PROP_HEADER: "Connect with your classmates",
        HUB_ONBOARDING_VALUE_PROP_SUBHEADER:
          "Discover class chats, study groups, clubs, and more in the Student Hub for your school.",
        HUB_ONBOARDING_VALUE_PROP_TITLE_1:
          "Easily find class chats and study groups.",
        HUB_ONBOARDING_VALUE_PROP_TITLE_2: "Meet new students at your school.",
        HUB_ONBOARDING_VALUE_PROP_TITLE_3:
          "Join clubs and communities for your interests.",
        USER_SETTINGS_EMAIL_NOTIFICATIONS: "Email Notifications",
        USER_SETTINGS_EMAIL_NOTIFICATIONS_UNSUB_MARKETING:
          "Unsubscribe from all marketing emails",
        USER_SETTINGS_EMAIL_NOTIFICATIONS_UNSUB_MARKETING_DESCRIPTION:
          "This includes any emails about product updates, new features, tips on using Discord, and recommendations on new servers, events or stage channels.",
        USER_SETTINGS_EMAIL_CATEGORY_COMMUNICATION: "Communication Emails",
        USER_SETTINGS_EMAIL_CATEGORY_COMMUNICATION_SUBLABEL:
          "Receive emails for missed calls, messages, and message digests.",
        USER_SETTINGS_EMAIL_CATEGORY_SOCIAL: "Social Emails",
        USER_SETTINGS_EMAIL_CATEGORY_SOCIAL_SUBLABEL:
          "Receive emails for friend requests, new friend suggestions, and events in your server.",
        USER_SETTINGS_EMAIL_CATEGORY_UPDATES_AND_ANNOUNCEMENTS:
          "Announcements and Update Emails",
        USER_SETTINGS_EMAIL_CATEGORY_UPDATES_AND_ANNOUNCEMENTS_SUBLABEL:
          "Receive emails about product updates, our newest features, improvements and bug fixes.",
        USER_SETTINGS_EMAIL_CATEGORY_TIPS: "Tip Emails",
        USER_SETTINGS_EMAIL_CATEGORY_TIPS_SUBLABEL:
          "Receive emails with helpful advice on how to use Discord and information on lesser known features.",
        USER_SETTINGS_EMAIL_CATEGORY_RECOMMENDATIONS_AND_EVENTS:
          "Recommendations Emails",
        USER_SETTINGS_EMAIL_CATEGORY_RECOMMENDATIONS_AND_EVENTS_SUBLABEL:
          "Receive emails with recommended servers and suggested events such as exciting public stages.",
        EMAIL_CATEGORY_UNSUBSCRIBE_HEADER: "You’re unsubscribed",
        EMAIL_CATEGORY_UNSUBSCRIBE_EMAIL_BODY:
          "You have unsubscribed from: {category}. To change your email notification settings, visit user settings.",
        EMAIL_CATEGORY_MANAGE_SETTING_LABEL: "Manage your user settings.",
        PROMOTIONAL_EMAIL_OPT_IN_CONSENT:
          "(Optional) It’s okay to send me emails with Discord updates, tips, and special offers. You can opt out at any time.",
        PREMIUM_TIER_0_CAROUSEL_EMOJIS:
          "Hype, roast, and meme with custom emoji anywhere.",
        PREMIUM_TIER_0_CAROUSEL_UPLOADS:
          "From clips to pics, share away with bigger file uploads",
        PREMIUM_TIER_0_CAROUSEL_PROFILES:
          "Show up how you want with custom profiles for each of your servers",
        PREMIUM_TIER_0_CAROUSEL_BOOSTS:
          "Unlock perks for your communities with 2 Server Boosts",
        SERVER_HIGHLIGHT_UNSUBSCRIBE_HEADER:
          "You’ve turned off Highlights for this server",
        SERVER_HIGHLIGHT_UNSUBSCRIBE_BODY:
          "Highlights are now off for **!!{guildName}!!**. You can turn them back on via server notification settings.",
        SERVER_HIGHLIGHT_MANAGE_SETTINGS:
          "Manage your notification settings for this server",
        HUB_DIRECTORY_CHANNEL_TITLE: "Student Hub for !!{guildName}!!",
        HUB_DIRECTORY_CHANNEL_EMPTY_TITLE:
          "Welcome to the Student Hub for !!{guildName}!! students",
        HUB_DIRECTORY_CHANNEL_EMPTY_SUBTITLE:
          "You're one of the first people here! Let's start by adding some servers and members.",
        HUB_DIRECTORY_CHANNEL_EMPTY_ADD_SERVER: "Add a server to this Hub",
        HUB_DIRECTORY_CHANNEL_EMPTY_INVITE: "Invite people to this Hub",
        HUB_DIRECTORY_CARD_JOINED_GUILD_BUTTON: "Go to Server",
        HUB_CREATE_OR_ADD_GUILD_TITLE:
          "Help grow the Student Hub for !!{guildName}!!",
        HUB_CREATE_OR_ADD_GUILD_SUBTITLE:
          "You will still be able to invite people from outside the Hub to your server.",
        HUB_CREATE_GUILD_LABEL: "Want to start a new group?",
        HUB_CREATE_GUILD_CTA: "Create New Server",
        HUB_ADD_GUILD_DESCRIPTION_TITLE: "Server Description",
        HUB_ADD_GUILD_DESCRIPTION_HELP:
          "This server description will appear in the Student Hub.",
        HUB_ADD_GUILD_DESCRIPTION_PLACEHOLDER:
          "What's your server about? What do people do there?",
        HUB_ENTRY_REMOVE: "Remove from Hub",
        HUB_ENTRY_UPDATE: "Edit settings",
        HUB_ENTRY_REMOVE_BODY:
          "Are you sure you want to remove !!{guildName}!! from this Student Hub?",
        HUB_CHOOSE_GUILD_TITLE: "Add a server to !!{guildName}!!",
        HUB_CHOOSE_GUILD_SUBTITLE:
          "Your server will be discoverable by people in this Hub. You can add a server if you have Admin permissions for that server.",
        HUB_CHOOSE_GUILD_CHOOSE_TAB: "Servers You Can Add",
        HUB_CHOOSE_GUILD_ADDED_TAB: "Servers You've Added",
        HUB_CHOOSE_GUILD_EMPTY: "You are not an admin of any unlisted servers.",
        HUB_CHOOSE_GUILD_ADDED_EMPTY: "You haven't added any servers yet!",
        HUB_CUSTOMIZE_EXISTING_GUILD_TITLE:
          "Help other students find !!{guildName}!!",
        HUB_CUSTOMIZE_GUILD_TITLE: "One last step!",
        HUB_CUSTOMIZE_GUILD_SUBTITLE:
          "Give your server a description and category to help people find it.",
        HUB_CUSTOMIZE_NEW_GUILD_SUBTITLE:
          "This server description will appear in the Hub. Use it to help students decide whether to join.",
        HUB_ADD_SERVER_CTA: "Add Server",
        HUB_ADD_STUDENT_SERVER_CTA: "Add Student Hub",
        HUB_ADD_OR_CREATE_SERVER_CONFIRMATION_TITLE: "Success!",
        HUB_ADD_SERVER_CONFIRMATION_SUBTITLE:
          "Your server has been added to the !!{guildName}!! Student Hub.",
        HUB_ADD_SERVER_CONFIRMATION_BUTTON: "Got it!",
        HUB_CREATE_SERVER_CONFIRMATION_SUBTITLE:
          "Your server has been created and added to the !!{guildName}!! Student Hub",
        HUB_CREATE_SERVER_CONFIRMATION_STAY: "Back to Hub",
        HUB_CREATE_SERVER_CONFIRMATION_GO: "Go to Server",
        HUB_DIRECTORY_SEARCH_TITLE: "Find your people",
        HUB_DIRECTORY_SEARCH_SUBTITLE:
          "From clubs, to study groups, to game nights, there’s a place for you.",
        DIRECTORY_SEARCH_PLACEHOLDER: "Explore servers",
        DIRECTORY_SEARCH_RESULTS_HEADER:
          '{numResults, plural, =0 {**0** communities} one {**1** community} other {**{numResults}** communities}} for **"{query}"**',
        DIRECTORY_SEARCH_NO_RESULTS_TITLE: "No matches found",
        DIRECTORY_SEARCH_INITIAL_TITLE: "Search for your school",
        DIRECTORY_SEARCH_NO_RESULTS_SUBTITLE:
          "Try another search or $[add a server](addServerHook).",
        HUB_ENTRY_UPDATE_DESCRIPTION_TITLE: "Edit Settings for !!{guildName}!!",
        DIRECTORY_SEARCH_NO_RESULTS_SUBTITLE_MOBILE:
          "Try another search or [add a server](addServerHook).",
        DIRECTORY_SEARCH_NO_RESULTS_NO_ADD: "Try another search",
        HUB_CREATE_TITLE: "Customize Your Server",
        HUB_CREATE_DESCRIPTION:
          "Give your server a personality with a name and icon.",
        GUILD_TEMPLATE_HEADER_CLASS: "Class",
        GUILD_TEMPLATE_HEADER_SOCIAL: "Social",
        GUILD_TEMPLATE_HEADER_MAJOR: "Subject or Major",
        GUILD_TEMPLATE_HEADER_DORM: "Dorm",
        GUILD_TEMPLATE_HEADER_SCHOOL_CLUB: "School Club",
        GUILD_TEMPLATE_NAME_HELP_QUESTIONS: "help-and-questions",
        GUILD_TEMPLATE_NAME_ASSIGNMENTS: "assignments",
        GUILD_TEMPLATE_NAME_DORM_NEWS: "dorm-news",
        GUILD_TEMPLATE_NAME_INTRODUCTIONS: "introductions",
        GUILD_TEMPLATE_NAME_VOICE_MEETING_ROOM_1: "Meeting Room 1",
        GUILD_TEMPLATE_NAME_VOICE_MEETING_ROOM_2: "Meeting Room 2",
        GUILD_TEMPLATE_NAME_VOICE_COUCHES: "Couches",
        GUILD_TEMPLATE_NAME_VOICE_MOVIE_ROOM: "Movie Room",
        GUILD_TEMPLATE_NAME_VOICE_UNNUMBERED_STUDY_ROOM: "Study Room",
        GUILD_TEMPLATE_NAME_CATEGORY_INFO: "Info",
        GUILD_TEMPLATE_NAME_CATEGORY_CHAT: "Chat",
        HUB_ADD_GUILD_CATEGORY_TITLE: "Category",
        HUB_ADD_GUILD_CATEGORY_PLACEHOLDER: "Choose category",
        DIRECTORY_CATEGORY_SCHOOL_CLUB: "Clubs",
        DIRECTORY_CATEGORY_CLASS: "Classes & Subjects",
        DIRECTORY_CATEGORY_STUDY_SOCIAL: "Social & Study",
        DIRECTORY_CATEGORY_SUBJECT_MAJOR: "Majors & Subjects",
        DIRECTORY_CATEGORY_MISCELLANEOUS: "Miscellaneous",
        DIRECTORY_CATEGORY_ALL: "Home",
        DIRECTORY_CATEGORY_RECOMMENDED: "Recommended",
        HUB_PRIVACY_SETTINGS_TOOLTIP:
          "Check your Hub Privacy Settings to choose who can direct message you in the Hub.",
        HUB_PRIVACY_SETTINGS_TOOLTIP_MOBILE:
          "Check your Hub Settings to choose who can direct message you in the Hub.",
        HUB_REAL_NAME_MODAL_HEADER:
          "Welcome to the Student Hub for !!{guildName}!!!",
        HUB_REAL_NAME_MODAL_SUBHEADER:
          "What name would help your classmates recognize you in the Hub? You can change this any time via the Hub Settings.",
        HUB_REAL_NAME_MODAL_FORM_PLACEHOLDER: "Hub's nickname",
        HUB_REAL_NAME_MODAL_FORM_TITLE: "Name you'd like to use in the Hub",
        HUB_REAL_NAME_CTA: "Let's go!",
        WELCOME_CTA_LABEL: "Wave to say hi!",
        LEAVE_HUB_BODY:
          "\n  Are you sure you want to leave **!!{name}!!**?\n    ",
        LEAVE_HUB: "Leave Hub",
        HUB_PRIVACY_SETTINGS: "Hub Privacy Settings",
        HUB_EDIT_PROFILE: "Edit Hub Profile",
        INVITE_BUTTON_TITLE_INVITED_HUB: "You've been invited to join a Hub",
        INVITE_BUTTON_TITLE_INVITER_HUB: "You sent an invite to join a Hub",
        HUB_SIDEBAR_JOIN_SERVERS: "Join Servers",
        HUB_SIDEBAR_ADD_SERVERS: "Add Servers",
        HUB_SIDEBAR_INVITE_MEMBERS: "Invite People",
        EDUCATION_NEW_FEATURE_CONFIRM: "Got it",
        EDUCATION_NEW_FEATURE_TRY_IT: "Try it out",
        EDUCATION_NEW_FEATURE_DISMISS: "Maybe later",
        PREMIUM_DOWNGRADE_WHAT_YOU_LOSE_TITLE:
          "Are you sure you want to downgrade?",
        PREMIUM_DOWNGRADE_WHAT_YOU_LOSE_SUBTITLE:
          "If you switch your {subscriptionName} subscription, **you will lose:**",
        PREMIUM_CANCEL_WHAT_YOU_LOSE_TITLE: "Are you sure you want to cancel?",
        PREMIUM_CANCEL_WHAT_YOU_LOSE_SUBTITLE:
          "If you cancel, **you will lose these perks:**",
        PREMIUM_CANCEL_WHAT_YOU_LOSE_BACK: "Nevermind, keep Nitro",
        PREMIUM_CANCEL_WHAT_YOU_LOSE_BACK_CTA: "Never mind, keep Nitro",
        PREMIUM_CANCEL_DOWNGRADE_TO_TIER_0_HEADER: "Keep some perks for less",
        PREMIUM_CANCEL_DOWNGRADE_TO_TIER_0_BODY:
          "With Nitro Basic, you still get custom emoji, bigger uploads, and [more perks]({helpCenterLink}) for just {monthlyPrice}/month.",
        PREMIUM_CANCEL_DOWNGRADE_TO_TIER_0_CUSTOM_EMOJI_AND_STICKERS:
          "**Custom emoji & stickers** everywhere",
        PREMIUM_CANCEL_DOWNGRADE_TO_TIER_0_BIGGER_FILES:
          "Share bigger files, up to **{tier0MaxFileSize}**",
        PREMIUM_CANCEL_DOWNGRADE_TO_TIER_0_CUSTOM_VIDEO_BACKGROUNDS:
          "Stand out with **custom video backgrounds**",
        PREMIUM_CANCEL_DOWNGRADE_TO_TIER_0_MAIN_CTA: "Get Nitro Basic",
        PREMIUM_CANCEL_DOWNGRADE_TO_TIER_0_MAIN_CTA_V2:
          "Get Nitro Basic and save {percentSavings}%",
        PREMIUM_CANCEL_DOWNGRADE_TO_TIER_0_SECONDARY_CTA:
          "Continue to cancel plan",
        PREMIUM_CANCEL_WHAT_YOU_LOSE_PROFILE:
          "Customizing your profile with an **animated avatar**, **profile banner**, or **profile theme**",
        PREMIUM_CANCEL_WHAT_YOU_LOSE_PROFILE_TIER_1:
          "An **animated avatar** and **exclusive Nitro badge**",
        PREMIUM_CANCEL_WHAT_YOU_LOSE_EMOJI_STICKERS:
          "Access to **custom emoji** and **stickers** across all of your servers",
        PREMIUM_CANCEL_WHAT_YOU_LOSE_EMOJI_STICKERS_TIER_1:
          "Access to **custom emoji** across all of your servers",
        PREMIUM_CANCEL_WHAT_YOU_LOSE_BOOSTS:
          "Your **2 free Boosts** and **30% Boost discount**",
        PREMIUM_CANCEL_WHAT_YOU_LOSE_BOOSTS_TIER_1:
          "Your **30% Boost discount**",
        PREMIUM_CANCEL_WHAT_YOU_LOSE_BOOSTS_APPLIED:
          "{boostCount, plural, =1 {# Boost Applied} other {# Boosts Applied}}",
        PREMIUM_CANCEL_WHAT_YOU_LOSE_SCREENSHARE:
          "Higher **screen share** quality",
        PREMIUM_CANCEL_WHAT_YOU_LOSE_UPLOADS_MESSAGES:
          "Bigger **uploads** and **longer messages**",
        PREMIUM_CANCEL_WHAT_YOU_LOSE_UPLOADS_MESSAGES_TIER_1:
          "Bigger **uploads**",
        PREMIUM_CANCEL_WHAT_YOU_LOSE_SUBTITLE_MOBILE:
          "If you cancel your {subscriptionName} subscription, **you will lose:**",
        PREMIUM_CANCEL_WHAT_YOU_LOSE_SCREENSHARE_TIER_2:
          "Sharing your screen with **higher quality**",
        TEXTAREA_ACTIONS_SUGGESTIONS: "Suggestions",
        TEXTAREA_ACTIONS_SUBMIT_BUTTON: "Send Message Button",
        SUGGEST_SLASH_COMMANDS: "Slash Commands",
        SUGGEST_STICKERS: "Stickers",
        MISSING_PAYMENT_METHOD_BANNER:
          "Your Nitro sub is about to expire. Enter a valid payment method to keep your subscription.",
        INVALID_PAYMENT_METHOD_BANNER:
          "Your payment method failed, update your payment details to continue your Nitro subscription.",
        DUPLICATE_SUBSCRIPTIONS_BANNER:
          "You currently have multiple active Nitro subscriptions. For instructions on how cancel your duplicate subscriptions, please [click here]({helpCenterLink}).",
        BRL_NAME: "Brazilian Real",
        PLN_NAME: "Polish Złoty",
        TRY_NAME: "Turkish Lira",
        USD_NAME: "United States Dollar",
        AUD_NAME: "Australian Dollar",
        PEN_NAME: "Peruvian Sol",
        PHP_NAME: "Philippine Peso",
        ARS_NAME: "Argentine Peso",
        COP_NAME: "Colombian Peso",
        CLR_NAME: "Chilean Peso",
        JPY_NAME: "Japanese Yen",
        IDR_NAME: "Indonesian Rupiah",
        VND_NAME: "Vietnamese Dong",
        THB_NAME: "Thai Baht",
        MYR_NAME: "Malaysian Ringgit",
        KRW_NAME: "South Korean Won",
        MXN_NAME: "Mexican Peso",
        BGN_NAME: "Bulgarian Lev",
        CZK_NAME: "Czech Koruna",
        DKK_NAME: "Danish Krone",
        HUF_NAME: "Hungarian Forint",
        RON_NAME: "Romanian Leu",
        SEK_NAME: "Swedish Krona",
        EUR_NAME: "Euro",
        GET_FREE_TRIAL: "Get {freeTrialText}",
        LOCALIZED_PRICING_ON_CHANGE_PAYMENT_METHOD:
          "Changing your payment method will change your subscription price and currency to {newCurrencyAndPrice}. [Click here]({helpCenterLink}) to learn more about how we determine what you pay.",
        LOCALIZED_PRICING_MOBILE_PRICE_CHANGE_NOTICE_HAS_SUB:
          "As a resident of {country}, you're now paying the discounted price of {newPrice} for Nitro. [Learn More]({helpCenterLink}).",
        LOCALIZED_PRICING_MOBILE_PRICE_CHANGE_NOTICE_NO_SUB:
          "As a resident of {country}, you can now get Nitro for a discounted price of {newPrice}. [Learn More]({helpCenterLink}).",
        LOCALIZED_PRICING_MOBILE_PRICE_CHANGE_NOTICE_HAS_SUB_AU:
          "We lowered Nitro to A$12.99 a month. You get the new price automatically. [Learn More]({helpCenterLink})",
        LOCALIZED_PRICING_MOBILE_PRICE_CHANGE_NOTICE_NO_SUB_AU:
          "We lowered Nitro to A$12.99 a month and now accept AUD. [Learn More]({helpCenterLink})",
        LOCALIZED_PRICING_BANNER_SUB_NOTIF:
          "You get the new price automatically.",
        LOCALIZED_PRICING_BANNER_LINK_ONLY: "[Learn More]({helpCenterLink})",
        LOCALIZED_PRICING_NOTICE:
          "New lower Nitro prices for our friends in {country}.",
        LOCALIZED_PRICING_BANNER_HEADER: "Hey, {country}",
        LOCALIZED_PRICING_BANNER_BODY_EXISTING_CURRENCY:
          "We lowered Nitro to {localizedPriceWithCurrencySymbol} a month. [Learn More]({helpCenterLink})",
        LOCALIZED_PRICING_BANNER_BODY_WITHOUT_PRICE:
          "We lowered the price of Nitro and now accept {currencyISOCode}. [Learn More]({helpCenterLink})",
        LOCALIZED_PRICING_BANNER_BODY_NEW_CURRENCY_WITH_AMBIGUOUS_SYMBOL:
          "We lowered Nitro to {currencyISOCode} {localizedPriceWithCurrencySymbol} a month and now accept {currencyISOCode}. [Learn More]({helpCenterLink})",
        LOCALIZED_PRICING_BANNER_BODY_NEW_CURRENCY:
          "We lowered Nitro to {localizedPriceWithCurrencySymbol} a month and now accept {currencyISOCode}. [Learn More]({helpCenterLink})",
        LOCALIZED_PRICING_BANNER_NO_LOWERED_PRICE:
          "We now accept {currencyISOCode}. [Learn More]({helpCenterLink})",
        LOCALIZED_PRICING_BANNER_NO_LOWERED_PRICE_SINGLE_STRING:
          "Hey, {country}. We now accept {currencyISOCode}. [Learn More]({helpCenterLink})",
        LOCALIZED_PRICING_NOTICE_NO_LOWERED_PRICE:
          "You can now pay for Nitro with {currencyISOCode}.",
        LOCALIZED_PRICING_NOTICE_GENERALIZED_PAYMENT_METHODS_PROMO:
          "We’ve added new ways to pay for Nitro in {country}.",
        LOCALIZED_PRICING_PAYMENT_METHODS_PROMO:
          "We now accept {paymentMethods}. [Learn More]({helpCenterLink})",
        LOCALIZED_PRICING_GENERALIZED_PAYMENT_METHODS_PROMO:
          "We’ve added new ways to pay for Nitro in {country}. [Learn More]({helpCenterLink})",
        LOCALIZED_PRICING_MORE_NEW_WAYS_TO_PAY: "more new ways to pay",
        LOCALIZED_PRICING_HRK_EURO_WARNING:
          "Kuna price = {kunaPriceWithCurrency} (conversion rate: 1 EUR = 7.53450 HRK)",
        LOCALIZED_PRICING_PLN_LEGACY_PRICING_WARNING:
          "Polish users who subscribed before 2022-12-14 will **lose their existing pricing** if plan changes are made. [Learn More]({helpCenterLink})",
        LOCALIZED_PRICING_PLN_LEGACY_PRICING_WARNING_NO_HELP_CENTER_LINK:
          "Polish users who subscribed before 2022-12-14 will **lose their existing pricing**",
        LOCALIZED_PRICING_PLN_LEGACY_PRICING_BOOST_WARNING:
          "Boosts purchased before 2022-12-14 will lose their existing pricing if canceled for Polish users. [Learn More]({helpCenterLink})",
        LOCALIZED_PRICING_TRY_LEGACY_PRICING_WARNING:
          "Turkish users who subscribed before 2023-06-07 will **lose their existing pricing** if plan changes are made. [Learn More]({helpCenterLink})",
        LOCALIZED_PRICING_TRY_LEGACY_PRICING_WARNING_NO_HELP_CENTER_LINK:
          "Turkish users who subscribed before 2023-06-07 will **lose their existing pricing**",
        LOCALIZED_PRICING_TRY_LEGACY_PRICING_BOOST_WARNING:
          "Boosts purchased before 2023-06-07 will lose their existing pricing if canceled for Turkish users. [Learn More]({helpCenterLink})",
        LOCALIZED_PRICING_LEGACY_PRICING_WARNING:
          "Your subscription will **lose its existing pricing** if any plan changes are made. [Learn More]({helpCenterLink})",
        LOCALIZED_PRICING_LEGACY_PRICING_WARNING_NO_HELP_CENTER_LINK:
          "Your subscription will **lose its existing pricing** if any plan changes are made.",
        LOCALIZED_PRICING_LEGACY_PRICING_BOOST_WARNING:
          "Your Boost subscription will **lose its existing pricing** if any plan changes are made. [Learn More]({helpCenterLink})",
        PREMIUM_SUBSCRIPTION_ENDING_NOTICE_TEXT:
          "You’ll lose access to profile customization, bigger file uploads, better screen share, and more {daysLeft, plural, =0 {today} =1 {in # day} other {in # days}}.",
        PREMIUM_SUBSCRIPTION_ENDING_NOTICE_BUTTON_TEXT: "Learn More",
        PREMIUM_SUBSCRIPTION_ENDING_TIER_1_NOTICE_TEXT:
          "Your Nitro Classic access ends {daysLeft, plural, =0 {today} =1 {in # day} other {in # days}}. Renew now to keep custom emoji, bigger uploads, and more.",
        PREMIUM_SUBSCRIPTION_ENDING_TIER_0_NOTICE_TEXT:
          "Your Nitro Basic access ends {daysLeft, plural, =0 {today} =1 {in # day} other {in # days}}. Renew now to keep custom emoji and more.",
        PREMIUM_SUBSCRIPTION_ENDING_TIER_1_NOTICE_BUTTON_TEXT: "Manage Plan",
        PREMIUM_SUBSCRIPTION_ENDING_TIER_0_NOTICE_BUTTON_TEXT: "Manage Plan",
        PREMIUM_SUBSCRIPTION_ENDING_WHAT_YOU_LOSE_TITLE:
          "Your Nitro access ends {daysLeft, plural, =0 {today} =1 {in # day} other {in # days}}.",
        PREMIUM_SUBSCRIPTION_ENDING_WHAT_YOU_LOSE_SUBTITLE:
          "If you don’t keep Nitro, **you will lose:**",
        PREMIUM_SUBSCRIPTION_ENDING_WHAT_YOU_LOSE_FOOTER_MONTHLY:
          "If you reinstate Nitro, we’ll resume charging your payment method **{price}** and continue to charge you **monthly** until you cancel the subscription. You can cancel any time from your Settings page.",
        PREMIUM_SUBSCRIPTION_ENDING_WHAT_YOU_LOSE_FOOTER_MULTI_MONTH:
          "If you reinstate Nitro, we’ll resume charging your payment method **{price}** and continue to charge you **every {intervalCount} months** until you cancel the subscription. You can cancel any time from your Settings page.",
        PREMIUM_SUBSCRIPTION_ENDING_WHAT_YOU_LOSE_FOOTER_YEARLY:
          "If you reinstate Nitro, we’ll resume charging your payment method **{price}** and continue to charge you **yearly** until you cancel the subscription. You can cancel any time from your Settings page.",
        PREMIUM_SUBSCRIPTION_ENDING_WHAT_YOU_LOSE_TITLE_TIER_1:
          "Your Nitro Classic access ends {daysLeft, plural, =0 {today} =1 {in # day} other {in # days}}.",
        PREMIUM_SUBSCRIPTION_ENDING_WHAT_YOU_LOSE_SUBTITLE_TIER_1:
          "If you don’t keep Nitro Classic, **you will lose:**",
        PREMIUM_SUBSCRIPTION_ENDING_WHAT_YOU_LOSE_FOOTER_MONTHLY_TIER_1:
          "If you reinstate Nitro Classic, we’ll resume charging your payment method **{price}** and continue to charge you **monthly** until you cancel the subscription. You can cancel any time from your Settings page.",
        PREMIUM_SUBSCRIPTION_ENDING_WHAT_YOU_LOSE_FOOTER_YEARLY_TIER_1:
          "If you reinstate Nitro Classic, we’ll resume charging your payment method **{price}** and continue to charge you **yearly** until you cancel the subscription. You can cancel any time from your Settings page.",
        PREMIUM_SUBSCRIPTION_ENDING_WHAT_YOU_LOSE_FOOTER_BUTTON_KEEP_NITRO:
          "Keep Nitro",
        PREMIUM_SUBSCRIPTION_ENDING_WHAT_YOU_LOSE_FOOTER_BUTTON_CANCEL:
          "Dismiss",
        PREMIUM_SUBSCRIPTION_ENDING_MISSING_PAYMENT_NOTICE_TEXT:
          "Your Nitro subscription ends {daysLeft, plural, =0 {today} =1 {in # day} other {in # days}}. Add a payment method to keep using profile customization and more.",
        PREMIUM_SUBSCRIPTION_ENDING_MISSING_PAYMENT_NOTICE_BUTTON_TEXT:
          "Add Payment",
        PREMIUM_SUBSCRIPTION_ENDING_MISSING_PAYMENT_TIER_1_NOTICE_TEXT:
          "Your Nitro Classic sub ends {daysLeft, plural, =0 {today} =1 {in # day} other {in # days}}. Add a payment method to keep using custom emoji and more.",
        PREMIUM_SUBSCRIPTION_ENDING_MISSING_PAYMENT_TIER_1_NOTICE_BUTTON_TEXT:
          "Add Payment",
        PREMIUM_SUBSCRIPTION_ENDING_MISSING_PAYMENT_TIER_0_NOTICE_TEXT:
          "Your Nitro Basic sub ends {daysLeft, plural, =0 {today} =1 {in # day} other {in # days}}. Add a payment method to keep using custom emoji and more.",
        PREMIUM_SUBSCRIPTION_ENDING_MISSING_PAYMENT_TIER_0_NOTICE_BUTTON_TEXT:
          "Add Payment",
        PREMIUM_SUBSCRIPTION_PAST_DUE_INVALID_PAYMENT_NOTICE_TEXT:
          "Your Nitro subscription payment failed, please update your payment details.",
        PREMIUM_SUBSCRIPTION_PAST_DUE_INVALID_PAYMENT_NOTICE_BUTTON_TEXT:
          "Update Now",
        PREMIUM_SUBSCRIPTION_PAST_DUE_MISSING_PAYMENT_NOTICE_TEXT:
          "Your Nitro sub is about to run out. Add a payment method to keep using profile customization and more.",
        PREMIUM_SUBSCRIPTION_PAST_DUE_MISSING_PAYMENT_NOTICE_BUTTON_TEXT:
          "Add Payment",
        PREMIUM_SUBSCRIPTION_ONE_TIME_PAYMENT_PAST_DUE_SUBSCRIPTION_TEXT:
          "Your Nitro subscription expired {daysPastDue, plural, =0 {today} =1 {# day ago} other {# days ago}}. [Purchase again.](paymentModalRedirect)",
        PREMIUM_SUBSCRIPTION_ONE_TIME_PAYMENT_PAST_DUE_SUBSCRIPTION_TEXT_NO_ACTION:
          "Your Nitro subscription expired {daysPastDue, plural, =0 {today} =1 {# day ago} other {# days ago}}.",
        PREMIUM_SUBSCRIPTION_PAST_DUE_RENEW_NOW_BUTTON_TEXT: "Renew Now",
        PREMIUM_MARKETING_HERO_HEADER_TITLE: "Unleash More Fun with Nitro",
        PREMIUM_MARKETING_HERO_HEADER_DESCRIPTION:
          "Plans start at only {cheapestMonthlyPrice}/month. Cancel anytime",
        PREMIUM_MARKETING_TIER_2_CTA_COPY:
          "Get access to all the Nitro perks, including HD video, 2 Server Boosts, and more.",
        PREMIUM_MARKETING_TIER_0_CTA_COPY_V2:
          "Get access to custom emoji & stickers, {uploadSize} uploads, and more.",
        PREMIUM_MARKETING_TIER_2_FEATURE_GRID_HEADING: "Nitro includes:",
        PREMIUM_MARKETING_TIER_0_FEATURE_GRID_HEADING: "Nitro Basic includes:",
        PREMIUM_MARKETING_FOOTER_CTAS_HEADING: "Unleash the fun with Nitro!",
        PREMIUM_MARKETING_PERK_GRID_ITEM_HEADING_PREMIUM_SUBSCRIPTION_BADGE:
          "Subscriber Badge",
        PREMIUM_TIER_0_MOBILE_MARKETING_HEADER: "Unleash more fun on Discord",
        PREMIUM_TIER_0_MOBILE_MARKETING_FOOTER: "Unleash the fun with Nitro!",
        PREMIUM_TIER_0_FEATURE_UPLOADS: "{uploadSize} uploads",
        PREMIUM_TIER_0_FEATURE_EMOJIS: "Custom emoji anywhere",
        PREMIUM_TIER_0_FEATURE_BADGE: "Special Nitro badge on your profile",
        PREMIUM_TIER_0_FEATURE_AVATAR: "Animated avatar",
        PREMIUM_TIER_2_FEATURE_REMIXING: "Remix any media with Early Access",
        PREMIUM_TIER_2_FEATURE_STREAMING: "HD video streaming",
        PREMIUM_TIER_2_FEATURE_BOOSTS: "{numBoosts} Server Boosts",
        PREMIUM_TIER_2_FEATURE_MORE: "Custom profiles and more!",
        AFFINITIES_MARKETING_HEADER_3:
          "{username} and other friends have more fun with Nitro",
        AFFINITIES_MARKETING_HEADER_2:
          "{username} and {otherUsername} have more fun with Nitro",
        AFFINITIES_MARKETING_HEADER_1: "{username} has more fun with Nitro",
        PICK_YOUR_PLAN: "Pick Your Plan",
        AND_MORE: "And more!",
        PREMIUM_TIER_0_MARKETING_COMPARISON_TABLE_ROW_LABEL_MONTHLY_PRICE:
          "Monthly Price",
        PREMIUM_TIER_0_MARKETING_COMPARISON_TABLE_ROW_LABEL_EMOJI_STICKER:
          "Custom emoji and stickers anywhere",
        PREMIUM_TIER_0_MARKETING_COMPARISON_TABLE_ROW_LABEL_BADGE:
          "Nitro profile badge",
        PREMIUM_TIER_0_MARKETING_COMPARISON_TABLE_ROW_LABEL_AVATAR_PROFILE:
          "Animated avatar and custom profiles",
        PREMIUM_TIER_0_MARKETING_COMPARISON_TABLE_ROW_LABEL_PROFILE:
          "Profile banner and custom tag",
        PREMIUM_MOBILE_MARKETING_COMPARISON_TABLE_ACCESSIBILITY:
          "Plan comparison table",
        PREMIUM_MOBILE_MARKETING_ACCESSIBILITY_TIER_0:
          "Nitro Basic: {accessibilityLabel}",
        PREMIUM_MOBILE_MARKETING_ACCESSIBILITY_TIER_2:
          "Nitro: {accessibilityLabel}",
        PREMIUM_TIER_0_MOBILE_ACTION_SHEET_HEADER:
          "Nitro now starts at {monthlyPrice}/month",
        PREMIUM_TIER_0_MOBILE_ACTION_SHEET_HEADER_V2:
          "Nitro now starts at $[!!{monthlyPrice}!!/month](monthlyPriceHook)",
        PREMIUM_TIER_0_MOBILE_ACTION_SHEET_CTA: "Check it out",
        PREMIUM_TIER_0_FEATURE_UPLOADS_LONGER: "Bigger file uploads",
        PREMIUM_TIER_0_FEATURE_BADGE_LONGER:
          "Special Nitro profile badge, and more!",
        PREMIUM_SUBSCRIPTION_BUTTON_DISABLED_MANAGE_PLAN_TOOLTIP:
          "To manage your Nitro subscription, go to the Subscriptions page in User Settings.",
        GENERIC_CAPTCHA_HEADER: "Wait! Are you human?",
        GENERIC_CAPTCHA_DESCRIPTION: "Please confirm you’re not a robot.",
        PREMIUM_SUBSCRIPTION_REACTIVATION_NOTICE_TEXT:
          "Your Nitro subscription has ended. Reactivate to regain access to larger file uploads and more.",
        PREMIUM_SUBSCRIPTION_REACTIVATION_NOTICE_BUTTON_TEXT: "Manage Plan",
        PREMIUM_PREVIEW: "**This is a Nitro Preview**",
        PREMIUM_PREVIEW_GET_NITRO: "**Get Nitro!**",
        PREMIUM_PREVIEW_EXIT: "Exit Preview",
        PREMIUM_PREVIEW_JOIN_AVATAR:
          "This is looking great! Join Nitro now to show off your fancy new avatar!",
        PREMIUM_PREVIEW_JOIN_BANNER:
          "This is looking great! Join Nitro now to show off your fancy new banner!",
        PREMIUM_PREVIEW_JOIN_NITRO: "Join Nitro",
        PREMIUM_GUILD_PREVIEW: "This is a Boosting preview",
        PREMIUM_GUILD_BOOST_SERVER: "Boost Server",
        PREMIUM_GUILD_BOOST_THIS_SERVER: "Boost this server",
        SELECT_IMAGE_TRY_ANIMATED_AVATAR: "Try animated avatar",
        SELECT_IMAGE_MODAL_TITLE: "Select an Image",
        SELECT_IMAGE_MODAL_UPLOAD_FILE: "Upload File",
        SELECT_IMAGE_MODAL_CHOOSE_GIF: "Choose GIF",
        SELECT_IMAGE_MODAL_UPLOAD_IMAGE_OR_VIDEO: "Upload Image or Video",
        USER_SETTINGS_CHOOSE_FROM_LIBRARY:
          "**NEW!** Choose a GIF from our library for your avatar.",
        USER_SETTINGS_ANIMATED_AVATAR_UPSELL: "Get Animated Avatars",
        USER_SETTINGS_ANIMATED_AVATAR_UPSELL_DESCRIPTION:
          "Upload GIFs to animate your avatars! Only with Nitro.",
        USER_SETTINGS_TRY_IT_OUT: "Try it out!",
        USER_SETTINGS_WITH_IMAGE_DESCRIPTIONS: "With image descriptions",
        DONT_ASK_AGAIN: "Don't ask again",
        VOICE_CHANNEL_CHANGE_CONFIRMATION_BODY:
          "Looks like you're in another voice channel. Are you sure you want to switch to **!!{channel}!!**?",
        VOICE_CHANNEL_CHANGE_CONFIRMATION_HEADER: "You sure?",
        HIDE_SELF_STREAM_CONFIRMATION_BODY:
          'Unchecking "Show My Screen Share" doesn’t end your stream, it just hides it from your own personal view. Others in this voice channel will still see your stream. If that’s what you wanted, confirm below.',
        HIDE_SELF_STREAM_CONFIRMATION_HEADER: "Are you sure?",
        HIDE_SELF_VIDEO_CONFIRMATION_BODY:
          'Unchecking "Show My Camera" doesn’t end your video, it just hides it from your own personal view. Others in this voice channel will still see your camera. If that’s what you wanted, confirm below.',
        HIDE_SELF_VIDEO_CONFIRMATION_HEADER: "Are you sure?",
        ATTACHMENT_UTILITIES: "Upload Attachment Utilities",
        ATTACHMENT_UTILITIES_SPOILER: "Spoiler Attachment",
        ATTACHMENT_UTILITIES_MODIFY: "Modify Attachment",
        ATTACHMENT_UTILITIES_REMOVE: "Remove Attachment",
        ATTACHMENT_MODAL_SAVE: "Save",
        ATTACHMENT_MODAL_IMAGE_DESCRIPTION_LABEL: "Description (ALT Text)",
        ATTACHMENT_MODAL_IMAGE_DESCRIPTION_PLACEHOLDER: "Add a description",
        ATTACHMENT_TOO_MANY_ERROR_TITLE: "Too many uploads!",
        ATTACHMENT_TOO_MANY_ERROR_MESSAGE:
          "You can only upload !!{limit}!! files at a time!",
        FILE_PICKER_ERROR_TITLE: "Issue selecting files",
        FILE_PICKER_ERROR_DESCRIPTION:
          "Something went wrong getting your file. Please try again.",
        UNKNOWN_CHANNEL_UPDATE_DISCORD:
          "Please update Discord to access this channel",
        AUDIT_LOG: "Audit Log",
        ALL_CHANNELS: "all channels",
        CLEAR: "Clear",
        FORM_LENGTH_ERROR:
          "Must be between !!{min, number}!! and !!{max, number}!! in length.",
        INTERACTION_FORM_SUBMISSION_APPLICATION:
          "This form will be submitted to **!!{applicationName}!!**. Do not share passwords or other sensitive information.",
        INTERACTION_FORM_SUBMISSION_FAILED: "Something went wrong. Try again.",
        OTHER_HIGH_PRIORITY: "Other (High Priority)",
        MOBILE_WEB_HANDOFF_EXPLANATION_TEXT_LINE_1:
          "Already logged into the Discord app?",
        MOBILE_WEB_HANDOFF_EXPLANATION_TEXT_LINE_2:
          "Sign in with a single tap.",
        MOBILE_WEB_HANDOFF_ERROR_TRY_AGAIN:
          "Your login session has expired. Check your internet connection and try again.",
        MOBILE_WEB_HANDOFF_ERROR_NO_TRY_AGAIN:
          "Unable to retrieve login information.",
        MOBILE_WEB_HANDOFF_BUTTON_TEXT: "Open App",
        MOBILE_WEB_GET_APP_UPSELL: "Get the Discord App",
        MOBILE_WEB_GET_APP_UPSELL_HALFSHEET_HEADER: "Get the Discord app",
        MOBILE_WEB_GET_APP_UPSELL_HALFSHEET_SUBHEADER:
          "More features, better performance, and easy access to all your conversations.",
        MOBILE_WEB_GET_APP_UPSELL_HALFSHEET_BUTTON_TEXT: "Get the App",
        GUILD_DISCOVERY_RECOMMENDATIONS_TITLE:
          "!!{username}!!, you might like these servers",
        PREMIUM_5TH_ANNIVERSARY_TITLE: "Nitro is turning 5!",
        PREMIUM_5TH_ANNIVERSARY_BODY:
          "They grow up so fast :') and we couldn't have done it without subscribers like you. Watch out for more Nitro goodies this year, and thanks for being awesome.",
        GUILD_HOME: "Home",
        GUILD_HOME_HTML_TITLE: "Home - !!{guildName}!!",
        GUILD_HOME_TITLE: "You found a new feature!",
        GUILD_FEED_MOBILE_CHANNEL_UPSELL_TITLE: "View the channel list",
        GUILD_FEED_MOBILE_CHANNEL_UPSELL_DESCRIPTION:
          "See where these conversations come from",
        GUILD_FEED_WELCOME_HEADER_SHOW_MORE: "Show more ({count})",
        GUILD_FEED_WELCOME_HEADER_SHOW_LESS: "Show less",
        GUILD_HOME_ABOUT: "About",
        GUILD_HOME_SIDEBAR_A11Y_LABEL: "Home Sidebar",
        GUILD_HOME_DESCRIPTION:
          "This is a new surface we're beta testing to help you keep up with what's happening in your server.",
        GUILD_FEED_TITLE: "Your Highlights",
        GUILD_FEED_FOOTER_TITLE: "That's it for now!",
        GUILD_FEED_FOOTER_SUBTITLE:
          "If you really really want to, reload to see if anything's new",
        GUILD_FEED_MUTED_CHANNELS_SUBTITLE:
          "We're not showing content from $[{numMutedChannels, plural, one {# muted channel} other {# muted channels}}](mutedChannelsHook).",
        GUILD_FEED_EMPTY_TITLE: "There are no Highlights to show you yet!",
        GUILD_FEED_EMPTY_SUBTITLE: "But you could write some!",
        GUILD_FEED_ERROR_TITLE: "Oops! You've caught an ultra-rare error.",
        GUILD_FEED_ERROR_SUBTITLE:
          "Please reload the page or check our [status page]({url}).",
        GUILD_FEED_RELOAD: "Reload",
        GUILD_FEED_MESSAGE_ITEM_A11Y_LABEL:
          "Open message from !!{channelName}!! in sidebar",
        GUILD_FEED_MESSAGE_ITEM_NUM_REPLIES:
          "{numReplies, plural, =1 {# reply} other {# replies}}",
        GUILD_FEED_MESSAGE_ITEM_VIEW_MORE_REPLIES:
          "View {numReplies, plural, =1 {# more reply} other {# more replies}}",
        GUILD_FEED_MESSAGE_ITEM_MAX_REPLIES: "{maxReplies}+ replies",
        GUILD_FEED_UNREAD_DIVIDER_TITLE: "You're all caught up",
        GUILD_FEED_UNREAD_DIVIDER_SUBTITLE:
          "You've seen all highlights from the past 2 weeks",
        GUILD_FEED_FEATURE_ITEM_24_HOURS: "24 Hours",
        GUILD_FEED_FEATURE_ITEM_THREE_DAYS: "3 Days",
        GUILD_FEED_FEATURE_ITEM_SEVEN_DAYS: "7 Days",
        GUILD_FEED_FEATURE_ITEM_MENU_ITEM_TEXT: "For {timePeriod}",
        GUILD_FEED_FEATURED_ITEMS_NO_ITEMS:
          "There are no featured items right now",
        GUILD_FEED_FEATURED_ITEMS: "Featured Items",
        GUILD_FEED_UNFEATURE_BUTTON_TEXT: "Unfeature",
        GUILD_FEED_FEATURE_BUTTON_TEXT: "Feature",
        GUILD_FEED_FEATURED_BUTTON_TEXT: "Featured",
        GUILD_FEED_FEATURED_BY_MODERATORS: "Featured by moderators",
        GUILD_FEED_FEATURED_BY: "Featured by",
        GUILD_FEED_FEATURE_MESSAGE: "Feature Message",
        GUILD_FEED_FEATURED_MESSAGES: "Featured Items",
        GUILD_FEED_UNFEATURED_MESSAGE_MODAL_HEADER:
          "Unfeature this message from home?",
        GUILD_FEED_UNFEATURED_MESSAGE_MODAL_BODY:
          "If you unfeature this message it may no longer show up at the top of home for all of the server's members.",
        GUILD_FEED_UNFEATURE_MESSAGE: "Unfeature Message",
        GUILD_FEED_FEATURED_MESSAGE_MODAL_HEADER:
          "Feature this message in home?",
        GUILD_FEED_FEATURE_MESSAGE_MODAL_BODY:
          "This message will appear in this server's home for {timePeriod} for all members who haven't seen it yet.",
        GUILD_FEED_FEATURE_FORUM_POST: "Feature Post",
        GUILD_FEED_UNFEATURE_FORUM_POST: "Unfeature Post",
        GUILD_FEED_UNFEATURE_FORUM_POST_MODAL_HEADER:
          "Unfeature this post from home?",
        GUILD_FEED_UNFEATURED_FORUM_POST_MODAL_BODY:
          "If you unfeature this post it may no longer show up at the top of home for all of the server's members.",
        GUILD_FEED_FEATURED_FORUM_POST_MODAL_HEADER:
          "Feature this post in home?",
        GUILD_FEED_FEATURE_FORUM_POST_MODAL_BODY:
          "\"**!!{threadName}!!**\" will appear on this server's home for {timePeriod} for all members who haven't seen it yet.",
        GUILD_FEED_FEATURED_EMPTY: "There are no featured messages right now",
        GUILD_FEED_FEATURED_EXPIRED_IN: "Expires {fromNow}",
        GUILD_FEED_VIEW_AS_ROLE_WARNING:
          "Your Highlights does not currently support View as Role. A member will only see content from channels that they have permission to view.",
        GUILD_HOME_HEADER_A11Y_LABEL: "Background image header for Home",
        GUILD_FEED_SPECIAL_HIGHLIGHT: "Just for you",
        GUILD_FEED_HIDE_MESSAGE_ITEM: "Not Interested",
        GUILD_FEED_HIDDEN_MESSAGE_ITEM: "This message has been removed",
        GUILD_FEED_HIDDEN_MESSAGE_FEEDBACK_NO_LIKE: "I don't like it",
        GUILD_FEED_HIDDEN_MESSAGE_FEEDBACK_SHOW_LESS_CHANNEL:
          "Show less from $[**!!{channelName}!!**](channelNameHook)",
        GUILD_FEED_HIDDEN_MESSAGE_FEEDBACK_SHOW_LESS_USER:
          "Show less from $[**!!{username}!!**](usernameHook)",
        MOBILE_GUILD_FEED_HIDDEN_MESSAGE_FEEDBACK_SHOW_LESS_CHANNEL:
          "Show less from **!!{channelName}!!**",
        MOBILE_GUILD_FEED_HIDDEN_MESSAGE_FEEDBACK_SHOW_LESS_USER:
          "Show less from **!!{username}!!**",
        GUILD_FEED_HIDDEN_MESSAGE_ITEM_FEEDBACK_RECEIVED_TITLE: "Thanks!",
        GUILD_FEED_HIDDEN_MESSAGE_ITEM_FEEDBACK_RECEIVED_SUBTITLE:
          "We'll get to work improving your feed.",
        GUILD_FEED_REMOVE_MESSAGE_ITEM: "Remove for Everyone",
        GUILD_FEED_REMOVE_MESSAGE_ITEM_HEADER: "Remove for everyone?",
        GUILD_FEED_REMOVE_MESSAGE_ITEM_CONFIRM_TEXT:
          "Members won't see it in Home anymore, but it'll still appear in the original channel.",
        GUILD_FEED_REMOVE_CONFIRM: "Remove",
        GUILD_FEED_REMOVED_MESSAGE: "This message was removed.",
        GUILD_HOME_CHANNEL_SETTINGS_SUBTITLE:
          "Customize how this channel appears in Home. Only members who can view this channel will see content from this channel in Home. [Learn more about the Home beta.]({helpCenterLink})",
        GUILD_FEED_DEMOTE_CHANNEL: "Deprioritize Channel in Highlights",
        GUILD_FEED_DEMOTE_CHANNEL_DESCRIPTION:
          "Content in this channel may be ranked lower than it otherwise would be, appear less frequently, or not appear at all. $[This setting is being tested and could be changed or removed.](warningHook)",
        ACTIVE_CHANNELS_SHOW_CHANNEL: "Show Channel in Active Now",
        ACTIVE_CHANNELS_SHOW_CHANNEL_DESCRIPTION:
          "This channel will appear in a member's Active Now section of Home.",
        GUILD_FEED_NUX_MEMBER_TITLE: "Keep up with top moments!",
        GUILD_FEED_NUX_MEMBER_BODY_1:
          "This community has been selected to test Home, a new feature.",
        GUILD_FEED_NUX_MEMBER_BODY_2:
          "Home can help you find cool moments in this community based on member engagement and moderator curation.",
        GUILD_FEED_NUX_MEMBER_BODY_3: "Learn More",
        GUILD_FEED_NUX_MODERATOR_TITLE: "Help your members keep up!",
        GUILD_FEED_NUX_MODERATOR_CTA: "Learn How to Curate",
        GUILD_FEED_NUX_MOBILE_TITLE: "Introducing Home!",
        GUILD_FEED_NUX_MOBILE_MODERATOR_SUBTITLE:
          "Welcome to a new way to help your members keep up with updates, highlights and cool moments in this community.",
        GUILD_FEED_NUX_MOBILE_MEMBER_SUBTITLE:
          "Welcome to a new place for updates and highlights, helping you find cool moments across this community.",
        GUILD_FEED_NUX_CURATION_TITLE: "Curating Content on Home",
        GUILD_FEED_NUX_CURATION_SUBTITLE:
          "With the Manage Messages permission, you can curate the experience on Home for your members in 3 ways.",
        GUILD_FEED_NUX_CURATION_FEATURE_TITLE: "Feature Messages",
        GUILD_FEED_NUX_CURATION_FEATURE_SUBTITLE:
          "Want to highlight cool moments or important messages? Feature a message at the top of Home temporarily.",
        GUILD_FEED_NUX_CURATION_BLOCK_TITLE: "Deprioritize Channels",
        GUILD_FEED_NUX_CURATION_BLOCK_SUBTITLE:
          "Have a spammy channel? You can depriortize a channel from populating Home in that channel's settings.",
        GUILD_FEED_NUX_CURATION_REMOVE_TITLE: "Remove Messages",
        GUILD_FEED_NUX_CURATION_REMOVE_SUBTITLE:
          "See something sensitive? You can remove any message from Home without deleting the message.",
        GUILD_FEED_TRUNCATED_MESSAGE_SEE_MORE: "See more",
        GUILD_FEED_TRUNCATED_REPLIES_VIEW_MORE:
          "View {count, plural, one {1 more reply} other {{count} more replies}}",
        GUILD_FEED_FEEDBACK_SECTION_1_TITLE: "How would you rate this content?",
        GUILD_FEED_FEEDBACK_SECTION_1_SUBTITLE: "Help us improve Discord",
        GUILD_FEED_FEEDBACK_SECTION_2_TITLE: "Why is it {rating} content?",
        GUILD_FEED_FEEDBACK_RATING_TERRIBLE: "Terrible",
        GUILD_FEED_FEEDBACK_RATING_BAD: "Bad",
        GUILD_FEED_FEEDBACK_RATING_OKAY: "Okay",
        GUILD_FEED_FEEDBACK_RATING_GOOD: "Good",
        GUILD_FEED_FEEDBACK_RATING_EXCELLENT: "Excellent",
        GUILD_FEED_FEEDBACK_OPTION_ALREADY_SAW: "Already saw",
        GUILD_FEED_FEEDBACK_OPTION_IRRELEVANT: "Irrelevant",
        GUILD_FEED_FEEDBACK_OPTION_TOO_OLD: "Too old",
        GUILD_FEED_FEEDBACK_OPTION_CONFUSING: "Confusing or random",
        GUILD_FEED_FEEDBACK_OPTION_INAPPROPRIATE: "Inappropriate",
        GUILD_FEED_FEEDBACK_OPTION_UNINTERESTING: "Uninteresting",
        GUILD_FEED_FEEDBACK_OPTION_ENTERTAINING: "Entertaining",
        GUILD_FEED_FEEDBACK_OPTION_INFORMATIVE: "Informative",
        GUILD_FEED_FEEDBACK_OPTION_USEFUL: "Useful",
        GUILD_FEED_FEEDBACK_OPTION_FUNNY: "Funny",
        GUILD_FEED_FEEDBACK_OTHER_REASON: "Other",
        GUILD_FEED_FEEDBACK_OTHER_PLACEHOLDER: "Share your reason here.",
        GUILD_FEED_FEEDBACK_SECTION_3_TITLE: "Thank you for your feedback!",
        GUILD_HOME_DEPRECATION_TITLE: "Server Home is going away soon",
        GUILD_HOME_DEPRECATION_DESCRIPTION:
          "After today, we'll start phasing out Server Home for this community. Thanks for participating and sharing your feedback during the beta. Stay tuned for exciting new things to try out soon!",
        ACTIVE_CHANNELS_COLLAPSED_SPACER_TITLE: "See what's up!",
        ACTIVE_CHANNELS_COLLAPSED_SPACER_SUBTITLE:
          "Hop in a channel and start talking.",
        ACTIVE_CHANNELS_HEADER: "Active Now",
        ACTIVE_CHANNELS_FEW_MESSAGES:
          "{count, plural, one {1 recent message} other {{count} recent messages}}",
        ACTIVE_CHANNELS_MANY_MESSAGES: "Many recent messages",
        ACTIVE_VOICE_PARTICIPANTS:
          "{count, plural, one {1 participant} other {{count} participants}}",
        ACTIVE_CHANNELS_EMPTY_TITLE: "All channels are chilling",
        ACTIVE_CHANNELS_EMPTY_SUBTITLE: "Check back in a bit",
        GUILD_SETTINGS_AUDIT_LOG_ACTIVE_CHANNELS_REMOVE_CHANNEL:
          "Removed channel from Active Now",
        GUILD_SETTINGS_AUDIT_LOG_ACTIVE_CHANNELS_UNREMOVE_CHANNEL:
          "Added channel back to Active Now",
        GUILD_HOME_SEE_ALL: "See all ({count})",
        GUILD_HOME_SEE_LESS: "See less",
        GUILD_HOME_EVENTS_TITLE: "Upcoming",
        GUILD_HOME_EVENTS_TOOLTIP_TEXT: "Event",
        MOBILE_GUILD_HOME_EVENTS_UPCOMING_TITLE: "Upcoming Event",
        MOBILE_GUILD_HOME_EVENTS_NEW_TITLE: "New Event",
        GUILD_HOME_FEEDBACK_MENU_ITEM_LABEL: "Give feedback",
        GUILD_HOME_CHANNEL_REMOVE_FEEDBACK_TITLE: "Can you tell us more?",
        GUILD_HOME_CHANNEL_REMOVE_FEEDBACK_SUBTITLE:
          "This will help us improve. Why are you removing this channel from Highlights?",
        GUILD_HOME_CHANNEL_REMOVE_FEEDBACK_OPTION_BOTS:
          "This channel is for logs or bot-spam",
        GUILD_HOME_CHANNEL_REMOVE_FEEDBACK_OPTION_NO_GO:
          "I don't want members to come to this channel",
        GUILD_HOME_CHANNEL_REMOVE_FEEDBACK_OPTION_TOO_MUCH:
          "This channel is overwhelming Highlights",
        GUILD_HOME_CHANNEL_REMOVE_FEEDBACK_OPTION_SENSITIVE:
          "This channel has sensitive content",
        GUILD_HOME_CHANNEL_REMOVE_FEEDBACK_OPTION_OTHER: "Other",
        GUILD_HOME_CHANNEL_REMOVE_FEEDBACK_MOBILE_TITLE:
          "Why are you removing this channel?",
        GUILD_HOME_CHANNEL_REMOVE_FEEDBACK_MOBILE_OTHER_TITLE: "Your reason",
        GUILD_HOME_CHANNEL_REMOVE_FEEDBACK_MOBILE_OTHER_DESCRIPTION:
          "Tell us more",
        GUILD_HOME_RESOURCES: "Resources",
        GUILD_SETTINGS_ACTION_FILTER_GUILD_HOME_FEATURE_ITEM:
          "Feature Item on Home",
        GUILD_SETTINGS_ACTION_FILTER_GUILD_HOME_REMOVE_ITEM:
          "Remove Item from Home",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_FEATURE_ITEM:
          "$[**!!{user}!!**](userHook) featured something on Home",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_FEATURE_MESSAGE:
          "$[**!!{user}!!**](userHook) featured a message on Home",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_FEATURE_FORUM_POST:
          "$[**!!{user}!!**](userHook) featured a forum post on Home",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_REMOVE_ITEM:
          "$[**!!{user}!!**](userHook) removed an item from Home",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_REMOVE_MESSAGE:
          "$[**!!{user}!!**](userHook) removed a message from Home",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_REMOVE_FORUM_POST:
          "$[**!!{user}!!**](userHook) removed a forum post from Home",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_REMOVE_CHANNEL:
          "Removed channel from Home",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_HOME_UNREMOVE_CHANNEL:
          "Added channel back to Home",
        IN_APP_EDUCATION_SERVER_HEADER: "What is a server?",
        IN_APP_EDUCATION_SERVER_SUBHEADER:
          "Servers are places where you can hang out with friends and meet people. Most servers are invite-only.",
        IN_APP_EDUCATION_CHANNEL_HEADER: "What are channels?",
        IN_APP_EDUCATION_CHANNEL_SUBHEADER:
          "Channels are where you can talk, hop in voice, play games, and more. Every server has a channel list you can scroll through to see what’s happening.",
        IN_APP_EDUCATION_DM_HEADER: "Direct Messages",
        IN_APP_EDUCATION_DM_SUBHEADER:
          "Direct messages are separate from servers. You can DM a friend privately for a quick chat or create a group DM with up to 10 people.",
        IN_APP_EDUCATION_MORE_HELP_HEADER: "Still need help?",
        IN_APP_EDUCATION_MORE_HELP_SUBHEADER:
          "Not finding what you’re looking for? [Visit our help center]({helpCenterUrl}) for more information.",
        INVITE_PERMISSION_MODAL_TITLE: "Invites are disabled",
        INVITE_PERMISSION_MODAL_TEXT:
          "To add a friend to this server, ask someone with invite permissions for help.",
        DISABLE_INVITES: "Pause Invites",
        ENABLE_INVITES: "Enable Invites",
        INVITES_PERMANENTLY_DISABLED_TIP:
          "Invites to this server are currently permanently disabled.",
        INVITES_DISABLED_TIP: "Invites to this server are currently paused.",
        INVITES_DISABLED_DESCRIPTION:
          "Invite links, embeds, and vanity urls will still be visible, but their usage will be paused. New users will no longer be able to join this server. Managing invites will still work. [Learn More]({helpArticleUrl})",
        INVITES_DISABLED_DESCRIPTION_MOBILE:
          "Invite links, embeds, and vanity urls will still be visible, but new users will no longer be able to join this server. [Learn More]({helpArticleUrl})",
        DISABLE_DMS: "Pause DMs",
        DISABLE_DMS_DESCRIPTION:
          "Temporarily stops new direct messages from being sent between members in your server. Friends can still DM each other, and moderators can still DM members, and your Apps can still DM members.",
        PAYMENT_AUTHORIZATION_SUCCEEDED: "Payment Authorized",
        PAYMENT_AUTHORIZING: "Authorizing",
        PAYMENT_AUTHORIZATION_EXPIRED:
          "Payment authorization link has expired.",
        PAYMENT_AUTH_SUCCEEDED_SUGGESTION:
          "If you followed this link after trying to make a purchase, please go back to the app to see the status of your purchase.",
        PAYMENT_AUTH_EXPIRED_SUGGESTION:
          "Please try to make the purchase again.",
        TEXT_IN_VOICE_ONBOARDING_TITLE: "NEW! Text chat in voice!",
        TEXT_IN_VOICE_ONBOARDING_SUBTITLE:
          "No more clogging general. Send messages, images, and links to everyone in this voice channel.",
        TEXT_IN_VOICE_ONBOARDING_CTA: "Try It",
        TEXT_IN_VOICE_POPOUT_DISABLED: "Chat in the popout is coming soon.",
        NEW_MEMBER_BADGE_TOOLTIP_TEXT: "I'm new here, say hi!",
        NEW_MEMBER_BADGE_POPOUT_TEXT: "System icon for new server members.",
        ROLE_CREATION_SKIP: "Skip this step",
        ROLE_CREATION_STEP_TITLE: "Step {number} of {total}",
        ROLE_CREATION_FINISH: "Finish",
        ROLE_CREATION_CREATE_STEP_TITLE: "Create a new role",
        ROLE_CREATION_CREATE_STEP_SUBTITLE:
          "Give this role a unique name and color. You can always change this later.",
        ROLE_CREATION_CREATE_STEP_NAME_HINT:
          "e.g. coach, moderator, subscriber, pet club",
        ROLE_CREATION_CREATE_STEP_COLOR_HINT:
          "Members use the color of the highest role they have in the roles list.",
        ROLE_CREATION_PERMISSION_STEP_TITLE: "Set up permissions",
        ROLE_CREATION_PERMISSION_STEP_SUBTITLE:
          "How powerful should this role be? You can always change permissions later.",
        ROLE_CREATION_MEMBER_STEP_TITLE: "Add members",
        ROLE_CREATION_MEMBER_STEP_SUBTITLE:
          "Assign this role to your members. Members can have more than one role.",
        ROLE_CREATION_FAILED: "Failed to create role",
        EMPTY_MENTIONS_TITLE: "No recent mentions",
        EMPTY_MENTIONS_BODY: "All of your recent mentions will show up here.",
        EMPTY_MENTIONS_BODY_V2:
          "Come back to see when others have tagged or replied to you.",
        EMPTY_FRIENDS_TITLE: "None of your friends are here yet",
        EMPTY_FRIENDS_BODY:
          "Start a conversation by finding a friend who's already on Discord.",
        EMPTY_FRIENDS_CTA: "Find your friends on Discord",
        EMPTY_INSTANT_INVITE_FRIENDS_TITLE: "No friends to invite yet",
        EMPTY_INSTANT_INVITE_FRIENDS_BODY:
          "Add some friends so that you can invite them to this server!",
        EMPTY_INSTANT_INVITE_FRIENDS_LINK: "Go to the Friends tab",
        EMPTY_QUICK_QUERY_TITLE: "No results",
        EMPTY_QUICK_NO_QUERY_TITLE: "What're you looking for?",
        EMPTY_QUICK_NO_QUERY_BODY: "Search servers, channels, or DMs.",
        EMPTY_PRIVATE_DMS_TITLE: "No messages yet!",
        EMPTY_PRIVATE_DMS_BODY:
          "When you chat with friends directly it will show up here.",
        EMPTY_PRIVATE_DMS_CTA: "Add Friends",
        EMPTY_MESSAGES_TITLE: "DMs with superpowers",
        EMPTY_MESSAGES_BODY:
          "Invite your friends to play games, listen to music together, and more.",
        EMPTY_PRIVATE_ADD_RECIPIENT_TITLE: "No friends to message yet",
        EMPTY_PRIVATE_ADD_RECIPIENT_BODY:
          "You can start a conversation by finding a friend already on Discord.",
        EMPTY_VOICE_CHANNEL_TITLE: "You're the first one here!",
        EMPTY_VOICE_CHANNEL_BODY:
          "Voice channels are where people hang out and talk over voice and video.",
        DISCOVERABLE_GUILD_HEADER_PUBLIC: "Discoverable",
        DISCOVERABLE_GUILD_HEADER_PUBLIC_INFO: "Anyone can join this server.",
        DISCOVERABLE_GUILD_PROFILE_PUBLIC_LABEL: "Discoverable Community",
        REPORT_APP: "Report App",
        FORUM: "Forum",
        CREATE_FORUM_CHANNEL: "Try out Forums",
        FORUM_CHANNEL_DESCRIPTION: "Create a space for organized discussions",
        CHANNEL_TYPE_NEW: "New",
        CHANNEL_NEW_POSTS_LABEL: "{count} New",
        FORUM_SECTION_ARCHIVED: "Older Posts",
        FORUM_NO_POST_WITH_TAG_TITLE:
          "There are no posts with {numTags, plural, =1 {this tag} other {these tags}} yet!",
        FORUM_NO_POST_WITH_TAG_DESCRIPTION:
          "Be the first to start a conversation with {numTags, plural, =1 {this tag} other {these tags}}",
        FORUM_EMPTY_STATE_CREATE_POST_CTA: "Create a post",
        AUTO_ARCHIVE_THREAD_PINNED: "Pinned post will not be auto-closed",
        FORUM_SETTING_SLOW_MODE_POSTS: "Posts",
        FORUM_SETTING_SLOW_MODE_MESSAGES: "Messages",
        FORUM_SETTING_SLOW_MODE_MESSAGE_TEXT:
          "Members will be limited to one message per this interval for any new posts, unless they have Manage Channel or Manage Messages permissions.",
        FORM_POST_ACTIVE_AGO_TIMESTAMP_MINUTES: "Active {count}m ago",
        FORM_POST_ACTIVE_AGO_TIMESTAMP_HOURS: "Active {count}h ago",
        FORM_POST_ACTIVE_AGO_TIMESTAMP_DAYS: "Active {count}d ago",
        FORM_POST_ACTIVE_AGO_TIMESTAMP_MORE_THAN_MONTH: "Active >30d ago",
        FORM_POST_CREATED_AGO_TIMESTAMP_MINUTES: "Posted {count}m ago",
        FORM_POST_CREATED_AGO_TIMESTAMP_HOURS: "Posted {count}h ago",
        FORM_POST_CREATED_AGO_TIMESTAMP_DAYS: "Posted {count}d ago",
        FORM_POST_CREATED_AGO_TIMESTAMP_MORE_THAN_MONTH: "Posted >30d ago",
        FORUM_SORT_AY11_LABEL: "Sort Posts",
        FORUM_SORT_AND_VIEW_AY11_LABEL: "Set sort or view",
        FORUM_SORT_ACTIVITY: "Recent Activity",
        FORUM_SORT_CREATION: "Creation Time",
        FORUM_TAG_FILTER_LABEL: "Tags",
        FORUM_TAG_FILTER_HEADER: "Filter by tags",
        FORUM_TAG_FILTER_SUBMIT: "Show posts",
        FORUM_TAG_FILTER_CLEAR: "Clear all",
        FORUM_TAG_A11Y_FILTER_BY_TAG: "Filter by tag, {tagName}",
        FORUM_TAG_A11Y_ADD_TAG: "Add tag, {tagName}",
        FORUM_TAG_A11Y_TAG_BY: "tag, {tagName}",
        NEW_FORUM_POST: "Create Post",
        NEW_FORUM_POST_NEW: "New Post",
        SUBMIT_POST: "Post",
        FORUM_POST_TITLE_PLACEHOLDER: "Start a conversation...",
        FORUM_POST_TITLE_PLACEHOLDER_SEARCH: "Search or create a post...",
        FORUM_CHANNEL_NO_POST_HISTORY:
          "You do not have permission to view the post history of **#!!{channelName}!!**.",
        FORUM_CHANNEL_NO_SEARCH_POST_HISTORY:
          "You do not have permission to search the post history of **#!!{channelName}!!**.",
        FORUM_POST_TITLE_PLACEHOLDER_FOCUSED: "Title",
        FORUM_POST_MESSAGE_PLACEHOLDER: "Enter a message...",
        NEW_FORUM_POST_COUNT:
          "{count, plural, =1 {1 New Post} other {{count} New Posts}}",
        ACTIVE_FORUM_POST_COUNT:
          "{count, plural, =1 {1 Active Post} other {{count} Active Posts}}",
        FORUM_POST_MESSAGE_COUNT:
          "{count, plural, =1 {1 Message} other {{count} Messages}}",
        FORUM_POST_MESSAGE_COUNT_A11Y:
          "{count, plural, =1 {1 Comment} other {{count} Comments}}",
        FORUM_POST_MESSAGE_COUNT_SHORT: "{count} New",
        FORUM_POST_MESSAGE_COUNT_SHORT_PARENTHETICAL: "({count} New)",
        FORUM_POST_ARIA_LABEL:
          "Post {title}, {count, plural, =1 {1 message} other {{count} messages}}",
        FORUM_EMPTY_STATE_TITLE: "Be the first to start the conversation!",
        FORUM_EMPTY_STATE_DESCRIPTION:
          "What do you want to post about in #{channelName}?",
        FORUM_EMPTY_STATE_CTA: "See Examples",
        FORUM_NEW_POSTS_CREATED: "New Posts Created",
        FORUM_POST_NOTIFICATIONS: "Post Notifications",
        FORUM_MESSAGE_NOTIFICATIONS: "Message Notifications",
        FORUM_MESSAGE_NOTIFICATIONS_DESCRIPTION:
          "This setting applies when you send messages or get mentioned in a post.",
        EDIT_FORUM_POST_SETTINGS: "Post Settings",
        EDIT_FORUM_POST: "Edit Post",
        DELETE_FORUM_POST: "Delete Post",
        ARCHIVE_FORUM_POST: "Close Post",
        ARCHIVE_LOCK_FORUM_POST: "Close & Lock Post",
        LOCK_FORUM_POST: "Lock Post",
        UNLOCK_FORUM_POST: "Unlock post",
        DELETE_FORUM_POST_BODY: "Are you sure you want to delete this post?",
        DELETE_FORUM_POST_CONFIRM_BODY:
          "Are you sure you want to delete **!!{postName}!!**? All message replies will also be deleted. This cannot be undone.",
        DELETE_FORUM_POST_OP_CONFIRM_BODY:
          "Are you sure you want to delete **!!{postName}!!**? This cannot be undone.",
        DELETE_FORUM_POST_OP_WITH_REPLIES_CONFIRM_BODY:
          "Are you sure you want to delete your message? Since other members have replied to your post, only your original message will be deleted. This cannot be undone.",
        UNARCHIVE_FORUM_POST: "Open Post",
        FORUM_POST_SETTINGS: "Post Settings",
        JOIN_FORUM_POST: "Follow Post",
        LEAVE_FORUM_POST: "Unfollow Post",
        MUTE_FORUM_POST: "Mute Post",
        UNMUTE_FORUM_POST: "Unmute Post",
        TOAST_FORUM_POST_ID_COPIED: "Copied Post ID",
        PIN_POST: "Pin Post",
        UNPIN_POST: "Unpin Post",
        PINNED_POST: "Pinned",
        UNPINNED_POST: "Unpinned",
        FORUM_POST_HEADER_NOTICE_LOCKED:
          "This post has been closed and locked. Only moderators can reopen it.",
        FORUM_POST_HEADER_NOTICE_ACTIVE_LOCKED:
          "This post has been locked. Only moderators can send messages.",
        FORM_HELP_DEFAULT_AUTO_ARCHIVE_DURATION_FORUM_POST:
          "New posts will not show in the channel list after being inactive for the specified duration.",
        FORM_HELP_AUTO_ARCHIVE_DURATION_FORUM_POST:
          "Posts will not show in the channel list after being inactive for the specified duration.",
        REMOVE_USER_FROM_FORUM_POST: "Remove !!{user}!! from Post",
        FORUM_POST_MEMBER_LIST_EMPTY_STATE_HEADER:
          "There’s no one in this post.",
        MANAGE_FORUM_POSTS: "Manage Posts",
        MANAGE_THREADS_AND_FORUM_POSTS: "Manage Threads and Posts",
        ROLE_PERMISSIONS_MANAGE_THREADS_AND_FORUMS_DESCRIPTION:
          "Allows members to rename, delete, close, and turn on slow mode for threads and posts. They can also view private threads.",
        ROLE_PERMISSIONS_MANAGE_THREADS_AND_FORUMS_DESCRIPTION_TEXT:
          "Allows members to rename, delete, close, and turn on slow mode for posts in this channel.",
        ROLE_PERMISSIONS_MANAGE_THREADS_AND_FORUMS_DESCRIPTION_CATEGORY:
          "Allows members to rename, delete, close, and turn on slow mode for threads and posts in these channels. They can also view private threads.",
        CREATE_FORUM_POSTS: "Create Posts",
        SEND_MESSAGES_AND_CREATE_FORUM_POSTS: "Send Messages and Create Posts",
        ROLE_PERMISSIONS_SEND_MESSAGES_WITH_FORUMS_DESCRIPTION:
          "Allow members to send messages in text channels and create posts in forum channels.",
        ROLE_PERMISSIONS_SEND_MESSAGES_WITH_FORUMS_DESCRIPTION_TEXT:
          "Allow members to create posts in this channel.",
        ROLE_PERMISSIONS_SEND_MESSAGES_WITH_FORUMS_DESCRIPTION_TEXT_DISABLED:
          "Allow members to create posts in this channel. \n $[We recommend you keep this permission enabled.](warningHook) \n Communities that let all members post have more success keeping their servers active and engaging members.",
        ROLE_PERMISSIONS_SEND_MESSAGES_WITH_FORUMS_DESCRIPTION_CATEGORY:
          "Allow members to send messages and create posts in these channels.",
        SEND_MESSAGES_IN_FORUM_POSTS: "Send Messages in Posts",
        SEND_MESSAGES_IN_THREADS_AND_FORUM_POSTS:
          "Send Messages in Threads and Posts",
        ROLE_PERMISSIONS_SEND_MESSAGES_IN_THREADS_AND_FORUM_POSTS_DESCRIPTION:
          "Allow members to send messages in threads and in posts on forum channels.",
        ROLE_PERMISSIONS_SEND_MESSAGES_IN_THREADS_AND_FORUM_POSTS_DESCRIPTION_CATEGORY:
          "Allow members to send messages in threads and posts under these channels.",
        ROLE_PERMISSIONS_SEND_MESSAGES_IN_THREADS_AND_FORUM_POSTS_DESCRIPTION_TEXT:
          "Allow members to send messages in threads and posts under this channel.",
        ROLE_PERMISSIONS_SECTION_FORUMS: "Forum Channel Permissions",
        ROLE_PERMISSIONS_SECTION_FORUMS_DESCRIPTION:
          "Automated moderation makes monitoring forums easier. [Enable](setUpAutomod)",
        FORUM_ANDROID_WARNING:
          "This channel isn’t fully built yet for Android devices. Log on to your desktop client for the full experience.",
        ADD_ATTACHMENT_FORUM_POST: "Add Media",
        ADD_TAG_FORUM_POST: "Add Tag",
        FORUM_POST_TYPING: "Typing...",
        FORUM_CHANNEL_TOPIC_HEADING: "Guidelines",
        FORUM_CHANNEL_TOPIC_MISSING_HEADING: "Create Post Guidelines!",
        FORUM_CHANNEL_TOPIC_MISSING_DESCRIPTION:
          "Help your members understand what this channel is for, and set rules to keep it civil!",
        FORUM_CHANNEL_TOPIC_MISSING_CTA: "Create Post Guidelines",
        FORUM_CHANNEL_TOPIC_SHOW_MORE: "See More",
        FORUM_CHANNEL_TOPIC_VIEW_ALL: "View All",
        FORUM_PIN_CONFIRM_TITLE: "Pin this post?",
        FORUM_PIN_CONFIRM_BODY:
          "There’s a post that’s pinned already. Pinning this post will remove the existing pinned post.",
        FORUM_BEFORE_YOU_POST: "Before you post...",
        FORUM_READ_THE_GUIDELINES_BEFORE_YOU_POST:
          "Read the post guidelines to understand what this channel is for and create a better discussion!",
        FORUM_POST_GUIDELINES_TITLE: "Post Guidelines",
        CHANNEL_TOOLTIP_FORUM_NSFW: "Forum (Age-Restricted)",
        CHANNEL_TOOLTIP_FORUM_LIMITED: "Forum (Limited)",
        FORM_LABEL_CHANNEL_TEMPLATE: "Template",
        FORM_PLACEHOLDER_CHANNEL_TEMPLATE:
          "Help members make better posts with a simple starter template",
        FORUM_TAGS: "Tags",
        FORM_HELP_FORUM_TAGS:
          "Help people organize their posts into subcategories by creating a tag.",
        FORUM_TAG_CREATE: "Create Tag",
        FORUM_TAG_EDIT: "Edit Tag",
        FORUM_TAG_EDIT_ERROR: "Failed to save tag edit",
        FORUM_TAG_EDIT_LABEL: "{name}, edit tag",
        FORUM_TAG_EDIT_RESET_LABEL: "reset tag's emoji and name",
        FORUM_TAG_REMOVE: "Remove Tag",
        FORUM_TAG_REMOVE_ERROR: "Failed to remove tag",
        FORUM_TAG_CREATE_DESCRIPTION:
          "Create a tag to help people organize their posts into subcategories. Maximum 20 characters.",
        FORUM_TAG_CREATE_PLACEHOLDER:
          "Relationships, Advice, Art, Gear, Health, Recipes",
        FORUM_TAG_REMOVE_CONFIRM: "Are you sure you want to remove this tag?",
        FORUM_TAG_SEE_MORE: "See More",
        FORUM_TAG_SEE_MORE_A11Y_LABEL: "see more tags",
        FORUM_TAG_ALL: "All",
        FORUM_TAG_ALL_A11Y_LABEL: "see all tags",
        FORUM_DEFAULT_REACTION: "Default Reaction",
        FORUM_DEFAULT_REACTION_DESCRIPTION:
          "Pick a default emoji that your members will use to react to a post from this channel.",
        FORUM_MOBILE_TAG_CREATE: "+ Create a Tag",
        FORUM_MOBILE_TAG_PLACEHOLDER: "Cool Stuff",
        BOT_TAG_FORUM_ORIGINAL_POSTER: "OP",
        BOT_TAG_FORUM_ORIGINAL_POSTER_TOOLTIP: "Original Poster",
        FORUM_REACT_BUTTON: "Like",
        FORUM_FOLLOW_BUTTON: "Follow",
        FORUM_UNFOLLOW_BUTTON: "Following",
        FORUM_FOLLOW_BUTTON_A11Y_LABEL: "Follow the post",
        FORUM_UNFOLLOW_BUTTON_A11Y_LABEL: "Unfollow the post",
        FORUM_START_THE_CONVERSATION_HEADER: "Start the conversation!",
        FORUM_START_THE_CONVERSATION_DESCRIPTION:
          "Be the first to share what you think!",
        FORUM_TAG_POST_SEARCH_PLACEHOLDER: "Enter a tag...",
        FORUM_TAG_FILTER_SEARCH_PLACEHOLDER: "Enter a filter...",
        FORUM_TAG_POST_MAX_REACHED: "Max number of forum tags applied",
        FORUM_TAG_POST_EDIT: "Edit Tags",
        FORUM_TAG_POST_SELECT: "Select Tags",
        FORUM_REACTIONS_OVERFLOW: "+{count}",
        FORUM_REACT_TO_POST: "React to Post",
        FORUM_FOLLOWING_POST: "Following",
        FORUM_CHANNEL_ONBOARDING_SHOW: "Show Get Started list",
        FORUM_CHANNEL_ONBOARDING_HIDE: "Hide Get Started list",
        FORUM_CHANNEL_ONBOARDING_COMPLETED_COUNT:
          "({numCompleted} of {numSteps} Completed)",
        FORUM_CHANNEL_ONBOARDING_CHECKLIST_PERMISSION_TITLE:
          "Set recommended permissions",
        FORUM_CHANNEL_ONBOARDING_CHECKLIST_PERMISSION_DESCRIPTION:
          "Communities that let everyone post typically see more engagement.",
        FORUM_CHANNEL_ONBOARDING_CHECKLIST_GUIDELINES_TITLE:
          "Create post guidelines",
        FORUM_CHANNEL_ONBOARDING_CHECKLIST_GUIDELINES_DESCRIPTION:
          "Make rules for posters to follow.",
        FORUM_CHANNEL_ONBOARDING_CHECKLIST_TAGS_TITLE: "Create tags",
        FORUM_CHANNEL_ONBOARDING_CHECKLIST_TAGS_DESCRIPTION:
          "Help people organize their posts into subcategories and filter searches.",
        FORUM_CHANNEL_ONBOARDING_CHECKLIST_FIRST_POST_TITLE:
          "Make the first post!",
        FORUM_CHANNEL_ONBOARDING_CHECKLIST_FIRST_POST_DESCRIPTION:
          "Start the conversation and get things going. [See Examples](onClick)",
        FORUM_CHANNEL_ONBOARDING_CHECKLIST_DEFAULT_REACTION_TITLE:
          "Set a default reaction for posts",
        FORUM_CHANNEL_ONBOARDING_CHECKLIST_DEFAULT_REACTION_DESCRIPTION:
          "Choose the default emoji people will use to react to a post.",
        FORM_LABEL_CHANNEL_GUIDELINES: "Post Guidelines",
        FORUM_CHANNEL_ONBOARDING_PERMISSION_MODAL_TITLE:
          "Who can create a post?",
        FORUM_CHANNEL_ONBOARDING_PERMISSION_MODAL_ROLE_INPUT_PLACEHOLDER:
          "Enter @role...",
        FORUM_CHANNEL_ONBOARDING_PERMISSION_MODAL_LET_EVERYONE_POST:
          "Let @everyone post",
        FORUM_CHANNEL_ONBOARDING_PERMISSION_MODEL_DESCRIPTION:
          "Communities that **let all members post** have more success keeping their servers active and engaging members.",
        FORUM_CHANNEL_ONBOARDING_PERMISSION_MODEL_ERROR:
          "Failed to save permission change.",
        FORUM_CHANNEL_ONBOARDING_DEFAULT_REACTION_MODAL_TITLE:
          "Choose a default reaction",
        FORUM_CHANNEL_ONBOARDING_DEFAULT_REACTION_MODAL_DESCRIPTION:
          "Pick a default emoji that your members will use to react to a post from this channel.",
        FORUM_CHANNEL_ONBOARDING_DEFAULT_REACTION_MODAL_ERROR:
          "Failed to save default reaction",
        FORUM_CHANNEL_THREAD_CREATED_PUSH_TITLE_MOBILE:
          "{guildName} (#{channelName})",
        FORUM_CHANNEL_THREAD_CREATED_PUSH_BODY_MOBILE:
          "{channelName} - Posted by {userUsername}",
        FORUM_CHANNEL_THREAD_CREATED_PUSH_DESCRIPTION_MOBILE:
          "Forum Post Created",
        FORUM_POST_CREATE_CLOSE_ALERT_TITLE: "Save changes",
        FORUM_POST_CREATE_CLOSE_ALERT_BODY:
          "Do you want to save your changes as a draft?",
        FORUM_POST_CREATE_CLOSE_ALERT_SAVE: "Save as Draft",
        FORUM_POST_CREATE_CLOSE_ALERT_DISCARD: "Discard",
        FORUM_CHANNEL_ONBOARDING_VISIBILITY: "Only moderators can see this",
        FORUM_POST_CREATED_AT_TOOLTIP: "Posted {timestamp}",
        FORUM_POST_CREATED_AT_TOOLTIP_LABEL: "Post time",
        FORUM_DEFAULT_SORT_ORDER: "Sort Order",
        FORUM_DEFAULT_SORT_ORDER_DESCRIPTION:
          "Set the default sort order for new posts. Members will still be able to toggle between these options.",
        FORUM_CHANNEL_SORT_BY: "Sort by",
        FORUM_CHANNEL_SORT_BY_RECENTLY_ACTIVE: "Recently Active",
        FORUM_CHANNEL_SORT_BY_DATE_POSTED: "Date Posted",
        FORUM_CHANNEL_RESET_ALL: "Reset to default",
        FORUM_CHANNEL_CLEAR_ALL: "Clear all",
        FORUM_CHANNEL_SHOW_POSTS: "Show posts",
        FORUM_CHANNEL_VIEW_AS: "View as",
        FORUM_CHANNEL_VIEW_AS_LIST: "List",
        FORUM_CHANNEL_VIEW_AS_GRID: "Gallery",
        FORUM_CHANNEL_SORT_AND_VIEW: "Sort & View",
        FORUM_CHANNEL_SORT_AND_VIEW_A11Y_LABEL:
          "Change the sort and layout for Forum Posts",
        FORUM_CHANNEL_TAGS: "Tags",
        FORUM_CHANNEL_TAGS_REMAINING: "{count} remaining",
        FORUM_CHANNEL_SETTINGS_DEFAULT_LAYOUT: "Default Layout",
        FORUM_CHANNEL_SETTINGS_DEFAULT_LAYOUT_BEHAVIOR_DESCRIPTION:
          "All posts will be displayed by the specified option by default. Members will still be able to toggle between these options.",
        FORUM_CHANNEL_SETTINGS_DEFAULT_LAYOUT_DESCRIPTION:
          "Set the default layout view to a media-focused gallery or a text-focused list. Members will still be able to toggle between these options.",
        FORUM_CHANNEL_SETTINGS_DEFAULT_LAYOUT_DESCRIPTION_SEE_EXAMPLES:
          "Set the default layout view to a media-focused gallery or a text-focused list. Members will still be able to toggle between these options. [See Examples](onClick)",
        FORUM_CHANNEL_SETTINGS_DEFAULT_LAYOUT_EXAMPLE_POSTS: "Example posts",
        FORUM_CHANNEL_SETTINGS_LIST_VIEW: "List View",
        FORUM_CHANNEL_SETTINGS_GRID_VIEW: "Gallery View",
        FORUM_CHANNEL_SETTINGS_LIST: "List",
        FORUM_CHANNEL_SETTINGS_GRID: "Gallery",
        FORUM_CHANNEL_CREATE_DEFAULT_GRID_VIEW: "Default Gallery View",
        FORUM_CHANNEL_CREATE_LIST_VIEW: "List View",
        FORUM_CHANNEL_CREATE_GRID_VIEW: "Gallery View",
        FORUM_CHANNEL_SET_DEFAULT_LAYOUT: "Set the default layout",
        FORUM_FOLLOW_TOOLTIP:
          "Add this post to your channel list and receive notifications about it.",
        FORUM_FOLLOW_TOOLTIP_ARCHIVED: "Archived posts cannot be followed.",
        FORUM_POST_EMPTY_TITLE_ERROR: "A title is required",
        FORUM_POST_EMPTY_MESSAGE_ERROR: "A message is required",
        THREAD_AUTOMOD_ERROR:
          "This thread cannot be sent because it contains content blocked by this community. Please revise your post and try again.",
        FORUM_POST_AUTOMOD_ERROR:
          "This post cannot be sent because it contains content blocked by this community. Please revise your post and try again.",
        FORUM_POST_TITLE: "Post Title",
        FORUM_POST_AUTHOR_A11Y_LABEL: "{name}, post author",
        FORUM_TAGS_INFO: "Tags will be displayed in the order you select them",
        FORUM_ADD_MEDIA_TO_ORIGINAL_POST_TITLE:
          "Would you like to add media to the original post?",
        FORUM_ADD_MEDIA_TO_ORIGINAL_POST_DESCRIPTION:
          "We recommend doing this so that people can see your thumbnail while browsing the list view.",
        FORUM_ADD_MEDIA_TO_ORIGINAL_POST_ADD: "Add to Post",
        FORUM_ADD_MEDIA_TO_ORIGINAL_POST_DONT_ADD: "Don't Add",
        ARCHIVED_POST_REACTIONS_DISABLED_TOAST:
          "You cannot add or remove reactions in archived posts.",
        ARCHIVED_POST_FOLLOW_DISABLED_TOAST:
          "You cannot follow archived posts.",
        FORUM_POST_BLOCKED_FIRST_MESSAGE: "Post contains a blocked message",
        FORUM_POST_BLOCKED_MOST_RECENT_MESSAGE: "Message blocked",
        FORUM_REQUIRE_TAG: "Require tag",
        FORUM_REQUIRE_TAG_NOTE: "Require people to select tags when posting",
        FORUM_REQUIRE_TAG_NOTE_MOBILE: "Require Tags when posting",
        FORUM_POST_TAG_REQUIRED_ERROR:
          "A tag is required to create a post in this channel",
        FORUM_POST_NON_MODERATED_TAG_REQUIRED:
          "There are no tags available that can be set by non-moderators",
        FORUM_MODERATED_TAG_CHECKBOX: "Only allow moderators to apply tag",
        FORUM_SEARCH_MATCHING_POSTS:
          "{numPosts, plural, =1 {{numPosts} matching post} other {{numPosts} matching posts}}",
        FORUM_SEARCH_MATCHING_POSTS_ALT:
          '{numPosts, plural, =1 {{numPosts} post} other {{numPosts} posts}} with "{query}"',
        FORUM_SEARCH_NO_MATCHING_POSTS: "No matching posts",
        FORUM_SEARCHING: "Searching...",
        FORUM_SEARCH_PLACEHOLDER: "Search forum posts",
        FORUM_ENTER_TO_START_POST: "to create a new post",
        FORUM_CLEAR_ALL: "Clear all",
        FORUM_NO_POST_PERMISSION_HELP:
          "You do not have permission to post in this channel.",
        FORUM_CHANNEL_NAME_PLACEHOLDER: "forum-discussion",
        FORUM_CHANNEL_NAME_NOTE:
          "Setting a clear title and specific purpose on your forum helps your members engage more! $[See Examples](forumUpsellHook)",
        FORUM_CHANNEL_NAME_NOTE_MOBILE:
          "Setting a clear title and specific purpose on your forum helps your members engage more!",
        CHANNEL_PERMISSIONS_PRIVATE_CHANNEL_DESCRIPTION_NEW:
          "Only selected members and roles will be able to view this channel.",
        FORUM_CHANNEL_GRID_UPSELL_AUTO_TITLE: "You got Gallery View!",
        FORUM_CHANNEL_GRID_UPSELL_AUTO_DESCRIPTION:
          "Easily scroll through posts with photos and videos using gallery view! To reset your default view, go to channel settings.",
        FORUM_CHANNEL_GRID_UPSELL_AUTO_CANCEL: "Reset",
        FORUM_CHANNEL_GRID_UPSELL_AUTO_CONFIRM: "Sounds good!",
        FORUM_CHANNEL_GRID_UPSELL_MANUAL_TITLE: "Gallery View is here!",
        FORUM_CHANNEL_GRID_UPSELL_MANUAL_DESCRIPTION:
          "Easily scroll through posts with photos and videos using gallery view! Set this as the default view in the channel settings.",
        FORUM_CHANNEL_GRID_UPSELL_MANUAL_CANCEL: "Dismiss",
        FORUM_CHANNEL_GRID_UPSELL_MANUAL_CONFIRM: "Check it out",
        FORUM_COMPOSER_TO_CHANNEL: "to #{channelName}",
        FORUM_COMPOSER_TO_CHANNEL_A11Y_LABEL:
          "{nickname} to channel {channelName}",
        FORUM_CHANNEL_MOST_RECENT_MESSAGE_DELETED:
          "This message has been deleted.",
        FORUM_COMPOSER_AVATAR_A11Y_LABEL: "{nickname} Avatar",
        FORUM_UPSELL_MODAL_HEADER:
          "Forum Channels: a space for organized discussion",
        FORUM_UPSELL_MODAL_BODY:
          "An organized way for your members to start their own topics and have conversations that don’t get buried. Forums are great for discussion, advice, LFG, buy/sell listings, Q&A, feedback, and more. Check out our examples:",
        FORUM_UPSELL_DEMO_TAG_NAME_1: "\uD83C\uDFB8 Guitar Advice",
        FORUM_UPSELL_DEMO_TAG_NAME_2: "\uD83D\uDCDA Book Club",
        FORUM_UPSELL_DEMO_TAG_NAME_3: "\uD83C\uDFAE Game Discussion",
        FORUM_UPSELL_DEMO_ALT_TEXT: "Image of a sample forum channel",
        FORUM_UPSELL_DEMO_1_ALT_TEXT:
          "Mock-up of a Guitar Advice channel, with forum tags like Technique, Instrument Care, and Newbie.",
        FORUM_UPSELL_DEMO_2_ALT_TEXT:
          "Mock-up of a Book Club channel, with forum tags like Book Club, Recommendations, and Writers.",
        FORUM_UPSELL_DEMO_3_ALT_TEXT:
          "Mock-up of a Game Discussion channel, with forum tags like Events, Recommendations, and LFG.",
        FORUM_UPSELL_DEMO_1_TAG_NAME_1: "\uD83E\uDD14 Technique",
        FORUM_UPSELL_DEMO_1_TAG_NAME_2: "\uD83C\uDFB8 Instrument Care",
        FORUM_UPSELL_DEMO_1_TAG_NAME_3: "\uD83D\uDC4B Newbie",
        FORUM_UPSELL_DEMO_2_TAG_NAME_1: "\uD83D\uDCDA Book Club",
        FORUM_UPSELL_DEMO_2_TAG_NAME_2: "\uD83E\uDD14 Recommendations",
        FORUM_UPSELL_DEMO_2_TAG_NAME_3: "✏️ Writers",
        FORUM_UPSELL_DEMO_3_TAG_NAME_1: "\uD83D\uDCC6 Events",
        FORUM_UPSELL_DEMO_3_TAG_NAME_2: "\uD83E\uDD14 Recommendations",
        FORUM_UPSELL_DEMO_3_TAG_NAME_3: "\uD83C\uDFAE LFG",
        FORUM_UPSELL_DEMO_1_POST_TITLE_1:
          "Any acoustic guitar recommendations for a beginner?",
        FORUM_UPSELL_DEMO_1_POST_TITLE_2:
          "My strings broke! How do I know which brand my guitar uses?",
        FORUM_UPSELL_DEMO_1_POST_TITLE_3:
          "Advice for learning where different notes are on the fretboard?",
        FORUM_UPSELL_DEMO_1_POST_TITLE_4:
          "Help with learning guitar solo, can’t get 12th fret of b to sound right",
        FORUM_UPSELL_DEMO_2_POST_TITLE_1:
          "Weekly Book Club Meetings: Next Book Poll",
        FORUM_UPSELL_DEMO_2_POST_TITLE_2:
          "Looking for new Young Adult novel recs!",
        FORUM_UPSELL_DEMO_2_POST_TITLE_3:
          "Any book recommendations? Literally any genre",
        FORUM_UPSELL_DEMO_2_POST_TITLE_4:
          "Most underrated authors in the last decade?",
        FORUM_UPSELL_DEMO_3_POST_TITLE_1: "Rhythm game score posting!",
        FORUM_UPSELL_DEMO_3_POST_TITLE_2:
          "Game recs for couples? (something easy!)",
        FORUM_UPSELL_DEMO_3_POST_TITLE_3:
          "Hosting a charity gaming tournament!",
        FORUM_UPSELL_DEMO_3_POST_TITLE_4: "Hidden gems of VR games",
        FORUM_UPSELL_DEMO_1_MESSAGE_CONTENT_1:
          "I accidentally broke the thinnest “E” string on my acoustic guitar. How do I find the right replacement?",
        FORUM_UPSELL_DEMO_1_MESSAGE_CONTENT_2:
          "Quick answer: The brand of strings might be listed online if you search the specific guitar model!",
        FORUM_UPSELL_DEMO_1_MESSAGE_CONTENT_3:
          "don't think you can buy packs of just 1 string, but make sure to check if the rest of the strings still look good to you. if so, don't change it. the high E string is usually the first one to break!",
        FORUM_UPSELL_DEMO_2_MESSAGE_CONTENT_1:
          "I’ve been itching to read more books lately, but haven’t really found the motivation to start any books. I just miss the feeling of being completely absorbed in a book.",
        FORUM_UPSELL_DEMO_2_MESSAGE_CONTENT_2:
          "Are there any particular genres you don’t like?",
        FORUM_UPSELL_DEMO_2_MESSAGE_CONTENT_3:
          "You can find some books in our pinned post. They are all books for the upcoming book club meetings (yes we have book club and it’s super interesting - join us!!)",
        FORUM_UPSELL_DEMO_3_MESSAGE_CONTENT_1:
          "Hello gamers! Do you like to click circles and smash keys like me? Do you have some cool scores to post? Post some scores here!!",
        FORUM_UPSELL_DEMO_3_MESSAGE_CONTENT_2:
          "\uD83D\uDC40 gonna lurk here and see how pro this group is before i share mine",
        FORUM_UPSELL_DEMO_3_MESSAGE_CONTENT_3: "wait where's your score??",
        FORUM_HELPER_CARD_TITLE: "New to Forum Channels? Check out our guide!",
        FORUM_HELPER_CARD_BODY:
          "Learn how to make the best use of forums to create a more engaging community.",
        FORUM_HELPER_CARD_PRIMARY: "Read Guide",
        FORUM_HELPER_CARD_NOTICE: "Only moderators can see this",
        FORUM_HELPER_CARD_ALT_TEXT: "Forum Channel Icon",
        POGGERMODE: "Party Mode",
        POGGERMODE_ENABLE: "Enable Party Mode",
        POGGERMODE_ENABLE_DESCRIPTION:
          "Turn this on when you're ready to party.",
        POGGERMODE_WARNING_TITLE: "Before we get started...",
        POGGERMODE_WARNING_TITLE_REDUCED_MOTION:
          "Your Reduced Motion setting is on",
        POGGERMODE_WARNING_BODY:
          "There will be motion like confetti and screen shaking. You can disable Party Mode at any time or customize your experience below.",
        POGGERMODE_WARNING_BODY_REDUCED_MOTION:
          "We've disabled most of Party Mode to respect your settings. To fully enjoy the party, turn off Reduced Motion in User Settings.",
        POGGERMODE_LOCATIONS: "Locations",
        POGGERMODE_COMBOS_CUSTOMIZATION: "Combos",
        POGGERMODE_COMBOS_ENABLED: "Enable Combos",
        POGGERMODE_COMBOS_ENABLED_DESCRIPTION:
          "Show a combo indicator as you type.",
        POGGERMODE_COMBOS_REQUIRED: "Combo Score Requirement",
        POGGERMODE_COMBOS_REQUIRED_DESCRIPTION:
          "How high your combo score has to reach before the party starts.",
        POGGERMODE_COMBO_SOUNDS_ENABLED: "Enable Sounds",
        POGGERMODE_COMBO_SOUNDS_ENABLED_DESCRIPTION:
          "Hear the roar of the crowd as you type and your combo score increases.",
        POGGERMODE_SCREENSHAKE_CUSTOMIZATION: "Screenshake",
        POGGERMODE_SCREENSHAKE_ENABLED: "Enable Screenshake",
        POGGERMODE_SCREENSHAKE_ENABLED_DESCRIPTION:
          "Shakes your screen as your combo score increases.",
        POGGERMODE_SCREENSHAKE_DISABLED_REDUCED_MOTION:
          "To enable screenshake, turn off Reduced Motion in Accessibility settings.",
        POGGERMODE_SCREENSHAKE_LOCATION_CHAT_INPUT_ENABLED: "Chat Input",
        POGGERMODE_SCREENSHAKE_LOCATION_CHAT_INPUT_ENABLED_DESCRIPTION:
          "Your whole message bar will shake while you are typing.",
        POGGERMODE_SCREENSHAKE_LOCATION_VOICE_USER_ENABLED: "Voice Channels",
        POGGERMODE_SCREENSHAKE_LOCATION_VOICE_USER_ENABLED_DESCRIPTION:
          "When someone speaks, their video tile will shake.",
        POGGERMODE_SCREENSHAKE_LOCATION_MENTION_ENABLED: "Mentions",
        POGGERMODE_SCREENSHAKE_LOCATION_MENTION_ENABLED_DESCRIPTION:
          "Shakes your screen when someone mentions you.",
        POGGERMODE_SCREENSHAKE: "Intensity",
        POGGERMODE_SCREENSHAKE_DESCRIPTION:
          "How hard do you want your screen to shake?",
        POGGERMODE_SCREENSHAKE_MAX: "AAAAA",
        POGGERMODE_CONFETTI_CUSTOMIZATION: "Confetti",
        POGGERMODE_CONFETTI_ENABLED: "Enable Confetti",
        POGGERMODE_CONFETTI_ENABLED_DESCRIPTION:
          "You will now see confetti. Like, a lot.",
        POGGERMODE_CONFETTI_LOCATION_CHAT_INPUT_ENABLED: "Chat Input",
        POGGERMODE_CONFETTI_LOCATION_CHAT_INPUT_ENABLED_DESCRIPTION:
          "Appears in the chat input while you are typing.",
        POGGERMODE_CONFETTI_LOCATION_REACTION_ENABLED: "Message Reactions",
        POGGERMODE_CONFETTI_LOCATION_REACTION_ENABLED_DESCRIPTION:
          "Appears on a message when it receives a reaction.",
        POGGERMODE_CONFETTI_LOCATION_MEMBER_USER_ENABLED: "Member List",
        POGGERMODE_CONFETTI_LOCATION_MEMBER_USER_ENABLED_DESCRIPTION:
          "Appears when the member list is shown and someone else is typing.",
        POGGERMODE_CONFETTI_LOCATION_CALL_TILE_ENABLED: "Voice Tiles",
        POGGERMODE_CONFETTI_LOCATION_CALL_TILE_ENABLED_DESCRIPTION:
          "Appears when you click on a participant in a voice channel or call to focus on them.",
        POGGERMODE_CONFETTI_COUNT: "Quantity",
        POGGERMODE_CONFETTI_COUNT_DESCRIPTION:
          "How much confetti do you want to see?",
        POGGERMODE_CONFETTI_SIZE: "Size",
        POGGERMODE_CONFETTI_SIZE_DESCRIPTION: "Size",
        POGGERMODE_ACHIEVEMENTS: "Achievements",
        POGGERMODE_COMBO_BAR: "Combo Gauge",
        POGGERMODE_COMBO: "COMBO x{multiplier, number}",
        POGGERMODE_COMBO_TIP: "[enter] to Combo!",
        POGGERMODE_SETTINGS_CUSTOMIZATION: "Hide Party Mode",
        POGGERMODE_HIDE_SETTINGS_DESCRIPTION:
          "Turn off and hide Party Mode. You can always turn it back on the same way you originally did.",
        POGGERMODE_HIDE_SETTINGS: "Hide Party Mode",
        POGGERMODE_TEMPORARILY_DISABLED_TOAST_TITLE:
          "Thanks for partying with us!",
        POGGERMODE_TEMPORARILY_DISABLED_TOAST_BODY:
          "Our 7th birthday celebration is over for now, but we hope you enjoyed your time using Party Mode while we had it available! Loved it? Let us know on Twitter, TikTok, Instagram, or whichever platform you prefer!",
        POGGERMODE_ACHIEVEMENT_TITLE: "Achievements",
        POGGERMODE_ACHIEVEMENT_DESCRIPTION:
          "Reach the greatest of heights, and brag to your friends!",
        POGGERMODE_ACHIEVEMENT_ENABLE_POGGERMODE_NAME: "Is this thing on?",
        POGGERMODE_ACHIEVEMENT_ENABLE_POGGERMODE_DESCRIPTION:
          "Enable Party Mode",
        POGGERMODE_ACHIEVEMENT_DISABLE_POGGERMODE_NAME: "The IT solution",
        POGGERMODE_ACHIEVEMENT_DISABLE_POGGERMODE_DESCRIPTION:
          "Disable Party Mode",
        POGGERMODE_ACHIEVEMENT_PING_SOMEONE_NAME:
          "Is it me you're looking for?",
        POGGERMODE_ACHIEVEMENT_PING_SOMEONE_DESCRIPTION: "@mention someone",
        POGGERMODE_ACHIEVEMENT_PING_ME_NAME: "*Discord notification sound*",
        POGGERMODE_ACHIEVEMENT_PING_ME_DESCRIPTION: "Get @mentioned",
        POGGERMODE_ACHIEVEMENT_VISITOR_100_NAME: "Click for your free prize!",
        POGGERMODE_ACHIEVEMENT_VISITOR_100_DESCRIPTION:
          "Congrats, 100th visitor!",
        POGGERMODE_ACHIEVEMENT_CUSTOMIZE_CONFETTI_NAME:
          "Stuck in character creation",
        POGGERMODE_ACHIEVEMENT_CUSTOMIZE_CONFETTI_DESCRIPTION:
          "Customize confetti",
        POGGERMODE_ACHIEVEMENT_MORE_NAME: "More!!",
        POGGERMODE_ACHIEVEMENT_MORE_DESCRIPTION: "Increase shake intensity",
        POGGERMODE_ACHIEVEMENT_COMBO_MULTI_LEVEL_1_NAME: "Prepare for trouble",
        POGGERMODE_ACHIEVEMENT_COMBO_MULTI_LEVEL_1_DESCRIPTION:
          "Combo multiplier (x2)",
        POGGERMODE_ACHIEVEMENT_COMBO_MULTI_LEVEL_2_NAME: "And Make It Double",
        POGGERMODE_ACHIEVEMENT_COMBO_MULTI_LEVEL_2_DESCRIPTION:
          "Combo multiplier (x4)",
        POGGERMODE_ACHIEVEMENT_COMBO_MULTI_LEVEL_3_NAME: "A Puebla party",
        POGGERMODE_ACHIEVEMENT_COMBO_MULTI_LEVEL_3_DESCRIPTION:
          "Combo multiplier (x5)",
        POGGERMODE_ACHIEVEMENT_COMBO_MULTI_LEVEL_4_NAME: "Happy Birthday!!",
        POGGERMODE_ACHIEVEMENT_COMBO_MULTI_LEVEL_4_DESCRIPTION:
          "Combo multiplier (x7)",
        POGGERMODE_ACHIEVEMENT_TOTAL_SCORE_LEVEL_1_NAME: "Two birds, one stone",
        POGGERMODE_ACHIEVEMENT_TOTAL_SCORE_LEVEL_1_DESCRIPTION: "Remember 430",
        POGGERMODE_ACHIEVEMENT_TOTAL_SCORE_LEVEL_2_NAME: "Klondike's cell",
        POGGERMODE_ACHIEVEMENT_TOTAL_SCORE_LEVEL_2_DESCRIPTION:
          "Total score (555)",
        POGGERMODE_ACHIEVEMENT_TOTAL_SCORE_LEVEL_3_NAME:
          "Gonna be the very best",
        POGGERMODE_ACHIEVEMENT_TOTAL_SCORE_LEVEL_3_DESCRIPTION:
          "Catch them if you can",
        POGGERMODE_ACHIEVEMENT_TOTAL_SCORE_LEVEL_4_NAME: "Be elite",
        POGGERMODE_ACHIEVEMENT_TOTAL_SCORE_LEVEL_4_DESCRIPTION:
          "Total Score (1337)",
        POGGERMODE_ACHIEVEMENT_TOTAL_SCORE_LEVEL_5_NAME: "A Slide Puzzle",
        POGGERMODE_ACHIEVEMENT_TOTAL_SCORE_LEVEL_5_DESCRIPTION: "True Math Fan",
        POGGERMODE_ACHIEVEMENT_COMBO_VALUE_LEVEL_1_NAME:
          "Will you still need me?",
        POGGERMODE_ACHIEVEMENT_COMBO_VALUE_LEVEL_1_DESCRIPTION: "When I'm 64",
        POGGERMODE_ACHIEVEMENT_COMBO_VALUE_LEVEL_2_NAME: "Travel through time",
        POGGERMODE_ACHIEVEMENT_COMBO_VALUE_LEVEL_2_DESCRIPTION:
          "88 miles per hour",
        POGGERMODE_ACHIEVEMENT_COMBO_VALUE_LEVEL_3_NAME: "80's pop",
        POGGERMODE_ACHIEVEMENT_COMBO_VALUE_LEVEL_3_DESCRIPTION:
          "Total score (99)",
        POGGERMODE_ACHIEVEMENT_COMBO_VALUE_LEVEL_4_NAME: "Animation fan",
        POGGERMODE_ACHIEVEMENT_COMBO_VALUE_LEVEL_4_DESCRIPTION:
          "Total score (113)",
        POGGERMODE_ACHIEVEMENT_LOCKED_TITLE: "Locked Achievements",
        PREMIUM_UPSELL_GET_NITRO: "Get Nitro",
        FORM_LABEL_HIGHLIGHTS: "Include Highlights",
        FORM_LABEL_HIGHLIGHTS_NOTE:
          "Receive notifications for noteworthy content like messages, friend activity, events, and more.",
        FORM_LABEL_SUPPRESS_HIGHLIGHTS: "Suppress Highlights",
        FORM_LABEL_SUPPRESS_HIGHLIGHTS_NOTE:
          "Suppress notifications for noteworthy content like messages, friend activity, events, and more.",
        HIGHLIGHTS_LEARN_MORE: "Learn more about Highlights",
        HIGHLIGHTS_SERVER_TOO_LARGE:
          "Due to the server's size, you may not receive highlights.",
        HIGHLIGHTS_NOTE_SUBTEXT:
          "Highlights provide occasional updates when your friends are chatting in busy servers, and more.",
        GUILD_HIGHLIGHTS_NOTIFICATIONS_CATEGORY: "Highlights",
        NOTIFICATION_BODY_DISCORD_HIDDEN:
          "Discord is still running, click to change settings",
        CHAT_DISABLED_CHANNEL_LIST: "Done reading? Check out other channels.",
        CHAT_DISABLED_CHANNEL_LINK: "Done reading? Check out #{channelName}.",
        CHAT_DISABLED_HOME_BACK: "Done reading? Hop back to Home.",
        CHAT_DISABLED_CTA: "Explore",
        GUILD_AUTOMOD_ADD_SELECTION:
          "Filter ({keywordCount, plural, =1 {# Word} other {# Words}})",
        GUILD_AUTOMOD_ADD_NEW_RULE: "Create New AutoMod Rule",
        GUILD_SETTINGS_AUTOMOD_TITLE: "AutoMod",
        GUILD_SETTINGS_AUTOMOD_DESCRIPTION:
          "Set up rules for moderation in your server to automatically filter content and post alerts to keep your server safe around the clock. Users with Admin permissions will be ignored from AutoMod rules.",
        GUILD_SETTINGS_AUTOMOD_MESSAGE_FILTER_TITLE: "Content Moderation",
        GUILD_SETTINGS_AUTOMOD_MESSAGE_FILTER_DESCRIPTION_HEADER:
          "Moderate Words and Phrases",
        GUILD_SETTINGS_AUTOMOD_MESSAGE_FILTER_DESCRIPTION:
          "Give your mods a break while keeping your server safe! Set up filters to moderate content and automate a custom response when they’re found, and AutoMod will make it happen.",
        GUILD_SETTINGS_AUTOMOD_MEMBER_CATEGORY_TITLE: "Members",
        GUILD_SETTINGS_AUTOMOD_CONTENT_CATEGORY_TITLE: "Content",
        GUILD_AUTOMOD_RULE_SETUP_BUTTON: "Set Up",
        GUILD_AUTOMOD_ML_SPAM_FILTER_NAME: "Block Suspected Spam Content",
        GUILD_AUTOMOD_ML_SPAM_FILTER_DESCRIPTION:
          "Monitor messages, Forum posts, and threads for potentially spammy content or activity. (Support for English only)",
        GUILD_AUTOMOD_LINK_FILTER_MATCHING_STRATEGY_DESCRIPTION:
          "Use the ** * ** character at the beginning or end of your keyword for partial matches within a word.",
        GUILD_AUTOMOD_KEYWORD_FILTER_NAME: "Block Custom Words",
        GUILD_AUTOMOD_KEYWORD_FILTER_DESCRIPTION:
          "Create your own filter to block specific language from your server.",
        GUILD_AUTOMOD_KEYWORD_FILTER_TRIGGER_HEADER: "Choose your words",
        GUILD_AUTOMOD_ML_SPAM_FILTER_TRIGGER_HEADER:
          "If message is suspected of being spam...",
        GUILD_AUTOMOD_ACTIONS_HEADER: "Choose a response",
        GUILD_AUTOMOD_EVENT_TYPE_MESSAGE_SEND: "Message Send",
        GUILD_AUTOMOD_MENTION_SPAM_FILTER_NAME: "Block Mention Spam",
        GUILD_AUTOMOD_MENTION_SPAM_FILTER_DESCRIPTION:
          "Block messages with an excessive # of role and user mentions",
        GUILD_AUTOMOD_MENTION_SPAM_FILTER_TRIGGER_HEADER: "Configure limits",
        GUILD_AUTOMOD_MENTION_SPAM_FILTER_TRIGGER_DESCRIPTION:
          "Unique mentions (role + user) per message",
        GUILD_AUTOMOD_MENTION_SPAM_FILTER_TRIGGER_DESCRIPTION_HINT:
          "Limit the number of unique mentions in each message.",
        GUILD_AUTOMOD_ACTIONS_BLOCK_MESSAGE_NAME: "Block message",
        GUILD_AUTOMOD_ACTIONS_BLOCK_MESSAGE_DESCRIPTION:
          "Block messages containing these words from being posted.",
        GUILD_AUTOMOD_ACTIONS_BLOCK_MESSAGE_DESCRIPTION_MENTION_SPAM:
          "Block messages with an excessive # of unique mentions.",
        GUILD_AUTOMOD_ACTIONS_BLOCK_MESSAGE_DESCRIPTION_ML_SPAM:
          "Block messages with spam-like content from being posted.",
        GUILD_AUTOMOD_ACTIONS_BLOCK_MESSAGE_DESCRIPTION_SPAM_LINK:
          "Block messages with suspicious links from being posted.",
        GUILD_AUTOMOD_ACTIONS_FLAG_TO_CHANNEL_NAME: "Send alert",
        GUILD_AUTOMOD_ACTIONS_FLAG_TO_CHANNEL_DESCRIPTION:
          "Sends an alert containing the flagged message to a chosen channel.",
        GUILD_AUTOMOD_ACTIONS_FLAG_TO_CHANNEL_MODAL_ERROR_NO_CHANNEL:
          "Please select a channel.",
        GUILD_AUTOMOD_ACTIONS_DISABLE_GUILD_COMMUNICATION_FOR_USER:
          "Timeout member",
        GUILD_AUTOMOD_ACTIONS_DISABLE_GUILD_COMMUNICATION_FOR_USER_DESCRIPTION:
          "Temporarily disables a member's ability to send messages or join voice channels.",
        GUILD_AUTOMOD_ACTIONS_USER_DISABLE_COMMUNICATION_DISPLAY_HELPER:
          "**({duration})**",
        GUILD_AUTOMOD_DISABLE_GUILD_COMMUNICATION_MODAL_DESCRIPTION:
          "Choose how long you want to timeout a member if they break this rule. Members in timeout are temporarily not allowed to chat, react in text channels, or connect to voice or Stage channels.",
        GUILD_AUTOMOD_DISABLE_GUILD_COMMUNICATION_PLACEHOLDER:
          "Choose duration",
        GUILD_AUTOMOD_ACTIONS_TIMEOUT_EDIT_HELPER:
          "Members who use blocked words will be timed out for: **{friendlyDurationString}**",
        GUILD_AUTOMOD_ACTIONS_TIMEOUT_EDIT_HELPER_MENTION_SPAM:
          "Members who exceed your set mention limit will be timed out for: **{friendlyDurationString}**",
        GUILD_AUTOMOD_ACTIONS_TIMEOUT_UPDATE_DURATION: "Edit Duration",
        GUILD_AUTOMOD_ADD_ADDITIONAL_RULE: "Create {ruleName}",
        GUILD_AUTOMOD_ACTIONS_FLAG_TO_CHANNEL_MODAL_DESCRIPTION:
          "Choose a channel to post the alert message to. The alert will contain the flagged message contents, author, and channel it was originally posted to.",
        GUILD_AUTOMOD_ACTIONS_FLAG_TO_CHANNEL_EDIT_HELPER:
          "Alert message will be sent to **(#!!{channelName}!!)**.",
        GUILD_AUTOMOD_ACTIONS_FLAG_TO_CHANNEL_DISPLAY_HELPER:
          "**(#!!{channelName}!!)**",
        GUILD_AUTOMOD_ACTIONS_FLAG_TO_CHANNEL_MODAL_CHANNEL_HELPER:
          "Anyone with access to this text channel will see the alert.",
        GUILD_AUTOMOD_ACTIONS_FLAG_TO_CHANNEL_MODAL_SUBMIT: "Add Alert",
        GUILD_AUTOMOD_ACTIONS_FLAG_TO_CHANNEL_MODAL_EDIT: "Edit",
        GUILD_AUTOMOD_ACTIONS_FLAG_TO_CHANNEL_MODAL_CHANNEL_PLACEHOLDER:
          "Select a text channel",
        GUILD_AUTOMOD_KEYWORD_FILTER_EMPTY: "No keywords have been added.",
        GUILD_AUTOMOD_BLOCKED_MESSAGE_EDIT_POSTFIX: "reverted",
        GUILD_AUTOMOD_BLOCKED_MESSAGE_SEND_NOTICE:
          "This message can't be posted because it contains content blocked by this community. The message may also be viewed by the community owners.",
        GUILD_AUTOMOD_BLOCKED_MESSAGE_EDIT_NOTICE:
          "This message can't be edited because it contains content blocked by this community. The message may also be viewed by the community owners.",
        GUILD_AUTOMOD_BLOCKED_MESSAGE_LEARN_MORE: "• [Learn more]({helpUrl})",
        GUILD_AUTOMOD_LEARN_MORE_LINK: "[Learn More]({helpUrl})",
        GUILD_AUTOMOD_KEYWORD_ENTRY_HINT:
          "Separate words or phrases with a comma (dog, cat, tiger) or new line. For each word, use * at the beginning, end, or both for partial matching.",
        GUILD_AUTOMOD_KEYWORD_ERROR_NO_KEYWORDS:
          "Please enter at least one keyword.",
        GUILD_AUTOMOD_KEYWORD_ERROR_NO_KEYWORDS_OR_REGEX:
          "Please enter at least one keyword or one regex pattern.",
        GUILD_AUTOMOD_KEYWORD_ERROR_TOO_MANY_KEYWORDS:
          "Please enter no more than {limit} keywords.",
        GUILD_AUTOMOD_KEYWORD_ERROR_TOO_MANY_REGEX:
          "Please enter no more than {limit} regex patterns.",
        GUILD_AUTOMOD_KEYWORD_ERROR_INVALID_KEYWORD_LENGTH:
          "{keyword} has an invalid length. Keywords must be between {min} and {max} characters.",
        GUILD_AUTOMOD_REGEX_ERROR_INVALID_REGEX_LENGTH:
          "{regex} has an invalid length. Regex patterns must be between {min} and {max} characters.",
        GUILD_AUTOMOD_KEYWORD_GENERIC_SAVE_ERROR:
          "Please change any keywords that have errors and try again.",
        GUILD_AUTOMOD_REGEX_GENERIC_SAVE_ERROR:
          "Please change any regexes that have errors and try again.",
        GUILD_AUTOMOD_ERROR_NO_ACTIONS:
          "Please add at least one action to this rule.",
        GUILD_AUTOMOD_KEYWORDS_PLACEHOLDER: "Enter 1 or more words or phrases",
        GUILD_AUTOMOD_KEYWORDS_EXPAND: "{count} words",
        GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_BLOCK_MESSAGE:
          "AutoMod blocked a message sent by $[**!!{target}!!**](targetHook) in $[**!!{channel}!!**](channelHook)",
        GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_TRIGGERED_RULE_NAME_CHANGE:
          "Detected by rule **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_FLAG_TO_CHANNEL_MESSAGE:
          "AutoMod flagged a message sent by $[**!!{target}!!**](targetHook) in $[**!!{channel}!!**](channelHook)",
        GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_USER_COMMUNICATION_DISABLED_MESSAGE:
          "AutoMod timed out $[**!!{target}!!**](targetHook) for a message posted in $[**!!{channel}!!**](channelHook)",
        GUILD_SETTINGS_ACTION_FILTER_AUTO_MODERATION_BLOCK_MESSAGE:
          "AutoMod Block Message",
        GUILD_AUTOMOD_POST_TO_CHANNEL_RULE_NAME: "Rule: {ruleName}",
        GUILD_AUTOMOD_POST_TO_CHANNEL_KEYWORD: "Keyword: {keyword}",
        GUILD_AUTOMOD_POST_TO_CHANNEL_TIMEOUT_DURATION: "Timeout: {duration}",
        GUILD_AUTOMOD_POST_TO_CHANNEL_CHANNEL_NAME:
          "Channel: $[**!!{channelName}!!**](channelHook)",
        GUILD_AUTOMOD_POST_TO_CHANNEL_REASON: "Reason: {reason}",
        GUILD_AUTOMOD_POST_TO_CHANNEL_REASON_NICKNAME: "Nickname",
        GUILD_AUTOMOD_POST_TO_CHANNEL_REASON_USERNAME: "Username",
        GUILD_AUTOMOD_POST_TO_CHANNEL_REASON_GLOBAL_NAME: "Display Name",
        GUILD_AUTOMOD_POST_TO_CHANNEL_HEADER_ACTION_BLOCKED:
          "has blocked a message",
        GUILD_AUTOMOD_POST_TO_CHANNEL_HEADER_ACTION_FLAGGED:
          "has flagged a message",
        GUILD_AUTOMOD_POST_TO_CHANNEL_HEADER_ACTION_BLOCKED_MOBILE:
          "blocked a message",
        GUILD_AUTOMOD_POST_TO_CHANNEL_HEADER_ACTION_FLAGGED_MOBILE:
          "flagged a message",
        GUILD_AUTOMOD_POST_TO_CHANNEL_HEADER_ACTION_BLOCKED_HOOK:
          "has blocked a message in $[**!!{channelName}!!**](channelHook)",
        GUILD_AUTOMOD_POST_TO_CHANNEL_HEADER_ACTION_FLAGGED_HOOK:
          "has flagged a message in $[**!!{channelName}!!**](channelHook)",
        GUILD_AUTOMOD_POST_TO_CHANNEL_HEADER_ACTION_BLOCKED_VOICE_CHANNEL_STATUS_HOOK:
          "has blocked a voice channel status for $[**!!{channelName}!!**](channelHook)",
        GUILD_AUTOMOD_POST_TO_CHANNEL_HEADER_ACTION_FLAGGED_VOICE_CHANNEL_STATUS_HOOK:
          "has flagged a voice channel status for $[**!!{channelName}!!**](channelHook)",
        GUILD_AUTOMOD_USERNAME: "AutoMod",
        GUILD_AUTOMOD_USER_BADGE_TEXT: "SYSTEM",
        GUILD_AUTOMOD_INPUT_FILTER_NAME: "Rule Name",
        GUILD_AUTOMOD_INPUT_FILTER_NAME_PLACEHOLDER: "Enter a rule name",
        GUILD_AUTOMOD_EXEMPTION_SEARCH_PLACEHOLDER: "Search channels or roles",
        GUILD_AUTOMOD_EXEMPTION_SEARCH_CHANNEL_PLACEHOLDER: "Enter channels...",
        GUILD_AUTOMOD_EXEMPTION_SEARCH_ROLE_PLACEHOLDER: "Enter roles...",
        GUILD_AUTOMOD_EXEMPTION_HEADER:
          "Allow certain roles or channels (optional)",
        GUILD_AUTOMOD_ROLES_EXEMPTION_HEADER: "Allow certain roles (optional)",
        GUILD_AUTOMOD_EXEMPTION_HINT:
          "Pssst — members with Admin and Manage Server permissions are always excluded from filter rules.",
        GUILD_AUTOMOD_EXEMPT_CHANNELS_EDIT_BUTTON: "Edit Channels",
        GUILD_AUTOMOD_EXEMPT_ROLES_EDIT_BUTTON: "Edit Roles",
        GUILD_AUTOMOD_WARNING_UNSAVED_CHANGES_TITLE: "Unsaved Changes",
        GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_FILTER_NAME:
          "Block Commonly Flagged Words",
        GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_DESCRIPTION_TEXT:
          "Flag messages that contain profanity and more. (Support for English only)",
        GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_DESCRIPTION_TEXT_URL:
          "Screen messages that contain profanity and more. [Learn More]({helpUrl})",
        GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_TRIGGER_DESCRIPTION:
          "Select the type of language",
        GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_PROFANITY_HEADER: "Severe Profanity",
        GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_PROFANITY_SUBTITLE:
          "Extreme forms of swearing or cursing",
        GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_SEXUAL_CONTENT_HEADER:
          "Sexual Content",
        GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_SEXUAL_CONTENT_SUBTITLE:
          "Terms that refer to sexually explicit behavior or activity",
        GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_SLURS_HEADER: "Insults & Slurs",
        GUILD_AUTOMOD_DEFAULT_KEYWORD_LIST_SLURS_SUBTITLE:
          "Personally insulting terms and terms that may be considered hate speech",
        GUILD_AUTOMOD_WARNING_UNSAVED_CHANGES_DESCRIPTION:
          'You have unsaved changes to the "{ruleName}" AutoMod rule. Are you sure you want to stop editing without saving?',
        GUILD_AUTOMOD_ACTIONS_MODERATE_USER: "Moderate !!{nick}!!",
        GUILD_AUTOMOD_REPORT_FEEDBACK_MODAL_TITLE: "Did we get it wrong?",
        GUILD_AUTOMOD_REPORT_FEEDBACK_MODAL_SUBTITLE:
          "Let us know if this message shouldn’t have been caught so we can improve AutoMod for the future. By doing this, you are also sending the flagged message to Discord.",
        GUILD_AUTOMOD_REPORT_RAID_FEEDBACK_MODAL_SUBTITLE:
          "Let us know if this alert was a false positive (i.e. there wasn't a raid) so we can improve our thresholds.",
        GUILD_AUTOMOD_REPORT_RAID_FEEDBACK_LEGITIMATE_ACCOUNTS:
          "A bunch of legitimate accounts joined at the same time",
        GUILD_AUTOMOD_REPORT_RAID_FEEDBACK_LEGITIMATE_DMS:
          "A bunch of legitimate DMs were sent at the same time",
        GUILD_AUTOMOD_REPORT_RAID_FEEDBACK_OTHER: "Other",
        GUILD_AUTOMOD_REPORT_RAID_FEEDBACK_MODAL_OTHER_REASON_PLACEHOLDER:
          "Tell us what happened",
        GUILD_AUTOMOD_REPORT_RAID_FEEDBACK_SUBMIT_BUTTON: "Not A Raid",
        GUILD_AUTOMOD_REPORT_FEEDBACK_MODAL_BUG_REASON:
          "I think this is a bug.",
        GUILD_AUTOMOD_REPORT_FEEDBACK_MODAL_ALLOWED_REASON:
          "This message is allowed in my community.",
        GUILD_AUTOMOD_SUBMIT_ISSUE: "Submit Issue",
        GUILD_AUTOMOD_REPORT_RAID_FEEDBACK_CONFIRM_TITLE: "Thanks!",
        GUILD_AUTOMOD_REPORT_RAID_FEEDBACK_CONFIRM_SUBTITLE:
          "We use this information to deliver relevant alerts to you.",
        GUILD_AUTOMOD_REPORT_RAID_FEEDBACK_CONFIRM_CTA: "Okay!",
        ROLE: "Role",
        GUILD_AUTOMOD_REMOVE_RULE_CONFIRM_TITLE: "Remove Rule",
        GUILD_AUTOMOD_REMOVE_RULE_CONFIRM_DESCRIPTION:
          'Are you sure you want to remove the "{ruleName}" AutoMod rule?',
        GUILD_AUTOMOD_ADD_KEYWORD_TO_RULE_CONFIRM_TITLE: "Add Keyword To Rule",
        GUILD_AUTOMOD_ADD_KEYWORD_TO_RULE_CONFIRM_DESCRIPTION:
          "Are you sure you want to add **{keyword}** to **{ruleName}** AutoMod rule?",
        GUILD_AUTOMOD_REPORT_ISSUES: "Report Issues",
        GUILD_AUTOMOD_VISIBILITY_MESSAGE:
          "Only you can see this • [Dismiss message](onClick)",
        GUILD_AUTOMOD_VIEW_HELP_ARTICLE: "View Blocked Message Help Article",
        GUILD_AUTOMOD_VISIBILITY_ICON_DESCRIPTION:
          "Eye icon to depict visibility",
        GUILD_AUTOMOD_ERROR_BAR:
          "Red bar indicating an error sending the message due to AutoMod",
        GUILD_AUTOMOD_SYSTEM_MESSAGE_TEXT:
          "[AutoMod](autoModHook) [System](systemHook) has blocked a message.",
        GUILD_AUTOMOD_SYSTEM_MESSAGE_TEXT_FLAGGED:
          "[AutoMod](autoModHook) [System](systemHook) has flagged a message.",
        GUILD_AUTOMOD_CHANNEL_RULE_SUBTEXT:
          "[{channelName}](channelHook) • Rule: {ruleName}",
        GUILD_AUTOMOD_KEYWORD_FILTER_HEADER_WORD_COUNT:
          "({keywordCount, plural, =1 {# word} other {# words}})",
        GUILD_AUTOMOD_ANDROID_BACKGROUND_CONTENT_DESCRIPTION:
          "Dark gray background outlining all the contents of a message flagged by AutoMod",
        GUILD_AUTOMOD_MODERATOR_REPORT_BUTTON: "Report",
        GUILD_AUTOMOD_SEPARATOR: "•",
        GUILD_AUTOMOD_SHIELD_CONTENT_DESCRIPTION:
          "Blue shield icon to denote security",
        GUILD_AUTOMOD_SYSTEM_MESSAGE_AVATAR_CONTENT_DESCRIPTION:
          "A smiling robot is sweeping up dust",
        GUILD_AUTOMOD_EDIT_RULE: "Edit Rule",
        GUILD_AUTOMOD_DELETE_RULE: "Delete Rule",
        GUILD_AUTOMOD_RULE_CONTEXT_MENU: "Rule Context Menu",
        GUILD_AUTOMOD_NEW_RULE_ERROR:
          "Encountered an issue while generating a new rule",
        GUILD_AUTOMOD_EDIT_NO_CHANGES: 'Currently Editing "{ruleName}" Rule',
        GUILD_AUTOMOD_EDIT_NO_CHANGES_BUTTON_CANCEL: "Cancel",
        GUILD_AUTOMOD_UPSELL_HEADER: "Block words and phrases",
        GUILD_AUTOMOD_UPSELL_CONTENT:
          "Keep your server safe by setting up rules that block messages before they are sent. Check out **Server Settings > Content Moderation.**",
        GUILD_AUTOMOD_UPSELL_ASSET_HEADER: "AutoMod",
        GUILD_AUTOMOD_UPSELL_CTA: "Set Up",
        GUILD_AUTOMOD_UPSELL_DISMISSAL: "Got it",
        GUILD_AUTOMOD_UNKNOWN: "Unknown",
        GUILD_AUTOMOD_ERROR_MESSAGE_NOT_MEMBER:
          "User is no longer a member of this server.",
        GUILD_AUTOMOD_MISSING_TIMEOUT_PERMISSIONS:
          "**Timeout Members** permission is required to configure this action.",
        GUILD_AUTOMOD_ALLOW_LIST_TITLE: "Allow words and phrases (optional)",
        GUILD_AUTOMOD_ALLOW_LIST_SUBTITLE:
          "Add words or phrases members are allowed to use, separated by a comma (cat, happy puppy, *cookie*)",
        GUILD_AUTOMOD_REGEX_TEXTAREA_TITLE:
          "Use regex patterns for advanced matching (optional)",
        GUILD_AUTOMOD_REGEX_TEXTAREA_SUBTITLE:
          "Separate patterns with a new line. Visit our [Help Center article]({articleUrl}) for more info",
        GUILD_AUTOMOD_KEYWORD_FILTER_HEADER_WORD_AND_REGEX_COUNT:
          "({keywordCount, plural, =1 {# word} other {# words}}, {regexPatternCount, plural, =1 {# regex} other {# regexes}})",
        GUILD_AUTOMOD_REGEX_SUBTEXT:
          "Use a new line for each regex pattern. Case-insensitive and global flags are applied by default (and other flags are not supported). Visit our [Help Center]({helpArticle}) for more info.",
        GUILD_AUTOMOD_REGEX_ERROR_HELP:
          "There are issues with your regex input. Please correct the highlighted errors above. [Need Help?]({helpArticle})",
        GUILD_AUTOMOD_REGEX_ERROR_SUMMARY_SINGLE:
          "There was an issue with your regex: {error}",
        GUILD_AUTOMOD_REGEX_ERROR_SUMMARY_MULTIPLE:
          "There were issues with your regexes: {error}, and",
        GUILD_AUTOMOD_REGEX_ERROR_SUMMARY_OTHER_ERRORS:
          "{otherErrorCount, plural, =1 {# other error} other {# other errors}}",
        GUILD_AUTOMOD_DEFAULT_UPSELL_ASSET_HEADER: "AutoMod",
        GUILD_AUTOMOD_DEFAULT_UPSELL_CTA: "Set up",
        GUILD_AUTOMOD_DEFAULT_UPSELL_DISMISSAL: "Got it",
        GUILD_AUTOMOD_ACTIONS_BLOCK_MESSAGE_MODAL_TITLE: "Edit Custom Message",
        GUILD_AUTOMOD_ACTIONS_BLOCK_MESSAGE_MODAL_DESCRIPTION:
          "Your custom message will be shown when AutoMod blocks a member's message. This is a chance to help members understand your server's guidelines!",
        GUILD_AUTOMOD_ACTIONS_BLOCK_MESSAGE_MODAL_CUSTOM_MESSAGE_PLACEHOLDER:
          "Enter your custom message",
        GUILD_AUTOMOD_ACTIONS_BLOCK_MESSAGE_CUSTOM_MESSAGE_HELPER:
          "A custom error message can be shown to members.",
        GUILD_AUTOMOD_ACTIONS_BLOCK_MESSAGE_CUSTOM_MESSAGE_CTA:
          "Edit Custom Message",
        GUILD_AUTOMOD_CUSTOM_BLOCK_MESSAGE_UPSELL_HEADER:
          "Custom Messages from AutoMod",
        GUILD_AUTOMOD_CUSTOM_BLOCK_MESSAGE_UPSELL_CONTENT:
          "Add a note to educate members whenever AutoMod blocks their message in **AutoMod ➜ Block Message ➜ Edit**",
        GUILD_AUTOMOD_SERVER_POLICY_FILTER_NAME: "Enforce Server Rules (AI)",
        GUILD_AUTOMOD_SERVER_POLICY_FILTER_DESCRIPTION:
          "Flag messages that may break server rules using OpenAI technology.",
        GUILD_AUTOMOD_SERVER_POLICY_FILTER_TRIGGER_HEADER:
          "Define your server rules",
        GUILD_AUTOMOD_SERVER_POLICY_FILTER_TRIGGER_SUBHEADER:
          "AutoMod uses rules from [Rules Screening](onClick)",
        GUILD_AUTOMOD_SERVER_POLICY_FILTER_TRIGGER_SUBHEADER_WITH_CHANNEL:
          "AutoMod uses rules from [Rules Screening](onClick) and what is posted in your community rules channel $[**!!{channelName}!!**](channelHook)",
        GUILD_AUTOMOD_ALERT_ACTION_ICON_TOOLTIP_DELETE_MESSAGE:
          "{userName} deleted message {timestamp}",
        GUILD_AUTOMOD_ALERT_ACTION_ICON_TOOLTIP_SET_COMPLETED:
          "{userName} marked complete {timestamp}",
        GUILD_AUTOMOD_ALERT_ACTION_ICON_TOOLTIP_SUBMIT_FEEDBACK:
          "{userName} reported issues {timestamp}",
        GUILD_AUTOMOD_ALERT_DELETE_MEMBERS_MESSAGE: "Delete User's Message",
        GUILD_AUTOMOD_ALERT_SET_COMPLETED: "Mark Alert Completed",
        GUILD_AUTOMOD_ALERT_UNSET_COMPLETED: "Mark Alert Not Completed",
        GUILD_AUTOMOD_MENTION_SPAM_FILTER_RAID_DESCRIPTION:
          "Enable mention raid detection",
        GUILD_AUTOMOD_MENTION_SPAM_FILTER_RAID_DESCRIPTION_HINT:
          "Allow automatic detection of mention raids in the server.",
        GUILD_AUTOMOD_MENTION_SPAM_NOTICE_MESSAGE:
          "We're restricting some messages due to a potential mention raid",
        GUILD_AUTOMOD_MENTION_SPAM_NOTICE_CONFIGURE_SETTINGS:
          "Configure Settings",
        GUILD_AUTOMOD_MENTION_SPAM_NOTICE_REMOVE_RESTRICTION:
          "Remove Restrictions",
        GUILD_AUTOMOD_REMOVE_MENTION_RAID_MODAL_TITLE:
          "Remove Mention Raid Restrictions",
        GUILD_AUTOMOD_REMOVE_MENTION_RAID_MODAL_BODY:
          "Are you sure you want to remove all message restrictions that were placed on this server due to a suspected mention raid?",
        GUILD_AUTOMOD_NOTFICATION_ALERT_TITLE: "safety alert!",
        GUILD_AUTOMOD_NOTFICATION_UNSUPPORTED_TITLE: "Unsupported Message",
        GUILD_AUTOMOD_NOTFICATION_UNSUPPORTED_DESCRIPTION:
          "Your Discord client doesn’t support this message type. Please update it to see this message.",
        GUILD_AUTOMOD_NOTIFICATION_ACTIVITY_ALERTS_ENABLED_TITLE:
          "Activity Alerts Enabled",
        GUILD_AUTOMOD_NOTIFICATION_ACTIVITY_ALERTS_ENABLED_DESCRIPTION:
          "New and improved Activity Alerts are monitoring your server safety. AutoMod will send a message here if there is any DM or join activity that exceed what is normal for your server.",
        GUILD_AUTOMOD_NOTIFICATION_ACTIVITY_ALERTS_ENABLED_BY_PREFIX:
          "Enabled by",
        GUILD_AUTOMOD_NOTIFICATION_RAID_JOINS:
          "~{joinCount, number} Joins Actioned",
        GUILD_AUTOMOD_NOTIFICATION_RAID_TITLE: "Unusual Join Activity Detected",
        GUILD_AUTOMOD_NOTIFICATION_DM_RAID_TITLE:
          "Unusual DM Activity Detected",
        GUILD_AUTOMOD_NOTIFICATION_RAID_ACTION_DESCRIPTION:
          "Activity began on {dateTime}. Discord is serving CAPTCHA to all joiners and blocks suspicious joins and DMs. Enable security actions and review members, if needed.",
        GUILD_AUTOMOD_NOTIFICATION_RAID_DESCRIPTION:
          "Server is temporarily in raid protection mode, which will CAPTCHA and block suspicious joins.",
        GUILD_AUTOMOD_NOTIFICATION_RAID_FALSE_ALARM: "Report False Alarm",
        GUILD_AUTOMOD_NOTIFICATION_RAID_DMS: "~{dmsSent, number} DMs Detected",
        GUILD_AUTOMOD_NOTIFICATION_MARK_AS_RESOLVED: "Mark as resolved",
        GUILD_AUTOMOD_NOTIFICATION_MENTION_RAID_TITLE:
          "Unusual Mention Activity Detected",
        GUILD_AUTOMOD_NOTIFICATION_MENTION_RAID_DESCRIPTION:
          "We're restricting some messages due to a potential mention raid.",
        MEMBER_SAFETY_CHANNEL_TITLE: "Members",
        MEMBER_SAFETY_TABLE_TITLE: "Recent Members",
        MEMBER_SAFETY_TABLE_TITLE_SEARCH: "Search Results",
        MEMBER_SAFETY_TABLE_HEADER_NAME: "Name",
        MEMBER_SAFETY_TABLE_HEADER_JOINED_AT: "Member Since",
        MEMBER_SAFETY_TABLE_HEADER_ACCOUNT_AGE: "Joined Discord",
        MEMBER_SAFETY_TABLE_HEADER_JOIN_METHOD: "Join Method",
        MEMBER_SAFETY_TABLE_HEADER_ROLES: "Roles",
        MEMBER_SAFETY_TABLE_HEADER_FLAGS: "Signals",
        MEMBER_SAFETY_TABLE_HEADER_ACTIONS: "",
        MEMBER_SAFETY_TABLE_PAGINATION_LABEL: "members of **{count}**",
        MEMBER_SAFETY_TABLE_PAGINATION_ADVANCED_LABEL:
          "members **{pageRange}** of **{total}**",
        MEMBER_SAFETY_TABLE_PAGINATION_TOOLTIP:
          "This only shows the most recent members - older members may not be shown (but will be soon).",
        MEMBER_SAFETY_TABLE_PAGINATION_PRE_LABEL: "Showing",
        MEMBER_SAFETY_TABLE_PAGINATION_NO_PAGE_NUMBERS_LABEL:
          "Showing {count, plural, one {**#** member} other {**#** members}}",
        MEMBER_SAFETY_TABLE_NEW_MEMBER_NOTICE_LABEL:
          "{count} new members since {date}",
        MEMBER_SAFETY_TABLE_NEW_MEMBER_NOTICE_ACTION: "View New Members",
        MEMBER_SAFETY_TABLE_SEARCH_PLACEHOLDER: "Search by username or id",
        MEMBER_SAFETY_TABLE_NO_RESULTS:
          "No members match these search results.",
        MEMBER_SAFETY_TABLE_FLAGS_POPOUT_TITLE: "Member Safety Flags",
        MEMBER_SAFETY_TABLE_ADD_ROLES_TOOLTIP: "Add Roles",
        MEMBER_SAFETY_TABLE_PROFILE_TOOLTIP: "View Profile",
        MEMBER_SAFETY_TABLE_MOD_VIEW_TOOLTIP: "Open Mod View",
        MEMBER_SAFETY_TABLE_OVERFLOW_TOOLTIP: "More Options",
        MEMBER_SAFETY_UNUSUAL_DM_ACTIVITY: "Unusual DM Activity",
        MEMBER_SAFETY_COMMUNICATION_DISABLED: "Timed Out",
        MEMBER_SAFETY_UNUSUAL_ACCOUNT_ACTIVITY: "Unusual Account Activity",
        MEMBER_SAFETY_USERNAME_QUARANTINED: "Quarantined",
        MEMBER_SAFETY_COMMUNICATION_DISABLED_TOOLTIP: "Timed out for",
        MEMBER_SAFETY_MORE_ROLES_TOOLTIP: "More Roles",
        MEMBER_SAFETY_UNUSUAL_DM_ACTIVITY_TOOLTIP:
          "Sent excessive DMs to non-friend server members in last 24 hrs",
        MEMBER_SAFETY_MEMBER_ROW_ARIA_LABEL: "Member {name}",
        MEMBER_SAFETY_DM_PAUSED_HEADER: "Direct messages are paused",
        MEMBER_SAFETY_INVITES_PAUSED_HEADER: "Invites are paused",
        MEMBER_SAFETY_DM_AND_INVITES_PAUSED_HEADER:
          "Direct messages and invites are paused",
        MEMBER_SAFETY_LOCKDOWN_SUBHEADER:
          "Filler subheader text with help center article link",
        MEMBER_SAFETY_JOIN_RAID_ALERT_HEADER: "Unusual join activity detected",
        MEMBER_SAFETY_DM_RAID_ALERT_HEADER: "Unusual DM activity detected",
        MEMBER_SAFETY_RAID_ALERT_SUBHEADER:
          "Unusual activity began on {dateTime}",
        MEMBER_SAFETY_RESOLVE_RAID_ALERT_BUTTON: "Mark as Resolved",
        MEMBER_SAFETY_BANNER_HEADER:
          "Meet the new safety-centric Members page!",
        MEMBER_SAFETY_BANNER_SUBHEADER:
          "See who's recently joined your server and swiftly address any users flagged for unusual activity.",
        MEMBERS_TABLE_ROLE_SELECTION_PLACEHOLDER: "Select a role",
        MEMBERS_TABLE_ROLE_SELECTION_CANCEL: "Cancel",
        MEMBERS_TABLE_ROLE_SELECTION_CONFIRM: "Confirm",
        MEMBERS_TABLE_NEW_MEMBER_TIMESTAMP_REFRESH_MODAL_TITLE:
          "View New Members?",
        MEMBERS_TABLE_NEW_MEMBER_TIMESTAMP_REFRESH_MODAL_DESCRIPTION:
          "Doing this will reset your search. Are you sure you want to continue?",
        MEMBERS_TABLE_MEMBER_SEARCH_LOADING: "Searching all members...",
        MEMBERS_TABLE_JOINED_AT_TIMESTAMP_SECONDS: "just now",
        MEMBERS_TABLE_JOINED_AT_TIMESTAMP_MINUTES:
          "{count} {count, plural, =1 {min} other {mins}} ago",
        MEMBERS_TABLE_JOINED_AT_TIMESTAMP_HOURS:
          "{count} {count, plural, =1 {hr} other {hrs}} ago",
        MEMBERS_TABLE_JOINED_AT_TIMESTAMP_DAYS:
          "{count} {count, plural, =1 {day} other {days}} ago",
        MEMBERS_TABLE_JOINED_AT_TIMESTAMP_MORE_THAN_MONTH:
          "{count} {count, plural, =1 {month} other {months}} ago",
        MEMBERS_TABLE_JOINED_AT_TIMESTAMP_MORE_THAN_YEAR:
          "{count} {count, plural, =1 {year} other {years}} ago",
        MEMBERS_TABLE_ACCOUNT_AGE_TIMESTAMP_HOURS: "<1 day ago",
        MEMBERS_TABLE_ACCOUNT_AGE_TIMESTAMP_DAYS:
          "{count} {count, plural, =1 {day} other {days}} ago",
        MEMBERS_TABLE_ACCOUNT_AGE_TIMESTAMP_MORE_THAN_MONTH:
          "{count} {count, plural, =1 {month} other {months}} ago",
        MEMBERS_TABLE_ACCOUNT_AGE_TIMESTAMP_MORE_THAN_YEAR:
          "{count} {count, plural, =1 {year} other {years}} ago",
        MEMBERS_SAFETY_UNKNOWN_INVITE_CODE: "Unknown",
        MEMBER_SAFETY_COACHMARK_TITLE: "A new Members page appears!",
        MEMBER_SAFETY_COACHMARK_DESCRIPTION:
          "View a list of new members and see who’s been marked with safety signals such as unusual DM activity.",
        MEMBER_SAFETY_COACHMARK_CTA: "Check it out",
        MEMBER_SAFETY_SIGNALS_DESCRIPTION:
          "Filter based on safety info, such as timed out or engaging in unusual DM activity.",
        MEMBER_SAFETY_ACTION_NOTICE_SELECTED_MEMBERS_MESSAGE:
          "{count, plural, one {1 member selected} other {{count} members selected}}",
        MEMBER_SAFETY_ACTION_NOTICE_CLEAR_SELECTION: "Clear selection",
        MEMBER_SAFETY_ACTION_NOTICE_BAN_ACTION: "Ban Members",
        MEMBER_SAFETY_ACTION_PERMISSIONS_MISSING: "Cannot action this member",
        MEMBER_SAFETY_CANNOT_SELECT_ALL: "There are no actionable members",
        MEMBER_SAFETY_JOIN_TYPE_UNKNOWN: "Unknown",
        MEMBER_SAFETY_JOIN_TYPE_UNKNOWN_TOOLTIP: "Join method not available",
        MEMBER_SAFETY_JOIN_TYPE_BOT: "Bot Invite",
        MEMBER_SAFETY_JOIN_TYPE_INTEGRATION: "Integration",
        MEMBER_SAFETY_JOIN_TYPE_INTEGRATION_TWITCH: "Twitch (Integration)",
        MEMBER_SAFETY_JOIN_TYPE_INTEGRATION_YOUTUBE: "YouTube (Integration)",
        MEMBER_SAFETY_JOIN_TYPE_DISCOVERY: "Server Discovery",
        MEMBER_SAFETY_JOIN_TYPE_HUB: "Student Hub",
        MEMBER_SAFETY_INVITER_TOOLTIP: "Invited by",
        MEMBER_SAFETY_INVITER_BOT_TOOLTIP: "Added by Bot",
        MEMBER_SAFETY_JOIN_TYPE_FILTER_NAME: "Other Join Methods",
        MEMBER_SAFETY_JOIN_TYPE_HUB_LABEL_NAME: "Hub",
        MEMBER_SAFETY_JOIN_TYPE_VANITY_URL_LABEL_NAME: "{vanityUrl} (Vanity)",
        MEMBER_SAFETY_JOIN_TYPE_VANITY_URL: "Vanity URL",
        MEMBER_SAFETY_JOIN_TYPE_BOT_LABEL_NAME: "Bot (OAuth2)",
        MEMBER_SAFETY_JOIN_TYPE_LABEL_NAME: "Member Joined Via",
        MEMBER_SAFETY_INVITE_CODE_: "Member Joined Via",
        MEMBER_SAFETY_INVITE_CODE_SEARCH_PLACEHOLDER: "Enter invite code...",
        MEMBER_SAFETY_JOIN_TYPE_INVITE: "Server Invite",
        MEMBER_SAFETY_JOIN_TYPE_VANITY: "Vanity URL",
        MEMBER_SAFETY_INTEGRATION_TYPE_DISCORD: "Discord",
        MEMBER_SAFETY_INTEGRATION_TYPE_TWITCH: "Twitch",
        MEMBER_SAFETY_INTEGRATION_TYPE_YOUTUBE: "YouTube",
        MEMBER_SAFETY_INTEGRATION_TYPE_GUILD_SUBSCRIPTION:
          "Server Subscription",
        MEMBER_SAFETY_UNUSUAL_ACCOUNT_ACTIVITY_TOOLTIP:
          "Engaged in suspected spam activity",
        MEMBER_SAFETY_QUARANTINED_USER_TOOLTIP:
          "User can't talk in server until they change their member name",
        MEMBER_SAFETY_DATE_OPTION_LABEL_ALL: "All",
        MEMBER_SAFETY_DATE_OPTION_LABEL_1_HOUR: "Past 1 hr",
        MEMBER_SAFETY_DATE_OPTION_LABEL_24_HOURS: "Past 24 hrs",
        MEMBER_SAFETY_DATE_OPTION_LABEL_7_DAYS: "Past 7 days",
        MEMBER_SAFETY_DATE_OPTION_LABEL_2_WEEKS: "Past 2 weeks",
        MEMBER_SAFETY_DATE_OPTION_LABEL_4_WEEKS: "Past 4 weeks",
        MEMBER_SAFETY_DATE_OPTION_LABEL_3_MONTHS: "Past 3 months",
        MEMBER_SAFETY_DATE_OPTION_LABEL_CUSTOM: "Custom Range",
        MEMBER_SAFETY_DATE_OPTION_AFTER: "After Date",
        MEMBER_SAFETY_DATE_OPTION_BEFORE: "Before Date",
        MEMBER_SAFETY_DATE_OPTION_BEFORE_ONLY: "Before {date}",
        MEMBER_SAFETY_DATE_OPTION_AFTER_ONLY: "After {date}",
        MEMBER_SAFETY_JOINED_DATE_LABEL: "Member Since Date Options",
        MEMBER_SAFETY_ACCOUNT_AGE_LABEL: "Discord Join Date Options",
        MEMBER_SAFETY_JOIN_METHOD_LABEL: "Server Join Method Options",
        MEMBER_SAFETY_GUILD_JOINED_AT_DESC: "Member Since (Newest first)",
        MEMBER_SAFETY_GUILD_JOINED_AT_ASC: "Member Since (Oldest first)",
        MEMBER_SAFETY_USER_JOINED_AT_DESC: "Joined Discord (Newest first)",
        MEMBER_SAFETY_USER_JOINED_AT_ASC: "Joined Discord (Oldest first)",
        GUILD_MEMBER_MOD_VIEW_PHONE_VERIFIED: "Phone Verified",
        GUILD_MEMBER_MOD_VIEW_AGREE_TO_RULES: "Agreed to Rules",
        GUILD_MEMBER_MOD_VIEW_INVITE_LINK: "Invite Link",
        GUILD_MEMBER_MOD_VIEW_INVITE_LINK_TOOLTIP:
          "Invite link used to join server",
        GUILD_MEMBER_MOD_VIEW_INVITE_LINK_LABEL: "Join Method",
        GUILD_MEMBER_MOD_VIEW_DISCORD_JOIN_DATE: "Discord Join Date",
        GUILD_MEMBER_MOD_VIEW_GUILD_JOIN_DATE: "Server Join Date",
        GUILD_MEMBER_MOD_VIEW_GUILD_MESSAGE_ACTIVITY_TITLE: "Server Activity",
        GUILD_SETTINGS_SAFETY_ENABLE_MODERATION_EXPERIENCE:
          "Show Members In Channel List",
        GUILD_SETTINGS_SAFETY_ENABLE_MODERATION_EXPERIENCE_DESCRIPTION:
          "Enabling this will show the members page in the channel list, allowing you to quickly see who's recently joined your server, and find any users flagged for unusual activity.",
        GUILD_SETTINGS_SAFETY_MODERATION_EXPERIENCE_ENABLED:
          "The members page has been moved to the server channel list. [Go There](onClick)",
        GUILD_SETTINGS_SAFETY_MODERATION_EXPERIENCE_IN_COMMUNITY:
          "Becoming a community will automatically enable this experience for you.",
        GUILD_ANTIRAID_SAFETY_SETUP_TITLE: "Raid Protection",
        GUILD_ANTIRAID_SAFETY_SETUP_DESCRIPTION:
          "Takes automated actions to safeguard your server from potential raids or other suspicious activity. Report a raid that we miss to improve raid protection.",
        GUILD_ANTIRAID_UPSELL_ASSET_HEADER: "Raid Protection",
        GUILD_ANTIRAID_UPSELL_HEADER: "Get Notified of Raids",
        GUILD_ANTIRAID_UPSELL_CONTENT:
          "We now protect your server from raids. Set up alerts in **Server Settings ➜ Safety Setup** to be notified.",
        GUILD_ANTIRAID_UPSELL_CTA: "Set Up",
        GUILD_ANTIRAID_UPSELL_DISMISSAL: "No Thanks",
        GUILD_ANTIRAID_NAGBAR_MESSAGE_2_NEW:
          "Unusual activity detected in {guildName}",
        GUILD_ANTIRAID_NAGBAR_RAID_MESSAGE_2_NEW:
          "Unusual join activity detected in {guildName}",
        GUILD_ANTIRAID_NAGBAR_DM_RAID_MESSAGE_2_NEW:
          "Unusual DM activity detected in {guildName}",
        GUILD_ANTIRAID_NAGBAR_RAID_BODY: "Unusual join activity",
        GUILD_ANTIRAID_NAGBAR_DM_RAID_BODY: "Unusual DM activity",
        GUILD_ANTIRAID_NAGBAR_ACTION: "Security Actions",
        GUILD_ANTIRAID_NAGBAR_EDIT_ACTION: "Edit Security Actions",
        GUILD_ANTIRAID_NAGBAR_ACTION_VIEW: "Review the Alert",
        GUILD_ANTIRAID_NAGBAR_MANAGE_ALERTS: "Manage Alerts",
        GUILD_ANTIRAID_PAUSE_DMS_NAGBAR_MESSAGE_NEW:
          "Direct messages are paused for {guildName} until {time}",
        GUILD_ANTIRAID_PAUSE_JOINS_NAGBAR_MESSAGE_NEW:
          "Joins are paused for {guildName} until {time}",
        GUILD_ANTIRAID_PAUSE_DMS_AND_JOINS_NAGBAR_MESSAGE_NEW:
          "DMs and joins are paused for {guildName} until {time}",
        GUILD_ANTIRAID_LOCKDOWN_NAGBAR_ACTION: "Edit Security Actions",
        GUILD_ANTIRAID_LOCKDOWN_FEEDBACK_DM_SPAM: "DM Spam",
        GUILD_ANTIRAID_LOCKDOWN_FEEDBACK_MENTION_SPAM: "Mention Spam",
        GUILD_ANTIRAID_LOCKDOWN_FEEDBACK_CHANNEL_SPAM: "Channel Spam",
        GUILD_ANTIRAID_LOCKDOWN_FEEDBACK_SUS_NEW_MEMBERS:
          "No harm done, but suspicious new members",
        GUILD_ANTIRAID_LOCKDOWN_FEEDBACK_CHANGING_SETTINGS:
          "Changing server and channel settings",
        GUILD_ANTIRAID_LOCKDOWN_FEEDBACK_OTHER: "Other",
        GUILD_ANTIRAID_LOCKDOWN_FEEDBACK_SUBMIT: "Submit",
        GUILD_ANTIRAID_RESOLVE_TITLE: "What happened?",
        GUILD_ANTIRAID_RESOLVE_DESCRIPTION:
          "Let your mods know how this alert was resolved. Discord will use your response to improve our alerts and tools.",
        GUILD_ANTIRAID_RESOLVE_REASON_LEGITIMATE_ACTIVITY:
          "Increased activity from normal members. No action needed.",
        GUILD_ANTIRAID_RESOLVE_REASON_DM_SPAM:
          "DM spam. Spammers were removed.",
        GUILD_ANTIRAID_RESOLVE_REASON_JOIN_RAID:
          "Join raid. Raiders were removed.",
        GUILD_ANTIRAID_EMBED_RESOLVE_REASON_NO_ACTION: "Resolved: No action",
        GUILD_ANTIRAID_EMBED_RESOLVE_REASON_DM_SPAM: "Resolved: DM spam",
        GUILD_ANTIRAID_EMBED_RESOLVE_REASON_JOIN_RAID: "Resolved: Join raid",
        GUILD_ANTIRAID_EMBED_RESOLVE_REASON_OTHER: "Resolved: Other",
        GUILD_SERVER_LOCKDOWN_TITLE: "Security Actions",
        GUILD_SERVER_LOCKDOWN_DURATION_PLACEHOLDER: "Select a time",
        GUILD_SERVER_LOCKDOWN_DURATION_1_HOUR: "1 hour",
        GUILD_SERVER_LOCKDOWN_DURATION_2_HOURS: "2 hours",
        GUILD_SERVER_LOCKDOWN_DURATION_4_HOURS: "4 hours",
        GUILD_SERVER_LOCKDOWN_DURATION_6_HOURS: "6 hours",
        GUILD_SERVER_LOCKDOWN_DURATION_12_HOURS: "12 hours",
        GUILD_SERVER_LOCKDOWN_DURATION_24_HOURS: "24 hours",
        GUILD_SERVER_LOCKDOWN_MODAL_CTA: "Save",
        GUILD_SERVER_LOCKDOWN_CONTEXT_MENU_LOCK: "Security Actions",
        GUILD_SERVER_LOCKDOWN_CONTEXT_MENU_UNLOCK: "Edit Security Actions",
        GUILD_INVITE_DISABLE_ACTION_SHEET_DESCRIPTION:
          "Temporarily stop new members from joining this server via invite or vanity links.",
        GUILD_DMS_DISABLE_ACTION_SHEET_DESCRIPTION:
          "Temporarily stop new direct messages from being sent between members in your server. Friends can still DM each other, moderators can still DM members, and your Apps can still DM members.",
        GUILD_SERVER_LOCKDOWN_FEEDBACK_DESCRIPTION:
          "Why was this server locked?",
        GUILD_SERVER_LOCKDOWN_ENABLED_SYSTEM_MESSAGE:
          "$[!!{username}!!](usernameHook) enabled security actions in !!{guildName}!! until {time}.",
        GUILD_SERVER_LOCKDOWN_DISABLED_SYSTEM_MESSAGE:
          "$[!!{username}!!](usernameHook) disabled security actions.",
        GUILD_SERVER_LOCKDOWN_ENABLED_SYSTEM_MESSAGE_MOBILE:
          "[!!{username}!!](usernameOnClick) enabled security actions in !!{guildName}!! until {time}.",
        GUILD_SERVER_LOCKDOWN_DISABLED_SYSTEM_MESSAGE_MOBILE:
          "[!!{username}!!](usernameOnClick) disabled security actions.",
        GUILD_RAID_REPORT_SYSTEM_MESSAGE:
          "$[!!{username}!!](usernameHook) reported a raid in !!{guildName}!!.",
        GUILD_REPORT_FALSE_ALARM_SYSTEM_MESSAGE:
          "$[!!{username}!!](usernameHook) resolved an Activity Alert in !!{guildName}!!.",
        GUILD_RAID_REPORT_SYSTEM_MESSAGE_MOBILE:
          "[!!{username}!!](usernameOnClick) reported a raid in !!{guildName}!!.",
        GUILD_REPORT_FALSE_ALARM_SYSTEM_MESSAGE_MOBILE:
          "[!!{username}!!](usernameOnClick) resolved an Activity Alert in !!{guildName}!!.",
        GUILD_SERVER_LOCKDOWN_ENABLED_NOTIFICATION:
          "!!{username}!! enabled security actions for !!{guildName}!! until {time}",
        GUILD_SERVER_LOCKDOWN_DISABLED_NOTIFICATION:
          "!!{username}!! disabled security actions for !!{guildName}!!",
        GUILD_SERVER_RAID_ALERT_NOTIFICATION:
          "Unusual activity detected in !!{guildName}!!",
        GUILD_RAID_REPORT_NOTIFICATION:
          "!!{username}!! reported a raid in !!{guildName}!!",
        GUILD_SERVER_LOCKDOWN_ENABLED_SYSTEM_MESSAGE_SHORT:
          "$[!!{username}!!](usernameHook) enabled security actions until {time}.",
        GUILD_SERVER_LOCKDOWN_ENABLED_SYSTEM_MESSAGE_MOBILE_SHORT:
          "[!!{username}!!](usernameOnClick) enabled security actions until {time}.",
        GUILD_RAID_REPORT_SYSTEM_MESSAGE_SHORT:
          "$[!!{username}!!](usernameHook) reported a raid in !!{guildName}!!.",
        GUILD_REPORT_FALSE_ALARM_SYSTEM_MESSAGE_SHORT:
          "$[!!{username}!!](usernameHook) resolved an Activity Alert.",
        GUILD_REPORT_FALSE_ALARM_SYSTEM_MESSAGE_MOBILE_SHORT:
          "[!!{username}!!](usernameOnClick) resolved an Activity Alert.",
        GUILD_COMMUNITY_ALERTS_HEADER: "Community Activity Alerts",
        GUILD_COMMUNITY_ALERTS_DESCRIPTION:
          "Receive notifications for DM or join activity that exceeds usual numbers for your server.",
        GUILD_COMMUNITY_ALERTS_CHOOSE_SERVER: "Choose a Server",
        GUILD_COMMUNITY_ALERTS_NAG_HEADER: "In-app alerts",
        GUILD_COMMUNITY_ALERTS_NAG_DESCRIPTION:
          "A global bar that appears across the top of Discord when you are using it, regardless of what channel or server you're in at the time.",
        GUILD_COMMUNITY_ALERTS_PUSH_HEADER: "Push notifications",
        GUILD_COMMUNITY_ALERTS_PUSH_DESCRIPTION:
          "Sends to mobile or desktop devices when you are not using Discord.",
        GUILD_MENTION_RAID_LIMIT_UPSELL_ASSET_HEADER: "Raid Protection",
        GUILD_MENTION_RAID_LIMIT_UPSELL_HEADER: "Mention Raid Protections",
        GUILD_MENTION_RAID_LIMIT_UPSELL_CONTENT:
          "We now slow down unusual surges in mentions to prevent raids. Choose roles or channels to be exempt and where alerts can go.",
        GUILD_MENTION_RAID_LIMIT_UPSELL_CTA: "Set up",
        GUILD_MENTION_RAID_LIMIT_UPSELL_DISMISSAL: "Got it",
        GUILD_ANTIRAID_SAFETY_SETUP_ENABLE_TIP:
          "In order to enable activity alerts, your server must set a **Safety Notification Channel** for these notifcations. You can do that in your [Community Settings ➜ Overview](onClick)",
        GUILD_ANTIRAID_SAFETY_SETUP_ERROR:
          "Something went wrong when enabling alerts. Please try again later.",
        GUILD_ANTIRAID_SAFETY_JOIN_RAIDS_TITLE: "Join Raids",
        GUILD_ANTIRAID_SAFETY_MENTION_RAIDS_TITLE: "Mention Raids",
        GUILD_ANTIRAID_SETTING_PROTECTION_LABEL: "Protection",
        GUILD_ANTIRAID_SETTING_ENABLED: "Enabled",
        GUILD_ANTIRAID_SETTING_ENABLED_ALERTS: "Enabled + Alerts",
        GUILD_ANTIRAID_SETTING_CHANNEL_NONE_LABEL: "Raid Alerts",
        GUILD_ANTIRAID_SETTING_CHANNEL_LABEL: "Alert Channel",
        GUILD_ANTIRAID_SETTING_CHANNEL_NONE: "None",
        GUILD_ANTIRAID_RAID_ALERT: "Raid Alert",
        GUILD_ANTIRAID_SAFETY_SETUP_NO_EXPERIMENT_ACTION: "Protection Enabled",
        GUILD_ANTIRAID_SAFETY_SETUP_CHANNEL_SETUP_ACTION: "Setup Alerts",
        GUILD_ANTIRAID_SAFETY_SETUP_IN_AUTOMOD_ACTION: "Setup in AutoMod",
        GUILD_ANTIRAID_SAFETY_SETUP_CHANNEL_MANAGE_ACTION: "Manage Alerts",
        GUILD_ANTIRAID_SAFETY_CHANNEL_TITLE: "Safety Notifications Channel",
        GUILD_ANTIRAID_SAFETY_CHANNEL_DESCRIPTION:
          "This is the channel where Discord will send you important safety updates about your server. As some info might be sensitive, we recommend selecting a role-restricted channel.",
        GUILD_ANTIRAID_SAFETY_SETUP_CHANNEL_MODAL_TITLE: "Join Raid Alerts",
        GUILD_ANTIRAID_SAFETY_SETUP_CHANNEL_MODAL_ENABLE_ALERTS:
          "Enable Alerts",
        GUILD_ANTIRAID_SAFETY_SETUP_CHANNEL_MODAL_DESCRIPTION:
          "Choose a channel to post raid notifications to. Each notification will contain information about the raid, including time period, and approximate number of join attempts.",
        GUILD_ANTIRAID_SAFETY_SETUP_CHANNEL_MODAL_CHANNEL_PERMISSIONS_NOTICE:
          "Anyone with access to this text channel will be able to see the notifications.",
        GUILD_SETTINGS_SAFETY_SETUP_HEADER: "Safety Setup",
        GUILD_SETTINGS_SAFETY_OVERVIEW_NUM_ENABLED:
          "{enabled, number} of {total, number} enabled",
        GUILD_SETTINGS_SAFETY_CAPTCHA_RAID_PROTECTION:
          "Raid Protection and CAPTCHA",
        GUILD_SETTINGS_SAFETY_DM_SPAM_PROTECTION: "DM and Spam Protection",
        GUILD_SETTINGS_SAFETY_ON_BY_DEFAULT: "This feature is on by default",
        GUILD_SETTINGS_SAFETY_RAID_ALERTS_TITLE: "Activity Alerts",
        GUILD_SETTINGS_SAFETY_RAID_ALERTS_DESCRIPTION:
          "Receive notifications for DM or join activity that exceeds usual numbers for your server. Each notification will contain information about the activity, including time period and approximate number of joins or DMs.",
        GUILD_SETTINGS_SAFETY_RULES_SCREENING:
          "Members must accept rules before they can talk or DM",
        GUILD_SETTINGS_SAFETY_RULES_EDIT_SUBTITLE:
          "Set up rules that new members must explicitly agree to before they can talk, react, or DM other members. Granting a role to a new member will bypass this requirement.",
        GUILD_SETTINGS_SAFETY_RULES_FORM_PILL: "Accept the rules",
        GUILD_SETTINGS_SAFETY_VERIFICATION_DESCRIPTION:
          "Members of the server must meet the following criteria before they can send messages. If a member has an assigned role this does not apply.",
        GUILD_SETTINGS_SAFETY_NOTIFICATIONS_CHANNEL_DESCRIPTION:
          "Anyone with access to this text channel will be able to see the notifications.",
        GUILD_SETTINGS_SAFETY_RAID_CAPTCHA:
          "CAPTCHA suspicious accounts before they are able to join",
        GUILD_SETTINGS_SAFETY_RAID_CAPTCH_RAID:
          "CAPTCHA all accounts before they can join during a suspected raid",
        GUILD_SETTINGS_SAFETY_SPAM_SUSPICIOUS_DMS:
          "Hide DMs from suspicious users",
        GUILD_SETTINGS_SAFETY_SPAM_SUSPICIOUS_DMS_DESCRIPTION:
          "Send suspicious DMs to a separate Spam Inbox. Members can send a scam report or move it back to Inbox.",
        GUILD_SETTINGS_SAFETY_SPAM_DM_NON_FRIENDS:
          "Filter DMs from unknown users",
        GUILD_SETTINGS_SAFETY_SPAM_DM_NON_FRIENDS_DESCRIPTION:
          "Filter DMs from unknown users to Message Requests Inbox. Members must approve the request before they are able to respond.",
        GUILD_SETTINGS_SAFETY_SPAM_SUSPICIOUS_LINKS:
          "Warn members before they visit outbound links",
        GUILD_SETTINGS_SAFETY_SPAM_DM_SUSPCIOUS_MESSAGES:
          "Hide all messages from and delete suspected spammers",
        GUILD_SETTINGS_SAFETY_EVERYONE_RISKY_PERMISSIONS:
          "Remove risky permissions from @everyone",
        GUILD_SETTINGS_SAFETY_EVERYONE_RISKY_PERMISSIONS_DETAILS:
          "@everyone currently has {numPerms, number} risky permissions enabled",
        GUILD_SETTINGS_SAFETY_UPDATES_HEADER: "Recent updates",
        GUILD_SETTINGS_SAFETY_UPDATES_LINE_1:
          "Looking for Rule Screening, Verification Level, or Automod? We've re-organized them into this page",
        GUILD_SETTINGS_SAFETY_UPDATES_LINE_2:
          "We've also added a lot of safety tooling you can check out below. Some highlights:",
        GUILD_SETTINGS_SAFETY_UPDATES_ITEM_1:
          "CAPTCHA is intelligently verifying joiners",
        GUILD_SETTINGS_SAFETY_UPDATES_ITEM_2:
          "Suspicious joiners are automatically blocked during suspected raids",
        GUILD_SETTINGS_SAFETY_UPDATES_ITEM_3:
          "We warn users before they follow any suspicious outbound links",
        GUILD_SETTINGS_SAFETY_UPDATES_ITEM_4:
          "We send suspected spam DMs to a special Requests inbox",
        SAFETY_REMOVE_RISKY_PERMS_MODAL_TITLE: "Remove risky permissions",
        SAFETY_REMOVE_RISKY_PERMS_MODAL_SUBTITLE:
          "With one easy click you can disable risky permissions for the @everyone role",
        SAFETY_REMOVE_RISKY_PERMS_ARIA_LABEL: "Item incomplete",
        SAFETY_REMOVE_RISKY_PERMS_ARIA_LABEL_COMPLETE: "Item completed",
        SAFETY_REMOVE_RISKY_PERMS_WARNING:
          "Cannot disable risky permissions because this would revoke your own permissions.",
        GUILD_ONBOARDING_UPSELL_SAFETY_TITLE: "Let's confirm your safety setup",
        GUILD_ONBOARDING_UPSELL_SAFETY_TITLE_TOOLTIP:
          "Discord Raid and DM protection is active. Enable any additional Automod settings now.",
        GUILD_SETTINGS_SAFETY_MFA_NON_OWNER_TOOLTIP:
          "This setting can only be changed by a server owner with 2FA enabled on their account.",
        GUILD_SETTINGS_SAFETY_MFA_OWNER_TOOLTIP:
          "To change this setting, first enable 2FA on your account.",
        GUILD_SETTINGS_SAFETY_MFA_BODY:
          "Moderators must have two-factor authentication enabled to ban, kick, or timeout members and delete messages.",
        GUILD_SETTINGS_SAFETY_MFA_NON_OWNER_DETAIL:
          "Only the server owner can change this setting if they have 2FA enabled.",
        GUILD_SETTINGS_SAFETY_MFA_OWNER_DETAIL:
          "To change this setting, first enable 2FA on your account [here](settingsHook).",
        GUILD_SETTINGS_SAFETY_MFA_DISCOVERABLE_DISABLED_TOOLTIP:
          "2FA is required while this server is in Server Discovery",
        GUILD_SETTINGS_SAFETY_PERMISSIONS_TITLE: "Permissions",
        GUILD_SETTINGS_ACTION_FILTER_AUTOMOD_RULE_CREATE: "Create AutoMod Rule",
        GUILD_SETTINGS_ACTION_FILTER_AUTOMOD_RULE_UPDATE: "Update AutoMod Rule",
        GUILD_SETTINGS_ACTION_FILTER_AUTOMOD_RULE_DELETE: "Cancel AutoMod Rule",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_CREATE:
          "$[**!!{user}!!**](userHook) created AutoMod rule $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_UPDATE:
          "$[**!!{user}!!**](userHook) updated AutoMod rule $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_DELETE:
          "$[**!!{user}!!**](userHook) deleted AutoMod rule $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_NAME_UPDATE:
          "Set the name to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_TRIGGER_TYPE_UPDATE:
          "Set the trigger type to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_EVENT_TYPE_UPDATE:
          "Set the event type to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_ACTIONS_UPDATE:
          "Set actions to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_TRIGGER_METADATA_UPDATE:
          "Set trigger metadata **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_TRIGGER_METADATA_KEYWORDS_UPDATE:
          "keywords to {newValue}",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_ADD_KEYWORDS:
          "added keywords **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_REMOVE_KEYWORDS:
          "removed keywords **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_ADD_REGEX_PATTERNS:
          "added regex patterns **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_REMOVE_REGEX_PATTERNS:
          "removed regex patterns **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_ADD_ALLOW_LIST:
          "added allow list keywords **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_REMOVE_ALLOW_LIST:
          "removed allow list keywords **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_KEYWORDS_ADD:
          "added keywords **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_KEYWORDS_REMOVED:
          "removed keywords **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_ENABLED_UPDATE: "Enabled rule",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_DISABLED_UPDATE: "Disabled rule",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_EXEMPT_ROLES_UPDATE:
          "Set exempt roles to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_EXEMPT_CHANNELS_UPDATE:
          "Set exempt channels to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_AUTOMOD_RULE_NONE: "None",
        GUILD_AUTOMOD_CHATBLOCKER_PROFILE_INVALID_GENERAL_MOBILE:
          "Your server profile contains words that are not allowed.",
        GUILD_AUTOMOD_CHATBLOCKER_PROFILE_INVALID_GENERAL_DESCRIPTION_MOBILE:
          "**!!{guildName}!!** wants you to update your server profile so you can start chatting.",
        GUILD_AUTOMOD_PROFILE_INVALID_MODAL_TITLE_MOBILE:
          "Your server profile contains words that are not allowed in **!!{guildName}!!**",
        GUILD_AUTOMOD_USERNAME_INVALID_MODAL_DESCRIPTION_MOBILE:
          "Your \"Username\" violate this server's guidelines. You'll have to update your server profile before you can start chatting.",
        GUILD_AUTOMOD_BIO_INVALID_MODAL_DESCRIPTION_MOBILE:
          "Your \"About Me\" violate this server's guidelines. You'll have to update your server profile before you can start chatting.",
        GUILD_AUTOMOD_USERNAME_INVALID_NO_PERMS_MODAL_DESCRIPTION_MOBILE:
          "Your \"Username\" violate this server's guidelines. You'll have to change it before you can start chatting.",
        GUILD_AUTOMOD_PROFILE_INVALID_DESCRIPTION:
          "Please update your server profile to start chatting in this community.",
        GUILD_AUTOMOD_PROFILE_INVALID_NO_PERMS_DESCRIPTION:
          "Please update your username to start chatting in this community.",
        GUILD_AUTOMOD_UPDATE_PROFILE_CTA: "Update Server Profile",
        GUILD_AUTOMOD_UPDATE_ACCOUNT_USERNAME_CTA: "Update Username",
        GUILD_AUTOMOD_POST_TO_CHANNEL_HEADER_BLOCK_NICKNAME_UPDATE:
          "blocked a nickname update",
        GUILD_AUTOMOD_POST_TO_CHANNEL_HEADER_BLOCK_NICKNAME_RESET:
          "blocked a nickname reset",
        GUILD_AUTOMOD_POST_TO_CHANNEL_HEADER_QUARANTINE_USER_ON_GUILD_JOIN:
          "quarantined a member at server join",
        GUILD_AUTOMOD_POST_TO_CHANNEL_HEADER_BLOCK_GUEST_ON_GUILD_JOIN:
          "blocked a guest at server join",
        GUILD_AUTOMOD_POST_TO_CHANNEL_HEADER_QUARANTINE_USER_MESSAGE_SEND:
          "quarantined a member at message send",
        GUILD_AUTOMOD_POST_TO_CHANNEL_HEADER_QUARANTINE_USERNAME_UPDATE:
          "quarantined a member at username update",
        GUILD_AUTOMOD_PROFILE_ERROR_QUARANTINE_USERNAME:
          "Your nickname contains words flagged by this community.",
        GUILD_AUTOMOD_PROFILE_ERROR_QUARANTINE_USERNAME_IN_GUILD:
          "Your username contains words flagged in {guildName}.",
        GUILD_AUTOMOD_PROFILE_ERROR_QUARANTINE_BIO:
          "Your bio contains words flagged by this community.",
        AUTOMOD_USER_PROFILE_UPSELL_HEADER: "Block Bad Usernames",
        AUTOMOD_USER_PROFILE_UPSELL_CONTENT:
          "Filter out Bad Words in Usernames in **Server Settings > Automod.**",
        GUILD_AUTOMOD_USER_PROFILE_FILTER_NAME:
          "Block Words in Member Profile Names",
        GUILD_AUTOMOD_USER_PROFILE_FILTER_DESCRIPTION:
          "Block specific language in your member's usernames.",
        GUILD_AUTOMOD_ACTIONS_QUARANTINE_USER: "Block member interactions",
        GUILD_AUTOMOD_ACTIONS_QUARANTINE_USER_DESCRIPTION:
          "Prevents a member from using text, voice, or other interactions.",
        GUILD_AUTOMOD_NAGBAR_QUARANTINED_USER_PROFILE:
          "Please update your server profile to start chatting in this community.",
        GUILD_AUTOMOD_NAGBAR_QUARANTINED_USER_PROFILE_NO_PERMS:
          "Please update your username to start chatting in this community.",
        GUILD_AUTOMOD_NAGBAR_QUARANTINED_USER_PROFILE_CTA:
          "Update Server Profile",
        GUILD_AUTOMOD_NAGBAR_QUARANTINED_ACCOUNT_USERNAME_CTA:
          "Update Username",
        GUILD_AUTOMOD_RULE_DELETE_ERROR_CONFIRM_MODAL_HEADER:
          "Cannot delete rule",
        GUILD_AUTOMOD_RULE_DELETE_ERROR_CONFIRM_MODAL_BODY:
          "The Mention Spam AutoMod rule cannot be deleted from community servers. Please disable the rule instead.",
        GUILD_REPORT_RAID_BUTTON_TITLE: "Report Raid",
        GUILD_REPORT_RAID_MODAL_TITLE: "Report a Raid",
        GUILD_REPORT_RAID_MODAL_DESCRIPTION:
          "Which behavior best describes how this raid is currently disrupting your server? [Learn more about raids]({helpArticle})",
        GUILD_REPORT_RAID_MODAL_DESCRIPTION_CLICKABLE:
          "Which behavior best describes how this raid is currently disrupting your server? [Learn more about raids](onClick)",
        GUILD_REPORT_RAID_MODAL_CHOICE_MESSAGE_SPAM: "Spamming channels",
        GUILD_REPORT_RAID_MODAL_CHOICE_DM_SPAM: "Spamming DMs",
        GUILD_REPORT_RAID_MODAL_CHOICE_MENTION_SPAM: "Spamming mentions",
        GUILD_REPORT_RAID_MODAL_CHOICE_SUSPICIOUS_USERS:
          "Nothing yet, but suspicious new members",
        GUILD_REPORT_RAID_MODAL_CHOICE_SETTINGS_SPAM:
          "Changing server and channel settings",
        ENABLE_COMMUNITY_MODAL_UPDATED_SETTINGS_LABEL: "Safe settings",
        ENABLE_COMMUNITY_MODAL_DEFAULT_NOTIFICATIONS_LABEL:
          "Set default settings to Mentions Only $[info](infoHook)",
        ENABLE_COMMUNITY_MODAL_DEFAULT_NOTIFICATIONS_LABEL_MOBILE:
          "Set default settings to Mentions Only",
        ENABLE_COMMUNITY_MODAL_EVERYONE_ROLE_PERMISSION_LABEL_UPDATED:
          "Disable risky permissions for",
        ENABLE_COMMUNITY_MODAL_EVERYONE_ROLE_PERMISSION_LABEL_MOBILE:
          "Disable risky permissions for **@everyone** role",
        ENABLE_COMMUNITY_MODAL_EVERYONE_ROLE_PERMISSION_DISABLED_TOOLTIP:
          "This permission will be disabled",
        ENABLE_COMMUNITY_MODAL_EVERYONE_ROLE_PERMISSION_MENTION_EVERYONE:
          "Mention @everyone",
        ENABLE_COMMUNITY_MODAL_EVERYONE_ROLE_PERMISSION_CREATE_EMOJI:
          "Create Emoji",
        ENABLE_COMMUNITY_MODAL_EVERYONE_ROLE_PERMISSION_MANAGE_EMOJI:
          "Manage Emoji",
        ENABLE_COMMUNITY_MODAL_PUBLIC_GUILD_POLICY_TITLE:
          "Abide by the guidelines",
        DISABLE_UNSAFE_DEFAULT_PERMISSIONS_NOTICE_HEADER: "Stop @everyone spam",
        DISABLE_UNSAFE_DEFAULT_PERMISSIONS_NOTICE_SUBHEADER:
          "With one easy click you can disable risky permissions for the @everyone role.",
        DISABLE_UNSAFE_DEFAULT_PERMISSIONS_NOTICE_CONFIRMATION:
          "Yes, keep me safe",
        DISABLE_UNSAFE_DEFAULT_PERMISSIONS_NOTICE_DISMISS: "No, thanks",
        DISABLE_UNSAFE_DEFAULT_PERMISSIONS_NOTICE_CONFIRMATION_DONE: "Done",
        DISABLE_UNSAFE_DEFAULT_PERMISSIONS_ENABLED_PERMISSIONS:
          "Currently Enabled",
        DISABLE_UNSAFE_DEFAULT_PERMISSIONS_DISABLED_PERMISSIONS:
          "Currently Disabled",
        DISABLE_UNSAFE_DEFAULT_PERMISSIONS_DISABLING_PERMISSIONS:
          "Disabling risky permissions...",
        DISABLE_UNSAFE_DEFAULT_PERMISSIONS_DISABLED:
          "All risky permissions disabled!",
        UPDATE_COMMUNICATION_NOTIFICATIONS_HEADER:
          "Members are muting your server",
        UPDATE_COMMUNICATION_NOTIFICATIONS_SUBHEADER:
          "They're getting a notification for every message! Let's change the notification settings so they don't get overwhelmed and stay engaged.",
        UPDATE_COMMUNICATION_NOTIFICATIONS_CONFIRMATION:
          "Yes, change the default",
        AGGREGATE_PREMIUM_UPSELL_HEADER_CUSTOM_PROFILES:
          "Express yourself more with customized profiles",
        AGGREGATE_PREMIUM_UPSELL_HEADER_EMOJI:
          "Use your favorite emoji everywhere",
        AGGREGATE_PREMIUM_UPSELL_HEADER_HD_STREAMING:
          "Stream in sweet, sweet HD like the pros",
        AGGREGATE_PREMIUM_UPSELL_HEADER_LARGER_FILE_UPLOAD:
          "Share what you want, with who you want",
        LARGER_FILE_UPLOAD_SIDEBAR_TITLE: "Upload larger files",
        ANIMATED_EMOJI_SIDEBAR_TITLE: "Express more with emoji",
        HD_VIDEO_STREAMING_SIDEBAR_TITLE: "Stream in HD",
        CUSTOM_PROFILES_SIDEBAR_TITLE: "Customize your profile",
        CUSTOM_PROFILES_DESCRIPTION_BULLETED:
          "* Animate your avatars\n\n* Turn your favorite GIFs and images into banners\n\n* Make different profiles for each server\n\n* Choose the numbers in your username",
        HD_VIDEO_STREAMING_DESCRIPTION:
          "Say goodbye to pixels and hello to higher stream quality. Nitro lets you stream gameplay with friends in crisp, smooth HD (1080p and up) at 60 FPS.",
        ANIMATED_EMOJI_DESCRIPTION_BULLETED:
          "* Unlock all custom emoji from servers you join\n\n* Use all of them, anywhere you want\n\n* Upload animated emoji to servers you own, with 50 extra slots to play with",
        LARGER_FILE_UPLOAD_DESCRIPTION:
          "Nitro lets you upload files up to 100MB. Share longer clips, higher quality photos, bigger documents, and more!",
        LARGER_FILE_UPLOAD_DESCRIPTION_INCREASE:
          "Nitro lets you upload files up to {premiumMaxSize}. Share longer clips, higher quality photos, bigger documents, and more!",
        AGGREGATE_PREMIUM_UPSELL_CTA: "Get Nitro",
        AGGREGATE_PREMIUM_UPSELL_LEARN_MORE_CTA: "Explore more Nitro perks",
        DONUT_GET_ANDROID_BETA: "Get the Beta on Google Play",
        DONUT_GET_ANDROID_BETA_TITLE: "Wait! You need the beta app.",
        DONUT_GET_ANDROID_BETA_BODY:
          "To use all of the available features, you'll need to be using the beta Discord app for Android.\n\n[Learn more about joining the beta.]({helpArticle})",
        CONSOLE_STREAMING: "Streaming from console",
        CONSOLE_STREAMING_TOOLTIP:
          "You're streaming! Stream not viewable from your other devices",
        CONSOLE_STREAM_UNAVAILABLE: "Unavailable while connected via console",
        CONSOLE_STREAM_UNAVAILABLE_TOOLTIP:
          "Streams are not viewable while connected via console",
        PROACTIVE_UPSELL_CUSTOM_PROFILE:
          "Get custom profiles like this __with Nitro__",
        CONNECTIONS_ADD_CONNECTIONS: "Add Connection",
        CONNECTIONS_VIEW_MORE: "View more",
        CONNECTIONS_EBAY_TOP_RATED_SELLER: "Top Rated Seller",
        CONNECTIONS_EBAY_POSITIVE_FEEDBACK_PERCENTAGE:
          "Percentage of Positive Ratings",
        CONNECTIONS_EBAY_UNIQUE_POSITIVE_FEEDBACK_COUNT:
          "Positive Feedback Reviews",
        CONNECTIONS_EBAY_UNIQUE_NEGATIVE_FEEDBACK_COUNT:
          "Negative Feedback Reviews",
        CONNECTIONS_PAYPAL_VERIFIED: "Verified Bank Account",
        CONNECTIONS_REDDIT_KARMA: "Karma",
        CONNECTIONS_REDDIT_GOLD: "Gold",
        CONNECTIONS_REDDIT_MOD: "Mod",
        CONNECTIONS_STEAM_GAMES: "Games",
        CONNECTIONS_STEAM_ITEMS:
          "{count, plural, =1 {**#** item} other {**#** items}}",
        CONNECTIONS_STEAM_DOTA2: "DOTA 2",
        CONNECTIONS_STEAM_TF2: "Team Fortress 2",
        CONNECTIONS_STEAM_TOOLTIP:
          "Make sure your Steam profile is set to public before connecting.",
        CONNECTIONS_TWITTER_STATUSES: "Posts",
        CONNECTIONS_TWITTER_FOLLOWERS: "Followers",
        CONNECTIONS_TIKTOK_VERIFIED: "Verified",
        CONNECTIONS_TIKTOK_FOLLOWERS: "Followers",
        CONNECTIONS_TIKTOK_FOLLOWING: "Following",
        CONNECTIONS_TIKTOK_LIKES: "Likes",
        CONNECTIONS_INSTAGRAM_POSTS: "Posts",
        CONNECTIONS_ROLE_RULE_ACCOUNT_AGE:
          "{days, plural, =1 {# day} other {# days}} old account",
        CONNECTIONS_ROLE_RULE_EBAY_POSITIVE_FEEDBACK_PERCENTAGE:
          "{value}% Positive Ratings",
        CONNECTIONS_ROLE_RULE_EBAY_UNIQUE_POSITIVE_FEEDBACK_COUNT:
          "{count, plural, =1 {# Positive Feedback Review} other {# Positive Feedback Reviews}}",
        CONNECTIONS_ROLE_RULE_EBAY_UNIQUE_NEGATIVE_FEEDBACK_COUNT:
          "{count, plural, =1 {# Negative Feedback Review} other {# Negative Feedback Reviews}}",
        CONNECTIONS_ROLE_RULE_PAYPAL_VERIFIED: "verified bank account",
        CONNECTIONS_ROLE_RULE_REDDIT_KARMA: "{karma, number} Karma",
        CONNECTIONS_ROLE_RULE_REDDIT_GOLD: "Reddit Gold",
        CONNECTIONS_ROLE_RULE_REDDIT_MODERATOR: "a subreddit moderator",
        CONNECTIONS_ROLE_RULE_STEAM_GAMES:
          "{count, plural, =1 {# game} other {# games}} in library",
        CONNECTIONS_ROLE_RULE_STEAM_TF2_ITEMS:
          "{count, plural, =1 {# Team Fortress 2 item} other {# Team Fortress 2 items}} in inventory",
        CONNECTIONS_ROLE_RULE_STEAM_DOTA2_ITEMS:
          "{count, plural, =1 {# DOTA 2 item} other {# DOTA 2 items}} in inventory",
        CONNECTIONS_ROLE_RULE_TWITTER_FOLLOWERS:
          "{count, plural, =1 {# follower} other {# followers}}",
        CONNECTIONS_ROLE_RULE_TWITTER_STATUSES:
          "{count, plural, =1 {# post} other {# posts}}",
        CONNECTIONS_ROLE_RULE_TWITTER_VERIFIED: "verified",
        CONNECTIONS_ROLE_RULE_INSTAGRAM_POSTS:
          "{count, plural, =1 {# post} other {# posts}}",
        CONNECTIONS_ROLE_RULE_GENERIC:
          "!!{description}!! - **{count, number}**",
        CONNECTIONS_ROLE_RULE_TIKTOK_VERIFIED: "verified",
        CONNECTIONS_ROLE_RULE_TIKTOK_FOLLOWER_COUNT:
          "{count, plural, =1 {# follower} other {# followers}}",
        CONNECTIONS_ROLE_RULE_TIKTOK_FOLLOWING_COUNT:
          "{count, plural, =1 {# following} other {# following}}",
        CONNECTIONS_ROLE_RULE_TIKTOK_LIKES_COUNT:
          "{count, plural, =1 {# like} other {# likes}}",
        CONNECTIONS_PROFILE_MEMBER_SINCE: "Member since {date}",
        CONNECTIONS_PROFILE_REDDIT_KARMA: "**{value}** Karma",
        CONNECTIONS_PROFILE_STEAM_GAMES: "**{value}** Games",
        CONNECTIONS_PROFILE_TWITTER_FOLLOWERS: "**{value}** Followers",
        CONNECTIONS_PROFILE_TWITTER_STATUSES: "**{value}** Posts",
        CONNECTIONS_PROFILE_EBAY_POSITIVE_FEEDBACK_PERCENTAGE:
          "**{value}** Positive Ratings",
        CONNECTIONS_PROFILE_TIKTOK_FOLLOWERS: "**{value}** Followers",
        CONNECTIONS_PROFILE_TIKTOK_FOLLOWING: "**{value}** Following",
        CONNECTIONS_PROFILE_TIKTOK_LIKES: "**{value}** Likes",
        CONNECTIONS_PROFILE_INSTAGRAM_POSTS: "**{value}** Posts",
        CONNECTIONS_PROFILE_GENERIC_VANITY_METRIC: "**{value}** {name}",
        CONNECTIONS_PROFILE_POWERED_BY: "Powered by $[](applicationHook)",
        CONNECTIONS_ROLE_POPOUT_MUST_HAVE_A: "A $[](platformQuantityHook)",
        CONNECTIONS_ROLE_POPOUT_MUST_HAVE_AT_LEAST:
          "At least $[](platformQuantityHook)",
        CONNECTIONS_ROLE_POPOUT_MUST_HAVE_AT_MOST:
          "At most $[](platformQuantityHook)",
        CONNECTIONS_ROLE_POPOUT_MUST_BE: "Is $[](platformQuantityHook)",
        CONNECTIONS_ROLE_POPOUT_MUST_NOT_BE: "Is not $[](platformQuantityHook)",
        CONNECTIONS_ROLE_POPOUT_VIEW_ALL: "View all",
        CONNECTIONS_ROLE_POPOUT_CLICK_TO_VIEW: "Click to view",
        CONNECTIONS_ROLE_POPOUT_HEADER_ALL:
          "Has linked **all** of the following accounts:",
        CONNECTIONS_ROLE_POPOUT_HEADER_OR:
          "Has linked **at least one** of the following accounts:",
        CONNECTIONS_ROLE_POPOUT_HEADER_ONE: "Has linked the following account:",
        CONNECTIONS_ROLE_POPOUT_GET_ROLES: "Get Linked Roles",
        CONNECTIONS_ROLE_POPOUT_VIEW_CONNECTIONS: "View Connections",
        CONNECTIONS_ROLE_OFFICIAL_ICON_TOOLTIP: "Official",
        CONNECTIONS_USER_SETTINGS_CONNECT_ACCOUNTS_HEADER:
          "Add accounts to your profile",
        CONNECTIONS_USER_SETTINGS_CONNECT_ACCOUNTS_DESCRIPTION:
          "This information will not be shared outside of Discord without your permission, and is used in accordance with Discord’s [Privacy Policy]({privacyPolicyUrl}).",
        CONNECTIONS_ROLES_CHANNEL_NAME: "Linked Roles",
        CONNECTIONS_ROLES_CHANNEL_CALL_TO_ACTION_LEARN_MORE:
          "Connect your accounts or apps to get Linked Roles in this server. [Learn more]({helpdeskArticleUrl}).",
        CONNECTIONS_ROLES_CHANNEL_CONNECTIONS_REQUIRED:
          "Requires {count, plural, =1 {# connection} other {# connections}}",
        CONNECTIONS_ROLES_CHANNEL_LEAVE_VERIFIED_ROLE: "Leave Linked Role",
        CONNECTIONS_ROLES_CHANNEL_LEAVE_VERIFIED_ROLE_INFO:
          "You might lose access to certain channels and permissions if you leave this role.",
        CONNECTIONS_ROLES_CHANNEL_LEAVE_VERIFIED_ROLE_MOBILE: "Leave Role",
        CONNECTIONS_CONNECT_ACCOUNTS_MODAL_MANAGE_CONNECTIONS:
          "Manage Connections",
        CONNECTIONS_CONNECT_ACCOUNTS_MODAL_MUST_HAVE_A:
          "Must have a $[](platformQuantityHook)",
        CONNECTIONS_CONNECT_ACCOUNTS_MODAL_MUST_HAVE_AT_LEAST:
          "Must have at least $[](platformQuantityHook)",
        CONNECTIONS_CONNECT_ACCOUNTS_MODAL_MUST_HAVE_AT_MOST:
          "Must have at most $[](platformQuantityHook)",
        CONNECTIONS_CONNECT_ACCOUNTS_MODAL_MUST_BE:
          "Must be $[](platformQuantityHook)",
        CONNECTIONS_CONNECT_ACCOUNTS_MODAL_MUST_NOT_BE:
          "Must not be $[](platformQuantityHook)",
        CONNECTIONS_CONNECT_ACCOUNTS_MODAL_USAGE:
          "This information will be used to verify your identity to the server, and in accordance with Discord’s [Privacy Policy]({privacyPolicyUrl}).",
        CONNECTIONS_CONNECT_ACCOUNTS_MODAL_USAGE_SETTINGS:
          "This information will be used to verify your identity to the server, and in accordance with Discord's [Privacy Policy]({privacyPolicyUrl}). You can manage apps and connections by going to [Authorized Apps](onAuthorizedApplicationsClick) or [Connections](onConnectionsClick) in user settings.",
        CONNECTIONS_CONNECT_ACCOUNTS_MODAL_REQUIREMENTS_NOT_MET:
          "Requirements not met",
        CONNECTIONS_CONNECT_ACCOUNTS_MODAL_HEADER_TEXT_ANY:
          "You must verify **at least one** of the following accounts to get this role",
        CONNECTIONS_CONNECT_ACCOUNTS_MODAL_HEADER_TEXT_ALL:
          "You must verify **all** of the following accounts to get this role",
        CONNECTIONS_CONNECT_ACCOUNTS_MODAL_ACCOUNT_CONNECTED:
          "!!{platformName}!! connected!",
        CONNECTIONS_CONNECT_ACCOUNTS_MODAL_ACCOUNT_CONNECTED_PREVIEW:
          "Connection Preview",
        CONNECTIONS_CONNECT_ACCOUNTS_MODAL_ACCOUNT_CONNECTED_PRIVACY: "Privacy",
        CONNECTIONS_CONNECT_ACCOUNTS_MODAL_ACCOUNT_CONNECTED_TOOLTIP:
          "This will only appear on your profile in channels where this role was added to permissions",
        CONNECTIONS_CONNECT_ACCOUNTS_MODAL_ROLE_GRANTED: "Role granted!",
        CONNECTIONS_NUX_TITLE: "NEW! Connection Details",
        CONNECTIONS_NUX_CONTENT:
          "You can now show off details from your Connections, like follower count or game stats on your profile! [Learn more.]({helpdeskArticle})",
        LINKED_ROLES_ADMIN_NUX_TITLE: "Did you know?",
        LINKED_ROLES_ADMIN_NUX_CONTENT:
          "Adding Linked Roles to any channel will give members Role Tags!",
        GENERIC_FORMATTED_LIST_TWO: "$[](a) and $[](b)",
        GENERIC_FORMATTED_LIST_THREE: "$[](a), $[](b), and $[](c)",
        GENERIC_FORMATTED_LIST_FOUR: "$[](a), $[](b), $[](c), and $[](d)",
        NUMBER_ABBREVIATION_FULL: "{value, number}",
        NUMBER_ABBREVIATION_THOUSANDS: "{value, number}k",
        NUMBER_ABBREVIATION_MILLIONS: "{value}M",
        FINISH: "Finish",
        ONBOARDING_NO_PROMPTS: "We hope you enjoy your stay!",
        ONBOARDING_COVER_WELCOME_TITLE:
          "Welcome to !!{guildName}!!, !!{userName}!!!",
        ONBOARDING_COVER_WELCOME_SUBTITLE: "Let's customize your experience",
        ONBOARDING_COVER_PRIVACY_POLICY:
          "Your responses will be treated in accordance with Discord's [Privacy Policy]({privacyLink})",
        ONBOARDING_LANDING_TITLE:
          "Answer a few questions to customize your experience",
        ONBOARDING_LANDING_SUBTITLE: "Almost there!",
        ONBOARDING_MODAL_LANDING_TITLE:
          "Let's start by customizing your experience",
        ONBOARDING_MODAL_LANDING_SUBTITLE: "Welcome to !!{guildName}!!!",
        ONBOARDING_CHOOSE_ONE_OPTION: "Select an option.",
        ONBOARDING_CHOOSE_ALL_OPTIONS: "Choose all that apply.",
        ONBOARDING_QUESTION_COUNT:
          "Question {currentQuestion, number} of {questionCount, number}",
        ONBOARDING_REQUIRED_QUESTION: "This is a required question.",
        ONBOARDING_HELP_TEXT_ADD_CHANNELS:
          "You will be added to {count, plural, =1 {$[!!{channel1}!!](itemHook).} =2 {$[!!{channel1}!!](itemHook) and $[!!{channel2}!!](itemHook).} other {$[!!{channel1}!!](itemHook), $[!!{channel2}!!](itemHook), and {extraCount, plural, one {1 other} other {{extraCount} others}}.}}",
        ONBOARDING_HELP_TEXT_ADD_ROLES:
          "You will receive the {count, plural, =1 {$[!!{role1}!!](itemHook) role.} =2 {$[!!{role1}!!](itemHook) and $[!!{role2}!!](itemHook) roles.} other {$[!!{role1}!!](itemHook), $[!!{role2}!!](itemHook), and {extraCount, plural, one {1 other role} other {{extraCount} other roles}}.}}",
        ONBOARDING_HELP_TEXT_ADD_ROLES_ALSO:
          "You will also receive the {count, plural, =1 {$[!!{role1}!!](itemHook) role.} =2 {$[!!{role1}!!](itemHook) and $[!!{role2}!!](itemHook) roles.} other {$[!!{role1}!!](itemHook), $[!!{role2}!!](itemHook), and {extraCount, plural, one {1 other role} other {{extraCount} other roles}}.}}",
        ONBOARDING_OPTION_ROLE_COUNTS: "**+{memberCount}** people in common",
        ONBOARDING_RULES_STEP: "One last step!",
        ONBOARDING_RULES_TITLE: "Read & Agree to Server Rules",
        ONBOARDING_RULES_AGREE_AND_FINISH: "Agree and Finish \uD83C\uDF89",
        DROPDOWN_OPTIONS_TITLE: "Answers",
        DROPDOWN_OPTIONS_EMPTY: "No answers selected.",
        START_ONBOARDING: "Start Onboarding",
        ONBOARDING_ERROR_PAGE_TEXT:
          "Welcome! You must complete Onboarding to view this community.",
        NO_GUILDS_HEADER: "Ready for a next-level group chat?",
        NO_GUILDS_SUBHEADER:
          "Build your community with organized conversations, spontaneous hangouts, and powerful customization features!",
        GUILD_NO_CHANNELS_HEADER: "No channels here",
        GUILD_NO_CHANNELS_SUBHEADER:
          "This server might be empty or you don’t have access to any channels.",
        GUILD_CREATE_CHANNEL_CTA: "Create a Channel",
        GUILD_NO_UNREADS_HEADER: "All caught up!",
        GUILD_NO_UNREADS_SUBHEADER: "You don't have any unread messages.",
        NOTIFICATION_PRESET_1: "All Messages",
        NOTIFICATION_PRESET_2: "@Mentions",
        NOTIFICATION_PRESET_3: "Nothing",
        NOTIFICATION_PRESET_CUSTOM: "Custom",
        NOTIFICATION_PRESET_CUSTOM_DESCRIPTION:
          "You are changing settings manually.",
        NOTIFICATION_SETTINGS_USE_PRESET: "Use Presets",
        NOTIF_MIGRATION_SETTINGS_TITLE: "New Unreads Setting (Experimental)",
        NOTIF_MIGRATION_SETTINGS_SUBTITLE:
          "Turns off the new unread setting that allows you to pick which channels are most important in a server.",
        NOTIF_MIGRATION_SETTINGS_CONFIRM_BODY:
          "This will turn off the the new unread setting and restore *all* of your notification settings to a backup created on {date, date, medium}",
        NOTIF_MIGRATION_SETTINGS_CONFIRM_ACTION: "Turn Off",
        NOTIF_MIGRATION_INTRO_TAB: "1. What's New",
        NOTIF_MIGRATION_CUSTOMIZE_TAB: "2. Choose Servers",
        NOTIF_MIGRATION_TIPS_TAB: "3. Apply Changes",
        NOTIF_MIGRATION_INTRO_TITLE: "Discord notifications just got better!",
        NOTIF_MIGRATION_INTRO_SUB_TITLE:
          "We added a new setting to cut through the noise and stay focused on what's important.",
        NOTIF_MIGRATION_INTRO_CHANNEL_1: "announcements",
        NOTIF_MIGRATION_INTRO_CHANNEL_2: "general",
        NOTIF_MIGRATION_INTRO_CHANNEL_3: "random",
        NOTIF_MIGRATION_INTRO_CHANNEL_4: "introductions",
        NOTIF_MIGRATION_INTRO_CHANNEL_5: "mods-only",
        NOTIF_MIGRATION_INTRO_CHANNEL_6: "jokes",
        NOTIF_MIGRATION_INTRO_CHANNEL_7: "chatter",
        NOTIF_MIGRATION_INTRO_BEFORE: "Before",
        NOTIF_MIGRATION_INTRO_AFTER: "After",
        NOTIF_MIGRATION_INTRO_TIP_BEFORE1:
          "Every server is unread for any new message.",
        NOTIF_MIGRATION_INTRO_TIP_BEFORE2:
          "Every channel is highlighted for each new message.",
        NOTIF_MIGRATION_INTRO_TIP_AFTER1:
          "Server is unread only when there’s a message from channels you care about, like #announcements.",
        NOTIF_MIGRATION_INTRO_TIP_AFTER2:
          "New messages from channels you don’t care about are de-emphasized.",
        NOTIF_MIGRATION_CUSTOMIZE_TITLE: "Choose servers to update",
        NOTIF_MIGRATION_CUSTOMIZE_SUB_TITLE:
          "Your notification settings will be updated based on what channels you use the most.",
        NOTIF_MIGRATION_CUSTOMIZE_SECTION1_TITLE: "Selected",
        NOTIF_MIGRATION_CUSTOMIZE_SECTION1_SUBTITLE:
          "You will only be notified for important channels and mentions.",
        NOTIF_MIGRATION_CUSTOMIZE_SECTION2_TITLE: "Unselected",
        NOTIF_MIGRATION_CUSTOMIZE_SECTION2_SUBTITLE:
          "Your settings will not be changed.",
        NOTIF_MIGRATION_BACKUP:
          "You can undo this later in Settings > Notifications.",
        NOTIF_MIGRATION_GUILD_TOOLTIP_BUSY: "Busy server",
        NOTIF_MIGRATION_GUILD_TOOLTIP_QUIET: "Quiet server",
        NOTIF_MIGRATION_GUILD_TOOLTIP_ALOT: "You visit a lot",
        NOTIF_MIGRATION_GUILD_TOOLTIP_ALITTLE: "You visit occassionally",
        NOTIF_MIGRATION_GUILD_TOOLTIP_MUTED: "Muted",
        NOTIF_MIGRATION_GUILD_TOOLTIP_NOT_MUTED: "Not muted",
        NOTIF_MIGRATION_TIPS_TITLE:
          "{count, plural, =0 {No servers updated.} one {1 server updated!} other {{count} servers updated!}}",
        NOTIF_MIGRATION_TIPS_SUB_TITLE:
          "Here’s how you can change your settings in the future.",
        NOTIF_MIGRATION_TIPS_TAB1: "Server Notifications",
        NOTIF_MIGRATION_TIPS_TAB2: "Channel Notifications",
        NOTIF_MIGRATION_TIPS_TAB1_TIP2:
          "Choose @Mentions to get notified for only mentions and important channels.",
        NOTIF_MIGRATION_TIPS_TAB2_TIP1:
          "Choose @Mentions to make a channel less overwhelming.",
        NOTIF_MIGRATION_TIPS_TAB2_TIP2:
          "Choose Custom to control notification and unread settings individually.",
        NOTIF_MIGRATION_ERROR:
          "Looks like something went wrong! We'll try again the next time you launch Discord.",
        APP_DIRECTORY: "App Directory",
        APP_DIRECTORY_LISTING_VIEW_ALL_BUTTON: "View All",
        APP_DIRECTORY_LISTING_ADD_BUTTON: "Add",
        APP_DIRECTORY_GUILD_COUNT: "in {guildCount} servers",
        APP_DIRECTORY_MUTUAL_GUILD_COUNT:
          "in {mutualGuildCount, plural, =1 {1 mutual server} other {{mutualGuildCount} mutual servers}}",
        APP_DIRECTORY_GUILD_COUNT_WITH_MUTUALS:
          "in {mutualGuildCount, plural, =1 {1 mutual server} other {{mutualGuildCount} mutual servers}} + {nonMutualGuildCount} more",
        APP_DIRECTORY_GUILD_COUNT_PLUS_MUTUALS_TOOLTIP:
          "This app is also in !!{appNames}!!",
        APP_DIRECTORY_ALL_CATEGORY: "All",
        APP_DIRECTORY_ERROR_HEADING: "Uh oh, something went wrong",
        APP_DIRECTORY_ERROR_BODY: "Try again later",
        APP_DIRECTORY_CONFUSED_CLYDE_IMAGE_ALT: "Confused bot",
        APP_DIRECTORY_FIXING_DABATOUILLE_IMAGE_ALT:
          "Bot owner working on their mouse bot",
        APP_DIRECTORY_PARTNER: "Partner",
        APP_DIRECTORY_LISTING_CARD_BUTTON_A11Y_LABEL: "View App, !!{name}!!",
        APP_DIRECTORY_CATEGORY_BUTTON_A11Y_LABEL:
          "View App Category, !!{categoryName}!!",
        APP_DIRECTORY_HERO_HEADING: "Customize your server with Apps",
        APP_DIRECTORY_HERO_DABATOUILLE_IMAGE_ALT: "Cheerful mouse bot",
        APP_DIRECTORY_GALLERY_COLLECTION_VIEW_APP_CTA: "View App",
        APP_DIRECTORY_HOME_LEARN_MORE_BANNER_HEADING:
          "Can't find what you're looking for?",
        APP_DIRECTORY_HOME_LEARN_MORE_BANNER_BODY:
          "Maybe it's time to make your own Discord app!",
        APP_DIRECTORY_HOME_LEARN_MORE_BANNER_CTA: "Learn More",
        APP_DIRECTORY_HOME_NEW_TO_APPS_BANNER_HEADING: "New to apps?",
        APP_DIRECTORY_HOME_NEW_TO_APPS_BANNER_BODY:
          "Check out our starter guide to get familiar with all the cool things apps can do!",
        APP_DIRECTORY_HOME_NEW_TO_APPS_BANNER_CTA: "Learn More",
        APP_DIRECTORY_PROFILE_ADD_BUTTON: "Add to Server",
        APP_DIRECTORY_PROFILE_SHARE_BUTTON: "Copy Link",
        APP_DIRECTORY_PROFILE_DESCRIPTION_HEADING: "Overview",
        APP_DIRECTORY_PROFILE_COMMANDS_HEADING: "Popular Slash Commands",
        APP_DIRECTORY_PROFILE_LANGUAGES_HEADING: "Supported Languages",
        APP_DIRECTORY_PROFILE_RELATED_APPS_HEADING: "You might also like",
        APP_DIRECTORY_PROFILE_CATEGORIES_HEADING: "Categories",
        APP_DIRECTORY_PROFILE_SERVER_HEADING: "Support Server",
        APP_DIRECTORY_PROFILE_LINKS_HEADING: "Links",
        APP_DIRECTORY_PROFILE_REQUIRED_PERMISSIONS_HEADING: "Permissions",
        APP_DIRECTORY_PROFILE_REQUIRED_PERMISSIONS_SUB_HEADING:
          "Required Permissions",
        APP_DIRECTORY_PROFILE_TERMS_LINK: "Terms of Service",
        APP_DIRECTORY_PROFILE_PRIVACY_LINK: "Privacy Policy",
        APP_DIRECTORY_PROFILE_EMPTY_HEADING: "No match found",
        APP_DIRECTORY_PROFILE_SHOW_MORE: "Show more",
        APP_DIRECTORY_PROFILE_SHOW_LESS: "Show less",
        APP_DIRECTORY_PROFILE_IMAGE_CAROUSEL_ALT:
          "Image {index} of {totalImages} for the {name} application",
        APP_DIRECTORY_PROFILE_IMAGE_DEFAULT_ALT: "User-submitted image",
        APP_DIRECTORY_PROFILE_DATA_ACCESS_HEADING: "Data Access",
        APP_DIRECTORY_PROFILE_DATA_ACCESS_INTENTS_LIST_HEADING:
          "This app can access the following data in the server:",
        APP_DIRECTORY_PROFILE_DATA_ACCESS_MESSAGE_CONTENT_HEADING:
          "Read Messages",
        APP_DIRECTORY_PROFILE_DATA_ACCESS_MESSAGE_CONTENT_BODY:
          "Can access messages in the server and read their contents.",
        APP_DIRECTORY_PROFILE_DATA_ACCESS_GUILD_PRESENCES_HEADING: "Presence",
        APP_DIRECTORY_PROFILE_DATA_ACCESS_GUILD_PRESENCES_BODY:
          "Can see online status of server members and what they are playing, watching, or listening to.",
        APP_DIRECTORY_PROFILE_DATA_ACCESS_GUILD_MEMBERS_HEADING: "Members",
        APP_DIRECTORY_PROFILE_DATA_ACCESS_GUILD_MEMBERS_BODY:
          "Can see who's in the server and their roles, nicknames, and permission changes.",
        APP_DIRECTORY_PROFILE_DATA_ACCESS_BASELINE:
          "All apps can access a set of baseline data. Please visit the [Help Center]({helpCenterUrl}) to learn more.",
        APP_DIRECTORY_PROFILE_DATA_ACCESS_PRIVACY_POLICY_V2:
          "For more information about this app's privacy practices, see the developer's [privacy policy](onClick).",
        APP_DIRECTORY_PROFILE_TAB_GENERAL: "General",
        APP_DIRECTORY_PROFILE_TAB_IMAGES: "Images",
        APP_DIRECTORY_PROFILE_TAB_PREMIUM: "Premium",
        APP_DIRECTORY_PROFILE_TAB_PRIVACY: "Privacy",
        APP_DIRECTORY_SEARCH_PLACEHOLDER: "Search thousands of apps",
        APP_DIRECTORY_EMPTY_SEARCH_HEADING: "No matches found",
        APP_DIRECTORY_EMPTY_SEARCH_SUBHEADING: "Try another search",
        APP_DIRECTORY_EMPTY_CATEGORY_SEARCH_HEADING:
          "No matches found in {categoryName}",
        APP_DIRECTORY_EMPTY_CATEGORY_SEARCH_SUBHEADING:
          "Try another search or $[see results from all categories](viewAllHook)",
        APP_DIRECTORY_JOIN_SERVER_LABEL: "Join the support server",
        APP_DIRECTORY_PROFILE_UTILITIES_A11Y_LABEL:
          "Application Directory Profile Actions",
        APP_DIRECTORY_MUSIC_CATEGORY: "Music",
        APP_DIRECTORY_ACTIVITY_LABEL: "Activity",
        APP_DIRECTORY_CONNECTION_LABEL: "Connection",
        APP_DIRECTORY_SHORT_GUILD_COUNT: "{guildCount} servers",
        APP_DIRECTORY_MUSIC_BANNER_TITLE: "Music",
        APP_DIRECTORY_MUSIC_BANNER_HEADER: "Discord Loves Music!",
        APP_DIRECTORY_MUSIC_BANNER_CONTENT:
          "These apps offer great ways to discover new music, share what you’re listening to, and listen together with your friends.",
        APP_DIRECTORY_MUSIC_FOOTER_HEADER: "Building a music app?",
        APP_DIRECTORY_MUSIC_FOOTER_CONTENT:
          "Request to be included on this page.",
        APP_DIRECTORY_MUSIC_FOOTER_CTA: "Request",
        APP_DIRECTORY_SPOTIFY_TITLE: "Spotify",
        APP_DIRECTORY_SPOTIFY_DESCRIPTION:
          "Connect your Spotify account with Discord.\n\nShare what you're listening to, play Spotify tracks, and listen along with your friends",
        APP_DIRECTORY_IPP_HEADER: "Introducing App Directory",
        APP_DIRECTORY_IPP_SECONDARY_HEADER:
          "Search, browse, and explore thousands of apps",
        APP_DIRECTORY_IPP_CUSTOMIZATION:
          "Customize and personalize your server",
        APP_DIRECTORY_IPP_AUTOMATION: "Automate useful tasks and free up time",
        APP_DIRECTORY_IPP_FUN: "Add fun and delight to your community",
        APP_DIRECTORY_COACHMARK_HEADER: "Finding the App Directory",
        APP_DIRECTORY_COACHMARK:
          "You can find the App Directory at any point under Server Settings!",
        APP_DIRECTORY_PROFILE_EMBED_HEADER: "Invite app to server",
        APP_DIRECTORY_PROFILE_EMBED_GUILD_COUNT: "in {guildCount} servers",
        APP_DIRECTORY_PROFILE_EMBED_BUTTON: "Add to Server",
        APP_DIRECTORY_PROFILE_EMBED_INVALID_HEADER:
          "Oops, this link doesn't work...",
        APP_DIRECTORY_PROFILE_EMBED_INVALID_INFO_TITLE: "Invalid Link",
        APP_DIRECTORY_PROFILE_EMBED_INVALID_INFO_BODY:
          "Try sending another one!",
        APP_DIRECTORY_PROFILE_EMBED_RESOLVING_HEADER: "Resolving Application",
        APPLICATION_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_TITLE_V2:
          "Welcome to **{tier}**",
        APPLICATION_GUILD_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_SUBTITLE:
          "You now have access to all **{tier}** tier benefits.",
        APPLICATION_USER_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_SUBTITLE:
          "You now have access to the following in all servers with **{applicationName}**.",
        APPLICATION_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_BENEFITS_PREVIEW:
          "A few of your benefits",
        APPLICATION_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_DONE_BUTTON:
          "Done",
        APPLICATION_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_CONTINUE_BUTTON:
          "Continue",
        APPLICATION_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_CANCEL_BUTTON:
          "Cancel",
        APPLICATION_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_LITE_TITLE_V2:
          "**Welcome to {tierName}!**",
        APPLICATION_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_LITE_SUBTITLE:
          "Congrats! You now have access to {benefits}.",
        APPLICATION_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_LITE_OPEN_DISCORD_BUTTON:
          "Open Discord",
        APPLICATION_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_LITE_DONE_BUTTON:
          "Done",
        APPLICATION_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_LITE_CONTINUE_BUTTON:
          "Continue",
        APPLICATION_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_LITE_CANCEL_BUTTON:
          "Cancel",
        APPLICATION_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_LITE_EXCLUSIVE_CHANNELS_SUBTITLE:
          "{commandCount, plural, one {1 exclusive command} other {# exclusive commands}}",
        APPLICATION_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_LITE_BENEFITS_SUBTITLE:
          "{benefitCount, plural, one {1 benefit} other {# benefits}}",
        APPLICATION_SUBSCRIPTIONS_CANNOT_MANAGE_SUBSCRIPTION:
          "You can't manage the subscription",
        APPLICATION_USER_SUBSCRIPTION_ALREADY_SUBSCRIBED:
          "You are already subscribed to {tierName}",
        ONE_APPLICATION_SUBSCRIPTION_EXPIRATION_CHANNEL_NOTICE_CONTENT:
          "Your subscription to {a} has expired. Don't lose out on your server's favorite features!",
        TWO_APPLICATION_SUBSCRIPTION_EXPIRATION_CHANNEL_NOTICE_CONTENT:
          "Your subscriptions to {a} and {b} have expired. Don't lose out on your server's favorite features!",
        THREE_APPLICATION_SUBSCRIPTION_EXPIRATION_CHANNEL_NOTICE_CONTENT:
          "Your subscriptions to {a}, {b}, and {c} have expired. Don't lose out on your server's favorite features!",
        MORE_APPLICATION_SUBSCRIPTION_EXPIRATION_CHANNEL_NOTICE_CONTENT:
          "Several subscriptions have expired. Don't lose out on your server's favorite features!",
        APPLICATION_SUBSCRIPTION_EXPIRATION_CHANNEL_NOTICE_CTA: "Resubscribe",
        APPLICATION_SUBSCRIPTION_PREMIUM: "Premium",
        APPLICATION_SUBSCRIPTION_TIER_EXCLUSIVE_COMMANDS_SECTION_TITLE:
          "Exclusive Commands",
        APPLICATION_SUBSCRIPTION_TIER_ADDITIONAL_BENEFITS_SECTION_TITLE:
          "Additional Benefits",
        APPLICATION_SUBSCRIPTION_TIER_SHOW_MORE_DESCRIPTION: "Show More",
        APPLICATION_SUBSCRIPTION_TIER_SHOW_LESS_DESCRIPTION: "Show Less",
        APPLICATION_SUBSCRIPTION_TIER_REVIEW_SUBSCRIBE_LABEL: "Subscribe",
        APPLICATION_SUBSCRIPTION_TIER_REVIEW_CANCELED_LABEL: "Canceled",
        APPLICATION_SUBSCRIPTION_TIER_REVIEW_CURRENT_TIER_LABEL: "Current Tier",
        APPLICATION_SUBSCRIPTION_AMOUNT_PER_PERIOD: "{amount}/{period}",
        APPLICATION_SUBSCRIPTION_FREE: "Free",
        APPLICATION_SUBSCRIPTION_PURCHASE_MODAL_BENEFITS_TITLE_V2: "**{tier}**",
        APPLICATION_GUILD_SUBSCRIPTION_PURCHASE_MODAL_BENEFITS_SUBTITLE:
          "By subscribing, you will unlock benefits for {guildName}",
        APPLICATION_USER_SUBSCRIPTION_PURCHASE_MODAL_BENEFITS_SUBTITLE:
          "By subscribing, you will unlock {tier}'s benefits in any server",
        APPLICATION_SUBSCRIPTION_PURCHASE_MODAL_BENEFITS_LITE_TITLE_V2:
          "**{tier}**",
        APPLICATION_SUBSCRIPTION_PURCHASE_MODAL_BENEFITS_LITE_SUBTITLE:
          "By subscribing, you will unlock benefits for {guildName}",
        APPLICATION_USER_SUBSCRIPTION_PURCHASE_MODAL_BENEFITS_LITE_SUBTITLE:
          "By subscribing, you will unlock benefits for yourself",
        APPLICATION_SUBSCRIPTION_BILLING_STEP_SUBSCRIPTION_DETAILS:
          "Subscription Details",
        APPLICATION_SUBSCRIPTION_PAYMENT_CHOOSE_SERVER_TITLE: "Choose a server",
        APPLICATION_SUBSCRIPTION_PAYMENT_CHOOSE_SERVER_SUBTITLE:
          "Only apps already added to servers may be upgraded",
        APPLICATION_SUBSCRIPTION_GUILD_PICKER_PLACEHOLDER: "Select a server",
        MONTHLY_APPLICATION_SUBSCRIPTION_V2:
          "Monthly Subscription (!!{tier}!!)",
        APPLICATION_SUBSCRIPTION_FROM_DELETED_APPLICATION:
          "Premium subscription from a deleted application",
        APPLICATION_SUBSCRIPTION_NO_GUILD_AVAILABLE:
          "This app is not in any of your servers",
        APPLICATION_SUBSCRIPTION_CANCELLATION_SURVEY_TITLE:
          "Cancelled Premium Subscription",
        APPLICATION_SUBSCRIPTION_CANCELLATION_SURVEY_SUBTITLE:
          "Let us know why you’re cancelling",
        APPLICATION_SUBSCRIPTION_CANCELLATION_SURVEY_ANSWER_CHOICE_NOT_USING_ENOUGH:
          "Not using it enough",
        APPLICATION_SUBSCRIPTION_CANCELLATION_SURVEY_ANSWER_CHOICE_TOO_EXPENSIVE:
          "Too expensive",
        APPLICATION_SUBSCRIPTION_CANCELLATION_SURVEY_ANSWER_CHOICE_NOT_WORTH:
          "Not enough premium features/not worth it",
        APPLICATION_SUBSCRIPTION_CANCELLATION_SURVEY_ANSWER_CHOICE_NOT_SURE_HOW_TO_USE:
          "Not sure how to use premium features",
        APPLICATION_SUBSCRIPTION_CANCELLATION_SURVEY_ANSWER_CHOICE_OTHER:
          "Other",
        APPLICATION_SUBSCRIPTION_CANCELLATION_SURVEY_DONT_SHOW_AGAIN:
          "Don’t show me this again",
        APPLICATION_SUBSCRIPTION_CANCELLATION_SURVEY_OTHER_PLACEHOLDER:
          "Please provide details here",
        APPLICATION_GUILD_SUBSCRIPTION_LISTING_HEADER:
          "Subscribe for your server",
        APPLICATION_GUILD_SUBSCRIPTION_LISTING_DETAILS:
          "Unlock premium features for all members of your server",
        APPLICATION_USER_SUBSCRIPTION_LISTING_HEADER: "Subscribe for yourself",
        APPLICATION_USER_SUBSCRIPTION_LISTING_DETAILS:
          "Get access to {applicationName}'s premium features in any server",
        APPLICATION_USER_SUBSCRIPTION_NO_SHARED_SERVER_WARNING_TITLE:
          "You don't share any servers with {applicationName}",
        APPLICATION_USER_SUBSCRIPTION_NO_SHARED_SERVER_WARNING_BODY:
          "You can still subscribe, but you won't be able to use this app until you add it to one of your servers.",
        SYSTEM_MESSAGE_APPLICATION_SUBSCRIPTION_PURCHASE:
          "$[!!{username}!!](usernameHook) upgraded !!{applicationName}!! to premium for this server! \uD83C\uDF89",
        SYSTEM_MESSAGE_APPLICATION_SUBSCRIPTION_PURCHASE_FROM_DELETED_APPLICATION:
          "$[!!{username}!!](usernameHook) upgraded a deleted application to premium for this server! \uD83C\uDF89",
        SYSTEM_MESSAGE_APPLICATION_SUBSCRIPTION_PURCHASE_MOBILE:
          "[!!{username}!!](usernameOnClick) upgraded !!{applicationName}!! to premium for this server! \uD83C\uDF89",
        SYSTEM_MESSAGE_APPLICATION_SUBSCRIPTION_PURCHASE_FROM_DELETED_APPLICATION_MOBILE:
          "[!!{username}!!](usernameOnClick) upgraded a deleted application to premium for this server! \uD83C\uDF89",
        APPLICATION_USER_SUBSCRIPTIONS_TITLE: "Premium Apps",
        APPLICATION_USER_SUBSCRIPTIONS_DESCRIPTION:
          "Premium app subscriptions are billed separately. They may have different renewal dates and payment methods.",
        APPLICATION_MANAGE_SUBSCRIPTIONS_BUTTON: "Manage Subscriptions",
        APPLICATION_ACTIVE_USER_SUBSCRIPTIONS_DESCRIPTION:
          "You have **{numSubscriptions} active app {numSubscriptions, plural, =1 {subscription} other {subscriptions}}**",
        APPLICATION_MANAGE_SUBSCRIPTION_PAGE_BACK_CTA: "Your Subscriptions",
        APPLICATION_MANAGE_SUBSCRIPTION_PAGE_TITLE: "Premium App Subscriptions",
        APPLICATION_MANAGE_SUBSCRIPTION_PAGE_DESCRIPTION:
          "Upgrade how apps work in your servers by purchasing premium features from developers.",
        APPLICATION_MANAGE_SUBSCRIPTION_CARD_APPLICATION_NAME_UNAVAILABLE:
          "Application Name Unavailable",
        APPLICATION_MANAGE_SUBSCRIPTION_CARD_IN_GUILD: "in {guildName}",
        APPLICATION_MANAGE_SUBSCRIPTION_CARD_PERSONAL_SUBSCRIPTION:
          "Personal subscription",
        APPLICATION_MANAGE_SUBSCRIPTION_CARD_GUILD_NAME_UNAVAILABLE:
          "Server Name Unavailable",
        APPLICATION_MANAGE_SUBSCRIPTION_DELETED_WARNING:
          "This subscription has been discontinued by the app developer. You will not be charged next billing cycle",
        APPLICATION_MANAGE_SUBSCRIPTION_INFO_SUBSCRIPTION_ENDED:
          "Subscription ended",
        APPLICATION_MANAGE_SUBSCRIPTION_INFO_CURRENT_PERIOD_END_DATE:
          "{timestamp, date, short}",
        APPLICATION_MANAGE_SUBSCRIPTION_INFO_SUBSCRIBED_SINCE_DATE:
          "{timestamp, date, short}",
        APPLICATION_MANAGE_SUBSCRIPTION_INFO_SUBSCRIPTION_ENDS:
          "Subscription ends",
        APPLICATION_MANAGE_SUBSCRIPTION_INFO_PRICE: "Monthly Cost",
        APPLICATION_MANAGE_SUBSCRIPTION_INFO_SUBSCRIBED_SINCE:
          "Subscribed since",
        APPLICATION_MANAGE_SUBSCRIPTION_PAYMENT_METHOD_LABEL: "Payment Method",
        APPLICATION_MANAGE_SUBSCRIPTION_MANAGE_OPTIONS_LABEL:
          "Manage Subscription",
        APPLICATION_MANAGE_SUBSCRIPTION_MANAGE_OPTIONS_CANCEL:
          "Cancel my subscription",
        APPLICATION_MANAGE_SUBSCRIPTION_MANAGE_OPTIONS_RESTART:
          "Restart my subscription",
        APPLICATION_CANCEL_SUBSCRIPTION_MODAL_CANCEL_CTA: "Cancel Subscription",
        APPLICATION_CANCEL_SUBSCRIPTION_MODAL_NEVERMIND_CTA: "Nevermind",
        APPLICATION_CANCEL_SUBSCRIPTION_MODAL_TITLE_V2: "**{tier}**",
        APPLICATION_CANCEL_SUBSCRIPTION_PREMIUM_BENEFITS: "Premium Benefits",
        APPLICATION_MANAGE_SUBSCRIPTION_CANCELED: "Canceled",
        APPLICATION_MANAGE_SUBSCRIPTION_PAST_DUE: "Payment Due",
        APPLICATION_CANCEL_SUBSCRIPTION_MODAL_HEADER: "Confirm cancellation",
        APPLICATION_CANCEL_GUILD_SUBSCRIPTION_MODAL_DESCRIPTION:
          "Are you sure you want to cancel? On {timestamp, date, medium}, {guildName} will lose access to benefits like:",
        APPLICATION_CANCEL_USER_SUBSCRIPTION_MODAL_DESCRIPTION:
          "Are you sure you want to cancel? On {timestamp, date, medium}, you will lose access to benefits like:",
        APPLICATION_SUBSCRIPTION_TOGGLE_SECTION_LABEL:
          "Expand/collapse section",
        APPLICATION_SUBSCRIPTION_USER_SUBSCRIPTION_PAST_DUE_WARNING:
          "Your current subscription is past due. Please update your payment method.",
        APPLICATION_SUBSCRIPTION_PURCHASE_CONFIRMATION_TITLE:
          "**You now have {tier}!**",
        APPLICATION_SUBSCRIPTION_PURCHASE_CONFIRMATION_SUBTITLE:
          "You can start using your premium features now! Your subscription will renew on {timestamp, date, medium}",
        APPLICATION_USER_SUBSCRIPTION_PURCHASE_TITLE: "Personal Subscription",
        APPLICATION_USER_SUBSCRIPTION_PURCHASE_SUBTITLE:
          "You are purchasing a personal subscription. This will give you access to premium features in any server with {applicationName}.",
        BUY_ONE_GET_ONE_FREE: "Buy One, Get One Free",
        BUY_ONE_GET_ONE_FREE_NEWLINE: "Buy One,\n\nGet One Free",
        BUY_ONE_GET_ONE_MONTH_FREE: "Buy One, Get One Month Free",
        BUY_ONE_GET_ONE_MONTH_FREE_NEWLINE: "Buy One,\n\nGet One Month Free",
        OFFER_ENDS_IN: "Offer Ends In {hours}:{minutes}:{seconds}",
        OFFER_ENDS_IN_DAYS:
          "Offer Ends In {days, plural, =1 {# Day} other {# Days}}",
        OFFER_ENDS_ON_DATE: "Offer Ends {date}",
        BOGO_SUPERCHARGE_YOUR_EXPERIENCE:
          "Supercharge your Discord experience with this limited time Nitro deal.",
        SUBSCRIBE_NOW_FREE_MONTH:
          "Subscribe now and get a free month of Nitro.",
        BOGO_VALUE_PROP:
          "Subscribe now and get a free month. Hurry, offer ends soon!",
        BOGO_LIMITED_TIME_VALUE_PROP:
          "Limited Time Deal! Buy Nitro and get one month free.",
        BOGO_HURRY_UP_OFFER_ENDS_ON_DATE:
          "Hurry up, the offer ends on {date}! [Learn more.]({helpdeskArticle})",
        BOGO_HURRY_UP_OFFER_ENDS_ON_DATE_WITHOUT_LINK:
          "Hurry up, the offer ends on {date}!",
        RULES_AND_RESTRICTIONS_APPLY: "Rules and restrictions apply.",
        BOGO_TERMS_APPLY: "Terms apply.",
        NITRO_BADGE_TEXT: "Offer",
        ENJOY_A_FREE_MONTH: "Enjoy a free month with your purchase!",
        BOGO_CHANGE_LOG_TITLE:
          "Upgrade your Discord experience with Nitro. Subscribe now and get a free month.",
        BOGO_CHANGE_LOG_STREAM_SUBTITLE: "Enjoy crystal clear streams",
        BOGO_CHANGE_LOG_STREAM_BODY:
          "With full HD resolution, every gameplay and hangout is smooth and clear for you and your friends.",
        BOGO_CHANGE_LOG_FILE_SUBTITLE:
          "Cheer, roast, and meme like never before",
        BOGO_CHANGE_LOG_FILE_BODY_INCREASE:
          "With {premiumMaxSize} file uploads and expanded emoji & stickers, bring on the fun with legendary reactions.",
        BOGO_CHANGE_LOG_BOOST_SUBTITLE: "Support your favorite server",
        BOGO_CHANGE_LOG_BOOST_BODY:
          "With your 2 free Boosts, unlock perks for everyone in your favorite Discord community.",
        BOGO_CHANGE_LOG_MORE: "...and so much more!",
        BOGO_CHANGE_LOG_REDEEM: "Redeem Offer",
        BOGO_ANNOUNCEMENT_MODAL_HEADER: "Buy Nitro, get a month free!",
        BOGO_ANNOUNCEMENT_MODAL_SUBHEADER:
          "Enjoy the Nitro days of summer with a free month and thrilling perks",
        BOGO_ANNOUNCEMENT_MODAL_REMIXING_CARD_HEADER: "Remix",
        BOGO_ANNOUNCEMENT_MODAL_REMIXING_CARD_BODY_FORMATTED:
          "Make meme masterpieces with Remix. [Learn more.]({helpCenterLink})",
        BOGO_ANNOUNCEMENT_MODAL_THEMES_CARD_HEADER: "Color Themes",
        BOGO_ANNOUNCEMENT_MODAL_THEMES_CARD_BODY:
          "Style your Discord with a new look.",
        BOGO_ANNOUNCEMENT_MODAL_SOUNDBOARD_CARD_HEADER: "Soundboard",
        BOGO_ANNOUNCEMENT_MODAL_SOUNDBOARD_CARD_BODY_FORMATTED:
          "Use your favorite sounds across servers. Quack.",
        BOGO_ANNOUNCEMENT_MODAL_UPGRADE_HEADER:
          "Buy 1 or Upgrade, Get 1 Month Free",
        BOGO_BUY_HEADLINE: "Buy Nitro & Get 1 Month Free!",
        BOGO_UPGRADE_HEADLINE: "Upgrade for 1 Free Month!",
        BOGO_CLAIM_OFFER: "Claim Offer",
        BOGO_UNTIL_OFFER_ENDS: "{hours}:{minutes}:{seconds} Until Offer Ends",
        BOGO_UNTIL_OFFER_ENDS_DAYS:
          "{days, plural, =1 {# Day} other {# Days}} Until Offer Ends",
        BOGO_PERKS_SUBTITLE_NON_SUB_FORMATTED:
          "WOO! Unleash the fun this summer when you get Nitro. [Learn more.]({helpCenterLink})",
        BOGO_PERKS_SUBTITLE_SUB_FORMATTED:
          "Unleash more fun this summer when you upgrade Nitro. [Learn more.]({helpCenterLink})",
        BOGO_PILL: "Buy 1, Get 1",
        Q4_DROP_WHATS_NEW_EARLY_ACCESS_CARD_TITLE: "Early Access",
        Q4_DROP_WHATS_NEW_EARLY_ACCESS_CARD_SUBTITLE:
          "Be the first to try some of our newest Discord features. Now including early access to Clips!",
        Q4_DROP_WHATS_NEW_EARLY_ACCESS_CARD_DESCRIPTION_NON_SUB:
          "Get Nitro to get in on the inside scoop.",
        Q4_DROP_WHATS_NEW_EARLY_ACCESS_CARD_DESCRIPTION_SUB:
          "Nitro members, get ready to get your hands on the latest and greatest before everyone else.",
        Q4_DROP_WHATS_NEW_SPECIAL_PRICING_CARD_TITLE: "Special Member Pricing",
        Q4_DROP_WHATS_NEW_SPECIAL_PRICING_CARD_SUBTITLE:
          "Snag sweet discounts on any (or every!) item at the Shop.",
        Q4_DROP_WHATS_NEW_SPECIAL_PRICING_CARD_DESCRIPTION_NON_SUB:
          "Join Nitro to take advantage of these exclusive prices.",
        Q4_DROP_WHATS_NEW_SPECIAL_PRICING_CARD_DESCRIPTION_SUB:
          "Exclusive savings are reserved for Nitro members only.",
        Q4_DROP_WHATS_NEW_UNLIMITED_SUPER_REACTIONS_CARD_TITLE:
          "Unlimited Super Reactions",
        Q4_DROP_WHATS_NEW_UNLIMITED_SUPER_REACTIONS_CARD_SUBTITLE:
          "We made Super Reactions unlimited so you can unleash the chaos in your chats.",
        Q4_DROP_WHATS_NEW_UNLIMITED_SUPER_REACTIONS_CARD_DESCRIPTION_NON_SUB:
          "Supercharge your own conversations with any tier of Nitro.",
        Q4_DROP_WHATS_NEW_UNLIMITED_SUPER_REACTIONS_CARD_DESCRIPTION_SUB:
          "Now available on Nitro and Nitro Basic.",
        INTERACTION_PREMIUM_UPSELL_CTA: "Upgrade",
        FOR_YOU: "For You",
        FOR_YOU_EMPTY_TITLE: "Nothing here yet",
        FOR_YOU_EMPTY_BODY:
          "Come back for notifications on events, streams, and more.",
        REMOVE_NOTIFICATION: "Remove Notification",
        REMOVE_NOTIFICATION_ERROR: "Error removing notification",
        USER_SURVEY_ERROR: "Error opening survey",
        FILTERING_ON_GUILD: "Filtering on **{guild}**",
        NOTIF_CENTER_ACTIVE_NOW: "Active Now",
        OK: "OK",
        MARK_ALL_AS_READ: "Mark All as Read",
        NOTIF_CENTER_V2_PAST_NOTIFICATIONS: "Past Notifications",
        NOTIF_CENTER_V2_ALL_CLEARED: "You're all caught up!",
        NOTIF_CENTER_V2_NO_NEW_NOTIFS: "You have no new notifications.",
        NOTIF_CENTER_V2_ACCEPT_FRIEND_REQUEST: "Accept",
        NOTIF_CENTER_V2_IGNORE_FRIEND_REQUEST: "Ignore",
        NOTIF_CENTER_V2_JOIN_STREAM: "Join Stream",
        NOTIF_CENTER_V2_SEND_MESSAGE: "Send Message",
        NOTIF_CENTER_V2_ADD_FRIEND: "Add Friend",
        NOTIF_CENTER_V2_ADD_FRIEND_TOAST: "Friend request sent",
        NOTIF_CENTER_V2_ADD_FRIEND_REQUEST_SENT:
          "You sent {user} a friend request!",
        NOTIF_CENTER_V2_JOIN_EVENT: "Join Event",
        NOTIF_CENTER_V2_SEND_REPLY: "Send a Reply",
        NOTIF_CENTER_V2_FIND_FRIENDS: "Find Friends",
        NOTIF_CENTER_V2_UPDATE_AVATAR: "Update Avatar",
        NOTIF_CENTER_V2_MESSAGE_PREVIEW_PLACEHOLDER:
          "Tap to see message content",
        HARMFUL_LINK_MESSAGE_BLOCKED_ERROR:
          "Your message could not be delivered because this message contains a link blocked by Discord. You can learn more here: {helpUrl}.",
        QUICKSEARCH_RECENT: "Recent",
        QUICKSEARCH_MEDIA: "Media",
        QUICKSEARCH_GIFS: "GIFs",
        QUICKSEARCH_LINKS: "Links",
        QUICKSEARCH_FILES: "Files",
        QUICKSEARCH_MESSAGES: "Messages",
        QUICKSEARCH_PEOPLE: "People",
        QUICKSEARCH_PINS: "Pins",
        SERVER_ACTIVITY_STATUS_RESTRICTION:
          "Share your activity status in this server",
        SERVER_ACTIVITY_STATUS_RESTRICTION_NOTE:
          "[Learn more about this setting here.]({helpdeskArticle})",
        VOICE_CHANNEL_ACTIVITY_STATUS_REDIRECT:
          "Your activity status is off in this server. [Let friends see or join your activity.](onClick)",
        WARNING_SCREEN_RECORDING_PERMISSION_TITLE: "Screen Share Permissions",
        WARNING_SCREEN_RECORDING_PERMISSION_BODY:
          "Warning! The app doesn't have permission to record your screen. You may get unexpected results until you grant access and restart the app.",
        MEDIA_VIEWER_REACTION_LABEL: "React",
        MEDIA_VIEWER_ALT_TEXT_CTA: "ALT",
        MEDIA_VIEWER_ALT_TEXT_PARTIAL_TITLE: "ALT Text",
        MEDIA_VIEWER_ALT_TEXT_FULL_TITLE: "Image Description (Alt Text)",
        REMIXING_TITLE: "Remix",
        REMIXING_TAG: "REMIX",
        REMIXING_PERKS_CARD_TITLE: "Remix on Mobile",
        REMIXING_PERKS_CARD_DESCRIPTION:
          "Media editing and meme creation, at the speed of Discord.",
        EARLY_ACCESS: "Early Access",
        REMIXING_POST_CTA: "Send",
        REMIXING_CROP: "Crop media",
        REMIXING_BACKDROP_EDITOR_TITLE: "Adjust & Crop",
        REMIXING_FREE_DRAW: "Free draw on media",
        REMIXING_ADD_TEXT: "Add text to media",
        REMIXING_ADD_STICKER: "Add sticker to media",
        REMIXING_ADD_MENTION: "Add a user/role mention to the media",
        REMIXING_UNDO: "Undo previous change to the canvas",
        REMIXING_REDO: "Redo previously undone change to the canvas",
        REMIXING_ROTATE: "Rotate media clockwise",
        REMIXING_FLIP: "Flip media horizontally",
        REMIXING_DRAWING_DONE: "Done",
        REMIXING_EXIT_ALERT_TITLE: "Leave without Saving?",
        REMIXING_EXIT_ALERT_BODY:
          "You will lose any unsaved changes to your remix creation if you leave",
        REMIXING_EXIT_ALERT_STAY_BUTTON: "Keep Remix",
        REMIXING_EXIT_ALERT_LEAVE_BUTTON: "Discard",
        REMIXING_UNDO_ALL_ALERT: "Undo All",
        REMIXING_UNDO_ALL_ALERT_BODY:
          "You will lose all changes to your remix creation if you undo all.",
        REMIXING_UNDO_ALL_ALERT_CANCEL_BUTTON: "Cancel",
        REMIXING_OPEN_ERROR: "Can't open media for remix",
        SAVE_IMAGE_TO_DEVICE: "Save image to device",
        REMIXING_ASPECT_RATIO_ORIGINAL: "Original",
        REMIXING_ASPECT_RATIO_VERTICAL: "Vertical",
        REMIXING_ASPECT_RATIO_SQUARE: "Square",
        REMIXING_ASPECT_RATIO_FOUR_THREE: "4:3",
        REMIXING_ASPECT_RATIO_SIXTEEN_NINE: "16:9",
        REMIXING_TWO_FINGER_HINT: "Use two fingers to adjust",
        REMIXING_TOOLTIP_NITRO_EARLY_ACCESS: "NITRO EARLY ACCESS",
        REMIXING_TOOLTIP_TITLE_REMIX: "Remix Your Images",
        REMIXING_TOOLTIP_TITLE_MEME_IT: "Meme it. Share it.",
        REMIXING_TOOLTIP_DESCRIPTION:
          "Select an image and tap Remix to get started.",
        REMIXING_TOOLTIP_DESCRIPTION_MEME: "Make memes of anything",
        REMIXING_TOOLTIP_CTA_TRY_IT_OUT: "Try it out",
        REMIXING_TOOLTIP_NOT_NOW: "Not Now",
        REMIXING_MENTIONS_TOOLTIP: "Tap to change the layout",
        REMIXING_QUARTERSHEET_UNLOCK_WITH_NITRO: "Unlock with Nitro",
        REMIXING_QUARTERSHEET_CTA_TRY_IT: "Try it",
        REMIXING_QUARTERSHEET_DESCRIPTION:
          "Create a memesterpiece in seconds with Remix. Early access now available with Nitro.",
        REMIXING_QUARTERSHEET_DESCRIPTION_GA:
          "Create a memesterpiece in seconds with Remix.",
        REMIXING_DOWNLOAD_APP:
          "Download the mobile app to make your first remix",
        REMIXING_LANGUAGE_SUPPORT_WARNING:
          "Limited characters available. [Learn more.](handleClick)",
        REMIXING_CAROUSEL_SCROLL_PAGE: "scroll to the next page of colors",
        REMIXING_DRAWING_COLOR_BLACK: "Black",
        REMIXING_DRAWING_COLOR_WHITE: "White",
        REMIXING_DRAWING_COLOR_RED500: "Red",
        REMIXING_DRAWING_COLOR_BRAND500: "Light Purple",
        REMIXING_DRAWING_COLOR_YELLOW260: "Yellow",
        REMIXING_DRAWING_COLOR_GREEN430: "Green",
        REMIXING_DRAWING_COLOR_ORANGE345: "Orange",
        REMIXING_DRAWING_COLOR_LIGHT_PURPLE: "Light Purple",
        REMIXING_DRAWING_COLOR_GREENISH_YELLOW: "Greenish Yellow",
        REMIXING_DRAWING_COLOR_FADED_GREEN: "Faded Green",
        REMIXING_DRAWING_COLOR_BABY_BLUE: "Baby Blue",
        REMIXING_DRAWING_COLOR_LIGHT_PINK: "Light Pink",
        REMIXING_DRAWING_COLOR_LILAC: "Lilac",
        REMIXING_DRAWING_COLOR_PINK_TAN: "Pink Tan",
        REMIXING_DRAWING_COLOR_TAN: "Tan",
        REMIXING_DRAWING_COLOR_DARK_TAN: "Dark Tan",
        REMIXING_DRAWING_COLOR_DARK_BLUE: "Dark Blue",
        REMIXING_DRAWING_COLOR_DARK_RED: "Dark Red",
        REMIXING_DRAWING_COLOR_BROWN: "Brown",
        REMIXING_DRAWING_COLOR_DARK_GREEN: "Dark Green",
        REMIXING_DRAWING_COLOR_DARK_ORANGE: "Dark Orange",
        REMIXING_DRAWING_COLOR_DARK_PURPLE: "Dark Purple",
        REMIXING_DRAWING_COLOR_DARK_GOLD: "Dark Gold",
        REMIXING_DRAWING_COLOR_LIGHT_YELLOW: "Light Yellow",
        MEDIA_MOSAIC_ALT_TEXT_CTA: "ALT",
        MEDIA_MOSAIC_ALT_TEXT_POPOUT_TITLE: "Image Description (Alt Text)",
        OPT_IN_NUX_CHANNELS_TITLE: "Choose your channels",
        OPT_IN_NUX_CHANNELS_DESCRIPTION:
          "Customize your channel list and roles so you see just the stuff you care about. Click next to learn what's new.",
        OPT_IN_NUX_RECENTS_TITLE: "Never Miss a Moment",
        OPT_IN_NUX_RECENTS_DESCRIPTION:
          "Important updates like new channels and mentions in hidden channels will appear up top.",
        OPT_IN_NUX_VOICE_TITLE: "Never Miss a Hangout",
        OPT_IN_NUX_VOICE_DESCRIPTION:
          "Voice channels you don't add to your list can be found at the bottom of your channel list.",
        CHANNEL_OPT_IN: "Add to Channel List",
        CHANNEL_OPT_OUT: "Remove from Channel List",
        CHANNEL_OPT_OUT_PARENT_CATEGORY: "Unfollow Channel Category",
        GUILD_CHANNEL_OPT_IN: "Show All Channels",
        CHANNEL_OPT_IN_ALL_CHANNELS: "All Channels",
        FAVORITES: "Favorites",
        ADD_FAVORITE: "Favorite",
        REMOVE_FAVORITE: "Unfavorite",
        REMOVE_FAVORITE_SUGGESTION: "Remove Suggestion",
        PINNED_CHANNELS: "Pinned Channels",
        PIN_CHANNEL_TO_TOP: "Pin Channel to Top",
        UNPIN_CHANNEL: "Unpin Channel",
        OPT_IN_CHANNEL_NOTICE: "This channel is not on your channel list.",
        OPT_IN_CHANNEL_NOTICE_VOICE:
          "This voice channel is not on your channel list.",
        OPT_IN_CHANNEL_NOTICE_CTA: "Add to Channel List",
        OPT_IN_CHANNEL_NOTICE_MOBILE_CTA: "+ Add",
        NEW_MESSAGES_PILL:
          "{count, plural, one {1 new message} other {{count} new messages}}",
        NEW_MESSAGES_PILL_ESTIMATED: "{count}+ new messages",
        SUMMARIES_SHOWN: "Hide Summaries",
        SUMMARIES_HIDDEN: "Show Summaries",
        SUMMARIES: "Summaries",
        SUMMARY_PILL: "Current summary",
        SUMMARY_PILL_NEXT: "Jump to next summary",
        SUMMARY_PILL_PREVIOUS: "Jump to previous summary",
        SUMMARY_EMPTY_STATE_TITLE: "There are no summaries.",
        SUMMARY_EMPTY_STATE_TEXT:
          "When there are active conversations, you can check out the summaries here!",
        SUMMARY_RECENT_SUMMARIES: "Recent Summaries",
        SUMMARY_SHOW_SIDEBAR: "Show Sidebar",
        SUMMARY_HIDE_SIDEBAR: "Hide Sidebar",
        SUMMARY_FEEDBACK: "Was this a good summary?",
        SUMMARY_NO_SUMMARIES_ALT_TEXT: "A lost bird looking at map",
        SUMMARIES_VIEW_ALL: "View all summaries",
        SUMMARIES_NO_SUMMARIES: "No summaries",
        JUMP_TO_PRESENT_BUTTON_LABEL: "Jump to Present",
        GUILD_SIDEBAR_HEADER_MOBILE_A11Y_HINT: "double-tap for server options",
        GUILD_SIDEBAR_CHANNEL_BROWSER: "Browse Channels",
        GUILD_SIDEBAR_REORDER_DIALOG_TITLE: "Trying to reorder channels?",
        GUILD_SIDEBAR_REORDER_CONFIRM: "Take Me There",
        GUILD_SIDEBAR_REORDER_DESCRIPTION:
          "Turn on **Show All Channels** in your server menu. You can reorder channels when this view is enabled.",
        GUILD_SIDEBAR_DO_NOT_SHOW_AGAIN: "Do not show again.",
        CHANNEL_BROWSER_HTML_TITLE: "Browse Channels - !!{guildName}!!",
        CHANNEL_BROWSER_TITLE: "Browse Channels",
        CHANNEL_BROWSER_SEARCH_PLACEHOLDER: "Search Channels",
        CHANNEL_BROWSER_ACTIVE_TEXT: "Active {timeAgo}",
        CHANNEL_BROWSER_VIEW: "View",
        CHANNEL_BROWSER_DISABLED_BY_CATEGORY:
          "You must unfollow this category to add or remove specific channels.",
        EDIT_ONBOARDING: "Edit Onboarding",
        HIGHLIGHT: "Highlight",
        CHANNEL_HIGHLIGHTS_COUNT:
          "{count, plural, =1 {1 Highlight} other {{count} Highlights}}",
        CHANNEL_HIGHLIGHT_NAVIGATOR_LOCATION:
          "{currentHighlight} of {totalHighlights} highlights",
        CHANNEL_HIGHLIGHT_NAVIGATOR_PREVIOUS: "Previous Highlight",
        CHANNEL_HIGHLIGHT_NAVIGATOR_NEXT: "Next Highlight",
        JUMP_TO_BOTTOM: "Jump to Bottom",
        CHANNEL_BROWSER_SELECT_ALL: "Follow Category",
        RETURN_TO_CHANNEL: "Return to $[channelName](channelNameHook)",
        RECENTLY_MESSAGED_SUBTITLE: "You recently chatted",
        RECENTLY_JOINED_SUBTITLE: "You recently joined",
        RECENTS_CATEGORY_HEADER: "Suggested",
        RECENTLY_ACTIVE_CATEGORY_HEADER: "Recently Active",
        RECENTLY_VISITED_CATEGORY_HEADER: "Recently Visited",
        VOICE_CHANNELS_CATEGORY_HEADER: "Active Now",
        VOICE_CHANNELS_CATEGORY_BUTTON_EXPAND: "Show All",
        VOICE_CHANNELS_CATEGORY_BUTTON_COLLAPSE: "Hide Voice Channels",
        CLEAR_RECENT_CHANNELS: "Clear",
        VOICE_CHANNEL_BAR_ACTIVE: "{count} in Voice",
        GO_LIVE_SUBTITLE: "Screensharing",
        UNREAD_SETTINGS: "Unread Settings",
        HIGHLIGHTS_AND_MENTIONS: "Mentions",
        FORM_LABEL_UNREAD_SETTINGS_OPT_IN: "Configure Unread Settings",
        FORM_LABEL_UNREAD_SETTINGS_OPT_IN_NOTE:
          "More granular settings to control when channels should appear as unread.",
        UNREAD_NOTIFICATION_SETTING_NOTICE:
          "Should we mark this channel as unread for every new message, instead of only mentions?",
        UNREAD_NOTIFICATION_SETTING_NOTICE_TITLE:
          "Mark unread for every message?",
        UNREAD_NOTIFICATION_SETTING_NOTICE_DESCRIPTION:
          "The channel will show as unread for every message so you don't miss a thing.",
        UNREAD_NOTIFICATION_SETTING_NOTICE_ALL_MESSAGES:
          "Change to all messages",
        UNREAD_NOTIFICATION_SETTING_NOTICE_MENTION_ONLY:
          "Change to mention only",
        NEW_GUILD_EVENTS_ACCESSIBILITY_LABEL: "New Events",
        OPT_IN_GUILD_NOTICE_TITLE: "Heads up!",
        OPT_IN_GUILD_NOTICE_DESCRIPTION:
          "This community now has a customizable Channel List. [Customize](onCustomizeClick) your list further, or go back to All Channels via [Server Settings](onServerSettingsClick).",
        OPT_IN_GUILD_NOTICE_CTA: "Customize",
        CHANNEL_BROWSER_NUX_TITLE: "Choose Your Channels",
        CHANNEL_BROWSER_NUX_DESCRIPTION:
          "Customize what's on your channel list, so you see just the stuff you care about.",
        CHANNEL_BROWSER_NUX_DESCRIPTION_2:
          "**Tip:** Channels with mentions will always appear on your channel list, even if you hide them.",
        CHANNEL_BROWSER_ADMIN_NUX_TITLE:
          "Hey admin, make this page less overwhelming for members",
        CHANNEL_BROWSER_ADMIN_NUX_DESCRIPTION:
          "Use the new Community Onboarding features to help members pick their channels and roles. Easy to use for you and your community!",
        CHANNEL_BROWSER_ADMIN_NUX_CTA: "Check it out",
        CHANNEL_RECOMMENDED: "Recommended",
        CHANNEL_POPULAR: "Popular",
        GUILD_ONBOARDING_DEFAULT_CHANNELS_MIN_CHANNELS:
          "Must include at least {count} channels",
        GUILD_ONBOARDING_DEFAULT_CHANNELS_MIN_CHATTABLE_CHANNELS:
          "Must include {count} channels where @everyone can read and send message.",
        GUILD_ONBOARDING_DEFAULT_CHANNELS_RECOMMENDED_DESCRIPTION:
          "These are the channels your members read most.",
        GUILD_ONBOARDING_DEFAULT_CHANNELS_RECOMMENDED_DISMISS_ALL:
          "Dismiss all",
        GUILD_ONBOARDING_DEFAULT_CHANNELS_RULES_DISCOURAGED:
          "We don't recommend adding the rules channel as a Default Channel",
        GUILD_ONBOARDING_DEFAULT_CHANNELS_VOICE_TOOLTIP:
          "Voice Channels you don't select will still be available in the Voice Channel section of the channel list.",
        GUILD_SIDEBAR_CUSTOMIZE_COMMUNITY: "Customize Community",
        CUSTOMIZE_COMMUNITY_HTML_TITLE: "Customize Community - !!{guildName}!!",
        CUSTOMIZE_COMMUNITY_TITLE: "Customize Community",
        CUSTOMIZE_COMMUNITY_EMPTY_HEADER:
          "There are no customization options yet.",
        CUSTOMIZE_COMMUNITY_EMPTY_SUBHEADER:
          "You can add and remove channels from [Browse Channels](onBrowseChannels).",
        CHANNELS_AND_ROLES: "Channels & Roles",
        CHANNELS_AND_ROLES_HTML_TITLE: "Channels & Roles - !!{guildName}!!",
        CUSTOMIZE_COMMUNITY_TAB: "Customize",
        BROWSE_CHANNELS_TAB: "All Channels",
        CUSTOMIZE_TAB_TITLE: "Customization Questions",
        CUSTOMIZE_TAB_SUBTITLE:
          "Answer questions to get access to more channels and roles.",
        SERVER_GUIDE: "Server Guide",
        MEMBER_ACTION_CHAT: "Send a message",
        MEMBER_ACTION_COMPLETE_MODAL_TEXT: "You're all set!",
        MEMBER_ACTION_COMPLETE_MODAL_TEXT_WITH_COUNT:
          "You've explored {count} starter channels, great job!",
        MEMBER_ACTIONS_READ_RULES_FIRST:
          "Remember to read the $[Rules](rulesHook) before you talk",
        MEMBER_ACTIONS_NEXT_STEP: "Next: !!{step}!!",
        MEMBER_ACTION_COMPLETE_EMPTY_STATE: "You're all set!",
        MEMBER_ACTION_COMPLETE_EMPTY_STATE_CTA: "Explore the Server",
        GUILD_ONBOARDING_NAGBAR_MESSAGE:
          "Introducing Community Onboarding: a better way for members to get roles!",
        GUILD_ONBOARDING_CHANNEL_NOTICE_TITLE:
          "Introducing Community Onboarding",
        GUILD_ONBOARDING_CHANNEL_NOTICE_MESSAGE:
          "A better way for members to get roles",
        GUILD_ONBOARDING_NOTICE_TITLE: "Complete Onboarding!",
        GUILD_ONBOARDING_COMPLETED_TITLE: "Welcome!",
        GUILD_ONBOARDING_COMPLETED_SUBTITLE:
          "Start chatting with your new friends!",
        GUILD_ONBOARDING_NOTICE_SUBTITLE:
          "Answer a few questions to customize your channels and start chatting.",
        GUILD_ONBOARDING_COMPLETED_JOINED: "Joined !!{guildName}!!",
        GUILD_ONBOARDING_COMPLETED_ROLES:
          "Sharing roles with {numSharedRoleMembers} other members",
        GUILD_ONBOARDING_PREVIEW_AS_MEMBER:
          "Preview onboarding as a new member before you enable it!",
        GUILD_ONBOARDING_PREVIEW_CTA: "Test Onboarding",
        GUILD_ONBOARDING_SETUP_STEP_SAFETY:
          "{stepNumber, number}. Safety Check",
        GUILD_ONBOARDING_SETUP_STEP_CHANNELS:
          "{stepNumber, number}. Default Channels",
        GUILD_ONBOARDING_SETUP_STEP_CHANNELS_ADVANCED:
          "{stepNumber, number}. Default Channels & Pre-join Questions",
        GUILD_ONBOARDING_SETUP_STEP_WELCOME:
          "{stepNumber, number}. Welcome Card",
        GUILD_ONBOARDING_SETUP_STEP_PROMPTS:
          "{stepNumber, number}. Customization Questions",
        GUILD_ONBOARDING_SETUP_STEP_PROMPTS_ADVANCED:
          "{stepNumber, number}. Post-join Questions",
        GUILD_ONBOARDING_SETUP_STEP_HOME: "{stepNumber, number}. Server Guide",
        GUILD_ONBOARDING_SETUP_STEP_REVIEW: "{stepNumber, number}. Review",
        GUILD_ONBOARDING_SETUP_STEP_COUNTER:
          "{count, number} of {total, number}",
        GUILD_ONBOARDING_ON: "On",
        GUILD_ONBOARDING_OFF: "Off",
        GUILD_ONBOARDING_UPSELL_MODAL_TITLE:
          "Onboarding: a better way to grant roles",
        GUILD_ONBOARDING_UPSELL_MODAL_DESCRIPTION:
          "With Community Onboarding, members answer a few questions and automatically receive roles. Set it up for {guildName} today to improve engagement and retention!",
        GUILD_ONBOARDING_TESTIMONIAL_DESIGN_BUDDIES:
          "After Design Buddies replaced our role reaction gating with Onboarding, we saw a 134% increase in retention and significantly $[more new members chatting.](testimonialHook)",
        GUILD_ONBOARDING_TESTIMONIAL_DUNGEON_SLIMES:
          "Onboarding streamlines the new user experience, $[breaking down customization barriers](testimonialHook), promoting inclusivity, and delivering a personalized, welcoming experience.",
        GUILD_ONBOARDING_TESTIMONIAL_HARRY_POTTER:
          "Onboarding let newbies tailor their own unique experience on the server based on how they wanted to engage. It $[strengthened our retention over 10%](testimonialHook) since enabling!",
        GUILD_ONBOARDING_TESTIMONIAL_VALORANT:
          "We gained $[~15,000 members assigning themselves a ping role](testimonialHook) in a month or so. It’s far more effective compared to just having a self assign roles channel.",
        GUILD_ONBOARDING_TESTIMONIAL_ADMIN_VALORANT: "cal, VALORANT admin",
        GUILD_ONBOARDING_TESTIMONIAL_ADMIN_DESIGN_BUDDIES:
          "Grace, Design Buddies founder",
        GUILD_ONBOARDING_TESTIMONIAL_ADMIN_DUNGEON_SLIMES:
          "Dr Pigeon, Dungeon Slimes admin",
        GUILD_ONBOARDING_TESTIMONIAL_ADMIN_HARRY_POTTER:
          "Howl, Harry Potter admin",
        GUILD_ONBOARDING_UPSELL_DESCRIPTION:
          "This new feature lets you customize channels and roles for your new members. Give them the perfect starting experience.",
        GUILD_ONBOARDING_UPSELL_DESCRIPTION_1:
          "Choose the top channels that all new members should start with.",
        GUILD_ONBOARDING_UPSELL_DESCRIPTION_2:
          "Set up questions that customize their other channels and roles based on their interests.",
        GUILD_ONBOARDING_UPSELL_DESCRIPTION_3:
          "A hassle-free way to help your new members succeed and feel welcome.",
        GUILD_ONBOARDING_UPSELL_DESCRIPTION_4:
          "Includes added protection from join raids.",
        GUILD_ONBOARDING_UPSELL_COACHMARK_TITLE: "Set up Community Onboarding!",
        GUILD_ONBOARDING_UPSELL_COACHMARK_DESCRIPTION:
          "Customize channels and roles for your new members.",
        GUILD_ONBOARDING_UPSELL_COACHMARK_CHECK_IT_OUT: "Check it out",
        GUILD_ONBOARDING_SETUP_LANDING_TITLE:
          "Welcome your new members with Onboarding!",
        GUILD_ONBOARDING_SETUP_LANDING_SUBTITLE:
          "Customize channels and roles for your new members. Give them the perfect starting experience.",
        GUILD_ONBOARDING_SETUP_LANDING_CTA: "Check it out",
        GUILD_ONBOARDING_SETUP_LANDING_CHANNELS_TITLE:
          "Help members pick additional channels and roles",
        GUILD_ONBOARDING_SETUP_LANDING_CHANNELS_SUBTITLE:
          "Create customization questions and ask members to answer them before or after joining. Hassle-free and easy to use, for both you and your members!",
        GUILD_ONBOARDING_SETUP_LANDING_WELCOMECARD_TITLE:
          "Introduce your community",
        GUILD_ONBOARDING_SETUP_LANDING_WELCOMECARD_SUBTITLE:
          "Showcase up to 5 channels on Home to help new members discover all the cool things to do here!",
        GUILD_ONBOARDING_SETUP_LANDING_ONBOARDING_TITLE:
          "Choose which channels new members start with",
        GUILD_ONBOARDING_SETUP_LANDING_ONBOARDING_SUBTITLE:
          "Give them a set of channels that's just the stuff they care about. Hide any unwanted Archives or bot-spam. Less overwhelming, more chatting!",
        GUILD_ONBOARDING_SETUP_LANDING_GUIDE_TITLE:
          "Say hi to every member and help them engage",
        GUILD_ONBOARDING_SETUP_LANDING_GUIDE_SUBTITLE:
          "Create a custom welcome message and instructions for getting started. You can also show members resource pages for FAQ, Rules, and more.",
        GUILD_ONBOARDING_SETUP_LANDING_GUIDE_WELCOME_MESSAGE:
          "Hi [@username]! I made this server so that nerds like us could have a safe space to be ourselves. So excited to have you here",
        GUILD_ONBOARDING_SETUP_LANDING_GUIDE_TODO_1_TITLE: "Introduce yourself",
        GUILD_ONBOARDING_SETUP_LANDING_GUIDE_TODO_2_TITLE:
          "Share your favorite thing",
        GUILD_ONBOARDING_SETUP_LANDING_GUIDE_TODO_1_CHANNEL_NAME:
          "in #introductions",
        GUILD_ONBOARDING_SETUP_LANDING_GUIDE_TODO_2_CHANNEL_NAME:
          "in #showcase",
        GUILD_ONBOARDING_SETUP_EDUCATION_OVERVIEW_TITLE:
          "Let's create a welcoming new member experience!",
        GUILD_ONBOARDING_SETUP_EDUCATION_OVERVIEW_SUBTITLE:
          "In the next few steps, you will set up...",
        GUILD_ONBOARDING_SETUP_EDUCATION_OVERVIEW_DEFAULT_CHANNELS_TITLE:
          "$[Default Channels](textHook) that every member starts with.",
        GUILD_ONBOARDING_SETUP_EDUCATION_OVERVIEW_CUSTOMIZATION_QUESTIONS_TITLE:
          "$[Customization Questions](textHook) to help your members pick their channels and roles.",
        GUILD_ONBOARDING_SETUP_EDUCATION_OVERVIEW_SUBTEXT:
          "Your changes are saved automatically, and these features will not be enabled until you turn it on.",
        GUILD_ONBOARDING_SETUP_EDUCATION_OVERVIEW_CTA: "Got it!",
        GUILD_ONBOARDING_SETUP_EDUCATION_DEFAULT_CHANNELS_TITLE:
          "What are the channels every member should have?",
        GUILD_ONBOARDING_SETUP_EDUCATION_DEFAULT_CHANNELS_SUBTITLE:
          "Choose as many defaults as you need. Members can pick more channels from Customization Questions. And we'll show members any new channels you make.",
        GUILD_ONBOARDING_SETUP_EDUCATION_CUSTOMIZATION_QUESTIONS_TITLE:
          "Ask questions to help members pick additional channels and roles.",
        GUILD_ONBOARDING_SETUP_EDUCATION_CUSTOMIZATION_QUESTIONS_SUBTITLE:
          'Try using questions like "What do you want to do here?" or "What are your hobbies?" to further customize each member\'s channel list.',
        GUILD_ONBOARDING_UPSELL_PREVIEW_CHANNELS_TITLE:
          "What do you want to do in this server?",
        GUILD_ONBOARDING_UPSELL_PREVIEW_CHANNELS_TITLE_TOOLTIP:
          "What do you want to do here?",
        GUILD_ONBOARDING_UPSELL_PREVIEW_CHANNELS_1: "Discuss cool books",
        GUILD_ONBOARDING_UPSELL_PREVIEW_CHANNELS_1_EMOJI: "Wizard Emoji",
        GUILD_ONBOARDING_UPSELL_PREVIEW_CHANNELS_2: "Join the weekly book club",
        GUILD_ONBOARDING_UPSELL_PREVIEW_CHANNELS_2_EMOJI: "Microphone Emoji",
        GUILD_ONBOARDING_UPSELL_PREVIEW_CHANNELS_3: "Keep up with book news",
        GUILD_ONBOARDING_UPSELL_PREVIEW_CHANNELS_3_EMOJI: "Eyes Emoji",
        GUILD_ONBOARDING_UPSELL_PREVIEW_CHANNELS_SUBTITLE:
          "You will be added to **@Books** and **#book-chat** channel",
        GUILD_ONBOARDING_UPSELL_PREVIEW_CHANNELS_SUBTITLE_TOOLTIP:
          "You will be added to **@Books** and **#book-chat**",
        GUILD_ONBOARDING_UPSELL_PREVIEW_WELCOMECARD_TITLE: "Top things to do",
        GUILD_ONBOARDING_UPSELL_PREVIEW_WELCOMECARD_1_CHANNEL: "#lounge",
        GUILD_ONBOARDING_UPSELL_PREVIEW_WELCOMECARD_1_SUBTITLE:
          "Chat and hang out with your fellow bookies",
        GUILD_ONBOARDING_UPSELL_PREVIEW_WELCOMECARD_1_EMOJI: "Magic Wand Emoji",
        GUILD_ONBOARDING_UPSELL_PREVIEW_WELCOMECARD_2_CHANNEL: "#book-recs",
        GUILD_ONBOARDING_UPSELL_PREVIEW_WELCOMECARD_2_SUBTITLE:
          "Share and browse book recommendations!",
        GUILD_ONBOARDING_UPSELL_PREVIEW_WELCOMECARD_2_EMOJI:
          "Waving Hand Emoji",
        GUILD_ONBOARDING_UPSELL_PREVIEW_WELCOMECARD_3_CHANNEL:
          "#quote-of-the-week",
        GUILD_ONBOARDING_UPSELL_PREVIEW_WELCOMECARD_3_SUBTITLE:
          "Discuss great quotes from literary history",
        GUILD_ONBOARDING_UPSELL_PREVIEW_WELCOMECARD_3_EMOJI: "Hourglass Emoji",
        GUILD_ONBOARDING_UPSELL_PREVIEW_LANDING_1: "announcements",
        GUILD_ONBOARDING_UPSELL_PREVIEW_LANDING_2: "introductions",
        GUILD_ONBOARDING_UPSELL_PREVIEW_LANDING_3: "bot-spam",
        GUILD_ONBOARDING_UPSELL_PREVIEW_LANDING_4: "book-recs",
        GUILD_ONBOARDING_UPSELL_PREVIEW_VALUE_TITLE:
          "Let’s create a welcoming new member experience!",
        GUILD_ONBOARDING_SETUP_WELCOME_CARD_TITLE: "Welcome Card",
        GUILD_ONBOARDING_SETUP_REVIEW_SET_UP: "Set up",
        GUILD_ONBOARDING_SETUP_REVIEW_NUM_DEFAULT_CHANNELS:
          "You have {numDefaultChannels, plural, =1 {1 Default Channel} other {{numDefaultChannels} Default Channels}}",
        GUILD_ONBOARDING_SETUP_REVIEW_NUM_DEFAULT_CHANNELS_ADVANCED:
          "You have {numDefaultChannels, plural, =1 {1 Default Channel} other {{numDefaultChannels} Default Channels}} and at least {numFromQuestions, plural, =1 {1 channels} other {{numFromQuestions} channels}} assigned by questions.",
        GUILD_ONBOARDING_SETUP_REVIEW_NOT_ENOUGH_DEFAULT_CHANNELS:
          "You must have {numDefaultChannels} total channels and {numChattableChannels} channels new members can talk in",
        GUILD_ONBOARDING_SETUP_REVIEW_NUM_STARTER_QUESTIONS:
          "You have created {numOnboardingPrompts, plural, =0 {no Customization Questions} =1 {1 Customization Question} other {{numOnboardingPrompts} Customization Questions}}",
        GUILD_ONBOARDING_SETUP_REVIEW_NO_STARTER_QUESTIONS:
          "You have not set up Customization Questions.",
        GUILD_ONBOARDING_SETUP_REVIEW_NUM_WELCOME_CHANNELS:
          "You have {numWelcomeChannels, plural, =0 {no channels} =1 {1 channel} other {{numWelcomeChannels} channels}} in your Welcome Card",
        GUILD_ONBOARDING_SETUP_REVIEW_NO_WELCOME_CHANNELS:
          "You have not set up a Welcome Card.",
        GUILD_ONBOARDING_SETUP_REVIEW_ENABLE_ONBOARDING: "Enable Onboarding",
        GUILD_ONBOARDING_SETUP_REVIEW_DESCRIPTION:
          "Push the big blue button to turn on your new member experience!",
        GUILD_ONBOARDING_SETUP_REVIEW_TITLE: "You're ready to enable",
        GUILD_ONBOARDING_SETUP_REVIEW_TITLE_INCOMPLETE:
          "You're missing a few items...",
        GUILD_ONBOARDING_SETUP_REVIEW_DESCRIPTION_INCOMPLETE:
          "To enable Onboarding, you must meet these requirements.",
        GUILD_ONBOARDING_SETUP_PREVIEW: "Preview",
        GUILD_ONBOARDING_SETUP_PREVIEW_ROLES_WARNING:
          "Once enabled, getting a role will not bypass a member through verification and Rules. To manually verify members, you can right click a user and select Verify Member, or use the Members tab.",
        GUILD_ONBOARDING_OVERVIEW_UPDATES_HEADER: "Recent Updates",
        GUILD_ONBOARDING_OVERVIEW_UPDATES_2:
          "You can now upload custom images for New Member To Dos and Resource Pages.",
        GUILD_ONBOARDING_OVERVIEW_UPDATES_3:
          "Added a custom description option for Resource pages",
        GUILD_ONBOARDING_OVERVIEW_SUBTITLE:
          "Give your members a simple starting experience with custom channels, roles, and first steps.",
        GUILD_ONBOARDING_OVERVIEW_SEE_EXAMPLES: "See examples",
        GUILD_ONBOARDING_OVERVIEW_TITLE_ENABLED: "Onboarding is Enabled",
        GUILD_ONBOARDING_OVERVIEW_TITLE_DISABLED: "Onboarding is Disabled",
        GUILD_ONBOARDING_OVERVIEW_SUBTITLE_ENABLED:
          "Changes will not take effect until you save.",
        GUILD_ONBOARDING_OVERVIEW_SUBTITLE_DISABLED:
          "Changes will not take effect until you save.",
        GUILD_ONBOARDING_NEW_MEMBER_PROGRESS_BAR_GET_STARTED: "Get Started",
        GUILD_ONBOARDING_NEW_MEMBER_PROGRESS_BAR_COUNTER:
          "$[{completed}](numberHook) of $[{total}](numberHook)",
        GUILD_SETTINGS_DEFAULT_CHANNELS: "Default Channels",
        GUILD_SETTINGS_DEFAULT_CHANNELS_ADVANCED:
          "Default Channels & Pre-join Questions",
        GUILD_SETTINGS_DEFAULT_CHANNELS_SUBHEADER:
          "Set default channels every member will see in their channel list when they join. Members can add more channels using Customization Questions.",
        GUILD_SETTINGS_PRE_JOIN_QUESTIONS_HEADER: "Pre-join Questions",
        GUILD_SETTINGS_PRE_JOIN_QUESTIONS_SUBHEADER:
          "Set questions to ask every member on join. Answers will be used to assign roles and channels.",
        GUILD_SETTINGS_DEPRIVATE_MODAL_HEADER: "Allow @everyone",
        GUILD_SETTINGS_DEPRIVATE_EXPLAINER_1:
          "Default Channels need $[View Channel permission for @everyone.](emphasisHook) Members can't be opted into channels they don't have access to.",
        GUILD_SETTINGS_DEPRIVATE_EXPLAINER_2:
          "Letting your members view top channels will $[help them understand your community.](emphasisHook)",
        GUILD_SETTINGS_DEPRIVATE_EXPLAINER_3:
          "Don't worry, new members still need to $[agree to the rules](emphasisHook) before chatting in your server.",
        GUILD_SETTINGS_DEPRIVATE_EXPLAINER_4:
          "$[@everyone](emphasisHook) role will be granted $[View Channel](brandHook) and $[Connect](brandHook) permissions.",
        GUILD_SETTINGS_DEPRIVATE_TITLE: "Update Channel Permissions",
        GUILD_SETTINGS_DEPRIVATE_SUBTITLE:
          "Select channels to allow everyone to either view this channel and/or connect to voice",
        GUILD_SETTINGS_DEPRIVATE_CHANNEL_COUNT:
          "{count, plural, =1 {1 Private Channel} other {{count} Private Channels}}",
        GUILD_SETTINGS_UPDATE_PERMISSIONS: "Update Permissions",
        GUILD_SETTINGS_REVIEW_PERMISSIONS: "Review Permissions",
        GUILD_SETTINGS_CHANNEL_SETTINGS: "Channel Settings",
        GUILD_SETTINGS_SUMMARIES_TOGGLE: "Enable Channel Summaries",
        GUILD_SETTINGS_SUMMARIES_TOGGLE_DESCRIPTION:
          "Enable Channel Summaries for this server to help your members catch up and dive into discussions. In text channels, members will be able to see a list of topics being discussed and which members are involved. [Learn More]({helpdeskArticle})",
        UNLOCK: "Unlock",
        DEFAULT_CHANNELS_PREVIEW_HEADER: "Preview",
        DEFAULT_CHANNELS_PREVIEW_EMPTY_STATE:
          "Add 5-10 channels that all users will see!",
        DEFAULT_CHANNELS_GOOD: "Good",
        DEFAULT_CHANNELS_CHATTABLE_COUNT:
          "{count, plural, =0 {0 chattable} other {{count} chattable}}",
        DEFAULT_CHANNELS_TOTAL_COUNT:
          "{count, plural, =0 {0 total} other {{count} total}}",
        DEFAULT_CHANNELS_ADVANCED_EXPLAINER:
          "Total is calculated by the number of Default Channels + minimum possible channels assigned through Required Questions",
        DEFAULT_CHANNELS_TOGGLE:
          "After you've saved your changes, remember to enable Default Channels for your community!",
        DEFAULT_CHANNELS_PREVIEW_VOICE_HELP:
          "Voice and Stage channels you do not select as default will be accessible in this Voice Channel section. It will also spotlight any active voice or stage channels in your community.",
        DEFAULT_CHANNELS_PREVIEW_BROWSE_CHANNELS_HELP:
          "All channels a member has permission to view will be accessible in Browse Channels. Here they can add and remove channels and categories to their channel list.",
        DEFAULT_CHANNELS_DISABLED_PRIVATE:
          "@everyone must have View permission for this channel.",
        DEFAULT_CHANNELS_PREVIEW_ADDITIONAL:
          "Minimum {count} channels assigned through required $[Pre-join Questions](prejoinHook).",
        ONBOARDING_PROMPT_OPTION_MODAL_TITLE: "Add an Answer",
        ONBOARDING_PROMPT_OPTION_TITLE_PLACEHOLDER: "Enter an answer...",
        ONBOARDING_PROMPT_OPTION_NAME_HEADER: "1. Add an answer",
        ONBOARDING_PROMPT_OPTION_ROLES_CHANNELS_HEADER:
          "2. Assign channels and/or roles",
        ONBOARDING_PROMPT_OPTION_ROLES_CHANNELS_FOOTER:
          "Based on people's responses, you'll be assigning them to channels and/or roles.",
        ONBOARDING_PROMPT_OPTION_EMOJI_HEADER: "3. Pick an emoji",
        ONBOARDING_PROMPT_OPTION_EMOJI_SUBHEADER:
          "Optional, but why not add some fun?",
        ONBOARDING_PROMPT_OPTION_DESCRIPTION_PLACEHOLDER:
          "Enter a description... (optional)",
        ONBOARDING_PROMPT_OPTION_CHANNEL_ROLES_PLACEHOLDER:
          "Enter #channels or @roles",
        ONBOARDING_PROMPT_SAVE_FAILED: "Failed to save changes",
        ONBOARDING_PROMPT_SAVE_TOO_MANY_PROMPTS_IN_ONBOARDING:
          'You cannot have more than {numQuestions} questions marked as "Ask before member joins"',
        DEFAULT_CHANNELS_SAVE_INVALID_DEFAULT_CHANNELS:
          "Your Default Channels must meet the latest requirements to be saved.",
        ONBOARDING_PROMPT_TITLE_REQUIRED: "Question is required",
        ONBOARDING_PROMPT_ANSWER_REQUIRED: "At least one answer is required",
        ONBOARDING_PROMPT_OPTION_TITLE_REQUIRED: "Title is required",
        ONBOARDING_PROMPT_OPTION_ROLES_REQUIRED:
          "At least one channel or role is required",
        ONBOARDING_PROMPT_OPTION_QUESTION_NUMBER: "Question {index, number}",
        GUILD_SETTINGS_ONBOARDING: "Onboarding",
        ONBOARDING_PROMPT_ANSWERS_NEW:
          "{count, plural, =1 {New Option} other {New Options}}",
        ONBOARDING_PROMPT_QUESTIONS_HEADER:
          "{count, plural, =1 {Customization Question} other {Customization Questions}}",
        ONBOARDING_PROMPT_SETTINGS_HEADER: "Questions",
        ONBOARDING_PROMPT_SETTINGS_HEADER_ADVANCED: "Post-join Questions",
        ONBOARDING_PROMPT_SETTINGS_SUBHEADER:
          "Create questions to help members pick additional channels and roles. Their channel list will be customized based on their answers.",
        ONBOARDING_PROMPTS_INCOMPLETE: "You have incomplete questions",
        ONBOARDING_QUESTIONS_PRE_JOIN_HEADER: "Pre-join Questions",
        ONBOARDING_QUESTIONS_PRE_JOIN_SUBHEADER:
          "Members will be asked these questions before they join your server. Use them to assign channels and important roles. Pre-join Questions will also be available on the Channels & Roles page.",
        ONBOARDING_QUESTIONS_POST_JOIN_HEADER: "Post-join Questions",
        ONBOARDING_QUESTIONS_POST_JOIN_SUBHEADER:
          "Members will be asked these questions after they join your server, on the Channels & Roles page. Use them to\n  assign roles that members can pick later, like vanity roles.",
        ONBOARDING_QUESTIONS_CANNOT_MOVE: "Cannot move this Question",
        ONBOARDING_QUESTIONS_SAVE_TOO_MANY_PROMPTS_IN_ONBOARDING:
          "You cannot have more than {numQuestions} pre-join Questions",
        ONBOARDING_PROMPTS_WARNING: "Warning",
        ONBOARDING_PROMPT_CHANNEL_COVERAGE:
          "{numChannels, plural, =0 {$[0 of {numTotalChannels}](channelsHook)} other {$[{numChannels} of {numTotalChannels}](channelsHook)}} public channels are assignable through Questions and Default Channels.",
        ONBOARDING_PROMPT_CHANNEL_COVERAGE_MISSING_CHANNELS:
          "{numChannelsMissing, plural, =0 {No} other {{numChannelsMissing}}} public channels are missing from Questions and Default Channels.",
        ONBOARDING_PROMPT_CHANNEL_COVERAGE_CHANNELS: "CHANNELS NOT ASSIGNED",
        ONBOARDING_PROMPT_CHANNEL_COVERAGE_HELP:
          "At least {percent}% ({numChannels}) of your public channels should be assignable through Questions or Default Channels, or members will have a hard time finding them.",
        ONBOARDING_PROMPT_CHANNEL_COVERAGE_ADD_HELP:
          "Add at least {numChannels} more channels to Questions or Default Channels, or members will have a hard time finding them.",
        ONBOARDING_PROMPT_TOGGLE:
          "After you've saved your changes, remember to enable Starter Questions for your community!",
        ONBOARDING_PROMPT_INCLUDE_IN_ONBOARDING_LABEL:
          "Ask before member joins",
        ONBOARDING_PROMPT_REQUIRED_DISABLED_TOOLTIP:
          "Question must be asked before join to be Required",
        ONBOARDING_PROMPT_REQUIRED_LABEL: "Required",
        ONBOARDING_PROMPT_REQUIRED_LABEL_WITH_COUNT:
          "Required {count, plural, =0 {} =1 {+ Assigns at least 1 channel} other {+ Assigns at least {count} channels}}",
        ONBOARDING_PROMPT_SINGLE_SELECT_LABEL: "Limit to only one answer",
        ONBOARDING_PROMPT_ALLOW_MULTIPLE_LABEL: "Allow multiple answers",
        ONBOARDING_PROMPT_DELETE: "Delete this question",
        ONBOARDING_PROMPT_DEFAULT_TITLE:
          "What do you want to do in this community?",
        ONBOARDING_PROMPT_TITLE_PLACEHOLDER: "Enter a question...",
        ONBOARDING_PROMPT_OPTIONS_HEADER:
          "Available Answers — {count, number} of {total, number}",
        ONBOARDING_PROMPT_DROPDOWN_OPTIONS_HEADER:
          "Available Answers — {count, number} of {total, number} shown in a dropdown list",
        ONBOARDING_PROMPT_ADD_PROMPT: "Add a Question",
        ONBOARDING_PROMPT_ADD_OPTION: "Add an Answer",
        ONBOARDING_PROMPT_EXAMPLES_HEADER: "Here are some examples:",
        ONBOARDING_PROMPT_EXAMPLES_1: "What off-topic channels do you want?",
        ONBOARDING_PROMPT_EXAMPLES_2: "What do you want notifications for?",
        ONBOARDING_PROMPT_EXAMPLES_3:
          "What kind of events are you interested in?",
        ONBOARDING_PROMPT_EXAMPLES_4: "What’s your favorite book genre?",
        ONBOARDING_PROMPT_EXAMPLES_5: "What region are you in?",
        ONBOARDING_PROMPT_EXAMPLES_6: "Pick a favorite color!",
        ONBOARDING_PROMPT_SINGLE_SELECT_UNIQUE_ROLES:
          "Roles used in single-select questions cannot be granted by other questions",
        ONBOARDING_PROMPT_NO_PRIVATE_CHANNELS:
          "@everyone must have View permission for channels used in answers",
        ONBOARDING_PROMPT_NO_PRIVATE_CHANNELS_SUBTEXT:
          "Members will receive all channels granted by these roles",
        ONBOARDING_PROMPT_ACCEPT_SERVER_RULES:
          "Members will be asked to accept Server Rules after questions in Onboarding.",
        ONBOARDING_PROMPT_MEMBER_DESCRIPTION:
          "Answer questions to get access to more channels and roles.",
        ONBOARDING_PROMPT_THRESHOLD_ALERT_TITLE:
          "Changing answers to a dropdown",
        ONBOARDING_PROMPT_THRESHOLD_ALERT_DESCRIPTION:
          "When adding {thresholdCount, number} or more answers to a question, we show them to members as dropdown options without descriptions.",
        CUSTOMIZE_COMMUNITY_PROFILE: "My Profile",
        CUSTOMIZE_COMMUNITY_PROFILE_DESCRIPTION:
          "This is how you'll look to others!",
        CUSTOMIZE_COMMUNITY_ADD_CHANNELS:
          "You received {count, plural, =1 {the $[!!{channel1}!!](itemHook) channel.} =2 {the $[!!{channel1}!!](itemHook) and $[!!{channel2}!!](itemHook) channels.} other {$[!!{channel1}!!](itemHook), $[!!{channel2}!!](itemHook), and {extraCount, plural, one {1 other channel} other {{extraCount} other channels}}.}}",
        CUSTOMIZE_COMMUNITY_ADD_ROLES:
          "You received {count, plural, =1 {the $[!!{role1}!!](itemHook) role.} =2 {the $[!!{role1}!!](itemHook) and $[!!{role2}!!](itemHook) roles.} other {$[!!{role1}!!](itemHook), $[!!{role2}!!](itemHook), and {extraCount, plural, one {1 other role} other {{extraCount} other roles}}.}}",
        CUSTOMIZE_COMMUNITY_ADD_CHANNELS_AND_ROLES:
          "You received {channelCount, plural, =1 {the $[!!{channel1}!!](itemHook) channel} =2 {the $[!!{channel1}!!](itemHook) and $[!!{channel2}!!](itemHook) channels} other {$[!!{channel1}!!](itemHook), $[!!{channel2}!!](itemHook), and {extraChannelCount, plural, one {1 other channel} other {{extraChannelCount} other channels}}}}, and {roleCount, plural, =1 {the $[!!{role1}!!](itemHook) role.} =2 {the $[!!{role1}!!](itemHook) and $[!!{role2}!!](itemHook) roles.} other {$[!!{role1}!!](itemHook), $[!!{role2}!!](itemHook), and {extraRoleCount, plural, one {1 other role} other {{extraRoleCount} other roles}}.}}",
        ROLE_IN_PROMPT_NOTICE_TEXT: "This role can be selected by members.",
        ROLE_IN_PROMPT_POWERFUL_NOTICE_TEXT:
          "This role can be selected by members and has powerful permissions.",
        ROLE_PROMPT_ROLE_IS_POWERFUL:
          "This role has potentially dangerous permissions: !!{permissions}!!.",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_CREATE:
          "$[**!!{user}!!**](userHook) created a new customization question",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_UPDATE:
          "$[**!!{user}!!**](userHook) updated the customization question $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_DELETE:
          "$[**!!{user}!!**](userHook) deleted the customization question $[**!!{target}!!**](targetHook)",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_TITLE_CREATE:
          "Set the title to empty",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_TITLE_CHANGE:
          "Changed the title from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_DESCRIPTION_CREATE:
          "Set the description to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_DESCRIPTION_CHANGE:
          "Changed the description from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_SINGLE_SELECT:
          "Set the customization question to single select",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_MULTI_SELECT:
          "Set the customization question to multi select",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_REQUIRED:
          "Set the customization question to required",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_OPTIONAL:
          "Set the customization question to optional",
        GUILD_SETTINGS_ACTION_FILTER_ROLE_PROMPT_CREATE:
          "Create Customization Question",
        GUILD_SETTINGS_ACTION_FILTER_ROLE_PROMPT_UPDATE:
          "Update Customization Question",
        GUILD_SETTINGS_ACTION_FILTER_ROLE_PROMPT_DELETE:
          "Delete Customization Question",
        GUILD_SETTINGS_AUDIT_LOG_ROLE_PROMPT_EMPTY_VALUE: "[empty]",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_CREATED_OPTION:
          "Created answer **!!{title}!!**",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_WITH_ROLES:
          "with roles **!!{roles}!!**",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_WITH_CHANNELS:
          "with channels **!!{channels}!!**",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_UPDATED_OPTION:
          "Updated answer **!!{title}!!**",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_ADD_CHANNELS:
          "added channels **!!{channels}!!**",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_REMOVE_CHANNELS:
          "removed channels **!!{channels}!!**",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_ADD_ROLES:
          "added roles **!!{roles}!!**",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_REMOVE_ROLES:
          "removed roles **!!{roles}!!**",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_VALUE_CHANGE:
          "Changed **{key}** from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_DELETED_OPTION:
          "Deleted answer **!!{title}!!**",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_PROMPT_CHANGED_OPTIONS:
          "Changed answers for customization question",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_CREATE:
          "$[**!!{user}!!**](userHook) started onboarding for this server",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_UPDATE:
          "$[**!!{user}!!**](userHook) updated onboarding for this server",
        GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_CREATE:
          "$[**!!{user}!!**](userHook) created the Server Guide for this server",
        GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_UPDATE:
          "$[**!!{user}!!**](userHook) updated the Server Guide for this server",
        GUILD_SETTINGS_ACTION_FILTER_ONBOARDING_CREATE: "Create Onboarding",
        GUILD_SETTINGS_ACTION_FILTER_ONBOARDING_UPDATE: "Update Onboarding",
        GUILD_SETTINGS_ACTION_FILTER_HOME_SETTINGS_CREATE:
          "Create Server Guide",
        GUILD_SETTINGS_ACTION_FILTER_HOME_SETTINGS_UPDATE:
          "Update Server Guide",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_DEFAULT_CHANNEL_IDS:
          "Set {count, plural, =1 {1 default channel} other {{count} default channels}}",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_ENABLE_DEFAULT_CHANNELS:
          "Set default channels to enabled",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_DISABLE_DEFAULT_CHANNELS:
          "Set default channels to disabled",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_ENABLE_PROMPTS:
          "Set customization questions to enabled",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_DISABLE_PROMPTS:
          "Set customization questions to disabled",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_ENABLE: "Enabled Onboarding",
        GUILD_SETTINGS_AUDIT_LOG_ONBOARDING_DISABLE: "Disabled Onboarding",
        GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_AUTHOR_CHANGE:
          "Change welcome message author from **!!{oldUser}!!** to **!!{newUser}!!**",
        GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_MESSAGE_CHANGE:
          "Change welcome message from **!!{oldMessage}!!** to **!!{newMessage}!!**",
        GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_CHANGED_WELCOME_MESSAGE:
          "Changed the welcome message",
        GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_CHANGED_NEW_MEMBER_ACTIONS:
          "Changed the new member To Dos",
        GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_CHANGED_RESOURCE_CHANNELS:
          "Changed resource channels",
        GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_NEW_MEMBER_ACTION_ADDED:
          "Added To Do **!!{name}!!**",
        GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_NEW_MEMBER_ACTION_REMOVED:
          "Removed To Do **!!{name}!!**",
        GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_RESOURCE_CHANNEL_ADDED:
          "Added resource **!!{name}!!**",
        GUILD_SETTINGS_AUDIT_LOG_HOME_SETTINGS_RESOURCE_CHANNEL_REMOVED:
          "Removed resource **!!{name}!!**",
        APPLICATION_DIRECTORY_PROFILE_TOOLTIP_PREMIUM:
          "This app has premium features!",
        APPLICATION_DIRECTORY_LISTING_TOOLTIP_PREMIUM:
          "Premium Features Available",
        INTERACTION_PREMIUM_UPSELL_MOBILE:
          "This command requires !!{appName}!! Premium, which isn't available to purchase on mobile.",
        NITRODUCTION_ONBOARDING_HEADING_PROFILE_CUSTOMIZATION_AVATAR:
          "Animate your avatar",
        NITRODUCTION_ONBOARDING_HEADING_PROFILE_CUSTOMIZATION_AVATAR_DECORATIONS:
          "Deck out your avatar",
        NITRODUCTION_ONBOARDING_HEADING_PROFILE_CUSTOMIZATION_BANNER:
          "Express yourself!",
        NITRODUCTION_ONBOARDING_HEADING_PROFILE_CUSTOMIZATION_THEME:
          "Give it some color",
        NITRODUCTION_ONBOARDING_HEADING_PROFILE_CUSTOMIZATION_GUILD_PROFILES:
          "Create multiple profiles!",
        NITRODUCTION_ONBOARDING_HEADING_BOOSTING_GUILD_MENU_ITEM:
          "Support your favorite servers",
        NITRODUCTION_ONBOARDING_HEADING_BOOSTING_GUILD_BANNER:
          "Unlock server perks",
        NITRODUCTION_ONBOARDING_HEADING_CUSTOM_EMOJI_GENERAL:
          "Your emoji, everywhere",
        NITRODUCTION_ONBOARDING_HEADING_CUSTOM_EMOJI_ANIMATED_EMOJI:
          "Animated emoji!",
        NITRODUCTION_ONBOARDING_BODY_PROFILE_CUSTOMIZATION_AVATAR:
          "Show more personality with an animated avatar.",
        NITRODUCTION_ONBOARDING_BODY_PROFILE_CUSTOMIZATION_AVATAR_DECORATIONS:
          "Add extra fun to your avatar with decorations.",
        NITRODUCTION_ONBOARDING_BODY_PROFILE_CUSTOMIZATION_BANNER:
          "Turn your favorite image, GIF, or meme into a profile banner.",
        NITRODUCTION_ONBOARDING_BODY_PROFILE_CUSTOMIZATION_THEME:
          "Personalize your profile with custom colors.",
        NITRODUCTION_ONBOARDING_BODY_PROFILE_CUSTOMIZATION_GUILD_PROFILES:
          "Customize different profiles for each of your servers.",
        NITRODUCTION_ONBOARDING_BODY_BOOSTING_GUILD_MENU_ITEM:
          "Boost servers to show your support and score cool perks for your friends.",
        NITRODUCTION_ONBOARDING_BODY_BOOSTING_GUILD_BANNER:
          "More Boosts = more perks. Nitro members get 2 Boosts and 30% off additional Boosts.",
        NITRODUCTION_ONBOARDING_BODY_CUSTOM_EMOJI_GENERAL2:
          "Use emoji and stickers from any of your servers in **all** your servers and DMs!",
        NITRODUCTION_ONBOARDING_BODY_CUSTOM_EMOJI_GENERAL_UNFORMATTED:
          "Use emoji and stickers from any of your servers in all your servers and DMs!",
        NITRODUCTION_ONBOARDING_BODY_CUSTOM_EMOJI_ANIMATED_EMOJI:
          "Have more fun expressing yourself with animated emoji.",
        NITRODUCTION_ONBOARDING_BODY_PROFILE_CUSTOMIZATION_AVATAR_LIGHTWEIGHT:
          "Now you can use an animated avatar!",
        NITRODUCTION_ONBOARDING_BODY_PROFILE_CUSTOMIZATION_BANNER_LIGHTWEIGHT:
          "Turn your favorite image, GIF, or meme into a profile banner.",
        NITRODUCTION_ONBOARDING_BODY_PROFILE_CUSTOMIZATION_THEME_LIGHTWEIGHT:
          "Personalize your profile with custom colors.",
        NITRODUCTION_ONBOARDING_BODY_PROFILE_CUSTOMIZATION_GUILD_PROFILES_LIGHTWEIGHT:
          "Customize different profiles for each of your servers!",
        NITRODUCTION_ONBOARDING_BODY_BOOSTING_GUILD_MENU_ITEM_LIGHTWEIGHT:
          "Boost servers to show your support and score cool perks for your friends.",
        NITRODUCTION_ONBOARDING_BODY_BOOSTING_GUILD_BANNER_LIGHTWEIGHT:
          "With Nitro, you get 2 Boosts and 30% off any additional Boosts!",
        NITRODUCTION_ONBOARDING_BODY_CUSTOM_EMOJI_GENERAL_LIGHTWEIGHT:
          "Use emoji from any of your servers in **all** your servers and DMs!",
        NITRODUCTION_ONBOARDING_BODY_CUSTOM_EMOJI_GENERAL_UNFORMATTED_LIGHTWEIGHT:
          "Use emoji from any of your servers in all your servers and DMs!",
        NITRODUCTION_ONBOARDING_BODY_CUSTOM_EMOJI_ANIMATED_EMOJI_LIGHTWEIGHT:
          "Now you can use animated emoji!",
        SHARE_NITRO_TOOLTIP_DISABLED:
          "This friend isn’t eligible for a Nitro trial right now.",
        SHARE_NITRO_TOOLTIP: "Share a free Nitro trial with this friend!",
        SHARE_NITRO_BIRTHDAY_TOOLTIP:
          "Share a **free** Nitro trial with this friend as part of Discord’s 8th Birthday. Woohooo!",
        SHARE_NITRO_BIRTHDAY_TOOLTIP_UNFORMATTED:
          "Share a free Nitro trial with this friend as part of Discord’s 8th Birthday. Woohooo!",
        SHARE_NITRO_RESEND_TOOLTIP: "Resend a Nitro trial to this friend.",
        SHARE_NITRO_MODAL_HEADER: "Share a Nitro trial",
        SAHRE_NITRO_MODAL_CONFIRMATION_HEADER: "Share Nitro with this friend?",
        SHARE_NITRO_MODAL_BODY_GENERAL:
          "Give this friend 2 weeks of Nitro - for **free**!\n\nYou have {count, plural, =1 {1 trial} other {{count} trials}} left.",
        SHARE_NITRO_MODAL_BODY_SHARE_THEM_BY: "Share them by {date}.",
        SHARE_NITRO_MODAL_CONFIRMATION_GENERAL:
          "You’ll have {count, plural, =1 {1 trial} other {{count} trials}} left to share.",
        SHARE_NITRO_MODAL_CONFIRMATION_GENERAL_LAST_REFERRAL:
          "It’s the last trial you have left to share.",
        SHARE_NITRO_BUTTON_TEXT: "Share Trial",
        SHAER_NITRO_CONFIRMATION_BUTTON_TEXT: "Yes, Share Trial",
        SHARE_NITRO_EMBEDDED_MESSAGE_HEADER:
          "{username}, you got a free Nitro trial!",
        SHARE_NITRO_EMBEDDED_MESSAGE_BODY:
          "**{username}** gave you **2 weeks** of Nitro. Try out custom profiles, animated emoji, and more!",
        SHARE_NITRO_EMBEDDED_MESSAGE_BODY_SHORT:
          "{username} gave you 2 weeks of Nitro!",
        SHARE_NITRO_EMBEDDED_MESSAGE_DISABLED_HEADER:
          "Looks like {username} already has Nitro",
        SHARE_NITRO_EMBEDDED_MESSAGE_DISABLED_BODY:
          "This offer is no longer available.",
        SHARE_NITRO_EMBEDDED_MESSAGE_EXPIRED_HEADER: "This trial offer expired",
        SHARE_NITRO_EMBEDDED_MESSAGE_EXPIRED_BODY:
          "Share this trial with another friend.",
        SHARE_NITRO_DISMISS_MODAL_HEADER: "Hide Nitro trials?",
        SHARE_NITRO_DISMISS_MODAL_BODY:
          "You won't be able to share free Nitro trials with your friends.",
        SHARE_NITRO_RESEND_TRIAL_HEADER: "Resend Nitro trial",
        SHARE_NITRO_RESEND_TRIAL_BODY:
          "Want to remind your friend about their free Nitro trial?",
        SHARE_NITRO_RESEND_TRIAL_BODY_2: "Resend it!",
        SHARE_NITRO_RESEND_BUTTON_TEXT: "Resend Trial",
        START_TRIAL: "Start Trial",
        EXPIRES_MINUTES:
          "Expires in {numMinutes, plural, one {1 minute} other {{numMinutes} minutes}}",
        EXPIRES_HOURS:
          "Expires in {numHours, plural, one {{numHours} hour} other {{numHours} hours}}",
        EXPIRES_DAYS:
          "Expires in {numDays, plural, one {{numDays} day} other {{numDays} days}}",
        EXPIRED_DATE: "Expired {date}",
        TRIAL_EXPIRES: "Trial expires {date}",
        DISMISS_BUTTON_TEXT: "I'm not interested in this",
        SHARE_NITRO_VIEW_ON_DESKTOP:
          "Open this DM on desktop to start your free trial.",
        EMOJI_CATEGORY_TOP_GUILD_EMOJI: "Top Emoji in !!{guildName}!!",
        TOP_GUILD_EMOJI_BADGE: "Popular",
        NEWLY_ADDED_GUILD_EMOJI_BADGE: "Newly Added",
        VOICE_CHANNEL_STATUS_PERMISSION_TITLE: "Set Voice Channel Status",
        VOICE_CHANNEL_STATUS_PERMISSION_DESCRIPTION:
          "Allows members to create and edit voice channel status.",
        VOICE_CHANNEL_STATUS_PERMISSION_TOOLTIP_BODY:
          "Let others know what everyone's up to in the voice channel! Control who can set a status with our [new permission](onClickPermission).",
        VOICE_CHANNEL_SET_STATUS: "Set a channel status",
        VOICE_CHANNEL_STATUS_MODAL_TITLE: "What are we chatting about?",
        VOICE_CHANNEL_STATUS_MODAL_SUBTITLE:
          "Let others know what you're up to in the voice channel!",
        VOICE_CHANNEL_STATUS_MODAL_SET_STATUS: "Set Status",
        VOICE_CHANNEL_CLEAR_STATUS: "Clear Channel Status",
        VOICE_CHANNEL_STATUS: "Status",
        VOICE_CHANNEL_STATUS_MODAL_PREFILL_CHANNEL:
          "Status for !!{channelName}!!",
        INCOMING_CALLS: "Incoming calls",
        DIRECT_MESSAGE_NOTIFICATIONS: "Direct messages",
        VOICE_CONNECTED: "Voice connected",
        SOCIAL: "Social",
        FORUM_NOTIFICATIONS: "Forum notifications",
        STAGE_NOTIFICATIONS: "Stage notifications",
        FRIEND_REQUEST_NOTIFICATIONS: "Friend requests",
        EVENT_NOTIFICATIONS: "Event notifications",
        OTHER_SERVER_NOTIFICATIONS: "Other server notifications",
        DISCORD_SYSTEM_MESSAGES: "Discord system messages",
        DISCORD_SYSTEM_MESSAGE_BOT_TAG_TOOLTIP: "System Message",
        REALTIME: "Real-time",
        SERVER: "Server",
        GUILD_MEMBERS: "Server Members",
        VIEW_FRIEND_REQUESTS: "View Friend Requests",
        SUPPRESS_NOTIFICATIONS_TOOLTIP: "This is a @silent message.",
        RECORD_VOICE_MESSAGE: "Record Voice Message",
        DELETE_VOICE_MESSAGE: "Delete Voice Message",
        SEND_VOICE_MESSAGE: "Send Voice Message",
        VOICE_MESSAGES_SEND: "Release to Send",
        VOICE_MESSAGES_CANCEL: "Release to Cancel",
        VOICE_MESSAGES_LOCK: "Release to Lock",
        VOICE_MESSAGES_LIMIT: "Limit reached!",
        VOICE_MESSAGES_LIMIT_SEND: "Limit reached! Release to Send",
        VOICE_MESSAGES_LIMIT_CANCEL: "Limit reached! Release to Cancel",
        VOICE_MESSAGES_TAP: "Hold to record",
        VOICE_MESSAGES_SENT_NOTIFICATION: "Sent a voice message",
        VOICE_MESSAGES_UPSELL_TITLE: "Voice Messages",
        VOICE_MESSAGES_UPSELL_LABEL_DM:
          "Hold to record! Available only in direct messages.",
        VOICE_MESSAGES_UPSELL_LABEL_GUILD:
          "Hold to record! Available in select servers.",
        VOICE_MESSAGES_UPSELL_BUTTON_LABEL: "Got It",
        VOICE_MESSAGES_RECORDING_FAILED: "Failed to start recording",
        VOICE_MESSAGES_A11Y_LABEL: "Voice Message",
        VOICE_MESSAGES_A11Y_HINT: "Double tap to play or pause.",
        VOICE_MESSAGES_A11Y_NOT_PLAYING_VALUE: "Duration: {duration}",
        VOICE_MESSAGES_A11Y_PLAYING_VALUE:
          "Current position: {currentTime}, Duration: {duration}",
        VOICE_MESSAGES_A11Y_STATUS: "Voice Message; Duration: {duration}",
        VOICE_MESSAGES_PLAYING_A11Y_STATUS:
          "Voice Message; Current position: {currentTime}, Duration: {duration}",
        CALL_HIGH_FIVE_EXCLAMATION: "High Five!",
        NO_ACCESS: "No Access",
        NEW_LAYOUT_ANNOUNCEMNT_TITLE: "Welcome to the new layout!",
        NEW_LAYOUT_ANNOUNCEMENT_TEXT: "What's new?",
        NEW_LAYOUT_ANNOUNCEMENT_SERVERS:
          "Enjoy more organized chatting with the new Servers tab",
        NEW_LAYOUT_ANNOUNCEMENT_ACTIVITY_CARDS:
          "Check the status of your friends in the Messages tab with Activity Cards",
        NEW_LAYOUT_ANNOUNCEMENT_MESSAGES:
          "Jump into a chat with your friends in the new Messages tab",
        NEW_LAYOUT_ANNOUNCEMENT_HELP:
          "Learn more about this change and how to share your feedback [here](onPress).",
        NEW_LAYOUT_ANNOUNCEMENT_CTA: "Got it",
        IN_CHANNEL: "in !!{channelName}!!",
        COUNT_REMAINING: "+{count} more",
        USER_PROFILE_PRONOUNS: "Pronouns",
        USER_SETTINGS_PRONOUNS: "Pronouns",
        USER_POPOUT_PRONOUNS: "Pronouns",
        PROFILE_CUSTOMIZATION_PRONOUNS_PLACEHOLDER: "Add your pronouns",
        MESSAGE_SENDING_TIMESTAMP: "Sending...",
        MOBILE_CLIENT_THEMES_UPSELL_BODY:
          "Like what you see? Get Nitro to unlock more themes.",
        CALL_SOUNDS_SETTINGS: "Entrance Sounds",
        CALL_SOUNDS_SETTINGS_DESCRIPTION_2:
          "Choose a Soundboard sound to automatically play whenever you join a voice channel. Right-click on a voice channel to join without playing your entrance sound. [Learn More]({helpdeskArticle}).",
        CALL_SOUNDS_SETTINGS_JOIN_SOUND: "Choose a sound $[](nitroWheelHook)",
        CALL_SOUNDS_SETTINGS_JOIN_SOUND_CHANGE: "Change sound",
        CALL_SOUNDS_SETTINGS_JOIN_SOUND_REMOVE: "Remove sound",
        CALL_SOUNDS_SETTINGS_GLOBAL_GUILD_SEARCH: "All Servers",
        CALL_SOUNDS_SETTINGS_ALL_SERVERS:
          "!!{soundName}!! $[(All Servers)](subtextHook)",
        CALL_SOUNDS_SETTINGS_SOUND_REMOVED:
          "The sound used has been removed from the server it came from. Choose another sound.",
        CALL_SOUNDS_UPSELL_TITLE_NON_SUB: "Drop into voice channels in style",
        CALL_SOUNDS_UPSELL_DESCRIPTION_NON_SUB:
          "Choose a Soundboard sound to automatically play whenever you join a voice channel. Only with Nitro.",
        CALL_SOUNDS_UPSELL_DESCRIPTION_NON_TIER_2:
          "Upgrade your Nitro to automatically play a Soundboard sound whenever you join a voice channel.",
        CALL_SOUNDS_UPSELL_DESCRIPTION_TIER_2:
          "Choose a Soundboard sound to automatically play whenever you join a voice channel. Now available with Nitro.",
        CALL_SOUNDS_CONTEXT_MENU_GUILD: "Set as server entrance sound",
        CALL_SOUNDS_CONTEXT_MENU_GLOBAL: "Set as global entrance sound",
        SOUNDBOARD: "Soundboard",
        USE_EXTERNAL_SOUNDS: "Use External Sounds",
        ROLE_PERMISSIONS_USE_EXTERNAL_SOUNDS_DESCRIPTION:
          "Allows members to use sounds from other servers, if they're a Discord Nitro member.",
        USE_SOUNDBOARD: "Use Soundboard",
        ROLE_PERMISSIONS_USE_SOUNDBOARD_DESCRIPTION:
          "Allows members to send sounds from server soundboard.",
        ROLE_PERMISSIONS_USE_SOUNDBOARD_DESCRIPTION_LEARN_MORE:
          "Allows members to send sounds from server soundboard. [Learn more.]({helpCenterArticle})",
        ROLE_PERMISSIONS_USE_SOUNDBOARD_DESCRIPTION_CATEGORY:
          "Allows members to send sounds from server soundboard in these voice channels. [Learn more.]({helpCenterArticle})",
        ROLE_PERMISSIONS_USE_SOUNDBOARD_DESCRIPTION_THREADS:
          "Allows members to send sounds from server soundboard in this channel's threads.  [Learn more.]({helpCenterArticle})",
        ROLE_PERMISSIONS_USE_SOUNDBOARD_DESCRIPTION_VOICE:
          "Allows members to send sounds from server soundboard in this voice channel.  [Learn more.]({helpCenterArticle})",
        USER_SETTINGS_SOUNDBOARD: "Soundboard",
        USER_SETTINGS_SOUNDBOARD_VOLUME: "Soundboard Volume",
        USER_SETTINGS_SOUNDBOARD_VOLUME_DESCRIPTION:
          "Control how loud sounds are for you personally. Go to server settings to edit server sounds.",
        USER_SETTINGS_SOUNDBOARD_VOLUME_DESCRIPTION_WITH_LINK:
          "Control how loud sounds are for you personally. For more info, [click here]({helpCenterArticle}).",
        GUILD_SETTINGS_SOUNDBOARD: "Soundboard",
        NO_SOUNDS_TITLE: "No Sounds",
        NO_SOUNDS: "Get the party started by uploading a sound",
        GUILD_SETTINGS_SOUNDBOARD_DESCRIPTION:
          "Upload custom sound reactions that anyone in this server can use. Nitro members will be able to access these sounds in any server on Discord.",
        GUILD_SETTINGS_SOUNDBOARD_DESCRIPTION_WITH_COUNT:
          "Upload up to {maxSounds} custom sound reactions that anyone in this server can use. Nitro members will be able to access these sounds in any server on Discord.",
        GUILD_SETTINGS_SOUNDBOARD_UPLOAD_SOUND: "Upload Sound",
        GUILD_SETTINGS_SOUNDBOARD_UPLOAD_SOUND_NOT_SUPPORTED:
          "Sound upload is not supported in this browser, try downloading our [desktop client](https://discord.com/download).",
        GUILD_SETTINGS_SOUND_LIST_HEADER:
          "Soundboard - {slots, plural, one {1 Slot} other {# Slots}} available",
        GUILD_SETTINGS_SOUND_LIST_SOUNDS_AVAILABLE:
          "{slots, plural, one {1 Slot} other {# Slots}} of {totalSlots} available",
        GUILD_SETTINGS_SOUND_LIST_SOUNDS_AVAILABLE_BOOST_LEVEL:
          "Level {boostLevel} - {slots, plural, one {1 Slot} other {# Slots}} of {totalSlots} available",
        GUILD_SETTINGS_SOUNDBOARD_BOOST_LEVEL:
          "This server is boosted to level {currentBoostLevel}",
        GUILD_SETTINGS_SOUND_NAME_COLUMN: "Name",
        GUILD_SETTINGS_SOUND_UPLOADER_COLUMN: "Uploaded By",
        GUILD_SETTINGS_SOUNDBOARD_CTA: "Unlock more Slots",
        GUILD_SETTINGS_SOUNDBOARD_UPSELL_BANNER_TEXT:
          "Boost your server to Level {level} to unlock {numAdditional} more soundboard slots!",
        SOUNDBOARD_SOUND_UPLOAD_BUTTON_DISABLED:
          "You don't have permissions to upload sounds to this server.",
        SOUNDBOARD_CONTEXT_MENU_DOWNLOAD_SOUND: "Download Sound",
        SOUNDBOARD_DOWNLOAD_SOUND_FAILED_TITLE: "Sound Download Failed",
        SOUNDBOARD_DOWNLOAD_SOUND_FAILED_BODY:
          "Discord failed to download that sound for some reason. Sorry about that.",
        SOUNDBOARD_CONTEXT_MENU_EDIT_SOUND: "Edit Sound",
        SOUNDBOARD_SOUND_PREVIEW_SOUND:
          "Preview !!{emojiName}!! !!{soundName}!!",
        SOUNDBOARD_SOUND_PREVIEW_SOUND_LOW_VOLUME:
          "Increase your Soundboard volume setting to preview",
        SOUNDBOARD_SOUND_FAVORITE_SOUND:
          "Favorite !!{emojiName}!! !!{soundName}!!",
        SOUNDBOARD_ERROR_INVALID_FILE_TYPE:
          "Invalid audio file type. {fileType} is not supported.",
        SOUNDBOARD_ERROR_FAILED_TO_ENCODE_FILE: "Failed to encode file.",
        SOUNDBOARD_SOUND_UPLOAD_MODAL_HEADER: "Upload a Sound",
        SOUNDBOARD_SOUND_UPDATE_MODAL_HEADER: "Edit Sound",
        SOUNDBOARD_SOUND_UPLOAD_MODAL_BROWSE: "Browse",
        SOUNDBOARD_SOUND_UPLOAD_MODAL_UPLOAD: "Upload",
        SOUNDBOARD_SOUND_UPLOAD_MODAL_SAVE: "Save",
        SOUNDBOARD_SOUND_UPLOAD_MODAL_CANCEL: "Never mind",
        SOUNDBOARD_SOUND_UPLOAD_MODAL_NO_SOUND: "No sound selected",
        SOUNDBOARD_SOUND_UPLOAD_MODAL_SOUND_NAME: "Sound Name",
        SOUNDBOARD_SOUND_UPLOAD_MODAL_SOUND_VOLUME: "Sound Volume",
        SOUNDBOARD_SOUND_UPLOAD_MODAL_FILE: "File",
        SOUNDBOARD_SOUND_UPLOAD_MODAL_PREVIEW: "Preview",
        SOUNDBOARD_SOUND_UPLOAD_MODAL_EMOJI: "Related Emoji",
        SOUNDBOARD_SOUND_UPLOAD_MODAL_INPUT_PLACEHOLDER: "Choose a file",
        SOUNDBOARD_SOUND_UPLOAD_MODAL_UNKNOWN_ERROR:
          "An unknown error occurred",
        SOUNDBOARD_SOUND_UPLOAD_DURATION_EXCEEDED_ERROR:
          "The provided file duration exceeds maximum of {limit, number} seconds.",
        SOUNDBOARD_SOUND_UPLOAD_GUILD_SELECT_PLACEHOLDER: "Select a Server",
        SOUNDBOARD_SOUND_UPLOAD_GUILD_SELECT_NONE_AVAILABLE:
          "No Servers Available",
        SOUNDBOARD_SOUND_UPLOAD_GUILD_SELECT_AVAILABLE_COUNT:
          "{slots, plural, one {1 Available} other {# Available}}",
        SOUNDBOARD_SOUND_UPLOAD_GUILD_SELECT: "Server",
        SOUNDBOARD_KEYBIND_HINT_NO_POPOUT_WHEEL_SUPPORT:
          "**TIP:** Hold {keybind} to use Soundboard in a game overlay. $[Edit Keybind](openSettingsHook).",
        SOUNDBOARD_KEYBIND_HINT:
          "**TIP:** Hold {keybind} to use Soundboard in app or in a game overlay. $[Edit Keybind](openSettingsHook).",
        SOUNDBOARD_KEYBIND_HINT_GLOBAL:
          "**TIP:** Hold {keybind} to use Soundboard in app. $[Edit Keybind](openSettingsHook).",
        SOUNDBOARD_POPOUT_WINDOW_TITLE: "Discord Soundboard",
        SOUNDBOARD_SOUND_ADD_SOUND: "Add Sound",
        SOUNDBOARD_SOUND_ADD_DISABLED:
          "Your server hit the limit of {maxSounds, plural, =1 {# sound} other {# sounds}}. Go to server settings to remove a sound before you can add another.",
        SOUNDBOARD_OPEN_SOUNDBOARD: "Open Soundboard",
        SOUNDBOARD_OPEN_SOUNDBOARD_ERROR_GUILD_MUTE:
          "Soundboard disabled when server muted",
        SOUNDBOARD_OPEN_SOUNDBOARD_ERROR_SUPPRESSED:
          "Soundboard disabled when suppressed",
        SOUNDBOARD_OPEN_SOUNBOARRD_ERROR_DEAFENED:
          "Soundboard disabled when deafened",
        SOUNDBOARD_NEW_FEATURE_TOOLTIP_HEADER: "NEW! React with sounds",
        SOUNDBOARD_NEW_FEATURE_TOOLTIP_BODY:
          "Take the fun in voice to the next level with **Soundboard**. Air horns incoming.",
        SOUNDBOARD_NEW_FEATURE_TOOLTIP_GOT_IT: "Got it",
        SOUNDBOARD_NEW_FEATURE_TOOLTIP_TRY_IT_OUT: "Try it out",
        SOUNDBOARD_VOLUME_TOOLTIP_HEADER: "Adjust your Soundboard volume",
        SOUNDBOARD_VOLUME_TOOLTIP_BODY:
          "Crank your Soundboard volume up or down in User Settings -> Voice & Video",
        SOUNDBOARD_KEYBIND_MODAL_HEADER: "Soundboard Keybind",
        SOUNDBOARD_KEYBIND_MODAL_KEYBINDS_DISABLED_MESSAGE:
          "Keybinds are disabled while you're editing.",
        SOUNDBOARD_KEYBIND_MODAL_RESET_KEYBIND: "Reset Keybind",
        SOUNDBOARD_MODAL_AUDIO_STATE_ENCODING: "Processing Sound...",
        SOUNDBOARD_MODAL_AUDIO_STATE_ENCODING_FAILED: "Processing Failed",
        SOUNDBOARD_MODAL_AUDIO_STATE_UPLOADING: "Uploading Sound...",
        CHAT_WHEEL_PAGINATION_HINT: "Scroll for more",
        KEYBIND_SOUNDBOARD: "Open Soundboard",
        KEYBIND_SOUNDBOARD_HOLD: "Open Soundboard (Hold)",
        KEYBIND_DESCRIPTION_SOUNDBOARD:
          "Open the soundboard at your mouse's location while in app or in the game overlay.",
        KEYBIND_DESCRIPTION_SOUNDBOARD_GLOBAL:
          "Open the soundboard at your mouse's location anywhere.",
        KEYBIND_DESCRIPTION_SOUNDBOARD_NO_POPOUT_WHEEL_SUPPORT:
          "Open the soundboard at your mouse's location while in the game overlay.",
        KEYBIND_DESCRIPTION_SOUNDBOARD_HOLD:
          "Hold to open the soundboard at your mouse's location while in app or in the game overlay.",
        KEYBIND_DESCRIPTION_SOUNDBOARD_HOLD_GLOBAL:
          "Hold to open the soundboard at your mouse's location anywhere.",
        KEYBIND_DESCRIPTION_SOUNDBOARD_HOLD_NO_POPOUT_WHEEL_SUPPORT:
          "Hold to open the soundboard at your mouse's location while in the game overlay.",
        SOUNDBOARD_SOUND_WHEEL_EDUCATION_MODAL_HEADER:
          "Try Soundboard in the In-Game Overlay!",
        SOUNDBOARD_SOUND_WHEEL_EDUCATION_MODAL_BODY:
          "Use $[!!{keybind}!!](keybindHook) to open the sound wheel from anywhere, including directly in-game.\n\n  To enable the overlay, visit $[User Settings > Game Overlay](openSettingsHook).",
        SOUNDBOARD_SOUND_WHEEL_EDUCATION_MODAL_CONFIRM: "Got it!",
        SOUNDBOARD_SOUND_WHEEL_EDUCATION_MODAL_EDIT_KEYBIND: "Edit Keybind",
        SOUNDBOARD_PLAY_SOUND: "Play !!{emojiName}!! !!{soundName}!!",
        SOUNDBOARD_UPLOAD_SOUND_FOR_GUILD: "Upload sound for !!{guildName}!!",
        SOUNDBOARD_SOUND_SECTION_DEFAULTS: "Discord Sounds",
        SOUNDBOARD_TOOLTIP_TITLE: "Coming soon: Soundboard",
        SOUNDBOARD_TOOLTIP_TITLE_NEW: "NEW: Soundboard",
        SOUNDBOARD_TOOLTIP_BODY:
          "Learn more about Soundboard and manage permissions.",
        SOUNDBOARD_MARKETING_BOOSTING_PERKS:
          "+{soundCount, plural, one {# Soundboard slot} other {# Soundboard slots}} (for a total of {totalSoundCount, number})",
        SOUNDBOARD_MARKETING_CUSTOM_SOUNDS_ANYWHERE: "Custom sounds anywhere",
        SOUND_BOARD_MARKETING_USE_CUSTOM_SOUNDS: "Use Custom Sounds",
        SOUNDBOARD_MARKETING_CUSTOM_ENTRY_SOUNDS:
          "Personalized entrance sounds",
        SOUNDBOARD_MARKETING_REACT_WITH_SOUNDBOARD:
          "Use custom sounds and personalized entrance sounds across voice channels.",
        SOUNDBOARD_MARKETING_TRY_ON_MOBILE: "Try Soundboard on mobile!",
        SOUNDBOARD_SEARCH_PLACEHOLDER: "Search for sound",
        SOUNDBOARD_SEARCH_EMPTY_STATE_BODY: "No sounds match your search",
        SOUNDBOARD_SOUND_DISABLED_PREMIUM_TIER_LOST:
          "Requires higher Server Boost Level",
        SOUNDBOARD_NITRO_UPSELL_TITLE: "You can't use this sound right now",
        SOUNDBOARD_NITRO_UPSELL_BODY:
          "Use your favorite sounds across Discord and much more with Nitro. [Learn more](onClick)",
        SOUNDBOARD_PREMIUM_UPSELL_TOAST:
          "Subscribe to Nitro to send sounds across servers.",
        SOUNDBOARD_PREMIUM_UPGRADE_UPSELL_TOAST:
          "Upgrade to Nitro to send sounds across servers.",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_CREATED:
          "$[**!!{user}!!**](userHook) uploaded a Soundboard sound",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_UPDATED:
          "$[**!!{user}!!**](userHook) updated a Soundboard sound",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_DELETED:
          "$[**!!{user}!!**](userHook) deleted a Soundboard sound",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_NAME_CREATE:
          "With the name **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_NAME_CHANGE:
          "Changed the name from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_VOLUME_CREATE:
          "With the volume set to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_VOLUME_CHANGE:
          "Changed the volume from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_NAME_CREATE:
          "With the emoji **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_NAME_REPLACE:
          "Changed the emoji from **!!{oldValue}!!** to **!!{newValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_NAME_REMOVE:
          "Removed the emoji **!!{oldValue}!!**",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_ID_CREATE:
          "With the emoji $[](newEmojiHook)",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_ID_REPLACE:
          "Changed the emoji from $[](oldEmojiHook) to $[](newEmojiHook)",
        GUILD_SETTINGS_AUDIT_LOG_GUILD_SOUNDBOARD_SOUND_EMOJI_ID_REMOVE:
          "Removed the emoji $[](oldEmojiHook)",
        GUILD_SETTINGS_ACTION_FILTER_SOUNDBOARD_SOUND_CREATE:
          "Create Soundboard Sound",
        GUILD_SETTINGS_ACTION_FILTER_SOUNDBOARD_SOUND_UPDATE:
          "Update Soundboard Sound",
        GUILD_SETTINGS_ACTION_FILTER_SOUNDBOARD_SOUND_DELETE:
          "Delete Soundboard Sound",
        GUILD_SETTINGS_ACTION_FILTER_CLYDE_AI_PROFIE_UPDATE:
          "Update Clyde AI Profile",
        GUILD_SETTINGS_SOUNDBOARD_DELETE_SOUND_TITLE:
          "Delete '!!{soundName}!!'",
        GUILD_SETTINGS_SOUNDBOARD_DELETE_SOUND_BODY:
          "Are you sure you want to delete **!!{soundName}!!**? This action cannot be undone.",
        RECENTLY_HEARD: "Recently Heard",
        SHARE_TITLE: "Send To",
        SHARE_MESSAGE_PLACEHOLDER: "Add a message",
        NEW_MESSAGE_COMPOSER_SEARCH_EMPTY_TITLE:
          "Unfortunately, no results were found.",
        NEW_MESSAGE_COMPOSER_SEARCH_EMPTY_SUBTITLE:
          "The person you're looking for might not be connected to you on Discord. Try adding them as a friend.",
        NEW_MESSAGE_COMPOSER_BACK_TO_CHAT: "Back to Chat Preview",
        SERVER_BADGE_DESCRIPTION_INVITE_ONLY:
          "People with an invite link can join.",
        SERVER_BADGE_DESCRIPTION_ANYONE_CAN_JOIN:
          "Anyone can join this server.",
        SERVER_BADGE_TITLE_COMMUNITY: "Community Server",
        SERVER_BADGE_TITLE_UNKNOWN: "Unknown",
        SERVER_BADGE_PREMIUM_FOOTER_BOOST_COUNT:
          "{count, plural, =1 {# Boost} other {# Boosts}}",
        SERVER_BADGE_PREMIUM_FOOTER:
          "{count, plural, =1 {# Server Boost} other {# Server Boosts}}",
        FAMILY_CENTER_SIDEBAR_TITLE: "Family Center",
        FAMILY_CENTER_TITLE: "Family Center",
        FAMILY_CENTER_SETTINGS_TITLE: "Family Center",
        FAMILY_CENTER_SETTINGS_FORM_TITLE: "General Settings",
        FAMILY_CENTER_SETTINGS_ENABLE_SWITCH: "Enable Family Center tab",
        FAMILY_CENTER_SETTINGS_ENABLE_SWITCH_NOTE:
          "This will show you the Family Center tab. Here you can pair with your family members to create a safe, yet privacy conscious environment for your family!",
        FAMILY_CENTER_SETTINGS_ENABLE_PROMPT:
          "Now that Family Center is enabled, let’s check it out!",
        FAMILY_CENTER_SETTINGS_ENABLE_CTA: "View Family Center",
        FAMILY_CENTER_ACTIVITY_TAB: "Activity",
        FAMILY_CENTER_REQUESTS_TAB: "My Family",
        FAMILY_CENTER_PENDING_TIMESTAMP_SECONDS: "Request sent < 1 minute ago",
        FAMILY_CENTER_PENDING_TIMESTAMP_MINUTES:
          "Request sent {count, number} {count, plural, =1 {minute} other {minutes}} ago",
        FAMILY_CENTER_PENDING_TIMESTAMP_HOURS:
          "Request sent {count, number} {count, plural, =1 {hour} other {hours}} ago",
        FAMILY_CENTER_PENDING_TIMESTAMP_YESTERDAY: "Request sent yesterday",
        FAMILY_CENTER_PENDING_TIMESTAMP_DAYS:
          "Request sent {count, number} {count, plural, =1 {day} other {days}} ago",
        FAMILY_CENTER_PENDING_TIMESTAMP_DATE: "Request sent on {date}",
        FAMILY_CENTER_ACCEPTED_TIMESTAMP_SECONDS: "Connected < 1 minute ago",
        FAMILY_CENTER_ACCEPTED_TIMESTAMP_MINUTES:
          "Connected {count, number} {count, plural, =1 {minute} other {minutes}} ago",
        FAMILY_CENTER_ACCEPTED_TIMESTAMP_HOURS:
          "Connected {count, number} {count, plural, =1 {hour} other {hours}} ago",
        FAMILY_CENTER_ACCEPTED_TIMESTAMP_YESTERDAY: "Connected yesterday",
        FAMILY_CENTER_ACCEPTED_TIMESTAMP_DAYS:
          "Connected {count, number} {count, plural, =1 {day} other {days}} ago",
        FAMILY_CENTER_ACCEPTED_TIMESTAMP_DATE: "Connected on {date}",
        FAMILY_CENTER_LINK_ACTION_ACCEPT: "Accept",
        FAMILY_CENTER_LINK_ACTION_DECLINE: "Decline",
        FAMILY_CENTER_LINK_ACTION_DISCONNECT: "Disconnect",
        FAMILY_CENTER_LINK_ACTION_CANCEL: "Cancel",
        FAMILY_CENTER_PENDING_REQUESTS_TITLE_TEEN:
          "INCOMING PARENT REQUESTS — {count}",
        FAMILY_CENTER_PENDING_REQUESTS_TITLE_PARENT:
          "PENDING REQUESTS — {count}",
        FAMILY_CENTER_ACCEPTED_REQUESTS_TITLE_PARENT:
          "CONNECTED TEENS — {count, number} OF {max}",
        FAMILY_CENTER_ACCEPTED_REQUESTS_TITLE_TEEN:
          "CONNECTED PARENTS — {count, number} OF {max}",
        FAMILY_CENTER_ACCEPTED_REQUESTS_EMPTY_DESCRIPTION:
          "No family members connected yet.",
        FAMILY_CENTER_ACCESSIBILITY_LABEL_ACCEPT_WITH_NAME:
          "Accept request from {name}",
        FAMILY_CENTER_ACCESSIBILITY_LABEL_DISCONNECT_WITH_NAME:
          "Disconnect from {name}",
        FAMILY_CENTER_ACCESSIBILITY_LABEL_DECLINE_WITH_NAME:
          "Decline request from {name}",
        FAMILY_CENTER_ACCESSIBILITY_LABEL_CANCEL_WITH_NAME:
          "Cancel request with {name}",
        FAMILY_CENTER_ACCEPT_LINK_MODAL_TITLE:
          "Confirm parent connection with:",
        FAMILY_CENTER_ACCEPT_LINK_ACTIVITY_DISCLAIMER:
          "By accepting this request, I agree to connect my account with {username} in Family Center. I understand that I can withdraw my consent at any time by disconnecting from this user.",
        FAMILY_CENTER_ACCEPT_REQUEST: "Accept Request",
        FAMILY_CENTER_ACCEPT_LINK_MODAL_ERROR:
          "There was an error accepting the request. Please try again later.",
        FAMILY_CENTER_AVATAR_ARIA: "Avatar for !!{name}!!",
        FAMILY_CENTER_DATA_CONFIRMATION_INCLUDED_HEADER_TEEN:
          "WHAT ARE CONNECTED PARENTS ABLE TO SEE?",
        FAMILY_CENTER_DATA_CONFIRMATION_EXCLUDED_HEADER_TEEN:
          "FAMILY CENTER WILL NEVER SHARE WITH YOUR PARENTS:",
        FAMILY_CENTER_DATA_CONFIRMATION_INCLUDED_HEADER_PARENT:
          "WHAT ARE CONNECTED PARENTS ABLE TO SEE?",
        FAMILY_CENTER_DATA_CONFIRMATION_EXCLUDED_HEADER_PARENT:
          "FAMILY CENTER DOES NOT SHARE:",
        FAMILY_CENTER_DATA_CONFIRMATION_FRIEND_ADD_HEADER:
          "Recently added friends",
        FAMILY_CENTER_DATA_CONFIRMATION_FRIEND_ADD_DESCRIPTION:
          "Names and avatars",
        FAMILY_CENTER_DATA_CONFIRMATION_GUILD_PARTICIPATION_HEADER:
          "Servers joined or participated in",
        FAMILY_CENTER_DATA_CONFIRMATION_GUILD_PARTICIPATION_DESCRIPTION:
          "Names, icons, and member counts",
        FAMILY_CENTER_DATA_CONFIRMATION_USERS_MESSAGED_HEADER:
          "Users messaged or called in direct or group chats",
        FAMILY_CENTER_DATA_CONFIRMATION_USERS_MESSAGED_DESCRIPTION:
          "Names, avatars, and times of last message or call",
        FAMILY_CENTER_DATA_CONFIRMATION_EXCLUDED_CONTENT_HEADER_TEEN:
          "What you write or say",
        FAMILY_CENTER_DATA_CONFIRMATION_EXCLUDED_CONTENT_DESCRIPTION_TEEN:
          "Your parents will not see the contents of your messages or calls.",
        FAMILY_CENTER_DATA_CONFIRMATION_EXCLUDED_CONTENT_HEADER_PARENT:
          "What your teen writes or says",
        FAMILY_CENTER_DATA_CONFIRMATION_EXCLUDED_CONTENT_DESCRIPTION_PARENT:
          "To protect your teen's privacy, you will not be able to see the contents of their messages or calls.",
        FAMILY_CENTER_DISCONNECT_LINK_MODAL_TITLE:
          "Disconnect from {isAdult, select, true {teen} other {parent}}:",
        FAMILY_CENTER_DISCONNECT_LINK_MODAL_NOTICE_HEADER: "Notice",
        FAMILY_CENTER_DISCONNECT_LINK_MODAL_NOTICE_DESCRIPTION_TEEN:
          "Disconnecting from your parent will send them a notification that you removed them. It will also revoke their access to your Discord activity information.",
        FAMILY_CENTER_DISCONNECT_LINK_MODAL_NOTICE_DESCRIPTION_PARENT:
          "Disconnecting from your teen will send them a notification that you removed them. It will also revoke your access to their Discord activity information.",
        FAMILY_CENTER_DISCONNECT_LINK_MODAL_DISCLAIMER_TEEN:
          "I understand that disconnecting this parent will revoke their access to my Discord activity information.",
        FAMILY_CENTER_DISCONNECT_LINK_MODAL_DISCLAIMER_PARENT:
          "I understand that disconnecting this teen will revoke my access to their Discord activity information.",
        FAMILY_CENTER_DISCONNECT_BUTTON: "Disconnect",
        FAMILY_CENTER_DISCONNECT_LINK_MODAL_ERROR:
          "Something went wrong disconnecting from the user. Please try again later.",
        FAMILY_CENTER_DECLINE_REQUEST: "Decline",
        FAMILY_CENTER_DECLINE_LINK_MODAL_TITLE:
          "Decline parent connection request?",
        FAMILY_CENTER_DECLINE_LINK_MODAL_NOTICE_HEADER: "Notice",
        FAMILY_CENTER_DECLINE_LINK_MODAL_DISCLAIMER_TEEN:
          "Declining your parent’s request will send them a notification that you declined their request.",
        FAMILY_CENTER_DECLINE_LINK_MODAL_ERROR:
          "Something went wrong declining the request. Please try again later.",
        FAMILY_CENTER_CANCEL_REQUEST: "Cancel request",
        FAMILY_CENTER_CANCEL_REQUEST_BACK: "Do nothing",
        FAMILY_CENTER_CANCEL_LINK_MODAL_TITLE:
          "Cancel parent connection request?",
        FAMILY_CENTER_CANCEL_LINK_MODAL_ERROR:
          "Something went wrong cancelling the request to that user. Please try again later.",
        FAMILY_CENTER_REQUEST_LINK_MODAL_TITLE_PARENT:
          "Connect with your Teen:",
        FAMILY_CENTER_REQUEST_LINK_BUTTON: "Send Connection Request",
        FAMILY_CENTER_REQUEST_SUCCESS_HEADER: "Connection request sent!",
        FAMILY_CENTER_REQUEST_SUCCESS_DESCRIPTION:
          "Your teen can accept your request in the Family Center. You'll receive an email to {email} once they accept or deny the request.",
        FAMILY_CENTER_ACTIVITY_BANNER_HEADER_TEEN:
          "Keep your parents informed, while maintaining your privacy.",
        FAMILY_CENTER_ACTIVITY_BANNER_HEADER_PARENT:
          "Stay informed about how your teen is using Discord.",
        FAMILY_CENTER_ACTIVITY_BANNER_DESCRIPTION_TEEN:
          "Connected family members will not see your message contents, and you can always see what they can see by coming to this Family Center dashboard. [Learn more]({articleLink})",
        FAMILY_CENTER_ACTIVITY_BANNER_DESCRIPTION_PARENT:
          "We built Family Center to provide you with more context on how your teen uses Discord so you can work together on building positive online behaviors. [Learn more]({articleLink})",
        FAMILY_CENTER_ACTIVITY_BANNER_IMAGE_ALT:
          "Mallow and graggle high fiving",
        FAMILY_CENTER_ACTIVITY_DATA_CONFIRMATION_BANNER_HEADER:
          "What are connected parents able to see?",
        FAMILY_CENTER_ACTIVITY_DATA_CONFIRMATION_BANNER_DESCRIPTION_TEEN:
          "We value your privacy, which is why your parents will not have access to the private contents of your messages.",
        FAMILY_CENTER_ACTIVITY_DATA_CONFIRMATION_BANNER_DESCRIPTION_PARENT:
          "Our goal is to help family members stay informed on how their teens use Discord at a high level. To respect your teen’s privacy, we only allow you to see:",
        FAMILY_CENTER_ACTIVITY_DATA_CONFIRMATION_BANNER_ALT:
          "Clyde standing in front of graphs",
        FAMILY_CENTER_FEATURE_CARDS_HEADER: "Why Family Center?",
        FAMILY_CENTER_FEATURE_CARD_MESSAGES_HEADER: "Messages stay private",
        FAMILY_CENTER_FEATURE_CARD_MESSAGES_DESCRIPTION_TEEN:
          "Message contents are never shared with your parents.",
        FAMILY_CENTER_FEATURE_CARD_MESSAGES_DESCRIPTION_PARENT:
          "You can see who your teen is talking to, while still respecting their privacy.",
        FAMILY_CENTER_FEATURE_CARD_SHARING_HEADER: "Transparent sharing",
        FAMILY_CENTER_FEATURE_CARD_SHARING_DESCRIPTION_TEEN:
          "You and your parents see the exact same information.",
        FAMILY_CENTER_FEATURE_CARD_SHARING_DESCRIPTION_PARENT:
          "You and your teen see the exact same information, so you’re on the same page.",
        FAMILY_CENTER_FEATURE_CARD_PAIRING_HEADER: "Easily connect",
        FAMILY_CENTER_FEATURE_CARD_PAIRING_DESCRIPTION_TEEN:
          "Setup is as simple as having your parent scan a QR code.",
        FAMILY_CENTER_FEATURE_CARD_PAIRING_DESCRIPTION_PARENT:
          "Setup is as simple as using your phone to scan the QR code your teen shows you.",
        FAMILY_CENTER_ACTIVITY_OVERVIEW_PREFACE_TEEN:
          "VISIBLE TO {activeLinks, number} FAMILY {activeLinks, plural, one {MEMBER} other {MEMBERS}}",
        FAMILY_CENTER_ACTIVITY_OVERVIEW_PREFACE_PARENT: "ACTIVITY SUMMARY",
        FAMILY_CENTER_ACTIVITY_OVERVIEW_DESCRIPTION_TEEN_TODAY:
          "Your activity today",
        FAMILY_CENTER_ACTIVITY_OVERVIEW_DESCRIPTION_TEEN_YESTERDAY:
          "Your activity since yesterday",
        FAMILY_CENTER_ACTIVITY_OVERVIEW_DESCRIPTION_TEEN_DAYS:
          "Your activity in the last {days} days",
        FAMILY_CENTER_ACTIVITY_OVERVIEW_DESCRIPTION_PARENT_TODAY:
          "Activity today",
        FAMILY_CENTER_ACTIVITY_OVERVIEW_DESCRIPTION_PARENT_YESTERDAY:
          "Activity since yesterday",
        FAMILY_CENTER_ACTIVITY_OVERVIEW_DESCRIPTION_PARENT_DAYS:
          "Activity in the last {days} days",
        FAMILY_CENTER_ACTIVITY_OVERVIEW_NO_ACTIVITY:
          "No activity over the last 7 days",
        FAMILY_CENTER_ACTIVITY_MORE: "See {pageSize, number} more",
        FAMILY_CENTER_TOOLTIP_MODAL_HEADER_TEEN: "What can my parent see?",
        FAMILY_CENTER_TOOLTIP_MODAL_HEADER_PARENT: "What can I see?",
        FAMILY_CENTER_ACTIVITY_USER_INTERACTION_HEADER: "Users messaged",
        FAMILY_CENTER_ACTIVITY_USER_INTERACTION_TOOLTIP_TEEN:
          "Users that you messaged in 1:1 DMs and group chats in the last week.",
        FAMILY_CENTER_ACTIVITY_USER_INTERACTION_TOOLTIP_PARENT:
          "Users that your teen messaged in 1:1 DMs and group chats in the last week.",
        FAMILY_CENTER_ACTIVITY_USER_INTERACTION_SECTION_HEADER:
          "Users Messaged — {count, number}",
        FAMILY_CENTER_ACTIVITY_USER_CALLED_HEADER: "Users called",
        FAMILY_CENTER_ACTIVITY_USER_CALLED_TOOLTIP_TEEN:
          "Calls you had in 1:1 DMs and group chats in the last week.",
        FAMILY_CENTER_ACTIVITY_USER_CALLED_TOOLTIP_PARENT:
          "Users that your teen had calls with in 1:1 DMs and group chats in the last week.",
        FAMILY_CENTER_ACTIVITY_USER_CALLED_SECTION_HEADER:
          "Users Called — {count, number}",
        FAMILY_CENTER_ACTIVITY_ADD_FRIENDS_HEADER: "New friends",
        FAMILY_CENTER_ACTIVITY_ADD_FRIENDS_TOOLTIP_TEEN:
          "New friends that you added in the last week.",
        FAMILY_CENTER_ACTIVITY_ADD_FRIENDS_TOOLTIP_PARENT:
          "New friends that your teen added in the last week.",
        FAMILY_CENTER_ACTIVITY_ADD_FRIENDS_SECTION_HEADER:
          "New Friends — {count, number}",
        FAMILY_CENTER_ACTIVITY_GUILD_JOIN_HEADER: "Servers joined",
        FAMILY_CENTER_ACTIVITY_GUILD_JOIN_TOOLTIP_TEEN:
          "New servers that you joined in the last week. These are not invite links, your parents will not be able to click on them.",
        FAMILY_CENTER_ACTIVITY_GUILD_JOIN_TOOLTIP_PARENT:
          "New servers that your teen joined in the last week.",
        FAMILY_CENTER_ACTIVITY_GUILD_JOIN_SECTION_HEADER:
          "Servers Joined — {count, number}",
        FAMILY_CENTER_ACTIVITY_GUILD_INTERACTION_HEADER: "Active servers",
        FAMILY_CENTER_ACTIVITY_GUILD_INTERACTION_TOOLTIP_TEEN:
          "Servers that you have sent messages in within the last week. These are not invite links, your parents will not be able to click on them.",
        FAMILY_CENTER_ACTIVITY_GUILD_INTERACTION_TOOLTIP_PARENT:
          "Servers that your teen has sent messages in within the last week.",
        FAMILY_CENTER_ACTIVITY_GUILD_INTERACTION_SECTION_HEADER:
          "Active Servers — {count, number}",
        FAMILY_CENTER_REQUESTS_LINKING_BANNER_HEADER_TEEN:
          "Easily connect with your parents!",
        FAMILY_CENTER_REQUESTS_LINKING_BANNER_HEADER_PARENT:
          "Download the Discord app to connect with your teens!",
        FAMILY_CENTER_REQUESTS_LINKING_BANNER_HEADER_PARENT_MOBILE:
          "Easily connect with your teens!",
        FAMILY_CENTER_REQUESTS_LINKING_BANNER_DESCRIPTION_TEEN:
          "Connecting with your parent will give them limited visibility to information about your account. You will see the exact same information they do on the Activity tab! [Learn more]({link})",
        FAMILY_CENTER_REQUESTS_LINKING_BANNER_DESCRIPTION_PARENT:
          "In order to connect with your teen, you'll need to download the Discord app on your phone. You can then complete setup by going to Family Center in user settings. After connecting, you will see high-level information about your teen's activity on Discord.",
        FAMILY_CENTER_REQUESTS_LINKING_BANNER_DESCRIPTION_PARENT_MOBILE:
          "In order to connect with your teen, use the Discord app on your phone to scan the QR code they provide. After connecting, you will see high-level information about your teen's activity on Discord.",
        FAMILY_CENTER_REQUESTS_LINKING_BANNER_TEEN_ASSET_ALT:
          "Wizard standing on a floating island",
        FAMILY_CENTER_REQUESTS_LINKING_BANNER_TEEN_BUTTON:
          "Connect with Parent",
        FAMILY_CENTER_REQUESTS_LIMIT_INFO_TEEN:
          "You can connect up to {maxConnections, number} parents in Family Center. To add another account, you must first remove one of the connected accounts above.",
        FAMILY_CENTER_REQUESTS_LIMIT_INFO_PARENT:
          "You can connect up to {maxConnections, number} teens in Family Center. To add another account, you must first remove one of the connected accounts above.",
        FAMILY_CENTER_QR_CODE_SCAN: "Connect with Teen",
        FAMILY_CENTER_QR_CODE_MODAL_NOTICE:
          "Only allow your parents to see this QR code.",
        FAMILY_CENTER_QR_CODE_MODAL_HEADER: "Connect with your parent",
        FAMILY_CENTER_QR_CODE_MODAL_DESCRIPTION:
          "When your parent scans this QR code, you will receive a connection request. If you accept this request, they will be able to view information about your activity in Family Center. [Learn more]({link})",
        FAMILY_CENTER_QR_CODE_MODAL_BUTTON_SHOW: "Reveal QR Code",
        FAMILY_CENTER_QR_CODE_MODAL_BUTTON_HIDE: "Hide QR Code",
        FAMILY_CENTER_QR_CODE_MODAL_REMINDER:
          "You can disconnect from a connected family member at any time if you change your mind.",
        FAMILY_CENTER_REQUESTS_LINKING_BANNER_PARENT_STEP_1_HEADER:
          "Ask your teen for their QR code",
        FAMILY_CENTER_REQUESTS_LINKING_BANNER_PARENT_STEP_1_DESCRIPTION:
          "Your teen can find this by going to Family Center in user settings and clicking My Family.",
        FAMILY_CENTER_REQUESTS_LINKING_BANNER_PARENT_STEP_2_HEADER:
          "Scan the QR code with your Discord app",
        FAMILY_CENTER_REQUESTS_LINKING_BANNER_PARENT_STEP_2_DESCRIPTION:
          "This will send a connection request to your teen, like magic!",
        FAMILY_CENTER_REQUESTS_LINKING_BANNER_PARENT_STEP_3_HEADER:
          "Have your teen accept the connection request",
        FAMILY_CENTER_REQUESTS_LINKING_BANNER_PARENT_STEP_3_DESCRIPTION:
          "Once they give consent for you to view their activity data, you’re good to go.",
        FAMILY_CENTER_ACTIVITY_USER_MESSAGED_TIMESTAMP_YESTERDAY:
          "Last messaged yesterday",
        FAMILY_CENTER_ACTIVITY_USER_MESSAGED_TIMESTAMP_TODAY:
          "Last messaged today",
        FAMILY_CENTER_ACTIVITY_USER_MESSAGED_TIMESTAMP_DAYS:
          "Last messaged {days, number} days ago",
        FAMILY_CENTER_ACTIVITY_USER_CALLED_TIMESTAMP_YESTERDAY:
          "Last called yesterday",
        FAMILY_CENTER_ACTIVITY_USER_CALLED_TIMESTAMP_TODAY: "Last called today",
        FAMILY_CENTER_ACTIVITY_USER_CALLED_TIMESTAMP_DAYS:
          "Last called {days, number} days ago",
        FAMILY_CENTER_ACTIVITY_USER_ADDED_TIMESTAMP_YESTERDAY:
          "Added yesterday",
        FAMILY_CENTER_ACTIVITY_USER_ADDED_TIMESTAMP_TODAY: "Added today",
        FAMILY_CENTER_ACTIVITY_USER_ADDED_TIMESTAMP_DAYS:
          "Added {days, number} days ago",
        FAMILY_CENTER_ACTIVITY_GUILD_ROW_MEMBER_COUNT:
          "{members, number} members",
        FAMILY_CENTER_DISABLE_FEATURE_MODAL_HEADER_TEXT:
          "Disable Family Center",
        FAMILY_CENTER_DISABLE_FEATURE_MODAL_SUBTITLE_TEXT:
          "Are you sure you want to disable Family Center? You can always enable it again by heading over to $[User Settings > Family Center](openSettingsHook).",
        FAMILY_CENTER_DISABLE_FEATURE_MODAL_DISABLE_BUTTON_TEXT:
          "Disable Family Center",
        FAMILY_CENTER_TEEN_SELECT_TITLE: "Select a family member",
        FAMILY_CENTER_ERROR_GENERIC_HEADER: "Something went wrong!",
        FAMILY_CENTER_ERROR_GENERIC_DESCRIPTION: "Please try again later.",
        FAMILY_CENTER_ERROR_GENERIC_TOAST:
          "Something went wrong! Please try again later.",
        FAMILY_CENTER_ERROR_REQUEST_PENDING_HEADER:
          "Connection request already sent!",
        FAMILY_CENTER_ERROR_REQUEST_PENDING_DESCRIPTION:
          "Your teen can accept your request in the Family Center. You'll receive an email to {email} once they accept or deny the request.",
        FAMILY_CENTER_ERROR_REQUEST_PENDING_DESCRIPTION_NO_EMAIL:
          "Your teen can accept your request in the Family Center. You'll receive an email to your email once they accept or deny the request.",
        FAMILY_CENTER_ERROR_CONNECTION_LIMIT_PARENT_HEADER:
          "You've reached your connection limit!",
        FAMILY_CENTER_ERROR_CONNECTION_LIMIT_PARENT_DESCRIPTION:
          "You can connect up to 8 accounts in Family Center. To add another account, you must first remove a connected account. Visit our [Help Center]({link}) to learn more.",
        FAMILY_CENTER_ERROR_CONNECTION_LIMIT_TEEN_HEADER:
          "You've reached your connection limit!",
        FAMILY_CENTER_ERROR_CONNECTION_LIMIT_TEEN_DESCRIPTION:
          "You can connect up to 3 accounts in Family Center. To add another account, you must first remove a connected account. Visit our [Help Center]({link}) to learn more.",
        FAMILY_CENTER_ERROR_TEEN_TO_TEEN_LINK_HEADER:
          "You must be over 18 to connect with this teen as a parent",
        FAMILY_CENTER_ERROR_TEEN_TO_TEEN_LINK_DESCRIPTION:
          "Visit our [Help Center]({link}) to learn more.",
        FAMILY_CENTER_EMPTY_ACTIVITY_TODAY: "No activity today",
        FAMILY_CENTER_EMPTY_ACTIVITY_YESTERDAY: "No activity since yesterday",
        FAMILY_CENTER_EMPTY_ACTIVITY_DAYS:
          "No activity over the last {days} days",
        FAMILY_CENTER_SETTINGS_EMAIL_DIGEST_ENABLE_SWITCH:
          "Receive Activity Summary emails",
        FAMILY_CENTER_SETTINGS_EMAIL_DIGEST_ENABLE_SWITCH_NOTE:
          "You will receive a weekly email summarizing your teen(s)' recent activity. We recommend keeping this setting on.",
        FAMILY_CENTER_HELP_LINE_HEADER: "Need extra support?",
        FAMILY_CENTER_HELP_LINE_CONTENT:
          "Text DISCORD to 741741 to speak to a trained volunteer crisis counselor at Crisis Text Line, available 24/7. [Learn more]({helpLink}) about our partnership with Crisis Text Line",
        SAFETY_USER_SENTIMENT_NOTICE:
          "Tell us how you feel about safety on Discord.",
        SAFETY_USER_SENTIMENT_NOTICE_CTA: "Let us know",
        SAFETY_USER_SENTIMENT_FEEDBACK_PROMPT: "Do you feel safe on Discord?",
        SAFETY_USER_SENTIMENT_FEEDBACK_SUBHEADER:
          "Safety on Discord is extremely important to us. Your feedback helps us improve.",
        SAFETY_USER_SENTIMENT_FOOTER:
          "Learn more about Discord Safety [here]({safetyCenterUrl}).",
        SAFETY_USER_SENTIMENT_FEEDBACK_CONFIRMATION: "Thanks for the feedback!",
        COLLECTIBLES_SHOP: "Shop",
        COLLECTIBLES_USE_NOW: "Use Now",
        COLLECTIBLES_CTA_GO_TO_SHOP: "Go to Shop",
        COLLECTIBLES_ACQUIRED_DATE: "Acquired {date}",
        COLLECTIBLES_MOBILE_IAP_NOTICE:
          "The ability to acquire new decorations is not available on this platform.",
        COLLECTIBLES_MOBILE_IAP_NOTICE_EDIT_HEADER:
          "Add more flair to your avatar. The ability to acquire new decorations is not available on this platform.",
        COLLECTIBLES_PURCHASE: "Buy for {price}",
        COLLECTIBLES_BUY_DECORATION: "Buy Decoration",
        COLLECTIBLES_ADD_TO_YOUR_COLLECTION: "Add to your collection",
        COLLECTIBLES_COLLECTING: "Collecting",
        COLLECTIBLES_COLLECTING_FINISHED: "Collecting finished",
        COLLECTIBLES_NITRO_EXCLUSIVE: "Nitro exclusive",
        COLLECTIBLES_PERMANENT_COLLECTION:
          "This decoration is now part of your collection and can be used anytime!",
        COLLECTIBLES_YOU_COLLECTED: "You've collected {itemName}!",
        COLLECTIBLES_ALREADY_OWNED: "Already owned",
        COLLECTIBLES_INCLUDED_WITH_PREMIUM: "Included with Nitro",
        COLLECTIBLES_DETAILS_MODAL_PREMIUM_PURCHASE_DISCLAIMER:
          "Once purchased, this decoration will be added to your collection and can be used anytime",
        COLLECTIBLES_DETAILS_MODAL_INCLUDED_WITH_PREMIUM_DISCLAIMER:
          "This bonus item is yours to keep and use anytime with an active Nitro subscription.",
        COLLECTIBLES_PURCHASE_DISCLAIMER_PAYMENT:
          "Hey! This purchase is non-refundable. Once you complete your purchase, the item will be available for use immediately and can be accessed in your User Profile settings. Note that Nitro subscriptions become non-refundable once you’ve purchased an item.",
        COLLECTIBLES_PURCHASE_DISCLAIMER_GIFT_PAYMENT:
          "This purchase is non-refundable. Once you complete your purchase, the item will be sent to the recipient and can be accessed in their User Profile settings.",
        COLLECTIBLES_PREMIUM_DISCOUNT_TOOLTIP_TEXT:
          "Nitro subscribers get a discount on this decoration",
        COLLECTIBLES_NON_PREMIUM_PRICE: "{price} with Nitro",
        COLLECTIBLES_NON_PREMIUM_PRICE_SUBSCRIBE_NOW:
          "{price} with Nitro. $[Subscribe now](subscribeNowHook)",
        COLLECTIBLES_SHOP_HERO_BANNER_TITLE: "Ready for a new look?",
        COLLECTIBLES_SHOP_HERO_BANNER_SUBTITLE_ALT:
          "Charming. Fierce. Hungry. Whatever your vibe, buy and collect your favorite styles for your profile for any occasion.",
        COLLECTIBLES_SHOP_ERROR_HEADING: "Well, this is awkward.",
        COLLECTIBLES_SHOP_ERROR_SHOP_LOAD:
          "Hmmm, we weren't able to load the Shop. Check back later.",
        CHANGE_DECORATION_MODAL_PURCHASE_HEADER: "Your Decorations",
        CHANGE_DECORATION_MODAL_STARTER_DESC:
          "Use anytime with an active Nitro subscription.",
        COLLECTIBLES_CHAT_PREVIEW_TEXT: "Look at my beautiful decoration",
        CHANGE_DECORATION_MODAL_PREMIUM_STARTER_HEADER: "Exclusive to Nitro",
        CHANGE_DECORATION_MODAL_PREVIEW_STARTER:
          "Want this for yourself? Collect and use this bonus decoration anytime with an active Nitro subscription.",
        CHANGE_DECORATION_MODAL_PREVIEW_STARTER_CHURNED:
          "Use this bonus decoration with an active Nitro subscription.",
        CHANGE_DECORATION_MODAL_PREVIEW_PURCHASE_PREMIUM:
          "Want this decoration for yourself? Head to the Shop to buy and collect it!",
        CHANGE_DECORATION_MODAL_PREVIEW_STARTER_PREMIUM:
          "Want this for yourself? Head to the Shop to collect it!",
        CHANGE_PFX_MODAL_PREVIEW_STARTER:
          "Want this for yourself? Collect and use this bonus profile effect anytime with an active Nitro subscription.",
        CHANGE_PFX_MODAL_PREVIEW_STARTER_CHURNED:
          "Use this bonus profile effect with an active Nitro subscription.",
        COLLECTIBLES_BUY_PROFILE_EFFECT: "Buy Profile Effect",
        COLLECTIBLES_DETAILS_MODAL_PROFILE_EFFECT_PREMIUM_PURCHASE_DISCLAIMER:
          "Once purchased, this effect will be added to your collection and can be used anytime",
        COLLECTIBLES_PROFILE_EFFECT_PERMANENT_COLLECTION:
          "This effect is now part of your collection and can be used anytime!",
        CHANGE_PROFILE_EFFECT_MODAL_PREVIEW_PURCHASE_PREMIUM:
          "Want this profile effect for yourself? Head to the Shop to buy and collect it!",
        COLLECTIBLES_DAYS_LEFT_IN_SHOP: "{days} days left in Shop",
        COLLECTIBLES_DAYS_LEFT: "{days} days left",
        COLLECTIBLES_LAST_DAY: "Last day to buy",
        COLLECTIBLES_SFA_TITLE: "The Shop is now open to you!",
        COLLECTIBLES_SFA_STARTER_BANNER_DESCRIPTION:
          "Collect these sweet, bonus items when you join Nitro! $[Unlock with Nitro](getPremium)",
        COLLECTIBLES_SFA_HERO_BANNER_SUBTITLE:
          "Charming. Fierce. Hungry. Whatever your vibe, buy and collect your favorite styles for your profile for any occasion.",
        COLLECTIBLES_SFA_BANNER_DESCRIPTION:
          "Make your profile feel alive with snazzy profile effects and avatar decorations. What's not to love?",
        COLLECTIBLES_SENDER_GIFTED_YOU_DECORATION:
          "{sender} gifted you an avatar decoration!",
        COLLECTIBLES_SENDER_GIFTED_YOU_EFFECT:
          "{sender} gifted you a profile effect!",
        COLLECTIBLES_SENDER_GIFTED_YOU_DECORATION_UNKNOWN_SENDER:
          "You have been gifted an avatar decoration!",
        COLLECTIBLES_SENDER_GIFTED_YOU_EFFECT_UNKNOWN_SENDER:
          "You have been gifted a profile effect!",
        COLLECTIBLES_ACCEPT_GIFT: "Accept gift",
        COLLECTIBLES_FROM_SENDER: "From {sender}",
        COLLECTIBLES_SEND_ITEM_AS_A_GIFT: "Send item as a gift",
        COLLECTIBLES_GIFT_COACHMARK_HEADING: "Give the gift of style",
        COLLECTIBLES_GIFT_COACHMARK_DESC:
          "Check out the latest profile styles and surprise your friend with a fresh new look.",
        COLLECTIBLES_GIFT_SEND_ERROR_OWNED:
          "Hey! Your friend already has this. Try sending something else.",
        COLLECTIBLES_GIFT_RECIPIENT_PLACEHOLDER: "Select a friend",
        COLLECTIBLES_GIFT_LABEL: "Your gift",
        COLLECTIBLES_PREVIEW_GIFT_PROFILE: "Preview on your friend's profile",
        COLLECTIBLES_SHOP_GIFT_MODAL_SELECT_HEADER: "Send a gift",
        COLLECTIBLES_SHOP_GIFT_MODAL_REVIEW_HEADER: "Review your gift",
        COLLECTIBLES_GIFT_CODE_MODAL_UPSELL:
          "You can also send gifts to your friends from the Shop! $[Check it out](checkItOut).",
        DIRECTORY_CATEGORY_TOWN_HALL_1: "Staff Picks",
        DIRECTORY_CATEGORY_TOWN_HALL_2: "Gaming",
        DIRECTORY_CATEGORY_TOWN_HALL_3: "Indie Spotlight",
        DIRECTORY_CATEGORY_TOWN_HALL_5: "Creator Corner",
        USER_PROFILE_SETTINGS_SHOP_FOR_ALL_BANNER_HEADER:
          "‘Tis the season for feelin’ festive!",
        USER_PROFILE_SETTINGS_SHOP_FOR_ALL_BANNER_SUBHEADER:
          "Deck your profile in seasonal styles with new items in the Shop.",
        AVATAR_DECORATIONS_SOCIAL_UPSELL:
          "Like this avatar decoration? $[Get your own from the Shop](openShop).",
        COMBINED_COLLECTIBLES_SOCIAL_UPSELL:
          "Customize your profile with snazzy animations. $[Check them out](openShop).",
        STARTER_PROFILE_EFFECTS_SOCIAL_UPSELL_NON_NITRO:
          "Like this profile effect? $[Get your own from the Shop](openShop).",
        COMBINED_STARTER_COLLECTIBLES_SOCIAL_UPSELL_NON_NITRO:
          "Unlock this profile customization with Nitro. $[Check it out](openShop).",
        STARTER_AVATAR_DECORATIONS_SOCIAL_UPSELL_NITRO:
          "Like this avatar decoration? $[Claim it with your Nitro subscription](openShop).",
        STARTER_PROFILE_EFFECTS_SOCIAL_UPSELL_NITRO:
          "Like this profile effect? $[Claim it with your Nitro subscription](openShop).",
        COMBINED_STARTER_COLLECTIBLES_SOCIAL_UPSELL_NITRO:
          "Like this profile customization? $[Get your own from the Shop](openShop).",
        COLLECTIBLES_CYBERPUNK_COACHMARK_TITLE: "NEW in the Shop! Cyberpunk",
        COLLECTIBLES_CYBERPUNK_COACHMARK_DESCRIPTION:
          "The future is here, and it's looking good.",
        COLLECTIBLES_BANNER_TITLE_2024: "Give your profile a fresh look",
        COLLECTIBLES_BANNER_DESCRIPTION_2024:
          "Check out the latest avatar decorations and profile effects and collect your favorite styles.",
        COLLECTIBLES_LUNAR_NEW_YEAR_TOOLTIP_TEXT:
          "Explore Lunar New Year styles",
        INVENTORY_EMOJI_DETAILS_V2: "See emoji details",
        PRIVATE_CHANNEL_INTEGRATION_ADDED:
          "$[!!{username}!!](usernameHook) added the $[!!{otherUsername}!!](otherUsernameHook) app. See our [help center]({helpCenterLink}) for more info.",
        PRIVATE_CHANNEL_INTEGRATION_ADDED_DELETED_APPLICATION:
          "$[!!{username}!!](usernameHook) added a deleted application. See our [help center]({helpCenterLink}) for more info.",
        PRIVATE_CHANNEL_INTEGRATION_REMOVED:
          "$[!!{username}!!](usernameHook) removed the $[!!{otherUsername}!!](otherUsernameHook) app. See our [help center]({helpCenterLink}) for more info.",
        PRIVATE_CHANNEL_INTEGRATION_REMOVED_DELETED_APPLICATION:
          "$[!!{username}!!](usernameHook) removed a deleted application. See our [help center]({helpCenterLink}) for more info.",
        PRIVATE_CHANNEL_INTEGRATION_ADDED_MOBILE:
          "[!!{username}!!](usernameOnClick) added the [!!{otherUsername}!!](otherUsernameOnClick) app. See our [help center](helpCenterLink) for more info.",
        PRIVATE_CHANNEL_INTEGRATION_ADDED_DELETED_APPLICATION_MOBILE:
          "[!!{username}!!](usernameOnClick) added a deleted application. See our [help center](helpCenterLink) for more info.",
        PRIVATE_CHANNEL_INTEGRATION_REMOVED_MOBILE:
          "[!!{username}!!](usernameOnClick) removed the [!!{otherUsername}!!](otherUsernameOnClick) app. See our [help center](helpCenterLink) for more info.",
        PRIVATE_CHANNEL_INTEGRATION_REMOVED_DELETED_APPLICATION_MOBILE:
          "[!!{username}!!](usernameOnClick) removed a deleted application. See our [help center](helpCenterLink) for more info.",
        PRIVATE_CHANNEL_AVAILABLE_APPS: "Available Apps",
        PRIVATE_CHANNEL_INSTALLED_APPS: "Added Apps",
        PRIVATE_CHANNEL_ADD_APPS: "Add Apps",
        PRIVATE_CHANNEL_INTEGRATION_OAUTH_SHEET_TITLE: "Heads up!",
        PRIVATE_CHANNEL_INTEGRATION_OAUTH_SHEET_BODY:
          "Some things to know about adding apps.",
        PRIVATE_CHANNEL_INTEGRATION_OAUTH_SHEET_COMMAND_SUMMARY:
          "Apps will be able to create commands in this chat",
        PRIVATE_CHANNEL_INTEGRATION_OAUTH_SHEET_CANNOT_READ_MESSAGE:
          "Apps cannot read messages",
        PRIVATE_CHANNEL_INTEGRATION_OAUTH_SHEET_LEARN_MORE:
          "To learn more about apps in group messages visit our help center",
        PRIVATE_CHANNEL_INTEGRATION_MORE_APPS_INFO:
          "Learn more about apps in friend groups",
        PRIVATE_CHANNEL_INTEGRATION_MORE_APPS_INFO_LINKED:
          "[Learn more]({helpCenterLink}) about apps in friend groups",
        PRIVATE_CHANNEL_INTEGRATION_ADD_MODAL_ROW_INFO:
          "Open {appName} profile",
        PRIVATE_CHANNEL_ADD_APPS_INFO:
          "Add apps to this message to do stuff together!",
        PRIVATE_CHANNEL_APPS_HEADER: "Apps",
        PRIVATE_CHANNEL_APPS_HEADER_COUNT:
          "{count, number} {count, plural, =1 {App} other {Apps}}",
        PRIVATE_CHANNEL_TRY_APPS: "Learn more about apps in friend groups",
        PRIVATE_CHANNEL_TRY_APPS_LINKED:
          "[Learn more]({helpCenterLink}) about apps in friend groups",
        OAUTH2_REQUESTS_PRIVATE_CHANNEL_INTEGRATION:
          "wants to access your group message",
        BOT_PROFILE_MANAGE_PRIVATE_CHANNEL_INTEGRATION: "Manage App",
        BOT_PROFILE_REMOVE_PRIVATE_CHANNEL_INTEGRATION: "Remove App",
        BOT_PROFILE_ADD_TO_PRIVATE_CHANNEL: "Add App",
        MONETIZATION: "Monetization",
        GUILD_SETTINGS_MONETIZATION: "Server Monetization",
        GUILD_ROLE_SUBSCRIPTIONS_TITLE: "Server Subscriptions",
        GUILD_SETTINGS_ROLE_SUBSCRIPTIONS_STORE_PAGE: "Promo Page",
        GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIER_EDIT_SUBTITLE:
          "Subscription Tier",
        GUILD_ROLE_SUBSCRIPTION_CREATE_TIER_CONTINUE: "Continue",
        GUILD_ROLE_SUBSCRIPTION_PLAN_FINISH: "Done",
        GUILD_SETTINGS_OWNER_MUST_ENABLE_MONETIZATION_TITLE:
          "Monetization not enabled",
        GUILD_SETTINGS_OWNER_MUST_ENABLE_MONETIZATION_DESCRIPTION:
          "The server owner must enable monetization before you can get started!",
        GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIER_EDIT_DETAILS_TITLE: "Basic Info",
        GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIER_EDIT_BENEFITS_TITLE: "Perks",
        GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIER_EDIT_DESIGN_TITLE: "Flair",
        GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIER_EDIT_PUBLISH_DRAFT_DESCRIPTION:
          "This tier is currently in Draft Mode. Tap Publish to go live to all server members.",
        GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIER_EDIT_PUBLISH_DRAFT_CTA: "Publish",
        GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIER_CARD_CREATE: "Create New Tier",
        GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIERS_TAB_TITLE: "Manage Tiers",
        GUILD_SETTINGS_ROLE_SUBSCRIPTION_TIERS_TAB_DESCRIPTION:
          "Create and edit {maxTiers, plural, =1 {# tier} other {up to # tiers}} with different prices and levels of exclusive access.",
        GUILD_ROLE_SUBSCRIPTION_EMPTY_TITLE:
          "Create a Premium experience for your community",
        GUILD_ROLE_SUBSCRIPTION_EMPTY_DESCRIPTION:
          "Let members support you and the server. Monetization for all types of creators and community organizers.",
        GUILD_ROLE_SUBSCRIPTION_EMPTY_PERK_1_TITLE: "Reward your supporters",
        GUILD_ROLE_SUBSCRIPTION_EMPTY_PERK_1_DESCRIPTION:
          "Offer unique access, recognition, and benefits to community members who continue to support you",
        GUILD_ROLE_SUBSCRIPTION_EMPTY_PERK_2_TITLE: "Share exclusives",
        GUILD_ROLE_SUBSCRIPTION_EMPTY_PERK_2_DESCRIPTION:
          "Create channels or an entire server where only your subcribers can hang out and see your latest content",
        GUILD_ROLE_SUBSCRIPTION_EMPTY_PERK_3_TITLE: "Get paid",
        GUILD_ROLE_SUBSCRIPTION_EMPTY_PERK_3_DESCRIPTION:
          "Improve the community (and your bank account) with revenue earned from monthly subscription fees",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_CTA: "Request Access",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_OWNERS_ONLY_NOTICE:
          "Only the server owner can apply for Server Monetization. Give ’em a heads up!",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUIREMENTS_DESCRIPTION:
          "To request access, refer to the requirements below. Note that these are just the minimum requirements to apply, and acceptance is not guaranteed.\n\nTo learn more about Server Monetization, [check out the FAQ]({faqUrl}).",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_PENDING_DESCRIPTION:
          "Your request for Server Monetization access has been submitted. Please allow about 5 business days for a status update.\n\nTo learn more about Server Monetization, [check out the FAQ]({faqUrl}).",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBLE_MESSAGE:
          "Great work! Your server meets all the requirements to request Server Subscriptions access.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_NOT_ELIGIBLE_MESSAGE:
          "Not yet! Your server **$[does not](doesNotHook)** currently meet all the requirements to request Server Subscriptions access.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_2FA_ELIGIBLE:
          "2FA enabled",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_2FA_NOT_ELIGIBLE:
          "2FA not enabled",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_2FA_DESCRIPTION:
          "You must $[enable Two-Factor Authentication](enableMFAHook) on your account and require it for your server to enable Monetization—for your safety!",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_MEMBERS_ELIGIBLE:
          "Enough members",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_MEMBERS_NOT_ELIGIBLE:
          "Not enough members",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_MEMBERS_DESCRIPTION:
          "Your server needs at least {minimumSize, plural, one {1 member} other {{minimumSize} members}} to qualify for Server Subscriptions.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_AGE_ELIGIBLE:
          "Meets server age requirement",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_AGE_NOT_ELIGIBLE:
          "Does not meet server age requirement",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_AGE_DESCRIPTION:
          "Your server must be at least {minimumAge} old.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_OWNER_AGE_ELIGIBLE:
          "Meets server owner age requirement",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_OWNER_AGE_NOT_ELIGIBLE:
          "Does not meet server owner age requirement",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_OWNER_AGE_DESCRIPTION:
          "Your server owner must be at least {minimumOwnerAgeInYears} years old.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_VIOLATIONS_ELIGIBLE:
          "No policy violations",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_VIOLATIONS_NOT_ELIGIBLE:
          "Recent policy violations",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_VIOLATIONS_DESCRIPTION:
          "Your server must abide by our [Community Guidelines]({communityGuidelinesUrl}).",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_COMMUNICATORS_ELIGIBLE:
          "Weekly communicators",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_COMMUNICATORS_NOT_ELIGIBLE:
          "Lack of weekly communicators",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_COMMUNICATORS_DESCRIPTION:
          "Server members should be active and engaged.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_RETENTION_ELIGIBLE:
          "Healthy member retention",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_RETENTION_NOT_ELIGIBLE:
          "Poor member retention",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_RETENTION_DESCRIPTION:
          "Server member attrition should be relatively low.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_NSFW_CONTENT_ELIGIBLE:
          "Not primarily 18+ content",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_NSFW_CONTENT_NOT_ELIGIBLE:
          "Primarily 18+ content",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ELIGIBILITY_REQUIREMENT_NSFW_CONTENT_DESCRIPTION:
          "Age-restricted content is allowed, but it cannot be the focus of the server.",
        GUILD_ROLE_SUBSCRIPTION_WELCOME_TITLE:
          "Welcome to Server Subscriptions",
        GUILD_ROLE_SUBSCRIPTION_WELCOME_DESCRIPTION:
          "Time to set up shop. It's as easy as 1, 2, 3.",
        GUILD_ROLE_SUBSCRIPTION_WELCOME_ACCEPT_TERMS_TITLE:
          "Agree to the terms",
        GUILD_ROLE_SUBSCRIPTION_WELCOME_ACCEPT_TERMS_DESCRIPTION:
          "[Check out the terms]({fullTermsUrl}), then let us know you’re good to go.",
        GUILD_ROLE_SUBSCRIPTION_WELCOME_ACCEPT_TERMS_CHECKBOX:
          "I have read and agree to the terms",
        GUILD_ROLE_SUBSCRIPTION_WELCOME_SETUP_TIERS_TITLE: "Set up some tiers",
        GUILD_ROLE_SUBSCRIPTION_WELCOME_SETUP_TIERS_DESCRIPTION:
          "Reward your most loyal community members with access to exclusive channels, visual flair, fun perks, and pretty much anything else you can think of.",
        GUILD_ROLE_SUBSCRIPTION_WELCOME_GET_STARTED_TITLE: "Start making money",
        GUILD_ROLE_SUBSCRIPTION_WELCOME_GET_STARTED_DESCRIPTION:
          "Once you publish your first tier, you’ll be able to access detailed subscriber analytics that let you know what’s going on and how you might be able to improve.",
        GUILD_ROLE_SUBSCRIPTION_WELCOME_GET_STARTED_BUTTON: "Get Started",
        GUILD_ROLE_SUBSCRIPTION_WELCOME_GET_STARTED_BUTTON_DISABLED_TOOLTIP:
          "Agree to the terms to continue.",
        GUILD_ROLE_SUBSCRIPTIONS_TOGGLE_SECTION_LABEL:
          "Expand/collapse section",
        GUILD_ROLE_SUBSCRIPTION_WELCOME_V2_TITLE: "Earn money on Discord",
        GUILD_ROLE_SUBSCRIPTION_WELCOME_DESKTOP_V2_TITLE:
          "Earn money on Discord",
        GUILD_ROLE_SUBSCRIPTION_WELCOME_V2_SUBTITLE:
          "Generate an income by creating and selling monthly subscriptions, one-time downloadables, and Premium Roles. Discord makes it easy to promote your products within your server and beyond—and we're here to help you earn!",
        GUILD_ROLE_SUBSCRIPTION_WELCOME_V2_ACCEPT_TERMS_CHECKBOX:
          "I agree to the [Monetization Terms]({fullTermsUrl}) & [Server Monetization Policy]({creatorRevenuePolicyUrl})",
        GUILD_ROLE_SUBSCRIPTION_START_EARNING_CTA: "Start Earning",
        GUILD_ROLE_SUBSCRIPTION_WELCOME_HERO_BANNER_ALT:
          "A character looking excitedly at coins raining from the sky",
        GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_TITLE: "How it Works",
        GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_STEP_1:
          "Create exclusive perks and digital products on Discord",
        GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_STEP_2:
          "Tell your community to purchase",
        GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_STEP_3:
          "Grow your customer base & start earning!",
        GUILD_ROLE_SUBSCRIPTION_HOW_IT_WORKS_FOOTER:
          "Need inspiration? The [Creator Portal]({creatorPortalUrl}) has you covered.",
        GUILD_ROLE_SUBSCRIPTION_BENEFITS_FOR_CREATORS_TITLE:
          "Benefits for Servers",
        GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_1:
          "Earn income by selling digital goods and experiences",
        GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_2:
          "Reward and create a home for your super supporters",
        GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_3: "Revenue share",
        GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_NEW_SUBS:
          "100 sales and 50 new subscribers!",
        GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_REVENUE_INCREASE:
          "+$1200 this month",
        GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_1_PREVIEW_IMG_ALT:
          "A character monetizing as a creator",
        GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_1_GRID_ARIA_LABEL:
          "A grid of user avatars",
        GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_2_IMG_1_ALT:
          "Two characters enjoying ice cream together",
        GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_2_IMG_2_ALT:
          "A hand offering a membership badge",
        GUILD_ROLE_SUBSCRIPTION_CREATOR_BENEFIT_3_IMG_ALT:
          "A character paying a subscription fee with coins",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_NOT_ELIGIBLE_TITLE_V2:
          "You don't meet certain Discord monetization requirements.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_RECENT_VIOLATION_ELIGIBILITY_CTA:
          "Contact Support",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_2MFA_ELIGIBILITY_CTA: "Go to enable",
        GUILD_ROLE_SUBSCRIPTION_WAITLIST_NOTICE:
          "We don't currently support server monetization where you're located in the world. Until we do, feel free to sign up for updates regarding Server Subscriptions.",
        GUILD_ROLE_SUBSCRIPTION_WAITLIST_CTA_LABEL: "Sign up for updates",
        GUILD_ROLE_SUBSCRIPTION_COMMUNITY_REQUIREMENT_NOTICE:
          "Before you can start monetizing, you need to convert your server to a Community",
        GUILD_ROLE_SUBSCRIPTION_COMMUNITY_REQUIREMENT_CTA_LABEL:
          "Become a Community",
        GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_GUILD_SECTION_TITLE:
          "Learn from other monetizing servers",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_SUBSCRIBERS_LABEL: "Subscribers",
        GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_QUOTE_ATTRIBUTION:
          "- {attributionName}, {attributionTitle}",
        GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_PREVIOUS_CARD_ARIA_LABEL:
          "See previous creator highlight",
        GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_NEXT_CARD_ARIA_LABEL:
          "See next creator highlight",
        GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_CARD_PREMIUM_EMOJI_TITLE:
          "My Premium Emoji",
        GUILD_ROLE_SUBSCRIPTION_OTHER_CREATOR_VIEW_SERVER_CTA: "View my server",
        CREATOR_MONETIZATION_SETTINGS_RESTRICTED_NOTICE:
          "Monetization has been restricted for this server. Please check your email for more information.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_READ_ONLY_FOR_PENDING_NEW_OWNER_PENDING_NOTICE:
          "Access to settings has been restricted for this server since new owner has not accepted the monetization terms.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_PENDING:
          "Request Pending",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_RECEIVED_AND_PENDING:
          "Your request has been received and is being reviewed.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_REJECTED:
          "Your request was not approved. You'll be able to try again in {requestCooldownDuration}.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_REJECTED_STATIC:
          "Your request was not approved. You'll be able to try again in 1 month.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_RESUBMIT:
          "Your previous request was not approved. Check your email and reapply after addressing the issues!",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_REJECTED_V2:
          "Your appeal was not approved. You will not be able to re-apply for {requestCooldownDuration}. Please review our [Server Monetization Policy]({creatorRevenuePolicyUrl}) to ensure you are in compliance.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_REJECTED_STATIC_V2:
          "Your appeal was not approved. You will not be able to re-apply for 30 days. Please review our Server Monetization Policy to ensure you are in compliance.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_REJECTED_HIGH_HARM:
          "Your server has been found in violation of our [Discord Community guidelines.]({communityGuidelineUrl}) Due to the nature of this violation you are not eligible for a payout.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_REJECTED_HIGH_HARM_ALT:
          "Your server has been found in violation of our [Discord Community guidelines]({communityGuidelineUrl}) and is ineligible for server subscriptions.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_ENABLE_REQUEST_RESUBMIT_V2:
          "Your server has been found in violation of our Server Monetization Policy and therefore your payout was not approved. Please check the email associated with this server for more details.\n\nDo not start an appeal until you have resolved the issue detailed in the email. If you do not pass the appeal you will not be able to re-apply for 30 days.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_SUBMIT_APPEAL_CTA: "Submit Appeal",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_NO_PUBLISHED_TIERS: "Get Started",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_DESCRIPTION:
          "Monetize your server by offering exclusive channels and benefits.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYOUTS_PROBLEM_WARNING:
          "Oops, a problem with your account is preventing payout. Check your email for more information, and [update your payment settings]({url}).",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_BASIC_INFO: "Basic Info",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_TIERS: "Tiers",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_EMOJI: "Emoji",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_EMOJI_MOBILE: "Premium Emoji",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_PAYMENT: "Payment",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_PREVIEW: "Preview",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_PREVIEW_DISABLED:
          "You need to fill out any empty tiers to preview what everything looks like",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_ADVANCED: "Advanced",
        GUILD_ROLE_SUBSCRIPTION_PREMIUM_ROLE_ICON_LABEL:
          "Server Subscriptions role",
        VIEWING_AS_SUBSCRIPTION_ROLES_BACK:
          "Back to Server Subscriptions Settings",
        VIEWING_AS_SUBSCRIPTION_ROLES_SELECT: "Select Tier",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_TITLE: "Promo Page",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_DESCRIPTION:
          "Easily share your premium offering with people new to your server. Your public Promo Page may need 5 minutes to reflect latest changes.",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_ENABLE:
          "Show your premium offering",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_PROMO_URL:
          "Your Promo Page URL",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_GO_TO_PAGE: "Go to Page",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_ACCENT_COLOR_TITLE:
          "Choose Page Accent Color",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_ACCENT_COLOR_DESCRIPTION:
          "Add your personal style to your profile with a custom accent color.",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_ACCENT_COLOR_BUTTON_PREVIEW:
          "Button Preview",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_TRAILER_TITLE:
          "Teaser Trailer",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_TRAILER_DESCRIPTION:
          "Add an unlisted or public youtube video link that we'll embed on your promo page.",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_TRAILER_PLACEHOLDER:
          "Enter a YouTube URL",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_TRAILER_BAD_LINK:
          "Please enter a valid YouTube URL",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_DISPLAY_OPTIONS_TITLE:
          "Choose what you want to show",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_DISPLAY_OPTIONS_DESCRIPTION:
          "Decide which of the following choices you want to show on your live promo page.",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_DISPLAY_OPTIONS_PREMIUM_MEMBER_COUNT:
          "Subscriber Count",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_DISPLAY_OPTIONS_PREMIUM_MEMBER_COUNT_DESCRIPTION:
          "Display how many subscribers you have",
        GUILD_ROLE_SUBSCRIPTION_STORE_PAGE_SETTINGS_PRIMARY_TOGGLE_DISABLED_TOOLTIP:
          "You need at least one published tier to enable the Promo Page.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_SECTION_BASIC_INFO_NEEDS_APPLICATION:
          "Enable monetization first!",
        FORM_HELP_SYSTEM_CHANNEL_ROLE_SUBSCRIPTION_PURCHASE_MESSAGES:
          "Send a message when someone purchases a Server Product or Server Subscription",
        FORM_HELP_SYSTEM_CHANNEL_ROLE_SUBSCRIPTION_PURCHASE_MESSAGE_REPLIES:
          "Prompt members to reply to Server Subscription congratulation messages with a sticker",
        GUILD_ROLE_SUBSCRIPTION_CHECKLIST_HEADER: "Premium Setup",
        GUILD_ROLE_SUBSCRIPTION_CHECKLIST_PAYMENT_ENABLE: "Enable monetization",
        GUILD_ROLE_SUBSCRIPTION_CHECKLIST_INFO_FORMAT: "Select a format",
        GUILD_ROLE_SUBSCRIPTION_CHECKLIST_INFO_DESCRIPTION:
          "Write a description",
        GUILD_ROLE_SUBSCRIPTION_CHECKLIST_INFO_COVER_IMAGE:
          "Upload a cover photo",
        GUILD_ROLE_SUBSCRIPTION_CHECKLIST_TIER_BASICS: "Fill out the basics",
        GUILD_ROLE_SUBSCRIPTION_CHECKLIST_TIER_FLAIR: "Set visual flair",
        GUILD_ROLE_SUBSCRIPTION_CHECKLIST_TIER_PERKS: "Select perks",
        GUILD_ROLE_SUBSCRIPTION_CHECKLIST_LEARN_MORE_SECTION_TITLE:
          "Learn More",
        GUILD_ROLE_SUBSCRIPTION_CHECKLIST_LINK_PROMO_PAGE:
          "[Set up your promo page]({promoPageGuideUrl})",
        GUILD_ROLE_SUBSCRIPTION_CHECKLIST_LINK_CASE_STUDIES:
          "[Get inspired from fellow creators]({caseStudiesUrl})",
        GUILD_ROLE_SUBSCRIPTION_CHECKLIST_LINK_SUBSCRIPTION_OFFERING:
          "[Build your Subscription offering]({subscriptionOfferingGuideUrl})",
        GUILD_ROLE_SUBSCRIPTION_CHECKLIST_LINK_TIER_STRUCTURE:
          "[Deciding your tier structure]({tierStructureGuideUrl})",
        GUILD_ROLE_SUBSCRIPTION_FORMAT_TITLE: "Exclusivity Level",
        GUILD_ROLE_SUBSCRIPTION_FORMAT_DESCRIPTION:
          "Do you want to make your entire server exclusive or just a manually selected set of channels?",
        GUILD_ROLE_SUBSCRIPTION_FORMAT_SOME_CHANNELS_NAME:
          "I just want to make some channels exclusive",
        GUILD_ROLE_SUBSCRIPTION_ENABLE_MONETIZATION_UNAVAILABLE_MOBILE_TITLE:
          "In order to set up Server Subscriptions, you must first enable server monetization",
        GUILD_ROLE_SUBSCRIPTION_ENABLE_MONETIZATION_UNAVAILABLE_MOBILE_DESCRIPTION:
          "That feature isn’t yet available on Discord mobile. Check out Server Subscriptions settings on desktop or web to get started!",
        GUILD_ROLE_SUBSCRIPTION_PAYMENT_ANALYTICS_UNAVAILABLE_MOBILE_TITLE:
          "Sorry, payment analytics isn’t available on mobile yet",
        GUILD_ROLE_SUBSCRIPTION_PAYMENT_ANALYTICS_UNAVAILABLE_MOBILE_DESCRIPTION:
          "That feature isn’t yet available on Discord mobile. Check out Server Subscriptions settings on desktop or web to get started!",
        GUILD_ROLE_SUBSCRIPTION_FORMAT_SOME_CHANNELS_DESCRIPTION:
          "Manually select which channels you want to lock to non-subscribers.",
        GUILD_ROLE_SUBSCRIPTION_FORMAT_ALL_CHANNELS_NAME:
          "I want to make my entire server exclusive",
        GUILD_ROLE_SUBSCRIPTION_FORMAT_ALL_CHANNELS_DESCRIPTION:
          "All channels in your server will be locked to non-subscribers.",
        GUILD_ROLE_SUBSCRIPTION_FORMAT_ALL_CHANNELS_DIALOG_TITLE:
          "Make entire server exclusive",
        GUILD_ROLE_SUBSCRIPTION_FORMAT_ALL_CHANNELS_DIALOG_TEXT:
          "After saving this change, only admins and server subscribers can view channels and send messages on your server.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_DESCRIPTION_TITLE: "Description",
        GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_DESCRIPTION_PLACEHOLDER:
          "Let folks know what’s great about Server Subscriptions on your server",
        GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_TITLE: "Cover photo",
        GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_DESCRIPTION:
          "We recommend an image that’s at least 1600px by 400px. You can upload a PNG or JPG under 10 MB.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_CTA_UPLOAD:
          "Upload Image",
        GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_CTA_EDIT: "Edit Image",
        GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_COVER_IMAGE_CTA_EDIT_A11Y:
          "Edit Image, replace {filename}",
        GUILD_ROLE_SUBSCRIPTION_IMAGE_CTA_DEFAULT_FILENAME: "saved image",
        GUILD_ROLE_SUBSCRIPTION_SETUP_INFO_FULL_OUT_ALL_INFO:
          "Please add a description and cover image",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_SYMBOL_TITLE: "Tier avatar",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_SYMBOL_DESCRIPTION:
          "Upload an image under 256kb. We recommend at least 96x96 pixels.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_NAME_TITLE: "Tier Name",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_NAME_PLACEHOLDER: "Golden Wumpus",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_PRICE_TITLE: "Price Per Month",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_PRICE_PLACEHOLDER: "Select a price",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DESCRIPTION_TITLE: "Description",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DESCRIPTION_PLACEHOLDER:
          "Let people know why they might want to join this tier.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_FLAIR_HEADER_TITLE: "Visual Flair",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_FLAIR_HEADER_SUBTITLE:
          "Give your server subscribers a way to show off their support.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_BENEFITS_HEADER_TITLE:
          "Channels & Benefits",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_BENEFITS_HEADER_SUBTITLE:
          "You can offer access to every channel on your server or just a few that you choose by hand. You can also add benefits like merch or digital goods.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DRAFT_BANNER_TITLE:
          "This tier is in Draft Mode.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DRAFT_BANNER_DESCRIPTION:
          "It will not be visible to server members until you publish it.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_SAVE_BEFORE_PUBLISH_TOOLTIP:
          "Please save before publishing",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_BASIC_INFO_SECTION_TITLE:
          "Basic Info",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ADVANCE_SECTION_TITLE:
          "Advanced Options",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ARCHIVE_LABEL: "Archive Tier",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ARCHIVE_BUTTON: "Archive Tier",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ARCHIVE_DESCRIPTION:
          "Archiving a tier removes it from public view and cancels renewals for existing members. This action is not reversible.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ARCHIVE_HEADER: "Archive {tierName}",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_LABEL: "Delete Tier",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_BUTTON: "Delete Tier",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_DESCRIPTION:
          "Permanently delete this tier and its role. This can only be done if there are no remaining subscribers of this tier.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_UNSAVED_DESCRIPTION:
          "Discard all changes and delete this tier.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_HEADER: "Delete {tierName}",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETE_TOOLTIP:
          "Cannot delete a tier with subscribers ({listingMemberCount} remaining)",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_REMOVAL_BUTTON: "Delete Tier",
        GUILD_ROLE_SUBSCRIPTION_SETUP_INITIAL_TIER_NAME: "New Tier",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_EDIT_LABEL: "Edit Tier",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_DELETED_CHANNEL_LABEL:
          "Channel Deleted",
        GUILD_ROLE_SUBSCRIPTION_NAGBAR_TEXT:
          "Finish setting up Server Subscription tiers to start earning!",
        GUILD_ROLE_SUBSCRIPTION_SETUP_CHANNEL_BENEFITS_CHANNELS_TITLE:
          "Exclusive Channels",
        GUILD_ROLE_SUBSCRIPTION_SETUP_CHANNEL_BENEFITS_CHANNELS_DESCRIPTION:
          "Create a new premium channel or convert an existing channel. The order here will match what is displayed.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_CHANNEL_BENEFITS_ADD_BUTTON_TEXT:
          "Add a channel",
        GUILD_ROLE_SUBSCRIPTION_SETUP_INTANGIBLE_BENEFITS_TITLE:
          "Additional Benefits",
        GUILD_ROLE_SUBSCRIPTION_SETUP_INTANGIBLE_BENEFITS_DESCRIPTION:
          "Offer other perks that exist outside Discord. The order here will match what is displayed.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_INTANGIBLE_BENEFITS_ADD_BUTTON_TEXT:
          "Add a benefit",
        GUILD_ROLE_SUBSCRIPTION_SETUP_EMOJI_TITLE: "Emoji",
        GUILD_ROLE_SUBSCRIPTION_SETUP_EMOJI_DESCRIPTION:
          "Add up to {premiumEmojiMaximum} emoji that members of this tier can use.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_EMOJI_MANAGE_LINK:
          "[Manage Premium Emoji](handleTransitionToManageEmoji)",
        GUILD_ROLE_SUBSCRIPTION_SETUP_EMOJI_ADD_BUTTON_TEXT: "Add emoji",
        GUILD_ROLE_SUBSCRIPTION_SETUP_EMOJI_REMOVE_BUTTON_ARIA_LABEL:
          "Remove emoji",
        GUILD_ROLE_SUBSCRIPTION_SETUP_MOBILE_TIER_EMOJI_EDIT_BUTTON_TEXT:
          "Edit tier emoji",
        GUILD_ROLE_SUBSCRIPTION_SETUP_MOBILE_TIER_EMOJI_EDIT_TITLE:
          "Edit Tier Emoji",
        GUILD_ROLE_SUBSCRIPTION_SETUP_MOBILE_TIER_EMOJI_EDIT_INLINE_MESSAGE:
          "This is the last tier using this emoji.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_MOBILE_TIER_EMOJI_EDIT_INLINE_WARNING:
          "Removing this emoji will remove it from your server.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_MOBILE_TIER_EMOJI_EDIT_CONFIRM_ALERT_TITLE:
          "Are you sure?",
        GUILD_ROLE_SUBSCRIPTION_SETUP_MOBILE_TIER_EMOJI_EDIT_CONFIRM_ALERT_BODY:
          "{numberOfEmojiSlatedForDeletion, plural, =1 {This is the last tier using this emoji. Removing this emoji will delete it from your server.} other {This is the last tier using these {numberOfEmojiSlatedForDeletion} emoji. Removing these emoji will delete them from your server.}}",
        GUILD_ROLE_SUBSCRIPTION_SETUP_FREE_TRIAL_TITLE: "Free Trial",
        GUILD_ROLE_SUBSCRIPTION_SETUP_FREE_TRIAL_DESCRIPTION:
          "Offer server members a one-time opportunity to take this tier for a spin without upfront payment. You may choose not to include Additional Benefits as part of this offer.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_ENABLE_FREE_TRIAL_CTA:
          "Enable free trials for this tier",
        GUILD_ROLE_SUBSCRIPTION_SETUP_FREE_TRIAL_DISABLED: "Disabled",
        GUILD_ROLE_SUBSCRIPTION_SETUP_FREE_TRIAL_TIME_LIMIT_TITLE: "Time Limit",
        GUILD_ROLE_SUBSCRIPTION_SETUP_FREE_TRIAL_TIME_LIMIT_DESCRIPTION:
          "Choose a duration for free trials of this tier.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_TRIAL_TIME_LIMIT_DEFAULT_OPTION:
          "{defaultLimit} (Default)",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ACTIVE_TRIAL_USER_LIMIT_TITLE:
          "Quantity",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ACTIVE_TRIAL_USER_LIMIT_DESCRIPTION:
          "Set how many users can claim a free trial at a given time.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_TIER_ACTIVE_TRIAL_USER_LIMIT_NONE_OPTION:
          "Unlimited (Default)",
        GUILD_ROLE_SUBSCRIPTION_TRIAL_RENEWAL_FOOTER:
          "Your free {trialInterval} credit will be applied until it runs out, and we'll send you a reminder email **{days, plural, =1 {1 day} other {{days} days}}** before your free period ends. Have questions? [Check out our offer FAQ]({helpdeskArticle}) or [contact our support team]({contactLink}).",
        GUILD_ROLE_SUBSCRIPTION_TRIAL_RENEWAL_FOOTER_V2:
          'By selecting "{buttonText}", you’re agreeing to Discord’s [Paid Service Terms]({paidServiceTermsArticle}). "{tierName}" is a recurring subscription. Your payment method will be charged after your trial ends and continue to be charged every {interval} unless you [cancel your subscription]({cancelSubscriptionArticle}). We’ll send a reminder email **{days, plural, =1 {1 day} other {{days} days}}** before your trial ends. Total doesn’t include any additional fees charged by your financial institution. Have questions? [Check out our offer FAQ]({helpdeskArticle}) or [contact our support team]({contactLink}).',
        GUILD_ROLE_SUBSCRIPTION_SETUP_FLAIR_PREVIEW_MESSAGE_TEXT:
          "wow this looks so cool",
        GUILD_ROLE_SUBSCRIPTION_SETUP_FLAIR_BADGE_TITLE: "Icon",
        GUILD_ROLE_SUBSCRIPTION_SETUP_FLAIR_BADGE_DESCRIPTION:
          "Upload an image under 256kb or pick a custom emoji from this server. We recommend at least 64x64 pixels. Members will see the icon for their highest role if they have multiple roles.",
        GUILD_ROLE_SUBSCRIPTION_SETUP_FLAIR_COLOR_TITLE: "Color",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT_EDIT_ARIA_LABEL: "Edit benefit",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT_CHANNEL_MODAL_TITLE:
          "Exclusive Channel",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT_CHANNEL_MODAL_WARNING:
          "Adding a channel to a subscription tier will remove access to server members who are not server subscribers.",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT_CHANNEL_SELECT_CREATE_LABEL:
          "Create a new channel",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT_CHANNEL_DESCRIPTION_PLACEHOLDER:
          "What can subscribers do in this channel?",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT_INTANGIBLE_MODAL_TITLE:
          "Additional Benefit",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT_INTANGIBLE_NAME_TITLE: "Benefit",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT_INTANGIBLE_DESCRIPTION_PLACEHOLDER:
          "What do subscribers get?",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT_EMOJI_PLACEHOLDER:
          "Type or select an emoji",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_TITLE:
          "Payment Team",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_DESCRIPTION:
          "Payments will be sent to the payment info on file for the team named **{teamName}**.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_NO_TEAM_DESCRIPTION:
          "No team selected for this server. Please select a team so we can send you payments.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_CHANGE_TEAM_CTA:
          "Change Your Payment Team",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_SELECT_TEAM_CTA:
          "Select Your Payment Team",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_MODAL_TITLE:
          "Change Payment Team",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_MODAL_SELECT_TEAM_TITLE:
          "Select Payment Team",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_MODAL_DESCRIPTION:
          "Change the team that payments for server monetization will be sent to.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_TEAM_CHANGE_WARNING_HEADING:
          "Changing your team may affect payout eligibility",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_TEAM_CHANGE_WARNING:
          "To be eligible to receive payment, you must earn a minimum balance of $100 for your first payout, and $25 for each subsequent payout. Any previous team's earnings will not count toward your minimum balance.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_MODAL_SELECT_TEAM_DESCRIPTION:
          "Select the team that payments for server subscriptions will be sent to.",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_MODAL_SELECT_TEAM_TO_TRANSFER_LABEL:
          "Select team to transfer to",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_MODAL_SELECT_TEAM_LABEL:
          "Select team",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_MODAL_MFA_LABEL:
          "Enter 2FA verification code",
        GUILD_ROLE_SUBSCRIPTION_SETTINGS_PAYMENT_TEAM_SECTION_MODAL_MFA_PLACEHOLDER:
          "MFA Code",
        CREATOR_MONETIZATION_SETTINGS_DISABLE_MONETIZATION_SECTION_TITLE:
          "Disable Monetization",
        CREATOR_MONETIZATION_SETTINGS_DISABLE_MONETIZATION_SECTION_DESCRIPTION:
          "This will disable Server Subscriptions and Server Products for **!!{guildName}!!**. There should be no remaining payouts and all subscription tiers must be deleted in order to complete this action.",
        CREATOR_MONETIZATION_SETTINGS_DISABLE_MONETIZATION_CTA:
          "Disable Monetization",
        CREATOR_MONETIZATION_SETTINGS_DISABLE_MONETIZATION_MODAL_HEADER:
          "Disable Monetization",
        CREATOR_MONETIZATION_SETTINGS_DISABLE_MONETIZATION_MODAL_DESCRIPTION:
          "Disable server subscriptions and products for **!!{guildName}!!**. To delete your payment team you will need to do so in the [Developer Portal]({url}).",
        GUILD_ROLE_SUBSCRIPTION_EMOJI_ADD_MODAL_HEADER: "Select Premium Emoji",
        GUILD_ROLE_SUBSCRIPTION_EMOJI_ADD_MODAL_DESCRIPTION:
          "Want to upload new emoji? You can do so from the [Manage Premium Emoji](transitionToManageEmoji) page.",
        GUILD_ROLE_SUBSCRIPTION_EMOJI_ADD_MODAL_SAVE_BUTTON:
          "Add {totalEmoji, plural, =1 {1 Emoji} other {{totalEmoji} Emoji}}",
        GUILD_ROLE_SUBSCRIPTION_EMOJI_DELETE_MODAL_HEADER: "Are you sure?",
        GUILD_ROLE_SUBSCRIPTION_EMOJI_DELETE_MODAL_BODY:
          "This is the last tier that offers this emoji. Removing it will delete the emoji.",
        GUILD_ROLE_SUBSCRIPTION_EMOJI_DELETE_MODAL_DELETE_BUTTON:
          "Delete Emoji",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_HEADER_TITLE: "Import Benefits",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_HEADER_SUBTITLE:
          "Duplicate the benefits or channel permissions from an existing tier or role.",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_BUTTON: "Import",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_NUM_BENEFITS:
          "{channels, plural, one {1 channel} other {# channels}} & {benefits, plural, one {1 benefit} other {# benefits}}",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_SELECT_ROLE: "Select a role",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT_IMPORT_SELECT_ROLE_EMPTY:
          "There are no roles with channel permissions to import.",
        GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_MODAL_HEADER:
          "Import Benefits - !!{tierName}!!",
        GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_FROM_ROLE_MODAL_HEADER_1:
          "Import Channel Permissions",
        GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_FROM_ROLE_MODAL_HEADER_2:
          "Import Channel Permissions from **!!{roleName}!!**",
        GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_SELECT_ALL_CHANNEL_BENEFITS:
          "Select all channels",
        GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_SELECT_ALL_INTANGIBLE_BENEFITS:
          "Select all benefits",
        GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_CONFIRM_BUTTON:
          "Add Benefits to Tier",
        GUILD_ROLE_SUBSCRIPTION_IMPORT_BENEFITS_FROM_ROLE_CONFIRM_BUTTON:
          "Add Channels",
        CREATE_CHANNEL_MODAL_CATEGORY_PLACEHOLDER: "Select a category",
        GUILD_ROLE_SUSBCRIPTION_TIER_MANAGEMENT_TITLE: "Manage Tiers",
        GUILD_ROLE_SUBSCRIPTION_TIER_MANAGEMENT_DRAFT_LABEL: "Draft",
        GUILD_ROLE_SUBSCRIPTION_TIER_MANAGEMENT_ARCHIVED_LABEL: "Archived",
        GUILD_ROLE_SUBSCRIPTION_TIER_MANAGEMENT_UNSAVED_LABEL: "Unsaved",
        GUILD_ROLE_SUBSCRIPTION_PRICE_PER_INTERVAL: "{price}/{interval}",
        GUILD_ROLE_SUBSCRIPTION_PUBLISH_TIER_DIALOG_TITLE:
          "Are you ready to publish this tier?",
        GUILD_ROLE_SUBSCRIPTION_PUBLISH_TIER_DIALOG_DESCRIPTION:
          "Any changes will be saved and the tier will immediately become visible to members of your server.",
        GUILD_ROLE_SUBSCRIPTION_PUBLISH_TIER_CTA: "Publish Tier",
        GUILD_ROLE_SUBSCRIPTION_CREATE_TIER_DETAILS_TITLE:
          "Let's create a tier",
        GUILD_ROLE_SUBSCRIPTION_CREATE_TIER_DETAILS_DESCRIPTION:
          "You’ll be able to create additional tiers later, or you can just have one! Totally up to you.",
        GUILD_ROLE_SUBSCRIPTION_CREATE_TIER_CHANNEL_BENEFITS_TITLE:
          "Pick some channels.",
        GUILD_ROLE_SUBSCRIPTION_CREATE_TIER_CHANNEL_BENEFITS_DESCRIPTION:
          "You can offer access to every channel on your server or just a few that you choose by hand.",
        GUILD_ROLE_SUBSCRIPTION_CREATE_TIER_INTANGIBLE_BENEFITS_TITLE:
          "Any other benefits?",
        GUILD_ROLE_SUBSCRIPTION_CREATE_TIER_INTANGIBLE_BENEFITS_DESCRIPTION:
          "Access to exclusive channels is just one way to reward server subscribers. You can also offer other benefits.",
        GUILD_ROLE_SUBSCRIPTION_CREATE_TIER_BENEFITS_DESCRIPTION:
          "Your heart's been aching, but you're too shy to say it",
        GUILD_ROLE_SUBSCRIPTION_CREATE_TIER_DESIGN_TITLE: "Make it look cool.",
        GUILD_ROLE_SUBSCRIPTION_CREATE_TIER_DESIGN_DESCRIPTION:
          "Give your server subscribers a way to show off their patronage to the world—or at least the server.",
        GUILD_ROLE_SUBSCRIPTION_CREATE_TIER_CONFIRMATION_TITLE: "All good?",
        GUILD_ROLE_SUBSCRIPTION_CREATE_TIER_CONFIRMATION_DESCRIPTION:
          "You’ll still have the opportunity to make changes after you tap Done.",
        GUILD_ROLE_SUBSCRIPTION_MOBILE_SUBCRIBE_CTA_TITLE:
          "A full commitment's what I'm thinking of",
        GUILD_ROLE_SUBSCRIPTION_MOBILE_SUBCRIBE_CTA_DESCRIPTION:
          "You wouldn't get this from any other guy",
        GUILD_ROLE_SUBSCRIPTION_TIER_EXCLUSIVE_CHANNEL_TITLE:
          "Exclusive Channel",
        GUILD_ROLE_SUBSCRIPTION_TIER_EXCLUSIVE_CHANNELS_SECTION_TITLE:
          "Exclusive Channels",
        GUILD_ROLE_SUBSCRIPTION_TIER_ADDITIONAL_BENEFIT_TITLE:
          "Additional Benefit",
        GUILD_ROLE_SUBSCRIPTION_TIER_ADDITIONAL_BENEFITS_SECTION_TITLE:
          "Additional Benefits",
        GUILD_ROLE_SUBSCRIPTION_TIER_EMOJI_SECTION_TITLE:
          "{count, plural, =1 {Emoji} other {{count} Emoji}}",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT: "Benefit",
        GUILD_ROLE_SUBSCRIPTION_TIER_SHOW_MORE_DESCRIPTION: "Show More",
        GUILD_ROLE_SUBSCRIPTION_TIER_SHOW_MORE_DESCRIPTION_WITH_ITEMS:
          "Show {numTruncated} More",
        GUILD_ROLE_SUBSCRIPTION_TIER_SHOW_LESS_DESCRIPTION: "Show Less",
        GUILD_ROLE_SUBSCRIPTION_LISTINGS_SCROLLABLE_NOTICE:
          "Scroll for more options!",
        GUILD_ROLE_SUBSCRIPTION_TIER_DETAIL_NAME_LABEL: "Tier Name",
        GUILD_ROLE_SUBSCRIPTION_TIER_DETAIL_NAME_PLACEHOLDER:
          "Golden Wumpus Club",
        GUILD_ROLE_SUBSCRIPTION_TIER_DETAIL_CUSTOM_IMAGE_LABEL: "Custom Image",
        GUILD_ROLE_SUBSCRIPTION_TIER_DETAIL_CUSTOM_IMAGE_DESCRIPTION:
          "We recommend an image that's at least 500px square.",
        GUILD_ROLE_SUBSCRIPTION_TIER_DETAIL_CUSTOM_IMAGE_BUTTON: "Upload Image",
        GUILD_ROLE_SUBSCRIPTION_TIER_DETAIL_CUSTOM_IMAGE_EDIT_BUTTON:
          "Edit Image",
        GUILD_ROLE_SUBSCRIPTION_TIER_DETAIL_CUSTOM_IMAGE_A11Y_LABEL:
          "Select Image",
        GUILD_ROLE_SUBSCRIPTION_TIER_DETAIL_PRICE_LABEL: "Price",
        GUILD_ROLE_SUBSCRIPTION_TIER_DETAIL_PRICE_PLACEHOLDER: "Select a price",
        GUILD_ROLE_SUBSCRIPTION_TIER_DETAIL_DESCRIPTION_LABEL: "Description",
        GUILD_ROLE_SUBSCRIPTION_TIER_DETAIL_DESCRIPTION_PLACEHOLDER:
          "Let people know why they should join this tier!",
        GUILD_ROLE_SUBSCRIPTION_SEARCH_CHANNELS_PLACEHOLDER: "Search channels",
        GUILD_ROLE_SUBSCRIPTION_TIER_DELETE_CTA: "Delete Tier",
        GUILD_ROLE_SUBSCRIPTION_TIER_ARCHIVE_CTA: "Archive Tier",
        GUILD_ROLE_SUBSCRIPTION_TIER_DELETE_CONFIRMATION_TITLE:
          "Are you sure you want to delete this tier?",
        GUILD_ROLE_SUBSCRIPTION_TIER_ARCHIVE_CONFIRMATION_TITLE:
          "Are you sure you want to archive this tier?",
        GUILD_ROLE_SUBSCRIPTION_TIER_DELETE_CONFIRMATION_SUBTITLE:
          "This cannot be undone.",
        GUILD_ROLE_SUBSCRIPTION_TIER_ARCHIVE_CONFIRMATION_SUBTITLE:
          "This cannot be undone.",
        GUILD_ROLE_SUBSCRIPTION_TIER_BENEFITS_ADD_CHANNEL_LABEL:
          "Add a channel",
        GUILD_ROLE_SUBSCRIPTION_TIER_BENEFITS_ADD_BENEFIT_LABEL:
          "Add a benefit",
        GUILD_ROLE_SUBSCRIPTION_TIER_BENEFITS_CREATE_A_CHANNEL_LABEL:
          "Create a new channel",
        GUILD_ROLE_SUBSCRIPTION_TIER_BENEFITS_REMOVE_FROM_TIER_LABEL:
          "Remove from tier",
        GUILD_ROLE_SUBSCRIPTION_TIER_BENEFITS_CHANNEL_NAME_PLACEHOLDER:
          "Select a channel",
        GUILD_ROLE_SUBSCRIPTION_TIER_BENEFITS_INTANGIBLE_NAME_PLACEHOLDER:
          "What do subscribers get?",
        GUILD_ROLE_SUBSCRIPTION_TIER_BENEFITS_EMOJI_PLACEHOLDER:
          "Select an emoji",
        GUILD_ROLE_SUBSCRIPTION_TIER_BENEFITS_INCLUDE_ALL_CHANNELS_LABEL:
          "Include all channels",
        GUILD_ROLE_SUBSCRIPTION_TIER_BENEFITS_SELECT_CHANNELS_MANUALLY_LABEL:
          "Select channels manually",
        GUILD_ROLE_SUBSCRIPTION_CHANNEL_BENEFIT_DESCRIPTION_PLACEHOLDER:
          "What can members do in this channel?",
        GUILD_ROLE_SUBSCRIPTION_INTANGIBLE_BENEFIT_DESCRIPTION_PLACEHOLDER:
          "Any additional details?",
        GUILD_ROLE_SUBSCRIPTION_EMOJI: "Emoji",
        GUILD_ROLE_SUBSCRIPTION_TIER_SUBSCRIBE: "Subscribe",
        GUILD_ROLE_SUBSCRIPTION_TIER_DESIGN_MEMBER_COLOR_LABEL: "Member Color",
        GUILD_ROLE_SUBSCRIPTION_TIER_DESIGN_MEMBER_BADGE_LABEL: "Member Badge",
        GUILD_ROLE_SUBSCRIPTION_TIER_DESIGN_MEMBER_BADGE_DESCRIPTION:
          "We recommend an image that's at least 32px square.",
        GUILD_ROLE_SUBSCRIPTION_TIER_DESIGN_MEMBER_PREVIEW_PLACEHOLDER_MESSAGE:
          "check out how cool this looks",
        GUILD_ROLE_SUBSCRIPTION_TIER_REVIEW_SUBSCRIBE_LABEL: "Subscribe",
        GUILD_ROLE_SUBSCRIPTION_TIER_REVIEW_SUBSCRIBED_LABEL: "Subscribed",
        GUILD_ROLE_SUBSCRIPTION_TIER_REVIEW_CANCELED_LABEL: "Canceled",
        GUILD_ROLE_SUBSCRIPTION_TIER_REVIEW_EXCLUSIVE_CHANNEL_HEADER:
          "{count, plural, =1 {Exclusive Channel} other {{count} Exclusive Channels}}",
        GUILD_ROLE_SUBSCRIPTION_TIER_REVIEW_INTANGIBLE_BENEFITS_HEADER:
          "{count, plural, =1 {Additional Benefit} other {Additional Benefits}}",
        GUILD_ROLE_SUBSCRIPTION_TIER_REVIEW_MEMBER_PREVIEW:
          "Member Color & Badge",
        GUILD_ROLE_SUBSCRIPTION_TIER_REVIEW_ENTIRE_SERVER_ACCESS_BENEFIT:
          "Access to the entire server",
        GUILD_ROLE_SUBSCRIPTION_PLAN_SETUP_FORMAT_TITLE:
          "Important decision time.",
        GUILD_ROLE_SUBSCRIPTION_PLAN_SETUP_FORMAT_SUBTITLE:
          "Do you want to make your entire server exclusive or just a manually selected set of channels?",
        GUILD_ROLE_SUBSCRIPTION_PLAN_SETUP_DETAILS_TITLE:
          "Fill out some basics.",
        GUILD_ROLE_SUBSCRIPTION_PLAN_SETUP_DETAILS_SUBTITLE:
          "This stuff will help you make a great first impression on people thinking about joining premium.",
        GUILD_ROLE_SUBSCRIPTION_PLAN_SETUP_COVER_PHOTO_LABEL: "Cover Photo",
        GUILD_ROLE_SUBSCRIPTION_PLAN_SETUP_COVER_PHOTO_DESCRIPTION:
          "We recommend an image that’s at least 1500px wide and 500px tall.",
        GUILD_ROLE_SUBSCRIPTION_PLAN_SETUP_DESCRIPTION_PLACEHOLDER:
          "Let the people know about your Server Subscription!",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_HEADER: "Payment Overview",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_PERIOD: "Period",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_TIERS: "Tier",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_PRICE: "Price",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_MEMBERS: "Members",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_AMOUNT: "Amount",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_AMOUNT_DISCLAIMER:
          "Total payout after deductions",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS: "Status",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PENDING: "Pending",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_SCHEDULED: "Scheduled",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PENDING_OR_SCHEDULED_WITH_DATE:
          "Scheduled for {payoutDate}",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_PAID: "Paid",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_ERROR: "Error",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_CANCELLED: "Canceled",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_DEFERRED: "Deferred",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_REJECTED: "Rejected",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_STATUS_RISK_REVIEW:
          "Under Review",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_TABLE_TIER_DELETED: "Tier Deleted",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_EDIT_PAYMENT_METHOD_LINK:
          "[Edit Payment Info]({url})",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_EDIT_PAYOUT: "Edit Payment Info",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_REVENUE: "Revenue",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_SUBSCRIBERS: "Total Members",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_NEXT_PAYMENT: "Next Payment By",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_NEXT_PAYMENT_DISCLAIMER:
          "Eligible payouts will be paid within 15 days of the end of the calendar month during which revenue was earned. For more information on payout eligibility, please see our Monetization Terms",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_TREND_DESCRIPTION:
          "{value} this month",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_METRIC_TREND_EMPTY_TEXT:
          "Check back later!",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_EARNINGS_HISTORY_HEADER:
          "Transaction History",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_EARNINGS_HISTORY_DESCRIPTION:
          "Expand pay periods to see a breakdown by tier.",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_EARNINGS_HISTORY_EMPTY:
          "Check back here for a history of your transactions once you’ve had monetization enabled on your server for a full month.",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_A11Y_TOGGLE_TRANSACTION_PERIOD:
          "Toggle transaction period details for {transactionPeriod}",
        GUILD_MONETIZATION_ENABLE_HEADER: "Enable Monetization",
        GUILD_MONETIZATION_ENABLE_NON_OWNER_WARNING:
          "Only server owners can enable monetization. You'll need to ask them to do so first before being able to access monetization settings.",
        GUILD_MONETIZATION_ENABLE_DESCRIPTION:
          "In order to enable server monetization, you must $[set up a team](onCreateTeamHook) and then select it below. Teams **must** have valid payment information. **This process cannot be completed with a pseudonym instead of your legal name or business name**.\n\nOnce enabled, you will be able to accept payment for monetization.",
        GUILD_MONETIZATION_ENABLE_SELECT_PLACEHOLDER: "Select a Team",
        GUILD_MONETIZATION_ENABLE_CREATE_TEAM: "Create Team",
        GUILD_MONETIZATION_ENABLE_CTA: "Enable",
        GUILD_MONETIZATION_ENABLE_CONFIRMATION_TITLE:
          "Monetization has been enabled.",
        GUILD_MONETIZATION_ENABLE_CONFIRMATION_SUBTITLE:
          "You can now accept payment for Server Monetization.",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_INSIGHTS_NOTICE_TEXT:
          "Want to view more detailed data? Visit [Server Subscriptions Insights]({insightsURL}).",
        GUILD_ROLE_SUBSCRIPTION_EARNINGS_INCLUDE_PREVIOUS_OWNER_NOTICE_TEXT:
          "This month's revenue includes all earnings since the last payout for your current team.",
        GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_UPLOAD_TITLE:
          "Upload Premium Emoji",
        GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_UPLOAD_DESCRIPTION:
          "Add up to {maxSlots} additional custom emoji that can only be used by subscribers. Animated emoji can be used by all subscribers even without Nitro. However, only subscribers with Nitro can use premium emoji outside of this server.",
        GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_UPLOAD_CTA:
          "Upload Premium Emoji",
        GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_EMOJI_SECTION_TITLE:
          "Premium Emoji",
        GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_ROLES_MODAL_HEADER:
          "Emoji Access",
        GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_ROLES_MODAL_DESCRIPTION:
          "Choose which tiers can use this emoji.",
        GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_ROLES_MODAL_SELECT_ALL_LABEL:
          "All Subscription Tiers",
        GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_ROLES_MODAL_NEEDS_ONE_ROLE:
          "Please select at least one role",
        GUILD_ROLE_SUBSCRIPTIONS_MANAGE_EMOJI_ROLES_MODAL_ARCHIVED_BADGE:
          "Archived",
        GUILD_ROLE_SUBSCRIPTION_EMOJI_PICKER_UPSELL_TITLE:
          "You can't use this emoji right now.",
        GUILD_ROLE_SUBSCRIPTION_EMOJI_PICKER_PURCHASE_UPSELL_DESCRIPTION:
          "Join {serverName}'s Server Subscription to get access to this emoji.",
        GUILD_ROLE_SUBSCRIPTION_EMOJI_PICKER_UPGRADE_UPSELL_DESCRIPTION:
          "Change your Server Subscription tier to use this emoji.",
        GUILD_ROLE_SUBSCRIPTION_EMOJI_PICKER_UPSELL_PURCHASE_CTA: "Subscribe",
        GUILD_ROLE_SUBSCRIPTION_EMOJI_PICKER_UPSELL_UPGRADE_CTA: "Change Tier",
        GUILD_ROLE_SUBSCRIPTION_EMOJI_SELECT_ROLE_ACTION_SHEET_TITLE:
          "Select Tiers",
        GUILD_ROLE_SUBSCRIPTION_EMOJI_SELECT_ROLE_ACTION_SHEET_SUBTITLE:
          "Select which tiers can use this emoji.",
        GUILD_ROLE_SUBSCRIPTION_EMOJI_SETTINGS_MANAGE_PREMIUM_TEXT:
          "To manage premium emoji, go to [Server Subscriptions settings](onClick).",
        GUILD_ROLE_SUBSCRIPTION_IAP_CANCEL_MODAL_TITLE:
          "You'll need to cancel your current subscription to {activeListingName}",
        GUILD_ROLE_SUBSCRIPTION_IAP_CANCEL_MODAL_DESCRIPTION:
          "Before you can change to $[{changeToListingName}](emphasisHook), you'll need to cancel your active subscription to $[{activeListingName}](emphasisHook) and wait until it ends on $[{billingEndDate}](emphasisHook). We're working on making this easier in the near future.",
        GUILD_ROLE_SUBSCRIPTION_IAP_CANCEL_MODAL_DESCRIPTION_CONTINUED:
          "You can cancel your current subscription in the $[Subscriptions](emphasisHook) section of your personal settings.",
        GUILD_ROLE_SUBSCRIPTION_IAP_CANCEL_MODAL_CTA:
          "Cancel my current subscription",
        GUILD_ROLE_SUBSCRIPTION_IAP_SWITCH_TIERS_BUTTON_LABEL:
          "You'll need to cancel your current subscription to $[{activeListingName}](emphasisHook) and wait until it ends on $[{billingEndDate}](emphasisHook) to switch tiers.",
        GUILD_ROLE_SUBSCRIPTION_IAP_SWITCH_TIERS_BUTTON_CTA:
          "How to change tiers",
        GUILD_ROLE_SUBSCRIPTION_IAP_COMPLETE_ONBOARDING_DIALOG_BODY:
          "Please complete onboarding before subscribing.",
        GUILD_ROLE_SUBSCRIPTION_IAP_COMPLETE_ONBOARDING_BUTTON:
          "Complete onboarding",
        GUILD_ROLE_SUBSCRIPTION_IAP_UPSELL_TITLE:
          "You can now purchase Server Subscriptions on Mobile!",
        GUILD_ROLE_SUBSCRIPTION_IAP_UPSELL_BODY:
          "Good news — you can now start supporting your favorite server owners that have subscription offerings right here on your mobile device.\n \nAll it takes is a few clicks to unlock exclusive channels to hang out in, subscriber only benefits, and anything else the server owner has cooked up for you!\n \nCheck out this server's subscription offerings and start new adventures with your fellow subs!",
        CREATOR_MONETIZATION_ACCEPT_NEW_TERMS_MODAL_TITLE:
          "New Monetization Terms",
        CREATOR_MONETIZATION_ACCEPT_NEW_TERMS_TITLE:
          "We're making changes to our Monetization terms!",
        CREATOR_MONETIZATION_ACCEPT_NEW_TERMS_BODY:
          "We've recently updated our [Monetization Terms]({termsURL}). Please read the updated documents in full, as they apply to your use of Discord. Here's a quick summary of what's changing:",
        CREATOR_MONETIZATION_ACCEPT_NEW_TERMS_BODY_POINT_1_HEADER:
          "iOS In-App Purchases for Server Subscriptions",
        CREATOR_MONETIZATION_ACCEPT_NEW_TERMS_BODY_POINT_1_BODY:
          "Effective today, you will be able to sell Server Subscriptions directly through our iOS app. We've updated our terms to address specific app store requirements, including a new approach to mobile tier pricing to address the costs associated with in-app purchases.",
        CREATOR_MONETIZATION_ACCEPT_NEW_TERMS_BODY_POINT_2_HEADER:
          "Changes to Creator Fees",
        CREATOR_MONETIZATION_ACCEPT_NEW_TERMS_BODY_POINT_2_BODY:
          "Effective May 1, 2023, all sales of Server Subscriptions on desktop and mobile will be subject to an updated fee structure. This includes a new fee category to cover payment processing costs. For more information on these specific fees, please review Schedule 1 of the Monetization Terms.",
        CREATOR_MONETIZATION_ACCEPT_NEW_TERMS_ACCEPT_CTA: "I accept",
        CREATOR_MONETIZATION_ACCEPT_NEW_TERMS_ACCEPT_DISCLAIMER:
          'By clicking "I accept", you agree to the [Monetization Terms]({termsURL}).',
        CREATOR_MONETIZATION_ACCEPT_NEW_TERMS_REMIND_ME_LATER:
          "Remind me later",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_PAGE_GROUP_CTA:
          "Join **{serverName}'s Server Subscription** to unlock exclusive benefits and support the server",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_UPSELL_PAGE_CTA:
          "Join **{serverName}'s Server Subscription** to unlock #{channelName}",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_PAGE_GROUP_CTA_HOOK:
          "Join $[{serverName}'s Server Subscription](serverNameHook) to unlock exclusive benefits and support the server",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_PAGE_UNAVAILABLE_CTA_HOOK:
          "Sorry, $[{serverName}'s Server Subscription](serverNameHook) isn't available to purchase on mobile",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_PAGE_UNAVAILABLE_DESCRIPTION:
          "We’re working on a solution. In the meantime, visit this server on desktop or web for more info.",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_TITLE:
          "Welcome to **{serverName}'s Server Subscription**",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_SUBTITLE:
          "You now have access to all **{tier}** tier benefits.",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_CHANNEL_PREVIEW:
          "A few of your new exclusive channels",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_PREMIUM_EMOJI_PREVIEW_TITLE:
          "...and a new benefit!",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_PREMIUM_EMOJI_BENEFIT_TEXT:
          "Premium Emoji",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_PREMIUM_EMOJI_BENEFIT_DESCRIPTION:
          "Unlocked {count} new member-only emoji.",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_DONE_BUTTON:
          "All right!",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_LITE_TITLE:
          "**Welcome to {serverName} ({tierName})!**",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_LITE_SUBTITLE:
          "Congrats! You now have access to {benefits}.",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_LITE_OPEN_DISCORD_BUTTON:
          "Open Discord",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_LITE_DONE_BUTTON:
          "Done",
        GUILD_ROLE_SUBSCRIPTION_BENEFIT_VISUAL_FLAIR: "visual flair",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_LITE_EXCLUSIVE_CHANNELS_SUBTITLE:
          "{channelCount, plural, one {1 exclusive channel} other {# exclusive channels}}",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_LITE_BENEFITS_SUBTITLE:
          "{benefitCount, plural, one {1 benefit} other {# benefits}}",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_MODAL_CONFIRMATION_LITE_EMOJI_SUBTITLE:
          "{emojiCount} emoji",
        GUILD_ROLE_SUBSCRIPTION_USER_SUBSCRIPTION_PAST_DUE_WARNING:
          "Your current subscription is past due. Please update your payment method.",
        GUILD_ROLE_SUBSCRIPTION_USER_SUBSCRIPTION_PAST_DUE_CTA:
          "Manage Subscription",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_ERROR_PAGE_GUILD_NOT_ELIGIBLE_TITLE:
          "Oops. Mobile payment isn't available for this server.",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_ERROR_PAGE_NOT_GUILD_MEMBER_TITLE:
          "Oops. Server Subscriptions are only available to members of this server.",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_ERROR_PAGE_GUILD_NOT_ELIGIBLE_SUBTITLE:
          "Check with an admin for more info!",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_ERROR_PAGE_NOT_GUILD_MEMBER_SUBTITLE:
          "Check with an admin for more info or join the server to subscribe!",
        GUILD_ROLE_SUBSCRIPTION_AMOUNT_PER_PERIOD: "per {period}",
        GUILD_ROLE_SUBSCRIPTION_TRIAL_PERIOD:
          "{trialPeriodDuration} Free Trial",
        GUILD_ROLE_SUBSCRIPTION_TRIAL_DISCLAIMER:
          "Available to {activeTrialUserLimit, plural, =0 {server members} one {up to 1 server member} other {up to {activeTrialUserLimit} server members}} who have not yet received a free trial. Ask the server owner if Additional Benefits are included in this offer.",
        GUILD_ROLE_SUBSCRIPTION_INELIGIBLE_TRIAL_DISCLAIMER:
          "You are not eligible for a free trial of this tier.",
        GUILD_ROLE_SUBSCRIPTIONS_ACTION_MENU_LABEL:
          "Server Subscriptions Actions",
        GUILD_ROLE_SUBSCRIPTIONS_EDIT_SETTINGS: "Edit Subscription Settings",
        GUILD_ROLE_SUBSCRIPTIONS_DELETE_CHANNEL_BODY:
          "Are you sure you want to delete **!!{channelName}!!**? You have **{numGuildRoleSubscriptionMembers, plural, =1 {# subscriber} other {# subscribers}}** that will lose access to this channel. This cannot be undone.",
        GUILD_SETTINGS_PICKER_DEFAULT_TITLE: "Select a Server",
        GUILD_SETTINGS_PICKER_DEFAULT_DESCRIPTION:
          "Select a Server whose settings you have access to.",
        GUILD_SETTINGS_PICKER_DEFAULT_CREATE_DESCRIPTION:
          "No server yet? Let's do something about that!",
        GUILD_ROLE_SUBSCRIPTIONS_ONBOARDING_DESCRIPTION:
          "Welcome to Server Subscriptions! To get started, pick a Server you own that you want to monetize.",
        GUILD_ROLE_SUBSCRIPTIONS_FINISH_SETTING_UP_DESCRIPTION:
          "Pick a server to finish setting up server subscription!",
        GUILD_ROLE_SUBSCRIPTIONS_USER_SUBSCRIPTIONS_DESCRIPTION:
          "Paid server memberships are billed separately. They may have different renewal dates and payment methods.",
        GUILD_ROLE_SUBSCRIPTIONS_MANAGE_SUBSCRIPTIONS_BUTTON:
          "Manage Memberships",
        GUILD_ROLE_SUBSCRIPTIONS_MANAGE_SUBSCRIPTIONS_PAGE_BACK_BUTTON_CTA:
          "Your Subscriptions",
        GUILD_ROLE_SUBSCRIPTIONS_ACTIVE_USER_SUBSCRIPTIONS_DESCRIPTION:
          "You have **{numSubscriptions} active {numSubscriptions, plural, =1 {subscription} other {subscriptions}}**",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_PAGE_DESCRIPTION:
          "Manage paid memberships from any of your servers.",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_INFO_NEXT_RENEWAL: "Next renewal",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_INFO_MEMBERSHIP_ENDS: "Membership ends",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_INFO_CANNOT_RESUBSCRIBE_TO_TRIAL:
          "Cannot re-subscribe to a trial.",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_INFO_PRICE: "Monthly Cost",
        GUILD_ROLE_SUBSCRIPTION_MANAGE_SUBSCRIPTION_PAGE_TRIAL_PRICE_INFO:
          "You will not be billed until your free trial ends.",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_INFO_MEMBER_SINCE: "Member since",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_PAYMENT_METHOD_LABEL: "Payment Method",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_MANAGE_OPTIONS_LABEL:
          "Manage Subscription",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_MANAGE_OPTIONS_CHANGE_TIER:
          "Select a different tier",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_MANAGE_OPTIONS_RESTART_SUBSCRIPTION:
          "Restart my membership",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_MANAGE_OPTIONS_CANCEL:
          "Cancel my membership",
        GUILD_ROLE_CANCEL_SUBSCRIPTION_MODAL_CANCEL_CTA: "Cancel Membership",
        GUILD_ROLE_CANCEL_SUBSCRIPTION_MODAL_NEVERMIND_CTA: "Nevermind",
        GUILD_ROLE_CANCEL_SUBSCRIPTION_MODAL_TITLE:
          "Are you sure you want to cancel?",
        GUILD_ROLE_CANCEL_WHEN_YOU_LOSE:
          "On **{subscriptionEndDate}**, you'll lose access to:",
        GUILD_ROLE_CANCEL_WHAT_YOU_LOSE:
          "your role color\n{numEmojis} premium emoji\n{numChannels} exclusive channels\n{numIntangibles} benefits",
        GUILD_ROLE_CANCEL_ARE_YOU_SURE: "Are you sure you want to cancel?",
        GUILD_ROLE_CANCEL_YOURE_GIVING_UP: "YOU'RE GIVING UP...",
        GUILD_ROLE_CANCEL_NAMED_SUBSCRIPTION_MODAL_TITLE:
          "Are you sure you want to cancel your subscription in {guildName}?",
        GUILD_ROLE_CANCEL_SUBSCRIPTION_CONFIRMATION:
          "You can resubscribe any time before {endDate}.",
        GUILD_ROLE_CANCEL_SUBSCRIPTION_MODAL_CANCEL_SUBSCRIPTION_CTA:
          "Cancel Subscription",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_CANCELLED: "Canceled",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_PAST_DUE: "Payment Due",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_PAST_DUE_MOBILE:
          "Unable To Process Payment",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_UPDATE_PAYMENT_METHOD:
          "Update Payment Method",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_CHANGE_PAYMENT_ONLY_ON_DESKTOP:
          "This subscription was purchased on desktop, please change your payment method there.",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_PAST_DUE_DESCRIPTION:
          "Please update your payment method to avoid losing your subscription.",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_IOS_PLATFORM: "Managed By iOS",
        GUILD_ROLE_MANAGE_SUBSCRIPTION_IOS_PLATFORM_TOOLTIP:
          "Subscriptions purchased on iOS must be managed there",
        GUILD_ROLE_CANCEL_SUBSCRIPTION_MODAL_DESCRIPTION:
          "You will lose access to {numChannels} exclusive {numChannels, plural, =1 {channel} other {channels}} and {numAdditionalBenefits} additional {numAdditionalBenefits, plural, =1 {benefit} other {benefits}} on {subscriptionEndDate}.",
        GUILD_ROLE_CANCEL_SUBSCRIPTION_DELETE_MUTATION_DESCRIPTION:
          "Your membership will be changed from **{currentListing}** to **{nextListing}** on **{changeDate}**.",
        GUILD_ROLE_CANCEL_SUBSCRIPTION_DELETE_MUTATION_CTA: "Undo Change",
        GUILD_ROLE_SUBSCRIPTION_HAS_PENDING_MUTATION_TO_CURRENT_LISTING:
          "Your membership will be changed to this tier on {changeDate}.",
        GUILD_ROLE_SUBSCRIPTION_HAS_PENDING_MUTATION:
          "Cancel your pending membership change to enable this tier.",
        GUILD_ROLE_SUBSCRIPTION_CHANGE_TIER_DISABLED_IN_TRIAL:
          "You cannot change tiers during your trial",
        GUILD_ROLE_SUBSCRIPTION_CHANGE_TIER_DISABLED_IF_IAP:
          "Your current subscription was purchase on mobile please update it using your mobile app.",
        GUILD_ROLE_SUBSCRIPTION_SERVER_NAME_UNAVAILABLE:
          "Server Name Unavailable",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_CARD_SHOW_ALL_PERKS:
          "Show all benefits",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_PAGE_TITLE: "{serverName} Premium",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_PAGE_DESCRIPTION_SEE_MORE: "See more",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_PAGE_DESCRIPTION_SEE_LESS: "See less",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_PAGE_PARTNER_SERVER_LABEL:
          "Partner server",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_PAGE_WATCH_TRAILER:
          "Watch the trailer",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_PAGE_CHOOSE_SUBSCRIPTION_FOR_GATED_CHANNEL_CTA:
          "Subscribe to unlock $[](unlockHook)",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_PAGE_CHOOSE_SUBSCRIPTION_CTA:
          "Choose a subscription to unlock more",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_CARD_SHOW_ALL_PERKS:
          "Show all benefits",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_LEGAL_DISCLAIMER:
          'By clicking "Subscribe", you agree to the [Paid Services Terms]({paidURL}) and [Terms of Service]({termsURL}). This is a recurring subscription, we\'ll charge your account today and every month until you cancel.',
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_CARD_UNLOCK: "what you'll unlock",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_CARD_CHANNEL_BENEFIT_TITLE:
          "Exclusive {numChannels, plural, =1 {Channel} other {Channels}}",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_CARD_INTANGIBLE_BENEFIT_TITLE:
          "{numBenefits, plural, =1 {benefit} other {benefits}}",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_CARD_EMOJI_BENEFIT_TITLE:
          "Premium emoji",
        GUILD_ROLE_SUBSCRIPTION_CARD_ROLE_AND_ICON_HEADER: "Your role and icon",
        GUILD_ROLE_SUBSCRIPTION_CARD_EMOJI_HEADER: "Your {numEmojis} emoji",
        GUILD_ROLE_SUBSCRIPTION_CARD_CHANNELS_HEADER:
          "Your {numChannels} exclusive {numChannels, plural, =1 {channel} other {channels}}",
        GUILD_ROLE_SUBSCRIPTION_CARD_INTANGIBLES_HEADER:
          "Your {numIntangibles} {numIntangibles, plural, =1 {benefit} other {benefits}}",
        GUILD_ROLE_SUBSCRIPTION_RESTARTED_TITLE:
          "Your membership has been restarted!",
        GUILD_ROLE_SUBSCRIPTION_RESTARTED_DESCRIPTION:
          "Your payment method will be charged at the beginning of the next billing period.",
        USER_SETTINGS_GUILD_ROLE_SUBSCRIPTION_CANCEL_TITLE:
          "Cancel Subscription",
        GUILD_ROLE_SUBSCRIPTIONS_REQUIRE_APPROVED_MEMBER:
          "Subscription tiers are available to approved server members.",
        GUILD_ROLE_SUBSCRIPTION_UPSELL_HEADER:
          "Introducing Server Subscriptions!",
        GUILD_ROLE_SUBSCRIPTION_UPSELL_BODY:
          "Let server members support you and the community by paying for exclusive access and visual flair.",
        GUILD_ROLE_SUBSCRIPTIONS_UPSELL_CTA: "Check it out",
        GUILD_ROLE_SUBSCRIPTION_UPSELL_IMG_ALT:
          "A hand holding a membership badge, surrounded by sparkles",
        GUILD_ROLE_SUBSCRIPTION_PROMO_PAGE_UPSELL_HEADER:
          "NEW - Promo Pages are here!",
        GUILD_ROLE_SUBSCRIPTION_PROMO_PAGE_UPSELL_BODY:
          "Quickly customize and share a webpage to promote your paid tiers outside of Discord—and grow your memberships!",
        CREATOR_MONETIZATION_APPLIED_AUDIT_LOG_TITLE:
          "$[**!!{user}!!**](userHook) applied for monetization",
        CREATOR_MONETIZATION_TERMS_ACCEPTED_AUDIT_LOG_TITLE:
          "$[**!!{user}!!**](userHook) accepted terms for monetization",
        CREATOR_MONETIZATION_DISABLED_NOTICE_TITLE:
          "Server Subscriptions are going away",
        CREATOR_MONETIZATION_DISABLED_NOTICE_DESCRIPTION:
          "This server is no longer monetizating. Your subscription will not renew. Please talk to the Server owner for more information.",
        CREATOR_MONETIZATION_NOTICE_ILLO_A11Y_LABEL:
          "A hand holding a membership badge",
        VIEW_CREATOR_MONETIZATION_ANALYTICS:
          "View Server Subscription Insights",
        ROLE_PERMISSIONS_VIEW_CREATOR_MONETIZATION_ANALYTICS_DESCRIPTION:
          "Allows members to view Server Subscription Insights, which shows data on revenue, subscribers, and free trials.",
        SYSTEM_MESSAGE_ROLE_SUBSCRIPTION_JOIN:
          "$[!!{username}!!](usernameHook) joined **{tierName}** as a subscriber of [{guildName}](handleGuildNameClick)!",
        SYSTEM_MESSAGE_ROLE_SUBSCRIPTION_JOIN_WITH_DURATION:
          "$[!!{username}!!](usernameHook) joined **{tierName}** and has been a subscriber of [{guildName}](handleGuildNameClick) for {months, plural, =1 {# month} other {# months}}!",
        SYSTEM_MESSAGE_ROLE_SUBSCRIPTION_RENEW:
          "$[!!{username}!!](usernameHook) renewed **{tierName}** in their [{guildName}](handleGuildNameClick) membership!",
        SYSTEM_MESSAGE_ROLE_SUBSCRIPTION_RENEW_WITH_DURATION:
          "$[!!{username}!!](usernameHook) renewed **{tierName}** and has been a subscriber of [{guildName}](handleGuildNameClick) for {months, plural, =1 {# month} other {# months}}!",
        ROLE_SUBSCRIPTION_JOIN_CTA_LABEL1: "Welcome them aboard!",
        ROLE_SUBSCRIPTION_JOIN_CTA_LABEL2: "Wave to say hi!",
        ROLE_SUBSCRIPTION_RENEW_CTA_LABEL1: "Say congrats!",
        ROLE_SUBSCRIPTION_RENEW_CTA_LABEL2: "Give them a high five!",
        SYSTEM_MESSAGE_ROLE_SUBSCRIPTION_JOIN_MOBILE:
          "[!!{username}!!](usernameOnClick) joined **{tierName}** as a subscriber of [{guildName}](roleSubscriptionOnClick)!",
        SYSTEM_MESSAGE_ROLE_SUBSCRIPTION_JOIN_WITH_DURATION_MOBILE:
          "[!!{username}!!](usernameOnClick) joined **{tierName}** and has been a subscriber of [{guildName}](roleSubscriptionOnClick) for {months, plural, =1 {# month} other {# months}}!",
        SYSTEM_MESSAGE_ROLE_SUBSCRIPTION_RENEW_MOBILE:
          "[!!{username}!!](usernameOnClick) renewed **{tierName}** in their [{guildName}](roleSubscriptionOnClick) subscription!",
        SYSTEM_MESSAGE_ROLE_SUBSCRIPTION_RENEW_WITH_DURATION_MOBILE:
          "[!!{username}!!](usernameOnClick) renewed **{tierName}** and has been a subscriber of [{guildName}](roleSubscriptionOnClick) for {months, plural, =1 {# month} other {# months}}!",
        ROLE_SUBSCRIPTION_WELCOME_CARD_TEXT:
          "Welcome,\n$[!!{username}!!](usernameHook)",
        ROLE_SUBSCRIPTION_WELCOME_CARD_ARIA_LABEL:
          'A special access badge containing {username}\'s avatar. Next to it reads, "Welcome, {username}!"',
        ROLE_SUBSCRIPTION_WELCOME_LABEL: "Welcome",
        ROLE_SUBSCRIPTION_EMOJI_POPOUT_SUBSCRIBED_DESCRIPTION:
          "This is a premium emoji. Type its name in the chat bar to use it.",
        ROLE_SUBSCRIPTION_EMOJI_POPOUT_PURCHASE_UPSELL_DESCRIPTION:
          "Get Server Subscription to use this emoji.",
        ROLE_SUBSCRIPTION_EMOJI_POPOUT_UPGRADE_UPSELL_DESCRIPTION:
          "Change your Server Subscription tier to use this emoji.",
        ROLE_SUBSCRIPTION_EMOJI_POPOUT_PURCHASE_UPSELL_BUTTON: "Subscribe",
        ROLE_SUBSCRIPTION_EMOJI_POPOUT_PURCHASE_UNAVAILABLE_DESCRIPTION:
          "This emoji is unavailable.",
        ROLE_SUBSCRIPTION_EMOJI_POPOUT_UPGRADE_UPSELL_BUTTON: "Change Tier",
        ROLE_ICON_POPOUT_DESCRIPTION_ROLE_SUBSCRIPTIONS:
          "Custom Role Icon for {name}. This feature is a part of Server Subscriptions.",
        CREATOR_MONETIZATION_ONBOARDING_V2_UPSELL_TITLE:
          "Earn money from your Discord community!",
        CREATOR_MONETIZATION_ONBOARDING_V2_UPSELL_DESCRIPTION:
          "Server Subscriptions lets you monetize your audience by offering exclusive benefits.",
        CREATOR_MONETIZATION_ONBOARDING_V2_UPSELL_IMG_ALT:
          "A visual overview and examples of Server Subscriptions.",
        CREATOR_MONETIZATION_NEW_OWNER_ONBOARDING_MODAL_TITLE:
          "Finalize the onboarding details to start earning money",
        CREATOR_MONETIZATION_NEW_OWNER_ONBOARDING_MODAL_TITLE_ACCEPT_TERM_ONLY:
          "Agree to our terms to start earning money",
        CREATOR_MONETIZATION_NEW_OWNER_ONBOARDING_MODAL_NO_TEAM_BODY:
          "In order to enable server monetization, you must set up a Team and then select it below. Teams must have valid payment information. Make sure you use your legal personal or business name to complete this process — no fake names.\n\nOnce enabled, you’ll be able to accept payment for Server Subscriptions.",
        CREATOR_MONETIZATION_NEW_OWNER_ONBOARDING_MODAL_CHOOSE_TEAM_BODY:
          "Teams are essentially what allow you to get paid here on Discord. It looks like you have a least one set up — select one below.",
        CREATOR_MONETIZATION_NEW_OWNER_ONBOARDING_MODAL_SETUP_TEAM_CTA:
          "Set up a Team",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MODAL_SELECT_TEMPLATE_BUTTON:
          "Select Template",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MODAL_HEADER:
          "Choose a tier template to start from",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MODAL_BODY:
          "Turn members into subscribers quick — just pick out a tier template with that feels close to what you might want to offer to you server members. You can edit the template's details later.",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MODAL_CREATOR_PORTAL_LINK:
          "Learn more about what you can offer to members in the [Creator Portal]({creatorPortalUrl}).",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MODAL_CREATE_FROM_SCRATCH_PROMPT:
          "Not feeling any of these templates? Feel free to start from an empty canvas!",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MODAL_CREATE_FROM_SCRATCH_BUTTON:
          "Create tier from scratch",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MODAL_PERKS_HEADER:
          "Benefits you could offer",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MODAL_EXCLUSIVE_CHANNELS_HEADER:
          "Exclusive Channels",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MODAL_EXCLUSIVE_BENEFITS_HEADER:
          "Exclusive Benefits",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MODAL_PRICE_RESELECTION_HEADER:
          "Choose a different price for your new {tierName} tier",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MODAL_PRICE_RESELECTION_BODY:
          "You can’t have more than one tier listed at {price}/mo. Here are some more options:",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MODAL_PRICE_RESELECTION_GO_BACK:
          "Back to templates",
        GUILD_ROLE_SUBSCRIPTION_TEMPLATE_PREVIEW_CHANNEL_UPSELL_HEADER:
          "This channel doesn’t actually exist yet — you gotta publish!",
        GUILD_ROLE_SUBSCRIPTION_TEMPLATE_PREVIEW_CHANNEL_UPSELL_BODY:
          "Looks like this channel is part of the tier you haven’t published yet. Until you publish that tier, your member can’t see it and you can’t sell it to them!",
        GUILD_ROLE_SUBSCRIPTION_TEMPLATE_PREVIEW_CHANNEL_UPSELL_BUTTON:
          "Go publish unsaved tiers",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_VIEW_TITLE:
          "Go faster with templates",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_VIEW_DESCRIPTION:
          "Choose any of the 1-tier templates below to make life easier. You can edit the template’s details later.",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MOBILE_PERKS_DESCRIPTION:
          "We’ll create the everything for you, but ultimately, it’s on you to choose what you want to offer subs and follow through for your supporters!",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MOBILE_START_FROM_SCRATCH:
          "Start from scratch",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MOBILE_ROLE_ICON:
          "Subscriber role icon",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MOBILE_CHANNELS:
          "Sub only channels",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MOBILE_BENEFITS:
          "Sub only benefits",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MOBILE_TEMPLATE_SELECTED_HEADER:
          "A new tier made just like that! Now, make your final tweaks and save",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MOBILE_TEMPLATE_SELECTED_DESCRIPTION:
          "You’re so close to monetizing with this tier! Make sure to make any edits to the benefits subs will get and save the tier.",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MOBILE_TEMPLATE_SELECTED_CLOSE:
          "Got it",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_MOBILE_VIEW_ENTIRE_TEMPLATE:
          "View entire template",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_DEEPLINK_MODAL_DESCRIPTION:
          "To get started, pick a server you own that you want to monetize. After that, you can start putting together some tiers to offer to members.",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_UPSELL_TITLE:
          "Launch subscriptions in seconds",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_UPSELL_BODY:
          "Choose from four NEW Tier Templates that make monetizing your server as easy as copy/paste",
        GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATE_UPSELL_CTA: "Use a template",
        GUILD_PRODUCTS_TITLE: "Server Products",
        GUILD_PRODUCTS_SETTINGS_DESCRIPTION:
          "Create new digital products to sell in your server, including downloadable files, Premium Roles, and more.\n\nCheck out [Server Products support article]({serverProductsSupportLink}) and our [Monetization Policy]({monetizationPolicyLink}) to learn more.",
        GUILD_PRODUCTS_CREATE_PRODUCT_BUTTON: "Create New Product",
        GUILD_PRODUCTS_BASIC_INFO_SECTION: "Basic Info",
        GUILD_PRODUCT_SETUP_INFO_DESCRIPTION_PLACEHOLDER:
          "Let your community know what you're selling and why they should purchase your products.",
        GUILD_PRODUCTS_LISTINGS_SECTION: "Your Products",
        GUILD_PRODUCTS_YOUR_PRODUCTS_HEADER: "Your Server Products",
        GUILD_PRODUCTS_NO_PRODUCTS_HEADER: "You have no server products yet",
        GUILD_PRODUCTS_NO_PRODUCTS_DESCRIPTION:
          "You can’t sell what you don’t have! Create a product to get started.",
        GUILD_PRODUCT_EDIT_ARIA_LABEL: "Edit {productName}",
        GUILD_PRODUCT_STATUS_BADGE_PUBLISHED: "Published",
        GUILD_PRODUCT_STATUS_BADGE_DRAFT: "In Progress",
        GUILD_PRODUCTS_ACTION_MENU_BUTTON_ARIA_LABEL:
          "Open action menu for {productName}",
        GUILD_PRODUCTS_ACTION_MENU_LABEL: "Server Product Actions",
        GUILD_PRODUCT_EDIT: "Edit Product",
        GUILD_PRODUCT_COPY_LINK: "Copy Product Link",
        GUILD_PRODUCT_TEST_DOWNLOAD: "Test Download",
        GUILD_PRODUCT_UNPUBLISH: "Unpublish Product",
        GUILD_PRODUCT_DELETE: "Delete Product",
        GUILD_PRODUCTS_DELETE_CONFIRMATION_HEADER: "Delete product?",
        GUILD_PRODUCTS_DELETE_CONFIRMATION_BODY:
          "Are you sure you want to delete **!!{productName}!!**? This action cannot be undone.",
        GUILD_PRODUCTS_DELETE_CONFIRMATION_BODY_ROLE_WARNING:
          "The role **!!{roleName}!!** will become unlinked from this product, and you'll be able to manage or delete it in Role Settings.",
        GUILD_PRODUCTS_DELETE_CONFIRMATION_BODY_ROLE_WARNING_HEADER:
          "This product has a role",
        GUILD_PRODUCTS_DELETE_CONFIRMATION_BUTTON: "Delete Product",
        GUILD_PRODUCTS_DELETE_ERROR_TITLE: "Error Deleting Product",
        GUILD_PRODUCTS_DELETE_ERROR_TEXT:
          "An internal server error has occurred.",
        GUILD_PRODUCTS_PAYMENT_SECTION: "Payment",
        GUILD_PRODUCTS_PAYMENT_HEADER: "Payment Overview",
        GUILD_PRODUCTS_BASIC_INFO_SYNC_DISCLAIMER:
          "Server Products and Server Subscriptions share the same description and cover photo. Changes here will apply to Server Subscriptions and vice versa.",
        GUILD_PRODUCT_EDIT_MODAL_HEADING: "Wrap up the details",
        GUILD_PRODUCT_EDIT_MODAL_DESCRIPTION:
          "Give us the details of your product, bring it to life, and start earning from it.",
        GUILD_PRODUCT_EDIT_MODAL_NAME_LABEL: "Title",
        GUILD_PRODUCT_EDIT_MODAL_NAME_PLACEHOLDER: "Enter your product title",
        GUILD_PRODUCT_EDIT_MODAL_DESCRIPTION_LABEL: "Description",
        GUILD_PRODUCT_EDIT_MODAL_DESCRIPTION_PLACEHOLDER:
          "Enter your product description",
        GUILD_PRODUCT_EDIT_MODAL_PRICE_LABEL: "Price",
        GUILD_PRODUCT_EDIT_MODAL_PRICE_PLACEHOLDER: "Enter a price",
        GUILD_PRODUCT_EDIT_MODAL_THUMBNAIL_LABEL: "Thumbnail",
        GUILD_PRODUCT_EDIT_MODAL_THUMBNAIL_DESCRIPTION:
          "Select a thumbnail for your product to attract purchasers. Feel free to upload your own. We recommend an image that's at least 1024px by 576px.",
        GUILD_PRODUCT_EDIT_MODAL_THUMBNAIL_RADIO_GROUP_ARIA_LABEL:
          "Select a product thumbnail",
        GUILD_PRODUCT_ERROR_EMPTY_ROLE_NAME:
          "A role name must be provided if you want to attach one",
        GUILD_PRODUCT_ERROR_MISSING_DRAFT_REQUIREMENTS:
          "You must at least provide a name and price",
        GUILD_PRODUCT_ERROR_MISSING_PUBLISH_REQUIREMENTS:
          "You may not publish without a description and at least one benefit",
        GUILD_PRODUCT_ERROR_NO_ARCHIVES: "Archive files are not supported",
        GUILD_PRODUCT_ERROR_OTHER_CODE:
          "Oops, something went wrong! Error code: {code}",
        GUILD_PRODUCT_A11Y_UPLOAD_FAILED: "A file failed to upload: {reason}",
        GUILD_PRODUCT_A11Y_NAMED_UPLOAD_FAILED:
          "{filename} failed to upload: {reason}",
        GUILD_PRODUCT_A11Y_TOO_MANY_ATTACHMENTS:
          "You may only attach {maxAttachmentsCount} files",
        GUILD_PRODUCT_EDIT_MODAL_WARNING_UNSAVED_CHANGES_TITLE:
          "You have unsaved changes",
        GUILD_PRODUCT_EDIT_MODAL_WARNING_UNSAVED_CHANGES_BODY:
          "Are you sure you want to exit? You have unsaved changes to this product that may be lost if you leave now.",
        GUILD_PRODUCT_EDIT_MODAL_WARNING_UNSAVED_CHANGES_CTA_EXIT: "Exit",
        GUILD_PRODUCT_EDIT_MODAL_WARNING_UNSAVED_CHANGES_BACK_TO_EDITING:
          "Back to editing",
        GUILD_PRODUCT_TOO_MANY_PUBLISHED_PRODUCT_ERROR_TITLE:
          "Max product limit reached",
        GUILD_PRODUCT_TOO_MANY_PUBLISHED_PRODUCT_ERROR_BODY:
          "You've already reached the maximum number (10) of products that can be published and available to members. Un-publish or delete a previously created public product to create space for this one.\n\nUntil then, $[we've already saved this listing as a draft for you](highlightHook).",
        GUILD_PRODUCT_TWO_FA_NOT_ENABLED_ERROR_TITLE: "2FA not enabled",
        GUILD_PRODUCT_TWO_FA_NOT_ENABLED_ERROR_BODY:
          "You’ll need to set up and enabled Two-Factor Authentication to publish any Server Product. Head over to the $[My Account](highlightHook) section of your User Settings to get that sorted out before sharing this product with your members.\n\nBe sure to save any changes before exiting!",
        GUILD_PRODUCT_MISSING_BENEFITS_ERROR_TITLE: "What are you selling?",
        GUILD_PRODUCT_MISSING_BENEFITS_ERROR_BODY:
          "You need to at least add a Role or a Downloadable before you can publish this product. Just be sure to $[toggle on one or both](highlightHook) of the available benefit types in the footer of the product composer.",
        GUILD_PRODUCT_TERMS_NOT_ACCEPTED_ERROR_TITLE: "Terms not accepted",
        GUILD_PRODUCT_TERMS_NOT_ACCEPTED_ERROR_BODY:
          "You haven’t accepted monetization terms yet, so you aren’t able to publish or earn from any Server Products currently. Once you’ve accepted terms, you’ll be good to go.",
        GUILD_PRODUCT_GENERIC_ERROR_TITLE: "Error while publishing the product",
        CREATOR_MONETIZATION_PAYMENT_TEAM_REQUIRED_TITLE:
          "Payment team required",
        CREATOR_MONETIZATION_PAYMENT_TEAM_REQUIRED_BODY:
          "You must set up a payment team before you can publish. To do that, head over to the $[Payment](highlightHook) tab!",
        CREATOR_MONETIZATION_PAYMENT_ACCOUNT_VERIFICATION_REQUIRED_TITLE:
          "Verified payment account required",
        CREATOR_MONETIZATION_PAYMENT_ACCOUNT_VERIFICATION_REQUIRED_BODY:
          "You must set up and complete verification of your payment account before you can publish.\n\nHead over to the $[Payment](highlightHook) tab and click $[Edit Payment Info](highlightHook) to get started.",
        CREATOR_MONETIZATION_PAYMENT_ACCOUNT_VERIFICATION_REQUIRED_BODY_WITH_LINK:
          "You must set up and complete verification of your payment account before you can publish.\n\n[Click here]({url}) to get started, or head over to the $[Payment](highlightHook) tab at any time and click $[Edit Payment Info](highlightHook).",
        CREATOR_MONETIZATION_RESTRICTED_GUILD_CANNOT_EDIT_PRODUCT_TITLE:
          "Cannot edit the product",
        CREATOR_MONETIZATION_RESTRICTED_GUILD_CANNOT_EDIT_PRODUCT_BODY:
          "Your server is currently restricted for monetization and you cannot edit products. Check your email for details",
        GUILD_PRODUCT_EDIT_MODAL_CARD_PREVIEW_HEADING:
          "Here's what members see",
        GUILD_PRODUCT_EDIT_MODAL_CARD_PREVIEW_DESCRIPTION:
          "This is a preview of what your server product will look like to people on Discord when you share in-chat.",
        GUILD_PRODUCT_EDIT_MODAL_SAVE_DRAFT_BUTTON: "Save as draft",
        GUILD_PRODUCT_EDIT_MODAL_PUBLISH_BUTTON: "Publish",
        GUILD_PRODUCT_EDIT_MODAL_UNPUBLISH_BUTTON: "Unpublish",
        GUILD_PRODUCT_EDIT_MODAL_SAVE_CHANGES_BUTTON: "Save Changes",
        GUILD_PRODUCT_EDIT_NOTICE_BAR_SAVE_DRAFT_SUCCESS:
          "Your server product draft has been saved.",
        GUILD_PRODUCT_EDIT_NOTICE_BAR_MODAL_UPDATE_PUBLISH_SUCCESS:
          "Your changes to the product have been saved.",
        GUILD_PRODUCT_EDIT_NOTICE_BAR_MODAL_UNPUBLISH_SUCCESS:
          "Your server product has been unpublished.",
        GUILD_PRODUCT_EDIT_NOTICE_BAR_DISMISS: "Dismiss",
        GUILD_PRODUCT_SETTINGS_INCLUDE_ATTACHMENTS_TOGGLE_LABEL:
          "Include a Downloadable",
        GUILD_PRODUCT_EDIT_MODAL_ATTACHMENTS_LABEL: "Upload your Downloadable",
        GUILD_PRODUCT_UPLOAD_FILE_BUTTON: "Upload file",
        GUILD_PRODUCT_UPLOAD_AREA_TITLE: "Upload your Attachments",
        GUILD_PRODUCT_UPLOAD_AREA_INSTRUCTIONS: "Drop them right here",
        GUILD_PRODUCT_UPLOAD_ATTACHMENT_INSTRUCTIONS:
          "Upload up to 10 files. Max {fileUploadLimit} total. No archive files allowed (.zip, .rar, etc.).",
        GUILD_PRODUCT_UPLOAD_ATTACHMENT_INSTRUCTIONS_ARCHIVES_ALLOWED:
          "Upload up to 10 files. Max {fileUploadLimit} total.",
        GUILD_PRODUCT_ATTACHED_FILES_SECTION_LABEL: "Attached Files",
        GUILD_PRODUCT_DELETE_ATTACHMENT: "Delete {attachment}",
        GUILD_PRODUCT_CANCEL_ATTACHMENTS_CONFIRMATION_HEADER:
          "Remove downloadables?",
        GUILD_PRODUCT_CANCEL_ATTACHMENTS_CONFIRMATION_BODY:
          "Are you sure you want to remove all files you have uploaded?",
        GUILD_PRODUCT_SETTINGS_INCLUDE_ROLE_TOGGLE_LABEL: "Include a Role",
        GUILD_PRODUCT_SETTINGS_CREATE_ROLE_SELECT_COLOR_ARIA:
          "Select custom color",
        GUILD_PRODUCT_SETTINGS_CREATE_ROLE_NAME_PLACEHOLDER:
          "Enter a role name",
        GUILD_PRODUCT_SETTINGS_ATTACHED_ROLE_HEADER: "Attached Role",
        GUILD_PRODUCT_SETTINGS_ATTACHED_ROLE_DESCRIPTION:
          "This is the current role attached to this product. You'll have to detach it to create a new role.",
        GUILD_PRODUCT_SETTINGS_ADD_ROLE_HEADER: "Add Role",
        GUILD_PRODUCT_SETTINGS_ADD_ROLE_DESCRIPTION:
          "Members who purchase this product will receive this role. You can edit role details in the Roles tab in Server Settings.",
        GUILD_PRODUCT_SETTINGS_REMOVE_ATTACHED_ROLE_ARIA:
          "Remove attached role",
        GUILD_PRODUCT_SETTINGS_ROLE_COLOR_ARIA: "Role color: {color}",
        GUILD_PRODUCT_SETTINGS_SELECT_ROLE_COLOR_ARIA:
          "Selected color: {color}",
        GUILD_PRODUCT_SETTINGS_REMOVE_ROLE_MODAL_REMOVE_CTA: "Sounds Good",
        GUILD_PRODUCT_SETTINGS_REMOVE_ROLE_MODAL_REMOVE_CLOSE_LABEL:
          "Nevermind",
        GUILD_PRODUCT_SETTINGS_REMOVE_ROLE_MODAL_TITLE:
          "Remove this Role upon save?",
        GUILD_PRODUCT_SETTINGS_REMOVE_ROLE_MODAL_BODY:
          'By clicking "Sounds Good," upon saving your changes, the $[{roleName}](emphasisHook) Role will be removed from this product permanently.',
        GUILD_PRODUCT_SETTINGS_REMOVE_ROLE_MODAL_SECTION_1_TITLE:
          "New buyers lose out",
        GUILD_PRODUCT_SETTINGS_REMOVE_ROLE_MODAL_SECTION_1_DETAIL:
          "Removing a Role from a product means new purchasers of this product will not get the role. If you remove and change the attached role, existing purchasers will also gain access to the newly added Role.",
        GUILD_PRODUCT_SETTINGS_REMOVE_ROLE_MODAL_SECTION_2_TITLE:
          "Deletion ability",
        GUILD_PRODUCT_SETTINGS_REMOVE_ROLE_MODAL_SECTION_2_DETAIL:
          "Upon removal, this role will also become unmanaged. That's just a fancy word that means you'll be able to delete it from your Role Settings.",
        GUILD_PRODUCT_SETTINGS_WARNING_MODAL_TITLE: "Are you sure?",
        GUILD_PRODUCT_SETTINGS_DETACHED_ROLE_HEADER: "Role Removal Pending",
        GUILD_PRODUCT_SETTINGS_DETACHED_ROLE_DESCRIPTION:
          "This role will be removed from this product upon saving your changes. You will not be able to undo this once finalized. To add a new role, save and re-open this product's edit mode.",
        GUILD_PRODUCT_SETTINGS_DETACHED_ROLE_UNDO_CTA: "Restore",
        GUILD_PRODUCT_PUBLISH_TITLE: "Make it official!",
        GUILD_PRODUCT_PUBLISH_DESCRIPTION:
          "This product won’t be visible to members until you publish.",
        GUILD_PRODUCT_UNPUBLISH_TITLE: "Pause selling",
        GUILD_PRODUCT_UNPUBLISH_DESCRIPTION:
          "This product will become unavailable for purchase.",
        GUILD_PRODUCT_PUBLISH_REQUIRES_SAVE: "Please save before publishing",
        GUILD_PRODUCT_UNPUBLISH_REQUIRES_SAVE:
          "Please save before unpublishing",
        GUILD_PRODUCT_UNPUBLISHED_TITLE: "Unpublished",
        GUILD_PRODUCT_CARD_PURCHASE_TO_UNLOCK: "Purchase to Unlock",
        GUILD_PRODUCT_CARD_EMPTY_NAME: "No title yet",
        GUILD_PRODUCT_CARD_EMPTY_DESCRIPTION: "Empty Description",
        GUILD_PRODUCT_CARD_EMPTY_PRICE: "$——",
        GUILD_PRODUCT_CARD_SEE_FULL_DESCRIPTION: "See full description",
        GUILD_PRODUCT_CARD_HIDE_FULL_DESCRIPTION: "Hide full description",
        GUILD_PRODUCT_CARD_TYPE_DOWNLOADABLE: "Downloadable",
        GUILD_PRODUCT_CARD_TYPE_ROLE: "Role",
        GUILD_PRODUCT_CARD_TYPE_DOWNLOADABLE_AND_ROLE: "Downloadable + Role",
        GUILD_PRODUCT_CARD_PURCHASE_BUTTON: "Purchase",
        GUILD_PRODUCT_CARD_HIDDEN_ROLE_SCREEN_READER: "Role:",
        GUILD_PRODUCT_CARD_EDIT_PRODUCT: "Edit Product",
        GUILD_PRODUCT_CARD_DOWNLOAD: "Download",
        GUILD_PRODUCT_CARD_PURCHASED: "Purchased",
        GUILD_PRODUCT_PURCHASE_DISABLED_TOOLTIP:
          "Disabled because you are admin for the server",
        GUILD_PRODUCT_DOWNLOAD_BUTTON_MULTIPLE_FILES: "Access Files",
        GUILD_PRODUCT_DOWNLOAD_BUTTON_SINGLE_FILE: "Download Now",
        ONE_TIME_PURCHASE_REVIEW_STEP_PURCHASE_DETAILS_LABEL:
          "Purchase Details",
        GUILD_PRODUCT_INFO_MODAL_PRODUCT_OFFER:
          "{productType} offered by {personName}",
        GUILD_PRODUCT_INFO_MODAL_DETAIL_HEADER: "Product Details",
        GUILD_PRODUCT_INFO_MODAL_VIEW_CONTENTS: "View Product Contents",
        GUILD_PRODUCT_INFO_MODAL_COLLAPSE_CONTENTS: "Collapse Product Contents",
        GUILD_SETTINGS_ENABLE_MONETIZATION_TAB_TITLE: "Enable Monetization",
        GUILD_PRODUCT_CONFIRMATION_MODAL_BODY_INTRO:
          "Your purchase of $[{productName}](emphasisHook) was successful!",
        GUILD_PRODUCT_CONFIRMATION_MODAL_BODY_ATTACHMENT:
          "You can download your purchase now or anytime in the product embed card.",
        GUILD_PRODUCT_CONFIRMATION_MODAL_BODY_ROLE:
          "The $[{roleName}](emphasisHook) role and exclusive channels associated with it have been granted.",
        GUILD_PRODUCT_CONFIRMATION_MODAL_BODY_THANK_YOU:
          "Thank you and enjoy your purchase!",
        GUILD_PRODUCT_CONFIRMATION_MODAL_DOWNLOADABLE_UNLOCKED:
          "Downloadable unlocked",
        GUILD_PRODUCT_CONFIRMATION_MODAL_ROLE_UNLOCKED: "Role unlocked",
        GUILD_PRODUCT_CONFIRMATION_MODAL_TITLE: "You're all set.",
        GUILD_PRODUCT_PURCHASE_MODAL_CTA: "Purchase",
        GUILD_PRODUCT_CONFIRMATION_MODAL_GENRIC_ERROR_BODY:
          "Your purchase was successful but there was a problem loading your purchase benefits. Please refresh to access your benefits.",
        GUILD_PRODUCT_CONFIRMATION_MODAL_GENRIC_ERROR_HEADER: "Uh Oh",
        GUILD_PRODUCT_PURCHASE_SUMMARY_TOTAL_PAID: "Total paid",
        GUILD_STORE_HERO_TITLE: "Shop {guildName}",
        GUILD_STORE_HERO_DESCRIPTION_GREETING:
          "Hey $[**{username}**](usernameHook)!",
        GUILD_STORE_HERO_SHOW_MORE_DESCRIPTION_LABEL: "Show more",
        GUILD_STORE_HERO_DESCRIPTION_MODAL_CTA: "Sounds good",
        GUILD_STORE_HERO_DESCRIPTION_MODAL_HEADER: "Read up on the shop",
        GUILD_STORE_HERO_DESCRIPTION_MODAL_ARIA: "Server Shop Description",
        GUILD_STORE_HERO_PREVIEW_TITLE: "Shop access unlocked!",
        GUILD_STORE_HERO_DEFAULT_DESCRIPTION:
          "Welcome to the Server Shop! \uD83C\uDF89 Browse subscriptions, downloadables, and premium roles crafted just for you!",
        GUILD_STORE_HERO_PREVIEW_PAGE_DESCRIPTION:
          "Welcome \uD83D\uDC4B to a pretty boring version of Server Shop, a new way to offer cool stuff to your members and earn. Your server members can’t see this page — not until you create and publish your first product!!",
        GUILD_STORE_HERO_PREVIEW_TAB_DESCRIPTION:
          "Welcome \uD83D\uDC4B to a pretty boring version of Server Shop, a new way to offer cool stuff to your members and earn. Your server members can’t see this tab — not until you create and publish your first product!!",
        GUILD_STORE_PREVIEW_CARD_DESCRIPTION:
          "Let’s get this bread. A new world of possibilities awaits you and your members. Get started with Server Shop \uD83D\uDC47\uD83C\uDFFD",
        GUILD_STORE_PREVIEW_MURAL_TITLE: "What will your first product be?",
        GUILD_STORE_PREVIEW_CARD_TITLE:
          "Sell a Downloadable or Role! \uD83D\uDD25",
        GUILD_STORE_PREVIEW_LEARN_MORE:
          "Got more questions about Server Shop? [Learn more]({learnMoreLink})",
        GUILD_STORE_PREVIEW_CHIP_ROLE_ACCESS: "Role access \uD83D\uDD13",
        GUILD_STORE_PREVIEW_CHIP_GAME_TUTORIALS: "Game Tutorials \uD83D\uDD79",
        GUILD_STORE_PREVIEW_CHIP_DOPE_WALLPAPERS:
          "Dope Wallpapers \uD83D\uDDBC",
        GUILD_STORE_PREVIEW_CHIP_PFP_ART: "PFP Art \uD83D\uDC36",
        GUILD_STORE_PREVIEW_CHIP_FILTER_PRESETS: "Filter Presets \uD83C\uDFA8",
        GUILD_STORE_PREVIEW_CHIP_SONG_DROPS: "Song Drops \uD83C\uDFA7",
        GUILD_STORE_PREVIEW_CHIP_COSPLAY_PICS: "Cosplay Pics \uD83D\uDC57",
        GUILD_STORE_PREVIEW_CHIP_3D_MODELS: "3D Models \uD83D\uDCC1",
        GUILD_STORE_PREVIEW_TAB_SELECTOR_BODY:
          "Discover this new way to offer cool stuff!",
        GUILD_STORE_SORT_OPTION_NAME: "Alphabetical",
        GUILD_STORE_SORT_OPTION_PRICE_DESC: "Price: High to Low",
        GUILD_STORE_SORT_OPTION_PRICE_ASC: "Price: Low to High",
        GUILD_STORE_SORT_OPTION_NEWEST_ARRIVALS: "Newest Arrivals",
        GUILD_STORE_SORT_OPTION_SELECT_MENU_ARIA:
          "Change the sort for Server Shop Listings",
        GUILD_STORE_SORT_OPTION_SELECT_MENU_SORT_BY_LABEL: "Sort By",
        GUILD_STORE_SORT_OPTION_TOGGLE_ARIA: "Sort by:",
        CREATOR_MONETIZATION_SETTINGS_GUILD_PRODUCT_SORT_OPTION_TITLE:
          "Server Products Sort Order",
        CREATOR_MONETIZATION_SETTINGS_GUILD_PRODUCT_SORT_OPTION_DESCRIPTION:
          "Sets how your server products will be ordered in your Server Shop page.",
        CREATOR_MONETIZATION_SETTINGS_SERVER_SHOP_DEFAULT_TAB_OPTION_TITLE:
          "Server Shop Default Tab",
        CREATOR_MONETIZATION_SETTINGS_SERVER_SHOP_DEFAULT_TAB_OPTION_DESCRIPTION:
          "Sets the default tab when there are both Server Products and Server Subscriptions published.",
        GUILD_PRODUCT_DOWNLOAD_MODAL_ARIA_LABEL: "All downloadables",
        GUILD_PRODUCT_DOWNLOADS_COUNT:
          "{count, plural, =1 {1 file} other {{count} files}}",
        EXPANDABLE_TEXT_SHOW_MORE: "Show more",
        EXPANDABLE_TEXT_SHOW_LESS: "Show less",
        CUSTOM_IMAGE_SELECTOR_YOUR_CUSTOM_IMAGE: "Your custom image",
        CUSTOM_IMAGE_SELECTOR_YOUR_CUSTOM_IMAGE_WITH_FILENAME:
          "Your custom image: {filename}",
        CUSTOM_IMAGE_SELECTOR_EDIT_IMAGE_TOOLTIP: "Edit Image",
        CUSTOM_IMAGE_SELECTOR_DELETE_IMAGE_TOOLTIP: "Delete Image",
        CUSTOM_IMAGE_SELECTOR_EDIT_CUSTOM_IMAGE_ARIA_LABEL:
          "Edit custom image: {filename}",
        CUSTOM_IMAGE_SELECTOR_DELETE_CUSTOM_IMAGE_ARIA_LABEL:
          "Delete custom image: {filename}",
        CUSTOM_IMAGE_SELECTOR_RADIO_GROUP_ARIA_LABEL: "Select an image",
        GUILD_PRODUCT_NOT_AVAILABLE_TITLE: "This product is not available.",
        GUILD_PRODUCT_NOT_AVAILABLE_BODY:
          "Please contact the server owner for more information.",
        GUILD_PRODUCT_FEATURE_NOT_AVAILABLE_ON_MOBILE_TITLE:
          "This is currently not supported on this device.",
        GUILD_PRODUCT_PURCHASES_TITLE: "Purchases",
        GUILD_PRODUCT_EARNINGS_TABLE_LISTING_COLUMN_TITLE: "Listing",
        GUILD_PRODUCT_EARNINGS_TABLE_PURCHASES_COLUMN_TITLE: "Purchases",
        GUILD_PRODUCT_EARNINGS_TABLE_PRICE_COLUMN_TITLE: "Price",
        GUILD_PRODUCT_BILLING_PRODUCT_TYPE: "Product Type",
        GUILD_PRODUCT_BILLING_SERVER_NAME: "Server Name",
        GUILD_PRODUCT_BILLING_TYPE_PREMIUM_ROLE: "Premium Role",
        GUILD_PRODUCT_BILLING_ACCESS_DOWNLOADABLES: "Access your downloadables",
        GUILD_PRODUCT_BILLING_PRODUCT_UNAVAILABLE:
          "This product is no longer available for access and its benefits have been voided. Submit a request with any questions.",
        GUILD_PRODUCT_BILLING_DELISTED_PRODUCT: "Delisted Product",
        GUILD_PRODUCT_BILLING_CONTACT_SUPPORT: "Contact Support",
        GUILD_SHOP_EMBED_LISTINGS_AVAILABLE: "{listingCount} items available",
        GUILD_SHOP_EMBED_SHOP_AGE: "Selling since {createdYear}",
        GUILD_SHOP_EMBED_CTA: "Visit Shop",
        GUILD_PRODUCT_REPORT: "Report Product",
        GUILD_SUBSCRIPTION_REPORT: "Report Subscription",
        GUILD_SHOP_REPORT_MODAL_HEADER: "Report [**!!{listingName}!!**]",
        GUILD_SHOP_REPORT_MODAL_BODY:
          "Do you want to report [**!!{listingName}!!**] for violation of the [Server Monetization Terms]({monetizationTermsUrl}) or [Community Guidelines]({communityGuidelinesUrl})?",
        SKU_REPORT_CONFIRMATION_HEADER: "Report Submitted",
        SKU_REPORT_CONFIRMATION_BODY:
          "Your report has been submitted against [**!!{skuName}!!**]",
        SYSTEM_MESSAGE_GUILD_PRODUCT_PURCHASE:
          "$[!!{username}!!](usernameHook) has purchased [{productName}](handleProductListingClick)!",
        SYSTEM_MESSAGE_GUILD_PRODUCT_PURCHASE_MOBILE:
          "[!!{username}!!](usernameHook) has purchased {productName}!",
        GUILD_PRODUCT_PURCHASE_THANK_YOU_CARD_TEXT:
          "Thank you,\n $[!!{username}!!](usernameHook)",
        GUILD_PRODUCT_PURCHASE_THANK_YOU_CARD_TEXT_MOBILE: "Thank you,",
        MEDIA_CHANNEL_TYPE: "Media",
        MEDIA_CHANNEL: "Media Channel",
        MEDIA_CHANNEL_LEARN_MORE: "[Learn more]({hcArticleUrl})",
        CREATE_MEDIA_CHANNEL_DESCRIPTION:
          "Share videos, photos, and files with your members.",
        CHANNEL_TOOLTIP_MEDIA_NSFW: "Media Channel (Age-Restricted)",
        CHANNEL_TOOLTIP_MEDIA_LIMITED: "Media Channel (Limited)",
        GUILD_SETTINGS_ONBOARDING_ACTION_TALK_IN_MEDIA_CHANNEL:
          "Member posts or responds in the media channel",
        ROLE_PERMISSIONS_SECTION_MEDIA_CHANNEL: "Media Channel Permissions",
        ROLE_PERMISSIONS_SECTION_MEDIA_CHANNEL_DESCRIPTION:
          "Automated moderation makes monitoring media channels easier. [Enable](setUpAutomod)",
        MEDIA_CHANNEL_ONBOARDING_CHECKLIST_FIRST_POST_DESCRIPTION:
          "Start the conversation and get things going.",
        MEDIA_CHANNEL_SORT: "Sort",
        MEDIA_CHANNEL_SORT_A11Y_LABEL: "Change the sort for Media Posts",
        MEDIA_CHANNEL_ATTACHMENTS_SECTION_TITLE: "Upload your media",
        MEDIA_CHANNEL_ATTACHMENTS_SECTION_DESCRIPTION:
          "Add any video, photo, and files to share with members.",
        MEDIA_CHANNEL_UPLOAD_THUMBNAIL_LABEL: "Upload thumbnail",
        MEDIA_CHANNEL_CHANGE_THUMBNAIL_LABEL: "Change thumbnail",
        MEDIA_CHANNEL_SET_AS_THUMBNAIL_LABEL: "Set as thumbnail",
        MEDIA_CHANNEL_UPSELL_TITLE: "Turn content into conversation!",
        MEDIA_CHANNEL_UPSELL_NON_MONETIZING_GUILD_TITLE:
          "Introducing Media Channels!",
        MEDIA_CHANNEL_UPSELL_NON_MONETIZING_GUILD_BODY:
          "Create a space where photos and videos get the spotlight.",
        MEDIA_CHANNEL_UPSELL_BODY:
          "Create a media channel to share exclusive photos, videos, and files with your subscribers.",
        MEDIA_CHANNEL_UPSELL_CREATE_NOW_CTA: "Create now",
        MEDIA_CHANNEL_HIDE_MEDIA_DOWNLOAD_OPTIONS_TOGGLE_LABEL:
          "Show Option to Save and Copy Embedded Media",
        MEDIA_CHANNEL_HIDE_MEDIA_DOWNLOAD_OPTIONS_TOGGLE_DESCRIPTION:
          "Allows members to save, copy, and share media attachments uploaded to this channel. However, files that cannot be embedded can still be downloaded.",
        MEDIA_CHANNEL_ADMIN_EDUCATION_SHOW: "Show channel benefits",
        MEDIA_CHANNEL_ADMIN_EDUCATION_HIDE: "Hide channel benefits",
        MEDIA_POST_SHARE_PROMPT_TITLE: "Share this post with your community!",
        MEDIA_POST_SHARE_PROMPT_SUBTITLE:
          "[Learn more]({helpArticleUrl}) about how sharing works.",
        MEDIA_POST_SHARE_PROMPT_SUBTITLE_MOBILE:
          "[Learn more](helpArticleUrl) about how sharing works.",
        MEDIA_POST_SHARE_PROMPT_CTA: "Copy post link",
        MEDIA_POST_ADMIN_EDUCATION_SERVER_SUB_PILL: "SERVER SUB EXCLUSIVE",
        MEDIA_POST_ADMIN_EDUCATION_SHARE_TITLE:
          "Share exclusive videos and photos with subscribers!",
        MEDIA_POST_ADMIN_EDUCATION_SHARE_SUBTITLE:
          "Add Media Channels as an premium benefit for your subscribers to enjoy. You can share media posts in other channels that are exclusive for subscribers.",
        MEDIA_POST_ADMIN_EDUCATION_HAS_TIERS_CTA: "Add channel to tier",
        MEDIA_POST_ADMIN_EDUCATION_NO_TIERS_CTA: "Set up server subscriptions",
        MEDIA_POST_ADMIN_EDUCATION_ABOUT_MONETIZING_TITLE:
          "What can Media Channels be used for?",
        MEDIA_POST_ADMIN_EDUCATION_ABOUT_NON_MONETIZING_TITLE:
          "Media Channels give photos and videos the spotlight",
        MEDIA_POST_ADMIN_EDUCATION_ABOUT_MONETIZING_SUBTITLE:
          "Media Channels gives you a new space to share videos, photos, and files with your subscribers.",
        MEDIA_POST_ADMIN_EDUCATION_ABOUT_NON_MONETIZING_SUBTITLE:
          "Give your members a dedicated channel for sharing videos, photos, and files in a vibrant, visual layout.",
        MEDIA_POST_ADMIN_EDUCATION_PREVIEW_TITLE_ONE:
          "How to Collect Gem | CheeseTuts",
        MEDIA_POST_ADMIN_EDUCATION_PREVIEW_USERNAME_ONE: "Phibi",
        MEDIA_POST_ADMIN_EDUCATION_PREVIEW_TITLE_TWO:
          "Wumpus Day in the Life | BTS",
        MEDIA_POST_ADMIN_EDUCATION_PREVIEW_USERNAME_TWO: "Nelly",
        MEDIA_POST_ADMIN_EDUCATION_PREVIEW_TITLE_THREE:
          "NEW Animation Short First Look",
        MEDIA_POST_ADMIN_EDUCATION_PREVIEW_USERNAME_THREE: "Wumpus",
        MEDIA_POST_ADMIN_EDUCATION_HELP_CENTER: "More about Media Channels",
        MEDIA_POST_ADMIN_EDUCATION_PREVIEW_TIMESTAMP: "Posted 2d ago",
        MEDIA_POST_ADMIN_EDUCATION_BEHIND_THE_SCENES_TAG: "Behind the Scenes",
        MEDIA_POST_ADMIN_EDUCATION_EXCLUSIVE_ART_TAG: "Exclusive Art",
        MEDIA_POST_ADMIN_EDUCATION_PRERELEASES_TAG: "Pre-releases",
        MEDIA_POST_ADMIN_EDUCATION_TUTORIALS_TAG: "Tutorials",
        MEDIA_POST_ADMIN_EDUCATION_FAN_ART_TAG: "Fan Art",
        MEDIA_POST_ADMIN_EDUCATION_DESK_SETUP_TAG: "Desk Setup",
        MEDIA_POST_ADMIN_EDUCATION_PETS_TAG: "Pets",
        MEDIA_POST_ADMIN_EDUCATION_HOUSEPLANTS_TAG: "Houseplants",
        MEDIA_POST_EMBED_SUBSCRIBED_CTA: "View",
        MEDIA_POST_EMBED_SUBSCRIBE_CTA: "Subscribe",
        MEDIA_POST_EMBED_FOOTER_WITH_AUTHOR_AND_CHANNEL:
          "Posted in **!!{channelName}!!** by [!!{username}!!](usernameOnClick)",
        MEDIA_POST_EMBED_FOOTER: "Posted in **!!{guildName}!!**",
        MEDIA_POST_EMBED_FOOTER_WEB:
          "posted by $[{authorName}](authorNameHook)",
        MEDIA_POST_EMBED_THUMBNAIL_ALT: "Media post embed thumbnail image",
        MEDIA_POST_EMBED_AUTHOR_AVATAR_ALT: "Media post author avatar",
        MEDIA_POST_EMBED_CHANNEL_ICON_ALT: "Channel icon with sparkle",
        MEDIA_POST_EMBED_BLURRED_THUMBNAIL_TEXT: "SUBSCRIBE TO VIEW",
        MEDIA_POST_MULTIPLE_THUMBNAIL_NOTICE_TITLE: "Tap to set thumbnail",
        MEDIA_POST_MULTIPLE_THUMBNAIL_NOTICE_DESCRIPTION:
          "Tap on a media attachment and set it as the post thumbnail.",
        DOMAIN_VERIFICATION_HEADER: "Connect your Domain",
        DOMAIN_VERIFICATION_DESCRIPTION:
          "Verify ownership of your domain and show it off on your profile!",
        DOMAIN_VERIFICATION_LABEL: "Domain",
        DOMAIN_VERIFICATION_INSTRUCTIONS_DNS_1:
          "Sign in to your domain name provider",
        DOMAIN_VERIFICATION_INSTRUCTIONS_DNS_2: "Create a new DNS record:",
        DOMAIN_VERIFICATION_DNS_WARNING:
          "It may take a few minutes for the DNS record to propagate.",
        DOMAIN_VERIFICATION_RECORD_NAME: "Name",
        DOMAIN_VERIFICATION_RECORD_TYPE: "Type",
        DOMAIN_VERIFICATION_RECORD_CONTENT: "Content",
        DOMAIN_VERIFICATION_USE_HTTP: "Verify using HTTPS",
        DOMAIN_VERIFICATION_USE_DNS: "Verify using DNS",
        DOMAIN_VERIFICATION_INSTRUCTIONS_HTTP:
          "Create a new file on your website:",
        CLIP_TAG: "Clip (Beta)",
        CLIPS: "Clips",
        CLIPS_CLIPPING: "Clipping",
        CLIPS_SETTINGS: "Clips Settings",
        CLIPS_SETTINGS_TOP_SUBHEADER: "Change settings for clipping",
        CLIPS_SETTINGS_ENABLE_CLIPS: "Enable Clipping",
        CLIPS_SETTINGS_ENABLE_CLIPS_HELP:
          "Enables you to capture clips while you're streaming by using the clipping keybind.",
        CLIPS_SETTINGS_ENABLE_REMINDERS: "Enable Reminders",
        CLIPS_SETTINGS_ENABLE_REMINDERS_HELP:
          "After a clip is captured, show a reminder for new clips",
        CLIPS_SETTINGS_ENABLE_DECOUPLED_CLIPS: "Enable Always-On Game Clipping",
        CLIPS_SETTINGS_ENABLE_DECOUPLED_CLIPS_HELP:
          "Enables you to capture clips while gaming (even if you’re not streaming).",
        CLIPS_SETTINGS_HELP_IN_GO_LIVE_CTA:
          "Capture clips during your stream with $[!!{keybind}!!](keybindHook).",
        CLIPS_SETTINGS_VIDEO_QUALITY: "Video Quality Settings",
        CLIPS_SETTINGS_VIDEO_QUALITY_HELP:
          "Clips will be captured at the same quality as your stream.",
        CLIPS_SETTINGS_QUALITY_INFOBOX:
          "Please note that clips are currently captured at the same quality as your stream when streaming.",
        CLIPS_SETTINGS_UNDER_MIN_SPECS:
          "Your computer doesn't meet the minimum specifications for Clips, performance may be impacted if you enable Clips.",
        CLIPS_QUALITY_DEFAULT: "Default",
        CLIPS_SETTINGS_LENGTH: "Clip Length",
        CLIPS_SETTINGS_LENGTH_HELP: "By default, clips are 30 seconds long.",
        CLIPS_SETTINGS_STORAGE_LOCATION: "Storage Location",
        CLIPS_SETTINGS_STORAGE_LOCATION_HELP:
          "Choose where to store your clips.",
        CLIPS_LENGTH_SECONDS:
          "{count, plural, =1 {# Second} other {# Seconds}}",
        CLIPS_LENGTH_MINUTES:
          "{count, plural, =1 {# Minute} other {# Minutes}}",
        CLIPS_SETTINGS_KEYBIND: "Clipping Keybind",
        CLIPS_SETTINGS_KEYBIND_HELP:
          "Set up your keybind to capture clips. The default is ALT + C.",
        CLIPS_SAVE: "Save Clip",
        CLIPS_VIEWERSIDE_BUTTON_FOCUS_TOOLTIP:
          "Focus on a stream to capture clips.",
        CLIPS_VIEWERSIDE_BUTTON_DISABLED_TOOLTIP:
          "Clips are disabled for this stream.",
        CLIPS_SETTINGS_ALLOW_VIEWER_CLIPS: "Allow viewers to capture clips",
        CLIPS_SETTINGS_ALLOW_VIEWER_CLIPS_HELP:
          "Enable the creation of clips from your Go Live stream",
        CLIPS_SETTINGS_WHO_CAN_CAPTURE: "Who can capture clips",
        CLIPS_SETTINGS_WHO_CAN_CAPTURE_HELP:
          "Choose what layer of connectivity you need viewers to have in order to capture clips",
        CLIPS_CONNECTIVITY_ALL: "All",
        CLIPS_CONNECTIVITY_FRIENDS: "Friends",
        CLIPS_KEYBIND_DESCRIPTION:
          "Clips the last 30 seconds to 2 minutes of your stream, depending on your settings.",
        CLIPS_EDIT_GAME_AUDIO: "Stream Audio",
        CLIPS_EDIT_VOICE_CHANNEL_AUDIO: "Participants Audio",
        CLIPS_EDIT_SAVE_CLIP: "Save Clip",
        CLIPS_EDIT_EXPORT: "Export",
        CLIPS_EDIT_SHARE_CLIP: "Share Clip",
        CLIPS_EDIT_TITLE: "Clip Title",
        CLIPS_SHARE_A_CLIP: "Share a Clip",
        CLIPS_NOTIFICATION_TITLE: "Last {duration} clipped!",
        CLIPS_SAVE_START_NOTIFICATION_TITLE: "Saving clip",
        CLIPS_SAVE_ERROR_NOTIFICATION_TITLE: "Unable to save clip",
        CLIPS_REMINDER_NOTIFICATION_TITLE:
          "Create clips with keybind $[!!{keybind}!!](keybindHook)",
        CLIPS_CALL_TOOLTIP_TITLE: "You recently captured a clip!",
        CLIPS_CALL_TOOLTIP_LINK_CTA: "View Clip",
        CLIPS_YOU_HAVE_NEW_CLIPS:
          "You have {count, plural, =1 {# new clip} other {# new clips}}!",
        CLIPS_REVIEW_NOW: "Review Now",
        CLIPS_SESSION_ENDED_TOOLTIP_BODY:
          "You captured clips during your recent !!{applicationName}!! stream. Check them out in your clips library!",
        CLIPS_SESSION_ENDED_TOOLTIP_PRIMARY_CTA: "View Clips",
        CLIPS_SESSION_ENDED_TOOLTIP_SECONDARY_CTA: "Stop Reminders",
        CLIPS_CHANNEL_NOTICE_EDUCATION_BODY:
          "Clipping is here! Use $[!!{keybind}!!](keybindHook) to capture clips while you're streaming.",
        CLIPS_DELETE_MODAL_TITLE: "Delete this clip?",
        CLIPS_DELETE_MODAL_SUBTITLE:
          "Deleting a clip cannot be undone. Would you like to delete this clip in Discord & remove the file from your computer?",
        CLIPS_DELETE_CLIP: "Delete Clip",
        CLIP_SHARE_MODAL_TITLE: "Share clip to friends",
        CLIP_SHARE_MODAL_SUBTITLE:
          "Share your clip to a channel or directly with friends!",
        CLIP_SHARE_SELECT_CHANNEL: "OR SELECT A CHANNEL",
        CLIPS_SORT_RECENT: "Most Recent",
        CLIPS_SORT_OLDEST: "Oldest",
        CLIPS_SORT_PLACEHOLDER: "Sort Clips",
        CLIPS_LOAD_ERROR_TITLE: "Unable to Open Clip",
        CLIPS_LOAD_ERROR_BODY:
          "We couldn't open this clip. The file may have been moved or deleted.",
        CLIPS_ENABLED_BADGE: "Enabled",
        CLIPS_ENABLED_VIEWER_TOOLTIP:
          "Participants in this call have clips enabled.",
        CLIPS_ENABLED_VIEWER_TOOLTIP_NITRO_EA:
          "Participants in this call have clips enabled. Now available early access with Nitro.",
        CLIPS_IN_CALL_WARNING:
          "A participant in the call you joined has clipping enabled, your voice may be recorded.",
        CLIPS_GALLERY_TOOLTIP: "View Clips",
        CLIPS_GALLERY_NO_CLIPS:
          "You haven't clipped anything yet! Use $[!!{keybind}!!](keybindHook) to capture a clip while streaming.",
        CLIPS_GALLERY_NO_CLIPS_NO_KEYBIND_SET:
          "You haven't clipped anything yet! Set up a keybind [here](onClick) to start clipping.",
        CLIPS_GALLERY_NO_CLIPS_MATCH_QUERY:
          "We can't find any clips matching your query.",
        CLIPS_GALLERY_NO_CLIPS_CLIPS_NOT_ENABLED:
          "You haven’t clipped anything yet! Get started by [enabling clipping](onClick).",
        CLIPS_EDIT_DATE_TITLE: "Clipped On",
        CLIPS_EDIT_TIME_TITLE: "Time",
        CLIPS_EDIT_USER_LIST_TITLE: "Participants",
        CLIPS_ATTACHMENT_TOOLTIP: "This clip was captured on Discord",
        CLIPS_BETA_TAG_HOVER:
          "Clips is an experimental feature and isn't currently available everywhere on Discord.",
        CLIPS_SAVE_CLIP_TOOLTIP: "Save Clip (!!{hotkey}!!)",
        CLIPS_ONBOARDING_GO_LIVE_DEFAULT_DISABLED_COACHMARK_TITLE:
          "Introducing Clips!",
        CLIPS_ONBOARDING_GO_LIVE_DEFAULT_DISABLED_COACHMARK_BODY:
          "By enabling clips, you will be able to capture moments from your stream.",
        CLIPS_ONBOARDING_GO_LIVE_DEFAULT_DISABLED_COACHMARK_HARDWARE_IMPACT_WARNING:
          "Warning: based on your hardware, enabling clips may impact your game performance. [Learn more]({url})",
        CLIPS_ONBOARDING_CLIP_BUTTON_ACTIVITY_PANEL_COACHMARK_TITLE:
          "Take a clip with $[!!{keybind}!!](keybindHook)",
        CLIPS_ONBOARDING_CLIP_BUTTON_ACTIVITY_PANEL_COACHMARK_BODY:
          "Save a fun moment from your stream by pressing the clip button or $[!!{keybind}!!](keybindHook).",
        CLIPS_EXPORT_TO_SOUNDBOARD: "Add to Soundboard",
        CLIPS_EXPORT_TO_FILE: "Download Edited Clip",
        CLIPS_CANNOT_ATTACH_FILE_TO_CHANNEL:
          "You cannot send files in this channel.",
        CLIPS_SETTINGS_EDUCATION_BANNER_TITLE: "Clip, edit, share!",
        CLIPS_SETTINGS_EDUCATION_BANNER_TITLE_WITH_KEYBIND:
          "Clip, edit, share! [$[!!{keybind}!!](keybindHook)]",
        CLIPS_SETTINGS_EDUCATION_BANNER_BODY:
          "Capture your favorite streaming moments with clips.",
        CLIPS_GO_LIVE_EA_UPSELL_TITLE: "Level up your stream with Nitro",
        CLIPS_GO_LIVE_EA_UPSELL_BODY:
          "Unlock **HD streaming** and get **early access** to clips.",
        CLIPS_GO_LIVE_EA_UPSELL_CTA: "Get Nitro",
        CLIPS_ADD_A_TITLE: "Add a title",
        CLIPS_UNTITLED: "Untitled",
        CLIPS_UNKNOWN_SOURCE: "Unknown",
        CLIPS_SETTINGS_OPT_OUT_OF_VOICE_RECORDING:
          "Allow my voice to be recorded in Clips",
        CLIPS_SETTINGS_OPT_OUT_OF_VOICE_RECORDING_DESCRIPTION:
          "By turning on this setting, your voice may be included when someone in the same voice channel uses Clips.",
        CLIPS_SETTINGS_VIEWERSIDE_CLIPS_TOGGLE:
          "Allow viewers to capture clips",
        CLIPS_SETTINGS_VIEWERSIDE_CLIPS_TOGGLE_DESCRIPTION:
          "If this is on, viewers can take clips of your stream.",
        CLIPS_SETTINGS_HW_ENCODING_MUST_BE_ENABLED_INFOBOX:
          "To use Clips, enable hardware encoding. Find it in [Voice & Video settings](onClick).",
        CLIPS_PROCESSING_BADGE: "Processing...",
        CLIPS_SETTINGS_RESOLUTION: "Clip Resolution",
        CLIPS_SETTINGS_RESOLUTION_NOTE:
          "This is the maximum resolution your clips will be recorded in.",
        CLIPS_SETTINGS_FRAMERATE: "Clip Frame Rate",
        CLIPS_SETTINGS_FRAMERATE_NOTE:
          "This is the maximum frame rate your clips will be recorded at.",
        CLIPS_CROP_START: "Crop Start",
        CLIPS_CROP_END: "Crop End",
        CLIPS_ATTACHMENT_UTILITIES_SPOILER: "Spoiler Clip",
        CLIPS_ATTACHMENT_UTILITIES_REMOVE: "Remove Clip",
        CLIPS_USER_EDUCATION_ENABLED_BODY:
          "You can now take clips directly in game with $[!!{keybind}!!](keybindHook) or set a custom keybind.",
        CLIPS_USER_EDUCATION_ENABLED_BODY_NO_KEYBIND:
          "You can now take clips directly in game. Set a clip keybind in your Clips settings!",
        CLIPS_USER_EDUCATION_DISABLED_BODY:
          "Enable Clips now to capture moments directly in game.",
        CLIPS_USER_EDUCATION_ERROR_BODY:
          "Oh no! We are currently unable to take clips.",
        CLIPS_USER_EDUCATION_MANAGE_CLIPS_SETTINGS: "Manage Clips Settings",
        CLIPS_USER_EDUCATION_LEARN_MORE: "Learn More",
        SOUND_INCOMING_RING_HALLOWEEN: "Halloween Incoming Ring",
        SOUND_INCOMING_RING_EOY_2023: "Seasonal Incoming Ring",
        CUSTOM_SOUNDS: "Custom Sounds",
        ENABLE_PHONE_INTEGRATION:
          "Enable integration with the Phone app to experience this.",
        GUILD_SHOP_CHANNEL_LABEL: "Server Shop",
        GUILD_SHOP_PRODUCTS_A11Y_LABEL: "Available Products",
        GUILD_SHOP_LISTING_CARD_A11Y_LABEL:
          "Product Listing Card for {productName}",
        GUILD_SHOP_SUPPORT_SERVER_HEADER: "Support the server",
        GUILD_SHOP_PRODUCT_TYPE_SELECTOR_TITLE: "Products",
        GUILD_SHOP_PRODUCT_TYPE_BODY:
          "Snag some Downloadables or special Roles",
        GUILD_ROLE_SUB_TYPE_BODY:
          "Moving to this tab soon. For now, view [here](openRoleSubPage)",
        GUILD_ROLE_SUB_TYPE_BODY_AFTER_CONSOLIDATION:
          "Subscribe to support this server month to month",
        GUILD_SHOP_PAGE_PREVIEW_NOTICE_LABEL:
          "This page is not visible to your members and can be deleted anytime.",
        GUILD_SHOP_TAB_PREVIEW_NOTICE_LABEL:
          "This tab is not visible to your members and can be deleted anytime.",
        GUILD_SHOP_REMOVE_PREVIEW_PAGE_BUTTON: "Remove page",
        GUILD_SHOP_REMOVE_PREVIEW_TAB_BUTTON: "Remove tab",
        GUILD_SHOP_PREVIEW_CTA_BUTTON: "Get Started",
        USER_DISCONNECTED_SUBTEXT:
          "!!{username}!! can still join anytime while you are here.",
        REPORTS_USER_BUTTON_TITLE: "Report User Profile",
        REPORTS_USER_PREVIEW_TITLE: "Selected User",
        REPORTS_FREE_TEXT_PLACEHOLDER:
          "(Optional) Provide more context about your report here",
        REPORTS_BLOCK_USER_ELEMENT_DESCRIPTION:
          "This is whose profile you reported. Block them to stop seeing any of their messages.",
        SAFETY_HUB_PAGE_TITLE: "Safety Hub",
        PRIVACY_AND_SAFETY_TAB_TITLE_SETTINGS: "Preferences",
        PRIVACY_AND_SAFETY_TAB_TITLE_SUPPORT: "Account Standing",
        PRIVACY_AND_SAFETY_TAB_TITLE_SUPPORT_V2: "Standing",
        SAFETY_HUB_ACCOUNT_STANDING_ALL_GOOD_TITLE:
          "Your account is $[all good!](hook)",
        SAFETY_HUB_ACCOUNT_STANDING_ALL_GOOD_TITLE_V2:
          "Your account is $[all good](hook)",
        SAFETY_HUB_ACCOUNT_STANDING_ALL_GOOD_DESCRIPTION:
          "Thanks for upholding Discord's [Terms of Service]({termsOfService}) and [Community Guidelines]({communityGuidelines}).",
        SAFETY_HUB_ACCOUNT_STANDING_ALL_GOOD_DESCRIPTION_V2:
          "Thanks for upholding Discord's [Terms of Service]({termsOfService}) and [Community Guidelines]({communityGuidelines}). If you break the rules, it will show up here.",
        SAFETY_HUB_ACCOUNT_STANDING_LIMITED_TITLE:
          "Your account is $[limited.](hook)",
        SAFETY_HUB_ACCOUNT_STANDING_LIMITED_TITLE_V2:
          "Your account is $[limited](hook)",
        SAFETY_HUB_ACCOUNT_STANDING_LIMITED_DESCRIPTION:
          "You broke Discord's rules and will lose feature access if you break them again.",
        SAFETY_HUB_ACCOUNT_STANDING_LIMITED_DESCRIPTION_V2:
          "You may lose access to some parts of Discord if you break the rules again.",
        SAFETY_HUB_ACCOUNT_STANDING_VERY_LIMITED_TITLE:
          "Your account is $[very limited.](hook)",
        SAFETY_HUB_ACCOUNT_STANDING_VERY_LIMITED_TITLE_V2:
          "Your account is $[very limited](hook)",
        SAFETY_HUB_ACCOUNT_STANDING_VERY_LIMITED_DESCRIPTION:
          "You broke Discord's rules and you may lose your account if you break them again.",
        SAFETY_HUB_ACCOUNT_STANDING_VERY_LIMITED_DESCRIPTION_V2:
          "You can't use some parts of Discord. You may be suspended if you break the rules again.",
        SAFETY_HUB_ACCOUNT_STANDING_AT_RISK_TITLE:
          "Your account is $[at risk.](hook)",
        SAFETY_HUB_ACCOUNT_STANDING_AT_RISK_TITLE_V2:
          "Your account is $[at risk](hook)",
        SAFETY_HUB_ACCOUNT_STANDING_AT_RISK_DESCRIPTION:
          "You broke Discord's rules. You will be permanently suspended if you break them again.",
        SAFETY_HUB_ACCOUNT_STANDING_AT_RISK_DESCRIPTION_V2:
          "You can't use some parts of Discord. You may be permanently banned if you break the rules again.",
        SAFETY_HUB_ACCOUNT_STANDING_SUSPENDED_TITLE:
          "Your account is $[suspended.](hook)",
        SAFETY_HUB_ACCOUNT_STANDING_SUSPENDED_TITLE_V2:
          "Your account is $[suspended](hook)",
        SAFETY_HUB_ACCOUNT_STANDING_SUSPENDED_DESCRIPTION:
          "You broke Discord's [Terms of Service]({termsOfService}) and [Community Guidelines]({communityGuidelines}).",
        SAFETY_HUB_ACCOUNT_STANDING_SUSPENDED_DESCRIPTION_V2:
          "Due to serious policy violations, your account is permanently suspended. You can no longer use Discord.",
        SAFETY_HUB_ACCOUNT_STANDING_ALL_GOOD_SHORT: "$[All good!](hook)",
        SAFETY_HUB_ACCOUNT_STANDING_LIMITED_SHORT: "$[Limited](hook)",
        SAFETY_HUB_ACCOUNT_STANDING_VERY_LIMITED_SHORT: "$[Very limited](hook)",
        SAFETY_HUB_ACCOUNT_STANDING_AT_RISK_SHORT: "$[At risk](hook)",
        SAFETY_HUB_ACCOUNT_STANDING_SUSPENDED_SHORT: "$[Suspended](hook)",
        SAFETY_HUB_CLASSIFICATION_DETAIL_HEADER:
          "You broke the rules for $[!!{classification_type}!!](classificationHook).",
        SAFETY_HUB_CLASSIFICATION_DETAIL_HEADER_V2:
          "You broke the rules for $[!!{classification_type}!!](classificationHook).",
        SAFETY_HUB_CLASSIFICATION_DETAIL_HEADER_V3:
          "You broke Discord's rules for $[!!{classification_type}!!](classificationHook)",
        SAFETY_HUB_CLASSIFICATION_DETAIL_HEADER_GUILD:
          "Your server {guildName} broke Discord's rules for $[!!{classification_type}!!](classificationHook)",
        SAFETY_HUB_CLASSIFICATION_DETAIL_EVIDENCE_HEADER:
          "YOUR RECENT ACTIVITY",
        SAFETY_HUB_CLASSIFICATION_DETAIL_ACTIONS_TAKEN_HEADER:
          "WE TOOK THESE ACTIONS",
        SAFETY_HUB_CLASSIFICATION_DETAIL_ACTIONS_TAKEN_HEADER_V2:
          "What this means for you",
        SAFETY_HUB_CLASSIFICATION_DETAIL_ACTION_EXPLAINED_HEADER:
          "WHY WE TOOK THIS ACTION",
        SAFETY_HUB_CLASSIFICATION_DETAIL_ACTION_EXPLAINED_DESCRIPTION:
          "Our teams use automation and manual review to enforce our rules. We found your activity violated our [Terms of Service]({tosLink}) or [Community Guidelines]({communityGuidelinesLink}).",
        SAFETY_HUB_CLASSIFICATION_DETAIL_WHAT_YOU_CAN_DO_HEADER:
          "What you can do",
        SAFETY_HUB_CLASSIFICATION_DETAIL_WHAT_YOU_CAN_DO_DESCRIPTION:
          "To keep your account in good standing, get familiar with our [Terms of Service]({tosLink}) and [Community Guidelines]({communityGuidelinesLink}).",
        SAFETY_HUB_CLASSIFICATION_DETAIL_ACTION_APPEAL:
          "Did we make a mistake? [Let us know]({link})",
        SAFETY_HUB_CLASSIFICATION_DETAIL_ACTION_APPEAL_V2:
          "Did we make a mistake? $[Let us know](letUsKnowHook)",
        SAFETY_HUB_CLASSIFICATION_DETAIL_POLICY_CARD_HEADER:
          "Learn about our {classificationDescription} policy.",
        SAFETY_HUB_CLASSIFICATION_DETAIL_POLICY_CARD_HEADER_V2:
          "Learn about our {classificationDescription} policy.",
        SAFETY_HUB_CLASSIFICATION_DETAIL_POLICY_CARD_SUBTEXT:
          "Discord's rules apply to everyone",
        SAFETY_HUB_CLASSIFICATION_DETAIL_REDIRECT: "Go to account standing",
        SAFETY_HUB_CLASSIFICATION_DETAIL_REDIRECT_V2: "Go to account standing",
        SAFETY_HUB_CLASSIFICATION_DETAIL_APPEAL_STATUS:
          "You requested a review of this violation.",
        SAFETY_HUB_ERROR_MESSAGE: "Something went wrong...",
        SAFETY_HUB_ERROR_ACTION_BUTTON: "Retry",
        SAFETY_HUB_VIOLATIONS_CONTAINER_HEADER_ACTIVE:
          "ACTIVE VIOLATIONS — {count}",
        SAFETY_HUB_VIOLATIONS_CONTAINER_HEADER_EXPIRED:
          "EXPIRED VIOLATIONS  — {count}",
        SAFETY_HUB_VIOLATIONS_CONTAINER_HEADER_ACTIVE_V2:
          "Active violations — {count}",
        SAFETY_HUB_VIOLATIONS_CONTAINER_HEADER_EXPIRED_V2:
          "Expired violations — {count}",
        SAFETY_HUB_VIOLATIONS_CONTAINER_SUBHEADER_ACTIVE:
          "Violations affect your account status until they expire",
        SAFETY_HUB_VIOLATIONS_CONTAINER_SUBHEADER_ACTIVE_V2:
          "These affect your account status until they expire.",
        SAFETY_HUB_VIOLATIONS_CONTAINER_SUBHEADER_EXPIRED:
          "These violations no longer affect your account",
        SAFETY_HUB_VIOLATIONS_CONTAINER_SUBHEADER_EXPIRED_V2:
          "These no longer affect your account status.",
        SAFETY_HUB_VIOLATIONS_CONTAINER_EMPTY_STATE_ACTIVE:
          "Your account doesn't have any active violations.",
        SAFETY_HUB_VIOLATIONS_CONTAINER_EMPTY_STATE_EXPIRED:
          "Your account doesn't have any expired violations.",
        SAFETY_HUB_VIOLATIONS_CONTAINER_EMPTY_STATE_SUBTEXT_ACTIVE:
          "If you break Discord's rules, we'll let you know about it here.",
        SAFETY_HUB_VIOLATIONS_CONTAINER_EMPTY_STATE_SUBTEXT_EXPIRED:
          "If you have any expired violations, we'll show them here.",
        SAFETY_HUB_VIOLATIONS_CONTAINER_PAGINATION_BUTTON:
          "See {nextPageSize} more",
        SAFETY_HUB_VIOLATIONS_CONTAINER_EXPIRATION_DATE_ACTIVE:
          "Expires on {expirationDate}",
        SAFETY_HUB_VIOLATIONS_CONTAINER_EXPIRATION_DATE_EXPIRED:
          "Expired on {expirationDate}",
        SAFETY_HUB_VIOLATIONS_CONTAINER_DESCRIPTION:
          "You broke the rules for $[!!{description}!!](descriptionHook).",
        SAFETY_HUB_VIOLATIONS_CONTAINER_DESCRIPTION_V2:
          "You broke Discord's rules for $[!!{description}!!](descriptionHook).",
        SAFETY_HUB_VIOLATIONS_CONTAINER_DESCRIPTION_GUILD:
          "Your server {guildName} broke Discord's rules for $[!!{description}!!](descriptionHook).",
        SAFETY_HUB_VIOLATIONS_CONTAINER_NEW: "NEW",
        SAFETY_HUB_STANDALONE_PAGE_NAGBAR:
          "You lost access to Discord. Review your violations to understand for how long and why.",
        SAFETY_HUB_STANDALONE_PAGE_NAGBAR_CTA: "Learn More",
        SAFETY_POLICY_NOTICE_BUTTON: "Learn more",
        SAFETY_POLICY_NOTICE_HEADER: "You broke Discord's community guidelines",
        SAFETY_POLICY_NOTICE_BODY:
          "We've taken action that affects your account.",
        SAFETY_POLICY_NOTICE_DAYS_AGO:
          "{daysAgo, plural, =0 {Today} =1 {Yesterday} other {# days ago}}",
        SAFETY_SYSTEM_NOTIFICATION_SEE_DETAILS_BUTTON: "See Details",
        SAFETY_SYSTEM_NOTIFICATION_LEARN_MORE_BUTTON: "Learn More",
        BLOCKED_BY_PROXY_NOTICE:
          "Please bear with us as we are encountering some network errors.",
        OBSCURED_CONTENT_HIDE_CONTENT_ALT: "Hide content",
        OBSCURED_CONTENT_SHOW_CONTENT_ALT: "Show content",
        OBSCURED_CONTENT_INFO_LINK_TEXT: "Why we hide some media",
        EXPLICIT_CONTENT_WARNING: "May contain sensitive content",
        EXPLICIT_CONTENT_WARNING_PENDING: "May contain sensitive content",
        EXPLICIT_CONTENT_WARNING_TOOLTIP:
          "Content Warning: This may contain sensitive content",
        EXPLICIT_CONTENT_ALT:
          "Content Warning: This may contain sensitive content",
        EXPLICIT_CONTENT_BUTTON_TOOLTIP: "Reveal sensitive content",
        OBSCURED_CONTENT_LEARN_MORE_MESSAGE_LABEL: "Why we hide some media",
        OBSCURED_CONTENT_LEARN_MORE_HEADER: "Why we hide some media",
        OBSCURED_CONTENT_LEARN_MORE_DESCRIPTION_ADULT:
          "We automatically detect and filter media that may be sensitive. You can manage this filter in your Privacy & Safety settings.",
        OBSCURED_CONTENT_LEARN_MORE_DESCRIPTION_TEEN:
          "We automatically detect and filter media that may be sensitive to help protect people on Discord who are under 18. You can learn more about this in our Help Center.",
        OBSCURED_CONTENT_LEARN_MORE_HEADER_IMAGE_ALT: "Safety Alert",
        OBSCURED_CONTENT_LEARN_MORE_MODAL_LABEL: "Why we hide some media",
        OBSCURED_CONTENT_UPDATE_SETTINGS_CTA: "Go to Settings",
        OBSCURED_CONTENT_LEARN_MORE_DISMISS: "Dismiss",
        OBSCURED_CONTENT_LEARN_MORE_FALSE_POSITIVE:
          "Did we make a mistake? [Let us know](handleFalsePositiveHook)",
        OBSCURED_CONTENT_MARK_FALSE_POSITIVE: "Mark As Not Sensitive",
        OBSCURED_CONTENT_MARK_FALSE_POSITIVE_SUCCESS:
          "Thanks for letting us know!",
        OBSCURED_CONTENT_MARK_FALSE_POSITIVE_MODAL_HEADER:
          "Mark as not sensitive",
        OBSCURED_CONTENT_MARK_FALSE_POSITIVE_MODAL_DESCRIPTION:
          "Help improve our sensitive media filter by forwarding this media to Discord.",
        OBSCURED_CONTENT_SETTINGS_HEADER: "Sensitive Media",
        OBSCURED_CONTENT_SETTINGS_DESC:
          "Choose what you see when uploaded or linked media may contain sensitive content. [Learn more about sensitive media.]({learnMoreLink})",
        OBSCURED_CONTENT_SETTING_FRIENDS: "Direct messages from friends",
        OBSCURED_CONTENT_SETTING_NON_FRIENDS: "Direct messages from others",
        OBSCURED_CONTENT_SETTING_GUILDS: "Server channel messages",
        OBSCURED_CONTENT_SETTINGS_OPTION_SHOW: "Show",
        OBSCURED_CONTENT_SETTINGS_OPTION_BLUR: "Blur",
        OBSCURED_CONTENT_SETTINGS_OPTION_BLOCK: "Block",
        GUILD_HEADER_ACTIVE_CHANNELS_COUNT:
          "{count, plural, =1 {# Active Channel} other {# Active Channels}}",
        GUILD_HEADER_ACTIVE_CHANNELS_COUNT_UNKNOWN: "— Active Channels",
        GUILD_HEADER_ONLINE_COUNT: "{count, number} Online",
        GUILD_HEADER_ONLINE_COUNT_UNKNOWN: "— Online",
        GUILD_HEADER_MEMBER_COUNT:
          "{count, plural, =1 {# Member} other {# Members}}",
        GUILD_HEADER_MEMBER_COUNT_UNKNOWN: "— Members",
        SENDER_BLOCKED_MEDIA_MARK_FALSE_POSITIVE: "Mark as not sensitive",
        SENDER_BLOCKED_MEDIA_BOT_GUILD_MESSAGE:
          "Your message could not be sent. It may contain explicit media, which has been blocked by the server.",
        SENDER_BLOCKED_MEDIA_BOT_DMS_MESSAGE:
          "Your message could not be sent. It may contain sensitive media, which has been blocked by someone in this conversation.",
        SENDER_BLOCKED_MEDIA_EXPIRED_ERROR_HEADER:
          "Unable to Mark as Not Sensitive",
        SENDER_BLOCKED_MEDIA_EXPIRED_ERROR_BODY:
          "We don't store blocked media permanently. Since this media was uploaded a while ago, the option to mark it as not sensitive has expired.",
        SAFETY_WARNING_BANNER_CLOSE_A11Y: "Close",
        SAFETY_TOOLS_BUTTON_LABEL: "Open Safety Tools",
        STRANGER_DANGER_BANNER_HEADER: "Unwanted message?",
        STRANGER_DANGER_BANNER_DESCRIPTION:
          "If you don't want to chat with this person, you can block or mute them.",
        STRANGER_DANGER_BANNER_MORE_TIPS: "More tips",
        STRANGER_DANGER_BANNER_BLOCK: "Block",
        STRANGER_DANGER_BANNER_CLOSE_A11Y: "Close",
        STRANGER_DANGER_BLOCK_CONFIRM: "User Blocked",
        STRANGER_DANGER_MUTE_CONFIRM: "User Muted",
        STRANGER_DANGER_UNMUTE_CONFIRM: "User Unmuted",
        STRANGER_DANGER_TIPS_HEADER: "Safety Tips",
        STRANGER_DANGER_TIPS_DESCRIPTION: "Remember, you're always in control",
        STRANGER_DANGER_TIPS_1:
          "Trust your gut. If something feels off, you can always take a break.",
        STRANGER_DANGER_TIPS_2:
          "Be careful with private details like your full name, school, or how to find you off Discord.",
        STRANGER_DANGER_TIPS_3:
          "You're not alone. If you need help, talk to a trusted adult. You can also report messages to us anytime.",
        STRANGER_DANGER_MORE_HEADER: "More you can do",
        STRANGER_DANGER_MORE_MUTE: "Mute",
        STRANGER_DANGER_MORE_UNMUTE: "Unmute",
        STRANGER_DANGER_MORE_MUTE_DESCRIPTION:
          "Turn off notifications for this chat.",
        STRANGER_DANGER_MORE_BLOCK: "Block",
        STRANGER_DANGER_MORE_BLOCK_DESCRIPTION:
          "Remove their ability to message, mention, or add you as a friend.",
        STRANGER_DANGER_WAS_THIS_HELPFUL: "Was this helpful?",
        STRANGER_DANGER_THUMBS_UP_A11Y: "Vote yes (thumbs up)",
        STRANGER_DANGER_THUMBS_DOWN_A11Y: "Vote no (thumbs down)",
        STRANGER_DANGER_FEEDBACK_CONFIRM: "Thanks for your feedback!",
        STRANGER_DANGER_CONTEXT_MENU_CLEAR:
          "Reset Safety Warnings (Experimental)",
        INAPPROPRIATE_CONVERSATION_TAKEOVER_HEADER:
          "This conversation may not be safe",
        INAPPROPRIATE_CONVERSATION_TAKEOVER_DESCRIPTION:
          "It looks like {username} is saying things that could put your safety at risk. Take action to protect yourself.",
        INAPPROPRIATE_CONVERSATION_TAKE_ACTION: "Take action",
        INAPPROPRIATE_CONVERSATION_READ_SAFETY_TIPS: "Read safety tips",
        INAPPROPRIATE_CONVERSATION_TAKE_ACTION_HEADER: "Take action",
        INAPPROPRIATE_CONVERSATION_TAKE_ACTION_DESCRIPTION:
          "We got you. Here's what you can do.",
        INAPPROPRIATE_CONVERSATION_SAFETY_TIPS_HEADER: "Safety tips",
        INAPPROPRIATE_CONVERSATION_TIPS_DESCRIPTION:
          "Remember, you're always in control",
        INAPPROPRIATE_CONVERSATION_TIPS_1:
          "Trust your gut. If something feels off, you can always take a break.",
        INAPPROPRIATE_CONVERSATION_TIPS_2:
          "Be careful with private details like your full name, school, or how to find you off Discord.",
        INAPPROPRIATE_CONVERSATION_TIPS_3:
          "You're not alone. If you need help, talk to a trusted adult. You can also report messages to us anytime.",
        INAPPROPRIATE_CONVERSATION_WUMPUS_EXCLAMATION_ALT:
          "Wumpus looking worried at a computer screen with an exclamation warning symbol above.",
        INAPPROPRIATE_CONVERSATION_WUMPUS_LIGHTBULB_ALT:
          "Wumpus looking delighted at a computer screen with a light bulb above.",
        INAPPROPRIATE_CONVERSATION_SAFETY_TIPS_ALT:
          "An open book with a warning icon and color blocks.",
        INAPPROPRIATE_CONVERSATION_BANNER_HEADER:
          "It looks like this conversation may not be safe",
        INAPPROPRIATE_CONVERSATION_BANNER_DESCRIPTION:
          "Take action to protect yourself.",
        INAPPROPRIATE_CONVERSATION_BANNER_OPEN_SAFETY_TOOLS_BUTTON:
          "Open safety tools",
        INAPPROPRIATE_CONVERSATION_BANNER_BLOCK_BUTTON: "Block",
        INAPPROPRIATE_CONVERSATION_BLOCK_CONFIRM: "User Blocked",
        URF_LANDING_PAGE_TITLE: "Report Illegal Content",
        URF_LANDING_PAGE_SUBTITLE:
          "Use these forms to report illegal content under the Digital Services Act (DSA). For reports of copyright or trademark infringement please [go here]({supportURL}).",
        URF_LANDING_PAGE_REPORT_USER_PROFILE_BUTTON: "Report a User Profile",
        URF_LANDING_PAGE_REPORT_MESSAGE_BUTTON: "Report a Message",
        EMAIL_ENTER_MODAL_INPUT_ERROR: "Not a well formed email address.",
        IN_APP_REPORTING_FREE_TEXT_INPUT_ERROR: "Invalid Input",
        LEGACY_CHAT_INPUT_SLASH_COMMAND_MISSING_HELP_MESSAGE:
          "Why don't I see application commands?",
        LEGACY_CHAT_INPUT_SLASH_COMMAND_EXPLANATION_MODAL_TITLE:
          "Upgrade your chat",
        LEGACY_CHAT_INPUT_SLASH_COMMAND_EXPLANATION_MODAL_MESSAGE:
          "Get access to slash commands and other great ways to chat by enabling our latest features.\n\nYou can always go back to legacy chat at any time by heading over to $[User Settings > Accessibility](openSettingsHook).",
        LEGACY_CHAT_INPUT_SLASH_COMMAND_EXPLANATION_MODAL_BUTTON_CTA:
          "Enable now",
        LARGE_FILE_UPLOAD_POWERED_BY_NITRO:
          "Large file upload, powered by Nitro • [Learn More](onClick)",
        CHANNEL_LIST_V2_NUX_TITLE: "Find more channels here!",
        CHANNEL_LIST_V2_NUX_BODY:
          "Use **Browse Channels** inside Server Menu to add more channels.",
        ASSISTANT_SKIP_BUTTON: "Skip Tutorial",
        ASSISTANT_SPLASH_TITLE: "Welcome, $[username](usernameHook)",
        ASSISTANT_SPLASH_DESCRIPTION:
          "Say hi to Wumpus. He'll show you how Discord helps friends hang out more often.",
        ASSISTANT_SPLASH_BUTTON: "Get Started",
        ASSISTANT_SPLASH_BODY:
          "Say hi to Wumpus, he's here to show you how Discord works!",
        ASSISTANT_VOICE_STEP_BODY:
          '**Tap "Join"** to show your friends you\'re available to hang.',
        ASSISTANT_VOICE_JOINED_STEP_BODY:
          "**Nice!** Now your friends can see you're around and stop by!",
        ASSISTANT_TEXT_STEP_BODY:
          "**Text in the main chat** while you chill in !!{voiceChannelName}!!.",
        ASSISTANT_TEXT_STEP_BODY_NO_VC: "Text in the main chat.",
        ASSISTANT_CHAT_BANNER_TEXT: "Say hi so your friends know you're here.",
        ASSISTANT_CHAT_BANNER_BUTTON_TEXT: "Wave",
        ASSISTANT_CHAT_BANNER_CLOSE_A11Y_LABEL: "Close",
        ASSISTANT_VOICE_PANEL_PIP_OVERLAY_TITLE:
          "While you're chilling, friends will pop in like this. Tap to see more.",
        ASSISTANT_VOICE_PANEL_ACTIVITY_TITLE:
          "Share your screen, listen to music, or just chill quietly doing your own thing!",
        SCREENSHARE_APPS_TIKTOK: "TikTok",
        SCREENSHARE_APPS_TIKTOK_ACCESSIBILITY_LABEL: "Screenshare TikTok",
        SCREENSHARE_APPS_YOUTUBE: "YouTube",
        SCREENSHARE_APPS_YOUTUBE_ACCESSIBILITY_LABEL: "Screenshare YouTube",
        SCREENSHARE_APPS_INSTAGRAM: "Instagram",
        SCREENSHARE_APPS_INSTAGRAM_ACCESSIBILITY_LABEL: "Screenshare Instagram",
        SCREENSHARE_APPS_PHOTOS: "Photos",
        SCREENSHARE_APPS_PHOTOS_ACCESSIBILITY_LABEL: "Screenshare Photos",
        SCREENSHARE_APPS_SNAPCHAT: "Snapchat",
        SCREENSHARE_APPS_SNAPCHAT_ACCESSIBILITY_LABEL: "Screenshare Snapchat",
        STATUS_POPOUT_CUSTOM_TITLE: "Custom",
        STATUS_POPOUT_SET_CUSTOM: "Set Custom Activity",
        STATUS_POPOUT_EDIT_CUSTOM: "Edit Custom Activity",
        STATUS_POPOUT_CLEAR_STATUS: "Clear Status",
        SET_STATUS_MODAL_TITLE: "Set Custom Voice Activity",
        SET_STATUS_MODAL_SUBTITLE:
          "We'll save your most recent creations and auto-delete them after a while.",
        SET_STATUS_MODAL_CTA: "Confirm",
        STATUS_LEAD_IN_JUST: "Right now, I'm -",
        STATUS_CHILLING: "Chilling tbh",
        STATUS_GAMING: "GAMING",
        STATUS_FOCUSING: "In the zone",
        STATUS_BRB: "Gonna BRB",
        STATUS_EATING: "Grubbin",
        STATUS_IN_TRANSIT: "Wandering IRL",
        STATUS_WATCHING: "Watchin' stuff",
        STATUS_NONE: "No status",
        HANG_STATUS: "Hang Status",
        HANG_STATUS_LOCATION: "in !!{guildName}!!",
        CUSTOM_HANG_STATUS: "Custom Status",
        CUSTOM_HANG_STATUS_CTA: "Jump in here!",
        CUSTOM_HANG_STATUS_PLACEHOLDER: "What are you doing?",
        CUSTOM_HANGS_STATUS_COPY_CTA: "Swipe status",
        HANG_STATUS_VC_ROW_ADD: "Add a status",
        HANG_STATUS_HELP:
          "Show your friends what you're up to by setting an activity status.",
        LAUNCH_PAD: "LaunchPad",
        LAUNCH_PAD_HISTORY: "Recent Channels",
        LAUNCH_PAD_STUFF_TO_CATCH_UP_ON: "Stuff To Catch Up On",
        LAUNCH_PAD_RECENT_SERVERS: "Recent Servers",
        LAUNCH_PAD_TAB_A11Y_LABEL: "Open LaunchPad",
        REPORT_SECOND_LOOK_SUCCESS_TITLE: "We have received your request.",
        REPORT_SECOND_LOOK_FAILURE_TITLE:
          "You have already submitted a review request for this report.",
        REPORT_SECOND_LOOK_NOT_FOUND_ERROR: "Report not found.",
        REPORT_SECOND_LOOK_ALREADY_REQUESTED_ERROR:
          "Report Review already requested.",
        REPORT_SECOND_LOOK_LIMITED_TIME_ERROR:
          "Report Review is only available for a limited time.",
        REPORT_SECOND_LOOK_INELIGIBLE_ERROR:
          "Report is ineligible for Review request.",
        REPORT_SECOND_LOOK_UNKNOWN_ERROR: "Something went wrong. Try again.",
        APPEAL_INGESTION_AGE_VERIFICATION_LINK_TITLE: "Submit age verification",
        APPEAL_INGESTION_LEARN_MORE_LINK_TITLE: "Learn more about this policy",
        APPEAL_INGESTION_BREADCRUMBS_HEADER: "REASON",
        APPEAL_INGESTION_MODAL_CONFIRM_SUBMISSION_ADD_DETAILS: "Add details",
        APPEAL_INGESTION_MODAL_CONFIRM_SUBMISSION_EDIT_DETAILS: "Edit details",
        APPEAL_INGESTION_MODAL_CONFIRM_SUBMISSION_ERROR:
          "Error requesting review",
        APPEAL_INGESTION_MODAL_CONFIRM_SUBMISSION_FOOTER:
          "Your request will be sent to our team. Violations will stay on your account until they expire or are removed after review.",
        APPEAL_INGESTION_MODAL_CONFIRM_SUBMISSION_SUBHEADER:
          "Here's a summary of your request.",
        APPEAL_INGESTION_FREE_TEXT_REASON_ACTION_SHEET_SUBHEADER:
          "You can add context or anything else that might be helpful for us to know.",
        APPEAL_INGESTION_FREE_TEXT_REASON_ACTION_SHEET_PLACEHOLDER:
          "What would you like us to know?",
        APPEAL_INGESTION_FREE_TEXT_REASON_ACTION_SHEET_FOOTER:
          "Your note will be shared with Discord. Please be advised that abusive language may count as another violation.",
        APPEAL_INGESTION_MODAL_HEADER: "Request a review",
        APPEAL_INGESTION_MODAL_REQUEST_SENT_HEADER: "Request sent",
        APPEAL_INGESTION_MODAL_REQUEST_SENT_SUBHEADER:
          "Thank you for your submission. We will let you know the outcome of this review.",
        APPEAL_INGESTION_MODAL_REQUEST_SENT_ACTIONS_HEADER: "More you can do",
        APPEAL_INGESTION_MODAL_REQUEST_SENT_GUIDELINES_LINK:
          "View our Community Guidelines",
        APPEAL_INGESTION_MODAL_REQUEST_SENT_RULES_LINK:
          "Learn about how we enforce rules",
        APPEAL_INGESTION_MODAL_THANKS_HEADER: "Thanks for letting us know.",
        APPEAL_INGESTION_MODAL_SPAM_HEADER: "This request is for spam.",
        APPEAL_INGESTION_MODAL_SPAM_LINK: "Contact Discord Support",
        APPEAL_INGESTION_MODAL_SPEED_BUMP_SUBHEADER:
          "Did we make a mistake? Let us know.",
        APPEAL_INGESTION_MODAL_SPEED_BUMP_ACTIVITY_HEADER: "YOUR ACTIVITY",
        APPEAL_INGESTION_MODAL_SPEED_BUMP_ACTIVITY_SUBHEADER:
          "We determined this content violates our policy",
        APPEAL_INGESTION_MODAL_SPEED_BUMP_POLICY_HEADER: "OUR POLICY",
        APPEAL_INGESTION_MODAL_COLLECT_SIGNAL_SUBHEADER:
          "Please select a reason for your request.",
        APPEAL_INGESTION_MODAL_COLLECT_SIGNAL_DIDNT_VIOLATE_POLICY:
          "I didn't violate the policy",
        APPEAL_INGESTION_MODAL_COLLECT_SIGNAL_TOO_STRICT_UNFAIR:
          "The policy is too strict or unfair",
        APPEAL_INGESTION_MODAL_COLLECT_SIGNAL_DONT_AGREE_PENALTY:
          "I don't agree with the penalty",
        APPEAL_INGESTION_MODAL_COLLECT_SIGNAL_SOMETHING_ELSE: "Something else",
        APPEAL_INGESTION_MODAL_COLLECT_SIGNAL_DISCLAIMER:
          "This request is sent to Discord. Creating false reports and/or spamming the report button may result in suspension of reporting abilities. Learn more from the [Discord Community Guidelines](https://discord.com/guidelines).",
        APPEAL_INGESTION_MODAL_SPEED_BUMP_LEARN_MORE_OTHER_OPTIONS_DSA:
          "Learn more about your other options under the [Digital Services Act](https://support.discord.com/hc/articles/17861767909527).",
        APPEAL_INGESTION_MODAL_SPEED_BUMP_SUBMIT_SPAM: "Submit a spam appeal",
        POLL: "Poll",
        POLLS: "Polls",
        POLL_NOTIFICATIONS: "Polls",
        POLL_CHOOSE_SINGLE_ANSWER_PROMPT: "Choose an Answer",
        POLL_SUBMIT_VOTE: "Vote",
        POLL_VOTES_COUNT: "{count, plural, one {1 vote} other {{count} votes}}",
        POLL_ALREADY_VOTED: "Voted",
        POLL_EDIT_VOTE: "Change Vote",
        POLL_ANSWER_VOTED_ARIA: "You voted for this answer",
        POLL_OPTIONS_ARIA: "Poll options",
        POLL_EXPIRY_DAYS_REMAINING:
          "{days, plural, one {1 day} other {{days} days left}}",
        POLL_EXPIRY_HOURS_REMAINING:
          "{hours, plural, one {1 hour} other {{hours} hours left}}",
        POLL_EXPIRY_MINUTES_REMAINING:
          "{minutes, plural, one {1 min} other {{minutes} mins left}}",
        POLL_EXPIRED: "Poll closed",
        POLL_NOT_INTERACTIVE: "View original message to interact",
        POLL_NO_VOTES_FOR_ANSWER_TITLE: "Nothing to see here",
        POLL_NO_VOTES_FOR_ANSWER_BODY: "There are no votes for this answer.",
        POLL_ANSWER_VOTES_MODAL_TITLE: "Votes",
        POLL_TAP_FOR_VOTERS_A11Y_ANDROID: "Reveal voters",
        POLL_TAP_FOR_VOTERS_A11Y_IOS: "Reveals voters",
        CREATE_POLL: "Create Poll",
        CREATE_POLL_HEADING: "Create a Poll",
        CREATE_POLL_EXPIRATION: "Poll will be live for 24 hours",
        CREATE_POLL_QUESTION_INPUT_LABEL: "Question",
        CREATE_POLL_QUESTION_PLACEHOLDER: "What question do you want to ask?",
        CREATE_POLL_LAYOUTS_RADIOGROUP_ARIA_LABEL: "Poll answer style",
        CREATE_POLL_LAYOUT_DEFAULT: "Text answers with optional media",
        CREATE_POLL_LAYOUT_IMAGE: "Media only answers",
        CREATE_POLL_ADD_IMAGE_ARIA: "Add media, answer {answerNumber}",
        CREATE_POLL_EDIT_IMAGE_ARIA:
          "Update media, {imageName}, answer {answerNumber}",
        CREATE_POLL_ANSWER_INPUT_LABEL: "Answer {answerNumber}",
        CREATE_POLL_ANSWER_PLACEHOLDER: "Type your answer",
        CREATE_POLL_ADD_ANSWER_BUTTON: "Add another answer",
        CREATE_POLL_TEXT_PRECEDING_DURATION_SELECTION: "Poll will be live for",
        CREATE_POLL_DURATION_OPTION_LABEL_1_HOUR: "1 hour",
        CREATE_POLL_DURATION_OPTION_LABEL_24_HOURS: "24 hours",
        CREATE_POLL_DURATION_OPTION_LABEL_3_DAYS: "3 days",
        CREATE_POLL_DURATION_OPTION_LABEL_7_DAYS: "1 week",
        CREATE_POLL_DURATION_SELECTION_ARIA_LABEL:
          "Poll will be live for {duration}",
        CREATE_POLL_POLL_DURATION_HEADING: "Poll Duration",
        CREATE_POLL_DURATION_BUTTON_A11Y_HINT: "Tap to change poll duration",
        CREATE_POLL_MULTIPLE_ANSWERS: "Allow Multiple Answers",
        CREATE_POLL_POST: "Post",
        CREATE_POLL_REMOVE_ANSWER_A11Y: "Remove answer {answerNumber}",
        CREATE_POLL_MODAL_WARNING_MODAL_TITLE: "Are you sure?",
        CREATE_POLL_MODAL_WARNING_UNSAVED_CHANGES_BODY:
          "Are you sure you want to exit? Any changes made will be lost if you exit now.",
        CREATE_POLL_MODAL_WARNING_UNSAVED_CHANGES_CTA_EXIT: "Exit",
        CREATE_POLL_MODAL_WARNING_UNSAVED_CHANGES_BACK_TO_EDITING:
          "Back to editing",
        CREATE_POLL_REMOVE_ANSWER: "Remove Answer",
        CREATE_POLL_ADD_IMAGE: "Add Media",
        CREATE_POLL_REPLACE_IMAGE: "Replace Media",
        CREATE_POLL_POLL_ANSWER: "Poll Answer",
        CREATE_POLL_EDIT_ALT_TEXT: "Edit Image Description (Alt Text)",
        CREATE_POLL_EDIT_IMAGE_DESCRIPTION: "Edit Image Description",
        CREATE_POLL_ADD_ALT_ARIA_LABEL: "Add alt text, answer {answerNumber}",
        CREATE_POLL_EDIT_ALT_ARIA_LABEL: "Edit alt text, answer {answerNumber}",
        CREATE_POLL_ALT_TEXT_LABEL: "Image Description (Alt Text)",
        CREATE_POLL_ALT_TEXT_SCREEN_READER_HINT: "Alt text:",
        POLL_EXPRESSION_PICKER_BUTTON_ARIA: "Select media",
        EXPRESSION_PICKER_UPLOAD: "Upload",
        EXPRESSION_PICKER_UPLOAD_IMAGE_TAG: "IMAGE",
        EXPRESSION_PICKER_UPLOAD_DESCRIPTION:
          "Drag and drop or click to upload an image",
        EXPRESSION_PICKER_UPLOAD_ARIA: "Upload an image",
        POLL_END_EARLY: "End Poll Now",
        POLL_END_EARLY_CONFIRMATION_TITLE: "End Poll Now?",
        POLL_END_EARLY_CONFIRMATION_TEXT:
          "This will close the poll immediately and reveal the results.",
        POLL_SENT_NOTIFICATION: "[poll] !!{question}!!",
        SUMMONED: "Summoned!",
        WAVED_AT_USER: "\uD83D\uDC4B You waved at !!{username}!!",
        WAVED_AT_YOU: "\uD83D\uDC4B !!{username}!! waved at you",
        YOU_ARE_IN_CHANNEL: "You are in $[](channelHook)",
        THEY_ARE_IN_CHANNEL: "They're hanging out in $[](channelHook)",
        YOU_ARE_IN_CHANNEL_NAME: "You are in #!!{channelName}!!",
        THEY_ARE_IN_CHANNEL_NAME: "They're hanging out in #!!{channelName}!!",
        HANGOUT_OVER_SENDER: "The hangout is over, want to start it again?",
        HANGOUT_OVER_RECEIVER: "You missed the hangout :(",
        WAVE_AGAIN: "Wave again",
        WAVE_BACK: "Wave back",
        JOIN_HANGOUT: "Join Hangout",
        CANNOT_ACCESS_HANGOUT: "You cannot access this hangout",
        GEO_RESTRICTED_MODAL_TITLE: "Server Unavailable",
        GEO_RESTRICTED_MODAL_BODY:
          "**{serverName}** is not available in your region.",
        QUESTS: "Quests",
        QUESTS_AVAILABLE_THROUGH: "Available through {date}",
        QUESTS_SHOW_CODE: "Show code",
        QUESTS_CLAIM_REWARD: "Claim reward",
        QUESTS_CLAIM_YOUR_REWARD: "Claim your reward",
        QUESTS_ACCEPT: "Accept Quest",
        QUESTS_COMPLETE_TOOLTIP: "Hit claim to get your reward code!",
        QUESTS_ACCEPT_TOOLTIP:
          "Accept the quest and complete the task to unlock the reward",
        QUESTS_IN_PROGRESS_TOOLTIP: "Complete the task to unlock the reward",
        QUESTS_STREAM_TASK:
          "Stream {gameTitle} to a friend for {minutes} minutes",
        QUEST_REWARD: "Win {reward}",
        QUESTS_REWARD_CODE_HEADER: "Your reward code",
        QUESTS_REWARD_CODE_CONGRATS: "Congrats!",
        QUESTS_REWARD_CODE_PLATFORM_SELECTION_HEADER:
          "What is your preferred platform?",
        QUESTS_REWARD_CODE_ERROR:
          "Uh oh! Something went wrong, please try again later",
        QUESTS_REWARD_CODE_SELECT_PLATFORM_LABEL: "Choose a platform",
        QUESTS_REWARD_CODE_SELECT_PLATFORM_PLACEHOLDER: "Select platform",
        QUESTS_REWARD_CODE_SELECT_PLATFORM_INSTRUCTIONS:
          "We will generate a platform-specific code for your {rewardName}. **You will not be able to change your selection after hitting Get code.**",
        QUESTS_REWARD_CODE_DONE: "Done",
        QUESTS_REWARD_CODE_GET_CODE: "Get code",
        QUESTS_REWARD_CODE_TRY_AGAIN: "Try again",
        QUESTS_REWARD_CODE_UNCLAIMED_REWARD_TILE_SUBHEADER: "Claim this",
        QUESTS_REWARD_CODE_CLAIMED_REWARD_TILE_SUBHEADER: "You claimed this",
        QUESTS_REWARD_CODE_PLATFORM_CROSS_PLATFORM: "Cross-platform",
        QUESTS_REWARD_CODE_PLATFORM_PC: "PC",
        QUESTS_REWARD_CODE_PLATFORM_PLAYSTATION: "PlayStation",
        QUESTS_REWARD_CODE_PLATFORM_SWITCH: "Switch",
        QUESTS_REWARD_CODE_PLATFORM_XBOX: "Xbox",
        QUESTS_SPONSORED: "Sponsored",
        QUESTS_LEARN_MORE_V2: "Learn more",
        QUESTS_LEARN_MORE_STACKED: "Learn\n\nmore",
        QUESTS_ACCEPT_QUEST: "Accept Quest",
        QUESTS_INSTRUCTIONS_TO_WIN_REWARD:
          "Stream {gameTitle} to a friend for {streamingDurationRequirement, number} minutes and win {questReward}.",
        QUESTS_TRACK_YOUR_PROGRESS: "Track your progress",
        QUESTS_ACCEPTED_INSTRUCTIONS_TO_WIN_REWARD:
          "**Quest accepted!** Stream {gameTitle} to a friend for {streamingDurationRequirement, number} minutes and win {questReward}.",
        QUESTS_TITLE: "{questName} Quest",
        QUESTS_BAR_PROGRESS_EXPANDED_HEADING_INCOMPLETE:
          "Ready when you are...",
        QUESTS_BAR_PROGRESS_EXPANDED_HEADING_COMPLETE: "You did it!",
        QUESTS_BAR_PROGRESS_EXPANDED_SUBHEADING_INCOMPLETE:
          "Available until {expirationDate}.",
        QUESTS_BAR_PROGRESS_EXPANDED_SUBHEADING_COMPLETE:
          "Claim by {expirationDate}.",
        FORM_HELP_SYSTEM_CHANNEL_DEADCHAT_PROMPT_MESSAGE:
          "Prompt members to chat after this channel has been inactive for a while.",
        PROMPT_CAMERA_LOADING_TITLE: "What are you looking at?",
        PROMPT_CAMERA_ERROR: "There was an issue taking a photo, try again",
        DEADCHAT_ACTION_CAMERA: "My View",
        DEADCHAT_ACTION_STICKER: "Surprise Me",
        LIST_SUMMARY_LABEL_ONE: "!!{first}!!",
        LIST_SUMMARY_LABEL_TWO: "!!{first}!! and !!{second}!!",
        LIST_SUMMARY_LABEL_THREE: "!!{first}!!, !!{second}!!, and !!{third}!!",
        LIST_SUMMARY_LABEL_THREE_AND_OTHERS:
          "!!{first}!!, !!{second}!!, !!{third}!!, and {count, plural, one {1 other} other {{count} others}}",
        STOREFRONT: "App Store",
        STOREFRONT_TITLE: "{appName} App Store",
        STOREFRONT_APP_SUBSCRIPTIONS: "App Subscriptions",
        STOREFRONT_APP_SUBSCRIPTIONS_BODY:
          "Purchase subscriptions from {appName}",
        STOREFRONT_APP_PRODUCTS: "App Products",
        STOREFRONT_APP_PRODUCTS_BODY: "Purchase products from {appName}",
        STOREFRONT_SUBSCRIPTION: "Subscription",
        STOREFRONT_SUBSCRIBE: "Subscribe",
        STOREFRONT_SUBSCRIPTION_BENEFITS: "Subscription Benefits",
        QUIET_MODE_DISABLED: "Focus Mode Disabled",
        QUIET_MODE_ENABLED: "Focus Mode Enabled",
        QUIET_MODE_DND: "Focus Mode (DND) Enabled",
        QUIET_MODE_WHILE_DND_UPSELL_TITLE: "Switch to Online?",
        QUIET_MODE_WHILE_DND_UPSELL_BODY:
          "With Focus Mode, Discord will no longer show in-app, desktop notifications or play message sounds, just like with DND. Would you like to switch to Online?",
        QUIET_MODE_SETTINGS_LABEL: "Focus Mode (BETA)",
        QUIET_MODE_SETTINGS_DESCRIPTION:
          "Discord will not show in-app, desktop notifications or play message sounds.",
        QUIET_MODE_DISABLED_BY: "This is disabled by Focus Mode",
        QUIET_MODE_HABITUAL_DND_NOTICE:
          "You've been on Do Not Disturb for a while. Would you like to enable Focus Mode instead?",
      });
    },
    444051: function (e, _, E) {
      e.exports = Object.freeze({
        DISCORD_NAME: "Discord",
        DEFAULT_CONFIRMATION_MODAL_HEADER: "Are you sure?",
        DISAPPROVAL: "ಠ_ಠ",
        ENGLISH_LANGUAGE: "English",
        GO_LIVE_MODAL_SELECT_GUILD_FORM_TITLE:
          "Select a server for your stream",
        GO_LIVE_MODAL_GUILD_FORM_TITLE: "Where you're streaming",
        OVERLAY_NEWS_GO_LIVE_BODY_NO_VOICE_CHANNEL:
          "Stream {game} to your friends!",
        SYSTEM_MESSAGE_GUILD_STREAM_ACTIVE:
          "$[!!{username}!!](usernameHook) is live! Now streaming !!{activityName}!!. [Join Stream](onJoinStream)",
        SYSTEM_MESSAGE_GUILD_STREAM_ACTIVE_MOBILE:
          "[!!{username}!!](usernameOnClick) is live. [Join Stream](onJoinStream)",
        SYSTEM_MESSAGE_GUILD_STREAM_ENDED:
          "$[!!{username}!!](usernameHook) was live for {duration} in !!{channelName}!!",
        SYSTEM_MESSAGE_GUILD_STREAM_ENDED_MOBILE:
          "[!!{username}!!](usernameOnClick) was live for {duration}.",
        INVITE_YOUR_FRIENDS: "Invite your friends!",
        PROGRESS_STEPS_FINISHED: "Completed!",
        MESSAGE_STEP_TITLE: "Send your first message",
        CHANNEL_PERMISSIONS_READ_ONLY_TITLE: "Read Only",
        CHANNEL_PERMISSIONS_READ_ONLY_DESCRIPTION:
          "By making a channel read only, members will not be able to send messages.",
        ROLE_CREATE_ADD_MEMBERS_SUBTITLE:
          "Assign this role to your members. Members can have more than one role.",
        INSTANT_INVITE_YOU_HAVE_BEEN_INVITED_TO_JOIN_GROUP_DM_BY_USER:
          "**!!{username}!!** has invited you to join a group DM",
        INVITE_MODAL_NEVERMIND_BUTTON: "Nevermind",
        INVITE_APP_GMAIL: "Gmail",
        INVITE_APP_WHATSAPP: "WhatsApp",
        INVITE_APP_LINE: "Line",
        INVITE_APP_TWITTER: "Twitter",
        INVITE_APP_MESSENGER: "Messenger",
        INVITE_APP_TELEGRAM: "Telegram",
        INVITE_SEND_ERROR: "Message Failed",
        INVITE_MESSAGE_PLACEHOLDER:
          "hey come check out Discord with me !!{link}!!",
        INVITE_URGENT_DAYS_MESSAGE_PLACEHOLDER:
          "hey join me on Discord! Invite expires in {numDays, plural, one {1 day} other {{numDays} days}}. !!{link}!!",
        INVITE_URGENT_HOURS_MESSAGE_PLACEHOLDER:
          "hey join me on Discord! Invite expires in {numHours, plural, one {1 hour} other {{numHours} hours}}. !!{link}!!",
        INVITE_URGENT_MINUTES_PLACEHOLDER:
          "hey join me on Discord! Invite expires in {numMinutes, plural, one {1 minute} other {{numMinutes} minutes}}. !!{link}!!",
        INVITE_EXPIRATION_NOTICE: "Invite expires in **!!{duration}!!.**",
        SYSTEM_MESSAGE_INVITE_USERS_OWNER: "Wondering who to invite?",
        SYSTEM_MESSAGE_INVITE_USERS_DESCRIPTION_OWNER:
          "Start by inviting anyone who can help you build the server!",
        SYSTEM_MESSAGE_INVITE_NOTIFICATION:
          "Wondering who to invite? Start by inviting anyone who can help you build the server!",
        SYSTEM_MESSAGE_INVITE_USERS: "Invite your friends",
        SYSTEM_MESSAGE_INVITE_USERS_DESCRIPTION:
          "The best way to setup a server is with your buddies!",
        SYSTEM_MESSAGE_INVITE_USERS_BUTTON: "Send an Invite",
        SYSTEM_MESSAGE_INVITE_USERS_OWNER_COMPACT:
          "**Wondering who to invite?** Start by inviting anyone who can help you build the server! $[Send an invite](inviteHook)",
        SYSTEM_MESSAGE_INVITE_USERS_COMPACT:
          "**Invite your friends!** The best way to setup a server is with your buddies! $[Send an invite](inviteHook)",
        SOUNDPACK_LABEL: "Sound Pack",
        SOUNDPACK_CLASSIC_LABEL: "classic",
        SOUNDPACK_DETUNE_LABEL: "discord but something's off",
        STAGE_INSTANCE_TICKET_PURCHASE_CONFIRMATION_TITLE: "You're in.",
        UPCOMING_GUILD_STAGE_INSTANCE_DISCOVERY_EMPTY_STATE_SUB_TITLE:
          "Let people know what’s happening by scheduling an upcoming Stage.\nIt will show up here for everyone in this server.",
        DELETE_STAGE_EVENT_CONFIRMATION_DESCRIPTION:
          "Are you sure you want to delete **!!{eventName}!!**? This action cannot be undone.",
        CREATE_STAGE_INSTANCE_SELECT_GUILD_HEADER: "Where's the party?",
        GUILD_STAGES_LANDING_MOBILE_SUBTITLE:
          "Visit this link on your desktop to buy a ticket. Once you have a ticket, you'll be able to attend the event on desktop or mobile.",
        EVENT_CANCELED: "Canceled",
        GUILD_EVENT_DELETE_CONFIRM_BODY_IS_RECURRING:
          "Canceling this event will also **cancel all events** in this series.",
        DELETE_ALL_EVENTS: "Cancel all Events",
        DELETE_THIS_EVENT: "Cancel this Event",
        DELETE_ALL_EVENTS_IN_SERIES: "Cancel all Events in this Series",
        RESTORE_EVENT: "Restore Event",
        CREATE_EVENT_RECUR_LABEL: "Event Frequency",
        CREATE_EVENT_RECUR_NONE: "Does not repeat",
        CREATE_EVENT_RECUR_WEEKLY: "Weekly on {weekday}",
        CREATE_EVENT_RECUR_BIWEEKLY: "Every other {weekday}",
        CREATE_EVENT_RECUR_MONTHLY:
          "Monthly on the {nth, plural, =1 {first} =2 {second} =3 {third} =4 {fourth} =5 {fifth}} {weekday}",
        CREATE_EVENT_RECUR_YEARLY: "Annually on {date}",
        CREATE_EVENT_RECUR_WEEKDAYS: "Every weekday (Monday to Friday)",
        GUILD_SCHEDULED_EVENT_VIEW_MORE_RECURRENCES: "View future events",
        GUILD_SCHEDULED_EVENT_RECURRENCE_RULE: "Repeats {recurrenceRule}",
        GUILD_SCHEDULED_EVENT_REPEATS: "Events in series",
        GUILD_SCHEDULED_EVENT_REPEATS_WEEKLY: "Repeats every {weekday}",
        GUILD_SCHEDULED_EVENT_REPEATS_BIWEEKLY: "Repeats every other {weekday}",
        GUILD_SCHEDULED_EVENT_REPEATS_MONTHLY:
          "Repeats monthly on the {nth, plural, =1 {first} =2 {second} =3 {third} =4 {fourth} =5 {fifth}} {weekday}",
        GUILD_SCHEDULED_EVENT_REPEATS_YEARLY: "Repeats every {date}",
        GUILD_SCHEDULED_EVENT_REPEATS_WEEKDAYS:
          "Repeats every weekday (Monday to Friday)",
        GUILD_SCHEDULED_EVENT_RSVP_PICKER_HEADER_INTERESTED:
          "I am interested in...",
        GUILD_SCHEDULED_EVENT_RSVP_PICKER_HEADER_UNINTERESTED:
          "I am not interested in...",
        GUILD_SCHEDULED_EVENT_RSVP_PICKER_OPTION_SERIES:
          "All events in this series",
        GUILD_SCHEDULED_EVENT_RSVP_PICKER_OPTION_RECURRENCE: "This event",
        GUILD_CREATE_STAFF_ONLY_HINT:
          "Only Discord employees would be able to join this server.",
        EDIT_THIS_EVENT: "Edit this Event",
        EDIT_ALL_EVENTS: "Edit all Events in this Series",
        GUILD_EVENT_EDIT_CONFIRM_BODY_CONFIRM:
          "Are you sure you want to edit this event?",
        GUILD_EVENT_EDIT_CONFIRM_BODY_EDIT_ALL_HINT:
          "Editing this event will also **update all events** in this series.",
        GUILD_EVENT_RECURRING_COACHMARK_CTA: "Try it",
        GUILD_EVENT_RECURRING_COACHMARK_TITLE: "NEW! Repeating Events",
        GUILD_EVENT_RECURRING_COACHMARK_BODY:
          "You can now easily repeat events.",
        COPY_RECURRENCE_LINK: "Copy this Event Link",
        COPY_SERIES_LINK: "Copy Event Series Link",
        GET_MOBILE_APP_SUBTITLE:
          "Discord isn't supported on mobile web browsers. Join over 100 million people who use Discord to talk with communities and friends.",
        MOBILE_APP_DOWNLOAD_CTA: "Get our mobile app",
        MOBILE_APP_DOWNLOAD_SUBHEADER:
          "Keep the conversion going on our iOS or Android app.",
        QR_CODE_DOWNLOAD_CTA:
          "Scan this QR code for an easy download link for our iOS or Android apps.",
        DESKTOP_DOWNLOAD_DESCRIPTION:
          "More features, better performance, and easy access to all your conversations.",
        DESKTOP_DOWNLOAD_TITLE_MAC: "Discord for Mac",
        DESKTOP_DOWNLOAD_TITLE_WINDOWS: "Discord for Windows",
        DESKTOP_DOWNLOAD_TITLE_LINUX: "Discord for Linux",
        DESKTOP_DOWNLOAD_TITLE: "Discord for desktop",
        GUILD_SETTINGS_AUDIT_LOG_V2_FILTER: "Filters",
        GUILD_SETTINGS_AUDIT_LOG_V2_SORT: "Sort by Date",
        GUILD_SETTINGS_AUDIT_LOG_V2_MEMBER_BAN_ADD:
          '$[**!!{user}!!**](userHook) banned $[**!!{target}!!**](targetHook): "!!{reason}!!"',
        GUILD_SETTINGS_AUDIT_LOG_V2_PRIVATE_THREAD_CREATE:
          '$[**!!{user}!!**](userHook) created a private thread $["!!{target}!!"](targetHook)',
        GUILD_SETTINGS_AUDIT_LOG_V2_ANNOUNCEMENT_THREAD_CREATE:
          '$[**!!{user}!!**](userHook) created an announcement thread $["!!{target}!!"](targetHook)',
        GUILD_SETTINGS_AUDIT_LOG_V2_THREAD_CREATE:
          '$[**!!{user}!!**](userHook) created a thread $["!!{target}!!"](targetHook)',
        GUILD_SETTINGS_AUDIT_LOG_V2_THREAD_UPDATE:
          '$[**!!{user}!!**](userHook) made changes to the thread $["!!{target}!!"](targetHook)',
        GUILD_SETTINGS_AUDIT_LOG_V2_THREAD_DELETE:
          '$[**!!{user}!!**](userHook) deleted the thread $["!!{target}!!"](targetHook)',
        GUILD_SETTINGS_AUDIT_LOG_V2_SCHEDULED_EVENT_CREATE:
          '$[**!!{user}!!**](userHook) scheduled the event $["!!{target}!!"](targetHook)',
        GUILD_SETTINGS_AUDIT_LOG_V2_SCHEDULED_EVENT_UPDATE:
          '$[**!!{user}!!**](userHook) updated the scheduled event $["!!{target}!!"](targetHook)',
        GUILD_SETTINGS_AUDIT_LOG_V2_SCHEDULED_EVENT_DELETE:
          '$[**!!{user}!!**](userHook) canceled the scheduled event $["!!{target}!!"](targetHook)',
        GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_QUARANTINE_USER:
          "AutoMod quarantined $[**!!{user}!!**](userHook) for violating content in their user profile",
        GUILD_SETTINGS_AUDIT_LOG_AUTO_MODERATION_FLAGGED_USER_PROFILE:
          "AutoMod flagged $[**!!{user}!!**](userHook) for violating content in their user profile",
        DEV_NOTICE_LOCAL: "Local development mode",
        DEV_NOTICE_STAGING: "Staging {buildNumber}",
        NOTIF_CENTER_V2_VIEW_SUMMARY: "Join in!",
        NOTIFICATION_CENTER_HIGHLIGHT_SETTINGS:
          "Highlight Notification Settings",
        NOTIFICATION_REPORT_IRRELEVANT_CHANNEL:
          "I don't care about this channel",
        NOTIFICATION_REPORT_IRRELEVANT_USER: "I don't know these people",
        NOTIFICATION_REPORT_IRRELEVANT_TOPIC: "Topic isn't relevant to me",
        NOTIFICATION_REPORT_SENSITIVE_OR_OFFENSIVE_TOPIC:
          "Topic is sensitive or offensive",
        HIGHLIGHT_NOTIFICATION_SETTINGS_LABEL_SUPPRESS_HIGHLIGHTS:
          "Suppress Highlights in this server",
        HIGHLIGHT_NOTIFICATION_ACTIONSHEET_BODY:
          "Stay informed, without the noise! Highlights provide occasional updates when your friends are chatting in busy servers. [Learn more]({helpUrl})",
        GUILD_SETTINGS_PARTNER_CHECKLIST_LOADING_FAILED:
          "We are having trouble loading the requirements. Please check back later.",
        GUILD_SETTINGS_PARTNER_CHECKLIST_LOADING_FAILED_TOOLTIP:
          "Something went wrong. Please check back later",
        PURCHASE_REVIEW_TAX_LABEL: "Tax",
        ONE_TIME_PURCHASE_FINE_PRINT: "This purchase is non-refundable.",
        GUILD_ROLE_SUBSCRIPTION_PURCHASE_BACK_TO_SUBSCRIPTION_USER_SETTING_CTA:
          "Back to Manage Server Subscriptions",
        FRIEND_INVITE_SHEET_TITLE: "Send Link to Add Friends",
        FRIEND_INVITE_EXPIRATION:
          "Links expire in {expirationDays} days, or {expirationUses} uses.",
        FRIEND_INVITE_REVOKE_ALL: "Revoke All Links",
        FRIEND_INVITE_ACCEPT_CONFIRMATION:
          "You are now friends with {username}!",
        PAYMENTS_ALL_METHOD_BUTTON: "All payment methods",
        DAY: "{count, plural, =1 {day} other {{count} days}}",
        MONTH: "{count, plural, =1 {month} other {{count} months}}",
        YEAR: "{count, plural, =1 {year} other {{count} years}}",
        DIRECTORY_CATEGORY_INTERNAL_1: "Work",
        DIRECTORY_CATEGORY_INTERNAL_2: "Social",
        DIRECTORY_CATEGORY_INTERNAL_3: "ERGs",
        DIRECTORY_CATEGORY_INTERNAL_5: "Archives",
        GUILD_DISCOVERY_SEARCH_PLACEHOLDER_TAGS:
          "Explore communities, or try popular tags below",
        GUILD_DISCOVERY_CATEGORY_SEARCH_PLACEHOLDER_TAGS:
          "Explore {categoryName} servers, or try popular tags below",
        CHANNEL_CHAT_NOTIFICATION_SETTINGS_NOTICE_MUTED:
          "You will not be notified of new messages because **!!{name}!!** is muted.",
        CHANNEL_CHAT_NOTIFICATION_SETTINGS_NOTICE_ONLY_MENTIONS:
          "You will only be notified when you are mentioned because **!!{name}!!** is set to **Only @mentions**.",
        NOTIFICATION_SETTINGS_UNREAD_MENTION_ONLY_DISABLED:
          "Disabled when notification is set to all messages",
        NOTIFICATION_SETTINGS_UNREAD_UPDATE_WARNING:
          "This will update unread badges to all messages",
        GUILD_JOIN_FEEDBACK_HEADER: "How is !!{guildName}!! going?",
        GUILD_JOIN_FEEDBACK_BODY: "Tell us about your community experience",
        GUILD_JOIN_FEEDBACK_ISSUE_SECTION_HEADER: "Choose your main issue",
        GUILD_JOIN_FEEDBACK_STILL_EXPLORING: "I am still exploring the server",
        GUILD_JOIN_FEEDBACK_NO_ACCESS:
          "I could not get full access to the server",
        GUILD_JOIN_FEEDBACK_ACCESS_TOO_HARD:
          "I got full access to the server, but gaining access was too hard",
        GUILD_JOIN_FEEDBACK_WHAT_DO: "I don't know what to do here",
        GUILD_JOIN_FEEDBACK_PERSONAL_EXPERIENCE:
          "I had a negative personal experience upon joining due to another server member(s)",
        GUILD_JOIN_FEEDBACK_REPORT:
          "Thanks for your feedback! Feedback like yours helps us improve Discord servers.",
        GET_STARTED: "Get Started",
        FEATURED_CHANNELS: "Featured Channels",
        TOP_CHANNELS: "Top Channels",
        CHANNELS_YOU_SHOULD_CHECK_OUT: "Channels you should check out",
        MEMBER_INSIGHTS_SERVER_ACCESS: "New Members",
        MEMBER_INSIGHTS_ACCESS_RATE_TOOLTIP:
          "7 day average percentage of non-bot new members who fail to access the community's channels (updated daily). You should aim for <10%.",
        MEMBER_INSIGHTS_ACCESS_RATING_BAD:
          "Your server is $[very hard to join](ratingHook)",
        MEMBER_INSIGHTS_ACCESS_RATING_NEUTRAL:
          "Your server is $[hard to join](ratingHook)",
        MEMBER_INSIGHTS_ACCESS_RATING_GOOD:
          "Your server is $[easy to join, but could be better](ratingHook)",
        MEMBER_INSIGHTS_ACCESS_RATING_VERY_GOOD:
          "Your server is $[easy to join](ratingHook)",
        MEMBER_INSIGHTS_ACCESS_RATING_APPROX:
          "Approximately {accessRate}% of new members fail to get access to your channels.",
        MEMBER_INSIGHTS_ACCESS_RATING_MORE:
          "More than {accessRate}% of new members fail to get access to your channels.",
        MEMBER_INSIGHTS_ACCESS_RATING_LESS:
          "Fewer than {accessRate}% of new members fail to get access to your channels.",
        MEMBER_INSIGHTS_TIPS:
          "Improve **New Member Retention** with these tips",
        ACCESS_RATE_ACTION_SUCCESS:
          "Great job! Check out **$[more insights](insightsHook)** to continue to improve your server.",
        ACCESS_RATE_ACTION_SIMPLIFY:
          "If you have verification steps for new members,  make instructions clearer for people less\n  familiar with Discord.",
        ACCESS_RATE_ACTION_EXTRA_STEPS:
          "Remove unnecessary verification steps, so members can check out your community.",
        ACCESS_RATE_ACTION_BOTS:
          "If your server is using $[third party integrations](integrationsHook) to restrict access, switch to integrations that are easier to understand.",
        ACCESS_RATE_ACTION_AUDIT:
          "Audit your server's onboarding as a new member. Look for any broken or confusing steps.",
        USER_SETTINGS_CHOOSE_GUILD_TITLE: "Choose a server",
        USER_SETTINGS_OTHER_QUICK_ACTIONS: "Other Actions",
        USER_SETTINGS_QUICK_ACTION_FORCE_NEW_USER_ONBOARDING:
          "Force new user onboarding flow",
        BETA: "Beta",
        STAGE_VOICE_CHANNEL_TYPE: "Stage",
        STORE_CHANNEL_TYPE: "Store",
        NEWS_CHANNEL_TYPE: "Announcement",
        VOICE_CHANNEL_TYPE: "Voice",
        FORUM_CHANNEL_TYPE: "Forum",
        TEXT_CHANNEL_TYPE: "Text",
        BAN_MULTIPLE_CONFIRM_TITLE:
          "Would you like to ban {count, plural, one {1 member} other {{count} members}}?",
        BAN_MULTIPLE_SUCCESS_TOAST: "Mass ban succesful",
        BAN_MULTIPLE_FAILED_TOAST: "Mass ban failed",
        GUILD_MEMBER_MOD_VIEW_PHONE_VERIFIED: "Phone Verified",
        GUILD_MEMBER_MOD_VIEW_AGREE_TO_RULES: "Agreed to Rules",
        GUILD_MEMBER_MOD_VIEW_INVITE_LINK: "Invite Link",
        GUILD_MEMBER_MOD_VIEW_INVITE_LINK_TOOLTIP:
          "Invite link used to join server",
        GUILD_MEMBER_MOD_VIEW_INVITE_LINK_LABEL: "Join Method",
        GUILD_MEMBER_MOD_VIEW_DISCORD_JOIN_DATE: "Discord Join Date",
        GUILD_MEMBER_MOD_VIEW_GUILD_JOIN_DATE: "Server Join Date",
        GUILD_MEMBER_MOD_VIEW_GUILD_MESSAGE_ACTIVITY_TITLE: "Server Activity",
        APP_ICON_MUSHROOM: "One Up",
        STAFF_PTO_NOTICE: "Heads up! This person may be Out of Office.",
        CONSOLE_PLAYSTATION_STAGING_TRANSFER_VOICE:
          "Transfer to PlayStation (sp-int)",
        CONSOLE_PLAYSTATION_STAGING_JOIN_VOICE: "Join on PlayStation (sp-int)",
        SEARCH_EVERYWHERE: "Search Everywhere",
        SEARCH_FAVORITES: "Search Favorites",
        ROLE_PERMISSIONS_CONNECT_DESCRIPTION_THREADS:
          "Allows members to talk in voice and hear others in this channel's threads.",
        ROLE_PERMISSIONS_CONNECT_DESCRIPTION_THREADS_EVERYONE:
          "Allows members to talk in voice and hear others in this channel's threads.",
        ROLE_PERMISSIONS_SPEAK_DESCRIPTION_THREADS:
          "Allows members to talk in voice in this channel's threads. If this permission is disabled, members are default muted until somebody with the “Mute Members” permission un-mutes them.",
        ROLE_PERMISSIONS_STREAM_DESCRIPTION_THREADS:
          "Allows members to share their video, screen share, or stream a game in this channel's threads.",
        ROLE_PERMISSIONS_USE_VAD_DESCRIPTION_THREADS:
          "Allows members to speak in this channel's threads by simply talking. If this permission is disabled, members are required to use Push-to-talk. Good for controlling background noise or noisy members.",
        ROLE_PERMISSIONS_PRIORITY_SPEAKER_DESCRIPTION_THREADS:
          "Allows members to be more easily heard in this channel's threads. When activated, the volume of others without this permission will be automatically lowered. Priority Speaker is activated by using the **[{keybind}](onClick)** keybind.",
        ROLE_PERMISSIONS_PRIORITY_SPEAKER_DESCRIPTION_THREADS_MOBILE:
          "Allows members to be more easily heard in this channel's threads. When activated, the volume of others without this permission will be automatically lowered. Priority Speaker is activated by using the **{keybind}** keybind.",
        ROLE_PERMISSIONS_MUTE_MEMBERS_DESCRIPTION_THREADS:
          "Allows members to mute other members in this channel's threads for everyone.",
        ROLE_PERMISSIONS_DEAFEN_MEMBERS_DESCRIPTION_THREADS:
          "Allows members to deafen other members in this channel's threads, which means they won’t be able to speak or hear others.",
        ROLE_PERMISSIONS_MOVE_MEMBERS_DESCRIPTION_THREADS:
          "Allows members to disconnect other members from this channel's threads. They will also be able to move somebody into other channels that they have this permission in.",
        ROLE_PERMISSIONS_USE_EMBEDDED_ACTIVITIES_DESCRIPTION_THREADS:
          "Allows members to use Activities in this channel's threads.",
        MESSAGE_REMINDERS_EMPTY: "You have no Reminders!",
        MESSAGE_REMINDERS_EMPTY_TIP:
          "You can mark any message as a Reminder to have it appear here.",
        MESSAGE_REMINDERS_HEADER: "Message Reminders",
        MESSAGE_REMINDERS_HEADER_MOBILE: "Reminders",
        MESSAGE_REMINDERS_MARK_AS_TODO: "Remind Me",
        MESSAGE_REMINDERS_MARK_AS_DONE: "Remove Reminder",
        MESSAGE_REMINDERS_HEADER_ALL: "All Reminders",
        MESSAGE_REMINDERS_HEADER_OVERDUE: "Overdue Reminders",
        MESSAGE_REMINDERS_HEADER_SHOW_ALL: "Show all ({count, number})",
        MESSAGE_REMINDERS_HEADER_SHOW_OVERDUE: "Show overdue ({count, number})",
        MESSAGE_REMINDERS_SNOOZE_FOR: "Snooze for {duration}",
        MESSAGE_REMINDERS_SNOOZE: "Snooze",
        MESSAGE_REMINDERS_IN_ONE_HOUR: "in 1 hour",
        MESSAGE_REMINDERS_IN_TWO_HOURS: "in 2 hours",
        MESSAGE_REMINDERS_IN_FOUR_HOURS: "in 4 hours",
        MESSAGE_REMINDERS_IN_ONE_DAY: "in 1 day",
        MESSAGE_REMINDERS_IN_ONE_WEEK: "in 1 week",
        MESSAGE_REMINDERS_NEVER: "never",
        MESSAGE_REMINDERS_DUE_IN: "Due in {duration}",
        MESSAGE_REMINDERS_OVERDUE: "Due {duration} ago",
        APPLICATION_AUTOMOD_BADGE: "Uses AutoMod",
        SHARED_CANVAS_DRAW_MODE_LINE: "Draw",
        SHARED_CANVAS_DRAW_MODE_EMOJI_HOSE: "Emoji Hose",
        SHARED_CANVAS_HIDE_OVERLAY_DRAWINGS: "Hide Drawings in Overlay",
        AI_TAG: "AI",
        CLYDE_VIEW_SOURCE_SHOW_TOOLTIP: "View Sources",
        CLYDE_VIEW_SOURCE_HIDE_TOOLTIP: "Hide Sources",
        PERSONALITY_CHANNEL_BASED_KEY: "channel-based",
        PERSONALITY_SERIOUS_KEY: "serious-business",
        PERSONALITY_DEFAULT_KEY: "clyde",
        PERSONALITY_1_KEY: "pirate-life",
        PERSONALITY_2_KEY: "whimsical-wizard",
        PERSONALITY_3_KEY: "astro-adventurer",
        PERSONALITY_4_KEY: "noir-narrator",
        PERSONALITY_5_KEY: "inventive-intellectual",
        PERSONALITY_6_KEY: "knight-narrative",
        PERSONALITY_7_KEY: "secret-spy",
        PERSONALITY_8_KEY: "oracle-observations",
        PERSONALITY_9_KEY: "voyager-voice",
        PERSONALITY_10_KEY: "cinema-charmer",
        PERSONALITY_11_KEY: "wumpus",
        PERSONALITY_12_KEY: "nelly",
        BROADCASTING_SETTINGS: "Open Party Settings",
        BROADCASTING_SETTINGS_DESCRIPTION:
          "Control who can see your Open Party.",
        BROADCASTING_SETTINGS_CTA: "Configure Open Party Settings",
        BROADCASTING_SETTINGS_MODAL_AUDIENCE_TITLE:
          "Who can see your Open Party",
        BROADCASTING_SETTINGS_MODAL_CUSTOM_AUDIENCE_PLACEHOLDER_USERS:
          "Enter a friend's username",
        BROADCASTING_SETTINGS_MODAL_CUSTOM_AUDIENCE_PLACEHOLDER_GUILDS:
          "Enter a server name",
        BROADCASTING_SETTINGS_MODAL_FRIENDS:
          "Allow all of my friends to join my Open Party",
        BROADCASTING_SETTINGS_MODAL_CUSTOM_USERS:
          "Allow specific users to join my Open Party",
        BROADCASTING_SETTINGS_MODAL_CUSTOM_GUILDS:
          "Allow members of specific servers to join my Open Party",
        BROADCASTING_SETTINGS_MODAL_CUSTOM_USERS_HINT:
          "Select up to {count, number} users",
        BROADCASTING_SETTINGS_MODAL_CUSTOM_GUILDS_HINT:
          "Select up to {count, number} servers",
        BROADCASTING_SETTINGS_MODAL_DISABLED_DESCRIPTION:
          "All of your friends can see your Open Party",
        BROADCASTING_SETTINGS_MODAL_BEHAVIOR_TITLE: "Creating an Open Party",
        LEAVE_BROADCAST: "Leave Open Party",
        STOP_BROADCASTING: "End Open Party",
        START_BROADCASTING: "Start an Open Party",
        START_BROADCASTING_CTA: "Start Open Party",
        BROADCASTING: "In an Open Party",
        BROADCASTING_DESCRIPTION:
          "An Open Party is a temporary hangout space for you and your friends. Choose who can join, watch, and chat with you!",
        BROADCAST_SETTINGS: "Open Party Settings",
        BROADCAST_SETTINGS_SAVE: "Save Settings",
        BROADCASTING_CHANNEL_NAME: "!!{name}!!'s Open Party",
        LIVE_BROADCASTS: "Open Parties",
        AUTO_BROADCAST_TOGGLE:
          "Automatically create an Open Party when starting games",
        BROADCASTING_CAPTURE_PAUSED: "Your Party is Open",
        BROADCASTING_CAPTURE_PAUSED_DETAILS:
          "Hang tight and we'll see who's around...",
        MORE_OPEN_BROADCASTS:
          "{count, plural, =1 {{count, number} more Open Party} other {{count, number} more Open Parties}}",
        VIEW_OPEN_BROADCASTS: "View all Open Parties",
        JOIN_BROADCAST: "Join Open Party",
        VIEW_BROADCAST: "View Open Party",
        BROADCAST_FULL: "Open Party Full",
        BROADCASTING_BROADCASTER_TOOLTIP_HEADER: "Start an Open Party!",
        BROADCASTING_BROADCASTER_TOOLTIP_BODY:
          "You can now create your own temporary space where friends can drop by to hang out.",
        BROADCASTING_STOP_STREAM_CONFIRM_BODY:
          "Stopping your stream will also close your party, preventing people from seeing and joining it. You can re-open your party at any time by restarting your stream. Are you sure you want to end your stream?",
        BROADCASTING_START_STREAM_CONFIRM_BODY:
          "Starting your stream will re-open your party, allowing people to see it and join. Are you sure you want to start your stream?",
        BROADCASTING_BETA_TOOLTIP_TEXT:
          "Open Parties is an experimental feature. A limited number of users have the ability to host or join.",
        START_BROADCAST_NOTIFICATION_BODY:
          "Start a party, so your friends can drop by!",
        START_BROADCAST_NOTIFICATION_CTA: "Open a Party",
        XBOX: "Xbox",
        PLAYSTATION: "PlayStation",
        SAFETY_HUB_CLASSIFICATIONS_TABLE_HEADER: "Lorem, ipsum",
        SAFETY_HUB_CLASSIFICATIONS_TABLE_EMPTY_TEXT: "Lorem, ipsum dolor",
        SAFETY_HUB_CLASSIFICATIONS_TABLE_COLUMN_HEADER_DATE: "DATE",
        SAFETY_HUB_CLASSIFICATIONS_TABLE_COLUMN_HEADER_TYPE: "TYPE",
        SAFETY_HUB_CLASSIFICATIONS_TABLE_COLUMN_HEADER_EXPIRES: "EXPIRES",
        SAFETY_HUB_CLASSIFICATIONS_TABLE_COLUMN_HEADER_STATUS: "STATUS",
        CHANNEL_PROMPT_UPLOAD_IMAGE_CTA: "Upload a picture",
        CHANNEL_PROMPT_RANDOM_STICKER_CTA: "Random sticker",
        DEADCHAT_PROMPT_1: "It's quiet in here.",
        CHANNEL_PROMPT_GAMING_CTA: "Get my stats!",
        USER_SETTINGS_APPEARANCE_CHANNEL_LIST_LAYOUT_MINIMAL: "Minimal",
        SERVER_USAGE_SURVEY_BODY:
          "Help us make Discord better by answering a few questions about !!{guildName}!!",
        SERVER_USAGE_SURVEY_CTA: "Take Survey",
        REPORTS_USER_PREVIEW_TITLE: "Selected User",
        REPORTS_FREE_TEXT_PLACEHOLDER:
          "(Optional) Provide more context about your report here",
        REPORTS_USER_MENU_OPTION_MOBILE: "Report User Profile",
        FORM_LABEL_OVERLAY_SHOW_MUTE_DEAFEN_KEYBINDS:
          "Show mute and deafen keybinds",
        KEYBIND_NOTIFICATION_DESCRIPTION:
          "Now you can see your keybind for toggling mute in the overlay.",
        PROBLEMATIC_GPU_DRIVER_DETECTED:
          "There is currently a known issue with your GPU driver version which may affect the Go Live quality. If you experience this issue, learn more about how to fix it [here]({helpCenterLink}).",
        MANAGE_AUTHORIZED_APP: "Manage Authorized App",
        MFA_REQUIRED_FOR_STAFF:
          "Multi-factor authentication is required for staff.",
      });
    },
    657743: function (e, _, E) {
      e.exports = Object.freeze({
        CHANGE_LANGUAGE_MODAL_TITLE_SPANISH: "\xbfCambiar idioma?",
        CHANGE_LANGUAGE_MODAL_SUBTITLE_SPANISH:
          "\xbfTe gustar\xeda configurar Discord en Espa\xf1ol?",
        YES_TEXT_SPANISH: "S\xed",
        NO_TEXT_SPANISH: "No",
        GOT_IT_TEXT_SPANISH: "Entendido",
        LANGUAGE_CHANGED_CONFIRMATION_TITLE_SPANISH: "\xa1El cambio fue hecho!",
        LANGUAGE_CHANGED_CONFIRMATION_SUBTITLE_SPANISH:
          'Discord est\xe1 configurado en Espa\xf1ol. Puedes elegir otro idioma en "Ajustes de aplicaci\xf3n" > "Idioma".',
      });
    },
    795529: function (e, _, E) {
      var t = {
        "./bg.jsona": "148174",
        "./cs.jsona": "466579",
        "./da.jsona": "172063",
        "./de.jsona": "293151",
        "./el.jsona": "195418",
        "./en-GB.jsona": "777640",
        "./es-419.jsona": "523730",
        "./es-ES.jsona": "291795",
        "./fi.jsona": "164426",
        "./fr.jsona": "289264",
        "./hi.jsona": "577719",
        "./hr.jsona": "259159",
        "./hu.jsona": "351000",
        "./id.jsona": "413177",
        "./it.jsona": "633783",
        "./ja.jsona": "227938",
        "./ko.jsona": "723473",
        "./lt.jsona": "372022",
        "./nl.jsona": "573174",
        "./no.jsona": "283869",
        "./pl.jsona": "404567",
        "./pt-BR.jsona": "939538",
        "./ro.jsona": "169574",
        "./ru.jsona": "596631",
        "./sv-SE.jsona": "631576",
        "./th.jsona": "621940",
        "./tr.jsona": "694447",
        "./uk.jsona": "200621",
        "./vi.jsona": "896055",
        "./zh-CN.jsona": "102258",
        "./zh-TW.jsona": "486738",
      };
      function o(e) {
        if (!E.o(t, e))
          return Promise.resolve().then(function () {
            var _ = Error("Cannot find module '" + e + "'");
            throw ((_.code = "MODULE_NOT_FOUND"), _);
          });
        var _ = t[e];
        return E.el(_).then(function () {
          return E.t(_, 19);
        });
      }
      (o.keys = function () {
        return Object.keys(t);
      }),
        (o.id = "795529"),
        (e.exports = o);
    },
    279295: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          navigationStart: function () {
            return t;
          },
          timeOrigin: function () {
            return o;
          },
          performance: function () {
            return n;
          },
        }),
        E("356305");
      try {
        null == Date.now && (Date.now = () => new Date().valueOf());
      } catch (e) {}
      let t = (() => {
          try {
            var e;
            return null !== (e = E.g.performance.timing.navigationStart) &&
              void 0 !== e
              ? e
              : E.g.performance.now();
          } catch (e) {}
          return Date.now();
        })(),
        o = (() => {
          try {
            var e;
            return null !== (e = E.g.performance.timeOrigin) && void 0 !== e
              ? e
              : t;
          } catch (e) {}
          return Date.now();
        })();
      if (null == E.g.performance.timing)
        try {
          E.g.performance.timing = { navigationStart: t };
        } catch (e) {}
      if (null == E.g.performance.timeOrigin)
        try {
          E.g.performance.timeOrigin = o;
        } catch (e) {}
      let n = E.g.performance;
    },
    356305: function (e, _, E) {
      var t, o, n, r, a, i, I;
      E("424973"),
        E("70102"),
        (t = E.g),
        (o = Date.now ? Date.now() : +new Date()),
        (n = t.performance || {}),
        (r = []),
        (a = {}),
        (i = function (e, _) {
          for (var E = 0, t = r.length, o = []; E < t; E++)
            r[E][e] == _ && o.push(r[E]);
          return o;
        }),
        (I = function (e, _) {
          for (var E, t = r.length; t--; )
            (E = r[t]).entryType == e &&
              (void 0 === _ || E.name == _) &&
              r.splice(t, 1);
        }),
        n.now ||
          (n.now =
            n.webkitNow ||
            n.mozNow ||
            n.msNow ||
            function () {
              return (Date.now ? Date.now() : +new Date()) - o;
            }),
        n.mark ||
          (n.mark =
            n.webkitMark ||
            function (e) {
              var _ = {
                name: e,
                entryType: "mark",
                startTime: n.now(),
                duration: 0,
              };
              r.push(_), (a[e] = _);
            }),
        n.measure ||
          (n.measure =
            n.webkitMeasure ||
            function (e, _, E) {
              var t, o;
              if (void 0 !== E && void 0 === a[E])
                throw SyntaxError(
                  "Failed to execute 'measure' on 'Performance': The mark '" +
                    E +
                    "' does not exist."
                );
              if (void 0 !== _ && void 0 === a[_])
                throw SyntaxError(
                  "Failed to execute 'measure' on 'Performance': The mark '" +
                    _ +
                    "' does not exist."
                );
              (t = a[_] ? a[_].startTime : 0),
                (o = a[E] ? a[E].startTime : n.now()),
                r.push({
                  name: e,
                  entryType: "measure",
                  startTime: t,
                  duration: o - t,
                });
            }),
        n.getEntriesByType ||
          (n.getEntriesByType =
            n.webkitGetEntriesByType ||
            function (e) {
              return i("entryType", e);
            }),
        n.getEntriesByName ||
          (n.getEntriesByName =
            n.webkitGetEntriesByName ||
            function (e) {
              return i("name", e);
            }),
        n.clearMarks ||
          (n.clearMarks =
            n.webkitClearMarks ||
            function (e) {
              I("mark", e);
            }),
        n.clearMeasures ||
          (n.clearMeasures =
            n.webkitClearMeasures ||
            function (e) {
              I("measure", e);
            }),
        (t.performance = n),
        "function" == typeof define &&
          (define.amd || define.ajs) &&
          define("performance", [], function () {
            return n;
          });
    },
    437087: function (e, _, E) {
      var t = {
        "./ggsans-400-normal.woff2": "899626",
        "./ggsans-400-normalitalic.woff2": "722885",
        "./ggsans-500-medium.woff2": "830979",
        "./ggsans-500-mediumitalic.woff2": "224548",
        "./ggsans-600-semibold.woff2": "493126",
        "./ggsans-600-semibolditalic.woff2": "533844",
        "./ggsans-700-bold.woff2": "200683",
        "./ggsans-700-bolditalic.woff2": "764930",
        "./ggsans-800-extrabold.woff2": "839050",
        "./ggsans-800-extrabolditalic.woff2": "991878",
      };
      function o(e) {
        if (!E.o(t, e))
          return Promise.resolve().then(function () {
            var _ = Error("Cannot find module '" + e + "'");
            throw ((_.code = "MODULE_NOT_FOUND"), _);
          });
        var _ = t[e];
        return E.el(_).then(function () {
          return E.t(_, 17);
        });
      }
      (o.keys = function () {
        return Object.keys(t);
      }),
        (o.id = "437087"),
        (e.exports = o);
    },
    593526: function (e, _, E) {
      var t = {
        "./af": "696777",
        "./af.js": "696777",
        "./ar": "712480",
        "./ar-dz": "186466",
        "./ar-dz.js": "186466",
        "./ar-kw": "204387",
        "./ar-kw.js": "204387",
        "./ar-ly": "520943",
        "./ar-ly.js": "520943",
        "./ar-ma": "820069",
        "./ar-ma.js": "820069",
        "./ar-sa": "161758",
        "./ar-sa.js": "161758",
        "./ar-tn": "964382",
        "./ar-tn.js": "964382",
        "./ar.js": "712480",
        "./az": "350544",
        "./az.js": "350544",
        "./be": "566972",
        "./be.js": "566972",
        "./bg": "646724",
        "./bg.js": "646724",
        "./bm": "312607",
        "./bm.js": "312607",
        "./bn": "888794",
        "./bn.js": "888794",
        "./bo": "631987",
        "./bo.js": "631987",
        "./br": "117040",
        "./br.js": "117040",
        "./bs": "373873",
        "./bs.js": "373873",
        "./ca": "725185",
        "./ca.js": "725185",
        "./cs": "634626",
        "./cs.js": "634626",
        "./cv": "696520",
        "./cv.js": "696520",
        "./cy": "557635",
        "./cy.js": "557635",
        "./da": "913057",
        "./da.js": "913057",
        "./de": "978252",
        "./de-at": "837160",
        "./de-at.js": "837160",
        "./de-ch": "704010",
        "./de-ch.js": "704010",
        "./de.js": "978252",
        "./dv": "425222",
        "./dv.js": "425222",
        "./el": "569324",
        "./el.js": "569324",
        "./en-au": "411994",
        "./en-au.js": "411994",
        "./en-ca": "32933",
        "./en-ca.js": "32933",
        "./en-gb": "473837",
        "./en-gb.js": "473837",
        "./en-ie": "792578",
        "./en-ie.js": "792578",
        "./en-il": "868740",
        "./en-il.js": "868740",
        "./en-nz": "186104",
        "./en-nz.js": "186104",
        "./eo": "254437",
        "./eo.js": "254437",
        "./es": "212050",
        "./es-do": "471728",
        "./es-do.js": "471728",
        "./es-us": "889327",
        "./es-us.js": "889327",
        "./es.js": "212050",
        "./et": "822666",
        "./et.js": "822666",
        "./eu": "865338",
        "./eu.js": "865338",
        "./fa": "988398",
        "./fa.js": "988398",
        "./fi": "506309",
        "./fi.js": "506309",
        "./fo": "514395",
        "./fo.js": "514395",
        "./fr": "781604",
        "./fr-ca": "634510",
        "./fr-ca.js": "634510",
        "./fr-ch": "700827",
        "./fr-ch.js": "700827",
        "./fr.js": "781604",
        "./fy": "763847",
        "./fy.js": "763847",
        "./gd": "159224",
        "./gd.js": "159224",
        "./gl": "96607",
        "./gl.js": "96607",
        "./gom-latn": "781538",
        "./gom-latn.js": "781538",
        "./gu": "517733",
        "./gu.js": "517733",
        "./he": "273935",
        "./he.js": "273935",
        "./hi": "269004",
        "./hi.js": "269004",
        "./hr": "617128",
        "./hr.js": "617128",
        "./hu": "710652",
        "./hu.js": "710652",
        "./hy-am": "709504",
        "./hy-am.js": "709504",
        "./id": "536943",
        "./id.js": "536943",
        "./is": "826975",
        "./is.js": "826975",
        "./it": "447366",
        "./it.js": "447366",
        "./ja": "656374",
        "./ja.js": "656374",
        "./jv": "515820",
        "./jv.js": "515820",
        "./ka": "709988",
        "./ka.js": "709988",
        "./kk": "715760",
        "./kk.js": "715760",
        "./km": "806908",
        "./km.js": "806908",
        "./kn": "846429",
        "./kn.js": "846429",
        "./ko": "954812",
        "./ko.js": "954812",
        "./ky": "447966",
        "./ky.js": "447966",
        "./lb": "328716",
        "./lb.js": "328716",
        "./lo": "518498",
        "./lo.js": "518498",
        "./lt": "719583",
        "./lt.js": "719583",
        "./lv": "349300",
        "./lv.js": "349300",
        "./me": "581689",
        "./me.js": "581689",
        "./mi": "101484",
        "./mi.js": "101484",
        "./mk": "959631",
        "./mk.js": "959631",
        "./ml": "617052",
        "./ml.js": "617052",
        "./mn": "697126",
        "./mn.js": "697126",
        "./mr": "885070",
        "./mr.js": "885070",
        "./ms": "318471",
        "./ms-my": "383859",
        "./ms-my.js": "383859",
        "./ms.js": "318471",
        "./mt": "670489",
        "./mt.js": "670489",
        "./my": "516631",
        "./my.js": "516631",
        "./nb": "412630",
        "./nb.js": "412630",
        "./ne": "111330",
        "./ne.js": "111330",
        "./nl": "530848",
        "./nl-be": "97673",
        "./nl-be.js": "97673",
        "./nl.js": "530848",
        "./nn": "396450",
        "./nn.js": "396450",
        "./pa-in": "378626",
        "./pa-in.js": "378626",
        "./pl": "917383",
        "./pl.js": "917383",
        "./pt": "344833",
        "./pt-br": "965625",
        "./pt-br.js": "965625",
        "./pt.js": "344833",
        "./ro": "914582",
        "./ro.js": "914582",
        "./ru": "287980",
        "./ru.js": "287980",
        "./sd": "437127",
        "./sd.js": "437127",
        "./se": "285023",
        "./se.js": "285023",
        "./si": "808535",
        "./si.js": "808535",
        "./sk": "205027",
        "./sk.js": "205027",
        "./sl": "865537",
        "./sl.js": "865537",
        "./sq": "660931",
        "./sq.js": "660931",
        "./sr": "618854",
        "./sr-cyrl": "403841",
        "./sr-cyrl.js": "403841",
        "./sr.js": "618854",
        "./ss": "776465",
        "./ss.js": "776465",
        "./sv": "926502",
        "./sv.js": "926502",
        "./sw": "582228",
        "./sw.js": "582228",
        "./ta": "762109",
        "./ta.js": "762109",
        "./te": "562294",
        "./te.js": "562294",
        "./tet": "876158",
        "./tet.js": "876158",
        "./tg": "385050",
        "./tg.js": "385050",
        "./th": "21774",
        "./th.js": "21774",
        "./tl-ph": "971882",
        "./tl-ph.js": "971882",
        "./tlh": "138641",
        "./tlh.js": "138641",
        "./tr": "437138",
        "./tr.js": "437138",
        "./tzl": "94836",
        "./tzl.js": "94836",
        "./tzm": "614402",
        "./tzm-latn": "309056",
        "./tzm-latn.js": "309056",
        "./tzm.js": "614402",
        "./ug-cn": "89454",
        "./ug-cn.js": "89454",
        "./uk": "986472",
        "./uk.js": "986472",
        "./ur": "688394",
        "./ur.js": "688394",
        "./uz": "994235",
        "./uz-latn": "261578",
        "./uz-latn.js": "261578",
        "./uz.js": "994235",
        "./vi": "360304",
        "./vi.js": "360304",
        "./x-pseudo": "859244",
        "./x-pseudo.js": "859244",
        "./yo": "858262",
        "./yo.js": "858262",
        "./zh-cn": "278573",
        "./zh-cn.js": "278573",
        "./zh-hk": "862769",
        "./zh-hk.js": "862769",
        "./zh-tw": "394225",
        "./zh-tw.js": "394225",
      };
      function o(e) {
        return E(n(e));
      }
      function n(e) {
        if (!E.o(t, e)) {
          var _ = Error("Cannot find module '" + e + "'");
          throw ((_.code = "MODULE_NOT_FOUND"), _);
        }
        return t[e];
      }
      (o.id = '"593526"'),
        (o.keys = function () {
          return Object.keys(t);
        }),
        (o.resolve = n),
        (e.exports = o);
    },
    915934: function (e, _, E) {
      "use strict";
      e.exports = E.p + "2a9096474ecb8192b3ce.webp";
    },
    217696: function (e, _, E) {
      "use strict";
      e.exports = E.p + "e8a673421a7098cdcdeb.webp";
    },
    766249: function (e, _, E) {
      "use strict";
      e.exports = E.p + "15fa601cc9c87bee2e26.webp";
    },
    512772: function (e, _, E) {
      "use strict";
      e.exports = E.p + "e0fe5bc7745f71705066.webp";
    },
    947146: function (e, _, E) {
      "use strict";
      e.exports = E.p + "e3fc64532265764e1d67.webp";
    },
    301071: function (e, _, E) {
      "use strict";
      e.exports = E.p + "2f906bd6a510974effa3.webp";
    },
    162551: function (e, _, E) {
      "use strict";
      e.exports = E.p + "3ea3e47f993b5620ea25.webp";
    },
    698060: function (e, _, E) {
      "use strict";
      e.exports = E.p + "a0e8219e310053130cba.webp";
    },
    541272: function (e, _, E) {
      "use strict";
      e.exports = E.p + "1d8770de85cb6d5284a5.webp";
    },
    20995: function (e, _, E) {
      "use strict";
      e.exports = E.p + "a28b009dcc138c849209.webp";
    },
    709048: function (e, _, E) {
      "use strict";
      e.exports = E.p + "31efa1913785fddb04d9.webp";
    },
    91801: function (e, _, E) {
      "use strict";
      e.exports = E.p + "720b20f6ecb7b2995714.webp";
    },
    340431: function (e, _, E) {
      "use strict";
      e.exports = E.p + "003c16533dc9327b66d8.webp";
    },
    538184: function (e, _, E) {
      "use strict";
      e.exports = E.p + "b9ba392d5652d7047b69.webp";
    },
    974893: function (e, _, E) {
      "use strict";
      e.exports = E.p + "c53596a8aabec268677f.webp";
    },
    236734: function (e, _, E) {
      "use strict";
      e.exports = E.p + "364d22ce868c406cf13a.webp";
    },
    832254: function (e, _, E) {
      "use strict";
      e.exports = E.p + "7fdb7c4b9dac8c9db942.webp";
    },
    514594: function (e, _, E) {
      "use strict";
      e.exports = E.p + "9bcd500d06a4e99eef38.webp";
    },
    738940: function (e, _, E) {
      "use strict";
      e.exports = E.p + "1779971f835dfdb63d9f.webp";
    },
    668528: function (e, _, E) {
      "use strict";
      e.exports = E.p + "1915fd6ab8fc8ddaa1f6.ico";
    },
    322876: function (e, _, E) {
      "use strict";
      e.exports = E.p + "74208bfbaf95129f3060.png";
    },
    859612: function (e, _, E) {
      "use strict";
      e.exports = E.p + "fad1e8f9791cde986c61.woff2";
    },
    937060: function (e, _, E) {
      "use strict";
      e.exports = E.p + "1dae98f83a4f199a9aee.woff2";
    },
    899626: function (e, _, E) {
      "use strict";
      e.exports = E.p + "b9811218b3a54ad59fb2.woff2";
    },
    722885: function (e, _, E) {
      "use strict";
      e.exports = E.p + "15551c6c9d4d1a96ba76.woff2";
    },
    830979: function (e, _, E) {
      "use strict";
      e.exports = E.p + "f84e3e81b8d0718cd917.woff2";
    },
    224548: function (e, _, E) {
      "use strict";
      e.exports = E.p + "099b34f1948afe9d15e4.woff2";
    },
    493126: function (e, _, E) {
      "use strict";
      e.exports = E.p + "20ac37ed2576dd48d7dc.woff2";
    },
    533844: function (e, _, E) {
      "use strict";
      e.exports = E.p + "36a7c3603a9c96bce18d.woff2";
    },
    200683: function (e, _, E) {
      "use strict";
      e.exports = E.p + "3f46bbecb4287c0a829f.woff2";
    },
    764930: function (e, _, E) {
      "use strict";
      e.exports = E.p + "6191b2ecd48873bed773.woff2";
    },
    839050: function (e, _, E) {
      "use strict";
      e.exports = E.p + "f65e087dae83a0fdc637.woff2";
    },
    991878: function (e, _, E) {
      "use strict";
      e.exports = E.p + "d5c9d3b86fab5ccc8ef2.woff2";
    },
    721207: function (e, _, E) {
      "use strict";
      e.exports = E.p + "25f1e66664a140ac84c9.woff2";
    },
    916931: function (e, _, E) {
      "use strict";
      e.exports = E.p + "9f0adc4ecabddcd298dc.woff2";
    },
    724968: function (e, _, E) {
      "use strict";
      e.exports = E.p + "e0ece3c23b33d18f4d00.woff2";
    },
    77788: function (e, _, E) {
      "use strict";
      e.exports = E.p + "818e8d4d506064aa57a3.woff2";
    },
    657537: function (e, _, E) {
      "use strict";
      e.exports = E.p + "9a02726c2f8410020238.woff2";
    },
    905274: function (e, _, E) {
      "use strict";
      e.exports = E.p + "08b2e52c725dc0d1a24a.woff2";
    },
    930593: function (e, _, E) {
      "use strict";
      e.exports = E.p + "ee6b51adb64f6365352c.woff2";
    },
    124021: function (e, _, E) {
      "use strict";
      e.exports = E.p + "4167dc814806444a69a5.woff2";
    },
    442584: function (e, _, E) {
      "use strict";
      e.exports = E.p + "2850dd7b145576e8d7c7.woff2";
    },
    551960: function (e, _, E) {
      "use strict";
      e.exports = E.p + "8318c9f278405382203e.woff2";
    },
    511700: function (e, _, E) {
      "use strict";
      e.exports = E.p + "7645cb75533b9a614c7a.woff2";
    },
    956378: function (e, _, E) {
      "use strict";
      e.exports = E.p + "cbb17c40dc4d56e70d10.woff2";
    },
    728315: function (e, _, E) {},
    594574: function (e, _, E) {},
    199005: function (e, _, E) {
      "use strict";
      e.exports = [
        {
          name: "English, US",
          englishName: "English, US",
          code: "en-US",
          postgresLang: "english",
          enabled: !0,
        },
        {
          name: "English, UK",
          englishName: "English, UK",
          code: "en-GB",
          postgresLang: "english",
          enabled: !0,
        },
        {
          name: "中文",
          englishName: "Chinese Simplified",
          code: "zh-CN",
          postgresLang: "simple",
          enabled: !0,
        },
        {
          name: "繁體中文",
          englishName: "Traditional Chinese",
          code: "zh-TW",
          postgresLang: "simple",
          enabled: !0,
        },
        {
          name: "Čeština",
          englishName: "Czech",
          code: "cs",
          postgresLang: "simple",
          enabled: !0,
        },
        {
          name: "Dansk",
          englishName: "Danish",
          code: "da",
          postgresLang: "danish",
          enabled: !0,
        },
        {
          name: "Nederlands",
          englishName: "Dutch",
          code: "nl",
          postgresLang: "dutch",
          enabled: !0,
        },
        {
          name: "Fran\xe7ais",
          englishName: "French",
          code: "fr",
          postgresLang: "french",
          enabled: !0,
        },
        {
          name: "Deutsch",
          englishName: "German",
          code: "de",
          postgresLang: "german",
          enabled: !0,
        },
        {
          name: "Ελληνικά",
          englishName: "Greek",
          code: "el",
          postgresLang: "simple",
          enabled: !0,
        },
        {
          name: "Magyar",
          englishName: "Hungarian",
          code: "hu",
          postgresLang: "hungarian",
          enabled: !0,
        },
        {
          name: "Italiano",
          englishName: "Italian",
          code: "it",
          postgresLang: "italian",
          enabled: !0,
        },
        {
          name: "日本語",
          englishName: "Japanese",
          code: "ja",
          postgresLang: "simple",
          enabled: !0,
        },
        {
          name: "한국어",
          englishName: "Korean",
          code: "ko",
          postgresLang: "simple",
          enabled: !0,
        },
        {
          name: "Polski",
          englishName: "Polish",
          code: "pl",
          postgresLang: "simple",
          enabled: !0,
        },
        {
          name: "Portugu\xeas",
          englishName: "Portuguese",
          code: "pt-PT",
          postgresLang: "portuguese",
          enabled: !1,
        },
        {
          name: "Portugu\xeas do Brasil",
          englishName: "Portuguese, Brazilian",
          code: "pt-BR",
          postgresLang: "portuguese",
          enabled: !0,
        },
        {
          name: "Русский",
          englishName: "Russian",
          code: "ru",
          postgresLang: "russian",
          enabled: !0,
        },
        {
          name: "Slovenčina",
          englishName: "Slovak",
          code: "sk",
          postgresLang: "simple",
          enabled: !1,
        },
        {
          name: "Espa\xf1ol",
          englishName: "Spanish",
          code: "es-ES",
          postgresLang: "spanish",
          enabled: !0,
        },
        {
          name: "Espa\xf1ol, LATAM",
          englishName: "Spanish, LATAM",
          code: "es-419",
          postgresLang: "spanish",
          enabled: !0,
        },
        {
          name: "Svenska",
          englishName: "Swedish",
          code: "sv-SE",
          postgresLang: "swedish",
          enabled: !0,
        },
        {
          name: "T\xfcrk\xe7e",
          englishName: "Turkish",
          code: "tr",
          postgresLang: "turkish",
          enabled: !0,
        },
        {
          name: "български",
          englishName: "Bulgarian",
          code: "bg",
          postgresLang: "simple",
          enabled: !0,
        },
        {
          name: "Українська",
          englishName: "Ukrainian",
          code: "uk",
          postgresLang: "simple",
          enabled: !0,
        },
        {
          name: "Suomi",
          englishName: "Finnish",
          code: "fi",
          postgresLang: "finnish",
          enabled: !0,
        },
        {
          name: "Norsk",
          englishName: "Norwegian",
          code: "no",
          postgresLang: "norwegian",
          enabled: !0,
        },
        {
          name: "Hrvatski",
          englishName: "Croatian",
          code: "hr",
          postgresLang: "simple",
          enabled: !0,
        },
        {
          name: "Rom\xe2nă",
          englishName: "Romanian",
          code: "ro",
          postgresLang: "romanian",
          enabled: !0,
        },
        {
          name: "Lietuviškai",
          englishName: "Lithuanian",
          code: "lt",
          postgresLang: "simple",
          enabled: !0,
        },
        {
          name: "ไทย",
          englishName: "Thai",
          code: "th",
          postgresLang: "simple",
          enabled: !0,
        },
        {
          name: "Tiếng Việt",
          englishName: "Vietnamese",
          code: "vi",
          postgresLang: "simple",
          enabled: !0,
        },
        {
          name: "हिंदी",
          englishName: "Hindi",
          code: "hi",
          postgresLang: "simple",
          enabled: !0,
        },
        {
          name: "עִברִית",
          englishName: "Hebrew",
          code: "he",
          postgresLang: "simple",
          enabled: !1,
          enabledAPI: !0,
        },
        {
          name: "العربية",
          englishName: "Arabic",
          code: "ar",
          postgresLang: "simple",
          enabled: !1,
          enabledAPI: !0,
        },
        {
          name: "Bahasa Indonesia",
          englishName: "Indonesian",
          code: "id",
          postgresLang: "simple",
          enabled: !1,
          enabledAPI: !0,
        },
      ];
    },
    913144: function (e, _, E) {
      "use strict";
      let t;
      E.r(_),
        E.d(_, {
          DispatchBand: function () {
            return n;
          },
          default: function () {
            return N;
          },
        });
      var o,
        n,
        r,
        a = E("446674"),
        i = E("120082"),
        I = E("95410"),
        s = E("303167"),
        T = E("9503");
      ((o = n || (n = {}))[(o.Early = 0)] = "Early"),
        (o[(o.Database = 1)] = "Database"),
        (o[(o.Default = 2)] = "Default"),
        (t = new i.ActionLogger({
          persist:
            null !== (r = I.default.get(T.STORAGE_KEY_LOG_DISPATCHES)) &&
            void 0 !== r &&
            r,
        }));
      let S = new a.Dispatcher(2, t, { addBreadcrumb: s.default });
      var N = S;
    },
    776156: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return i;
          },
        });
      var t = E("872717"),
        o = E("913144"),
        n = E("34966"),
        r = E("234222");
      function a() {
        let e = new Date().getMinutes();
        return "x=".concat(Math.floor(e / 5));
      }
      var i = {
        lockChangeLog(e) {
          o.default.dispatch({ type: "CHANGE_LOG_LOCK", key: e });
        },
        unlockChangeLog(e) {
          o.default.dispatch({ type: "CHANGE_LOG_UNLOCK", key: e });
        },
        markChangelogAsSeen(e, _) {
          o.default.dispatch({
            type: "CHANGE_LOG_MARK_SEEN",
            changelogId: e,
            changelogDate: _,
          });
        },
        setChangelogOverride(e) {
          o.default.dispatch({ type: "CHANGE_LOG_SET_OVERRIDE", id: e });
        },
        fetchChangelogConfig() {
          let e = r.ChangelogPlatforms.DESKTOP;
          return t.default.get({
            url: "https://cdn.discordapp.com/changelogs/config_"
              .concat(e, ".json?")
              .concat(a()),
          });
        },
        async fetchChangelog(e, _) {
          if (null != n.default.getChangelog(e, _)) return null;
          let E = r.ChangelogPlatforms.DESKTOP;
          try {
            let n = await t.default.get({
              url: "https://cdn.discordapp.com/changelogs/"
                .concat(E, "/")
                .concat(e, "/")
                .concat(_, ".json?")
                .concat(a()),
            });
            return (
              o.default.dispatch({
                type: "CHANGE_LOG_FETCH_SUCCESS",
                id: e,
                changelog: n.body,
              }),
              n.body
            );
          } catch {
            if (
              (o.default.dispatch({
                type: "CHANGE_LOG_FETCH_FAILED",
                id: e,
                locale: _,
              }),
              "en-US" !== _)
            )
              return await this.fetchChangelog(e, "en-US");
            return null;
          }
        },
      };
    },
    920842: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          fetchRTCLatencyTestRegions: function () {
            return n;
          },
          completeRTCLatencyTest: function () {
            return r;
          },
        });
      var t = E("872717"),
        o = E("913144");
      function n() {
        var e;
        return t.default.get(
          ""
            .concat(((e = "https:"), "https:"))
            .concat(window.GLOBAL_ENV.RTC_LATENCY_ENDPOINT)
        );
      }
      function r(e, _) {
        o.default.dispatch({
          type: "RTC_LATENCY_TEST_COMPLETE",
          latencyRankedRegions: e,
          geoRankedRegions: _,
        });
      }
    },
    918109: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return T;
          },
        });
      var t = E("37983"),
        o = E("884691"),
        n = E("446674"),
        r = E("77078"),
        a = E("629109"),
        i = E("135230"),
        I = E("42887"),
        s = E("782340"),
        T = () => {
          let e = (0, n.useStateFromStores)(
              [I.default],
              () => I.default.isInteractionRequired(),
              []
            ),
            _ = o.useRef(null);
          function E() {
            null !== _.current &&
              ((0, r.closeModal)(_.current), (_.current = null));
          }
          function T() {
            a.default.interact();
          }
          return (
            o.useEffect(
              () => (
                e
                  ? (_.current = (0, r.openModal)(e =>
                      (0, t.jsx)(i.default, {
                        title: s.default.Messages.INTERACTION_REQUIRED_TITLE,
                        body: s.default.Messages.INTERACTION_REQUIRED_BODY,
                        onConfirm: T,
                        confirmText: s.default.Messages.OKAY,
                        ...e,
                      })
                    ))
                  : E(),
                () => {
                  E();
                }
              ),
              [e]
            ),
            null
          );
        };
    },
    185137: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return A;
          },
        }),
        E("222007");
      var t = E("37983"),
        o = E("884691"),
        n = E("446674"),
        r = E("77078"),
        a = E("363658"),
        i = E("135230"),
        I = E("42887"),
        s = E("945956"),
        T = E("568307"),
        S = E("701909"),
        N = E("49111"),
        O = E("782340"),
        A = () => {
          let [e, _] = (0, n.useStateFromStoresArray)(
              [T.default],
              () => [T.default.canShowAdminWarning, T.default.getVisibleGame()],
              []
            ),
            E = (0, n.useStateFromStores)(
              [s.default],
              () => s.default.isConnected(),
              []
            ),
            A = (0, n.useStateFromStores)(
              [I.default],
              () => I.default.getMode() === N.InputModes.PUSH_TO_TALK,
              []
            ),
            R = null != _ && _.elevated && E && A && e,
            l = o.useRef(null);
          function L() {
            null !== l.current &&
              ((0, r.closeModal)(l.current), (l.current = null));
          }
          return (
            o.useEffect(
              () => (
                R
                  ? (l.current = (0, r.openModal)(e =>
                      (0, t.jsx)(i.default, {
                        title: O.default.Messages.PTT_PERMISSION_TITLE,
                        body: O.default.Messages.PTT_PERMISSION_BODY.format({
                          game: null == _ ? void 0 : _.name,
                        }),
                        secondaryConfirmText:
                          O.default.Messages.DONT_SHOW_AGAIN,
                        onConfirmSecondary: () =>
                          a.default.clearPTTAdminWarning(),
                        onConfirm: () =>
                          window.open(
                            S.default.getArticleURL(
                              N.HelpdeskArticles.PUSH_TO_TALK_ADMINISTRATOR_MODE
                            ),
                            "_blank"
                          ),
                        confirmText: O.default.Messages.HELP_DESK,
                        ...e,
                      })
                    ))
                  : L(),
                () => {
                  L();
                }
              ),
              [_, R]
            ),
            null
          );
        };
    },
    521735: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return i;
          },
        });
      var t = E("37983");
      E("884691");
      var o = E("918109"),
        n = E("185137"),
        r = E("564007"),
        a = E("51168"),
        i = () =>
          (0, t.jsxs)(t.Fragment, {
            children: [
              (0, t.jsx)(n.default, {}),
              (0, t.jsx)(o.default, {}),
              (0, t.jsx)(r.default, {}),
              (0, t.jsx)(a.default, {}),
            ],
          });
    },
    564007: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return O;
          },
        }),
        E("222007");
      var t = E("37983"),
        o = E("884691"),
        n = E("446674"),
        r = E("77078"),
        a = E("363658"),
        i = E("135230"),
        I = E("723872"),
        s = E("130473"),
        T = E("782340");
      let S = () => {
          a.default.clearSuppressWarning();
        },
        N = () => {
          a.default.clearSuppressWarning(!0);
        };
      var O = () => {
        let e = o.useRef(null);
        function _() {
          null !== e.current &&
            ((0, r.closeModal)(e.current), (e.current = null));
        }
        let [a, O] = (0, n.useStateFromStoresArray)(
            [s.default],
            () => [s.default.shouldShowWarning(), s.default.isAFKChannel()],
            []
          ),
          A = o.useCallback(() => {
            let _ = "",
              E = "";
            O
              ? ((_ = T.default.Messages.SUPPRESSED_AFK_TITLE),
                (E = T.default.Messages.SUPPRESSED_AFK_BODY))
              : ((_ = T.default.Messages.SUPPRESSED),
                (E = T.default.Messages.SUPPRESSED_PERMISSION_BODY)),
              (e.current = (0, r.openModal)(e =>
                (0, t.jsx)(i.default, {
                  title: _,
                  body: E,
                  onConfirm: S,
                  confirmText: T.default.Messages.OKAY,
                  secondaryConfirmText: T.default.Messages.DONT_SHOW_AGAIN,
                  onConfirmSecondary: N,
                  ...e,
                })
              ));
          }, [O]),
          R = o.useCallback(() => {
            (0, r.openModalLazy)(async () => {
              let { default: e } = await E.el("109253").then(
                E.bind(E, "109253")
              );
              return _ => (0, t.jsx)(e, { ..._, showHideSuppressWarning: !0 });
            }).then(_ => {
              null != _ && (e.current = _);
            });
          }, []);
        return (
          o.useEffect(
            () => (
              a && (0, I.isRTCConnectedInHub)() ? R() : a ? A() : _(),
              () => {
                _();
              }
            ),
            [a, A, R]
          ),
          null
        );
      };
    },
    51168: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return N;
          },
        });
      var t = E("37983"),
        o = E("884691"),
        n = E("446674"),
        r = E("77078"),
        a = E("629109"),
        i = E("363658"),
        I = E("135230"),
        s = E("622785"),
        T = E("49111"),
        S = E("782340");
      function N() {
        let e = (0, n.useStateFromStores)(
            [s.default],
            () => s.default.shouldShowWarning(),
            []
          ),
          _ = o.useRef(null);
        function E() {
          null !== _.current &&
            ((0, r.closeModal)(_.current), (_.current = null));
        }
        function N() {
          i.default.clearVADWarning();
        }
        return (
          o.useEffect(
            () => (
              e
                ? (_.current = (0, r.openModal)(e =>
                    (0, t.jsx)(I.default, {
                      title: S.default.Messages.VAD_PERMISSION_TITLE,
                      body: S.default.Messages.VAD_PERMISSION_BODY,
                      onCancel: N,
                      cancelText: S.default.Messages.VAD_PERMISSION_OKAY,
                      confirmText: S.default.Messages.VAD_PERMISSION_ENABLE_PTT,
                      onConfirm: () => {
                        a.default.setMode(T.InputModes.PUSH_TO_TALK), N();
                      },
                      ...e,
                    })
                  ))
                : E(),
              () => {
                E();
              }
            ),
            [e]
          ),
          null
        );
      }
    },
    2662: function (e, _, E) {
      "use strict";
      E.r(_);
      var t = E("129611");
      E.es(t, _);
    },
    320777: function (e, _, E) {
      "use strict";
      E.r(_), E("190709"), E("996763");
      var t = E("286235");
      E("792736"),
        E("279295"),
        E("455209"),
        E("619106"),
        E("271938"),
        E("760190"),
        E("407117"),
        E("668528"),
        E("322876");
      var o = E("171718"),
        n = E("404073"),
        r = E("503586"),
        a = E("446674"),
        i = E("429030"),
        I = E("688817"),
        s = E("767251"),
        T = E("49671"),
        S = E("951212"),
        N = E("424948");
      E("762017");
      var O = E("787006"),
        A = E("605250"),
        R = E("648387"),
        l = E("49111"),
        L = E("782340");
      (0, i.setUpdateRules)(s.default),
        (0, n.default)(L.default, o.default, T.default),
        a.default.Emitter.injectBatchEmitChanges(r.batchUpdates),
        (a.default.PersistedStore.disableWrites = __OVERLAY__),
        a.default.initialize();
      let u = window.GLOBAL_ENV.RELEASE_CHANNEL;
      new (0, A.default)().log(
        "[BUILD INFO] Release Channel: "
          .concat(u, ", Build Number: ")
          .concat("264309", ", Version Hash: ")
          .concat("c7362d70ee0fff4c0e79532113a29421fcc31ee2")
      ),
        t.default.setTags({ appContext: l.CURRENT_APP_CONTEXT }),
        S.default.initBasic(),
        N.default.init(),
        I.FocusRingManager.init(),
        O.init(),
        (0, R.cleanupTempFiles)();
    },
    115718: function (e, _, E) {
      "use strict";
      var t, o, n, r;
      E.r(_),
        E.d(_, {
          JumpTypes: function () {
            return t;
          },
          RunningProcessFullscreenType: function () {
            return o;
          },
          DEFAULT_OVERLAY_OPTIONS: function () {
            return a;
          },
        }),
        ((n = t || (t = {})).ANIMATED = "ANIMATED"),
        (n.INSTANT = "INSTANT"),
        ((r = o || (o = {}))[(r.UNKNOWN = 0)] = "UNKNOWN"),
        (r[(r.WINDOWED = 1)] = "WINDOWED"),
        (r[(r.MAXIMIZED = 2)] = "MAXIMIZED"),
        (r[(r.BORDERLESS_FULLSCREEN = 3)] = "BORDERLESS_FULLSCREEN"),
        (r[(r.FULLSCREEN = 4)] = "FULLSCREEN"),
        (r[(r.MINIMIZED = 5)] = "MINIMIZED");
      let a = {
        compatibilityHook: !1,
        warn: !1,
        enabled: !1,
        allowHook: !0,
        supportsOutOfProcessOverlay: !1,
      };
    },
    199038: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          dateFnsLocales: function () {
            return t;
          },
        });
      let t = {
        bg: () => E.el("193515").then(E.bind(E, "193515")),
        cs: () => E.el("306687").then(E.bind(E, "306687")),
        da: () => E.el("242461").then(E.bind(E, "242461")),
        de: () => E.el("640841").then(E.bind(E, "640841")),
        el: () => E.el("295194").then(E.bind(E, "295194")),
        "en-GB": () => E.el("796137").then(E.bind(E, "796137")),
        "en-US": () => E.el("437757").then(E.bind(E, "437757")),
        "es-ES": () => E.el("442177").then(E.bind(E, "442177")),
        "es-419": () => E.el("442177").then(E.bind(E, "442177")),
        fi: () => E.el("465431").then(E.bind(E, "465431")),
        fr: () => E.el("754192").then(E.bind(E, "754192")),
        hr: () => E.el("497688").then(E.bind(E, "497688")),
        hu: () => E.el("221533").then(E.bind(E, "221533")),
        it: () => E.el("387601").then(E.bind(E, "387601")),
        ja: () => E.el("733281").then(E.bind(E, "733281")),
        ko: () => E.el("765821").then(E.bind(E, "765821")),
        lt: () => E.el("462244").then(E.bind(E, "462244")),
        nl: () => E.el("952582").then(E.bind(E, "952582")),
        no: () => E.el("103652").then(E.bind(E, "103652")),
        pl: () => E.el("1814").then(E.bind(E, "1814")),
        "pt-BR": () => E.el("521516").then(E.bind(E, "521516")),
        ro: () => E.el("638265").then(E.bind(E, "638265")),
        ru: () => E.el("510376").then(E.bind(E, "510376")),
        "sv-SE": () => E.el("517426").then(E.bind(E, "517426")),
        th: () => E.el("859771").then(E.bind(E, "859771")),
        tr: () => E.el("534278").then(E.bind(E, "534278")),
        uk: () => E.el("25262").then(E.bind(E, "25262")),
        vi: () => E.el("924814").then(E.bind(E, "924814")),
        "zh-CN": () => E.el("900392").then(E.bind(E, "900392")),
        "zh-TW": () => E.el("797701").then(E.bind(E, "797701")),
        hi: () => E.el("356054").then(E.bind(E, "356054")),
      };
    },
    782340: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return A;
          },
        }),
        E("222007"),
        E("424973");
      var t = E("866227"),
        o = E.n(t),
        n = E("429030"),
        r = E("229353"),
        a = E.n(r),
        i = E("444051"),
        I = E.n(i),
        s = E("657743"),
        T = E.n(s);
      let S = e => ({ ...I, ...T, ...e }),
        N = new n.default({
          getMessages: e =>
            "en-US" === e
              ? S(a)
              : E("795529")(
                  "./messages/".concat(e, ".jsona").replace("./messages/", "./")
                )
                  .then(e => {
                    let { default: _ } = e;
                    return _;
                  })
                  .then(S),
          getLanguages: () => E("199005"),
        });
      function O(e) {
        E("199038")
          .dateFnsLocales[e]()
          .then(_ => {
            let { default: t } = _;
            {
              let { registerLocale: _ } = E("900419");
              _(e, t);
            }
          });
      }
      N.addListener("locale", e => {
        !(function (e, _) {
          let E = [],
            t = ("no" === e ? "nb" : e).split("-");
          for (; t.length > 0; ) E.push(t.join("-")), t.pop();
          E.push(_), o.locale(E);
        })(e, "en-US");
        let { setTags: _ } = E("286235").default;
        _({ locale: e });
      }),
        N.addListener("locale", O),
        O(N.getLocale());
      var A = N;
    },
    767251: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return a;
          },
        });
      var t = E("37983");
      E("884691");
      var o = E("404828"),
        n = E.n(o),
        r = E("77078");
      function a(e) {
        return (
          (e.paragraph = {
            ...e.paragraph,
            react: function (e, _, E) {
              return (0, t.jsx)("p", { children: _(e.content, E) }, E.key);
            },
          }),
          (e.link = {
            ...e.link,
            react: function (e, _, E) {
              let o = {};
              if (null != e.context) {
                let _ = e.context[e.target];
                _ && _.onClick
                  ? ((o.onClick = _.onClick),
                    (o.onContextMenu = _.onContextMenu))
                  : (o.onClick = _);
              }
              return (
                null == o.onClick && (o.href = n.sanitizeUrl(e.target)),
                (0, t.jsx)(
                  r.Anchor,
                  { title: e.title, ...o, children: _(e.content, E) },
                  E.key
                )
              );
            },
          }),
          e
        );
      }
    },
    900673: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return t.default;
          },
        });
      var t = E("166745");
    },
    102535: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return t;
          },
        }),
        E("222007");
      var t,
        o = E("907002");
      function n(e, _) {
        let E = e.findIndex(_);
        return E < 0 ? e.length : E;
      }
      t = class extends o.FrameLoop {
        setRAF(e, _) {
          0 !== this.id && (this._cancelAnimationFrame(this.id), (this.id = 0)),
            (this._requestAnimationFrame = e),
            (this._cancelAnimationFrame = _),
            this.loop();
        }
        constructor(...e) {
          super(...e),
            (this._requestAnimationFrame = e => requestAnimationFrame(e)),
            (this._cancelAnimationFrame = e => cancelAnimationFrame(e)),
            (this.writing = !1),
            (this.id = 0),
            (this.lastTime = 0),
            (this.animations = []),
            (this.priority = 0),
            (this.startQueue = new Set()),
            (this.frameQueue = new Set()),
            (this.writeQueue = new Set()),
            (this.timeoutQueue = []),
            (this.addAnimation = e => {
              let _ = this.animations.indexOf(e);
              _ < 0 &&
                ((_ = this.animations.findIndex(_ => _.priority > e.priority)),
                this.animations.splice(
                  0 != ~_ ? _ : this.animations.length,
                  0,
                  e
                ));
            }),
            (this.loop = () => {
              if (0 !== this.lastTime)
                try {
                  this.advance();
                } catch (e) {
                  console.error(e);
                } finally {
                  this.animations.length > 0 ||
                  this.startQueue.size > 0 ||
                  this.frameQueue.size > 0 ||
                  this.writeQueue.size > 0 ||
                  this.timeoutQueue.length > 0
                    ? (this.id = this._requestAnimationFrame(this.loop))
                    : ((this.lastTime = 0), (this.id = 0));
                }
            }),
            (this.startLoop = () => {
              !(this.lastTime > 0) &&
                ((this.lastTime = o.Globals.now()),
                (this.id = this._requestAnimationFrame(this.loop)));
            }),
            (this.advance = () => {
              let e = o.Globals.now();
              if (
                (this.startQueue.size > 0 &&
                  (this.startQueue.forEach(this.addAnimation),
                  this.startQueue.clear()),
                this.timeoutQueue.length > 0 &&
                  o.Globals.batchedUpdates(() => {
                    let _ = n(this.timeoutQueue, _ => _.time > e);
                    this.timeoutQueue.splice(0, _).forEach(e => e.handler());
                  }),
                e > this.lastTime)
              ) {
                let _ = Math.min(64, e - this.lastTime);
                (this.lastTime = e),
                  o.Globals.batchedUpdates(() => {
                    this.animations.length > 0 &&
                      (o.Globals.willAdvance(this.animations),
                      (this.animations = this.animations.filter(
                        e => (
                          (this.priority = e.priority),
                          !e.idle && e.advance(_),
                          !e.idle
                        )
                      )),
                      (this.priority = 0)),
                      this.frameQueue.size > 0 &&
                        (this.frameQueue.forEach(_ => _(e)),
                        this.frameQueue.clear()),
                      this.writeQueue.size > 0 &&
                        ((this.writing = !0),
                        this.writeQueue.forEach(_ => _(e)),
                        this.writeQueue.clear(),
                        (this.writing = !1));
                  });
              }
            }),
            (this.start = e => {
              this.priority > e.priority
                ? this.startQueue.add(e)
                : (this.addAnimation(e), this.startLoop());
            }),
            (this.setTimeout = (e, _) => {
              let E = o.Globals.now() + _,
                t = () => {
                  let e = this.timeoutQueue.findIndex(e => e.cancel === t);
                  e >= 0 && this.timeoutQueue.splice(e, 1);
                },
                r = n(this.timeoutQueue, e => e.time > E),
                a = { time: E, handler: e, cancel: t };
              return this.timeoutQueue.splice(r, 0, a), this.startLoop(), a;
            }),
            (this.onFrame = e => {
              this.frameQueue.add(e), this.startLoop();
            }),
            (this.onWrite = e => {
              this.writing ? e(this.lastTime) : this.writeQueue.add(e);
            });
        }
      };
    },
    619106: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          frameLoop: function () {
            return n;
          },
        });
      var t = E("907002"),
        o = E("102535");
      let n = new o.default();
      t.Globals.assign({ frameLoop: n });
    },
    455209: function (e, _, E) {
      "use strict";
      E.r(_),
        E("313619"),
        E("654714"),
        E("287168"),
        E("956660"),
        E("222007"),
        E("511434"),
        E("808653"),
        E("424973"),
        E("726581");
      var t = E("872717"),
        o = E("821316"),
        n = E("129966"),
        r = E("583340"),
        a = E("823348"),
        i = E("35468");
      E("773336");
      var I = E("286235"),
        s = E("900673"),
        T = E("49111");
      let S = [
          "https://cdn.discordapp.com/bad-domains/updated_hashes.json",
          "https://cdn.discordapp.com/bad-domains/hashes.json",
        ],
        N = new s.default(),
        O = /\/api(\/v\d+)?\/science/;
      (0, t.setRequestPatch)({
        prepareRequest(e) {
          let { default: _ } = E("271938"),
            { default: n } = E("313915"),
            { default: r } = E("915639"),
            { default: a } = E("697218"),
            { default: i } = E("599110"),
            { isPlatformEmbedded: s } = E("773336");
          if ("/" === e.url[0]) {
            var T, A;
            (e.url = t.default.getAPIBaseURL() + e.url),
              !("Authorization" in e.header) &&
                !("authorization" in e.header) &&
                e.set("Authorization", _.getToken());
            let E = i.getSuperPropertiesBase64();
            null != E && e.set("X-Super-Properties", E);
            let o = _.getFingerprint();
            if ((null != o && "" !== o && e.set("X-Fingerprint", o), s)) {
              let _ = [];
              null != navigator && (_ = ((T = [...navigator.languages]), T));
              let E = (function (e) {
                let _ = 10,
                  E = e.reduce(
                    (e, E) => (
                      10 === _
                        ? e.push(E)
                        : e.push("".concat(E, ";q=0.").concat(_)),
                      (_ = Math.max(_ - 1, 1)),
                      e
                    ),
                    []
                  );
                return E.join(",");
              })(_);
              e.set("Accept-Language", E);
            }
            e.set("X-Discord-Locale", r.locale);
            let I = (function () {
              if (null == Intl.DateTimeFormat) return null;
              let e = Intl.DateTimeFormat();
              if (null == e.resolvedOptions) return null;
              let _ = e.resolvedOptions();
              return _.timeZone;
            })();
            null != I && e.set("X-Discord-Timezone", I);
            let S = n.getDebugOptionsHeaderValue();
            if (
              (null != S && "" !== S && e.set("X-Debug-Options", S),
              n.isTracingRequests)
            ) {
              let _ = a.getCurrentUser(),
                E = N.generate(
                  null !== (A = null == _ ? void 0 : _.id) && void 0 !== A
                    ? A
                    : "0"
                );
              e.set("x-client-trace-id", E);
              try {
                let _ = new URL(e.url).pathname;
                if (!O.test(_)) {
                  let t = (function (e) {
                    let _ = new URLSearchParams();
                    _.append(
                      "query",
                      '@guid.x-client-trace-id:"'.concat(e, '"')
                    ),
                      _.append("showAllSpans", "true");
                    let E = new URL(
                      "traces?".concat(_.toString()),
                      "https://datadog.discord.tools/apm/"
                    );
                    return E.toString();
                  })(E);
                  null !== t &&
                    console.debug(
                      "%c[tracing]%c %s %s\n%s",
                      "font-weight: bold",
                      "",
                      e.method,
                      _,
                      t
                    );
                }
              } catch (e) {
                console.error("error while printing Lightstep log", e);
              }
            }
          }
          o.report(
            "Network",
            "Sending ".concat(e.method, " to ").concat(e.url)
          ),
            e.on("response", _ => {
              let E = null != _ && _.status >= 400 ? _.text : null;
              o.report(
                "Network",
                "Completed "
                  .concat(e.method, " to ")
                  .concat(e.url, " with status: ")
                  .concat(null == _ ? void 0 : _.status, " ")
                  .concat(null == E ? "" : "and body: ".concat(E))
              );
            }),
            e.on("error", (_, E) => {
              if (
                (o.report(
                  "Network",
                  "Failed "
                    .concat(e.method, " to ")
                    .concat(e.url, " with status ")
                    .concat(null == _ ? void 0 : _.status, " and body: ")
                    .concat(null == E ? void 0 : E.text)
                ),
                null != _ && "parse" in _ && _.parse)
              ) {
                let E = "[FILTERED]";
                if (S.includes(e.url)) {
                  var t, n;
                  E =
                    null === (n = e.xhr) || void 0 === n
                      ? void 0
                      : null === (t = n.responseText) || void 0 === t
                        ? void 0
                        : t.slice(0, 1e3);
                }
                I.default.addBreadcrumb({
                  category: "superagent",
                  message: "Failed to parse HTTP response.",
                  data: {
                    method: e.method,
                    url: e.url,
                    responseText: E,
                    status: _.status,
                  },
                });
              }
            });
        },
        interceptResponse(e, _, t) {
          var o, i, I, s, S;
          return 400 === e.statusCode &&
            (null === (o = e.body) || void 0 === o ? void 0 : o.captcha_key)
            ? (Promise.all([
                E.el("417814").then(E.bind(E, "417814")),
                E.el("507445").then(E.bind(E, "507445")),
              ])
                .then(_ => {
                  let [
                    { default: E },
                    { extractCaptchaPropsFromResponseBody: t },
                  ] = _;
                  return E.showCaptchaAsync(t(e.body));
                })
                .then(e => {
                  let { captcha_key: E, captcha_rqtoken: t } = e,
                    o = { "X-Captcha-Key": E };
                  null != t && (o["X-Captcha-Rqtoken"] = t), _(o);
                })
                .catch(t),
              !0)
            : 401 === e.statusCode &&
                (null === (i = e.body) || void 0 === i ? void 0 : i.code) ===
                  T.AbortCodes.MFA_REQUIRED &&
                (null === (I = e.body) || void 0 === I ? void 0 : I.mfa)
              ? (E.el("776502")
                  .then(E.bind(E, "776502"))
                  .then(E => {
                    let { openMFAModal: o } = E;
                    o(e.body.mfa, _, t);
                  })
                  .catch(t),
                !0)
              : (0, a.isLimitedAccessErrorCode)(
                    e.statusCode,
                    null === (s = e.body) || void 0 === s ? void 0 : s.code
                  )
                ? (E.el("258158")
                    .then(E.bind(E, "258158"))
                    .then(e => {
                      let { default: _ } = e;
                      _();
                    }),
                  !1)
                : (0, n.isLimitedAccessErrorCode)(
                      e.statusCode,
                      null === (S = e.body) || void 0 === S ? void 0 : S.code
                    )
                  ? (E.el("772545")
                      .then(E.bind(E, "772545"))
                      .then(_ => {
                        var E;
                        let { default: t } = _;
                        t(
                          null === (E = e.body) || void 0 === E
                            ? void 0
                            : E.guild_id
                        );
                      }),
                    !1)
                  : ((0, r.isBlockedByProxyErrorCode)(e) &&
                      E.el("499946")
                        .then(E.bind(E, "499946"))
                        .then(e => {
                          let { handleBlockedByProxy: _ } = e;
                          _();
                        }),
                    !1);
        },
      }),
        (0, t.setAwaitOnline)(async e => {
          if (
            (o.report(
              "Network",
              "Request to ".concat(e, " failed, will retry.")
            ),
            !i.default.isOnline())
          )
            await i.default.awaitOnline(),
              o.report(
                "Network",
                "Network detected online, retrying ".concat(e)
              );
        });
    },
    244201: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          MainWindowDispatch: function () {
            return I;
          },
          getWindowDispatchForElement: function () {
            return S;
          },
          getAppWindowContextValue: function () {
            return N;
          },
          getCurrentlyInteractingAppContext: function () {
            return O;
          },
          AppWindowContextProvider: function () {
            return A;
          },
          useAppContext: function () {
            return R;
          },
          useWindowDispatch: function () {
            return l;
          },
          default: function () {
            return L;
          },
        }),
        E("222007");
      var t = E("37983"),
        o = E("884691"),
        n = E("659500"),
        r = E("816454"),
        a = E("421804"),
        i = E("49111");
      let I = new n.ComponentDispatcher(),
        s = o.createContext({
          appContext: i.AppContext.APP,
          renderWindow: window,
          windowDispatch: I,
          windowId: (0, r.getMainWindowId)(),
        }),
        T = new Map();
      function S(e) {
        var _;
        let E = e.ownerDocument.defaultView;
        if (null == E) return;
        let t = (0, r.getWindowId)(E);
        return null === (_ = T.get(t)) || void 0 === _
          ? void 0
          : _.windowDispatch;
      }
      function N(e) {
        return T.get(e);
      }
      function O() {
        let e = (function () {
          var e;
          let _ = (0, a.getCurrentlyInteractingWindowId)();
          return null == _
            ? null
            : null !== (e = T.get(_)) && void 0 !== e
              ? e
              : null;
        })();
        return null != e ? e.appContext : null;
      }
      function A(e) {
        let { appContext: _, renderWindow: E, children: o } = e,
          a = (function (e, _) {
            let E = (0, r.getWindowId)(_),
              t = T.get(E);
            if (null == t) {
              let o = new n.ComponentDispatcher();
              (t = {
                appContext: e,
                renderWindow: _,
                windowDispatch: o,
                windowId: E,
              }),
                T.set(E, t),
                _.addEventListener("unload", () => {
                  T.delete(E);
                });
            }
            return t;
          })(_, E);
        return (0, t.jsx)(s.Provider, { value: a, children: o });
      }
      function R() {
        return o.useContext(s).appContext;
      }
      function l() {
        return o.useContext(s).windowDispatch;
      }
      var L = s;
    },
    424948: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return O;
          },
        });
      var t = E("161778"),
        o = E("599110"),
        n = E("206230"),
        r = E("727538");
      let a = r.AccessibilityFeatureFlags.NONE,
        i = window.matchMedia("(prefers-color-scheme: dark)"),
        I = window.matchMedia("(prefers-color-scheme: light)"),
        s = window.matchMedia("(inverted-colors: inverted)"),
        T = window.matchMedia("(prefers-contrast: more)"),
        S = window.matchMedia("(forced-colors: active)");
      function N(e, _) {
        _ ? (a |= e) : (a &= ~e);
      }
      var O = {
        init() {
          n.default.addChangeListener(this.handleAccessibilityStoreChanged),
            t.default.addChangeListener(this.handleAccessibilityStoreChanged),
            i.addListener(this.handlePrefersColorSchemeDarkChanged),
            this.handlePrefersColorSchemeDarkChanged(i),
            I.addListener(this.handlePrefersColorSchemeLightChanged),
            this.handlePrefersColorSchemeLightChanged(I),
            T.addListener(this.handlePrefersMoreContrastChanged),
            this.handlePrefersMoreContrastChanged(T),
            S.addListener(this.handlePrefersForcedColorsChanged),
            this.handlePrefersForcedColorsChanged(S),
            s.addListener(this.handleInvertColorsChanged),
            this.handleInvertColorsChanged(s),
            o.default.setSystemAccessibilityFeatures(this.getActiveFeatures);
        },
        getActiveFeatures: () => a,
        handlePrefersColorSchemeDarkChanged(e) {
          N(r.AccessibilityFeatureFlags.PREFERS_COLOR_SCHEME_DARK, e.matches);
        },
        handlePrefersColorSchemeLightChanged(e) {
          N(r.AccessibilityFeatureFlags.PREFERS_COLOR_SCHEME_LIGHT, e.matches);
        },
        handlePrefersMoreContrastChanged(e) {
          N(r.AccessibilityFeatureFlags.HIGH_CONTRAST, e.matches);
        },
        handlePrefersForcedColorsChanged(e) {
          N(r.AccessibilityFeatureFlags.FORCED_COLORS, e.matches);
        },
        handleInvertColorsChanged(e) {
          N(r.AccessibilityFeatureFlags.INVERT_COLORS, e.matches);
        },
        handleAccessibilityStoreChanged() {
          N(
            r.AccessibilityFeatureFlags.REDUCED_MOTION,
            n.default.useReducedMotion
          ),
            N(
              r.AccessibilityFeatureFlags.REDUCED_MOTION_FROM_USER_SETTINGS,
              "auto" !== n.default.rawPrefersReducedMotion
            ),
            N(
              r.AccessibilityFeatureFlags.FORCED_COLORS_FROM_USER_SETTINGS,
              n.default.syncForcedColors
            ),
            N(
              r.AccessibilityFeatureFlags.CHAT_FONT_SCALE_DECREASED,
              n.default.isFontScaledDown
            ),
            N(
              r.AccessibilityFeatureFlags.CHAT_FONT_SCALE_INCREASED,
              n.default.isFontScaledUp
            ),
            N(
              r.AccessibilityFeatureFlags.ZOOM_LEVEL_DECREASED,
              n.default.isZoomedOut
            ),
            N(
              r.AccessibilityFeatureFlags.ZOOM_LEVEL_INCREASED,
              n.default.isZoomedIn
            ),
            N(
              r.AccessibilityFeatureFlags.MESSAGE_GROUP_SPACING_DECREASED,
              n.default.isMessageGroupSpacingDecreased
            ),
            N(
              r.AccessibilityFeatureFlags.MESSAGE_GROUP_SPACING_INCREASED,
              n.default.isMessageGroupSpacingIncreased
            ),
            N(r.AccessibilityFeatureFlags.DARK_SIDEBAR, t.default.darkSidebar),
            N(
              r.AccessibilityFeatureFlags.SATURATION_LEVEL_DECREASED,
              n.default.saturation < 1
            ),
            N(
              r.AccessibilityFeatureFlags.ROLE_STYLE_ADJUSTED,
              "username" !== n.default.roleStyle
            ),
            N(
              r.AccessibilityFeatureFlags.SYNC_PROFILE_THEME_WITH_USER_THEME,
              n.default.syncProfileThemeWithUserTheme
            );
        },
      };
    },
    191152: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          fetchActiveChannels: function () {
            return a;
          },
        });
      var t = E("872717"),
        o = E("913144"),
        n = E("599417"),
        r = E("49111");
      async function a(e) {
        let _ =
          arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 10;
        o.default.dispatch({ type: "ACTIVE_CHANNELS_FETCH_START", guildId: e });
        try {
          var E, a;
          let n = await t.default.get({
              url: r.Endpoints.ACTIVE_CHANNELS(e),
              query: { channel_limit: _ },
            }),
            i =
              null !==
                (a =
                  null === (E = n.body) || void 0 === E
                    ? void 0
                    : E.channels) && void 0 !== a
                ? a
                : [];
          return (
            o.default.dispatch({
              type: "ACTIVE_CHANNELS_FETCH_SUCCESS",
              guildId: e,
              channels: i,
            }),
            n
          );
        } catch (_) {
          throw (
            (o.default.dispatch({
              type: "ACTIVE_CHANNELS_FETCH_FAILURE",
              guildId: e,
              error: new n.default(_),
            }),
            _)
          );
        }
      }
    },
    588788: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return L;
          },
        }),
        E("222007");
      var t = E("862337"),
        o = E("689988"),
        n = E("575365"),
        r = E("42203"),
        a = E("42887"),
        i = E("945956"),
        I = E("568307"),
        s = E("101125"),
        T = E("280168"),
        S = E("316133"),
        N = E("718517"),
        O = E("716241"),
        A = E("49111");
      let R = 1 * N.default.Millis.MINUTE;
      class l extends o.default {
        _initialize() {
          __OVERLAY__
            ? (this.stores = new Map())
            : ((this.stores = new Map()
                .set(T.default, () => this._handleSpeakingStoreChanged())
                .set(i.default, () => this._handleRTCConnectionStoreChanged())),
              this._reset());
        }
        _reset() {
          (this._currentUserSpeaking = !1),
            (this._anyoneElseSpeaking = !1),
            null != this._reportInterval &&
              (this._reportInterval.stop(), (this._reportInterval = null));
        }
        _trackStartSpeaking() {
          if (this._currentUserSpeaking) {
            let e = i.default.getChannelId(),
              _ = i.default.getGuildId(),
              E = r.default.getChannel(e),
              t = null == E ? void 0 : E.isBroadcastChannel();
            (0, O.trackWithMetadata)(A.AnalyticEvents.START_SPEAKING, {
              mode: a.default.getMode(),
              priority: T.default.isCurrentUserPrioritySpeaking(),
              channel: e,
              server: _,
              channel_id: e,
              guild_id: _,
              is_broadcast: t,
              rtc_connection_id: i.default.getRTCConnectionId(),
              media_session_id: i.default.getMediaSessionId(),
              voice_state_count: S.default.countVoiceStatesForChannel(
                this._voiceChannelId
              ),
              ...this.getGameMetadata(),
              ...i.default.getPacketStats(),
            });
          }
        }
        _trackStartListening() {
          if (a.default.isDeaf() || !this._anyoneElseSpeaking) return;
          let e = i.default.getChannelId(),
            _ = i.default.getGuildId(),
            E = r.default.getChannel(e),
            t = null == E ? void 0 : E.isBroadcastChannel();
          (0, O.trackWithMetadata)(A.AnalyticEvents.START_LISTENING, {
            mute: a.default.isMute(),
            anyone_priority: T.default.isAnyonePrioritySpeaking(),
            channel: e,
            server: _,
            channel_id: e,
            guild_id: _,
            is_broadcast: t,
            rtc_connection_id: i.default.getRTCConnectionId(),
            media_session_id: i.default.getMediaSessionId(),
            voice_state_count: S.default.countVoiceStatesForChannel(
              this._voiceChannelId
            ),
            ...this.getGameMetadata(),
          });
        }
        _terminate() {
          this._reset(),
            T.default.removeChangeListener(this._handleSpeakingStoreChanged),
            i.default.removeChangeListener(
              this._handleRTCConnectionStoreChanged
            );
        }
        getGameMetadata() {
          let e = s.default.findActivity(
              e => e.type === A.ActivityTypes.PLAYING
            ),
            _ = I.default.getCurrentGameForAnalytics();
          return {
            game_platform: (0, n.default)(e),
            game_name: null != e ? e.name : null,
            game_exe_name: null != _ ? _.exeName : null,
            game_id: null != e ? e.application_id : null,
          };
        }
        constructor(...e) {
          super(...e),
            (this._currentUserSpeaking = !1),
            (this._anyoneElseSpeaking = !1),
            (this._handleRTCConnectionStoreChanged = () => {
              let e = i.default.getChannelId();
              if (this._voiceChannelId !== e) {
                if (((this._voiceChannelId = e), null == e)) {
                  this._reset();
                  return;
                }
                null == this._reportInterval &&
                  ((this._reportInterval = new t.Interval()),
                  this._reportInterval.start(R, () => {
                    this._trackStartSpeaking(), this._trackStartListening();
                  }));
              }
            }),
            (this._handleSpeakingStoreChanged = () => {
              let e = T.default.isCurrentUserSpeaking();
              this._currentUserSpeaking !== e &&
                ((this._currentUserSpeaking = e), this._trackStartSpeaking());
              let _ = T.default.isAnyoneElseSpeaking();
              this._anyoneElseSpeaking !== _ &&
                ((this._anyoneElseSpeaking = _), this._trackStartListening());
            });
        }
      }
      var L = new l();
    },
    73749: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return a;
          },
        });
      var t = E("37983");
      E("884691");
      var o = E("90915"),
        n = E("759843"),
        r = E("428958");
      function a(e) {
        var _;
        let {
            impressionName: E,
            impressionProperties: a,
            disableTrack: i,
            ...I
          } = e,
          s = a;
        return (
          "function" == typeof s && (s = s(I)),
          (0, r.default)(
            { type: n.ImpressionTypes.PAGE, name: E, properties: s },
            { disableTrack: i },
            [null === (_ = I.location) || void 0 === _ ? void 0 : _.pathname]
          ),
          (0, t.jsx)(o.Route, { ...I })
        );
      }
    },
    948710: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return L;
          },
        }),
        E("222007");
      var t = E("37983"),
        o = E("884691"),
        n = E("414456"),
        r = E.n(n),
        a = E("446674"),
        i = E("77078"),
        I = E("368694"),
        s = E("313915"),
        T = E("578706"),
        S = E("381546"),
        N = E("655804"),
        O = E("238500"),
        A = E("983782"),
        R = E("939011"),
        l = E("953014");
      function L() {
        let { debugTrackedData: e, impressions: _ } = (0, R.useImpressionStore)(
            e => ({
              debugTrackedData: e.debugTrackedData,
              impressions: e.impressions,
            })
          ),
          E = (0, a.useStateFromStores)(
            [s.default],
            () => s.default.isAnalyticsDebuggerEnabled
          ),
          n = (0, a.useStateFromStores)(
            [I.default],
            () => I.default.isDeveloper
          ),
          [L, u] = o.useState(!1),
          { name: C, ...D } = null != e ? e : {},
          c = null != C;
        return n && E
          ? (0, t.jsx)(A.default, {
              children: (0, t.jsxs)("div", {
                className: r(l.container, {
                  [l.containerMinimized]: L,
                  [l.notTracked]: !c,
                }),
                children: [
                  (0, t.jsx)(i.Clickable, {
                    className: l.minimizeButton,
                    onClick: () => {
                      u(!L);
                    },
                    children: L
                      ? (0, t.jsx)(N.default, {})
                      : (0, t.jsx)(O.default, {}),
                  }),
                  (0, t.jsxs)("div", {
                    className: r(l.content, { [l.contentMinimized]: L }),
                    children: [
                      (0, t.jsxs)(i.Text, {
                        className: r(l.label, { [l.notTracked]: !c }),
                        variant: "text-xxs/normal",
                        children: [
                          c
                            ? (0, t.jsx)(T.default, {
                                className: l.iconTracked,
                              })
                            : (0, t.jsx)(S.default, {
                                className: l.iconNotTracked,
                              }),
                          null != C ? C : "(untracked)",
                        ],
                      }),
                      (0, t.jsx)("div", {
                        className: l.current,
                        children: JSON.stringify(D, void 0, 2),
                      }),
                      (0, t.jsx)(i.Text, {
                        className: r(l.label, { [l.notTracked]: !c }),
                        variant: "text-xxs/normal",
                        children: "impressions stack",
                      }),
                      (0, t.jsx)("div", {
                        className: l.stack,
                        children: JSON.stringify(_, void 0, 2),
                      }),
                    ],
                  }),
                ],
              }),
            })
          : null;
      }
    },
    805199: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return C;
          },
        });
      var t = E("446674"),
        o = E("913144"),
        n = E("697218"),
        r = E("599110"),
        a = E("719923"),
        i = E("513196"),
        I = E("49111"),
        s = E("994428"),
        T = E("646718");
      let S = {
          desktop: i.FreemiumAppIconIds.DEFAULT,
          coachmarkImpressions: 0,
        },
        N = { client: S },
        O = !1,
        A = !0,
        R = () => {
          A = !a.default.canUsePremiumAppIcons(n.default.getCurrentUser());
        },
        l = e => {
          if (((N.client.desktop = e), !A)) {
            var _;
            r.default.track(I.AnalyticEvents.APP_ICON_UPDATED, {
              icon_id: e,
              user_premium_tier:
                null === (_ = n.default.getCurrentUser()) || void 0 === _
                  ? void 0
                  : _.premiumType,
              icon_premium_tier:
                e !== i.FreemiumAppIconIds.DEFAULT
                  ? T.PremiumTypes.TIER_2
                  : null,
            });
          }
        };
      function L() {
        A &&
          (N.client = {
            desktop: i.FreemiumAppIconIds.DEFAULT,
            coachmarkImpressions: 2,
          }),
          (O = !1);
      }
      class u extends t.default.PersistedStore {
        initialize(e) {
          null != e && (N = e),
            this.waitFor(n.default),
            this.syncWith([n.default], R);
        }
        get isEditorOpen() {
          return O;
        }
        get isUpsellPreview() {
          return A;
        }
        getState() {
          return N;
        }
        getCurrentDesktopIcon() {
          var e;
          return null == N
            ? void 0
            : null === (e = N.client) || void 0 === e
              ? void 0
              : e.desktop;
        }
      }
      (u.displayName = "AppIconPersistedStoreState"),
        (u.persistKey = "AppIconPersistedStoreState");
      var C = new u(o.default, {
        APP_ICON_UPDATED: function (e) {
          let { id: _ } = e;
          null != _ && l(_);
        },
        APP_ICON_EDITOR_OPEN: function () {
          O = !0;
        },
        APP_ICON_EDITOR_CLOSE: L,
        APP_ICON_TRACK_IMPRESSION: function (e) {
          let { markAsDismissed: _ } = e;
          (N.client.coachmarkImpressions += 1),
            N.client.coachmarkImpressions >= 2 &&
              (null == _ || _(s.ContentDismissActionType.UNKNOWN), L());
        },
      });
    },
    513196: function (e, _, E) {
      "use strict";
      var t, o, n, r, a;
      E.r(_),
        E.d(_, {
          FreemiumAppIconIds: function () {
            return t;
          },
          PremiumAppIconIds: function () {
            return o;
          },
        }),
        ((t || (t = {})).DEFAULT = "AppIcon"),
        ((r = o || (o = {})).BRAND_DARK = "BrandDarkIcon"),
        (r.BRAND_INVERTED = "BrandInvertedIcon"),
        (r.MATTE_LIGHT = "MatteLightIcon"),
        (r.MATTE_DARK = "MatteDarkIcon"),
        (r.PASTEL = "PastelIcon"),
        (r.PIRATE = "PirateIcon"),
        (r.CAMO = "CamoIcon"),
        (r.SUNSET = "SunsetIcon"),
        (r.GALAXY = "GalaxyIcon"),
        (r.Y2K = "Y2KIcon"),
        (r.CHERRY_BLOSSOM = "CherryBlossomIcon"),
        (r.BEANIE = "BeanieIcon"),
        (r.GAMING = "GamingIcon"),
        (r.CIRCUIT = "CircuitIcon"),
        (r.HOLO_WAVES = "HoloWavesIcon"),
        (r.BLUSH = "BlushIcon"),
        (r.ANGRY = "AngryIcon"),
        (r.MANGA = "MangaIcon"),
        (r.CONTROLLER = "ControllerIcon"),
        (r.MUSHROOM = "MushroomIcon"),
        ((a = n || (n = {})).DRIP = "DripIcon"),
        (a.SLIMY = "SlimyIcon"),
        (a.ZOMBIE = "ZombieIcon"),
        (a.CLYDE_STEIN = "ClydeSteinIcon"),
        { ...t, ...o, ...n };
    },
    42723: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return r;
          },
        });
      var t = E("37983");
      E("884691");
      var o = E("605475"),
        n = E("782340");
      function r(e) {
        let { id: _, width: E = o.CUSTOM_BASE_SIZE } = e,
          r = o.ICONS_BY_ID[_];
        return null == r
          ? null
          : (0, t.jsx)("img", {
              src: r.iconSource,
              width: E,
              alt: n.default.Messages.SETTINGS_CUSTOM_APP_ICONS,
              draggable: !1,
            });
      }
    },
    605475: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          CUSTOM_BASE_SIZE: function () {
            return h;
          },
          ICONS: function () {
            return P;
          },
          ICONS_BY_ID: function () {
            return m;
          },
        });
      var t = E("917351"),
        o = E.n(t),
        n = E("915934"),
        r = E("217696"),
        a = E("766249"),
        i = E("512772"),
        I = E("947146"),
        s = E("301071"),
        T = E("162551"),
        S = E("698060"),
        N = E("541272"),
        O = E("20995"),
        A = E("709048"),
        R = E("91801"),
        l = E("340431"),
        L = E("538184"),
        u = E("974893"),
        C = E("236734"),
        D = E("832254"),
        c = E("514594"),
        d = E("738940"),
        U = E("513196"),
        M = E("782340");
      let h = 60,
        P = [
          {
            id: U.FreemiumAppIconIds.DEFAULT,
            iconSource: r,
            name: M.default.Messages.APP_ICON_DEFAULT,
            isPremium: !1,
          },
        ].concat([
          {
            id: U.PremiumAppIconIds.BRAND_DARK,
            iconSource: I,
            name: M.default.Messages.APP_ICON_BRAND_DARK,
            isPremium: !0,
          },
          {
            id: U.PremiumAppIconIds.MANGA,
            iconSource: l,
            isPremium: !0,
            name: M.default.Messages.APP_ICON_MANGA,
          },
          {
            id: U.PremiumAppIconIds.MATTE_DARK,
            iconSource: L,
            isPremium: !0,
            name: M.default.Messages.APP_ICON_MATTE_DARK,
          },
          {
            id: U.PremiumAppIconIds.MATTE_LIGHT,
            iconSource: u,
            name: M.default.Messages.APP_ICON_MATTE_LIGHT,
            isPremium: !0,
          },
          {
            id: U.PremiumAppIconIds.PASTEL,
            iconSource: C,
            isPremium: !0,
            name: M.default.Messages.APP_ICON_PASTEL,
          },
          {
            id: U.PremiumAppIconIds.PIRATE,
            iconSource: D,
            isPremium: !0,
            name: M.default.Messages.APP_ICON_PIRATE,
          },
          {
            id: U.PremiumAppIconIds.CAMO,
            iconSource: s,
            isPremium: !0,
            name: M.default.Messages.APP_ICON_CAMO,
          },
          {
            id: U.PremiumAppIconIds.SUNSET,
            iconSource: c,
            isPremium: !0,
            name: M.default.Messages.APP_ICON_SUNSET,
          },
          {
            id: U.PremiumAppIconIds.GALAXY,
            iconSource: O,
            isPremium: !0,
            name: M.default.Messages.APP_ICON_GALAXY,
          },
          {
            id: U.PremiumAppIconIds.Y2K,
            iconSource: d,
            isPremium: !0,
            name: M.default.Messages.APP_ICON_Y2K,
          },
          {
            id: U.PremiumAppIconIds.CHERRY_BLOSSOM,
            iconSource: T,
            isPremium: !0,
            name: M.default.Messages.APP_ICON_CHERRY_BLOSSOM,
          },
          {
            id: U.PremiumAppIconIds.BEANIE,
            iconSource: a,
            isPremium: !0,
            name: M.default.Messages.APP_ICON_BEANIE,
          },
          {
            id: U.PremiumAppIconIds.GAMING,
            iconSource: A,
            isPremium: !0,
            name: M.default.Messages.APP_ICON_GAMING,
          },
          {
            id: U.PremiumAppIconIds.CIRCUIT,
            iconSource: S,
            isPremium: !0,
            name: M.default.Messages.APP_ICON_CIRCUIT,
          },
          {
            id: U.PremiumAppIconIds.HOLO_WAVES,
            iconSource: R,
            isPremium: !0,
            name: M.default.Messages.APP_ICON_HOLO_WAVES,
          },
          {
            id: U.PremiumAppIconIds.BLUSH,
            iconSource: i,
            isPremium: !0,
            name: M.default.Messages.APP_ICON_BLUSH,
          },
          {
            id: U.PremiumAppIconIds.ANGRY,
            iconSource: n,
            isPremium: !0,
            name: M.default.Messages.APP_ICON_ANGRY,
          },
          {
            id: U.PremiumAppIconIds.CONTROLLER,
            iconSource: N,
            isPremium: !0,
            name: M.default.Messages.APP_ICON_CONTROLLER,
          },
        ]),
        m = o.keyBy(P, "id");
    },
    529531: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return B;
          },
        });
      var t = E("37983"),
        o = E("884691"),
        n = E("414456"),
        r = E.n(n),
        a = E("446674"),
        i = E("77078"),
        I = E("913144"),
        s = E("79112"),
        T = E("206625"),
        S = E("206230"),
        N = E("812204"),
        O = E("685665"),
        A = E("917247"),
        R = E("635956"),
        l = E("891653"),
        L = E("697218"),
        u = E("381546"),
        C = E("599110"),
        D = E("719923"),
        c = E("805199"),
        d = E("433724"),
        U = E("49111"),
        M = E("994428"),
        h = E("646718"),
        P = E("782340"),
        m = E("816087");
      let G = () => {
          I.default.dispatch({ type: "APP_ICON_EDITOR_CLOSE" });
        },
        p = () => {
          var e, _, E;
          let o = (0, a.useStateFromStores)([L.default], () =>
              D.default.isPremium(L.default.getCurrentUser())
            ),
            n = (0, A.usePremiumTrialOffer)(),
            r =
              (null == n
                ? void 0
                : null === (e = n.subscription_trial) || void 0 === e
                  ? void 0
                  : e.sku_id) === h.PremiumSubscriptionSKUs.TIER_2;
          return (0, t.jsx)(R.default, {
            size: i.Button.Sizes.MEDIUM,
            buttonText: o
              ? P.default.Messages.BILLING_SWITCH_PLAN_UPGRADE
              : r
                ? (0, D.formatTrialCtaIntervalDuration)({
                    intervalType:
                      null == n
                        ? void 0
                        : null === (_ = n.subscription_trial) || void 0 === _
                          ? void 0
                          : _.interval,
                    intervalCount:
                      null == n
                        ? void 0
                        : null === (E = n.subscription_trial) || void 0 === E
                          ? void 0
                          : E.interval_count,
                  })
                : P.default.Messages.USER_SETTINGS_CUSTOMIZATION_UPSELL,
            subscriptionTier: h.PremiumSubscriptionSKUs.TIER_2,
          });
        },
        g = e => {
          let { markAsDismissed: _ } = e,
            E = () => {
              null == _ || _(M.ContentDismissActionType.DISMISS), G();
            };
          return (0, t.jsxs)("div", {
            className: m.editorHeader,
            children: [
              (0, t.jsx)(i.Clickable, {
                className: m.closeCircleButton,
                onClick: () => E(),
                children: (0, t.jsx)(u.default, { className: m.closeCircle }),
              }),
              (0, t.jsxs)("div", {
                className: m.title,
                children: [
                  (0, t.jsx)(i.Heading, {
                    variant: "heading-lg/extrabold",
                    children: P.default.Messages.APP_ICON_PREVIEW_TITLE,
                  }),
                  (0, t.jsx)(l.default, { className: m.premiumIcon }),
                ],
              }),
            ],
          });
        },
        y = e => {
          let { isCoachmark: _, markAsDismissed: E } = e,
            o = (0, a.useStateFromStores)(
              [c.default],
              () => c.default.isUpsellPreview
            );
          return (0, t.jsxs)("div", {
            className: m.editorFooter,
            children: [
              o && (0, t.jsx)(p, {}),
              (0, t.jsx)(i.Button, {
                className: m.footerButton,
                onClick: () => {
                  null == E || E(M.ContentDismissActionType.DISMISS),
                    G(),
                    !_ && s.default.open();
                },
                color: i.Button.Colors.PRIMARY,
                size: i.Button.Sizes.MEDIUM,
                children:
                  o || _
                    ? P.default.Messages.CLIENT_THEMES_EDITOR_EXIT_PREVIEW
                    : P.default.Messages
                        .CLIENT_THEMES_EDITOR_RETURN_TO_SETTINGS,
              }),
            ],
          });
        };
      function B(e) {
        let { isCoachmark: _, markAsDismissed: E } = e,
          { analyticsLocations: n, AnalyticsLocationProvider: I } = (0,
          O.default)(N.default.APP_ICON_EDITOR),
          s = (0, a.useStateFromStores)([L.default], () =>
            L.default.getCurrentUser()
          ),
          {
            isUpsellPreview: A,
            isEditorOpen: R,
            shouldEditorAnimate: l,
          } = (0, a.useStateFromStoresObject)([c.default, S.default], () => ({
            isUpsellPreview: c.default.isUpsellPreview,
            isEditorOpen: c.default.isEditorOpen,
            shouldEditorAnimate: _ && !S.default.useReducedMotion,
          }));
        o.useEffect(() => {
          A &&
            C.default.track(U.AnalyticEvents.PREMIUM_UPSELL_VIEWED, {
              type: h.PremiumUpsellTypes.APP_ICON_UPSELL,
              location_stack: n,
            });
        }, [A, n]);
        let u = (0, T.default)(null, A ? G : U.NOOP);
        return (o.useEffect(() => {
          if (A && !R) return G;
        }, [A, R]),
        null == s)
          ? null
          : (0, t.jsx)(I, {
              children: (0, t.jsx)("div", {
                ref: u,
                className: r(m.editor, l ? m.editorAnimate : null),
                children: (0, t.jsxs)(i.HeadingLevel, {
                  children: [
                    (0, t.jsx)(g, { markAsDismissed: E }),
                    (0, t.jsx)(i.Scroller, {
                      className: m.editorBody,
                      children: (0, t.jsx)(d.default, {
                        className: m.selectionGroup,
                      }),
                    }),
                    (0, t.jsx)(y, { markAsDismissed: E, isCoachmark: _ }),
                  ],
                }),
              }),
            });
      }
    },
    762017: function (e, _, E) {
      "use strict";
      E.r(_);
      var t = E("695291");
      let o = {
        AppAnalyticsManager: {
          inlineRequire: () => E("588788").default,
          hasStoreChangeListeners: !0,
        },
        AudioSettingsManager: {
          actions: [
            "POST_CONNECTION_OPEN",
            "AUDIO_SET_LOCAL_VOLUME",
            "AUDIO_TOGGLE_LOCAL_MUTE",
            "AUDIO_TOGGLE_LOCAL_SOUNDBOARD_MUTE",
          ],
          inlineRequire: () => E("801290").default,
        },
        BlockedDomainManager: {
          inlineRequire: () => E("24966").default,
          loadAfterConnectionOpen: !0,
        },
        CallIdleManager: {
          actions: [
            "VOICE_STATE_UPDATES",
            "EMBEDDED_ACTIVITY_DISCONNECT",
            "CONNECTION_CLOSED",
          ],
          inlineRequire: () => E("357168").default,
        },
        ChangelogManager: {
          actions: ["POST_CONNECTION_OPEN"],
          inlineRequire: () => E("228495").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        ChannelCallManager: {
          inlineRequire: () => E("728966").default,
          hasStoreChangeListeners: !0,
        },
        ChannelSafetyWarningsManager: {
          actions: ["CHANNEL_SELECT", "CHANNEL_UPDATES"],
          inlineRequire: () => E("578165").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        ClydeAuthorizeManager: {
          actions: ["MESSAGE_FAILED_CLYDE_CONSENT"],
          inlineRequire: () => E("887418").default,
        },
        CommunicationDisabledManager: {
          inlineRequire: () => E("658536").default,
          loadAfterConnectionOpen: !0,
        },
        ContentProtectionManager: {
          inlineRequire: () => E("447868").default,
          loadRightBeforeConnectionOpen: !0,
          hasStoreChangeListeners: !0,
        },
        DeadchatPromptManager: {
          actions: ["POST_CONNECTION_OPEN", "IDLE"],
          inlineRequire: () => E("111276").default,
          loadAfterConnectionOpen: !0,
        },
        TopEmojisDataManager: {
          actions: ["EMOJI_INTERACTION_INITIATED"],
          inlineRequire: () => E("120273").default,
        },
        EmojiCaptionsDataManager: {
          actions: ["EMOJI_INTERACTION_INITIATED"],
          inlineRequire: () => E("531150").default,
        },
        EntityVersionsManager: {
          actions: ["GUILD_CREATE", "DELETED_ENTITY_IDS"],
          inlineRequire: () => E("382022").default,
          loadRightBeforeConnectionOpen: !0,
        },
        ExplicitMediaManager: {
          actions: [
            "CHANNEL_SELECT",
            "LOAD_MESSAGES_SUCCESS",
            "MESSAGE_CREATE",
            "MESSAGE_UPDATE",
            "SEARCH_FINISH",
            "LOAD_FORUM_POSTS",
            "LOAD_ARCHIVED_THREADS_SUCCESS",
            "LOAD_THREADS_SUCCESS",
            "LOGOUT",
            "LOAD_PINNED_MESSAGES_SUCCESS",
            "USER_SETTINGS_PROTO_UPDATE",
            "CHANNEL_RTC_UPDATE_CHAT_OPEN",
          ],
          inlineRequire: () => E("983850").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        FeedbackManager: {
          actions: [
            "VOICE_CHANNEL_SHOW_FEEDBACK",
            "STREAM_CLOSE",
            "EMBEDDED_ACTIVITY_CLOSE",
            "VIDEO_BACKGROUND_SHOW_FEEDBACK",
            "IN_APP_REPORTS_SHOW_FEEDBACK",
          ],
          inlineRequire: () => E("828787").default,
        },
        ForumGuidelinesManager: {
          inlineRequire: () => E("706065").default,
          loadAfterConnectionOpen: !0,
        },
        ForumManager: {
          actions: ["CHANNEL_PRELOAD"],
          inlineRequire: () => E("62649").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        ForumImagePreloadManager: {
          actions: ["CHANNEL_PRELOAD"],
          inlineRequire: () => E("144320").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        ForumPostAnalyticsManager: {
          actions: ["CHANNEL_SELECT", "THREAD_CREATE"],
          inlineRequire: () => E("589641").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        FrecencyUserSettingsManager: {
          actions: [
            "POST_CONNECTION_OPEN",
            "CONNECTION_RESUMED",
            "CONNECTION_CLOSED",
          ],
          inlineRequire: () => E("679404").default,
        },
        GuildOnboardingHomeManager: {
          actions: [
            "POST_CONNECTION_OPEN",
            "CHANNEL_SELECT",
            "MESSAGE_CREATE",
            "THREAD_CREATE",
            "GUILD_MEMBER_UPDATE",
            "GUILD_DELETE",
          ],
          inlineRequire: () => E("902801").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        GuildOnboardingManager: {
          actions: ["POST_CONNECTION_OPEN", "CHANNEL_SELECT", "GUILD_DELETE"],
          inlineRequire: () => E("999243").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        GuildOnboardingUpsellManager: {
          actions: ["POST_CONNECTION_OPEN", "CHANNEL_SELECT"],
          inlineRequire: () => E("99628").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        GameConsoleManager: {
          actions: [
            "WAIT_FOR_REMOTE_SESSION",
            "POST_CONNECTION_OPEN",
            "SESSIONS_REPLACE",
            "AUDIO_TOGGLE_SELF_DEAF",
            "AUDIO_TOGGLE_SELF_MUTE",
            "VOICE_STATE_UPDATES",
            "CONSOLE_COMMAND_UPDATE",
            "PASSIVE_UPDATE_V1",
            "REMOTE_SESSION_DISCONNECT",
          ],
          inlineRequire: () => E("508412").default,
        },
        GuildHomeManager: {
          actions: ["CHANNEL_PRELOAD"],
          inlineRequire: () => E("168263").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        GuildScheduledEventManager: {
          actions: [
            "POST_CONNECTION_OPEN",
            "GUILD_DELETE",
            "GUILD_UNAVAILABLE",
            "INVITE_RESOLVE_SUCCESS",
            "CHANNEL_SELECT",
          ],
          inlineRequire: () => E("933326").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        GuildVerificationManager: {
          actions: ["INVITE_ACCEPT_SUCCESS"],
          inlineRequire: () => E("589636").default,
        },
        HangStatusManager: {
          actions: ["VOICE_CHANNEL_SELECT", "LOGOUT"],
          inlineRequire: () => E("360557").default,
          hasStoreChangeListeners: !0,
        },
        InteractionModalManager: {
          actions: [
            "INTERACTION_MODAL_CREATE",
            "INTERACTION_IFRAME_MODAL_CREATE",
            "INTERACTION_IFRAME_MODAL_CLOSE",
            "RPC_APP_DISCONNECTED",
          ],
          inlineRequire: () => E("858402").default,
        },
        LocalizedPricingPromoManager: {
          actions: ["POST_CONNECTION_OPEN"],
          inlineRequire: () => E("53808").default,
        },
        LoginRequiredActionManager: {
          actions: ["POST_CONNECTION_OPEN"],
          inlineRequire: () => E("126115").default,
        },
        MemberSafetySearchManager: {
          actions: [
            "INITIALIZE_MEMBER_SAFETY_STORE",
            "GUILD_DELETE",
            "MEMBER_SAFETY_SEARCH_STATE_UPDATE",
            "MEMBER_SAFETY_PAGINATION_UPDATE",
            "MEMBER_SAFETY_GUILD_MEMBER_SEARCH_SUCCESS",
            "MEMBER_SAFETY_GUILD_MEMBER_SEARCH_STILL_INDEXING",
            "MEMBER_SAFETY_NEW_MEMBER_TIMESTAMP_REFRESH",
          ],
          inlineRequire: () => E("804160").default,
        },
        MemberSafetyStoreBatchUpdateManager: {
          actions: [
            "INITIALIZE_MEMBER_SAFETY_STORE",
            "GUILD_MEMBER_ADD",
            "GUILD_MEMBER_UPDATE",
            "GUILD_MEMBER_REMOVE",
            "MEMBER_SAFETY_GUILD_MEMBER_SEARCH_SUCCESS",
          ],
          inlineRequire: () => E("332336").default,
        },
        MessageCodedLinkManager: {
          actions: [
            "POST_CONNECTION_OPEN",
            "MESSAGE_UPDATE",
            "LOAD_MESSAGES_SUCCESS",
            "LOAD_MESSAGES_AROUND_SUCCESS",
            "LOAD_RECENT_MENTIONS_SUCCESS",
            "LOAD_PINNED_MESSAGES_SUCCESS",
            "SEARCH_FINISH",
            "GUILD_FEED_FETCH_SUCCESS",
          ],
          inlineRequire: () => E("149681").default,
        },
        MessageManager: {
          actions: [
            "APP_STATE_UPDATE",
            "OVERLAY_INITIALIZE",
            "CHANNEL_SELECT",
            "VOICE_CHANNEL_SELECT",
            "THREAD_CREATE",
            "THREAD_LIST_SYNC",
            "CHANNEL_CREATE",
            "CHANNEL_PRELOAD",
            "THREAD_CREATE_LOCAL",
            "GUILD_CREATE",
            "MESSAGE_END_EDIT",
            "LOAD_MESSAGES_SUCCESS",
            "UPLOAD_FAIL",
            "CHANNEL_DELETE",
            "THREAD_DELETE",
          ],
          inlineRequire: () => E("341329").default,
          neverLoadBeforeConnectionOpen: !0,
          hasStoreChangeListeners: !0,
          loadRightBeforeConnectionOpen: !0,
        },
        MultiAccountManager: {
          actions: ["LOGOUT"],
          inlineRequire: () => E("390680").default,
          loadAfterConnectionOpen: !0,
        },
        OverlayUsageStatsManager: {
          actions: __OVERLAY__
            ? ["MESSAGE_ACKED", "MESSAGE_CREATE"]
            : [
                "OVERLAY_FOCUSED",
                "OVERLAY_NOTIFICATION_EVENT",
                "OVERLAY_SET_UI_LOCKED",
                "OVERLAY_WIDGET_CHANGED",
                "OVERLAY_MESSAGE_EVENT_ACTION",
                "RUNNING_GAMES_CHANGE",
                "SOUNDBOARD_SET_OVERLAY_ENABLED",
                "MESSAGE_ACKED",
                "MESSAGE_CREATE",
                "WINDOW_FOCUS",
                "RTC_CONNECTION_STATE",
                "AUDIO_TOGGLE_SELF_MUTE",
              ],
          inlineRequire: () => E("488507").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        ParticipantFocusManager: {
          inlineRequire: () => E("272708").default,
          hasStoreChangeListeners: !0,
        },
        PomeloManager: {
          actions: ["POST_CONNECTION_OPEN"],
          inlineRequire: () => E("485627").default,
        },
        PromotionsManager: {
          actions: ["POST_CONNECTION_OPEN"],
          inlineRequire: () => E("922030").default,
        },
        RelationshipManager: {
          actions: ["RELATIONSHIP_ADD", "FRIEND_REQUEST_ACCEPTED"],
          inlineRequire: () => E("50733").default,
        },
        RTCLatencyTestManager: {
          actions: ["POST_CONNECTION_OPEN"],
          inlineRequire: () => E("937827").default,
        },
        MessageRemindersManager: {
          actions: ["POST_CONNECTION_OPEN"],
          inlineRequire: () => E("205277").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        MessageRemindersNotificationManager: {
          actions: ["POST_CONNECTION_OPEN"],
          inlineRequire: () => E("741887").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        SearchManager: {
          actions: [
            "USER_SETTINGS_PROTO_UPDATE",
            "I18N_LOAD_SUCCESS",
            "POST_CONNECTION_OPEN",
          ],
          inlineRequire: () => E("739362").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        SelectedChannelManager: {
          actions: ["GUILD_CREATE", "CHANNEL_CREATE", "LOGOUT"],
          inlineRequire: () => E("990629").default,
        },
        SelfPresenceStoreManager: {
          inlineRequire: () => E("608421").default,
          hasStoreChangeListeners: !0,
        },
        StageChannelRequestToSpeakMessageManager: {
          actions: ["VOICE_STATE_UPDATES"],
          inlineRequire: () => E("728863").default,
        },
        StageMusicManager: {
          actions: [
            "VOICE_CHANNEL_SELECT",
            "LOGOUT",
            "STAGE_MUSIC_MUTE",
            "STAGE_MUSIC_PLAY",
            "VOICE_STATE_UPDATES",
            "AUDIO_SET_OUTPUT_VOLUME",
            "AUDIO_TOGGLE_SELF_DEAF",
          ],
          inlineRequire: () => E("924872").default,
        },
        SubscriptionRemindersManager: {
          actions: ["POST_CONNECTION_OPEN"],
          inlineRequire: () => E("606162").default,
        },
        ThreadManager: {
          actions: ["CHANNEL_DELETE", "MESSAGE_CREATE"],
          inlineRequire: () => E("708130").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        UrgentSystemDMManagerBase: {
          actions: ["POST_CONNECTION_OPEN", "MESSAGE_CREATE", "CHANNEL_SELECT"],
          inlineRequire: () => E("507331").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        UserGuildSettingsManager: {
          actions: [
            "CATEGORY_COLLAPSE",
            "CATEGORY_EXPAND",
            "CATEGORY_COLLAPSE_ALL",
            "CATEGORY_EXPAND_ALL",
            "POST_CONNECTION_OPEN",
            "USER_GUILD_SETTINGS_FULL_UPDATE",
          ],
          inlineRequire: () => E("679428").default,
        },
        UserSearchManager: {
          actions: [
            "LOGOUT",
            "POST_CONNECTION_OPEN",
            "CONNECTION_OPEN_SUPPLEMENTAL",
            "OVERLAY_INITIALIZE",
            "CURRENT_USER_UPDATE",
            "GUILD_CREATE",
            "GUILD_MEMBERS_CHUNK",
            "GUILD_MEMBER_ADD",
            "GUILD_MEMBER_UPDATE",
            "RELATIONSHIP_ADD",
            "RELATIONSHIP_UPDATE",
            "RELATIONSHIP_REMOVE",
            "CHANNEL_CREATE",
            "CHANNEL_UPDATES",
            "CHANNEL_RECIPIENT_ADD",
            "PASSIVE_UPDATE_V1",
          ],
          inlineRequire: () => E("447909").default,
        },
        UserSettingsManager: {
          actions: [
            "POST_CONNECTION_OPEN",
            "OVERLAY_INITIALIZE",
            "USER_SETTINGS_PROTO_UPDATE",
          ],
          inlineRequire: () => E("761834").default,
        },
        VoiceChannelSettingsManager: {
          actions: ["CHANNEL_UPDATES", "VOICE_STATE_UPDATES"],
          inlineRequire: () => E("783252").default,
        },
        VoiceChannelNotificationsManager: {
          actions: ["VOICE_CHANNEL_SELECT"],
          inlineRequire: () => E("778727").default,
        },
        VoicePermissionManager: {
          actions: ["VOICE_CHANNEL_SELECT", "VOICE_STATE_UPDATES"],
          inlineRequire: () => E("310045").default,
        },
        VoiceProcessingErrorManager: {
          actions: ["MEDIA_ENGINE_NOISE_CANCELLATION_ERROR"],
          inlineRequire: () => E("104545").default,
        },
        HighFiveManager: {
          actions: ["VOICE_CHANNEL_EFFECT_SEND", "HIGH_FIVE_COMPLETE"],
          inlineRequire: () => E("536813").default,
        },
        NativeCrashManager: {
          actions: [
            "RTC_CONNECTION_STATE",
            "RTC_CONNECTION_VIDEO",
            "MEDIA_SESSION_JOINED",
          ],
          inlineRequire: () => E("352690").default,
        },
        ChannelEmojisManager: {
          actions: ["CHANNEL_SELECT"],
          inlineRequire: () => E("915633").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        GuestManager: {
          actions: ["POST_CONNECTION_OPEN"],
          inlineRequire: () => E("129040").default,
        },
        ClipsManager: {
          actions: [
            "RTC_CONNECTION_FLAGS",
            "RTC_CONNECTION_USER_CREATE",
            "RTC_CONNECTION_STATE",
            "POST_CONNECTION_OPEN",
            "CLIPS_SETTINGS_UPDATE",
            "CLIPS_INIT_FAILURE",
            "STREAM_START",
            "RUNNING_GAME_TOGGLE_DETECTION",
            "RUNNING_GAMES_CHANGE",
            "CLIPS_RESTART",
            "RTC_CONNECTION_VIDEO",
            "MEDIA_ENGINE_SET_HARDWARE_H264",
          ],
          inlineRequire: () => E("332491").default,
        },
        BroadcastingManager: {
          actions: [
            "RUNNING_GAMES_CHANGE",
            "STREAM_CREATE",
            "STREAM_STOP",
            "START_BROADCAST_STREAM",
            "CALL_CREATE",
            "RTC_CONNECTION_STATE",
            "CHANNEL_DELETE",
            "MESSAGE_CREATE",
          ],
          inlineRequire: () => E("612541").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        CustomCallSoundsManager: {
          actions: [
            "RTC_CONNECTION_STATE",
            "SOUNDBOARD_MUTE_JOIN_SOUND",
            "VOICE_STATE_UPDATES",
          ],
          inlineRequire: () => E("202014").default,
        },
        NotificationMigrationManager: {
          actions: ["POST_CONNECTION_OPEN"],
          inlineRequire: () => E("748021").default,
        },
        AnnouncementViewTrackingManager: {
          actions: ["CHANNEL_SELECT"],
          inlineRequire: () => E("596512").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        DetectableGamesManager: {
          actions: ["POST_CONNECTION_OPEN"],
          inlineRequire: () => E("597090").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        MidjourneyOnboardingManager: {
          actions: ["CHANNEL_CREATE"],
          inlineRequire: () => E("643857").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        QuestsManager: {
          actions: [
            "POST_CONNECTION_OPEN",
            "QUESTS_SEND_HEARTBEAT_SUCCESS",
            "QUESTS_ENROLL_SUCCESS",
            "RUNNING_GAMES_CHANGE",
            "STREAM_START",
            "STREAM_CLOSE",
          ],
          inlineRequire: () => E("319405").default,
          neverLoadBeforeConnectionOpen: !0,
        },
        VoiceChannelGameActivityManager: {
          actions: [
            "PRESENCE_UPDATES",
            "VOICE_STATE_UPDATES",
            "RUNNING_GAMES_CHANGE",
            "VOICE_CHANNEL_SELECT",
          ],
          inlineRequire: () => E("282655").default,
          neverLoadBeforeConnectionOpen: !0,
        },
      };
      (0, t.initialize)(o);
    },
    695291: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          initialize: function () {
            return r;
          },
        }),
        E("222007"),
        E("70102"),
        E("424973");
      var t = E("913144");
      let o = {},
        n = !1;
      function r(e) {
        for (let _ in e) {
          let E = e[_];
          (function (e, _) {
            var E;
            _.actions;
          })(_, E),
            (function (e) {
              var _;
              let E = null !== (_ = e.actions) && void 0 !== _ ? _ : [];
              for (let _ of ((e.hasStoreChangeListeners ||
                e.loadAfterConnectionOpen) &&
                (!E.includes("POST_CONNECTION_OPEN") &&
                  (E = [...E, "POST_CONNECTION_OPEN"]),
                !E.includes("OVERLAY_INITIALIZE") &&
                  (E = [...E, "OVERLAY_INITIALIZE"])),
              e.loadRightBeforeConnectionOpen &&
                (!E.includes("CONNECTION_OPEN") &&
                  (E = [...E, "CONNECTION_OPEN"]),
                !E.includes("OVERLAY_INITIALIZE") &&
                  (E = [...E, "OVERLAY_INITIALIZE"])),
              E))
                !(_ in o) && (o[_] = []), o[_].push(e);
            })(E);
        }
        t.default.addInterceptor(a);
      }
      function a(e) {
        if (
          (("CONNECTION_OPEN" === e.type || "OVERLAY_INITIALIZE" === e.type) &&
            (n = !0),
          e.type in o)
        ) {
          let _ = [];
          for (let E of o[e.type])
            !n && E.neverLoadBeforeConnectionOpen
              ? _.push(E)
              : E.inlineRequire().initialize();
          _.length > 0 ? (o[e.type] = _) : delete o[e.type];
        }
        return !1;
      }
    },
    56676: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return T;
          },
        }),
        E("808653");
      var t = E("446674"),
        o = E("913144");
      let n = {},
        r = null,
        a = null;
      function i(e, _) {
        null == _ ? e in n && delete n[e] : null != e && (n[e] = _);
      }
      function I(e) {
        let { user: _ } = e;
        a = _.id;
      }
      class s extends t.default.PersistedStore {
        initialize(e) {
          null != e && (n = e);
        }
        requiredActions(e) {
          var _;
          return null !== (_ = n[e]) && void 0 !== _ ? _ : null;
        }
        requiredActionsIncludes(e, _) {
          let E = this.requiredActions(e);
          return null != E && _.reduce((e, _) => e || E.includes(_), !1);
        }
        wasLoginAttemptedInSession(e) {
          return r === e;
        }
        getState() {
          return n;
        }
      }
      (s.displayName = "LoginRequiredActionStore"),
        (s.persistKey = "LoginRequiredActionStore");
      var T = new s(o.default, {
        LOGIN_ATTEMPTED: function (e) {
          let { required_actions: _, user_id: E } = e;
          i((r = E), _);
        },
        CONNECTION_OPEN: I,
        CURRENT_USER_UPDATE: I,
        LOGOUT: function (e) {
          let { isSwitchingAccount: _ } = e;
          !_ && null != a && i(a, null);
        },
        PASSWORD_UPDATED: function (e) {
          let { userId: _ } = e;
          i(_, null);
        },
        MULTI_ACCOUNT_REMOVE_ACCOUNT: function (e) {
          let { userId: _ } = e;
          i(_, null);
        },
      });
    },
    126115: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          LOGIN_REQUIRED_ACTIONS_MODAL_KEY: function () {
            return N;
          },
          default: function () {
            return A;
          },
        }),
        E("222007");
      var t = E("37983");
      E("884691");
      var o = E("77078"),
        n = E("437822"),
        r = E("689988"),
        a = E("697218"),
        i = E("599110"),
        I = E("197881"),
        s = E("56676"),
        T = E("49111"),
        S = E("843455");
      let N = "LOGIN_REQUIRED_ACTIONS_MODAL_KEY";
      class O extends r.default {
        handleConnectionOpen() {
          let e = a.default.getCurrentUser();
          if (null == e || I.ProcessArgs.isDisallowPopupsSet()) return;
          let _ = s.default.requiredActionsIncludes(e.id, [
              T.LoginRequiredActions.UPDATE_PASSWORD,
            ]),
            r = s.default.wasLoginAttemptedInSession(e.id);
          r && _
            ? (0, o.openModalLazy)(
                async () => {
                  let { default: e } = await E.el("969927").then(
                    E.bind(E, "969927")
                  );
                  return function (_) {
                    return (0, t.jsx)(e, {
                      ..._,
                      onSuccess: () => {
                        i.default.track(
                          T.AnalyticEvents.FORCED_UPDATE_PASSWORD_SUCCEEDED
                        ),
                          _.onClose();
                      },
                      onClose: () => {
                        _.onClose(), n.default.logout(T.Routes.LOGIN);
                      },
                      requirementsUpdated: !0,
                    });
                  };
                },
                { modalKey: N, onCloseRequest: S.NOOP_NULL, instant: !0 }
              )
            : _ && n.default.logout(T.Routes.LOGIN);
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              POST_CONNECTION_OPEN: this.handleConnectionOpen,
            });
        }
      }
      var A = new O();
    },
    303217: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          fetchBlockedDomainList: function () {
            return S;
          },
        }),
        E("70102");
      var t = E("872717"),
        o = E("102053"),
        n = E("913144"),
        r = E("605250"),
        a = E("618421"),
        i = E("352266");
      let { WEBAPP_ENDPOINT: I } = window.GLOBAL_ENV,
        s = "https:".concat(I, "/bad-hash-delta"),
        T = new r.default("FetchBlockedDomain");
      function S() {
        return o.default.timeAsync("\uD83D\uDCBE", "fetchBlockedDomainList", N);
      }
      async function N() {
        T.verbose("Fetching blocked domain list");
        try {
          let e;
          let _ = parseInt(
              (
                await t.default.get(
                  "https://cdn.discordapp.com/bad-domains/current_revision.txt"
                )
              ).text
            ),
            E = i.default.getCurrentRevision();
          if (
            (T.verbose(
              "Server revision: ".concat(_, ", Client revision: ").concat(E)
            ),
            null === E || E !== _)
          ) {
            try {
              if (null === E || E > _) {
                let e =
                  null === E ? "null" : "greater than server revision number";
                throw Error("Client revision number is " + e);
              }
              if (_ - E > 15)
                throw Error(
                  "Client revision number is more than ".concat(
                    15,
                    " behind the server revision number"
                  )
                );
              let n = (await t.default.get({ url: s, query: { revision: E } }))
                .body;
              if (0 === n.ADDED.length && 0 === n.REMOVED.length) {
                T.verbose("No changes to blocked domains list.");
                return;
              }
              T.verbose(
                "Retrieved delta, domains added: "
                  .concat(n.ADDED.length, ", domains removed: ")
                  .concat(n.REMOVED.length)
              );
              let r = await o.default.timeAsync(
                "\uD83D\uDCBE",
                "getBlockedDomainList",
                () => i.default.getBlockedDomainList()
              );
              if (null === r) throw Error("Blocked domain list is null");
              T.verbose(
                "Blocked domains list length: ".concat(r.size, " before update")
              ),
                n.ADDED.forEach(e => {
                  if (r.has(e))
                    throw Error(
                      "Unable to add domain which is already in the blockedDomains set: ".concat(
                        e
                      )
                    );
                  r.add(e);
                }),
                n.REMOVED.forEach(e => {
                  if (!r.has(e))
                    throw Error(
                      "Unable to removed domain which is not in the blockedDomains set: ".concat(
                        e
                      )
                    );
                  r.delete(e);
                }),
                (e = Array.from(r)),
                T.verbose("Delta applied successfully");
            } catch (_) {
              if (
                (T.verbose(
                  "Unable to process domain list delta: ".concat(_.message)
                ),
                (0, a.isSlowNetwork)())
              ) {
                T.verbose("Slow network detected, not downloading full list");
                return;
              }
              T.verbose("Downloading the full bad domains file"),
                (e = (
                  await t.default.get({
                    url: "https://cdn.discordapp.com/bad-domains/updated_hashes.json",
                  })
                ).body);
            }
            T.verbose(
              "Blocked domains list length: ".concat(e.length, " after update")
            ),
              o.default.time("\uD83D\uDCBE", "Save Blocked Domain List", () =>
                n.default.dispatch({
                  type: "BLOCKED_DOMAIN_LIST_FETCHED",
                  list: e,
                  revision: _,
                })
              );
          }
        } catch (e) {
          T.error(e);
        }
      }
    },
    24966: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return s;
          },
        });
      var t = E("102053"),
        o = E("689988"),
        n = E("718517"),
        r = E("303217"),
        a = E("352266");
      let i = 4 * n.default.Millis.HOUR;
      class I extends o.default {
        _initialize() {
          setTimeout(
            () =>
              t.default.timeAsync("\uD83D\uDCBE", "getBlockedDomainList", () =>
                a.default.getBlockedDomainList()
              ),
            1e3
          ),
            setTimeout(
              () => (0, r.fetchBlockedDomainList)(),
              10 * n.default.Millis.SECOND
            ),
            (this.intervalID = setInterval(r.fetchBlockedDomainList, i));
        }
        _terminate() {
          clearInterval(this.intervalID);
        }
      }
      var s = new I();
    },
    612541: function (e, _, E) {
      "use strict";
      let t, o, n;
      E.r(_),
        E.d(_, {
          default: function () {
            return M;
          },
        }),
        E("222007");
      var r = E("450911"),
        a = E("267363"),
        i = E("990766"),
        I = E("689988"),
        s = E("374014"),
        T = E("845579"),
        S = E("271938"),
        N = E("42203"),
        O = E("546463"),
        A = E("568307"),
        R = E("18494"),
        l = E("101125"),
        L = E("713726"),
        u = E("9759"),
        C = E("705565"),
        D = E("754493"),
        c = E("49111");
      let d = [];
      class U extends I.default {
        handleRunningGamesChange() {
          let e = A.default.getVisibleGame();
          if (null == e) return;
          let { canBroadcast: _ } = u.default.getCurrentConfig(
              { location: "handle_running_games_change" },
              { autoTrackExposure: !1 }
            ),
            E = l.default.getBroadcast(),
            t = (0, L.getGameName)(e),
            o = null != O.default.getGameByName(t),
            n = (0, D.getIsBroadcastingToAnyone)();
          if (
            !_ ||
            null != E ||
            !T.BroadcastAutoBroadcast.getSetting() ||
            !o ||
            !n
          )
            return;
          let r = null != d.find(_ => _.pid === e.pid);
          if (r) return;
          d = A.default.getRunningGames();
          let a = (0, C.getCanStartBroadcast)();
          if (!a) return;
          let I = R.default.getVoiceChannelId();
          (0, i.createBroadcastChannelOrStartStream)({
            pid: e.pid,
            channelId: I,
          });
        }
        handleStreamCreate(e) {
          let { streamKey: _ } = e;
          (0, L.startBroadcastForStream)(_, t);
        }
        handleStreamStop(e) {
          let { streamKey: _ } = e;
          if (null == t) return;
          let E = (0, s.decodeStreamKey)(_),
            { ownerId: r, channelId: a } = E;
          if (null == r || null == a) return;
          let i = S.default.getId();
          if (r !== i) return;
          let I = N.default.getChannel(a),
            T = null != I && I.isBroadcastChannel();
          null != I &&
            r === I.ownerId &&
            T &&
            ((t = null), (o = null), (n = null), (0, L.stopBroadcast)());
        }
        handleStartBroadcastStream(e) {
          let { options: _ } = e;
          (t = _.pid), (o = _.sourceId), (n = _.sourceName);
        }
        handleCallCreate(e) {
          let { channelId: _ } = e;
          if (null == _ || (null == t && null == o && null == n)) return;
          let E = S.default.getId(),
            r = N.default.getChannel(_);
          null != r &&
            E === r.ownerId &&
            r.isBroadcastChannel() &&
            (0, i.startStream)(null, _, { pid: t, sourceId: o, sourceName: n });
        }
        handleRTCConnectionState(e) {
          let { channelId: _, state: E } = e;
          if (E !== c.RTCConnectionStates.DISCONNECTED) return;
          let t = R.default.getChannelId(),
            o = N.default.getChannel(_);
          if (null == o || !o.isBroadcastChannel()) return;
          r.default.closePrivateChannel(_, t === _, !0);
          let n = l.default.getBroadcast();
          null != n && o.id === n.channelId && (0, L.stopBroadcast)();
        }
        handleChannelDelete(e) {
          let { channel: _ } = e,
            E = l.default.getBroadcast();
          null != E && _.id === E.channelId && (0, L.stopBroadcast)();
        }
        handleMessageCreate(e) {
          let { channelId: _, guildId: E } = e;
          if (null != E) return;
          let t = N.default.getChannel(_);
          if (null == t || !t.isBroadcastChannel()) return;
          let o = R.default.getVoiceChannelId(),
            n = o !== t.id;
          n && (0, a.localAck)(_);
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              RUNNING_GAMES_CHANGE: this.handleRunningGamesChange,
              STREAM_CREATE: this.handleStreamCreate,
              STREAM_STOP: this.handleStreamStop,
              START_BROADCAST_STREAM: this.handleStartBroadcastStream,
              CALL_CREATE: this.handleCallCreate,
              RTC_CONNECTION_STATE: this.handleRTCConnectionState,
              CHANNEL_DELETE: this.handleChannelDelete,
              MESSAGE_CREATE: this.handleMessageCreate,
            });
        }
      }
      var M = new U();
    },
    503417: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return s;
          },
        });
      var t = E("37983");
      E("884691");
      var o = E("414456"),
        n = E.n(o),
        r = E("945330"),
        a = E("774223"),
        i = E("587974"),
        I = E("755250");
      function s(e) {
        let { width: _ = 20, height: E = 20, className: o } = e;
        return (0, t.jsxs)("div", {
          className: n(I.icon, o),
          children: [
            (0, t.jsx)(i.default, {
              mask: i.default.Masks.STATUS_SCREENSHARE,
              width: _,
              height: E,
              children: (0, t.jsx)(a.default, { width: _, height: E }),
            }),
            (0, t.jsx)(r.default, { className: I.badge }),
          ],
        });
      }
    },
    728966: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return N;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("870696"),
        n = E("950104"),
        r = E("385649"),
        a = E("102985"),
        i = E("800762"),
        I = E("316133"),
        s = E("709681");
      let T = (0, s.createSoundForPack)(
        "call_calling",
        o.default.getSoundpack()
      );
      class S extends t.default {
        handleSoundpackUpdate() {
          T.stop(),
            (T = (0, s.createSoundForPack)(
              "call_calling",
              o.default.getSoundpack()
            ));
        }
        handleRingUpdate() {
          let e = n.default
              .getCalls()
              .filter(
                e =>
                  e.ringing.length > 0 &&
                  i.default.getCurrentClientVoiceChannelId(null) === e.channelId
              ),
            _ = i.default.getCurrentClientVoiceChannelId(null),
            E = null != _ && I.default.countVoiceStatesForChannel(_) >= 2;
          E ||
          !(e.length > 0) ||
          r.default.isSoundDisabled("call_calling") ||
          a.default.disableSounds
            ? T.stop()
            : T.loop();
        }
        constructor(...e) {
          super(...e),
            (this.stores = new Map()
              .set(n.default, this.handleRingUpdate)
              .set(r.default, this.handleRingUpdate)
              .set(a.default, this.handleRingUpdate)
              .set(i.default, this.handleRingUpdate)
              .set(o.default, this.handleSoundpackUpdate));
        }
      }
      var N = new S();
    },
    272708: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return a;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("945956"),
        n = E("191145");
      class r extends t.default {
        handleFocusParticipant() {
          let e = o.default.getChannelId();
          if (null != e) {
            var _, E;
            let t = n.default.getSelectedParticipantId(e),
              r = n.default.getVideoParticipants(e);
            null === (E = o.default.getRTCConnection()) ||
              void 0 === E ||
              E.setSelectedParticipant(
                null ===
                  (_ = r.find(e => e.id === t && !e.localVideoDisabled)) ||
                  void 0 === _
                  ? void 0
                  : _.id
              );
          }
        }
        constructor(...e) {
          super(...e),
            (this.stores = new Map().set(
              n.default,
              this.handleFocusParticipant
            ));
        }
      }
      var a = new r();
    },
    234222: function (e, _, E) {
      "use strict";
      var t, o, n, r, a, i, I, s;
      E.r(_),
        E.d(_, {
          CHANGELOG_MODAL_KEY: function () {
            return T;
          },
          ChangelogPlatforms: function () {
            return t;
          },
          AssetType: function () {
            return o;
          },
          ChangelogLoadState: function () {
            return n;
          },
        });
      let T = "CHANGELOG_MODAL";
      ((a = t || (t = {}))[(a.DESKTOP = 0)] = "DESKTOP"),
        (a[(a.MOBILE = 1)] = "MOBILE"),
        ((i = o || (o = {}))[(i.YOUTUBE_VIDEO_ID = 0)] = "YOUTUBE_VIDEO_ID"),
        (i[(i.IMAGE = 1)] = "IMAGE"),
        ((I = n || (n = {}))[(I.NOT_LOADED = 0)] = "NOT_LOADED"),
        (I[(I.LOADED_SUCCESS = 1)] = "LOADED_SUCCESS"),
        (I[(I.LOADED_FAILURE = 2)] = "LOADED_FAILURE"),
        ((s = r || (r = {})).SPECIAL = "special"),
        (s.STANDARD = "standard");
    },
    228495: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return S;
          },
        }),
        E("222007");
      var t = E("249654"),
        o = E("913144"),
        n = E("776156"),
        r = E("689988"),
        a = E("915639"),
        i = E("34966"),
        I = E("473006"),
        s = E("788434");
      class T extends r.default {
        constructor(...e) {
          super(...e),
            (this.actions = {
              POST_CONNECTION_OPEN: e => this.handleConnectionOpen(e),
            }),
            (this.handleConnectionOpen = async e => {
              let _ = await n.default.fetchChangelogConfig(),
                E = _.body,
                r = (0, I.getClientVersionForChangelog)(),
                T = (function (e, _) {
                  let E = 0,
                    t = null;
                  for (var [o, { min_version: n }] of Object.entries(e))
                    n <= _ && n > E && ((E = n), (t = o));
                  return t;
                })(E, r);
              if (
                (o.default.dispatch({
                  type: "CHANGE_LOG_SET_CONFIG",
                  config: _.body,
                  latestChangelogId: T,
                }),
                null == T || !0 !== E[T].show_on_startup)
              )
                return;
              let S = i.default.lastSeenChangelogId(),
                N = i.default.lastSeenChangelogDate();
              if (null != S && 0 >= t.default.compare(T, S)) return;
              let O = await n.default.fetchChangelog(T, a.default.locale);
              if (null != O) {
                if (null == N || null == i.default.lastSeenChangelogDate()) {
                  n.default.markChangelogAsSeen(T, O.date);
                  return;
                }
                !i.default.isLocked() &&
                  new Date(O.date) > new Date(N) &&
                  (0, s.openChangelog)();
              }
            });
        }
      }
      var S = new T();
    },
    34966: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return u;
          },
        }),
        E("222007");
      var t = E("446674"),
        o = E("95410"),
        n = E("913144"),
        r = E("915639"),
        a = E("234222");
      let i = {},
        I = {},
        s = null,
        T = null,
        S = null,
        N = "lastChangeLogId",
        O = "lastChangeLogDate",
        A = null,
        R = null,
        l = new Set();
      class L extends t.default.Store {
        initialize() {
          var e;
          this.waitFor(r.default),
            this.syncWith([r.default], () => !0),
            (A = null !== (e = o.default.get(N)) && void 0 !== e ? e : null);
          let _ = o.default.get(O);
          if (null != _)
            try {
              R = new Date(_);
            } catch {
              o.default.remove(O);
            }
        }
        getChangelog(e, _) {
          var E, t;
          return null !==
            (t = null === (E = i[e]) || void 0 === E ? void 0 : E[_]) &&
            void 0 !== t
            ? t
            : null;
        }
        latestChangelogId() {
          return s;
        }
        getChangelogLoadStatus(e, _) {
          var E, t;
          return null !==
            (t = null === (E = I[e]) || void 0 === E ? void 0 : E[_]) &&
            void 0 !== t
            ? t
            : a.ChangelogLoadState.NOT_LOADED;
        }
        hasLoadedConfig() {
          return null != S;
        }
        getConfig() {
          return S;
        }
        overrideId() {
          return T;
        }
        lastSeenChangelogId() {
          return A;
        }
        lastSeenChangelogDate() {
          return R;
        }
        getStateForDebugging() {
          return {
            changelogConfig: S,
            loadedChangelogs: I,
            lastSeenChangelogId: A,
            lastSeenChangelogDate: R,
          };
        }
        isLocked() {
          return l.size > 0;
        }
      }
      L.displayName = "ChangelogStore";
      var u = new L(n.default, {
        CHANGE_LOG_LOCK: function (e) {
          let { key: _ } = e;
          if (l.has(_)) return !1;
          (l = new Set(l)).add(_);
        },
        CHANGE_LOG_UNLOCK: function (e) {
          let { key: _ } = e;
          if (!l.has(_)) return !1;
          (l = new Set(l)).delete(_);
        },
        CHANGE_LOG_SET_CONFIG: function (e) {
          let { config: _, latestChangelogId: E } = e;
          (s = E), (S = _);
        },
        CHANGE_LOG_FETCH_SUCCESS: function (e) {
          let { id: _, changelog: E } = e;
          null == i[_] && (i[_] = {}),
            (i[_][E.locale] = {
              id: _,
              date: E.date,
              body: E.content,
              revision: 1,
              locale: E.locale,
              [E.asset_type === a.AssetType.YOUTUBE_VIDEO_ID
                ? "youtube_video_id"
                : "image"]: E.asset,
            }),
            null == I[_] && (I[_] = {}),
            (I[_][E.locale] = a.ChangelogLoadState.LOADED_SUCCESS);
        },
        CHANGE_LOG_FETCH_FAILED: function (e) {
          let { id: _, locale: E } = e;
          if (null != i[_] && null != i[_][E]) return !1;
          null == I[_] && (I[_] = {}),
            (I[_][E] = a.ChangelogLoadState.LOADED_FAILURE);
        },
        CHANGE_LOG_SET_OVERRIDE: function (e) {
          let { id: _ } = e;
          T = _;
        },
        CHANGE_LOG_MARK_SEEN: function (e) {
          let { changelogId: _, changelogDate: E } = e;
          (A = null != _ ? _ : null),
            (R = new Date(E)),
            o.default.set(N, _),
            o.default.set(O, E);
        },
      });
    },
    473006: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          getClientVersionForChangelog: function () {
            return o;
          },
        });
      var t = E("286235");
      function o() {
        var e;
        let _ = parseInt(((e = "264309"), "264309"));
        return (
          Number.isNaN(_) &&
            (t.default.captureMessage(
              "Trying to open a changelog for an invalid build number ".concat(
                "264309"
              )
            ),
            (_ = 0)),
          _
        );
      }
    },
    990629: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return N;
          },
        }),
        E("222007");
      var t = E("913144"),
        o = E("987317"),
        n = E("689988"),
        r = E("393414"),
        a = E("239380"),
        i = E("42887"),
        I = E("18494"),
        s = E("162771"),
        T = E("49111");
      class S extends n.default {
        handleGuildCreate(e) {
          let { guild: _ } = e,
            E = I.default.getChannelId(T.ME),
            t = I.default.getVoiceChannelId();
          _.id === E && (0, a.transitionToGuild)(_.id);
          let n = _.id === t;
          n &&
            !1 !== _.unavailable &&
            null == t &&
            o.default.selectVoiceChannel((0, I.findFirstVoiceChannelId)(_.id));
        }
        handleChannelCreate(e) {
          let { channel: _ } = e;
          if (_.type !== T.ChannelTypes.GROUP_DM) return;
          let E = _.originChannelId,
            t = I.default.getChannelId("null");
          null == s.default.getGuildId() &&
            null != E &&
            E === t &&
            (0, r.transitionTo)(T.Routes.CHANNEL(T.ME, _.id)),
            null != E &&
              E === I.default.getVoiceChannelId() &&
              o.default.selectVoiceChannel(_.id, i.default.isVideoEnabled());
        }
        handleLogout() {
          t.default.dispatch({
            type: "VOICE_CHANNEL_SELECT",
            channelId: null,
            guildId: null,
            video: !1,
            currentVoiceChannelId: null,
          });
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              GUILD_CREATE: this.handleGuildCreate,
              CHANNEL_CREATE: this.handleChannelCreate,
              LOGOUT: this.handleLogout,
            });
        }
      }
      var N = new S();
    },
    111276: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return T;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("305961"),
        n = E("718517"),
        r = E("388142"),
        a = E("711454"),
        i = E("578899");
      let I = 0;
      class s extends t.default {
        constructor(...e) {
          super(...e),
            (this.actions = {
              POST_CONNECTION_OPEN: e => this.handleConnectionOpen(e),
              IDLE: () => this.handleIdleChange(),
            }),
            (this.handleConnectionOpen = e => {
              this._attemptDeadchatPrompt(),
                this._triggerGamingStatsSetupExperiment();
            }),
            (this.handleIdleChange = () => {
              Date.now() - I > n.default.Millis.HOUR &&
                this._attemptDeadchatPrompt();
            }),
            (this._attemptDeadchatPrompt = () => {
              let e = o.default.getGuilds(),
                _ = Object.keys(e).filter(
                  e =>
                    i.SimpleDeadchatPromptExperiment.getCurrentConfig({
                      guildId: e,
                      location: "manager",
                    }).triggerDeadchat
                );
              _.length > 0 &&
                ((I = Date.now()), (0, r.initiateChannelPrompts)(_));
            }),
            (this._triggerGamingStatsSetupExperiment = () => {
              let e = o.default.getGuilds();
              Object.keys(e).forEach(e => {
                a.GamingStatsSetupExperiment.trackExposure({
                  guildId: e,
                  location: "manager",
                });
              });
            });
        }
      }
      var T = new s();
    },
    711454: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          GamingStatsSetupExperiment: function () {
            return o;
          },
        });
      var t = E("862205");
      let o = (0, t.createExperiment)({
        kind: "guild",
        id: "2023-09_gaming_stats_setup",
        label: "Gaming stats exposure setup",
        defaultConfig: { trackGamingStats: !1 },
        treatments: [
          {
            id: 1,
            label: "trigger gaming stats data",
            config: { trackGamingStats: !0 },
          },
        ],
      });
    },
    262194: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return b;
          },
        }),
        E("222007"),
        E("794252");
      var t = E("37983"),
        o = E("884691"),
        n = E("414456"),
        r = E.n(n),
        a = E("506838"),
        i = E("446674"),
        I = E("151426"),
        s = E("77078"),
        T = E("452804"),
        S = E("79112"),
        N = E("206625"),
        O = E("206230"),
        A = E("812204"),
        R = E("685665"),
        l = E("917247"),
        L = E("635956"),
        u = E("891653"),
        C = E("697218"),
        D = E("381546"),
        c = E("599110"),
        d = E("719923"),
        U = E("32531"),
        M = E("714657"),
        h = E("770867"),
        P = E("648114"),
        m = E("49111"),
        G = E("994428"),
        p = E("646718"),
        g = E("782340"),
        y = E("286609");
      let B = () =>
          (0, t.jsx)("div", {
            className: y.editorHeader,
            children: (0, t.jsxs)("div", {
              className: y.bannerUpsell,
              children: [
                (0, t.jsx)(u.default, { className: y.premiumIcon }),
                (0, t.jsx)(s.Heading, {
                  variant: "heading-md/bold",
                  color: "always-white",
                  children:
                    g.default.Messages.CLIENT_THEMES_EDITOR_UPSELL_HEADER,
                }),
              ],
            }),
          }),
        f = e => {
          let { markAsDismissed: _ } = e,
            E = (0, h.useTrackClientThemePreviewEvent)();
          return (0, t.jsxs)("div", {
            className: y.editorHeader,
            children: [
              (0, t.jsx)(s.Clickable, {
                className: y.closeCircleButton,
                onClick: () => {
                  null != _ && _(G.ContentDismissActionType.DISMISS),
                    E(m.AnalyticEvents.CLIENT_THEME_PREVIEW_CLOSED),
                    (0, U.closeEditor)();
                },
                children: (0, t.jsx)(D.default, { className: y.closeCircle }),
              }),
              (0, t.jsx)(s.Heading, {
                variant: "heading-lg/extrabold",
                children: g.default.Messages.CLIENT_THEMES_EDITOR_HEADER,
              }),
            ],
          });
        },
        H = e => {
          var _, E, o;
          let { onSubscribeSuccess: n, markAsDismissed: r } = e,
            { analyticsLocations: a } = (0, R.default)(
              A.default.CLIENT_THEMES_EDITOR
            ),
            [S, N] = (0, i.useStateFromStoresArray)(
              [C.default, M.default],
              () => [
                M.default.gradientPreset,
                d.default.isPremium(C.default.getCurrentUser()),
              ]
            ),
            O = (0, l.usePremiumTrialOffer)(),
            u = (0, d.formatTrialCtaIntervalDuration)({
              intervalType:
                null == O
                  ? void 0
                  : null === (_ = O.subscription_trial) || void 0 === _
                    ? void 0
                    : _.interval,
              intervalCount:
                null == O
                  ? void 0
                  : null === (E = O.subscription_trial) || void 0 === E
                    ? void 0
                    : E.interval_count,
            });
          return (0, t.jsx)(L.default, {
            size: s.Button.Sizes.MEDIUM,
            buttonText: N
              ? g.default.Messages.BILLING_SWITCH_PLAN_UPGRADE
              : (null == O
                    ? void 0
                    : null === (o = O.subscription_trial) || void 0 === o
                      ? void 0
                      : o.sku_id) === p.PremiumSubscriptionSKUs.TIER_2
                ? u
                : g.default.Messages.USER_SETTINGS_CUSTOMIZATION_UPSELL,
            subscriptionTier: p.PremiumSubscriptionSKUs.TIER_2,
            onSubscribeModalClose: e => {
              if (!!e)
                null == n || n(),
                  null != r && r(G.ContentDismissActionType.PRIMARY),
                  null != S &&
                    ((0, P.trackClientThemeUpdated)({
                      isPersisted: !0,
                      themeName: I.BackgroundGradientPresetId[S.id],
                      analyticsLocations: a,
                    }),
                    (0, T.saveClientTheme)({
                      backgroundGradientPresetId: S.id,
                      theme: S.theme,
                    }));
            },
          });
        },
        v = e => {
          let { markAsDismissed: _ } = e,
            { isPreview: E, isCoachmark: n } = (0, i.useStateFromStoresObject)(
              [M.default],
              () => ({
                isPreview: M.default.isPreview,
                isCoachmark: M.default.isCoachmark,
              })
            ),
            [r, I] = o.useState(!1),
            T = (0, h.useTrackClientThemePreviewEvent)(),
            N = (0, a.match)({
              isPreview: E,
              isCoachmark: n,
              forceShowCloseButton: r,
            })
              .with(
                { isCoachmark: !0 },
                { forceShowCloseButton: !0 },
                () => g.default.Messages.CLOSE
              )
              .with(
                { isPreview: !0 },
                () => g.default.Messages.CLIENT_THEMES_EDITOR_EXIT_PREVIEW
              )
              .otherwise(
                () => g.default.Messages.CLIENT_THEMES_EDITOR_RETURN_TO_SETTINGS
              );
          return (0, t.jsxs)("div", {
            className: y.editorFooter,
            children: [
              E &&
                (0, t.jsx)(H, {
                  onSubscribeSuccess: () => {
                    I(!0);
                  },
                  markAsDismissed: _,
                }),
              (0, t.jsx)(s.Button, {
                className: y.footerButton,
                onClick: () => {
                  null != _ && _(G.ContentDismissActionType.DISMISS),
                    T(m.AnalyticEvents.CLIENT_THEME_PREVIEW_CLOSED),
                    (0, U.closeEditor)(),
                    !n && S.default.open();
                },
                color: s.Button.Colors.PRIMARY,
                size: s.Button.Sizes.MEDIUM,
                children: N,
              }),
            ],
          });
        };
      function b(e) {
        let { markAsDismissed: _ } = e,
          { analyticsLocations: E, AnalyticsLocationProvider: n } = (0,
          R.default)(A.default.CLIENT_THEMES_EDITOR),
          {
            isPreview: a,
            isCoachmark: I,
            isEditorOpen: T,
            shouldEditorAnimate: S,
          } = (0, i.useStateFromStoresObject)([M.default, O.default], () => ({
            isPreview: M.default.isPreview,
            isCoachmark: M.default.isCoachmark,
            isEditorOpen: M.default.isEditorOpen,
            shouldEditorAnimate:
              M.default.isCoachmark && !O.default.useReducedMotion,
          })),
          l = (0, h.useTrackClientThemePreviewEvent)();
        o.useEffect(() => l(m.AnalyticEvents.CLIENT_THEME_PREVIEW_VIEWED), [l]),
          o.useEffect(() => {
            a &&
              c.default.track(m.AnalyticEvents.PREMIUM_UPSELL_VIEWED, {
                type: p.PremiumUpsellTypes.PREMIUM_CLIENT_THEME_TRY_IT_OUT,
                location_stack: E,
              });
          }, [a, E]);
        let L = (0, h.useResetClientThemePreview)(),
          u = (0, N.default)(null, a ? L : m.NOOP);
        return (
          o.useEffect(() => {
            if (a && !T) return L;
          }, [a, T, L]),
          (0, t.jsx)(n, {
            children: (0, t.jsx)("div", {
              ref: u,
              className: r(y.themeEditor, S ? y.editorAnimate : null),
              children: (0, t.jsxs)(s.HeadingLevel, {
                children: [
                  I ? (0, t.jsx)(B, {}) : (0, t.jsx)(f, { markAsDismissed: _ }),
                  (0, t.jsx)(s.Scroller, {
                    className: y.editorBody,
                    children: (0, t.jsxs)(P.default, {
                      type: P.ThemeSelectionGroupType.EDITOR,
                      children: [
                        !a &&
                          (0, t.jsx)(P.default.Basic, {
                            className: y.selectionGroup,
                          }),
                        (0, t.jsx)(P.default.Gradient, {
                          className: y.selectionGroup,
                        }),
                      ],
                    }),
                  }),
                  (0, t.jsx)(v, { markAsDismissed: _ }),
                ],
              }),
            }),
          })
        );
      }
    },
    770867: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          useResetClientThemePreview: function () {
            return A;
          },
          useTrackClientThemePreviewEvent: function () {
            return R;
          },
        }),
        E("222007");
      var t = E("884691"),
        o = E("446674"),
        n = E("151426"),
        r = E("505093"),
        a = E("168973"),
        i = E("374363"),
        I = E("599110"),
        s = E("32531"),
        T = E("714657"),
        S = E("49111"),
        N = E("646718"),
        O = E("116319");
      let A = () => {
          let e = (0, o.useStateFromStores)(
              [T.default],
              () => T.default.gradientPreset
            ),
            _ = (0, o.useStateFromStores)(
              [a.default],
              () => a.default.useSystemTheme === O.SystemThemeState.ON
            ),
            [E, n] = (0, t.useState)(_);
          return (
            (0, t.useEffect)(() => {
              null == e && n(_);
            }, [e, _]),
            (0, t.useCallback)(() => {
              if (null != e)
                (0, s.resetPreviewClientTheme)(),
                  E && (0, r.setUseSystemTheme)(O.SystemThemeState.ON);
            }, [e, E])
          );
        },
        R = () => {
          let { previewPaneVariant: e } = (0, o.useStateFromStoresObject)(
              [T.default],
              () => ({
                previewPaneVariant: T.default.isPreview
                  ? N.AnalyticsPremiumFeatureTiers.FREE
                  : N.AnalyticsPremiumFeatureTiers.PREMIUM_STANDARD,
              })
            ),
            _ = (0, o.useStateFromStores)([i.default], () => {
              var e;
              let _ =
                null === (e = i.default.settings.appearance) || void 0 === e
                  ? void 0
                  : e.theme;
              return "default ".concat(
                _ === n.Theme.LIGHT ? S.ThemeTypes.LIGHT : S.ThemeTypes.DARK
              );
            });
          return (0, t.useCallback)(
            E => {
              I.default.track(E, {
                preview_pane_variant: e,
                original_theme: _,
              });
            },
            [e, _]
          );
        };
    },
    111177: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return t;
          },
        }),
        E("222007");
      var t,
        o = E("773364"),
        n = E("913144"),
        r = E("689988"),
        a = E("49671"),
        i = E("374014"),
        I = E("103979"),
        s = E("271938"),
        T = E("42887"),
        S = E("945956"),
        N = E("205817"),
        O = E("599110"),
        A = E("773336"),
        R = E("56947"),
        l = E("386045"),
        L = E("30591"),
        u = E("18346"),
        C = E("80028"),
        D = E("49111"),
        c = E("706530");
      t = class extends r.default {
        handleRTCConnectionState(e) {
          let { context: _, state: E, streamKey: t } = e;
          if (
            !(0, R.areClipsEnabled)() ||
            E !== D.RTCConnectionStates.RTC_CONNECTED
          )
            return;
          let n = s.default.getId();
          if (_ === o.MediaEngineContextTypes.DEFAULT)
            return this.applyUserVoiceRecording(n);
          if (_ === o.MediaEngineContextTypes.STREAM && null != t) {
            let { ownerId: e } = (0, i.decodeStreamKey)(t);
            if (e !== n) return;
            let _ = N.default.getRTCConnection(t);
            if (null == _) return;
            this.applyStreamRecording(n, _);
          }
        }
        handleRTCUserCreate(e) {
          let { userId: _, context: E } = e;
          E === o.MediaEngineContextTypes.DEFAULT &&
            this.applyUserVoiceRecording(_);
        }
        handleRTCConnectionFlags(e) {
          let { userId: _, channelId: E, guildId: t } = e;
          this.maybeShowClipsWarning(_), this.applyUserVoiceRecording(_);
          let o = N.default.getRTCConnection(
            i.encodeStreamKey({
              streamType: null != t ? c.StreamTypes.GUILD : c.StreamTypes.CALL,
              ownerId: _,
              channelId: E,
              guildId: t,
            })
          );
          null != o && this.applyStreamRecording(_, o);
        }
        handleClipsInitFailure(e) {
          let { applicationName: _, errMsg: E } = e;
          O.default.track(D.AnalyticEvents.CLIPS_INIT_FAILURE, {
            application_name: _,
            error_message: E,
          });
        }
        maybeShowClipsWarning(e) {
          let _ = S.default.getChannelId();
          if (
            !(null == _ || l.default.getClipsWarningShown(_)) &&
            e !== s.default.getId()
          )
            l.default.isClipsEnabledForUser(e) &&
              (n.default.dispatch({
                type: "CLIPS_SHOW_CALL_WARNING",
                channelId: _,
              }),
              this.showClipsToast());
        }
        handlePostConnectionOpen() {
          if (!(0, u.default)(T.default)) return;
          this.applyNativeClipsSettings();
          let e = (0, R.areClipsEnabled)();
          if (!e) {
            let e = l.default.getSettings();
            e.clipsEnabled && this.disableClips();
            return;
          }
          (null == l.default.getHardwareClassification() ||
            null == l.default.getHardwareClassificationForDecoupled() ||
            l.default.getHardwareClassificationVersion() !==
              C.CLIPS_HARDWARE_CLASSIFICATION_VERSION) &&
            this.classifyHardwareAndTrack().then(e => {
              n.default.dispatch({
                type: "CLIPS_CLASSIFY_HARDWARE",
                classification: e,
              });
            });
        }
        handleRTCConnectionVideo(e) {
          let { userId: _, context: E, channelId: t, guildId: n } = e;
          if (
            E !== o.MediaEngineContextTypes.STREAM ||
            !(0, u.default)(T.default)
          )
            return;
          let r = N.default.getRTCConnection(
            i.encodeStreamKey({
              streamType: null != n ? c.StreamTypes.GUILD : c.StreamTypes.CALL,
              ownerId: _,
              channelId: t,
              guildId: n,
            })
          );
          null != r && this.applyStreamRecording(_, r);
        }
        async classifyHardwareAndTrack() {
          try {
            let e = await a.default.processUtils.getSystemInfo(),
              _ = this.classifyHardware(e);
            return (
              O.default.track(D.AnalyticEvents.CLIPS_HARDWARE_CLASSIFICATION, {
                classification: _,
                version: C.CLIPS_HARDWARE_CLASSIFICATION_VERSION,
                gpu_models: e.gpus.map(e => {
                  let { model: _ } = e;
                  return _;
                }),
              }),
              _
            );
          } catch (e) {
            return L.ClipsHardwareClassification.UNKNOWN;
          }
        }
        classifyHardware(e) {
          if ((0, A.isWindows)()) {
            let _ = e.gpus.some(e => {
                let { model: _ } = e;
                return C.WINDOWS_HARDWARE_AUTO_ENABLE_GPU_REGEX.test(_);
              }),
              E = e.gpus.some(e => {
                let { model: _ } = e;
                return C.WINDOWS_HARDWARE_MINIMUM_GPU_REGEX.test(_);
              });
            return _
              ? L.ClipsHardwareClassification.MEETS_AUTO_ENABLE
              : E
                ? L.ClipsHardwareClassification.MEETS_MINIMUM
                : L.ClipsHardwareClassification.BELOW_MINIMUM;
          }
          if ((0, A.isMac)()) {
            let _ = e.gpus.some(e => {
              let { model: _ } = e;
              return C.OSX_HARDWARE_AUTO_ENABLE_GPU_REGEX.test(_);
            });
            return _
              ? L.ClipsHardwareClassification.MEETS_AUTO_ENABLE
              : L.ClipsHardwareClassification.MEETS_MINIMUM;
          }
          return L.ClipsHardwareClassification.UNKNOWN;
        }
        applyUserVoiceRecording(e) {
          if (!(0, u.default)(T.default)) return;
          let _ = S.default.getRTCConnection();
          if (null == _) return;
          if (e === s.default.getId()) {
            _.setClipRecordUser(
              e,
              "audio",
              l.default.getSettings().clipsEnabled
            );
            return;
          }
          let E = l.default.isVoiceRecordingAllowedForUser(e);
          _.setClipRecordUser(e, "audio", E);
        }
        applyStreamRecording(e, _) {
          if (!(0, u.default)(T.default)) return;
          if (s.default.getId() === e) {
            let { clipsEnabled: E } = l.default.getSettings(),
              t = (0, R.areClipsEnabled)();
            _.setClipRecordUser(e, "audio", t && E),
              _.setClipRecordUser(e, "video", t && E);
            return;
          }
          let { enableViewerClipping: E, ignoreSenderPreference: t } =
            I.default.getCurrentConfig({
              location: "ClipsManager:applyStreamRecording",
            });
          if (!E) return;
          let o = t || l.default.isViewerClippingAllowedForUser(e);
          this.applyNativeClipsSettings(),
            _.setClipRecordUser(e, "audio", o),
            _.setClipRecordUser(e, "video", o);
        }
        disableClips() {}
        constructor(...e) {
          super(...e),
            (this.actions = {
              POST_CONNECTION_OPEN: e => this.handlePostConnectionOpen(),
              RTC_CONNECTION_FLAGS: e => this.handleRTCConnectionFlags(e),
              RTC_CONNECTION_USER_CREATE: e => this.handleRTCUserCreate(e),
              CLIPS_INIT_FAILURE: e => this.handleClipsInitFailure(e),
              CLIPS_SETTINGS_UPDATE: e => this.applyNativeClipsSettings(e),
              STREAM_START: () => this.applyNativeClipsSettings(),
              RUNNING_GAME_TOGGLE_DETECTION: e =>
                this.handleClipsInitOnToggleDetection(e),
              RUNNING_GAMES_CHANGE: e => this.handleClipsInitOnGamesChange(e),
              CLIPS_RESTART: () => this.fireClipsInitEvent(),
              RTC_CONNECTION_VIDEO: e => this.handleRTCConnectionVideo(e),
              RTC_CONNECTION_STATE: e => this.handleRTCConnectionState(e),
              MEDIA_ENGINE_SET_HARDWARE_H264: e =>
                this.handleMediaEngineSetHardwareH264(e),
            });
        }
      };
    },
    332491: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return R;
          },
        });
      var t = E("77078"),
        o = E("913144"),
        n = E("373469"),
        r = E("42887"),
        a = E("568307"),
        i = E("56947"),
        I = E("111177"),
        s = E("386045"),
        T = E("18346"),
        S = E("803725"),
        N = E("80028"),
        O = E("782340");
      class A extends I.default {
        showClipsToast() {
          (0, t.showToast)({
            id: "CLIPS_IN_CALL_WARNING",
            message: O.default.Messages.CLIPS_IN_CALL_WARNING,
            type: t.ToastType.CLIP,
            options: { duration: N.CLIPS_TOAST_DURATION },
          });
        }
        applyNativeClipsSettings(e) {
          if (!(0, T.default)(r.default)) return;
          let _ = (0, i.areClipsEnabled)(),
            E = s.default.getSettings(),
            t = (E.clipsEnabled || E.decoupledClipsEnabled) && _,
            o = r.default.getMediaEngine();
          if (
            (o.setClipBufferLength(t ? E.clipsLength / 1e3 : 0),
            (null == e ? void 0 : e.settings.decoupledClipsEnabled) === !0 &&
              this.fireClipsInitEvent(),
            null == e || (null == e ? void 0 : e.settings.clipsQuality) != null)
          ) {
            let { frameRate: _, resolution: t } = E.clipsQuality;
            !o.setClipsQualitySettings(
              t <= 480 ? (t / 3) * 4 : (t / 9) * 16,
              t,
              _
            ) &&
              null != e &&
              this.fireClipsInitEvent();
          }
        }
        handleClipsInitOnToggleDetection(e) {
          let _ = a.default.getVisibleGame();
          null != _ && _.id === e.game.id && this.fireClipsInitEvent();
        }
        handleClipsInitOnGamesChange(e) {
          let _ = a.default.getVisibleGame();
          if (null == _) return;
          let E = !!e.added.find(e => e.pid === _.pid);
          E
            ? setTimeout(
                () => this.fireClipsInitEvent(),
                N.CLIPS_RUNNING_GAME_CHANGE_CLIPS_INIT_DELAY
              )
            : this.fireClipsInitEvent();
        }
        fireClipsInitEvent() {
          if (!(0, T.default)(r.default)) return;
          let e = (0, i.areClipsEnabled)(),
            _ = s.default.getSettings(),
            E = _.clipsEnabled && e;
          if (!E || null != n.default.getCurrentUserActiveStream()) return;
          let t = a.default.getVisibleGame();
          (null == t ? void 0 : t.pid) != null &&
            (null == t ? void 0 : t.windowHandle) != null &&
            null != t.name &&
            "" !== t.name &&
            o.default.dispatch({
              type: "CLIPS_INIT",
              sourceId: "window:".concat(null == t ? void 0 : t.windowHandle),
              applicationName: t.name,
              quality: _.clipsQuality,
            });
        }
        handleMediaEngineSetHardwareH264(e) {
          let { enabled: _ } = e;
          if (!_) {
            let { clipsEnabled: e } = s.default.getSettings();
            e && S.updateClipsEnabled({ clipsEnabled: !1 });
          }
        }
        disableClips() {
          S.updateClipsEnabled({ clipsEnabled: !1, trackAnalytics: !1 });
        }
      }
      var R = new A();
    },
    887418: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return I;
          },
        }),
        E("222007");
      var t = E("77078"),
        o = E("689988"),
        n = E("42203"),
        r = E("377253");
      function a(e) {
        let { channelId: _, messageId: o } = e,
          a = n.default.getChannel(_),
          i = r.default.getMessage(_, o);
        null != a &&
          null != i &&
          (0, t.openModalLazy)(async () => {
            let { default: e } = await E.el("942055").then(E.bind(E, "942055"));
            return _ => e({ channel: a, message: i, ..._ });
          });
      }
      class i extends o.default {
        constructor(...e) {
          super(...e), (this.actions = { MESSAGE_FAILED_CLYDE_CONSENT: a });
        }
      }
      var I = new i();
    },
    149681: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return S;
          },
        }),
        E("222007"),
        E("70102"),
        E("913144");
      var t = E("689988");
      E("721698");
      var o = E("560208"),
        n = E("883069"),
        r = E("569808");
      E("487946"), E("337543");
      var a = E("139514"),
        i = E("312016");
      let I = new Set();
      function s(e) {
        let _ = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        if (_ && !I.has(e.channel_id)) return;
        let E = (0, i.default)(e.content);
        null != E &&
          0 !== E.length &&
          E.forEach(e => {
            let { type: _, code: E } = e;
            if (_ === a.CodedLinkType.INVITE);
            else if (_ === a.CodedLinkType.TEMPLATE)
              null == r.default.getGuildTemplate(E) &&
                n.default.resolveGuildTemplate(E);
            else if (
              _ === a.CodedLinkType.BUILD_OVERRIDE ||
              _ === a.CodedLinkType.MANUAL_BUILD_OVERRIDE
            );
            else if (_ === a.CodedLinkType.EVENT);
            else if (_ === a.CodedLinkType.CHANNEL_LINK);
            else if (_ === a.CodedLinkType.APP_DIRECTORY_PROFILE);
            else if (_ === a.CodedLinkType.ACTIVITY_BOOKMARK);
            else if (_ === a.CodedLinkType.EMBEDDED_ACTIVITY_INVITE);
            else if (_ === a.CodedLinkType.GUILD_PRODUCT);
            else if (_ === a.CodedLinkType.SERVER_SHOP);
            else if (_ === a.CodedLinkType.CLYDE_PROFILE);
            else throw Error("Unknown coded link type: ".concat(_));
          });
      }
      class T extends t.default {
        handleConnectionOpen() {
          I.clear();
        }
        handleChannelSelect(e) {
          let { channelId: _ } = e;
          null != _ && I.add(_);
        }
        handleMessage(e) {
          let { message: _ } = e;
          return s(_, !0);
        }
        handleLoadMessages(e) {
          let { channelId: _, messages: E } = e;
          I.add(_), E.forEach(e => s(e, !0));
        }
        handleLoadRecentMentions(e) {
          let { messages: _ } = e;
          _.forEach(e => s(e));
        }
        handleLoadPinnedMessages(e) {
          let { messages: _ } = e;
          _.forEach(e => s(e));
        }
        handleSearchFinish(e) {
          e.messages.forEach(e => {
            e.forEach(e => s(e));
          });
        }
        handleGuildFeedFetchSuccess(e) {
          let { data: _ } = e;
          (0, o.getMessagesFromGuildFeedFetch)(_).forEach(e => s(e));
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              POST_CONNECTION_OPEN: this.handleConnectionOpen,
              MESSAGE_CREATE: {
                callback: this.handleMessage,
                autoSubscribe: !1,
              },
              MESSAGE_UPDATE: this.handleMessage,
              LOAD_MESSAGES_SUCCESS: this.handleLoadMessages,
              LOAD_MESSAGES_AROUND_SUCCESS: this.handleLoadMessages,
              LOAD_RECENT_MENTIONS_SUCCESS: this.handleLoadRecentMentions,
              LOAD_PINNED_MESSAGES_SUCCESS: this.handleLoadPinnedMessages,
              SEARCH_FINISH: this.handleSearchFinish,
              GUILD_FEED_FETCH_SUCCESS: this.handleGuildFeedFetchSuccess,
              CHANNEL_SELECT: {
                callback: this.handleChannelSelect,
                autoSubscribe: !1,
              },
            });
        }
      }
      var S = new T();
    },
    36773: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          CommonConfettiCannonContextProvider: function () {
            return I;
          },
        }),
        E("222007");
      var t = E("37983"),
        o = E("884691"),
        n = E("516555"),
        r = E("526887"),
        a = E("172858"),
        i = E("807181");
      function I(e) {
        let { children: _ } = e,
          [E, I] = o.useState(null),
          [s, T] = o.useState(null),
          S = o.useRef(new Set()),
          [N, O] = o.useState(!1),
          A = o.useCallback(e => {
            S.current.delete(e), O(S.current.size > 0);
          }, []),
          R = o.useCallback(e => (S.current.add(e), O(!0), () => A(e)), [A]),
          l = o.useCallback((e, _) => {
            for (let E of S.current) E(e, _);
          }, []);
        return (0, t.jsxs)(t.Fragment, {
          children: [
            (0, t.jsx)(r.ConfettiCannonContextProvider, {
              confettiCanvas: s,
              spriteCanvas: E,
              baseConfig: a.COMMON_CONFETTI_BASE_CONFIG,
              addClickListener: R,
              removeClickListener: A,
              children: _,
            }),
            (0, t.jsx)(n.ConfettiCanvas, {
              ref: T,
              className: i.canvas,
              environment: a.COMMON_CONFETTI_ENVIRONMENT,
              onClick: N ? l : void 0,
            }),
            (0, t.jsx)(n.SpriteCanvas, {
              ref: I,
              colors: a.COMMON_CONFETTI_COLORS,
              sprites: a.COMMON_CONFETTI_SPRITES,
              spriteWidth: a.COMMON_CONFETTI_MAX_SPRITE_SIZE,
              spriteHeight: a.COMMON_CONFETTI_MAX_SPRITE_SIZE,
            }),
          ],
        });
      }
    },
    302537: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return h;
          },
        }),
        E("222007");
      var t = E("37983"),
        o = E("884691"),
        n = E("414456"),
        r = E.n(n),
        a = E("703809"),
        i = E("90915"),
        I = E("394846"),
        s = E("446674"),
        T = E("825573"),
        S = E("77078"),
        N = E("206230"),
        O = E("338733"),
        A = E("584369"),
        R = E("915639"),
        l = E("161778"),
        L = E("471671"),
        u = E("439932"),
        C = E("779601"),
        D = E("69927"),
        c = E("983689"),
        d = E("628922"),
        U = E("49111");
      E("313380");
      let M = new Set([U.Routes.LOGIN, U.Routes.REGISTER]);
      var h = o.memo(function (e) {
        let { children: _, skipsSettingDefaultPageTitle: n } = e;
        (0, D.usePageTitleManager)({ skipsSettingDefaultPageTitle: n });
        let { clientThemesClassName: U, clientThemesCSS: h } = (0, O.default)(),
          P = o.createElement(
            "style",
            { [O.CLIENT_THEMES_DATA_ATTRIBUTE]: !0 },
            h
          );
        return (0, t.jsxs)(a.Helmet, {
          children: [
            (function (e) {
              let { locale: _, theme: E } = (0, s.useStateFromStoresObject)(
                  [l.default, R.default],
                  () => ({ locale: R.default.locale, theme: l.default.theme })
                ),
                n = (0, s.useStateFromStores)(
                  [L.default],
                  () => L.default.isFocused(),
                  []
                ),
                { reducedMotion: a, alwaysShowLinkDecorations: T } =
                  o.useContext(S.AccessibilityPreferencesContext),
                {
                  fontScale: O,
                  fontScaleClass: D,
                  keyboardModeEnabled: U,
                  saturation: h,
                  desaturateUserColors: P,
                  useForcedColors: m,
                  systemForcedColors: G,
                } = (0, s.useStateFromStoresObject)([N.default], () => {
                  let {
                    fontScale: e,
                    fontScaleClass: _,
                    keyboardModeEnabled: E,
                    saturation: t,
                    desaturateUserColors: o,
                    useForcedColors: n,
                    systemForcedColors: r,
                  } = N.default;
                  return {
                    fontScale: e,
                    fontScaleClass: _,
                    keyboardModeEnabled: E,
                    saturation: t,
                    desaturateUserColors: o,
                    useForcedColors: n,
                    systemForcedColors: r,
                  };
                }),
                p = (0, i.useLocation)(),
                g = o.useMemo(() => M.has(p.pathname), [p.pathname]);
              (0, c.default)(window, g);
              let y = (0, d.default)(window, __OVERLAY__ || n),
                B = (0, s.useStateFromStores)(
                  [A.default],
                  () => A.default.sidebarWidth
                ),
                f = (0, S.useRedesignIconContext)().enabled;
              return (0, t.jsx)("html", {
                lang: _,
                style: "font-size: "
                  .concat(O, "%; --saturation-factor: ")
                  .concat(h, "; --devtools-sidebar-width: ")
                  .concat(B, "px;"),
                className: r(
                  e,
                  {
                    overlay: __OVERLAY__,
                    "mouse-mode": y,
                    "keyboard-mode": U,
                    "reduce-motion": a.enabled,
                    "full-motion": !a.enabled,
                    "is-mobile": I.isMobile,
                    "app-focused": n,
                    "low-saturation": h <= S.LOW_SATURATION_THRESHOLD,
                    "decorate-links": T,
                    "desaturate-user-colors": P,
                    "disable-forced-colors": !m && "active" === G,
                    "enable-forced-colors": m,
                    "show-redesigned-icons": f,
                  },
                  (0, u.getThemeClass)(E),
                  (0, C.default)(),
                  D
                ),
              });
            })(U),
            (function () {
              let [e, _] = o.useState([]);
              return (
                o.useEffect(() => {
                  Promise.all(
                    T.fontsToPreload.map(e =>
                      E("437087")(
                        "@discordapp/tokens/typography/generated/gg-sans/"
                          .concat(e, ".woff2")
                          .replace(
                            "@discordapp/tokens/typography/generated/gg-sans/",
                            "./"
                          )
                      ).then(e => {
                        let { default: _ } = e;
                        return _;
                      })
                    )
                  ).then(e => _(e));
                }, []),
                (0, t.jsx)(t.Fragment, {
                  children: e.map((e, _) =>
                    (0, t.jsx)(
                      "link",
                      {
                        rel: "preload",
                        href: e,
                        as: "font",
                        type: "font/woff2",
                        crossOrigin: "true",
                      },
                      _
                    )
                  ),
                })
              );
            })(),
            P,
            _,
          ],
        });
      });
    },
    231032: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return eo;
          },
        }),
        E("222007"),
        E("424973");
      var t = E("37983"),
        o = E("884691"),
        n = E("414456"),
        r = E.n(n),
        a = E("965955"),
        i = E("803182"),
        I = E("90915"),
        s = E("394846"),
        T = E("446674"),
        S = E("151426"),
        N = E("143435"),
        O = E("77078"),
        A = E("913144"),
        R = E("916580"),
        l = E("988738"),
        L = E("521735"),
        u = E("572544"),
        C = E("244201"),
        D = E("206230"),
        c = E("320679"),
        d = E("428958"),
        U = E("948710"),
        M = E("805199"),
        h = E("529531"),
        P = E("44164"),
        m = E("714657"),
        G = E("262194"),
        p = E("36773"),
        g = E("374036"),
        y = E("384997"),
        B = E("234819"),
        f = E("182033"),
        H = E("928741"),
        v = E("161778"),
        b = E("778588"),
        w = E("697218"),
        F = E("471671"),
        Y = E("791106"),
        V = E("542489"),
        k = E("983782"),
        W = E("708169"),
        K = E("668596"),
        x = E("587974"),
        j = E("773336"),
        X = E("719923"),
        Q = E("269936"),
        q = E("302537"),
        J = E("967889"),
        z = E("102999"),
        $ = E("160139"),
        Z = E("49111"),
        ee = E("994428"),
        e_ = E("661623");
      E("551184"),
        E.el("573055")
          .then(E.bind(E, "573055"))
          .then(e => {
            j.isPlatformEmbedded
              ? window.addEventListener(
                  "contextmenu",
                  e.contextMenuCallbackNative,
                  !1
                )
              : window.addEventListener(
                  "contextmenu",
                  e.contextMenuCallbackWeb,
                  !1
                );
          }),
        (0, N.setDesignConfig)({ getDefaultLinkInterceptor: u.default }),
        (0, Q.makeLazy)({
          createPromise: () => E.el("737511").then(E.bind(E, "737511")),
          webpackId: "737511",
        }),
        (0, Q.makeLazy)({
          createPromise: () => E.el("424797").then(E.bind(E, "424797")),
          webpackId: "424797",
        });
      let eE = (0, Q.makeLazy)({
          createPromise: () => E.el("406915").then(E.bind(E, "406915")),
          webpackId: "406915",
        }),
        et = o.memo(function (e) {
          let _ = (0, T.useStateFromStores)([F.default], () =>
            F.default.isFocused()
          );
          return (0, t.jsx)($.default, { ...e, focused: _ });
        });
      var eo = function (e) {
        let { children: _, skipsSettingDefaultPageTitle: E } = e,
          { pathname: n } = (0, I.useLocation)(),
          N = (0, j.getPlatform)(),
          u = s.isMobile || s.isTablet,
          F = (0, T.useStateFromStores)([v.default], () =>
            v.default.darkSidebar ? Z.ThemeTypes.DARK : void 0
          ),
          Q = (0, T.useStateFromStores)([D.default], () =>
            D.default.useForcedColors ? "yes" : "no"
          ),
          [$, eo] = (0, T.useStateFromStoresArray)([m.default], () => [
            m.default.isEditorOpen,
            m.default.isCoachmark,
          ]),
          en = (0, T.useStateFromStores)(
            [M.default],
            () => M.default.isEditorOpen
          ),
          { enabled: er } = f.default.useExperiment(
            { location: "client_themes_coachmark_reintro" },
            { autoTrackExposure: !0 }
          ),
          ea = (0, T.useStateFromStores)([b.default], () =>
            b.default.getLayers().includes(Z.Layers.USER_SETTINGS)
          ),
          ei = (0, T.useStateFromStores)([w.default], () =>
            X.default.canUseClientThemes(w.default.getCurrentUser())
          ),
          eI = $ && !ea,
          es = [];
        eI &&
          eo &&
          er &&
          !ei &&
          es.push(S.DismissibleContent.CLIENT_THEMES_COACHMARK);
        let [eT, eS] = (0, y.useSelectedDismissibleContent)(
          es,
          ee.DismissibleContentGroupName.SIDEBAR,
          !0
        );
        es.push(S.DismissibleContent.DEKSTOP_CUSTOM_APP_ICON_COACHMARK);
        let eN = eT === S.DismissibleContent.DEKSTOP_CUSTOM_APP_ICON_COACHMARK,
          eO = eT === S.DismissibleContent.CLIENT_THEMES_COACHMARK;
        o.useEffect(() => {
          let e = (0, i.matchPath)(n, {
            path: "invite",
            exact: !1,
            strict: !1,
          });
          null == e &&
            eN &&
            !eO &&
            (A.default.dispatch({ type: "APP_ICON_EDITOR_OPEN" }),
            A.default.dispatch({
              type: "APP_ICON_TRACK_IMPRESSION",
              markAsDismissed: eS,
            }));
        }, [eN, eO, eS, n]);
        let eA = o.useRef(document.body);
        return (0, t.jsx)(
          H.default,
          {
            children: (0, t.jsx)(c.default, {
              children: (0, t.jsxs)(O.RedesignIconContextProvider, {
                children: [
                  (0, t.jsx)(q.default, { skipsSettingDefaultPageTitle: E }),
                  (0, t.jsx)(z.default, {
                    children: (0, t.jsx)(J.default, {
                      children: (0, t.jsxs)(O.FocusRingScope, {
                        containerRef: eA,
                        children: [
                          (0, t.jsx)(x.MaskLibrary, {}),
                          (0, t.jsx)(Y.default, {}),
                          (0, t.jsx)(a.FocusGuard, {}),
                          null != N
                            ? (0, t.jsx)(et, { type: N, themeOverride: F })
                            : null,
                          (0, t.jsx)(C.AppWindowContextProvider, {
                            appContext: Z.AppContext.APP,
                            renderWindow: window,
                            children: (0, t.jsxs)(k.AppLayerProvider, {
                              children: [
                                (0, t.jsxs)("div", {
                                  className: r(
                                    e_.appAsidePanelWrapper,
                                    u && e_.mobileAppAsidePanelWrapper,
                                    {
                                      [e_.allowsScrolling]: (() => {
                                        let e = (0, i.matchPath)(n, {
                                          path: Z.Routes.APPLICATION_DIRECTORY,
                                          exact: !1,
                                          strict: !1,
                                        });
                                        return (
                                          ((!!s.isMobile || !!s.isTablet) &&
                                            null != e) ||
                                          !1
                                        );
                                      })(),
                                    }
                                  ),
                                  children: [
                                    (0, t.jsx)("div", {
                                      className: e_.notAppAsidePanel,
                                      "data-app-not-dev-tools": !0,
                                      children: (0, t.jsx)(
                                        p.CommonConfettiCannonContextProvider,
                                        {
                                          children: (0, t.jsx)(
                                            K.VerificationLayerProvider,
                                            {
                                              children: (0, t.jsxs)(
                                                V.default.Provider,
                                                {
                                                  value: d.default,
                                                  children: [
                                                    (0, t.jsx)("div", {
                                                      className: r(
                                                        u
                                                          ? e_.mobileApp
                                                          : e_.app
                                                      ),
                                                      children: _,
                                                    }),
                                                    (0, t.jsx)(P.default, {}),
                                                    (0, t.jsx)(l.default, {}),
                                                    (0, t.jsx)(O.Modals, {}),
                                                    (0, t.jsx)(L.default, {}),
                                                    (0, t.jsx)(
                                                      W.FullScreenLayers,
                                                      {}
                                                    ),
                                                    (0, t.jsx)(
                                                      k.AppLayerContainer,
                                                      {}
                                                    ),
                                                    (0, t.jsx)(
                                                      K.VerificationLayerContainer,
                                                      {}
                                                    ),
                                                    (0, t.jsx)(
                                                      O.ToastContainer,
                                                      {}
                                                    ),
                                                    (0, t.jsx)(U.default, {}),
                                                    (0, t.jsx)(B.default, {}),
                                                    (0, t.jsx)(eE, {}),
                                                  ],
                                                }
                                              ),
                                            }
                                          ),
                                        }
                                      ),
                                    }),
                                    (0, t.jsx)(R.default, {}),
                                    (eI && !eo) || eO
                                      ? (0, t.jsx)(G.default, {
                                          markAsDismissed: eS,
                                        })
                                      : null,
                                    !en || ea || eO
                                      ? null
                                      : (0, t.jsx)(h.default, {
                                          isCoachmark: eN,
                                          markAsDismissed: eS,
                                        }),
                                    (0, t.jsx)(g.default, { mobile: u }),
                                  ],
                                }),
                                !1,
                              ],
                            }),
                          }),
                          (0, t.jsx)(a.FocusGuard, {}),
                        ],
                      }),
                    }),
                  }),
                ],
              }),
            }),
          },
          Q
        );
      };
    },
    102999: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return O;
          },
        }),
        E("222007");
      var t = E("37983"),
        o = E("884691"),
        n = E("446674"),
        r = E("318696"),
        a = E("915639"),
        i = E("787910"),
        I = E("90404"),
        s = E("782340"),
        T = E("743046");
      function S(e) {
        let { locale: _, children: E } = e,
          [o, r] = (0, n.useStateFromStoresArray)([i.default], () => [
            i.default.isLoading(),
            i.default.getError(),
          ]);
        return null != r
          ? (0, t.jsx)(I.default, {
              title: s.default.Messages.I18N_LOCALE_LOADING_ERROR.format({
                locale: _,
              }),
              note: (0, t.jsx)("span", { children: r.message }),
            })
          : o
            ? __OVERLAY__
              ? null
              : (0, t.jsx)("div", { className: T.loading })
            : E;
      }
      class N extends o.Component {
        render() {
          let { locale: e, children: _ } = this.props;
          return (0, t.jsx)(S, { locale: e, children: _ });
        }
        constructor(e) {
          super(e), r.updateLocaleLoadingStatus(e.locale, !0);
        }
      }
      var O = n.default.connectStores([a.default], () => ({
        locale: a.default.locale,
      }))(N);
    },
    787006: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          init: function () {
            return I;
          },
        });
      var t = E("771281"),
        o = E("95410"),
        n = E("599110"),
        r = E("49111");
      let a = window.DiscordNative,
        i = "".concat(r.AnalyticEvents.APP_NATIVE_CRASH, "Storage");
      async function I() {
        var e;
        if (__OVERLAY__) return;
        let _ =
          null == a
            ? void 0
            : null === (e = a.processUtils) || void 0 === e
              ? void 0
              : e.getLastCrash;
        if (null == _) {
          console.log("AppCrashedFatalReport: getLastCrash not supported.");
          return;
        }
        let E = await _(),
          I = o.default.get(i, {}),
          s = (function (e, _) {
            var E, o, n, r, a, i, I, s, T, S, N, O, A, R, l, L, u, C, D;
            let c =
              (null == e ? void 0 : e.lastId) !== (null == _ ? void 0 : _.id) &&
              (null == _ ? void 0 : _.id) != null;
            function d(e) {
              return (
                (null == _ ? void 0 : _.storedInformation) != null &&
                1 === _.storedInformation[e]
              );
            }
            function U(e) {
              return (null == _ ? void 0 : _.storedInformation) == null ||
                null == _.storedInformation[e]
                ? null
                : _.storedInformation[e];
            }
            let M =
                null !== (I = null == _ ? void 0 : _.rendererCrashExitCode) &&
                void 0 !== I
                  ? I
                  : null,
              h = {
                did_crash: c || (null != M && 0 !== M),
                renderer_crash_reason:
                  null !== (s = null == _ ? void 0 : _.rendererCrashReason) &&
                  void 0 !== s
                    ? s
                    : null,
                renderer_crash_exit_code: M,
                had_rtc_connection: d(
                  t.StoredCrashInformation.HasRTCConnection
                ),
                was_sending_video: d(t.StoredCrashInformation.IsSendingVideo),
                was_sending_stream: d(t.StoredCrashInformation.IsSendingStream),
                was_receiving_video: d(
                  t.StoredCrashInformation.IsReceivingVideo
                ),
                was_receiving_stream: d(
                  t.StoredCrashInformation.IsReceivingStream
                ),
                video_media_session_id: U(
                  t.StoredCrashInformation.VideoMediaSessionId
                ),
                stream_media_session_id: U(
                  t.StoredCrashInformation.StreamMediaSessionId
                ),
                last_memory_usage_kb:
                  null !==
                    (T =
                      null == _
                        ? void 0
                        : null === (E = _.lastMemoryInformation) || void 0 === E
                          ? void 0
                          : E.memoryUsageKB) && void 0 !== T
                    ? T
                    : null,
                last_used_js_heap_size_kb:
                  null !==
                    (S =
                      null == _
                        ? void 0
                        : null === (o = _.lastMemoryInformation) || void 0 === o
                          ? void 0
                          : o.usedJSHeapSizeKB) && void 0 !== S
                    ? S
                    : null,
                last_memory_usage_uptime:
                  null !==
                    (N =
                      null == _
                        ? void 0
                        : null === (n = _.lastMemoryInformation) || void 0 === n
                          ? void 0
                          : n.uptimeSeconds) && void 0 !== N
                    ? N
                    : null,
                highest_memory_usage_kb:
                  null !==
                    (O =
                      null == _
                        ? void 0
                        : null === (r = _.highestMemoryInformation) ||
                            void 0 === r
                          ? void 0
                          : r.memoryUsageKB) && void 0 !== O
                    ? O
                    : null,
                highest_used_js_heap_size_kb:
                  null !==
                    (A =
                      null == _
                        ? void 0
                        : null === (a = _.highestMemoryInformation) ||
                            void 0 === a
                          ? void 0
                          : a.usedJSHeapSizeKB) && void 0 !== A
                    ? A
                    : null,
                highest_memory_usage_uptime:
                  null !==
                    (R =
                      null == _
                        ? void 0
                        : null === (i = _.highestMemoryInformation) ||
                            void 0 === i
                          ? void 0
                          : i.uptimeSeconds) && void 0 !== R
                    ? R
                    : null,
              };
            if (!c || null == _)
              return {
                electron_crash_reporter_did_crash: !1,
                minidump_exception_type: null,
                minidump_exception_module_name: null,
                minidump_relative_crash_address: null,
                minidump_exception_module_version: null,
                minidump_exception_module_code_id: null,
                ...h,
              };
            console.log("AppCrashedFatalReport lastCrash:", _, c);
            let P = null == _ ? void 0 : _.minidumpInformation;
            return {
              electron_crash_reporter_did_crash: c,
              minidump_exception_type:
                null !== (l = null == P ? void 0 : P.exceptionString) &&
                void 0 !== l
                  ? l
                  : null,
              minidump_exception_module_name:
                null !== (L = null == P ? void 0 : P.exceptionModuleName) &&
                void 0 !== L
                  ? L
                  : null,
              minidump_relative_crash_address:
                null !== (u = null == P ? void 0 : P.relativeCrashAddress) &&
                void 0 !== u
                  ? u
                  : null,
              minidump_exception_module_version:
                null !== (C = null == P ? void 0 : P.exceptionModuleVersion) &&
                void 0 !== C
                  ? C
                  : null,
              minidump_exception_module_code_id:
                null !== (D = null == P ? void 0 : P.exceptionModuleCodeId) &&
                void 0 !== D
                  ? D
                  : null,
              ...h,
            };
          })(I, E);
        n.default.track(r.AnalyticEvents.APP_NATIVE_CRASH, s),
          o.default.set(i, { lastId: null == E ? void 0 : E.id });
      }
    },
    821316: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          report: function () {
            return o;
          },
          clear: function () {
            return n;
          },
          stringify: function () {
            return r;
          },
        }),
        E("424973"),
        E("70102"),
        E("222007");
      let t = [];
      function o(e) {
        for (
          var _ = arguments.length, E = Array(_ > 1 ? _ - 1 : 0), o = 1;
          o < _;
          o++
        )
          E[o - 1] = arguments[o];
        let n = (function (e) {
          let _ = "";
          for (let E of e) {
            let e = typeof E;
            "string" === e || "number" === e || "boolean" === e
              ? (_ += E + " ")
              : E instanceof Error
                ? (_ += E.message + "\n" + E.stack + " ")
                : (_ += JSON.stringify(E) + " ");
          }
          return _;
        })(E);
        for (
          "string" == typeof e
            ? t.push({ time: Date.now(), category: e, message: n })
            : t.push({
                time: Date.now(),
                category: e.name,
                timing: e.timing,
                message: n,
              });
          t.length > 5e3;

        )
          t.shift();
      }
      function n() {
        t.length = 0;
      }
      function r(e) {
        return t
          .filter(_ => null == e || e.includes(_.category))
          .map(e => {
            let _ = [];
            return (
              _.push(new Date(e.time).toISOString()),
              null != e.timing && _.push(e.timing),
              _.push(e.category, e.message),
              _.join(" -> ")
            );
          })
          .join("\n");
      }
    },
    605250: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return a;
          },
        }),
        E("222007");
      var t = E("811022"),
        o = E("821316");
      let n = Date.now(),
        r = n;
      (0, t.setLogFn)(function (e, _, E) {
        for (
          var t = arguments.length, a = Array(t > 3 ? t - 3 : 0), i = 3;
          i < t;
          i++
        )
          a[i - 3] = arguments[i];
        let I = Date.now(),
          s = ((I - n) / 1e3).toFixed(3),
          T = ((I - r) / 1e3).toFixed(3),
          S = "Σ:".concat(s, "s, Δ:").concat(T, "s");
        (r = I),
          o.report({ name: e, timing: S }, E, ...a),
          "file-only" !== _ &&
            console[_](
              "%c[".concat(e, "]"),
              "\nfont-weight: bold;\ncolor: purple;\n",
              E,
              ...a
            );
      });
      var a = t.default;
    },
    648387: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          cleanupTempFiles: function () {
            return a;
          },
        });
      var t = E("811022"),
        o = E("49671"),
        n = E("697218"),
        r = E("147746");
      function a() {
        var e;
        (null === o.default || void 0 === o.default
          ? void 0
          : null === (e = o.default.fileManager) || void 0 === e
            ? void 0
            : e.cleanupTempFiles) != null && setTimeout(() => void I(), 1e4);
      }
      let i = new t.default("tempFiles");
      async function I() {
        var e;
        if (
          (null === o.default || void 0 === o.default
            ? void 0
            : null === (e = o.default.fileManager) || void 0 === e
              ? void 0
              : e.cleanupTempFiles) != null
        )
          try {
            let e = await o.default.fileManager.cleanupTempFiles();
            if (
              (null == e ? void 0 : e.callscopeLogFiles) != null &&
              e.callscopeLogFiles.length > 0
            ) {
              let _ = Math.floor(1e3 * Math.random()).toString(),
                E = n.default.getCurrentUser();
              (null == E ? void 0 : E.isStaff()) && (_ = E.id),
                i.log(
                  "Uploading "
                    .concat(
                      e.callscopeLogFiles.length,
                      " callscope logs as user "
                    )
                    .concat(_)
                ),
                await (0, r.uploadCallscopeLogFiles)(_, e.callscopeLogFiles);
            }
          } catch (e) {
            i.error("Exception ".concat(null == e ? void 0 : e.message), e);
          }
      }
    },
    352690: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return A;
          },
        }),
        E("222007");
      var t = E("771281"),
        o = E("773364"),
        n = E("689988"),
        r = E("271938"),
        a = E("50885"),
        i = E("49111");
      let I = new Set();
      function s(e) {
        switch (e) {
          case o.MediaEngineContextTypes.DEFAULT:
            return t.StoredCrashInformation.VideoMediaSessionId;
          case o.MediaEngineContextTypes.STREAM:
            return t.StoredCrashInformation.StreamMediaSessionId;
        }
      }
      function T(e) {
        var _;
        a.default.setCrashInformation(
          s(e.context),
          null !== (_ = e.mediaSessionId) && void 0 !== _ ? _ : null
        );
      }
      function S(e) {
        var _;
        let E =
          (null !== (_ = e.channelId) && void 0 !== _ ? _ : "unknown") +
          e.context;
        switch (e.state) {
          case i.RTCConnectionStates.RTC_CONNECTED:
            I.add(E),
              a.default.setCrashInformation(
                t.StoredCrashInformation.HasRTCConnection,
                1
              );
            break;
          case i.RTCConnectionStates.DISCONNECTED:
            a.default.setCrashInformation(s(e.context), null),
              I.delete(E),
              0 === I.size &&
                !(function () {
                  let e = [
                    t.StoredCrashInformation.HasRTCConnection,
                    t.StoredCrashInformation.IsSendingVideo,
                    t.StoredCrashInformation.IsSendingStream,
                    t.StoredCrashInformation.IsReceivingVideo,
                    t.StoredCrashInformation.IsReceivingStream,
                  ];
                  for (let _ of e) a.default.setCrashInformation(_, 0);
                })();
        }
      }
      function N(e) {
        let _ = e.userId === r.default.getId(),
          E = null != e.streamId,
          n = null;
        switch (e.context) {
          case o.MediaEngineContextTypes.DEFAULT:
            n = _
              ? t.StoredCrashInformation.IsSendingVideo
              : t.StoredCrashInformation.IsReceivingVideo;
            break;
          case o.MediaEngineContextTypes.STREAM:
            n = _
              ? t.StoredCrashInformation.IsSendingStream
              : t.StoredCrashInformation.IsReceivingStream;
        }
        a.default.setCrashInformation(n, E ? 1 : 0);
      }
      class O extends n.default {
        constructor(...e) {
          super(...e),
            (this.actions = {
              RTC_CONNECTION_STATE: S,
              RTC_CONNECTION_VIDEO: N,
              MEDIA_SESSION_JOINED: T,
            });
        }
      }
      var A = new O();
    },
    9503: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          STORAGE_KEY_LOG_DISPATCHES: function () {
            return t;
          },
        });
      let t = "DevToolsLogDispatches";
    },
    374036: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return T;
          },
        });
      var t = E("37983"),
        o = E("884691"),
        n = E("868233"),
        r = E("446674"),
        a = E("773336"),
        i = E("370492"),
        I = E("584369");
      let s = (0, n.makeLazy)({
        createPromise: () => E.el("304207").then(E.bind(E, "304207")),
        webpackId: "304207",
      });
      function T(e) {
        let { mobile: _ } = e,
          { devToolsEnabled: E, displayTools: n } = (0,
          r.useStateFromStoresObject)([I.default], () => ({
            devToolsEnabled: I.default.devToolsEnabled,
            displayTools: I.default.displayTools,
          })),
          T = o.useCallback(e => {
            let _ = (0, a.isMac)() ? e.metaKey : e.ctrlKey;
            _ &&
              e.altKey &&
              "KeyO" === e.code &&
              (0, i.toggleDisplayDevTools)();
          }, []);
        return (o.useLayoutEffect(
          () => (
            window.addEventListener("keydown", T),
            () => {
              window.removeEventListener("keydown", T);
            }
          ),
          [T]
        ),
        _ ? E : n)
          ? (0, t.jsx)(s, { mobile: _ })
          : null;
      }
    },
    558986: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          getEmojiCaptionsForUser: function () {
            return r;
          },
        }),
        E("222007");
      var t = E("872717"),
        o = E("913144"),
        n = E("49111");
      async function r() {
        o.default.dispatch({ type: "EMOJI_CAPTIONS_FETCH" });
        try {
          let { body: e } = await t.default.get({
              url: n.Endpoints.EMOJI_CAPTIONS_GET,
            }),
            _ = {};
          for (let E of e.items) _[E.emoji_id] = E.emoji_captions;
          o.default.dispatch({
            type: "EMOJI_CAPTIONS_FETCH_SUCCESS",
            emojiCaptions: _,
          });
        } catch (_) {
          var e;
          o.default.dispatch({
            type: "EMOJI_CAPTIONS_FETCH_ERROR",
            is4XXError:
              (null == (e = _.body) ? void 0 : e.status) >= 400 &&
              (null == e ? void 0 : e.status) <= 499,
          });
        }
      }
    },
    531150: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return a;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("765969"),
        n = E("958706");
      class r extends t.default {
        handleInteraction(e) {
          let { interaction: _ } = e,
            E = [
              n.EmojiInteractionPoint.EmojiButtonMouseEntered,
              n.EmojiInteractionPoint.ChatInputExpressionPressed,
              n.EmojiInteractionPoint.SearchEmojiKeybindPressed,
              n.EmojiInteractionPoint.AutocompleteTyped,
              n.EmojiInteractionPoint.GuildLeaveModalShown,
              n.EmojiInteractionPoint.AddReactionPopoutMouseEntered,
              n.EmojiInteractionPoint.AddReactionPopoutFocused,
              n.EmojiInteractionPoint.MessageContextMenuMouseEntered,
              n.EmojiInteractionPoint.AutocompleteWrapperShown,
            ];
          E.includes(_) && (0, o.maybeGetEmojiCaptionsForUser)(_);
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              EMOJI_INTERACTION_INITIATED: this.handleInteraction,
            });
        }
      }
      var a = new r();
    },
    236266: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          getEmojiCaptionsExperimentConfig: function () {
            return n;
          },
        });
      var t = E("862205");
      let o = (0, t.createExperiment)({
        kind: "user",
        id: "2023-10_emoji_captions",
        label: "Emoji Captions Experiment",
        defaultConfig: { isEnabledOnDesktop: !1, isAutosuggestEnabled: !1 },
        treatments: [
          {
            id: 1,
            label: "Enabled",
            config: { isEnabledOnDesktop: !0, isAutosuggestEnabled: !1 },
          },
          {
            id: 2,
            label: "Enabled with more captions from post-processing",
            config: { isEnabledOnDesktop: !0, isAutosuggestEnabled: !1 },
          },
          {
            id: 3,
            label: "Enabled with mobile autosuggest",
            config: { isEnabledOnDesktop: !0, isAutosuggestEnabled: !0 },
          },
        ],
      });
      function n(e) {
        let {
            location: _,
            trackExposureOptions: E = {},
            autoTrackExposure: t = !0,
          } = e,
          n = o.getCurrentConfig(
            { location: _ },
            { autoTrackExposure: t, trackExposureOptions: E }
          );
        return n;
      }
    },
    765969: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          maybeGetEmojiCaptionsForUser: function () {
            return a;
          },
        });
      var t = E("697218"),
        o = E("558986"),
        n = E("236266"),
        r = E("802461");
      async function a() {
        let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : "unknown",
          _ = t.default.getCurrentUser();
        if (null == _) return;
        let E = (0, n.getEmojiCaptionsExperimentConfig)({ location: e });
        if (!E.isEnabledOnDesktop) {
          r.default.hasPersistedState() && r.default.clear();
          return;
        }
        if (r.default.getIsFetching()) return;
        let a = r.default.getEmojiCaptionsTTL();
        !(null != a && Date.now() < a) &&
          (await (0, o.getEmojiCaptionsForUser)());
      }
    },
    120273: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return i;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("162771"),
        n = E("630400"),
        r = E("958706");
      class a extends t.default {
        handleInteraction(e) {
          let { interaction: _ } = e;
          if ([r.EmojiInteractionPoint.EmojiButtonMouseEntered].includes(_)) {
            let e = o.default.getGuildId();
            (0, n.maybeFetchTopEmojisByGuild)(e);
          }
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              EMOJI_INTERACTION_INITIATED: this.handleInteraction,
            });
        }
      }
      var i = new a();
    },
    722333: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return t;
          },
        }),
        E("222007");
      var t,
        o = E("917351"),
        n = E.n(o),
        r = E("95410"),
        a = E("689988"),
        i = E("139321"),
        I = E("269596"),
        s = E("945956"),
        T = E("200521");
      let S = { chance: 0.2, cooldown: 864e5 },
        N = {
          [T.FeedbackType.VOICE]: {
            ...S,
            hotspot: i.HotspotLocations.VOICE_CALL_FEEDBACK,
            storageKey: "lastVoiceFeedback",
            eligibilityChecks: [
              function (e) {
                let _ = s.default.getWasEverRtcConnected();
                return !_ || s.default.getWasEverMultiParticipant();
              },
            ],
          },
          [T.FeedbackType.STREAM]: {
            ...S,
            hotspot: i.HotspotLocations.REPORT_PROBLEM_POST_STREAM,
            storageKey: "lastStreamFeedback",
          },
          [T.FeedbackType.VIDEO_BACKGROUND]: {
            ...S,
            hotspot: i.HotspotLocations.VIDEO_BACKGROUND_FEEDBACK,
            storageKey: "lastVideoBackgroundFeedback",
          },
          [T.FeedbackType.ACTIVITY]: {
            cooldown: 0,
            chance: 0.5,
            hotspot: i.HotspotLocations.POST_ACTIVITY_FEEDBACK,
            storageKey: "lastActivityFeedback",
          },
          [T.FeedbackType.IN_APP_REPORTS]: {
            cooldown: 1728e5,
            chance: 0.5,
            hotspot: i.HotspotLocations.IN_APP_REPORTS_FEEDBACK,
            storageKey: "inAppReportsFeedback",
          },
        };
      function O(e) {
        return I.default.hasHotspot(e.hotspot);
      }
      function A(e) {
        return Math.random() < e.chance;
      }
      function R(e) {
        if (null != e.storageKey) {
          let _ = r.default.get(e.storageKey);
          if (null != _ && Date.now() - _ < e.cooldown) return !1;
        }
        return !0;
      }
      t = class extends a.default {
        possiblyShowFeedbackModal(e, _) {
          (function (e) {
            var _;
            if (__OVERLAY__) return !1;
            let E = N[e],
              t = null !== (_ = E.eligibilityChecks) && void 0 !== _ ? _ : [];
            return [R, A, O].every(e => e(E)) && t.every(e => e(E));
          })(e) &&
            (null == this.feedbackTypeToShow ||
              !(
                T.FeedbackTypePrecedence[this.feedbackTypeToShow] <
                T.FeedbackTypePrecedence[e]
              )) &&
            ((this.feedbackTypeToShow = e), this.showFeedbackModalDebounced(_));
        }
        constructor(...e) {
          super(...e),
            (this.feedbackTypeToShow = null),
            (this.showFeedbackModalDebounced = n.debounce(e => {
              null != this.feedbackTypeToShow &&
                (!(function (e) {
                  let _ = N[e];
                  null != _.storageKey &&
                    r.default.set(_.storageKey, Date.now());
                })(this.feedbackTypeToShow),
                (this.feedbackTypeToShow = null),
                e());
            }, 200));
        }
      };
    },
    828787: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return u;
          },
        }),
        E("222007");
      var t = E("37983");
      E("884691");
      var o = E("77078"),
        n = E("299285"),
        r = E("374014"),
        a = E("582415"),
        i = E("643130"),
        I = E("292687"),
        s = E("271938"),
        T = E("42203"),
        S = E("824563"),
        N = E("945956"),
        O = E("205817"),
        A = E("722333"),
        R = E("200521"),
        l = E("49111");
      class L extends A.default {
        _initialize() {
          i.default.init();
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              VOICE_CHANNEL_SHOW_FEEDBACK: e =>
                this.handleVoiceChannelFeedback(e),
              STREAM_CLOSE: e => this.handleStreamClose(e),
              VIDEO_BACKGROUND_SHOW_FEEDBACK: e =>
                this.handleVideoBackgroundShowFeedback(e),
              EMBEDDED_ACTIVITY_CLOSE: e => this.handleActivityClose(e),
              IN_APP_REPORTS_SHOW_FEEDBACK: e =>
                this.handleInAppReportsFeedback(e),
            }),
            (this.handleVoiceChannelFeedback = e => {
              let { analyticsData: _ } = e;
              this.possiblyShowFeedbackModal(R.FeedbackType.VOICE, () => {
                (0, o.openModalLazy)(async () => {
                  let { default: e } = await E.el("464667").then(
                    E.bind(E, "464667")
                  );
                  return E => (0, t.jsx)(e, { ...E, analyticsData: _ });
                });
              });
            }),
            (this.handleStreamClose = e => {
              var _;
              let { streamKey: n, canShowFeedback: i } = e,
                I = (0, r.decodeStreamKey)(n),
                T = (0, a.getStreamerApplication)(I, S.default),
                N =
                  null !== (_ = O.default.getVideoStats(n)) && void 0 !== _
                    ? _
                    : {},
                A = {
                  media_session_id: O.default.getMediaSessionId(n),
                  rtc_connection_id: O.default.getRtcConnectionId(n),
                  stream_region: O.default.getRegion(n),
                  max_viewers: O.default.getMaxViewers(n),
                  ...N,
                };
              i &&
                this.possiblyShowFeedbackModal(R.FeedbackType.STREAM, () => {
                  (0, o.openModalLazy)(async () => {
                    let { default: e } = await E.el("363787").then(
                      E.bind(E, "363787")
                    );
                    return _ =>
                      (0, t.jsx)(e, {
                        stream: I,
                        streamApplication: T,
                        isStreamer: I.ownerId === s.default.getId(),
                        ..._,
                        analyticsData: A,
                      });
                  });
                });
            }),
            (this.handleVideoBackgroundShowFeedback = e => {
              let { analyticsData: _ } = e;
              this.possiblyShowFeedbackModal(
                R.FeedbackType.VIDEO_BACKGROUND,
                () => {
                  (0, o.openModalLazy)(async () => {
                    let { default: e } = await E.el("496088").then(
                      E.bind(E, "496088")
                    );
                    return E => (0, t.jsx)(e, { ...E, analyticsData: _ });
                  });
                }
              );
            }),
            (this.handleActivityClose = e => {
              let { applicationId: _, channelId: r, showFeedback: a } = e,
                i = n.default.getApplication(_),
                s = T.default.getChannel(r),
                S = {
                  rtc_connection_id: N.default.getRTCConnectionId(),
                  media_session_id: N.default.getMediaSessionId(),
                },
                O = I.default.getWindowOpen(
                  l.PopoutWindowKeys.CHANNEL_CALL_POPOUT
                ),
                A = O ? o.POPOUT_MODAL_CONTEXT : o.DEFAULT_MODAL_CONTEXT;
              null != i &&
                null != s &&
                a &&
                this.possiblyShowFeedbackModal(R.FeedbackType.ACTIVITY, () => {
                  (0, o.openModalLazy)(
                    async () => {
                      let { default: e } = await E.el("959350").then(
                        E.bind(E, "959350")
                      );
                      return _ =>
                        (0, t.jsx)(e, {
                          ..._,
                          activityApplication: i,
                          channel: s,
                          analyticsData: S,
                        });
                    },
                    { contextKey: A }
                  );
                });
            }),
            (this.handleInAppReportsFeedback = e => {
              let { reportId: _, reportType: n } = e;
              this.possiblyShowFeedbackModal(
                R.FeedbackType.IN_APP_REPORTS,
                () => {
                  (0, o.openModalLazy)(async () => {
                    let { default: e } = await E.el("114306").then(
                      E.bind(E, "114306")
                    );
                    return E =>
                      (0, t.jsx)(e, { ...E, reportId: _, reportType: n });
                  });
                }
              );
            });
        }
      }
      var u = new L();
    },
    706065: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return a;
          },
        }),
        E("222007");
      var t = E("95410"),
        o = E("689988");
      let n = "formGuidelinesStorageKey";
      class r extends o.default {
        _initialize() {
          let e = t.default.get(n);
          null != e && (this.seenForumGuidelines = new Set(e));
        }
        _terminate() {
          t.default.set(n, this.seenForumGuidelines);
        }
        markAsSeen(e) {
          this.seenForumGuidelines.add(e),
            t.default.set(n, this.seenForumGuidelines);
        }
        hasSeen(e) {
          return this.seenForumGuidelines.has(e);
        }
        constructor(...e) {
          super(...e), (this.seenForumGuidelines = new Set());
        }
      }
      var a = new r();
    },
    62649: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return a;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("42203"),
        n = E("612278");
      class r extends t.default {
        handleChannelPreload(e) {
          let { channelId: _ } = e,
            E = o.default.getChannel(_);
          null != E && E.isForumLikeChannel() && (0, n.preloadForumThreads)(E);
        }
        constructor(...e) {
          super(...e),
            (this.actions = { CHANNEL_PRELOAD: this.handleChannelPreload });
        }
      }
      var a = new r();
    },
    144320: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return T;
          },
        }),
        E("511434"),
        E("313619"),
        E("654714"),
        E("287168"),
        E("956660"),
        E("222007"),
        E("424973");
      var t = E("689988"),
        o = E("385976"),
        n = E("42203"),
        r = E("315102"),
        a = E("402671"),
        i = E("115279");
      let I = new Worker(new URL(E.p + E.u("68638"), E.b));
      class s extends t.default {
        handleChannelPreload(e) {
          let { channelId: _ } = e,
            E = n.default.getChannel(_);
          if (null != E && E.isForumLikeChannel()) {
            let e = (function (e) {
              let _ = [],
                E = e.defaultReactionEmoji;
              if ((null == E ? void 0 : E.emojiId) != null) {
                var t, n;
                _.push(
                  r.default.getEmojiURL({
                    id: E.emojiId,
                    animated:
                      null !==
                        (n =
                          null ===
                            (t = o.default.getUsableCustomEmojiById(
                              E.emojiId
                            )) || void 0 === t
                            ? void 0
                            : t.animated) &&
                      void 0 !== n &&
                      n,
                    size: i.EMOJI_SIZE_MAP.reaction,
                  })
                );
              } else
                (null == E ? void 0 : E.emojiName) != null &&
                  _.push(a.default.getURL(E.emojiName));
              return (
                e.availableTags.forEach(e => {
                  null != e.emojiId
                    ? _.push(
                        r.default.getEmojiURL({
                          id: e.emojiId,
                          animated: !1,
                          size: i.EMOJI_SIZE_MAP.reaction,
                        })
                      )
                    : null != e.emojiName &&
                      _.push(a.default.getURL(e.emojiName));
                }),
                _
              );
            })(E);
            e.forEach(e => {
              if (null != e && 0 !== e.length) {
                var _;
                (_ = e),
                  new Promise(e => {
                    let E = t => {
                      let {
                        data: { url: o },
                      } = t;
                      null == I || I.removeEventListener("message", E),
                        _ === o && e();
                    };
                    null == I || I.addEventListener("message", E),
                      null == I || I.postMessage({ url: _ });
                  });
              }
            });
          }
        }
        constructor(...e) {
          super(...e),
            (this.actions = { CHANNEL_PRELOAD: this.handleChannelPreload });
        }
      }
      var T = new s();
    },
    508412: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return P;
          },
        }),
        E("222007");
      var t = E("627445"),
        o = E.n(t),
        n = E("862337"),
        r = E("404118"),
        a = E("629109"),
        i = E("689988"),
        I = E("605250"),
        s = E("271938"),
        T = E("42887"),
        S = E("945956"),
        N = E("235660"),
        O = E("800762"),
        A = E("449008"),
        R = E("700507"),
        l = E("893243"),
        L = E("76393"),
        u = E("209969"),
        C = E("201615"),
        D = E("171644"),
        c = E("353927"),
        d = E("782340");
      let U = new I.default("GameConsoleManager");
      async function M(e) {
        let _ = S.default.getChannelId();
        o(null == _, "Syncing to remote while in voice!"),
          e.selfMute !== T.default.isSelfMute() &&
            (await a.default.toggleSelfMute({ syncRemote: !1 })),
          e.selfDeaf !== T.default.isSelfDeaf() &&
            a.default.toggleSelfDeaf({ syncRemote: !1 });
      }
      class h extends i.default {
        constructor(...e) {
          super(...e),
            (this.rollbackCommandTimeout = new n.Timeout()),
            (this.awaitRemoteTimeout = new n.Timeout()),
            (this.actions = {
              WAIT_FOR_REMOTE_SESSION: () => this.handleWaitForRemoteSession(),
              POST_CONNECTION_OPEN: () => this.handleSessionsChanged(),
              SESSIONS_REPLACE: () => this.handleSessionsChanged(),
              AUDIO_TOGGLE_SELF_DEAF: e => this.handleAudioStateToggle(e),
              AUDIO_TOGGLE_SELF_MUTE: e => this.handleAudioStateToggle(e),
              VOICE_STATE_UPDATES: e => this.handleVoiceStateUpdates(e),
              CONSOLE_COMMAND_UPDATE: e => this.handleConsoleCommandUpdate(e),
              PASSIVE_UPDATE_V1: e => this.handleVoiceStateUpdates(e),
              REMOTE_SESSION_DISCONNECT: () =>
                this.handleRemoteSessionDisconnect(),
            }),
            (this.maybeConnect = e => {
              let _ = (function (e) {
                let _ = L.default.getAwaitingRemoteSessionInfo();
                return e.find(e => {
                  let E = D.GAME_CONSOLE_SESSIONS.has(e.clientInfo.os),
                    t =
                      null !=
                      O.default.getVoiceStateForSession(
                        s.default.getId(),
                        e.sessionId
                      ),
                    o =
                      null == _ ||
                      (0, u.coercePlatformTypeToConsoleType)(_.type) ===
                        e.clientInfo.os;
                  return E && o && t;
                });
              })(e);
              if (null == _) return null;
              this.awaitRemoteTimeout.stop(),
                (0, R.connectToRemote)(_.sessionId);
              let E = O.default.getVoiceStateForSession(
                s.default.getId(),
                _.sessionId
              );
              null != E && M(E);
            }),
            (this.handleAudioStateToggle = e => {
              let { syncRemote: _, context: E } = e;
              if (!_ || E !== c.MediaEngineContextTypes.DEFAULT) return;
              let t = T.default.isSelfDeaf(),
                o = T.default.isSelfMute(),
                n = s.default.getId(),
                r = L.default.getRemoteSessionId();
              if (null == r) return;
              let a = O.default.getVoiceStateForSession(n, r);
              if (null != a)
                (a.selfDeaf !== t || a.selfMute !== o) &&
                  ((0, R.remoteVoiceStateUpdate)(r, {
                    selfDeaf: t,
                    selfMute: o,
                  }),
                  this.rollbackCommandTimeout.start(3e3, () => {
                    M(a);
                  }));
            }),
            (this.handleVoiceStateUpdates = e => {
              var _;
              let E = null !== (_ = e.voiceStates) && void 0 !== _ ? _ : [],
                t = L.default.getRemoteSessionId();
              if (null == t) {
                let e = E.map(e => {
                  let { sessionId: _ } = e;
                  return null != _ ? N.default.getSessionById(_) : null;
                }).filter(A.isNotNullish);
                return this.maybeConnect(e);
              }
              let o = E.find(e => {
                let { sessionId: _ } = e;
                return _ === t;
              });
              null != o && (this.rollbackCommandTimeout.stop(), M(o));
            }),
            (this.handleSessionsChanged = () => {
              let e = L.default.getRemoteSessionId();
              null != e &&
                null == N.default.getSessionById(e) &&
                (0, R.disconnectRemote)(),
                null == e &&
                  this.maybeConnect(Object.values(N.default.getSessions()));
            }),
            (this.handleWaitForRemoteSession = () => {
              this.awaitRemoteTimeout.start(6e4, () => {
                (0, R.disconnectRemote)(),
                  r.default.show({
                    title:
                      d.default.Messages.GAME_CONSOLE_TRANSFER_TIMEOUT_TITLE,
                    body: d.default.Messages.GAME_CONSOLE_TRANSFER_TIMEOUT_BODY,
                  });
              });
            }),
            (this.handleConsoleCommandUpdate = e => {
              var _;
              let { id: E, result: t, error: o } = e;
              if (("failed" !== t && "n/a" !== t) || null == o) return;
              U.info("Console command Error result:", t, o);
              let n = L.default.getAwaitingRemoteSessionInfo();
              if ((null == n ? void 0 : n.commandId) !== E) return;
              let r = L.default.getDevice(
                  n.type,
                  null !== (_ = n.deviceId) && void 0 !== _ ? _ : ""
                ),
                a = (0, C.default)(
                  null != r
                    ? r
                    : {
                        id: "id",
                        platform: d.default.Messages.STATUS_UNKNOWN,
                        name: d.default.Messages.STATUS_UNKNOWN,
                      },
                  t,
                  o
                );
              null != a &&
                l.default.showSelfDismissableAlert({
                  title: a.title,
                  body: a.body,
                  errorCodeMessage: a.errorCodeMessage,
                  reconnectPlatformType: a.isAccountLinkError ? n.type : void 0,
                }),
                D.USER_ACTION_REQUIRED_ERROR_CODES.has(o.code) &&
                this.awaitRemoteTimeout.isStarted()
                  ? this.awaitRemoteTimeout.start(
                      18e4,
                      () => (0, R.disconnectRemote)(),
                      !0
                    )
                  : "failed" === t && (0, R.disconnectRemote)();
            }),
            (this.handleRemoteSessionDisconnect = () => {
              this.awaitRemoteTimeout.stop();
            });
        }
      }
      var P = new h();
    },
    209969: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          coercePlatformTypeToConsoleType: function () {
            return n;
          },
        });
      var t = E("171644"),
        o = E("49111");
      function n(e) {
        switch (e) {
          case o.PlatformTypes.XBOX:
            return t.GameConsoleTypes.XBOX;
          case o.PlatformTypes.PLAYSTATION:
          case o.PlatformTypes.PLAYSTATION_STAGING:
            return t.GameConsoleTypes.PLAYSTATION;
          default:
            return null;
        }
      }
    },
    201615: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return r;
          },
        });
      var t = E("701909"),
        o = E("171644"),
        n = E("782340");
      function r(e, _, E) {
        let r = null;
        return (
          "failed" === _
            ? (r = (function (e, _) {
                let { platform: E, name: t } = e;
                switch (_) {
                  case o.GameConsoleCommandResultErrorCodes
                    .CONSOLE_DEVICE_COMMUNICATION_RESTRICTED:
                    return {
                      title:
                        n.default.Messages
                          .CONSOLE_DEVICE_COMMUNICATION_RESTRICTED,
                      body: n.default.Messages.CONSOLE_DEVICE_COMMUNICATION_RESTRICTED_BODY.format(
                        { deviceType: E }
                      ),
                    };
                  case o.GameConsoleCommandResultErrorCodes
                    .CONSOLE_DEVICE_INVALID_POWER_MODE:
                    return {
                      title:
                        n.default.Messages.CONSOLE_DEVICE_NOT_RESPONDING.format(
                          { deviceType: E }
                        ),
                      body: n.default.Messages.CONSOLE_DEVICE_NOT_RESPONDING_BODY.format(
                        { deviceName: t }
                      ),
                    };
                  case o.GameConsoleCommandResultErrorCodes
                    .CONSOLE_DEVICE_UNVAILABLE_FROM_OTHER_USERS:
                    return {
                      title: n.default.Messages.CONSOLE_DEVICE_IN_USE.format({
                        deviceType: E,
                      }),
                      body: n.default.Messages.CONSOLE_DEVICE_IN_USE_BODY.format(
                        { deviceName: t }
                      ),
                    };
                  case o.GameConsoleCommandResultErrorCodes
                    .CONSOLE_DEVICE_ACCOUNT_LINK_ERROR:
                    return {
                      title: n.default.Messages.CONSOLE_DEVICE_UNKNOWN_ERROR,
                      body: n.default.Messages.CONSOLE_DEVICE_RECONNECT_ACCOUNT.format(
                        { deviceType: E }
                      ),
                      isAccountLinkError: !0,
                    };
                  default:
                    return {
                      title: n.default.Messages.CONSOLE_DEVICE_UNKNOWN_ERROR,
                      body: n.default.Messages.CONSOLE_DEVICE_UNKNOWN_ERROR_BODY.format(
                        { deviceName: t }
                      ),
                    };
                }
              })(e, E.code))
            : "n/a" === _ &&
              (r = (function (e, _) {
                let { platform: E, name: t } = e;
                if (
                  _ ===
                  o.GameConsoleCommandResultErrorCodes
                    .CONSOLE_DEVICE_PASSCODE_UNLOCK_REQUIRED
                )
                  return {
                    title:
                      n.default.Messages.CONSOLE_DEVICE_REQUIRES_PASSCODE.format(
                        { deviceType: E }
                      ),
                    body: n.default.Messages.CONSOLE_DEVICE_REQUIRES_PASSCODE_BODY.format(
                      { deviceName: t }
                    ),
                  };
                return null;
              })(e, E.code)),
          null != r &&
            (r.errorCodeMessage =
              n.default.Messages.CONSOLE_ERROR_CODE_SUPPORT.format({
                supportURL: t.default.getSubmitRequestURL(),
                errorCode: E.code,
              })),
          r
        );
      }
    },
    597090: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return I;
          },
        }),
        E("222007");
      var t = E("823411"),
        o = E("568131"),
        n = E("689988"),
        r = E("686470"),
        a = E("773336");
      class i extends n.default {
        handlePostConnectionOpen() {
          (0, a.isDesktop)() &&
            (!r.default.fetched && (0, o.fetchLibrary)(),
            t.default.getDetectableGames());
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              POST_CONNECTION_OPEN: this.handlePostConnectionOpen,
            });
        }
      }
      var I = new i();
    },
    84970: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          GameDisplayModeStorage: function () {
            return n;
          },
        });
      var t = E("95410"),
        o = E("115718");
      class n {
        save() {
          let e = { games: this.games };
          t.default.set(n.storageKey, e);
        }
        static load() {
          return null == n._loaded && (n._loaded = n.loadInternal()), n._loaded;
        }
        static loadInternal() {
          let e = t.default.get(n.storageKey);
          if (null != e) {
            var _;
            return new n(null !== (_ = e.games) && void 0 !== _ ? _ : {});
          }
          let E = new n({});
          return E.save(), E;
        }
        static getGameSettings(e) {
          var _;
          if (null == e) return null;
          let E = n.load();
          return null !== (_ = E.games[e]) && void 0 !== _ ? _ : null;
        }
        static updateGameSettings(e, _) {
          if (null == e) return;
          let E = n.load(),
            t = E.games[e];
          if (null == t) {
            (E.games[e] = {
              screen: o.RunningProcessFullscreenType.UNKNOWN,
              date: Date.now(),
              ..._,
            }),
              E.save();
            return;
          }
          "boolean" == typeof _.disabled && (t.disabled = _.disabled),
            "number" == typeof _.screen && (t.screen = _.screen),
            (t.date = Date.now()),
            E.save();
        }
        static isPromptingForGameDisable(e) {
          var _, E;
          return (
            null !==
              (E =
                null === (_ = n.getGameSettings(e)) || void 0 === _
                  ? void 0
                  : _.disabled) &&
            void 0 !== E &&
            E
          );
        }
        static setPromptingForGameDisable(e, _) {
          n.updateGameSettings(e, { disabled: _ });
        }
        static getGameDisplayMode(e) {
          var _, E;
          return null == e
            ? null
            : null !==
                  (E =
                    null === (_ = n.getGameSettings(e)) || void 0 === _
                      ? void 0
                      : _.screen) && void 0 !== E
              ? E
              : null;
        }
        static setGameDisplayMode(e, _) {
          n.updateGameSettings(e, { screen: _ });
        }
        static clearOldGameSettings() {
          let e = n.load();
          if (null == e.games) return;
          let _ = Date.now() - 31536e6;
          for (let E in e.games) {
            let t = e.games[E];
            t.date < _ && delete e.games[E];
          }
          e.save();
        }
        static reset() {
          let e = n.load();
          (e.games = {}), e.save();
        }
        static isTestMode() {
          var e;
          return (e = !!window.__GAME_DISPLAY_MODE_TEST_MODE__), e;
        }
        static isVerbose() {
          var e;
          return (e = !!window.__GAME_DISPLAY_MODE_DEBUG__), e;
        }
        constructor(e) {
          this.games = e;
        }
      }
      (n._loaded = null),
        (n.storageKey = "GameDisplayModeStorage"),
        setTimeout(() => n.clearOldGameSettings(), 6e4);
    },
    488507: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return k;
          },
        }),
        E("222007"),
        E("70102");
      var t,
        o,
        n = E("811022"),
        r = E("398183"),
        a = E("913144"),
        i = E("115718"),
        I = E("689988"),
        s = E("49671"),
        T = E("568307"),
        S = E("703370"),
        N = E("860957"),
        O = E("901165"),
        A = E("599110"),
        R = E("50885"),
        l = E("816454"),
        L = E("360782"),
        u = E("84970"),
        C = E("49111"),
        D = E("6791");
      let c = new n.default("OverlayUsageStatsManager");
      c.verbose = () => {};
      class d {
        increment(e) {
          ++this.actions[e];
        }
        getAnalytics(e, _) {
          let E = this.actions[D.OverlayNotificationAction.Viewed],
            t = this.actions[D.OverlayNotificationAction.Clicked];
          return 0 === E && 0 === t
            ? null
            : {
                event_uuid: _,
                notification_type: e,
                viewed_count: E,
                clicked_count: t,
              };
        }
        constructor() {
          this.actions = {
            [D.OverlayNotificationAction.Viewed]: 0,
            [D.OverlayNotificationAction.Clicked]: 0,
          };
        }
      }
      class U {
        static makeEmptyGroupAnalytics() {
          return {
            [D.OverlayNotificationGroup.Nudge]: 0,
            [D.OverlayNotificationGroup.TextChat]: 0,
            [D.OverlayNotificationGroup.VoiceCall]: 0,
            [D.OverlayNotificationGroup.Activity]: 0,
            [D.OverlayNotificationGroup.Clips]: 0,
            [D.OverlayNotificationGroup.Other]: 0,
          };
        }
        increment(e, _) {
          let E = this.groupCounters[_];
          if (null == E) {
            c.error(
              "NotificationCounter: Unknown notification action: ".concat(_)
            );
            return;
          }
          let t = (0, D.getOverlayNotificationGroup)(e);
          if (!(t in E)) {
            c.error(
              "NotificationCounter: Unknown notification action: ".concat(e)
            );
            return;
          }
          ++E[t], ++this.actionCounters[_];
          let o = this.counters[e];
          if (null == o) {
            c.error(
              "NotificationCounter: Unknown notification type: ".concat(e)
            );
            return;
          }
          o.increment(_);
        }
        getAnalytics() {
          let e = this.groupCounters[D.OverlayNotificationAction.Viewed],
            _ = this.groupCounters[D.OverlayNotificationAction.Clicked];
          return {
            notices_viewed:
              this.actionCounters[D.OverlayNotificationAction.Viewed],
            notices_clicked:
              this.actionCounters[D.OverlayNotificationAction.Clicked],
            notice_nudge_viewed: e[D.OverlayNotificationGroup.Nudge],
            notice_text_chat_viewed: e[D.OverlayNotificationGroup.TextChat],
            notice_voice_call_viewed: e[D.OverlayNotificationGroup.VoiceCall],
            notice_activity_viewed: e[D.OverlayNotificationGroup.Activity],
            notice_clips_viewed: e[D.OverlayNotificationGroup.Clips],
            notice_other_viewed: e[D.OverlayNotificationGroup.Other],
            notice_nudge_clicked: _[D.OverlayNotificationGroup.Nudge],
            notice_text_chat_clicked: _[D.OverlayNotificationGroup.TextChat],
            notice_voice_call_clicked: _[D.OverlayNotificationGroup.VoiceCall],
            notice_activity_clicked: _[D.OverlayNotificationGroup.Activity],
            notice_clips_clicked: _[D.OverlayNotificationGroup.Clips],
            notice_other_clicked: _[D.OverlayNotificationGroup.Other],
          };
        }
        getCounterAnalytics(e) {
          return Object.entries(this.counters)
            .map(_ => {
              let [E, t] = _;
              return t.getAnalytics(E, e);
            })
            .filter(e => null != e);
        }
        constructor() {
          (this.actionCounters = {
            [D.OverlayNotificationAction.Viewed]: 0,
            [D.OverlayNotificationAction.Clicked]: 0,
          }),
            (this.groupCounters = {
              [D.OverlayNotificationAction.Viewed]: U.makeEmptyGroupAnalytics(),
              [D.OverlayNotificationAction.Clicked]:
                U.makeEmptyGroupAnalytics(),
            }),
            (this.counters = {
              [D.OverlayNotificationType.NewsNudge]: new d(),
              [D.OverlayNotificationType.WelcomeNudge]: new d(),
              [D.OverlayNotificationType.TextChat]: new d(),
              [D.OverlayNotificationType.ActivityUserJoin]: new d(),
              [D.OverlayNotificationType.ActivityInvite]: new d(),
              [D.OverlayNotificationType.IncomingCall]: new d(),
              [D.OverlayNotificationType.GoLiveNudge]: new d(),
              [D.OverlayNotificationType.GoLiveNonVoiceNudge]: new d(),
              [D.OverlayNotificationType.OverlayCrashed]: new d(),
              [D.OverlayNotificationType.StartBroadcastNotification]: new d(),
              [D.OverlayNotificationType.ClipsReminderNotification]: new d(),
              [D.OverlayNotificationType.ClipsNotification]: new d(),
              [D.OverlayNotificationType.KeybindIndicatorsNotification]:
                new d(),
            });
        }
      }
      ((o = t || (t = {}))[(o.Voice = 0)] = "Voice"),
        (o[(o.Text = 1)] = "Text");
      class M {
        static makeEmptyAnalytics() {
          return {
            initialized: !1,
            pinnedToggledCount: 0,
            visibleDuration: new r.StopWatch(),
            pinned: !1,
          };
        }
        getByType(e) {
          return this.types[e];
        }
        getByWidget(e) {
          switch (e) {
            case C.OverlayWidgets.VOICE:
              return this.getByType(0);
            case C.OverlayWidgets.TEXT:
              return this.getByType(1);
            default:
              return null;
          }
        }
        getAnalytics() {
          let e = this.types[0],
            _ = this.types[1];
          return {
            widget_voice_pin_toggle_count: e.pinnedToggledCount,
            widget_voice_visible_duration: e.visibleDuration
              .elapsed()
              .asMilliseconds(),
            widget_voice_pinned: e.pinned,
            widget_text_pin_toggle_count: _.pinnedToggledCount,
            widget_text_visible_duration: _.visibleDuration
              .elapsed()
              .asMilliseconds(),
            widget_text_pinned: _.pinned,
          };
        }
        constructor() {
          this.types = { 0: M.makeEmptyAnalytics(), 1: M.makeEmptyAnalytics() };
        }
      }
      class h {
        update() {
          let e = this.game,
            _ = R.default.GetWindowFullscreenTypeByPid(
              e.pid,
              e.name,
              e.fullscreenType
            );
          if (_ !== this.lastscreenType) {
            if (!(_ in this.counters)) {
              c.error(
                "ScreenTypeAnalytics: Unknown screen type: ".concat(_),
                _
              );
              return;
            }
            this.counters[_].start(),
              null != this.lastscreenType &&
                this.counters[this.lastscreenType].stop(),
              (this.lastscreenType = _);
          }
        }
        getAnalytics() {
          var e, _;
          let E = e => this.counters[e].elapsed().asMilliseconds(),
            t = {
              [i.RunningProcessFullscreenType.UNKNOWN]: E(
                i.RunningProcessFullscreenType.UNKNOWN
              ),
              [i.RunningProcessFullscreenType.WINDOWED]: E(
                i.RunningProcessFullscreenType.WINDOWED
              ),
              [i.RunningProcessFullscreenType.MAXIMIZED]: E(
                i.RunningProcessFullscreenType.MAXIMIZED
              ),
              [i.RunningProcessFullscreenType.BORDERLESS_FULLSCREEN]: E(
                i.RunningProcessFullscreenType.BORDERLESS_FULLSCREEN
              ),
              [i.RunningProcessFullscreenType.FULLSCREEN]: E(
                i.RunningProcessFullscreenType.FULLSCREEN
              ),
              [i.RunningProcessFullscreenType.MINIMIZED]: E(
                i.RunningProcessFullscreenType.MINIMIZED
              ),
            },
            o = Object.entries(t).sort((e, _) => {
              let [E, t] = e,
                [o, n] = _;
              return n - t;
            })[0],
            n = parseInt(o[0], 10),
            r = isNaN(n) ? i.RunningProcessFullscreenType.UNKNOWN : n;
          isNaN(n) &&
            c.error(
              "ScreenTypeAnalytics: Unknown most used screen type: ".concat(o),
              t
            );
          let a = u.GameDisplayModeStorage.getGameDisplayMode(
            null !== (e = this.game.name) && void 0 !== e ? e : this.game.id
          );
          u.GameDisplayModeStorage.setGameDisplayMode(
            null !== (_ = this.game.name) && void 0 !== _ ? _ : this.game.id,
            r
          );
          let I = {
            screentype_unknown_duration:
              t[i.RunningProcessFullscreenType.UNKNOWN],
            screentype_windowed_duration:
              t[i.RunningProcessFullscreenType.WINDOWED],
            screentype_maximized_duration:
              t[i.RunningProcessFullscreenType.MAXIMIZED],
            screentype_borderless_fullscreen_duration:
              t[i.RunningProcessFullscreenType.BORDERLESS_FULLSCREEN],
            screentype_fullscreen_duration:
              t[i.RunningProcessFullscreenType.FULLSCREEN],
            screentype_minimized_duration:
              t[i.RunningProcessFullscreenType.MINIMIZED],
          };
          return {
            ...I,
            screentype_global_supported_duration:
              I.screentype_windowed_duration +
              I.screentype_maximized_duration +
              I.screentype_borderless_fullscreen_duration,
            screentype_global_unsupported_duration:
              I.screentype_fullscreen_duration,
            screentype_initial:
              i.RunningProcessFullscreenType[this.game.fullscreenType],
            screentype_most_used: i.RunningProcessFullscreenType[r],
            screentype_most_used_previous:
              null == a ? null : i.RunningProcessFullscreenType[a],
            game_display_mode_is_adjustment_supported:
              R.default.GameDisplayModeIsGameSupported(this.game.name),
          };
        }
        destroy() {
          clearInterval(this.updateScreenInterval);
        }
        constructor(e) {
          (this.game = e),
            (this.counters = {
              [i.RunningProcessFullscreenType.UNKNOWN]: new r.StopWatch(),
              [i.RunningProcessFullscreenType.WINDOWED]: new r.StopWatch(),
              [i.RunningProcessFullscreenType.MAXIMIZED]: new r.StopWatch(),
              [i.RunningProcessFullscreenType.BORDERLESS_FULLSCREEN]:
                new r.StopWatch(),
              [i.RunningProcessFullscreenType.FULLSCREEN]: new r.StopWatch(),
              [i.RunningProcessFullscreenType.MINIMIZED]: new r.StopWatch(),
            }),
            (this.lastscreenType = void 0),
            this.update(),
            (this.updateScreenInterval = setInterval(() => this.update(), 1e4));
        }
      }
      class P {
        static get debug() {
          return { gamesByPid: P.gamesByPid, gamesByName: P.gamesByName };
        }
        static getGameName(e) {
          var _, E;
          return null !==
            (E = null !== (_ = e.name) && void 0 !== _ ? _ : e.id) &&
            void 0 !== E
            ? E
            : null;
        }
        static ignoreGame(e) {
          var _;
          return null !== (_ = e.isLauncher) && void 0 !== _ && _;
        }
        static create(e) {
          let _ = P.getGameName(e);
          if (P.ignoreGame(e) || null == _) return null;
          let E = new P({ ...e });
          return (
            (E.gameConcurrentGameCount = Object.values(P.gamesByPid).length),
            (P.gamesByPid[e.pid] = E),
            (P.gamesByName[_] = E),
            E
          );
        }
        static getByName(e) {
          return null == e ? null : P.gamesByName[e];
        }
        static getByPid(e) {
          return P.gamesByPid[e];
        }
        static async destroy(e) {
          let _ = P.getGameName(e);
          if (P.ignoreGame(e) || null == _) return;
          let E = P.gamesByPid[e.pid];
          if (null != E) {
            E.screenAnalytics.destroy();
            let _ = await E.getAnalytics();
            for (let e of (A.default.track(
              C.AnalyticEvents.OVERLAY_USAGE_STATS,
              _.usage
            ),
            _.notifications))
              A.default.track(
                C.AnalyticEvents.OVERLAY_USAGE_NOTIFICATION_STATS,
                e
              );
            c.verbose("OVERLAY_USAGE_STATS: ".concat(e.name), _),
              delete P.gamesByPid[e.pid];
          }
          delete P.gamesByName[_];
        }
        async getAnalytics() {
          var e, _, E, t, o, n;
          let r = {
              setting_is_enabled: N.default.enabled,
              setting_method:
                null == this.overlayStatus
                  ? null
                  : D.OverlayMethod[this.overlayStatus.overlayMethod],
              setting_display_user: O.default.getDisplayUserMode(),
              setting_display_name: O.default.getDisplayNameMode(),
              setting_avatar_size: O.default.getAvatarSizeMode(),
              setting_notification_position:
                O.default.getNotificationPositionMode(),
              setting_chat_notification:
                O.default.getTextChatNotificationMode(),
            },
            a = (0, T.getOverlayGameStatus)(this.game),
            i = {
              event_uuid: this.uuid,
              overlay_usage_stats_version: 2,
              ...this.notificationAnalytics.getAnalytics(),
              ...this.widgetAnalytics.getAnalytics(),
              ...this.screenAnalytics.getAnalytics(),
              ...r,
              overlay_status_game_enabled: a.enabled,
              overlay_status_game_source: a.source,
              game_name:
                null !== (E = this.game.name) && void 0 !== E ? E : null,
              game_id: null !== (t = this.game.id) && void 0 !== t ? t : null,
              game_elevated: this.game.elevated,
              game_is_launcher:
                null !== (o = this.game.isLauncher) && void 0 !== o && o,
              game_duration: this.gameTimer.elapsed().asMilliseconds(),
              game_focused_duration: this.gameFocusedTimer
                .elapsed()
                .asMilliseconds(),
              game_focused_change_count: this.gameFocusChangedCount,
              game_concurrent_game_count: this.gameConcurrentGameCount,
              ui_unlocked_duration: this.unlockedTimer
                .elapsed()
                .asMilliseconds(),
              ui_unlocked_count: this.uiUnlockedCount,
              ui_locked_count: this.uiLockedCount,
              soundboard_shown_duration: this.soundboardShownTimer
                .elapsed()
                .asMilliseconds(),
              soundboard_shown_count: this.soundboardShownCount,
              soundboard_keep_open_count: this.soundboardKeepOpenCount,
              hardware_display_count:
                null !==
                  (n = await (null === s.default || void 0 === s.default
                    ? void 0
                    : null === (_ = s.default.hardware) || void 0 === _
                      ? void 0
                      : null === (e = _.getDisplayCount) || void 0 === e
                        ? void 0
                        : e.call(_))) && void 0 !== n
                  ? n
                  : null,
              message_ack_count: this.overlayMessageAckCount,
              message_created_count: this.overlayMessageCreateCount,
              desktop_message_ack_count: this.desktopMessageAckCount,
              desktop_message_created_count: this.desktopMessageCreateCount,
              desktop_focused_duration: this.desktopFocusedTimer
                .elapsed()
                .asMilliseconds(),
              desktop_focused_change_count: this.desktopFocusChangedCount,
              rtc_connection_duration: this.rtcConnectionTimer
                .elapsed()
                .asMilliseconds(),
              mute_toggled_count: this.muteToggledCount,
            };
          return {
            usage: i,
            notifications: this.notificationAnalytics.getCounterAnalytics(
              this.uuid
            ),
          };
        }
        setLocked(e) {
          e
            ? (this.unlockedTimer.stop(), ++this.uiLockedCount)
            : (this.unlockedTimer.start(), ++this.uiUnlockedCount);
        }
        static gameSetAllUnfocused() {
          for (let e of Object.values(P.gamesByPid)) e.gameFocusedTimer.stop();
        }
        static incrementConcurrentGameCount() {
          for (let e of Object.values(P.gamesByPid))
            ++e.gameConcurrentGameCount;
        }
        gameSetFocused(e) {
          this.gameFocusedTimer.toggle(e), e && ++this.gameFocusChangedCount;
        }
        setSoundboardShown(e, _) {
          this.soundboardShownTimer.toggle(e),
            e &&
              (++this.soundboardShownCount,
              _ && ++this.soundboardKeepOpenCount);
        }
        static handleMuteToggled() {
          for (let e of Object.values(P.gamesByPid)) ++e.muteToggledCount;
        }
        static desktopSetFocused(e) {
          if (e !== P.desktopMainWindowHasFocus) {
            for (let _ of Object.values(P.gamesByPid))
              ++_.desktopFocusChangedCount,
                e && _.desktopFocusedTimer.toggle(e);
            P.desktopMainWindowHasFocus = e;
          }
        }
        static desktopMessageEvent(e) {
          for (let _ of Object.values(P.gamesByPid))
            switch (e) {
              case "ack":
                ++_.desktopMessageAckCount;
                break;
              case "created":
                ++_.desktopMessageCreateCount;
            }
        }
        static toggleRtcConnection(e) {
          for (let _ of Object.values(P.gamesByPid))
            _.rtcConnectionTimer.toggle(e);
        }
        constructor(e) {
          (this.game = e),
            (this.uuid = crypto.randomUUID()),
            (this.notificationAnalytics = new U()),
            (this.widgetAnalytics = new M()),
            (this.uiUnlockedCount = 0),
            (this.uiLockedCount = 0),
            (this.gameFocusChangedCount = 0),
            (this.gameConcurrentGameCount = 0),
            (this.overlayMessageAckCount = 0),
            (this.overlayMessageCreateCount = 0),
            (this.gameTimer = r.StopWatch.startNew()),
            (this.gameFocusedTimer = new r.StopWatch()),
            (this.unlockedTimer = new r.StopWatch()),
            (this.rtcConnectionTimer = new r.StopWatch()),
            (this.desktopFocusedTimer = new r.StopWatch()),
            (this.desktopFocusChangedCount = 0),
            (this.desktopMessageAckCount = 0),
            (this.desktopMessageCreateCount = 0),
            (this.soundboardShownTimer = new r.StopWatch()),
            (this.soundboardShownCount = 0),
            (this.soundboardKeepOpenCount = 0),
            (this.muteToggledCount = 0),
            (this.screenAnalytics = new h(e)),
            (this.overlayStatus = T.default.getGameOverlayStatus(e)),
            P.desktopMainWindowHasFocus && this.desktopFocusedTimer.start(),
            F.hasConnection() && this.rtcConnectionTimer.start();
        }
      }
      function m(e) {
        for (let _ of (c.verbose("handleRunningGamesChange", e), e.added)) {
          P.incrementConcurrentGameCount();
          let e = P.create(_);
          c.verbose("handleRunningGamesChange added", _, e);
        }
        for (let _ of e.removed)
          P.destroy(_), c.verbose("handleRunningGamesChange removed", _);
      }
      function G(e) {
        let _ = P.getByPid(e.pid);
        if ((c.verbose("OVERLAY_SET_UI_LOCKED", _), null == _)) {
          c.error("OVERLAY_SET_UI_LOCKED: Unable to find game", e, P.debug);
          return;
        }
        _.setLocked(e.locked);
      }
      function p(e) {
        var _;
        c.verbose("OVERLAY_NOTIFICATION_EVENT", e);
        let E = P.getByName(
          null !== (_ = e.gameName) && void 0 !== _ ? _ : e.gameId
        );
        if (null == E) {
          c.error("OVERLAY_NOTIFICATION_EVENT: Game not found.", e, P.debug);
          return;
        }
        E.notificationAnalytics.increment(e.notificationType, e.action);
      }
      function g(e) {
        var _;
        c.verbose("OVERLAY_WIDGET_CHANGED", e);
        let E = P.getByName(
          null !== (_ = e.gameName) && void 0 !== _ ? _ : e.gameId
        );
        if (null == E) {
          c.error("OVERLAY_WIDGET_CHANGED: Game not found", e, P.debug);
          return;
        }
        let t = E.widgetAnalytics.getByWidget(e.widgetType);
        null != t &&
          (!t.initialized && ((t.initialized = !0), (t.pinned = e.pinned)),
          t.pinned !== e.pinned && ++t.pinnedToggledCount,
          (t.pinned = e.pinned),
          t.visibleDuration.toggle(e.visible));
      }
      function y(e) {
        if (
          (c.verbose("OVERLAY_FOCUSED", e),
          P.gameSetAllUnfocused(),
          null == e.pid)
        )
          return;
        let _ = P.getByPid(e.pid);
        if (null == _) {
          c.error("OVERLAY_FOCUSED: Game not found", e, P.debug);
          return;
        }
        _.gameSetFocused(!0);
      }
      function B(e) {
        var _;
        c.verbose("SOUNDBOARD_SET_OVERLAY_ENABLED", e);
        let E = P.getByPid(e.pid);
        if (null == E) {
          c.error("SOUNDBOARD_SET_OVERLAY_ENABLED: Game not found", e, P.debug);
          return;
        }
        E.setSoundboardShown(
          e.enabled,
          !!e.enabled && null !== (_ = e.keepOpen) && void 0 !== _ && _
        );
      }
      function f(e) {
        var _;
        c.verbose("OVERLAY_MESSAGE_EVENT_ACTION", e);
        let E = P.getByName(
          null !== (_ = e.gameName) && void 0 !== _ ? _ : e.gameId
        );
        if (null == E) {
          c.error("OVERLAY_MESSAGE_EVENT_ACTION: Game not found", e, P.debug);
          return;
        }
        switch (e.eventType) {
          case "ack":
            ++E.overlayMessageAckCount;
            break;
          case "create":
            ++E.overlayMessageCreateCount;
        }
      }
      function H(e) {
        c.verbose("MESSAGE_ACKED", e), P.desktopMessageEvent("ack");
      }
      function v(e) {
        e.message.state === C.MessageStates.SENDING &&
          P.desktopMessageEvent("created");
      }
      function b(e) {
        null != (0, L.default)() &&
          (c.verbose("AUDIO_TOGGLE_SELF_MUTE", e), P.handleMuteToggled());
      }
      function w(e) {
        c.verbose("WINDOW_FOCUS", e);
        let _ = (0, l.getMainWindowId)();
        if (e.windowId !== _) {
          c.verbose("WINDOW_FOCUS: Not main window", {
            action: e,
            mainWindowId: _,
          });
          return;
        }
        P.desktopSetFocused(e.focused);
      }
      (P.gamesByPid = {}),
        (P.gamesByName = {}),
        (P.desktopMainWindowHasFocus = document.hasFocus());
      class F {
        static hasConnection() {
          return F.connections.size > 0;
        }
        static handleRTCConnectionState(e) {
          var _;
          let E =
            (null !== (_ = e.channelId) && void 0 !== _ ? _ : "unknown") +
            e.context;
          switch (e.state) {
            case C.RTCConnectionStates.RTC_CONNECTED:
              F.connections.add(E);
              break;
            case C.RTCConnectionStates.DISCONNECTED:
              F.connections.delete(E);
          }
          let t = F.hasConnection();
          F.previousHasConnection !== t &&
            (P.toggleRtcConnection(t), (F.previousHasConnection = t));
        }
      }
      (F.connections = new Set()), (F.previousHasConnection = !1);
      class Y {
        static handleMessageAcked(e) {
          c.verbose("MESSAGE_ACKED", e);
          let _ = S.default.getGame();
          if (null == _) {
            c.error("Game not found.");
            return;
          }
          a.default.dispatch({
            type: "OVERLAY_MESSAGE_EVENT_ACTION",
            eventType: "ack",
            gameName: _.name,
            gameId: _.id,
          });
        }
        static handleMessageCreate(e) {
          if (e.message.state !== C.MessageStates.SENDING) return;
          c.verbose("MESSAGE_CREATE", e, Error().stack);
          let _ = S.default.getGame();
          if (null == _) {
            c.error("Game not found.");
            return;
          }
          a.default.dispatch({
            type: "OVERLAY_MESSAGE_EVENT_ACTION",
            eventType: "create",
            gameName: _.name,
            gameId: _.id,
          });
        }
      }
      class V extends I.default {
        constructor(...e) {
          super(...e),
            (this.actions = __OVERLAY__
              ? {
                  MESSAGE_ACKED: Y.handleMessageAcked,
                  MESSAGE_CREATE: Y.handleMessageCreate,
                }
              : {
                  OVERLAY_FOCUSED: y,
                  OVERLAY_NOTIFICATION_EVENT: p,
                  OVERLAY_SET_UI_LOCKED: G,
                  OVERLAY_WIDGET_CHANGED: g,
                  OVERLAY_MESSAGE_EVENT_ACTION: f,
                  RUNNING_GAMES_CHANGE: m,
                  SOUNDBOARD_SET_OVERLAY_ENABLED: B,
                  MESSAGE_ACKED: H,
                  MESSAGE_CREATE: v,
                  WINDOW_FOCUS: w,
                  RTC_CONNECTION_STATE: F.handleRTCConnectionState,
                  AUDIO_TOGGLE_SELF_MUTE: b,
                });
        }
      }
      var k = new V();
    },
    382022: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return c;
          },
        }),
        E("222007");
      var t = E("210696"),
        o = E.n(t),
        n = E("446674"),
        r = E("913144"),
        a = E("689988"),
        i = E("288206"),
        I = E("605250"),
        s = E("385976"),
        T = E("364685"),
        S = E("42203"),
        N = E("305961"),
        O = E("619443");
      let A = new I.default("EntityVersionsManager");
      class R extends a.default {
        _initialize() {
          r.default.subscribe("CONNECTION_OPEN", L);
        }
        _terminate() {
          r.default.unsubscribe("CONNECTION_OPEN", L);
        }
        constructor(...e) {
          super(...e),
            (this.actions = { GUILD_CREATE: u, DELETED_ENTITY_IDS: l });
        }
      }
      function l(e) {
        var _;
        let E =
          null === (_ = N.default.getGuild(e.guild_id)) || void 0 === _
            ? void 0
            : _.name;
        A.fileOnly(
          "received deleted guild entities (id: "
            .concat(e.guild_id, ", name: ")
            .concat(E, ")")
        ),
          n.default.Emitter.batched(() => {
            null != e.channels &&
              (function (e, _) {
                let E = Object.keys(
                  S.default.getMutableBasicGuildChannelsForGuild(e)
                );
                A.fileOnly("syncChannels", {
                  channelIdsInMemory: E,
                  channelIdsFromServer: _,
                }),
                  E.forEach(E => {
                    !_.has(E) &&
                      r.default.dispatch({
                        type: "CHANNEL_DELETE",
                        channel: { guild_id: e, id: E, parent_id: void 0 },
                      });
                  });
              })(e.guild_id, new Set(e.channels)),
              null != e.roles &&
                (function (e, _) {
                  var E, t;
                  Object.keys(
                    null !==
                      (t =
                        null === (E = N.default.getGuild(e)) || void 0 === E
                          ? void 0
                          : E.roles) && void 0 !== t
                      ? t
                      : {}
                  ).forEach(E => {
                    !_.has(E) &&
                      r.default.dispatch({
                        type: "GUILD_ROLE_DELETE",
                        guildId: e,
                        roleId: E,
                      });
                  });
                })(e.guild_id, new Set(e.roles)),
              null != e.emojis &&
                (function (e, _) {
                  let E = s.default.getGuildEmoji(e),
                    t = E.filter(e => _.has(e.id));
                  E.length !== t.length &&
                    r.default.dispatch({
                      type: "GUILD_EMOJIS_UPDATE",
                      guildId: e,
                      emojis: t,
                    });
                })(e.guild_id, new Set(e.emojis)),
              null != e.stickers &&
                (function (e, _) {
                  var E;
                  let t =
                      null !== (E = T.default.getStickersByGuildId(e)) &&
                      void 0 !== E
                        ? E
                        : [],
                    o = t.filter(e => _.has(e.id));
                  t.length !== o.length &&
                    r.default.dispatch({
                      type: "GUILD_STICKERS_UPDATE",
                      guildId: e,
                      stickers: o,
                    });
                })(e.guild_id, new Set(e.stickers));
          });
      }
      function L() {
        i.default.getGuildIdsRequiringDeletedIdsSync().forEach(e => C(e));
      }
      function u(e) {
        let { guild: _ } = e;
        _.unableToSyncDeletes && C(_.id);
      }
      function C(e) {
        setTimeout(
          () =>
            (function (e) {
              var _, E, t, o, n;
              let r =
                null === (_ = N.default.getGuild(e)) || void 0 === _
                  ? void 0
                  : _.name;
              A.fileOnly(
                "requesting deleted guild entities (id: "
                  .concat(e, ", name: ")
                  .concat(r, ")")
              );
              let a = D(
                  Object.keys(S.default.getMutableBasicGuildChannelsForGuild(e))
                ),
                i = D(
                  Object.keys(
                    null !==
                      (o =
                        null === (E = N.default.getGuild(e)) || void 0 === E
                          ? void 0
                          : E.roles) && void 0 !== o
                      ? o
                      : {}
                  )
                ),
                I = D(s.default.getGuildEmoji(e).map(e => e.id)),
                R = D(
                  null !==
                    (n =
                      null === (t = T.default.getStickersByGuildId(e)) ||
                      void 0 === t
                        ? void 0
                        : t.map(e => e.id)) && void 0 !== n
                    ? n
                    : []
                );
              O.default
                .getSocket()
                .getDeletedEntityIdsNotMatchingHash(e, a, i, I, R);
            })(e),
          Math.ceil(2e3 * Math.random())
        );
      }
      function D(e) {
        return o.v3(e.sort().join(",")).toString();
      }
      var c = new R();
    },
    451772: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return c;
          },
        }),
        E("222007");
      var t = E("862337"),
        o = E("913144"),
        n = E("990766"),
        r = E("373469"),
        a = E("271938"),
        i = E("42203"),
        I = E("590401"),
        s = E("18494"),
        T = E("205817"),
        S = E("718517"),
        N = E("374014"),
        O = E("49111");
      let A = new t.Timeout(),
        R = new t.Timeout(),
        l = 5 * S.default.Millis.SECOND,
        L = 12 * S.default.Millis.SECOND,
        u = null;
      function C(e, _) {
        if (s.default.getVoiceChannelId() !== e) return !1;
        let E = i.default.getChannel(e);
        if (null == E || (!E.isDM() && !E.isGuildStageVoice())) return !1;
        let t = r.default.getActiveStreamForUser(_, E.getGuildId());
        if (null != t) return !1;
        let o = r.default.getStreamForUser(_, E.getGuildId());
        if (null == o) return !1;
        let a = (0, N.encodeStreamKey)(o);
        return a !== u && ((u = a), (0, n.watchStream)(o, { noFocus: !0 }), !0);
      }
      function D(e, _) {
        let E = null != _ ? _ : I.default.getPreferredRegion();
        null != E &&
          E !==
            I.default.getRegion(
              T.default.getHostname(T.default.getActiveStreamKey())
            ) &&
          (0, n.changeStreamRegion)(e, E);
      }
      var c = {
        init() {
          let e = (e, _) => {
            !T.default.getAllActiveStreamKeys().includes(e) &&
              R.start(_ ? L : l, () => {
                o.default.dispatch({ type: "STREAM_TIMED_OUT", streamKey: e });
              });
          };
          o.default.subscribe("STREAM_WATCH", _ => {
            let { streamKey: E } = _,
              { channelId: t } = (0, N.decodeStreamKey)(E),
              o = i.default.getChannel(t);
            e(E, null == o ? void 0 : o.isGuildStageVoice());
          }),
            o.default.subscribe("STREAM_START", _ => {
              let { streamType: E, guildId: t, channelId: o } = _,
                n = i.default.getChannel(o);
              e(
                (0, N.encodeStreamKey)({
                  streamType: E,
                  guildId: t,
                  channelId: o,
                  ownerId: a.default.getId(),
                }),
                null == n ? void 0 : n.isGuildStageVoice()
              );
            }),
            o.default.subscribe("STREAM_CREATE", () => {
              R.stop();
            }),
            o.default.subscribe("STREAM_UPDATE", () => {
              R.stop();
            }),
            o.default.subscribe("STREAM_DELETE", () => {
              R.stop();
            }),
            o.default.subscribe("STREAM_CLOSE", () => {
              A.stop(), R.stop();
            }),
            o.default.subscribe("VOICE_CHANNEL_SELECT", e => {
              let { channelId: _ } = e;
              if (null == _) return;
              u = null;
              let E = r.default
                .getAllApplicationStreamsForChannel(_)
                .filter(e => {
                  let { ownerId: _ } = e;
                  return _ !== a.default.getId();
                })[0];
              null != E && C(_, E.ownerId);
            }),
            o.default.subscribe("VOICE_STATE_UPDATES", e => {
              let { voiceStates: _ } = e;
              _.forEach(e => {
                let { userId: _, channelId: E, guildId: t, selfStream: o } = e;
                if (_ !== a.default.getId() && null != E) {
                  if (o && C(E, _)) return;
                  let e = r.default.getActiveStreamForUser(_, t);
                  if (
                    null != e &&
                    e.channelId === E &&
                    (!o &&
                      e.state !== O.ApplicationStreamStates.ENDED &&
                      A.start(18e4, () =>
                        (0, n.closeStream)((0, N.encodeStreamKey)(e), !1)
                      ),
                    o && e.state === O.ApplicationStreamStates.ENDED)
                  ) {
                    A.stop();
                    let e = r.default.getStreamForUser(_, t);
                    if (null == e) return;
                    (0, n.watchStream)(e);
                  }
                }
              });
            }),
            o.default.subscribe("CALL_UPDATE", e => {
              let { channelId: _, region: E } = e,
                t = r.default.getCurrentUserActiveStream();
              (null == t ? void 0 : t.channelId) === _ &&
                D((0, N.encodeStreamKey)(t), E);
            }),
            o.default.subscribe("CHANNEL_UPDATES", e => {
              let { channels: _ } = e,
                E = r.default.getCurrentUserActiveStream();
              if (null != E)
                for (let e of _)
                  E.channelId === e.id &&
                    D((0, N.encodeStreamKey)(E), e.rtcRegion);
            });
        },
      };
    },
    643130: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return D;
          },
        });
      var t = E("37983");
      E("884691");
      var o = E("917351"),
        n = E("77078"),
        r = E("913144"),
        a = E("629109"),
        i = E("990766"),
        I = E("845579"),
        s = E("373469"),
        T = E("271938"),
        S = E("525065"),
        N = E("945956"),
        O = E("697218"),
        A = E("451772"),
        R = E("374014"),
        l = E("16916"),
        L = E("706530"),
        u = E("49111");
      let C = (0, o.debounce)(i.notifyStreamStart, 1e3);
      var D = {
        init() {
          A.default.init(),
            r.default.subscribe("MEDIA_ENGINE_VIDEO_STATE_CHANGED", e => {
              let { videoState: _ } = e,
                E = s.default.getCurrentUserActiveStream();
              if (null != E) {
                let e = _ === u.MediaEngineVideoStates.PAUSED;
                (0, i.setStreamPaused)(E, e);
              }
            }),
            r.default.subscribe("STREAM_DELETE", e => {
              e.reason === u.ApplicationStreamDeleteReasons.STREAM_FULL &&
                ((0, i.closeStream)(e.streamKey, !1),
                (0, n.openModalLazy)(async () => {
                  let { default: e } = await E.el("748168").then(
                    E.bind(E, "748168")
                  );
                  return _ => (0, t.jsx)(e, { ..._ });
                }));
            }),
            r.default.subscribe("STREAM_WATCH", e => {
              let { streamKey: _, allowMultiple: E } = e;
              if (E) return;
              let t = (0, R.decodeStreamKey)(_);
              s.default.getAllActiveStreams().forEach(e => {
                if (e.ownerId !== t.ownerId)
                  e.ownerId !== T.default.getId() &&
                    (e.ownerId === T.default.getId() &&
                      a.default.setGoLiveSource(null),
                    (0, i.closeStream)((0, R.encodeStreamKey)(e), !1));
              });
            }),
            r.default.subscribe("VOICE_STATE_UPDATES", e => {
              let { voiceStates: _ } = e;
              _.forEach(e => {
                let { userId: _ } = e;
                if (_ !== T.default.getId()) return;
                let E = s.default.getAllActiveStreams(),
                  t = N.default.getChannelId();
                E.forEach(e => {
                  e.channelId !== t && (0, l.default)(e, !1);
                });
              });
            }),
            r.default.subscribe("STREAM_CREATE", e => {
              var _;
              let { streamKey: E } = e,
                { ownerId: t, guildId: o } = (0, R.decodeStreamKey)(E);
              if (
                null == o ||
                null == t ||
                t !==
                  (null === (_ = O.default.getCurrentUser()) || void 0 === _
                    ? void 0
                    : _.id)
              )
                return;
              let n = S.default.getMemberCount(o);
              null != n &&
                !(n < 2) &&
                !(n > L.STREAM_NOTIFY_GUILD_MAX_SIZE) &&
                I.NotifyFriendsOnGoLive.getSetting() &&
                C(E);
            });
        },
      };
    },
    129040: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          GUEST_INVITE_KEY: function () {
            return s;
          },
          default: function () {
            return S;
          },
        }),
        E("222007");
      var t = E("444095"),
        o = E("913144"),
        n = E("970728"),
        r = E("689988"),
        a = E("271938"),
        i = E("773336"),
        I = E("49111");
      let s = "guestInviteToAccept";
      class T extends r.default {
        constructor(...e) {
          super(...e),
            (this.actions = {
              POST_CONNECTION_OPEN: () => this.handleConnectionOpen(),
            }),
            (this.handleConnectionOpen = async () => {
              if ((0, i.isWeb)()) {
                let e = t.default.get(s);
                if (
                  null != e &&
                  "string" == typeof e &&
                  a.default.isAuthenticated()
                ) {
                  let { invite: _ } = await n.default.resolveInvite(
                    e,
                    "Desktop Modal"
                  );
                  null != _ &&
                    (o.default.dispatch({
                      type: "INVITE_MODAL_OPEN",
                      invite: _,
                      code: e,
                      context: I.AppContext.APP,
                    }),
                    t.default.remove(s));
                }
              }
            });
        }
      }
      var S = new T();
    },
    689226: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          getRoleIconData: function () {
            return T;
          },
          replaceRoleIconSourceSize: function () {
            return S;
          },
          isRoleIconAssetUrl: function () {
            return O;
          },
          canGuildUseRoleIcons: function () {
            return A;
          },
        }),
        E("781738");
      var t = E("867805"),
        o = E("407063"),
        n = E("315102"),
        r = E("773336"),
        a = E("49111");
      let i = ""
          .concat(location.protocol, "//")
          .concat(window.GLOBAL_ENV.CDN_HOST, "/role-icons"),
        I = "".concat(location.protocol).concat(window.GLOBAL_ENV.API_ENDPOINT),
        s = (0, r.isAndroid)(),
        T = (e, _) => {
          if (null == e) return null;
          let E =
            null != e.unicodeEmoji
              ? t.default.getByName(
                  t.default.convertSurrogateToName(e.unicodeEmoji, !1)
                )
              : void 0;
          return {
            customIconSrc: N(e, _),
            unicodeEmoji: null != E ? E : void 0,
          };
        },
        S = (e, _) =>
          e.replace(
            /size=[0-9]+/g,
            "size=".concat(
              (0, o.getBestMediaProxySize)(_ * (0, o.getDevicePixelRatio)())
            )
          ),
        N = (e, _) => {
          let { id: E, icon: t } = e;
          if (null == t) return;
          if (t.startsWith("data:")) return t;
          let r = n.SUPPORTS_WEBP ? "webp" : "png",
            T = "",
            S = "quality=lossless";
          return (null != _ &&
            ((T =
              "size=" +
              (0, o.getBestMediaProxySize)(_ * (0, o.getDevicePixelRatio)())),
            (S = s ? "" : "&" + S)),
          null != window.GLOBAL_ENV.CDN_HOST)
            ? ""
                .concat(i, "/")
                .concat(E, "/")
                .concat(t, ".")
                .concat(r, "?")
                .concat(T)
                .concat(S)
            : "".concat(I).concat(a.Endpoints.ROLE_ICON(E, t), "?").concat(T);
        },
        O = e =>
          e.startsWith(i) ||
          (e.startsWith("".concat(I, "/roles")) && e.includes("/icons/")),
        A = (e, _) => {
          var E;
          let t =
            (null == _
              ? void 0
              : null === (E = _.tags) || void 0 === E
                ? void 0
                : E.subscription_listing_id) != null;
          return t || e.features.has(a.GuildFeatures.ROLE_ICONS);
        };
    },
    435123: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          shouldFetchGuildFeed: function () {
            return a;
          },
          default: function () {
            return i;
          },
        });
      var t = E("884691"),
        o = E("446674"),
        n = E("713810"),
        r = E("185014");
      function a(e, _) {
        let E = r.default.getLastFetchedMillis(e);
        if (!_ && null != E && Date.now() - E < 72e5) return !1;
        let { loading: t } = r.default.getFetchStatus(e);
        return t === r.LoadingStatus.NONE && !0;
      }
      function i(e) {
        let { guildId: _, highlightedItemData: E } = e,
          { loading: i, error: I } = (0, o.useStateFromStores)(
            [r.default],
            () => r.default.getFetchStatus(_),
            [_]
          ),
          s = t.useCallback(
            e => {
              let { force: t, flushSeenItems: o } = e;
              async function r() {
                try {
                  await (0, n.fetchGuildFeed)({
                    guildId: _,
                    flushSeenItems: o,
                    refresh: !0,
                    highlightedItemData: E,
                  });
                } catch (e) {
                  console.error(e);
                }
              }
              a(_, null != t && t) && r();
            },
            [_, E]
          ),
          T = t.useCallback(() => {
            a(_, !0) && e();
            async function e() {
              try {
                await (0, n.fetchGuildFeed)({ guildId: _, refresh: !1 });
              } catch (e) {
                console.error(e);
              }
            }
          }, [_]);
        return (
          t.useEffect(() => {
            s({ force: null != E });
          }, [s, E]),
          { fetchFresh: s, fetchPage: T, loading: i, error: I }
        );
      }
    },
    558130: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          MAX_STORED_MESSAGES: function () {
            return s;
          },
          default: function () {
            return u;
          },
        }),
        E("424973"),
        E("222007"),
        E("808653");
      var t = E("917351"),
        o = E.n(t),
        n = E("446674"),
        r = E("913144"),
        a = E("42203");
      E("162771");
      var i = E("299039"),
        I = E("724210");
      let s = 26,
        T = {},
        S = {},
        N = {},
        O = {};
      function A(e) {
        let _ = S[e];
        if (null == _) return;
        let E = i.default.fromTimestamp(Date.now() - 9e5),
          t = o.findIndex(_, e => i.default.compare(e.id, E) > 0);
        if (-1 === t) S[e] = [];
        else {
          let E = Math.max(t, _.length - s);
          S[e] = o.slice(_, E);
        }
        N[e] = Date.now();
      }
      function R(e, _, E, t) {
        T[e].add(_);
        let o = N[_];
        (null == o || o + 3e5 > Date.now()) && A(_),
          null == S[_] && (S[_] = []),
          S[_].push({ id: E, userId: t });
      }
      function l(e) {
        let { channel: _ } = e;
        delete S[_.id], delete N[_.id];
      }
      class L extends n.default.Store {
        getActiveChannelsFetchStatus(e) {
          return O[e];
        }
        getActiveChannelIds(e) {
          return T[e];
        }
        getChannelMessageData(e) {
          return S[e];
        }
        shouldFetch(e) {
          var _;
          return (
            null == T[e] &&
            !(null === (_ = O[e]) || void 0 === _ ? void 0 : _.loading)
          );
        }
      }
      L.displayName = "ActiveChannelsStore";
      var u = new L(r.default, {
        CHANNEL_SELECT: function (e) {
          let { channelId: _, guildId: E } = e;
          if (!(0, I.isGuildHomeChannel)(_) || null == E) return !1;
          let t = T[E];
          if (null == t) return !1;
          t.forEach(e => {
            var _;
            A(e),
              (null === (_ = S[e]) || void 0 === _ ? void 0 : _.length) === 0 &&
                delete S[e];
          });
          let n = o
            .chain(Array.from(t))
            .filter(e => e in S)
            .sortBy(e => {
              var _, E;
              return -(null !==
                (E = null === (_ = S[e]) || void 0 === _ ? void 0 : _.length) &&
              void 0 !== E
                ? E
                : 0);
            })
            .value();
          T[E] = new Set(n);
        },
        MESSAGE_CREATE: function (e) {
          var _;
          let {
            channelId: E,
            message: t,
            optimistic: o,
            isPushNotification: n,
          } = e;
          if (o || n) return !1;
          let r = a.default.getChannel(E);
          if (null == r) return !1;
          let i = r.guild_id;
          if (null == i || null == T[i]) return !1;
          R(
            i,
            E,
            t.id,
            null === (_ = t.author) || void 0 === _ ? void 0 : _.id
          );
        },
        GUILD_DELETE: function (e) {
          let { guild: _ } = e;
          delete T[_.id];
        },
        CHANNEL_DELETE: l,
        THREAD_DELETE: l,
        ACTIVE_CHANNELS_FETCH_START: function (e) {
          let { guildId: _ } = e;
          O[_] = { loading: !0, error: null, fetchedAt: Date.now() };
        },
        ACTIVE_CHANNELS_FETCH_SUCCESS: function (e) {
          let { guildId: _, channels: E } = e;
          (O[_] = { loading: !1, error: null, fetchedAt: Date.now() }),
            (T[_] = new Set()),
            E.forEach(e => {
              let { channel_id: E, messages: t } = e;
              t.forEach(e => {
                R(_, E, e.message_id, e.user_id);
              });
            });
        },
        ACTIVE_CHANNELS_FETCH_FAILURE: function (e) {
          let { guildId: _, error: E } = e;
          O[_] = { loading: !1, error: E, fetchedAt: null };
        },
        CONNECTION_OPEN: function () {},
      });
    },
    168263: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return T;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("191152"),
        n = E("713810"),
        r = E("435123"),
        a = E("558130"),
        i = E("677315"),
        I = E("724210");
      class s extends t.default {
        handleChannelPreload(e) {
          let { guildId: _, channelId: E } = e;
          if (
            null == _ ||
            E !== I.StaticChannelRoute.GUILD_HOME ||
            !(0, i.canSeeGuildHome)(_)
          )
            return !1;
          (0, r.shouldFetchGuildFeed)(_, !1) &&
            (0, n.fetchGuildFeed)({ guildId: _, refresh: !0 }),
            a.default.shouldFetch(_) && (0, o.fetchActiveChannels)(_);
        }
        constructor(...e) {
          super(...e),
            (this.actions = { CHANNEL_PRELOAD: this.handleChannelPreload });
        }
      }
      var T = new s();
    },
    129966: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          isLimitedAccessErrorCode: function () {
            return o;
          },
        });
      var t = E("49111");
      function o(e, _) {
        return (
          403 === e &&
          null != _ &&
          _ >= t.AbortCodes.GUILD_LIMITED_ACCESS_DEFAULT &&
          _ <= t.AbortCodes.GUILD_LIMITED_ACCESS_MAX
        );
      }
    },
    332336: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return A;
          },
        }),
        E("222007");
      var t = E("913144"),
        o = E("689988"),
        n = E("525065"),
        r = E("178406");
      let a = {},
        i = {},
        I = null;
      async function s(e, _) {
        null == a[e] && (a[e] = new Set()),
          a[e].add(_),
          null == i[e] && (i[e] = Date.now()),
          S(e) && (await T(e));
      }
      function T(e) {
        if (null == a[e]) return;
        let _ = Array.from(a[e]);
        (a[e] = new Set()),
          (i[e] = Date.now()),
          requestAnimationFrame(async () => {
            await t.default.dispatch({
              type: "MEMBER_SAFETY_GUILD_MEMBER_UPDATE_BATCH",
              guildId: e,
              userIds: _,
            });
          });
      }
      function S(e) {
        let _ = a[e];
        if (null == _) return !1;
        let E =
            _.size >=
            (function (e) {
              var _;
              let E =
                null !== (_ = n.default.getMemberCount(e)) && void 0 !== _
                  ? _
                  : 0;
              return E >= 75e3 ? 10 : 2;
            })(e),
          t = i[e];
        if (E) return !0;
        if (null == t) return !1;
        let o = Date.now() - t,
          r =
            null != t &&
            o >=
              (function (e) {
                var _;
                let E =
                  null !== (_ = n.default.getMemberCount(e)) && void 0 !== _
                    ? _
                    : 0;
                return E >= 75e3 ? 5e3 : 2e3;
              })(e);
        return r;
      }
      function N(e) {
        (a[e] = new Set()), (i[e] = null);
      }
      class O extends o.default {
        handleInitialize() {
          null == I &&
            null == I &&
            (I = setInterval(() => {
              for (let e in a) S(e) && T(e);
            }, 1e4));
        }
        handleGuildMemberUpdate(e, _) {
          let E = r.default.isInitialized(e);
          if (E) return s(e, _);
        }
        handleGuildMemberRemove(e, _) {
          let E = r.default.isInitialized(e);
          if (E) return s(e, _);
        }
        handleGuildDelete(e) {
          let _ = e.guild.id,
            E = r.default.isInitialized(_);
          E && N(_);
        }
        handleGuildMemberSearchSuccess(e) {
          let { guildId: _ } = e,
            E = r.default.isInitialized(_);
          E && N(_);
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              INITIALIZE_MEMBER_SAFETY_STORE: () => this.handleInitialize(),
              GUILD_MEMBER_ADD: e =>
                this.handleGuildMemberUpdate(e.guildId, e.user.id),
              GUILD_MEMBER_UPDATE: e =>
                this.handleGuildMemberUpdate(e.guildId, e.user.id),
              GUILD_MEMBER_REMOVE: e =>
                this.handleGuildMemberRemove(e.guildId, e.user.id),
              MEMBER_SAFETY_GUILD_MEMBER_SEARCH_SUCCESS: e =>
                this.handleGuildMemberSearchSuccess(e),
            });
        }
      }
      var A = new O();
    },
    999243: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return u;
          },
        }),
        E("222007"),
        E("702976");
      var t = E("689988"),
        o = E("393414"),
        n = E("26989"),
        r = E("305961"),
        a = E("162771"),
        i = E("718517"),
        I = E("568734"),
        s = E("685829"),
        T = E("863636"),
        S = E("937692"),
        N = E("49111"),
        O = E("724210"),
        A = E("657944");
      let R = null,
        l = null;
      class L extends t.default {
        constructor(...e) {
          super(...e),
            (this.actions = {
              GUILD_DELETE: e => this.handleGuildDelete(e),
              CHANNEL_SELECT: e => this.handleChannelSelect(e),
              POST_CONNECTION_OPEN: e => this.handleConnectionOpen(e),
            }),
            (this.handleConnectionOpen = e => {
              var _;
              null !=
                (R =
                  null !== (_ = null != R ? R : a.default.getGuildId()) &&
                  void 0 !== _
                    ? _
                    : null) && this._openOnboardingIfIncomplete(R);
            }),
            (this.handleChannelSelect = e => {
              let { guildId: _, channelId: E } = e;
              if (R === _ && l === E) return;
              if (
                ((R = null != _ ? _ : null),
                (l = null != E ? E : null),
                null == R || null == l)
              )
                return;
              let t = r.default.getGuild(_);
              null != t &&
                t.hasFeature(N.GuildFeatures.COMMUNITY) &&
                T.default.shouldFetchPrompts(R, 8 * i.default.Millis.HOUR) &&
                (0, s.loadOnboardingPrompts)(R),
                this._openOnboardingIfIncomplete(R, E);
            }),
            (this.handleGuildDelete = e => {
              let { guild: _ } = e;
              (0, S.discardOnboardingPromise)(_.id);
            }),
            (this._openOnboardingIfIncomplete = async (e, _) => {
              var E, t;
              if ((0, S.isOnboardingActiveForGuild)(e)) {
                (0, o.transitionTo)(
                  N.Routes.CHANNEL(e, O.StaticChannelRoute.GUILD_ONBOARDING)
                );
                return;
              }
              let a = r.default.getGuild(e);
              if (null == a || !a.hasFeature(N.GuildFeatures.GUILD_ONBOARDING))
                return;
              let i = n.default.getSelfMember(e);
              !(
                null == i ||
                (0, I.hasFlag)(
                  null !== (E = i.flags) && void 0 !== E ? E : 0,
                  A.GuildMemberFlags.COMPLETED_ONBOARDING
                )
              ) &&
                (0, I.hasFlag)(
                  null !== (t = i.flags) && void 0 !== t ? t : 0,
                  A.GuildMemberFlags.STARTED_ONBOARDING
                ) &&
                (await (0, S.default)({ guildId: e }),
                (0, o.transitionTo)(N.Routes.CHANNEL(e, _)));
            });
        }
      }
      var u = new L();
    },
    99628: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return l;
          },
        }),
        E("222007");
      var t = E("37983");
      E("884691");
      var o = E("151426"),
        n = E("77078"),
        r = E("689988"),
        a = E("10641"),
        i = E("18494"),
        I = E("162771"),
        s = E("599110"),
        T = E("179803"),
        S = E("49111"),
        N = E("994428");
      let O = "GUILD_ONBOARDING_UPSELL_MODAL",
        A = (e, _) => {
          if (__OVERLAY__ || null == e || null == _) return;
          let r = (0, T.shouldShowGuildOnboardingUpsell)(
            e,
            o.DismissibleContent.GUILD_ONBOARDING_UPSELL_MODAL_V2
          );
          if (!r) return;
          (0, a.requestMarkDismissibleContentAsShown)(
            o.DismissibleContent.GUILD_ONBOARDING_UPSELL_MODAL_V2
          );
          let i = function () {
            let _ =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : N.ContentDismissActionType.DISMISS;
            s.default.track(S.AnalyticEvents.UPSELL_CLICKED, {
              type: o.DismissibleContent[
                o.DismissibleContent.GUILD_ONBOARDING_UPSELL_MODAL_V2
              ],
              action: "dismiss",
            }),
              (0, T.dismissedGuildOnboardingUpsell)(
                e,
                o.DismissibleContent.GUILD_ONBOARDING_UPSELL_MODAL_V2
              ),
              (0, a.markDismissibleContentAsDismissed)(
                o.DismissibleContent.GUILD_ONBOARDING_UPSELL_MODAL_V2,
                { dismissAction: _ }
              );
          };
          (0, n.openModalLazy)(
            async () => {
              let { default: _ } = await E.el("790255").then(
                E.bind(E, "790255")
              );
              return E =>
                (0, t.jsx)(_, {
                  ...E,
                  guildId: e,
                  onClose: e => {
                    i(e), E.onClose();
                  },
                });
            },
            {
              modalKey: O,
              onCloseRequest: () => {
                i(), (0, n.closeModal)(O);
              },
            }
          );
        };
      class R extends r.default {
        handleChannelSelect(e) {
          let { guildId: _, channelId: E } = e;
          A(_, E);
        }
        handlePostConnectionOpen() {
          let e = i.default.getCurrentlySelectedChannelId(),
            _ = I.default.getGuildId();
          A(_, e);
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              CHANNEL_SELECT: this.handleChannelSelect,
              POST_CONNECTION_OPEN: this.handlePostConnectionOpen,
            });
        }
      }
      var l = new R();
    },
    902801: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return C;
          },
        }),
        E("222007"),
        E("702976");
      var t = E("37983");
      E("884691");
      var o = E("77078"),
        n = E("689988"),
        r = E("38654"),
        a = E("271938"),
        i = E("42203"),
        I = E("26989"),
        s = E("162771"),
        T = E("568734"),
        S = E("347895"),
        N = E("698882"),
        O = E("129092"),
        A = E("675305"),
        R = E("290886"),
        l = E("363176"),
        L = E("657944");
      class u extends n.default {
        constructor(...e) {
          super(...e),
            (this.onboardingCompleteGuilds = new Set()),
            (this.actions = {
              POST_CONNECTION_OPEN: () => this.handlePostConnectionOpen(),
              GUILD_MEMBER_UPDATE: e => this.handleGuildMemberUpdate(e),
              GUILD_DELETE: e => this.handleGuildDelete(e),
              CHANNEL_SELECT: e => this.handleChannelSelect(e),
              MESSAGE_CREATE: e => this.handleMessageSend(e),
              THREAD_CREATE: e => this.handleThreadCreate(e),
            }),
            (this.handlePostConnectionOpen = () => {
              let e = s.default.getGuildId();
              null != e && this._getOrLoadOnboardingMemberActions(e);
            }),
            (this.handleGuildMemberUpdate = e => {
              let { flags: _, user: n, guildId: r } = e;
              if (n.id === a.default.getId()) {
                if (
                  !this.onboardingCompleteGuilds.has(r) &&
                  (0, T.hasFlag)(
                    null != _ ? _ : 0,
                    L.GuildMemberFlags.COMPLETED_HOME_ACTIONS
                  )
                ) {
                  var i, I;
                  this.onboardingCompleteGuilds.add(r);
                  let e =
                    null !==
                      (I =
                        null === (i = N.default.getNewMemberActions(r)) ||
                        void 0 === i
                          ? void 0
                          : i.length) && void 0 !== I
                      ? I
                      : 0;
                  if (0 === e) return;
                  (0, o.openModalLazy)(async () => {
                    let { default: _ } = await E.el("74066").then(
                      E.bind(E, "74066")
                    );
                    return E =>
                      (0, t.jsx)(_, {
                        ...E,
                        initialPercent: (e - 1) / e,
                        numActions: e,
                      });
                  });
                }
              }
            }),
            (this.handleGuildDelete = e => {
              let { guild: _ } = e;
              this.onboardingCompleteGuilds.delete(_.id);
            }),
            (this.handleChannelSelect = async e => {
              let { guildId: _, channelId: E } = e;
              if (null == _ || null == E) return;
              let { memberActions: t, completedActions: o } =
                  await this._getOrLoadOnboardingMemberActions(_),
                n = null == t ? void 0 : t.find(e => e.channelId === E);
              (null == o ? void 0 : o[E]) !== !0 &&
                null != n &&
                n.actionType === O.NewMemberActionTypes.VIEW &&
                (0, S.completeNewMemberAction)(_, E);
            }),
            (this.handleMessageSend = e => {
              var _;
              let { guildId: E, channelId: t, message: o } = e;
              if (
                null == E ||
                null == t ||
                (null === (_ = o.author) || void 0 === _ ? void 0 : _.id) !==
                  a.default.getId()
              )
                return;
              let n = i.default.getChannel(t);
              (null == n ? void 0 : n.isForumPost()) &&
                (null == n ? void 0 : n.parent_id) != null &&
                this._completeChatAction(E, n.parent_id),
                this._completeChatAction(E, t);
            }),
            (this.handleThreadCreate = e => {
              var _;
              let { channel: E, isNewlyCreated: t } = e;
              if (
                !!t &&
                null != E.parent_id &&
                !!(null === (_ = i.default.getChannel(E.parent_id)) ||
                void 0 === _
                  ? void 0
                  : _.isForumLikeChannel())
              )
                E.ownerId === a.default.getId() &&
                  this._completeChatAction(E.guild_id, E.parent_id);
            }),
            (this._completeChatAction = async (e, _) => {
              let { memberActions: E, completedActions: t } =
                  await this._getOrLoadOnboardingMemberActions(e),
                o = null == E ? void 0 : E.find(e => e.channelId === _);
              (null == t ? void 0 : t[_]) !== !0 &&
                null != o &&
                o.actionType === O.NewMemberActionTypes.CHAT &&
                (0, S.completeNewMemberAction)(e, _);
            }),
            (this._getOrLoadOnboardingMemberActions = async e => {
              let _ = (0, R.canSeeOnboardingHome)(e),
                E = r.default.isFullServerPreview(e);
              if (!_ && !E) return {};
              let t = I.default.getSelfMember(e);
              if (null == t || !(0, l.getIsNewMember)(t)) return {};
              let [o, n] = await Promise.all([
                this._getOrLoadOnboardingHomeSettings(e, t),
                this._getOrLoadMemberActions(e, t),
              ]);
              return { memberActions: o, completedActions: n };
            }),
            (this._getOrLoadOnboardingHomeSettings = async (e, _) => {
              let E = N.default.getNewMemberActions(e),
                t = N.default.getIsLoading(e);
              if (!(null == E && !t && (0, l.getIsNewMember)(_))) return E;
              {
                let _ = await (0, S.fetchGuildHomeSettings)(e);
                return null == _ ? void 0 : _.newMemberActions;
              }
            }),
            (this._getOrLoadMemberActions = async (e, _) => {
              var E;
              let { completedActions: t, loading: o } = A.default.getState(e);
              if (
                !(
                  null == t &&
                  !o &&
                  (0, T.hasFlag)(
                    null !== (E = _.flags) && void 0 !== E ? E : 0,
                    L.GuildMemberFlags.STARTED_HOME_ACTIONS
                  )
                )
              )
                return t;
              {
                let _ = await (0, S.fetchNewMemberActions)(e);
                return _;
              }
            });
        }
      }
      var C = new u();
    },
    282655: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return u;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("716241"),
        n = E("651057"),
        r = E("299285"),
        a = E("271938"),
        i = E("42203"),
        I = E("824563"),
        s = E("18494"),
        T = E("101125"),
        S = E("800762"),
        N = E("774539"),
        O = E("49111");
      function A(e) {
        return e
          .filter(e => e.type === O.ActivityTypes.PLAYING && e.application_id)
          .map(e => e.application_id);
      }
      async function R(e) {
        await n.default.fetchApplications(e, !1);
      }
      async function l(e) {
        if (null == e) return;
        let _ = i.default.getChannel(e);
        if (
          null == _ ||
          !(0, N.isVoiceUserGameActivityEnabled)("running_games_change", !1)
        )
          return;
        let E = T.default.getActivities();
        if (0 === E.length) return;
        let t = A([...E]);
        await R([...t]);
        let n = r.default.getApplication(t[0]);
        null != n &&
          o.default.trackWithMetadata(
            O.AnalyticEvents.VOICE_CHANNEL_GAME_ACTIVITY_INDICATOR_SET,
            {
              channel_id: e,
              guild_id: _.guild_id,
              game_name: n.name,
              user_id: a.default.getId(),
            }
          );
      }
      class L extends t.default {
        handlePresenceUpdates(e) {
          let { updates: _ } = e,
            E = new Set();
          _.forEach(e => {
            let { user: _, activities: t } = e,
              o = S.default.getVoiceStateForUser(_.id);
            if (
              null == o ||
              !(0, N.isVoiceUserGameActivityEnabled)("presence_update", !1)
            )
              return;
            let n = A([...t]);
            E = new Set([...E, ...n]);
          }),
            R([...E]);
        }
        handleVoiceStateUpdates(e) {
          let { voiceStates: _ } = e,
            E = new Set();
          _.forEach(e => {
            let { userId: _, guildId: t } = e;
            if (
              !(0, N.isVoiceUserGameActivityEnabled)("voice_state_update", !1)
            )
              return;
            let o = I.default.getActivities(_, t),
              n = A([...o]);
            E = new Set([...E, ...n]);
          }),
            R([...E]);
        }
        handleRunningGamesChange() {
          let e = s.default.getVoiceChannelId();
          l(e);
        }
        handleVoiceChannelSelect(e) {
          let { channelId: _ } = e;
          l(_);
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              PRESENCE_UPDATES: this.handlePresenceUpdates,
              VOICE_STATE_UPDATES: this.handleVoiceStateUpdates,
              RUNNING_GAMES_CHANGE: this.handleRunningGamesChange,
              VOICE_CHANNEL_SELECT: this.handleVoiceChannelSelect,
            });
        }
      }
      var u = new L();
    },
    589636: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return I;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("704341"),
        n = E("393414"),
        r = E("49111");
      function a(e) {
        var _, E, t;
        let { guild: a } = e.invite;
        if (
          null != a &&
          (null == a
            ? void 0
            : null === (_ = a.features) || void 0 === _
              ? void 0
              : _.includes(r.GuildFeatures.HUB))
        ) {
          o.default.onOpenHubInvite(e.invite);
          return;
        }
        null != a &&
          (null == a
            ? void 0
            : null === (E = a.features) || void 0 === E
              ? void 0
              : E.includes(r.GuildFeatures.MEMBER_VERIFICATION_GATE_ENABLED)) &&
          !(null == a
            ? void 0
            : null === (t = a.features) || void 0 === t
              ? void 0
              : t.includes(r.GuildFeatures.PREVIEW_ENABLED)) &&
          (0, n.transitionTo)(
            r.Routes.GUILD_MEMBER_VERIFICATION(a.id, e.invite.code)
          );
      }
      class i extends t.default {
        constructor(...e) {
          super(...e), (this.actions = { INVITE_ACCEPT_SUCCESS: a });
        }
      }
      var I = new i();
    },
    360557: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return s;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("42203"),
        n = E("233965"),
        r = E("699209"),
        a = E("32346"),
        i = E("49111");
      class I extends t.default {
        constructor(...e) {
          super(...e),
            (this.actions = {
              VOICE_CHANNEL_SELECT: e => this.handleVoiceChannelSelect(e),
              LOGOUT: () => this.handleLogout(),
            }),
            (this.handleVoiceChannelSelect = e => {
              let { channelId: _, guildId: E } = e,
                { enableHangStatus: t, setDefaultStatus: I } =
                  r.HangStatusExperiment.getCurrentConfig(
                    {
                      guildId: null != E ? E : "",
                      location: "HangStatusManager",
                    },
                    { autoTrackExposure: !0 }
                  );
              if (null == E && null == _) {
                this.handleDisconnectFromVoiceChannel(),
                  (this.previousVoiceChannelId = _);
                return;
              }
              if (!t || _ === this.previousVoiceChannelId) return;
              if (((this.previousVoiceChannelId = _), null == E || null == _))
                return;
              let s = o.default.getChannel(_);
              if (null == s || s.type !== i.ChannelTypes.GUILD_VOICE) return;
              let T = a.default.getCurrentHangStatus();
              if (null != T) return;
              let S = a.default.getCurrentDefaultStatus();
              if (
                (null == S ? void 0 : S.expiresAt) != null &&
                (null == S ? void 0 : S.expiresAt) >= Date.now()
              ) {
                if (
                  S.status === i.HangStatusTypes.CUSTOM &&
                  null != S.customHangStatus
                ) {
                  let { status: e, emoji: _ } = S.customHangStatus;
                  (0, n.updateCustomHangStatus)(e, _);
                  return;
                }
                if (null == S.status) return;
                else {
                  (0, n.updateHangStatus)(S.status);
                  return;
                }
              }
              I && (0, n.updateHangStatus)(i.HangStatusTypes.CHILLING);
            }),
            (this.handleDisconnectFromVoiceChannel = () => {
              (0, n.clearHangStatus)();
            }),
            (this.handleLogout = () => {
              this.handleDisconnectFromVoiceChannel();
            });
        }
      }
      var s = new I();
    },
    636371: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          queueHighFive: function () {
            return o;
          },
          removeHighFive: function () {
            return n;
          },
          setHighFiveEnabled: function () {
            return r;
          },
          completeHighFive: function () {
            return a;
          },
          clearCompletedHighFive: function () {
            return i;
          },
        });
      var t = E("913144");
      function o(e, _, E) {
        t.default.dispatch({
          type: "HIGH_FIVE_QUEUE",
          userId: _,
          channelId: E,
          emoji: e,
        });
      }
      function n(e, _) {
        t.default.dispatch({
          type: "HIGH_FIVE_REMOVE",
          channelId: _,
          userId: e,
        });
      }
      function r(e) {
        t.default.dispatch({ type: "HIGH_FIVE_SET_ENABLED", enabled: e });
      }
      function a(e, _, E, o) {
        t.default.dispatch({
          type: "HIGH_FIVE_COMPLETE",
          waitingUserId: e,
          completingUserId: _,
          channelId: E,
          completingEmoji: o,
        });
      }
      function i(e, _, E) {
        t.default.dispatch({
          type: "HIGH_FIVE_COMPLETE_CLEAR",
          firstUserId: e,
          secondUserId: _,
          channelId: E,
        });
      }
    },
    536813: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return h;
          },
        }),
        E("222007");
      var t = E("917351"),
        o = E.n(t),
        n = E("862337"),
        r = E("689988"),
        a = E("271938"),
        i = E("718517"),
        I = E("709681"),
        s = E("636371"),
        T = E("170152"),
        S = E("391591");
      let N = 15 * i.default.Millis.SECOND,
        O = 15 * i.default.Millis.SECOND,
        A = ["\uD83C\uDDE9", "\uD83C\uDDF4", "\uD83C\uDDF9", "\uD83C\uDDE6"],
        R = A.length,
        l = function (e, _) {
          let E =
            arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
          return "".concat(e, ":").concat(_, ":").concat(E);
        },
        L = new n.Timeout(),
        u = [],
        C = {},
        D = (0, I.createSound)("highfive_whistle", "highfive_whistle", 0.6),
        c = (0, I.createSound)("highfive_clap", "highfive_clap", 0.6);
      function d(e) {
        let { emoji: _, channelId: E, userId: t } = e,
          r = a.default.getId(),
          i = T.default.getEnabled();
        if (null != _) {
          if (i && (0, S.default)(_.name))
            return (function (e, _, E) {
              var t;
              let o = l(_, E);
              if (null != T.default.getWaitingHighFive(E, _)) return;
              let [r, a] =
                null !==
                  (t = Object.entries(C).find(e => {
                    let [_] = e;
                    return _ !== o;
                  })) && void 0 !== t
                  ? t
                  : [];
              if (null != r && null != a)
                a.cancel(),
                  c.play(),
                  delete C[r],
                  (0, s.completeHighFive)(r.split(":")[0], _, E, e);
              else {
                (0, s.queueHighFive)(e, _, E), D.play();
                let t = new n.DelayedCall(O, () => {
                  delete C[_], (0, s.removeHighFive)(_, E);
                });
                (C[_] = t), t.delay();
              }
            })(_.name, t, E);
          t === r &&
            ((u = [...u, _.name].slice(-1 * R)),
            o.isEqual(u, A)
              ? (D.play(), L.stop(), (u = []), (0, s.setHighFiveEnabled)(!i))
              : L.start(N, () => (u = [])));
        }
      }
      function U(e) {
        let { completingUserId: _, waitingUserId: E, channelId: t } = e,
          o = l(_ + E, t, !0);
        (C[o] = new n.DelayedCall(550, () => {
          delete C[o], (0, s.clearCompletedHighFive)(_, E, t);
        })),
          C[o].delay();
      }
      class M extends r.default {
        _terminate() {
          Object.values(C).forEach(e => e.cancel()), (C = {});
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              VOICE_CHANNEL_EFFECT_SEND: d,
              HIGH_FIVE_COMPLETE: U,
            });
        }
      }
      var h = new M();
    },
    858402: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          INTERACTION_IFRAME_MODAL_ANALYTICS_TYPE: function () {
            return I;
          },
          default: function () {
            return S;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("809810"),
        n = E("599110"),
        r = E("533686"),
        a = E("62355"),
        i = E("49111");
      let I = "interaction_iframe_modal";
      async function s(e) {
        let { openInteractionModal: _ } = await E.el("394816").then(
          E.bind(E, "394816")
        );
        _(e),
          n.default.track(i.AnalyticEvents.OPEN_MODAL, {
            type: "interaction_modal",
            application_id: e.application.id,
          });
      }
      class T extends t.default {
        constructor(...e) {
          super(...e),
            (this.iframeModalOpenTimeMs = void 0),
            (this.actions = {
              INTERACTION_MODAL_CREATE: e => {
                s(e);
              },
              INTERACTION_IFRAME_MODAL_CREATE: e => {
                var _;
                (this.iframeModalOpenTimeMs = Date.now()),
                  (_ = e),
                  (0, a.default)(_),
                  n.default.track(i.AnalyticEvents.OPEN_MODAL, {
                    type: I,
                    application_id: _.application.id,
                  });
              },
              INTERACTION_IFRAME_MODAL_CLOSE: e => {
                !(function (e, _) {
                  let E = null != _ ? Date.now() - _ : void 0;
                  n.default.track(i.AnalyticEvents.MODAL_DISMISSED, {
                    type: I,
                    application_id: e.applicationId,
                    duration_open_ms: E,
                  });
                })(e, this.iframeModalOpenTimeMs),
                  (this.iframeModalOpenTimeMs = void 0);
              },
              RPC_APP_DISCONNECTED: e => {
                !(function (e) {
                  let { application: _ } = e,
                    E = o.default.getIFrameModalApplicationId(),
                    t = o.default.getIFrameModalKey();
                  _.id === E && null != E && (0, r.default)(E, t);
                })(e);
              },
            });
        }
      }
      var S = new T();
    },
    533686: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return n;
          },
        });
      var t = E("77078"),
        o = E("913144");
      function n(e, _) {
        null != _ && (0, t.closeModal)(_),
          o.default.dispatch({
            type: "INTERACTION_IFRAME_MODAL_CLOSE",
            applicationId: e,
          });
      }
    },
    62355: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return i;
          },
        });
      var t = E("37983");
      E("884691");
      var o = E("77078"),
        n = E("913144"),
        r = E("42203"),
        a = E("988878");
      async function i(e) {
        let _ = r.default.getChannel(e.channelId),
          i = null == _ ? void 0 : _.guild_id;
        if ((0, a.default)(i)) {
          let _ = await (0, o.openModalLazy)(
            async () => {
              let { default: _ } = await E.el("168984").then(
                E.bind(E, "168984")
              );
              return E => (0, t.jsx)(_, { ...E, ...e });
            },
            {
              onCloseCallback: () => {
                n.default.dispatch({
                  type: "INTERACTION_IFRAME_MODAL_CLOSE",
                  applicationId: e.application.id,
                });
              },
            }
          );
          n.default.dispatch({
            type: "INTERACTION_IFRAME_MODAL_KEY_CREATE",
            modalKey: _,
          });
        }
      }
    },
    702917: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          populateChannelEmojis: function () {
            return a;
          },
        });
      var t = E("872717"),
        o = E("605250"),
        n = E("49111");
      let r = new o.default("ChannelEmojisActionCreators");
      async function a(e) {
        try {
          await t.default.post({ url: n.Endpoints.POPULATE_CHANNEL_EMOJIS(e) });
        } catch (e) {
          r.log("error populating channel emojis", e);
        }
      }
    },
    915633: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return I;
          },
        }),
        E("222007");
      var t = E("789394"),
        o = E("689988"),
        n = E("305961"),
        r = E("702917"),
        a = E("49111");
      class i extends o.default {
        handleChannelSelect(e) {
          let { guildId: _, channelId: E } = e;
          if (null != _ && null != E) {
            if (
              !t.ChannelEmojisExperiment.getCurrentConfig(
                { location: "8ce619_1" },
                { autoTrackExposure: !1 }
              ).enabled
            )
              return;
            let e = n.default.getGuild(_);
            null != e &&
              !e.hasFeature(a.GuildFeatures.CHANNEL_ICON_EMOJIS_GENERATED) &&
              (0, r.populateChannelEmojis)(_);
          }
        }
        constructor(...e) {
          super(...e),
            (this.actions = { CHANNEL_SELECT: this.handleChannelSelect });
        }
      }
      var I = new i();
    },
    104545: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return a;
          },
        }),
        E("222007");
      var t = E("862337"),
        o = E("913144"),
        n = E("689988");
      class r extends n.default {
        _terminate() {
          this.clearErrorTimeout.stop();
        }
        constructor(...e) {
          super(...e),
            (this.clearErrorTimeout = new t.Timeout()),
            (this.actions = {
              MEDIA_ENGINE_NOISE_CANCELLATION_ERROR: () =>
                this.handleNoiseCancellationError(),
            }),
            (this.handleNoiseCancellationError = () => {
              this.clearErrorTimeout.start(3e3, () =>
                o.default.dispatch({
                  type: "MEDIA_ENGINE_NOISE_CANCELLATION_ERROR_RESET",
                })
              );
            });
        }
      }
      var a = new r();
    },
    205277: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return i;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("718517"),
        n = E("931318"),
        r = E("979268");
      class a extends t.default {
        constructor(...e) {
          super(...e),
            (this.actions = {
              POST_CONNECTION_OPEN: () => this.handlePostConnectionOpen(),
            }),
            (this.handlePostConnectionOpen = () => {
              !(function e() {
                r.default.getCurrentConfig(
                  { location: "e391b1_1" },
                  { autoTrackExposure: !1 }
                ).showReminders &&
                  (0, n.fetchAndUpdateSavedMessages)().then(() =>
                    setTimeout(e, 15 * o.default.Millis.MINUTE)
                  );
              })();
            });
        }
      }
      var i = new a();
    },
    741887: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return S;
          },
        }),
        E("222007");
      var t = E("913144"),
        o = E("689988"),
        n = E("393414"),
        r = E("718517"),
        a = E("799895"),
        i = E("979268"),
        I = E("520899"),
        s = E("49111");
      class T extends o.default {
        constructor(...e) {
          super(...e),
            (this.actions = {
              POST_CONNECTION_OPEN: () => this.handlePostConnectionOpen(),
            }),
            (this.handlePostConnectionOpen = () => {
              !(function e() {
                i.default.getCurrentConfig(
                  { location: "8fe27d_1" },
                  { autoTrackExposure: !1 }
                ).showReminders &&
                  (I.default
                    .getMessageReminders()
                    .filter(e => null != e.dueAt && new Date() > e.dueAt)
                    .filter(e => !I.default.hasSentNotification(e.messageId))
                    .forEach(e => {
                      var _, E;
                      a.default.showNotification(
                        null,
                        "Overdue reminder in ".concat(e.channelSummary),
                        null !==
                          (E =
                            null !== (_ = e.notes) && void 0 !== _
                              ? _
                              : e.messageSummary) && void 0 !== E
                          ? E
                          : "",
                        {
                          notif_type: "OVERDUE_MESSAGE_REMINDER",
                          notif_user_id: e.authorId,
                          message_id: e.messageId,
                          channel_id: e.channelId,
                          guild_id: e.guildId,
                        },
                        {
                          omitViewTracking: !0,
                          tag: e.messageId,
                          onClick() {
                            (0, n.transitionTo)(
                              s.Routes.CHANNEL(
                                e.guildId,
                                e.channelId,
                                e.messageId
                              )
                            );
                          },
                        }
                      ),
                        t.default.dispatch({
                          type: "MESSAGE_REMINDER_NOTIFIED",
                          messageId: e.messageId,
                        });
                    }),
                  setTimeout(() => {
                    e();
                  }, 5 * r.default.Millis.MINUTE));
              })();
            });
        }
      }
      var S = new T();
    },
    643857: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return I;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("537325"),
        n = E("894887"),
        r = E("760797"),
        a = E("49111");
      class i extends t.default {
        async handleChannelCreate(e) {
          let { channel: _ } = e;
          (0, n.isEligibleForMidjourneyRedirect)(_) &&
            (await (0, n.hasRedirectedToGuild)(r.MIDJOURNEY_GUILD_ID),
            (0, o.default)(a.Routes.CHANNEL(null, _.id)));
        }
        constructor(...e) {
          super(...e),
            (this.actions = { CHANNEL_CREATE: this.handleChannelCreate });
        }
      }
      var I = new i();
    },
    583374: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          MAX_ACCOUNTS: function () {
            return t;
          },
          SWITCH_ACCOUNTS_MODAL_KEY: function () {
            return o;
          },
          MULTIACCOUNT_TOOLTIP_SEEN_KEY: function () {
            return n;
          },
        });
      let t = 5,
        o = "switch-accounts-modal",
        n = "multiaccount_cta_tooltip_seen";
    },
    131010: function (e, _, E) {
      "use strict";
      let t, o;
      E.r(_),
        E.d(_, {
          default: function () {
            return n;
          },
        });
      var n,
        r = E("171718"),
        a = E("913144"),
        i = E("689988"),
        I = E("697218"),
        s = E("599110"),
        T = E("770032"),
        S = E("49111");
      n = class extends i.default {
        _initialize() {
          a.default.subscribe("CONNECTION_OPEN", () =>
            this.handleConnectionOpen()
          ),
            this.handleConnectionOpen();
        }
        _terminate() {
          a.default.unsubscribe("CONNECTION_OPEN", () =>
            this.handleConnectionOpen()
          );
        }
        constructor({
          onSwitchStart: e,
          onSwitchSuccess: _,
          onSwitchError: E,
          onTokenSet: n,
        }) {
          super(),
            (this.actions = { LOGOUT: e => this.handleLogout(e) }),
            (this.handleConnectionOpen = () => {
              var e, _, E;
              let n = I.default.getCurrentUser();
              if (null == n) return;
              if (null != o) {
                if (o !== t) {
                  let e = T.default.getUsers(),
                    E = e.map(e => {
                      let { id: _ } = e;
                      return _;
                    });
                  s.default.track(
                    S.AnalyticEvents.MULTI_ACCOUNT_SWITCH_SUCCESS,
                    { from_user_id: o, linked_user_ids: E }
                  ),
                    null === (_ = this.onSwitchSuccess) ||
                      void 0 === _ ||
                      _.call(this, n);
                } else
                  s.default.track(
                    S.AnalyticEvents.MULTI_ACCOUNT_SWITCH_FAILURE
                  ),
                    null === (E = this.onSwitchError) ||
                      void 0 === E ||
                      E.call(this, n);
                o = null;
              }
              t = n.id;
              let a = r.default.getToken();
              null != a && "" !== a && r.default.setToken(a, n.id),
                null === (e = this.onTokenSet) ||
                  void 0 === e ||
                  e.call(this, n);
            }),
            (this.handleLogout = e => {
              if (e.isSwitchingAccount) {
                var _;
                (o = t),
                  null === (_ = this.onSwitchStart) ||
                    void 0 === _ ||
                    _.call(this);
              } else r.default.removeToken(t);
              t = null;
            }),
            (this.onSwitchStart = e),
            (this.onSwitchSuccess = _),
            (this.onSwitchError = E),
            (this.onTokenSet = n);
        }
      };
    },
    995802: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          MultiAccountMobileNotificationsExperiment: function () {
            return o;
          },
        });
      var t = E("862205");
      (0, t.createExperiment)({
        kind: "user",
        id: "2022-09_mobile_account_switcher",
        label: "Mobile Account Switcher",
        defaultConfig: {
          isMultiAccountMobileEnabled: !1,
          clearCanUseMultiAccountMobile: !1,
        },
        treatments: [
          {
            id: 1,
            label: "Enable Account Switcher on Mobile",
            config: {
              isMultiAccountMobileEnabled: !0,
              clearCanUseMultiAccountMobile: !1,
            },
          },
          {
            id: 2,
            label: "Unenroll Account Switcher on Mobile and Clear Local Flag",
            config: {
              isMultiAccountMobileEnabled: !1,
              clearCanUseMultiAccountMobile: !0,
            },
          },
        ],
      });
      let o = (0, t.createExperiment)({
        kind: "user",
        id: "2022-11_mobile_account_switcher_notifications",
        label: "Mobile Account Switcher: Notifications",
        defaultConfig: { isMultiAccountMobileNotificationsEnabled: !1 },
        treatments: [
          {
            id: 1,
            label: "Enable notifications for multiple accounts",
            config: { isMultiAccountMobileNotificationsEnabled: !0 },
          },
        ],
      });
    },
    770032: function (e, _, E) {
      "use strict";
      let t, o;
      E.r(_),
        E.d(_, {
          MultiAccountTokenStatus: function () {
            return n;
          },
          default: function () {
            return L;
          },
        }),
        E("424973");
      var n,
        r,
        a = E("171718"),
        i = E("446674"),
        I = E("913144"),
        s = E("746574"),
        T = E("995802"),
        S = E("583374");
      ((r = n || (n = {}))[(r.INVALID = 0)] = "INVALID"),
        (r[(r.VALIDATING = 1)] = "VALIDATING"),
        (r[(r.VALID = 2)] = "VALID");
      let N = [],
        O = !1;
      function A(e) {
        (N = N.filter(_ => {
          let { id: E } = _;
          return E !== e;
        })),
          a.default.removeToken(e);
      }
      function R(e, _) {
        let E = N.slice(),
          t = E.find(_ => {
            let { id: E } = _;
            return E === e;
          });
        null != t && ((t.tokenStatus = _), (N = E));
      }
      class l extends i.default.PersistedStore {
        initialize(e) {
          if (null != e) {
            var _;
            (N = null !== (_ = e.users) && void 0 !== _ ? _ : []),
              (o = e.canUseMultiAccountMobile);
          }
        }
        getCanUseMultiAccountMobile() {
          return o;
        }
        getState() {
          return { users: N, canUseMultiAccountMobile: o };
        }
        getUsers() {
          return N;
        }
        getValidUsers() {
          return N.filter(e => {
            let { tokenStatus: _ } = e;
            return 0 !== _;
          });
        }
        getHasLoggedInAccounts() {
          return N.length > 0;
        }
        getIsValidatingUsers() {
          return N.some(e => {
            let { tokenStatus: _ } = e;
            return 1 === _;
          });
        }
        get canUseMultiAccountNotifications() {
          return (
            this.getCanUseMultiAccountMobile() &&
            T.MultiAccountMobileNotificationsExperiment.getCurrentConfig(
              { location: "09e468_1" },
              { autoTrackExposure: !1 }
            ).isMultiAccountMobileNotificationsEnabled
          );
        }
        get isSwitchingAccount() {
          return O;
        }
      }
      (l.displayName = "MultiAccountStore"),
        (l.persistKey = "MultiAccountStore"),
        (l.migrations = [
          e => {
            if (null != e) {
              var _;
              return {
                users: null !== (_ = e.users) && void 0 !== _ ? _ : [],
                canUseMultiAccountMobile: !1,
              };
            }
            return { users: [], canUseMultiAccountMobile: !1 };
          },
        ]);
      var L = new l(I.default, {
        CONNECTION_OPEN: function (e) {
          let { user: _ } = e;
          (t = _.id), (O = !1);
          let E = N.slice(),
            o = E.findIndex(e => {
              let { id: E } = e;
              return E === _.id;
            });
          if (
            (o > -1
              ? ((N[o].avatar = _.avatar),
                (N[o].username = _.username),
                (N[o].discriminator = _.discriminator),
                (N[o].tokenStatus = 2))
              : E.push({
                  id: _.id,
                  avatar: _.avatar,
                  username: _.username,
                  discriminator: _.discriminator,
                  tokenStatus: 2,
                  pushSyncToken: null,
                }),
            (N = E).length > S.MAX_ACCOUNTS)
          ) {
            let e = N.splice(S.MAX_ACCOUNTS);
            e.forEach(e => {
              let { id: _ } = e;
              A(_);
            });
          }
        },
        LOGOUT: function (e) {
          (O = !!e.isSwitchingAccount),
            !e.isSwitchingAccount &&
              (N = N.filter(e => {
                let { id: _ } = e;
                return _ !== t;
              })),
            (t = null);
        },
        MULTI_ACCOUNT_VALIDATE_TOKEN_REQUEST: e => R(e.userId, 1),
        MULTI_ACCOUNT_VALIDATE_TOKEN_SUCCESS: e => R(e.userId, 2),
        MULTI_ACCOUNT_VALIDATE_TOKEN_FAILURE: e => R(e.userId, 0),
        MULTI_ACCOUNT_REMOVE_ACCOUNT: e => A(e.userId),
        MULTI_ACCOUNT_MOVE_ACCOUNT: function (e) {
          let { from: _, to: E } = e;
          N = (0, s.moveItemFromTo)(N, _, E);
        },
        CURRENT_USER_UPDATE: function (e) {
          let { user: _ } = e,
            E = N.slice(),
            t = E.find(e => {
              let { id: E } = e;
              return E === _.id;
            });
          null != t &&
            ((t.avatar = _.avatar),
            (t.username = _.username),
            (t.discriminator = _.discriminator),
            (N = E));
        },
        MULTI_ACCOUNT_MOBILE_EXPERIMENT_UPDATE: function (e) {
          let { multiAccountMobileExperimentEnabled: _ } = e;
          o = _;
        },
        MULTI_ACCOUNT_UPDATE_PUSH_SYNC_TOKEN: function (e) {
          let { userId: _, pushSyncToken: E } = e;
          N = N.map(e => (e.id === _ ? { ...e, pushSyncToken: E } : e));
        },
        MULTI_ACCOUNT_INVALIDATE_PUSH_SYNC_TOKENS: function (e) {
          let { invalidPushSyncTokens: _ } = e;
          N = N.map(e =>
            null != e.pushSyncToken && _.includes(e.pushSyncToken)
              ? { ...e, pushSyncToken: null }
              : e
          );
        },
      });
    },
    390680: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return i;
          },
        });
      var t = E("77078"),
        o = E("229353"),
        n = E("131010"),
        r = E("583374"),
        a = E("782340"),
        i = new n.default({
          onSwitchSuccess(e) {
            setTimeout(() => {
              (0, t.showToast)(
                (0, t.createToast)(
                  a.default.Messages.SWITCH_ACCOUNTS_TOAST_LOGIN_SUCCESS.format(
                    { username: e.username }
                  ),
                  t.ToastType.SUCCESS
                )
              );
            }, 100);
          },
          onSwitchError() {
            (0, t.showToast)(
              (0, t.createToast)(
                o.SWITCH_ACCOUNTS_TOAST_LOGIN_ERROR,
                t.ToastType.FAILURE
              )
            );
          },
          onTokenSet() {
            (0, t.closeModal)(r.SWITCH_ACCOUNTS_MODAL_KEY);
          },
        });
    },
    447868: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return I;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("49671"),
        n = E("102985");
      let r = !1;
      function a() {
        var e;
        let _ =
          null === o.default || void 0 === o.default
            ? void 0
            : null === (e = o.default.window) || void 0 === e
              ? void 0
              : e.setContentProtection;
        if (null == _) return;
        let E = n.default.enableContentProtection;
        E !== r && (_(E), (r = E));
      }
      class i extends t.default {
        constructor() {
          a(), super(), (this.stores = new Map().set(n.default, a));
        }
      }
      var I = new i();
    },
    234819: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return S;
          },
        }),
        E("222007"),
        E("424973");
      var t = E("37983");
      E("884691");
      var o = E("446674"),
        n = E("77078"),
        r = E("313915"),
        a = E("603699"),
        i = E("697218"),
        I = E("983782"),
        s = E("843455"),
        T = E("232425");
      function S() {
        var e;
        let _ = (0, o.useStateFromStores)(
            [r.default],
            () => r.default.isIdleStatusIndicatorEnabled
          ),
          E = (0, o.useStateFromStores)([i.default], () => {
            var e, _;
            return (
              null !==
                (_ =
                  null === (e = i.default.getCurrentUser()) || void 0 === e
                    ? void 0
                    : e.isStaff()) &&
              void 0 !== _ &&
              _
            );
          }),
          [S, N] = (0, o.useStateFromStoresArray)([a.default], () => [
            a.default.isIdle(),
            a.default.isAFK(),
          ]),
          O = [];
        return (
          !S && !N && O.push("ACTIVE"),
          S && O.push("IDLE"),
          N && O.push("AFK"),
          E && _
            ? (0, t.jsx)(I.default, {
                children: (0, t.jsxs)("div", {
                  className: T.container,
                  children: [
                    (0, t.jsxs)("div", {
                      className: T.status,
                      children: [
                        (0, t.jsx)(n.Status, {
                          status: O.includes("ACTIVE")
                            ? s.StatusTypes.ONLINE
                            : s.StatusTypes.IDLE,
                          className: T.statusIndicator,
                        }),
                        (0, t.jsx)(n.Text, {
                          variant: "text-md/normal",
                          children: "IDLE STATUS:",
                        }),
                        (0, t.jsx)("div", {
                          className: T.statusText,
                          children: (0, t.jsx)(n.Text, {
                            variant: "text-md/bold",
                            children: O.join(" + "),
                          }),
                        }),
                      ],
                    }),
                    S &&
                      (0, t.jsxs)(n.Text, {
                        variant: "text-md/normal",
                        children: [
                          "Idle since:",
                          " ",
                          new Date(
                            null !== (e = a.default.getIdleSince()) &&
                            void 0 !== e
                              ? e
                              : 0
                          ).toLocaleDateString(void 0, {
                            year: "numeric",
                            day: "numeric",
                            month: "numeric",
                            hour: "numeric",
                            minute: "numeric",
                            second: "numeric",
                          }),
                        ],
                      }),
                  ],
                }),
              })
            : null
        );
      }
    },
    485627: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return N;
          },
        }),
        E("222007");
      var t = E("95410"),
        o = E("689988"),
        n = E("697218"),
        r = E("553257"),
        a = E("363613"),
        i = E("42060"),
        I = E("275803"),
        s = E("935583");
      let T = "lastSawPomelo";
      class S extends o.default {
        constructor(...e) {
          super(...e),
            (this.actions = {
              POST_CONNECTION_OPEN: () => this.onPostConnectionOpen(),
            }),
            (this.onPostConnectionOpen = () => {
              if (
                (function () {
                  let e = r.experiment.getCurrentConfig(
                    { location: "b9eb97_1" },
                    { autoTrackExposure: !1 }
                  ).enabled;
                  if (!e) return !1;
                  let _ = n.default.getCurrentUser();
                  if (null == _ || _.isPomelo() || !_.hasVerifiedEmailOrPhone())
                    return !1;
                  let E = (0, i.getForceMigration)(),
                    o = t.default.get(E ? "lastSawPomeloMigration" : T);
                  return !(null != o && Date.now() - o < 6048e5) && !0;
                })()
              ) {
                let e = I.UUOneClickExperiment.getCurrentConfig(
                    { location: "uu_one_click" },
                    { autoTrackExposure: !1 }
                  ).enabled,
                  _ = (0, a.openPomeloModal)(
                    s.PomeloEntrypoints.APP_START,
                    e,
                    !1
                  );
                _ && t.default.set(T, Date.now());
              }
            });
        }
      }
      var N = new S();
    },
    363613: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          openPomeloModal: function () {
            return n;
          },
        });
      var t = E("77078"),
        o = E("363861");
      function n(e) {
        let _ = arguments.length > 1 && void 0 !== arguments[1] && arguments[1],
          E =
            !(arguments.length > 2) || void 0 === arguments[2] || arguments[2];
        return !(!E && (0, t.hasAnyModalOpen)()) && ((0, o.default)(e, _), !0);
      }
    },
    275803: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          UUOneClickExperiment: function () {
            return o;
          },
        });
      var t = E("862205");
      let o = (0, t.createExperiment)({
        kind: "user",
        id: "2023-11_uu_one_click",
        label: "Unique Username one click",
        defaultConfig: { enabled: !1 },
        treatments: [
          { id: 1, label: "Enable one click", config: { enabled: !0 } },
        ],
      });
    },
    53808: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return a;
          },
        }),
        E("222007");
      var t = E("850068"),
        o = E("689988"),
        n = E("843663");
      class r extends o.default {
        constructor(...e) {
          super(...e),
            (this.actions = {
              POST_CONNECTION_OPEN: () => {
                let { enabled: e } =
                  n.LocalizedPricingPromoManagerExperiment.getCurrentConfig(
                    { location: "cd74f0_1" },
                    { autoTrackExposure: !1 }
                  );
                e && (0, t.fetchLocalizedPromo)();
              },
            });
        }
      }
      var a = new r();
    },
    606162: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return O;
          },
        }),
        E("222007");
      var t = E("850068"),
        o = E("316718"),
        n = E("689988"),
        r = E("697218"),
        a = E("160299"),
        i = E("521012"),
        I = E("437712"),
        s = E("568734"),
        T = E("719923"),
        S = E("646718");
      class N extends n.default {
        constructor(...e) {
          super(...e),
            (this.actions = {
              POST_CONNECTION_OPEN: () => {
                this.maybeFetchSubscriptions(),
                  this.maybeFetchCountryCode(),
                  this.maybeFetchMostRecentSubscription();
              },
            }),
            (this.maybeFetchSubscriptions = async () => {
              let e = r.default.getCurrentUser();
              if (T.default.isPremium(e)) {
                !i.default.hasFetchedSubscriptions() &&
                  (await (0, t.fetchSubscriptions)());
                let e = i.default.getPremiumSubscription();
                (null == e ? void 0 : e.paymentSourceId) == null &&
                  !I.default.applicationIdsFetched.has(
                    S.PREMIUM_SUBSCRIPTION_APPLICATION
                  ) &&
                  (await (0, o.fetchUserEntitlementsForApplication)(
                    S.PREMIUM_SUBSCRIPTION_APPLICATION
                  ));
              }
            }),
            (this.maybeFetchMostRecentSubscription = () => {
              let e = r.default.getCurrentUser();
              null != e &&
                !T.default.isPremium(e) &&
                null != e.purchasedFlags &&
                ((0, s.hasFlag)(
                  e.purchasedFlags,
                  S.PurchasedFlags.PREMIUM_TIER_1
                ) ||
                  (0, s.hasFlag)(
                    e.purchasedFlags,
                    S.PurchasedFlags.PREMIUM_TIER_2
                  )) &&
                (0, t.fetchMostRecentSubscription)();
            }),
            (this.maybeFetchCountryCode = async () => {
              let e = r.default.getCurrentUser();
              T.default.isPremium(e) &&
                !a.default.ipCountryCodeLoaded &&
                (await this.fetchCountryCode());
            }),
            (this.fetchCountryCode = async () => {
              await (0, t.fetchIpCountryCode)();
              let e = a.default.ipCountryCode;
              null != e && (await (0, t.fetchPaymentSources)());
            });
        }
      }
      var O = new N();
    },
    182033: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return n;
          },
        });
      var t = E("862205");
      let o = (0, t.createExperiment)({
        kind: "user",
        id: "2023-09_client_theme_coachmark_reintro",
        label: "Experiment to reintroduce the client themes experiment",
        defaultConfig: { enabled: !1 },
        treatments: [
          { id: 1, label: "enable the coachmark", config: { enabled: !0 } },
        ],
      });
      var n = o;
    },
    843663: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          LocalizedPricingPromoManagerExperiment: function () {
            return o;
          },
        });
      var t = E("862205");
      let o = (0, t.createExperiment)({
        kind: "user",
        id: "2022-12_localized_pricing_promo_manager",
        label: "Localized Pricing Promo Manager",
        defaultConfig: { enabled: !1 },
        treatments: [
          {
            id: 1,
            label: "Enable Localized Pricing Promo Manager",
            config: { enabled: !0 },
          },
        ],
      });
    },
    922030: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return I;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("697218"),
        n = E("719923"),
        r = E("538620"),
        a = E("646718");
      class i extends t.default {
        onPostConnectionOpen() {
          this.maybeFetchActiveOutboundPromotions();
        }
        maybeFetchActiveOutboundPromotions() {
          let e = o.default.getCurrentUser();
          null != e &&
            n.default.isPremiumExactly(e, a.PremiumTypes.TIER_2) &&
            (0, r.fetchActiveOutboundPromotions)();
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              POST_CONNECTION_OPEN: this.onPostConnectionOpen.bind(this),
            });
        }
      }
      var I = new i();
    },
    583340: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          isBlockedByProxyErrorCode: function () {
            return o;
          },
        });
      var t = E("49111");
      function o(e) {
        var _;
        return (
          !e.ok &&
          (null === (_ = e.body) || void 0 === _ ? void 0 : _.code) ===
            t.AbortCodes.BLOCKED_BY_PROXY
        );
      }
    },
    448881: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          fetchCurrentQuests: function () {
            return I;
          },
          sendHeartbeat: function () {
            return s;
          },
          enrollInQuest: function () {
            return T;
          },
          claimQuestRewardCode: function () {
            return S;
          },
          fetchQuestRewardCode: function () {
            return N;
          },
        });
      var t = E("872717"),
        o = E("913144"),
        n = E("599417"),
        r = E("2973"),
        a = E("227231"),
        i = E("49111");
      async function I() {
        o.default.dispatch({ type: "QUESTS_FETCH_CURRENT_QUESTS_BEGIN" });
        try {
          let e = await t.default.get({
              url: i.Endpoints.QUESTS_CURRENT_QUESTS,
            }),
            _ = e.body.quests.map(e => (0, a.questWithUserStatusFromServer)(e)),
            E = _.filter(e => {
              var _;
              return (
                (null === (_ = e.userStatus) || void 0 === _
                  ? void 0
                  : _.claimedAt) != null ||
                e.config.rewardCodePlatforms.length > 0
              );
            });
          o.default.dispatch({
            type: "QUESTS_FETCH_CURRENT_QUESTS_SUCCESS",
            quests: E,
          });
        } catch (e) {
          o.default.dispatch({
            type: "QUESTS_FETCH_CURRENT_QUESTS_FAILURE",
            error: new n.default(e),
          });
        }
      }
      async function s(e) {
        let { questId: _, streamKey: E, applicationId: r } = e;
        try {
          let e = await t.default.post({
            url: i.Endpoints.QUESTS_HEARTBEAT(_),
            body: { stream_key: E, application_id: r },
          });
          o.default.dispatch({
            type: "QUESTS_SEND_HEARTBEAT_SUCCESS",
            userStatus: (0, a.questUserStatusFromServer)(e.body),
            applicationId: r,
            questId: _,
            streamKey: E,
          });
        } catch (e) {
          o.default.dispatch({
            type: "QUESTS_SEND_HEARTBEAT_FAILURE",
            error: new n.default(e),
            questId: _,
            streamKey: E,
          });
        }
      }
      async function T(e) {
        let _ = r.default.isEnrolling(e);
        if (!_) {
          o.default.dispatch({ type: "QUESTS_ENROLL_BEGIN", questId: e });
          try {
            let _ = await t.default.post({ url: i.Endpoints.QUESTS_ENROLL(e) });
            o.default.dispatch({
              type: "QUESTS_ENROLL_SUCCESS",
              enrolledQuestUserStatus: (0, a.questUserStatusFromServer)(_.body),
            });
          } catch (_) {
            o.default.dispatch({ type: "QUESTS_ENROLL_FAILURE", questId: e });
          }
        }
      }
      async function S(e, _) {
        let E = r.default.isClaimingRewardCode(e);
        if (!E) {
          o.default.dispatch({
            type: "QUESTS_CLAIM_REWARD_CODE_BEGIN",
            questId: e,
          });
          try {
            let E = await t.default.post({
              url: i.Endpoints.QUESTS_REWARD_CODE(e),
              body: { platform: _ },
            });
            o.default.dispatch({
              type: "QUESTS_CLAIM_REWARD_CODE_SUCCESS",
              questId: e,
              rewardCode: (0, a.questsRewardCodeFromServer)(E.body),
            });
          } catch (_) {
            throw (
              (o.default.dispatch({
                type: "QUESTS_CLAIM_REWARD_CODE_FAILURE",
                error: new n.default(_),
                questId: e,
              }),
              _)
            );
          }
        }
      }
      async function N(e) {
        let _ = r.default.isFetchingRewardCode(e);
        if (!_) {
          o.default.dispatch({
            type: "QUESTS_FETCH_REWARD_CODE_BEGIN",
            questId: e,
          });
          try {
            let _ = await t.default.get({
              url: i.Endpoints.QUESTS_REWARD_CODE(e),
            });
            o.default.dispatch({
              type: "QUESTS_FETCH_REWARD_CODE_SUCCESS",
              questId: e,
              rewardCode: (0, a.questsRewardCodeFromServer)(_.body),
            });
          } catch (_) {
            throw (
              (o.default.dispatch({
                type: "QUESTS_FETCH_REWARD_CODE_FAILURE",
                error: new n.default(_),
                questId: e,
              }),
              _)
            );
          }
        }
      }
    },
    166604: function (e, _, E) {
      "use strict";
      var t, o;
      E.r(_),
        E.d(_, {
          QuestsExperimentLocations: function () {
            return t;
          },
        }),
        ((o = t || (t = {})).ACTIVITY_PANEL = "quests_bar_activity_panel"),
        (o.QUESTS_MANAGER = "quests_manager"),
        (o.USER_SETTINGS_GIFT_INVENTORY = "user_settings_gift_inventory");
    },
    374023: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          getIsEligibleForQuests: function () {
            return r;
          },
          useIsEligibleForQuests: function () {
            return a;
          },
        });
      var t = E("619935"),
        o = E("862205");
      let n = (0, o.createExperiment)({
          id: "2023-12_quests",
          kind: "user",
          label: "Quests",
          defaultConfig: { enabled: !1 },
          treatments: [
            { id: 0, label: "Control", config: { enabled: !1 } },
            { id: 1, label: "Quests enabled", config: { enabled: !0 } },
          ],
        }),
        r = e => {
          let { location: _, autoTrackExposure: E } = e,
            o = n.getCurrentConfig({ location: _ }, { autoTrackExposure: E }),
            r = t.default.getCurrentConfig(
              { location: _ },
              { autoTrackExposure: E }
            );
          return o.enabled && !r.paymentsBlocked;
        },
        a = e => {
          let { location: _, autoTrackExposure: E } = e,
            o = n.useExperiment({ location: _ }, { autoTrackExposure: E }),
            r = t.default.useExperiment(
              { location: _ },
              { autoTrackExposure: E }
            );
          return o.enabled && !r.paymentsBlocked;
        };
    },
    2973: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return R;
          },
        }),
        E("222007");
      var t = E("446674"),
        o = E("913144");
      let n = !1,
        r = new Map(),
        a = 0,
        i = new Set(),
        I = new Set(),
        s = new Set(),
        T = new Map();
      function S(e, _) {
        r = new Map(r);
        let E = r.get(e);
        null != E && r.set(e, { ...E, ..._ });
      }
      function N(e, _) {
        let E = new Map(T);
        E.set(e, _), (T = E);
        let t = r.get(e),
          o = null == t ? void 0 : t.userStatus;
        if (null != o && null == o.claimedAt) {
          let E = { userStatus: { ...o, claimedAt: _.claimedAt } };
          S(e, E);
        }
      }
      function O(e) {
        let _ = new Set(i);
        _.delete(e), (i = _);
      }
      class A extends t.default.Store {
        get quests() {
          return r;
        }
        get isFetchingCurrentQuests() {
          return n;
        }
        get lastFetchedCurrentQuests() {
          return a;
        }
        isEnrolling(e) {
          return i.has(e);
        }
        isClaimingRewardCode(e) {
          return I.has(e);
        }
        isFetchingRewardCode(e) {
          return s.has(e);
        }
        getRewardCode(e) {
          return T.get(e);
        }
      }
      A.displayName = "QuestsStore";
      var R = new A(o.default, {
        LOGOUT: function () {
          (n = !1), (r = new Map()), (a = 0), (i = new Set());
        },
        QUESTS_FETCH_CURRENT_QUESTS_BEGIN: function () {
          (a = Date.now()), (n = !0);
        },
        QUESTS_FETCH_CURRENT_QUESTS_SUCCESS: function (e) {
          let { quests: _ } = e;
          for (let e of ((n = !1), (r = new Map()), _)) r.set(e.id, e);
        },
        QUESTS_FETCH_CURRENT_QUESTS_FAILURE: function () {
          (a = 0), (n = !1);
        },
        QUESTS_SEND_HEARTBEAT_SUCCESS: function (e) {
          let { questId: _, userStatus: E } = e;
          S(_, { userStatus: E });
        },
        QUESTS_ENROLL_BEGIN: function (e) {
          let { questId: _ } = e,
            E = new Set(i);
          E.add(_), (i = E);
        },
        QUESTS_ENROLL_SUCCESS: function (e) {
          let { enrolledQuestUserStatus: _ } = e;
          S(_.questId, { userStatus: _ }), O(_.questId);
        },
        QUESTS_ENROLL_FAILURE: function (e) {
          let { questId: _ } = e;
          O(_);
        },
        QUESTS_FETCH_REWARD_CODE_BEGIN: function (e) {
          let { questId: _ } = e,
            E = new Set(s);
          E.add(_), (s = E);
        },
        QUESTS_FETCH_REWARD_CODE_SUCCESS: function (e) {
          let { questId: _, rewardCode: E } = e,
            t = new Set(s);
          t.delete(_), (s = t), N(_, E);
        },
        QUESTS_FETCH_REWARD_CODE_FAILURE: function (e) {
          let { questId: _ } = e,
            E = new Set(s);
          E.delete(_), (s = E);
        },
        QUESTS_CLAIM_REWARD_CODE_BEGIN: function (e) {
          let { questId: _ } = e,
            E = new Set(I);
          E.add(_), (I = E);
        },
        QUESTS_CLAIM_REWARD_CODE_SUCCESS: function (e) {
          let { questId: _, rewardCode: E } = e,
            t = new Set(I);
          t.delete(_), (I = t), N(_, E);
        },
        QUESTS_CLAIM_REWARD_CODE_FAILURE: function (e) {
          let { questId: _ } = e,
            E = new Set(I);
          E.delete(_), (I = E);
        },
      });
    },
    588025: function (e, _, E) {
      "use strict";
      var t, o, n, r;
      E.r(_),
        E.d(_, {
          QuestRewardCodePlatforms: function () {
            return t;
          },
          QUEST_REWARD_CODE_PLATFORMS_SET: function () {
            return a;
          },
          QuestContent: function () {
            return o;
          },
        }),
        E("222007"),
        ((n = t || (t = {}))[(n.CROSS_PLATFORM = 0)] = "CROSS_PLATFORM"),
        (n[(n.XBOX = 1)] = "XBOX"),
        (n[(n.PLAYSTATION = 2)] = "PLAYSTATION"),
        (n[(n.SWITCH = 3)] = "SWITCH"),
        (n[(n.PC = 4)] = "PC");
      let a = new Set(Object.values(t).filter(e => "number" == typeof e));
      ((r = o || (o = {}))[(r.GIFT_INVENTORY_SETTINGS_BADGE = 0)] =
        "GIFT_INVENTORY_SETTINGS_BADGE"),
        (r[(r.QUEST_BAR = 1)] = "QUEST_BAR");
    },
    227231: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          getQuestByApplicationId: function () {
            return r;
          },
          questUserStatusFromServer: function () {
            return i;
          },
          questWithUserStatusFromServer: function () {
            return I;
          },
          questsRewardCodeFromServer: function () {
            return s;
          },
          getRewardAssetUrl: function () {
            return T;
          },
          getHeroAssetUrl: function () {
            return S;
          },
          getQuestBarHeroAssetUrl: function () {
            return N;
          },
          getGameTileAssetUrl: function () {
            return O;
          },
          getGameLogotypeAssetUrl: function () {
            return A;
          },
          getQuestForTargetedContent: function () {
            return R;
          },
          getPlatformString: function () {
            return l;
          },
          calculatePercentComplete: function () {
            return L;
          },
        }),
        E("222007");
      var t = E("588025"),
        o = E("782340");
      let n = "https://cdn.discordapp.com/assets/quests/";
      function r(e, _) {
        let E;
        for (let [t, o] of e)
          if (o.config.applicationId === _ && !a(o)) {
            E = o;
            break;
          }
        return E;
      }
      function a(e) {
        let _ = new Date(e.config.expiresAt);
        return _.valueOf() <= Date.now();
      }
      function i(e) {
        return {
          userId: e.user_id,
          questId: e.quest_id,
          enrolledAt: e.enrolled_at,
          completedAt: e.completed_at,
          claimedAt: e.claimed_at,
          lastStreamHeartbeatAt: e.last_stream_heartbeat_at,
          streamProgressSeconds: e.stream_progress_seconds,
          dismissedQuestContent: e.dismissed_quest_content,
        };
      }
      function I(e) {
        var _, E, o;
        return {
          id: e.id,
          config: {
            expiresAt: (_ = e.config).expires_at,
            streamDurationRequirementMinutes:
              _.stream_duration_requirement_minutes,
            gameTitle: _.game_title,
            applicationId: _.application_id,
            messages: {
              questName: (E = _.messages).quest_name,
              rewardName: E.reward_name,
              rewardNameWithArticle: E.reward_name_with_article,
              rewardRedemptionInstructionsByPlatform: (function (e) {
                let _ = {};
                for (let E in e) {
                  let o = parseInt(E);
                  t.QUEST_REWARD_CODE_PLATFORMS_SET.has(o) && (_[o] = e[E]);
                }
                return _;
              })(E.reward_redemption_instructions_by_platform),
              gameTitle: E.game_title,
              gamePublisher: E.game_publisher,
            },
            colors: { primary: (o = _.colors).primary, secondary: o.secondary },
            rewardCodePlatforms: _.reward_code_platforms.filter(e =>
              t.QUEST_REWARD_CODE_PLATFORMS_SET.has(e)
            ),
          },
          userStatus: null == e.user_status ? null : i(e.user_status),
          targetedContent: e.targeted_content,
        };
      }
      function s(e) {
        return {
          userId: e.user_id,
          questId: e.quest_id,
          code: e.code,
          platform: e.platform,
          claimedAt: e.claimed_at,
        };
      }
      let T = e => "".concat(n).concat(e).concat("/reward.png"),
        S = e => "".concat(n).concat(e).concat("/hero.png"),
        N = e => "".concat(n).concat(e).concat("/quest_bar_hero.gif"),
        O = e => "".concat(n).concat(e).concat("/game_tile.png"),
        A = (e, _) =>
          "".concat(n).concat(e, "/").concat(_).concat("/game_logotype.png");
      function R(e, _) {
        for (let [E, t] of e)
          if (!a(t) && t.targetedContent.includes(_)) return t;
        return null;
      }
      let l = e => {
        switch (e) {
          case t.QuestRewardCodePlatforms.XBOX:
            return o.default.Messages.QUESTS_REWARD_CODE_PLATFORM_XBOX;
          case t.QuestRewardCodePlatforms.PLAYSTATION:
            return o.default.Messages.QUESTS_REWARD_CODE_PLATFORM_PLAYSTATION;
          case t.QuestRewardCodePlatforms.SWITCH:
            return o.default.Messages.QUESTS_REWARD_CODE_PLATFORM_SWITCH;
          case t.QuestRewardCodePlatforms.PC:
            return o.default.Messages.QUESTS_REWARD_CODE_PLATFORM_PC;
          case t.QuestRewardCodePlatforms.CROSS_PLATFORM:
            return o.default.Messages
              .QUESTS_REWARD_CODE_PLATFORM_CROSS_PLATFORM;
        }
      };
      function L(e) {
        if (null == e.userStatus) return 0;
        let { streamProgressSeconds: _, completedAt: E } = e.userStatus;
        if (null != E) return 1;
        let { streamDurationRequirementMinutes: t } = e.config;
        return Math.min(_ / 60 / t, 1);
      }
    },
    319405: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return L;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("374014"),
        n = E("373469"),
        r = E("271938"),
        a = E("568307"),
        i = E("718517"),
        I = E("448881"),
        s = E("374023"),
        T = E("2973"),
        S = E("227231"),
        N = E("166604");
      let O = 5 * i.default.Millis.SECOND,
        A = 12 * i.default.Millis.HOUR,
        R = 1 * i.default.Millis.MINUTE;
      class l extends t.default {
        maybeFetchCurrentQuests() {
          (0, s.getIsEligibleForQuests)({
            location: N.QuestsExperimentLocations.QUESTS_MANAGER,
            autoTrackExposure: !1,
          }) &&
            !T.default.isFetchingCurrentQuests &&
            (0, I.fetchCurrentQuests)();
        }
        constructor(...e) {
          super(...e),
            (this.instantiatedAt = Date.now()),
            (this.sendHeartbeatIntervalIds = new Map()),
            (this.initiateHeartbeat = e => {
              let { questId: _, streamKey: E, applicationId: t } = e;
              function o() {
                null != n.default.getRTCStream(E) &&
                  0 !== n.default.getViewerIds(E).length &&
                  (0, I.sendHeartbeat)({
                    questId: _,
                    streamKey: E,
                    applicationId: t,
                  });
              }
              window.clearInterval(this.sendHeartbeatIntervalIds.get(E)),
                o(),
                this.sendHeartbeatIntervalIds.set(E, window.setInterval(o, R));
            }),
            (this.terminateHeartbeat = e => {
              window.clearInterval(this.sendHeartbeatIntervalIds.get(e)),
                this.sendHeartbeatIntervalIds.delete(e);
            }),
            (this.handleEnrollmentSuccess = e => {
              let {
                  enrolledQuestUserStatus: { questId: _ },
                } = e,
                E = n.default.getStreamerActiveStreamMetadata();
              if (null == E || null == E.pid) return;
              let t = a.default.getGameForPID(E.pid);
              if (null == t || null == t.id) return;
              let r = (0, S.getQuestByApplicationId)(T.default.quests, t.id);
              if (null == r || r.id !== _) return;
              let i = n.default.getCurrentUserActiveStream();
              null != i &&
                this.initiateHeartbeat({
                  streamKey: (0, o.encodeStreamKey)(i),
                  applicationId: r.config.applicationId,
                  questId: r.id,
                });
            }),
            (this.handlePostConnectionOpen = () => {
              window.setTimeout(
                this.maybeFetchCurrentQuests,
                Math.floor(Math.random() * O)
              );
            }),
            (this.handleSendHeartbeatSuccess = e => {
              let { streamKey: _, userStatus: E } = e;
              null != E.completedAt && this.terminateHeartbeat(_);
            }),
            (this.handleRunningGamesChange = () => {
              !(
                this.instantiatedAt + A > Date.now() ||
                T.default.lastFetchedCurrentQuests + A > Date.now()
              ) && this.maybeFetchCurrentQuests();
            }),
            (this.handleStreamStart = e => {
              var _, E;
              let { streamType: t, guildId: n, channelId: i, pid: I } = e,
                s = null != I ? a.default.getGameForPID(I) : null;
              if (null == s) return;
              let N =
                null != s.id
                  ? (0, S.getQuestByApplicationId)(T.default.quests, s.id)
                  : null;
              (null == N
                ? void 0
                : null === (_ = N.userStatus) || void 0 === _
                  ? void 0
                  : _.enrolledAt) != null &&
                (null == N
                  ? void 0
                  : null === (E = N.userStatus) || void 0 === E
                    ? void 0
                    : E.completedAt) == null &&
                this.initiateHeartbeat({
                  streamKey: (0, o.encodeStreamKey)({
                    streamType: t,
                    guildId: n,
                    channelId: i,
                    ownerId: r.default.getId(),
                  }),
                  applicationId: N.config.applicationId,
                  questId: N.id,
                });
            }),
            (this.handleStreamClose = e => {
              let { streamKey: _ } = e;
              this.terminateHeartbeat(_);
            }),
            (this.actions = {
              QUESTS_ENROLL_SUCCESS: this.handleEnrollmentSuccess,
              QUESTS_SEND_HEARTBEAT_SUCCESS: this.handleSendHeartbeatSuccess,
              POST_CONNECTION_OPEN: this.handlePostConnectionOpen,
              RUNNING_GAMES_CHANGE: this.handleRunningGamesChange,
              STREAM_START: this.handleStreamStart,
              STREAM_CLOSE: this.handleStreamClose,
            });
        }
      }
      var L = new l();
    },
    50733: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return T;
          },
        }),
        E("222007");
      var t = E("819855"),
        o = E("689988"),
        n = E("642754"),
        r = E("49111"),
        a = E("782340");
      function i(e) {
        e.relationship.type === r.RelationshipTypes.PENDING_INCOMING &&
          (t.AccessibilityAnnouncer.announce(
            a.default.Messages.FRIEND_REQUEST_PENDING_A11Y_ANNOUNCEMENT.format({
              username: e.relationship.user.username,
            })
          ),
          n.showPendingNotification(e.relationship.user));
      }
      function I(e) {
        let { user: _ } = e;
        t.AccessibilityAnnouncer.announce(
          a.default.Messages.FRIEND_REQUEST_ACCEPTED_A11Y_ANNOUNCEMENT.format({
            username: _.username,
          })
        ),
          n.showAcceptedNotification(_);
      }
      class s extends o.default {
        constructor(...e) {
          super(...e),
            (this.actions = {
              RELATIONSHIP_ADD: i,
              FRIEND_REQUEST_ACCEPTED: I,
            });
        }
      }
      var T = new s();
    },
    614818: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return t;
          },
        });
      var t = { HANDSHAKE: 0, FRAME: 1, CLOSE: 2, HELLO: 3 };
    },
    937827: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return O;
          },
        }),
        E("222007");
      var t = E("920842"),
        o = E("689988"),
        n = E("605250"),
        r = E("42887"),
        a = E("590401"),
        i = E("718517"),
        I = E("773336");
      let s = 1 * i.default.Millis.SECOND,
        T = 30 * i.default.Millis.SECOND,
        S = new n.default("RTCLatencyTestManager");
      class N extends o.default {
        _terminate() {
          null != this.refetchTimeout && clearTimeout(this.refetchTimeout);
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              POST_CONNECTION_OPEN: () => this._handleConnectionOpen(),
            }),
            (this._handleTestRegionsResponse = e => {
              let _ = e.map(e => e.region);
              if (a.default.shouldPerformLatencyTest(_)) {
                let E = r.default.getMediaEngine();
                E.rankRtcRegions(e)
                  .then(e => {
                    S.verbose("RTC region latency test completed: ", e),
                      (0, t.completeRTCLatencyTest)(e, _);
                  })
                  .catch(e => S.warn(e));
              } else
                S.verbose(
                  "RTC cached preferred region is ".concat(
                    a.default.getPreferredRegion()
                  )
                );
            }),
            (this._fetchAndScheduleRefetch = () => {
              (0, t.fetchRTCLatencyTestRegions)()
                .then(e => this._handleTestRegionsResponse(e.body))
                .catch(e => S.warn(e)),
                (this.refetchTimeout = setTimeout(
                  this._fetchAndScheduleRefetch,
                  360 * i.default.Millis.MINUTE
                ));
            }),
            (this._handleConnectionOpen = () => {
              I.isPlatformEmbedded &&
                !__OVERLAY__ &&
                (null != this.refetchTimeout &&
                  clearTimeout(this.refetchTimeout),
                (this.refetchTimeout = setTimeout(
                  this._fetchAndScheduleRefetch,
                  Math.floor(s + Math.random() * T)
                )));
            });
        }
      }
      var O = new N();
    },
    739362: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return r;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("751520");
      class n extends t.default {
        constructor(...e) {
          super(...e),
            (this.actions = {
              USER_SETTINGS_PROTO_UPDATE: o.refreshSearchTokens,
              I18N_LOAD_SUCCESS: o.refreshSearchTokens,
              POST_CONNECTION_OPEN: o.refreshSearchTokens,
            });
        }
      }
      var r = new n();
    },
    578165: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return S;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("42203"),
        n = E("18494"),
        r = E("821240"),
        a = E("761771"),
        i = E("537597");
      function I(e) {
        let { channelId: _ } = e;
        if (
          null == _ ||
          !(0, a.isEligibleForInappropriateConversationWarning)({
            location: "channel_select",
          })
        )
          return !1;
        let E = o.default.getChannel(_);
        if (null == E || !E.isDM()) return !1;
        let t = (0, r.getInappropriateConversationTakeoverForChannel)(_);
        return (
          null != t &&
          ((0, i.showTakeoverModal)({
            warningId: t.id,
            senderId: E.getRecipientId(),
          }),
          !0)
        );
      }
      function s(e) {
        let { channels: _ } = e;
        if (
          !(0, a.isEligibleForInappropriateConversationWarning)({
            location: "channel_updates",
          })
        )
          return !1;
        let E = n.default.getCurrentlySelectedChannelId();
        if (null == E) return !1;
        let t = _.find(e => e.id === E);
        if (null == t) return !1;
        let o = (0, r.getInappropriateConversationTakeoverForChannel)(t.id);
        return (
          !!(null != o && t.isDM()) &&
          ((0, i.showTakeoverModal)({
            warningId: o.id,
            senderId: t.getRecipientId(),
          }),
          !0)
        );
      }
      class T extends t.default {
        constructor(...e) {
          super(...e),
            (this.actions = { CHANNEL_SELECT: I, CHANNEL_UPDATES: s });
        }
      }
      var S = new T();
    },
    821240: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          getInappropriateConversationTakeoverForChannel: function () {
            return o;
          },
        });
      var t = E("764828");
      function o(e) {
        let _ = (function (e) {
            let _ = t.default.getChannelSafetyWarnings(e);
            return _.filter(
              e =>
                e.type ===
                  t.SafetyWarningTypes.INAPPROPRIATE_CONVERSATION_TIER_1 ||
                e.type ===
                  t.SafetyWarningTypes.INAPPROPRIATE_CONVERSATION_TIER_2
            );
          })(e),
          E = _.filter(
            e =>
              e.type ===
                t.SafetyWarningTypes.INAPPROPRIATE_CONVERSATION_TIER_1 &&
              null != e.dismiss_timestamp
          );
        if (E.length > 0) return null;
        let o = _.filter(
          e =>
            e.type === t.SafetyWarningTypes.INAPPROPRIATE_CONVERSATION_TIER_1 &&
            null == e.dismiss_timestamp
        );
        return 1 === o.length ? o[0] : null;
      }
    },
    537597: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          showTakeoverModal: function () {
            return o;
          },
        });
      var t = E("761771");
      function o(e) {
        let {} = e;
        if (
          !(0, t.isEligibleForInappropriateConversationWarning)({
            location: "takeover-modal",
          })
        )
          return;
      }
    },
    303167: function (e, _, E) {
      "use strict";
      function t(e) {
        null != window.DiscordSentry &&
          window.DiscordSentry.addBreadcrumb({
            type: "default",
            level: "info",
            category: e.category,
            message: e.message,
            data: e.data,
            timestamp: Date.now(),
          });
      }
      E.r(_),
        E.d(_, {
          default: function () {
            return t;
          },
        });
    },
    761834: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          UserSettingsManager: function () {
            return r;
          },
          default: function () {
            return a;
          },
        }),
        E("860677"),
        E("222007");
      var t = E("689988"),
        o = E("845579");
      let n = !1;
      class r extends t.default {
        maybeShowChangeLanguageToast() {}
        setVerifyTimezone() {
          n = !0;
        }
        ensureTimezoneUpdated() {
          if (!n) return;
          n = !1;
          let e = new Date().getTimezoneOffset();
          o.TimezoneOffset.getSetting() !== e &&
            setImmediate(() => o.TimezoneOffset.updateSetting(e));
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              POST_CONNECTION_OPEN: () => {
                this.setVerifyTimezone(), this.maybeShowChangeLanguageToast();
              },
              OVERLAY_INITIALIZE: this.setVerifyTimezone,
              USER_SETTINGS_PROTO_UPDATE: this.ensureTimezoneUpdated,
            });
        }
      }
      var a = new r();
    },
    202014: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return I;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("271938"),
        n = E("42203"),
        r = E("78581"),
        a = E("49111");
      class i extends t.default {
        constructor(...e) {
          super(...e),
            (this.prevConnected = !1),
            (this.tempMutedChannel = null),
            (this.handleRTCConnectionState = e => {
              let { state: _, channelId: E } = e,
                t = _ === a.RTCConnectionStates.RTC_CONNECTED,
                o = t && !this.prevConnected,
                i = n.default.getChannel(E),
                I = null == i ? void 0 : i.getGuildId(),
                s = this.tempMutedChannel === E;
              o &&
                null != I &&
                (s
                  ? (this.tempMutedChannel = null)
                  : (0, r.maybePlayCustomJoinSound)(I)),
                (this.prevConnected = t);
            }),
            (this.handleMute = e => {
              let { channelId: _ } = e;
              this.tempMutedChannel = _;
            }),
            (this.handleVoiceStateUpdates = e => {
              let { voiceStates: _ } = e,
                E = o.default.getId(),
                t = o.default.getSessionId();
              _.forEach(e => {
                let { userId: _, channelId: o, sessionId: n } = e;
                _ === E && n !== t && null != o && (this.tempMutedChannel = o);
              });
            }),
            (this.actions = {
              RTC_CONNECTION_STATE: this.handleRTCConnectionState,
              SOUNDBOARD_MUTE_JOIN_SOUND: this.handleMute,
              VOICE_STATE_UPDATES: this.handleVoiceStateUpdates,
            });
        }
      }
      var I = new i();
    },
    728863: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return R;
          },
        }),
        E("222007");
      var t = E("637612"),
        o = E("819689"),
        n = E("689988"),
        r = E("271938"),
        a = E("42203"),
        i = E("377253"),
        I = E("957255"),
        s = E("18494"),
        T = E("697218"),
        S = E("923510"),
        N = E("285857"),
        O = E("49111");
      class A extends n.default {
        handleVoiceStateUpdates(e) {
          let { voiceStates: _ } = e;
          _.forEach(e => {
            let {
              channelId: _,
              userId: E,
              suppress: n,
              requestToSpeakTimestamp: A,
            } = e;
            if (
              s.default.getVoiceChannelId() !== _ ||
              !n ||
              null == _ ||
              E === r.default.getId()
            )
              return;
            let R = I.default.can(
              S.MODERATE_STAGE_CHANNEL_PERMISSIONS,
              a.default.getChannel(_)
            );
            if (R) {
              if (null != A) {
                let e = T.default.getUser(E);
                null != e &&
                  (0, N.sendStageRequestToSpeakEphemeralMessage)(_, e, A);
              } else {
                let e = i.default.getMessages(_),
                  n = e.findNewest(
                    e =>
                      e.type === t.MessageTypes.STAGE_RAISE_HAND &&
                      e.hasFlag(O.MessageFlags.EPHEMERAL) &&
                      e.author.id === E
                  );
                null != n && o.default.deleteMessage(_, n.id, !0);
              }
            }
          });
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              VOICE_STATE_UPDATES: this.handleVoiceStateUpdates,
            });
        }
      }
      var R = new A();
    },
    285857: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          sendStageRequestToSpeakEphemeralMessage: function () {
            return r;
          },
        });
      var t = E("913144"),
        o = E("299039"),
        n = E("49111");
      function r(e, _, E) {
        t.default.dispatch({
          type: "MESSAGE_CREATE",
          channelId: e,
          message: (function (e) {
            let {
              channelId: _,
              requesterUser: E,
              requestToSpeakTimestamp: t,
            } = e;
            return {
              id: o.default.fromTimestamp(Date.parse(t)),
              type: n.MessageTypes.STAGE_RAISE_HAND,
              flags: n.MessageFlags.EPHEMERAL,
              content: "",
              channel_id: _,
              author: E,
              attachments: [],
              embeds: [],
              pinned: !1,
              mentions: [],
              mention_channels: [],
              mention_roles: [],
              mention_everyone: !1,
              timestamp: t,
              state: n.MessageStates.SENT,
              tts: !1,
            };
          })({ channelId: e, requesterUser: _, requestToSpeakTimestamp: E }),
          optimistic: !1,
          sendMessageOptions: {},
          isPushNotification: !1,
        });
      }
    },
    569363: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          SYSTEM_USER: function () {
            return t;
          },
          URGENT_MODAL_KEY: function () {
            return o;
          },
        });
      let t = "643945264868098049",
        o = "URGENT_MESSAGE_MODAL";
    },
    684559: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return t;
          },
        });
      var t,
        o = E("327037"),
        n = E("689988"),
        r = E("42203"),
        a = E("18494"),
        i = E("697218"),
        I = E("569363"),
        s = E("49111");
      let T = !1;
      function S(e) {
        let _ = i.default.getCurrentUser();
        if (null == _) return;
        let E = a.default.getChannelId(),
          t = r.default.getDMFromUserId(I.SYSTEM_USER);
        if (!_.hasUrgentMessages() || t === E) return N({ channelId: E });
        !T && ((T = !0), e());
      }
      function N(e) {
        let { channelId: _ } = e,
          E = i.default.getCurrentUser(),
          t = _ === r.default.getDMFromUserId(I.SYSTEM_USER);
        null != E &&
          E.hasUrgentMessages() &&
          t &&
          ((T = !1), o.setFlag(s.UserFlags.HAS_UNREAD_URGENT_MESSAGES, !1));
      }
      t = class extends n.default {
        constructor(e) {
          super(),
            (this.handleShowUrgentMessageAlert = e),
            (this.actions = {
              POST_CONNECTION_OPEN: () => S(this.handleShowUrgentMessageAlert),
              MESSAGE_CREATE: () => S(this.handleShowUrgentMessageAlert),
              CHANNEL_SELECT: N,
            });
        }
      };
    },
    507331: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return i;
          },
        });
      var t = E("37983");
      E("884691");
      var o = E("77078"),
        n = E("684559"),
        r = E("569363"),
        a = E("49111"),
        i = new n.default(() =>
          (0, o.openModalLazy)(
            async () => {
              let { default: e } = await E.el("389366").then(
                E.bind(E, "389366")
              );
              return _ => (0, t.jsx)(e, { ..._ });
            },
            { modalKey: r.URGENT_MODAL_KEY, onCloseRequest: a.NOOP_NULL }
          )
        );
    },
    708130: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return s;
          },
        }),
        E("222007");
      var t = E("446674"),
        o = E("913144"),
        n = E("689988"),
        r = E("404607"),
        a = E("271938"),
        i = E("42203");
      class I extends n.default {
        handleChannelDelete(e) {
          let { channel: _ } = e;
          if (null != _.guild_id) {
            let e = i.default.getAllThreadsForParent(_.id);
            e.length > 0 &&
              t.default.Emitter.batched(() => {
                for (let _ of e)
                  o.default.dispatch({ type: "THREAD_DELETE", channel: _ });
              });
          }
        }
        handleMessageCreate(e) {
          var _, E, t;
          let { channelId: o, message: n } = e,
            I = i.default.getChannel(o);
          if (
            (null === (_ = n.author) || void 0 === _ ? void 0 : _.id) !==
              a.default.getId() ||
            !(null == I ? void 0 : I.isActiveThread())
          )
            return;
          let s = new Date(
              null !==
                (t =
                  null === (E = I.threadMetadata) || void 0 === E
                    ? void 0
                    : E.archiveTimestamp) && void 0 !== t
                ? t
                : 0
            ).getTime(),
            T = Date.now() - s;
          T < 5e3 && r.default.resort(I.parent_id);
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              CHANNEL_DELETE: this.handleChannelDelete,
              MESSAGE_CREATE: this.handleMessageCreate,
            });
        }
      }
      var s = new I();
    },
    679404: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return G;
          },
        }),
        E("424973"),
        E("222007");
      var t = E("917351"),
        o = E.n(t),
        n = E("713349"),
        r = E("95410"),
        a = E("689988"),
        i = E("342564"),
        I = E("605393"),
        s = E("385976"),
        T = E("469607"),
        S = E("865372"),
        N = E("319781"),
        O = E("718517"),
        A = E("872173"),
        R = E("374363"),
        l = E("116949"),
        L = E("397336");
      let u = "lastFrecencySavedTime",
        C = Math.random() * (5 * O.default.Millis.MINUTE),
        D =
          1 * O.default.Millis.DAY +
          Math.floor(Math.random() * (1 * O.default.Millis.HOUR)),
        c = null,
        d = Date.now();
      class U extends a.default {
        _initialize() {
          A.FrecencyUserSettingsActionCreators.beforeSendCallbacks.push({
            hasChanges: () => !1,
            processProto: () => {
              m(!0);
            },
          }),
            A.FrecencyUserSettingsActionCreators.beforeSendCallbacks.push({
              hasChanges: () =>
                S.default.hasPendingUsage() &&
                R.default.hasLoaded(
                  L.UserSettingsTypes.FRECENCY_AND_FAVORITES_SETTINGS
                ),
              processProto: e => {
                if (!!S.default.hasPendingUsage())
                  R.default.hasLoaded(
                    L.UserSettingsTypes.FRECENCY_AND_FAVORITES_SETTINGS
                  ) &&
                    ((e.stickerFrecency = n.StickerFrecency.create()),
                    (e.stickerFrecency.stickers = (0, l.serializeUsageHistory)(
                      S.default.stickerFrecencyWithoutFetchingLatest
                        .usageHistory,
                      100
                    )));
              },
            }),
            A.FrecencyUserSettingsActionCreators.beforeSendCallbacks.push({
              hasChanges: () =>
                s.default.hasPendingUsage() &&
                R.default.hasLoaded(
                  L.UserSettingsTypes.FRECENCY_AND_FAVORITES_SETTINGS
                ),
              processProto: e => {
                if (!!s.default.hasPendingUsage())
                  R.default.hasLoaded(
                    L.UserSettingsTypes.FRECENCY_AND_FAVORITES_SETTINGS
                  ) &&
                    ((e.emojiFrecency = n.EmojiFrecency.create()),
                    (e.emojiFrecency.emojis = (0, l.serializeUsageHistory)(
                      s.default.emojiFrecencyWithoutFetchingLatest.usageHistory,
                      100
                    )));
              },
            }),
            A.FrecencyUserSettingsActionCreators.beforeSendCallbacks.push({
              hasChanges: () =>
                T.default.hasPendingUsage() &&
                R.default.hasLoaded(
                  L.UserSettingsTypes.FRECENCY_AND_FAVORITES_SETTINGS
                ),
              processProto: e => {
                if (!!T.default.hasPendingUsage())
                  R.default.hasLoaded(
                    L.UserSettingsTypes.FRECENCY_AND_FAVORITES_SETTINGS
                  ) &&
                    !o.isEmpty(T.default.playedSoundHistory) &&
                    ((e.playedSoundFrecency = n.PlayedSoundFrecency.create()),
                    (e.playedSoundFrecency.playedSounds = (0,
                    l.serializeUsageHistory)(
                      T.default.playedSoundHistory,
                      100
                    )));
              },
            }),
            A.FrecencyUserSettingsActionCreators.beforeSendCallbacks.push({
              hasChanges: () =>
                i.default.hasPendingUsage() &&
                R.default.hasLoaded(
                  L.UserSettingsTypes.FRECENCY_AND_FAVORITES_SETTINGS
                ),
              processProto: e => {
                if (!!i.default.hasPendingUsage())
                  R.default.hasLoaded(
                    L.UserSettingsTypes.FRECENCY_AND_FAVORITES_SETTINGS
                  ) &&
                    ((e.applicationCommandFrecency =
                      n.ApplicationCommandFrecency.create()),
                    (e.applicationCommandFrecency.applicationCommands = (0,
                    l.serializeUsageHistory)(
                      i.default.getCommandFrecencyWithoutLoadingLatest()
                        .usageHistory,
                      500
                    )));
              },
            }),
            A.FrecencyUserSettingsActionCreators.beforeSendCallbacks.push({
              hasChanges: () =>
                I.default.hasPendingUsage() &&
                R.default.hasLoaded(
                  L.UserSettingsTypes.FRECENCY_AND_FAVORITES_SETTINGS
                ),
              processProto: e => {
                if (!!I.default.hasPendingUsage())
                  R.default.hasLoaded(
                    L.UserSettingsTypes.FRECENCY_AND_FAVORITES_SETTINGS
                  ) &&
                    ((e.applicationFrecency = n.ApplicationFrecency.create()),
                    (e.applicationFrecency.applications = (0,
                    l.serializeUsageHistory)(
                      I.default.getApplicationFrecencyWithoutLoadingLatest()
                        .usageHistory,
                      I.FREQUENCY_ITEM_LIMIT
                    )));
              },
            }),
            A.FrecencyUserSettingsActionCreators.beforeSendCallbacks.push({
              hasChanges: () =>
                N.default.hasPendingUsage() &&
                R.default.hasLoaded(
                  L.UserSettingsTypes.FRECENCY_AND_FAVORITES_SETTINGS
                ),
              processProto: e => {
                if (!!N.default.hasPendingUsage())
                  R.default.hasLoaded(
                    L.UserSettingsTypes.FRECENCY_AND_FAVORITES_SETTINGS
                  ) &&
                    ((e.guildAndChannelFrecency =
                      n.GuildAndChannelFrecency.create()),
                    (e.guildAndChannelFrecency.guildAndChannels = (0,
                    l.serializeUsageHistory)(
                      N.default.frecencyWithoutFetchingLatest.usageHistory,
                      N.MAX_NUM_SELECTED_ITEMS
                    )));
              },
            });
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              POST_CONNECTION_OPEN: M,
              CONNECTION_RESUMED: M,
              CONNECTION_CLOSED: h,
            });
        }
      }
      function M() {
        var e;
        (d = null !== (e = r.default.get(u)) && void 0 !== e ? e : Date.now()),
          m(!1);
      }
      function h() {
        clearTimeout(c), (c = null);
      }
      async function P() {
        (d = Date.now()),
          m(!0),
          !R.default.hasLoaded(
            L.UserSettingsTypes.FRECENCY_AND_FAVORITES_SETTINGS
          ) &&
            (S.default.hasPendingUsage() ||
              s.default.hasPendingUsage() ||
              i.default.hasPendingUsage() ||
              I.default.hasPendingUsage() ||
              N.default.hasPendingUsage()) &&
            (await A.FrecencyUserSettingsActionCreators.loadIfNecessary()),
          o.forEach(A.UserSettingsActionCreatorsByType, e => {
            e.markDirtyIfHasPendingChange();
          });
      }
      function m(e) {
        e && ((d = Date.now()), r.default.set(u, d)),
          null != c && clearTimeout(c);
        let _ = Date.now() - d;
        c = setTimeout(P, Math.max(C, D - _));
      }
      var G = new U();
    },
    275877: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return n;
          },
        });
      var t = E("397336");
      let o = {
        [t.UserSettingsTypes.PRELOADED_USER_SETTINGS]: [],
        [t.UserSettingsTypes.FRECENCY_AND_FAVORITES_SETTINGS]: [],
      };
      var n = o;
    },
    374363: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return M;
          },
        });
      var t = E("627445"),
        o = E.n(t),
        n = E("917351"),
        r = E.n(n),
        a = E("446674"),
        i = E("713349"),
        I = E("151426"),
        s = E("801340"),
        T = E("913144"),
        S = E("275877"),
        N = E("116949"),
        O = E("397336");
      let A = {
          ProtoClass: I.PreloadedUserSettings,
          proto: I.PreloadedUserSettings.create(),
          lazyLoaded: !1,
          editInfo: (0, O.createEmptyEditInfo)(),
        },
        R = {
          ProtoClass: i.FrecencyUserSettings,
          proto: i.FrecencyUserSettings.create(),
          lazyLoaded: !0,
          editInfo: (0, O.createEmptyEditInfo)(),
        },
        l = {
          [O.UserSettingsTypes.PRELOADED_USER_SETTINGS]: A,
          [O.UserSettingsTypes.FRECENCY_AND_FAVORITES_SETTINGS]: R,
        },
        L = !1;
      function u() {
        C();
      }
      function C() {
        Object.values(l).forEach(e => {
          if (null != e.editInfo.timeout) {
            var _, E;
            clearTimeout(e.editInfo.timeout),
              (e.editInfo.timeout = void 0),
              (e.editInfo.timeoutDelay = Number.MAX_SAFE_INTEGER),
              (e.editInfo.rateLimited = !1),
              (e.editInfo.offlineEditDataVersion =
                null !==
                  (E =
                    null === (_ = e.proto.versions) || void 0 === _
                      ? void 0
                      : _.dataVersion) && void 0 !== E
                  ? E
                  : 0);
          }
        });
      }
      function D(e) {
        null != e.editInfo.timeout && clearTimeout(e.editInfo.timeout),
          (e.editInfo = (0, O.createEmptyEditInfo)());
      }
      function c(e) {
        let {
          settings: { proto: _, type: E },
          partial: t,
          resetEditInfo: n,
          local: r,
        } = e;
        L = !r;
        let a = l[E];
        n && D(a),
          t
            ? ((a.proto = (0, N.mergeTopLevelFields)(a.ProtoClass, a.proto, _)),
              o(
                "string" != typeof a.proto,
                "UserSettingsProto cannot be a string"
              ))
            : ((a.proto = _),
              o(
                "string" != typeof a.proto,
                "UserSettingsProto cannot be a string"
              ),
              (a.editInfo.loaded = !0),
              (a.editInfo.loading = !1));
      }
      function d(e) {
        null != e &&
          r.forEach(l, (_, E) => {
            var t, n;
            let r = e[Number(E)];
            if (null == r) return;
            let a =
                null !== (t = null == r ? void 0 : r.proto) && void 0 !== t
                  ? t
                  : "",
              i = (0, N.b64ToProto)(_.ProtoClass, a);
            if (null == i) return;
            (_.proto = i),
              o(
                "string" != typeof _.proto,
                "UserSettingsProto cannot be a string"
              );
            let I =
              null !== (n = null == r ? void 0 : r.protoToSave) && void 0 !== n
                ? n
                : null;
            if (null == I || null == r.offlineEditDataVersion) return;
            let s = (0, N.b64ToProto)(_.ProtoClass, I);
            null != s &&
              ((_.editInfo.protoToSave = s),
              (_.editInfo.offlineEditDataVersion = r.offlineEditDataVersion));
          });
      }
      class U extends a.default.PersistedStore {
        initialize(e) {
          d(e);
        }
        getState() {
          return this.computeState();
        }
        computeState() {
          return r.mapValues(l, e => {
            let _ = { proto: (0, N.protoToB64)(e.ProtoClass, e.proto) };
            return (
              null != e.editInfo.offlineEditDataVersion &&
                null != e.editInfo.protoToSave &&
                ((_.protoToSave = (0, N.protoToB64)(
                  e.ProtoClass,
                  e.editInfo.protoToSave
                )),
                (_.offlineEditDataVersion = e.editInfo.offlineEditDataVersion)),
              _
            );
          });
        }
        hasLoaded(e) {
          return l[e].editInfo.loaded;
        }
        get settings() {
          return A.proto;
        }
        get frecencyWithoutFetchingLatest() {
          return R.proto;
        }
        get wasMostRecentUpdateFromServer() {
          return L;
        }
        getFullState() {
          return l;
        }
        getGuildFolders() {
          var e;
          let _ =
            null === (e = A.proto.guildFolders) || void 0 === e
              ? void 0
              : e.folders;
          return null == _
            ? null
            : _.map(e => {
                var _, E, t;
                let o = null === (_ = e.id) || void 0 === _ ? void 0 : _.value,
                  n = null === (E = e.color) || void 0 === E ? void 0 : E.value;
                return {
                  guildIds: e.guildIds,
                  folderId: null == o ? void 0 : Number(o),
                  folderName:
                    null === (t = e.name) || void 0 === t ? void 0 : t.value,
                  folderColor: null == n ? void 0 : Number(n),
                };
              });
        }
        getGuildRecentsDismissedAt(e) {
          var _, E;
          if (null == e) return 0;
          let t =
            null === (E = this.settings.guilds) || void 0 === E
              ? void 0
              : null === (_ = E.guilds[e]) || void 0 === _
                ? void 0
                : _.guildRecentsDismissedAt;
          return null == t ? 0 : s.Timestamp.toDate(t).getTime();
        }
        getDismissedGuildContent(e) {
          var _, E, t;
          return null == e
            ? null
            : null === (t = this.settings.guilds) || void 0 === t
              ? void 0
              : null === (E = t.guilds) || void 0 === E
                ? void 0
                : null === (_ = E[e]) || void 0 === _
                  ? void 0
                  : _.dismissedGuildContent;
        }
        getGuildsProto() {
          var e, _;
          return null !==
            (_ =
              null === (e = this.settings.guilds) || void 0 === e
                ? void 0
                : e.guilds) && void 0 !== _
            ? _
            : null;
        }
      }
      (U.displayName = "UserSettingsProtoStore"),
        (U.persistKey = "UserSettingsProtoStore-Cache");
      var M = new U(T.default, {
        CACHE_LOADED: function (e) {
          let { userSettings: _ } = e;
          d(_);
        },
        USER_SETTINGS_PROTO_UPDATE: c,
        USER_SETTINGS_PROTO_ENQUEUE_UPDATE: c,
        USER_SETTINGS_PROTO_UPDATE_EDIT_INFO: function (e) {
          let {
            settings: { type: _, changes: E },
          } = e;
          o(!__OVERLAY__, "this cannot run in the overlay");
          let t = l[_];
          return (t.editInfo = { ...t.editInfo, ...E }), !1;
        },
        CONNECTION_OPEN: function (e) {
          let { userSettingsProto: _ } = e;
          null != _ &&
            ((A.proto = _),
            o(
              "string" != typeof A.proto,
              "UserSettingsProto cannot be a string"
            ));
          let {
            proto: E,
            isDirty: t,
            cleanupFuncs: n,
          } = (0, N.runMigrations)(
            A.proto,
            S.default[O.UserSettingsTypes.PRELOADED_USER_SETTINGS]
          );
          t && D(A),
            (A.proto = E),
            o(
              "string" != typeof A.proto,
              "UserSettingsProto cannot be a string"
            ),
            (A.editInfo.triggeredMigrations = t),
            (A.editInfo.cleanupFuncs = n),
            (A.editInfo.loaded = !0),
            Object.values(l).forEach(e => {
              e.lazyLoaded &&
                ((e.editInfo.loaded = !1), (e.editInfo.loading = !1));
            }),
            C();
        },
        CONNECTION_CLOSED: u,
        CONNECTION_RESUMED: u,
        OVERLAY_INITIALIZE: function (e) {
          let { userSettingsProto: _ } = e;
          (A.proto = (0, N.b64ToPreloadedUserSettingsProto)(_)),
            o(
              "string" != typeof A.proto,
              "UserSettingsProto cannot be a string"
            );
        },
        LOGOUT: function () {
          C(),
            Object.values(l).forEach(e => {
              (e.proto = e.ProtoClass.create()),
                (e.editInfo = (0, O.createEmptyEditInfo)());
            });
        },
      });
    },
    116949: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          BINARY_READ_OPTIONS: function () {
            return s;
          },
          b64ToProtoWithType: function () {
            return S;
          },
          b64ToProto: function () {
            return N;
          },
          b64ToPreloadedUserSettingsProto: function () {
            return O;
          },
          protoToB64WithType: function () {
            return A;
          },
          protoToB64: function () {
            return R;
          },
          mergeTopLevelFields: function () {
            return l;
          },
          mutateUserGuildSettingsInternal: function () {
            return L;
          },
          mutateUserChannelSettings: function () {
            return u;
          },
          mutateUserChannelSettingsInternal: function () {
            return C;
          },
          runMigrations: function () {
            return D;
          },
          serializeUsageHistory: function () {
            return c;
          },
        }),
        E("70102"),
        E("222007"),
        E("424973");
      var t = E("849266"),
        o = E("917351"),
        n = E.n(o),
        r = E("713349"),
        a = E("151426"),
        i = E("959714"),
        I = E("397336");
      let s = {
          readerFactory: e => new t.BinaryReader(e, new TextDecoder("utf-8")),
        },
        T = {
          [I.UserSettingsTypes.PRELOADED_USER_SETTINGS]:
            a.PreloadedUserSettings,
          [I.UserSettingsTypes.FRECENCY_AND_FAVORITES_SETTINGS]:
            r.FrecencyUserSettings,
        };
      function S(e, _) {
        return null != _ && e in T ? N(T[e], _) : null;
      }
      function N(e, _) {
        if (null == _) return null;
        let E = (0, t.base64decode)(_);
        try {
          return e.fromBinary(E, s);
        } catch (e) {
          throw Error(
            "Settings proto failed to deserialize (potentially corrupt): ".concat(
              e
            )
          );
        }
      }
      function O(e) {
        return N(a.PreloadedUserSettings, e);
      }
      function A(e, _) {
        return R(T[e], _);
      }
      function R(e, _) {
        return (0, t.base64encode)(e.toBinary(_));
      }
      function l(e, _, E) {
        for (let e in ((_ = { ..._ }), E)) delete _[e];
        return e.mergePartial(_, E), _;
      }
      function L(e, _, E) {
        return (
          (null == _ || "null" === _) && (_ = "0"),
          !(_ in e.guilds) && (e.guilds[_] = a.GuildSettings.create()),
          E(e.guilds[_])
        );
      }
      function u(e, _, E, t) {
        var o, n, r;
        return (
          (o = e),
          (n = _),
          (r = e => C(e, E, t)),
          null == o.guilds && (o.guilds = a.AllGuildSettings.create()),
          L(o.guilds, n, r)
        );
      }
      function C(e, _, E) {
        return (
          !(_ in e.channels) && (e.channels[_] = a.ChannelSettings.create()),
          E(e.channels[_])
        );
      }
      function D(e, _) {
        null == e.versions && (e.versions = i.Versions.create());
        let E = 0;
        for (let e of _) {
          if (e.version <= E)
            throw Error(
              "Migrations are out of order or there is a duplicate version"
            );
          E = e.version;
        }
        let t = 0.1 > Math.random(),
          o = !1,
          n = [];
        for (let E of _) {
          var r, a;
          if (E.version <= e.versions.clientVersion) {
            t && (null === (r = E.cleanup) || void 0 === r || r.call(E));
            continue;
          }
          let _ = E.run(e);
          if (((e.versions.clientVersion = E.version), !1 === _)) {
            null === (a = E.cleanup) || void 0 === a || a.call(E);
            continue;
          }
          (o = !0), null != E.cleanup && n.push(E.cleanup);
        }
        return { proto: e, isDirty: o, cleanupFuncs: n };
      }
      function c(e, _) {
        let E = Object.entries(e);
        if (E.length > _)
          for (
            E = n
              .sortBy(E, e => {
                let [_, E] = e;
                return E.recentUses[E.recentUses.length - 1];
              })
              .reverse();
            E.length > _;

          )
            E.pop();
        let t = {};
        for (let [e, _] of E) {
          let E = r.FrecencyItem.create();
          (E.frecency = _.frecency),
            (E.recentUses = _.recentUses
              .filter(e => null != e && e > 0)
              .map(String)),
            (E.score = Math.round(_.score)),
            (E.totalUses = _.totalUses),
            (t[e] = E);
        }
        return t;
      }
    },
    357168: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return l;
          },
        }),
        E("222007");
      var t = E("862337"),
        o = E("819689"),
        n = E("987317"),
        r = E("689988"),
        a = E("191225"),
        i = E("42203"),
        I = E("101125"),
        s = E("800762"),
        T = E("316133"),
        S = E("782340");
      let N = 18e4;
      function O() {
        let e = s.default.getCurrentClientVoiceChannelId(null);
        if (null == e) return !1;
        let _ = i.default.getChannel(e);
        if (null == _ || !_.isPrivate()) return !1;
        let E = _.recipients.length;
        if (E > 1) return !1;
        let t = T.default.countVoiceStatesForChannel(e);
        if (t > 1) return !1;
        let o = a.default.getSelfEmbeddedActivityForChannel(e);
        if (null != o) return !1;
        let n = null != I.default.getBroadcast();
        return !n && !0;
      }
      function A() {
        if (!O()) return;
        let e = s.default.getCurrentClientVoiceChannelId(null);
        null != e &&
          (o.default.sendBotMessage(
            e,
            S.default.Messages.BOT_CALL_IDLE_DISCONNECT_2.format({ number: 3 })
          ),
          n.default.selectVoiceChannel(null));
      }
      class R extends r.default {
        constructor(...e) {
          super(...e),
            (this.idleTimeout = new t.Timeout()),
            (this.handleConnectionClosed = () => {
              this.idleTimeout.stop();
            }),
            (this.handleEmbeddedActivityDisconnect = () => {
              O() && this.idleTimeout.start(N, A, !0);
            }),
            (this.handleVoiceStateUpdates = () => {
              if (!O()) {
                this.idleTimeout.stop();
                return;
              }
              this.idleTimeout.start(N, A, !1);
            }),
            (this.actions = {
              VOICE_STATE_UPDATES: this.handleVoiceStateUpdates,
              CONNECTION_CLOSED: this.handleConnectionClosed,
              EMBEDDED_ACTIVITY_DISCONNECT:
                this.handleEmbeddedActivityDisconnect,
            });
        }
      }
      var l = new R();
    },
    310045: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          shouldImmediatelyRequestVoicePermissions: function () {
            return l;
          },
          default: function () {
            return u;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("928609"),
        n = E("325861"),
        r = E("808422"),
        a = E("628454"),
        i = E("271938"),
        I = E("42203"),
        s = E("42887"),
        T = E("945956"),
        S = E("850296"),
        N = E("49111"),
        O = E("180524");
      let A = null;
      function R() {
        o.default.requestPermission(O.NativePermissionTypes.AUDIO).then(e => {
          e && (0, S.default)(!0);
        }),
          s.default.getMode() === N.InputModes.PUSH_TO_TALK &&
            o.default.requestPermission(
              O.NativePermissionTypes.INPUT_MONITORING
            );
      }
      function l(e, _) {
        var E;
        let t =
          null === (E = I.default.getChannel(_)) || void 0 === E
            ? void 0
            : E.isListenModeCapable();
        if (!t) return !0;
        let o = n.default.isSpeaker(e, _);
        return o;
      }
      class L extends t.default {
        handleVoiceChannelSelect(e) {
          let { channelId: _ } = e;
          null == _ && (A = null);
        }
        handleVoiceStateUpdates(e) {
          let { voiceStates: _ } = e;
          _.forEach(e => {
            let { userId: _, channelId: E } = e;
            if (null == E) return;
            let t = i.default.getId() === _;
            if (!t || null == T.default.getRTCConnectionId() || A === E) return;
            let o = l(_, E);
            if (o) {
              (A = E), R();
              return;
            }
            let n = (function (e) {
              let _ = (0, r.getAudienceRequestToSpeakState)(e),
                E =
                  _ ===
                  r.RequestToSpeakStates
                    .REQUESTED_TO_SPEAK_AND_AWAITING_USER_ACK;
              return E;
            })(new a.default(e));
            n && ((A = E), R());
          });
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              VOICE_STATE_UPDATES: this.handleVoiceStateUpdates,
              VOICE_CHANNEL_SELECT: this.handleVoiceChannelSelect,
            });
        }
      }
      var u = new L();
    },
    850296: function (e, _, E) {
      "use strict";
      function t(e) {}
      E.r(_),
        E.d(_, {
          default: function () {
            return t;
          },
        });
    },
    818766: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          sendVoiceChannelActivityNotification: function () {
            return n;
          },
        });
      var t = E("872717"),
        o = E("49111");
      function n(e, _) {
        t.default.post({
          url: o.Endpoints.VOICE_CHANNEL_NOTIFICATIONS(e),
          query: { first_user: _ },
        });
      }
    },
    778727: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return s;
          },
        }),
        E("222007");
      var t = E("689988"),
        o = E("191145"),
        n = E("721281"),
        r = E("42203"),
        a = E("800762"),
        i = E("818766");
      class I extends t.default {
        handleVoiceChannelSelect(e) {
          let { channelId: _, guildId: E } = e;
          if (null == _ || null == E) return;
          let t = r.default.getChannel(_);
          if (
            null != t &&
            (0, n.hasVoiceChannelActivityNotifsEnabled)(t) &&
            t.isGuildVoice()
          ) {
            let e = o.default.getParticipants(_).length,
              E = a.default.isInChannel(_),
              t = e === (E ? 1 : 0);
            t
              ? i.sendVoiceChannelActivityNotification(_, t)
              : e === (E ? 2 : 1) &&
                i.sendVoiceChannelActivityNotification(_, t);
          }
        }
        constructor(...e) {
          super(...e),
            (this.actions = {
              VOICE_CHANNEL_SELECT: this.handleVoiceChannelSelect,
            });
        }
      }
      var s = new I();
    },
    407117: function (e, _, E) {
      "use strict";
      E.r(_);
      var t = E("759843"),
        o = E("913144"),
        n = E("271938"),
        r = E("49111");
      (0, t.analyticsTrackingStoreMaker)({
        dispatcher: o.default,
        actionHandler: {
          CONNECTION_OPEN: e =>
            t.AnalyticsActionHandlers.handleConnectionOpen(e),
          OVERLAY_INITIALIZE: e =>
            t.AnalyticsActionHandlers.handleConnectionOpen(e),
          CURRENT_USER_UPDATE: e =>
            t.AnalyticsActionHandlers.handleConnectionOpen(e),
          CONNECTION_CLOSED: () =>
            t.AnalyticsActionHandlers.handleConnectionClosed(),
          FINGERPRINT: () => t.AnalyticsActionHandlers.handleFingerprint(),
          TRACK: e => t.AnalyticsActionHandlers.handleTrack(e),
        },
        TRACKING_URL: r.Endpoints.TRACK,
        waitFor: [n.default],
        getFingerprint: n.default.getFingerprint,
      });
    },
    130473: function (e, _, E) {
      "use strict";
      let t, o;
      E.r(_),
        E.d(_, {
          default: function () {
            return A;
          },
        }),
        E("808653");
      var n = E("446674"),
        r = E("95410"),
        a = E("913144"),
        i = E("42203"),
        I = E("305961");
      let s = "hideSuppressWarning",
        T = !1,
        S = !0,
        N = !1;
      class O extends n.default.Store {
        initialize() {
          N = r.default.get(s) || N;
        }
        isAFKChannel() {
          let e = i.default.getChannel(o);
          if (null == e) return !1;
          let _ = I.default.getGuild(e.getGuildId());
          return null != _ && e.id === _.afkChannelId;
        }
        shouldShowWarning() {
          var e;
          return (
            !(null === (e = i.default.getChannel(o)) || void 0 === e
              ? void 0
              : e.isGuildStageVoice()) && !S
          );
        }
      }
      O.displayName = "PermissionSpeakStore";
      var A = new O(a.default, {
        CONNECTION_OPEN: function (e) {
          (t = e.sessionId), (T = !1);
        },
        CONNECTION_CLOSED: function () {
          (t = null), (o = null), (S = !0);
        },
        VOICE_STATE_UPDATES: function (e) {
          let { voiceStates: _ } = e;
          return _.reduce(
            (e, _) =>
              t !== _.sessionId
                ? e
                : (T !== _.suppress && (S = !(T = _.suppress)),
                  o !== _.channelId && ((o = _.channelId), (S = !T)),
                  (N || null == _.channelId) && (S = !0),
                  !0),
            !1
          );
        },
        PERMISSION_CLEAR_SUPPRESS_WARNING: function (e) {
          let { forever: _ } = e;
          (S = !0), _ && ((N = !0), r.default.set(s, N));
        },
      });
    },
    622785: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return R;
          },
        });
      var t = E("446674"),
        o = E("913144"),
        n = E("271938"),
        r = E("42203"),
        a = E("42887"),
        i = E("957255"),
        I = E("945956"),
        s = E("800762"),
        T = E("49111");
      let S = !0,
        N = !0;
      function O() {
        let e;
        let _ = I.default.getChannelId();
        if (null == _) e = !0;
        else {
          var E;
          let t = r.default.getChannel(_),
            o = s.default.getVoiceState(
              null == t ? void 0 : t.getGuildId(),
              n.default.getId()
            );
          e =
            a.default.getMode() !== T.InputModes.VOICE_ACTIVITY ||
            null == t ||
            t.isPrivate() ||
            t.isGuildStageVoice() ||
            i.default.can(T.Permissions.USE_VAD, t) ||
            null == (E = o) ||
            !!E.suppress ||
            null != E.requestToSpeakTimestamp ||
            !1;
        }
        if (S === e) return !1;
        (N = e),
          (S = e),
          o.default.dispatch({ type: "SET_VAD_PERMISSION", hasPermission: S });
      }
      class A extends t.default.Store {
        initialize() {
          this.waitFor(i.default, a.default, I.default, s.default);
        }
        shouldShowWarning() {
          return !N;
        }
        canUseVoiceActivity() {
          return S;
        }
      }
      A.displayName = "PermissionVADStore";
      var R = new A(o.default, {
        RTC_CONNECTION_STATE: O,
        MEDIA_ENGINE_SET_AUDIO_ENABLED: O,
        AUDIO_SET_MODE: O,
        CHANNEL_UPDATES: O,
        THREAD_UPDATE: O,
        GUILD_ROLE_UPDATE: O,
        GUILD_MEMBER_UPDATE: O,
        IMPERSONATE_UPDATE: O,
        IMPERSONATE_STOP: O,
        VOICE_STATE_UPDATES: function (e) {
          let { voiceStates: _ } = e;
          return _.some(e => {
            let { userId: _ } = e;
            return _ === n.default.getId() && O();
          });
        },
        AUDIO_TOGGLE_SELF_MUTE: function () {
          N = S;
        },
        PERMISSION_CLEAR_VAD_WARNING: function () {
          N = !0;
        },
      });
    },
    449501: function (e, _, E) {
      "use strict";
      let t, o;
      E.r(_),
        E.d(_, {
          default: function () {
            return O;
          },
        }),
        E("222007");
      var n = E("446674"),
        r = E("95410"),
        a = E("913144"),
        i = E("49111");
      let I = "PictureInPictureLocation",
        s = new Map(),
        T = i.PictureInPicturePositions.BOTTOM_RIGHT,
        S = {};
      class N extends n.default.Store {
        initialize() {
          T = r.default.get(I, i.PictureInPicturePositions.BOTTOM_RIGHT);
        }
        get pipWindow() {
          var e;
          return null == t && null == o
            ? null
            : s.get(null !== (e = null != t ? t : o) && void 0 !== e ? e : "");
        }
        get pipVideoWindow() {
          return null == t ? null : s.get(t);
        }
        get pipActivityWindow() {
          return null == o ? null : s.get(o);
        }
        get pipWindows() {
          return s;
        }
        isEmbeddedActivityHidden() {
          return null == o;
        }
        getDockedRect(e) {
          return S[e];
        }
        isOpen(e) {
          return null != e && s.has(e);
        }
      }
      N.displayName = "PictureInPictureStore";
      var O = new N(a.default, {
        PICTURE_IN_PICTURE_OPEN: function (e) {
          var _, E;
          let { id: n, component: r, props: a } = e,
            I = s.get(n);
          if (null != I) return;
          let S = {
            id: n,
            component: r,
            position: null !== (_ = a.position) && void 0 !== _ ? _ : T,
            props: a,
            docked: null !== (E = a.docked) && void 0 !== E && E,
          };
          s.set(n, S),
            r === i.PictureInPictureComponents.VIDEO
              ? null == t && (t = n)
              : r === i.PictureInPictureComponents.EMBED_IFRAME &&
                null == o &&
                (o = n);
        },
        PICTURE_IN_PICTURE_CLOSE: function (e) {
          let { id: _ } = e;
          if (!s.has(_)) return !1;
          {
            s.delete(_);
            let e = Array.from(s.keys());
            t === _
              ? (t = e.find(e => {
                  let _ = s.get(e);
                  return (
                    null != _ &&
                    _.component === i.PictureInPictureComponents.VIDEO
                  );
                }))
              : o === _ &&
                (o = e.find(e => {
                  let _ = s.get(e);
                  return (
                    null != _ &&
                    _.component === i.PictureInPictureComponents.EMBED_IFRAME
                  );
                }));
          }
        },
        PICTURE_IN_PICTURE_MOVE: function (e) {
          let { id: _, position: E } = e;
          if (null == _ || (t !== _ && o !== _)) return !1;
          {
            let e = new Map();
            s.forEach((_, t) => {
              e.set(t, { ..._, position: E });
            }),
              (s = e),
              (T = E),
              r.default.set(I, E);
          }
        },
        PICTURE_IN_PICTURE_HIDE: function (e) {
          let { id: _ } = e;
          if (t !== _ && o !== _) return !1;
          {
            let e = s.get(_);
            if (null == e) return !1;
            s.set(_, { ...e, hidden: !0 });
          }
        },
        PICTURE_IN_PICTURE_SHOW: function (e) {
          let { id: _ } = e;
          if (t !== _ && o !== _) return !1;
          {
            let e = s.get(_);
            if (null == e) return !1;
            s.set(_, { ...e, hidden: !1 });
          }
        },
        PICTURE_IN_PICTURE_UPDATE_RECT: function (e) {
          let { id: _, rect: E } = e;
          S[_] = E;
        },
        PICTURE_IN_PICTURE_UPDATE_SELECTED_WINDOW: function (e) {
          let { id: _ } = e,
            E = s.get(_);
          null != E &&
            (E.component === i.PictureInPictureComponents.VIDEO
              ? (t = _)
              : E.component === i.PictureInPictureComponents.EMBED_IFRAME &&
                (o = _));
        },
        LOGOUT: function () {
          (t = null), (o = null), (s = new Map());
        },
      });
    },
    608421: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return i;
          },
        }),
        E("222007");
      var t = E("913144"),
        o = E("689988"),
        n = E("101125");
      class r extends o.default {
        constructor(...e) {
          super(...e), (this.stores = new Map().set(n.default, a));
        }
      }
      function a() {
        t.default.dispatch({
          type: "SELF_PRESENCE_STORE_UPDATE",
          status: n.default.getStatus(),
          activities: n.default.getActivities(),
        });
      }
      var i = new r();
    },
    783252: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return A;
          },
        }),
        E("222007");
      var t = E("913144"),
        o = E("689988"),
        n = E("271938"),
        r = E("366679"),
        a = E("42203"),
        i = E("18494"),
        I = E("123647"),
        s = E("49111");
      function T() {
        !(function () {
          let e = i.default.getVoiceChannelId(),
            _ = r.default.bitrate;
          if (null == e) return;
          let E = a.default.getChannel(e);
          if (null != E)
            _ !== E.bitrate &&
              t.default.dispatch({
                type: "SET_CHANNEL_BITRATE",
                bitrate: E.bitrate,
              });
        })(),
          !(function () {
            var e;
            let _ = i.default.getVoiceChannelId(),
              E = I.default.mode;
            if (null == _) return;
            let o = a.default.getChannel(_);
            if (null == o) return;
            let n =
              null !== (e = o.videoQualityMode) && void 0 !== e
                ? e
                : s.VideoQualityMode.AUTO;
            E !== n &&
              t.default.dispatch({
                type: "SET_CHANNEL_VIDEO_QUALITY_MODE",
                mode: n,
              });
          })();
      }
      function S(e) {
        let { channels: _ } = e;
        for (let e of _) i.default.getVoiceChannelId() === e.id && T();
      }
      function N(e) {
        let { voiceStates: _ } = e;
        _.forEach(e => {
          n.default.getSessionId() === e.sessionId && T();
        });
      }
      class O extends o.default {
        constructor(...e) {
          super(...e),
            (this.actions = { CHANNEL_UPDATES: S, VOICE_STATE_UPDATES: N });
        }
      }
      var A = new O();
    },
    551184: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return T;
          },
        });
      var t = E("37983"),
        o = E("884691"),
        n = E("414456"),
        r = E.n(n),
        a = E("77078"),
        i = E("258179");
      let I = { SMALL: i.sizeSmall, MEDIUM: i.sizeMedium, LARGE: i.sizeLarge };
      class s extends o.PureComponent {
        calculateScroll() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : this._scroller;
          if (null == e) return;
          let { scrollTop: _ } = e.getScrollerState(),
            { hideSeparator: E } = this.state;
          0 !== _ || E
            ? _ > 0 && E && this.setState({ hideSeparator: !1 })
            : this.setState({ hideSeparator: !0 });
        }
        getScroller() {
          return this._scroller;
        }
        renderChildren() {
          let { hideSeparator: e } = this.state;
          return o.Children.map(this.props.children, _ =>
            o.isValidElement(_)
              ? _.type === a.ModalContent || _.type === a.ModalListContent
                ? o.cloneElement(_, {
                    scrollerRef: this.setRef,
                    onScroll: this.handleScroll,
                    onResize: this.handleScroll,
                  })
                : _.type === a.ModalHeader && e
                  ? o.cloneElement(_, { separator: !1 })
                  : _
              : _
          );
        }
        render() {
          let {
            className: e,
            children: _,
            tag: E,
            size: o,
            fullscreenOnMobile: n,
            ...a
          } = this.props;
          return (0, t.jsx)(E, {
            className: r(i.modal, e, o, { [i.fullscreenOnMobile]: n }),
            ...a,
            children: this.renderChildren(),
          });
        }
        constructor(e) {
          super(e),
            (this._scroller = null),
            (this.setRef = e => {
              (this._scroller = e), null != e && this.calculateScroll();
            }),
            (this.handleScroll = e => {
              this.calculateScroll();
              let { onScroll: _ } = this.props;
              null == _ || _(e);
            }),
            (this.state = { hideSeparator: !1 });
        }
      }
      (s.Header = a.ModalHeader),
        (s.Footer = a.ModalFooter),
        (s.Content = a.ModalContent),
        (s.ListContent = a.ModalListContent),
        (s.CloseButton = a.ModalCloseButton),
        (s.Sizes = I),
        (s.defaultProps = {
          fullscreenOnMobile: !0,
          size: I.SMALL,
          tag: "div",
        });
      var T = s;
    },
    659500: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          ComponentDispatcher: function () {
            return n;
          },
          ComponentDispatch: function () {
            return r;
          },
        }),
        E("222007"),
        E("424973");
      var t = E("44170");
      E("704744");
      var o = E("605250");
      E("49111");
      class n {
        safeDispatch(e) {
          for (
            var _, E = arguments.length, t = Array(E > 1 ? E - 1 : 0), o = 1;
            o < E;
            o++
          )
            t[o - 1] = arguments[o];
          if (!this.hasSubscribers(e)) {
            let [E] = t,
              o = (this._savedDispatches[e] =
                null !== (_ = this._savedDispatches[e]) && void 0 !== _
                  ? _
                  : []);
            return o.push(E), this;
          }
          return this.dispatch(e, ...t);
        }
        dispatch(e, _) {
          return Date.now(), this.emitter.emit(e, _), this;
        }
        dispatchToLastSubscribed(e, _) {
          Date.now();
          {
            let E = this.emitter.listeners(e);
            return E.length > 0 && E[E.length - 1](_), this;
          }
        }
        hasSubscribers(e) {
          return this.emitter.listenerCount(e) > 0;
        }
        _checkSavedDispatches(e) {
          let _ = this._savedDispatches[e];
          null != _ &&
            (_.forEach(_ => {
              this.dispatch(e, _);
            }),
            (this._savedDispatches[e] = void 0));
        }
        subscribe(e, _) {
          let E = this.emitter.listeners(e);
          return E.indexOf(_) >= 0
            ? (new (0, o.default)("ComponentDispatchUtils").warn(
                "ComponentDispatch.subscribe: Attempting to add a duplicate listener",
                e
              ),
              this)
            : (this.emitter.on(e, _), this._checkSavedDispatches(e), this);
        }
        subscribeOnce(e, _) {
          return this.emitter.once(e, _), this._checkSavedDispatches(e), this;
        }
        resubscribe(e, _) {
          let E = this.emitter.listeners(e);
          if (!E.includes(_))
            return (
              new (0, o.default)("ComponentDispatchUtils").warn(
                "ComponentDispatch.resubscribe: Resubscribe without existing subscription",
                e
              ),
              this
            );
          this.emitter.off(e, _), this.emitter.on(e, _);
        }
        unsubscribe(e, _) {
          return this.emitter.removeListener(e, _), this;
        }
        reset() {
          return this.emitter.removeAllListeners(), this;
        }
        dispatchKeyed(e, _) {
          for (
            var E = arguments.length, t = Array(E > 2 ? E - 2 : 0), o = 2;
            o < E;
            o++
          )
            t[o - 2] = arguments[o];
          return this.dispatch("".concat(e, "_").concat(_), ...t);
        }
        subscribeKeyed(e, _, E) {
          return this.subscribe("".concat(e, "_").concat(_), E);
        }
        unsubscribeKeyed(e, _, E) {
          return this.unsubscribe("".concat(e, "_").concat(_), E);
        }
        constructor() {
          (this.emitter = new t.EventEmitter()),
            (this._savedDispatches = {}),
            this.emitter.setMaxListeners(100);
        }
      }
      let r = new n();
    },
    423670: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          getUpdatedOptions: function () {
            return n;
          },
        });
      var t = E("377678"),
        o = E("913144");
      function n(e) {
        return {
          ...e,
          extra: {
            ...(null == e ? void 0 : e.extra),
            ...{
              ...(null != o.default._currentDispatchActionType
                ? { currentAction: o.default._currentDispatchActionType }
                : {}),
              lastFewActions: (0, t.serialize)(),
            },
          },
        };
      }
    },
    773336: function (e, _, E) {
      "use strict";
      var t, o;
      E.r(_),
        E.d(_, {
          PlatformTypes: function () {
            return t;
          },
          isPlatformEmbedded: function () {
            return r;
          },
          isWindows: function () {
            return i;
          },
          isMac: function () {
            return I;
          },
          isLinux: function () {
            return s;
          },
          isDesktop: function () {
            return T;
          },
          isWeb: function () {
            return S;
          },
          isAndroidChrome: function () {
            return N;
          },
          isAndroidWeb: function () {
            return O;
          },
          isAndroid: function () {
            return A;
          },
          isIOS: function () {
            return R;
          },
          getPlatform: function () {
            return l;
          },
          getPlatformName: function () {
            return L;
          },
          getNativePlatform: function () {
            return u;
          },
          getOS: function () {
            return C;
          },
        }),
        ((o = t || (t = {})).WINDOWS = "WINDOWS"),
        (o.OSX = "OSX"),
        (o.LINUX = "LINUX"),
        (o.WEB = "WEB");
      let n = window.DiscordNative,
        r = null != n,
        a = null != n ? n.process.platform : "";
      function i() {
        return /^win/.test(a);
      }
      function I() {
        return "darwin" === a;
      }
      function s() {
        return "linux" === a;
      }
      function T() {
        return i() || I() || s();
      }
      function S() {
        return "WEB" === l();
      }
      function N() {
        return (
          null != navigator.userAgent &&
          null !=
            navigator.userAgent
              .toLowerCase()
              .match("(android ).+chrome/[.0-9]* mobile")
        );
      }
      function O() {
        var e;
        return (
          (null === (e = navigator.userAgent) || void 0 === e
            ? void 0
            : e.match(/android/i)) != null
        );
      }
      function A() {
        return "android" === a;
      }
      function R() {
        return "ios" === a;
      }
      function l() {
        return i() ? "WINDOWS" : I() ? "OSX" : s() ? "LINUX" : "WEB";
      }
      function L() {
        return a;
      }
      function u() {
        switch (a) {
          case "ios":
          case "android":
            return a;
          default:
            return "web";
        }
      }
      function C() {
        let { userAgent: e } = window.navigator;
        if (/Windows/i.test(e))
          return /Phone/.test(e) ? "windows mobile" : "windows";
        if (/(iPhone|iPad|iPod)/.test(e)) return "ios";
        if (/Android/.test(e)) return "android";
        else if (/(BlackBerry|PlayBook|BB10)/i.test(e)) return "blackberry";
        else if (/Mac/i.test(e))
          return null != window.navigator.maxTouchPoints &&
            window.navigator.maxTouchPoints > 2
            ? "ios"
            : "macos";
        else if (/Linux/i.test(e)) return "linux";
      }
    },
    642754: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          showPendingNotification: function () {
            return T;
          },
          showAcceptedNotification: function () {
            return S;
          },
        });
      var t = E("450911"),
        o = E("630086"),
        n = E("193990"),
        r = E("393414"),
        a = E("315102"),
        i = E("49111"),
        I = E("782340");
      function s(e, _, E) {
        n.default.showNotification(
          a.default.getUserAvatarURL(e),
          e.username,
          _,
          {},
          { omitViewTracking: !0, omitClickTracking: !0, tag: e.id, onClick: E }
        );
      }
      function T(e) {
        s(e, I.default.Messages.NOTIFICATION_PENDING_FRIEND_REQUEST, () => {
          {
            let { openUserProfileModal: _ } = E("401642");
            _({ userId: e.id });
          }
          (0, r.transitionTo)(i.Routes.FRIENDS),
            o.default.setSection(i.FriendsSections.PENDING);
        });
      }
      function S(e) {
        s(e, I.default.Messages.NOTIFICATION_ACCEPTED_FRIEND_REQUEST, () => {
          t.default.openPrivateChannel(e.id);
        });
      }
    },
    286235: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          DSN: function () {
            return a;
          },
          default: function () {
            return I;
          },
        }),
        E("70102");
      var t = E("303167"),
        o = E("423670"),
        n = E("773336"),
        r = E("50885");
      let a = "https://fa97a90475514c03a42f80cd36d147c4@sentry.io/140984";
      function i() {
        var e, _, E, t, o, a;
        let i =
          arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
        n.isPlatformEmbedded &&
          r.default.updateCrashReporter({
            user_id: null !== (e = i.id) && void 0 !== e ? e : "",
            username: null !== (_ = i.username) && void 0 !== _ ? _ : "",
            email: null !== (E = i.email) && void 0 !== E ? E : "",
            sentry: {
              user: {
                id: null !== (t = i.id) && void 0 !== t ? t : "",
                username: null !== (o = i.username) && void 0 !== o ? o : "",
                email: null !== (a = i.email) && void 0 !== a ? a : "",
              },
            },
          });
      }
      var I = {
        setUser(e, _, E, t) {
          let o = { id: e, username: _, email: E, staff: t };
          null != window.DiscordSentry &&
            window.DiscordSentry.configureScope(e => {
              e.setUser(o);
            }),
            i(o);
        },
        clearUser() {
          null != window.DiscordSentry &&
            window.DiscordSentry.configureScope(e => {
              e.setUser(null);
            }),
            i();
        },
        setTags(e) {
          null != window.DiscordSentry &&
            window.DiscordSentry.configureScope(_ => {
              _.setTags(e);
            });
        },
        setExtra(e) {
          null != window.DiscordSentry &&
            window.DiscordSentry.configureScope(_ => {
              _.setExtras(e);
            });
        },
        captureException(e, _) {
          let E = (0, o.getUpdatedOptions)(_);
          null != window.DiscordSentry &&
            window.DiscordSentry.withScope(_ => {
              null != E.tags && _.setTags(E.tags),
                _.setExtras(E.extra),
                window.DiscordSentry.captureException(e);
            });
        },
        captureCrash(e, _) {
          let E;
          let t = (0, o.getUpdatedOptions)(_);
          return (
            null != window.DiscordSentry &&
              window.DiscordSentry.withScope(_ => {
                _.setExtras(t.extra),
                  _.setTag("crash", "true"),
                  (E = window.DiscordSentry.captureException(e));
              }),
            E
          );
        },
        captureMessage(e, _) {
          let E = (0, o.getUpdatedOptions)(_);
          null != window.DiscordSentry &&
            window.DiscordSentry.withScope(_ => {
              null != E.tags && _.setTags(E.tags),
                _.setExtras(E.extra),
                window.DiscordSentry.captureMessage(e);
            });
        },
        addBreadcrumb(e) {
          (0, t.default)(e);
        },
        profiledRootComponent: e => e,
        crash() {
          throw Error("crash");
        },
      };
    },
    50885: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          NativePermissionRequestType: function () {
            return a;
          },
          ThumbarButtonName: function () {
            return i;
          },
          default: function () {
            return g;
          },
        }),
        E("222007"),
        E("70102"),
        E("511434"),
        E("313619"),
        E("654714"),
        E("287168"),
        E("956660"),
        E("424973");
      var t,
        o,
        n,
        r,
        a,
        i,
        I,
        s,
        T = E("627445"),
        S = E.n(T),
        N = E("817792"),
        O = E("872717"),
        A = E("95410"),
        R = E("115718"),
        l = E("773336"),
        L = E("49111"),
        u = E("446825").Buffer;
      let C = window.DiscordNative,
        D = ["jpg", "jpeg", "png"],
        c = null,
        d = null,
        U = null,
        M = {};
      null != C &&
        ((c = C.remoteApp
          .getVersion()
          .split(".")
          .map(e => parseInt(e))),
        (U =
          null === (t = (o = C.remoteApp).getModuleVersions) || void 0 === t
            ? void 0
            : t.call(o)),
        (d =
          null === (n = (r = C.remoteApp).getBuildNumber) || void 0 === n
            ? void 0
            : n.call(r)));
      let h = new Set([
          "discord_erlpack",
          "discord_game_utils",
          "discord_rpc",
          "discord_spellcheck",
          "discord_utils",
          "discord_voice",
        ]),
        P = !1;
      async function m(e) {
        let _ = await fetch(new Request(e, { method: "GET", mode: "cors" }));
        S(200 === _.status, "Data fetch unsuccessful");
        let E = await _.arrayBuffer();
        return S(null != E, "Data is null"), E;
      }
      function G(e) {
        return m(e);
      }
      function p(e) {
        var _, E, t, o, n, r, a, i;
        return {
          id: M[null !== (_ = e.id) && void 0 !== _ ? _ : ""],
          nativeProcessObserverId: parseInt(
            null !== (E = e.id) && void 0 !== E ? E : "",
            10
          ),
          name: null !== (t = e.gameName) && void 0 !== t ? t : e.name,
          processName: null !== (o = e.name) && void 0 !== o ? o : "",
          hidden: e.hidden,
          elevated: e.elevated,
          sandboxed: null !== (n = e.sandboxed) && void 0 !== n && n,
          lastFocused: e.lastFocused,
          exePath: e.exePath,
          exeName: e.exeName,
          cmdLine: e.cmdLine,
          distributor: e.distributor,
          sku: e.sku,
          pid: e.pid,
          pidPath: null !== (r = e.pidPath) && void 0 !== r ? r : [],
          windowHandle:
            null !== (a = e.windowHandle) && void 0 !== a ? a : null,
          fullscreenType:
            null !== (i = e.fullscreenType) && void 0 !== i
              ? i
              : R.RunningProcessFullscreenType.UNKNOWN,
        };
      }
      ((I = a || (a = {}))[(I.Camera = 0)] = "Camera"),
        (I[(I.Microphone = 1)] = "Microphone"),
        (I[(I.Photo = 2)] = "Photo"),
        (I[(I.InputMonitoring = 3)] = "InputMonitoring"),
        (I[(I.ScreenRecording = 4)] = "ScreenRecording"),
        ((s = i || (i = {})).VIDEO = "VIDEO"),
        (s.MUTE = "MUTE"),
        (s.DEAFEN = "DEAFEN"),
        (s.DISCONNECT = "DISCONNECT");
      var g = {
        requireModule: e => C.nativeModules.requireModule(e),
        ensureModule: e =>
          l.isPlatformEmbedded
            ? __OVERLAY__ && h.has(e)
              ? Promise.resolve()
              : C.nativeModules.ensureModule(e)
            : Promise.reject(Error("not embedded")),
        get canBootstrapNewUpdater() {
          return C.nativeModules.canBootstrapNewUpdater || !1;
        },
        getCrashReporterMetadata: () => C.crashReporter.getMetadata(),
        getSetting: async (e, _) => await C.settings.get(e, _),
        beforeUnload() {
          let e;
          try {
            e = this.requireModule("discord_overlay2");
          } catch (e) {}
          e && e.reset && e.reset(),
            e &&
              e.disconnectAllProcesses &&
              e.destroyHostProcess &&
              (e.disconnectAllProcesses(), e.destroyHostProcess()),
            C.remotePowerMonitor.removeAllListeners(),
            window.location.origin ===
              window.GLOBAL_ENV.MIGRATION_SOURCE_ORIGIN &&
              !0 !== A.default.get(N.DOMAIN_MIGRATION_SUCCESS_KEY) &&
              this.supportsFeature(L.NativeFeatures.USER_DATA_CACHE) &&
              C.userDataCache.cacheUserData(A.default.stringify());
        },
        inputEventRegister(e, _, E, t) {
          !Array.isArray(_) && (_ = _.toJS()),
            this.getDiscordUtils().inputEventRegister(
              parseInt(e),
              _.map(e => {
                let [_, E, t] = e;
                return "string" == typeof t ? [_, E, t] : [_, E];
              }),
              E,
              t
            );
        },
        inputEventUnregister(e) {
          this.getDiscordUtils().inputEventUnregister(parseInt(e));
        },
        setOnInputEventCallback(e) {
          l.isPlatformEmbedded && this.getDiscordUtils().inputWatchAll(e);
        },
        setFocused(e) {
          this.getDiscordUtils().inputSetFocused(e);
        },
        setObservedGamesCallback(e, _) {
          try {
            M = {};
            let E = 0;
            this.getDiscordUtils().setObservedGamesCallback(
              e.map(e => {
                let _ = ++E;
                return (
                  null != e.id && (M[_] = e.id),
                  { ...e, cmdline: e.cmdLine, id: _ }
                );
              }),
              e => _(e.map(p))
            );
          } catch (e) {}
        },
        setCandidateGamesCallback(e) {
          this.getDiscordUtils().setCandidateGamesCallback(_ => e(_.map(p)));
        },
        clearCandidateGamesCallback() {
          this.getDiscordUtils().clearCandidateGamesCallback();
        },
        setGameCandidateOverrides(e) {
          this.getDiscordUtils().setGameCandidateOverrides(
            e.map(e => ({ ...e, gameId: e.id, gameName: e.name }))
          );
        },
        shouldDisplayNotifications() {
          return this.getDiscordUtils().shouldDisplayNotifications();
        },
        getVoiceEngine() {
          if (__OVERLAY__)
            throw Error("cannot require discord_voice in overlay");
          return (P = !0), this.requireModule("discord_voice");
        },
        getDiscordUtils() {
          if (!P)
            try {
              this.getVoiceEngine();
            } catch (e) {}
          return this.requireModule("discord_utils");
        },
        isSystemDarkMode() {
          var e, _, E;
          return (
            !!(0, l.isWindows)() &&
            (null ===
              (E =
                null === (e = (_ = this.getDiscordUtils()).isSystemDarkMode) ||
                void 0 === e
                  ? void 0
                  : e.call(_)) ||
              void 0 === E ||
              E)
          );
        },
        getGameUtils() {
          return this.requireModule("discord_game_utils");
        },
        getCloudSync() {
          return this.requireModule("discord_cloudsync");
        },
        getDispatch() {
          return this.requireModule("discord_dispatch");
        },
        setBadge(e) {
          if ("darwin" === (0, l.getPlatformName)()) {
            let _ = "";
            -1 === e ? (_ = "•") : e > 0 && (_ = "".concat(e)),
              C.remoteApp.dock.setBadge(_);
          } else
            "win32" === (0, l.getPlatformName)()
              ? this.send("APP_BADGE_SET", e)
              : "linux" === (0, l.getPlatformName)() &&
                C.remoteApp.setBadgeCount(e >= 0 ? e : 0);
        },
        setSystemTrayIcon(e) {
          l.isPlatformEmbedded && this.send("SYSTEM_TRAY_SET_ICON", e);
        },
        setThumbarButtons(e) {
          var _, E;
          l.isPlatformEmbedded &&
            (null === (E = C.thumbar) ||
              void 0 === E ||
              null === (_ = E.setThumbarButtons) ||
              void 0 === _ ||
              _.call(E, e, this.isSystemDarkMode()));
        },
        bounceDock(e) {
          if (l.isPlatformEmbedded) {
            let _ = C.remoteApp;
            if (null != _.dock) {
              let E = _.dock.bounce(e);
              return async () => {
                let e = await E;
                _.dock.cancelBounce(e);
              };
            }
          }
        },
        setSystemTrayApplications(e) {
          l.isPlatformEmbedded && this.send("SYSTEM_TRAY_SET_APPLICATIONS", e);
        },
        get architecture() {
          return l.isPlatformEmbedded ? C.process.arch : "";
        },
        get releaseChannel() {
          if (!l.isPlatformEmbedded) return "";
          let e = C.remoteApp.getReleaseChannel();
          if (null != e) return e;
          return "";
        },
        get version() {
          return c;
        },
        get buildNumber() {
          return d;
        },
        get moduleVersions() {
          return U;
        },
        copy(e) {
          l.isPlatformEmbedded && C.clipboard.copy(e);
        },
        async copyImage(e) {
          S(
            l.isPlatformEmbedded,
            "Copy image method called outside native app"
          ),
            S(
              "function" == typeof C.clipboard.copyImage,
              "Copy image not supported"
            );
          let _ = await m(e);
          C.clipboard.copyImage(u.from(_), e);
        },
        async saveImage(e) {
          var _;
          S(
            l.isPlatformEmbedded,
            "Save image method called outside native app"
          );
          let E = new URL(e),
            t =
              null !== (_ = E.pathname.split("/").pop()) && void 0 !== _
                ? _
                : "unknown",
            o = await m(e),
            n = u.from(o);
          C.fileManager.saveWithDialog(n, t);
        },
        async saveFile(e, _) {
          var E;
          S(l.isPlatformEmbedded, "Save file method called outside native app");
          let t = new URL(e),
            o =
              null !== (E = null != _ ? _ : t.pathname.split("/").pop()) &&
              void 0 !== E
                ? E
                : "unknown",
            n = await m(e),
            r = u.from(n);
          C.fileManager.saveWithDialog(r, o);
        },
        canCopyImage() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : void 0;
          if (null != e) {
            var _;
            let E = new URL(e).pathname,
              t =
                null === (_ = E.split(".").pop()) || void 0 === _
                  ? void 0
                  : _.toLowerCase();
            if (null != t && !D.includes(t)) return !1;
          }
          return "function" == typeof C.clipboard.copyImage;
        },
        cut() {
          l.isPlatformEmbedded && C.clipboard.cut();
        },
        paste() {
          l.isPlatformEmbedded && C.clipboard.paste();
        },
        readClipboard: () => (l.isPlatformEmbedded ? C.clipboard.read() : ""),
        on(e, _) {
          C.ipc.on(e, _);
        },
        invoke(e) {
          for (
            var _ = arguments.length, E = Array(_ > 1 ? _ - 1 : 0), t = 1;
            t < _;
            t++
          )
            E[t - 1] = arguments[t];
          return C.ipc.invoke(e, ...E);
        },
        send(e) {
          for (
            var _ = arguments.length, E = Array(_ > 1 ? _ - 1 : 0), t = 1;
            t < _;
            t++
          )
            E[t - 1] = arguments[t];
          C.ipc.send(e, ...E);
        },
        flashFrame(e) {
          C.window.flashFrame(e);
        },
        webAuthnRegister: e =>
          C.nativeModules
            .ensureModule("discord_webauthn")
            .then(() => C.webAuthn.webAuthnRegister(e)),
        webAuthnAuthenticate: e =>
          C.nativeModules
            .ensureModule("discord_webauthn")
            .then(() => C.webAuthn.webAuthnAuthenticate(e)),
        minimize(e) {
          C.window.minimize(e);
        },
        restore(e) {
          C.window.restore(e);
        },
        maximize(e) {
          C.window.maximize(e);
        },
        focus(e) {
          let _ =
            arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
          _ && (0, l.isWindows)() && this.minimize(null), C.window.focus(_, e);
        },
        blur() {
          l.isPlatformEmbedded && null != C.window.blur
            ? C.window.blur()
            : window.blur();
        },
        fullscreen(e) {
          C.window.fullscreen(e);
        },
        close(e) {
          C.window.close(e);
        },
        setAlwaysOnTop(e, _) {
          "function" == typeof C.window.setAlwaysOnTop &&
            C.window.setAlwaysOnTop(e, _);
        },
        async isAlwaysOnTop(e) {
          let _ = !1;
          return (
            "function" == typeof C.window.isAlwaysOnTop &&
              (_ = await C.window.isAlwaysOnTop(e)),
            _
          );
        },
        purgeMemory() {
          l.isPlatformEmbedded && C.processUtils.purgeMemory();
        },
        updateCrashReporter(e) {
          C.crashReporter.updateCrashReporter(e);
        },
        triggerJSException(e) {
          C.crashReporter.triggerJSException(e);
        },
        flushDNSCache() {
          l.isPlatformEmbedded && C.processUtils.flushDNSCache();
        },
        supportsFeature: e => C.features.supports(e),
        getEnableHardwareAcceleration: () =>
          !l.isPlatformEmbedded ||
          (!__OVERLAY__ && C.gpuSettings.getEnableHardwareAcceleration()),
        setEnableHardwareAcceleration(e) {
          C.gpuSettings.setEnableHardwareAcceleration(e);
        },
        getGPUDriverVersions() {
          return (0, l.isWindows)() &&
            null != this.getDiscordUtils().getGPUDriverVersions
            ? this.getDiscordUtils().getGPUDriverVersions()
            : Promise.resolve(Object.freeze({}));
        },
        setZoomFactor: e =>
          !!l.isPlatformEmbedded && (C.window.setZoomFactor(e), !0),
        setBackgroundThrottling(e) {
          null != C.window.setBackgroundThrottling
            ? C.window.setBackgroundThrottling(e)
            : C.window.webContents.setBackgroundThrottling(e);
        },
        getPidFromDesktopSource(e) {
          if (
            !((0, l.isWindows)() || (0, l.isMac)()) ||
            null == this.getDiscordUtils().getPidFromWindowHandle
          )
            return null;
          let _ = null == e ? void 0 : e.split(":"),
            E = null == _ ? void 0 : _[0];
          if ("window" === E) {
            var t;
            let e =
                null !== (t = null == _ ? void 0 : _[1]) && void 0 !== t
                  ? t
                  : "",
              E = this.getDiscordUtils().getPidFromWindowHandle(e);
            return null == E || 0 === E ? null : E;
          }
          if (E.startsWith("screen")) return 1;
          return null;
        },
        getDesktopSourceFromPid(e) {
          if (
            !(0, l.isWindows)() ||
            null == this.getDiscordUtils().getWindowHandleFromPid ||
            null == e
          )
            return null;
          let _ = this.getDiscordUtils().getWindowHandleFromPid(e);
          return null == _ || 0 === _.length
            ? null
            : ["window", _, "0"].join(":");
        },
        generateSessionFromPid(e) {
          return this.getDiscordUtils().generateSessionFromPid(e);
        },
        getAudioPid(e) {
          return null == this.getDiscordUtils().getAudioPid || null == e
            ? e
            : this.getDiscordUtils().getAudioPid(e);
        },
        setForegroundProcess(e) {
          let { setForegroundProcess: _ } = this.getDiscordUtils();
          return null != _ && _(e);
        },
        getDiscordMemoryUsage() {
          let { getDiscordMemoryUsage: e } = this.getDiscordUtils();
          return null != e ? e() : null;
        },
        getDiscordMemoryUsageElectronRenderer() {
          let { getDiscordMemoryUsageElectronRenderer: e } =
            this.getDiscordUtils();
          return null == e ? void 0 : e();
        },
        showOpenDialog: e => C.fileManager.showOpenDialog({ properties: e }),
        flushStorageData: () =>
          l.isPlatformEmbedded
            ? new Promise((e, _) => {
                null != C.processUtils.flushStorageData
                  ? C.processUtils.flushStorageData(E =>
                      null != E ? _(Error(E)) : e()
                    )
                  : e();
              })
            : Promise.resolve(),
        flushCookies: () =>
          l.isPlatformEmbedded
            ? new Promise((e, _) => {
                null != C.processUtils.flushCookies
                  ? C.processUtils.flushCookies(E =>
                      null != E ? _(Error(E)) : e()
                    )
                  : e();
              })
            : Promise.resolve(),
        setCrashInformation(e, _) {
          var E;
          l.isPlatformEmbedded &&
            (null == C
              ? void 0
              : null === (E = C.processUtils) || void 0 === E
                ? void 0
                : E.setCrashInformation) != null &&
            C.processUtils.setCrashInformation(e, _);
        },
        blockDisplaySleep: () =>
          l.isPlatformEmbedded && null != C.powerSaveBlocker
            ? C.powerSaveBlocker.blockDisplaySleep()
            : null,
        unblockDisplaySleep(e) {
          l.isPlatformEmbedded &&
            null != C.powerSaveBlocker &&
            C.powerSaveBlocker.unblockDisplaySleep(e);
        },
        cleanupDisplaySleep() {
          l.isPlatformEmbedded &&
            null != C.powerSaveBlocker &&
            C.powerSaveBlocker.cleanupDisplaySleep();
        },
        relaunch() {
          l.isPlatformEmbedded &&
            null != C.remoteApp.relaunch &&
            C.remoteApp.relaunch();
        },
        makeChunkedRequest(e, _, E) {
          let t = "".concat(O.default.getAPIBaseURL()).concat(e);
          if (!l.isPlatformEmbedded)
            return Promise.reject(Error("Not embedded!"));
          if (null == C.http)
            return Promise.reject(Error("HTTP module not available"));
          let {
              method: o,
              maxBps: n,
              token: r,
              chunkInterval: a,
              contentType: i,
            } = {
              maxBps: 8e3,
              chunkInterval: 50,
              contentType: "application/json",
              ...E,
            },
            I = _;
          "application/json" === i && (I = JSON.stringify(_));
          let s = n * (a / 1e3),
            T = Math.ceil(I.length / s),
            S = Array(T);
          for (let e = 0; e < T; e++) {
            let _ = e * s;
            S[e] = I.substring(_, _ + s);
          }
          return new Promise((e, _) => {
            null != C.http &&
              C.http.makeChunkedRequest(
                t,
                S,
                { method: o, chunkInterval: a, contentType: i, token: r },
                (E, t) =>
                  null != E
                    ? _(E)
                    : t.status >= 400
                      ? _(Error(t.body))
                      : void e(t)
              );
          });
        },
        submitLiveCrashReport(e) {
          if (
            !(0, l.isWindows)() ||
            null == this.getDiscordUtils().submitLiveCrashReport
          )
            return Promise.resolve();
          let _ = this.getCrashReporterMetadata(),
            E = C.app.getReleaseChannel(),
            t = null == _ ? void 0 : _.sentry;
          return this.getDiscordUtils().submitLiveCrashReport(E, {
            ...t,
            ...e,
          });
        },
        crash(e) {
          let _ = this.getDiscordUtils().crash;
          return null != _ && (_(e), !0);
        },
        setApplicationBackgroundColor(e) {
          C.ipc.send("SETTINGS_UPDATE_BACKGROUND_COLOR", e);
        },
        initializeExitHook() {
          let { initializeExitHook: e } = this.getDiscordUtils();
          null != e && e();
        },
        asyncify: e =>
          new Promise((_, E) => {
            e(_);
          }),
        IsGameDisplayModeUpdateSupported() {
          let { gameDisplayModeUpdate: e } = this.getDiscordUtils();
          return null != e;
        },
        GameDisplayModeUpdate(e) {
          let { gameDisplayModeUpdate: _ } = this.getDiscordUtils();
          return null != _ && null != e && _(e);
        },
        GameDisplayModeIsGameSupported(e) {
          let { gameDisplayModeIsSupported: _ } = this.getDiscordUtils();
          return null != _ && null != e && _(e);
        },
        GetWindowFullscreenTypeByPid(e, _, E) {
          var t;
          let { getWindowFullscreenTypeByPid: o } = this.getDiscordUtils(),
            n = 0 !== e && null != o && null != _ ? o(e, _) : null;
          return (
            -1 === n && (n = null),
            null !== (t = null != n ? n : E) && void 0 !== t
              ? t
              : R.RunningProcessFullscreenType.UNKNOWN
          );
        },
        isModuleVersionAtLeast(e, _) {
          var E, t, o;
          let n = [...(null != c ? c : [0, 0, 0])];
          n.push(
            null !==
              (t =
                null === (E = this.moduleVersions) || void 0 === E
                  ? void 0
                  : E[e]) && void 0 !== t
              ? t
              : 0
          );
          let r =
            null !== (o = _[this.releaseChannel]) && void 0 !== o
              ? o
              : _.stable;
          for (let [e, _] of n.entries()) {
            if (_ > r[e]) break;
            if (_ < r[e]) return !1;
          }
          return !0;
        },
      };
    },
    799895: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return M;
          },
        }),
        E("222007"),
        E("860677");
      var t,
        o = E("917351"),
        n = E.n(o),
        r = E("597755"),
        a = E.n(r),
        i = E("49671"),
        I = E("385649"),
        s = E("102985"),
        T = E("599110"),
        S = E("773336"),
        N = E("709681"),
        O = E("50885"),
        A = E("49111");
      let R = S.isPlatformEmbedded && (0, S.isWindows)(),
        l = R && 10 > parseFloat(i.default.os.release),
        L = !0;
      if (R && !l) {
        let [e, , _] = i.default.os.release.split(".");
        L = parseInt(e) > 10 || parseInt(_) >= 15063;
      }
      let u =
          (R && L) ||
          ("Chrome" === a.name && 47 > parseFloat(a.version)) ||
          ("Firefox" === a.name && 52 > parseFloat(a.version)),
        C = n.throttle(N.playSound, 1e3, { leading: !0 });
      function D() {
        O.default.flashFrame(!1);
      }
      R &&
        (window.addEventListener("focus", D),
        O.default.on("MAIN_WINDOW_FOCUS", D));
      let Notification = window.Notification;
      if (l) {
        let e = {};
        O.default.on("NOTIFICATION_CLICK", (_, E) => {
          let t = e[E];
          null != t && (t.onclick(), t.close());
        }),
          O.default.send("NOTIFICATIONS_CLEAR"),
          ((t = class {
            static requestPermission(e) {
              e();
            }
            close() {
              null != e[this.id] &&
                (delete e[this.id],
                O.default.send("NOTIFICATION_CLOSE", this.id),
                this.onclose());
            }
            constructor(_, { body: E, icon: t }) {
              (this.id = Notification._id++),
                (this.onshow = function () {}),
                (this.onclick = function () {}),
                (this.onclose = function () {}),
                (this.title = _),
                (this.body = E),
                (this.icon = t),
                setImmediate(() => this.onshow()),
                (e[this.id] = this),
                O.default.send("NOTIFICATION_SHOW", {
                  id: this.id,
                  title: this.title,
                  body: this.body,
                  icon: this.icon,
                });
            }
          }).permission = "granted"),
          (t._id = 0),
          (Notification = t);
      }
      function c() {
        return null != Notification && "granted" === Notification.permission;
      }
      function d(e) {
        let _ =
          arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 1;
        e.includes("message") ? C(e, _) : (0, N.playSound)(e, _);
      }
      function U(e) {
        return (
          (s.default.disableNotifications && null == e.overrideStreamerMode) ||
          !c() ||
          (S.isPlatformEmbedded && !O.default.shouldDisplayNotifications())
        );
      }
      var M = {
        hasPermission: c,
        requestPermission: function (e) {
          null != Notification &&
            Notification.requestPermission(() => {
              null != e && e(c());
            });
        },
        showNotification: function (e, _, E, t, o) {
          var r, a, i, s;
          let N;
          if (U(o)) {
            null != o.sound &&
              !1 !== o.playSoundIfDisabled &&
              d(o.sound, null !== (a = o.volume) && void 0 !== a ? a : 1);
            return;
          }
          null != o.sound &&
            d(o.sound, null !== (i = o.volume) && void 0 !== i ? i : 1);
          let l =
            null !== (s = null == o ? void 0 : o.tag) && void 0 !== s
              ? s
              : null;
          (0, S.isLinux)() && (E = n.escape(E));
          let C = { icon: e, body: E, tag: l, silent: !0 };
          R && I.default.taskbarFlash && O.default.flashFrame(!0);
          try {
            N = new Notification(_, C);
          } catch (e) {
            return null;
          }
          return (null === (r = o.onShown) || void 0 === r || r.call(o),
          !o.omitViewTracking &&
            T.default.track(A.AnalyticEvents.NOTIFICATION_VIEWED, t),
          (N.onclick = () => {
            var e;
            S.isPlatformEmbedded
              ? O.default.focus()
              : (window.focus(), N.close()),
              !o.omitClickTracking &&
                T.default.track(A.AnalyticEvents.NOTIFICATION_CLICKED, t),
              null === (e = o.onClick) || void 0 === e || e.call(o);
          }),
          u && setTimeout(() => N.close(), 5e3),
          L)
            ? N
            : {
                close() {
                  var e;
                  null == N ||
                    null === (e = N.onclose) ||
                    void 0 === e ||
                    e.call(N);
                },
              };
        },
        disabled: U,
      };
    },
    816454: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          getWindowId: function () {
            return o;
          },
          setupWindowId: function () {
            return n;
          },
          getMainWindowId: function () {
            return r;
          },
        });
      var t = E("917351");
      function o(e) {
        return e.__DISCORD_WINDOW_ID;
      }
      function n(e) {
        let _ = (0, t.uniqueId)("window-");
        return (e.__DISCORD_WINDOW_ID = _), _;
      }
      function r() {
        return o(window);
      }
    },
    421804: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          INTERACTION_EVENTS: function () {
            return t;
          },
          getCurrentlyInteractingWindowId: function () {
            return n;
          },
          setCurrentlyInteractingWindowId: function () {
            return r;
          },
          clearCurrentlyInteractingWindowId: function () {
            return a;
          },
        });
      let t = [
          "click",
          "mousedown",
          "mouseup",
          "keydown",
          "keyup",
          "keypress",
          "contextmenu",
        ],
        o = null;
      function n() {
        return o;
      }
      function r(e) {
        o = e;
      }
      function a(e) {
        o === e && (o = null);
      }
    },
    981980: function (e, _, E) {
      "use strict";
      var t;
      E.r(_),
        E.d(_, {
          default: function () {
            return t;
          },
        }),
        E("70102"),
        (t = class {
          get fails() {
            return this._fails;
          }
          get current() {
            return this._current;
          }
          get pending() {
            return null != this._timeoutId;
          }
          succeed() {
            this.cancel(), (this._fails = 0), (this._current = this.min);
          }
          fail(e) {
            this._fails += 1;
            let _ = 2 * this._current;
            if (
              (this.jitter && (_ *= Math.random()),
              (this._current = Math.min(this._current + _, this.max)),
              null != e)
            ) {
              if (null != this._timeoutId) {
                if (this._callback !== e)
                  throw Error("callback already pending");
                this.cancel();
              }
              (this._callback = e),
                (this._timeoutId = setTimeout(() => {
                  try {
                    null != e && e();
                  } finally {
                    this.cancel();
                  }
                }, this._current));
            }
            return this._current;
          }
          cancel() {
            (this._callback = null),
              null != this._timeoutId &&
                (clearTimeout(this._timeoutId), (this._timeoutId = null));
          }
          constructor(e = 500, _ = null, E = !0) {
            if (((this._fails = 0), e <= 0))
              throw Error(
                "Backoff min value must be greater than zero or backoff will never back-off."
              );
            (this.min = e),
              (this.max = null != _ ? _ : 10 * e),
              (this.jitter = E),
              (this._current = e);
          }
        });
    },
    129611: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          RefreshIcon: function () {
            return r;
          },
        });
      var t = E("37983");
      E("884691");
      var o = E("669491"),
        n = E("82169");
      let r = e => {
        let {
          width: _ = 24,
          height: E = 24,
          color: r = o.default.colors.INTERACTIVE_NORMAL,
          colorClass: a = "",
          ...i
        } = e;
        return (0, t.jsx)("svg", {
          ...(0, n.default)(i),
          xmlns: "http://www.w3.org/2000/svg",
          width: _,
          height: E,
          fill: "none",
          viewBox: "0 0 24 24",
          children: (0, t.jsx)("path", {
            fill: "string" == typeof r ? r : r.css,
            d: "M21 2a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1h-6a1 1 0 1 1 0-2h3.93A8 8 0 0 0 6.97 5.78a1 1 0 0 1-1.26-1.56A9.98 9.98 0 0 1 20 6V3a1 1 0 0 1 1-1ZM3 22a1 1 0 0 1-1-1v-6a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H5.07a8 8 0 0 0 11.96 2.22 1 1 0 1 1 1.26 1.56A9.99 9.99 0 0 1 4 18v3a1 1 0 0 1-1 1Z",
            className: a,
          }),
        });
      };
    },
    995113: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return t;
          },
        }),
        E("70102");
      var t,
        o = E("805833");
      t = class {
        attach(e) {
          let { stores: _ } = this;
          _.forEach((_, E) => {
            if (null == _)
              throw Error(
                ""
                  .concat(
                    e,
                    " tried to load a non-existent store. Either it isn't defined or there is a circular dependency. Loaded "
                  )
                  .concat(E, " stores before error.")
              );
            _.addReactChangeListener(this.handleStoreChange);
          });
        }
        detach() {
          let { stores: e } = this;
          e.forEach(e => e.removeReactChangeListener(this.handleStoreChange));
        }
        constructor(e, _) {
          (this.handleStoreChange = () => {
            let e = o.default.getChangeSentinel();
            this.storeVersionHandled !== e &&
              (this.changeCallback(), (this.storeVersionHandled = e));
          }),
            (this.stores = e),
            (this.changeCallback = _);
        }
      };
    },
    782648: function (e, _, E) {
      "use strict";
      var t;
      E.r(_),
        E.d(_, {
          default: function () {
            return t;
          },
        }),
        E("222007"),
        (t = class {
          has(e) {
            return this.listeners.has(e);
          }
          hasAny() {
            return this.listeners.size > 0;
          }
          invokeAll() {
            this.listeners.forEach(e => e());
          }
          constructor() {
            var e = this;
            (this.listeners = new Set()),
              (this.add = e => {
                this.listeners.add(e);
              }),
              (this.remove = e => {
                this.listeners.delete(e);
              }),
              (this.addConditional = function (_) {
                let E =
                  !(arguments.length > 1) ||
                  void 0 === arguments[1] ||
                  arguments[1];
                if (E && !1 === _()) return;
                let t = () => {
                  !1 === _() && e.remove(t);
                };
                e.add(t);
              });
          }
        });
    },
    893346: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          Dispatcher: function () {
            return O;
          },
        }),
        E("222007"),
        E("424973"),
        E("70102");
      var t = E("487445"),
        o = E("627445"),
        n = E.n(o),
        r = E("102053");
      E("704744");
      var a = E("811022"),
        i = E("435660"),
        I = E("805833"),
        s = E("377678"),
        T = E("120082");
      let S = new Set([
          "APP_STATE_UPDATE",
          "CONNECTION_CLOSED",
          "CONNECTION_OPEN",
          "CONNECTION_RESUMED",
          "LOGIN_SUCCESS",
          "LOGIN",
          "LOGOUT",
          "MESSAGE_SEND_FAILED",
          "PUSH_NOTIFICATION_CLICK",
          "RESET_CONNECTION",
          "SESSION_START",
          "UPLOAD_FAIL",
        ]),
        N = new a.default("Flux");
      class O {
        isDispatching() {
          return null != this._currentDispatchActionType;
        }
        dispatch(e) {
          return new Promise((_, E) => {
            this._waitQueue.push(() => {
              try {
                null == this.functionCache[e.type] &&
                  ((this.functionCache[e.type] = e =>
                    this._dispatchWithDevtools(e)),
                  R(this.functionCache[e.type], "dispatch_" + e.type)),
                  this.functionCache[e.type](e),
                  _();
              } catch (e) {
                E(e);
              }
            }),
              this.flushWaitQueue();
          });
        }
        flushWaitQueue() {
          if (!this._processingWaitQueue)
            try {
              (this._processingWaitQueue = !0), (I.default.isDispatching = !0);
              let _ = 0;
              for (; this._waitQueue.length > 0; ) {
                if (++_ > 100) {
                  var e;
                  let _ = s.serialize();
                  throw (
                    (N.error("LastFewActions", _),
                    null === (e = this._sentryUtils) ||
                      void 0 === e ||
                      e.addBreadcrumb({
                        message: "Dispatcher: Dispatch loop detected",
                        data: { lastFewActions: _ },
                      }),
                    Error("Dispatch loop detected, aborting"))
                  );
                }
                for (; this._waitQueue.length > 0; ) {
                  let e = this._waitQueue.shift();
                  e();
                }
                I.default.emit();
              }
            } finally {
              (this._processingWaitQueue = !1), (I.default.isDispatching = !1);
            }
        }
        _dispatchWithDevtools(e) {
          this._dispatchWithLogging(e);
        }
        _dispatchWithLogging(e) {
          n(
            null == this._currentDispatchActionType,
            "Dispatch.dispatch(...): Cannot dispatch in the middle of a dispatch. Action: "
              .concat(e.type, " Already dispatching: ")
              .concat(this._currentDispatchActionType)
          ),
            n(e.type, "Dispatch.dispatch(...) called without an action type"),
            S.has(e.type) && N.log("Dispatching ".concat(e.type)),
            (0, i.mark)(e.type),
            s.add(e.type);
          let _ = this.actionLogger.log(e, _ => {
            try {
              (this._currentDispatchActionType = e.type), this._dispatch(e, _);
            } finally {
              this._currentDispatchActionType = null;
            }
          });
          _.totalTime > 100 &&
            N.verbose(
              "Slow dispatch on ".concat(e.type, ": ").concat(_.totalTime, "ms")
            );
          try {
            (0, i.measure)("DISPATCH[".concat(e.type, "]"), e.type);
          } catch (e) {}
        }
        _dispatch(e, _) {
          for (let _ of this._interceptors) if (_(e)) return !1;
          let E = this._actionHandlers.getOrderedActionHandlers(e);
          for (let t = 0, o = E.length; t < o; t++) {
            let { name: o, actionHandler: n, storeDidChange: r } = E[t];
            !1 !== _(o, () => n(e)) && r(e);
          }
          let t = this._subscriptions[e.type];
          null != t &&
            _("__subscriptions", () => {
              t.forEach(_ => _(e));
            });
        }
        addInterceptor(e) {
          this._interceptors.push(e);
        }
        wait(e) {
          this._waitQueue.push(e), this.flushWaitQueue();
        }
        subscribe(e, _) {
          let E = this._subscriptions[e];
          null == E && (this._subscriptions[e] = E = new Set()), E.add(_);
        }
        unsubscribe(e, _) {
          let E = this._subscriptions[e];
          null != E &&
            (E.delete(_), 0 === E.size && delete this._subscriptions[e]);
        }
        register(e, _, E, t, o) {
          return this._actionHandlers.register(
            e,
            _,
            E,
            null != t ? t : this._defaultBand,
            o
          );
        }
        createToken() {
          return this._actionHandlers.createToken();
        }
        addDependencies(e, _) {
          this._actionHandlers.addDependencies(e, _);
        }
        constructor(e = 0, _, E) {
          (this._interceptors = []),
            (this._subscriptions = {}),
            (this._waitQueue = []),
            (this._processingWaitQueue = !1),
            (this._currentDispatchActionType = null),
            (this._actionHandlers = new A()),
            (this._sentryUtils = void 0),
            (this.functionCache = {}),
            (this._defaultBand = e),
            (this._sentryUtils = E),
            null != _
              ? (this.actionLogger = _)
              : (this.actionLogger = new T.ActionLogger()),
            this.actionLogger.on("trace", (e, _, E) => {
              r.default.isTracing &&
                E >= 10 &&
                r.default.mark("\uD83E\uDDA5", _, E);
            });
        }
      }
      class A {
        getOrderedActionHandlers(e) {
          var _;
          return null !== (_ = this._orderedActionHandlers[e.type]) &&
            void 0 !== _
            ? _
            : this._computeOrderedActionHandlers(e.type);
        }
        register(e, _, E, t) {
          let o =
            arguments.length > 4 && void 0 !== arguments[4]
              ? arguments[4]
              : this.createToken();
          n(
            t >= 0 && Number.isInteger(t),
            "band must be a non-negative integer."
          );
          let r = {};
          for (let E in _) {
            let t = _[E],
              o = e => t(e);
            R(o, "".concat(e, "_").concat(E)), (r[E] = o);
          }
          return (
            this._dependencyGraph.addNode(o, {
              name: e,
              band: t,
              actionHandler: r,
              storeDidChange: E,
            }),
            this._addToBand(o, t),
            this._invalidateCaches(),
            o
          );
        }
        createToken() {
          return "ID_".concat(this._lastID++);
        }
        addDependencies(e, _) {
          for (let E of (this._validateDependencies(e, _), _))
            this._dependencyGraph.addDependency(e, E);
          this._invalidateCaches();
        }
        _validateDependencies(e, _) {}
        _invalidateCaches() {
          (this._orderedCallbackTokens = null),
            (this._orderedActionHandlers = {});
        }
        _bandToken(e) {
          let _ = "band.".concat(e);
          return (
            !this._dependencyGraph.hasNode(_) &&
              (this._dependencyGraph.addNode(_, {
                name: _,
                band: e,
                actionHandler: {},
                storeDidChange: () => {},
              }),
              e > 0 &&
                this._dependencyGraph.addDependency(_, this._bandToken(e - 1))),
            _
          );
        }
        _addToBand(e, _) {
          this._dependencyGraph.addDependency(this._bandToken(_), e),
            _ > 0 &&
              this._dependencyGraph.addDependency(e, this._bandToken(_ - 1));
        }
        _computeOrderedActionHandlers(e) {
          var _;
          let E =
              null !== (_ = this._orderedCallbackTokens) && void 0 !== _
                ? _
                : this._computeOrderedCallbackTokens(),
            t = [];
          for (let _ = 0, o = E.length; _ < o; _++) {
            let {
                name: o,
                actionHandler: n,
                storeDidChange: r,
              } = this._dependencyGraph.getNodeData(E[_]),
              a = n[e];
            null != a &&
              t.push({ name: o, actionHandler: a, storeDidChange: r });
          }
          return (this._orderedActionHandlers[e] = t), t;
        }
        _computeOrderedCallbackTokens() {
          try {
            let e = this._dependencyGraph.overallOrder();
            return (this._orderedCallbackTokens = e), e;
          } catch (e) {
            if (null != e.cyclePath) {
              let _ = e.cyclePath.map(e =>
                ""
                  .concat(this._dependencyGraph.getNodeData(e).name, "(")
                  .concat(e, ")")
              );
              throw Error("Dependency Cycle Found: ".concat(_.join(" -> ")));
            }
            throw e;
          }
        }
        constructor() {
          (this._orderedActionHandlers = {}),
            (this._orderedCallbackTokens = null),
            (this._lastID = 1),
            (this._dependencyGraph = new t.DepGraph());
        }
      }
      function R(e, _) {
        Object.defineProperty(e, "name", { value: _ });
      }
    },
    805833: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return a;
          },
        }),
        E("860677"),
        E("70102"),
        E("222007"),
        E("704744");
      var t = E("811022"),
        o = E("377678");
      let n = new t.default("Flux"),
        r = e => e();
      var a = new (class e {
        destroy() {
          this.changedStores.clear(),
            this.reactChangedStores.clear(),
            (r = e => e());
        }
        injectBatchEmitChanges(e) {
          r = e;
        }
        pause() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : null;
          (this.isPaused = !0),
            null !== this.pauseTimer && clearTimeout(this.pauseTimer),
            null !== e &&
              (this.pauseTimer = setTimeout(() => {
                (this.pauseTimer = null), this.resume();
              }, e));
        }
        resume() {
          let e =
            !(arguments.length > 0) || void 0 === arguments[0] || arguments[0];
          clearTimeout(this.pauseTimer),
            (this.pauseTimer = null),
            this.isPaused &&
              ((this.isPaused = !1),
              e &&
                this.changedStores.size > 0 &&
                setImmediate(() => this.emit()));
        }
        batched(e) {
          if (this.isPaused) return e();
          try {
            return (this.isPaused = !0), e();
          } finally {
            this.resume(!1), this.emit();
          }
        }
        emit() {
          !this.isBatchEmitting &&
            !this.isPaused &&
            r(() => {
              try {
                (this.isBatchEmitting = !0), this.changeSentinel++;
                let e = 0;
                for (; this.changedStores.size > 0; ) {
                  if (++e > 100)
                    throw (
                      (n.error("LastFewActions", o.serialize()),
                      Error("change emit loop detected, aborting"))
                    );
                  this.emitNonReactOnce();
                }
                for (; this.reactChangedStores.size > 0; ) {
                  if (++e > 100)
                    throw (
                      (n.error("LastFewActions", o.serialize()),
                      Error("react change emit loop detected, aborting"))
                    );
                  this.emitReactOnce();
                }
              } finally {
                this.isBatchEmitting = !1;
              }
            });
        }
        getChangeSentinel() {
          return this.changeSentinel;
        }
        getIsPaused() {
          return this.isPaused;
        }
        markChanged(e) {
          e._changeCallbacks.hasAny() && this.changedStores.add(e),
            e._reactChangeCallbacks.hasAny() && this.reactChangedStores.add(e),
            !this.isBatchEmitting &&
              !this.isDispatching &&
              !this.isPaused &&
              this.emit();
        }
        emitNonReactOnce() {
          let e = Date.now(),
            _ = this.changedStores;
          (this.changedStores = new Set()),
            _.forEach(e => {
              e._changeCallbacks.invokeAll(), this.changedStores.delete(e);
            });
          let E = Date.now();
          E - e > 100 &&
            n.verbose(
              "Slow batch emitChanges took ".concat(E - e, "ms recentActions:"),
              o.serialize()
            );
        }
        emitReactOnce() {
          let e = Date.now(),
            _ = this.reactChangedStores;
          (this.reactChangedStores = new Set()),
            _.forEach(e => {
              e._reactChangeCallbacks.invokeAll(),
                this.reactChangedStores.delete(e);
            });
          let E = Date.now();
          E - e > 100 &&
            n.verbose(
              "Slow batch emitReactChanges took ".concat(
                E - e,
                "ms recentActions:"
              ),
              o.serialize()
            );
        }
        constructor() {
          (this.changedStores = new Set()),
            (this.reactChangedStores = new Set()),
            (this.changeSentinel = 0),
            (this.isBatchEmitting = !1),
            (this.isDispatching = !1),
            (this.isPaused = !1),
            (this.pauseTimer = null);
        }
      })();
    },
    35092: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return a;
          },
        });
      var t = E("805833"),
        o = E("303365"),
        n = E("75247"),
        r = E("661496"),
        a = {
          Emitter: t.default,
          Store: n.default,
          PersistedStore: o.default,
          DeviceSettingsStore: o.DeviceSettingsStore,
          OfflineCacheStore: o.OfflineCacheStore,
          connectStores: r.default,
          initialize() {
            n.default.initialize();
          },
          get initialized() {
            return n.default.initialized;
          },
          destroy() {
            o.default.destroy();
          },
        };
    },
    377678: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          add: function () {
            return o;
          },
          serialize: function () {
            return n;
          },
        }),
        E("424973");
      let t = [];
      function o(e) {
        for (t.push(e); t.length > 10; ) t.shift();
      }
      function n() {
        return t.join(" -> ");
      }
    },
    120082: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          ActionLogger: function () {
            return a;
          },
        }),
        E("424973"),
        E("222007"),
        E("70102");
      var t = E("44170"),
        o = E("811022"),
        n = E("279295");
      let r = new o.default("Flux");
      class a extends t.EventEmitter {
        log(e, _) {
          let E = new I(e);
          E.startTime = n.performance.now();
          try {
            _((_, t) => {
              let o;
              let r = { name: _, time: -1 },
                a = n.performance.now();
              try {
                o = t();
              } finally {
                (r.time = n.performance.now() - a),
                  this.persist && E.traces.push(r),
                  this.emit("trace", e.type, _, r.time);
              }
              return o;
            });
          } catch (e) {
            throw ((E.error = e), e);
          } finally {
            (E.totalTime = n.performance.now() - E.startTime),
              this.persist && E.totalTime > 0 && this.logs.push(E),
              this.logs.length > 1e3 && this.logs.shift(),
              this.emit("log", e);
          }
          return E;
        }
        getSlowestActions(e) {
          var _;
          let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 20,
            o = [];
          for (let _ of this.logs)
            if (null == e || _.name === e)
              for (let e of _.traces) o.push([e.name, _.name, e.time]);
          o.sort((e, _) => _[2] - e[2]), o.length > t && (o.length = t);
          let n = 0,
            a = 0,
            i = o
              .map(_ => {
                let [E, t, o] = _,
                  r = "".concat(E);
                return (
                  null == e && (r += "<".concat(t, ">")),
                  (n = Math.max(r.length, n)),
                  [r, o]
                );
              })
              .map(e => {
                let [_, E] = e;
                return (
                  (a += E),
                  "".concat(_.padEnd(n + 1, " "), " - ").concat(E, "ms")
                );
              })
              .join("\n");
          return 0 === o.length || o[0][2] < 10 || a < 20
            ? o
            : (r.log(
                "Using Hermes:",
                void 0 !==
                  (null === (_ = E.g) || void 0 === _
                    ? void 0
                    : _.HermesInternal)
              ),
              r.log(
                ""
                  .concat(null != e ? "\n\n=== ".concat(e, " ===") : "", "\n")
                  .concat(i, "\n")
              ),
              r.log("Total Time: ".concat(a, "ms")),
              o);
        }
        getLastActionMetrics(e) {
          var _;
          let t =
              arguments.length > 1 && void 0 !== arguments[1]
                ? arguments[1]
                : 20,
            o = {};
          for (let e of this.logs)
            for (let _ of e.traces) o[_.name] = [_.name, e.name, _.time];
          let n = Object.values(o);
          n.sort((e, _) => _[2] - e[2]), n.length > t && (n.length = t);
          let a = 0,
            i = 0,
            I = n
              .map(e => {
                let [_, E, t] = e;
                return (a = Math.max(_.length, a)), [_, t];
              })
              .map(e => {
                let [_, E] = e;
                return (
                  (i += E),
                  "".concat(_.padEnd(a + 1, " "), " - ").concat(E, "ms")
                );
              })
              .join("\n");
          return 0 === n.length || i < 8
            ? n
            : (r.log(
                "\nUsing Hermes: ".concat(
                  void 0 !==
                    (null === (_ = E.g) || void 0 === _
                      ? void 0
                      : _.HermesInternal)
                ),
                "\n\n=== ".concat(e, " ===\n").concat(I),
                "\nTotal Time: ".concat(i, "ms\n\n")
              ),
              n);
        }
        constructor({ persist: e = !1 } = {}) {
          super(), (this.logs = []), (this.persist = e);
        }
      }
      let i = 0;
      class I {
        get name() {
          return this.action.type;
        }
        toJSON() {
          if (null == this.createdAt)
            throw Error(
              "ActionLog.toJSON: You must complete your logging before calling toJSON"
            );
          return {
            actionType: this.action.type,
            created_at: this.createdAt,
            totalTime: this.totalTime,
            traces: this.traces,
          };
        }
        constructor(e) {
          (this.startTime = 0),
            (this.totalTime = 0),
            (this.traces = []),
            (this.id = i++),
            (this.action = e),
            (this.createdAt = new Date());
        }
      }
    },
    303365: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          DeviceSettingsStore: function () {
            return N;
          },
          OfflineCacheStore: function () {
            return O;
          },
          default: function () {
            return o;
          },
        }),
        E("222007"),
        E("70102");
      var t,
        o,
        n = E("773179"),
        r = E.n(n),
        a = E("102053"),
        i = E("95410"),
        I = E("75247");
      let s = { _state: void 0, _version: void 0 },
        T = null;
      ((t = class e extends I.default {
        getClass() {
          return this.constructor;
        }
        static clearAll(_) {
          return (
            (T = _),
            null == e._clearAllPromise &&
              (e._clearAllPromise = new Promise(E => {
                requestIdleCallback(
                  () => {
                    e.clearPersistQueue(_),
                      e.allPersistKeys.forEach(E => {
                        e.shouldClear(_, E) && i.default.remove(E);
                      }),
                      I.default.getAll().forEach(E => {
                        E instanceof e &&
                          e.shouldClear(_, E.getClass().persistKey) &&
                          ((E._isInitialized = !1), E.initializeIfNeeded());
                      }),
                      (e._clearAllPromise = null),
                      E();
                  },
                  { timeout: 500 }
                );
              })),
            e._clearAllPromise
          );
        }
        static shouldClear(_, E) {
          var t;
          return (
            (null === (t = _.omit) || void 0 === t
              ? !void 0
              : !t.includes(E)) &&
            ("all" === _.type ||
              ("user-data-only" === _.type &&
                !e.userAgnosticPersistKeys.has(E)))
          );
        }
        static clearPersistQueue(_) {
          e._writeResolvers.forEach((E, t) => {
            let [o, n] = E;
            e.shouldClear(_, t) &&
              (e._writePromises.delete(t),
              e._writeResolvers.delete(t),
              cancelIdleCallback(n),
              o(!1));
          }),
            e._writePromises.clear(),
            e._writeResolvers.clear();
        }
        static getAllStates() {
          return Promise.all(Array.from(e._writePromises.values())).then(() => {
            let _ = {};
            return (
              e.allPersistKeys.forEach(e => {
                var E;
                _[e] = (
                  null !== (E = i.default.get(e)) && void 0 !== E ? E : s
                )._state;
              }),
              _
            );
          });
        }
        static initializeAll(_) {
          I.default.getAll().forEach(E => {
            if (E instanceof e) {
              let e = E.getClass().persistKey;
              _.hasOwnProperty(e) && E.initializeFromState(_[e]);
            }
          });
        }
        initializeFromState(_) {
          this.initialize(_) && this.asyncPersist(),
            this._isInitialized
              ? this.emitChange()
              : (e.allPersistKeys.add(this.getClass().persistKey),
                (this._isInitialized = !0));
        }
        static destroy() {
          (T = null),
            I.default.destroy(),
            e.clearPersistQueue({ type: "all" }),
            e.allPersistKeys.clear(),
            e.userAgnosticPersistKeys.clear();
        }
        initializeIfNeeded() {
          if (!this._isInitialized) {
            let _ = Date.now();
            e.allPersistKeys.add(this.getClass().persistKey);
            let { state: E, requiresPersist: t } = e.migrateAndReadStoreState(
              this.getClass().persistKey,
              this.getClass().migrations
            );
            this.initialize(E) && this.asyncPersist(),
              t && this.asyncPersist(),
              (this._isInitialized = !0);
            let o = Date.now() - _;
            o > 5 &&
              a.default.mark(
                "\uD83E\uDDA5",
                this.getName() + ".initialize()",
                o
              );
          }
        }
        static migrateAndReadStoreState(_, E) {
          if (null != T && e.shouldClear(T, _))
            return i.default.remove(_), { state: void 0, requiresPersist: !1 };
          let t = null != e._clearAllPromise ? null : i.default.get(_),
            { _state: o, _version: n, ...r } = null != t ? t : s,
            a = null == E ? 0 : E.length;
          if (0 !== a && n !== a && null != E) {
            let e = null != n ? n : 0,
              _ = o;
            for (null == n && (_ = r); e < a; ) {
              let t = E[e];
              (_ = t(_)), e++;
            }
            return { state: _, requiresPersist: !0 };
          }
          if (Object.values(r).length > 0)
            return { state: r, requiresPersist: !0 };
          return { state: o, requiresPersist: !1 };
        }
        asyncPersist() {
          let {
            persistKey: _,
            disableWrite: E,
            throttleDelay: t,
          } = this.getClass();
          if (e.disableWrites || E) return Promise.resolve(!1);
          let o = e._writePromises.get(_);
          return null != o
            ? o
            : ((o = new Promise(E => {
                let o =
                  t > 0
                    ? () => this.throttledCallback(E)
                    : () => this.callback(E);
                e._writeResolvers.set(_, [
                  E,
                  requestIdleCallback(o, { timeout: 500 }),
                ]);
              })),
              e._writePromises.set(_, o),
              o);
        }
        persist() {
          let { persistKey: e } = this.getClass(),
            _ = this.getState(),
            E = this._version;
          i.default.set(e, { _state: _, _version: E });
        }
        clear() {
          let { persistKey: e } = this.getClass();
          i.default.remove(e);
        }
        constructor(_, E) {
          if (
            (super(_, E),
            (this._version =
              null == this.getClass().migrations
                ? 0
                : this.getClass().migrations.length),
            (this.callback = _ => {
              let { persistKey: E } = this.getClass();
              this.persist(),
                e._writePromises.delete(E),
                e._writeResolvers.delete(E),
                _();
            }),
            (this.throttledCallback = r.throttle(
              e => this.callback(e),
              this.getClass().throttleDelay,
              { leading: !1 }
            )),
            "string" != typeof this.getClass().persistKey)
          )
            throw Error(
              "".concat(
                this.getClass().name,
                " initialized without a `persistKey`. Add one so we know where to save your stuff!"
              )
            );
          if ("function" != typeof this.initialize)
            throw Error(
              "".concat(
                this.getClass().name,
                " initialized without an `initialize` method. Add one that accepts the initial cached state."
              )
            );
          if ("function" != typeof this.getState)
            throw Error(
              "".concat(
                this.getClass().name,
                " initialized without a `getState` method. Add one that returns the full state of the store for persistance to work."
              )
            );
          this.addChangeListener(() => this.asyncPersist());
        }
      }).allPersistKeys = new Set()),
        (t.userAgnosticPersistKeys = new Set()),
        (t._writePromises = new Map()),
        (t._writeResolvers = new Map()),
        (t.disableWrites = !1),
        (t.disableWrite = !1),
        (t.throttleDelay = 0),
        (o = t);
      class S extends o {
        initializeFromState(e) {
          return (
            o.userAgnosticPersistKeys.add(this.getClass().persistKey),
            super.initializeFromState(e)
          );
        }
        initializeIfNeeded() {
          return (
            o.userAgnosticPersistKeys.add(this.getClass().persistKey),
            super.initializeIfNeeded()
          );
        }
        getState() {
          return this.getUserAgnosticState();
        }
      }
      class N extends S {}
      class O extends S {}
    },
    75247: function (e, _, E) {
      "use strict";
      let t;
      E.r(_),
        E.d(_, {
          default: function () {
            return n;
          },
        }),
        E("860677"),
        E("222007"),
        E("424973");
      var o,
        n,
        r = E("627445"),
        a = E.n(r),
        i = E("102053");
      E("704744");
      var I = E("782648"),
        s = E("805833");
      let T = [],
        S = !1,
        N = new Promise(e => {
          t = () => {
            e(), (t = null);
          };
        });
      ((o = class {
        static initialize() {
          (S = !0), T.forEach(e => e.initializeIfNeeded()), null != t && t();
        }
        static destroy() {
          (T.length = 0), s.default.destroy();
        }
        static getAll() {
          return T;
        }
        registerActionHandlers(e, _) {
          this._dispatcher.register(
            this.getName(),
            e,
            e => {
              (this._changeCallbacks.hasAny() ||
                this._reactChangeCallbacks.hasAny()) &&
                (s.default.markChanged(this),
                s.default.getIsPaused() &&
                  null != this._mustEmitChanges &&
                  this._mustEmitChanges(e) &&
                  s.default.resume(!1));
            },
            _,
            this._dispatchToken
          );
        }
        getName() {
          var e;
          return null !== (e = this.constructor.displayName) && void 0 !== e
            ? e
            : this.constructor.name;
        }
        initializeIfNeeded() {
          if (!this._isInitialized) {
            let e = Date.now();
            this.initialize(), (this._isInitialized = !0);
            let _ = Date.now() - e;
            _ > 5 &&
              i.default.mark(
                "\uD83E\uDDA5",
                this.getName() + ".initialize()",
                _
              );
          }
        }
        initialize() {}
        syncWith(e, _, E) {
          var t, o;
          let n;
          this.waitFor(...e);
          let r = 0,
            a = () => {
              r !== s.default.getChangeSentinel() &&
                ((r = s.default.getChangeSentinel()),
                !1 !== _() && this.emitChange());
            };
          (t = null != E ? E : 0),
            (o = a),
            (n = null),
            (a =
              0 === t
                ? function () {
                    clearImmediate(n), (n = setImmediate(o));
                  }
                : function () {
                    null == n &&
                      (n = setTimeout(() => {
                        try {
                          o();
                        } finally {
                          n = null;
                        }
                      }, t));
                  }),
            e.forEach(e => e.addChangeListener(a));
        }
        waitFor() {
          for (var e = arguments.length, _ = Array(e), E = 0; E < e; E++)
            _[E] = arguments[E];
          let t = _.map((e, _) =>
            (a(
              null != e,
              "Store.waitFor(...) called with null Store at index "
                .concat(_, " for store ")
                .concat(this.getName())
            ),
            null != e._dispatcher)
              ? (a(
                  e._dispatcher === this._dispatcher,
                  "Stores belong to two separate dispatchers."
                ),
                e.getDispatchToken())
              : null
          );
          this._dispatcher.addDependencies(
            this.getDispatchToken(),
            t.filter(e => null != e)
          );
        }
        emitChange() {
          s.default.markChanged(this);
        }
        getDispatchToken() {
          return this._dispatchToken;
        }
        mustEmitChanges() {
          let e =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : () => !0;
          this._mustEmitChanges = e;
        }
        constructor(e, _, E) {
          (this._changeCallbacks = new I.default()),
            (this._reactChangeCallbacks = new I.default()),
            (this._isInitialized = !1),
            (this.addChangeListener = this._changeCallbacks.add),
            (this.addConditionalChangeListener =
              this._changeCallbacks.addConditional),
            (this.removeChangeListener = this._changeCallbacks.remove),
            (this.addReactChangeListener = this._reactChangeCallbacks.add),
            (this.removeReactChangeListener =
              this._reactChangeCallbacks.remove),
            (this._dispatcher = e),
            (this._dispatchToken = this._dispatcher.createToken()),
            null !== _ && this.registerActionHandlers(null != _ ? _ : {}, E),
            T.push(this),
            S && this.initializeIfNeeded();
        }
      }).initialized = N),
        (n = o);
    },
    661496: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return a;
          },
        }),
        E("222007"),
        E("70102");
      var t = E("37983"),
        o = E("884691"),
        n = E("233736"),
        r = E("995113"),
        a = function (e, _, E) {
          return null != E && E.forwardRef
            ? (function (e, _) {
                return E => {
                  let a = "FluxContainer(".concat(i(E), ")");
                  class s extends o.Component {
                    componentDidMount() {
                      this.listener.attach(a);
                    }
                    componentWillUnmount() {
                      this.listener.detach(),
                        this.memoizedGetStateFromStores.clear();
                    }
                    render() {
                      let { forwardedConnectStoresRef: e, childProps: _ } =
                          this.props,
                        o = this.memoizedGetStateFromStores(_);
                      return (0, t.jsx)(E, { ref: e, ..._, ...o });
                    }
                    constructor(...E) {
                      super(...E),
                        (this.memoizedGetStateFromStores = I(_)),
                        (this.listener = new r.default(e, () => {
                          let e =
                            this.memoizedGetStateFromStores.getCachedResult(
                              this.props.childProps
                            );
                          if (
                            !(
                              null != e &&
                              (this.memoizedGetStateFromStores.clear(),
                              (0, n.default)(
                                this.memoizedGetStateFromStores(
                                  this.props.childProps
                                ),
                                e
                              ))
                            )
                          )
                            this.forceUpdate();
                        }));
                    }
                  }
                  s.displayName = a;
                  let T = o.forwardRef((e, _) =>
                    (0, t.jsx)(s, {
                      childProps: e,
                      forwardedConnectStoresRef: _,
                    })
                  );
                  return (T.displayName = "ForwardRef(".concat(a, ")")), T;
                };
              })(e, _)
            : (function (e, _) {
                return E => {
                  let a = "FluxContainer(".concat(i(E), ")");
                  class s extends o.Component {
                    componentDidMount() {
                      this.listener.attach(a);
                    }
                    componentWillUnmount() {
                      this.listener.detach(),
                        this.memoizedGetStateFromStores.clear();
                    }
                    render() {
                      let e = this.memoizedGetStateFromStores(this.props);
                      return (0, t.jsx)(E, { ...this.props, ...e });
                    }
                    constructor(...E) {
                      super(...E),
                        (this.memoizedGetStateFromStores = I(_)),
                        (this.listener = new r.default(e, () => {
                          let e =
                            this.memoizedGetStateFromStores.getCachedResult(
                              this.props
                            );
                          if (
                            !(
                              null != e &&
                              (this.memoizedGetStateFromStores.clear(),
                              (0, n.default)(
                                this.memoizedGetStateFromStores(this.props),
                                e
                              ))
                            )
                          )
                            this.forceUpdate();
                        }));
                    }
                  }
                  return (s.displayName = a), s;
                };
              })(e, _);
        };
      function i(e) {
        var _, E;
        return null !==
          (E = null !== (_ = e.displayName) && void 0 !== _ ? _ : e.name) &&
          void 0 !== E
          ? E
          : "<Unknown>";
      }
      function I(e) {
        let _ = null,
          E = null,
          t = e =>
            null != _ && null != E && (0, n.default)(_, e)
              ? E
              : null != _ && null != E && (0, n.default)(_, e)
                ? ((_ = e), E)
                : null,
          o = o => {
            let n = t(o);
            return null != n ? n : (E = e((_ = o)));
          };
        return (
          (o.getCachedResult = t),
          (o.clear = () => {
            (_ = null), (E = null);
          }),
          o
        );
      }
    },
    446674: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          Store: function () {
            return r.default;
          },
          Dispatcher: function () {
            return o.Dispatcher;
          },
          BatchedStoreListener: function () {
            return t.default;
          },
          useStateFromStores: function () {
            return a.default;
          },
          useStateFromStoresObject: function () {
            return a.useStateFromStoresObject;
          },
          useStateFromStoresArray: function () {
            return a.useStateFromStoresArray;
          },
          statesWillNeverBeEqual: function () {
            return a.statesWillNeverBeEqual;
          },
          default: function () {
            return i;
          },
        });
      var t = E("995113"),
        o = E("893346"),
        n = E("35092"),
        r = E("75247"),
        a = E("65597"),
        i = n.default;
    },
    65597: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          statesWillNeverBeEqual: function () {
            return a;
          },
          default: function () {
            return i;
          },
          useStateFromStoresObject: function () {
            return I;
          },
          useStateFromStoresArray: function () {
            return s;
          },
        }),
        E("70102"),
        E("222007");
      var t = E("884691"),
        o = E("233736"),
        n = E("995113");
      function r(e, _) {
        return e === _;
      }
      function a(e, _) {
        return !1;
      }
      function i(e, _, E) {
        let a =
            arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : r,
          { current: i } = (0, t.useRef)({
            stores: e,
            areStatesEqual: a,
            getStateFromStores: _,
            prevDeps: void 0,
            state: void 0,
          }),
          I = i.state;
        if (null == E || !(0, o.areArraysShallowEqual)(E, i.prevDeps)) {
          let e = _();
          (null == I || !a(I, e)) && (I = e);
        }
        (0, t.useLayoutEffect)(() => {
          (i.getStateFromStores = _), (i.prevDeps = E), (i.state = I);
        });
        let [, s] = (0, t.useState)(null);
        return (
          (0, t.useLayoutEffect)(() => {
            let _ = () => {
              let e = i.getStateFromStores();
              !a(i.state, e) && ((i.state = e), s({}));
            };
            _();
            let E = new n.default(e, _);
            return E.attach("useStateFromStores"), () => E.detach();
          }, []),
          I
        );
      }
      function I(e, _, E) {
        return i(e, _, E, o.default);
      }
      function s(e, _, E) {
        return i(e, _, E, o.areArraysShallowEqual);
      }
    },
    872717: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return d;
          },
          setRequestPatch: function () {
            return M;
          },
          setAwaitOnline: function () {
            return P;
          },
        }),
        E("222007"),
        E("424973");
      var t = E("726581"),
        o = E.n(t),
        n = E("981980");
      E("704744");
      var r = E("811022"),
        a = E("644642"),
        i = E("486196"),
        I = E("614247"),
        s = E("446825").Buffer;
      let T = new r.default("HTTPUtils"),
        S = new Set([502, 504, 507, 598, 599, 522, 523, 524]);
      function N(e, _, E, t, r) {
        var a, T, O, A, l;
        let L = o[e](_.url);
        if (
          (null != _.onRequestCreated && _.onRequestCreated(L), null != _.query)
        ) {
          let e = _.query;
          if ("object" == typeof e) {
            let _ = { ...e };
            Object.keys(_).map(e => {
              null == _[e] && delete _[e];
            }),
              (e = _);
          }
          L.query(e);
        }
        if (
          (_.body && L.send(_.body),
          null != _.headers && L.set(_.headers),
          null != _.reason &&
            L.set("X-Audit-Log-Reason", encodeURIComponent(_.reason)),
          null === (a = _.attachments) ||
            void 0 === a ||
            a.forEach(e => {
              L.attach(e.name, e.file, e.filename);
            }),
          null === (T = _.fields) ||
            void 0 === T ||
            T.forEach(e => {
              L.field(e.name, e.value);
            }),
          null != _.context)
        ) {
          let e = (function (e) {
            try {
              return s.from(JSON.stringify(e)).toString("base64");
            } catch (e) {
              return null;
            }
          })(_.context);
          null != e && L.set("X-Context-Properties", e);
        }
        null != _.retried &&
          0 !== _.retried &&
          L.set("X-Failed-Requests", "".concat(_.retried)),
          null != _.timeout && 0 !== _.timeout && L.timeout(_.timeout),
          _.binary && L.responseType("blob"),
          null != _.onRequestProgress &&
            L.on("progress", e => {
              var E;
              null === (E = _.onRequestProgress) ||
                void 0 === E ||
                E.call(_, e);
            });
        let u = () => {
          (_.backoff = null != _.backoff ? _.backoff : new n.default()),
            (_.retried = (null != _.retried ? _.retried : 0) + 1),
            _.backoff.fail(() => h(_.url).then(() => N(e, _, E, t, r)));
        };
        null == U ||
          null === (O = U.prepareRequest) ||
          void 0 === O ||
          O.call(U, L),
          L.ok(e => null != e.status),
          L.then(
            o => {
              var n, a, s;
              if (null != _.retries && _.retries-- > 0 && S.has(o.status))
                return u();
              let T = {
                ok: o.ok,
                headers: o.headers,
                body: o.body,
                text: o.text,
                status: o.status,
              };
              R(_, T);
              let O = !1,
                A = (o, n) => {
                  let a = {
                    ..._,
                    headers: { ..._.headers, ...o },
                    interceptResponse: n,
                  };
                  (O = !0), N(e, a, E, t, r);
                },
                l = e => {
                  !O && (t(e), null == r || r({ ok: !1, hasErr: !0, err: e }));
                };
              if (
                (null == _
                  ? void 0
                  : null === (n = _.interceptResponse) || void 0 === n
                    ? void 0
                    : n.call(_, o, A, l)) !== !0
              ) {
                if (
                  (null == U
                    ? void 0
                    : null === (a = U.interceptResponse) || void 0 === a
                      ? void 0
                      : a.call(U, o, A, l)) !== !0
                ) {
                  if (o.ok) E(T);
                  else {
                    if (
                      _.oldFormErrors &&
                      (null == T
                        ? void 0
                        : null === (s = T.body) || void 0 === s
                          ? void 0
                          : s.code) === i.INVALID_FORM_BODY_ERROR_CODE
                    ) {
                      let { errors: e } = T.body;
                      null != e && (T.body = (0, I.default)(e));
                    }
                    t(T);
                  }
                  null != r && r({ hasErr: !1, ...T });
                }
              }
            },
            e => {
              null != _.retries && _.retries-- > 0 && "ABORTED" !== e.code
                ? u()
                : (R(_), t(e), null != r && r({ ok: !1, hasErr: !0, err: e }));
            }
          ),
          (null === (A = _.signal) || void 0 === A ? void 0 : A.aborted)
            ? L.abort()
            : null === (l = _.signal) ||
              void 0 === l ||
              l.addEventListener("abort", () => L.abort(), { once: !0 });
      }
      let O = new Map();
      function A(e) {
        let _ = O.get(e);
        if (null == _) {
          T.verbose(
            "rateLimitExpirationHandler: rate limit for",
            e,
            "expired, but record was already removed"
          );
          return;
        }
        let E = _.queue.shift();
        if (null == E) {
          T.verbose("rateLimitExpirationHandler: removing key for", e),
            O.delete(e);
          return;
        }
        T.verbose("rateLimitExpirationHandler: moving to next record for ", e),
          E();
      }
      function R(e, _) {
        let E = O.get(e.url);
        if (null != _ && 429 === _.status) {
          var t, o;
          let n =
              (null === (t = _.body) || void 0 === t
                ? void 0
                : t.retry_after) || 5,
            r = Date.now() + 1e3 * n;
          if (null != E) {
            if (E.retryAfterTimestamp < r)
              T.verbose(
                "cleanupRequestEntry: extending rate limit for ",
                e.url
              ),
                clearTimeout(E.timeoutId);
            else {
              T.verbose(
                "cleanupRequestEntry: already has rate limit for ",
                e.url
              );
              return;
            }
          }
          T.verbose(
            "cleanupRequestEntry: rate limit for "
              .concat(e.url, " retry after ")
              .concat(n, " seconds")
          );
          let a = setTimeout(() => A(e.url), 1e3 * n);
          O.set(e.url, {
            queue:
              null !== (o = null == E ? void 0 : E.queue) && void 0 !== o
                ? o
                : [],
            retryAfterTimestamp: r,
            timeoutId: a,
          });
        } else
          null != E &&
            E.retryAfterTimestamp < Date.now() &&
            (T.verbose(
              "cleanupRequestEntry: rate limit for ",
              e.url,
              "expired"
            ),
            A(e.url));
      }
      function l(e, _, E) {
        return new Promise((t, o) => {
          "string" == typeof _ && (_ = { url: _ });
          let n = O.get(_.url);
          null != n
            ? (T.verbose("makeRequest: queueing request for ", _.url),
              n.queue.push(N.bind(null, e, _, t, o, E)))
            : N(e, _, t, o, E);
        });
      }
      let L = l.bind(null, "get"),
        u = l.bind(null, "post"),
        C = l.bind(null, "put"),
        D = l.bind(null, "patch"),
        c = l.bind(null, "del");
      if (E.g.isServerRendering) {
        let e = (e, _) =>
          Promise.resolve({
            ok: !0,
            status: 200,
            headers: {},
            body: null,
            text: "",
          });
        (L = e), (u = e), (C = e), (D = e), (c = e);
      }
      var d = {
        get: L,
        post: u,
        put: C,
        patch: D,
        delete: c,
        V6OrEarlierAPIError: a.default,
        V8APIError: i.default,
        getAPIBaseURL() {
          let e =
            !(arguments.length > 0) || void 0 === arguments[0] || arguments[0];
          return (
            "https:" +
            window.GLOBAL_ENV.API_ENDPOINT +
            (e ? "/v".concat(window.GLOBAL_ENV.API_VERSION) : "")
          );
        },
      };
      let U = null;
      function M(e) {
        U = e;
      }
      let h = () => Promise.resolve();
      function P(e) {
        h = e;
      }
    },
    644642: function (e, _, E) {
      "use strict";
      var t;
      E.r(_),
        E.d(_, {
          default: function () {
            return t;
          },
        }),
        E("70102");
      t = class {
        getFieldMessage(e) {
          return null != this.fields[e] ? this.fields[e][0] : null;
        }
        constructor(e, _, E = "An unexpected error occurred.") {
          let {
            message: t,
            code: o,
            retryAfter: n,
            fields: r,
            status: a,
          } = (function (e, _) {
            if ("string" == typeof e) return { message: e, code: _ };
            if (null != e.body) {
              if (
                null != e.body.message &&
                !Array.isArray(e.body.message) &&
                (null == e.body.code || !Array.isArray(e.body.code))
              )
                return {
                  message: e.body.message,
                  code: e.body.code,
                  retryAfter: e.body.retry_after,
                  status: e.status,
                };
              {
                let _ = e.body,
                  E = null != _ ? Object.values(_)[0] : null;
                return {
                  message: null != E ? E[0] : void 0,
                  fields: _,
                  status: e.status,
                };
              }
            }
            return {};
          })(e, _);
          (this.message = t || E),
            (this.retryAfter = n),
            (this.code = o || -1),
            (this.fields = r || {}),
            (this.status = a),
            (this.error = Error(t));
        }
      };
    },
    486196: function (e, _, E) {
      "use strict";
      var t, o, n;
      E.r(_),
        E.d(_, {
          INVALID_FORM_BODY_ERROR_CODE: function () {
            return r;
          },
          CaptchaTypes: function () {
            return t;
          },
          default: function () {
            return o;
          },
        }),
        E("222007");
      let r = 50035;
      function a(e) {
        return e.map(e => ({ code: "UNKNOWN", message: e }));
      }
      ((n = t || (t = {})).HCAPTCHA = "hcaptcha"), (n.RECAPTCHA = "recaptcha");
      o = class {
        hasFieldErrors() {
          return null != this.errors && Object.keys(this.errors).length > 0;
        }
        getFieldErrors(e) {
          "string" == typeof e && (e = [e]);
          let _ = this.errors;
          for (; e.length > 0 && null != _; ) (_ = _[e[0]]), (e = e.splice(1));
          return null == _ ? void 0 : _._errors;
        }
        getFirstFieldErrorMessage(e) {
          let _ = this.getFieldErrors(e);
          return null == _ || _.length < 1 ? null : _[0].message;
        }
        getAnyErrorMessage() {
          var e, _;
          return null !==
            (_ =
              null === (e = this.getAnyErrorMessageAndField()) || void 0 === e
                ? void 0
                : e.error) && void 0 !== _
            ? _
            : this.message;
        }
        getAnyErrorMessageAndField() {
          let e = this.errors,
            _ = null;
          for (; null != e; ) {
            if (null != e._errors)
              return { fieldName: _, error: e._errors[0].message };
            (_ = Object.keys(e)[0]), (e = e[_]);
          }
          return null;
        }
        constructor(e, _, E = "An unexpected error occurred.") {
          let {
            message: t,
            code: o,
            retryAfter: n,
            errors: i,
            status: I,
            captchaFields: s,
          } = (function (e, _) {
            if ("string" == typeof e) return { message: e, code: _ };
            if (null == e.body) return { status: e.status };
            let E = e.body;
            return null == e.body.message ||
              Array.isArray(e.body.message) ||
              (null != e.body.code && Array.isArray(e.body.code))
              ? null != E && "captcha_key" in E
                ? {
                    code: -1,
                    captchaFields: E,
                    status: e.status,
                    message:
                      E.captcha_key.length > 0 ? E.captcha_key[0] : void 0,
                  }
                : {
                    status: e.status,
                    code: r,
                    errors: (function (e) {
                      let _ = {};
                      for (let [E, t] of Object.entries(e)) {
                        if ("_misc" === E) {
                          _._errors = a(t);
                          continue;
                        }
                        let e = {};
                        (e._errors = a(t)), (_[E] = e);
                      }
                      return _;
                    })(E),
                  }
              : {
                  message: E.message,
                  code: E.code,
                  retryAfter: E.retry_after,
                  errors: E.errors,
                  status: e.status,
                };
          })(e, _);
          (this.message = null != t ? t : E),
            (this.code = null != o ? o : -1),
            (this.retryAfter = n),
            (this.errors = i),
            (this.status = I),
            (this.captchaFields = null != s ? s : {});
        }
      };
    },
    614247: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return o;
          },
        });
      let t = "_errors";
      function o(e) {
        let _ = {};
        for (let E in e) {
          let o = e[E];
          if (null == o) continue;
          if (
            (E === t && (_._misc = e[E].map(e => e.message)), Array.isArray(o))
          )
            continue;
          let n = o[t];
          null != n
            ? (_[E] = n.map(e => e.message))
            : (_[E] = [Object.keys(o)[0]]);
        }
        return _;
      }
    },
    853812: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          FORMAT_RE: function () {
            return t;
          },
          MARKDOWN_RE: function () {
            return o;
          },
          UNSAFE_RE: function () {
            return n;
          },
          UNSAFE_RE_ALL: function () {
            return r;
          },
        });
      let t = /\{.+?\}/,
        o = /[~*_]{2}.+?[~*_]{2}|\[.*?\]\(.+?\)|\n\n/,
        n = /!!/,
        r = /!!/g;
    },
    601860: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          getSystemLocale: function () {
            return I;
          },
          default: function () {
            return t;
          },
        }),
        E("222007"),
        E("70102");
      var t,
        o = E("44170"),
        n = E("860347"),
        r = E.n(n),
        a = E("907407");
      (E.g.IntlMessageFormat = r),
        E("394069"),
        E("351752"),
        E("329547"),
        E("784943"),
        E("643072"),
        E("258947"),
        E("575137"),
        E("27213"),
        E("753950"),
        E("677642"),
        E("276542"),
        E("351643"),
        E("8575"),
        E("658724"),
        E("23647"),
        E("362209"),
        E("735062"),
        E("994548"),
        E("975990"),
        E("870043"),
        E("73319"),
        E("583263"),
        E("714405"),
        E("272318"),
        E("403290"),
        E("408237"),
        E("138432"),
        E("601337"),
        delete E.g.IntlMessageFormat,
        "undefined" == typeof Intl && E("246663");
      let i = "en-US";
      function I() {
        let e;
        {
          let _ = Array.isArray(navigator.languages)
            ? navigator.languages[0]
            : null;
          e =
            _ ||
            navigator.language ||
            navigator.browserLanguage ||
            navigator.userLanguage;
        }
        return null != e ? e : "";
      }
      class s {
        getMessages() {
          return this._parsedMessages;
        }
        constructor(e) {
          (this._context = { messages: {}, defaultMessages: {}, locale: i }),
            (this._parsedMessages = {}),
            (this._getParsedMessages = e);
        }
      }
      class T extends s {
        refresh(e) {
          (this._context = e), this._refresh(e, this._parsedMessages);
        }
        constructor(...e) {
          var _;
          super(...e),
            (_ = this),
            (this._refresh = function (e) {
              let E =
                arguments.length > 1 && void 0 !== arguments[1]
                  ? arguments[1]
                  : {};
              return (
                Object.keys(e.defaultMessages).forEach(t => {
                  Object.defineProperty(E, t, {
                    configurable: !0,
                    get: () => (
                      delete E[t],
                      (E[t] = _._getParsedMessages(e, t, _._refresh))
                    ),
                  });
                }),
                E
              );
            });
        }
      }
      class S extends s {
        refresh(e) {
          Object.assign(this._context, e),
            Object.keys(this._parsedMessages).forEach(e => {
              delete this._parsedMessages[e];
            });
        }
        constructor(e) {
          var _;
          super(e),
            (_ = this),
            (this._createProxy = function () {
              let e =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : _._context;
              return new Proxy(
                {},
                {
                  get: (E, t) =>
                    E[t] || (E[t] = _._getParsedMessages(e, t, _._createProxy)),
                }
              );
            }),
            (this._parsedMessages = this._createProxy(this._context));
        }
      }
      t = class extends o.EventEmitter {
        updateMessagesForExperiment(e, _) {
          let E = this._fetchMessages(e);
          if (E instanceof Promise) {
            E.then(E => {
              this._applyMessagesForLocale(_(E), e);
            });
            return;
          }
          this._applyMessagesForLocale(_(E), e);
        }
        setLocale(e) {
          if (this._chosenLocale === e) return;
          this._requestedLocale = e;
          let _ = this._chosenLocale;
          (this._chosenLocale = e),
            (this.loadPromise = this._loadMessagesForLocale(e)),
            this.emit("locale", this._chosenLocale, _);
        }
        setUpdateRules(e) {
          (0, a.setUpdateRules)(e);
        }
        getLanguages() {
          return this._languages;
        }
        getAvailableLocales() {
          return this._languages
            .filter(e => {
              let { enabled: _ } = e;
              return _;
            })
            .map(e => {
              var _;
              let { code: E, name: t } = e;
              return {
                value: E,
                name: t,
                localizedName:
                  null !== (_ = this.Messages[E]) && void 0 !== _ ? _ : t,
              };
            })
            .sort((e, _) => {
              let { name: E } = e,
                { name: t } = _;
              return (
                (E = E.toLowerCase()),
                E < (t = t.toLowerCase()) ? -1 : E > t ? 1 : 0
              );
            });
        }
        getLocale() {
          return this._chosenLocale;
        }
        getLocaleInfo() {
          return this._languages.find(e => e.code === this._chosenLocale);
        }
        getDefaultLocale() {
          var e, _, E;
          let t = null !== (e = I()) && void 0 !== e ? e : i,
            o = this._languages
              .filter(e => {
                let { enabled: _ } = e;
                return _;
              })
              .map(e => {
                let { code: _ } = e;
                return _;
              });
          if (o.includes(t)) return t;
          let n = t.split("-");
          return o.includes(n[0])
            ? n[0]
            : "zh" === n[0] && n.length > 1 && "Hant" === n[1]
              ? null !== (_ = o.find(e => "zh-TW" === e)) && void 0 !== _
                ? _
                : i
              : null !== (E = o.find(e => e.split("-")[0] === n[0])) &&
                  void 0 !== E
                ? E
                : i;
        }
        _loadMessagesForLocale(e) {
          let _ = this._fetchMessages(e);
          return _ instanceof Promise
            ? _.then(_ => this._applyMessagesForLocale(_, e))
            : (this._applyMessagesForLocale(_, e), Promise.resolve());
        }
        _applyMessagesForLocale(e, _) {
          let E =
            arguments.length > 2 && void 0 !== arguments[2]
              ? arguments[2]
              : this._findMessages(i);
          this._requestedLocale === _ &&
            (this._provider.refresh({
              messages: e,
              defaultMessages: E,
              locale: _,
            }),
            this.resolveLanguageLoaded());
        }
        _findMessages(e) {
          let _ = this._fetchMessages(e);
          if (_ instanceof Promise) throw Error("Messages are still loading.");
          return _;
        }
        _fetchMessages(e) {
          let _ =
            e === i
              ? () => {
                  throw Error("Error Loading ".concat(i));
                }
              : () =>
                  (console.warn("Unsupported Locale", e), -1 === e.indexOf("-"))
                    ? this._fetchMessages(i)
                    : this._fetchMessages(e.split("-")[0]);
          try {
            let E = this._getMessages(e);
            return E instanceof Promise ? E.catch(_) : E;
          } catch (e) {
            return _();
          }
        }
        constructor({ initialLocale: e, getMessages: _, getLanguages: t }) {
          super(),
            (this.loadPromise = Promise.resolve()),
            (this.resolveLanguageLoaded = () => {}),
            (this._languages = []),
            (this._chosenLocale = ""),
            (this._getParsedMessages = (e, _, E) => {
              let { messages: t, defaultMessages: o, locale: n } = e,
                r = t[_] || o[_];
              if ("object" == typeof r)
                return E({ messages: r, defaultMessages: o[_], locale: n });
              try {
                return (0, a.getMessage)(r, n);
              } catch (e) {
                if (
                  (console.warn(
                    "Failed parsing intl key '"
                      .concat(String(_), "' in locale '")
                      .concat(n, "' defaulting to English"),
                    e
                  ),
                  "string" == typeof (r = o[_]))
                )
                  return (0, a.getMessage)(r, n);
              }
              return "";
            }),
            (this._handleNewListener = e => {
              if ("locale" === e) this.emit(e, this._chosenLocale);
            }),
            (this.initialLanguageLoad = new Promise((e, _) => {
              this.resolveLanguageLoaded = e;
            })),
            Intl.__addLocaleData && Intl.__addLocaleData(E("169123")),
            (this._languages = t()),
            (this._provider =
              null != window.Proxy
                ? new S(this._getParsedMessages)
                : new T(this._getParsedMessages)),
            (this.Messages = this._provider.getMessages()),
            (this._getMessages = _),
            this.setLocale(e || this.getDefaultLocale()),
            this.on("newListener", this._handleNewListener);
        }
      };
    },
    429030: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          setUpdateRules: function () {
            return t.setUpdateRules;
          },
          FormattedMessage: function () {
            return t.FormattedMessage;
          },
          default: function () {
            return o.default;
          },
          getSystemLocale: function () {
            return o.getSystemLocale;
          },
        });
      var t = E("907407"),
        o = E("601860");
    },
    841206: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return O;
          },
        });
      var t = E("404828");
      let {
        newline: o,
        paragraph: n,
        url: r,
        link: a,
        strong: i,
        u: I,
        br: s,
        em: T,
        image: S,
        text: N,
      } = t.defaultRules;
      var O = {
        newline: o,
        paragraph: n,
        url: r,
        link: {
          ...a,
          parse(e, _, E) {
            let t = a.parse(e, _, E);
            return (t.context = E.context), t;
          },
        },
        strong: i,
        u: I,
        br: s,
        em: T,
        image: S,
        hook: {
          order: N.order,
          match: (0, t.inlineRegex)(/^\$\[(.*?)\]\((\w+)\)/),
          parse(e, _, E) {
            let { context: t } = E;
            return { render: t[e[2]], content: _(e[1], E) };
          },
          react: (e, _, E) => e.render(_(e.content, E), E.key),
        },
        noparse: {
          order: N.order,
          match: (0, t.inlineRegex)(/^!!(\d+?)!!/),
          parse(e, _, E) {
            let { unsafeContext: t } = E,
              o = t[e[1]];
            return (
              "string" != typeof o && (o = null != o ? o.toString() : ""),
              { type: "text", content: o }
            );
          },
          react: e => e.content,
        },
        text: N,
      };
    },
    907407: function (e, _, E) {
      "use strict";
      let t, o;
      E.r(_),
        E.d(_, {
          FormattedMessage: function () {
            return T;
          },
          setUpdateRules: function () {
            return S;
          },
          getMessage: function () {
            return N;
          },
        }),
        E("222007"),
        E("781738");
      var n = E("860347"),
        r = E.n(n),
        a = E("404828"),
        i = E.n(a),
        I = E("841206"),
        s = E("853812");
      class T {
        format(e) {
          if (!this.hasMarkdown) return this.intlMessage.format(e);
          let [_, E] = this.getContext(e);
          return t(this.intlMessage.format(_), _, E);
        }
        astFormat(e) {
          let [_, E] = this.getContext(e);
          return o(this.intlMessage.format(_), _, E);
        }
        plainFormat(e) {
          return this.intlMessage.format(e);
        }
        getContext(e) {
          let _ = s.UNSAFE_RE.test(this.message),
            E = {};
          if (_) {
            let _ = 0;
            for (let [t, o] of Object.entries(e))
              this.message.includes("!!{".concat(t, "}!!")) &&
                ((E[++_] = o), (e[t] = _));
          }
          return [e, E];
        }
        constructor(e, _, E) {
          (this.message = E ? e : e.replace(s.UNSAFE_RE_ALL, "")),
            (this.hasMarkdown = E),
            (this.intlMessage = new r(this.message, _));
        }
      }
      function S(e) {
        (t = (function (e, _) {
          let E = i.parserFor(_(e)),
            t = i.reactFor(i.ruleOutput(e, "react"));
          return (e, _, o) => {
            let n = !e.includes("\n\n");
            return (
              !n && (e += "\n\n"),
              t(E(e, { inline: n, context: _, unsafeContext: o }))
            );
          };
        })(I.default, e)),
          (o = (function (e) {
            let _ = i.parserFor(e);
            return (e, E, t) =>
              _(e + "\n\n", { inline: !1, context: E, unsafeContext: t });
          })(I.default));
      }
      function N(e, _) {
        if (null == e) return "";
        null == t && S(E("186372").default), (e = e.replace(/^\n+|\n+$/g, ""));
        let o = s.FORMAT_RE.test(e),
          n = s.MARKDOWN_RE.test(e);
        return o || n ? new T(e, _, n) : e;
      }
    },
    186372: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return n;
          },
        });
      var t = E("37983");
      E("884691");
      var o = E("404828");
      function n(e) {
        return (
          (e.heading = o.defaultRules.heading),
          (e.lheading = o.defaultRules.lheading),
          (e.list = o.defaultRules.list),
          (e.paragraph = {
            ...e.paragraph,
            react: function (e, _, E) {
              return (0, t.jsx)("p", { children: _(e.content, E) }, E.key);
            },
          }),
          (e.link = {
            ...e.link,
            react: function (e, _, E) {
              let n = {};
              if (null != e.context) {
                let _ = e.context[e.target];
                _ && _.onClick
                  ? ((n.onClick = _.onClick),
                    (n.onContextMenu = _.onContextMenu))
                  : (n.onClick = _);
              }
              return (
                null == n.onClick &&
                  ((n.href = (0, o.sanitizeUrl)(e.target)),
                  (n.target = "_blank")),
                (0, t.jsx)(
                  "a",
                  {
                    title: e.title,
                    ...n,
                    rel: "noreferrer",
                    children: _(e.content, E),
                  },
                  E.key
                )
              );
            },
          }),
          e
        );
      }
    },
    713349: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          GIFType: function () {
            return t;
          },
          FrecencyUserSettings: function () {
            return i;
          },
          FavoriteGIFs: function () {
            return s;
          },
          FavoriteGIF: function () {
            return S;
          },
          FavoriteStickers: function () {
            return O;
          },
          StickerFrecency: function () {
            return R;
          },
          FavoriteEmojis: function () {
            return L;
          },
          EmojiFrecency: function () {
            return C;
          },
          ApplicationCommandFrecency: function () {
            return c;
          },
          FrecencyItem: function () {
            return U;
          },
          FavoriteSoundboardSounds: function () {
            return h;
          },
          PlayedSoundFrecency: function () {
            return p;
          },
          ApplicationFrecency: function () {
            return y;
          },
          GuildAndChannelFrecency: function () {
            return f;
          },
        }),
        E("222007"),
        E("70102"),
        E("424973");
      var t,
        o,
        n = E("849266"),
        r = E("959714");
      ((o = t || (t = {}))[(o.NONE = 0)] = "NONE"),
        (o[(o.IMAGE = 1)] = "IMAGE"),
        (o[(o.VIDEO = 2)] = "VIDEO");
      class a extends n.MessageType {
        create(e) {
          let _ = {};
          return (
            globalThis.Object.defineProperty(_, n.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, n.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            a = e.pos + _;
          for (; e.pos < a; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.versions = r.Versions.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.versions
                );
                break;
              case 2:
                o.favoriteGifs = s.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.favoriteGifs
                );
                break;
              case 3:
                o.favoriteStickers = O.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.favoriteStickers
                );
                break;
              case 4:
                o.stickerFrecency = R.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.stickerFrecency
                );
                break;
              case 5:
                o.favoriteEmojis = L.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.favoriteEmojis
                );
                break;
              case 6:
                o.emojiFrecency = C.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.emojiFrecency
                );
                break;
              case 7:
                o.applicationCommandFrecency = c.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.applicationCommandFrecency
                );
                break;
              case 8:
                o.favoriteSoundboardSounds = h.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.favoriteSoundboardSounds
                );
                break;
              case 9:
                o.applicationFrecency = y.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.applicationFrecency
                );
                break;
              case 10:
                o.heardSoundFrecency = m.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.heardSoundFrecency
                );
                break;
              case 11:
                o.playedSoundFrecency = p.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.playedSoundFrecency
                );
                break;
              case 12:
                o.guildAndChannelFrecency = f.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.guildAndChannelFrecency
                );
                break;
              default:
                let a = E.readUnknownField;
                if ("throw" === a)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let i = e.skip(t);
                !1 !== a &&
                  (!0 === a ? n.UnknownFieldHandler.onRead : a)(
                    this.typeName,
                    o,
                    _,
                    t,
                    i
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          e.versions &&
            r.Versions.internalBinaryWrite(
              e.versions,
              _.tag(1, n.WireType.LengthDelimited).fork(),
              E
            ).join(),
            e.favoriteGifs &&
              s
                .internalBinaryWrite(
                  e.favoriteGifs,
                  _.tag(2, n.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.favoriteStickers &&
              O.internalBinaryWrite(
                e.favoriteStickers,
                _.tag(3, n.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.stickerFrecency &&
              R.internalBinaryWrite(
                e.stickerFrecency,
                _.tag(4, n.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.favoriteEmojis &&
              L.internalBinaryWrite(
                e.favoriteEmojis,
                _.tag(5, n.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.emojiFrecency &&
              C.internalBinaryWrite(
                e.emojiFrecency,
                _.tag(6, n.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.applicationCommandFrecency &&
              c
                .internalBinaryWrite(
                  e.applicationCommandFrecency,
                  _.tag(7, n.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.favoriteSoundboardSounds &&
              h
                .internalBinaryWrite(
                  e.favoriteSoundboardSounds,
                  _.tag(8, n.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.applicationFrecency &&
              y
                .internalBinaryWrite(
                  e.applicationFrecency,
                  _.tag(9, n.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.heardSoundFrecency &&
              m
                .internalBinaryWrite(
                  e.heardSoundFrecency,
                  _.tag(10, n.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.playedSoundFrecency &&
              p
                .internalBinaryWrite(
                  e.playedSoundFrecency,
                  _.tag(11, n.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.guildAndChannelFrecency &&
              f
                .internalBinaryWrite(
                  e.guildAndChannelFrecency,
                  _.tag(12, n.WireType.LengthDelimited).fork(),
                  E
                )
                .join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? n.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.FrecencyUserSettings", [
            { no: 1, name: "versions", kind: "message", T: () => r.Versions },
            { no: 2, name: "favorite_gifs", kind: "message", T: () => s },
            { no: 3, name: "favorite_stickers", kind: "message", T: () => O },
            { no: 4, name: "sticker_frecency", kind: "message", T: () => R },
            { no: 5, name: "favorite_emojis", kind: "message", T: () => L },
            { no: 6, name: "emoji_frecency", kind: "message", T: () => C },
            {
              no: 7,
              name: "application_command_frecency",
              kind: "message",
              T: () => c,
            },
            {
              no: 8,
              name: "favorite_soundboard_sounds",
              kind: "message",
              T: () => h,
            },
            {
              no: 9,
              name: "application_frecency",
              kind: "message",
              T: () => y,
            },
            {
              no: 10,
              name: "heard_sound_frecency",
              kind: "message",
              T: () => m,
            },
            {
              no: 11,
              name: "played_sound_frecency",
              kind: "message",
              T: () => p,
            },
            {
              no: 12,
              name: "guild_and_channel_frecency",
              kind: "message",
              T: () => f,
            },
          ]);
        }
      }
      let i = new a();
      class I extends n.MessageType {
        create(e) {
          let _ = { gifs: {}, hideTooltip: !1 };
          return (
            globalThis.Object.defineProperty(_, n.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, n.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                this.binaryReadMap1(o.gifs, e, E);
                break;
              case 2:
                o.hideTooltip = e.bool();
                break;
              default:
                let r = E.readUnknownField;
                if ("throw" === r)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let a = e.skip(t);
                !1 !== r &&
                  (!0 === r ? n.UnknownFieldHandler.onRead : r)(
                    this.typeName,
                    o,
                    _,
                    t,
                    a
                  );
            }
          }
          return o;
        }
        binaryReadMap1(e, _, E) {
          let t = _.uint32(),
            o = _.pos + t,
            n,
            r;
          for (; _.pos < o; ) {
            let [e, t] = _.tag();
            switch (e) {
              case 1:
                n = _.string();
                break;
              case 2:
                r = S.internalBinaryRead(_, _.uint32(), E);
                break;
              default:
                throw new globalThis.Error(
                  "unknown map entry field for field discord_protos.discord_users.v1.FavoriteGIFs.gifs"
                );
            }
          }
          e[null != n ? n : ""] = null != r ? r : S.create();
        }
        internalBinaryWrite(e, _, E) {
          for (let t of Object.keys(e.gifs))
            _.tag(1, n.WireType.LengthDelimited)
              .fork()
              .tag(1, n.WireType.LengthDelimited)
              .string(t),
              _.tag(2, n.WireType.LengthDelimited).fork(),
              S.internalBinaryWrite(e.gifs[t], _, E),
              _.join().join();
          !1 !== e.hideTooltip &&
            _.tag(2, n.WireType.Varint).bool(e.hideTooltip);
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? n.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.FavoriteGIFs", [
            {
              no: 1,
              name: "gifs",
              kind: "map",
              K: 9,
              V: { kind: "message", T: () => S },
            },
            { no: 2, name: "hide_tooltip", kind: "scalar", T: 8 },
          ]);
        }
      }
      let s = new I();
      class T extends n.MessageType {
        create(e) {
          let _ = { format: 0, src: "", width: 0, height: 0, order: 0 };
          return (
            globalThis.Object.defineProperty(_, n.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, n.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.format = e.int32();
                break;
              case 2:
                o.src = e.string();
                break;
              case 3:
                o.width = e.uint32();
                break;
              case 4:
                o.height = e.uint32();
                break;
              case 5:
                o.order = e.uint32();
                break;
              default:
                let r = E.readUnknownField;
                if ("throw" === r)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let a = e.skip(t);
                !1 !== r &&
                  (!0 === r ? n.UnknownFieldHandler.onRead : r)(
                    this.typeName,
                    o,
                    _,
                    t,
                    a
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          0 !== e.format && _.tag(1, n.WireType.Varint).int32(e.format),
            "" !== e.src && _.tag(2, n.WireType.LengthDelimited).string(e.src),
            0 !== e.width && _.tag(3, n.WireType.Varint).uint32(e.width),
            0 !== e.height && _.tag(4, n.WireType.Varint).uint32(e.height),
            0 !== e.order && _.tag(5, n.WireType.Varint).uint32(e.order);
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? n.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.FavoriteGIF", [
            {
              no: 1,
              name: "format",
              kind: "enum",
              T: () => ["discord_protos.discord_users.v1.GIFType", t],
            },
            { no: 2, name: "src", kind: "scalar", T: 9 },
            { no: 3, name: "width", kind: "scalar", T: 13 },
            { no: 4, name: "height", kind: "scalar", T: 13 },
            { no: 5, name: "order", kind: "scalar", T: 13 },
          ]);
        }
      }
      let S = new T();
      class N extends n.MessageType {
        create(e) {
          let _ = { stickerIds: [] };
          return (
            globalThis.Object.defineProperty(_, n.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, n.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, t] = e.tag();
            if (1 === _) {
              if (t === n.WireType.LengthDelimited)
                for (let _ = e.int32() + e.pos; e.pos < _; )
                  o.stickerIds.push(e.fixed64().toString());
              else o.stickerIds.push(e.fixed64().toString());
            } else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(t);
              !1 !== r &&
                (!0 === r ? n.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  o,
                  _,
                  t,
                  a
                );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          if (e.stickerIds.length) {
            _.tag(1, n.WireType.LengthDelimited).fork();
            for (let E = 0; E < e.stickerIds.length; E++)
              _.fixed64(e.stickerIds[E]);
            _.join();
          }
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? n.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.FavoriteStickers", [
            { no: 1, name: "sticker_ids", kind: "scalar", repeat: 1, T: 6 },
          ]);
        }
      }
      let O = new N();
      class A extends n.MessageType {
        create(e) {
          let _ = { stickers: {} };
          return (
            globalThis.Object.defineProperty(_, n.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, n.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, t] = e.tag();
            if (1 === _) this.binaryReadMap1(o.stickers, e, E);
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(t);
              !1 !== r &&
                (!0 === r ? n.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  o,
                  _,
                  t,
                  a
                );
            }
          }
          return o;
        }
        binaryReadMap1(e, _, E) {
          let t = _.uint32(),
            o = _.pos + t,
            n,
            r;
          for (; _.pos < o; ) {
            let [e, t] = _.tag();
            switch (e) {
              case 1:
                n = _.fixed64().toString();
                break;
              case 2:
                r = U.internalBinaryRead(_, _.uint32(), E);
                break;
              default:
                throw new globalThis.Error(
                  "unknown map entry field for field discord_protos.discord_users.v1.StickerFrecency.stickers"
                );
            }
          }
          e[null != n ? n : "0"] = null != r ? r : U.create();
        }
        internalBinaryWrite(e, _, E) {
          for (let t of Object.keys(e.stickers))
            _.tag(1, n.WireType.LengthDelimited)
              .fork()
              .tag(1, n.WireType.Bit64)
              .fixed64(t),
              _.tag(2, n.WireType.LengthDelimited).fork(),
              U.internalBinaryWrite(e.stickers[t], _, E),
              _.join().join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? n.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.StickerFrecency", [
            {
              no: 1,
              name: "stickers",
              kind: "map",
              K: 6,
              V: { kind: "message", T: () => U },
            },
          ]);
        }
      }
      let R = new A();
      class l extends n.MessageType {
        create(e) {
          let _ = { emojis: [] };
          return (
            globalThis.Object.defineProperty(_, n.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, n.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, t] = e.tag();
            if (1 === _) o.emojis.push(e.string());
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(t);
              !1 !== r &&
                (!0 === r ? n.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  o,
                  _,
                  t,
                  a
                );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          for (let E = 0; E < e.emojis.length; E++)
            _.tag(1, n.WireType.LengthDelimited).string(e.emojis[E]);
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? n.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.FavoriteEmojis", [
            { no: 1, name: "emojis", kind: "scalar", repeat: 2, T: 9 },
          ]);
        }
      }
      let L = new l();
      class u extends n.MessageType {
        create(e) {
          let _ = { emojis: {} };
          return (
            globalThis.Object.defineProperty(_, n.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, n.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, t] = e.tag();
            if (1 === _) this.binaryReadMap1(o.emojis, e, E);
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(t);
              !1 !== r &&
                (!0 === r ? n.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  o,
                  _,
                  t,
                  a
                );
            }
          }
          return o;
        }
        binaryReadMap1(e, _, E) {
          let t = _.uint32(),
            o = _.pos + t,
            n,
            r;
          for (; _.pos < o; ) {
            let [e, t] = _.tag();
            switch (e) {
              case 1:
                n = _.string();
                break;
              case 2:
                r = U.internalBinaryRead(_, _.uint32(), E);
                break;
              default:
                throw new globalThis.Error(
                  "unknown map entry field for field discord_protos.discord_users.v1.EmojiFrecency.emojis"
                );
            }
          }
          e[null != n ? n : ""] = null != r ? r : U.create();
        }
        internalBinaryWrite(e, _, E) {
          for (let t of Object.keys(e.emojis))
            _.tag(1, n.WireType.LengthDelimited)
              .fork()
              .tag(1, n.WireType.LengthDelimited)
              .string(t),
              _.tag(2, n.WireType.LengthDelimited).fork(),
              U.internalBinaryWrite(e.emojis[t], _, E),
              _.join().join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? n.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.EmojiFrecency", [
            {
              no: 1,
              name: "emojis",
              kind: "map",
              K: 9,
              V: { kind: "message", T: () => U },
            },
          ]);
        }
      }
      let C = new u();
      class D extends n.MessageType {
        create(e) {
          let _ = { applicationCommands: {} };
          return (
            globalThis.Object.defineProperty(_, n.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, n.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, t] = e.tag();
            if (1 === _) this.binaryReadMap1(o.applicationCommands, e, E);
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(t);
              !1 !== r &&
                (!0 === r ? n.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  o,
                  _,
                  t,
                  a
                );
            }
          }
          return o;
        }
        binaryReadMap1(e, _, E) {
          let t = _.uint32(),
            o = _.pos + t,
            n,
            r;
          for (; _.pos < o; ) {
            let [e, t] = _.tag();
            switch (e) {
              case 1:
                n = _.string();
                break;
              case 2:
                r = U.internalBinaryRead(_, _.uint32(), E);
                break;
              default:
                throw new globalThis.Error(
                  "unknown map entry field for field discord_protos.discord_users.v1.ApplicationCommandFrecency.application_commands"
                );
            }
          }
          e[null != n ? n : ""] = null != r ? r : U.create();
        }
        internalBinaryWrite(e, _, E) {
          for (let t of Object.keys(e.applicationCommands))
            _.tag(1, n.WireType.LengthDelimited)
              .fork()
              .tag(1, n.WireType.LengthDelimited)
              .string(t),
              _.tag(2, n.WireType.LengthDelimited).fork(),
              U.internalBinaryWrite(e.applicationCommands[t], _, E),
              _.join().join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? n.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.ApplicationCommandFrecency", [
            {
              no: 1,
              name: "application_commands",
              kind: "map",
              K: 9,
              V: { kind: "message", T: () => U },
            },
          ]);
        }
      }
      let c = new D();
      class d extends n.MessageType {
        create(e) {
          let _ = { totalUses: 0, recentUses: [], frecency: 0, score: 0 };
          return (
            globalThis.Object.defineProperty(_, n.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, n.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.totalUses = e.uint32();
                break;
              case 2:
                if (t === n.WireType.LengthDelimited)
                  for (let _ = e.int32() + e.pos; e.pos < _; )
                    o.recentUses.push(e.uint64().toString());
                else o.recentUses.push(e.uint64().toString());
                break;
              case 3:
                o.frecency = e.int32();
                break;
              case 4:
                o.score = e.int32();
                break;
              default:
                let r = E.readUnknownField;
                if ("throw" === r)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let a = e.skip(t);
                !1 !== r &&
                  (!0 === r ? n.UnknownFieldHandler.onRead : r)(
                    this.typeName,
                    o,
                    _,
                    t,
                    a
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          if (
            (0 !== e.totalUses &&
              _.tag(1, n.WireType.Varint).uint32(e.totalUses),
            e.recentUses.length)
          ) {
            _.tag(2, n.WireType.LengthDelimited).fork();
            for (let E = 0; E < e.recentUses.length; E++)
              _.uint64(e.recentUses[E]);
            _.join();
          }
          0 !== e.frecency && _.tag(3, n.WireType.Varint).int32(e.frecency),
            0 !== e.score && _.tag(4, n.WireType.Varint).int32(e.score);
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? n.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.FrecencyItem", [
            { no: 1, name: "total_uses", kind: "scalar", T: 13 },
            { no: 2, name: "recent_uses", kind: "scalar", repeat: 1, T: 4 },
            { no: 3, name: "frecency", kind: "scalar", T: 5 },
            { no: 4, name: "score", kind: "scalar", T: 5 },
          ]);
        }
      }
      let U = new d();
      class M extends n.MessageType {
        create(e) {
          let _ = { soundIds: [] };
          return (
            globalThis.Object.defineProperty(_, n.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, n.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, t] = e.tag();
            if (1 === _) {
              if (t === n.WireType.LengthDelimited)
                for (let _ = e.int32() + e.pos; e.pos < _; )
                  o.soundIds.push(e.fixed64().toString());
              else o.soundIds.push(e.fixed64().toString());
            } else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(t);
              !1 !== r &&
                (!0 === r ? n.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  o,
                  _,
                  t,
                  a
                );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          if (e.soundIds.length) {
            _.tag(1, n.WireType.LengthDelimited).fork();
            for (let E = 0; E < e.soundIds.length; E++)
              _.fixed64(e.soundIds[E]);
            _.join();
          }
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? n.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.FavoriteSoundboardSounds", [
            { no: 1, name: "sound_ids", kind: "scalar", repeat: 1, T: 6 },
          ]);
        }
      }
      let h = new M();
      class P extends n.MessageType {
        create(e) {
          let _ = { heardSounds: {} };
          return (
            globalThis.Object.defineProperty(_, n.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, n.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, t] = e.tag();
            if (1 === _) this.binaryReadMap1(o.heardSounds, e, E);
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(t);
              !1 !== r &&
                (!0 === r ? n.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  o,
                  _,
                  t,
                  a
                );
            }
          }
          return o;
        }
        binaryReadMap1(e, _, E) {
          let t = _.uint32(),
            o = _.pos + t,
            n,
            r;
          for (; _.pos < o; ) {
            let [e, t] = _.tag();
            switch (e) {
              case 1:
                n = _.string();
                break;
              case 2:
                r = U.internalBinaryRead(_, _.uint32(), E);
                break;
              default:
                throw new globalThis.Error(
                  "unknown map entry field for field discord_protos.discord_users.v1.HeardSoundFrecency.heard_sounds"
                );
            }
          }
          e[null != n ? n : ""] = null != r ? r : U.create();
        }
        internalBinaryWrite(e, _, E) {
          for (let t of Object.keys(e.heardSounds))
            _.tag(1, n.WireType.LengthDelimited)
              .fork()
              .tag(1, n.WireType.LengthDelimited)
              .string(t),
              _.tag(2, n.WireType.LengthDelimited).fork(),
              U.internalBinaryWrite(e.heardSounds[t], _, E),
              _.join().join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? n.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.HeardSoundFrecency", [
            {
              no: 1,
              name: "heard_sounds",
              kind: "map",
              K: 9,
              V: { kind: "message", T: () => U },
            },
          ]);
        }
      }
      let m = new P();
      class G extends n.MessageType {
        create(e) {
          let _ = { playedSounds: {} };
          return (
            globalThis.Object.defineProperty(_, n.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, n.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, t] = e.tag();
            if (1 === _) this.binaryReadMap1(o.playedSounds, e, E);
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(t);
              !1 !== r &&
                (!0 === r ? n.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  o,
                  _,
                  t,
                  a
                );
            }
          }
          return o;
        }
        binaryReadMap1(e, _, E) {
          let t = _.uint32(),
            o = _.pos + t,
            n,
            r;
          for (; _.pos < o; ) {
            let [e, t] = _.tag();
            switch (e) {
              case 1:
                n = _.string();
                break;
              case 2:
                r = U.internalBinaryRead(_, _.uint32(), E);
                break;
              default:
                throw new globalThis.Error(
                  "unknown map entry field for field discord_protos.discord_users.v1.PlayedSoundFrecency.played_sounds"
                );
            }
          }
          e[null != n ? n : ""] = null != r ? r : U.create();
        }
        internalBinaryWrite(e, _, E) {
          for (let t of Object.keys(e.playedSounds))
            _.tag(1, n.WireType.LengthDelimited)
              .fork()
              .tag(1, n.WireType.LengthDelimited)
              .string(t),
              _.tag(2, n.WireType.LengthDelimited).fork(),
              U.internalBinaryWrite(e.playedSounds[t], _, E),
              _.join().join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? n.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.PlayedSoundFrecency", [
            {
              no: 1,
              name: "played_sounds",
              kind: "map",
              K: 9,
              V: { kind: "message", T: () => U },
            },
          ]);
        }
      }
      let p = new G();
      class g extends n.MessageType {
        create(e) {
          let _ = { applications: {} };
          return (
            globalThis.Object.defineProperty(_, n.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, n.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, t] = e.tag();
            if (1 === _) this.binaryReadMap1(o.applications, e, E);
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(t);
              !1 !== r &&
                (!0 === r ? n.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  o,
                  _,
                  t,
                  a
                );
            }
          }
          return o;
        }
        binaryReadMap1(e, _, E) {
          let t = _.uint32(),
            o = _.pos + t,
            n,
            r;
          for (; _.pos < o; ) {
            let [e, t] = _.tag();
            switch (e) {
              case 1:
                n = _.string();
                break;
              case 2:
                r = U.internalBinaryRead(_, _.uint32(), E);
                break;
              default:
                throw new globalThis.Error(
                  "unknown map entry field for field discord_protos.discord_users.v1.ApplicationFrecency.applications"
                );
            }
          }
          e[null != n ? n : ""] = null != r ? r : U.create();
        }
        internalBinaryWrite(e, _, E) {
          for (let t of Object.keys(e.applications))
            _.tag(1, n.WireType.LengthDelimited)
              .fork()
              .tag(1, n.WireType.LengthDelimited)
              .string(t),
              _.tag(2, n.WireType.LengthDelimited).fork(),
              U.internalBinaryWrite(e.applications[t], _, E),
              _.join().join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? n.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.ApplicationFrecency", [
            {
              no: 1,
              name: "applications",
              kind: "map",
              K: 9,
              V: { kind: "message", T: () => U },
            },
          ]);
        }
      }
      let y = new g();
      class B extends n.MessageType {
        create(e) {
          let _ = { guildAndChannels: {} };
          return (
            globalThis.Object.defineProperty(_, n.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, n.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, t] = e.tag();
            if (1 === _) this.binaryReadMap1(o.guildAndChannels, e, E);
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(t);
              !1 !== r &&
                (!0 === r ? n.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  o,
                  _,
                  t,
                  a
                );
            }
          }
          return o;
        }
        binaryReadMap1(e, _, E) {
          let t = _.uint32(),
            o = _.pos + t,
            n,
            r;
          for (; _.pos < o; ) {
            let [e, t] = _.tag();
            switch (e) {
              case 1:
                n = _.fixed64().toString();
                break;
              case 2:
                r = U.internalBinaryRead(_, _.uint32(), E);
                break;
              default:
                throw new globalThis.Error(
                  "unknown map entry field for field discord_protos.discord_users.v1.GuildAndChannelFrecency.guild_and_channels"
                );
            }
          }
          e[null != n ? n : "0"] = null != r ? r : U.create();
        }
        internalBinaryWrite(e, _, E) {
          for (let t of Object.keys(e.guildAndChannels))
            _.tag(1, n.WireType.LengthDelimited)
              .fork()
              .tag(1, n.WireType.Bit64)
              .fixed64(t),
              _.tag(2, n.WireType.LengthDelimited).fork(),
              U.internalBinaryWrite(e.guildAndChannels[t], _, E),
              _.join().join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? n.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.GuildAndChannelFrecency", [
            {
              no: 1,
              name: "guild_and_channels",
              kind: "map",
              K: 6,
              V: { kind: "message", T: () => U },
            },
          ]);
        }
      }
      let f = new B();
    },
    151426: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          InboxTab: function () {
            return t;
          },
          GuildOnboardingProgress: function () {
            return n;
          },
          DismissibleGuildContent: function () {
            return r;
          },
          DismissibleContent: function () {
            return a;
          },
          ExplicitContentRedaction: function () {
            return i;
          },
          DmSpamFilterV2: function () {
            return I;
          },
          GuildActivityStatusRestrictionDefault: function () {
            return s;
          },
          Theme: function () {
            return T;
          },
          BackgroundGradientPresetId: function () {
            return S;
          },
          FavoriteChannelType: function () {
            return N;
          },
          PreloadedUserSettings: function () {
            return p;
          },
          InboxSettings: function () {
            return y;
          },
          AllGuildSettings: function () {
            return f;
          },
          GuildSettings: function () {
            return v;
          },
          ChannelSettings: function () {
            return Y;
          },
          UserContentSettings: function () {
            return k;
          },
          VoiceAndVideoSettings: function () {
            return Q;
          },
          TextAndImagesSettings: function () {
            return $;
          },
          NotificationSettings: function () {
            return ee;
          },
          PrivacySettings: function () {
            return eE;
          },
          DebugSettings: function () {
            return eo;
          },
          GameLibrarySettings: function () {
            return er;
          },
          GuildFolder: function () {
            return ec;
          },
          FavoriteChannel: function () {
            return eh;
          },
          AudioContextSetting: function () {
            return em;
          },
        }),
        E("222007"),
        E("70102"),
        E("311790"),
        E("477657"),
        E("811875"),
        E("90301"),
        E("652153"),
        E("28797"),
        E("817884"),
        E("597349"),
        E("667536"),
        E("690341"),
        E("424973");
      var t,
        o,
        n,
        r,
        a,
        i,
        I,
        s,
        T,
        S,
        N,
        O,
        A,
        R,
        l,
        L,
        u,
        C,
        D,
        c,
        d,
        U,
        M = E("849266"),
        h = E("750028"),
        P = E("801340"),
        m = E("959714");
      ((O = t || (t = {}))[(O.UNSPECIFIED = 0)] = "UNSPECIFIED"),
        (O[(O.MENTIONS = 1)] = "MENTIONS"),
        (O[(O.UNREADS = 2)] = "UNREADS"),
        (O[(O.TODOS = 3)] = "TODOS"),
        (O[(O.FOR_YOU = 4)] = "FOR_YOU"),
        (O[(O.GAME_INVITES = 5)] = "GAME_INVITES"),
        ((A = o || (o = {}))[(A.NO_PROGRESS = 0)] = "NO_PROGRESS"),
        (A[(A.JOIN_GUILD = 1)] = "JOIN_GUILD"),
        (A[(A.INVITE_USER = 2)] = "INVITE_USER"),
        (A[(A.CONTACT_SYNC = 4)] = "CONTACT_SYNC"),
        ((R = n || (n = {}))[(R.NO_GUILD_ONBOARDING = 0)] =
          "NO_GUILD_ONBOARDING"),
        (R[(R.GUILD_NOTICE_SHOWN = 1)] = "GUILD_NOTICE_SHOWN"),
        (R[(R.GUILD_NOTICE_CLEARED = 2)] = "GUILD_NOTICE_CLEARED"),
        ((l = r || (r = {}))[
          (l.DISABLE_UNSAFE_COMMUNITY_PERMISSIONS_NOTICE = 0)
        ] = "DISABLE_UNSAFE_COMMUNITY_PERMISSIONS_NOTICE"),
        (l[(l.CLYDE_GUILD_NOTICE_NUX = 1)] = "CLYDE_GUILD_NOTICE_NUX"),
        (l[(l.SUMMARIES_NOTICE = 2)] = "SUMMARIES_NOTICE"),
        (l[(l.SUMMARIES_ENABLED_NOTICE = 3)] = "SUMMARIES_ENABLED_NOTICE"),
        ((L = a || (a = {}))[(L.HUB_WAITLIST_UPSELL = 0)] =
          "HUB_WAITLIST_UPSELL"),
        (L[(L.APPLICATION_COMMAND_TOOLTIP = 1)] =
          "APPLICATION_COMMAND_TOOLTIP"),
        (L[(L.HUB_EVENT_HEADER_UPSELL = 2)] = "HUB_EVENT_HEADER_UPSELL"),
        (L[(L.CHANNELINFO_CHANNELBANNER_NOTICE = 3)] =
          "CHANNELINFO_CHANNELBANNER_NOTICE"),
        (L[(L.ACCOUNT_MULTIACCOUNT_TOOLTIP = 4)] =
          "ACCOUNT_MULTIACCOUNT_TOOLTIP"),
        (L[(L.SEASONALGIFTING_CHANNELBUTTON_POPUP = 5)] =
          "SEASONALGIFTING_CHANNELBUTTON_POPUP"),
        (L[(L.CHANNEL_NOTICE_INVITE = 6)] = "CHANNEL_NOTICE_INVITE"),
        (L[(L.CHANNEL_NOTICE_HUBLINK = 7)] = "CHANNEL_NOTICE_HUBLINK"),
        (L[(L.CHANNEL_NOTICE_QUICKSWITCHER = 8)] =
          "CHANNEL_NOTICE_QUICKSWITCHER"),
        (L[(L.CHANNEL_NOTICE_PREMIUM_GUILD_SUBSCRIPTION = 9)] =
          "CHANNEL_NOTICE_PREMIUM_GUILD_SUBSCRIPTION"),
        (L[(L.CHANNEL_NOTICE_GUILD_BANNER = 11)] =
          "CHANNEL_NOTICE_GUILD_BANNER"),
        (L[(L.GUILD_HEADER_EVENT_UPSELL = 12)] = "GUILD_HEADER_EVENT_UPSELL"),
        (L[(L.GUILD_HEADER_PREMIUM_GUILD_PROGRESS = 14)] =
          "GUILD_HEADER_PREMIUM_GUILD_PROGRESS"),
        (L[(L.GUILD_HEADER_ANIMATED_GUILD_BANNER = 15)] =
          "GUILD_HEADER_ANIMATED_GUILD_BANNER"),
        (L[(L.NAGBAR_NOTICE_DOWNLOAD = 16)] = "NAGBAR_NOTICE_DOWNLOAD"),
        (L[(L.NAGBAR_NOTICE_CONNECT_SPOTIFY = 17)] =
          "NAGBAR_NOTICE_CONNECT_SPOTIFY"),
        (L[(L.NAGBAR_NOTICE_CONNECT_PLAYSTATION = 18)] =
          "NAGBAR_NOTICE_CONNECT_PLAYSTATION"),
        (L[(L.NAGBAR_NOTICE_MFA_SMS_BACKUP = 19)] =
          "NAGBAR_NOTICE_MFA_SMS_BACKUP"),
        (L[(L.ACTIVITIES_SUNSET_COACH_MARK = 20)] =
          "ACTIVITIES_SUNSET_COACH_MARK"),
        (L[(L.NAGBAR_NOTICE_PREMIUM_PROMO = 21)] =
          "NAGBAR_NOTICE_PREMIUM_PROMO"),
        (L[(L.NAGBAR_NOTICE_PREMIUM_TIER_TWO_TRIAL_ENDING = 22)] =
          "NAGBAR_NOTICE_PREMIUM_TIER_TWO_TRIAL_ENDING"),
        (L[(L.NAGBAR_NOTICE_PREMIUM_REACTIVATE = 23)] =
          "NAGBAR_NOTICE_PREMIUM_REACTIVATE"),
        (L[(L.PREMIUM_5TH_ANNIVERSARY_MODAL = 24)] =
          "PREMIUM_5TH_ANNIVERSARY_MODAL"),
        (L[(L.GUILD_JOIN_FEEDBACK_MODAL = 25)] = "GUILD_JOIN_FEEDBACK_MODAL"),
        (L[(L.VOICE_QUALITY_BOOSTING_UPSELL_TOOLTIP = 26)] =
          "VOICE_QUALITY_BOOSTING_UPSELL_TOOLTIP"),
        (L[(L.ACTIVITIES_EARLY_USER_COACH_MARK = 27)] =
          "ACTIVITIES_EARLY_USER_COACH_MARK"),
        (L[(L.GUILD_HEADER_SERVER_DISCOVERY_TOOLTIP = 28)] =
          "GUILD_HEADER_SERVER_DISCOVERY_TOOLTIP"),
        (L[(L.ACTIVITIES_TUTORIAL_COACH_MARK = 29)] =
          "ACTIVITIES_TUTORIAL_COACH_MARK"),
        (L[(L.GUILD_HEADER_INVITE_SPLASH = 31)] = "GUILD_HEADER_INVITE_SPLASH"),
        (L[(L.NAGBAR_NOTICE_LOCALIZED_PRICING = 33)] =
          "NAGBAR_NOTICE_LOCALIZED_PRICING"),
        (L[(L.SOUNDBOARD_EDUCATION = 35)] = "SOUNDBOARD_EDUCATION"),
        (L[(L.GUILD_HEADER_PROGRESS_BAR_SIZE_COACH_MARK = 36)] =
          "GUILD_HEADER_PROGRESS_BAR_SIZE_COACH_MARK"),
        (L[(L.GUILD_HEADER_ROLE_SUBSCRIPTION_UPSELL = 37)] =
          "GUILD_HEADER_ROLE_SUBSCRIPTION_UPSELL"),
        (L[(L.CALL_CHAT_BUTTON_TEXT_IN_VOICE_COACH_MARK = 38)] =
          "CALL_CHAT_BUTTON_TEXT_IN_VOICE_COACH_MARK"),
        (L[(L.GUILD_DISCOVERY_LANDING_PAGE_SETTINGS_UPSELL = 39)] =
          "GUILD_DISCOVERY_LANDING_PAGE_SETTINGS_UPSELL"),
        (L[(L.GUILD_INSIGHTS_ACCESS_RATE_NEW = 40)] =
          "GUILD_INSIGHTS_ACCESS_RATE_NEW"),
        (L[(L.NOW_PLAYING_CONSENT_CARD = 41)] = "NOW_PLAYING_CONSENT_CARD"),
        (L[(L.GUILD_HEADER_BOOSTING_LOW_PRICE_EXPERIMENT_TOOLTIP = 42)] =
          "GUILD_HEADER_BOOSTING_LOW_PRICE_EXPERIMENT_TOOLTIP"),
        (L[(L.FORUM_CHANNEL_UPSELL_MODAL = 44)] = "FORUM_CHANNEL_UPSELL_MODAL"),
        (L[(L.POGGERMODE_BIRTHDAY_EDUCATION_TOOLTIP = 46)] =
          "POGGERMODE_BIRTHDAY_EDUCATION_TOOLTIP"),
        (L[(L.MWEB_APP_DOWNLOAD_HALFSHEET = 47)] =
          "MWEB_APP_DOWNLOAD_HALFSHEET"),
        (L[(L.MWEB_APP_DOWNLOAD_NAGBAR_THEMED = 48)] =
          "MWEB_APP_DOWNLOAD_NAGBAR_THEMED"),
        (L[(L.MWEB_APP_DOWNLOAD_NAGBAR_BLURPLE = 49)] =
          "MWEB_APP_DOWNLOAD_NAGBAR_BLURPLE"),
        (L[(L.GUILD_FEED_NUX_CARD = 50)] = "GUILD_FEED_NUX_CARD"),
        (L[(L.GUILD_HEADER_FREE_STICKER_SLOTS_TOOLTIP = 52)] =
          "GUILD_HEADER_FREE_STICKER_SLOTS_TOOLTIP"),
        (L[(L.ACTIVITIES_NITRO_TUTORIAL_COACH_MARK_V2 = 53)] =
          "ACTIVITIES_NITRO_TUTORIAL_COACH_MARK_V2"),
        (L[(L.ACTIVITIES_TEXT_INPUT_BUTTON_SPARKLES = 55)] =
          "ACTIVITIES_TEXT_INPUT_BUTTON_SPARKLES"),
        (L[(L.GUILD_DELETE_FEEDBACK = 56)] = "GUILD_DELETE_FEEDBACK"),
        (L[(L.GUILD_LEAVE_FEEDBACK = 57)] = "GUILD_LEAVE_FEEDBACK"),
        (L[(L.AUTH_SESSIONS_NEW = 63)] = "AUTH_SESSIONS_NEW"),
        (L[(L.DONUT_MOBILE_NUX = 65)] = "DONUT_MOBILE_NUX"),
        (L[(L.GUILD_ROLE_SUBSCRIPTION_MWEB_PURCHASE_UPSELL = 66)] =
          "GUILD_ROLE_SUBSCRIPTION_MWEB_PURCHASE_UPSELL"),
        (L[(L.FORUM_CHANNEL_HELPER_CARD = 67)] = "FORUM_CHANNEL_HELPER_CARD"),
        (L[(L.PASSPORT_USER_SETTINGS = 70)] = "PASSPORT_USER_SETTINGS"),
        (L[(L.SUMMER_BOGO_ANNOUNCEMENT = 71)] = "SUMMER_BOGO_ANNOUNCEMENT"),
        (L[(L.COMMANDS_MIGRATION_UPSELL_MODAL = 72)] =
          "COMMANDS_MIGRATION_UPSELL_MODAL"),
        (L[(L.FILE_LIMIT_UPLOAD_COACH_MARK = 73)] =
          "FILE_LIMIT_UPLOAD_COACH_MARK"),
        (L[(L.DONUT_DESKTOP_NUX = 77)] = "DONUT_DESKTOP_NUX"),
        (L[(L.GUILD_ROLE_SUBSCRIPTION_EMOJI_UPSELL = 79)] =
          "GUILD_ROLE_SUBSCRIPTION_EMOJI_UPSELL"),
        (L[(L.PREMIUM_SUBSCRIPTION_UPSELL_EMOJI_PICKER_TOP_OF_LIST = 80)] =
          "PREMIUM_SUBSCRIPTION_UPSELL_EMOJI_PICKER_TOP_OF_LIST"),
        (L[(L.STAGE_RAISED_HAND_MOVED = 81)] = "STAGE_RAISED_HAND_MOVED"),
        (L[(L.XBOX_ONE_WAY_RECONNECT = 82)] = "XBOX_ONE_WAY_RECONNECT"),
        (L[(L.XBOX_VOICE_DESKTOP_SETTINGS_UPSELL_POPOUT = 84)] =
          "XBOX_VOICE_DESKTOP_SETTINGS_UPSELL_POPOUT"),
        (L[(L.HUB_BACK_TO_SCHOOL_UPSELL = 85)] = "HUB_BACK_TO_SCHOOL_UPSELL"),
        (L[(L.STUDENT_HUB_PRIVACY_SETTINGS_TOOLTIP = 86)] =
          "STUDENT_HUB_PRIVACY_SETTINGS_TOOLTIP"),
        (L[(L.ACTIVITIES_MOBILE_VOICE_CONTROLS_TOGGLE_NUX = 89)] =
          "ACTIVITIES_MOBILE_VOICE_CONTROLS_TOGGLE_NUX"),
        (L[(L.PROFILE_THEMES_SETTINGS_VIEWED_V2 = 92)] =
          "PROFILE_THEMES_SETTINGS_VIEWED_V2"),
        (L[(L.GUILD_HEADER_ACTIVE_THREADS_NOTICE = 93)] =
          "GUILD_HEADER_ACTIVE_THREADS_NOTICE"),
        (L[(L.CHANNEL_LIST_OPT_IN_NUX = 94)] = "CHANNEL_LIST_OPT_IN_NUX"),
        (L[(L.ACTIVITIES_MOBILE_NUX = 95)] = "ACTIVITIES_MOBILE_NUX"),
        (L[(L.PROFILE_THEMES_NEW_BADGE = 96)] = "PROFILE_THEMES_NEW_BADGE"),
        (L[(L.GUILD_AUTOMOD_DEFAULT_ON_UPSELL = 97)] =
          "GUILD_AUTOMOD_DEFAULT_ON_UPSELL"),
        (L[(L.CHANNEL_BROWSER_NUX = 98)] = "CHANNEL_BROWSER_NUX"),
        (L[(L.RNA_CHANGELOG_HC_NOTICE = 99)] = "RNA_CHANGELOG_HC_NOTICE"),
        (L[(L.MESSAGE_REQUEST_SETTINGS_COACH_MARK = 100)] =
          "MESSAGE_REQUEST_SETTINGS_COACH_MARK"),
        (L[(L.GUILD_AUTOMOD_DEFAULT_ON_UPSELL_2 = 101)] =
          "GUILD_AUTOMOD_DEFAULT_ON_UPSELL_2"),
        (L[(L.GUILD_AUTOMOD_REGEX_UPSELL = 102)] =
          "GUILD_AUTOMOD_REGEX_UPSELL"),
        (L[(L.VOICE_CHANNEL_EFFECTS_REDUCED_MOTION_TOOLTIP = 103)] =
          "VOICE_CHANNEL_EFFECTS_REDUCED_MOTION_TOOLTIP"),
        (L[(L.CONNECTIONS_NUX = 108)] = "CONNECTIONS_NUX"),
        (L[(L.XBOX_VOICE_SURVEY_NAGBAR = 110)] = "XBOX_VOICE_SURVEY_NAGBAR"),
        (L[(L.PS_ONE_WAY_RECONNECT = 112)] = "PS_ONE_WAY_RECONNECT"),
        (L[(L.HALLOWEEN_2022_ACTIVITIES_COACH_MARK = 115)] =
          "HALLOWEEN_2022_ACTIVITIES_COACH_MARK"),
        (L[(L.NITRODUCTION_STEP_PROFILE_CUSTOMIZATION = 116)] =
          "NITRODUCTION_STEP_PROFILE_CUSTOMIZATION"),
        (L[(L.NITRODUCTION_STEP_BOOSTING = 117)] =
          "NITRODUCTION_STEP_BOOSTING"),
        (L[(L.NITRODUCTION_STEP_CUSTOM_EMOJI = 118)] =
          "NITRODUCTION_STEP_CUSTOM_EMOJI"),
        (L[(L.NEW_CRUNCHYROLL_CONNECTION = 119)] =
          "NEW_CRUNCHYROLL_CONNECTION"),
        (L[(L.APP_DIRECTORY_UPSELL_MODAL = 121)] =
          "APP_DIRECTORY_UPSELL_MODAL"),
        (L[(L.BASH_OUT_COACH_MARK = 123)] = "BASH_OUT_COACH_MARK"),
        (L[(L.GUILD_HEADER_COMMUNITY_ONBOARDING_ADMIN_UPSELL = 124)] =
          "GUILD_HEADER_COMMUNITY_ONBOARDING_ADMIN_UPSELL"),
        (L[(L.COMMUNITY_ONBOARDING_NEW_BADGE = 125)] =
          "COMMUNITY_ONBOARDING_NEW_BADGE"),
        (L[(L.CHURRO_LINK_UPSELL = 126)] = "CHURRO_LINK_UPSELL"),
        (L[(L.VERIFIED_ROLES_COACH_MARK = 127)] = "VERIFIED_ROLES_COACH_MARK"),
        (L[(L.PROFILE_THEMES_ACCESSIBILITY_TOOLTIP = 129)] =
          "PROFILE_THEMES_ACCESSIBILITY_TOOLTIP"),
        (L[(L.BLACK_FRIDAY_2022_BOGO_ANNOUNCEMENT_MODAL = 130)] =
          "BLACK_FRIDAY_2022_BOGO_ANNOUNCEMENT_MODAL"),
        (L[(L.USER_SAFETY_SAFE_DIRECT_MESSAGING = 131)] =
          "USER_SAFETY_SAFE_DIRECT_MESSAGING"),
        (L[(L.GG_ANNOUNCEMENT = 132)] = "GG_ANNOUNCEMENT"),
        (L[(L.CHANNEL_BROWSER_NEW_BADGE_NUX = 133)] =
          "CHANNEL_BROWSER_NEW_BADGE_NUX"),
        (L[(L.CREATOR_PROMO_PAGE_COACH_MARK = 134)] =
          "CREATOR_PROMO_PAGE_COACH_MARK"),
        (L[(L.CREATOR_MONETIZATION_ONBOARDING_V2_UPSELL = 136)] =
          "CREATOR_MONETIZATION_ONBOARDING_V2_UPSELL"),
        (L[(L.GUILD_ONBOARDING_UPSELL_MODAL = 137)] =
          "GUILD_ONBOARDING_UPSELL_MODAL"),
        (L[(L.NAGBAR_NOTICE_ONE_TIME_PAYMENT_PAST_DUE = 138)] =
          "NAGBAR_NOTICE_ONE_TIME_PAYMENT_PAST_DUE"),
        (L[(L.DROPS_GO_LIVE_BANNER_NOTICE_HALO = 139)] =
          "DROPS_GO_LIVE_BANNER_NOTICE_HALO"),
        (L[(L.DROPS_ELIGIBILITY_ENROLLMENT_TOOLTIP_HALO = 140)] =
          "DROPS_ELIGIBILITY_ENROLLMENT_TOOLTIP_HALO"),
        (L[(L.DROPS_QUEST_COMPLETION_TOOLTIP_HALO = 141)] =
          "DROPS_QUEST_COMPLETION_TOOLTIP_HALO"),
        (L[(L.SEASONAL_GIFTING_COACHMARK_2022 = 146)] =
          "SEASONAL_GIFTING_COACHMARK_2022"),
        (L[(L.NAGBAR_BOUNCED_EMAIL_NOTICE = 147)] =
          "NAGBAR_BOUNCED_EMAIL_NOTICE"),
        (L[(L.GUILD_ONBOARDING_UPSELL_CHANNEL_NOTICE = 151)] =
          "GUILD_ONBOARDING_UPSELL_CHANNEL_NOTICE"),
        (L[(L.CONSOLE_PTT_DISABLE_ALERT = 152)] = "CONSOLE_PTT_DISABLE_ALERT"),
        (L[(L.ACTIVITIES_MINI_SHELF_SPARKLES = 153)] =
          "ACTIVITIES_MINI_SHELF_SPARKLES"),
        (L[(L.DROPS_ENDED_INCOMPLETE_HALO = 154)] =
          "DROPS_ENDED_INCOMPLETE_HALO"),
        (L[(L.GDM_INVITE_REMINDER = 157)] = "GDM_INVITE_REMINDER"),
        (L[(L.USER_SAFETY_CONSUMER_EDUCATION_BLOCK = 161)] =
          "USER_SAFETY_CONSUMER_EDUCATION_BLOCK"),
        (L[(L.USER_SAFETY_CONSUMER_EDUCATION_MUTE = 162)] =
          "USER_SAFETY_CONSUMER_EDUCATION_MUTE"),
        (L[(L.LINKED_ROLE_ADMIN_GUILD = 163)] = "LINKED_ROLE_ADMIN_GUILD"),
        (L[(L.NAGBAR_ACTIVATE_SERVER_SUBSCRIPTION = 164)] =
          "NAGBAR_ACTIVATE_SERVER_SUBSCRIPTION"),
        (L[(L.BURST_REACTION_BUTTON_SPARKLE = 165)] =
          "BURST_REACTION_BUTTON_SPARKLE"),
        (L[(L.NAGBAR_NOTICE_PREMIUM_TIER_0_TRIAL_ENDING = 166)] =
          "NAGBAR_NOTICE_PREMIUM_TIER_0_TRIAL_ENDING"),
        (L[(L.VC_TILE_ACTIVITIES_ENTRY_POINT = 167)] =
          "VC_TILE_ACTIVITIES_ENTRY_POINT"),
        (L[(L.BURST_REACTION_COACHMARK = 169)] = "BURST_REACTION_COACHMARK"),
        (L[(L.BURST_REACTIONS_REMOVE_MODAL = 170)] =
          "BURST_REACTIONS_REMOVE_MODAL"),
        (L[(L.BURST_REACTION_NITRO_TOOLTIP = 171)] =
          "BURST_REACTION_NITRO_TOOLTIP"),
        (L[(L.CLIENT_THEMES_SETTINGS_BADGE = 173)] =
          "CLIENT_THEMES_SETTINGS_BADGE"),
        (L[(L.CLIENT_THEMES_COACHMARK = 174)] = "CLIENT_THEMES_COACHMARK"),
        (L[(L.CLIENT_THEMES_SPARKLE_PREVIEW = 175)] =
          "CLIENT_THEMES_SPARKLE_PREVIEW"),
        (L[(L.STAGE_V2_UPSELL = 176)] = "STAGE_V2_UPSELL"),
        (L[(L.QUEST_1_ENROLLMENT_TOOLTIP = 177)] =
          "QUEST_1_ENROLLMENT_TOOLTIP"),
        (L[(L.QUEST_1_COMPLETION_TOOLTIP = 178)] =
          "QUEST_1_COMPLETION_TOOLTIP"),
        (L[(L.QUEST_1_GO_LIVE_BANNER = 179)] = "QUEST_1_GO_LIVE_BANNER"),
        (L[(L.QUEST_1_ENDED_INCOMPLETE = 180)] = "QUEST_1_ENDED_INCOMPLETE"),
        (L[(L.PREMIUM_TUTORIAL_EXPERIENCE = 181)] =
          "PREMIUM_TUTORIAL_EXPERIENCE"),
        (L[(L.APP_DIRECTORY_SERVER_SETUP_UPSELL_MODAL = 182)] =
          "APP_DIRECTORY_SERVER_SETUP_UPSELL_MODAL"),
        (L[(L.PREMIUM_TUTORIAL_FILE_UPLOAD_COMPOSER_TOOLTIP = 183)] =
          "PREMIUM_TUTORIAL_FILE_UPLOAD_COMPOSER_TOOLTIP"),
        (L[(L.PREMIUM_TUTORIAL_STICKER_PICKER_COMPOSER_TOOLTIP = 184)] =
          "PREMIUM_TUTORIAL_STICKER_PICKER_COMPOSER_TOOLTIP"),
        (L[(L.PREMIUM_TUTORIAL_EMOJI_PICKER_COMPOSER_TOOLTIP = 185)] =
          "PREMIUM_TUTORIAL_EMOJI_PICKER_COMPOSER_TOOLTIP"),
        (L[(L.PREMIUM_TUTORIAL_SERVER_MENU_TOOLTIP = 186)] =
          "PREMIUM_TUTORIAL_SERVER_MENU_TOOLTIP"),
        (L[(L.TABS_V2_ANNOUNCEMENT_SHEET = 188)] =
          "TABS_V2_ANNOUNCEMENT_SHEET"),
        (L[(L.VOICE_MESSAGE_UPSELL_DM = 189)] = "VOICE_MESSAGE_UPSELL_DM"),
        (L[(L.SUPER_REACTIONS_NITRO_MARKETING = 190)] =
          "SUPER_REACTIONS_NITRO_MARKETING"),
        (L[(L.NITRO_DROP_2023_04_ANNOUNCEMENT_MODAL = 191)] =
          "NITRO_DROP_2023_04_ANNOUNCEMENT_MODAL"),
        (L[(L.ACTIVITY_COACH_MARK_GARTIC_PHONE = 192)] =
          "ACTIVITY_COACH_MARK_GARTIC_PHONE"),
        (L[(L.CLYDE_GUILD_HEADER_NUX = 193)] = "CLYDE_GUILD_HEADER_NUX"),
        (L[(L.CLYDE_CHAT_BAR_NUX = 194)] = "CLYDE_CHAT_BAR_NUX"),
        (L[(L.VOICE_MESSAGE_UPSELL_GUILD = 195)] =
          "VOICE_MESSAGE_UPSELL_GUILD"),
        (L[(L.ACTIVITY_GDM_CALL_TOOLTIP = 196)] = "ACTIVITY_GDM_CALL_TOOLTIP"),
        (L[(L.ACTIVITY_GDM_ROCKET_SPARKLE = 197)] =
          "ACTIVITY_GDM_ROCKET_SPARKLE"),
        (L[(L.NITRO_DROP_2023_04_NITRO_TAB_BADGE = 205)] =
          "NITRO_DROP_2023_04_NITRO_TAB_BADGE"),
        (L[(L.GUILD_ROLE_SUBSCRIPTION_IAP_UPSELL = 206)] =
          "GUILD_ROLE_SUBSCRIPTION_IAP_UPSELL"),
        (L[(L.ACTIVITIES_MOBILE_PIP_FAB_NUX = 208)] =
          "ACTIVITIES_MOBILE_PIP_FAB_NUX"),
        (L[(L.GUILD_HEADER_SOUNDBOARD_PERMISSION = 209)] =
          "GUILD_HEADER_SOUNDBOARD_PERMISSION"),
        (L[(L.GUILD_ONBOARDING_UPSELL_HEADER = 210)] =
          "GUILD_ONBOARDING_UPSELL_HEADER"),
        (L[(L.ACTIVITIES_COACH_MARK_GAME_NIGHT = 211)] =
          "ACTIVITIES_COACH_MARK_GAME_NIGHT"),
        (L[(L.GUILD_ONBOARDING_UPSELL_NAGBAR = 212)] =
          "GUILD_ONBOARDING_UPSELL_NAGBAR"),
        (L[(L.GUILD_ONBOARDING_UPSELL_MODAL_V2 = 213)] =
          "GUILD_ONBOARDING_UPSELL_MODAL_V2"),
        (L[(L.SUPER_REACTIONS_FREE_USER_FIRST_SENT = 214)] =
          "SUPER_REACTIONS_FREE_USER_FIRST_SENT"),
        (L[(L.SUPER_REACTIONS_TOOLTIP_COACHMARK = 215)] =
          "SUPER_REACTIONS_TOOLTIP_COACHMARK"),
        (L[(L.SOUNDBOARD_VOLUME_EDUCATION = 216)] =
          "SOUNDBOARD_VOLUME_EDUCATION"),
        (L[(L.NAGBAR_NOTICE_POMELO = 217)] = "NAGBAR_NOTICE_POMELO"),
        (L[(L.APP_DIRECTORY_GUILD_SETTINGS_NEW_INDICATOR = 218)] =
          "APP_DIRECTORY_GUILD_SETTINGS_NEW_INDICATOR"),
        (L[(L.APP_DIRECTORY_GUILD_SETTINGS_CONTEXT_MENU_NEW_INDICATOR = 219)] =
          "APP_DIRECTORY_GUILD_SETTINGS_CONTEXT_MENU_NEW_INDICATOR"),
        (L[(L.SUPER_REACTIONS_TAB_SPARKLE = 220)] =
          "SUPER_REACTIONS_TAB_SPARKLE"),
        (L[(L.ACTIVITIES_WATCH_TOGETHER_APRIL_2023_WEEK_1_SPARKLES = 221)] =
          "ACTIVITIES_WATCH_TOGETHER_APRIL_2023_WEEK_1_SPARKLES"),
        (L[(L.ACTIVITIES_WATCH_TOGETHER_APRIL_2023_WEEK_2_SPARKLES = 222)] =
          "ACTIVITIES_WATCH_TOGETHER_APRIL_2023_WEEK_2_SPARKLES"),
        (L[(L.MJ_NEW_USER_CHAT_BAR = 223)] = "MJ_NEW_USER_CHAT_BAR"),
        (L[(L.CHANNEL_NOTICE_CLYDE_NUX = 224)] = "CHANNEL_NOTICE_CLYDE_NUX"),
        (L[(L.USER_SAFETY_CONSUMER_EDUCATION_REPORTING = 225)] =
          "USER_SAFETY_CONSUMER_EDUCATION_REPORTING"),
        (L[(L.SUPER_REACTIONS_FIRST_SENT = 227)] =
          "SUPER_REACTIONS_FIRST_SENT"),
        (L[(L.COMMUNITY_GUILD_SETTINGS_SAFETY = 228)] =
          "COMMUNITY_GUILD_SETTINGS_SAFETY"),
        (L[(L.FRIEND_FINDER_FIRST_TIME_BADGE = 229)] =
          "FRIEND_FINDER_FIRST_TIME_BADGE"),
        (L[(L.SHARE_NITRO_BUTTON_SPARKLES = 230)] =
          "SHARE_NITRO_BUTTON_SPARKLES"),
        (L[(L.PREMIUM_MOBILE_TRIAL_USER_SETTINGS_AVATAR_BADGE = 231)] =
          "PREMIUM_MOBILE_TRIAL_USER_SETTINGS_AVATAR_BADGE"),
        (L[(L.SOUNDBOARD_KEYBIND_TIP = 232)] = "SOUNDBOARD_KEYBIND_TIP"),
        (L[(L.QUEST_2_ENROLLMENT_TOOLTIP = 234)] =
          "QUEST_2_ENROLLMENT_TOOLTIP"),
        (L[(L.QUEST_2_COMPLETION_TOOLTIP = 235)] =
          "QUEST_2_COMPLETION_TOOLTIP"),
        (L[(L.QUEST_2_GO_LIVE_BANNER = 236)] = "QUEST_2_GO_LIVE_BANNER"),
        (L[(L.QUEST_2_ENDED_INCOMPLETE = 237)] = "QUEST_2_ENDED_INCOMPLETE"),
        (L[(L.GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATES = 238)] =
          "GUILD_ROLE_SUBSCRIPTION_TIER_TEMPLATES"),
        (L[(L.MEDIA_CHANNEL_UPSELL = 243)] = "MEDIA_CHANNEL_UPSELL"),
        (L[(L.ADD_FRIENDS_WIDGET = 244)] = "ADD_FRIENDS_WIDGET"),
        (L[(L.YOU_TAB_AVATAR_ONBOARDING = 245)] = "YOU_TAB_AVATAR_ONBOARDING"),
        (L[(L.YOU_TAB_ABOUT_ME_ONBOARDING = 246)] =
          "YOU_TAB_ABOUT_ME_ONBOARDING"),
        (L[(L.GUILD_HEADER_SUMMARIES_UPSELL = 247)] =
          "GUILD_HEADER_SUMMARIES_UPSELL"),
        (L[(L.SUPER_REACTIONS_COACHMARK_MOBILE = 250)] =
          "SUPER_REACTIONS_COACHMARK_MOBILE"),
        (L[(L.SUPER_REACTIONS_SPARKLES_ACTION_SHEET_MOBILE = 251)] =
          "SUPER_REACTIONS_SPARKLES_ACTION_SHEET_MOBILE"),
        (L[(L.SERVER_SUBSCRIPTION_TIER_TEMPLATE_UPSELL = 252)] =
          "SERVER_SUBSCRIPTION_TIER_TEMPLATE_UPSELL"),
        (L[(L.EMOJI_PICKER_FAVORITE_EMOJIS_TIP = 253)] =
          "EMOJI_PICKER_FAVORITE_EMOJIS_TIP"),
        (L[(L.SERVER_SUBSCRIPTION_SETTINGS_NEW_BADGE_TIER_TEMPLATE = 254)] =
          "SERVER_SUBSCRIPTION_SETTINGS_NEW_BADGE_TIER_TEMPLATE"),
        (L[(L.SUPER_REACTIONS_MOBILE_FULLSCREEN_TAP_TO_DISMISS = 255)] =
          "SUPER_REACTIONS_MOBILE_FULLSCREEN_TAP_TO_DISMISS"),
        (L[(L.FAMILY_CENTER_NEW_BADGE = 256)] = "FAMILY_CENTER_NEW_BADGE"),
        (L[(L.CONSOLE_LOCAL_DETECT_CTA = 257)] = "CONSOLE_LOCAL_DETECT_CTA"),
        (L[(L.REMIXING_ENTRYPOINT_EDUCATION_UPSELLS_MOBILE = 263)] =
          "REMIXING_ENTRYPOINT_EDUCATION_UPSELLS_MOBILE"),
        (L[(L.GUEST_VOICE_INVITES_MENU_ITEM_NEW_BADGE = 264)] =
          "GUEST_VOICE_INVITES_MENU_ITEM_NEW_BADGE"),
        (L[(L.REMIXING_ENTRYPOINT_OPEN_MEDIA_KEYBOARD_UPSELL_MOBILE = 265)] =
          "REMIXING_ENTRYPOINT_OPEN_MEDIA_KEYBOARD_UPSELL_MOBILE"),
        (L[(L.GUILD_MEMBER_SAFETY_BANNER_NOTICE = 266)] =
          "GUILD_MEMBER_SAFETY_BANNER_NOTICE"),
        (L[(L.SUMMER_2023_BOGO_ANNOUNCEMENT_MODAL = 270)] =
          "SUMMER_2023_BOGO_ANNOUNCEMENT_MODAL"),
        (L[(L.INVENTORY_GUILD_SETTINGS_MODMIN_COACHMARK = 271)] =
          "INVENTORY_GUILD_SETTINGS_MODMIN_COACHMARK"),
        (L[(L.CUSTOM_CALL_SOUNDS_PICKER_UPSELL = 272)] =
          "CUSTOM_CALL_SOUNDS_PICKER_UPSELL"),
        (L[(L.CUSTOM_CALL_SOUNDS_SPARKLES = 274)] =
          "CUSTOM_CALL_SOUNDS_SPARKLES"),
        (L[(L.SOUNDBOARD_MOBILE_FLOATING_CTA = 275)] =
          "SOUNDBOARD_MOBILE_FLOATING_CTA"),
        (L[(L.SOUNDBOARD_MOBILE_NEW_BADGE = 276)] =
          "SOUNDBOARD_MOBILE_NEW_BADGE"),
        (L[(L.PROFILE_THEMES_FEATURE_EDUCATION_TOOLTIP_TAKE_2 = 277)] =
          "PROFILE_THEMES_FEATURE_EDUCATION_TOOLTIP_TAKE_2"),
        (L[(L.VOICE_PANEL_BAD_CONNECTION_CTA = 278)] =
          "VOICE_PANEL_BAD_CONNECTION_CTA"),
        (L[(L.PREMIUM_TRIAL_OFFER_MOBILE_ACTION_SHEET = 279)] =
          "PREMIUM_TRIAL_OFFER_MOBILE_ACTION_SHEET"),
        (L[(L.MEDIA_CHANNEL_MULTIPLE_THUMBNAIL_NOTICE = 280)] =
          "MEDIA_CHANNEL_MULTIPLE_THUMBNAIL_NOTICE"),
        (L[(L.CLIPS_ONBOARDING_GO_LIVE_COACHMARK = 281)] =
          "CLIPS_ONBOARDING_GO_LIVE_COACHMARK"),
        (L[(L.CLIPS_ONBOARDING_CLIP_BUTTON_COACHMARK = 282)] =
          "CLIPS_ONBOARDING_CLIP_BUTTON_COACHMARK"),
        (L[(L.CUSTOM_APP_ICONS_COACHMARK = 283)] =
          "CUSTOM_APP_ICONS_COACHMARK"),
        (L[(L.CUSTOM_APP_ICONS_NEW_BADGE = 284)] =
          "CUSTOM_APP_ICONS_NEW_BADGE"),
        (L[(L.BROADCASTING_BROADCASTER_TOOLTIP = 285)] =
          "BROADCASTING_BROADCASTER_TOOLTIP"),
        (L[(L.BROADCASTING_VIEWER_TOOLTIP = 286)] =
          "BROADCASTING_VIEWER_TOOLTIP"),
        (L[(L.SERVER_SHOP_UPSELL = 288)] = "SERVER_SHOP_UPSELL"),
        (L[(L.LAUNCH_PAD_PULL_TAB_NUX = 289)] = "LAUNCH_PAD_PULL_TAB_NUX"),
        (L[(L.CLIPS_SETTINGS_BETA_TAG = 290)] = "CLIPS_SETTINGS_BETA_TAG"),
        (L[(L.WHATS_NEW_AVATAR_DECOS_FLIP = 292)] =
          "WHATS_NEW_AVATAR_DECOS_FLIP"),
        (L[(L.WHATS_NEW_PROFILE_EFFECTS_FLIP = 293)] =
          "WHATS_NEW_PROFILE_EFFECTS_FLIP"),
        (L[(L.MEMBERS_LAUNCH_UPSELL = 294)] = "MEMBERS_LAUNCH_UPSELL"),
        (L[(L.SERVER_SHOP_PHANTOM_PREVIEW = 295)] =
          "SERVER_SHOP_PHANTOM_PREVIEW"),
        (L[(L.RECURRING_CONTACT_SYNC_PROMPT = 297)] =
          "RECURRING_CONTACT_SYNC_PROMPT"),
        (L[(L.INVENTORY_TRY_PACKS_MODAL = 302)] = "INVENTORY_TRY_PACKS_MODAL"),
        (L[(L.DEPRECATE_WIN32_MESSAGE = 305)] = "DEPRECATE_WIN32_MESSAGE"),
        (L[(L.DEKSTOP_CUSTOM_APP_ICON_COACHMARK = 306)] =
          "DEKSTOP_CUSTOM_APP_ICON_COACHMARK"),
        (L[(L.DEKSTOP_CUSTOM_APP_ICON_BADGE = 307)] =
          "DEKSTOP_CUSTOM_APP_ICON_BADGE"),
        (L[(L.WHATS_NEW_AVATAR_DECOS_NOTIF_BADGE = 309)] =
          "WHATS_NEW_AVATAR_DECOS_NOTIF_BADGE"),
        (L[(L.WHATS_NEW_PROFILE_EFFECTS_NOTIF_BADGE = 310)] =
          "WHATS_NEW_PROFILE_EFFECTS_NOTIF_BADGE"),
        (L[(L.CLYDE_AI_PERSONALITIES_NUX_MODAL = 312)] =
          "CLYDE_AI_PERSONALITIES_NUX_MODAL"),
        (L[(L.NUX_GUILD_CHANNEL_EXPLAINER = 313)] =
          "NUX_GUILD_CHANNEL_EXPLAINER"),
        (L[(L.SUPER_REACTION_TOGGLE_EDUCATION_DESKTOP = 316)] =
          "SUPER_REACTION_TOGGLE_EDUCATION_DESKTOP"),
        (L[(L.SUPER_REACTION_TOGGLE_EDUCATION_MOBILE = 317)] =
          "SUPER_REACTION_TOGGLE_EDUCATION_MOBILE"),
        (L[(L.SEEN_LAUNCH_WELCOME_OR_REDESIGN = 325)] =
          "SEEN_LAUNCH_WELCOME_OR_REDESIGN"),
        (L[(L.SEEN_OLD_DESIGN = 326)] = "SEEN_OLD_DESIGN"),
        (L[(L.RECURRING_EVENT_COACHMARK = 327)] = "RECURRING_EVENT_COACHMARK"),
        (L[(L.SEASONAL_GIFTING_COACHMARK_2023 = 328)] =
          "SEASONAL_GIFTING_COACHMARK_2023"),
        (L[(L.SHOP_FOR_ALL_USER_POPOUT_UPSELL = 329)] =
          "SHOP_FOR_ALL_USER_POPOUT_UPSELL"),
        (L[(L.COLLECTIBLES_GIFTING_COACHMARK = 334)] =
          "COLLECTIBLES_GIFTING_COACHMARK"),
        (L[(L.SEEN_LAUNCH_WELCOME = 335)] = "SEEN_LAUNCH_WELCOME"),
        (L[(L.FAVORITE_SERVER_ADD_TO_FAVORITES_COACHMARK = 336)] =
          "FAVORITE_SERVER_ADD_TO_FAVORITES_COACHMARK"),
        (L[(L.INVENTORY_GUILD_SETTINGS_MODMIN_COACHMARK_ROLLBACK = 337)] =
          "INVENTORY_GUILD_SETTINGS_MODMIN_COACHMARK_ROLLBACK"),
        (L[(L.FRIEND_FINDER_CONTACTS_IN_NOTIFICATIONS = 338)] =
          "FRIEND_FINDER_CONTACTS_IN_NOTIFICATIONS"),
        (L[(L.KRUNKER_STRIKE_COACHMARK = 339)] = "KRUNKER_STRIKE_COACHMARK"),
        (L[(L.OVERLAY_KEYBIND_NOTIFICATION = 340)] =
          "OVERLAY_KEYBIND_NOTIFICATION"),
        (L[(L.COLLECTIBLES_SHOP_CYBERPUNK_NEW_BADGE = 341)] =
          "COLLECTIBLES_SHOP_CYBERPUNK_NEW_BADGE"),
        (L[(L.COLLECTIBLES_SHOP_CYBERPUNK_COACHMARK = 342)] =
          "COLLECTIBLES_SHOP_CYBERPUNK_COACHMARK"),
        (L[(L.CHANNEL_LIST_V2_BROWSE_CHANNELS_NUX = 343)] =
          "CHANNEL_LIST_V2_BROWSE_CHANNELS_NUX"),
        (L[(L.COLLECTIBLES_SHOP_LUNARNEWYEAR_NEW_BADGE = 344)] =
          "COLLECTIBLES_SHOP_LUNARNEWYEAR_NEW_BADGE"),
        (L[(L.UU_MIGRATION_NOTICE = 345)] = "UU_MIGRATION_NOTICE"),
        (L[(L.HANG_STATUS_NEW_BADGE = 346)] = "HANG_STATUS_NEW_BADGE"),
        (L[(L.VOICE_CALL_BG_PICKER_TOOLTIP = 347)] =
          "VOICE_CALL_BG_PICKER_TOOLTIP"),
        (L[(L.VOICE_CALL_BG_PICKER_NEW_BADGE = 348)] =
          "VOICE_CALL_BG_PICKER_NEW_BADGE"),
        ((u = i || (i = {}))[(u.UNSET_EXPLICIT_CONTENT_REDACTION = 0)] =
          "UNSET_EXPLICIT_CONTENT_REDACTION"),
        (u[(u.SHOW = 1)] = "SHOW"),
        (u[(u.BLUR = 2)] = "BLUR"),
        (u[(u.BLOCK = 3)] = "BLOCK"),
        ((C = I || (I = {}))[(C.DEFAULT_UNSET = 0)] = "DEFAULT_UNSET"),
        (C[(C.DISABLED = 1)] = "DISABLED"),
        (C[(C.NON_FRIENDS = 2)] = "NON_FRIENDS"),
        (C[(C.FRIENDS_AND_NON_FRIENDS = 3)] = "FRIENDS_AND_NON_FRIENDS"),
        ((D = s || (s = {}))[(D.OFF = 0)] = "OFF"),
        (D[(D.ON_FOR_LARGE_GUILDS = 1)] = "ON_FOR_LARGE_GUILDS"),
        ((c = T || (T = {}))[(c.UNSET = 0)] = "UNSET"),
        (c[(c.DARK = 1)] = "DARK"),
        (c[(c.LIGHT = 2)] = "LIGHT"),
        ((d = S || (S = {}))[(d.MINT_APPLE = 0)] = "MINT_APPLE"),
        (d[(d.CITRUS_SHERBERT = 1)] = "CITRUS_SHERBERT"),
        (d[(d.RETRO_RAINCLOUD = 2)] = "RETRO_RAINCLOUD"),
        (d[(d.HANAMI = 3)] = "HANAMI"),
        (d[(d.SUNRISE = 4)] = "SUNRISE"),
        (d[(d.COTTON_CANDY = 5)] = "COTTON_CANDY"),
        (d[(d.LOFI_VIBES = 6)] = "LOFI_VIBES"),
        (d[(d.DESERT_KHAKI = 7)] = "DESERT_KHAKI"),
        (d[(d.SUNSET = 8)] = "SUNSET"),
        (d[(d.CHROMA_GLOW = 9)] = "CHROMA_GLOW"),
        (d[(d.FOREST = 10)] = "FOREST"),
        (d[(d.CRIMSON_MOON = 11)] = "CRIMSON_MOON"),
        (d[(d.MIDNIGHT_BLURPLE = 12)] = "MIDNIGHT_BLURPLE"),
        (d[(d.MARS = 13)] = "MARS"),
        (d[(d.DUSK = 14)] = "DUSK"),
        (d[(d.UNDER_THE_SEA = 15)] = "UNDER_THE_SEA"),
        (d[(d.EASTER_EGG = 16)] = "EASTER_EGG"),
        (d[(d.RETRO_STORM = 17)] = "RETRO_STORM"),
        (d[(d.NEON_NIGHTS = 18)] = "NEON_NIGHTS"),
        (d[(d.SEPIA = 19)] = "SEPIA"),
        (d[(d.STRAWBERRY_LEMONADE = 20)] = "STRAWBERRY_LEMONADE"),
        (d[(d.AURORA = 21)] = "AURORA"),
        ((U = N || (N = {}))[(U.UNSET_FAVORITE_CHANNEL_TYPE = 0)] =
          "UNSET_FAVORITE_CHANNEL_TYPE"),
        (U[(U.REFERENCE_ORIGINAL = 1)] = "REFERENCE_ORIGINAL"),
        (U[(U.CATEGORY = 2)] = "CATEGORY");
      class G extends M.MessageType {
        create(e) {
          let _ = {};
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.versions = m.Versions.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.versions
                );
                break;
              case 2:
                o.inbox = y.internalBinaryRead(e, e.uint32(), E, o.inbox);
                break;
              case 3:
                o.guilds = f.internalBinaryRead(e, e.uint32(), E, o.guilds);
                break;
              case 4:
                o.userContent = k.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.userContent
                );
                break;
              case 5:
                o.voiceAndVideo = Q.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.voiceAndVideo
                );
                break;
              case 6:
                o.textAndImages = $.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.textAndImages
                );
                break;
              case 7:
                o.notifications = ee.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.notifications
                );
                break;
              case 8:
                o.privacy = eE.internalBinaryRead(e, e.uint32(), E, o.privacy);
                break;
              case 9:
                o.debug = eo.internalBinaryRead(e, e.uint32(), E, o.debug);
                break;
              case 10:
                o.gameLibrary = er.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.gameLibrary
                );
                break;
              case 11:
                o.status = ei.internalBinaryRead(e, e.uint32(), E, o.status);
                break;
              case 12:
                o.localization = eS.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.localization
                );
                break;
              case 13:
                o.appearance = eR.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.appearance
                );
                break;
              case 14:
                o.guildFolders = eC.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.guildFolders
                );
                break;
              case 15:
                o.favorites = eU.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.favorites
                );
                break;
              case 16:
                o.audioContextSettings = ep.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.audioContextSettings
                );
                break;
              case 17:
                o.communities = ey.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.communities
                );
                break;
              case 18:
                o.broadcast = ew.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.broadcast
                );
                break;
              case 19:
                o.clips = eY.internalBinaryRead(e, e.uint32(), E, o.clips);
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          e.versions &&
            m.Versions.internalBinaryWrite(
              e.versions,
              _.tag(1, M.WireType.LengthDelimited).fork(),
              E
            ).join(),
            e.inbox &&
              y
                .internalBinaryWrite(
                  e.inbox,
                  _.tag(2, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.guilds &&
              f
                .internalBinaryWrite(
                  e.guilds,
                  _.tag(3, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.userContent &&
              k
                .internalBinaryWrite(
                  e.userContent,
                  _.tag(4, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.voiceAndVideo &&
              Q.internalBinaryWrite(
                e.voiceAndVideo,
                _.tag(5, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.textAndImages &&
              $.internalBinaryWrite(
                e.textAndImages,
                _.tag(6, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.notifications &&
              ee
                .internalBinaryWrite(
                  e.notifications,
                  _.tag(7, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.privacy &&
              eE
                .internalBinaryWrite(
                  e.privacy,
                  _.tag(8, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.debug &&
              eo
                .internalBinaryWrite(
                  e.debug,
                  _.tag(9, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.gameLibrary &&
              er
                .internalBinaryWrite(
                  e.gameLibrary,
                  _.tag(10, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.status &&
              ei
                .internalBinaryWrite(
                  e.status,
                  _.tag(11, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.localization &&
              eS
                .internalBinaryWrite(
                  e.localization,
                  _.tag(12, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.appearance &&
              eR
                .internalBinaryWrite(
                  e.appearance,
                  _.tag(13, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.guildFolders &&
              eC
                .internalBinaryWrite(
                  e.guildFolders,
                  _.tag(14, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.favorites &&
              eU
                .internalBinaryWrite(
                  e.favorites,
                  _.tag(15, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.audioContextSettings &&
              ep
                .internalBinaryWrite(
                  e.audioContextSettings,
                  _.tag(16, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.communities &&
              ey
                .internalBinaryWrite(
                  e.communities,
                  _.tag(17, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.broadcast &&
              ew
                .internalBinaryWrite(
                  e.broadcast,
                  _.tag(18, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.clips &&
              eY
                .internalBinaryWrite(
                  e.clips,
                  _.tag(19, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.PreloadedUserSettings", [
            { no: 1, name: "versions", kind: "message", T: () => m.Versions },
            { no: 2, name: "inbox", kind: "message", T: () => y },
            { no: 3, name: "guilds", kind: "message", T: () => f },
            { no: 4, name: "user_content", kind: "message", T: () => k },
            { no: 5, name: "voice_and_video", kind: "message", T: () => Q },
            { no: 6, name: "text_and_images", kind: "message", T: () => $ },
            { no: 7, name: "notifications", kind: "message", T: () => ee },
            { no: 8, name: "privacy", kind: "message", T: () => eE },
            { no: 9, name: "debug", kind: "message", T: () => eo },
            { no: 10, name: "game_library", kind: "message", T: () => er },
            { no: 11, name: "status", kind: "message", T: () => ei },
            { no: 12, name: "localization", kind: "message", T: () => eS },
            { no: 13, name: "appearance", kind: "message", T: () => eR },
            { no: 14, name: "guild_folders", kind: "message", T: () => eC },
            { no: 15, name: "favorites", kind: "message", T: () => eU },
            {
              no: 16,
              name: "audio_context_settings",
              kind: "message",
              T: () => ep,
            },
            { no: 17, name: "communities", kind: "message", T: () => ey },
            { no: 18, name: "broadcast", kind: "message", T: () => ew },
            { no: 19, name: "clips", kind: "message", T: () => eY },
          ]);
        }
      }
      let p = new G();
      class g extends M.MessageType {
        create(e) {
          let _ = { currentTab: 0, viewedTutorial: !1 };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.currentTab = e.int32();
                break;
              case 2:
                o.viewedTutorial = e.bool();
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          0 !== e.currentTab && _.tag(1, M.WireType.Varint).int32(e.currentTab),
            !1 !== e.viewedTutorial &&
              _.tag(2, M.WireType.Varint).bool(e.viewedTutorial);
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.InboxSettings", [
            {
              no: 1,
              name: "current_tab",
              kind: "enum",
              T: () => [
                "discord_protos.discord_users.v1.InboxTab",
                t,
                "INBOX_TAB_",
              ],
            },
            { no: 2, name: "viewed_tutorial", kind: "scalar", T: 8 },
          ]);
        }
      }
      let y = new g();
      class B extends M.MessageType {
        create(e) {
          let _ = { guilds: {} };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            if (1 === _) this.binaryReadMap1(o.guilds, e, E);
            else {
              let n = E.readUnknownField;
              if ("throw" === n)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let r = e.skip(t);
              !1 !== n &&
                (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                  this.typeName,
                  o,
                  _,
                  t,
                  r
                );
            }
          }
          return o;
        }
        binaryReadMap1(e, _, E) {
          let t = _.uint32(),
            o = _.pos + t,
            n,
            r;
          for (; _.pos < o; ) {
            let [e, t] = _.tag();
            switch (e) {
              case 1:
                n = _.fixed64().toString();
                break;
              case 2:
                r = v.internalBinaryRead(_, _.uint32(), E);
                break;
              default:
                throw new globalThis.Error(
                  "unknown map entry field for field discord_protos.discord_users.v1.AllGuildSettings.guilds"
                );
            }
          }
          e[null != n ? n : "0"] = null != r ? r : v.create();
        }
        internalBinaryWrite(e, _, E) {
          for (let t of Object.keys(e.guilds))
            _.tag(1, M.WireType.LengthDelimited)
              .fork()
              .tag(1, M.WireType.Bit64)
              .fixed64(t),
              _.tag(2, M.WireType.LengthDelimited).fork(),
              v.internalBinaryWrite(e.guilds[t], _, E),
              _.join().join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.AllGuildSettings", [
            {
              no: 1,
              name: "guilds",
              kind: "map",
              K: 6,
              V: { kind: "message", T: () => v },
            },
          ]);
        }
      }
      let f = new B();
      class H extends M.MessageType {
        create(e) {
          let _ = {
            channels: {},
            hubProgress: 0,
            guildOnboardingProgress: 0,
            dismissedGuildContent: new Uint8Array(0),
            disableRaidAlertPush: !1,
            disableRaidAlertNag: !1,
          };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                this.binaryReadMap1(o.channels, e, E);
                break;
              case 2:
                o.hubProgress = e.uint32();
                break;
              case 3:
                o.guildOnboardingProgress = e.uint32();
                break;
              case 4:
                o.guildRecentsDismissedAt = P.Timestamp.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.guildRecentsDismissedAt
                );
                break;
              case 5:
                o.dismissedGuildContent = e.bytes();
                break;
              case 6:
                o.joinSound = ev.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.joinSound
                );
                break;
              case 7:
                o.mobileRedesignChannelListSettings = eO.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.mobileRedesignChannelListSettings
                );
                break;
              case 8:
                o.disableRaidAlertPush = e.bool();
                break;
              case 9:
                o.disableRaidAlertNag = e.bool();
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        binaryReadMap1(e, _, E) {
          let t = _.uint32(),
            o = _.pos + t,
            n,
            r;
          for (; _.pos < o; ) {
            let [e, t] = _.tag();
            switch (e) {
              case 1:
                n = _.fixed64().toString();
                break;
              case 2:
                r = Y.internalBinaryRead(_, _.uint32(), E);
                break;
              default:
                throw new globalThis.Error(
                  "unknown map entry field for field discord_protos.discord_users.v1.GuildSettings.channels"
                );
            }
          }
          e[null != n ? n : "0"] = null != r ? r : Y.create();
        }
        internalBinaryWrite(e, _, E) {
          for (let t of Object.keys(e.channels))
            _.tag(1, M.WireType.LengthDelimited)
              .fork()
              .tag(1, M.WireType.Bit64)
              .fixed64(t),
              _.tag(2, M.WireType.LengthDelimited).fork(),
              Y.internalBinaryWrite(e.channels[t], _, E),
              _.join().join();
          0 !== e.hubProgress &&
            _.tag(2, M.WireType.Varint).uint32(e.hubProgress),
            0 !== e.guildOnboardingProgress &&
              _.tag(3, M.WireType.Varint).uint32(e.guildOnboardingProgress),
            e.guildRecentsDismissedAt &&
              P.Timestamp.internalBinaryWrite(
                e.guildRecentsDismissedAt,
                _.tag(4, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.dismissedGuildContent.length &&
              _.tag(5, M.WireType.LengthDelimited).bytes(
                e.dismissedGuildContent
              ),
            e.joinSound &&
              ev
                .internalBinaryWrite(
                  e.joinSound,
                  _.tag(6, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.mobileRedesignChannelListSettings &&
              eO
                .internalBinaryWrite(
                  e.mobileRedesignChannelListSettings,
                  _.tag(7, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            !1 !== e.disableRaidAlertPush &&
              _.tag(8, M.WireType.Varint).bool(e.disableRaidAlertPush),
            !1 !== e.disableRaidAlertNag &&
              _.tag(9, M.WireType.Varint).bool(e.disableRaidAlertNag);
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.GuildSettings", [
            {
              no: 1,
              name: "channels",
              kind: "map",
              K: 6,
              V: { kind: "message", T: () => Y },
            },
            { no: 2, name: "hub_progress", kind: "scalar", T: 13 },
            { no: 3, name: "guild_onboarding_progress", kind: "scalar", T: 13 },
            {
              no: 4,
              name: "guild_recents_dismissed_at",
              kind: "message",
              T: () => P.Timestamp,
            },
            { no: 5, name: "dismissed_guild_content", kind: "scalar", T: 12 },
            { no: 6, name: "join_sound", kind: "message", T: () => ev },
            {
              no: 7,
              name: "mobile_redesign_channel_list_settings",
              kind: "message",
              T: () => eO,
            },
            { no: 8, name: "disable_raid_alert_push", kind: "scalar", T: 8 },
            { no: 9, name: "disable_raid_alert_nag", kind: "scalar", T: 8 },
          ]);
        }
      }
      let v = new H();
      class b extends M.MessageType {
        create(e) {
          let _ = {};
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.id = h.UInt64Value.internalBinaryRead(e, e.uint32(), E, o.id);
                break;
              case 2:
                o.name = h.StringValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.name
                );
                break;
              case 3:
                o.color = h.UInt64Value.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.color
                );
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          e.id &&
            h.UInt64Value.internalBinaryWrite(
              e.id,
              _.tag(1, M.WireType.LengthDelimited).fork(),
              E
            ).join(),
            e.name &&
              h.StringValue.internalBinaryWrite(
                e.name,
                _.tag(2, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.color &&
              h.UInt64Value.internalBinaryWrite(
                e.color,
                _.tag(3, M.WireType.LengthDelimited).fork(),
                E
              ).join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.ChannelIconEmoji", [
            { no: 1, name: "id", kind: "message", T: () => h.UInt64Value },
            { no: 2, name: "name", kind: "message", T: () => h.StringValue },
            { no: 3, name: "color", kind: "message", T: () => h.UInt64Value },
          ]);
        }
      }
      let w = new b();
      class F extends M.MessageType {
        create(e) {
          let _ = { collapsedInInbox: !1 };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.collapsedInInbox = e.bool();
                break;
              case 2:
                o.iconEmoji = w.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.iconEmoji
                );
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          !1 !== e.collapsedInInbox &&
            _.tag(1, M.WireType.Varint).bool(e.collapsedInInbox),
            e.iconEmoji &&
              w
                .internalBinaryWrite(
                  e.iconEmoji,
                  _.tag(2, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.ChannelSettings", [
            { no: 1, name: "collapsed_in_inbox", kind: "scalar", T: 8 },
            { no: 2, name: "icon_emoji", kind: "message", T: () => w },
          ]);
        }
      }
      let Y = new F();
      class V extends M.MessageType {
        create(e) {
          let _ = { dismissedContents: new Uint8Array(0) };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.dismissedContents = e.bytes();
                break;
              case 2:
                o.lastDismissedOutboundPromotionStartDate =
                  h.StringValue.internalBinaryRead(
                    e,
                    e.uint32(),
                    E,
                    o.lastDismissedOutboundPromotionStartDate
                  );
                break;
              case 3:
                o.premiumTier0ModalDismissedAt = P.Timestamp.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.premiumTier0ModalDismissedAt
                );
                break;
              case 4:
                o.guildOnboardingUpsellDismissedAt =
                  P.Timestamp.internalBinaryRead(
                    e,
                    e.uint32(),
                    E,
                    o.guildOnboardingUpsellDismissedAt
                  );
                break;
              case 5:
                o.safetyUserSentimentNoticeDismissedAt =
                  P.Timestamp.internalBinaryRead(
                    e,
                    e.uint32(),
                    E,
                    o.safetyUserSentimentNoticeDismissedAt
                  );
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          e.dismissedContents.length &&
            _.tag(1, M.WireType.LengthDelimited).bytes(e.dismissedContents),
            e.lastDismissedOutboundPromotionStartDate &&
              h.StringValue.internalBinaryWrite(
                e.lastDismissedOutboundPromotionStartDate,
                _.tag(2, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.premiumTier0ModalDismissedAt &&
              P.Timestamp.internalBinaryWrite(
                e.premiumTier0ModalDismissedAt,
                _.tag(3, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.guildOnboardingUpsellDismissedAt &&
              P.Timestamp.internalBinaryWrite(
                e.guildOnboardingUpsellDismissedAt,
                _.tag(4, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.safetyUserSentimentNoticeDismissedAt &&
              P.Timestamp.internalBinaryWrite(
                e.safetyUserSentimentNoticeDismissedAt,
                _.tag(5, M.WireType.LengthDelimited).fork(),
                E
              ).join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.UserContentSettings", [
            { no: 1, name: "dismissed_contents", kind: "scalar", T: 12 },
            {
              no: 2,
              name: "last_dismissed_outbound_promotion_start_date",
              kind: "message",
              T: () => h.StringValue,
            },
            {
              no: 3,
              name: "premium_tier_0_modal_dismissed_at",
              kind: "message",
              T: () => P.Timestamp,
            },
            {
              no: 4,
              name: "guild_onboarding_upsell_dismissed_at",
              kind: "message",
              T: () => P.Timestamp,
            },
            {
              no: 5,
              name: "safety_user_sentiment_notice_dismissed_at",
              kind: "message",
              T: () => P.Timestamp,
            },
          ]);
        }
      }
      let k = new V();
      class W extends M.MessageType {
        create(e) {
          let _ = { id: "0", assetHash: "" };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.id = e.fixed64().toString();
                break;
              case 2:
                o.assetHash = e.string();
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          "0" !== e.id && _.tag(1, M.WireType.Bit64).fixed64(e.id),
            "" !== e.assetHash &&
              _.tag(2, M.WireType.LengthDelimited).string(e.assetHash);
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.VideoFilterAsset", [
            { no: 1, name: "id", kind: "scalar", T: 6 },
            { no: 2, name: "asset_hash", kind: "scalar", T: 9 },
          ]);
        }
      }
      let K = new W();
      class x extends M.MessageType {
        create(e) {
          let _ = { useBlur: !1 };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            if (1 === _) o.useBlur = e.bool();
            else {
              let n = E.readUnknownField;
              if ("throw" === n)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let r = e.skip(t);
              !1 !== n &&
                (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                  this.typeName,
                  o,
                  _,
                  t,
                  r
                );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          !1 !== e.useBlur && _.tag(1, M.WireType.Varint).bool(e.useBlur);
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.VideoFilterBackgroundBlur", [
            { no: 1, name: "use_blur", kind: "scalar", T: 8 },
          ]);
        }
      }
      let j = new x();
      class X extends M.MessageType {
        create(e) {
          let _ = { videoBackgroundFilterDesktop: { oneofKind: void 0 } };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.videoBackgroundFilterDesktop = {
                  oneofKind: "blur",
                  blur: j.internalBinaryRead(
                    e,
                    e.uint32(),
                    E,
                    o.videoBackgroundFilterDesktop.blur
                  ),
                };
                break;
              case 2:
                o.videoBackgroundFilterDesktop = {
                  oneofKind: "presetOption",
                  presetOption: e.uint32(),
                };
                break;
              case 3:
                o.videoBackgroundFilterDesktop = {
                  oneofKind: "customAsset",
                  customAsset: K.internalBinaryRead(
                    e,
                    e.uint32(),
                    E,
                    o.videoBackgroundFilterDesktop.customAsset
                  ),
                };
                break;
              case 5:
                o.alwaysPreviewVideo = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.alwaysPreviewVideo
                );
                break;
              case 6:
                o.afkTimeout = h.UInt32Value.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.afkTimeout
                );
                break;
              case 7:
                o.streamNotificationsEnabled = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.streamNotificationsEnabled
                );
                break;
              case 8:
                o.nativePhoneIntegrationEnabled =
                  h.BoolValue.internalBinaryRead(
                    e,
                    e.uint32(),
                    E,
                    o.nativePhoneIntegrationEnabled
                  );
                break;
              case 9:
                o.soundboardSettings = ef.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.soundboardSettings
                );
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          "blur" === e.videoBackgroundFilterDesktop.oneofKind &&
            j
              .internalBinaryWrite(
                e.videoBackgroundFilterDesktop.blur,
                _.tag(1, M.WireType.LengthDelimited).fork(),
                E
              )
              .join(),
            "presetOption" === e.videoBackgroundFilterDesktop.oneofKind &&
              _.tag(2, M.WireType.Varint).uint32(
                e.videoBackgroundFilterDesktop.presetOption
              ),
            "customAsset" === e.videoBackgroundFilterDesktop.oneofKind &&
              K.internalBinaryWrite(
                e.videoBackgroundFilterDesktop.customAsset,
                _.tag(3, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.alwaysPreviewVideo &&
              h.BoolValue.internalBinaryWrite(
                e.alwaysPreviewVideo,
                _.tag(5, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.afkTimeout &&
              h.UInt32Value.internalBinaryWrite(
                e.afkTimeout,
                _.tag(6, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.streamNotificationsEnabled &&
              h.BoolValue.internalBinaryWrite(
                e.streamNotificationsEnabled,
                _.tag(7, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.nativePhoneIntegrationEnabled &&
              h.BoolValue.internalBinaryWrite(
                e.nativePhoneIntegrationEnabled,
                _.tag(8, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.soundboardSettings &&
              ef
                .internalBinaryWrite(
                  e.soundboardSettings,
                  _.tag(9, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.VoiceAndVideoSettings", [
            {
              no: 1,
              name: "blur",
              kind: "message",
              oneof: "videoBackgroundFilterDesktop",
              T: () => j,
            },
            {
              no: 2,
              name: "preset_option",
              kind: "scalar",
              oneof: "videoBackgroundFilterDesktop",
              T: 13,
            },
            {
              no: 3,
              name: "custom_asset",
              kind: "message",
              oneof: "videoBackgroundFilterDesktop",
              T: () => K,
            },
            {
              no: 5,
              name: "always_preview_video",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 6,
              name: "afk_timeout",
              kind: "message",
              T: () => h.UInt32Value,
            },
            {
              no: 7,
              name: "stream_notifications_enabled",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 8,
              name: "native_phone_integration_enabled",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 9,
              name: "soundboard_settings",
              kind: "message",
              T: () => ef,
            },
          ]);
        }
      }
      let Q = new X();
      class q extends M.MessageType {
        create(e) {
          let _ = {
            explicitContentGuilds: 0,
            explicitContentFriendDm: 0,
            explicitContentNonFriendDm: 0,
          };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.explicitContentGuilds = e.int32();
                break;
              case 2:
                o.explicitContentFriendDm = e.int32();
                break;
              case 3:
                o.explicitContentNonFriendDm = e.int32();
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          0 !== e.explicitContentGuilds &&
            _.tag(1, M.WireType.Varint).int32(e.explicitContentGuilds),
            0 !== e.explicitContentFriendDm &&
              _.tag(2, M.WireType.Varint).int32(e.explicitContentFriendDm),
            0 !== e.explicitContentNonFriendDm &&
              _.tag(3, M.WireType.Varint).int32(e.explicitContentNonFriendDm);
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.ExplicitContentSettings", [
            {
              no: 1,
              name: "explicit_content_guilds",
              kind: "enum",
              T: () => [
                "discord_protos.discord_users.v1.ExplicitContentRedaction",
                i,
              ],
            },
            {
              no: 2,
              name: "explicit_content_friend_dm",
              kind: "enum",
              T: () => [
                "discord_protos.discord_users.v1.ExplicitContentRedaction",
                i,
              ],
            },
            {
              no: 3,
              name: "explicit_content_non_friend_dm",
              kind: "enum",
              T: () => [
                "discord_protos.discord_users.v1.ExplicitContentRedaction",
                i,
              ],
            },
          ]);
        }
      }
      let J = new q();
      class z extends M.MessageType {
        create(e) {
          let _ = {
            emojiPickerCollapsedSections: [],
            stickerPickerCollapsedSections: [],
            soundboardPickerCollapsedSections: [],
            dmSpamFilterV2: 0,
          };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.diversitySurrogate = h.StringValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.diversitySurrogate
                );
                break;
              case 2:
                o.useRichChatInput = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.useRichChatInput
                );
                break;
              case 3:
                o.useThreadSidebar = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.useThreadSidebar
                );
                break;
              case 4:
                o.renderSpoilers = h.StringValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.renderSpoilers
                );
                break;
              case 5:
                o.emojiPickerCollapsedSections.push(e.string());
                break;
              case 6:
                o.stickerPickerCollapsedSections.push(e.string());
                break;
              case 7:
                o.viewImageDescriptions = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.viewImageDescriptions
                );
                break;
              case 8:
                o.showCommandSuggestions = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.showCommandSuggestions
                );
                break;
              case 9:
                o.inlineAttachmentMedia = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.inlineAttachmentMedia
                );
                break;
              case 10:
                o.inlineEmbedMedia = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.inlineEmbedMedia
                );
                break;
              case 11:
                o.gifAutoPlay = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.gifAutoPlay
                );
                break;
              case 12:
                o.renderEmbeds = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.renderEmbeds
                );
                break;
              case 13:
                o.renderReactions = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.renderReactions
                );
                break;
              case 14:
                o.animateEmoji = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.animateEmoji
                );
                break;
              case 15:
                o.animateStickers = h.UInt32Value.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.animateStickers
                );
                break;
              case 16:
                o.enableTtsCommand = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.enableTtsCommand
                );
                break;
              case 17:
                o.messageDisplayCompact = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.messageDisplayCompact
                );
                break;
              case 19:
                o.explicitContentFilter = h.UInt32Value.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.explicitContentFilter
                );
                break;
              case 20:
                o.viewNsfwGuilds = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.viewNsfwGuilds
                );
                break;
              case 21:
                o.convertEmoticons = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.convertEmoticons
                );
                break;
              case 22:
                o.expressionSuggestionsEnabled = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.expressionSuggestionsEnabled
                );
                break;
              case 23:
                o.viewNsfwCommands = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.viewNsfwCommands
                );
                break;
              case 24:
                o.useLegacyChatInput = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.useLegacyChatInput
                );
                break;
              case 25:
                o.soundboardPickerCollapsedSections.push(e.string());
                break;
              case 26:
                o.dmSpamFilter = h.UInt32Value.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.dmSpamFilter
                );
                break;
              case 27:
                o.dmSpamFilterV2 = e.int32();
                break;
              case 28:
                o.includeStickersInAutocomplete =
                  h.BoolValue.internalBinaryRead(
                    e,
                    e.uint32(),
                    E,
                    o.includeStickersInAutocomplete
                  );
                break;
              case 29:
                o.explicitContentSettings = J.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.explicitContentSettings
                );
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          e.diversitySurrogate &&
            h.StringValue.internalBinaryWrite(
              e.diversitySurrogate,
              _.tag(1, M.WireType.LengthDelimited).fork(),
              E
            ).join(),
            e.useRichChatInput &&
              h.BoolValue.internalBinaryWrite(
                e.useRichChatInput,
                _.tag(2, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.useThreadSidebar &&
              h.BoolValue.internalBinaryWrite(
                e.useThreadSidebar,
                _.tag(3, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.renderSpoilers &&
              h.StringValue.internalBinaryWrite(
                e.renderSpoilers,
                _.tag(4, M.WireType.LengthDelimited).fork(),
                E
              ).join();
          for (let E = 0; E < e.emojiPickerCollapsedSections.length; E++)
            _.tag(5, M.WireType.LengthDelimited).string(
              e.emojiPickerCollapsedSections[E]
            );
          for (let E = 0; E < e.stickerPickerCollapsedSections.length; E++)
            _.tag(6, M.WireType.LengthDelimited).string(
              e.stickerPickerCollapsedSections[E]
            );
          e.viewImageDescriptions &&
            h.BoolValue.internalBinaryWrite(
              e.viewImageDescriptions,
              _.tag(7, M.WireType.LengthDelimited).fork(),
              E
            ).join(),
            e.showCommandSuggestions &&
              h.BoolValue.internalBinaryWrite(
                e.showCommandSuggestions,
                _.tag(8, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.inlineAttachmentMedia &&
              h.BoolValue.internalBinaryWrite(
                e.inlineAttachmentMedia,
                _.tag(9, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.inlineEmbedMedia &&
              h.BoolValue.internalBinaryWrite(
                e.inlineEmbedMedia,
                _.tag(10, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.gifAutoPlay &&
              h.BoolValue.internalBinaryWrite(
                e.gifAutoPlay,
                _.tag(11, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.renderEmbeds &&
              h.BoolValue.internalBinaryWrite(
                e.renderEmbeds,
                _.tag(12, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.renderReactions &&
              h.BoolValue.internalBinaryWrite(
                e.renderReactions,
                _.tag(13, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.animateEmoji &&
              h.BoolValue.internalBinaryWrite(
                e.animateEmoji,
                _.tag(14, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.animateStickers &&
              h.UInt32Value.internalBinaryWrite(
                e.animateStickers,
                _.tag(15, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.enableTtsCommand &&
              h.BoolValue.internalBinaryWrite(
                e.enableTtsCommand,
                _.tag(16, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.messageDisplayCompact &&
              h.BoolValue.internalBinaryWrite(
                e.messageDisplayCompact,
                _.tag(17, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.explicitContentFilter &&
              h.UInt32Value.internalBinaryWrite(
                e.explicitContentFilter,
                _.tag(19, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.viewNsfwGuilds &&
              h.BoolValue.internalBinaryWrite(
                e.viewNsfwGuilds,
                _.tag(20, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.convertEmoticons &&
              h.BoolValue.internalBinaryWrite(
                e.convertEmoticons,
                _.tag(21, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.expressionSuggestionsEnabled &&
              h.BoolValue.internalBinaryWrite(
                e.expressionSuggestionsEnabled,
                _.tag(22, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.viewNsfwCommands &&
              h.BoolValue.internalBinaryWrite(
                e.viewNsfwCommands,
                _.tag(23, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.useLegacyChatInput &&
              h.BoolValue.internalBinaryWrite(
                e.useLegacyChatInput,
                _.tag(24, M.WireType.LengthDelimited).fork(),
                E
              ).join();
          for (let E = 0; E < e.soundboardPickerCollapsedSections.length; E++)
            _.tag(25, M.WireType.LengthDelimited).string(
              e.soundboardPickerCollapsedSections[E]
            );
          e.dmSpamFilter &&
            h.UInt32Value.internalBinaryWrite(
              e.dmSpamFilter,
              _.tag(26, M.WireType.LengthDelimited).fork(),
              E
            ).join(),
            0 !== e.dmSpamFilterV2 &&
              _.tag(27, M.WireType.Varint).int32(e.dmSpamFilterV2),
            e.includeStickersInAutocomplete &&
              h.BoolValue.internalBinaryWrite(
                e.includeStickersInAutocomplete,
                _.tag(28, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.explicitContentSettings &&
              J.internalBinaryWrite(
                e.explicitContentSettings,
                _.tag(29, M.WireType.LengthDelimited).fork(),
                E
              ).join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.TextAndImagesSettings", [
            {
              no: 1,
              name: "diversity_surrogate",
              kind: "message",
              T: () => h.StringValue,
            },
            {
              no: 2,
              name: "use_rich_chat_input",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 3,
              name: "use_thread_sidebar",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 4,
              name: "render_spoilers",
              kind: "message",
              T: () => h.StringValue,
            },
            {
              no: 5,
              name: "emoji_picker_collapsed_sections",
              kind: "scalar",
              repeat: 2,
              T: 9,
            },
            {
              no: 6,
              name: "sticker_picker_collapsed_sections",
              kind: "scalar",
              repeat: 2,
              T: 9,
            },
            {
              no: 7,
              name: "view_image_descriptions",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 8,
              name: "show_command_suggestions",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 9,
              name: "inline_attachment_media",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 10,
              name: "inline_embed_media",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 11,
              name: "gif_auto_play",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 12,
              name: "render_embeds",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 13,
              name: "render_reactions",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 14,
              name: "animate_emoji",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 15,
              name: "animate_stickers",
              kind: "message",
              T: () => h.UInt32Value,
            },
            {
              no: 16,
              name: "enable_tts_command",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 17,
              name: "message_display_compact",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 19,
              name: "explicit_content_filter",
              kind: "message",
              T: () => h.UInt32Value,
            },
            {
              no: 20,
              name: "view_nsfw_guilds",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 21,
              name: "convert_emoticons",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 22,
              name: "expression_suggestions_enabled",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 23,
              name: "view_nsfw_commands",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 24,
              name: "use_legacy_chat_input",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 25,
              name: "soundboard_picker_collapsed_sections",
              kind: "scalar",
              repeat: 2,
              T: 9,
            },
            {
              no: 26,
              name: "dm_spam_filter",
              kind: "message",
              T: () => h.UInt32Value,
            },
            {
              no: 27,
              name: "dm_spam_filter_v2",
              kind: "enum",
              T: () => ["discord_protos.discord_users.v1.DmSpamFilterV2", I],
            },
            {
              no: 28,
              name: "include_stickers_in_autocomplete",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 29,
              name: "explicit_content_settings",
              kind: "message",
              T: () => J,
            },
          ]);
        }
      }
      let $ = new z();
      class Z extends M.MessageType {
        create(e) {
          let _ = { notificationCenterAckedBeforeId: "0" };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.showInAppNotifications = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.showInAppNotifications
                );
                break;
              case 2:
                o.notifyFriendsOnGoLive = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.notifyFriendsOnGoLive
                );
                break;
              case 3:
                o.notificationCenterAckedBeforeId = e.fixed64().toString();
                break;
              case 4:
                o.enableBurstReactionNotifications =
                  h.BoolValue.internalBinaryRead(
                    e,
                    e.uint32(),
                    E,
                    o.enableBurstReactionNotifications
                  );
                break;
              case 5:
                o.quietMode = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.quietMode
                );
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          e.showInAppNotifications &&
            h.BoolValue.internalBinaryWrite(
              e.showInAppNotifications,
              _.tag(1, M.WireType.LengthDelimited).fork(),
              E
            ).join(),
            e.notifyFriendsOnGoLive &&
              h.BoolValue.internalBinaryWrite(
                e.notifyFriendsOnGoLive,
                _.tag(2, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            "0" !== e.notificationCenterAckedBeforeId &&
              _.tag(3, M.WireType.Bit64).fixed64(
                e.notificationCenterAckedBeforeId
              ),
            e.enableBurstReactionNotifications &&
              h.BoolValue.internalBinaryWrite(
                e.enableBurstReactionNotifications,
                _.tag(4, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.quietMode &&
              h.BoolValue.internalBinaryWrite(
                e.quietMode,
                _.tag(5, M.WireType.LengthDelimited).fork(),
                E
              ).join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.NotificationSettings", [
            {
              no: 1,
              name: "show_in_app_notifications",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 2,
              name: "notify_friends_on_go_live",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 3,
              name: "notification_center_acked_before_id",
              kind: "scalar",
              T: 6,
            },
            {
              no: 4,
              name: "enable_burst_reaction_notifications",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 5,
              name: "quiet_mode",
              kind: "message",
              T: () => h.BoolValue,
            },
          ]);
        }
      }
      let ee = new Z();
      class e_ extends M.MessageType {
        create(e) {
          let _ = {
            restrictedGuildIds: [],
            defaultGuildsRestricted: !1,
            allowAccessibilityDetection: !1,
            activityRestrictedGuildIds: [],
            defaultGuildsActivityRestricted: 0,
            activityJoiningRestrictedGuildIds: [],
            messageRequestRestrictedGuildIds: [],
          };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.allowActivityPartyPrivacyFriends =
                  h.BoolValue.internalBinaryRead(
                    e,
                    e.uint32(),
                    E,
                    o.allowActivityPartyPrivacyFriends
                  );
                break;
              case 2:
                o.allowActivityPartyPrivacyVoiceChannel =
                  h.BoolValue.internalBinaryRead(
                    e,
                    e.uint32(),
                    E,
                    o.allowActivityPartyPrivacyVoiceChannel
                  );
                break;
              case 3:
                if (t === M.WireType.LengthDelimited)
                  for (let _ = e.int32() + e.pos; e.pos < _; )
                    o.restrictedGuildIds.push(e.fixed64().toString());
                else o.restrictedGuildIds.push(e.fixed64().toString());
                break;
              case 4:
                o.defaultGuildsRestricted = e.bool();
                break;
              case 7:
                o.allowAccessibilityDetection = e.bool();
                break;
              case 8:
                o.detectPlatformAccounts = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.detectPlatformAccounts
                );
                break;
              case 9:
                o.passwordless = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.passwordless
                );
                break;
              case 10:
                o.contactSyncEnabled = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.contactSyncEnabled
                );
                break;
              case 11:
                o.friendSourceFlags = h.UInt32Value.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.friendSourceFlags
                );
                break;
              case 12:
                o.friendDiscoveryFlags = h.UInt32Value.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.friendDiscoveryFlags
                );
                break;
              case 13:
                if (t === M.WireType.LengthDelimited)
                  for (let _ = e.int32() + e.pos; e.pos < _; )
                    o.activityRestrictedGuildIds.push(e.fixed64().toString());
                else o.activityRestrictedGuildIds.push(e.fixed64().toString());
                break;
              case 14:
                o.defaultGuildsActivityRestricted = e.int32();
                break;
              case 15:
                if (t === M.WireType.LengthDelimited)
                  for (let _ = e.int32() + e.pos; e.pos < _; )
                    o.activityJoiningRestrictedGuildIds.push(
                      e.fixed64().toString()
                    );
                else
                  o.activityJoiningRestrictedGuildIds.push(
                    e.fixed64().toString()
                  );
                break;
              case 16:
                if (t === M.WireType.LengthDelimited)
                  for (let _ = e.int32() + e.pos; e.pos < _; )
                    o.messageRequestRestrictedGuildIds.push(
                      e.fixed64().toString()
                    );
                else
                  o.messageRequestRestrictedGuildIds.push(
                    e.fixed64().toString()
                  );
                break;
              case 17:
                o.defaultMessageRequestRestricted =
                  h.BoolValue.internalBinaryRead(
                    e,
                    e.uint32(),
                    E,
                    o.defaultMessageRequestRestricted
                  );
                break;
              case 18:
                o.dropsOptedOut = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.dropsOptedOut
                );
                break;
              case 19:
                o.nonSpamRetrainingOptIn = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.nonSpamRetrainingOptIn
                );
                break;
              case 20:
                o.familyCenterEnabled = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.familyCenterEnabled
                );
                break;
              case 21:
                o.familyCenterEnabledV2 = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.familyCenterEnabledV2
                );
                break;
              case 22:
                o.hideLegacyUsername = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.hideLegacyUsername
                );
                break;
              case 23:
                o.inappropriateConversationWarnings =
                  h.BoolValue.internalBinaryRead(
                    e,
                    e.uint32(),
                    E,
                    o.inappropriateConversationWarnings
                  );
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          if (
            (e.allowActivityPartyPrivacyFriends &&
              h.BoolValue.internalBinaryWrite(
                e.allowActivityPartyPrivacyFriends,
                _.tag(1, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.allowActivityPartyPrivacyVoiceChannel &&
              h.BoolValue.internalBinaryWrite(
                e.allowActivityPartyPrivacyVoiceChannel,
                _.tag(2, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.restrictedGuildIds.length)
          ) {
            _.tag(3, M.WireType.LengthDelimited).fork();
            for (let E = 0; E < e.restrictedGuildIds.length; E++)
              _.fixed64(e.restrictedGuildIds[E]);
            _.join();
          }
          if (
            (!1 !== e.defaultGuildsRestricted &&
              _.tag(4, M.WireType.Varint).bool(e.defaultGuildsRestricted),
            !1 !== e.allowAccessibilityDetection &&
              _.tag(7, M.WireType.Varint).bool(e.allowAccessibilityDetection),
            e.detectPlatformAccounts &&
              h.BoolValue.internalBinaryWrite(
                e.detectPlatformAccounts,
                _.tag(8, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.passwordless &&
              h.BoolValue.internalBinaryWrite(
                e.passwordless,
                _.tag(9, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.contactSyncEnabled &&
              h.BoolValue.internalBinaryWrite(
                e.contactSyncEnabled,
                _.tag(10, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.friendSourceFlags &&
              h.UInt32Value.internalBinaryWrite(
                e.friendSourceFlags,
                _.tag(11, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.friendDiscoveryFlags &&
              h.UInt32Value.internalBinaryWrite(
                e.friendDiscoveryFlags,
                _.tag(12, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.activityRestrictedGuildIds.length)
          ) {
            _.tag(13, M.WireType.LengthDelimited).fork();
            for (let E = 0; E < e.activityRestrictedGuildIds.length; E++)
              _.fixed64(e.activityRestrictedGuildIds[E]);
            _.join();
          }
          if (
            (0 !== e.defaultGuildsActivityRestricted &&
              _.tag(14, M.WireType.Varint).int32(
                e.defaultGuildsActivityRestricted
              ),
            e.activityJoiningRestrictedGuildIds.length)
          ) {
            _.tag(15, M.WireType.LengthDelimited).fork();
            for (let E = 0; E < e.activityJoiningRestrictedGuildIds.length; E++)
              _.fixed64(e.activityJoiningRestrictedGuildIds[E]);
            _.join();
          }
          if (e.messageRequestRestrictedGuildIds.length) {
            _.tag(16, M.WireType.LengthDelimited).fork();
            for (let E = 0; E < e.messageRequestRestrictedGuildIds.length; E++)
              _.fixed64(e.messageRequestRestrictedGuildIds[E]);
            _.join();
          }
          e.defaultMessageRequestRestricted &&
            h.BoolValue.internalBinaryWrite(
              e.defaultMessageRequestRestricted,
              _.tag(17, M.WireType.LengthDelimited).fork(),
              E
            ).join(),
            e.dropsOptedOut &&
              h.BoolValue.internalBinaryWrite(
                e.dropsOptedOut,
                _.tag(18, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.nonSpamRetrainingOptIn &&
              h.BoolValue.internalBinaryWrite(
                e.nonSpamRetrainingOptIn,
                _.tag(19, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.familyCenterEnabled &&
              h.BoolValue.internalBinaryWrite(
                e.familyCenterEnabled,
                _.tag(20, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.familyCenterEnabledV2 &&
              h.BoolValue.internalBinaryWrite(
                e.familyCenterEnabledV2,
                _.tag(21, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.hideLegacyUsername &&
              h.BoolValue.internalBinaryWrite(
                e.hideLegacyUsername,
                _.tag(22, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.inappropriateConversationWarnings &&
              h.BoolValue.internalBinaryWrite(
                e.inappropriateConversationWarnings,
                _.tag(23, M.WireType.LengthDelimited).fork(),
                E
              ).join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.PrivacySettings", [
            {
              no: 1,
              name: "allow_activity_party_privacy_friends",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 2,
              name: "allow_activity_party_privacy_voice_channel",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 3,
              name: "restricted_guild_ids",
              kind: "scalar",
              repeat: 1,
              T: 6,
            },
            { no: 4, name: "default_guilds_restricted", kind: "scalar", T: 8 },
            {
              no: 7,
              name: "allow_accessibility_detection",
              kind: "scalar",
              T: 8,
            },
            {
              no: 8,
              name: "detect_platform_accounts",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 9,
              name: "passwordless",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 10,
              name: "contact_sync_enabled",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 11,
              name: "friend_source_flags",
              kind: "message",
              T: () => h.UInt32Value,
            },
            {
              no: 12,
              name: "friend_discovery_flags",
              kind: "message",
              T: () => h.UInt32Value,
            },
            {
              no: 13,
              name: "activity_restricted_guild_ids",
              kind: "scalar",
              repeat: 1,
              T: 6,
            },
            {
              no: 14,
              name: "default_guilds_activity_restricted",
              kind: "enum",
              T: () => [
                "discord_protos.discord_users.v1.GuildActivityStatusRestrictionDefault",
                s,
              ],
            },
            {
              no: 15,
              name: "activity_joining_restricted_guild_ids",
              kind: "scalar",
              repeat: 1,
              T: 6,
            },
            {
              no: 16,
              name: "message_request_restricted_guild_ids",
              kind: "scalar",
              repeat: 1,
              T: 6,
            },
            {
              no: 17,
              name: "default_message_request_restricted",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 18,
              name: "drops_opted_out",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 19,
              name: "non_spam_retraining_opt_in",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 20,
              name: "family_center_enabled",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 21,
              name: "family_center_enabled_v2",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 22,
              name: "hide_legacy_username",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 23,
              name: "inappropriate_conversation_warnings",
              kind: "message",
              T: () => h.BoolValue,
            },
          ]);
        }
      }
      let eE = new e_();
      class et extends M.MessageType {
        create(e) {
          let _ = {};
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            if (1 === _)
              o.rtcPanelShowVoiceStates = h.BoolValue.internalBinaryRead(
                e,
                e.uint32(),
                E,
                o.rtcPanelShowVoiceStates
              );
            else {
              let n = E.readUnknownField;
              if ("throw" === n)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let r = e.skip(t);
              !1 !== n &&
                (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                  this.typeName,
                  o,
                  _,
                  t,
                  r
                );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          e.rtcPanelShowVoiceStates &&
            h.BoolValue.internalBinaryWrite(
              e.rtcPanelShowVoiceStates,
              _.tag(1, M.WireType.LengthDelimited).fork(),
              E
            ).join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.DebugSettings", [
            {
              no: 1,
              name: "rtc_panel_show_voice_states",
              kind: "message",
              T: () => h.BoolValue,
            },
          ]);
        }
      }
      let eo = new et();
      class en extends M.MessageType {
        create(e) {
          let _ = {};
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.installShortcutDesktop = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.installShortcutDesktop
                );
                break;
              case 2:
                o.installShortcutStartMenu = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.installShortcutStartMenu
                );
                break;
              case 3:
                o.disableGamesTab = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.disableGamesTab
                );
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          e.installShortcutDesktop &&
            h.BoolValue.internalBinaryWrite(
              e.installShortcutDesktop,
              _.tag(1, M.WireType.LengthDelimited).fork(),
              E
            ).join(),
            e.installShortcutStartMenu &&
              h.BoolValue.internalBinaryWrite(
                e.installShortcutStartMenu,
                _.tag(2, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.disableGamesTab &&
              h.BoolValue.internalBinaryWrite(
                e.disableGamesTab,
                _.tag(3, M.WireType.LengthDelimited).fork(),
                E
              ).join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.GameLibrarySettings", [
            {
              no: 1,
              name: "install_shortcut_desktop",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 2,
              name: "install_shortcut_start_menu",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 3,
              name: "disable_games_tab",
              kind: "message",
              T: () => h.BoolValue,
            },
          ]);
        }
      }
      let er = new en();
      class ea extends M.MessageType {
        create(e) {
          let _ = { statusExpiresAtMs: "0" };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.status = h.StringValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.status
                );
                break;
              case 2:
                o.customStatus = es.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.customStatus
                );
                break;
              case 3:
                o.showCurrentGame = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.showCurrentGame
                );
                break;
              case 4:
                o.statusExpiresAtMs = e.fixed64().toString();
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          e.status &&
            h.StringValue.internalBinaryWrite(
              e.status,
              _.tag(1, M.WireType.LengthDelimited).fork(),
              E
            ).join(),
            e.customStatus &&
              es
                .internalBinaryWrite(
                  e.customStatus,
                  _.tag(2, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            e.showCurrentGame &&
              h.BoolValue.internalBinaryWrite(
                e.showCurrentGame,
                _.tag(3, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            "0" !== e.statusExpiresAtMs &&
              _.tag(4, M.WireType.Bit64).fixed64(e.statusExpiresAtMs);
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.StatusSettings", [
            { no: 1, name: "status", kind: "message", T: () => h.StringValue },
            { no: 2, name: "custom_status", kind: "message", T: () => es },
            {
              no: 3,
              name: "show_current_game",
              kind: "message",
              T: () => h.BoolValue,
            },
            { no: 4, name: "status_expires_at_ms", kind: "scalar", T: 6 },
          ]);
        }
      }
      let ei = new ea();
      class eI extends M.MessageType {
        create(e) {
          let _ = { text: "", emojiId: "0", emojiName: "", expiresAtMs: "0" };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.text = e.string();
                break;
              case 2:
                o.emojiId = e.fixed64().toString();
                break;
              case 3:
                o.emojiName = e.string();
                break;
              case 4:
                o.expiresAtMs = e.fixed64().toString();
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          "" !== e.text && _.tag(1, M.WireType.LengthDelimited).string(e.text),
            "0" !== e.emojiId && _.tag(2, M.WireType.Bit64).fixed64(e.emojiId),
            "" !== e.emojiName &&
              _.tag(3, M.WireType.LengthDelimited).string(e.emojiName),
            "0" !== e.expiresAtMs &&
              _.tag(4, M.WireType.Bit64).fixed64(e.expiresAtMs);
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.CustomStatus", [
            { no: 1, name: "text", kind: "scalar", T: 9 },
            { no: 2, name: "emoji_id", kind: "scalar", T: 6 },
            { no: 3, name: "emoji_name", kind: "scalar", T: 9 },
            { no: 4, name: "expires_at_ms", kind: "scalar", T: 6 },
          ]);
        }
      }
      let es = new eI();
      class eT extends M.MessageType {
        create(e) {
          let _ = {};
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.locale = h.StringValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.locale
                );
                break;
              case 2:
                o.timezoneOffset = h.Int32Value.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.timezoneOffset
                );
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          e.locale &&
            h.StringValue.internalBinaryWrite(
              e.locale,
              _.tag(1, M.WireType.LengthDelimited).fork(),
              E
            ).join(),
            e.timezoneOffset &&
              h.Int32Value.internalBinaryWrite(
                e.timezoneOffset,
                _.tag(2, M.WireType.LengthDelimited).fork(),
                E
              ).join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.LocalizationSettings", [
            { no: 1, name: "locale", kind: "message", T: () => h.StringValue },
            {
              no: 2,
              name: "timezone_offset",
              kind: "message",
              T: () => h.Int32Value,
            },
          ]);
        }
      }
      let eS = new eT();
      class eN extends M.MessageType {
        create(e) {
          let _ = {};
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.layout = h.StringValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.layout
                );
                break;
              case 2:
                o.messagePreviews = h.StringValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.messagePreviews
                );
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          e.layout &&
            h.StringValue.internalBinaryWrite(
              e.layout,
              _.tag(1, M.WireType.LengthDelimited).fork(),
              E
            ).join(),
            e.messagePreviews &&
              h.StringValue.internalBinaryWrite(
                e.messagePreviews,
                _.tag(2, M.WireType.LengthDelimited).fork(),
                E
              ).join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.ChannelListSettings", [
            { no: 1, name: "layout", kind: "message", T: () => h.StringValue },
            {
              no: 2,
              name: "message_previews",
              kind: "message",
              T: () => h.StringValue,
            },
          ]);
        }
      }
      let eO = new eN();
      class eA extends M.MessageType {
        create(e) {
          let _ = { theme: 0, developerMode: !1, mobileRedesignDisabled: !1 };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.theme = e.int32();
                break;
              case 2:
                o.developerMode = e.bool();
                break;
              case 3:
                o.clientThemeSettings = eL.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.clientThemeSettings
                );
                break;
              case 4:
                o.mobileRedesignDisabled = e.bool();
                break;
              case 6:
                o.channelListLayout = h.StringValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.channelListLayout
                );
                break;
              case 7:
                o.messagePreviews = h.StringValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.messagePreviews
                );
                break;
              case 8:
                o.searchResultExactCountEnabled =
                  h.BoolValue.internalBinaryRead(
                    e,
                    e.uint32(),
                    E,
                    o.searchResultExactCountEnabled
                  );
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          0 !== e.theme && _.tag(1, M.WireType.Varint).int32(e.theme),
            !1 !== e.developerMode &&
              _.tag(2, M.WireType.Varint).bool(e.developerMode),
            e.clientThemeSettings &&
              eL
                .internalBinaryWrite(
                  e.clientThemeSettings,
                  _.tag(3, M.WireType.LengthDelimited).fork(),
                  E
                )
                .join(),
            !1 !== e.mobileRedesignDisabled &&
              _.tag(4, M.WireType.Varint).bool(e.mobileRedesignDisabled),
            e.channelListLayout &&
              h.StringValue.internalBinaryWrite(
                e.channelListLayout,
                _.tag(6, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.messagePreviews &&
              h.StringValue.internalBinaryWrite(
                e.messagePreviews,
                _.tag(7, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.searchResultExactCountEnabled &&
              h.BoolValue.internalBinaryWrite(
                e.searchResultExactCountEnabled,
                _.tag(8, M.WireType.LengthDelimited).fork(),
                E
              ).join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.AppearanceSettings", [
            {
              no: 1,
              name: "theme",
              kind: "enum",
              T: () => ["discord_protos.discord_users.v1.Theme", T],
            },
            { no: 2, name: "developer_mode", kind: "scalar", T: 8 },
            {
              no: 3,
              name: "client_theme_settings",
              kind: "message",
              T: () => eL,
            },
            { no: 4, name: "mobile_redesign_disabled", kind: "scalar", T: 8 },
            {
              no: 6,
              name: "channel_list_layout",
              kind: "message",
              T: () => h.StringValue,
            },
            {
              no: 7,
              name: "message_previews",
              kind: "message",
              T: () => h.StringValue,
            },
            {
              no: 8,
              name: "search_result_exact_count_enabled",
              kind: "message",
              T: () => h.BoolValue,
            },
          ]);
        }
      }
      let eR = new eA();
      class el extends M.MessageType {
        create(e) {
          let _ = {};
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            if (2 === _)
              o.backgroundGradientPresetId = h.UInt32Value.internalBinaryRead(
                e,
                e.uint32(),
                E,
                o.backgroundGradientPresetId
              );
            else {
              let n = E.readUnknownField;
              if ("throw" === n)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let r = e.skip(t);
              !1 !== n &&
                (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                  this.typeName,
                  o,
                  _,
                  t,
                  r
                );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          e.backgroundGradientPresetId &&
            h.UInt32Value.internalBinaryWrite(
              e.backgroundGradientPresetId,
              _.tag(2, M.WireType.LengthDelimited).fork(),
              E
            ).join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.ClientThemeSettings", [
            {
              no: 2,
              name: "background_gradient_preset_id",
              kind: "message",
              T: () => h.UInt32Value,
            },
          ]);
        }
      }
      let eL = new el();
      class eu extends M.MessageType {
        create(e) {
          let _ = { folders: [], guildPositions: [] };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.folders.push(ec.internalBinaryRead(e, e.uint32(), E));
                break;
              case 2:
                if (t === M.WireType.LengthDelimited)
                  for (let _ = e.int32() + e.pos; e.pos < _; )
                    o.guildPositions.push(e.fixed64().toString());
                else o.guildPositions.push(e.fixed64().toString());
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          for (let t = 0; t < e.folders.length; t++)
            ec.internalBinaryWrite(
              e.folders[t],
              _.tag(1, M.WireType.LengthDelimited).fork(),
              E
            ).join();
          if (e.guildPositions.length) {
            _.tag(2, M.WireType.LengthDelimited).fork();
            for (let E = 0; E < e.guildPositions.length; E++)
              _.fixed64(e.guildPositions[E]);
            _.join();
          }
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.GuildFolders", [
            { no: 1, name: "folders", kind: "message", repeat: 1, T: () => ec },
            { no: 2, name: "guild_positions", kind: "scalar", repeat: 1, T: 6 },
          ]);
        }
      }
      let eC = new eu();
      class eD extends M.MessageType {
        create(e) {
          let _ = { guildIds: [] };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                if (t === M.WireType.LengthDelimited)
                  for (let _ = e.int32() + e.pos; e.pos < _; )
                    o.guildIds.push(e.fixed64().toString());
                else o.guildIds.push(e.fixed64().toString());
                break;
              case 2:
                o.id = h.Int64Value.internalBinaryRead(e, e.uint32(), E, o.id);
                break;
              case 3:
                o.name = h.StringValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.name
                );
                break;
              case 4:
                o.color = h.UInt64Value.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.color
                );
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          if (e.guildIds.length) {
            _.tag(1, M.WireType.LengthDelimited).fork();
            for (let E = 0; E < e.guildIds.length; E++)
              _.fixed64(e.guildIds[E]);
            _.join();
          }
          e.id &&
            h.Int64Value.internalBinaryWrite(
              e.id,
              _.tag(2, M.WireType.LengthDelimited).fork(),
              E
            ).join(),
            e.name &&
              h.StringValue.internalBinaryWrite(
                e.name,
                _.tag(3, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.color &&
              h.UInt64Value.internalBinaryWrite(
                e.color,
                _.tag(4, M.WireType.LengthDelimited).fork(),
                E
              ).join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.GuildFolder", [
            { no: 1, name: "guild_ids", kind: "scalar", repeat: 1, T: 6 },
            { no: 2, name: "id", kind: "message", T: () => h.Int64Value },
            { no: 3, name: "name", kind: "message", T: () => h.StringValue },
            { no: 4, name: "color", kind: "message", T: () => h.UInt64Value },
          ]);
        }
      }
      let ec = new eD();
      class ed extends M.MessageType {
        create(e) {
          let _ = { favoriteChannels: {}, muted: !1 };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                this.binaryReadMap1(o.favoriteChannels, e, E);
                break;
              case 2:
                o.muted = e.bool();
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        binaryReadMap1(e, _, E) {
          let t = _.uint32(),
            o = _.pos + t,
            n,
            r;
          for (; _.pos < o; ) {
            let [e, t] = _.tag();
            switch (e) {
              case 1:
                n = _.fixed64().toString();
                break;
              case 2:
                r = eh.internalBinaryRead(_, _.uint32(), E);
                break;
              default:
                throw new globalThis.Error(
                  "unknown map entry field for field discord_protos.discord_users.v1.Favorites.favorite_channels"
                );
            }
          }
          e[null != n ? n : "0"] = null != r ? r : eh.create();
        }
        internalBinaryWrite(e, _, E) {
          for (let t of Object.keys(e.favoriteChannels))
            _.tag(1, M.WireType.LengthDelimited)
              .fork()
              .tag(1, M.WireType.Bit64)
              .fixed64(t),
              _.tag(2, M.WireType.LengthDelimited).fork(),
              eh.internalBinaryWrite(e.favoriteChannels[t], _, E),
              _.join().join();
          !1 !== e.muted && _.tag(2, M.WireType.Varint).bool(e.muted);
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.Favorites", [
            {
              no: 1,
              name: "favorite_channels",
              kind: "map",
              K: 6,
              V: { kind: "message", T: () => eh },
            },
            { no: 2, name: "muted", kind: "scalar", T: 8 },
          ]);
        }
      }
      let eU = new ed();
      class eM extends M.MessageType {
        create(e) {
          let _ = { nickname: "", type: 0, position: 0, parentId: "0" };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.nickname = e.string();
                break;
              case 2:
                o.type = e.int32();
                break;
              case 3:
                o.position = e.uint32();
                break;
              case 4:
                o.parentId = e.fixed64().toString();
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          "" !== e.nickname &&
            _.tag(1, M.WireType.LengthDelimited).string(e.nickname),
            0 !== e.type && _.tag(2, M.WireType.Varint).int32(e.type),
            0 !== e.position && _.tag(3, M.WireType.Varint).uint32(e.position),
            "0" !== e.parentId &&
              _.tag(4, M.WireType.Bit64).fixed64(e.parentId);
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.FavoriteChannel", [
            { no: 1, name: "nickname", kind: "scalar", T: 9 },
            {
              no: 2,
              name: "type",
              kind: "enum",
              T: () => [
                "discord_protos.discord_users.v1.FavoriteChannelType",
                N,
              ],
            },
            { no: 3, name: "position", kind: "scalar", T: 13 },
            { no: 4, name: "parent_id", kind: "scalar", T: 6 },
          ]);
        }
      }
      let eh = new eM();
      class eP extends M.MessageType {
        create(e) {
          let _ = {
            muted: !1,
            volume: 0,
            modifiedAt: "0",
            soundboardMuted: !1,
          };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.muted = e.bool();
                break;
              case 2:
                o.volume = e.float();
                break;
              case 3:
                o.modifiedAt = e.fixed64().toString();
                break;
              case 4:
                o.soundboardMuted = e.bool();
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          !1 !== e.muted && _.tag(1, M.WireType.Varint).bool(e.muted),
            0 !== e.volume && _.tag(2, M.WireType.Bit32).float(e.volume),
            "0" !== e.modifiedAt &&
              _.tag(3, M.WireType.Bit64).fixed64(e.modifiedAt),
            !1 !== e.soundboardMuted &&
              _.tag(4, M.WireType.Varint).bool(e.soundboardMuted);
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.AudioContextSetting", [
            { no: 1, name: "muted", kind: "scalar", T: 8 },
            { no: 2, name: "volume", kind: "scalar", T: 2 },
            { no: 3, name: "modified_at", kind: "scalar", T: 6 },
            { no: 4, name: "soundboard_muted", kind: "scalar", T: 8 },
          ]);
        }
      }
      let em = new eP();
      class eG extends M.MessageType {
        create(e) {
          let _ = { user: {}, stream: {} };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                this.binaryReadMap1(o.user, e, E);
                break;
              case 2:
                this.binaryReadMap2(o.stream, e, E);
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        binaryReadMap1(e, _, E) {
          let t = _.uint32(),
            o = _.pos + t,
            n,
            r;
          for (; _.pos < o; ) {
            let [e, t] = _.tag();
            switch (e) {
              case 1:
                n = _.fixed64().toString();
                break;
              case 2:
                r = em.internalBinaryRead(_, _.uint32(), E);
                break;
              default:
                throw new globalThis.Error(
                  "unknown map entry field for field discord_protos.discord_users.v1.AudioSettings.user"
                );
            }
          }
          e[null != n ? n : "0"] = null != r ? r : em.create();
        }
        binaryReadMap2(e, _, E) {
          let t = _.uint32(),
            o = _.pos + t,
            n,
            r;
          for (; _.pos < o; ) {
            let [e, t] = _.tag();
            switch (e) {
              case 1:
                n = _.fixed64().toString();
                break;
              case 2:
                r = em.internalBinaryRead(_, _.uint32(), E);
                break;
              default:
                throw new globalThis.Error(
                  "unknown map entry field for field discord_protos.discord_users.v1.AudioSettings.stream"
                );
            }
          }
          e[null != n ? n : "0"] = null != r ? r : em.create();
        }
        internalBinaryWrite(e, _, E) {
          for (let t of Object.keys(e.user))
            _.tag(1, M.WireType.LengthDelimited)
              .fork()
              .tag(1, M.WireType.Bit64)
              .fixed64(t),
              _.tag(2, M.WireType.LengthDelimited).fork(),
              em.internalBinaryWrite(e.user[t], _, E),
              _.join().join();
          for (let t of Object.keys(e.stream))
            _.tag(2, M.WireType.LengthDelimited)
              .fork()
              .tag(1, M.WireType.Bit64)
              .fixed64(t),
              _.tag(2, M.WireType.LengthDelimited).fork(),
              em.internalBinaryWrite(e.stream[t], _, E),
              _.join().join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.AudioSettings", [
            {
              no: 1,
              name: "user",
              kind: "map",
              K: 6,
              V: { kind: "message", T: () => em },
            },
            {
              no: 2,
              name: "stream",
              kind: "map",
              K: 6,
              V: { kind: "message", T: () => em },
            },
          ]);
        }
      }
      let ep = new eG();
      class eg extends M.MessageType {
        create(e) {
          let _ = {};
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            if (1 === _)
              o.disableHomeAutoNav = h.BoolValue.internalBinaryRead(
                e,
                e.uint32(),
                E,
                o.disableHomeAutoNav
              );
            else {
              let n = E.readUnknownField;
              if ("throw" === n)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let r = e.skip(t);
              !1 !== n &&
                (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                  this.typeName,
                  o,
                  _,
                  t,
                  r
                );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          e.disableHomeAutoNav &&
            h.BoolValue.internalBinaryWrite(
              e.disableHomeAutoNav,
              _.tag(1, M.WireType.LengthDelimited).fork(),
              E
            ).join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.CommunitiesSettings", [
            {
              no: 1,
              name: "disable_home_auto_nav",
              kind: "message",
              T: () => h.BoolValue,
            },
          ]);
        }
      }
      let ey = new eg();
      class eB extends M.MessageType {
        create(e) {
          let _ = { volume: 0 };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            if (1 === _) o.volume = e.float();
            else {
              let n = E.readUnknownField;
              if ("throw" === n)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let r = e.skip(t);
              !1 !== n &&
                (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                  this.typeName,
                  o,
                  _,
                  t,
                  r
                );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          0 !== e.volume && _.tag(1, M.WireType.Bit32).float(e.volume);
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.SoundboardSettings", [
            { no: 1, name: "volume", kind: "scalar", T: 2 },
          ]);
        }
      }
      let ef = new eB();
      class eH extends M.MessageType {
        create(e) {
          let _ = { soundId: "0", guildId: "0" };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.soundId = e.fixed64().toString();
                break;
              case 2:
                o.guildId = e.fixed64().toString();
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          "0" !== e.soundId && _.tag(1, M.WireType.Bit64).fixed64(e.soundId),
            "0" !== e.guildId && _.tag(2, M.WireType.Bit64).fixed64(e.guildId);
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.CustomCallSound", [
            { no: 1, name: "sound_id", kind: "scalar", T: 6 },
            { no: 2, name: "guild_id", kind: "scalar", T: 6 },
          ]);
        }
      }
      let ev = new eH();
      class eb extends M.MessageType {
        create(e) {
          let _ = { allowedGuildIds: [], allowedUserIds: [] };
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            switch (_) {
              case 1:
                o.allowFriends = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.allowFriends
                );
                break;
              case 2:
                if (t === M.WireType.LengthDelimited)
                  for (let _ = e.int32() + e.pos; e.pos < _; )
                    o.allowedGuildIds.push(e.fixed64().toString());
                else o.allowedGuildIds.push(e.fixed64().toString());
                break;
              case 3:
                if (t === M.WireType.LengthDelimited)
                  for (let _ = e.int32() + e.pos; e.pos < _; )
                    o.allowedUserIds.push(e.fixed64().toString());
                else o.allowedUserIds.push(e.fixed64().toString());
                break;
              case 4:
                o.autoBroadcast = h.BoolValue.internalBinaryRead(
                  e,
                  e.uint32(),
                  E,
                  o.autoBroadcast
                );
                break;
              default:
                let n = E.readUnknownField;
                if ("throw" === n)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(t, ") for ")
                      .concat(this.typeName)
                  );
                let r = e.skip(t);
                !1 !== n &&
                  (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                    this.typeName,
                    o,
                    _,
                    t,
                    r
                  );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          if (
            (e.allowFriends &&
              h.BoolValue.internalBinaryWrite(
                e.allowFriends,
                _.tag(1, M.WireType.LengthDelimited).fork(),
                E
              ).join(),
            e.allowedGuildIds.length)
          ) {
            _.tag(2, M.WireType.LengthDelimited).fork();
            for (let E = 0; E < e.allowedGuildIds.length; E++)
              _.fixed64(e.allowedGuildIds[E]);
            _.join();
          }
          if (e.allowedUserIds.length) {
            _.tag(3, M.WireType.LengthDelimited).fork();
            for (let E = 0; E < e.allowedUserIds.length; E++)
              _.fixed64(e.allowedUserIds[E]);
            _.join();
          }
          e.autoBroadcast &&
            h.BoolValue.internalBinaryWrite(
              e.autoBroadcast,
              _.tag(4, M.WireType.LengthDelimited).fork(),
              E
            ).join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.BroadcastSettings", [
            {
              no: 1,
              name: "allow_friends",
              kind: "message",
              T: () => h.BoolValue,
            },
            {
              no: 2,
              name: "allowed_guild_ids",
              kind: "scalar",
              repeat: 1,
              T: 6,
            },
            {
              no: 3,
              name: "allowed_user_ids",
              kind: "scalar",
              repeat: 1,
              T: 6,
            },
            {
              no: 4,
              name: "auto_broadcast",
              kind: "message",
              T: () => h.BoolValue,
            },
          ]);
        }
      }
      let ew = new eb();
      class eF extends M.MessageType {
        create(e) {
          let _ = {};
          return (
            globalThis.Object.defineProperty(_, M.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, M.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, t) {
          let o = null != t ? t : this.create(),
            n = e.pos + _;
          for (; e.pos < n; ) {
            let [_, t] = e.tag();
            if (1 === _)
              o.allowVoiceRecording = h.BoolValue.internalBinaryRead(
                e,
                e.uint32(),
                E,
                o.allowVoiceRecording
              );
            else {
              let n = E.readUnknownField;
              if ("throw" === n)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(t, ") for ")
                    .concat(this.typeName)
                );
              let r = e.skip(t);
              !1 !== n &&
                (!0 === n ? M.UnknownFieldHandler.onRead : n)(
                  this.typeName,
                  o,
                  _,
                  t,
                  r
                );
            }
          }
          return o;
        }
        internalBinaryWrite(e, _, E) {
          e.allowVoiceRecording &&
            h.BoolValue.internalBinaryWrite(
              e.allowVoiceRecording,
              _.tag(1, M.WireType.LengthDelimited).fork(),
              E
            ).join();
          let t = E.writeUnknownFields;
          return (
            !1 !== t &&
              (!0 == t ? M.UnknownFieldHandler.onWrite : t)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.ClipsSettings", [
            {
              no: 1,
              name: "allow_voice_recording",
              kind: "message",
              T: () => h.BoolValue,
            },
          ]);
        }
      }
      let eY = new eF();
    },
    959714: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          Versions: function () {
            return n;
          },
        }),
        E("222007"),
        E("70102");
      var t = E("849266");
      class o extends t.MessageType {
        create(e) {
          let _ = { clientVersion: 0, serverVersion: 0, dataVersion: 0 };
          return (
            globalThis.Object.defineProperty(_, t.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, t.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, o) {
          let n = null != o ? o : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, o] = e.tag();
            switch (_) {
              case 1:
                n.clientVersion = e.uint32();
                break;
              case 2:
                n.serverVersion = e.uint32();
                break;
              case 3:
                n.dataVersion = e.uint32();
                break;
              default:
                let r = E.readUnknownField;
                if ("throw" === r)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(o, ") for ")
                      .concat(this.typeName)
                  );
                let a = e.skip(o);
                !1 !== r &&
                  (!0 === r ? t.UnknownFieldHandler.onRead : r)(
                    this.typeName,
                    n,
                    _,
                    o,
                    a
                  );
            }
          }
          return n;
        }
        internalBinaryWrite(e, _, E) {
          0 !== e.clientVersion &&
            _.tag(1, t.WireType.Varint).uint32(e.clientVersion),
            0 !== e.serverVersion &&
              _.tag(2, t.WireType.Varint).uint32(e.serverVersion),
            0 !== e.dataVersion &&
              _.tag(3, t.WireType.Varint).uint32(e.dataVersion);
          let o = E.writeUnknownFields;
          return (
            !1 !== o &&
              (!0 == o ? t.UnknownFieldHandler.onWrite : o)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("discord_protos.discord_users.v1.Versions", [
            { no: 1, name: "client_version", kind: "scalar", T: 13 },
            { no: 2, name: "server_version", kind: "scalar", T: 13 },
            { no: 3, name: "data_version", kind: "scalar", T: 13 },
          ]);
        }
      }
      let n = new o();
    },
    801340: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          Timestamp: function () {
            return n;
          },
        }),
        E("70102"),
        E("781738"),
        E("222007");
      var t = E("849266");
      class o extends t.MessageType {
        now() {
          let e = this.create(),
            _ = Date.now();
          return (
            (e.seconds = t.PbLong.from(Math.floor(_ / 1e3)).toString()),
            (e.nanos = (_ % 1e3) * 1e6),
            e
          );
        }
        toDate(e) {
          return new Date(
            1e3 * t.PbLong.from(e.seconds).toNumber() + Math.ceil(e.nanos / 1e6)
          );
        }
        fromDate(e) {
          let _ = this.create(),
            E = e.getTime();
          return (
            (_.seconds = t.PbLong.from(Math.floor(E / 1e3)).toString()),
            (_.nanos = (E % 1e3) * 1e6),
            _
          );
        }
        internalJsonWrite(e, _) {
          let E = 1e3 * t.PbLong.from(e.seconds).toNumber();
          if (
            E < Date.parse("0001-01-01T00:00:00Z") ||
            E > Date.parse("9999-12-31T23:59:59Z")
          )
            throw Error(
              "Unable to encode Timestamp to JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive."
            );
          if (e.nanos < 0)
            throw Error(
              "Unable to encode invalid Timestamp to JSON. Nanos must not be negative."
            );
          let o = "Z";
          if (e.nanos > 0) {
            let _ = (e.nanos + 1e9).toString().substring(1);
            o =
              "000000" === _.substring(3)
                ? "." + _.substring(0, 3) + "Z"
                : "000" === _.substring(6)
                  ? "." + _.substring(0, 6) + "Z"
                  : "." + _ + "Z";
          }
          return new Date(E).toISOString().replace(".000Z", o);
        }
        internalJsonRead(e, _, E) {
          if ("string" != typeof e)
            throw Error(
              "Unable to parse Timestamp from JSON " +
                (0, t.typeofJsonValue)(e) +
                "."
            );
          let o = e.match(
            /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/
          );
          if (!o)
            throw Error("Unable to parse Timestamp from JSON. Invalid format.");
          let n = Date.parse(
            o[1] +
              "-" +
              o[2] +
              "-" +
              o[3] +
              "T" +
              o[4] +
              ":" +
              o[5] +
              ":" +
              o[6] +
              (o[8] ? o[8] : "Z")
          );
          if (Number.isNaN(n))
            throw Error("Unable to parse Timestamp from JSON. Invalid value.");
          if (
            n < Date.parse("0001-01-01T00:00:00Z") ||
            n > Date.parse("9999-12-31T23:59:59Z")
          )
            throw new globalThis.Error(
              "Unable to parse Timestamp from JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive."
            );
          return (
            !E && (E = this.create()),
            (E.seconds = t.PbLong.from(n / 1e3).toString()),
            (E.nanos = 0),
            o[7] &&
              (E.nanos =
                parseInt("1" + o[7] + "0".repeat(9 - o[7].length)) - 1e9),
            E
          );
        }
        create(e) {
          let _ = { seconds: "0", nanos: 0 };
          return (
            globalThis.Object.defineProperty(_, t.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, t.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, o) {
          let n = null != o ? o : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, o] = e.tag();
            switch (_) {
              case 1:
                n.seconds = e.int64().toString();
                break;
              case 2:
                n.nanos = e.int32();
                break;
              default:
                let r = E.readUnknownField;
                if ("throw" === r)
                  throw new globalThis.Error(
                    "Unknown field "
                      .concat(_, " (wire type ")
                      .concat(o, ") for ")
                      .concat(this.typeName)
                  );
                let a = e.skip(o);
                !1 !== r &&
                  (!0 === r ? t.UnknownFieldHandler.onRead : r)(
                    this.typeName,
                    n,
                    _,
                    o,
                    a
                  );
            }
          }
          return n;
        }
        internalBinaryWrite(e, _, E) {
          "0" !== e.seconds && _.tag(1, t.WireType.Varint).int64(e.seconds),
            0 !== e.nanos && _.tag(2, t.WireType.Varint).int32(e.nanos);
          let o = E.writeUnknownFields;
          return (
            !1 !== o &&
              (!0 == o ? t.UnknownFieldHandler.onWrite : o)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("google.protobuf.Timestamp", [
            { no: 1, name: "seconds", kind: "scalar", T: 3 },
            { no: 2, name: "nanos", kind: "scalar", T: 5 },
          ]);
        }
      }
      let n = new o();
    },
    750028: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          Int64Value: function () {
            return a;
          },
          UInt64Value: function () {
            return I;
          },
          Int32Value: function () {
            return T;
          },
          UInt32Value: function () {
            return N;
          },
          BoolValue: function () {
            return A;
          },
          StringValue: function () {
            return l;
          },
        }),
        E("222007"),
        E("70102"),
        E("311790"),
        E("477657"),
        E("811875"),
        E("90301"),
        E("652153"),
        E("28797"),
        E("817884"),
        E("597349"),
        E("667536"),
        E("690341");
      var t = E("849266");
      class o extends t.MessageType {
        internalJsonWrite(e, _) {
          return this.refJsonWriter.scalar(2, e.value, "value", !1, !0);
        }
        internalJsonRead(e, _, E) {
          return (
            !E && (E = this.create()),
            (E.value = this.refJsonReader.scalar(e, 1, void 0, "value")),
            E
          );
        }
        create(e) {
          let _ = { value: 0 };
          return (
            globalThis.Object.defineProperty(_, t.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, t.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, o) {
          let n = null != o ? o : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, o] = e.tag();
            if (1 === _) n.value = e.double();
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(o, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(o);
              !1 !== r &&
                (!0 === r ? t.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  n,
                  _,
                  o,
                  a
                );
            }
          }
          return n;
        }
        internalBinaryWrite(e, _, E) {
          0 !== e.value && _.tag(1, t.WireType.Bit64).double(e.value);
          let o = E.writeUnknownFields;
          return (
            !1 !== o &&
              (!0 == o ? t.UnknownFieldHandler.onWrite : o)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("google.protobuf.DoubleValue", [
            { no: 1, name: "value", kind: "scalar", T: 1 },
          ]);
        }
      }
      new o();
      class n extends t.MessageType {
        internalJsonWrite(e, _) {
          return this.refJsonWriter.scalar(1, e.value, "value", !1, !0);
        }
        internalJsonRead(e, _, E) {
          return (
            !E && (E = this.create()),
            (E.value = this.refJsonReader.scalar(e, 1, void 0, "value")),
            E
          );
        }
        create(e) {
          let _ = { value: 0 };
          return (
            globalThis.Object.defineProperty(_, t.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, t.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, o) {
          let n = null != o ? o : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, o] = e.tag();
            if (1 === _) n.value = e.float();
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(o, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(o);
              !1 !== r &&
                (!0 === r ? t.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  n,
                  _,
                  o,
                  a
                );
            }
          }
          return n;
        }
        internalBinaryWrite(e, _, E) {
          0 !== e.value && _.tag(1, t.WireType.Bit32).float(e.value);
          let o = E.writeUnknownFields;
          return (
            !1 !== o &&
              (!0 == o ? t.UnknownFieldHandler.onWrite : o)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("google.protobuf.FloatValue", [
            { no: 1, name: "value", kind: "scalar", T: 2 },
          ]);
        }
      }
      new n();
      class r extends t.MessageType {
        internalJsonWrite(e, _) {
          return this.refJsonWriter.scalar(
            t.ScalarType.INT64,
            e.value,
            "value",
            !1,
            !0
          );
        }
        internalJsonRead(e, _, E) {
          return (
            !E && (E = this.create()),
            (E.value = this.refJsonReader.scalar(
              e,
              t.ScalarType.INT64,
              t.LongType.STRING,
              "value"
            )),
            E
          );
        }
        create(e) {
          let _ = { value: "0" };
          return (
            globalThis.Object.defineProperty(_, t.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, t.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, o) {
          let n = null != o ? o : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, o] = e.tag();
            if (1 === _) n.value = e.int64().toString();
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(o, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(o);
              !1 !== r &&
                (!0 === r ? t.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  n,
                  _,
                  o,
                  a
                );
            }
          }
          return n;
        }
        internalBinaryWrite(e, _, E) {
          "0" !== e.value && _.tag(1, t.WireType.Varint).int64(e.value);
          let o = E.writeUnknownFields;
          return (
            !1 !== o &&
              (!0 == o ? t.UnknownFieldHandler.onWrite : o)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("google.protobuf.Int64Value", [
            { no: 1, name: "value", kind: "scalar", T: 3 },
          ]);
        }
      }
      let a = new r();
      class i extends t.MessageType {
        internalJsonWrite(e, _) {
          return this.refJsonWriter.scalar(
            t.ScalarType.UINT64,
            e.value,
            "value",
            !1,
            !0
          );
        }
        internalJsonRead(e, _, E) {
          return (
            !E && (E = this.create()),
            (E.value = this.refJsonReader.scalar(
              e,
              t.ScalarType.UINT64,
              t.LongType.STRING,
              "value"
            )),
            E
          );
        }
        create(e) {
          let _ = { value: "0" };
          return (
            globalThis.Object.defineProperty(_, t.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, t.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, o) {
          let n = null != o ? o : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, o] = e.tag();
            if (1 === _) n.value = e.uint64().toString();
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(o, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(o);
              !1 !== r &&
                (!0 === r ? t.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  n,
                  _,
                  o,
                  a
                );
            }
          }
          return n;
        }
        internalBinaryWrite(e, _, E) {
          "0" !== e.value && _.tag(1, t.WireType.Varint).uint64(e.value);
          let o = E.writeUnknownFields;
          return (
            !1 !== o &&
              (!0 == o ? t.UnknownFieldHandler.onWrite : o)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("google.protobuf.UInt64Value", [
            { no: 1, name: "value", kind: "scalar", T: 4 },
          ]);
        }
      }
      let I = new i();
      class s extends t.MessageType {
        internalJsonWrite(e, _) {
          return this.refJsonWriter.scalar(5, e.value, "value", !1, !0);
        }
        internalJsonRead(e, _, E) {
          return (
            !E && (E = this.create()),
            (E.value = this.refJsonReader.scalar(e, 5, void 0, "value")),
            E
          );
        }
        create(e) {
          let _ = { value: 0 };
          return (
            globalThis.Object.defineProperty(_, t.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, t.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, o) {
          let n = null != o ? o : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, o] = e.tag();
            if (1 === _) n.value = e.int32();
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(o, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(o);
              !1 !== r &&
                (!0 === r ? t.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  n,
                  _,
                  o,
                  a
                );
            }
          }
          return n;
        }
        internalBinaryWrite(e, _, E) {
          0 !== e.value && _.tag(1, t.WireType.Varint).int32(e.value);
          let o = E.writeUnknownFields;
          return (
            !1 !== o &&
              (!0 == o ? t.UnknownFieldHandler.onWrite : o)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("google.protobuf.Int32Value", [
            { no: 1, name: "value", kind: "scalar", T: 5 },
          ]);
        }
      }
      let T = new s();
      class S extends t.MessageType {
        internalJsonWrite(e, _) {
          return this.refJsonWriter.scalar(13, e.value, "value", !1, !0);
        }
        internalJsonRead(e, _, E) {
          return (
            !E && (E = this.create()),
            (E.value = this.refJsonReader.scalar(e, 13, void 0, "value")),
            E
          );
        }
        create(e) {
          let _ = { value: 0 };
          return (
            globalThis.Object.defineProperty(_, t.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, t.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, o) {
          let n = null != o ? o : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, o] = e.tag();
            if (1 === _) n.value = e.uint32();
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(o, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(o);
              !1 !== r &&
                (!0 === r ? t.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  n,
                  _,
                  o,
                  a
                );
            }
          }
          return n;
        }
        internalBinaryWrite(e, _, E) {
          0 !== e.value && _.tag(1, t.WireType.Varint).uint32(e.value);
          let o = E.writeUnknownFields;
          return (
            !1 !== o &&
              (!0 == o ? t.UnknownFieldHandler.onWrite : o)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("google.protobuf.UInt32Value", [
            { no: 1, name: "value", kind: "scalar", T: 13 },
          ]);
        }
      }
      let N = new S();
      class O extends t.MessageType {
        internalJsonWrite(e, _) {
          return e.value;
        }
        internalJsonRead(e, _, E) {
          return (
            !E && (E = this.create()),
            (E.value = this.refJsonReader.scalar(e, 8, void 0, "value")),
            E
          );
        }
        create(e) {
          let _ = { value: !1 };
          return (
            globalThis.Object.defineProperty(_, t.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, t.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, o) {
          let n = null != o ? o : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, o] = e.tag();
            if (1 === _) n.value = e.bool();
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(o, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(o);
              !1 !== r &&
                (!0 === r ? t.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  n,
                  _,
                  o,
                  a
                );
            }
          }
          return n;
        }
        internalBinaryWrite(e, _, E) {
          !1 !== e.value && _.tag(1, t.WireType.Varint).bool(e.value);
          let o = E.writeUnknownFields;
          return (
            !1 !== o &&
              (!0 == o ? t.UnknownFieldHandler.onWrite : o)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("google.protobuf.BoolValue", [
            { no: 1, name: "value", kind: "scalar", T: 8 },
          ]);
        }
      }
      let A = new O();
      class R extends t.MessageType {
        internalJsonWrite(e, _) {
          return e.value;
        }
        internalJsonRead(e, _, E) {
          return (
            !E && (E = this.create()),
            (E.value = this.refJsonReader.scalar(e, 9, void 0, "value")),
            E
          );
        }
        create(e) {
          let _ = { value: "" };
          return (
            globalThis.Object.defineProperty(_, t.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, t.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, o) {
          let n = null != o ? o : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, o] = e.tag();
            if (1 === _) n.value = e.string();
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(o, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(o);
              !1 !== r &&
                (!0 === r ? t.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  n,
                  _,
                  o,
                  a
                );
            }
          }
          return n;
        }
        internalBinaryWrite(e, _, E) {
          "" !== e.value &&
            _.tag(1, t.WireType.LengthDelimited).string(e.value);
          let o = E.writeUnknownFields;
          return (
            !1 !== o &&
              (!0 == o ? t.UnknownFieldHandler.onWrite : o)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("google.protobuf.StringValue", [
            { no: 1, name: "value", kind: "scalar", T: 9 },
          ]);
        }
      }
      let l = new R();
      class L extends t.MessageType {
        internalJsonWrite(e, _) {
          return this.refJsonWriter.scalar(12, e.value, "value", !1, !0);
        }
        internalJsonRead(e, _, E) {
          return (
            !E && (E = this.create()),
            (E.value = this.refJsonReader.scalar(e, 12, void 0, "value")),
            E
          );
        }
        create(e) {
          let _ = { value: new Uint8Array(0) };
          return (
            globalThis.Object.defineProperty(_, t.MESSAGE_TYPE, {
              enumerable: !1,
              value: this,
            }),
            void 0 !== e && (0, t.reflectionMergePartial)(this, _, e),
            _
          );
        }
        internalBinaryRead(e, _, E, o) {
          let n = null != o ? o : this.create(),
            r = e.pos + _;
          for (; e.pos < r; ) {
            let [_, o] = e.tag();
            if (1 === _) n.value = e.bytes();
            else {
              let r = E.readUnknownField;
              if ("throw" === r)
                throw new globalThis.Error(
                  "Unknown field "
                    .concat(_, " (wire type ")
                    .concat(o, ") for ")
                    .concat(this.typeName)
                );
              let a = e.skip(o);
              !1 !== r &&
                (!0 === r ? t.UnknownFieldHandler.onRead : r)(
                  this.typeName,
                  n,
                  _,
                  o,
                  a
                );
            }
          }
          return n;
        }
        internalBinaryWrite(e, _, E) {
          e.value.length && _.tag(1, t.WireType.LengthDelimited).bytes(e.value);
          let o = E.writeUnknownFields;
          return (
            !1 !== o &&
              (!0 == o ? t.UnknownFieldHandler.onWrite : o)(
                this.typeName,
                e,
                _
              ),
            _
          );
        }
        constructor() {
          super("google.protobuf.BytesValue", [
            { no: 1, name: "value", kind: "scalar", T: 12 },
          ]);
        }
      }
      new L();
    },
    233736: function (e, _, E) {
      "use strict";
      function t(e, _, E, t) {
        if (e === _) return !0;
        let o = Object.keys(e),
          n = Object.keys(_);
        if (o.length !== n.length)
          return (
            null != t &&
              t(
                "shallowEqual: unequal key lengths "
                  .concat(o.length, " !=== ")
                  .concat(n.length)
              ),
            !1
          );
        let r = [];
        for (let n = 0; n < o.length; n++) {
          let a = o[n];
          if (e[a] !== _[a] && (null == E || !E.includes(a))) {
            if (null == t) return !1;
            r.push(a);
          }
        }
        return (
          null != t &&
            r.length > 0 &&
            t("shallowEqual: unequal keys: ".concat(r.join(", "))),
          0 === r.length
        );
      }
      function o(e, _) {
        return (
          null != _ && e.length === _.length && !e.some((e, E) => _[E] !== e)
        );
      }
      E.r(_),
        E.d(_, {
          default: function () {
            return t;
          },
          areArraysShallowEqual: function () {
            return o;
          },
        }),
        E("424973");
    },
    95410: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return t;
          },
        });
      var t = E("419243").impl;
    },
    419243: function (e, _, E) {
      "use strict";
      let t;
      E.r(_),
        E.d(_, {
          ObjectStorage: function () {
            return o;
          },
          impl: function () {
            return n;
          },
        });
      try {
        t = window.localStorage;
      } catch (e) {}
      try {
        delete window.localStorage;
      } catch (e) {}
      class o {
        get(e, _) {
          return this.storage.hasOwnProperty(e) ? this.storage[e] : _;
        }
        set(e, _) {
          this.storage[e] = _;
        }
        remove(e) {
          delete this.storage[e];
        }
        clear() {
          this.storage = {};
        }
        stringify() {
          return JSON.stringify(this.storage);
        }
        asyncGetRaw(e, _) {
          return Promise.resolve(t.getItem(e));
        }
        setRaw(e, _) {
          t.setItem(e, _);
        }
        getAfterRefresh(e) {
          return Promise.resolve(this.get(e));
        }
        constructor() {
          this.storage = {};
        }
      }
      let n = !(function () {
        let e = "test";
        try {
          return t.setItem(e, e), t.removeItem(e), !0;
        } catch (e) {
          return !1;
        }
      })()
        ? new o()
        : new (class e {
            get(e, _) {
              let E = t.getItem(e);
              if (null != E)
                try {
                  E = JSON.parse(E);
                } catch (e) {
                  E = _;
                }
              else E = _;
              return E;
            }
            set(e, _) {
              t.setItem(e, JSON.stringify(_));
            }
            remove(e) {
              t.removeItem(e);
            }
            clear() {
              t.clear();
            }
            stringify() {
              return JSON.stringify(t || {});
            }
            asyncGetRaw(e, _) {
              return Promise.resolve(t.getItem(e));
            }
            setRaw(e, _) {
              t.setItem(e, _);
            }
            getAfterRefresh(e) {
              return Promise.resolve(this.get(e));
            }
          })();
    },
    825573: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          fontsToPreload: function () {
            return t;
          },
        });
      let t = [
        "ggsans-400-normalitalic",
        "ggsans-700-bold",
        "ggsans-700-bolditalic",
        "notosans-400-normalitalic",
        "notosans-700-bold",
        "notosans-700-bolditalic",
      ];
    },
    102053: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return n;
          },
        }),
        E("843762"),
        E("424973");
      let t =
          null == E.g.__getTotalRequireTime
            ? () => 0
            : () => E.g.__getTotalRequireTime(),
        o = "undefined" != typeof performance;
      var n = new (class e {
        get isTracing() {
          return (
            !!o &&
            !!this.isTracing_ &&
            (!(Date.now() > this.endTime_) || ((this.isTracing_ = !1), !1))
          );
        }
        get endTime() {
          return this.endTime_;
        }
        set endTime(e) {
          (this.endTime_ = e), (this.isTracing_ = !0);
        }
        resumeTracing() {
          !this.isTracing &&
            (this.logGroups.unshift({
              index: this.logGroups.length,
              timestamp: Date.now(),
              logs: [],
              nativeLogs: [],
            }),
            (this.logs = this.logGroups[0].logs)),
            (this.endTime = Date.now() + 1e4);
        }
        mark(e, _, E) {
          this.isTracing &&
            (this.logs.push({
              emoji: e,
              prefix: "".concat(this.prefix),
              log: _,
              delta: E,
              timestamp: Date.now(),
            }),
            this.addImportLogDetail());
        }
        markAndLog(e, _, E, t) {
          e.log(E),
            this.isTracing &&
              (this.logs.push({
                emoji: _,
                prefix: this.prefix,
                log: E,
                delta: t,
                timestamp: Date.now(),
              }),
              this.addImportLogDetail());
        }
        addImportLogDetail() {
          let e = t();
          e - this.lastImportDuration > 25 &&
            (this.addDetail("JS Imports", Math.ceil(e) + "ms"),
            (this.lastImportDuration = e));
        }
        markWithDelta(e, _) {
          let E = this.logs[this.logs.length - 1];
          this.mark(
            e,
            _,
            null != E && null != E.timestamp ? Date.now() - E.timestamp : void 0
          );
        }
        markAt(e, _, E) {
          var t, o;
          if (!this.isTracing) return;
          let n = 0;
          for (; n < this.logs.length; n++) {
            let { timestamp: e } = this.logs[n];
            if (null != e && e > E) break;
          }
          this.logs.splice(n, 0, {
            emoji: e,
            log: _,
            timestamp: E,
            prefix:
              null !==
                (o =
                  null === (t = this.logs[n]) || void 0 === t
                    ? void 0
                    : t.prefix) && void 0 !== o
                ? o
                : "",
          });
        }
        addDetail(e, _) {
          this.isTracing &&
            this.logs.push({
              emoji: this.logs[this.logs.length - 1].emoji,
              prefix: this.prefix,
              log: "  ↪ ".concat(e, " ").concat(_),
            });
        }
        time(e, _, E) {
          if (!this.isTracing) return E();
          let t = this.prefix;
          this.mark(e, "Start ".concat(_)), (this.prefix += "| ");
          let o = Date.now(),
            n = E(),
            r = Date.now() - o;
          return (this.prefix = t), this.mark(e, "Finish ".concat(_), r), n;
        }
        async timeAsync(e, _, E) {
          if (!this.isTracing) return E();
          this.mark(e, "Start ".concat(_));
          let t = Date.now(),
            o = await E(),
            n = Date.now() - t;
          return this.mark(e, "Finish ".concat(_), n), o;
        }
        setServerTrace(e) {
          this.logGroups[0].serverTrace = e;
        }
        constructor() {
          (this.isTracing_ = !0),
            (this.endTime_ = Date.now() + 15e3),
            (this.lastImportDuration = 0),
            (this.logGroups = [
              { index: 0, timestamp: Date.now(), logs: [], nativeLogs: [] },
            ]),
            (this.logs = this.logGroups[0].logs),
            (this.prefix = "");
        }
      })();
    },
    704744: function (e, _, E) {
      "use strict";
      E.r(_);
    },
    811022: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          setLogFn: function () {
            return r;
          },
          default: function () {
            return t;
          },
        }),
        E("222007");
      var t,
        o = E("14334");
      let n = () => {};
      function r(e) {
        n = e;
      }
      t = class {
        constructor(e = "default") {
          var _ = this;
          (this.logDangerously = function (e) {
            for (
              var E = arguments.length, t = Array(E > 1 ? E - 1 : 0), o = 1;
              o < E;
              o++
            )
              t[o - 1] = arguments[o];
            n(_.name, "log", e, ...t);
          }),
            (this.log = function (e) {
              for (
                var E = arguments.length, t = Array(E > 1 ? E - 1 : 0), r = 1;
                r < E;
                r++
              )
                t[r - 1] = arguments[r];
              (0, o.checkLogForPII)(e, ...t), n(_.name, "log", e, ...t);
            }),
            (this.verboseDangerously = function (e) {
              for (
                var E = arguments.length, t = Array(E > 1 ? E - 1 : 0), o = 1;
                o < E;
                o++
              )
                t[o - 1] = arguments[o];
              n(_.name, "debug", e, ...t);
            }),
            (this.verbose = function (e) {
              for (
                var E = arguments.length, t = Array(E > 1 ? E - 1 : 0), r = 1;
                r < E;
                r++
              )
                t[r - 1] = arguments[r];
              (0, o.checkLogForPII)(e, ...t), n(_.name, "debug", e, ...t);
            }),
            (this.info = function (e) {
              for (
                var E = arguments.length, t = Array(E > 1 ? E - 1 : 0), r = 1;
                r < E;
                r++
              )
                t[r - 1] = arguments[r];
              (0, o.checkLogForPII)(e, ...t), n(_.name, "info", e, ...t);
            }),
            (this.warn = function (e) {
              for (
                var E = arguments.length, t = Array(E > 1 ? E - 1 : 0), r = 1;
                r < E;
                r++
              )
                t[r - 1] = arguments[r];
              (0, o.checkLogForPII)(e, ...t), n(_.name, "warn", e, ...t);
            }),
            (this.error = function (e) {
              for (
                var E = arguments.length, t = Array(E > 1 ? E - 1 : 0), r = 1;
                r < E;
                r++
              )
                t[r - 1] = arguments[r];
              (0, o.checkLogForPII)(e, ...t), n(_.name, "error", e, ...t);
            }),
            (this.trace = function (e) {
              for (
                var E = arguments.length, t = Array(E > 1 ? E - 1 : 0), o = 1;
                o < E;
                o++
              )
                t[o - 1] = arguments[o];
              n(_.name, "trace", e, ...t);
            }),
            (this.time = (e, _) => {
              let E = Date.now(),
                t = _();
              return this.log(e, Date.now() - E), t;
            }),
            (this.fileOnly = function (e) {
              for (
                var E = arguments.length, t = Array(E > 1 ? E - 1 : 0), o = 1;
                o < E;
                o++
              )
                t[o - 1] = arguments[o];
              n(_.name, "file-only", e, ...t);
            }),
            (this.name = e);
        }
      };
    },
    14334: function (e, _, E) {
      "use strict";
      function t(e) {
        for (
          var _ = arguments.length, E = Array(_ > 1 ? _ - 1 : 0), t = 1;
          t < _;
          t++
        )
          E[t - 1] = arguments[t];
      }
      E.r(_),
        E.d(_, {
          checkLogForPII: function () {
            return t;
          },
        }),
        E("70102");
    },
    817792: function (e, _, E) {
      "use strict";
      var t, o, n, r;
      E.r(_),
        E.d(_, {
          DomainMigrationEventType: function () {
            return t;
          },
          DomainMigrationMessageFrom: function () {
            return o;
          },
          DOMAIN_MIGRATION_SUCCESS_KEY: function () {
            return a;
          },
          sendPostMessage: function () {
            return i;
          },
          extractMessage: function () {
            return I;
          },
        }),
        ((n = t || (t = {}))[(n.SKIP_MIGRATION = 0)] = "SKIP_MIGRATION"),
        (n[(n.SEND_DATA = 1)] = "SEND_DATA"),
        (n[(n.DATA_MIGRATED = 2)] = "DATA_MIGRATED"),
        (n[(n.DATA_MIGRATED_CONFIRMED = 3)] = "DATA_MIGRATED_CONFIRMED"),
        ((r = o || (o = {}))[(r.MIGRATION_SOURCE_DOMAIN = 0)] =
          "MIGRATION_SOURCE_DOMAIN"),
        (r[(r.MIGRATION_DESTINATION_DOMAIN = 1)] =
          "MIGRATION_DESTINATION_DOMAIN");
      let a = "domainMigrationSuccess";
      function i(e, _, E) {
        let t =
          0 === E
            ? window.GLOBAL_ENV.MIGRATION_DESTINATION_ORIGIN
            : window.GLOBAL_ENV.MIGRATION_SOURCE_ORIGIN;
        _.postMessage({ domainMigrationEvent: e }, t);
      }
      function I(e, _) {
        var E;
        return !(function (e, _) {
          let E =
            0 === _
              ? window.GLOBAL_ENV.MIGRATION_DESTINATION_ORIGIN
              : window.GLOBAL_ENV.MIGRATION_SOURCE_ORIGIN;
          return e.origin === E && null != e.data.domainMigrationEvent && !0;
        })(e, _)
          ? null
          : null === (E = e.data) || void 0 === E
            ? void 0
            : E.domainMigrationEvent;
      }
    },
    811335: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return i;
          },
        });
      var t,
        o,
        n = E("44170");
      ((t = o || (o = {})).VERTICAL = "vertical"),
        (t.HORIZONTAL = "horizontal");
      let r = { open: !1, orientation: null };
      class a extends n.EventEmitter {
        get orientations() {
          return Object.values(o);
        }
        get state() {
          return r;
        }
        check() {
          let e =
              (function () {
                try {
                  return window.outerWidth - window.innerWidth;
                } catch (e) {
                  return 0;
                }
              })() > 160,
            _ =
              (function () {
                try {
                  return window.outerHeight - window.innerHeight;
                } catch (e) {
                  return 0;
                }
              })() > 160,
            E = e ? "vertical" : "horizontal";
          if (
            !(_ && e) &&
            ((function () {
              try {
                return window.Firebug.chrome.isInitialized;
              } catch (e) {
                return !1;
              }
            })() ||
              e ||
              _)
          ) {
            let e = r.open;
            (r = { open: !0, orientation: E }),
              (!e || r.orientation !== E) && this.emit("changed", r);
          } else r.open && ((r.open = !1), this.emit("changed", r));
        }
        constructor() {
          super(), setInterval(() => this.check(), 500);
        }
      }
      var i = a;
    },
    404073: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          default: function () {
            return r;
          },
        });
      var t = E("811335"),
        o = E("394846");
      function n(e) {
        let _ =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0,
          E =
            "" !== e.Messages.XSSDefenses ? e.Messages.XSSDefenses : e.Messages;
        null != E.SELF_XSS_HEADER &&
          (console.log(
            "%c".concat(E.SELF_XSS_HEADER),
            "color: #5865f2; -webkit-text-stroke: 2px black; font-size: 72px; font-weight: bold;"
          ),
          console.log("%c".concat(E.SELF_XSS_LINE_1), "font-size: 16px;"),
          console.log(
            "%c".concat(E.SELF_XSS_LINE_2),
            "font-size: 18px; font-weight: bold; color: red;"
          ),
          _ >= 4
            ? (console.log("%c".concat(E.SELF_XSS_LINE_3), "font-size: 16px;"),
              console.log(
                "%c".concat(
                  E.SELF_XSS_LINE_4.format({
                    url: ""
                      .concat(location.protocol)
                      .concat(window.GLOBAL_ENV.MARKETING_ENDPOINT, "/jobs"),
                  })
                ),
                "font-size: 16px;"
              ))
            : setTimeout(() => n(e, _ + 1), 1e3));
      }
      var r = (e, _, E) => {
        if (null != E && "0.0.0" === E.remoteApp.getVersion()) return;
        let r = new t.default();
        if (null != E) {
          if (null != E.window.setDevtoolsCallbacks)
            E.window.setDevtoolsCallbacks(
              () => {
                _.hideToken(), n(e);
              },
              () => {
                _.showToken();
              }
            );
          else {
            let t = E.window.webContents;
            t.removeAllListeners("devtools-opened"),
              t.on("devtools-opened", () => {
                _.hideToken(), n(e);
              }),
              t.on("devtools-closed", _.showToken);
          }
        } else
          !o.isMobile &&
            !o.isTablet &&
            r.on("changed", E => {
              let { open: t } = E;
              t ? (_.hideToken(), n(e)) : _.showToken();
            });
        window.addEventListener("beforeunload", e => {
          e.isTrusted && _.showToken();
        });
      };
    },
    118810: function (e, _, E) {
      "use strict";
      function t(e, _) {
        var E, t;
        if (null == e) return !1;
        let o =
          null == e
            ? void 0
            : null === (E = e.ownerDocument) || void 0 === E
              ? void 0
              : E.defaultView;
        if (null == o)
          return (
            console.warn("Unable to determine render window for element", e), !1
          );
        let n =
            null !== (t = null == _ ? void 0 : _.name) && void 0 !== t
              ? t
              : "Element",
          r = o[n];
        return null == r
          ? (console.warn(
              'Unable to find element constructor "'.concat(n, '" in'),
              o
            ),
            !1)
          : e instanceof r;
      }
      E.r(_),
        E.d(_, {
          isElement: function () {
            return t;
          },
        });
    },
    503586: function (e, _, E) {
      "use strict";
      E.r(_),
        E.d(_, {
          batchUpdates: function () {
            return o;
          },
        });
      var t = E("817736");
      function o(e) {
        (0, t.unstable_batchedUpdates)(e);
      }
    },
    435660: function (e, _, E) {
      "use strict";
      var t;
      function o(e) {}
      function n(e, _) {}
      E.r(_),
        E.d(_, {
          mark: function () {
            return o;
          },
          measure: function () {
            return n;
          },
        }),
        E.g.performance;
    },
    190709: function (e, _, E) {
      "use strict";
      E.r(_), E("222007"), E("274635");
      var t = E("464324");
      E("985745");
      var o = E("383536"),
        n = E.n(o);
      (window.platform = n),
        null == window.ResizeObserver &&
          (window.ResizeObserver = t.ResizeObserver),
        "object" != typeof globalThis && (window.globalThis = window),
        (Map.prototype.toJSON = function () {
          return Array.from(this);
        }),
        (Set.prototype.toJSON = function () {
          return Array.from(this);
        });
      {
        class DOMPoint {
          static fromPoint(e) {
            return new DOMPoint(
              e.x,
              e.y,
              void 0 !== e.z ? e.z : 0,
              void 0 !== e.w ? e.w : 1
            );
          }
          matrixTransform(e) {
            return (e.is2D || e instanceof SVGMatrix) &&
              0 === this.z &&
              1 === this.w
              ? new DOMPoint(
                  this.x * e.a + this.y * e.c + e.e,
                  this.x * e.b + this.y * e.d + e.f,
                  0,
                  1
                )
              : new DOMPoint(
                  this.x * e.m11 +
                    this.y * e.m21 +
                    this.z * e.m31 +
                    this.w * e.m41,
                  this.x * e.m12 +
                    this.y * e.m22 +
                    this.z * e.m32 +
                    this.w * e.m42,
                  this.x * e.m13 +
                    this.y * e.m23 +
                    this.z * e.m33 +
                    this.w * e.m43,
                  this.x * e.m14 +
                    this.y * e.m24 +
                    this.z * e.m34 +
                    this.w * e.m44
                );
          }
          toJSON() {
            return { x: this.x, y: this.y, z: this.z, w: this.w };
          }
          constructor(e = 0, _ = 0, E = 0, t = 1) {
            (this.x = e), (this.y = _), (this.z = E), (this.w = t);
          }
        }
        null == window.DOMPoint && (window.DOMPoint = DOMPoint);
      }
      {
        class DOMRect {
          static fromRect(e) {
            return new DOMRect(e.x, e.y, e.width, e.height);
          }
          get top() {
            return this.y;
          }
          get left() {
            return this.x;
          }
          get right() {
            return this.x + this.width;
          }
          get bottom() {
            return this.y + this.height;
          }
          toJSON() {
            return {
              x: this.x,
              y: this.y,
              width: this.width,
              height: this.height,
              top: this.top,
              left: this.left,
              right: this.right,
              bottom: this.bottom,
            };
          }
          constructor(e = 0, _ = 0, E = 0, t = 0) {
            (this.x = e), (this.y = _), (this.width = E), (this.height = t);
          }
        }
        null == window.DOMRect && (window.DOMRect = DOMRect);
      }
      null == window.TextEncoder && E("705479");
    },
  },
]);
//# sourceMappingURL=90486.d552dcf31a161099044b.js.map
